; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\gui__getcursorpos.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\gui__getcursorpos.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -I.\GUI\AntiAlias -I.\GUI\Config -I.\GUI\ConvertColor -I.\GUI\ConvertMono -I.\GUI\Core -I.\GUI\Font -I.\GUI\GUI_X -I.\GUI\JPEG -I.\GUI\LCDDriver -I.\GUI\MemDev -I.\GUI\MultiLayer -I.\GUI\Widget -I.\GUI\WM -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\INC\ST\STM32F10x -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\gui__getcursorpos.crf GUI\Core\GUI__GetCursorPos.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=1

                  GUI__GetCursorPosX PROC
;;;39     */
;;;40     int GUI__GetCursorPosX(const char GUI_UNI_PTR * s, int Index, int MaxNumChars) {
000000  b5f7              PUSH     {r0-r2,r4-r7,lr}
000002  460c              MOV      r4,r1
000004  4615              MOV      r5,r2
;;;41       #if GUI_SUPPORT_ARABIC
;;;42         return GUI__GetCursorPosXArabic(s, Index, MaxNumChars);
;;;43       #else
;;;44         int CursorPosX = 0;
000006  f04f0600          MOV      r6,#0
;;;45         U16 Char;
;;;46         GUI_USE_PARA(MaxNumChars);
00000a  bf00              NOP      
;;;47         while (Index--) {
00000c  e007              B        |L1.30|
                  |L1.14|
;;;48           Char        = GUI_UC__GetCharCodeInc(&s);
00000e  4668              MOV      r0,sp
000010  f7fffffe          BL       GUI_UC__GetCharCodeInc
000014  4607              MOV      r7,r0
;;;49           CursorPosX += GUI_GetCharDistX(Char);
000016  4638              MOV      r0,r7
000018  f7fffffe          BL       GUI_GetCharDistX
00001c  4406              ADD      r6,r6,r0
                  |L1.30|
00001e  0020              MOVS     r0,r4                 ;47
000020  f1a40401          SUB      r4,r4,#1              ;47
000024  d1f3              BNE      |L1.14|
;;;50         }
;;;51         return CursorPosX;
000026  4630              MOV      r0,r6
;;;52       #endif
;;;53     }
000028  bdfe              POP      {r1-r7,pc}
;;;54     
                          ENDP

                  GUI__GetCursorPosChar PROC
;;;66     */
;;;67     int GUI__GetCursorPosChar(const char GUI_UNI_PTR * s, int x, int MaxNumChars) {
00002a  e92d47f0          PUSH     {r4-r10,lr}
00002e  4604              MOV      r4,r0
000030  460d              MOV      r5,r1
000032  4616              MOV      r6,r2
;;;68       #if GUI_SUPPORT_ARABIC
;;;69         return GUI__GetCursorPosCharArabic(s, x, MaxNumChars);
;;;70       #else
;;;71         int SizeX = 0;
000034  f04f0700          MOV      r7,#0
;;;72         const char GUI_UNI_PTR * p;
;;;73         p = s;
000038  46a0              MOV      r8,r4
;;;74         while (--MaxNumChars> 0) {
00003a  e012              B        |L1.98|
                  |L1.60|
;;;75           U16 Char;
;;;76           Char   = GUI_UC_GetCharCode(s);
00003c  4620              MOV      r0,r4
00003e  f7fffffe          BL       GUI_UC_GetCharCode
000042  4681              MOV      r9,r0
;;;77           SizeX += GUI_GetCharDistX(Char);
000044  4648              MOV      r0,r9
000046  f7fffffe          BL       GUI_GetCharDistX
00004a  4407              ADD      r7,r7,r0
;;;78           if (!Char || (SizeX > x)) {
00004c  f1b90f00          CMP      r9,#0
000050  d001              BEQ      |L1.86|
000052  42af              CMP      r7,r5
000054  dd00              BLE      |L1.88|
                  |L1.86|
;;;79             break;
000056  e007              B        |L1.104|
                  |L1.88|
;;;80           }
;;;81           s += GUI_UC_GetCharSize(s);
000058  4620              MOV      r0,r4
00005a  f7fffffe          BL       GUI_UC_GetCharSize
00005e  4404              ADD      r4,r4,r0
;;;82         }
000060  bf00              NOP      
                  |L1.98|
000062  1e70              SUBS     r0,r6,#1              ;74
000064  1e06              SUBS     r6,r0,#0              ;74
000066  dce9              BGT      |L1.60|
                  |L1.104|
000068  bf00              NOP                            ;79
;;;83         return GUI_UC__NumBytes2NumChars(p, s - p);
00006a  eba40108          SUB      r1,r4,r8
00006e  4640              MOV      r0,r8
000070  f7fffffe          BL       GUI_UC__NumBytes2NumChars
;;;84       #endif
;;;85     }
000074  e8bd87f0          POP      {r4-r10,pc}
;;;86     
                          ENDP

                  GUI__GetCursorCharacter PROC
;;;90     */
;;;91     U16 GUI__GetCursorCharacter(const char GUI_UNI_PTR * s, int Index, int MaxNumChars, int * pIsRTL) {
000078  e92d41f0          PUSH     {r4-r8,lr}
00007c  4605              MOV      r5,r0
00007e  460f              MOV      r7,r1
000080  4616              MOV      r6,r2
000082  461c              MOV      r4,r3
;;;92       #if GUI_SUPPORT_ARABIC
;;;93         return GUI__GetCursorCharacterArabic(s, Index, MaxNumChars, pIsRTL);
;;;94       #else
;;;95         GUI_USE_PARA(MaxNumChars);
000084  bf00              NOP      
;;;96         if (pIsRTL) {
000086  b114              CBZ      r4,|L1.142|
;;;97           *pIsRTL = 0;
000088  f04f0000          MOV      r0,#0
00008c  6020              STR      r0,[r4,#0]
                  |L1.142|
;;;98         }
;;;99         return GUI_UC_GetCharCode(s + Index);
00008e  19e8              ADDS     r0,r5,r7
000090  f7fffffe          BL       GUI_UC_GetCharCode
;;;100      #endif
;;;101    }
000094  e8bd81f0          POP      {r4-r8,pc}
;;;102    
                          ENDP

