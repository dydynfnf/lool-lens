; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\adler32.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\adler32.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\FWlib\inc -I.\user -I.\CM3 -I.\MALLOC -I.\TFT -I.\EMWIN\EMWIN_INC -I.\EMWIN\DEMO -I.\FATFS -I.\SDIO -I.\PNG -IE:\material\GUI\STM32·Ü¶·°å-emwin+fatfs\RTE -Id:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.1.0\Device\Include -Id:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=515 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\adler32.crf PNG\adler32.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  adler32 PROC
;;;56     /* ========================================================================= */
;;;57     uLong ZEXPORT adler32(adler, buf, len)
000000  b570              PUSH     {r4-r6,lr}
;;;58         uLong adler;
;;;59         const Bytef *buf;
;;;60         uInt len;
;;;61     {
000002  4603              MOV      r3,r0
000004  460c              MOV      r4,r1
;;;62         unsigned long sum2;
;;;63         unsigned n;
;;;64     
;;;65         /* split Adler-32 into component sums */
;;;66         sum2 = (adler >> 16) & 0xffff;
000006  f64f70ff          MOV      r0,#0xffff
00000a  ea004113          AND      r1,r0,r3,LSR #16
;;;67         adler &= 0xffff;
00000e  b29b              UXTH     r3,r3
;;;68     
;;;69         /* in case user likes doing a byte at a time, keep it fast */
;;;70         if (len == 1) {
000010  2a01              CMP      r2,#1
000012  d10f              BNE      |L1.52|
;;;71             adler += buf[0];
000014  7820              LDRB     r0,[r4,#0]
000016  4403              ADD      r3,r3,r0
;;;72             if (adler >= BASE)
000018  f64f70f1          MOV      r0,#0xfff1
00001c  4283              CMP      r3,r0
00001e  d300              BCC      |L1.34|
;;;73                 adler -= BASE;
000020  1a1b              SUBS     r3,r3,r0
                  |L1.34|
;;;74             sum2 += adler;
000022  4419              ADD      r1,r1,r3
;;;75             if (sum2 >= BASE)
000024  f64f70f1          MOV      r0,#0xfff1
000028  4281              CMP      r1,r0
00002a  d300              BCC      |L1.46|
;;;76                 sum2 -= BASE;
00002c  1a09              SUBS     r1,r1,r0
                  |L1.46|
;;;77             return adler | (sum2 << 16);
00002e  ea434001          ORR      r0,r3,r1,LSL #16
                  |L1.50|
;;;78         }
;;;79     
;;;80         /* initial Adler-32 value (deferred check for len == 1 speed) */
;;;81         if (buf == Z_NULL)
;;;82             return 1L;
;;;83     
;;;84         /* in case short lengths are provided, keep it somewhat fast */
;;;85         if (len < 16) {
;;;86             while (len--) {
;;;87                 adler += *buf++;
;;;88                 sum2 += adler;
;;;89             }
;;;90             if (adler >= BASE)
;;;91                 adler -= BASE;
;;;92             MOD4(sum2);             /* only added so many BASE's */
;;;93             return adler | (sum2 << 16);
;;;94         }
;;;95     
;;;96         /* do length NMAX blocks -- requires just one modulo operation */
;;;97         while (len >= NMAX) {
;;;98             len -= NMAX;
;;;99             n = NMAX / 16;          /* NMAX is divisible by 16 */
;;;100            do {
;;;101                DO16(buf);          /* 16 sums unrolled */
;;;102                buf += 16;
;;;103            } while (--n);
;;;104            MOD(adler);
;;;105            MOD(sum2);
;;;106        }
;;;107    
;;;108        /* do remaining bytes (less than NMAX, still just one modulo) */
;;;109        if (len) {                  /* avoid modulos if none remaining */
;;;110            while (len >= 16) {
;;;111                len -= 16;
;;;112                DO16(buf);
;;;113                buf += 16;
;;;114            }
;;;115            while (len--) {
;;;116                adler += *buf++;
;;;117                sum2 += adler;
;;;118            }
;;;119            MOD(adler);
;;;120            MOD(sum2);
;;;121        }
;;;122    
;;;123        /* return recombined sums */
;;;124        return adler | (sum2 << 16);
;;;125    }
000032  bd70              POP      {r4-r6,pc}
                  |L1.52|
000034  b90c              CBNZ     r4,|L1.58|
000036  2001              MOVS     r0,#1                 ;82
000038  e7fb              B        |L1.50|
                  |L1.58|
00003a  2a10              CMP      r2,#0x10              ;85
00003c  d216              BCS      |L1.108|
00003e  e003              B        |L1.72|
                  |L1.64|
000040  f8146b01          LDRB     r6,[r4],#1            ;87
000044  4433              ADD      r3,r3,r6              ;87
000046  4419              ADD      r1,r1,r3              ;88
                  |L1.72|
000048  0010              MOVS     r0,r2                 ;86
00004a  f1a20201          SUB      r2,r2,#1              ;86
00004e  d1f7              BNE      |L1.64|
000050  f64f70f1          MOV      r0,#0xfff1            ;90
000054  4283              CMP      r3,r0                 ;90
000056  d300              BCC      |L1.90|
000058  1a1b              SUBS     r3,r3,r0              ;91
                  |L1.90|
00005a  f64f70f1          MOV      r0,#0xfff1            ;92
00005e  fbb1f6f0          UDIV     r6,r1,r0              ;92
000062  fb001116          MLS      r1,r0,r6,r1           ;92
000066  ea434001          ORR      r0,r3,r1,LSL #16      ;93
00006a  e7e2              B        |L1.50|
                  |L1.108|
00006c  e043              B        |L1.246|
                  |L1.110|
00006e  f5a252a8          SUB      r2,r2,#0x1500         ;98
000072  3ab0              SUBS     r2,r2,#0xb0           ;98
000074  f240155b          MOV      r5,#0x15b             ;99
000078  bf00              NOP                            ;100
                  |L1.122|
00007a  7820              LDRB     r0,[r4,#0]            ;101
00007c  4403              ADD      r3,r3,r0              ;101
00007e  4419              ADD      r1,r1,r3              ;101
000080  7860              LDRB     r0,[r4,#1]            ;101
000082  4403              ADD      r3,r3,r0              ;101
000084  4419              ADD      r1,r1,r3              ;101
000086  78a0              LDRB     r0,[r4,#2]            ;101
000088  4403              ADD      r3,r3,r0              ;101
00008a  4419              ADD      r1,r1,r3              ;101
00008c  78e0              LDRB     r0,[r4,#3]            ;101
00008e  4403              ADD      r3,r3,r0              ;101
000090  4419              ADD      r1,r1,r3              ;101
000092  7920              LDRB     r0,[r4,#4]            ;101
000094  4403              ADD      r3,r3,r0              ;101
000096  4419              ADD      r1,r1,r3              ;101
000098  7960              LDRB     r0,[r4,#5]            ;101
00009a  4403              ADD      r3,r3,r0              ;101
00009c  4419              ADD      r1,r1,r3              ;101
00009e  79a0              LDRB     r0,[r4,#6]            ;101
0000a0  4403              ADD      r3,r3,r0              ;101
0000a2  4419              ADD      r1,r1,r3              ;101
0000a4  79e0              LDRB     r0,[r4,#7]            ;101
0000a6  4403              ADD      r3,r3,r0              ;101
0000a8  4419              ADD      r1,r1,r3              ;101
0000aa  7a20              LDRB     r0,[r4,#8]            ;101
0000ac  4403              ADD      r3,r3,r0              ;101
0000ae  4419              ADD      r1,r1,r3              ;101
0000b0  7a60              LDRB     r0,[r4,#9]            ;101
0000b2  4403              ADD      r3,r3,r0              ;101
0000b4  4419              ADD      r1,r1,r3              ;101
0000b6  7aa0              LDRB     r0,[r4,#0xa]          ;101
0000b8  4403              ADD      r3,r3,r0              ;101
0000ba  4419              ADD      r1,r1,r3              ;101
0000bc  7ae0              LDRB     r0,[r4,#0xb]          ;101
0000be  4403              ADD      r3,r3,r0              ;101
0000c0  4419              ADD      r1,r1,r3              ;101
0000c2  7b20              LDRB     r0,[r4,#0xc]          ;101
0000c4  4403              ADD      r3,r3,r0              ;101
0000c6  4419              ADD      r1,r1,r3              ;101
0000c8  7b60              LDRB     r0,[r4,#0xd]          ;101
0000ca  4403              ADD      r3,r3,r0              ;101
0000cc  4419              ADD      r1,r1,r3              ;101
0000ce  7ba0              LDRB     r0,[r4,#0xe]          ;101
0000d0  4403              ADD      r3,r3,r0              ;101
0000d2  4419              ADD      r1,r1,r3              ;101
0000d4  7be0              LDRB     r0,[r4,#0xf]          ;101
0000d6  4403              ADD      r3,r3,r0              ;101
0000d8  4419              ADD      r1,r1,r3              ;101
0000da  3410              ADDS     r4,r4,#0x10           ;102
0000dc  1e68              SUBS     r0,r5,#1              ;103
0000de  0005              MOVS     r5,r0                 ;103
0000e0  d1cb              BNE      |L1.122|
0000e2  f64f70f1          MOV      r0,#0xfff1            ;104
0000e6  fbb3f6f0          UDIV     r6,r3,r0              ;104
0000ea  fb003316          MLS      r3,r0,r6,r3           ;104
0000ee  fbb1f6f0          UDIV     r6,r1,r0              ;105
0000f2  fb001116          MLS      r1,r0,r6,r1           ;105
                  |L1.246|
0000f6  f24150b0          MOV      r0,#0x15b0            ;97
0000fa  4282              CMP      r2,r0                 ;97
0000fc  d2b7              BCS      |L1.110|
0000fe  2a00              CMP      r2,#0                 ;109
000100  d047              BEQ      |L1.402|
000102  e031              B        |L1.360|
                  |L1.260|
000104  3a10              SUBS     r2,r2,#0x10           ;111
000106  7820              LDRB     r0,[r4,#0]            ;112
000108  4403              ADD      r3,r3,r0              ;112
00010a  4419              ADD      r1,r1,r3              ;112
00010c  7860              LDRB     r0,[r4,#1]            ;112
00010e  4403              ADD      r3,r3,r0              ;112
000110  4419              ADD      r1,r1,r3              ;112
000112  78a0              LDRB     r0,[r4,#2]            ;112
000114  4403              ADD      r3,r3,r0              ;112
000116  4419              ADD      r1,r1,r3              ;112
000118  78e0              LDRB     r0,[r4,#3]            ;112
00011a  4403              ADD      r3,r3,r0              ;112
00011c  4419              ADD      r1,r1,r3              ;112
00011e  7920              LDRB     r0,[r4,#4]            ;112
000120  4403              ADD      r3,r3,r0              ;112
000122  4419              ADD      r1,r1,r3              ;112
000124  7960              LDRB     r0,[r4,#5]            ;112
000126  4403              ADD      r3,r3,r0              ;112
000128  4419              ADD      r1,r1,r3              ;112
00012a  79a0              LDRB     r0,[r4,#6]            ;112
00012c  4403              ADD      r3,r3,r0              ;112
00012e  4419              ADD      r1,r1,r3              ;112
000130  79e0              LDRB     r0,[r4,#7]            ;112
000132  4403              ADD      r3,r3,r0              ;112
000134  4419              ADD      r1,r1,r3              ;112
000136  7a20              LDRB     r0,[r4,#8]            ;112
000138  4403              ADD      r3,r3,r0              ;112
00013a  4419              ADD      r1,r1,r3              ;112
00013c  7a60              LDRB     r0,[r4,#9]            ;112
00013e  4403              ADD      r3,r3,r0              ;112
000140  4419              ADD      r1,r1,r3              ;112
000142  7aa0              LDRB     r0,[r4,#0xa]          ;112
000144  4403              ADD      r3,r3,r0              ;112
000146  4419              ADD      r1,r1,r3              ;112
000148  7ae0              LDRB     r0,[r4,#0xb]          ;112
00014a  4403              ADD      r3,r3,r0              ;112
00014c  4419              ADD      r1,r1,r3              ;112
00014e  7b20              LDRB     r0,[r4,#0xc]          ;112
000150  4403              ADD      r3,r3,r0              ;112
000152  4419              ADD      r1,r1,r3              ;112
000154  7b60              LDRB     r0,[r4,#0xd]          ;112
000156  4403              ADD      r3,r3,r0              ;112
000158  4419              ADD      r1,r1,r3              ;112
00015a  7ba0              LDRB     r0,[r4,#0xe]          ;112
00015c  4403              ADD      r3,r3,r0              ;112
00015e  4419              ADD      r1,r1,r3              ;112
000160  7be0              LDRB     r0,[r4,#0xf]          ;112
000162  4403              ADD      r3,r3,r0              ;112
000164  4419              ADD      r1,r1,r3              ;112
000166  3410              ADDS     r4,r4,#0x10           ;113
                  |L1.360|
000168  2a10              CMP      r2,#0x10              ;110
00016a  d2cb              BCS      |L1.260|
00016c  e003              B        |L1.374|
                  |L1.366|
00016e  f8146b01          LDRB     r6,[r4],#1            ;116
000172  4433              ADD      r3,r3,r6              ;116
000174  4419              ADD      r1,r1,r3              ;117
                  |L1.374|
000176  0010              MOVS     r0,r2                 ;115
000178  f1a20201          SUB      r2,r2,#1              ;115
00017c  d1f7              BNE      |L1.366|
00017e  f64f70f1          MOV      r0,#0xfff1            ;119
000182  fbb3f6f0          UDIV     r6,r3,r0              ;119
000186  fb003316          MLS      r3,r0,r6,r3           ;119
00018a  fbb1f6f0          UDIV     r6,r1,r0              ;120
00018e  fb001116          MLS      r1,r0,r6,r1           ;120
                  |L1.402|
000192  ea434001          ORR      r0,r3,r1,LSL #16      ;124
000196  e74c              B        |L1.50|
;;;126    
                          ENDP

                  adler32_combine PROC
;;;127    /* ========================================================================= */
;;;128    uLong ZEXPORT adler32_combine(adler1, adler2, len2)
000198  b5f0              PUSH     {r4-r7,lr}
;;;129        uLong adler1;
;;;130        uLong adler2;
;;;131        z_off_t len2;
;;;132    {
00019a  4603              MOV      r3,r0
00019c  460c              MOV      r4,r1
00019e  4615              MOV      r5,r2
;;;133        unsigned long sum1;
;;;134        unsigned long sum2;
;;;135        unsigned rem;
;;;136    
;;;137        /* the derivation of this formula is left as an exercise for the reader */
;;;138        rem = (unsigned)(len2 % BASE);
0001a0  f64f70f1          MOV      r0,#0xfff1
0001a4  fbb5f7f0          UDIV     r7,r5,r0
0001a8  fb005617          MLS      r6,r0,r7,r5
;;;139        sum1 = adler1 & 0xffff;
0001ac  b299              UXTH     r1,r3
;;;140        sum2 = rem * sum1;
0001ae  fb06f201          MUL      r2,r6,r1
;;;141        MOD(sum2);
0001b2  fbb2f7f0          UDIV     r7,r2,r0
0001b6  fb002217          MLS      r2,r0,r7,r2
;;;142        sum1 += (adler2 & 0xffff) + BASE - 1;
0001ba  b2a0              UXTH     r0,r4
0001bc  f64f77f1          MOV      r7,#0xfff1
0001c0  4438              ADD      r0,r0,r7
0001c2  1e40              SUBS     r0,r0,#1
0001c4  4401              ADD      r1,r1,r0
;;;143        sum2 += ((adler1 >> 16) & 0xffff) + ((adler2 >> 16) & 0xffff) + BASE - rem;
0001c6  f64f70ff          MOV      r0,#0xffff
0001ca  ea004013          AND      r0,r0,r3,LSR #16
0001ce  f64f77ff          MOV      r7,#0xffff
0001d2  ea074714          AND      r7,r7,r4,LSR #16
0001d6  4438              ADD      r0,r0,r7
0001d8  f64f77f1          MOV      r7,#0xfff1
0001dc  4438              ADD      r0,r0,r7
0001de  1b80              SUBS     r0,r0,r6
0001e0  4402              ADD      r2,r2,r0
;;;144        if (sum1 > BASE) sum1 -= BASE;
0001e2  4638              MOV      r0,r7
0001e4  4281              CMP      r1,r0
0001e6  d900              BLS      |L1.490|
0001e8  1a09              SUBS     r1,r1,r0
                  |L1.490|
;;;145        if (sum1 > BASE) sum1 -= BASE;
0001ea  f64f70f1          MOV      r0,#0xfff1
0001ee  4281              CMP      r1,r0
0001f0  d900              BLS      |L1.500|
0001f2  1a09              SUBS     r1,r1,r0
                  |L1.500|
;;;146        if (sum2 > (BASE << 1)) sum2 -= (BASE << 1);
0001f4  4805              LDR      r0,|L1.524|
0001f6  4282              CMP      r2,r0
0001f8  d900              BLS      |L1.508|
0001fa  1a12              SUBS     r2,r2,r0
                  |L1.508|
;;;147        if (sum2 > BASE) sum2 -= BASE;
0001fc  f64f70f1          MOV      r0,#0xfff1
000200  4282              CMP      r2,r0
000202  d900              BLS      |L1.518|
000204  1a12              SUBS     r2,r2,r0
                  |L1.518|
;;;148        return sum1 | (sum2 << 16);
000206  ea414002          ORR      r0,r1,r2,LSL #16
;;;149    }
00020a  bdf0              POP      {r4-r7,pc}
                          ENDP

                  |L1.524|
                          DCD      0x0001ffe2
