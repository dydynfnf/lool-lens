; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\pngpread.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\pngpread.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\FWlib\inc -I.\user -I.\CM3 -I.\MALLOC -I.\TFT -I.\EMWIN\EMWIN_INC -I.\EMWIN\DEMO -I.\FATFS -I.\SDIO -I.\PNG -IE:\material\GUI\STM32·Ü¶·°å-emwin+fatfs\RTE -Id:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.1.0\Device\Include -Id:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=515 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\pngpread.crf PNG\pngpread.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  png_push_save_buffer PROC
;;;600    void /* PRIVATE */
;;;601    png_push_save_buffer(png_structp png_ptr)
000000  b570              PUSH     {r4-r6,lr}
;;;602    {
000002  4604              MOV      r4,r0
;;;603       if (png_ptr->save_buffer_size)
000004  f8d40304          LDR      r0,[r4,#0x304]
000008  b1a0              CBZ      r0,|L1.52|
;;;604       {
;;;605          if (png_ptr->save_buffer_ptr != png_ptr->save_buffer)
00000a  f504703b          ADD      r0,r4,#0x2ec
00000e  c803              LDM      r0,{r0,r1}
000010  4288              CMP      r0,r1
000012  d00f              BEQ      |L1.52|
;;;606          {
;;;607             png_size_t i,istop;
;;;608             png_bytep sp;
;;;609             png_bytep dp;
;;;610    
;;;611             istop = png_ptr->save_buffer_size;
000014  f8d43304          LDR      r3,[r4,#0x304]
;;;612             for (i = 0, sp = png_ptr->save_buffer_ptr, dp = png_ptr->save_buffer;
000018  2000              MOVS     r0,#0
00001a  f8d412ec          LDR      r1,[r4,#0x2ec]
00001e  f8d422f0          LDR      r2,[r4,#0x2f0]
000022  e004              B        |L1.46|
                  |L1.36|
;;;613                i < istop; i++, sp++, dp++)
;;;614             {
;;;615                *dp = *sp;
000024  780d              LDRB     r5,[r1,#0]
000026  7015              STRB     r5,[r2,#0]
000028  1c40              ADDS     r0,r0,#1              ;613
00002a  1c49              ADDS     r1,r1,#1              ;613
00002c  1c52              ADDS     r2,r2,#1              ;613
                  |L1.46|
00002e  4298              CMP      r0,r3                 ;613
000030  d3f8              BCC      |L1.36|
;;;616             }
;;;617          }
000032  bf00              NOP      
                  |L1.52|
;;;618       }
;;;619       if (png_ptr->save_buffer_size + png_ptr->current_buffer_size >
000034  f8d41310          LDR      r1,[r4,#0x310]
000038  f8d40304          LDR      r0,[r4,#0x304]
00003c  4408              ADD      r0,r0,r1
00003e  f8d41308          LDR      r1,[r4,#0x308]
000042  4288              CMP      r0,r1
000044  d92a              BLS      |L1.156|
;;;620          png_ptr->save_buffer_max)
;;;621       {
;;;622          png_size_t new_max;
;;;623          png_bytep old_buffer;
;;;624    
;;;625          if (png_ptr->save_buffer_size > PNG_SIZE_MAX -
000046  f8d40310          LDR      r0,[r4,#0x310]
00004a  f5007080          ADD      r0,r0,#0x100
00004e  f1c030ff          RSB      r0,r0,#0xffffffff
000052  f8d41304          LDR      r1,[r4,#0x304]
000056  4281              CMP      r1,r0
000058  d903              BLS      |L1.98|
;;;626             (png_ptr->current_buffer_size + 256))
;;;627          {
;;;628            png_error(png_ptr, "Potential overflow of save_buffer");
00005a  a1fe              ADR      r1,|L1.1108|
00005c  4620              MOV      r0,r4
00005e  f7fffffe          BL       png_error
                  |L1.98|
;;;629          }
;;;630          new_max = png_ptr->save_buffer_size + png_ptr->current_buffer_size + 256;
000062  f8d41310          LDR      r1,[r4,#0x310]
000066  f8d40304          LDR      r0,[r4,#0x304]
00006a  4408              ADD      r0,r0,r1
00006c  f5007580          ADD      r5,r0,#0x100
;;;631          old_buffer = png_ptr->save_buffer;
000070  f8d462f0          LDR      r6,[r4,#0x2f0]
;;;632          png_ptr->save_buffer = (png_bytep)png_malloc(png_ptr,
000074  4629              MOV      r1,r5
000076  4620              MOV      r0,r4
000078  f7fffffe          BL       png_malloc
00007c  f8c402f0          STR      r0,[r4,#0x2f0]
;;;633             (png_uint_32)new_max);
;;;634          png_memcpy(png_ptr->save_buffer, old_buffer, png_ptr->save_buffer_size);
000080  4631              MOV      r1,r6
000082  f8d42304          LDR      r2,[r4,#0x304]
000086  f8d402f0          LDR      r0,[r4,#0x2f0]
00008a  f7fffffe          BL       __aeabi_memcpy
;;;635          png_free(png_ptr, old_buffer);
00008e  4631              MOV      r1,r6
000090  4620              MOV      r0,r4
000092  f7fffffe          BL       png_free
;;;636          png_ptr->save_buffer_max = new_max;
000096  f8c45308          STR      r5,[r4,#0x308]
;;;637       }
00009a  bf00              NOP      
                  |L1.156|
;;;638       if (png_ptr->current_buffer_size)
00009c  f8d40310          LDR      r0,[r4,#0x310]
0000a0  b180              CBZ      r0,|L1.196|
;;;639       {
;;;640          png_memcpy(png_ptr->save_buffer + png_ptr->save_buffer_size,
0000a2  f504743c          ADD      r4,r4,#0x2f0
0000a6  6965              LDR      r5,[r4,#0x14]
0000a8  6823              LDR      r3,[r4,#0]
0000aa  1958              ADDS     r0,r3,r5
0000ac  6a22              LDR      r2,[r4,#0x20]
0000ae  6861              LDR      r1,[r4,#4]
0000b0  f7fffffe          BL       __aeabi_memcpy
;;;641             png_ptr->current_buffer_ptr, png_ptr->current_buffer_size);
;;;642          png_ptr->save_buffer_size += png_ptr->current_buffer_size;
0000b4  6a21              LDR      r1,[r4,#0x20]
0000b6  6960              LDR      r0,[r4,#0x14]
0000b8  4408              ADD      r0,r0,r1
0000ba  6160              STR      r0,[r4,#0x14]
;;;643          png_ptr->current_buffer_size = 0;
0000bc  2000              MOVS     r0,#0
0000be  6220              STR      r0,[r4,#0x20]
0000c0  f5a4743c          SUB      r4,r4,#0x2f0
                  |L1.196|
;;;644       }
;;;645       png_ptr->save_buffer_ptr = png_ptr->save_buffer;
0000c4  f8d402f0          LDR      r0,[r4,#0x2f0]
0000c8  f8c402ec          STR      r0,[r4,#0x2ec]
;;;646       png_ptr->buffer_size = 0;
0000cc  2000              MOVS     r0,#0
0000ce  f8c4030c          STR      r0,[r4,#0x30c]
;;;647    }
0000d2  bd70              POP      {r4-r6,pc}
;;;648    
                          ENDP

                  png_push_crc_finish PROC
;;;513    void /* PRIVATE */
;;;514    png_push_crc_finish(png_structp png_ptr)
0000d4  b570              PUSH     {r4-r6,lr}
;;;515    {
0000d6  4604              MOV      r4,r0
;;;516       if (png_ptr->skip_length && png_ptr->save_buffer_size)
0000d8  f8d40300          LDR      r0,[r4,#0x300]
0000dc  b318              CBZ      r0,|L1.294|
0000de  f8d40304          LDR      r0,[r4,#0x304]
0000e2  b300              CBZ      r0,|L1.294|
;;;517       {
;;;518          png_size_t save_size;
;;;519    
;;;520          if (png_ptr->skip_length < (png_uint_32)png_ptr->save_buffer_size)
0000e4  f5047040          ADD      r0,r4,#0x300
0000e8  c803              LDM      r0,{r0,r1}
0000ea  4288              CMP      r0,r1
0000ec  d202              BCS      |L1.244|
;;;521             save_size = (png_size_t)png_ptr->skip_length;
0000ee  f8d45300          LDR      r5,[r4,#0x300]
0000f2  e001              B        |L1.248|
                  |L1.244|
;;;522          else
;;;523             save_size = png_ptr->save_buffer_size;
0000f4  f8d45304          LDR      r5,[r4,#0x304]
                  |L1.248|
;;;524    
;;;525          png_calculate_crc(png_ptr, png_ptr->save_buffer_ptr, save_size);
0000f8  462a              MOV      r2,r5
0000fa  4620              MOV      r0,r4
0000fc  f8d412ec          LDR      r1,[r4,#0x2ec]
000100  f7fffffe          BL       png_calculate_crc
;;;526    
;;;527          png_ptr->skip_length -= save_size;
000104  f504743b          ADD      r4,r4,#0x2ec
000108  6960              LDR      r0,[r4,#0x14]
00010a  1b40              SUBS     r0,r0,r5
00010c  6160              STR      r0,[r4,#0x14]
;;;528          png_ptr->buffer_size -= save_size;
00010e  6a20              LDR      r0,[r4,#0x20]
000110  1b40              SUBS     r0,r0,r5
000112  6220              STR      r0,[r4,#0x20]
;;;529          png_ptr->save_buffer_size -= save_size;
000114  69a0              LDR      r0,[r4,#0x18]
000116  1b40              SUBS     r0,r0,r5
000118  61a0              STR      r0,[r4,#0x18]
;;;530          png_ptr->save_buffer_ptr += save_size;
00011a  6820              LDR      r0,[r4,#0]
00011c  4428              ADD      r0,r0,r5
00011e  6020              STR      r0,[r4,#0]
000120  f5a4743b          SUB      r4,r4,#0x2ec
;;;531       }
000124  bf00              NOP      
                  |L1.294|
;;;532       if (png_ptr->skip_length && png_ptr->current_buffer_size)
000126  f8d40300          LDR      r0,[r4,#0x300]
00012a  b320              CBZ      r0,|L1.374|
00012c  f8d40310          LDR      r0,[r4,#0x310]
000130  b308              CBZ      r0,|L1.374|
;;;533       {
;;;534          png_size_t save_size;
;;;535    
;;;536          if (png_ptr->skip_length < (png_uint_32)png_ptr->current_buffer_size)
000132  f8d41310          LDR      r1,[r4,#0x310]
000136  f8d40300          LDR      r0,[r4,#0x300]
00013a  4288              CMP      r0,r1
00013c  d202              BCS      |L1.324|
;;;537             save_size = (png_size_t)png_ptr->skip_length;
00013e  f8d45300          LDR      r5,[r4,#0x300]
000142  e001              B        |L1.328|
                  |L1.324|
;;;538          else
;;;539             save_size = png_ptr->current_buffer_size;
000144  f8d45310          LDR      r5,[r4,#0x310]
                  |L1.328|
;;;540    
;;;541          png_calculate_crc(png_ptr, png_ptr->current_buffer_ptr, save_size);
000148  462a              MOV      r2,r5
00014a  4620              MOV      r0,r4
00014c  f8d412f4          LDR      r1,[r4,#0x2f4]
000150  f7fffffe          BL       png_calculate_crc
;;;542    
;;;543          png_ptr->skip_length -= save_size;
000154  f504743d          ADD      r4,r4,#0x2f4
000158  68e0              LDR      r0,[r4,#0xc]
00015a  1b40              SUBS     r0,r0,r5
00015c  60e0              STR      r0,[r4,#0xc]
;;;544          png_ptr->buffer_size -= save_size;
00015e  69a0              LDR      r0,[r4,#0x18]
000160  1b40              SUBS     r0,r0,r5
000162  61a0              STR      r0,[r4,#0x18]
;;;545          png_ptr->current_buffer_size -= save_size;
000164  69e0              LDR      r0,[r4,#0x1c]
000166  1b40              SUBS     r0,r0,r5
000168  61e0              STR      r0,[r4,#0x1c]
;;;546          png_ptr->current_buffer_ptr += save_size;
00016a  6820              LDR      r0,[r4,#0]
00016c  4428              ADD      r0,r0,r5
00016e  6020              STR      r0,[r4,#0]
000170  f5a4743d          SUB      r4,r4,#0x2f4
;;;547       }
000174  bf00              NOP      
                  |L1.374|
;;;548       if (!png_ptr->skip_length)
000176  f8d40300          LDR      r0,[r4,#0x300]
00017a  b970              CBNZ     r0,|L1.410|
;;;549       {
;;;550          if (png_ptr->buffer_size < 4)
00017c  f8d4030c          LDR      r0,[r4,#0x30c]
000180  2804              CMP      r0,#4
000182  d203              BCS      |L1.396|
;;;551          {
;;;552             png_push_save_buffer(png_ptr);
000184  4620              MOV      r0,r4
000186  f7fffffe          BL       png_push_save_buffer
                  |L1.394|
;;;553             return;
;;;554          }
;;;555    
;;;556          png_crc_finish(png_ptr, 0);
;;;557          png_ptr->process_mode = PNG_READ_CHUNK_MODE;
;;;558       }
;;;559    }
00018a  bd70              POP      {r4-r6,pc}
                  |L1.396|
00018c  2100              MOVS     r1,#0                 ;556
00018e  4620              MOV      r0,r4                 ;556
000190  f7fffffe          BL       png_crc_finish
000194  2001              MOVS     r0,#1                 ;557
000196  f8c40314          STR      r0,[r4,#0x314]        ;557
                  |L1.410|
00019a  bf00              NOP      
00019c  e7f5              B        |L1.394|
;;;560    
                          ENDP

                  png_push_read_zTXt PROC
;;;1188   void /* PRIVATE */
;;;1189   png_push_read_zTXt(png_structp png_ptr, png_infop info_ptr)
00019e  e92d5ff3          PUSH     {r0,r1,r4-r12,lr}
;;;1190   {
0001a2  4604              MOV      r4,r0
;;;1191      if (png_ptr->buffer_size && png_ptr->current_text_left)
0001a4  f8d4030c          LDR      r0,[r4,#0x30c]
0001a8  b1f0              CBZ      r0,|L1.488|
0001aa  f8d40320          LDR      r0,[r4,#0x320]
0001ae  b1d8              CBZ      r0,|L1.488|
;;;1192      {
;;;1193         png_size_t text_size;
;;;1194   
;;;1195         if (png_ptr->buffer_size < (png_uint_32)png_ptr->current_text_left)
0001b0  f8d41320          LDR      r1,[r4,#0x320]
0001b4  f8d4030c          LDR      r0,[r4,#0x30c]
0001b8  4288              CMP      r0,r1
0001ba  d202              BCS      |L1.450|
;;;1196            text_size = png_ptr->buffer_size;
0001bc  f8d4530c          LDR      r5,[r4,#0x30c]
0001c0  e001              B        |L1.454|
                  |L1.450|
;;;1197         else
;;;1198            text_size = png_ptr->current_text_left;
0001c2  f8d45320          LDR      r5,[r4,#0x320]
                  |L1.454|
;;;1199         png_crc_read(png_ptr, (png_bytep)png_ptr->current_text_ptr, text_size);
0001c6  462a              MOV      r2,r5
0001c8  4620              MOV      r0,r4
0001ca  f8d41328          LDR      r1,[r4,#0x328]
0001ce  f7fffffe          BL       png_crc_read
;;;1200         png_ptr->current_text_left -= text_size;
0001d2  f8d40320          LDR      r0,[r4,#0x320]
0001d6  1b40              SUBS     r0,r0,r5
0001d8  f8c40320          STR      r0,[r4,#0x320]
;;;1201         png_ptr->current_text_ptr += text_size;
0001dc  f8d40328          LDR      r0,[r4,#0x328]
0001e0  4428              ADD      r0,r0,r5
0001e2  f8c40328          STR      r0,[r4,#0x328]
;;;1202      }
0001e6  bf00              NOP      
                  |L1.488|
;;;1203      if (!(png_ptr->current_text_left))
0001e8  f8d40320          LDR      r0,[r4,#0x320]
0001ec  2800              CMP      r0,#0
0001ee  d17d              BNE      |L1.748|
;;;1204      {
;;;1205         png_textp text_ptr;
;;;1206         png_charp text;
;;;1207         png_charp key;
;;;1208         int ret;
;;;1209         png_size_t text_size, key_size;
;;;1210   
;;;1211         if (png_ptr->buffer_size < 4)
0001f0  f8d4030c          LDR      r0,[r4,#0x30c]
0001f4  2804              CMP      r0,#4
0001f6  d204              BCS      |L1.514|
;;;1212         {
;;;1213            png_push_save_buffer(png_ptr);
0001f8  4620              MOV      r0,r4
0001fa  f7fffffe          BL       png_push_save_buffer
                  |L1.510|
;;;1214            return;
;;;1215         }
;;;1216   
;;;1217         png_push_crc_finish(png_ptr);
;;;1218   
;;;1219         key = png_ptr->current_text;
;;;1220   
;;;1221         for (text = key; *text; text++)
;;;1222            /* empty loop */ ;
;;;1223   
;;;1224         /* zTXt can't have zero text */
;;;1225         if (text == key + png_ptr->current_text_size)
;;;1226         {
;;;1227            png_ptr->current_text = NULL;
;;;1228            png_free(png_ptr, key);
;;;1229            return;
;;;1230         }
;;;1231   
;;;1232         text++;
;;;1233   
;;;1234         if (*text != PNG_TEXT_COMPRESSION_zTXt) /* check compression byte */
;;;1235         {
;;;1236            png_ptr->current_text = NULL;
;;;1237            png_free(png_ptr, key);
;;;1238            return;
;;;1239         }
;;;1240   
;;;1241         text++;
;;;1242   
;;;1243         png_ptr->zstream.next_in = (png_bytep )text;
;;;1244         png_ptr->zstream.avail_in = (uInt)(png_ptr->current_text_size -
;;;1245            (text - key));
;;;1246         png_ptr->zstream.next_out = png_ptr->zbuf;
;;;1247         png_ptr->zstream.avail_out = (uInt)png_ptr->zbuf_size;
;;;1248   
;;;1249         key_size = text - key;
;;;1250         text_size = 0;
;;;1251         text = NULL;
;;;1252         ret = Z_STREAM_END;
;;;1253   
;;;1254         while (png_ptr->zstream.avail_in)
;;;1255         {
;;;1256            ret = inflate(&png_ptr->zstream, Z_PARTIAL_FLUSH);
;;;1257            if (ret != Z_OK && ret != Z_STREAM_END)
;;;1258            {
;;;1259               inflateReset(&png_ptr->zstream);
;;;1260               png_ptr->zstream.avail_in = 0;
;;;1261               png_ptr->current_text = NULL;
;;;1262               png_free(png_ptr, key);
;;;1263               png_free(png_ptr, text);
;;;1264               return;
;;;1265            }
;;;1266            if (!(png_ptr->zstream.avail_out) || ret == Z_STREAM_END)
;;;1267            {
;;;1268               if (text == NULL)
;;;1269               {
;;;1270                  text = (png_charp)png_malloc(png_ptr,
;;;1271                     (png_uint_32)(png_ptr->zbuf_size - png_ptr->zstream.avail_out
;;;1272                        + key_size + 1));
;;;1273                  png_memcpy(text + key_size, png_ptr->zbuf,
;;;1274                     png_ptr->zbuf_size - png_ptr->zstream.avail_out);
;;;1275                  png_memcpy(text, key, key_size);
;;;1276                  text_size = key_size + png_ptr->zbuf_size -
;;;1277                     png_ptr->zstream.avail_out;
;;;1278                  *(text + text_size) = '\0';
;;;1279               }
;;;1280               else
;;;1281               {
;;;1282                  png_charp tmp;
;;;1283   
;;;1284                  tmp = text;
;;;1285                  text = (png_charp)png_malloc(png_ptr, text_size +
;;;1286                     (png_uint_32)(png_ptr->zbuf_size - png_ptr->zstream.avail_out
;;;1287                      + 1));
;;;1288                  png_memcpy(text, tmp, text_size);
;;;1289                  png_free(png_ptr, tmp);
;;;1290                  png_memcpy(text + text_size, png_ptr->zbuf,
;;;1291                     png_ptr->zbuf_size - png_ptr->zstream.avail_out);
;;;1292                  text_size += png_ptr->zbuf_size - png_ptr->zstream.avail_out;
;;;1293                  *(text + text_size) = '\0';
;;;1294               }
;;;1295               if (ret != Z_STREAM_END)
;;;1296               {
;;;1297                  png_ptr->zstream.next_out = png_ptr->zbuf;
;;;1298                  png_ptr->zstream.avail_out = (uInt)png_ptr->zbuf_size;
;;;1299               }
;;;1300            }
;;;1301            else
;;;1302            {
;;;1303               break;
;;;1304            }
;;;1305   
;;;1306            if (ret == Z_STREAM_END)
;;;1307               break;
;;;1308         }
;;;1309   
;;;1310         inflateReset(&png_ptr->zstream);
;;;1311         png_ptr->zstream.avail_in = 0;
;;;1312   
;;;1313         if (ret != Z_STREAM_END)
;;;1314         {
;;;1315            png_ptr->current_text = NULL;
;;;1316            png_free(png_ptr, key);
;;;1317            png_free(png_ptr, text);
;;;1318            return;
;;;1319         }
;;;1320   
;;;1321         png_ptr->current_text = NULL;
;;;1322         png_free(png_ptr, key);
;;;1323         key = text;
;;;1324         text += key_size;
;;;1325   
;;;1326         text_ptr = (png_textp)png_malloc(png_ptr,
;;;1327             (png_uint_32)png_sizeof(png_text));
;;;1328         text_ptr->compression = PNG_TEXT_COMPRESSION_zTXt;
;;;1329         text_ptr->key = key;
;;;1330   #ifdef PNG_iTXt_SUPPORTED
;;;1331         text_ptr->lang = NULL;
;;;1332         text_ptr->lang_key = NULL;
;;;1333   #endif
;;;1334         text_ptr->text = text;
;;;1335   
;;;1336         ret = png_set_text_2(png_ptr, info_ptr, text_ptr, 1);
;;;1337   
;;;1338         png_free(png_ptr, key);
;;;1339         png_free(png_ptr, text_ptr);
;;;1340   
;;;1341         if (ret)
;;;1342           png_warning(png_ptr, "Insufficient memory to store text chunk.");
;;;1343      }
;;;1344   }
0001fe  e8bd9ffc          POP      {r2-r12,pc}
                  |L1.514|
000202  4620              MOV      r0,r4                 ;1217
000204  f7fffffe          BL       png_push_crc_finish
000208  f8d46324          LDR      r6,[r4,#0x324]        ;1219
00020c  4635              MOV      r5,r6                 ;1221
00020e  e000              B        |L1.530|
                  |L1.528|
000210  1c6d              ADDS     r5,r5,#1              ;1221
                  |L1.530|
000212  7828              LDRB     r0,[r5,#0]            ;1221
000214  2800              CMP      r0,#0                 ;1221
000216  d1fb              BNE      |L1.528|
000218  f8d4031c          LDR      r0,[r4,#0x31c]        ;1225
00021c  4430              ADD      r0,r0,r6              ;1225
00021e  42a8              CMP      r0,r5                 ;1225
000220  d107              BNE      |L1.562|
000222  2000              MOVS     r0,#0                 ;1227
000224  f8c40324          STR      r0,[r4,#0x324]        ;1227
000228  4631              MOV      r1,r6                 ;1228
00022a  4620              MOV      r0,r4                 ;1228
00022c  f7fffffe          BL       png_free
000230  e7e5              B        |L1.510|
                  |L1.562|
000232  1c6d              ADDS     r5,r5,#1              ;1232
000234  7828              LDRB     r0,[r5,#0]            ;1234
000236  b138              CBZ      r0,|L1.584|
000238  2000              MOVS     r0,#0                 ;1236
00023a  f8c40324          STR      r0,[r4,#0x324]        ;1236
00023e  4631              MOV      r1,r6                 ;1237
000240  4620              MOV      r0,r4                 ;1237
000242  f7fffffe          BL       png_free
000246  e7da              B        |L1.510|
                  |L1.584|
000248  1c6d              ADDS     r5,r5,#1              ;1241
00024a  f8c451b4          STR      r5,[r4,#0x1b4]        ;1243
00024e  1ba9              SUBS     r1,r5,r6              ;1244
000250  f8d4031c          LDR      r0,[r4,#0x31c]        ;1244
000254  1a41              SUBS     r1,r0,r1              ;1244
000256  f44f70dc          MOV      r0,#0x1b8             ;1244
00025a  5101              STR      r1,[r0,r4]            ;1244
00025c  f44f70e0          MOV      r0,#0x1c0             ;1246
000260  f8d411ec          LDR      r1,[r4,#0x1ec]        ;1246
000264  5101              STR      r1,[r0,r4]            ;1246
000266  1d00              ADDS     r0,r0,#4              ;1247
000268  f8d411f0          LDR      r1,[r4,#0x1f0]        ;1247
00026c  5101              STR      r1,[r0,r4]            ;1247
00026e  eba50a06          SUB      r10,r5,r6             ;1249
000272  f04f0800          MOV      r8,#0                 ;1250
000276  2500              MOVS     r5,#0                 ;1251
000278  2701              MOVS     r7,#1                 ;1252
00027a  e08f              B        |L1.924|
                  |L1.636|
00027c  2101              MOVS     r1,#1                 ;1256
00027e  f50470da          ADD      r0,r4,#0x1b4          ;1256
000282  f7fffffe          BL       inflate
000286  4607              MOV      r7,r0                 ;1256
000288  b1af              CBZ      r7,|L1.694|
00028a  2f01              CMP      r7,#1                 ;1257
00028c  d013              BEQ      |L1.694|
00028e  f50470da          ADD      r0,r4,#0x1b4          ;1259
000292  f7fffffe          BL       inflateReset
000296  2100              MOVS     r1,#0                 ;1260
000298  f44f70dc          MOV      r0,#0x1b8             ;1260
00029c  5101              STR      r1,[r0,r4]            ;1260
00029e  2000              MOVS     r0,#0                 ;1261
0002a0  f8c40324          STR      r0,[r4,#0x324]        ;1261
0002a4  4631              MOV      r1,r6                 ;1262
0002a6  4620              MOV      r0,r4                 ;1262
0002a8  f7fffffe          BL       png_free
0002ac  4629              MOV      r1,r5                 ;1263
0002ae  4620              MOV      r0,r4                 ;1263
0002b0  f7fffffe          BL       png_free
0002b4  e7a3              B        |L1.510|
                  |L1.694|
0002b6  f44f70e2          MOV      r0,#0x1c4             ;1266
0002ba  5900              LDR      r0,[r0,r4]            ;1266
0002bc  b108              CBZ      r0,|L1.706|
0002be  2f01              CMP      r7,#1                 ;1266
0002c0  d168              BNE      |L1.916|
                  |L1.706|
0002c2  bb65              CBNZ     r5,|L1.798|
0002c4  f44f70e2          MOV      r0,#0x1c4             ;1270
0002c8  5900              LDR      r0,[r0,r4]            ;1270
0002ca  f8d421f0          LDR      r2,[r4,#0x1f0]        ;1270
0002ce  1a10              SUBS     r0,r2,r0              ;1270
0002d0  4450              ADD      r0,r0,r10             ;1270
0002d2  1c41              ADDS     r1,r0,#1              ;1270
0002d4  4620              MOV      r0,r4                 ;1270
0002d6  f7fffffe          BL       png_malloc
0002da  4605              MOV      r5,r0                 ;1270
0002dc  f44f73e2          MOV      r3,#0x1c4             ;1273
0002e0  591b              LDR      r3,[r3,r4]            ;1273
0002e2  f8d4c1f0          LDR      r12,[r4,#0x1f0]       ;1273
0002e6  ebac0203          SUB      r2,r12,r3             ;1273
0002ea  e000              B        |L1.750|
                  |L1.748|
0002ec  e09d              B        |L1.1066|
                  |L1.750|
0002ee  eb05000a          ADD      r0,r5,r10             ;1273
0002f2  f8d411ec          LDR      r1,[r4,#0x1ec]        ;1273
0002f6  f7fffffe          BL       __aeabi_memcpy
0002fa  4652              MOV      r2,r10                ;1275
0002fc  4631              MOV      r1,r6                 ;1275
0002fe  4628              MOV      r0,r5                 ;1275
000300  f7fffffe          BL       __aeabi_memcpy
000304  f8d401f0          LDR      r0,[r4,#0x1f0]        ;1276
000308  eb00010a          ADD      r1,r0,r10             ;1276
00030c  f44f70e2          MOV      r0,#0x1c4             ;1276
000310  5900              LDR      r0,[r0,r4]            ;1276
000312  eba10800          SUB      r8,r1,r0              ;1276
000316  2000              MOVS     r0,#0                 ;1278
000318  f8050008          STRB     r0,[r5,r8]            ;1278
00031c  e02e              B        |L1.892|
                  |L1.798|
00031e  46ab              MOV      r11,r5                ;1284
000320  f44f70e2          MOV      r0,#0x1c4             ;1285
000324  5900              LDR      r0,[r0,r4]            ;1285
000326  f8d421f0          LDR      r2,[r4,#0x1f0]        ;1285
00032a  1a10              SUBS     r0,r2,r0              ;1285
00032c  1c40              ADDS     r0,r0,#1              ;1285
00032e  eb000108          ADD      r1,r0,r8              ;1285
000332  4620              MOV      r0,r4                 ;1285
000334  f7fffffe          BL       png_malloc
000338  4605              MOV      r5,r0                 ;1285
00033a  4642              MOV      r2,r8                 ;1288
00033c  4659              MOV      r1,r11                ;1288
00033e  4628              MOV      r0,r5                 ;1288
000340  f7fffffe          BL       __aeabi_memcpy
000344  4659              MOV      r1,r11                ;1289
000346  4620              MOV      r0,r4                 ;1289
000348  f7fffffe          BL       png_free
00034c  f44f73e2          MOV      r3,#0x1c4             ;1290
000350  591b              LDR      r3,[r3,r4]            ;1290
000352  f8d4c1f0          LDR      r12,[r4,#0x1f0]       ;1290
000356  ebac0203          SUB      r2,r12,r3             ;1290
00035a  eb050008          ADD      r0,r5,r8              ;1290
00035e  f8d411ec          LDR      r1,[r4,#0x1ec]        ;1290
000362  f7fffffe          BL       __aeabi_memcpy
000366  f44f70e2          MOV      r0,#0x1c4             ;1292
00036a  5900              LDR      r0,[r0,r4]            ;1292
00036c  f8d411f0          LDR      r1,[r4,#0x1f0]        ;1292
000370  1a08              SUBS     r0,r1,r0              ;1292
000372  4480              ADD      r8,r8,r0              ;1292
000374  2000              MOVS     r0,#0                 ;1293
000376  f8050008          STRB     r0,[r5,r8]            ;1293
00037a  bf00              NOP                            ;1294
                  |L1.892|
00037c  2f01              CMP      r7,#1                 ;1295
00037e  d00a              BEQ      |L1.918|
000380  f44f70e0          MOV      r0,#0x1c0             ;1297
000384  f8d411ec          LDR      r1,[r4,#0x1ec]        ;1297
000388  5101              STR      r1,[r0,r4]            ;1297
00038a  1d00              ADDS     r0,r0,#4              ;1298
00038c  f8d411f0          LDR      r1,[r4,#0x1f0]        ;1298
000390  5101              STR      r1,[r0,r4]            ;1298
000392  e000              B        |L1.918|
                  |L1.916|
000394  e008              B        |L1.936|
                  |L1.918|
000396  2f01              CMP      r7,#1                 ;1306
000398  d100              BNE      |L1.924|
00039a  e005              B        |L1.936|
                  |L1.924|
00039c  f44f70dc          MOV      r0,#0x1b8             ;1254
0003a0  5900              LDR      r0,[r0,r4]            ;1254
0003a2  2800              CMP      r0,#0                 ;1254
0003a4  f47faf6a          BNE      |L1.636|
                  |L1.936|
0003a8  bf00              NOP                            ;1303
0003aa  f50470da          ADD      r0,r4,#0x1b4          ;1310
0003ae  f7fffffe          BL       inflateReset
0003b2  2100              MOVS     r1,#0                 ;1311
0003b4  f44f70dc          MOV      r0,#0x1b8             ;1311
0003b8  5101              STR      r1,[r0,r4]            ;1311
0003ba  2f01              CMP      r7,#1                 ;1313
0003bc  d00b              BEQ      |L1.982|
0003be  2000              MOVS     r0,#0                 ;1315
0003c0  f8c40324          STR      r0,[r4,#0x324]        ;1315
0003c4  4631              MOV      r1,r6                 ;1316
0003c6  4620              MOV      r0,r4                 ;1316
0003c8  f7fffffe          BL       png_free
0003cc  4629              MOV      r1,r5                 ;1317
0003ce  4620              MOV      r0,r4                 ;1317
0003d0  f7fffffe          BL       png_free
0003d4  e713              B        |L1.510|
                  |L1.982|
0003d6  2000              MOVS     r0,#0                 ;1321
0003d8  f8c40324          STR      r0,[r4,#0x324]        ;1321
0003dc  4631              MOV      r1,r6                 ;1322
0003de  4620              MOV      r0,r4                 ;1322
0003e0  f7fffffe          BL       png_free
0003e4  462e              MOV      r6,r5                 ;1323
0003e6  4455              ADD      r5,r5,r10             ;1324
0003e8  2110              MOVS     r1,#0x10              ;1326
0003ea  4620              MOV      r0,r4                 ;1326
0003ec  f7fffffe          BL       png_malloc
0003f0  4681              MOV      r9,r0                 ;1326
0003f2  2000              MOVS     r0,#0                 ;1328
0003f4  f8c90000          STR      r0,[r9,#0]            ;1328
0003f8  f8c96004          STR      r6,[r9,#4]            ;1329
0003fc  f8c95008          STR      r5,[r9,#8]            ;1334
000400  2301              MOVS     r3,#1                 ;1336
000402  464a              MOV      r2,r9                 ;1336
000404  4620              MOV      r0,r4                 ;1336
000406  9901              LDR      r1,[sp,#4]            ;1336
000408  f7fffffe          BL       png_set_text_2
00040c  4607              MOV      r7,r0                 ;1336
00040e  4631              MOV      r1,r6                 ;1338
000410  4620              MOV      r0,r4                 ;1338
000412  f7fffffe          BL       png_free
000416  4649              MOV      r1,r9                 ;1339
000418  4620              MOV      r0,r4                 ;1339
00041a  f7fffffe          BL       png_free
00041e  b11f              CBZ      r7,|L1.1064|
000420  a115              ADR      r1,|L1.1144|
000422  4620              MOV      r0,r4                 ;1342
000424  f7fffffe          BL       png_warning
                  |L1.1064|
000428  bf00              NOP                            ;1343
                  |L1.1066|
00042a  bf00              NOP      
00042c  e6e7              B        |L1.510|
;;;1345   #endif
                          ENDP

                  png_push_read_tEXt PROC
;;;1089   void /* PRIVATE */
;;;1090   png_push_read_tEXt(png_structp png_ptr, png_infop info_ptr)
00042e  e92d47f0          PUSH     {r4-r10,lr}
;;;1091   {
000432  4604              MOV      r4,r0
000434  4689              MOV      r9,r1
;;;1092      if (png_ptr->buffer_size && png_ptr->current_text_left)
000436  f8d4030c          LDR      r0,[r4,#0x30c]
00043a  b398              CBZ      r0,|L1.1188|
00043c  f8d40320          LDR      r0,[r4,#0x320]
000440  b380              CBZ      r0,|L1.1188|
;;;1093      {
;;;1094         png_size_t text_size;
;;;1095   
;;;1096         if (png_ptr->buffer_size < png_ptr->current_text_left)
000442  f8d41320          LDR      r1,[r4,#0x320]
000446  f8d4030c          LDR      r0,[r4,#0x30c]
00044a  4288              CMP      r0,r1
00044c  d22b              BCS      |L1.1190|
;;;1097            text_size = png_ptr->buffer_size;
00044e  f8d4530c          LDR      r5,[r4,#0x30c]
000452  e02a              B        |L1.1194|
                  |L1.1108|
000454  506f7465          DCB      "Potential overflow of save_buffer",0
000458  6e746961
00045c  6c206f76
000460  6572666c
000464  6f77206f
000468  66207361
00046c  76655f62
000470  75666665
000474  7200    
000476  00                DCB      0
000477  00                DCB      0
                  |L1.1144|
000478  496e7375          DCB      "Insufficient memory to store text chunk.",0
00047c  66666963
000480  69656e74
000484  206d656d
000488  6f727920
00048c  746f2073
000490  746f7265
000494  20746578
000498  74206368
00049c  756e6b2e
0004a0  00      
0004a1  00                DCB      0
0004a2  00                DCB      0
0004a3  00                DCB      0
                  |L1.1188|
0004a4  e012              B        |L1.1228|
                  |L1.1190|
;;;1098         else
;;;1099            text_size = png_ptr->current_text_left;
0004a6  f8d45320          LDR      r5,[r4,#0x320]
                  |L1.1194|
;;;1100         png_crc_read(png_ptr, (png_bytep)png_ptr->current_text_ptr, text_size);
0004aa  462a              MOV      r2,r5
0004ac  4620              MOV      r0,r4
0004ae  f8d41328          LDR      r1,[r4,#0x328]
0004b2  f7fffffe          BL       png_crc_read
;;;1101         png_ptr->current_text_left -= text_size;
0004b6  f8d40320          LDR      r0,[r4,#0x320]
0004ba  1b40              SUBS     r0,r0,r5
0004bc  f8c40320          STR      r0,[r4,#0x320]
;;;1102         png_ptr->current_text_ptr += text_size;
0004c0  f8d40328          LDR      r0,[r4,#0x328]
0004c4  4428              ADD      r0,r0,r5
0004c6  f8c40328          STR      r0,[r4,#0x328]
;;;1103      }
0004ca  bf00              NOP      
                  |L1.1228|
;;;1104      if (!(png_ptr->current_text_left))
0004cc  f8d40320          LDR      r0,[r4,#0x320]
0004d0  2800              CMP      r0,#0
0004d2  d13e              BNE      |L1.1362|
;;;1105      {
;;;1106         png_textp text_ptr;
;;;1107         png_charp text;
;;;1108         png_charp key;
;;;1109         int ret;
;;;1110   
;;;1111         if (png_ptr->buffer_size < 4)
0004d4  f8d4030c          LDR      r0,[r4,#0x30c]
0004d8  2804              CMP      r0,#4
0004da  d204              BCS      |L1.1254|
;;;1112         {
;;;1113            png_push_save_buffer(png_ptr);
0004dc  4620              MOV      r0,r4
0004de  f7fffffe          BL       png_push_save_buffer
                  |L1.1250|
;;;1114            return;
;;;1115         }
;;;1116   
;;;1117         png_push_crc_finish(png_ptr);
;;;1118   
;;;1119   #if defined(PNG_MAX_MALLOC_64K)
;;;1120         if (png_ptr->skip_length)
;;;1121            return;
;;;1122   #endif
;;;1123   
;;;1124         key = png_ptr->current_text;
;;;1125   
;;;1126         for (text = key; *text; text++)
;;;1127            /* empty loop */ ;
;;;1128   
;;;1129         if (text != key + png_ptr->current_text_size)
;;;1130            text++;
;;;1131   
;;;1132         text_ptr = (png_textp)png_malloc(png_ptr,
;;;1133            (png_uint_32)png_sizeof(png_text));
;;;1134         text_ptr->compression = PNG_TEXT_COMPRESSION_NONE;
;;;1135         text_ptr->key = key;
;;;1136   #ifdef PNG_iTXt_SUPPORTED
;;;1137         text_ptr->lang = NULL;
;;;1138         text_ptr->lang_key = NULL;
;;;1139   #endif
;;;1140         text_ptr->text = text;
;;;1141   
;;;1142         ret = png_set_text_2(png_ptr, info_ptr, text_ptr, 1);
;;;1143   
;;;1144         png_free(png_ptr, key);
;;;1145         png_free(png_ptr, text_ptr);
;;;1146         png_ptr->current_text = NULL;
;;;1147   
;;;1148         if (ret)
;;;1149           png_warning(png_ptr, "Insufficient memory to store text chunk.");
;;;1150      }
;;;1151   }
0004e2  e8bd87f0          POP      {r4-r10,pc}
                  |L1.1254|
0004e6  4620              MOV      r0,r4                 ;1117
0004e8  f7fffffe          BL       png_push_crc_finish
0004ec  f8d47324          LDR      r7,[r4,#0x324]        ;1124
0004f0  463d              MOV      r5,r7                 ;1126
0004f2  e000              B        |L1.1270|
                  |L1.1268|
0004f4  1c6d              ADDS     r5,r5,#1              ;1126
                  |L1.1270|
0004f6  7828              LDRB     r0,[r5,#0]            ;1126
0004f8  2800              CMP      r0,#0                 ;1126
0004fa  d1fb              BNE      |L1.1268|
0004fc  f8d4031c          LDR      r0,[r4,#0x31c]        ;1129
000500  4438              ADD      r0,r0,r7              ;1129
000502  42a8              CMP      r0,r5                 ;1129
000504  d000              BEQ      |L1.1288|
000506  1c6d              ADDS     r5,r5,#1              ;1130
                  |L1.1288|
000508  2110              MOVS     r1,#0x10              ;1132
00050a  4620              MOV      r0,r4                 ;1132
00050c  f7fffffe          BL       png_malloc
000510  4606              MOV      r6,r0                 ;1132
000512  f04f30ff          MOV      r0,#0xffffffff        ;1134
000516  6030              STR      r0,[r6,#0]            ;1134
000518  6077              STR      r7,[r6,#4]            ;1135
00051a  60b5              STR      r5,[r6,#8]            ;1140
00051c  2301              MOVS     r3,#1                 ;1142
00051e  4632              MOV      r2,r6                 ;1142
000520  4649              MOV      r1,r9                 ;1142
000522  4620              MOV      r0,r4                 ;1142
000524  f7fffffe          BL       png_set_text_2
000528  4680              MOV      r8,r0                 ;1142
00052a  4639              MOV      r1,r7                 ;1144
00052c  4620              MOV      r0,r4                 ;1144
00052e  f7fffffe          BL       png_free
000532  4631              MOV      r1,r6                 ;1145
000534  4620              MOV      r0,r4                 ;1145
000536  f7fffffe          BL       png_free
00053a  2000              MOVS     r0,#0                 ;1146
00053c  f8c40324          STR      r0,[r4,#0x324]        ;1146
000540  f1b80f00          CMP      r8,#0                 ;1148
000544  d004              BEQ      |L1.1360|
000546  f2af01d0          ADR      r1,|L1.1144|
00054a  4620              MOV      r0,r4                 ;1149
00054c  f7fffffe          BL       png_warning
                  |L1.1360|
000550  bf00              NOP                            ;1150
                  |L1.1362|
000552  bf00              NOP      
000554  e7c5              B        |L1.1250|
;;;1152   #endif
                          ENDP

                  png_read_push_finish_row PROC
;;;986    void /* PRIVATE */
;;;987    png_read_push_finish_row(png_structp png_ptr)
000556  b510              PUSH     {r4,lr}
;;;988    {
000558  4604              MOV      r4,r0
;;;989    #ifdef PNG_USE_LOCAL_ARRAYS
;;;990       /* arrays to facilitate easy interlacing - use pass (0 - 6) as index */
;;;991    
;;;992       /* start of interlace block */
;;;993       const int FARDATA png_pass_start[] = {0, 4, 0, 2, 0, 1, 0};
;;;994    
;;;995       /* offset to next interlace block */
;;;996       const int FARDATA png_pass_inc[] = {8, 8, 4, 4, 2, 2, 1};
;;;997    
;;;998       /* start of interlace block in the y direction */
;;;999       const int FARDATA png_pass_ystart[] = {0, 0, 4, 0, 2, 0, 1};
;;;1000   
;;;1001      /* offset to next interlace block in the y direction */
;;;1002      const int FARDATA png_pass_yinc[] = {8, 8, 8, 4, 4, 2, 2};
;;;1003   
;;;1004      /* Width of interlace block.  This is not currently used - if you need
;;;1005       * it, uncomment it here and in png.h
;;;1006      const int FARDATA png_pass_width[] = {8, 4, 4, 2, 2, 1, 1};
;;;1007      */
;;;1008   
;;;1009      /* Height of interlace block.  This is not currently used - if you need
;;;1010       * it, uncomment it here and in png.h
;;;1011      const int FARDATA png_pass_height[] = {8, 8, 4, 4, 2, 2, 1};
;;;1012      */
;;;1013   #endif
;;;1014   
;;;1015      png_ptr->row_number++;
00055a  f8d40224          LDR      r0,[r4,#0x224]
00055e  1c40              ADDS     r0,r0,#1
000560  f8c40224          STR      r0,[r4,#0x224]
;;;1016      if (png_ptr->row_number < png_ptr->num_rows)
000564  f8d41210          LDR      r1,[r4,#0x210]
000568  f8d40224          LDR      r0,[r4,#0x224]
00056c  4288              CMP      r0,r1
00056e  d200              BCS      |L1.1394|
                  |L1.1392|
;;;1017         return;
;;;1018   
;;;1019      if (png_ptr->interlaced)
;;;1020      {
;;;1021         png_ptr->row_number = 0;
;;;1022         png_memset_check(png_ptr, png_ptr->prev_row, 0,
;;;1023            png_ptr->rowbytes + 1);
;;;1024         do
;;;1025         {
;;;1026            png_ptr->pass++;
;;;1027            if ((png_ptr->pass == 1 && png_ptr->width < 5) ||
;;;1028                (png_ptr->pass == 3 && png_ptr->width < 3) ||
;;;1029                (png_ptr->pass == 5 && png_ptr->width < 2))
;;;1030              png_ptr->pass++;
;;;1031   
;;;1032            if (png_ptr->pass > 7)
;;;1033               png_ptr->pass--;
;;;1034            if (png_ptr->pass >= 7)
;;;1035               break;
;;;1036   
;;;1037            png_ptr->iwidth = (png_ptr->width +
;;;1038               png_pass_inc[png_ptr->pass] - 1 -
;;;1039               png_pass_start[png_ptr->pass]) /
;;;1040               png_pass_inc[png_ptr->pass];
;;;1041   
;;;1042            png_ptr->irowbytes = PNG_ROWBYTES(png_ptr->pixel_depth,
;;;1043               png_ptr->iwidth) + 1;
;;;1044   
;;;1045            if (png_ptr->transformations & PNG_INTERLACE)
;;;1046               break;
;;;1047   
;;;1048            png_ptr->num_rows = (png_ptr->height +
;;;1049               png_pass_yinc[png_ptr->pass] - 1 -
;;;1050               png_pass_ystart[png_ptr->pass]) /
;;;1051               png_pass_yinc[png_ptr->pass];
;;;1052   
;;;1053         } while (png_ptr->iwidth == 0 || png_ptr->num_rows == 0);
;;;1054      }
;;;1055   }
000570  bd10              POP      {r4,pc}
                  |L1.1394|
000572  f8940263          LDRB     r0,[r4,#0x263]        ;1019
000576  2800              CMP      r0,#0                 ;1019
000578  d06f              BEQ      |L1.1626|
00057a  2000              MOVS     r0,#0                 ;1021
00057c  f8c40224          STR      r0,[r4,#0x224]        ;1021
000580  f8d40218          LDR      r0,[r4,#0x218]        ;1022
000584  1c43              ADDS     r3,r0,#1              ;1022
000586  2200              MOVS     r2,#0                 ;1022
000588  4620              MOV      r0,r4                 ;1022
00058a  f8d41228          LDR      r1,[r4,#0x228]        ;1022
00058e  f7fffffe          BL       png_memset_check
000592  bf00              NOP                            ;1024
                  |L1.1428|
000594  f8940264          LDRB     r0,[r4,#0x264]        ;1026
000598  1c40              ADDS     r0,r0,#1              ;1026
00059a  f8840264          STRB     r0,[r4,#0x264]        ;1026
00059e  f8940264          LDRB     r0,[r4,#0x264]        ;1027
0005a2  2801              CMP      r0,#1                 ;1027
0005a4  d103              BNE      |L1.1454|
0005a6  f8d40208          LDR      r0,[r4,#0x208]        ;1027
0005aa  2805              CMP      r0,#5                 ;1027
0005ac  d30f              BCC      |L1.1486|
                  |L1.1454|
0005ae  f8940264          LDRB     r0,[r4,#0x264]        ;1028
0005b2  2803              CMP      r0,#3                 ;1028
0005b4  d103              BNE      |L1.1470|
0005b6  f8d40208          LDR      r0,[r4,#0x208]        ;1028
0005ba  2803              CMP      r0,#3                 ;1028
0005bc  d307              BCC      |L1.1486|
                  |L1.1470|
0005be  f8940264          LDRB     r0,[r4,#0x264]        ;1029
0005c2  2805              CMP      r0,#5                 ;1029
0005c4  d108              BNE      |L1.1496|
0005c6  f8d40208          LDR      r0,[r4,#0x208]        ;1029
0005ca  2802              CMP      r0,#2                 ;1029
0005cc  d204              BCS      |L1.1496|
                  |L1.1486|
0005ce  f8940264          LDRB     r0,[r4,#0x264]        ;1030
0005d2  1c40              ADDS     r0,r0,#1              ;1030
0005d4  f8840264          STRB     r0,[r4,#0x264]        ;1030
                  |L1.1496|
0005d8  f8940264          LDRB     r0,[r4,#0x264]        ;1032
0005dc  2807              CMP      r0,#7                 ;1032
0005de  dd04              BLE      |L1.1514|
0005e0  f8940264          LDRB     r0,[r4,#0x264]        ;1033
0005e4  1e40              SUBS     r0,r0,#1              ;1033
0005e6  f8840264          STRB     r0,[r4,#0x264]        ;1033
                  |L1.1514|
0005ea  f8940264          LDRB     r0,[r4,#0x264]        ;1034
0005ee  2807              CMP      r0,#7                 ;1034
0005f0  db00              BLT      |L1.1524|
0005f2  e054              B        |L1.1694|
                  |L1.1524|
0005f4  f8941264          LDRB     r1,[r4,#0x264]        ;1037
0005f8  4afa              LDR      r2,|L1.2532|
0005fa  f8521021          LDR      r1,[r2,r1,LSL #2]     ;1037
0005fe  f8d40208          LDR      r0,[r4,#0x208]        ;1037
000602  4408              ADD      r0,r0,r1              ;1037
000604  1e40              SUBS     r0,r0,#1              ;1037
000606  f8941264          LDRB     r1,[r4,#0x264]        ;1037
00060a  4af7              LDR      r2,|L1.2536|
00060c  f8521021          LDR      r1,[r2,r1,LSL #2]     ;1037
000610  1a40              SUBS     r0,r0,r1              ;1037
000612  f8941264          LDRB     r1,[r4,#0x264]        ;1037
000616  4af3              LDR      r2,|L1.2532|
000618  f8521021          LDR      r1,[r2,r1,LSL #2]     ;1037
00061c  fbb0f0f1          UDIV     r0,r0,r1              ;1037
000620  f8c40220          STR      r0,[r4,#0x220]        ;1037
000624  f8940269          LDRB     r0,[r4,#0x269]        ;1042
000628  2808              CMP      r0,#8                 ;1042
00062a  db06              BLT      |L1.1594|
00062c  f8941269          LDRB     r1,[r4,#0x269]        ;1042
000630  08c9              LSRS     r1,r1,#3              ;1042
000632  f8d40220          LDR      r0,[r4,#0x220]        ;1042
000636  4348              MULS     r0,r1,r0              ;1042
000638  e006              B        |L1.1608|
                  |L1.1594|
00063a  f8941269          LDRB     r1,[r4,#0x269]        ;1042
00063e  f8d40220          LDR      r0,[r4,#0x220]        ;1042
000642  4348              MULS     r0,r1,r0              ;1042
000644  1dc0              ADDS     r0,r0,#7              ;1042
000646  08c0              LSRS     r0,r0,#3              ;1042
                  |L1.1608|
000648  1c40              ADDS     r0,r0,#1              ;1042
00064a  f8c4021c          STR      r0,[r4,#0x21c]        ;1042
00064e  f89401b0          LDRB     r0,[r4,#0x1b0]        ;1045
000652  f0000002          AND      r0,r0,#2              ;1045
000656  b108              CBZ      r0,|L1.1628|
000658  e021              B        |L1.1694|
                  |L1.1626|
00065a  e021              B        |L1.1696|
                  |L1.1628|
00065c  f8941264          LDRB     r1,[r4,#0x264]        ;1048
000660  4ae2              LDR      r2,|L1.2540|
000662  f8521021          LDR      r1,[r2,r1,LSL #2]     ;1048
000666  f8d4020c          LDR      r0,[r4,#0x20c]        ;1048
00066a  4408              ADD      r0,r0,r1              ;1048
00066c  1e40              SUBS     r0,r0,#1              ;1048
00066e  f8941264          LDRB     r1,[r4,#0x264]        ;1048
000672  4adf              LDR      r2,|L1.2544|
000674  f8521021          LDR      r1,[r2,r1,LSL #2]     ;1048
000678  1a40              SUBS     r0,r0,r1              ;1048
00067a  f8941264          LDRB     r1,[r4,#0x264]        ;1048
00067e  4adb              LDR      r2,|L1.2540|
000680  f8521021          LDR      r1,[r2,r1,LSL #2]     ;1048
000684  fbb0f0f1          UDIV     r0,r0,r1              ;1048
000688  f8c40210          STR      r0,[r4,#0x210]        ;1048
00068c  f8d40220          LDR      r0,[r4,#0x220]        ;1053
000690  2800              CMP      r0,#0                 ;1053
                  |L1.1682|
000692  f43faf7f          BEQ      |L1.1428|
000696  f8d40210          LDR      r0,[r4,#0x210]        ;1053
00069a  2800              CMP      r0,#0                 ;1053
00069c  d0f9              BEQ      |L1.1682|
                  |L1.1694|
00069e  bf00              NOP                            ;1035
                  |L1.1696|
0006a0  bf00              NOP      
0006a2  e765              B        |L1.1392|
;;;1056   
                          ENDP

                  png_push_have_row PROC
;;;1544   void /* PRIVATE */
;;;1545   png_push_have_row(png_structp png_ptr, png_bytep row)
0006a4  b570              PUSH     {r4-r6,lr}
;;;1546   {
0006a6  4604              MOV      r4,r0
0006a8  460d              MOV      r5,r1
;;;1547      if (png_ptr->row_fn != NULL)
0006aa  f8d402e4          LDR      r0,[r4,#0x2e4]
0006ae  b140              CBZ      r0,|L1.1730|
;;;1548         (*(png_ptr->row_fn))(png_ptr, row, png_ptr->row_number,
0006b0  f8943264          LDRB     r3,[r4,#0x264]
0006b4  4629              MOV      r1,r5
0006b6  4620              MOV      r0,r4
0006b8  f8d462e4          LDR      r6,[r4,#0x2e4]
0006bc  f8d42224          LDR      r2,[r4,#0x224]
0006c0  47b0              BLX      r6
                  |L1.1730|
;;;1549            (int)png_ptr->pass);
;;;1550   }
0006c2  bd70              POP      {r4-r6,pc}
;;;1551   
                          ENDP

                  png_push_process_row PROC
;;;807    void /* PRIVATE */
;;;808    png_push_process_row(png_structp png_ptr)
0006c4  b538              PUSH     {r3-r5,lr}
;;;809    {
0006c6  4604              MOV      r4,r0
;;;810       png_ptr->row_info.color_type = png_ptr->color_type;
0006c8  f8941266          LDRB     r1,[r4,#0x266]
0006cc  f44f7012          MOV      r0,#0x248
0006d0  5501              STRB     r1,[r0,r4]
;;;811       png_ptr->row_info.width = png_ptr->iwidth;
0006d2  f8d40220          LDR      r0,[r4,#0x220]
0006d6  f8c40240          STR      r0,[r4,#0x240]
;;;812       png_ptr->row_info.channels = png_ptr->channels;
0006da  f894126a          LDRB     r1,[r4,#0x26a]
0006de  f240204a          MOV      r0,#0x24a
0006e2  5501              STRB     r1,[r0,r4]
;;;813       png_ptr->row_info.bit_depth = png_ptr->bit_depth;
0006e4  f8941267          LDRB     r1,[r4,#0x267]
0006e8  1e40              SUBS     r0,r0,#1
0006ea  5501              STRB     r1,[r0,r4]
;;;814       png_ptr->row_info.pixel_depth = png_ptr->pixel_depth;
0006ec  f8941269          LDRB     r1,[r4,#0x269]
0006f0  1c80              ADDS     r0,r0,#2
0006f2  5501              STRB     r1,[r0,r4]
;;;815    
;;;816       png_ptr->row_info.rowbytes = PNG_ROWBYTES(png_ptr->row_info.pixel_depth,
0006f4  5d00              LDRB     r0,[r0,r4]
0006f6  2808              CMP      r0,#8
0006f8  db07              BLT      |L1.1802|
0006fa  f240214b          MOV      r1,#0x24b
0006fe  5d09              LDRB     r1,[r1,r4]
000700  08c9              LSRS     r1,r1,#3
000702  f8d40240          LDR      r0,[r4,#0x240]
000706  4348              MULS     r0,r1,r0
000708  e007              B        |L1.1818|
                  |L1.1802|
00070a  f240214b          MOV      r1,#0x24b
00070e  5d09              LDRB     r1,[r1,r4]
000710  f8d40240          LDR      r0,[r4,#0x240]
000714  4348              MULS     r0,r1,r0
000716  1dc0              ADDS     r0,r0,#7
000718  08c0              LSRS     r0,r0,#3
                  |L1.1818|
00071a  f44f7111          MOV      r1,#0x244
00071e  5108              STR      r0,[r1,r4]
;;;817           png_ptr->row_info.width);
;;;818    
;;;819       png_read_filter_row(png_ptr, &(png_ptr->row_info),
000720  f8d4022c          LDR      r0,[r4,#0x22c]
000724  7800              LDRB     r0,[r0,#0]
000726  9000              STR      r0,[sp,#0]
000728  f8d40228          LDR      r0,[r4,#0x228]
00072c  1c43              ADDS     r3,r0,#1
00072e  f8d4022c          LDR      r0,[r4,#0x22c]
000732  1c42              ADDS     r2,r0,#1
000734  f5047110          ADD      r1,r4,#0x240
000738  4620              MOV      r0,r4
00073a  f7fffffe          BL       png_read_filter_row
;;;820          png_ptr->row_buf + 1, png_ptr->prev_row + 1,
;;;821          (int)(png_ptr->row_buf[0]));
;;;822    
;;;823       png_memcpy_check(png_ptr, png_ptr->prev_row, png_ptr->row_buf,
00073e  f8d40218          LDR      r0,[r4,#0x218]
000742  1c43              ADDS     r3,r0,#1
000744  4620              MOV      r0,r4
000746  f504710a          ADD      r1,r4,#0x228
00074a  c906              LDM      r1,{r1,r2}
00074c  f7fffffe          BL       png_memcpy_check
;;;824          png_ptr->rowbytes + 1);
;;;825    
;;;826       if (png_ptr->transformations || (png_ptr->flags&PNG_FLAG_STRIP_ALPHA))
000750  f8d401b0          LDR      r0,[r4,#0x1b0]
000754  b920              CBNZ     r0,|L1.1888|
000756  f8d401ac          LDR      r0,[r4,#0x1ac]
00075a  f4000080          AND      r0,r0,#0x400000
00075e  b110              CBZ      r0,|L1.1894|
                  |L1.1888|
;;;827          png_do_read_transformations(png_ptr);
000760  4620              MOV      r0,r4
000762  f7fffffe          BL       png_do_read_transformations
                  |L1.1894|
;;;828    
;;;829    #if defined(PNG_READ_INTERLACING_SUPPORTED)
;;;830       /* blow up interlaced rows to full size */
;;;831       if (png_ptr->interlaced && (png_ptr->transformations & PNG_INTERLACE))
000766  f8940263          LDRB     r0,[r4,#0x263]
00076a  2800              CMP      r0,#0
                  |L1.1900|
00076c  d07c              BEQ      |L1.2152|
00076e  f89401b0          LDRB     r0,[r4,#0x1b0]
000772  f0000002          AND      r0,r0,#2
000776  2800              CMP      r0,#0
000778  d0f8              BEQ      |L1.1900|
;;;832       {
;;;833          if (png_ptr->pass < 6)
00077a  f8940264          LDRB     r0,[r4,#0x264]
00077e  2806              CMP      r0,#6
000780  da02              BGE      |L1.1928|
;;;834    /*       old interface (pre-1.0.9):
;;;835             png_do_read_interlace(&(png_ptr->row_info),
;;;836                png_ptr->row_buf + 1, png_ptr->pass, png_ptr->transformations);
;;;837     */
;;;838             png_do_read_interlace(png_ptr);
000782  4620              MOV      r0,r4
000784  f7fffffe          BL       png_do_read_interlace
                  |L1.1928|
;;;839    
;;;840        switch (png_ptr->pass)
000788  f8940264          LDRB     r0,[r4,#0x264]
00078c  2807              CMP      r0,#7
00078e  d252              BCS      |L1.2102|
000790  e8dff000          TBB      [pc,r0]
000794  04527ab1          DCB      0x04,0x52,0x7a,0xb1
000798  d8fcfb00          DCB      0xd8,0xfc,0xfb,0x00
;;;841        {
;;;842             case 0:
;;;843             {
;;;844                int i;
;;;845                for (i = 0; i < 8 && png_ptr->pass == 0; i++)
00079c  2500              MOVS     r5,#0
00079e  e009              B        |L1.1972|
                  |L1.1952|
;;;846                {
;;;847                   png_push_have_row(png_ptr, png_ptr->row_buf + 1);
0007a0  f8d4022c          LDR      r0,[r4,#0x22c]
0007a4  1c41              ADDS     r1,r0,#1
0007a6  4620              MOV      r0,r4
0007a8  f7fffffe          BL       png_push_have_row
;;;848                   png_read_push_finish_row(png_ptr); /* updates png_ptr->pass */
0007ac  4620              MOV      r0,r4
0007ae  f7fffffe          BL       png_read_push_finish_row
0007b2  1c6d              ADDS     r5,r5,#1              ;845
                  |L1.1972|
0007b4  2d08              CMP      r5,#8                 ;845
0007b6  da03              BGE      |L1.1984|
0007b8  f8940264          LDRB     r0,[r4,#0x264]        ;845
0007bc  2800              CMP      r0,#0                 ;845
0007be  d0ef              BEQ      |L1.1952|
                  |L1.1984|
;;;849                }
;;;850                if (png_ptr->pass == 2) /* pass 1 might be empty */
0007c0  f8940264          LDRB     r0,[r4,#0x264]
0007c4  2802              CMP      r0,#2
0007c6  d10f              BNE      |L1.2024|
;;;851                {
;;;852                   for (i = 0; i < 4 && png_ptr->pass == 2; i++)
0007c8  2500              MOVS     r5,#0
0007ca  e007              B        |L1.2012|
                  |L1.1996|
;;;853                   {
;;;854                      png_push_have_row(png_ptr, png_bytep_NULL);
0007cc  2100              MOVS     r1,#0
0007ce  4620              MOV      r0,r4
0007d0  f7fffffe          BL       png_push_have_row
;;;855                      png_read_push_finish_row(png_ptr);
0007d4  4620              MOV      r0,r4
0007d6  f7fffffe          BL       png_read_push_finish_row
0007da  1c6d              ADDS     r5,r5,#1              ;852
                  |L1.2012|
0007dc  2d04              CMP      r5,#4                 ;852
0007de  da03              BGE      |L1.2024|
0007e0  f8940264          LDRB     r0,[r4,#0x264]        ;852
0007e4  2802              CMP      r0,#2                 ;852
0007e6  d0f1              BEQ      |L1.1996|
                  |L1.2024|
;;;856                   }
;;;857                }
;;;858                if (png_ptr->pass == 4 && png_ptr->height <= 4)
0007e8  f8940264          LDRB     r0,[r4,#0x264]
0007ec  2804              CMP      r0,#4
0007ee  d113              BNE      |L1.2072|
0007f0  f8d4020c          LDR      r0,[r4,#0x20c]
0007f4  2804              CMP      r0,#4
0007f6  d80f              BHI      |L1.2072|
;;;859                {
;;;860                   for (i = 0; i < 2 && png_ptr->pass == 4; i++)
0007f8  2500              MOVS     r5,#0
0007fa  e007              B        |L1.2060|
                  |L1.2044|
;;;861                   {
;;;862                      png_push_have_row(png_ptr, png_bytep_NULL);
0007fc  2100              MOVS     r1,#0
0007fe  4620              MOV      r0,r4
000800  f7fffffe          BL       png_push_have_row
;;;863                      png_read_push_finish_row(png_ptr);
000804  4620              MOV      r0,r4
000806  f7fffffe          BL       png_read_push_finish_row
00080a  1c6d              ADDS     r5,r5,#1              ;860
                  |L1.2060|
00080c  2d02              CMP      r5,#2                 ;860
00080e  da03              BGE      |L1.2072|
000810  f8940264          LDRB     r0,[r4,#0x264]        ;860
000814  2804              CMP      r0,#4                 ;860
000816  d0f1              BEQ      |L1.2044|
                  |L1.2072|
;;;864                   }
;;;865                }
;;;866                if (png_ptr->pass == 6 && png_ptr->height <= 4)
000818  f8940264          LDRB     r0,[r4,#0x264]
00081c  2806              CMP      r0,#6
00081e  d10a              BNE      |L1.2102|
000820  f8d4020c          LDR      r0,[r4,#0x20c]
000824  2804              CMP      r0,#4
000826  d806              BHI      |L1.2102|
;;;867                {
;;;868                    png_push_have_row(png_ptr, png_bytep_NULL);
000828  2100              MOVS     r1,#0
00082a  4620              MOV      r0,r4
00082c  f7fffffe          BL       png_push_have_row
;;;869                    png_read_push_finish_row(png_ptr);
000830  4620              MOV      r0,r4
000832  f7fffffe          BL       png_read_push_finish_row
                  |L1.2102|
;;;870                }
;;;871                break;
000836  e0f2              B        |L1.2590|
;;;872             }
;;;873             case 1:
;;;874             {
;;;875                int i;
;;;876                for (i = 0; i < 8 && png_ptr->pass == 1; i++)
000838  2500              MOVS     r5,#0
00083a  e009              B        |L1.2128|
                  |L1.2108|
;;;877                {
;;;878                   png_push_have_row(png_ptr, png_ptr->row_buf + 1);
00083c  f8d4022c          LDR      r0,[r4,#0x22c]
000840  1c41              ADDS     r1,r0,#1
000842  4620              MOV      r0,r4
000844  f7fffffe          BL       png_push_have_row
;;;879                   png_read_push_finish_row(png_ptr);
000848  4620              MOV      r0,r4
00084a  f7fffffe          BL       png_read_push_finish_row
00084e  1c6d              ADDS     r5,r5,#1              ;876
                  |L1.2128|
000850  2d08              CMP      r5,#8                 ;876
000852  da03              BGE      |L1.2140|
000854  f8940264          LDRB     r0,[r4,#0x264]        ;876
000858  2801              CMP      r0,#1                 ;876
00085a  d0ef              BEQ      |L1.2108|
                  |L1.2140|
;;;880                }
;;;881                if (png_ptr->pass == 2) /* skip top 4 generated rows */
00085c  f8940264          LDRB     r0,[r4,#0x264]
000860  2802              CMP      r0,#2
000862  d110              BNE      |L1.2182|
;;;882                {
;;;883                   for (i = 0; i < 4 && png_ptr->pass == 2; i++)
000864  2500              MOVS     r5,#0
000866  e008              B        |L1.2170|
                  |L1.2152|
000868  e0da              B        |L1.2592|
                  |L1.2154|
;;;884                   {
;;;885                      png_push_have_row(png_ptr, png_bytep_NULL);
00086a  2100              MOVS     r1,#0
00086c  4620              MOV      r0,r4
00086e  f7fffffe          BL       png_push_have_row
;;;886                      png_read_push_finish_row(png_ptr);
000872  4620              MOV      r0,r4
000874  f7fffffe          BL       png_read_push_finish_row
000878  1c6d              ADDS     r5,r5,#1              ;883
                  |L1.2170|
00087a  2d04              CMP      r5,#4                 ;883
00087c  da03              BGE      |L1.2182|
00087e  f8940264          LDRB     r0,[r4,#0x264]        ;883
000882  2802              CMP      r0,#2                 ;883
000884  d0f1              BEQ      |L1.2154|
                  |L1.2182|
;;;887                   }
;;;888                }
;;;889                break;
000886  e0ca              B        |L1.2590|
;;;890             }
;;;891             case 2:
;;;892             {
;;;893                int i;
;;;894                for (i = 0; i < 4 && png_ptr->pass == 2; i++)
000888  2500              MOVS     r5,#0
00088a  e009              B        |L1.2208|
                  |L1.2188|
;;;895                {
;;;896                   png_push_have_row(png_ptr, png_ptr->row_buf + 1);
00088c  f8d4022c          LDR      r0,[r4,#0x22c]
000890  1c41              ADDS     r1,r0,#1
000892  4620              MOV      r0,r4
000894  f7fffffe          BL       png_push_have_row
;;;897                   png_read_push_finish_row(png_ptr);
000898  4620              MOV      r0,r4
00089a  f7fffffe          BL       png_read_push_finish_row
00089e  1c6d              ADDS     r5,r5,#1              ;894
                  |L1.2208|
0008a0  2d04              CMP      r5,#4                 ;894
0008a2  da03              BGE      |L1.2220|
0008a4  f8940264          LDRB     r0,[r4,#0x264]        ;894
0008a8  2802              CMP      r0,#2                 ;894
0008aa  d0ef              BEQ      |L1.2188|
                  |L1.2220|
;;;898                }
;;;899                for (i = 0; i < 4 && png_ptr->pass == 2; i++)
0008ac  2500              MOVS     r5,#0
0008ae  e007              B        |L1.2240|
                  |L1.2224|
;;;900                {
;;;901                   png_push_have_row(png_ptr, png_bytep_NULL);
0008b0  2100              MOVS     r1,#0
0008b2  4620              MOV      r0,r4
0008b4  f7fffffe          BL       png_push_have_row
;;;902                   png_read_push_finish_row(png_ptr);
0008b8  4620              MOV      r0,r4
0008ba  f7fffffe          BL       png_read_push_finish_row
0008be  1c6d              ADDS     r5,r5,#1              ;899
                  |L1.2240|
0008c0  2d04              CMP      r5,#4                 ;899
0008c2  da03              BGE      |L1.2252|
0008c4  f8940264          LDRB     r0,[r4,#0x264]        ;899
0008c8  2802              CMP      r0,#2                 ;899
0008ca  d0f1              BEQ      |L1.2224|
                  |L1.2252|
;;;903                }
;;;904                if (png_ptr->pass == 4) /* pass 3 might be empty */
0008cc  f8940264          LDRB     r0,[r4,#0x264]
0008d0  2804              CMP      r0,#4
0008d2  d10f              BNE      |L1.2292|
;;;905                {
;;;906                   for (i = 0; i < 2 && png_ptr->pass == 4; i++)
0008d4  2500              MOVS     r5,#0
0008d6  e007              B        |L1.2280|
                  |L1.2264|
;;;907                   {
;;;908                      png_push_have_row(png_ptr, png_bytep_NULL);
0008d8  2100              MOVS     r1,#0
0008da  4620              MOV      r0,r4
0008dc  f7fffffe          BL       png_push_have_row
;;;909                      png_read_push_finish_row(png_ptr);
0008e0  4620              MOV      r0,r4
0008e2  f7fffffe          BL       png_read_push_finish_row
0008e6  1c6d              ADDS     r5,r5,#1              ;906
                  |L1.2280|
0008e8  2d02              CMP      r5,#2                 ;906
0008ea  da03              BGE      |L1.2292|
0008ec  f8940264          LDRB     r0,[r4,#0x264]        ;906
0008f0  2804              CMP      r0,#4                 ;906
0008f2  d0f1              BEQ      |L1.2264|
                  |L1.2292|
;;;910                   }
;;;911                }
;;;912                break;
0008f4  e093              B        |L1.2590|
;;;913             }
;;;914             case 3:
;;;915             {
;;;916                int i;
;;;917                for (i = 0; i < 4 && png_ptr->pass == 3; i++)
0008f6  2500              MOVS     r5,#0
0008f8  e009              B        |L1.2318|
                  |L1.2298|
;;;918                {
;;;919                   png_push_have_row(png_ptr, png_ptr->row_buf + 1);
0008fa  f8d4022c          LDR      r0,[r4,#0x22c]
0008fe  1c41              ADDS     r1,r0,#1
000900  4620              MOV      r0,r4
000902  f7fffffe          BL       png_push_have_row
;;;920                   png_read_push_finish_row(png_ptr);
000906  4620              MOV      r0,r4
000908  f7fffffe          BL       png_read_push_finish_row
00090c  1c6d              ADDS     r5,r5,#1              ;917
                  |L1.2318|
00090e  2d04              CMP      r5,#4                 ;917
000910  da03              BGE      |L1.2330|
000912  f8940264          LDRB     r0,[r4,#0x264]        ;917
000916  2803              CMP      r0,#3                 ;917
000918  d0ef              BEQ      |L1.2298|
                  |L1.2330|
;;;921                }
;;;922                if (png_ptr->pass == 4) /* skip top two generated rows */
00091a  f8940264          LDRB     r0,[r4,#0x264]
00091e  2804              CMP      r0,#4
000920  d10f              BNE      |L1.2370|
;;;923                {
;;;924                   for (i = 0; i < 2 && png_ptr->pass == 4; i++)
000922  2500              MOVS     r5,#0
000924  e007              B        |L1.2358|
                  |L1.2342|
;;;925                   {
;;;926                      png_push_have_row(png_ptr, png_bytep_NULL);
000926  2100              MOVS     r1,#0
000928  4620              MOV      r0,r4
00092a  f7fffffe          BL       png_push_have_row
;;;927                      png_read_push_finish_row(png_ptr);
00092e  4620              MOV      r0,r4
000930  f7fffffe          BL       png_read_push_finish_row
000934  1c6d              ADDS     r5,r5,#1              ;924
                  |L1.2358|
000936  2d02              CMP      r5,#2                 ;924
000938  da03              BGE      |L1.2370|
00093a  f8940264          LDRB     r0,[r4,#0x264]        ;924
00093e  2804              CMP      r0,#4                 ;924
000940  d0f1              BEQ      |L1.2342|
                  |L1.2370|
;;;928                   }
;;;929                }
;;;930                break;
000942  e06c              B        |L1.2590|
;;;931             }
;;;932             case 4:
;;;933             {
;;;934                int i;
;;;935                for (i = 0; i < 2 && png_ptr->pass == 4; i++)
000944  2500              MOVS     r5,#0
000946  e009              B        |L1.2396|
                  |L1.2376|
;;;936                {
;;;937                   png_push_have_row(png_ptr, png_ptr->row_buf + 1);
000948  f8d4022c          LDR      r0,[r4,#0x22c]
00094c  1c41              ADDS     r1,r0,#1
00094e  4620              MOV      r0,r4
000950  f7fffffe          BL       png_push_have_row
;;;938                   png_read_push_finish_row(png_ptr);
000954  4620              MOV      r0,r4
000956  f7fffffe          BL       png_read_push_finish_row
00095a  1c6d              ADDS     r5,r5,#1              ;935
                  |L1.2396|
00095c  2d02              CMP      r5,#2                 ;935
00095e  da03              BGE      |L1.2408|
000960  f8940264          LDRB     r0,[r4,#0x264]        ;935
000964  2804              CMP      r0,#4                 ;935
000966  d0ef              BEQ      |L1.2376|
                  |L1.2408|
;;;939                }
;;;940                for (i = 0; i < 2 && png_ptr->pass == 4; i++)
000968  2500              MOVS     r5,#0
00096a  e007              B        |L1.2428|
                  |L1.2412|
;;;941                {
;;;942                   png_push_have_row(png_ptr, png_bytep_NULL);
00096c  2100              MOVS     r1,#0
00096e  4620              MOV      r0,r4
000970  f7fffffe          BL       png_push_have_row
;;;943                   png_read_push_finish_row(png_ptr);
000974  4620              MOV      r0,r4
000976  f7fffffe          BL       png_read_push_finish_row
00097a  1c6d              ADDS     r5,r5,#1              ;940
                  |L1.2428|
00097c  2d02              CMP      r5,#2                 ;940
00097e  da03              BGE      |L1.2440|
000980  f8940264          LDRB     r0,[r4,#0x264]        ;940
000984  2804              CMP      r0,#4                 ;940
000986  d0f1              BEQ      |L1.2412|
                  |L1.2440|
;;;944                }
;;;945                if (png_ptr->pass == 6) /* pass 5 might be empty */
000988  e001              B        |L1.2446|
00098a  e033              B        |L1.2548|
00098c  e00b              B        |L1.2470|
                  |L1.2446|
00098e  f8940264          LDRB     r0,[r4,#0x264]
000992  2806              CMP      r0,#6
000994  d106              BNE      |L1.2468|
;;;946                {
;;;947                   png_push_have_row(png_ptr, png_bytep_NULL);
000996  2100              MOVS     r1,#0
000998  4620              MOV      r0,r4
00099a  f7fffffe          BL       png_push_have_row
;;;948                   png_read_push_finish_row(png_ptr);
00099e  4620              MOV      r0,r4
0009a0  f7fffffe          BL       png_read_push_finish_row
                  |L1.2468|
;;;949                }
;;;950                break;
0009a4  e03b              B        |L1.2590|
                  |L1.2470|
;;;951             }
;;;952             case 5:
;;;953             {
;;;954                int i;
;;;955                for (i = 0; i < 2 && png_ptr->pass == 5; i++)
0009a6  2500              MOVS     r5,#0
0009a8  e009              B        |L1.2494|
                  |L1.2474|
;;;956                {
;;;957                   png_push_have_row(png_ptr, png_ptr->row_buf + 1);
0009aa  f8d4022c          LDR      r0,[r4,#0x22c]
0009ae  1c41              ADDS     r1,r0,#1
0009b0  4620              MOV      r0,r4
0009b2  f7fffffe          BL       png_push_have_row
;;;958                   png_read_push_finish_row(png_ptr);
0009b6  4620              MOV      r0,r4
0009b8  f7fffffe          BL       png_read_push_finish_row
0009bc  1c6d              ADDS     r5,r5,#1              ;955
                  |L1.2494|
0009be  2d02              CMP      r5,#2                 ;955
0009c0  da03              BGE      |L1.2506|
0009c2  f8940264          LDRB     r0,[r4,#0x264]        ;955
0009c6  2805              CMP      r0,#5                 ;955
0009c8  d0ef              BEQ      |L1.2474|
                  |L1.2506|
;;;959                }
;;;960                if (png_ptr->pass == 6) /* skip top generated row */
0009ca  f8940264          LDRB     r0,[r4,#0x264]
0009ce  2806              CMP      r0,#6
0009d0  d106              BNE      |L1.2528|
;;;961                {
;;;962                   png_push_have_row(png_ptr, png_bytep_NULL);
0009d2  2100              MOVS     r1,#0
0009d4  4620              MOV      r0,r4
0009d6  f7fffffe          BL       png_push_have_row
;;;963                   png_read_push_finish_row(png_ptr);
0009da  4620              MOV      r0,r4
0009dc  f7fffffe          BL       png_read_push_finish_row
                  |L1.2528|
;;;964                }
;;;965                break;
0009e0  e01d              B        |L1.2590|
0009e2  0000              DCW      0x0000
                  |L1.2532|
                          DCD      png_pass_inc
                  |L1.2536|
                          DCD      png_pass_start
                  |L1.2540|
                          DCD      png_pass_yinc
                  |L1.2544|
                          DCD      png_pass_ystart
                  |L1.2548|
;;;966             }
;;;967             case 6:
;;;968             {
;;;969                png_push_have_row(png_ptr, png_ptr->row_buf + 1);
0009f4  f8d4022c          LDR      r0,[r4,#0x22c]
0009f8  1c41              ADDS     r1,r0,#1
0009fa  4620              MOV      r0,r4
0009fc  f7fffffe          BL       png_push_have_row
;;;970                png_read_push_finish_row(png_ptr);
000a00  4620              MOV      r0,r4
000a02  f7fffffe          BL       png_read_push_finish_row
;;;971                if (png_ptr->pass != 6)
000a06  f8940264          LDRB     r0,[r4,#0x264]
000a0a  2806              CMP      r0,#6
000a0c  d000              BEQ      |L1.2576|
;;;972                   break;
000a0e  e006              B        |L1.2590|
                  |L1.2576|
;;;973                png_push_have_row(png_ptr, png_bytep_NULL);
000a10  2100              MOVS     r1,#0
000a12  4620              MOV      r0,r4
000a14  f7fffffe          BL       png_push_have_row
;;;974                png_read_push_finish_row(png_ptr);
000a18  4620              MOV      r0,r4
000a1a  f7fffffe          BL       png_read_push_finish_row
                  |L1.2590|
000a1e  e008              B        |L1.2610|
                  |L1.2592|
;;;975             }
;;;976          }
;;;977       }
;;;978       else
;;;979    #endif
;;;980       {
;;;981          png_push_have_row(png_ptr, png_ptr->row_buf + 1);
000a20  f8d4022c          LDR      r0,[r4,#0x22c]
000a24  1c41              ADDS     r1,r0,#1
000a26  4620              MOV      r0,r4
000a28  f7fffffe          BL       png_push_have_row
;;;982          png_read_push_finish_row(png_ptr);
000a2c  4620              MOV      r0,r4
000a2e  f7fffffe          BL       png_read_push_finish_row
                  |L1.2610|
;;;983       }
;;;984    }
000a32  bd38              POP      {r3-r5,pc}
;;;985    
                          ENDP

                  png_process_IDAT_data PROC
;;;750    void /* PRIVATE */
;;;751    png_process_IDAT_data(png_structp png_ptr, png_bytep buffer,
000a34  e92d41f0          PUSH     {r4-r8,lr}
;;;752       png_size_t buffer_length)
;;;753    {
000a38  4604              MOV      r4,r0
000a3a  460f              MOV      r7,r1
000a3c  4616              MOV      r6,r2
;;;754       int ret;
;;;755    
;;;756       if ((png_ptr->flags & PNG_FLAG_ZLIB_FINISHED) && buffer_length)
000a3e  f89401ac          LDRB     r0,[r4,#0x1ac]
000a42  f0000020          AND      r0,r0,#0x20
000a46  b120              CBZ      r0,|L1.2642|
000a48  b11e              CBZ      r6,|L1.2642|
;;;757          png_error(png_ptr, "Extra compression data");
000a4a  a1f8              ADR      r1,|L1.3628|
000a4c  4620              MOV      r0,r4
000a4e  f7fffffe          BL       png_error
                  |L1.2642|
;;;758    
;;;759       png_ptr->zstream.next_in = buffer;
000a52  f8c471b4          STR      r7,[r4,#0x1b4]
;;;760       png_ptr->zstream.avail_in = (uInt)buffer_length;
000a56  f44f70dc          MOV      r0,#0x1b8
000a5a  5106              STR      r6,[r0,r4]
;;;761       for(;;)
000a5c  bf00              NOP      
                  |L1.2654|
;;;762       {
;;;763          ret = inflate(&png_ptr->zstream, Z_PARTIAL_FLUSH);
000a5e  2101              MOVS     r1,#1
000a60  f50470da          ADD      r0,r4,#0x1b4
000a64  f7fffffe          BL       inflate
000a68  4605              MOV      r5,r0
;;;764          if (ret != Z_OK)
000a6a  b325              CBZ      r5,|L1.2742|
;;;765          {
;;;766             if (ret == Z_STREAM_END)
000a6c  2d01              CMP      r5,#1
000a6e  d11b              BNE      |L1.2728|
;;;767             {
;;;768                if (png_ptr->zstream.avail_in)
000a70  f44f70dc          MOV      r0,#0x1b8
000a74  5900              LDR      r0,[r0,r4]
000a76  b118              CBZ      r0,|L1.2688|
;;;769                   png_error(png_ptr, "Extra compressed data");
000a78  a1f2              ADR      r1,|L1.3652|
000a7a  4620              MOV      r0,r4
000a7c  f7fffffe          BL       png_error
                  |L1.2688|
;;;770                if (!(png_ptr->zstream.avail_out))
000a80  f44f70e2          MOV      r0,#0x1c4
000a84  5900              LDR      r0,[r0,r4]
000a86  b910              CBNZ     r0,|L1.2702|
;;;771                {
;;;772                   png_push_process_row(png_ptr);
000a88  4620              MOV      r0,r4
000a8a  f7fffffe          BL       png_push_process_row
                  |L1.2702|
;;;773                }
;;;774    
;;;775                png_ptr->mode |= PNG_AFTER_IDAT;
000a8e  f8d401a8          LDR      r0,[r4,#0x1a8]
000a92  f0400008          ORR      r0,r0,#8
000a96  f8c401a8          STR      r0,[r4,#0x1a8]
;;;776                png_ptr->flags |= PNG_FLAG_ZLIB_FINISHED;
000a9a  f8d401ac          LDR      r0,[r4,#0x1ac]
000a9e  f0400020          ORR      r0,r0,#0x20
000aa2  f8c401ac          STR      r0,[r4,#0x1ac]
;;;777                break;
000aa6  e037              B        |L1.2840|
                  |L1.2728|
;;;778             }
;;;779             else if (ret == Z_BUF_ERROR)
000aa8  1d68              ADDS     r0,r5,#5
000aaa  b900              CBNZ     r0,|L1.2734|
;;;780                break;
000aac  e034              B        |L1.2840|
                  |L1.2734|
;;;781             else
;;;782                png_error(png_ptr, "Decompression Error");
000aae  a1eb              ADR      r1,|L1.3676|
000ab0  4620              MOV      r0,r4
000ab2  f7fffffe          BL       png_error
                  |L1.2742|
;;;783          }
;;;784          if (!(png_ptr->zstream.avail_out))
000ab6  f44f70e2          MOV      r0,#0x1c4
000aba  5900              LDR      r0,[r0,r4]
000abc  bb58              CBNZ     r0,|L1.2838|
;;;785          {
;;;786             if ((
000abe  f8940263          LDRB     r0,[r4,#0x263]
000ac2  b118              CBZ      r0,|L1.2764|
;;;787    #if defined(PNG_READ_INTERLACING_SUPPORTED)
;;;788                 png_ptr->interlaced && png_ptr->pass > 6) ||
000ac4  f8940264          LDRB     r0,[r4,#0x264]
000ac8  2806              CMP      r0,#6
000aca  dc08              BGT      |L1.2782|
                  |L1.2764|
;;;789                 (!png_ptr->interlaced &&
000acc  f8940263          LDRB     r0,[r4,#0x263]
000ad0  b9a0              CBNZ     r0,|L1.2812|
;;;790    #endif
;;;791                 png_ptr->row_number == png_ptr->num_rows))
000ad2  f8d41210          LDR      r1,[r4,#0x210]
000ad6  f8d40224          LDR      r0,[r4,#0x224]
000ada  4288              CMP      r0,r1
000adc  d10e              BNE      |L1.2812|
                  |L1.2782|
;;;792             {
;;;793               if (png_ptr->zstream.avail_in)
000ade  f44f70dc          MOV      r0,#0x1b8
000ae2  5900              LDR      r0,[r0,r4]
000ae4  b118              CBZ      r0,|L1.2798|
;;;794                 png_warning(png_ptr, "Too much data in IDAT chunks");
000ae6  a1e2              ADR      r1,|L1.3696|
000ae8  4620              MOV      r0,r4
000aea  f7fffffe          BL       png_warning
                  |L1.2798|
;;;795               png_ptr->flags |= PNG_FLAG_ZLIB_FINISHED;
000aee  f8d401ac          LDR      r0,[r4,#0x1ac]
000af2  f0400020          ORR      r0,r0,#0x20
000af6  f8c401ac          STR      r0,[r4,#0x1ac]
;;;796               break;
000afa  e00d              B        |L1.2840|
                  |L1.2812|
;;;797             }
;;;798             png_push_process_row(png_ptr);
000afc  4620              MOV      r0,r4
000afe  f7fffffe          BL       png_push_process_row
;;;799             png_ptr->zstream.avail_out = (uInt)png_ptr->irowbytes;
000b02  f44f70e2          MOV      r0,#0x1c4
000b06  f8d4121c          LDR      r1,[r4,#0x21c]
000b0a  5101              STR      r1,[r0,r4]
;;;800             png_ptr->zstream.next_out = png_ptr->row_buf;
000b0c  1f00              SUBS     r0,r0,#4
000b0e  f8d4122c          LDR      r1,[r4,#0x22c]
000b12  5101              STR      r1,[r0,r4]
000b14  e7a3              B        |L1.2654|
                  |L1.2838|
;;;801          }
;;;802          else
;;;803             break;
000b16  bf00              NOP      
                  |L1.2840|
000b18  bf00              NOP                            ;777
;;;804       }
;;;805    }
000b1a  e8bd81f0          POP      {r4-r8,pc}
;;;806    
                          ENDP

                  png_push_fill_buffer PROC
;;;561    void PNGAPI
;;;562    png_push_fill_buffer(png_structp png_ptr, png_bytep buffer, png_size_t length)
000b1e  e92d41f0          PUSH     {r4-r8,lr}
;;;563    {
000b22  4604              MOV      r4,r0
000b24  4688              MOV      r8,r1
000b26  4616              MOV      r6,r2
;;;564       png_bytep ptr;
;;;565    
;;;566       if(png_ptr == NULL) return;
000b28  b90c              CBNZ     r4,|L1.2862|
                  |L1.2858|
;;;567       ptr = buffer;
;;;568       if (png_ptr->save_buffer_size)
;;;569       {
;;;570          png_size_t save_size;
;;;571    
;;;572          if (length < png_ptr->save_buffer_size)
;;;573             save_size = length;
;;;574          else
;;;575             save_size = png_ptr->save_buffer_size;
;;;576    
;;;577          png_memcpy(ptr, png_ptr->save_buffer_ptr, save_size);
;;;578          length -= save_size;
;;;579          ptr += save_size;
;;;580          png_ptr->buffer_size -= save_size;
;;;581          png_ptr->save_buffer_size -= save_size;
;;;582          png_ptr->save_buffer_ptr += save_size;
;;;583       }
;;;584       if (length && png_ptr->current_buffer_size)
;;;585       {
;;;586          png_size_t save_size;
;;;587    
;;;588          if (length < png_ptr->current_buffer_size)
;;;589             save_size = length;
;;;590          else
;;;591             save_size = png_ptr->current_buffer_size;
;;;592    
;;;593          png_memcpy(ptr, png_ptr->current_buffer_ptr, save_size);
;;;594          png_ptr->buffer_size -= save_size;
;;;595          png_ptr->current_buffer_size -= save_size;
;;;596          png_ptr->current_buffer_ptr += save_size;
;;;597       }
;;;598    }
000b2a  e8bd81f0          POP      {r4-r8,pc}
                  |L1.2862|
000b2e  4647              MOV      r7,r8                 ;567
000b30  f8d40304          LDR      r0,[r4,#0x304]        ;568
000b34  b1e0              CBZ      r0,|L1.2928|
000b36  f8d40304          LDR      r0,[r4,#0x304]        ;572
000b3a  42b0              CMP      r0,r6                 ;572
000b3c  d901              BLS      |L1.2882|
000b3e  4635              MOV      r5,r6                 ;573
000b40  e001              B        |L1.2886|
                  |L1.2882|
000b42  f8d45304          LDR      r5,[r4,#0x304]        ;575
                  |L1.2886|
000b46  f504743b          ADD      r4,r4,#0x2ec          ;577
000b4a  462a              MOV      r2,r5                 ;577
000b4c  4638              MOV      r0,r7                 ;577
000b4e  6821              LDR      r1,[r4,#0]            ;577
000b50  f7fffffe          BL       __aeabi_memcpy
000b54  1b76              SUBS     r6,r6,r5              ;578
000b56  442f              ADD      r7,r7,r5              ;579
000b58  6a20              LDR      r0,[r4,#0x20]         ;580
000b5a  1b40              SUBS     r0,r0,r5              ;580
000b5c  6220              STR      r0,[r4,#0x20]         ;580
000b5e  69a0              LDR      r0,[r4,#0x18]         ;581
000b60  1b40              SUBS     r0,r0,r5              ;581
000b62  61a0              STR      r0,[r4,#0x18]         ;581
000b64  6820              LDR      r0,[r4,#0]            ;582
000b66  4428              ADD      r0,r0,r5              ;582
000b68  6020              STR      r0,[r4,#0]            ;582
000b6a  f5a4743b          SUB      r4,r4,#0x2ec          ;582
000b6e  bf00              NOP                            ;583
                  |L1.2928|
000b70  b1ee              CBZ      r6,|L1.2990|
000b72  f8d40310          LDR      r0,[r4,#0x310]        ;584
000b76  b1d0              CBZ      r0,|L1.2990|
000b78  f8d40310          LDR      r0,[r4,#0x310]        ;588
000b7c  42b0              CMP      r0,r6                 ;588
000b7e  d901              BLS      |L1.2948|
000b80  4635              MOV      r5,r6                 ;589
000b82  e001              B        |L1.2952|
                  |L1.2948|
000b84  f8d45310          LDR      r5,[r4,#0x310]        ;591
                  |L1.2952|
000b88  f504743d          ADD      r4,r4,#0x2f4          ;593
000b8c  462a              MOV      r2,r5                 ;593
000b8e  4638              MOV      r0,r7                 ;593
000b90  6821              LDR      r1,[r4,#0]            ;593
000b92  f7fffffe          BL       __aeabi_memcpy
000b96  69a0              LDR      r0,[r4,#0x18]         ;594
000b98  1b40              SUBS     r0,r0,r5              ;594
000b9a  61a0              STR      r0,[r4,#0x18]         ;594
000b9c  69e0              LDR      r0,[r4,#0x1c]         ;595
000b9e  1b40              SUBS     r0,r0,r5              ;595
000ba0  61e0              STR      r0,[r4,#0x1c]         ;595
000ba2  6820              LDR      r0,[r4,#0]            ;596
000ba4  4428              ADD      r0,r0,r5              ;596
000ba6  6020              STR      r0,[r4,#0]            ;596
000ba8  f5a4743d          SUB      r4,r4,#0x2f4          ;596
000bac  bf00              NOP                            ;597
                  |L1.2990|
000bae  bf00              NOP      
000bb0  e7bb              B        |L1.2858|
;;;599    
                          ENDP

                  png_push_read_IDAT PROC
;;;659    void /* PRIVATE */
;;;660    png_push_read_IDAT(png_structp png_ptr)
000bb2  b538              PUSH     {r3-r5,lr}
;;;661    {
000bb4  4604              MOV      r4,r0
;;;662    #ifdef PNG_USE_LOCAL_ARRAYS
;;;663       PNG_IDAT;
;;;664    #endif
;;;665       if (!(png_ptr->mode & PNG_HAVE_CHUNK_HEADER))
000bb6  f8b401a8          LDRH     r0,[r4,#0x1a8]
000bba  f4007080          AND      r0,r0,#0x100
000bbe  2800              CMP      r0,#0
000bc0  d13a              BNE      |L1.3128|
;;;666       {
;;;667          png_byte chunk_length[4];
;;;668    
;;;669          if (png_ptr->buffer_size < 8)
000bc2  f8d4030c          LDR      r0,[r4,#0x30c]
000bc6  2808              CMP      r0,#8
000bc8  d203              BCS      |L1.3026|
;;;670          {
;;;671             png_push_save_buffer(png_ptr);
000bca  4620              MOV      r0,r4
000bcc  f7fffffe          BL       png_push_save_buffer
                  |L1.3024|
;;;672             return;
;;;673          }
;;;674    
;;;675          png_push_fill_buffer(png_ptr, chunk_length, 4);
;;;676          png_ptr->push_length = png_get_uint_31(png_ptr,chunk_length);
;;;677          png_reset_crc(png_ptr);
;;;678          png_crc_read(png_ptr, png_ptr->chunk_name, 4);
;;;679          png_ptr->mode |= PNG_HAVE_CHUNK_HEADER;
;;;680    
;;;681          if (png_memcmp(png_ptr->chunk_name, (png_bytep)png_IDAT, 4))
;;;682          {
;;;683             png_ptr->process_mode = PNG_READ_CHUNK_MODE;
;;;684             if (!(png_ptr->flags & PNG_FLAG_ZLIB_FINISHED))
;;;685                png_error(png_ptr, "Not enough compressed data");
;;;686             return;
;;;687          }
;;;688    
;;;689          png_ptr->idat_size = png_ptr->push_length;
;;;690       }
;;;691       if (png_ptr->idat_size && png_ptr->save_buffer_size)
;;;692       {
;;;693          png_size_t save_size;
;;;694    
;;;695          if (png_ptr->idat_size < (png_uint_32)png_ptr->save_buffer_size)
;;;696          {
;;;697             save_size = (png_size_t)png_ptr->idat_size;
;;;698             /* check for overflow */
;;;699             if((png_uint_32)save_size != png_ptr->idat_size)
;;;700                png_error(png_ptr, "save_size overflowed in pngpread");
;;;701          }
;;;702          else
;;;703             save_size = png_ptr->save_buffer_size;
;;;704    
;;;705          png_calculate_crc(png_ptr, png_ptr->save_buffer_ptr, save_size);
;;;706          if (!(png_ptr->flags & PNG_FLAG_ZLIB_FINISHED))
;;;707             png_process_IDAT_data(png_ptr, png_ptr->save_buffer_ptr, save_size);
;;;708          png_ptr->idat_size -= save_size;
;;;709          png_ptr->buffer_size -= save_size;
;;;710          png_ptr->save_buffer_size -= save_size;
;;;711          png_ptr->save_buffer_ptr += save_size;
;;;712       }
;;;713       if (png_ptr->idat_size && png_ptr->current_buffer_size)
;;;714       {
;;;715          png_size_t save_size;
;;;716    
;;;717          if (png_ptr->idat_size < (png_uint_32)png_ptr->current_buffer_size)
;;;718          {
;;;719             save_size = (png_size_t)png_ptr->idat_size;
;;;720             /* check for overflow */
;;;721             if((png_uint_32)save_size != png_ptr->idat_size)
;;;722                png_error(png_ptr, "save_size overflowed in pngpread");
;;;723          }
;;;724          else
;;;725             save_size = png_ptr->current_buffer_size;
;;;726    
;;;727          png_calculate_crc(png_ptr, png_ptr->current_buffer_ptr, save_size);
;;;728          if (!(png_ptr->flags & PNG_FLAG_ZLIB_FINISHED))
;;;729            png_process_IDAT_data(png_ptr, png_ptr->current_buffer_ptr, save_size);
;;;730    
;;;731          png_ptr->idat_size -= save_size;
;;;732          png_ptr->buffer_size -= save_size;
;;;733          png_ptr->current_buffer_size -= save_size;
;;;734          png_ptr->current_buffer_ptr += save_size;
;;;735       }
;;;736       if (!png_ptr->idat_size)
;;;737       {
;;;738          if (png_ptr->buffer_size < 4)
;;;739          {
;;;740             png_push_save_buffer(png_ptr);
;;;741             return;
;;;742          }
;;;743    
;;;744          png_crc_finish(png_ptr, 0);
;;;745          png_ptr->mode &= ~PNG_HAVE_CHUNK_HEADER;
;;;746          png_ptr->mode |= PNG_AFTER_IDAT;
;;;747       }
;;;748    }
000bd0  bd38              POP      {r3-r5,pc}
                  |L1.3026|
000bd2  2204              MOVS     r2,#4                 ;675
000bd4  4669              MOV      r1,sp                 ;675
000bd6  4620              MOV      r0,r4                 ;675
000bd8  f7fffffe          BL       png_push_fill_buffer
000bdc  4669              MOV      r1,sp                 ;676
000bde  4620              MOV      r0,r4                 ;676
000be0  f7fffffe          BL       png_get_uint_31
000be4  f8c402fc          STR      r0,[r4,#0x2fc]        ;676
000be8  4620              MOV      r0,r4                 ;677
000bea  f7fffffe          BL       png_reset_crc
000bee  2204              MOVS     r2,#4                 ;678
000bf0  f5047117          ADD      r1,r4,#0x25c          ;678
000bf4  4620              MOV      r0,r4                 ;678
000bf6  f7fffffe          BL       png_crc_read
000bfa  f8d401a8          LDR      r0,[r4,#0x1a8]        ;679
000bfe  f4407080          ORR      r0,r0,#0x100          ;679
000c02  f8c401a8          STR      r0,[r4,#0x1a8]        ;679
000c06  2204              MOVS     r2,#4                 ;681
000c08  49a1              LDR      r1,|L1.3728|
000c0a  f5047017          ADD      r0,r4,#0x25c          ;681
000c0e  f7fffffe          BL       memcmp
000c12  b160              CBZ      r0,|L1.3118|
000c14  2001              MOVS     r0,#1                 ;683
000c16  f8c40314          STR      r0,[r4,#0x314]        ;683
000c1a  f89401ac          LDRB     r0,[r4,#0x1ac]        ;684
000c1e  f0000020          AND      r0,r0,#0x20           ;684
000c22  b918              CBNZ     r0,|L1.3116|
000c24  a19b              ADR      r1,|L1.3732|
000c26  4620              MOV      r0,r4                 ;685
000c28  f7fffffe          BL       png_error
                  |L1.3116|
000c2c  e7d0              B        |L1.3024|
                  |L1.3118|
000c2e  f8d402fc          LDR      r0,[r4,#0x2fc]        ;689
000c32  f8c4024c          STR      r0,[r4,#0x24c]        ;689
000c36  bf00              NOP                            ;690
                  |L1.3128|
000c38  f8d4024c          LDR      r0,[r4,#0x24c]        ;691
000c3c  2800              CMP      r0,#0                 ;691
000c3e  d03a              BEQ      |L1.3254|
000c40  f8d40304          LDR      r0,[r4,#0x304]        ;691
000c44  2800              CMP      r0,#0                 ;691
000c46  d036              BEQ      |L1.3254|
000c48  f8d41304          LDR      r1,[r4,#0x304]        ;695
000c4c  f8d4024c          LDR      r0,[r4,#0x24c]        ;695
000c50  4288              CMP      r0,r1                 ;695
000c52  d20a              BCS      |L1.3178|
000c54  f8d4524c          LDR      r5,[r4,#0x24c]        ;697
000c58  f8d4024c          LDR      r0,[r4,#0x24c]        ;699
000c5c  42a8              CMP      r0,r5                 ;699
000c5e  d006              BEQ      |L1.3182|
000c60  a193              ADR      r1,|L1.3760|
000c62  4620              MOV      r0,r4                 ;700
000c64  f7fffffe          BL       png_error
000c68  e001              B        |L1.3182|
                  |L1.3178|
000c6a  f8d45304          LDR      r5,[r4,#0x304]        ;703
                  |L1.3182|
000c6e  462a              MOV      r2,r5                 ;705
000c70  4620              MOV      r0,r4                 ;705
000c72  f8d412ec          LDR      r1,[r4,#0x2ec]        ;705
000c76  f7fffffe          BL       png_calculate_crc
000c7a  f89401ac          LDRB     r0,[r4,#0x1ac]        ;706
000c7e  f0000020          AND      r0,r0,#0x20           ;706
000c82  b928              CBNZ     r0,|L1.3216|
000c84  462a              MOV      r2,r5                 ;707
000c86  4620              MOV      r0,r4                 ;707
000c88  f8d412ec          LDR      r1,[r4,#0x2ec]        ;707
000c8c  f7fffffe          BL       png_process_IDAT_data
                  |L1.3216|
000c90  f5047424          ADD      r4,r4,#0x290          ;708
000c94  f8540c44          LDR      r0,[r4,#-0x44]        ;708
000c98  1b40              SUBS     r0,r0,r5              ;708
000c9a  f8440c44          STR      r0,[r4,#-0x44]        ;708
000c9e  6fe0              LDR      r0,[r4,#0x7c]         ;709
000ca0  1b40              SUBS     r0,r0,r5              ;709
000ca2  67e0              STR      r0,[r4,#0x7c]         ;709
000ca4  6f60              LDR      r0,[r4,#0x74]         ;710
000ca6  1b40              SUBS     r0,r0,r5              ;710
000ca8  6760              STR      r0,[r4,#0x74]         ;710
000caa  6de0              LDR      r0,[r4,#0x5c]         ;711
000cac  4428              ADD      r0,r0,r5              ;711
000cae  65e0              STR      r0,[r4,#0x5c]         ;711
000cb0  f5a47424          SUB      r4,r4,#0x290          ;711
000cb4  bf00              NOP                            ;712
                  |L1.3254|
000cb6  f8d4024c          LDR      r0,[r4,#0x24c]        ;713
000cba  2800              CMP      r0,#0                 ;713
000cbc  d039              BEQ      |L1.3378|
000cbe  f8d40310          LDR      r0,[r4,#0x310]        ;713
000cc2  b3b0              CBZ      r0,|L1.3378|
000cc4  f8d41310          LDR      r1,[r4,#0x310]        ;717
000cc8  f8d4024c          LDR      r0,[r4,#0x24c]        ;717
000ccc  4288              CMP      r0,r1                 ;717
000cce  d20a              BCS      |L1.3302|
000cd0  f8d4524c          LDR      r5,[r4,#0x24c]        ;719
000cd4  f8d4024c          LDR      r0,[r4,#0x24c]        ;721
000cd8  42a8              CMP      r0,r5                 ;721
000cda  d006              BEQ      |L1.3306|
000cdc  a174              ADR      r1,|L1.3760|
000cde  4620              MOV      r0,r4                 ;722
000ce0  f7fffffe          BL       png_error
000ce4  e001              B        |L1.3306|
                  |L1.3302|
000ce6  f8d45310          LDR      r5,[r4,#0x310]        ;725
                  |L1.3306|
000cea  462a              MOV      r2,r5                 ;727
000cec  4620              MOV      r0,r4                 ;727
000cee  f8d412f4          LDR      r1,[r4,#0x2f4]        ;727
000cf2  f7fffffe          BL       png_calculate_crc
000cf6  f89401ac          LDRB     r0,[r4,#0x1ac]        ;728
000cfa  f0000020          AND      r0,r0,#0x20           ;728
000cfe  b928              CBNZ     r0,|L1.3340|
000d00  462a              MOV      r2,r5                 ;729
000d02  4620              MOV      r0,r4                 ;729
000d04  f8d412f4          LDR      r1,[r4,#0x2f4]        ;729
000d08  f7fffffe          BL       png_process_IDAT_data
                  |L1.3340|
000d0c  f5047425          ADD      r4,r4,#0x294          ;731
000d10  f8540c48          LDR      r0,[r4,#-0x48]        ;731
000d14  1b40              SUBS     r0,r0,r5              ;731
000d16  f8440c48          STR      r0,[r4,#-0x48]        ;731
000d1a  6fa0              LDR      r0,[r4,#0x78]         ;732
000d1c  1b40              SUBS     r0,r0,r5              ;732
000d1e  67a0              STR      r0,[r4,#0x78]         ;732
000d20  6fe0              LDR      r0,[r4,#0x7c]         ;733
000d22  1b40              SUBS     r0,r0,r5              ;733
000d24  67e0              STR      r0,[r4,#0x7c]         ;733
000d26  6e20              LDR      r0,[r4,#0x60]         ;734
000d28  4428              ADD      r0,r0,r5              ;734
000d2a  6620              STR      r0,[r4,#0x60]         ;734
000d2c  f5a47425          SUB      r4,r4,#0x294          ;734
000d30  bf00              NOP                            ;735
                  |L1.3378|
000d32  f8d4024c          LDR      r0,[r4,#0x24c]        ;736
000d36  b9b8              CBNZ     r0,|L1.3432|
000d38  f8d4030c          LDR      r0,[r4,#0x30c]        ;738
000d3c  2804              CMP      r0,#4                 ;738
000d3e  d203              BCS      |L1.3400|
000d40  4620              MOV      r0,r4                 ;740
000d42  f7fffffe          BL       png_push_save_buffer
000d46  e743              B        |L1.3024|
                  |L1.3400|
000d48  2100              MOVS     r1,#0                 ;744
000d4a  4620              MOV      r0,r4                 ;744
000d4c  f7fffffe          BL       png_crc_finish
000d50  f8d401a8          LDR      r0,[r4,#0x1a8]        ;745
000d54  f4207080          BIC      r0,r0,#0x100          ;745
000d58  f8c401a8          STR      r0,[r4,#0x1a8]        ;745
000d5c  f8d401a8          LDR      r0,[r4,#0x1a8]        ;746
000d60  f0400008          ORR      r0,r0,#8              ;746
000d64  f8c401a8          STR      r0,[r4,#0x1a8]        ;746
                  |L1.3432|
000d68  bf00              NOP      
000d6a  e731              B        |L1.3024|
;;;749    
                          ENDP

                  png_push_crc_skip PROC
;;;506    void /* PRIVATE */
;;;507    png_push_crc_skip(png_structp png_ptr, png_uint_32 skip)
000d6c  2203              MOVS     r2,#3
;;;508    {
;;;509       png_ptr->process_mode = PNG_SKIP_MODE;
000d6e  f8c02314          STR      r2,[r0,#0x314]
;;;510       png_ptr->skip_length = skip;
000d72  f8c01300          STR      r1,[r0,#0x300]
;;;511    }
000d76  4770              BX       lr
;;;512    
                          ENDP

                  png_push_handle_unknown PROC
;;;1464   void /* PRIVATE */
;;;1465   png_push_handle_unknown(png_structp png_ptr, png_infop info_ptr, png_uint_32
000d78  b5f0              PUSH     {r4-r7,lr}
;;;1466      length)
;;;1467   {
000d7a  b085              SUB      sp,sp,#0x14
000d7c  4604              MOV      r4,r0
000d7e  460e              MOV      r6,r1
000d80  4615              MOV      r5,r2
;;;1468      png_uint_32 skip=0;
000d82  2700              MOVS     r7,#0
;;;1469      png_check_chunk_name(png_ptr, png_ptr->chunk_name);
000d84  f5047117          ADD      r1,r4,#0x25c
000d88  4620              MOV      r0,r4
000d8a  f7fffffe          BL       png_check_chunk_name
;;;1470   
;;;1471      if (!(png_ptr->chunk_name[0] & 0x20))
000d8e  f894025c          LDRB     r0,[r4,#0x25c]
000d92  f0000020          AND      r0,r0,#0x20
000d96  b980              CBNZ     r0,|L1.3514|
;;;1472      {
;;;1473   #if defined(PNG_READ_UNKNOWN_CHUNKS_SUPPORTED)
;;;1474         if(png_handle_as_unknown(png_ptr, png_ptr->chunk_name) !=
000d98  f5047117          ADD      r1,r4,#0x25c
000d9c  4620              MOV      r0,r4
000d9e  f7fffffe          BL       png_handle_as_unknown
000da2  2803              CMP      r0,#3
000da4  d006              BEQ      |L1.3508|
;;;1475              PNG_HANDLE_CHUNK_ALWAYS
;;;1476   #if defined(PNG_READ_USER_CHUNKS_SUPPORTED)
;;;1477              && png_ptr->read_user_chunk_fn == NULL
000da6  f8d40358          LDR      r0,[r4,#0x358]
000daa  b918              CBNZ     r0,|L1.3508|
;;;1478   #endif
;;;1479            )
;;;1480   #endif
;;;1481            png_chunk_error(png_ptr, "unknown critical chunk");
000dac  a149              ADR      r1,|L1.3796|
000dae  4620              MOV      r0,r4
000db0  f7fffffe          BL       png_chunk_error
                  |L1.3508|
;;;1482   
;;;1483         /* to quiet compiler warnings about unused info_ptr */
;;;1484         if (info_ptr == NULL)
000db4  b90e              CBNZ     r6,|L1.3514|
                  |L1.3510|
;;;1485            return;
;;;1486      }
;;;1487   
;;;1488   #if defined(PNG_READ_UNKNOWN_CHUNKS_SUPPORTED)
;;;1489      if (png_ptr->flags & PNG_FLAG_KEEP_UNKNOWN_CHUNKS)
;;;1490      {
;;;1491          png_unknown_chunk chunk;
;;;1492   
;;;1493   #ifdef PNG_MAX_MALLOC_64K
;;;1494          if (length > (png_uint_32)65535L)
;;;1495          {
;;;1496              png_warning(png_ptr, "unknown chunk too large to fit in memory");
;;;1497              skip = length - (png_uint_32)65535L;
;;;1498              length = (png_uint_32)65535L;
;;;1499          }
;;;1500   #endif
;;;1501   
;;;1502          png_strcpy((png_charp)chunk.name, (png_charp)png_ptr->chunk_name);
;;;1503          chunk.data = (png_bytep)png_malloc(png_ptr, length);
;;;1504          png_crc_read(png_ptr, chunk.data, length);
;;;1505          chunk.size = length;
;;;1506   #if defined(PNG_READ_USER_CHUNKS_SUPPORTED)
;;;1507          if(png_ptr->read_user_chunk_fn != NULL)
;;;1508          {
;;;1509             /* callback to user unknown chunk handler */
;;;1510             if ((*(png_ptr->read_user_chunk_fn)) (png_ptr, &chunk) <= 0)
;;;1511             {
;;;1512                if (!(png_ptr->chunk_name[0] & 0x20))
;;;1513                   if(png_handle_as_unknown(png_ptr, png_ptr->chunk_name) !=
;;;1514                        PNG_HANDLE_CHUNK_ALWAYS)
;;;1515                      png_chunk_error(png_ptr, "unknown critical chunk");
;;;1516             }
;;;1517                png_set_unknown_chunks(png_ptr, info_ptr, &chunk, 1);
;;;1518          }
;;;1519          else
;;;1520   #endif
;;;1521             png_set_unknown_chunks(png_ptr, info_ptr, &chunk, 1);
;;;1522          png_free(png_ptr, chunk.data);
;;;1523      }
;;;1524      else
;;;1525   #endif
;;;1526         skip=length;
;;;1527      png_push_crc_skip(png_ptr, skip);
;;;1528   }
000db6  b005              ADD      sp,sp,#0x14
000db8  bdf0              POP      {r4-r7,pc}
                  |L1.3514|
000dba  f8b401ac          LDRH     r0,[r4,#0x1ac]        ;1489
000dbe  f4004000          AND      r0,r0,#0x8000         ;1489
000dc2  2800              CMP      r0,#0                 ;1489
000dc4  d031              BEQ      |L1.3626|
000dc6  f5047117          ADD      r1,r4,#0x25c          ;1502
000dca  4668              MOV      r0,sp                 ;1502
000dcc  f7fffffe          BL       strcpy
000dd0  4629              MOV      r1,r5                 ;1503
000dd2  4620              MOV      r0,r4                 ;1503
000dd4  f7fffffe          BL       png_malloc
000dd8  9002              STR      r0,[sp,#8]            ;1503
000dda  462a              MOV      r2,r5                 ;1504
000ddc  4620              MOV      r0,r4                 ;1504
000dde  9902              LDR      r1,[sp,#8]            ;1504
000de0  f7fffffe          BL       png_crc_read
000de4  9503              STR      r5,[sp,#0xc]          ;1505
000de6  f8d40358          LDR      r0,[r4,#0x358]        ;1507
000dea  b1e8              CBZ      r0,|L1.3624|
000dec  4669              MOV      r1,sp                 ;1510
000dee  4620              MOV      r0,r4                 ;1510
000df0  f8d42358          LDR      r2,[r4,#0x358]        ;1510
000df4  4790              BLX      r2                    ;1510
000df6  2800              CMP      r0,#0                 ;1510
000df8  dc0f              BGT      |L1.3610|
000dfa  f894025c          LDRB     r0,[r4,#0x25c]        ;1512
000dfe  f0000020          AND      r0,r0,#0x20           ;1512
000e02  b950              CBNZ     r0,|L1.3610|
000e04  f5047117          ADD      r1,r4,#0x25c          ;1513
000e08  4620              MOV      r0,r4                 ;1513
000e0a  f7fffffe          BL       png_handle_as_unknown
000e0e  2803              CMP      r0,#3                 ;1513
000e10  d003              BEQ      |L1.3610|
000e12  a130              ADR      r1,|L1.3796|
000e14  4620              MOV      r0,r4                 ;1515
000e16  f7fffffe          BL       png_chunk_error
                  |L1.3610|
000e1a  2301              MOVS     r3,#1                 ;1517
000e1c  466a              MOV      r2,sp                 ;1517
000e1e  4631              MOV      r1,r6                 ;1517
000e20  4620              MOV      r0,r4                 ;1517
000e22  f7fffffe          BL       png_set_unknown_chunks
000e26  e067              B        |L1.3832|
                  |L1.3624|
000e28  e060              B        |L1.3820|
                  |L1.3626|
000e2a  e06a              B        |L1.3842|
                  |L1.3628|
000e2c  45787472          DCB      "Extra compression data",0
000e30  6120636f
000e34  6d707265
000e38  7373696f
000e3c  6e206461
000e40  746100  
000e43  00                DCB      0
                  |L1.3652|
000e44  45787472          DCB      "Extra compressed data",0
000e48  6120636f
000e4c  6d707265
000e50  73736564
000e54  20646174
000e58  6100    
000e5a  00                DCB      0
000e5b  00                DCB      0
                  |L1.3676|
000e5c  4465636f          DCB      "Decompression Error",0
000e60  6d707265
000e64  7373696f
000e68  6e204572
000e6c  726f7200
                  |L1.3696|
000e70  546f6f20          DCB      "Too much data in IDAT chunks",0
000e74  6d756368
000e78  20646174
000e7c  6120696e
000e80  20494441
000e84  54206368
000e88  756e6b73
000e8c  00      
000e8d  00                DCB      0
000e8e  00                DCB      0
000e8f  00                DCB      0
                  |L1.3728|
                          DCD      png_IDAT
                  |L1.3732|
000e94  4e6f7420          DCB      "Not enough compressed data",0
000e98  656e6f75
000e9c  67682063
000ea0  6f6d7072
000ea4  65737365
000ea8  64206461
000eac  746100  
000eaf  00                DCB      0
                  |L1.3760|
000eb0  73617665          DCB      "save_size overflowed in pngpread",0
000eb4  5f73697a
000eb8  65206f76
000ebc  6572666c
000ec0  6f776564
000ec4  20696e20
000ec8  706e6770
000ecc  72656164
000ed0  00      
000ed1  00                DCB      0
000ed2  00                DCB      0
000ed3  00                DCB      0
                  |L1.3796|
000ed4  756e6b6e          DCB      "unknown critical chunk",0
000ed8  6f776e20
000edc  63726974
000ee0  6963616c
000ee4  20636875
000ee8  6e6b00  
000eeb  00                DCB      0
                  |L1.3820|
000eec  2301              MOVS     r3,#1                 ;1521
000eee  466a              MOV      r2,sp                 ;1521
000ef0  4631              MOV      r1,r6                 ;1521
000ef2  4620              MOV      r0,r4                 ;1521
000ef4  f7fffffe          BL       png_set_unknown_chunks
                  |L1.3832|
000ef8  4620              MOV      r0,r4                 ;1522
000efa  9902              LDR      r1,[sp,#8]            ;1522
000efc  f7fffffe          BL       png_free
000f00  e000              B        |L1.3844|
                  |L1.3842|
000f02  462f              MOV      r7,r5                 ;1526
                  |L1.3844|
000f04  4639              MOV      r1,r7                 ;1527
000f06  4620              MOV      r0,r4                 ;1527
000f08  f7fffffe          BL       png_push_crc_skip
000f0c  bf00              NOP      
000f0e  e752              B        |L1.3510|
;;;1529   
                          ENDP

                  png_push_handle_zTXt PROC
;;;1155   void /* PRIVATE */
;;;1156   png_push_handle_zTXt(png_structp png_ptr, png_infop info_ptr, png_uint_32
000f10  b570              PUSH     {r4-r6,lr}
;;;1157      length)
;;;1158   {
000f12  4604              MOV      r4,r0
000f14  460e              MOV      r6,r1
000f16  4615              MOV      r5,r2
;;;1159      if (!(png_ptr->mode & PNG_HAVE_IHDR) || (png_ptr->mode & PNG_HAVE_IEND))
000f18  f89401a8          LDRB     r0,[r4,#0x1a8]
000f1c  f0000001          AND      r0,r0,#1
000f20  b120              CBZ      r0,|L1.3884|
000f22  f89401a8          LDRB     r0,[r4,#0x1a8]
000f26  f0000010          AND      r0,r0,#0x10
000f2a  b128              CBZ      r0,|L1.3896|
                  |L1.3884|
;;;1160         {
;;;1161            png_error(png_ptr, "Out of place zTXt");
000f2c  a1f9              ADR      r1,|L1.4884|
000f2e  4620              MOV      r0,r4
000f30  f7fffffe          BL       png_error
;;;1162            /* to quiet some compiler warnings */
;;;1163            if(info_ptr == NULL) return;
000f34  b906              CBNZ     r6,|L1.3896|
                  |L1.3894|
;;;1164         }
;;;1165   
;;;1166   #ifdef PNG_MAX_MALLOC_64K
;;;1167      /* We can't handle zTXt chunks > 64K, since we don't have enough space
;;;1168       * to be able to store the uncompressed data.  Actually, the threshold
;;;1169       * is probably around 32K, but it isn't as definite as 64K is.
;;;1170       */
;;;1171      if (length > (png_uint_32)65535L)
;;;1172      {
;;;1173         png_warning(png_ptr, "zTXt chunk too large to fit in memory");
;;;1174         png_push_crc_skip(png_ptr, length);
;;;1175         return;
;;;1176      }
;;;1177   #endif
;;;1178   
;;;1179      png_ptr->current_text = (png_charp)png_malloc(png_ptr,
;;;1180          (png_uint_32)(length+1));
;;;1181      png_ptr->current_text[length] = '\0';
;;;1182      png_ptr->current_text_ptr = png_ptr->current_text;
;;;1183      png_ptr->current_text_size = (png_size_t)length;
;;;1184      png_ptr->current_text_left = (png_size_t)length;
;;;1185      png_ptr->process_mode = PNG_READ_zTXt_MODE;
;;;1186   }
000f36  bd70              POP      {r4-r6,pc}
                  |L1.3896|
000f38  1c69              ADDS     r1,r5,#1              ;1179
000f3a  4620              MOV      r0,r4                 ;1179
000f3c  f7fffffe          BL       png_malloc
000f40  f5047445          ADD      r4,r4,#0x314          ;1179
000f44  6120              STR      r0,[r4,#0x10]         ;1179
000f46  2000              MOVS     r0,#0                 ;1181
000f48  6921              LDR      r1,[r4,#0x10]         ;1181
000f4a  5548              STRB     r0,[r1,r5]            ;1181
000f4c  6920              LDR      r0,[r4,#0x10]         ;1182
000f4e  6160              STR      r0,[r4,#0x14]         ;1182
000f50  60a5              STR      r5,[r4,#8]            ;1183
000f52  60e5              STR      r5,[r4,#0xc]          ;1184
000f54  2005              MOVS     r0,#5                 ;1185
000f56  6020              STR      r0,[r4,#0]            ;1185
000f58  f5a47445          SUB      r4,r4,#0x314          ;1185
000f5c  bf00              NOP      
000f5e  e7ea              B        |L1.3894|
;;;1187   
                          ENDP

                  png_push_handle_tEXt PROC
;;;1058   void /* PRIVATE */
;;;1059   png_push_handle_tEXt(png_structp png_ptr, png_infop info_ptr, png_uint_32
000f60  b570              PUSH     {r4-r6,lr}
;;;1060      length)
;;;1061   {
000f62  4604              MOV      r4,r0
000f64  460e              MOV      r6,r1
000f66  4615              MOV      r5,r2
;;;1062      if (!(png_ptr->mode & PNG_HAVE_IHDR) || (png_ptr->mode & PNG_HAVE_IEND))
000f68  f89401a8          LDRB     r0,[r4,#0x1a8]
000f6c  f0000001          AND      r0,r0,#1
000f70  b120              CBZ      r0,|L1.3964|
000f72  f89401a8          LDRB     r0,[r4,#0x1a8]
000f76  f0000010          AND      r0,r0,#0x10
000f7a  b128              CBZ      r0,|L1.3976|
                  |L1.3964|
;;;1063         {
;;;1064            png_error(png_ptr, "Out of place tEXt");
000f7c  a1ea              ADR      r1,|L1.4904|
000f7e  4620              MOV      r0,r4
000f80  f7fffffe          BL       png_error
;;;1065            /* to quiet some compiler warnings */
;;;1066            if(info_ptr == NULL) return;
000f84  b906              CBNZ     r6,|L1.3976|
                  |L1.3974|
;;;1067         }
;;;1068   
;;;1069   #ifdef PNG_MAX_MALLOC_64K
;;;1070      png_ptr->skip_length = 0;  /* This may not be necessary */
;;;1071   
;;;1072      if (length > (png_uint_32)65535L) /* Can't hold entire string in memory */
;;;1073      {
;;;1074         png_warning(png_ptr, "tEXt chunk too large to fit in memory");
;;;1075         png_ptr->skip_length = length - (png_uint_32)65535L;
;;;1076         length = (png_uint_32)65535L;
;;;1077      }
;;;1078   #endif
;;;1079   
;;;1080      png_ptr->current_text = (png_charp)png_malloc(png_ptr,
;;;1081            (png_uint_32)(length+1));
;;;1082      png_ptr->current_text[length] = '\0';
;;;1083      png_ptr->current_text_ptr = png_ptr->current_text;
;;;1084      png_ptr->current_text_size = (png_size_t)length;
;;;1085      png_ptr->current_text_left = (png_size_t)length;
;;;1086      png_ptr->process_mode = PNG_READ_tEXt_MODE;
;;;1087   }
000f86  bd70              POP      {r4-r6,pc}
                  |L1.3976|
000f88  1c69              ADDS     r1,r5,#1              ;1080
000f8a  4620              MOV      r0,r4                 ;1080
000f8c  f7fffffe          BL       png_malloc
000f90  f5047445          ADD      r4,r4,#0x314          ;1080
000f94  6120              STR      r0,[r4,#0x10]         ;1080
000f96  2000              MOVS     r0,#0                 ;1082
000f98  6921              LDR      r1,[r4,#0x10]         ;1082
000f9a  5548              STRB     r0,[r1,r5]            ;1082
000f9c  6920              LDR      r0,[r4,#0x10]         ;1083
000f9e  6160              STR      r0,[r4,#0x14]         ;1083
000fa0  60a5              STR      r5,[r4,#8]            ;1084
000fa2  60e5              STR      r5,[r4,#0xc]          ;1085
000fa4  2004              MOVS     r0,#4                 ;1086
000fa6  6020              STR      r0,[r4,#0]            ;1086
000fa8  f5a47445          SUB      r4,r4,#0x314          ;1086
000fac  bf00              NOP      
000fae  e7ea              B        |L1.3974|
;;;1088   
                          ENDP

                  png_push_have_info PROC
;;;1530   void /* PRIVATE */
;;;1531   png_push_have_info(png_structp png_ptr, png_infop info_ptr)
000fb0  b570              PUSH     {r4-r6,lr}
;;;1532   {
000fb2  4604              MOV      r4,r0
000fb4  460d              MOV      r5,r1
;;;1533      if (png_ptr->info_fn != NULL)
000fb6  f8d402e0          LDR      r0,[r4,#0x2e0]
000fba  b120              CBZ      r0,|L1.4038|
;;;1534         (*(png_ptr->info_fn))(png_ptr, info_ptr);
000fbc  4629              MOV      r1,r5
000fbe  4620              MOV      r0,r4
000fc0  f8d422e0          LDR      r2,[r4,#0x2e0]
000fc4  4790              BLX      r2
                  |L1.4038|
;;;1535   }
000fc6  bd70              POP      {r4-r6,pc}
;;;1536   
                          ENDP

                  png_push_have_end PROC
;;;1537   void /* PRIVATE */
;;;1538   png_push_have_end(png_structp png_ptr, png_infop info_ptr)
000fc8  b570              PUSH     {r4-r6,lr}
;;;1539   {
000fca  4604              MOV      r4,r0
000fcc  460d              MOV      r5,r1
;;;1540      if (png_ptr->end_fn != NULL)
000fce  f8d402e8          LDR      r0,[r4,#0x2e8]
000fd2  b120              CBZ      r0,|L1.4062|
;;;1541         (*(png_ptr->end_fn))(png_ptr, info_ptr);
000fd4  4629              MOV      r1,r5
000fd6  4620              MOV      r0,r4
000fd8  f8d422e8          LDR      r2,[r4,#0x2e8]
000fdc  4790              BLX      r2
                  |L1.4062|
;;;1542   }
000fde  bd70              POP      {r4-r6,pc}
;;;1543   
                          ENDP

                  png_push_read_chunk PROC
;;;136    void /* PRIVATE */
;;;137    png_push_read_chunk(png_structp png_ptr, png_infop info_ptr)
000fe0  b538              PUSH     {r3-r5,lr}
;;;138    {
000fe2  4604              MOV      r4,r0
000fe4  460d              MOV      r5,r1
;;;139    #ifdef PNG_USE_LOCAL_ARRAYS
;;;140          PNG_IHDR;
;;;141          PNG_IDAT;
;;;142          PNG_IEND;
;;;143          PNG_PLTE;
;;;144    #if defined(PNG_READ_bKGD_SUPPORTED)
;;;145          PNG_bKGD;
;;;146    #endif
;;;147    #if defined(PNG_READ_cHRM_SUPPORTED)
;;;148          PNG_cHRM;
;;;149    #endif
;;;150    #if defined(PNG_READ_gAMA_SUPPORTED)
;;;151          PNG_gAMA;
;;;152    #endif
;;;153    #if defined(PNG_READ_hIST_SUPPORTED)
;;;154          PNG_hIST;
;;;155    #endif
;;;156    #if defined(PNG_READ_iCCP_SUPPORTED)
;;;157          PNG_iCCP;
;;;158    #endif
;;;159    #if defined(PNG_READ_iTXt_SUPPORTED)
;;;160          PNG_iTXt;
;;;161    #endif
;;;162    #if defined(PNG_READ_oFFs_SUPPORTED)
;;;163          PNG_oFFs;
;;;164    #endif
;;;165    #if defined(PNG_READ_pCAL_SUPPORTED)
;;;166          PNG_pCAL;
;;;167    #endif
;;;168    #if defined(PNG_READ_pHYs_SUPPORTED)
;;;169          PNG_pHYs;
;;;170    #endif
;;;171    #if defined(PNG_READ_sBIT_SUPPORTED)
;;;172          PNG_sBIT;
;;;173    #endif
;;;174    #if defined(PNG_READ_sCAL_SUPPORTED)
;;;175          PNG_sCAL;
;;;176    #endif
;;;177    #if defined(PNG_READ_sRGB_SUPPORTED)
;;;178          PNG_sRGB;
;;;179    #endif
;;;180    #if defined(PNG_READ_sPLT_SUPPORTED)
;;;181          PNG_sPLT;
;;;182    #endif
;;;183    #if defined(PNG_READ_tEXt_SUPPORTED)
;;;184          PNG_tEXt;
;;;185    #endif
;;;186    #if defined(PNG_READ_tIME_SUPPORTED)
;;;187          PNG_tIME;
;;;188    #endif
;;;189    #if defined(PNG_READ_tRNS_SUPPORTED)
;;;190          PNG_tRNS;
;;;191    #endif
;;;192    #if defined(PNG_READ_zTXt_SUPPORTED)
;;;193          PNG_zTXt;
;;;194    #endif
;;;195    #endif /* PNG_USE_LOCAL_ARRAYS */
;;;196       /* First we make sure we have enough data for the 4 byte chunk name
;;;197        * and the 4 byte chunk length before proceeding with decoding the
;;;198        * chunk data.  To fully decode each of these chunks, we also make
;;;199        * sure we have enough data in the buffer for the 4 byte CRC at the
;;;200        * end of every chunk (except IDAT, which is handled separately).
;;;201        */
;;;202       if (!(png_ptr->mode & PNG_HAVE_CHUNK_HEADER))
000fe6  f8b401a8          LDRH     r0,[r4,#0x1a8]
000fea  f4007080          AND      r0,r0,#0x100
000fee  bb10              CBNZ     r0,|L1.4150|
;;;203       {
;;;204          png_byte chunk_length[4];
;;;205    
;;;206          if (png_ptr->buffer_size < 8)
000ff0  f8d4030c          LDR      r0,[r4,#0x30c]
000ff4  2808              CMP      r0,#8
000ff6  d203              BCS      |L1.4096|
;;;207          {
;;;208             png_push_save_buffer(png_ptr);
000ff8  4620              MOV      r0,r4
000ffa  f7fffffe          BL       png_push_save_buffer
                  |L1.4094|
;;;209             return;
;;;210          }
;;;211    
;;;212          png_push_fill_buffer(png_ptr, chunk_length, 4);
;;;213          png_ptr->push_length = png_get_uint_31(png_ptr,chunk_length);
;;;214          png_reset_crc(png_ptr);
;;;215          png_crc_read(png_ptr, png_ptr->chunk_name, 4);
;;;216          png_ptr->mode |= PNG_HAVE_CHUNK_HEADER;
;;;217       }
;;;218    
;;;219       if (!png_memcmp(png_ptr->chunk_name, (png_bytep)png_IDAT, 4))
;;;220         if(png_ptr->mode & PNG_AFTER_IDAT)
;;;221            png_ptr->mode |= PNG_HAVE_CHUNK_AFTER_IDAT;
;;;222    
;;;223       if (!png_memcmp(png_ptr->chunk_name, png_IHDR, 4))
;;;224       {
;;;225          if (png_ptr->push_length + 4 > png_ptr->buffer_size)
;;;226          {
;;;227             png_push_save_buffer(png_ptr);
;;;228             return;
;;;229          }
;;;230          png_handle_IHDR(png_ptr, info_ptr, png_ptr->push_length);
;;;231       }
;;;232       else if (!png_memcmp(png_ptr->chunk_name, png_IEND, 4))
;;;233       {
;;;234          if (png_ptr->push_length + 4 > png_ptr->buffer_size)
;;;235          {
;;;236             png_push_save_buffer(png_ptr);
;;;237             return;
;;;238          }
;;;239          png_handle_IEND(png_ptr, info_ptr, png_ptr->push_length);
;;;240    
;;;241          png_ptr->process_mode = PNG_READ_DONE_MODE;
;;;242          png_push_have_end(png_ptr, info_ptr);
;;;243       }
;;;244    #ifdef PNG_HANDLE_AS_UNKNOWN_SUPPORTED
;;;245       else if (png_handle_as_unknown(png_ptr, png_ptr->chunk_name))
;;;246       {
;;;247          if (png_ptr->push_length + 4 > png_ptr->buffer_size)
;;;248          {
;;;249             png_push_save_buffer(png_ptr);
;;;250             return;
;;;251          }
;;;252          if (!png_memcmp(png_ptr->chunk_name, png_IDAT, 4))
;;;253             png_ptr->mode |= PNG_HAVE_IDAT;
;;;254          png_handle_unknown(png_ptr, info_ptr, png_ptr->push_length);
;;;255          if (!png_memcmp(png_ptr->chunk_name, png_PLTE, 4))
;;;256             png_ptr->mode |= PNG_HAVE_PLTE;
;;;257          else if (!png_memcmp(png_ptr->chunk_name, png_IDAT, 4))
;;;258          {
;;;259             if (!(png_ptr->mode & PNG_HAVE_IHDR))
;;;260                png_error(png_ptr, "Missing IHDR before IDAT");
;;;261             else if (png_ptr->color_type == PNG_COLOR_TYPE_PALETTE &&
;;;262                      !(png_ptr->mode & PNG_HAVE_PLTE))
;;;263                png_error(png_ptr, "Missing PLTE before IDAT");
;;;264          }
;;;265       }
;;;266    #endif
;;;267       else if (!png_memcmp(png_ptr->chunk_name, png_PLTE, 4))
;;;268       {
;;;269          if (png_ptr->push_length + 4 > png_ptr->buffer_size)
;;;270          {
;;;271             png_push_save_buffer(png_ptr);
;;;272             return;
;;;273          }
;;;274          png_handle_PLTE(png_ptr, info_ptr, png_ptr->push_length);
;;;275       }
;;;276       else if (!png_memcmp(png_ptr->chunk_name, (png_bytep)png_IDAT, 4))
;;;277       {
;;;278          /* If we reach an IDAT chunk, this means we have read all of the
;;;279           * header chunks, and we can start reading the image (or if this
;;;280           * is called after the image has been read - we have an error).
;;;281           */
;;;282         if (!(png_ptr->mode & PNG_HAVE_IHDR))
;;;283           png_error(png_ptr, "Missing IHDR before IDAT");
;;;284         else if (png_ptr->color_type == PNG_COLOR_TYPE_PALETTE &&
;;;285             !(png_ptr->mode & PNG_HAVE_PLTE))
;;;286           png_error(png_ptr, "Missing PLTE before IDAT");
;;;287    
;;;288          if (png_ptr->mode & PNG_HAVE_IDAT)
;;;289          {
;;;290             if (!(png_ptr->mode & PNG_HAVE_CHUNK_AFTER_IDAT))
;;;291               if (png_ptr->push_length == 0)
;;;292                  return;
;;;293    
;;;294             if (png_ptr->mode & PNG_AFTER_IDAT)
;;;295                png_error(png_ptr, "Too many IDAT's found");
;;;296          }
;;;297    
;;;298          png_ptr->idat_size = png_ptr->push_length;
;;;299          png_ptr->mode |= PNG_HAVE_IDAT;
;;;300          png_ptr->process_mode = PNG_READ_IDAT_MODE;
;;;301          png_push_have_info(png_ptr, info_ptr);
;;;302          png_ptr->zstream.avail_out = (uInt)png_ptr->irowbytes;
;;;303          png_ptr->zstream.next_out = png_ptr->row_buf;
;;;304          return;
;;;305       }
;;;306    #if defined(PNG_READ_gAMA_SUPPORTED)
;;;307       else if (!png_memcmp(png_ptr->chunk_name, png_gAMA, 4))
;;;308       {
;;;309          if (png_ptr->push_length + 4 > png_ptr->buffer_size)
;;;310          {
;;;311             png_push_save_buffer(png_ptr);
;;;312             return;
;;;313          }
;;;314          png_handle_gAMA(png_ptr, info_ptr, png_ptr->push_length);
;;;315       }
;;;316    #endif
;;;317    #if defined(PNG_READ_sBIT_SUPPORTED)
;;;318       else if (!png_memcmp(png_ptr->chunk_name, png_sBIT, 4))
;;;319       {
;;;320          if (png_ptr->push_length + 4 > png_ptr->buffer_size)
;;;321          {
;;;322             png_push_save_buffer(png_ptr);
;;;323             return;
;;;324          }
;;;325          png_handle_sBIT(png_ptr, info_ptr, png_ptr->push_length);
;;;326       }
;;;327    #endif
;;;328    #if defined(PNG_READ_cHRM_SUPPORTED)
;;;329       else if (!png_memcmp(png_ptr->chunk_name, png_cHRM, 4))
;;;330       {
;;;331          if (png_ptr->push_length + 4 > png_ptr->buffer_size)
;;;332          {
;;;333             png_push_save_buffer(png_ptr);
;;;334             return;
;;;335          }
;;;336          png_handle_cHRM(png_ptr, info_ptr, png_ptr->push_length);
;;;337       }
;;;338    #endif
;;;339    #if defined(PNG_READ_sRGB_SUPPORTED)
;;;340       else if (!png_memcmp(png_ptr->chunk_name, png_sRGB, 4))
;;;341       {
;;;342          if (png_ptr->push_length + 4 > png_ptr->buffer_size)
;;;343          {
;;;344             png_push_save_buffer(png_ptr);
;;;345             return;
;;;346          }
;;;347          png_handle_sRGB(png_ptr, info_ptr, png_ptr->push_length);
;;;348       }
;;;349    #endif
;;;350    #if defined(PNG_READ_iCCP_SUPPORTED)
;;;351       else if (!png_memcmp(png_ptr->chunk_name, png_iCCP, 4))
;;;352       {
;;;353          if (png_ptr->push_length + 4 > png_ptr->buffer_size)
;;;354          {
;;;355             png_push_save_buffer(png_ptr);
;;;356             return;
;;;357          }
;;;358          png_handle_iCCP(png_ptr, info_ptr, png_ptr->push_length);
;;;359       }
;;;360    #endif
;;;361    #if defined(PNG_READ_sPLT_SUPPORTED)
;;;362       else if (!png_memcmp(png_ptr->chunk_name, png_sPLT, 4))
;;;363       {
;;;364          if (png_ptr->push_length + 4 > png_ptr->buffer_size)
;;;365          {
;;;366             png_push_save_buffer(png_ptr);
;;;367             return;
;;;368          }
;;;369          png_handle_sPLT(png_ptr, info_ptr, png_ptr->push_length);
;;;370       }
;;;371    #endif
;;;372    #if defined(PNG_READ_tRNS_SUPPORTED)
;;;373       else if (!png_memcmp(png_ptr->chunk_name, png_tRNS, 4))
;;;374       {
;;;375          if (png_ptr->push_length + 4 > png_ptr->buffer_size)
;;;376          {
;;;377             png_push_save_buffer(png_ptr);
;;;378             return;
;;;379          }
;;;380          png_handle_tRNS(png_ptr, info_ptr, png_ptr->push_length);
;;;381       }
;;;382    #endif
;;;383    #if defined(PNG_READ_bKGD_SUPPORTED)
;;;384       else if (!png_memcmp(png_ptr->chunk_name, png_bKGD, 4))
;;;385       {
;;;386          if (png_ptr->push_length + 4 > png_ptr->buffer_size)
;;;387          {
;;;388             png_push_save_buffer(png_ptr);
;;;389             return;
;;;390          }
;;;391          png_handle_bKGD(png_ptr, info_ptr, png_ptr->push_length);
;;;392       }
;;;393    #endif
;;;394    #if defined(PNG_READ_hIST_SUPPORTED)
;;;395       else if (!png_memcmp(png_ptr->chunk_name, png_hIST, 4))
;;;396       {
;;;397          if (png_ptr->push_length + 4 > png_ptr->buffer_size)
;;;398          {
;;;399             png_push_save_buffer(png_ptr);
;;;400             return;
;;;401          }
;;;402          png_handle_hIST(png_ptr, info_ptr, png_ptr->push_length);
;;;403       }
;;;404    #endif
;;;405    #if defined(PNG_READ_pHYs_SUPPORTED)
;;;406       else if (!png_memcmp(png_ptr->chunk_name, png_pHYs, 4))
;;;407       {
;;;408          if (png_ptr->push_length + 4 > png_ptr->buffer_size)
;;;409          {
;;;410             png_push_save_buffer(png_ptr);
;;;411             return;
;;;412          }
;;;413          png_handle_pHYs(png_ptr, info_ptr, png_ptr->push_length);
;;;414       }
;;;415    #endif
;;;416    #if defined(PNG_READ_oFFs_SUPPORTED)
;;;417       else if (!png_memcmp(png_ptr->chunk_name, png_oFFs, 4))
;;;418       {
;;;419          if (png_ptr->push_length + 4 > png_ptr->buffer_size)
;;;420          {
;;;421             png_push_save_buffer(png_ptr);
;;;422             return;
;;;423          }
;;;424          png_handle_oFFs(png_ptr, info_ptr, png_ptr->push_length);
;;;425       }
;;;426    #endif
;;;427    #if defined(PNG_READ_pCAL_SUPPORTED)
;;;428       else if (!png_memcmp(png_ptr->chunk_name, png_pCAL, 4))
;;;429       {
;;;430          if (png_ptr->push_length + 4 > png_ptr->buffer_size)
;;;431          {
;;;432             png_push_save_buffer(png_ptr);
;;;433             return;
;;;434          }
;;;435          png_handle_pCAL(png_ptr, info_ptr, png_ptr->push_length);
;;;436       }
;;;437    #endif
;;;438    #if defined(PNG_READ_sCAL_SUPPORTED)
;;;439       else if (!png_memcmp(png_ptr->chunk_name, png_sCAL, 4))
;;;440       {
;;;441          if (png_ptr->push_length + 4 > png_ptr->buffer_size)
;;;442          {
;;;443             png_push_save_buffer(png_ptr);
;;;444             return;
;;;445          }
;;;446          png_handle_sCAL(png_ptr, info_ptr, png_ptr->push_length);
;;;447       }
;;;448    #endif
;;;449    #if defined(PNG_READ_tIME_SUPPORTED)
;;;450       else if (!png_memcmp(png_ptr->chunk_name, png_tIME, 4))
;;;451       {
;;;452          if (png_ptr->push_length + 4 > png_ptr->buffer_size)
;;;453          {
;;;454             png_push_save_buffer(png_ptr);
;;;455             return;
;;;456          }
;;;457          png_handle_tIME(png_ptr, info_ptr, png_ptr->push_length);
;;;458       }
;;;459    #endif
;;;460    #if defined(PNG_READ_tEXt_SUPPORTED)
;;;461       else if (!png_memcmp(png_ptr->chunk_name, png_tEXt, 4))
;;;462       {
;;;463          if (png_ptr->push_length + 4 > png_ptr->buffer_size)
;;;464          {
;;;465             png_push_save_buffer(png_ptr);
;;;466             return;
;;;467          }
;;;468          png_push_handle_tEXt(png_ptr, info_ptr, png_ptr->push_length);
;;;469       }
;;;470    #endif
;;;471    #if defined(PNG_READ_zTXt_SUPPORTED)
;;;472       else if (!png_memcmp(png_ptr->chunk_name, png_zTXt, 4))
;;;473       {
;;;474          if (png_ptr->push_length + 4 > png_ptr->buffer_size)
;;;475          {
;;;476             png_push_save_buffer(png_ptr);
;;;477             return;
;;;478          }
;;;479          png_push_handle_zTXt(png_ptr, info_ptr, png_ptr->push_length);
;;;480       }
;;;481    #endif
;;;482    #if defined(PNG_READ_iTXt_SUPPORTED)
;;;483       else if (!png_memcmp(png_ptr->chunk_name, png_iTXt, 4))
;;;484       {
;;;485          if (png_ptr->push_length + 4 > png_ptr->buffer_size)
;;;486          {
;;;487             png_push_save_buffer(png_ptr);
;;;488             return;
;;;489          }
;;;490          png_push_handle_iTXt(png_ptr, info_ptr, png_ptr->push_length);
;;;491       }
;;;492    #endif
;;;493       else
;;;494       {
;;;495          if (png_ptr->push_length + 4 > png_ptr->buffer_size)
;;;496          {
;;;497             png_push_save_buffer(png_ptr);
;;;498             return;
;;;499          }
;;;500          png_push_handle_unknown(png_ptr, info_ptr, png_ptr->push_length);
;;;501       }
;;;502    
;;;503       png_ptr->mode &= ~PNG_HAVE_CHUNK_HEADER;
;;;504    }
000ffe  bd38              POP      {r3-r5,pc}
                  |L1.4096|
001000  2204              MOVS     r2,#4                 ;212
001002  4669              MOV      r1,sp                 ;212
001004  4620              MOV      r0,r4                 ;212
001006  f7fffffe          BL       png_push_fill_buffer
00100a  4669              MOV      r1,sp                 ;213
00100c  4620              MOV      r0,r4                 ;213
00100e  f7fffffe          BL       png_get_uint_31
001012  f8c402fc          STR      r0,[r4,#0x2fc]        ;213
001016  4620              MOV      r0,r4                 ;214
001018  f7fffffe          BL       png_reset_crc
00101c  2204              MOVS     r2,#4                 ;215
00101e  f5047117          ADD      r1,r4,#0x25c          ;215
001022  4620              MOV      r0,r4                 ;215
001024  f7fffffe          BL       png_crc_read
001028  f8d401a8          LDR      r0,[r4,#0x1a8]        ;216
00102c  f4407080          ORR      r0,r0,#0x100          ;216
001030  f8c401a8          STR      r0,[r4,#0x1a8]        ;216
001034  bf00              NOP                            ;217
                  |L1.4150|
001036  2204              MOVS     r2,#4                 ;219
001038  49c0              LDR      r1,|L1.4924|
00103a  f5047017          ADD      r0,r4,#0x25c          ;219
00103e  f7fffffe          BL       memcmp
001042  b950              CBNZ     r0,|L1.4186|
001044  f89401a8          LDRB     r0,[r4,#0x1a8]        ;220
001048  f0000008          AND      r0,r0,#8              ;220
00104c  b128              CBZ      r0,|L1.4186|
00104e  f8d401a8          LDR      r0,[r4,#0x1a8]        ;221
001052  f4405000          ORR      r0,r0,#0x2000         ;221
001056  f8c401a8          STR      r0,[r4,#0x1a8]        ;221
                  |L1.4186|
00105a  2204              MOVS     r2,#4                 ;223
00105c  49b8              LDR      r1,|L1.4928|
00105e  f5047017          ADD      r0,r4,#0x25c          ;223
001062  f7fffffe          BL       memcmp
001066  b988              CBNZ     r0,|L1.4236|
001068  f8d402fc          LDR      r0,[r4,#0x2fc]        ;225
00106c  1d00              ADDS     r0,r0,#4              ;225
00106e  f8d4130c          LDR      r1,[r4,#0x30c]        ;225
001072  4288              CMP      r0,r1                 ;225
001074  d903              BLS      |L1.4222|
001076  4620              MOV      r0,r4                 ;227
001078  f7fffffe          BL       png_push_save_buffer
00107c  e7bf              B        |L1.4094|
                  |L1.4222|
00107e  4629              MOV      r1,r5                 ;230
001080  4620              MOV      r0,r4                 ;230
001082  f8d422fc          LDR      r2,[r4,#0x2fc]        ;230
001086  f7fffffe          BL       png_handle_IHDR
                  |L1.4234|
00108a  e2cc              B        |L1.5670|
                  |L1.4236|
00108c  2204              MOVS     r2,#4                 ;232
00108e  49ad              LDR      r1,|L1.4932|
001090  f5047017          ADD      r0,r4,#0x25c          ;232
001094  f7fffffe          BL       memcmp
001098  b9c0              CBNZ     r0,|L1.4300|
00109a  f8d402fc          LDR      r0,[r4,#0x2fc]        ;234
00109e  1d00              ADDS     r0,r0,#4              ;234
0010a0  f8d4130c          LDR      r1,[r4,#0x30c]        ;234
0010a4  4288              CMP      r0,r1                 ;234
0010a6  d903              BLS      |L1.4272|
0010a8  4620              MOV      r0,r4                 ;236
0010aa  f7fffffe          BL       png_push_save_buffer
0010ae  e7a6              B        |L1.4094|
                  |L1.4272|
0010b0  4629              MOV      r1,r5                 ;239
0010b2  4620              MOV      r0,r4                 ;239
0010b4  f8d422fc          LDR      r2,[r4,#0x2fc]        ;239
0010b8  f7fffffe          BL       png_handle_IEND
0010bc  2006              MOVS     r0,#6                 ;241
0010be  f8c40314          STR      r0,[r4,#0x314]        ;241
0010c2  4629              MOV      r1,r5                 ;242
0010c4  4620              MOV      r0,r4                 ;242
0010c6  f7fffffe          BL       png_push_have_end
0010ca  e2ac              B        |L1.5670|
                  |L1.4300|
0010cc  f5047117          ADD      r1,r4,#0x25c          ;245
0010d0  4620              MOV      r0,r4                 ;245
0010d2  f7fffffe          BL       png_handle_as_unknown
0010d6  2800              CMP      r0,#0                 ;245
0010d8  d04c              BEQ      |L1.4468|
0010da  f8d402fc          LDR      r0,[r4,#0x2fc]        ;247
0010de  1d00              ADDS     r0,r0,#4              ;247
0010e0  f8d4130c          LDR      r1,[r4,#0x30c]        ;247
0010e4  4288              CMP      r0,r1                 ;247
0010e6  d903              BLS      |L1.4336|
0010e8  4620              MOV      r0,r4                 ;249
0010ea  f7fffffe          BL       png_push_save_buffer
0010ee  e786              B        |L1.4094|
                  |L1.4336|
0010f0  2204              MOVS     r2,#4                 ;252
0010f2  4992              LDR      r1,|L1.4924|
0010f4  f5047017          ADD      r0,r4,#0x25c          ;252
0010f8  f7fffffe          BL       memcmp
0010fc  b928              CBNZ     r0,|L1.4362|
0010fe  f8d401a8          LDR      r0,[r4,#0x1a8]        ;253
001102  f0400004          ORR      r0,r0,#4              ;253
001106  f8c401a8          STR      r0,[r4,#0x1a8]        ;253
                  |L1.4362|
00110a  4629              MOV      r1,r5                 ;254
00110c  4620              MOV      r0,r4                 ;254
00110e  f8d422fc          LDR      r2,[r4,#0x2fc]        ;254
001112  f7fffffe          BL       png_handle_unknown
001116  2204              MOVS     r2,#4                 ;255
001118  498b              LDR      r1,|L1.4936|
00111a  f5047017          ADD      r0,r4,#0x25c          ;255
00111e  f7fffffe          BL       memcmp
001122  b930              CBNZ     r0,|L1.4402|
001124  f8d401a8          LDR      r0,[r4,#0x1a8]        ;256
001128  f0400002          ORR      r0,r0,#2              ;256
00112c  f8c401a8          STR      r0,[r4,#0x1a8]        ;256
001130  e279              B        |L1.5670|
                  |L1.4402|
001132  2204              MOVS     r2,#4                 ;257
001134  4981              LDR      r1,|L1.4924|
001136  f5047017          ADD      r0,r4,#0x25c          ;257
00113a  f7fffffe          BL       memcmp
00113e  2800              CMP      r0,#0                 ;257
001140  d1a3              BNE      |L1.4234|
001142  f89401a8          LDRB     r0,[r4,#0x1a8]        ;259
001146  f0000001          AND      r0,r0,#1              ;259
00114a  b920              CBNZ     r0,|L1.4438|
00114c  a17f              ADR      r1,|L1.4940|
00114e  4620              MOV      r0,r4                 ;260
001150  f7fffffe          BL       png_error
001154  e267              B        |L1.5670|
                  |L1.4438|
001156  f8940266          LDRB     r0,[r4,#0x266]        ;261
00115a  2803              CMP      r0,#3                 ;261
00115c  d195              BNE      |L1.4234|
00115e  f89401a8          LDRB     r0,[r4,#0x1a8]        ;262
001162  f0000002          AND      r0,r0,#2              ;262
001166  2800              CMP      r0,#0                 ;262
001168  d18f              BNE      |L1.4234|
00116a  a17f              ADR      r1,|L1.4968|
00116c  4620              MOV      r0,r4                 ;263
00116e  f7fffffe          BL       png_error
001172  e258              B        |L1.5670|
                  |L1.4468|
001174  2204              MOVS     r2,#4                 ;267
001176  4974              LDR      r1,|L1.4936|
001178  f5047017          ADD      r0,r4,#0x25c          ;267
00117c  f7fffffe          BL       memcmp
001180  b988              CBNZ     r0,|L1.4518|
001182  f8d402fc          LDR      r0,[r4,#0x2fc]        ;269
001186  1d00              ADDS     r0,r0,#4              ;269
001188  f8d4130c          LDR      r1,[r4,#0x30c]        ;269
00118c  4288              CMP      r0,r1                 ;269
00118e  d903              BLS      |L1.4504|
001190  4620              MOV      r0,r4                 ;271
001192  f7fffffe          BL       png_push_save_buffer
001196  e732              B        |L1.4094|
                  |L1.4504|
001198  4629              MOV      r1,r5                 ;274
00119a  4620              MOV      r0,r4                 ;274
00119c  f8d422fc          LDR      r2,[r4,#0x2fc]        ;274
0011a0  f7fffffe          BL       png_handle_PLTE
0011a4  e23f              B        |L1.5670|
                  |L1.4518|
0011a6  2204              MOVS     r2,#4                 ;276
0011a8  4964              LDR      r1,|L1.4924|
0011aa  f5047017          ADD      r0,r4,#0x25c          ;276
0011ae  f7fffffe          BL       memcmp
0011b2  2800              CMP      r0,#0                 ;276
0011b4  d148              BNE      |L1.4680|
0011b6  f89401a8          LDRB     r0,[r4,#0x1a8]        ;282
0011ba  f0000001          AND      r0,r0,#1              ;282
0011be  b920              CBNZ     r0,|L1.4554|
0011c0  a162              ADR      r1,|L1.4940|
0011c2  4620              MOV      r0,r4                 ;283
0011c4  f7fffffe          BL       png_error
0011c8  e00c              B        |L1.4580|
                  |L1.4554|
0011ca  f8940266          LDRB     r0,[r4,#0x266]        ;284
0011ce  2803              CMP      r0,#3                 ;284
0011d0  d108              BNE      |L1.4580|
0011d2  f89401a8          LDRB     r0,[r4,#0x1a8]        ;285
0011d6  f0000002          AND      r0,r0,#2              ;285
0011da  b918              CBNZ     r0,|L1.4580|
0011dc  a162              ADR      r1,|L1.4968|
0011de  4620              MOV      r0,r4                 ;286
0011e0  f7fffffe          BL       png_error
                  |L1.4580|
0011e4  f89401a8          LDRB     r0,[r4,#0x1a8]        ;288
0011e8  f0000004          AND      r0,r0,#4              ;288
0011ec  b188              CBZ      r0,|L1.4626|
0011ee  f8b401a8          LDRH     r0,[r4,#0x1a8]        ;290
0011f2  f4005000          AND      r0,r0,#0x2000         ;290
0011f6  b918              CBNZ     r0,|L1.4608|
0011f8  f8d402fc          LDR      r0,[r4,#0x2fc]        ;291
0011fc  b900              CBNZ     r0,|L1.4608|
0011fe  e6fe              B        |L1.4094|
                  |L1.4608|
001200  f89401a8          LDRB     r0,[r4,#0x1a8]        ;294
001204  f0000008          AND      r0,r0,#8              ;294
001208  b118              CBZ      r0,|L1.4626|
00120a  a15e              ADR      r1,|L1.4996|
00120c  4620              MOV      r0,r4                 ;295
00120e  f7fffffe          BL       png_error
                  |L1.4626|
001212  f8d402fc          LDR      r0,[r4,#0x2fc]        ;298
001216  f8c4024c          STR      r0,[r4,#0x24c]        ;298
00121a  f8d401a8          LDR      r0,[r4,#0x1a8]        ;299
00121e  f0400004          ORR      r0,r0,#4              ;299
001222  f8c401a8          STR      r0,[r4,#0x1a8]        ;299
001226  2002              MOVS     r0,#2                 ;300
001228  f8c40314          STR      r0,[r4,#0x314]        ;300
00122c  4629              MOV      r1,r5                 ;301
00122e  4620              MOV      r0,r4                 ;301
001230  f7fffffe          BL       png_push_have_info
001234  f44f70e2          MOV      r0,#0x1c4             ;302
001238  f8d4121c          LDR      r1,[r4,#0x21c]        ;302
00123c  5101              STR      r1,[r0,r4]            ;302
00123e  1f00              SUBS     r0,r0,#4              ;303
001240  f8d4122c          LDR      r1,[r4,#0x22c]        ;303
001244  5101              STR      r1,[r0,r4]            ;303
001246  e6da              B        |L1.4094|
                  |L1.4680|
001248  2204              MOVS     r2,#4                 ;307
00124a  4954              LDR      r1,|L1.5020|
00124c  f5047017          ADD      r0,r4,#0x25c          ;307
001250  f7fffffe          BL       memcmp
001254  b988              CBNZ     r0,|L1.4730|
001256  f8d402fc          LDR      r0,[r4,#0x2fc]        ;309
00125a  1d00              ADDS     r0,r0,#4              ;309
00125c  f8d4130c          LDR      r1,[r4,#0x30c]        ;309
001260  4288              CMP      r0,r1                 ;309
001262  d903              BLS      |L1.4716|
001264  4620              MOV      r0,r4                 ;311
001266  f7fffffe          BL       png_push_save_buffer
00126a  e6c8              B        |L1.4094|
                  |L1.4716|
00126c  4629              MOV      r1,r5                 ;314
00126e  4620              MOV      r0,r4                 ;314
001270  f8d422fc          LDR      r2,[r4,#0x2fc]        ;314
001274  f7fffffe          BL       png_handle_gAMA
001278  e1d5              B        |L1.5670|
                  |L1.4730|
00127a  2204              MOVS     r2,#4                 ;318
00127c  4948              LDR      r1,|L1.5024|
00127e  f5047017          ADD      r0,r4,#0x25c          ;318
001282  f7fffffe          BL       memcmp
001286  b988              CBNZ     r0,|L1.4780|
001288  f8d402fc          LDR      r0,[r4,#0x2fc]        ;320
00128c  1d00              ADDS     r0,r0,#4              ;320
00128e  f8d4130c          LDR      r1,[r4,#0x30c]        ;320
001292  4288              CMP      r0,r1                 ;320
001294  d903              BLS      |L1.4766|
001296  4620              MOV      r0,r4                 ;322
001298  f7fffffe          BL       png_push_save_buffer
00129c  e6af              B        |L1.4094|
                  |L1.4766|
00129e  4629              MOV      r1,r5                 ;325
0012a0  4620              MOV      r0,r4                 ;325
0012a2  f8d422fc          LDR      r2,[r4,#0x2fc]        ;325
0012a6  f7fffffe          BL       png_handle_sBIT
0012aa  e1bc              B        |L1.5670|
                  |L1.4780|
0012ac  2204              MOVS     r2,#4                 ;329
0012ae  493d              LDR      r1,|L1.5028|
0012b0  f5047017          ADD      r0,r4,#0x25c          ;329
0012b4  f7fffffe          BL       memcmp
0012b8  b988              CBNZ     r0,|L1.4830|
0012ba  f8d402fc          LDR      r0,[r4,#0x2fc]        ;331
0012be  1d00              ADDS     r0,r0,#4              ;331
0012c0  f8d4130c          LDR      r1,[r4,#0x30c]        ;331
0012c4  4288              CMP      r0,r1                 ;331
0012c6  d903              BLS      |L1.4816|
0012c8  4620              MOV      r0,r4                 ;333
0012ca  f7fffffe          BL       png_push_save_buffer
0012ce  e696              B        |L1.4094|
                  |L1.4816|
0012d0  4629              MOV      r1,r5                 ;336
0012d2  4620              MOV      r0,r4                 ;336
0012d4  f8d422fc          LDR      r2,[r4,#0x2fc]        ;336
0012d8  f7fffffe          BL       png_handle_cHRM
0012dc  e1a3              B        |L1.5670|
                  |L1.4830|
0012de  2204              MOVS     r2,#4                 ;340
0012e0  4931              LDR      r1,|L1.5032|
0012e2  f5047017          ADD      r0,r4,#0x25c          ;340
0012e6  f7fffffe          BL       memcmp
0012ea  b988              CBNZ     r0,|L1.4880|
0012ec  f8d402fc          LDR      r0,[r4,#0x2fc]        ;342
0012f0  1d00              ADDS     r0,r0,#4              ;342
0012f2  f8d4130c          LDR      r1,[r4,#0x30c]        ;342
0012f6  4288              CMP      r0,r1                 ;342
0012f8  d903              BLS      |L1.4866|
0012fa  4620              MOV      r0,r4                 ;344
0012fc  f7fffffe          BL       png_push_save_buffer
001300  e67d              B        |L1.4094|
                  |L1.4866|
001302  4629              MOV      r1,r5                 ;347
001304  4620              MOV      r0,r4                 ;347
001306  f8d422fc          LDR      r2,[r4,#0x2fc]        ;347
00130a  f7fffffe          BL       png_handle_sRGB
00130e  e18a              B        |L1.5670|
                  |L1.4880|
001310  e04c              B        |L1.5036|
001312  0000              DCW      0x0000
                  |L1.4884|
001314  4f757420          DCB      "Out of place zTXt",0
001318  6f662070
00131c  6c616365
001320  207a5458
001324  7400    
001326  00                DCB      0
001327  00                DCB      0
                  |L1.4904|
001328  4f757420          DCB      "Out of place tEXt",0
00132c  6f662070
001330  6c616365
001334  20744558
001338  7400    
00133a  00                DCB      0
00133b  00                DCB      0
                  |L1.4924|
                          DCD      png_IDAT
                  |L1.4928|
                          DCD      png_IHDR
                  |L1.4932|
                          DCD      png_IEND
                  |L1.4936|
                          DCD      png_PLTE
                  |L1.4940|
00134c  4d697373          DCB      "Missing IHDR before IDAT",0
001350  696e6720
001354  49484452
001358  20626566
00135c  6f726520
001360  49444154
001364  00      
001365  00                DCB      0
001366  00                DCB      0
001367  00                DCB      0
                  |L1.4968|
001368  4d697373          DCB      "Missing PLTE before IDAT",0
00136c  696e6720
001370  504c5445
001374  20626566
001378  6f726520
00137c  49444154
001380  00      
001381  00                DCB      0
001382  00                DCB      0
001383  00                DCB      0
                  |L1.4996|
001384  546f6f20          DCB      "Too many IDAT's found",0
001388  6d616e79
00138c  20494441
001390  54277320
001394  666f756e
001398  6400    
00139a  00                DCB      0
00139b  00                DCB      0
                  |L1.5020|
                          DCD      png_gAMA
                  |L1.5024|
                          DCD      png_sBIT
                  |L1.5028|
                          DCD      png_cHRM
                  |L1.5032|
                          DCD      png_sRGB
                  |L1.5036|
0013ac  2204              MOVS     r2,#4                 ;351
0013ae  49fa              LDR      r1,|L1.6040|
0013b0  f5047017          ADD      r0,r4,#0x25c          ;351
0013b4  f7fffffe          BL       memcmp
0013b8  b988              CBNZ     r0,|L1.5086|
0013ba  f8d402fc          LDR      r0,[r4,#0x2fc]        ;353
0013be  1d00              ADDS     r0,r0,#4              ;353
0013c0  f8d4130c          LDR      r1,[r4,#0x30c]        ;353
0013c4  4288              CMP      r0,r1                 ;353
0013c6  d903              BLS      |L1.5072|
0013c8  4620              MOV      r0,r4                 ;355
0013ca  f7fffffe          BL       png_push_save_buffer
0013ce  e616              B        |L1.4094|
                  |L1.5072|
0013d0  4629              MOV      r1,r5                 ;358
0013d2  4620              MOV      r0,r4                 ;358
0013d4  f8d422fc          LDR      r2,[r4,#0x2fc]        ;358
0013d8  f7fffffe          BL       png_handle_iCCP
0013dc  e123              B        |L1.5670|
                  |L1.5086|
0013de  2204              MOVS     r2,#4                 ;362
0013e0  49ee              LDR      r1,|L1.6044|
0013e2  f5047017          ADD      r0,r4,#0x25c          ;362
0013e6  f7fffffe          BL       memcmp
0013ea  b988              CBNZ     r0,|L1.5136|
0013ec  f8d402fc          LDR      r0,[r4,#0x2fc]        ;364
0013f0  1d00              ADDS     r0,r0,#4              ;364
0013f2  f8d4130c          LDR      r1,[r4,#0x30c]        ;364
0013f6  4288              CMP      r0,r1                 ;364
0013f8  d903              BLS      |L1.5122|
0013fa  4620              MOV      r0,r4                 ;366
0013fc  f7fffffe          BL       png_push_save_buffer
001400  e5fd              B        |L1.4094|
                  |L1.5122|
001402  4629              MOV      r1,r5                 ;369
001404  4620              MOV      r0,r4                 ;369
001406  f8d422fc          LDR      r2,[r4,#0x2fc]        ;369
00140a  f7fffffe          BL       png_handle_sPLT
00140e  e10a              B        |L1.5670|
                  |L1.5136|
001410  2204              MOVS     r2,#4                 ;373
001412  49e3              LDR      r1,|L1.6048|
001414  f5047017          ADD      r0,r4,#0x25c          ;373
001418  f7fffffe          BL       memcmp
00141c  b988              CBNZ     r0,|L1.5186|
00141e  f8d402fc          LDR      r0,[r4,#0x2fc]        ;375
001422  1d00              ADDS     r0,r0,#4              ;375
001424  f8d4130c          LDR      r1,[r4,#0x30c]        ;375
001428  4288              CMP      r0,r1                 ;375
00142a  d903              BLS      |L1.5172|
00142c  4620              MOV      r0,r4                 ;377
00142e  f7fffffe          BL       png_push_save_buffer
001432  e5e4              B        |L1.4094|
                  |L1.5172|
001434  4629              MOV      r1,r5                 ;380
001436  4620              MOV      r0,r4                 ;380
001438  f8d422fc          LDR      r2,[r4,#0x2fc]        ;380
00143c  f7fffffe          BL       png_handle_tRNS
001440  e0f1              B        |L1.5670|
                  |L1.5186|
001442  2204              MOVS     r2,#4                 ;384
001444  49d7              LDR      r1,|L1.6052|
001446  f5047017          ADD      r0,r4,#0x25c          ;384
00144a  f7fffffe          BL       memcmp
00144e  b988              CBNZ     r0,|L1.5236|
001450  f8d402fc          LDR      r0,[r4,#0x2fc]        ;386
001454  1d00              ADDS     r0,r0,#4              ;386
001456  f8d4130c          LDR      r1,[r4,#0x30c]        ;386
00145a  4288              CMP      r0,r1                 ;386
00145c  d903              BLS      |L1.5222|
00145e  4620              MOV      r0,r4                 ;388
001460  f7fffffe          BL       png_push_save_buffer
001464  e5cb              B        |L1.4094|
                  |L1.5222|
001466  4629              MOV      r1,r5                 ;391
001468  4620              MOV      r0,r4                 ;391
00146a  f8d422fc          LDR      r2,[r4,#0x2fc]        ;391
00146e  f7fffffe          BL       png_handle_bKGD
001472  e0d8              B        |L1.5670|
                  |L1.5236|
001474  2204              MOVS     r2,#4                 ;395
001476  49cc              LDR      r1,|L1.6056|
001478  f5047017          ADD      r0,r4,#0x25c          ;395
00147c  f7fffffe          BL       memcmp
001480  b988              CBNZ     r0,|L1.5286|
001482  f8d402fc          LDR      r0,[r4,#0x2fc]        ;397
001486  1d00              ADDS     r0,r0,#4              ;397
001488  f8d4130c          LDR      r1,[r4,#0x30c]        ;397
00148c  4288              CMP      r0,r1                 ;397
00148e  d903              BLS      |L1.5272|
001490  4620              MOV      r0,r4                 ;399
001492  f7fffffe          BL       png_push_save_buffer
001496  e5b2              B        |L1.4094|
                  |L1.5272|
001498  4629              MOV      r1,r5                 ;402
00149a  4620              MOV      r0,r4                 ;402
00149c  f8d422fc          LDR      r2,[r4,#0x2fc]        ;402
0014a0  f7fffffe          BL       png_handle_hIST
0014a4  e0bf              B        |L1.5670|
                  |L1.5286|
0014a6  2204              MOVS     r2,#4                 ;406
0014a8  49c0              LDR      r1,|L1.6060|
0014aa  f5047017          ADD      r0,r4,#0x25c          ;406
0014ae  f7fffffe          BL       memcmp
0014b2  b988              CBNZ     r0,|L1.5336|
0014b4  f8d402fc          LDR      r0,[r4,#0x2fc]        ;408
0014b8  1d00              ADDS     r0,r0,#4              ;408
0014ba  f8d4130c          LDR      r1,[r4,#0x30c]        ;408
0014be  4288              CMP      r0,r1                 ;408
0014c0  d903              BLS      |L1.5322|
0014c2  4620              MOV      r0,r4                 ;410
0014c4  f7fffffe          BL       png_push_save_buffer
0014c8  e599              B        |L1.4094|
                  |L1.5322|
0014ca  4629              MOV      r1,r5                 ;413
0014cc  4620              MOV      r0,r4                 ;413
0014ce  f8d422fc          LDR      r2,[r4,#0x2fc]        ;413
0014d2  f7fffffe          BL       png_handle_pHYs
0014d6  e0a6              B        |L1.5670|
                  |L1.5336|
0014d8  2204              MOVS     r2,#4                 ;417
0014da  49b5              LDR      r1,|L1.6064|
0014dc  f5047017          ADD      r0,r4,#0x25c          ;417
0014e0  f7fffffe          BL       memcmp
0014e4  b988              CBNZ     r0,|L1.5386|
0014e6  f8d402fc          LDR      r0,[r4,#0x2fc]        ;419
0014ea  1d00              ADDS     r0,r0,#4              ;419
0014ec  f8d4130c          LDR      r1,[r4,#0x30c]        ;419
0014f0  4288              CMP      r0,r1                 ;419
0014f2  d903              BLS      |L1.5372|
0014f4  4620              MOV      r0,r4                 ;421
0014f6  f7fffffe          BL       png_push_save_buffer
0014fa  e580              B        |L1.4094|
                  |L1.5372|
0014fc  4629              MOV      r1,r5                 ;424
0014fe  4620              MOV      r0,r4                 ;424
001500  f8d422fc          LDR      r2,[r4,#0x2fc]        ;424
001504  f7fffffe          BL       png_handle_oFFs
001508  e08d              B        |L1.5670|
                  |L1.5386|
00150a  2204              MOVS     r2,#4                 ;428
00150c  49a9              LDR      r1,|L1.6068|
00150e  f5047017          ADD      r0,r4,#0x25c          ;428
001512  f7fffffe          BL       memcmp
001516  b988              CBNZ     r0,|L1.5436|
001518  f8d402fc          LDR      r0,[r4,#0x2fc]        ;430
00151c  1d00              ADDS     r0,r0,#4              ;430
00151e  f8d4130c          LDR      r1,[r4,#0x30c]        ;430
001522  4288              CMP      r0,r1                 ;430
001524  d903              BLS      |L1.5422|
001526  4620              MOV      r0,r4                 ;432
001528  f7fffffe          BL       png_push_save_buffer
00152c  e567              B        |L1.4094|
                  |L1.5422|
00152e  4629              MOV      r1,r5                 ;435
001530  4620              MOV      r0,r4                 ;435
001532  f8d422fc          LDR      r2,[r4,#0x2fc]        ;435
001536  f7fffffe          BL       png_handle_pCAL
00153a  e074              B        |L1.5670|
                  |L1.5436|
00153c  2204              MOVS     r2,#4                 ;439
00153e  499e              LDR      r1,|L1.6072|
001540  f5047017          ADD      r0,r4,#0x25c          ;439
001544  f7fffffe          BL       memcmp
001548  b988              CBNZ     r0,|L1.5486|
00154a  f8d402fc          LDR      r0,[r4,#0x2fc]        ;441
00154e  1d00              ADDS     r0,r0,#4              ;441
001550  f8d4130c          LDR      r1,[r4,#0x30c]        ;441
001554  4288              CMP      r0,r1                 ;441
001556  d903              BLS      |L1.5472|
001558  4620              MOV      r0,r4                 ;443
00155a  f7fffffe          BL       png_push_save_buffer
00155e  e54e              B        |L1.4094|
                  |L1.5472|
001560  4629              MOV      r1,r5                 ;446
001562  4620              MOV      r0,r4                 ;446
001564  f8d422fc          LDR      r2,[r4,#0x2fc]        ;446
001568  f7fffffe          BL       png_handle_sCAL
00156c  e05b              B        |L1.5670|
                  |L1.5486|
00156e  2204              MOVS     r2,#4                 ;450
001570  4992              LDR      r1,|L1.6076|
001572  f5047017          ADD      r0,r4,#0x25c          ;450
001576  f7fffffe          BL       memcmp
00157a  b988              CBNZ     r0,|L1.5536|
00157c  f8d402fc          LDR      r0,[r4,#0x2fc]        ;452
001580  1d00              ADDS     r0,r0,#4              ;452
001582  f8d4130c          LDR      r1,[r4,#0x30c]        ;452
001586  4288              CMP      r0,r1                 ;452
001588  d903              BLS      |L1.5522|
00158a  4620              MOV      r0,r4                 ;454
00158c  f7fffffe          BL       png_push_save_buffer
001590  e535              B        |L1.4094|
                  |L1.5522|
001592  4629              MOV      r1,r5                 ;457
001594  4620              MOV      r0,r4                 ;457
001596  f8d422fc          LDR      r2,[r4,#0x2fc]        ;457
00159a  f7fffffe          BL       png_handle_tIME
00159e  e042              B        |L1.5670|
                  |L1.5536|
0015a0  2204              MOVS     r2,#4                 ;461
0015a2  4987              LDR      r1,|L1.6080|
0015a4  f5047017          ADD      r0,r4,#0x25c          ;461
0015a8  f7fffffe          BL       memcmp
0015ac  b988              CBNZ     r0,|L1.5586|
0015ae  f8d402fc          LDR      r0,[r4,#0x2fc]        ;463
0015b2  1d00              ADDS     r0,r0,#4              ;463
0015b4  f8d4130c          LDR      r1,[r4,#0x30c]        ;463
0015b8  4288              CMP      r0,r1                 ;463
0015ba  d903              BLS      |L1.5572|
0015bc  4620              MOV      r0,r4                 ;465
0015be  f7fffffe          BL       png_push_save_buffer
0015c2  e51c              B        |L1.4094|
                  |L1.5572|
0015c4  4629              MOV      r1,r5                 ;468
0015c6  4620              MOV      r0,r4                 ;468
0015c8  f8d422fc          LDR      r2,[r4,#0x2fc]        ;468
0015cc  f7fffffe          BL       png_push_handle_tEXt
0015d0  e029              B        |L1.5670|
                  |L1.5586|
0015d2  2204              MOVS     r2,#4                 ;472
0015d4  497b              LDR      r1,|L1.6084|
0015d6  f5047017          ADD      r0,r4,#0x25c          ;472
0015da  f7fffffe          BL       memcmp
0015de  b988              CBNZ     r0,|L1.5636|
0015e0  f8d402fc          LDR      r0,[r4,#0x2fc]        ;474
0015e4  1d00              ADDS     r0,r0,#4              ;474
0015e6  f8d4130c          LDR      r1,[r4,#0x30c]        ;474
0015ea  4288              CMP      r0,r1                 ;474
0015ec  d903              BLS      |L1.5622|
0015ee  4620              MOV      r0,r4                 ;476
0015f0  f7fffffe          BL       png_push_save_buffer
0015f4  e503              B        |L1.4094|
                  |L1.5622|
0015f6  4629              MOV      r1,r5                 ;479
0015f8  4620              MOV      r0,r4                 ;479
0015fa  f8d422fc          LDR      r2,[r4,#0x2fc]        ;479
0015fe  f7fffffe          BL       png_push_handle_zTXt
001602  e010              B        |L1.5670|
                  |L1.5636|
001604  f8d402fc          LDR      r0,[r4,#0x2fc]        ;495
001608  1d00              ADDS     r0,r0,#4              ;495
00160a  f8d4130c          LDR      r1,[r4,#0x30c]        ;495
00160e  4288              CMP      r0,r1                 ;495
001610  d903              BLS      |L1.5658|
001612  4620              MOV      r0,r4                 ;497
001614  f7fffffe          BL       png_push_save_buffer
001618  e4f1              B        |L1.4094|
                  |L1.5658|
00161a  4629              MOV      r1,r5                 ;500
00161c  4620              MOV      r0,r4                 ;500
00161e  f8d422fc          LDR      r2,[r4,#0x2fc]        ;500
001622  f7fffffe          BL       png_push_handle_unknown
                  |L1.5670|
001626  f8d401a8          LDR      r0,[r4,#0x1a8]        ;503
00162a  f4207080          BIC      r0,r0,#0x100          ;503
00162e  f8c401a8          STR      r0,[r4,#0x1a8]        ;503
001632  bf00              NOP      
001634  e4e3              B        |L1.4094|
;;;505    
                          ENDP

                  png_push_read_sig PROC
;;;104    void /* PRIVATE */
;;;105    png_push_read_sig(png_structp png_ptr, png_infop info_ptr)
001636  e92d41f0          PUSH     {r4-r8,lr}
;;;106    {
00163a  4604              MOV      r4,r0
00163c  460d              MOV      r5,r1
;;;107       png_size_t num_checked = png_ptr->sig_bytes,
00163e  f894626c          LDRB     r6,[r4,#0x26c]
;;;108                 num_to_check = 8 - num_checked;
001642  f1c60708          RSB      r7,r6,#8
;;;109    
;;;110       if (png_ptr->buffer_size < num_to_check)
001646  f8d4030c          LDR      r0,[r4,#0x30c]
00164a  42b8              CMP      r0,r7
00164c  d201              BCS      |L1.5714|
;;;111       {
;;;112          num_to_check = png_ptr->buffer_size;
00164e  f8d4730c          LDR      r7,[r4,#0x30c]
                  |L1.5714|
;;;113       }
;;;114    
;;;115       png_push_fill_buffer(png_ptr, &(info_ptr->signature[num_checked]),
001652  f1050020          ADD      r0,r5,#0x20
001656  1981              ADDS     r1,r0,r6
001658  463a              MOV      r2,r7
00165a  4620              MOV      r0,r4
00165c  f7fffffe          BL       png_push_fill_buffer
;;;116          num_to_check);
;;;117       png_ptr->sig_bytes = (png_byte)(png_ptr->sig_bytes+num_to_check);
001660  f894026c          LDRB     r0,[r4,#0x26c]
001664  4438              ADD      r0,r0,r7
001666  f884026c          STRB     r0,[r4,#0x26c]
;;;118    
;;;119       if (png_sig_cmp(info_ptr->signature, num_checked, num_to_check))
00166a  463a              MOV      r2,r7
00166c  4631              MOV      r1,r6
00166e  f1050020          ADD      r0,r5,#0x20
001672  f7fffffe          BL       png_sig_cmp
001676  b190              CBZ      r0,|L1.5790|
;;;120       {
;;;121          if (num_checked < 4 &&
001678  2e04              CMP      r6,#4
00167a  d20b              BCS      |L1.5780|
;;;122              png_sig_cmp(info_ptr->signature, num_checked, num_to_check - 4))
00167c  1f3a              SUBS     r2,r7,#4
00167e  4631              MOV      r1,r6
001680  f1050020          ADD      r0,r5,#0x20
001684  f7fffffe          BL       png_sig_cmp
001688  b120              CBZ      r0,|L1.5780|
;;;123             png_error(png_ptr, "Not a PNG file");
00168a  a14f              ADR      r1,|L1.6088|
00168c  4620              MOV      r0,r4
00168e  f7fffffe          BL       png_error
001692  e00b              B        |L1.5804|
                  |L1.5780|
;;;124          else
;;;125             png_error(png_ptr, "PNG file corrupted by ASCII conversion");
001694  a150              ADR      r1,|L1.6104|
001696  4620              MOV      r0,r4
001698  f7fffffe          BL       png_error
00169c  e006              B        |L1.5804|
                  |L1.5790|
;;;126       }
;;;127       else
;;;128       {
;;;129          if (png_ptr->sig_bytes >= 8)
00169e  f894026c          LDRB     r0,[r4,#0x26c]
0016a2  2808              CMP      r0,#8
0016a4  db02              BLT      |L1.5804|
;;;130          {
;;;131             png_ptr->process_mode = PNG_READ_CHUNK_MODE;
0016a6  2001              MOVS     r0,#1
0016a8  f8c40314          STR      r0,[r4,#0x314]
                  |L1.5804|
;;;132          }
;;;133       }
;;;134    }
0016ac  e8bd81f0          POP      {r4-r8,pc}
;;;135    
                          ENDP

                  png_process_some_data PROC
;;;43     void /* PRIVATE */
;;;44     png_process_some_data(png_structp png_ptr, png_infop info_ptr)
0016b0  b570              PUSH     {r4-r6,lr}
;;;45     {
0016b2  4604              MOV      r4,r0
0016b4  460d              MOV      r5,r1
;;;46        if(png_ptr == NULL) return;
0016b6  b904              CBNZ     r4,|L1.5818|
                  |L1.5816|
;;;47        switch (png_ptr->process_mode)
;;;48        {
;;;49           case PNG_READ_SIG_MODE:
;;;50           {
;;;51              png_push_read_sig(png_ptr, info_ptr);
;;;52              break;
;;;53           }
;;;54           case PNG_READ_CHUNK_MODE:
;;;55           {
;;;56              png_push_read_chunk(png_ptr, info_ptr);
;;;57              break;
;;;58           }
;;;59           case PNG_READ_IDAT_MODE:
;;;60           {
;;;61              png_push_read_IDAT(png_ptr);
;;;62              break;
;;;63           }
;;;64     #if defined(PNG_READ_tEXt_SUPPORTED)
;;;65           case PNG_READ_tEXt_MODE:
;;;66           {
;;;67              png_push_read_tEXt(png_ptr, info_ptr);
;;;68              break;
;;;69           }
;;;70     #endif
;;;71     #if defined(PNG_READ_zTXt_SUPPORTED)
;;;72           case PNG_READ_zTXt_MODE:
;;;73           {
;;;74              png_push_read_zTXt(png_ptr, info_ptr);
;;;75              break;
;;;76           }
;;;77     #endif
;;;78     #if defined(PNG_READ_iTXt_SUPPORTED)
;;;79           case PNG_READ_iTXt_MODE:
;;;80           {
;;;81              png_push_read_iTXt(png_ptr, info_ptr);
;;;82              break;
;;;83           }
;;;84     #endif
;;;85           case PNG_SKIP_MODE:
;;;86           {
;;;87              png_push_crc_finish(png_ptr);
;;;88              break;
;;;89           }
;;;90           default:
;;;91           {
;;;92              png_ptr->buffer_size = 0;
;;;93              break;
;;;94           }
;;;95        }
;;;96     }
0016b8  bd70              POP      {r4-r6,pc}
                  |L1.5818|
0016ba  f8d40314          LDR      r0,[r4,#0x314]        ;47
0016be  2806              CMP      r0,#6                 ;47
0016c0  d220              BCS      |L1.5892|
0016c2  e8dff000          TBB      [pc,r0]               ;47
0016c6  0308              DCB      0x03,0x08
0016c8  0d1b1116          DCB      0x0d,0x1b,0x11,0x16
0016cc  4629              MOV      r1,r5                 ;51
0016ce  4620              MOV      r0,r4                 ;51
0016d0  f7fffffe          BL       png_push_read_sig
0016d4  e01a              B        |L1.5900|
0016d6  4629              MOV      r1,r5                 ;56
0016d8  4620              MOV      r0,r4                 ;56
0016da  f7fffffe          BL       png_push_read_chunk
0016de  e015              B        |L1.5900|
0016e0  4620              MOV      r0,r4                 ;61
0016e2  f7fffffe          BL       png_push_read_IDAT
0016e6  e011              B        |L1.5900|
0016e8  4629              MOV      r1,r5                 ;67
0016ea  4620              MOV      r0,r4                 ;67
0016ec  f7fffffe          BL       png_push_read_tEXt
0016f0  e00c              B        |L1.5900|
0016f2  4629              MOV      r1,r5                 ;74
0016f4  4620              MOV      r0,r4                 ;74
0016f6  f7fffffe          BL       png_push_read_zTXt
0016fa  e007              B        |L1.5900|
0016fc  4620              MOV      r0,r4                 ;87
0016fe  f7fffffe          BL       png_push_crc_finish
001702  e003              B        |L1.5900|
                  |L1.5892|
001704  2000              MOVS     r0,#0                 ;92
001706  f8c4030c          STR      r0,[r4,#0x30c]        ;92
00170a  bf00              NOP                            ;93
                  |L1.5900|
00170c  bf00              NOP                            ;52
00170e  bf00              NOP      
001710  e7d2              B        |L1.5816|
;;;97     
                          ENDP

                  png_push_restore_buffer PROC
;;;649    void /* PRIVATE */
;;;650    png_push_restore_buffer(png_structp png_ptr, png_bytep buffer,
001712  f500703d          ADD      r0,r0,#0x2f4
;;;651       png_size_t buffer_length)
;;;652    {
;;;653       png_ptr->current_buffer = buffer;
001716  6041              STR      r1,[r0,#4]
;;;654       png_ptr->current_buffer_size = buffer_length;
001718  61c2              STR      r2,[r0,#0x1c]
;;;655       png_ptr->buffer_size = buffer_length + png_ptr->save_buffer_size;
00171a  6903              LDR      r3,[r0,#0x10]
00171c  4413              ADD      r3,r3,r2
00171e  6183              STR      r3,[r0,#0x18]
;;;656       png_ptr->current_buffer_ptr = png_ptr->current_buffer;
001720  6843              LDR      r3,[r0,#4]
001722  6003              STR      r3,[r0,#0]
001724  f5a0703d          SUB      r0,r0,#0x2f4
;;;657    }
001728  4770              BX       lr
;;;658    
                          ENDP

                  png_process_data PROC
;;;27     void PNGAPI
;;;28     png_process_data(png_structp png_ptr, png_infop info_ptr,
00172a  e92d41f0          PUSH     {r4-r8,lr}
;;;29        png_bytep buffer, png_size_t buffer_size)
;;;30     {
00172e  4604              MOV      r4,r0
001730  460f              MOV      r7,r1
001732  4615              MOV      r5,r2
001734  461e              MOV      r6,r3
;;;31        if(png_ptr == NULL) return;
001736  b90c              CBNZ     r4,|L1.5948|
                  |L1.5944|
;;;32        png_push_restore_buffer(png_ptr, buffer, buffer_size);
;;;33     
;;;34        while (png_ptr->buffer_size)
;;;35        {
;;;36           png_process_some_data(png_ptr, info_ptr);
;;;37        }
;;;38     }
001738  e8bd81f0          POP      {r4-r8,pc}
                  |L1.5948|
00173c  4632              MOV      r2,r6                 ;32
00173e  4629              MOV      r1,r5                 ;32
001740  4620              MOV      r0,r4                 ;32
001742  f7fffffe          BL       png_push_restore_buffer
001746  e003              B        |L1.5968|
                  |L1.5960|
001748  4639              MOV      r1,r7                 ;36
00174a  4620              MOV      r0,r4                 ;36
00174c  f7fffffe          BL       png_process_some_data
                  |L1.5968|
001750  f8d4030c          LDR      r0,[r4,#0x30c]        ;34
001754  2800              CMP      r0,#0                 ;34
001756  d1f7              BNE      |L1.5960|
001758  bf00              NOP      
00175a  e7ed              B        |L1.5944|
;;;39     
                          ENDP

                  png_progressive_combine_row PROC
;;;1552   void PNGAPI
;;;1553   png_progressive_combine_row (png_structp png_ptr,
00175c  b570              PUSH     {r4-r6,lr}
;;;1554      png_bytep old_row, png_bytep new_row)
;;;1555   {
00175e  4604              MOV      r4,r0
001760  460e              MOV      r6,r1
001762  4615              MOV      r5,r2
;;;1556      if(png_ptr == NULL) return;
001764  b904              CBNZ     r4,|L1.5992|
                  |L1.5990|
;;;1557   #ifdef PNG_USE_LOCAL_ARRAYS
;;;1558      const int FARDATA png_pass_dsp_mask[7] =
;;;1559         {0xff, 0x0f, 0xff, 0x33, 0xff, 0x55, 0xff};
;;;1560   #endif
;;;1561      if (new_row != NULL)    /* new_row must == png_ptr->row_buf here. */
;;;1562         png_combine_row(png_ptr, old_row, png_pass_dsp_mask[png_ptr->pass]);
;;;1563   }
001766  bd70              POP      {r4-r6,pc}
                  |L1.5992|
001768  b145              CBZ      r5,|L1.6012|
00176a  f8940264          LDRB     r0,[r4,#0x264]        ;1562
00176e  4924              LDR      r1,|L1.6144|
001770  f8512020          LDR      r2,[r1,r0,LSL #2]     ;1562
001774  4631              MOV      r1,r6                 ;1562
001776  4620              MOV      r0,r4                 ;1562
001778  f7fffffe          BL       png_combine_row
                  |L1.6012|
00177c  bf00              NOP      
00177e  e7f2              B        |L1.5990|
;;;1564   
                          ENDP

                  png_set_progressive_read_fn PROC
;;;1565   void PNGAPI
;;;1566   png_set_progressive_read_fn(png_structp png_ptr, png_voidp progressive_ptr,
001780  e92d41f0          PUSH     {r4-r8,lr}
;;;1567      png_progressive_info_ptr info_fn, png_progressive_row_ptr row_fn,
;;;1568      png_progressive_end_ptr end_fn)
;;;1569   {
001784  4604              MOV      r4,r0
001786  460f              MOV      r7,r1
001788  4615              MOV      r5,r2
00178a  461e              MOV      r6,r3
00178c  f8dd8018          LDR      r8,[sp,#0x18]
;;;1570      if(png_ptr == NULL) return;
001790  b90c              CBNZ     r4,|L1.6038|
;;;1571      png_ptr->info_fn = info_fn;
;;;1572      png_ptr->row_fn = row_fn;
;;;1573      png_ptr->end_fn = end_fn;
;;;1574   
;;;1575      png_set_read_fn(png_ptr, progressive_ptr, png_push_fill_buffer);
;;;1576   }
001792  e8bd81f0          POP      {r4-r8,pc}
                  |L1.6038|
001796  e035              B        |L1.6148|
                  |L1.6040|
                          DCD      png_iCCP
                  |L1.6044|
                          DCD      png_sPLT
                  |L1.6048|
                          DCD      png_tRNS
                  |L1.6052|
                          DCD      png_bKGD
                  |L1.6056|
                          DCD      png_hIST
                  |L1.6060|
                          DCD      png_pHYs
                  |L1.6064|
                          DCD      png_oFFs
                  |L1.6068|
                          DCD      png_pCAL
                  |L1.6072|
                          DCD      png_sCAL
                  |L1.6076|
                          DCD      png_tIME
                  |L1.6080|
                          DCD      png_tEXt
                  |L1.6084|
                          DCD      png_zTXt
                  |L1.6088|
0017c8  4e6f7420          DCB      "Not a PNG file",0
0017cc  6120504e
0017d0  47206669
0017d4  6c6500  
0017d7  00                DCB      0
                  |L1.6104|
0017d8  504e4720          DCB      "PNG file corrupted by ASCII conversion",0
0017dc  66696c65
0017e0  20636f72
0017e4  72757074
0017e8  65642062
0017ec  79204153
0017f0  43494920
0017f4  636f6e76
0017f8  65727369
0017fc  6f6e00  
0017ff  00                DCB      0
                  |L1.6144|
                          DCD      png_pass_dsp_mask
                  |L1.6148|
001804  f8c452e0          STR      r5,[r4,#0x2e0]        ;1571
001808  f8c462e4          STR      r6,[r4,#0x2e4]        ;1572
00180c  f8c482e8          STR      r8,[r4,#0x2e8]        ;1573
001810  f6af42f5          ADR      r2,png_push_fill_buffer + 1
001814  4639              MOV      r1,r7                 ;1575
001816  4620              MOV      r0,r4                 ;1575
001818  f7fffffe          BL       png_set_read_fn
00181c  bf00              NOP      
00181e  e8bd81f0          POP      {r4-r8,pc}
;;;1577   
                          ENDP

                  png_get_progressive_ptr PROC
;;;1578   png_voidp PNGAPI
;;;1579   png_get_progressive_ptr(png_structp png_ptr)
001822  4601              MOV      r1,r0
;;;1580   {
;;;1581      if(png_ptr == NULL) return (NULL);
001824  b909              CBNZ     r1,|L1.6186|
001826  2000              MOVS     r0,#0
                  |L1.6184|
;;;1582      return png_ptr->io_ptr;
;;;1583   }
001828  4770              BX       lr
                  |L1.6186|
00182a  f8d10194          LDR      r0,[r1,#0x194]        ;1582
00182e  e7fb              B        |L1.6184|
;;;1584   #endif /* PNG_PROGRESSIVE_READ_SUPPORTED */
                          ENDP

