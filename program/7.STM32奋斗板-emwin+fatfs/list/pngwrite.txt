; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\pngwrite.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\pngwrite.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\FWlib\inc -I.\user -I.\CM3 -I.\MALLOC -I.\TFT -I.\EMWIN\EMWIN_INC -I.\EMWIN\DEMO -I.\FATFS -I.\SDIO -I.\PNG -IE:\material\GUI\STM32·Ü¶·°å-emwin+fatfs\RTE -Id:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.1.0\Device\Include -Id:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=515 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\pngwrite.crf PNG\pngwrite.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  png_write_info_before_PLTE PROC
;;;25     void PNGAPI
;;;26     png_write_info_before_PLTE(png_structp png_ptr, png_infop info_ptr)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;27     {
000004  b099              SUB      sp,sp,#0x64
000006  4683              MOV      r11,r0
000008  468a              MOV      r10,r1
;;;28        png_debug(1, "in png_write_info_before_PLTE\n");
;;;29        if (png_ptr == NULL || info_ptr == NULL)
00000a  f1bb0f00          CMP      r11,#0
00000e  d002              BEQ      |L1.22|
000010  f1ba0f00          CMP      r10,#0
000014  d102              BNE      |L1.28|
                  |L1.22|
;;;30           return;
;;;31        if (!(png_ptr->mode & PNG_WROTE_INFO_BEFORE_PLTE))
;;;32        {
;;;33        png_write_sig(png_ptr); /* write PNG signature */
;;;34     #if defined(PNG_MNG_FEATURES_SUPPORTED)
;;;35        if((png_ptr->mode&PNG_HAVE_PNG_SIGNATURE)&&(png_ptr->mng_features_permitted))
;;;36        {
;;;37           png_warning(png_ptr,"MNG features are not allowed in a PNG datastream");
;;;38           png_ptr->mng_features_permitted=0;
;;;39        }
;;;40     #endif
;;;41        /* write IHDR information. */
;;;42        png_write_IHDR(png_ptr, info_ptr->width, info_ptr->height,
;;;43           info_ptr->bit_depth, info_ptr->color_type, info_ptr->compression_type,
;;;44           info_ptr->filter_type,
;;;45     #if defined(PNG_WRITE_INTERLACING_SUPPORTED)
;;;46           info_ptr->interlace_type);
;;;47     #else
;;;48           0);
;;;49     #endif
;;;50        /* the rest of these check to see if the valid field has the appropriate
;;;51           flag set, and if it does, writes the chunk. */
;;;52     #if defined(PNG_WRITE_gAMA_SUPPORTED)
;;;53        if (info_ptr->valid & PNG_INFO_gAMA)
;;;54        {
;;;55     #  ifdef PNG_FLOATING_POINT_SUPPORTED
;;;56           png_write_gAMA(png_ptr, info_ptr->gamma);
;;;57     #else
;;;58     #ifdef PNG_FIXED_POINT_SUPPORTED
;;;59           png_write_gAMA_fixed(png_ptr, info_ptr->int_gamma);
;;;60     #  endif
;;;61     #endif
;;;62        }
;;;63     #endif
;;;64     #if defined(PNG_WRITE_sRGB_SUPPORTED)
;;;65        if (info_ptr->valid & PNG_INFO_sRGB)
;;;66           png_write_sRGB(png_ptr, (int)info_ptr->srgb_intent);
;;;67     #endif
;;;68     #if defined(PNG_WRITE_iCCP_SUPPORTED)
;;;69        if (info_ptr->valid & PNG_INFO_iCCP)
;;;70           png_write_iCCP(png_ptr, info_ptr->iccp_name, PNG_COMPRESSION_TYPE_BASE,
;;;71                          info_ptr->iccp_profile, (int)info_ptr->iccp_proflen);
;;;72     #endif
;;;73     #if defined(PNG_WRITE_sBIT_SUPPORTED)
;;;74        if (info_ptr->valid & PNG_INFO_sBIT)
;;;75           png_write_sBIT(png_ptr, &(info_ptr->sig_bit), info_ptr->color_type);
;;;76     #endif
;;;77     #if defined(PNG_WRITE_cHRM_SUPPORTED)
;;;78        if (info_ptr->valid & PNG_INFO_cHRM)
;;;79        {
;;;80     #ifdef PNG_FLOATING_POINT_SUPPORTED
;;;81           png_write_cHRM(png_ptr,
;;;82              info_ptr->x_white, info_ptr->y_white,
;;;83              info_ptr->x_red, info_ptr->y_red,
;;;84              info_ptr->x_green, info_ptr->y_green,
;;;85              info_ptr->x_blue, info_ptr->y_blue);
;;;86     #else
;;;87     #  ifdef PNG_FIXED_POINT_SUPPORTED
;;;88           png_write_cHRM_fixed(png_ptr,
;;;89              info_ptr->int_x_white, info_ptr->int_y_white,
;;;90              info_ptr->int_x_red, info_ptr->int_y_red,
;;;91              info_ptr->int_x_green, info_ptr->int_y_green,
;;;92              info_ptr->int_x_blue, info_ptr->int_y_blue);
;;;93     #  endif
;;;94     #endif
;;;95        }
;;;96     #endif
;;;97     #if defined(PNG_WRITE_UNKNOWN_CHUNKS_SUPPORTED)
;;;98        if (info_ptr->unknown_chunks_num)
;;;99        {
;;;100           png_unknown_chunk *up;
;;;101    
;;;102           png_debug(5, "writing extra chunks\n");
;;;103    
;;;104           for (up = info_ptr->unknown_chunks;
;;;105                up < info_ptr->unknown_chunks + info_ptr->unknown_chunks_num;
;;;106                up++)
;;;107           {
;;;108             int keep=png_handle_as_unknown(png_ptr, up->name);
;;;109             if (keep != PNG_HANDLE_CHUNK_NEVER &&
;;;110                up->location && !(up->location & PNG_HAVE_PLTE) &&
;;;111                !(up->location & PNG_HAVE_IDAT) &&
;;;112                ((up->name[3] & 0x20) || keep == PNG_HANDLE_CHUNK_ALWAYS ||
;;;113                (png_ptr->flags & PNG_FLAG_KEEP_UNSAFE_CHUNKS)))
;;;114             {
;;;115                png_write_chunk(png_ptr, up->name, up->data, up->size);
;;;116             }
;;;117           }
;;;118       }
;;;119    #endif
;;;120          png_ptr->mode |= PNG_WROTE_INFO_BEFORE_PLTE;
;;;121       }
;;;122    }
000016  b019              ADD      sp,sp,#0x64
000018  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.28|
00001c  f8bb01a8          LDRH     r0,[r11,#0x1a8]       ;31
000020  f4006080          AND      r0,r0,#0x400          ;31
000024  2800              CMP      r0,#0                 ;31
000026  d17c              BNE      |L1.290|
000028  4658              MOV      r0,r11                ;33
00002a  f7fffffe          BL       png_write_sig
00002e  f8bb01a8          LDRH     r0,[r11,#0x1a8]       ;35
000032  f4005080          AND      r0,r0,#0x1000         ;35
000036  b148              CBZ      r0,|L1.76|
000038  f8db036c          LDR      r0,[r11,#0x36c]       ;35
00003c  b130              CBZ      r0,|L1.76|
00003e  a1fe              ADR      r1,|L1.1080|
000040  4658              MOV      r0,r11                ;37
000042  f7fffffe          BL       png_warning
000046  2000              MOVS     r0,#0                 ;38
000048  f8cb036c          STR      r0,[r11,#0x36c]       ;38
                  |L1.76|
00004c  f89a101c          LDRB     r1,[r10,#0x1c]        ;42
000050  f89a001b          LDRB     r0,[r10,#0x1b]        ;42
000054  f89a201a          LDRB     r2,[r10,#0x1a]        ;42
000058  f89a3019          LDRB     r3,[r10,#0x19]        ;42
00005c  e9cd3200          STRD     r3,r2,[sp,#0]         ;42
000060  e9cd0102          STRD     r0,r1,[sp,#8]         ;42
000064  f89a3018          LDRB     r3,[r10,#0x18]        ;42
000068  4658              MOV      r0,r11                ;42
00006a  e9da1200          LDRD     r1,r2,[r10,#0]        ;42
00006e  f7fffffe          BL       png_write_IHDR
000072  f89a0008          LDRB     r0,[r10,#8]           ;53
000076  f0000001          AND      r0,r0,#1              ;53
00007a  b148              CBZ      r0,|L1.144|
00007c  f8da0028          LDR      r0,[r10,#0x28]        ;56
000080  f7fffffe          BL       __aeabi_f2d
000084  4604              MOV      r4,r0                 ;56
000086  4622              MOV      r2,r4                 ;56
000088  460b              MOV      r3,r1                 ;56
00008a  4658              MOV      r0,r11                ;56
00008c  f7fffffe          BL       png_write_gAMA
                  |L1.144|
000090  f8ba0008          LDRH     r0,[r10,#8]           ;65
000094  f4006000          AND      r0,r0,#0x800          ;65
000098  b120              CBZ      r0,|L1.164|
00009a  f89a102c          LDRB     r1,[r10,#0x2c]        ;66
00009e  4658              MOV      r0,r11                ;66
0000a0  f7fffffe          BL       png_write_sRGB
                  |L1.164|
0000a4  f8ba0008          LDRH     r0,[r10,#8]           ;69
0000a8  f4005080          AND      r0,r0,#0x1000         ;69
0000ac  b140              CBZ      r0,|L1.192|
0000ae  f8da00cc          LDR      r0,[r10,#0xcc]        ;70
0000b2  9000              STR      r0,[sp,#0]            ;70
0000b4  2200              MOVS     r2,#0                 ;70
0000b6  4658              MOV      r0,r11                ;70
0000b8  e9da1331          LDRD     r1,r3,[r10,#0xc4]     ;70
0000bc  f7fffffe          BL       png_write_iCCP
                  |L1.192|
0000c0  f89a0008          LDRB     r0,[r10,#8]           ;74
0000c4  f0000002          AND      r0,r0,#2              ;74
0000c8  b130              CBZ      r0,|L1.216|
0000ca  f89a2019          LDRB     r2,[r10,#0x19]        ;75
0000ce  f10a0144          ADD      r1,r10,#0x44          ;75
0000d2  4658              MOV      r0,r11                ;75
0000d4  f7fffffe          BL       png_write_sBIT
                  |L1.216|
0000d8  f89a0008          LDRB     r0,[r10,#8]           ;78
0000dc  f0000004          AND      r0,r0,#4              ;78
0000e0  2800              CMP      r0,#0                 ;78
0000e2  d04c              BEQ      |L1.382|
0000e4  f8da009c          LDR      r0,[r10,#0x9c]        ;81
0000e8  f7fffffe          BL       __aeabi_f2d
0000ec  4604              MOV      r4,r0                 ;81
0000ee  460d              MOV      r5,r1                 ;81
0000f0  f8da0098          LDR      r0,[r10,#0x98]        ;81
0000f4  f7fffffe          BL       __aeabi_f2d
0000f8  4606              MOV      r6,r0                 ;81
0000fa  460f              MOV      r7,r1                 ;81
0000fc  f8da0094          LDR      r0,[r10,#0x94]        ;81
000100  f7fffffe          BL       __aeabi_f2d
000104  4680              MOV      r8,r0                 ;81
000106  4689              MOV      r9,r1                 ;81
000108  f8da0090          LDR      r0,[r10,#0x90]        ;81
00010c  f7fffffe          BL       __aeabi_f2d
000110  e9cd0116          STRD     r0,r1,[sp,#0x58]      ;81
000114  f8da008c          LDR      r0,[r10,#0x8c]        ;81
000118  f7fffffe          BL       __aeabi_f2d
00011c  e9cd0114          STRD     r0,r1,[sp,#0x50]      ;81
000120  e000              B        |L1.292|
                  |L1.290|
000122  e064              B        |L1.494|
                  |L1.292|
000124  f8da0088          LDR      r0,[r10,#0x88]        ;81
000128  f7fffffe          BL       __aeabi_f2d
00012c  e9cd0112          STRD     r0,r1,[sp,#0x48]      ;81
000130  f8da0084          LDR      r0,[r10,#0x84]        ;81
000134  f7fffffe          BL       __aeabi_f2d
000138  e9cd0110          STRD     r0,r1,[sp,#0x40]      ;81
00013c  f8da0080          LDR      r0,[r10,#0x80]        ;81
000140  f7fffffe          BL       __aeabi_f2d
000144  e9cd8908          STRD     r8,r9,[sp,#0x20]      ;81
000148  e9cd670a          STRD     r6,r7,[sp,#0x28]      ;81
00014c  e9cd450c          STRD     r4,r5,[sp,#0x30]      ;81
000150  e9cd010e          STRD     r0,r1,[sp,#0x38]      ;81
000154  e9dd0116          LDRD     r0,r1,[sp,#0x58]      ;81
000158  e9cd0106          STRD     r0,r1,[sp,#0x18]      ;81
00015c  e9dd0114          LDRD     r0,r1,[sp,#0x50]      ;81
000160  e9cd0104          STRD     r0,r1,[sp,#0x10]      ;81
000164  e9dd0112          LDRD     r0,r1,[sp,#0x48]      ;81
000168  e9cd0102          STRD     r0,r1,[sp,#8]         ;81
00016c  e9dd0110          LDRD     r0,r1,[sp,#0x40]      ;81
000170  e9cd0100          STRD     r0,r1,[sp,#0]         ;81
000174  4658              MOV      r0,r11                ;81
000176  e9dd230e          LDRD     r2,r3,[sp,#0x38]      ;81
00017a  f7fffffe          BL       png_write_cHRM
                  |L1.382|
00017e  f8da00c0          LDR      r0,[r10,#0xc0]        ;98
000182  b370              CBZ      r0,|L1.482|
000184  f8da40bc          LDR      r4,[r10,#0xbc]        ;104
000188  e022              B        |L1.464|
                  |L1.394|
00018a  4621              MOV      r1,r4                 ;108
00018c  4658              MOV      r0,r11                ;108
00018e  f7fffffe          BL       png_handle_as_unknown
000192  4605              MOV      r5,r0                 ;108
000194  2d01              CMP      r5,#1                 ;109
000196  d01a              BEQ      |L1.462|
000198  7c20              LDRB     r0,[r4,#0x10]         ;110
00019a  b1c0              CBZ      r0,|L1.462|
00019c  7c20              LDRB     r0,[r4,#0x10]         ;110
00019e  f0000002          AND      r0,r0,#2              ;110
0001a2  b9a0              CBNZ     r0,|L1.462|
0001a4  7c20              LDRB     r0,[r4,#0x10]         ;111
0001a6  f0000004          AND      r0,r0,#4              ;111
0001aa  b980              CBNZ     r0,|L1.462|
0001ac  78e0              LDRB     r0,[r4,#3]            ;112
0001ae  f0000020          AND      r0,r0,#0x20           ;112
0001b2  b930              CBNZ     r0,|L1.450|
0001b4  2d03              CMP      r5,#3                 ;112
0001b6  d004              BEQ      |L1.450|
0001b8  f8db01ac          LDR      r0,[r11,#0x1ac]       ;113
0001bc  f4003080          AND      r0,r0,#0x10000        ;113
0001c0  b128              CBZ      r0,|L1.462|
                  |L1.450|
0001c2  4621              MOV      r1,r4                 ;115
0001c4  4658              MOV      r0,r11                ;115
0001c6  e9d42302          LDRD     r2,r3,[r4,#8]         ;115
0001ca  f7fffffe          BL       png_write_chunk
                  |L1.462|
0001ce  3414              ADDS     r4,r4,#0x14           ;106
                  |L1.464|
0001d0  e9da012f          LDRD     r0,r1,[r10,#0xbc]     ;105
0001d4  eb010181          ADD      r1,r1,r1,LSL #2       ;105
0001d8  eb000081          ADD      r0,r0,r1,LSL #2       ;105
0001dc  42a0              CMP      r0,r4                 ;105
0001de  d8d4              BHI      |L1.394|
0001e0  bf00              NOP                            ;118
                  |L1.482|
0001e2  f8db01a8          LDR      r0,[r11,#0x1a8]       ;120
0001e6  f4406080          ORR      r0,r0,#0x400          ;120
0001ea  f8cb01a8          STR      r0,[r11,#0x1a8]       ;120
                  |L1.494|
0001ee  bf00              NOP      
0001f0  e711              B        |L1.22|
;;;123    
                          ENDP

                  png_write_info PROC
;;;124    void PNGAPI
;;;125    png_write_info(png_structp png_ptr, png_infop info_ptr)
0001f2  e92d41ff          PUSH     {r0-r8,lr}
;;;126    {
0001f6  4607              MOV      r7,r0
0001f8  460c              MOV      r4,r1
;;;127    #if defined(PNG_WRITE_TEXT_SUPPORTED) || defined(PNG_WRITE_sPLT_SUPPORTED)
;;;128       int i;
;;;129    #endif
;;;130    
;;;131       png_debug(1, "in png_write_info\n");
;;;132    
;;;133       if (png_ptr == NULL || info_ptr == NULL)
0001fa  b107              CBZ      r7,|L1.510|
0001fc  b90c              CBNZ     r4,|L1.514|
                  |L1.510|
;;;134          return;
;;;135    
;;;136       png_write_info_before_PLTE(png_ptr, info_ptr);
;;;137    
;;;138       if (info_ptr->valid & PNG_INFO_PLTE)
;;;139          png_write_PLTE(png_ptr, info_ptr->palette,
;;;140             (png_uint_32)info_ptr->num_palette);
;;;141       else if (info_ptr->color_type == PNG_COLOR_TYPE_PALETTE)
;;;142          png_error(png_ptr, "Valid palette required for paletted images");
;;;143    
;;;144    #if defined(PNG_WRITE_tRNS_SUPPORTED)
;;;145       if (info_ptr->valid & PNG_INFO_tRNS)
;;;146          {
;;;147    #if defined(PNG_WRITE_INVERT_ALPHA_SUPPORTED)
;;;148             /* invert the alpha channel (in tRNS) */
;;;149             if ((png_ptr->transformations & PNG_INVERT_ALPHA) &&
;;;150                info_ptr->color_type == PNG_COLOR_TYPE_PALETTE)
;;;151             {
;;;152                int j;
;;;153                for (j=0; j<(int)info_ptr->num_trans; j++)
;;;154                   info_ptr->trans[j] = (png_byte)(255 - info_ptr->trans[j]);
;;;155             }
;;;156    #endif
;;;157          png_write_tRNS(png_ptr, info_ptr->trans, &(info_ptr->trans_values),
;;;158             info_ptr->num_trans, info_ptr->color_type);
;;;159          }
;;;160    #endif
;;;161    #if defined(PNG_WRITE_bKGD_SUPPORTED)
;;;162       if (info_ptr->valid & PNG_INFO_bKGD)
;;;163          png_write_bKGD(png_ptr, &(info_ptr->background), info_ptr->color_type);
;;;164    #endif
;;;165    #if defined(PNG_WRITE_hIST_SUPPORTED)
;;;166       if (info_ptr->valid & PNG_INFO_hIST)
;;;167          png_write_hIST(png_ptr, info_ptr->hist, info_ptr->num_palette);
;;;168    #endif
;;;169    #if defined(PNG_WRITE_oFFs_SUPPORTED)
;;;170       if (info_ptr->valid & PNG_INFO_oFFs)
;;;171          png_write_oFFs(png_ptr, info_ptr->x_offset, info_ptr->y_offset,
;;;172             info_ptr->offset_unit_type);
;;;173    #endif
;;;174    #if defined(PNG_WRITE_pCAL_SUPPORTED)
;;;175       if (info_ptr->valid & PNG_INFO_pCAL)
;;;176          png_write_pCAL(png_ptr, info_ptr->pcal_purpose, info_ptr->pcal_X0,
;;;177             info_ptr->pcal_X1, info_ptr->pcal_type, info_ptr->pcal_nparams,
;;;178             info_ptr->pcal_units, info_ptr->pcal_params);
;;;179    #endif
;;;180    #if defined(PNG_WRITE_sCAL_SUPPORTED)
;;;181       if (info_ptr->valid & PNG_INFO_sCAL)
;;;182    #if defined(PNG_FLOATING_POINT_SUPPORTED) && !defined(PNG_NO_STDIO)
;;;183          png_write_sCAL(png_ptr, (int)info_ptr->scal_unit,
;;;184              info_ptr->scal_pixel_width, info_ptr->scal_pixel_height);
;;;185    #else
;;;186    #ifdef PNG_FIXED_POINT_SUPPORTED
;;;187          png_write_sCAL_s(png_ptr, (int)info_ptr->scal_unit,
;;;188              info_ptr->scal_s_width, info_ptr->scal_s_height);
;;;189    #else
;;;190          png_warning(png_ptr,
;;;191              "png_write_sCAL not supported; sCAL chunk not written.");
;;;192    #endif
;;;193    #endif
;;;194    #endif
;;;195    #if defined(PNG_WRITE_pHYs_SUPPORTED)
;;;196       if (info_ptr->valid & PNG_INFO_pHYs)
;;;197          png_write_pHYs(png_ptr, info_ptr->x_pixels_per_unit,
;;;198             info_ptr->y_pixels_per_unit, info_ptr->phys_unit_type);
;;;199    #endif
;;;200    #if defined(PNG_WRITE_tIME_SUPPORTED)
;;;201       if (info_ptr->valid & PNG_INFO_tIME)
;;;202       {
;;;203          png_write_tIME(png_ptr, &(info_ptr->mod_time));
;;;204          png_ptr->mode |= PNG_WROTE_tIME;
;;;205       }
;;;206    #endif
;;;207    #if defined(PNG_WRITE_sPLT_SUPPORTED)
;;;208       if (info_ptr->valid & PNG_INFO_sPLT)
;;;209         for (i = 0; i < (int)info_ptr->splt_palettes_num; i++)
;;;210           png_write_sPLT(png_ptr, info_ptr->splt_palettes + i);
;;;211    #endif
;;;212    #if defined(PNG_WRITE_TEXT_SUPPORTED)
;;;213       /* Check to see if we need to write text chunks */
;;;214       for (i = 0; i < info_ptr->num_text; i++)
;;;215       {
;;;216          png_debug2(2, "Writing header text chunk %d, type %d\n", i,
;;;217             info_ptr->text[i].compression);
;;;218          /* an internationalized chunk? */
;;;219          if (info_ptr->text[i].compression > 0)
;;;220          {
;;;221    #if defined(PNG_WRITE_iTXt_SUPPORTED)
;;;222              /* write international chunk */
;;;223              png_write_iTXt(png_ptr,
;;;224                             info_ptr->text[i].compression,
;;;225                             info_ptr->text[i].key,
;;;226                             info_ptr->text[i].lang,
;;;227                             info_ptr->text[i].lang_key,
;;;228                             info_ptr->text[i].text);
;;;229    #else
;;;230              png_warning(png_ptr, "Unable to write international text");
;;;231    #endif
;;;232              /* Mark this chunk as written */
;;;233              info_ptr->text[i].compression = PNG_TEXT_COMPRESSION_NONE_WR;
;;;234          }
;;;235          /* If we want a compressed text chunk */
;;;236          else if (info_ptr->text[i].compression == PNG_TEXT_COMPRESSION_zTXt)
;;;237          {
;;;238    #if defined(PNG_WRITE_zTXt_SUPPORTED)
;;;239             /* write compressed chunk */
;;;240             png_write_zTXt(png_ptr, info_ptr->text[i].key,
;;;241                info_ptr->text[i].text, 0,
;;;242                info_ptr->text[i].compression);
;;;243    #else
;;;244             png_warning(png_ptr, "Unable to write compressed text");
;;;245    #endif
;;;246             /* Mark this chunk as written */
;;;247             info_ptr->text[i].compression = PNG_TEXT_COMPRESSION_zTXt_WR;
;;;248          }
;;;249          else if (info_ptr->text[i].compression == PNG_TEXT_COMPRESSION_NONE)
;;;250          {
;;;251    #if defined(PNG_WRITE_tEXt_SUPPORTED)
;;;252             /* write uncompressed chunk */
;;;253             png_write_tEXt(png_ptr, info_ptr->text[i].key,
;;;254                             info_ptr->text[i].text,
;;;255                             0);
;;;256    #else
;;;257             png_warning(png_ptr, "Unable to write uncompressed text");
;;;258    #endif
;;;259             /* Mark this chunk as written */
;;;260             info_ptr->text[i].compression = PNG_TEXT_COMPRESSION_NONE_WR;
;;;261          }
;;;262       }
;;;263    #endif
;;;264    #if defined(PNG_WRITE_UNKNOWN_CHUNKS_SUPPORTED)
;;;265       if (info_ptr->unknown_chunks_num)
;;;266       {
;;;267           png_unknown_chunk *up;
;;;268    
;;;269           png_debug(5, "writing extra chunks\n");
;;;270    
;;;271           for (up = info_ptr->unknown_chunks;
;;;272                up < info_ptr->unknown_chunks + info_ptr->unknown_chunks_num;
;;;273                up++)
;;;274           {
;;;275             int keep=png_handle_as_unknown(png_ptr, up->name);
;;;276             if (keep != PNG_HANDLE_CHUNK_NEVER &&
;;;277                up->location && (up->location & PNG_HAVE_PLTE) &&
;;;278                !(up->location & PNG_HAVE_IDAT) &&
;;;279                ((up->name[3] & 0x20) || keep == PNG_HANDLE_CHUNK_ALWAYS ||
;;;280                (png_ptr->flags & PNG_FLAG_KEEP_UNSAFE_CHUNKS)))
;;;281             {
;;;282                png_write_chunk(png_ptr, up->name, up->data, up->size);
;;;283             }
;;;284           }
;;;285       }
;;;286    #endif
;;;287    }
0001fe  e8bd81ff          POP      {r0-r8,pc}
                  |L1.514|
000202  4621              MOV      r1,r4                 ;136
000204  4638              MOV      r0,r7                 ;136
000206  f7fffffe          BL       png_write_info_before_PLTE
00020a  7a20              LDRB     r0,[r4,#8]            ;138
00020c  f0000008          AND      r0,r0,#8              ;138
000210  b128              CBZ      r0,|L1.542|
000212  8aa2              LDRH     r2,[r4,#0x14]         ;139
000214  4638              MOV      r0,r7                 ;139
000216  6921              LDR      r1,[r4,#0x10]         ;139
000218  f7fffffe          BL       png_write_PLTE
00021c  e006              B        |L1.556|
                  |L1.542|
00021e  7e60              LDRB     r0,[r4,#0x19]         ;141
000220  2803              CMP      r0,#3                 ;141
000222  d103              BNE      |L1.556|
000224  a191              ADR      r1,|L1.1132|
000226  4638              MOV      r0,r7                 ;142
000228  f7fffffe          BL       png_error
                  |L1.556|
00022c  7a20              LDRB     r0,[r4,#8]            ;145
00022e  f0000010          AND      r0,r0,#0x10           ;145
000232  b1e8              CBZ      r0,|L1.624|
000234  f8d701b0          LDR      r0,[r7,#0x1b0]        ;149
000238  f4002000          AND      r0,r0,#0x80000        ;149
00023c  b178              CBZ      r0,|L1.606|
00023e  7e60              LDRB     r0,[r4,#0x19]         ;150
000240  2803              CMP      r0,#3                 ;150
000242  d10c              BNE      |L1.606|
000244  2000              MOVS     r0,#0                 ;153
000246  e006              B        |L1.598|
                  |L1.584|
000248  6ce1              LDR      r1,[r4,#0x4c]         ;154
00024a  5c09              LDRB     r1,[r1,r0]            ;154
00024c  f1c101ff          RSB      r1,r1,#0xff           ;154
000250  6ce2              LDR      r2,[r4,#0x4c]         ;154
000252  5411              STRB     r1,[r2,r0]            ;154
000254  1c40              ADDS     r0,r0,#1              ;153
                  |L1.598|
000256  8ae1              LDRH     r1,[r4,#0x16]         ;153
000258  4281              CMP      r1,r0                 ;153
00025a  dcf5              BGT      |L1.584|
00025c  bf00              NOP                            ;155
                  |L1.606|
00025e  7e60              LDRB     r0,[r4,#0x19]         ;157
000260  9000              STR      r0,[sp,#0]            ;157
000262  8ae3              LDRH     r3,[r4,#0x16]         ;157
000264  f1040250          ADD      r2,r4,#0x50           ;157
000268  4638              MOV      r0,r7                 ;157
00026a  6ce1              LDR      r1,[r4,#0x4c]         ;157
00026c  f7fffffe          BL       png_write_tRNS
                  |L1.624|
000270  7a20              LDRB     r0,[r4,#8]            ;162
000272  f0000020          AND      r0,r0,#0x20           ;162
000276  b128              CBZ      r0,|L1.644|
000278  7e62              LDRB     r2,[r4,#0x19]         ;163
00027a  f104015a          ADD      r1,r4,#0x5a           ;163
00027e  4638              MOV      r0,r7                 ;163
000280  f7fffffe          BL       png_write_bKGD
                  |L1.644|
000284  7a20              LDRB     r0,[r4,#8]            ;166
000286  f0000040          AND      r0,r0,#0x40           ;166
00028a  b120              CBZ      r0,|L1.662|
00028c  8aa2              LDRH     r2,[r4,#0x14]         ;167
00028e  4638              MOV      r0,r7                 ;167
000290  6fe1              LDR      r1,[r4,#0x7c]         ;167
000292  f7fffffe          BL       png_write_hIST
                  |L1.662|
000296  8920              LDRH     r0,[r4,#8]            ;170
000298  f4007080          AND      r0,r0,#0x100          ;170
00029c  b130              CBZ      r0,|L1.684|
00029e  f894306c          LDRB     r3,[r4,#0x6c]         ;171
0002a2  4638              MOV      r0,r7                 ;171
0002a4  e9d41219          LDRD     r1,r2,[r4,#0x64]      ;171
0002a8  f7fffffe          BL       png_write_oFFs
                  |L1.684|
0002ac  8920              LDRH     r0,[r4,#8]            ;175
0002ae  f4006080          AND      r0,r0,#0x400          ;175
0002b2  b178              CBZ      r0,|L1.724|
0002b4  34a0              ADDS     r4,r4,#0xa0           ;176
0002b6  7d62              LDRB     r2,[r4,#0x15]         ;176
0002b8  7d23              LDRB     r3,[r4,#0x14]         ;176
0002ba  e9d41003          LDRD     r1,r0,[r4,#0xc]       ;176
0002be  e9cd3200          STRD     r3,r2,[sp,#0]         ;176
0002c2  e9cd1002          STRD     r1,r0,[sp,#8]         ;176
0002c6  e9d42301          LDRD     r2,r3,[r4,#4]         ;176
0002ca  f85419a0          LDR      r1,[r4],#-0xa0        ;176
0002ce  4638              MOV      r0,r7                 ;176
0002d0  f7fffffe          BL       png_write_pCAL
                  |L1.724|
0002d4  8920              LDRH     r0,[r4,#8]            ;181
0002d6  f4004080          AND      r0,r0,#0x4000         ;181
0002da  b138              CBZ      r0,|L1.748|
0002dc  34dc              ADDS     r4,r4,#0xdc           ;187
0002de  e9d42305          LDRD     r2,r3,[r4,#0x14]      ;187
0002e2  f81419dc          LDRB     r1,[r4],#-0xdc        ;187
0002e6  4638              MOV      r0,r7                 ;187
0002e8  f7fffffe          BL       png_write_sCAL_s
                  |L1.748|
0002ec  7a20              LDRB     r0,[r4,#8]            ;196
0002ee  f0000080          AND      r0,r0,#0x80           ;196
0002f2  b130              CBZ      r0,|L1.770|
0002f4  f8943078          LDRB     r3,[r4,#0x78]         ;197
0002f8  4638              MOV      r0,r7                 ;197
0002fa  e9d4121c          LDRD     r1,r2,[r4,#0x70]      ;197
0002fe  f7fffffe          BL       png_write_pHYs
                  |L1.770|
000302  8920              LDRH     r0,[r4,#8]            ;201
000304  f4007000          AND      r0,r0,#0x200          ;201
000308  b150              CBZ      r0,|L1.800|
00030a  f104013c          ADD      r1,r4,#0x3c           ;203
00030e  4638              MOV      r0,r7                 ;203
000310  f7fffffe          BL       png_write_tIME
000314  f8d701a8          LDR      r0,[r7,#0x1a8]        ;204
000318  f4407000          ORR      r0,r0,#0x200          ;204
00031c  f8c701a8          STR      r0,[r7,#0x1a8]        ;204
                  |L1.800|
000320  8920              LDRH     r0,[r4,#8]            ;208
000322  f4005000          AND      r0,r0,#0x2000         ;208
000326  b168              CBZ      r0,|L1.836|
000328  2500              MOVS     r5,#0                 ;209
00032a  e007              B        |L1.828|
                  |L1.812|
00032c  f8d400d4          LDR      r0,[r4,#0xd4]         ;210
000330  eb001105          ADD      r1,r0,r5,LSL #4       ;210
000334  4638              MOV      r0,r7                 ;210
000336  f7fffffe          BL       png_write_sPLT
00033a  1c6d              ADDS     r5,r5,#1              ;209
                  |L1.828|
00033c  f8d400d8          LDR      r0,[r4,#0xd8]         ;209
000340  42a8              CMP      r0,r5                 ;209
000342  dcf3              BGT      |L1.812|
                  |L1.836|
000344  2500              MOVS     r5,#0                 ;214
000346  e046              B        |L1.982|
                  |L1.840|
000348  6ba0              LDR      r0,[r4,#0x38]         ;219
00034a  eb001005          ADD      r0,r0,r5,LSL #4       ;219
00034e  6800              LDR      r0,[r0,#0]            ;219
000350  2800              CMP      r0,#0                 ;219
000352  dd0a              BLE      |L1.874|
000354  a150              ADR      r1,|L1.1176|
000356  4638              MOV      r0,r7                 ;230
000358  f7fffffe          BL       png_warning
00035c  f06f0002          MVN      r0,#2                 ;233
000360  6ba1              LDR      r1,[r4,#0x38]         ;233
000362  eb011105          ADD      r1,r1,r5,LSL #4       ;233
000366  6008              STR      r0,[r1,#0]            ;233
000368  e034              B        |L1.980|
                  |L1.874|
00036a  6ba0              LDR      r0,[r4,#0x38]         ;236
00036c  eb001005          ADD      r0,r0,r5,LSL #4       ;236
000370  6800              LDR      r0,[r0,#0]            ;236
000372  b9b8              CBNZ     r0,|L1.932|
000374  6ba0              LDR      r0,[r4,#0x38]         ;240
000376  eb001005          ADD      r0,r0,r5,LSL #4       ;240
00037a  6800              LDR      r0,[r0,#0]            ;240
00037c  9000              STR      r0,[sp,#0]            ;240
00037e  6ba0              LDR      r0,[r4,#0x38]         ;240
000380  eb001005          ADD      r0,r0,r5,LSL #4       ;240
000384  6882              LDR      r2,[r0,#8]            ;240
000386  6ba0              LDR      r0,[r4,#0x38]         ;240
000388  eb001005          ADD      r0,r0,r5,LSL #4       ;240
00038c  2300              MOVS     r3,#0                 ;240
00038e  6841              LDR      r1,[r0,#4]            ;240
000390  4638              MOV      r0,r7                 ;240
000392  f7fffffe          BL       png_write_zTXt
000396  f06f0001          MVN      r0,#1                 ;247
00039a  6ba1              LDR      r1,[r4,#0x38]         ;247
00039c  eb011105          ADD      r1,r1,r5,LSL #4       ;247
0003a0  6008              STR      r0,[r1,#0]            ;247
0003a2  e017              B        |L1.980|
                  |L1.932|
0003a4  6ba0              LDR      r0,[r4,#0x38]         ;249
0003a6  eb001005          ADD      r0,r0,r5,LSL #4       ;249
0003aa  6800              LDR      r0,[r0,#0]            ;249
0003ac  1c40              ADDS     r0,r0,#1              ;249
0003ae  b988              CBNZ     r0,|L1.980|
0003b0  6ba0              LDR      r0,[r4,#0x38]         ;253
0003b2  eb001005          ADD      r0,r0,r5,LSL #4       ;253
0003b6  6882              LDR      r2,[r0,#8]            ;253
0003b8  6ba0              LDR      r0,[r4,#0x38]         ;253
0003ba  eb001005          ADD      r0,r0,r5,LSL #4       ;253
0003be  2300              MOVS     r3,#0                 ;253
0003c0  6841              LDR      r1,[r0,#4]            ;253
0003c2  4638              MOV      r0,r7                 ;253
0003c4  f7fffffe          BL       png_write_tEXt
0003c8  f06f0002          MVN      r0,#2                 ;260
0003cc  6ba1              LDR      r1,[r4,#0x38]         ;260
0003ce  eb011105          ADD      r1,r1,r5,LSL #4       ;260
0003d2  6008              STR      r0,[r1,#0]            ;260
                  |L1.980|
0003d4  1c6d              ADDS     r5,r5,#1              ;214
                  |L1.982|
0003d6  6b20              LDR      r0,[r4,#0x30]         ;214
0003d8  42a8              CMP      r0,r5                 ;214
0003da  dcb5              BGT      |L1.840|
0003dc  f8d400c0          LDR      r0,[r4,#0xc0]         ;265
0003e0  b340              CBZ      r0,|L1.1076|
0003e2  f8d460bc          LDR      r6,[r4,#0xbc]         ;271
0003e6  e024              B        |L1.1074|
                  |L1.1000|
0003e8  4631              MOV      r1,r6                 ;275
0003ea  4638              MOV      r0,r7                 ;275
0003ec  f7fffffe          BL       png_handle_as_unknown
0003f0  4680              MOV      r8,r0                 ;275
0003f2  f1b80f01          CMP      r8,#1                 ;276
0003f6  d01b              BEQ      |L1.1072|
0003f8  7c30              LDRB     r0,[r6,#0x10]         ;277
0003fa  b1c8              CBZ      r0,|L1.1072|
0003fc  7c30              LDRB     r0,[r6,#0x10]         ;277
0003fe  f0000002          AND      r0,r0,#2              ;277
000402  b1a8              CBZ      r0,|L1.1072|
000404  7c30              LDRB     r0,[r6,#0x10]         ;278
000406  f0000004          AND      r0,r0,#4              ;278
00040a  b988              CBNZ     r0,|L1.1072|
00040c  78f0              LDRB     r0,[r6,#3]            ;279
00040e  f0000020          AND      r0,r0,#0x20           ;279
000412  b938              CBNZ     r0,|L1.1060|
000414  f1b80f03          CMP      r8,#3                 ;279
000418  d004              BEQ      |L1.1060|
00041a  f8d701ac          LDR      r0,[r7,#0x1ac]        ;280
00041e  f4003080          AND      r0,r0,#0x10000        ;280
000422  b128              CBZ      r0,|L1.1072|
                  |L1.1060|
000424  4631              MOV      r1,r6                 ;282
000426  4638              MOV      r0,r7                 ;282
000428  e9d62302          LDRD     r2,r3,[r6,#8]         ;282
00042c  f7fffffe          BL       png_write_chunk
                  |L1.1072|
000430  3614              ADDS     r6,r6,#0x14           ;273
                  |L1.1074|
000432  e043              B        |L1.1212|
                  |L1.1076|
000434  e04b              B        |L1.1230|
000436  0000              DCW      0x0000
                  |L1.1080|
000438  4d4e4720          DCB      "MNG features are not allowed in a PNG datastream",0
00043c  66656174
000440  75726573
000444  20617265
000448  206e6f74
00044c  20616c6c
000450  6f776564
000454  20696e20
000458  6120504e
00045c  47206461
000460  74617374
000464  7265616d
000468  00      
000469  00                DCB      0
00046a  00                DCB      0
00046b  00                DCB      0
                  |L1.1132|
00046c  56616c69          DCB      "Valid palette required for paletted images",0
000470  64207061
000474  6c657474
000478  65207265
00047c  71756972
000480  65642066
000484  6f722070
000488  616c6574
00048c  74656420
000490  696d6167
000494  657300  
000497  00                DCB      0
                  |L1.1176|
000498  556e6162          DCB      "Unable to write international text",0
00049c  6c652074
0004a0  6f207772
0004a4  69746520
0004a8  696e7465
0004ac  726e6174
0004b0  696f6e61
0004b4  6c207465
0004b8  787400  
0004bb  00                DCB      0
                  |L1.1212|
0004bc  e9d4012f          LDRD     r0,r1,[r4,#0xbc]      ;272
0004c0  eb010181          ADD      r1,r1,r1,LSL #2       ;272
0004c4  eb000081          ADD      r0,r0,r1,LSL #2       ;272
0004c8  42b0              CMP      r0,r6                 ;272
0004ca  d88d              BHI      |L1.1000|
0004cc  bf00              NOP                            ;285
                  |L1.1230|
0004ce  bf00              NOP      
0004d0  e695              B        |L1.510|
;;;288    
                          ENDP

                  png_write_end PROC
;;;294    void PNGAPI
;;;295    png_write_end(png_structp png_ptr, png_infop info_ptr)
0004d2  e92d43f8          PUSH     {r3-r9,lr}
;;;296    {
0004d6  4607              MOV      r7,r0
0004d8  460c              MOV      r4,r1
;;;297       png_debug(1, "in png_write_end\n");
;;;298       if (png_ptr == NULL)
0004da  b90f              CBNZ     r7,|L1.1248|
                  |L1.1244|
;;;299          return;
;;;300       if (!(png_ptr->mode & PNG_HAVE_IDAT))
;;;301          png_error(png_ptr, "No IDATs written into file");
;;;302    
;;;303       /* see if user wants us to write information chunks */
;;;304       if (info_ptr != NULL)
;;;305       {
;;;306    #if defined(PNG_WRITE_TEXT_SUPPORTED)
;;;307          int i; /* local index variable */
;;;308    #endif
;;;309    #if defined(PNG_WRITE_tIME_SUPPORTED)
;;;310          /* check to see if user has supplied a time chunk */
;;;311          if ((info_ptr->valid & PNG_INFO_tIME) &&
;;;312             !(png_ptr->mode & PNG_WROTE_tIME))
;;;313             png_write_tIME(png_ptr, &(info_ptr->mod_time));
;;;314    #endif
;;;315    #if defined(PNG_WRITE_TEXT_SUPPORTED)
;;;316          /* loop through comment chunks */
;;;317          for (i = 0; i < info_ptr->num_text; i++)
;;;318          {
;;;319             png_debug2(2, "Writing trailer text chunk %d, type %d\n", i,
;;;320                info_ptr->text[i].compression);
;;;321             /* an internationalized chunk? */
;;;322             if (info_ptr->text[i].compression > 0)
;;;323             {
;;;324    #if defined(PNG_WRITE_iTXt_SUPPORTED)
;;;325                 /* write international chunk */
;;;326                 png_write_iTXt(png_ptr,
;;;327                             info_ptr->text[i].compression,
;;;328                             info_ptr->text[i].key,
;;;329                             info_ptr->text[i].lang,
;;;330                             info_ptr->text[i].lang_key,
;;;331                             info_ptr->text[i].text);
;;;332    #else
;;;333                 png_warning(png_ptr, "Unable to write international text");
;;;334    #endif
;;;335                 /* Mark this chunk as written */
;;;336                 info_ptr->text[i].compression = PNG_TEXT_COMPRESSION_NONE_WR;
;;;337             }
;;;338             else if (info_ptr->text[i].compression >= PNG_TEXT_COMPRESSION_zTXt)
;;;339             {
;;;340    #if defined(PNG_WRITE_zTXt_SUPPORTED)
;;;341                /* write compressed chunk */
;;;342                png_write_zTXt(png_ptr, info_ptr->text[i].key,
;;;343                   info_ptr->text[i].text, 0,
;;;344                   info_ptr->text[i].compression);
;;;345    #else
;;;346                png_warning(png_ptr, "Unable to write compressed text");
;;;347    #endif
;;;348                /* Mark this chunk as written */
;;;349                info_ptr->text[i].compression = PNG_TEXT_COMPRESSION_zTXt_WR;
;;;350             }
;;;351             else if (info_ptr->text[i].compression == PNG_TEXT_COMPRESSION_NONE)
;;;352             {
;;;353    #if defined(PNG_WRITE_tEXt_SUPPORTED)
;;;354                /* write uncompressed chunk */
;;;355                png_write_tEXt(png_ptr, info_ptr->text[i].key,
;;;356                   info_ptr->text[i].text, 0);
;;;357    #else
;;;358                png_warning(png_ptr, "Unable to write uncompressed text");
;;;359    #endif
;;;360    
;;;361                /* Mark this chunk as written */
;;;362                info_ptr->text[i].compression = PNG_TEXT_COMPRESSION_NONE_WR;
;;;363             }
;;;364          }
;;;365    #endif
;;;366    #if defined(PNG_WRITE_UNKNOWN_CHUNKS_SUPPORTED)
;;;367       if (info_ptr->unknown_chunks_num)
;;;368       {
;;;369           png_unknown_chunk *up;
;;;370    
;;;371           png_debug(5, "writing extra chunks\n");
;;;372    
;;;373           for (up = info_ptr->unknown_chunks;
;;;374                up < info_ptr->unknown_chunks + info_ptr->unknown_chunks_num;
;;;375                up++)
;;;376           {
;;;377             int keep=png_handle_as_unknown(png_ptr, up->name);
;;;378             if (keep != PNG_HANDLE_CHUNK_NEVER &&
;;;379                up->location && (up->location & PNG_AFTER_IDAT) &&
;;;380                ((up->name[3] & 0x20) || keep == PNG_HANDLE_CHUNK_ALWAYS ||
;;;381                (png_ptr->flags & PNG_FLAG_KEEP_UNSAFE_CHUNKS)))
;;;382             {
;;;383                png_write_chunk(png_ptr, up->name, up->data, up->size);
;;;384             }
;;;385           }
;;;386       }
;;;387    #endif
;;;388       }
;;;389    
;;;390       png_ptr->mode |= PNG_AFTER_IDAT;
;;;391    
;;;392       /* write end of PNG file */
;;;393       png_write_IEND(png_ptr);
;;;394    #if 0
;;;395    /* This flush, added in libpng-1.0.8,  causes some applications to crash
;;;396       because they do not set png_ptr->output_flush_fn */
;;;397       png_flush(png_ptr);
;;;398    #endif
;;;399    }
0004dc  e8bd83f8          POP      {r3-r9,pc}
                  |L1.1248|
0004e0  f89701a8          LDRB     r0,[r7,#0x1a8]        ;300
0004e4  f0000004          AND      r0,r0,#4              ;300
0004e8  b918              CBNZ     r0,|L1.1266|
0004ea  a1fc              ADR      r1,|L1.2268|
0004ec  4638              MOV      r0,r7                 ;301
0004ee  f7fffffe          BL       png_error
                  |L1.1266|
0004f2  2c00              CMP      r4,#0                 ;304
0004f4  d07e              BEQ      |L1.1524|
0004f6  8920              LDRH     r0,[r4,#8]            ;311
0004f8  f4007000          AND      r0,r0,#0x200          ;311
0004fc  b148              CBZ      r0,|L1.1298|
0004fe  f8b701a8          LDRH     r0,[r7,#0x1a8]        ;312
000502  f4007000          AND      r0,r0,#0x200          ;312
000506  b920              CBNZ     r0,|L1.1298|
000508  f104013c          ADD      r1,r4,#0x3c           ;313
00050c  4638              MOV      r0,r7                 ;313
00050e  f7fffffe          BL       png_write_tIME
                  |L1.1298|
000512  2500              MOVS     r5,#0                 ;317
000514  e048              B        |L1.1448|
                  |L1.1302|
000516  6ba0              LDR      r0,[r4,#0x38]         ;322
000518  eb001005          ADD      r0,r0,r5,LSL #4       ;322
00051c  6800              LDR      r0,[r0,#0]            ;322
00051e  2800              CMP      r0,#0                 ;322
000520  dd0b              BLE      |L1.1338|
000522  f2af018c          ADR      r1,|L1.1176|
000526  4638              MOV      r0,r7                 ;333
000528  f7fffffe          BL       png_warning
00052c  f06f0002          MVN      r0,#2                 ;336
000530  6ba1              LDR      r1,[r4,#0x38]         ;336
000532  eb011105          ADD      r1,r1,r5,LSL #4       ;336
000536  6008              STR      r0,[r1,#0]            ;336
000538  e035              B        |L1.1446|
                  |L1.1338|
00053a  6ba0              LDR      r0,[r4,#0x38]         ;338
00053c  eb001005          ADD      r0,r0,r5,LSL #4       ;338
000540  6800              LDR      r0,[r0,#0]            ;338
000542  2800              CMP      r0,#0                 ;338
000544  db17              BLT      |L1.1398|
000546  6ba0              LDR      r0,[r4,#0x38]         ;342
000548  eb001005          ADD      r0,r0,r5,LSL #4       ;342
00054c  6800              LDR      r0,[r0,#0]            ;342
00054e  9000              STR      r0,[sp,#0]            ;342
000550  6ba0              LDR      r0,[r4,#0x38]         ;342
000552  eb001005          ADD      r0,r0,r5,LSL #4       ;342
000556  6882              LDR      r2,[r0,#8]            ;342
000558  6ba0              LDR      r0,[r4,#0x38]         ;342
00055a  eb001005          ADD      r0,r0,r5,LSL #4       ;342
00055e  2300              MOVS     r3,#0                 ;342
000560  6841              LDR      r1,[r0,#4]            ;342
000562  4638              MOV      r0,r7                 ;342
000564  f7fffffe          BL       png_write_zTXt
000568  f06f0001          MVN      r0,#1                 ;349
00056c  6ba1              LDR      r1,[r4,#0x38]         ;349
00056e  eb011105          ADD      r1,r1,r5,LSL #4       ;349
000572  6008              STR      r0,[r1,#0]            ;349
000574  e017              B        |L1.1446|
                  |L1.1398|
000576  6ba0              LDR      r0,[r4,#0x38]         ;351
000578  eb001005          ADD      r0,r0,r5,LSL #4       ;351
00057c  6800              LDR      r0,[r0,#0]            ;351
00057e  1c40              ADDS     r0,r0,#1              ;351
000580  b988              CBNZ     r0,|L1.1446|
000582  6ba0              LDR      r0,[r4,#0x38]         ;355
000584  eb001005          ADD      r0,r0,r5,LSL #4       ;355
000588  6882              LDR      r2,[r0,#8]            ;355
00058a  6ba0              LDR      r0,[r4,#0x38]         ;355
00058c  eb001005          ADD      r0,r0,r5,LSL #4       ;355
000590  2300              MOVS     r3,#0                 ;355
000592  6841              LDR      r1,[r0,#4]            ;355
000594  4638              MOV      r0,r7                 ;355
000596  f7fffffe          BL       png_write_tEXt
00059a  f06f0002          MVN      r0,#2                 ;362
00059e  6ba1              LDR      r1,[r4,#0x38]         ;362
0005a0  eb011105          ADD      r1,r1,r5,LSL #4       ;362
0005a4  6008              STR      r0,[r1,#0]            ;362
                  |L1.1446|
0005a6  1c6d              ADDS     r5,r5,#1              ;317
                  |L1.1448|
0005a8  6b20              LDR      r0,[r4,#0x30]         ;317
0005aa  42a8              CMP      r0,r5                 ;317
0005ac  dcb3              BGT      |L1.1302|
0005ae  f8d400c0          LDR      r0,[r4,#0xc0]         ;367
0005b2  b370              CBZ      r0,|L1.1554|
0005b4  f8d460bc          LDR      r6,[r4,#0xbc]         ;373
0005b8  e022              B        |L1.1536|
                  |L1.1466|
0005ba  4631              MOV      r1,r6                 ;377
0005bc  4638              MOV      r0,r7                 ;377
0005be  f7fffffe          BL       png_handle_as_unknown
0005c2  4680              MOV      r8,r0                 ;377
0005c4  f1b80f01          CMP      r8,#1                 ;378
0005c8  d019              BEQ      |L1.1534|
0005ca  7c30              LDRB     r0,[r6,#0x10]         ;379
0005cc  b1b8              CBZ      r0,|L1.1534|
0005ce  7c30              LDRB     r0,[r6,#0x10]         ;379
0005d0  f0000008          AND      r0,r0,#8              ;379
0005d4  b198              CBZ      r0,|L1.1534|
0005d6  78f0              LDRB     r0,[r6,#3]            ;380
0005d8  f0000020          AND      r0,r0,#0x20           ;380
0005dc  b938              CBNZ     r0,|L1.1518|
0005de  f1b80f03          CMP      r8,#3                 ;380
0005e2  d004              BEQ      |L1.1518|
0005e4  f8d701ac          LDR      r0,[r7,#0x1ac]        ;381
0005e8  f4003080          AND      r0,r0,#0x10000        ;381
0005ec  b138              CBZ      r0,|L1.1534|
                  |L1.1518|
0005ee  4631              MOV      r1,r6                 ;383
0005f0  4638              MOV      r0,r7                 ;383
0005f2  e000              B        |L1.1526|
                  |L1.1524|
0005f4  e00e              B        |L1.1556|
                  |L1.1526|
0005f6  e9d62302          LDRD     r2,r3,[r6,#8]         ;383
0005fa  f7fffffe          BL       png_write_chunk
                  |L1.1534|
0005fe  3614              ADDS     r6,r6,#0x14           ;375
                  |L1.1536|
000600  e9d4012f          LDRD     r0,r1,[r4,#0xbc]      ;374
000604  eb010181          ADD      r1,r1,r1,LSL #2       ;374
000608  eb000081          ADD      r0,r0,r1,LSL #2       ;374
00060c  42b0              CMP      r0,r6                 ;374
00060e  d8d4              BHI      |L1.1466|
000610  bf00              NOP                            ;386
                  |L1.1554|
000612  bf00              NOP                            ;388
                  |L1.1556|
000614  f8d701a8          LDR      r0,[r7,#0x1a8]        ;390
000618  f0400008          ORR      r0,r0,#8              ;390
00061c  f8c701a8          STR      r0,[r7,#0x1a8]        ;390
000620  4638              MOV      r0,r7                 ;393
000622  f7fffffe          BL       png_write_IEND
000626  bf00              NOP      
000628  e758              B        |L1.1244|
;;;400    
                          ENDP

                  png_convert_from_struct_tm PROC
;;;404    void PNGAPI
;;;405    png_convert_from_struct_tm(png_timep ptime, struct tm FAR * ttime)
00062a  8a8a              LDRH     r2,[r1,#0x14]
;;;406    {
;;;407       png_debug(1, "in png_convert_from_struct_tm\n");
;;;408       ptime->year = (png_uint_16)(1900 + ttime->tm_year);
00062c  f202726c          ADD      r2,r2,#0x76c
000630  8002              STRH     r2,[r0,#0]
;;;409       ptime->month = (png_byte)(ttime->tm_mon + 1);
000632  7c0a              LDRB     r2,[r1,#0x10]
000634  1c52              ADDS     r2,r2,#1
000636  7082              STRB     r2,[r0,#2]
;;;410       ptime->day = (png_byte)ttime->tm_mday;
000638  7b0a              LDRB     r2,[r1,#0xc]
00063a  70c2              STRB     r2,[r0,#3]
;;;411       ptime->hour = (png_byte)ttime->tm_hour;
00063c  7a0a              LDRB     r2,[r1,#8]
00063e  7102              STRB     r2,[r0,#4]
;;;412       ptime->minute = (png_byte)ttime->tm_min;
000640  790a              LDRB     r2,[r1,#4]
000642  7142              STRB     r2,[r0,#5]
;;;413       ptime->second = (png_byte)ttime->tm_sec;
000644  780a              LDRB     r2,[r1,#0]
000646  7182              STRB     r2,[r0,#6]
;;;414    }
000648  4770              BX       lr
;;;415    
                          ENDP

                  png_convert_from_time_t PROC
;;;416    void PNGAPI
;;;417    png_convert_from_time_t(png_timep ptime, time_t ttime)
00064a  b573              PUSH     {r0,r1,r4-r6,lr}
;;;418    {
00064c  4604              MOV      r4,r0
;;;419       struct tm *tbuf;
;;;420    
;;;421       png_debug(1, "in png_convert_from_time_t\n");
;;;422       tbuf = gmtime(&ttime);
00064e  a801              ADD      r0,sp,#4
000650  f7fffffe          BL       gmtime
000654  4605              MOV      r5,r0
;;;423       png_convert_from_struct_tm(ptime, tbuf);
000656  4629              MOV      r1,r5
000658  4620              MOV      r0,r4
00065a  f7fffffe          BL       png_convert_from_struct_tm
;;;424    }
00065e  bd7c              POP      {r2-r6,pc}
;;;425    #endif
                          ENDP

                  png_set_filter_heuristics PROC
;;;1231   void PNGAPI
;;;1232   png_set_filter_heuristics(png_structp png_ptr, int heuristic_method,
000660  e92d5fff          PUSH     {r0-r12,lr}
;;;1233      int num_weights, png_doublep filter_weights,
;;;1234      png_doublep filter_costs)
;;;1235   {
000664  4605              MOV      r5,r0
000666  4689              MOV      r9,r1
000668  4616              MOV      r6,r2
00066a  469a              MOV      r10,r3
00066c  f8ddb038          LDR      r11,[sp,#0x38]
;;;1236      int i;
;;;1237   
;;;1238      png_debug(1, "in png_set_filter_heuristics\n");
;;;1239      if (png_ptr == NULL)
000670  b90d              CBNZ     r5,|L1.1654|
                  |L1.1650|
;;;1240         return;
;;;1241      if (heuristic_method >= PNG_FILTER_HEURISTIC_LAST)
;;;1242      {
;;;1243         png_warning(png_ptr, "Unknown filter heuristic method");
;;;1244         return;
;;;1245      }
;;;1246   
;;;1247      if (heuristic_method == PNG_FILTER_HEURISTIC_DEFAULT)
;;;1248      {
;;;1249         heuristic_method = PNG_FILTER_HEURISTIC_UNWEIGHTED;
;;;1250      }
;;;1251   
;;;1252      if (num_weights < 0 || filter_weights == NULL ||
;;;1253         heuristic_method == PNG_FILTER_HEURISTIC_UNWEIGHTED)
;;;1254      {
;;;1255         num_weights = 0;
;;;1256      }
;;;1257   
;;;1258      png_ptr->num_prev_filters = (png_byte)num_weights;
;;;1259      png_ptr->heuristic_method = (png_byte)heuristic_method;
;;;1260   
;;;1261      if (num_weights > 0)
;;;1262      {
;;;1263         if (png_ptr->prev_filters == NULL)
;;;1264         {
;;;1265            png_ptr->prev_filters = (png_bytep)png_malloc(png_ptr,
;;;1266               (png_uint_32)(png_sizeof(png_byte) * num_weights));
;;;1267   
;;;1268            /* To make sure that the weighting starts out fairly */
;;;1269            for (i = 0; i < num_weights; i++)
;;;1270            {
;;;1271               png_ptr->prev_filters[i] = 255;
;;;1272            }
;;;1273         }
;;;1274   
;;;1275         if (png_ptr->filter_weights == NULL)
;;;1276         {
;;;1277            png_ptr->filter_weights = (png_uint_16p)png_malloc(png_ptr,
;;;1278               (png_uint_32)(png_sizeof(png_uint_16) * num_weights));
;;;1279   
;;;1280            png_ptr->inv_filter_weights = (png_uint_16p)png_malloc(png_ptr,
;;;1281               (png_uint_32)(png_sizeof(png_uint_16) * num_weights));
;;;1282            for (i = 0; i < num_weights; i++)
;;;1283            {
;;;1284               png_ptr->inv_filter_weights[i] =
;;;1285               png_ptr->filter_weights[i] = PNG_WEIGHT_FACTOR;
;;;1286            }
;;;1287         }
;;;1288   
;;;1289         for (i = 0; i < num_weights; i++)
;;;1290         {
;;;1291            if (filter_weights[i] < 0.0)
;;;1292            {
;;;1293               png_ptr->inv_filter_weights[i] =
;;;1294               png_ptr->filter_weights[i] = PNG_WEIGHT_FACTOR;
;;;1295            }
;;;1296            else
;;;1297            {
;;;1298               png_ptr->inv_filter_weights[i] =
;;;1299                  (png_uint_16)((double)PNG_WEIGHT_FACTOR*filter_weights[i]+0.5);
;;;1300               png_ptr->filter_weights[i] =
;;;1301                  (png_uint_16)((double)PNG_WEIGHT_FACTOR/filter_weights[i]+0.5);
;;;1302            }
;;;1303         }
;;;1304      }
;;;1305   
;;;1306      /* If, in the future, there are other filter methods, this would
;;;1307       * need to be based on png_ptr->filter.
;;;1308       */
;;;1309      if (png_ptr->filter_costs == NULL)
;;;1310      {
;;;1311         png_ptr->filter_costs = (png_uint_16p)png_malloc(png_ptr,
;;;1312            (png_uint_32)(png_sizeof(png_uint_16) * PNG_FILTER_VALUE_LAST));
;;;1313   
;;;1314         png_ptr->inv_filter_costs = (png_uint_16p)png_malloc(png_ptr,
;;;1315            (png_uint_32)(png_sizeof(png_uint_16) * PNG_FILTER_VALUE_LAST));
;;;1316   
;;;1317         for (i = 0; i < PNG_FILTER_VALUE_LAST; i++)
;;;1318         {
;;;1319            png_ptr->inv_filter_costs[i] =
;;;1320            png_ptr->filter_costs[i] = PNG_COST_FACTOR;
;;;1321         }
;;;1322      }
;;;1323   
;;;1324      /* Here is where we set the relative costs of the different filters.  We
;;;1325       * should take the desired compression level into account when setting
;;;1326       * the costs, so that Paeth, for instance, has a high relative cost at low
;;;1327       * compression levels, while it has a lower relative cost at higher
;;;1328       * compression settings.  The filter types are in order of increasing
;;;1329       * relative cost, so it would be possible to do this with an algorithm.
;;;1330       */
;;;1331      for (i = 0; i < PNG_FILTER_VALUE_LAST; i++)
;;;1332      {
;;;1333         if (filter_costs == NULL || filter_costs[i] < 0.0)
;;;1334         {
;;;1335            png_ptr->inv_filter_costs[i] =
;;;1336            png_ptr->filter_costs[i] = PNG_COST_FACTOR;
;;;1337         }
;;;1338         else if (filter_costs[i] >= 1.0)
;;;1339         {
;;;1340            png_ptr->inv_filter_costs[i] =
;;;1341               (png_uint_16)((double)PNG_COST_FACTOR / filter_costs[i] + 0.5);
;;;1342            png_ptr->filter_costs[i] =
;;;1343               (png_uint_16)((double)PNG_COST_FACTOR * filter_costs[i] + 0.5);
;;;1344         }
;;;1345      }
;;;1346   }
000672  e8bd9fff          POP      {r0-r12,pc}
                  |L1.1654|
000676  f1b90f03          CMP      r9,#3                 ;1241
00067a  db04              BLT      |L1.1670|
00067c  a19e              ADR      r1,|L1.2296|
00067e  4628              MOV      r0,r5                 ;1243
000680  f7fffffe          BL       png_warning
000684  e7f5              B        |L1.1650|
                  |L1.1670|
000686  f1b90f00          CMP      r9,#0                 ;1247
00068a  d101              BNE      |L1.1680|
00068c  f04f0901          MOV      r9,#1                 ;1249
                  |L1.1680|
000690  2e00              CMP      r6,#0                 ;1252
000692  db05              BLT      |L1.1696|
000694  f1ba0f00          CMP      r10,#0                ;1252
000698  d002              BEQ      |L1.1696|
00069a  f1b90f01          CMP      r9,#1                 ;1253
00069e  d100              BNE      |L1.1698|
                  |L1.1696|
0006a0  2600              MOVS     r6,#0                 ;1255
                  |L1.1698|
0006a2  f8856339          STRB     r6,[r5,#0x339]        ;1258
0006a6  f8859338          STRB     r9,[r5,#0x338]        ;1259
0006aa  2e00              CMP      r6,#0                 ;1261
0006ac  dd79              BLE      |L1.1954|
0006ae  f8d5033c          LDR      r0,[r5,#0x33c]        ;1263
0006b2  b970              CBNZ     r0,|L1.1746|
0006b4  4631              MOV      r1,r6                 ;1265
0006b6  4628              MOV      r0,r5                 ;1265
0006b8  f7fffffe          BL       png_malloc
0006bc  f8c5033c          STR      r0,[r5,#0x33c]        ;1265
0006c0  2400              MOVS     r4,#0                 ;1269
0006c2  e004              B        |L1.1742|
                  |L1.1732|
0006c4  20ff              MOVS     r0,#0xff              ;1271
0006c6  f8d5133c          LDR      r1,[r5,#0x33c]        ;1271
0006ca  5508              STRB     r0,[r1,r4]            ;1271
0006cc  1c64              ADDS     r4,r4,#1              ;1269
                  |L1.1742|
0006ce  42b4              CMP      r4,r6                 ;1269
0006d0  dbf8              BLT      |L1.1732|
                  |L1.1746|
0006d2  f8d50340          LDR      r0,[r5,#0x340]        ;1275
0006d6  b9d0              CBNZ     r0,|L1.1806|
0006d8  0071              LSLS     r1,r6,#1              ;1277
0006da  4628              MOV      r0,r5                 ;1277
0006dc  f7fffffe          BL       png_malloc
0006e0  f8c50340          STR      r0,[r5,#0x340]        ;1277
0006e4  0071              LSLS     r1,r6,#1              ;1280
0006e6  4628              MOV      r0,r5                 ;1280
0006e8  f7fffffe          BL       png_malloc
0006ec  f8c50344          STR      r0,[r5,#0x344]        ;1280
0006f0  2400              MOVS     r4,#0                 ;1282
0006f2  e00a              B        |L1.1802|
                  |L1.1780|
0006f4  f44f7080          MOV      r0,#0x100             ;1284
0006f8  f8d51340          LDR      r1,[r5,#0x340]        ;1284
0006fc  f8210014          STRH     r0,[r1,r4,LSL #1]     ;1284
000700  f8d51344          LDR      r1,[r5,#0x344]        ;1284
000704  f8210014          STRH     r0,[r1,r4,LSL #1]     ;1284
000708  1c64              ADDS     r4,r4,#1              ;1282
                  |L1.1802|
00070a  42b4              CMP      r4,r6                 ;1282
00070c  dbf2              BLT      |L1.1780|
                  |L1.1806|
00070e  2400              MOVS     r4,#0                 ;1289
000710  e045              B        |L1.1950|
                  |L1.1810|
000712  eb0a00c4          ADD      r0,r10,r4,LSL #3      ;1291
000716  2200              MOVS     r2,#0                 ;1291
000718  4613              MOV      r3,r2                 ;1291
00071a  e9d07100          LDRD     r7,r1,[r0,#0]         ;1291
00071e  4638              MOV      r0,r7                 ;1291
000720  f7fffffe          BL       __aeabi_cdcmple
000724  d20a              BCS      |L1.1852|
000726  f44f7080          MOV      r0,#0x100             ;1293
00072a  f8d51340          LDR      r1,[r5,#0x340]        ;1293
00072e  f8210014          STRH     r0,[r1,r4,LSL #1]     ;1293
000732  f8d51344          LDR      r1,[r5,#0x344]        ;1293
000736  f8210014          STRH     r0,[r1,r4,LSL #1]     ;1293
00073a  e02f              B        |L1.1948|
                  |L1.1852|
00073c  eb0a01c4          ADD      r1,r10,r4,LSL #3      ;1298
000740  c903              LDM      r1,{r0,r1}            ;1298
000742  4602              MOV      r2,r0                 ;1298
000744  460b              MOV      r3,r1                 ;1298
000746  e9cd0100          STRD     r0,r1,[sp,#0]         ;1298
00074a  2000              MOVS     r0,#0                 ;1298
00074c  4972              LDR      r1,|L1.2328|
00074e  f7fffffe          BL       __aeabi_dmul
000752  2200              MOVS     r2,#0                 ;1298
000754  4b71              LDR      r3,|L1.2332|
000756  e9cd0102          STRD     r0,r1,[sp,#8]         ;1298
00075a  f7fffffe          BL       __aeabi_dadd
00075e  4607              MOV      r7,r0                 ;1298
000760  f7fffffe          BL       __aeabi_d2uiz
000764  f8d51344          LDR      r1,[r5,#0x344]        ;1298
000768  f8210014          STRH     r0,[r1,r4,LSL #1]     ;1298
00076c  eb0a00c4          ADD      r0,r10,r4,LSL #3      ;1300
000770  c803              LDM      r0,{r0,r1}            ;1300
000772  4602              MOV      r2,r0                 ;1300
000774  460b              MOV      r3,r1                 ;1300
000776  e9cd0100          STRD     r0,r1,[sp,#0]         ;1300
00077a  2000              MOVS     r0,#0                 ;1300
00077c  4966              LDR      r1,|L1.2328|
00077e  f7fffffe          BL       __aeabi_ddiv
000782  2200              MOVS     r2,#0                 ;1300
000784  4b65              LDR      r3,|L1.2332|
000786  e9cd0102          STRD     r0,r1,[sp,#8]         ;1300
00078a  f7fffffe          BL       __aeabi_dadd
00078e  4607              MOV      r7,r0                 ;1300
000790  f7fffffe          BL       __aeabi_d2uiz
000794  f8d51340          LDR      r1,[r5,#0x340]        ;1300
000798  f8210014          STRH     r0,[r1,r4,LSL #1]     ;1300
                  |L1.1948|
00079c  1c64              ADDS     r4,r4,#1              ;1289
                  |L1.1950|
00079e  42b4              CMP      r4,r6                 ;1289
0007a0  dbb7              BLT      |L1.1810|
                  |L1.1954|
0007a2  f8d50348          LDR      r0,[r5,#0x348]        ;1309
0007a6  b9c8              CBNZ     r0,|L1.2012|
0007a8  210a              MOVS     r1,#0xa               ;1311
0007aa  4628              MOV      r0,r5                 ;1311
0007ac  f7fffffe          BL       png_malloc
0007b0  f8c50348          STR      r0,[r5,#0x348]        ;1311
0007b4  210a              MOVS     r1,#0xa               ;1314
0007b6  4628              MOV      r0,r5                 ;1314
0007b8  f7fffffe          BL       png_malloc
0007bc  f8c5034c          STR      r0,[r5,#0x34c]        ;1314
0007c0  2400              MOVS     r4,#0                 ;1317
0007c2  e009              B        |L1.2008|
                  |L1.1988|
0007c4  2008              MOVS     r0,#8                 ;1319
0007c6  f8d51348          LDR      r1,[r5,#0x348]        ;1319
0007ca  f8210014          STRH     r0,[r1,r4,LSL #1]     ;1319
0007ce  f8d5134c          LDR      r1,[r5,#0x34c]        ;1319
0007d2  f8210014          STRH     r0,[r1,r4,LSL #1]     ;1319
0007d6  1c64              ADDS     r4,r4,#1              ;1317
                  |L1.2008|
0007d8  2c05              CMP      r4,#5                 ;1317
0007da  dbf3              BLT      |L1.1988|
                  |L1.2012|
0007dc  2400              MOVS     r4,#0                 ;1331
0007de  e050              B        |L1.2178|
                  |L1.2016|
0007e0  f1bb0f00          CMP      r11,#0                ;1333
0007e4  d009              BEQ      |L1.2042|
0007e6  eb0b00c4          ADD      r0,r11,r4,LSL #3      ;1333
0007ea  2200              MOVS     r2,#0                 ;1333
0007ec  4613              MOV      r3,r2                 ;1333
0007ee  e9d07100          LDRD     r7,r1,[r0,#0]         ;1333
0007f2  4638              MOV      r0,r7                 ;1333
0007f4  f7fffffe          BL       __aeabi_cdcmple
0007f8  d209              BCS      |L1.2062|
                  |L1.2042|
0007fa  2008              MOVS     r0,#8                 ;1335
0007fc  f8d51348          LDR      r1,[r5,#0x348]        ;1335
000800  f8210014          STRH     r0,[r1,r4,LSL #1]     ;1335
000804  f8d5134c          LDR      r1,[r5,#0x34c]        ;1335
000808  f8210014          STRH     r0,[r1,r4,LSL #1]     ;1335
00080c  e038              B        |L1.2176|
                  |L1.2062|
00080e  eb0b00c4          ADD      r0,r11,r4,LSL #3      ;1338
000812  2200              MOVS     r2,#0                 ;1338
000814  4b42              LDR      r3,|L1.2336|
000816  e9d07100          LDRD     r7,r1,[r0,#0]         ;1338
00081a  4638              MOV      r0,r7                 ;1338
00081c  f7fffffe          BL       __aeabi_cdrcmple
000820  d82e              BHI      |L1.2176|
000822  eb0b00c4          ADD      r0,r11,r4,LSL #3      ;1340
000826  c803              LDM      r0,{r0,r1}            ;1340
000828  4602              MOV      r2,r0                 ;1340
00082a  460b              MOV      r3,r1                 ;1340
00082c  e9cd0100          STRD     r0,r1,[sp,#0]         ;1340
000830  2000              MOVS     r0,#0                 ;1340
000832  493c              LDR      r1,|L1.2340|
000834  f7fffffe          BL       __aeabi_ddiv
000838  4607              MOV      r7,r0                 ;1340
00083a  2200              MOVS     r2,#0                 ;1340
00083c  4b37              LDR      r3,|L1.2332|
00083e  f7fffffe          BL       __aeabi_dadd
000842  e9cd0102          STRD     r0,r1,[sp,#8]         ;1340
000846  f7fffffe          BL       __aeabi_d2uiz
00084a  f8d5134c          LDR      r1,[r5,#0x34c]        ;1340
00084e  f8210014          STRH     r0,[r1,r4,LSL #1]     ;1340
000852  eb0b00c4          ADD      r0,r11,r4,LSL #3      ;1342
000856  e9d07300          LDRD     r7,r3,[r0,#0]         ;1342
00085a  463a              MOV      r2,r7                 ;1342
00085c  2000              MOVS     r0,#0                 ;1342
00085e  4931              LDR      r1,|L1.2340|
000860  f7fffffe          BL       __aeabi_dmul
000864  2200              MOVS     r2,#0                 ;1342
000866  4b2d              LDR      r3,|L1.2332|
000868  e9cd0100          STRD     r0,r1,[sp,#0]         ;1342
00086c  f7fffffe          BL       __aeabi_dadd
000870  e9cd0102          STRD     r0,r1,[sp,#8]         ;1342
000874  f7fffffe          BL       __aeabi_d2uiz
000878  f8d51348          LDR      r1,[r5,#0x348]        ;1342
00087c  f8210014          STRH     r0,[r1,r4,LSL #1]     ;1342
                  |L1.2176|
000880  1c64              ADDS     r4,r4,#1              ;1331
                  |L1.2178|
000882  2c05              CMP      r4,#5                 ;1331
000884  dbac              BLT      |L1.2016|
000886  bf00              NOP      
000888  e6f3              B        |L1.1650|
;;;1347   #endif /* PNG_WRITE_WEIGHTED_FILTER_SUPPORTED */
                          ENDP

                  png_create_write_struct_2 PROC
;;;439    png_structp PNGAPI
;;;440    png_create_write_struct_2(png_const_charp user_png_ver, png_voidp error_ptr,
00088a  e92d4ff8          PUSH     {r3-r11,lr}
;;;441       png_error_ptr error_fn, png_error_ptr warn_fn, png_voidp mem_ptr,
;;;442       png_malloc_ptr malloc_fn, png_free_ptr free_fn)
;;;443    {
00088e  4605              MOV      r5,r0
000890  4689              MOV      r9,r1
000892  4692              MOV      r10,r2
000894  469b              MOV      r11,r3
000896  e9dd780a          LDRD     r7,r8,[sp,#0x28]
;;;444    #endif /* PNG_USER_MEM_SUPPORTED */
;;;445       png_structp png_ptr;
;;;446    #ifdef PNG_SETJMP_SUPPORTED
;;;447    #ifdef USE_FAR_KEYWORD
;;;448       jmp_buf jmpbuf;
;;;449    #endif
;;;450    #endif
;;;451       int i;
;;;452       png_debug(1, "in png_create_write_struct\n");
;;;453    #ifdef PNG_USER_MEM_SUPPORTED
;;;454       png_ptr = (png_structp)png_create_struct_2(PNG_STRUCT_PNG,
00089a  463a              MOV      r2,r7
00089c  4641              MOV      r1,r8
00089e  2001              MOVS     r0,#1
0008a0  f7fffffe          BL       png_create_struct_2
0008a4  4604              MOV      r4,r0
;;;455          (png_malloc_ptr)malloc_fn, (png_voidp)mem_ptr);
;;;456    #else
;;;457       png_ptr = (png_structp)png_create_struct(PNG_STRUCT_PNG);
;;;458    #endif /* PNG_USER_MEM_SUPPORTED */
;;;459       if (png_ptr == NULL)
0008a6  b914              CBNZ     r4,|L1.2222|
;;;460          return (NULL);
0008a8  2000              MOVS     r0,#0
                  |L1.2218|
;;;461    
;;;462    #if !defined(PNG_1_0_X)
;;;463    #ifdef PNG_ASSEMBLER_CODE_SUPPORTED
;;;464    #ifdef PNG_MMX_CODE_SUPPORTED
;;;465       png_init_mmx_flags(png_ptr);   /* 1.2.0 addition */
;;;466    #endif
;;;467    #endif
;;;468    #endif /* PNG_1_0_X */
;;;469    
;;;470       /* added at libpng-1.2.6 */
;;;471    #ifdef PNG_SET_USER_LIMITS_SUPPORTED
;;;472       png_ptr->user_width_max=PNG_USER_WIDTH_MAX;
;;;473       png_ptr->user_height_max=PNG_USER_HEIGHT_MAX;
;;;474    #endif
;;;475    
;;;476    #ifdef PNG_SETJMP_SUPPORTED
;;;477    #ifdef USE_FAR_KEYWORD
;;;478       if (setjmp(jmpbuf))
;;;479    #else
;;;480       if (setjmp(png_ptr->jmpbuf))
;;;481    #endif
;;;482       {
;;;483          png_free(png_ptr, png_ptr->zbuf);
;;;484          png_ptr->zbuf=NULL;
;;;485          png_destroy_struct(png_ptr);
;;;486          return (NULL);
;;;487       }
;;;488    #ifdef USE_FAR_KEYWORD
;;;489       png_memcpy(png_ptr->jmpbuf,jmpbuf,png_sizeof(jmp_buf));
;;;490    #endif
;;;491    #endif
;;;492    
;;;493    #ifdef PNG_USER_MEM_SUPPORTED
;;;494       png_set_mem_fn(png_ptr, mem_ptr, malloc_fn, free_fn);
;;;495    #endif /* PNG_USER_MEM_SUPPORTED */
;;;496       png_set_error_fn(png_ptr, error_ptr, error_fn, warn_fn);
;;;497    
;;;498       i=0;
;;;499       do
;;;500       {
;;;501         if(user_png_ver[i] != png_libpng_ver[i])
;;;502            png_ptr->flags |= PNG_FLAG_LIBRARY_MISMATCH;
;;;503       } while (png_libpng_ver[i++]);
;;;504    
;;;505       if (png_ptr->flags & PNG_FLAG_LIBRARY_MISMATCH)
;;;506       {
;;;507         /* Libpng 0.90 and later are binary incompatible with libpng 0.89, so
;;;508          * we must recompile any applications that use any older library version.
;;;509          * For versions after libpng 1.0, we will be compatible, so we need
;;;510          * only check the first digit.
;;;511          */
;;;512         if (user_png_ver == NULL || user_png_ver[0] != png_libpng_ver[0] ||
;;;513             (user_png_ver[0] == '1' && user_png_ver[2] != png_libpng_ver[2]) ||
;;;514             (user_png_ver[0] == '0' && user_png_ver[2] < '9'))
;;;515         {
;;;516    #if !defined(PNG_NO_STDIO) && !defined(_WIN32_WCE)
;;;517            char msg[80];
;;;518            if (user_png_ver)
;;;519            {
;;;520              sprintf(msg, "Application was compiled with png.h from libpng-%.20s",
;;;521                 user_png_ver);
;;;522              png_warning(png_ptr, msg);
;;;523            }
;;;524            sprintf(msg, "Application  is  running with png.c from libpng-%.20s",
;;;525               png_libpng_ver);
;;;526            png_warning(png_ptr, msg);
;;;527    #endif
;;;528    #ifdef PNG_ERROR_NUMBERS_SUPPORTED
;;;529            png_ptr->flags=0;
;;;530    #endif
;;;531            png_error(png_ptr,
;;;532               "Incompatible libpng version in application and library");
;;;533         }
;;;534       }
;;;535    
;;;536       /* initialize zbuf - compression buffer */
;;;537       png_ptr->zbuf_size = PNG_ZBUF_SIZE;
;;;538       png_ptr->zbuf = (png_bytep)png_malloc(png_ptr,
;;;539          (png_uint_32)png_ptr->zbuf_size);
;;;540    
;;;541       png_set_write_fn(png_ptr, png_voidp_NULL, png_rw_ptr_NULL,
;;;542          png_flush_ptr_NULL);
;;;543    
;;;544    #if defined(PNG_WRITE_WEIGHTED_FILTER_SUPPORTED)
;;;545       png_set_filter_heuristics(png_ptr, PNG_FILTER_HEURISTIC_DEFAULT,
;;;546          1, png_doublep_NULL, png_doublep_NULL);
;;;547    #endif
;;;548    
;;;549    #ifdef PNG_SETJMP_SUPPORTED
;;;550    /* Applications that neglect to set up their own setjmp() and then encounter
;;;551       a png_error() will longjmp here.  Since the jmpbuf is then meaningless we
;;;552       abort instead of returning. */
;;;553    #ifdef USE_FAR_KEYWORD
;;;554       if (setjmp(jmpbuf))
;;;555          PNG_ABORT();
;;;556       png_memcpy(png_ptr->jmpbuf,jmpbuf,png_sizeof(jmp_buf));
;;;557    #else
;;;558       if (setjmp(png_ptr->jmpbuf))
;;;559          PNG_ABORT();
;;;560    #endif
;;;561    #endif
;;;562       return (png_ptr);
;;;563    }
0008aa  e8bd8ff8          POP      {r3-r11,pc}
                  |L1.2222|
0008ae  481e              LDR      r0,|L1.2344|
0008b0  f8c4039c          STR      r0,[r4,#0x39c]        ;472
0008b4  f8c403a0          STR      r0,[r4,#0x3a0]        ;473
0008b8  4620              MOV      r0,r4                 ;480
0008ba  f7fffffe          BL       setjmp
0008be  b160              CBZ      r0,|L1.2266|
0008c0  4620              MOV      r0,r4                 ;483
0008c2  f8d411ec          LDR      r1,[r4,#0x1ec]        ;483
0008c6  f7fffffe          BL       png_free
0008ca  2000              MOVS     r0,#0                 ;484
0008cc  f8c401ec          STR      r0,[r4,#0x1ec]        ;484
0008d0  4620              MOV      r0,r4                 ;485
0008d2  f7fffffe          BL       png_destroy_struct
0008d6  2000              MOVS     r0,#0                 ;486
0008d8  e7e7              B        |L1.2218|
                  |L1.2266|
0008da  e027              B        |L1.2348|
                  |L1.2268|
0008dc  4e6f2049          DCB      "No IDATs written into file",0
0008e0  44415473
0008e4  20777269
0008e8  7474656e
0008ec  20696e74
0008f0  6f206669
0008f4  6c6500  
0008f7  00                DCB      0
                  |L1.2296|
0008f8  556e6b6e          DCB      "Unknown filter heuristic method",0
0008fc  6f776e20
000900  66696c74
000904  65722068
000908  65757269
00090c  73746963
000910  206d6574
000914  686f6400
                  |L1.2328|
                          DCD      0x40700000
                  |L1.2332|
                          DCD      0x3fe00000
                  |L1.2336|
                          DCD      0x3ff00000
                  |L1.2340|
                          DCD      0x40200000
                  |L1.2344|
                          DCD      0x000f4240
                  |L1.2348|
00092c  4642              MOV      r2,r8                 ;494
00092e  4639              MOV      r1,r7                 ;494
000930  4620              MOV      r0,r4                 ;494
000932  9b0c              LDR      r3,[sp,#0x30]         ;494
000934  f7fffffe          BL       png_set_mem_fn
000938  465b              MOV      r3,r11                ;496
00093a  4652              MOV      r2,r10                ;496
00093c  4649              MOV      r1,r9                 ;496
00093e  4620              MOV      r0,r4                 ;496
000940  f7fffffe          BL       png_set_error_fn
000944  2600              MOVS     r6,#0                 ;498
000946  bf00              NOP                            ;499
                  |L1.2376|
000948  5da8              LDRB     r0,[r5,r6]            ;501
00094a  49f7              LDR      r1,|L1.3368|
00094c  5d89              LDRB     r1,[r1,r6]            ;501
00094e  4288              CMP      r0,r1                 ;501
000950  d005              BEQ      |L1.2398|
000952  f8d401ac          LDR      r0,[r4,#0x1ac]        ;502
000956  f4403000          ORR      r0,r0,#0x20000        ;502
00095a  f8c401ac          STR      r0,[r4,#0x1ac]        ;502
                  |L1.2398|
00095e  4630              MOV      r0,r6                 ;503
000960  1c76              ADDS     r6,r6,#1              ;503
000962  49f1              LDR      r1,|L1.3368|
000964  5c08              LDRB     r0,[r1,r0]            ;503
000966  2800              CMP      r0,#0                 ;503
000968  d1ee              BNE      |L1.2376|
00096a  f8d401ac          LDR      r0,[r4,#0x1ac]        ;505
00096e  f4003000          AND      r0,r0,#0x20000        ;505
000972  b1c8              CBZ      r0,|L1.2472|
000974  b18d              CBZ      r5,|L1.2458|
000976  7828              LDRB     r0,[r5,#0]            ;512
000978  7809              LDRB     r1,[r1,#0]            ;512  ; png_libpng_ver
00097a  4288              CMP      r0,r1                 ;512
00097c  d10d              BNE      |L1.2458|
00097e  7828              LDRB     r0,[r5,#0]            ;513
000980  2831              CMP      r0,#0x31              ;513
000982  d104              BNE      |L1.2446|
000984  78a8              LDRB     r0,[r5,#2]            ;513
000986  49e8              LDR      r1,|L1.3368|
000988  7889              LDRB     r1,[r1,#2]            ;513  ; png_libpng_ver
00098a  4288              CMP      r0,r1                 ;513
00098c  d105              BNE      |L1.2458|
                  |L1.2446|
00098e  7828              LDRB     r0,[r5,#0]            ;514
000990  2830              CMP      r0,#0x30              ;514
000992  d109              BNE      |L1.2472|
000994  78a8              LDRB     r0,[r5,#2]            ;514
000996  2839              CMP      r0,#0x39              ;514
000998  da06              BGE      |L1.2472|
                  |L1.2458|
00099a  2000              MOVS     r0,#0                 ;529
00099c  f8c401ac          STR      r0,[r4,#0x1ac]        ;529
0009a0  a1e2              ADR      r1,|L1.3372|
0009a2  4620              MOV      r0,r4                 ;531
0009a4  f7fffffe          BL       png_error
                  |L1.2472|
0009a8  f44f5000          MOV      r0,#0x2000            ;537
0009ac  f8c401f0          STR      r0,[r4,#0x1f0]        ;537
0009b0  4620              MOV      r0,r4                 ;538
0009b2  f8d411f0          LDR      r1,[r4,#0x1f0]        ;538
0009b6  f7fffffe          BL       png_malloc
0009ba  f8c401ec          STR      r0,[r4,#0x1ec]        ;538
0009be  2300              MOVS     r3,#0                 ;541
0009c0  461a              MOV      r2,r3                 ;541
0009c2  4619              MOV      r1,r3                 ;541
0009c4  4620              MOV      r0,r4                 ;541
0009c6  f7fffffe          BL       png_set_write_fn
0009ca  2000              MOVS     r0,#0                 ;545
0009cc  4603              MOV      r3,r0                 ;545
0009ce  2201              MOVS     r2,#1                 ;545
0009d0  4601              MOV      r1,r0                 ;545
0009d2  9000              STR      r0,[sp,#0]            ;545
0009d4  4620              MOV      r0,r4                 ;545
0009d6  f7fffffe          BL       png_set_filter_heuristics
0009da  4620              MOV      r0,r4                 ;558
0009dc  f7fffffe          BL       setjmp
0009e0  b108              CBZ      r0,|L1.2534|
0009e2  f7fffffe          BL       abort
                  |L1.2534|
0009e6  4620              MOV      r0,r4                 ;562
0009e8  e75f              B        |L1.2218|
;;;564    
                          ENDP

                  png_create_write_struct PROC
;;;429    png_structp PNGAPI
;;;430    png_create_write_struct(png_const_charp user_png_ver, png_voidp error_ptr,
0009ea  b5fe              PUSH     {r1-r7,lr}
;;;431       png_error_ptr error_fn, png_error_ptr warn_fn)
;;;432    {
0009ec  4604              MOV      r4,r0
0009ee  460d              MOV      r5,r1
0009f0  4616              MOV      r6,r2
0009f2  461f              MOV      r7,r3
;;;433    #ifdef PNG_USER_MEM_SUPPORTED
;;;434       return (png_create_write_struct_2(user_png_ver, error_ptr, error_fn,
0009f4  2000              MOVS     r0,#0
0009f6  9000              STR      r0,[sp,#0]
0009f8  9001              STR      r0,[sp,#4]
0009fa  463b              MOV      r3,r7
0009fc  4632              MOV      r2,r6
0009fe  4629              MOV      r1,r5
000a00  9002              STR      r0,[sp,#8]
000a02  4620              MOV      r0,r4
000a04  f7fffffe          BL       png_create_write_struct_2
;;;435          warn_fn, png_voidp_NULL, png_malloc_ptr_NULL, png_free_ptr_NULL));
;;;436    }
000a08  bdfe              POP      {r1-r7,pc}
;;;437    
                          ENDP

                  png_write_init_3 PROC
;;;622    void PNGAPI
;;;623    png_write_init_3(png_structpp ptr_ptr, png_const_charp user_png_ver,
000a0a  e92d41f0          PUSH     {r4-r8,lr}
;;;624       png_size_t png_struct_size)
;;;625    {
000a0e  b0e2              SUB      sp,sp,#0x188
000a10  4605              MOV      r5,r0
000a12  460f              MOV      r7,r1
000a14  4690              MOV      r8,r2
;;;626       png_structp png_ptr=*ptr_ptr;
000a16  682c              LDR      r4,[r5,#0]
;;;627    #ifdef PNG_SETJMP_SUPPORTED
;;;628       jmp_buf tmp_jmp; /* to save current jump buffer */
;;;629    #endif
;;;630    
;;;631       int i = 0;
000a18  2600              MOVS     r6,#0
;;;632    
;;;633       if (png_ptr == NULL)
000a1a  b914              CBNZ     r4,|L1.2594|
                  |L1.2588|
;;;634          return;
;;;635    
;;;636       do
;;;637       {
;;;638         if (user_png_ver[i] != png_libpng_ver[i])
;;;639         {
;;;640    #ifdef PNG_LEGACY_SUPPORTED
;;;641           png_ptr->flags |= PNG_FLAG_LIBRARY_MISMATCH;
;;;642    #else
;;;643           png_ptr->warning_fn=NULL;
;;;644           png_warning(png_ptr,
;;;645         "Application uses deprecated png_write_init() and should be recompiled.");
;;;646           break;
;;;647    #endif
;;;648         }
;;;649       } while (png_libpng_ver[i++]);
;;;650    
;;;651       png_debug(1, "in png_write_init_3\n");
;;;652    
;;;653    #ifdef PNG_SETJMP_SUPPORTED
;;;654       /* save jump buffer and error functions */
;;;655       png_memcpy(tmp_jmp, png_ptr->jmpbuf, png_sizeof (jmp_buf));
;;;656    #endif
;;;657    
;;;658       if (png_sizeof(png_struct) > png_struct_size)
;;;659         {
;;;660           png_destroy_struct(png_ptr);
;;;661           png_ptr = (png_structp)png_create_struct(PNG_STRUCT_PNG);
;;;662           *ptr_ptr = png_ptr;
;;;663         }
;;;664    
;;;665       /* reset all variables to 0 */
;;;666       png_memset(png_ptr, 0, png_sizeof (png_struct));
;;;667    
;;;668       /* added at libpng-1.2.6 */
;;;669    #ifdef PNG_SET_USER_LIMITS_SUPPORTED
;;;670       png_ptr->user_width_max=PNG_USER_WIDTH_MAX;
;;;671       png_ptr->user_height_max=PNG_USER_HEIGHT_MAX;
;;;672    #endif
;;;673    
;;;674    #if !defined(PNG_1_0_X)
;;;675    #ifdef PNG_ASSEMBLER_CODE_SUPPORTED
;;;676    #ifdef PNG_MMX_CODE_SUPPORTED
;;;677       png_init_mmx_flags(png_ptr);   /* 1.2.0 addition */
;;;678    #endif
;;;679    #endif
;;;680    #endif /* PNG_1_0_X */
;;;681    
;;;682    #ifdef PNG_SETJMP_SUPPORTED
;;;683       /* restore jump buffer */
;;;684       png_memcpy(png_ptr->jmpbuf, tmp_jmp, png_sizeof (jmp_buf));
;;;685    #endif
;;;686    
;;;687       png_set_write_fn(png_ptr, png_voidp_NULL, png_rw_ptr_NULL,
;;;688          png_flush_ptr_NULL);
;;;689    
;;;690       /* initialize zbuf - compression buffer */
;;;691       png_ptr->zbuf_size = PNG_ZBUF_SIZE;
;;;692       png_ptr->zbuf = (png_bytep)png_malloc(png_ptr,
;;;693          (png_uint_32)png_ptr->zbuf_size);
;;;694    
;;;695    #if defined(PNG_WRITE_WEIGHTED_FILTER_SUPPORTED)
;;;696       png_set_filter_heuristics(png_ptr, PNG_FILTER_HEURISTIC_DEFAULT,
;;;697          1, png_doublep_NULL, png_doublep_NULL);
;;;698    #endif
;;;699    }
000a1c  b062              ADD      sp,sp,#0x188
000a1e  e8bd81f0          POP      {r4-r8,pc}
                  |L1.2594|
000a22  bf00              NOP                            ;636
                  |L1.2596|
000a24  5db8              LDRB     r0,[r7,r6]            ;638
000a26  49c0              LDR      r1,|L1.3368|
000a28  5d89              LDRB     r1,[r1,r6]            ;638
000a2a  4288              CMP      r0,r1                 ;638
000a2c  d007              BEQ      |L1.2622|
000a2e  2000              MOVS     r0,#0                 ;643
000a30  f8c40184          STR      r0,[r4,#0x184]        ;643
000a34  49cb              LDR      r1,|L1.3428|
000a36  4620              MOV      r0,r4                 ;644
000a38  f7fffffe          BL       png_warning
000a3c  e005              B        |L1.2634|
                  |L1.2622|
000a3e  4630              MOV      r0,r6                 ;649
000a40  1c76              ADDS     r6,r6,#1              ;649
000a42  49b9              LDR      r1,|L1.3368|
000a44  5c08              LDRB     r0,[r1,r0]            ;649
000a46  2800              CMP      r0,#0                 ;649
000a48  d1ec              BNE      |L1.2596|
                  |L1.2634|
000a4a  bf00              NOP                            ;646
000a4c  f44f72c0          MOV      r2,#0x180             ;655
000a50  4621              MOV      r1,r4                 ;655
000a52  a802              ADD      r0,sp,#8              ;655
000a54  f7fffffe          BL       __aeabi_memcpy4
000a58  f5b87f6a          CMP      r8,#0x3a8             ;658
000a5c  d207              BCS      |L1.2670|
000a5e  4620              MOV      r0,r4                 ;660
000a60  f7fffffe          BL       png_destroy_struct
000a64  2001              MOVS     r0,#1                 ;661
000a66  f7fffffe          BL       png_create_struct
000a6a  4604              MOV      r4,r0                 ;661
000a6c  602c              STR      r4,[r5,#0]            ;662
                  |L1.2670|
000a6e  f44f716a          MOV      r1,#0x3a8             ;666
000a72  4620              MOV      r0,r4                 ;666
000a74  f7fffffe          BL       __aeabi_memclr4
000a78  48bb              LDR      r0,|L1.3432|
000a7a  f8c4039c          STR      r0,[r4,#0x39c]        ;670
000a7e  f8c403a0          STR      r0,[r4,#0x3a0]        ;671
000a82  f44f72c0          MOV      r2,#0x180             ;684
000a86  a902              ADD      r1,sp,#8              ;684
000a88  4620              MOV      r0,r4                 ;684
000a8a  f7fffffe          BL       __aeabi_memcpy4
000a8e  2300              MOVS     r3,#0                 ;687
000a90  461a              MOV      r2,r3                 ;687
000a92  4619              MOV      r1,r3                 ;687
000a94  4620              MOV      r0,r4                 ;687
000a96  f7fffffe          BL       png_set_write_fn
000a9a  f44f5000          MOV      r0,#0x2000            ;691
000a9e  f8c401f0          STR      r0,[r4,#0x1f0]        ;691
000aa2  4620              MOV      r0,r4                 ;692
000aa4  f8d411f0          LDR      r1,[r4,#0x1f0]        ;692
000aa8  f7fffffe          BL       png_malloc
000aac  f8c401ec          STR      r0,[r4,#0x1ec]        ;692
000ab0  2000              MOVS     r0,#0                 ;696
000ab2  4603              MOV      r3,r0                 ;696
000ab4  2201              MOVS     r2,#1                 ;696
000ab6  4601              MOV      r1,r0                 ;696
000ab8  9000              STR      r0,[sp,#0]            ;696
000aba  4620              MOV      r0,r4                 ;696
000abc  f7fffffe          BL       png_set_filter_heuristics
000ac0  bf00              NOP      
000ac2  e7ab              B        |L1.2588|
;;;700    
                          ENDP

                  png_write_init_2 PROC
;;;576    void PNGAPI
;;;577    png_write_init_2(png_structp png_ptr, png_const_charp user_png_ver,
000ac4  b57f              PUSH     {r0-r6,lr}
;;;578       png_size_t png_struct_size, png_size_t png_info_size)
;;;579    {
000ac6  460e              MOV      r6,r1
000ac8  4614              MOV      r4,r2
000aca  461d              MOV      r5,r3
;;;580       /* We only come here via pre-1.0.12-compiled applications */
;;;581       if(png_ptr == NULL) return;
000acc  9800              LDR      r0,[sp,#0]
000ace  b900              CBNZ     r0,|L1.2770|
                  |L1.2768|
;;;582    #if !defined(PNG_NO_STDIO) && !defined(_WIN32_WCE)
;;;583       if(png_sizeof(png_struct) > png_struct_size ||
;;;584          png_sizeof(png_info) > png_info_size)
;;;585       {
;;;586          char msg[80];
;;;587          png_ptr->warning_fn=NULL;
;;;588          if (user_png_ver)
;;;589          {
;;;590            sprintf(msg, "Application was compiled with png.h from libpng-%.20s",
;;;591               user_png_ver);
;;;592            png_warning(png_ptr, msg);
;;;593          }
;;;594          sprintf(msg, "Application  is  running with png.c from libpng-%.20s",
;;;595             png_libpng_ver);
;;;596          png_warning(png_ptr, msg);
;;;597       }
;;;598    #endif
;;;599       if(png_sizeof(png_struct) > png_struct_size)
;;;600         {
;;;601           png_ptr->error_fn=NULL;
;;;602    #ifdef PNG_ERROR_NUMBERS_SUPPORTED
;;;603           png_ptr->flags=0;
;;;604    #endif
;;;605           png_error(png_ptr,
;;;606           "The png struct allocated by the application for writing is too small.");
;;;607         }
;;;608       if(png_sizeof(png_info) > png_info_size)
;;;609         {
;;;610           png_ptr->error_fn=NULL;
;;;611    #ifdef PNG_ERROR_NUMBERS_SUPPORTED
;;;612           png_ptr->flags=0;
;;;613    #endif
;;;614           png_error(png_ptr,
;;;615           "The info struct allocated by the application for writing is too small.");
;;;616         }
;;;617       png_write_init_3(&png_ptr, user_png_ver, png_struct_size);
;;;618    }
000ad0  bd7f              POP      {r0-r6,pc}
                  |L1.2770|
000ad2  f5b47f6a          CMP      r4,#0x3a8             ;599
000ad6  d20a              BCS      |L1.2798|
000ad8  2000              MOVS     r0,#0                 ;601
000ada  9900              LDR      r1,[sp,#0]            ;601
000adc  f8c10180          STR      r0,[r1,#0x180]        ;601
000ae0  9900              LDR      r1,[sp,#0]            ;603
000ae2  f8c101ac          STR      r0,[r1,#0x1ac]        ;603
000ae6  49a1              LDR      r1,|L1.3436|
000ae8  9800              LDR      r0,[sp,#0]            ;605
000aea  f7fffffe          BL       png_error
                  |L1.2798|
000aee  f5b57f90          CMP      r5,#0x120             ;608
000af2  d20a              BCS      |L1.2826|
000af4  2000              MOVS     r0,#0                 ;610
000af6  9900              LDR      r1,[sp,#0]            ;610
000af8  f8c10180          STR      r0,[r1,#0x180]        ;610
000afc  9900              LDR      r1,[sp,#0]            ;612
000afe  f8c101ac          STR      r0,[r1,#0x1ac]        ;612
000b02  499b              LDR      r1,|L1.3440|
000b04  9800              LDR      r0,[sp,#0]            ;614
000b06  f7fffffe          BL       png_error
                  |L1.2826|
000b0a  4622              MOV      r2,r4                 ;617
000b0c  4631              MOV      r1,r6                 ;617
000b0e  4668              MOV      r0,sp                 ;617
000b10  f7fffffe          BL       png_write_init_3
000b14  bf00              NOP      
000b16  e7db              B        |L1.2768|
;;;619    #endif /* PNG_1_0_X || PNG_1_2_X */
                          ENDP

                  png_write_init PROC
;;;569    void PNGAPI
;;;570    png_write_init(png_structp png_ptr)
000b18  b510              PUSH     {r4,lr}
;;;571    {
000b1a  4604              MOV      r4,r0
;;;572       /* We only come here via pre-1.0.7-compiled applications */
;;;573       png_write_init_2(png_ptr, "1.0.6 or earlier", 0, 0);
000b1c  2300              MOVS     r3,#0
000b1e  461a              MOV      r2,r3
000b20  a194              ADR      r1,|L1.3444|
000b22  4620              MOV      r0,r4
000b24  f7fffffe          BL       png_write_init_2
;;;574    }
000b28  bd10              POP      {r4,pc}
;;;575    
                          ENDP

                  png_write_row PROC
;;;758    void PNGAPI
;;;759    png_write_row(png_structp png_ptr, png_bytep row)
000b2a  b570              PUSH     {r4-r6,lr}
;;;760    {
000b2c  4604              MOV      r4,r0
000b2e  460d              MOV      r5,r1
;;;761       if (png_ptr == NULL)
000b30  b904              CBNZ     r4,|L1.2868|
                  |L1.2866|
;;;762          return;
;;;763       png_debug2(1, "in png_write_row (row %ld, pass %d)\n",
;;;764          png_ptr->row_number, png_ptr->pass);
;;;765    
;;;766       /* initialize transformations and other stuff if first time */
;;;767       if (png_ptr->row_number == 0 && png_ptr->pass == 0)
;;;768       {
;;;769       /* make sure we wrote the header info */
;;;770       if (!(png_ptr->mode & PNG_WROTE_INFO_BEFORE_PLTE))
;;;771          png_error(png_ptr,
;;;772             "png_write_info was never called before png_write_row.");
;;;773    
;;;774       /* check for transforms that have been set but were defined out */
;;;775    #if !defined(PNG_WRITE_INVERT_SUPPORTED) && defined(PNG_READ_INVERT_SUPPORTED)
;;;776       if (png_ptr->transformations & PNG_INVERT_MONO)
;;;777          png_warning(png_ptr, "PNG_WRITE_INVERT_SUPPORTED is not defined.");
;;;778    #endif
;;;779    #if !defined(PNG_WRITE_FILLER_SUPPORTED) && defined(PNG_READ_FILLER_SUPPORTED)
;;;780       if (png_ptr->transformations & PNG_FILLER)
;;;781          png_warning(png_ptr, "PNG_WRITE_FILLER_SUPPORTED is not defined.");
;;;782    #endif
;;;783    #if !defined(PNG_WRITE_PACKSWAP_SUPPORTED) && defined(PNG_READ_PACKSWAP_SUPPORTED)
;;;784       if (png_ptr->transformations & PNG_PACKSWAP)
;;;785          png_warning(png_ptr, "PNG_WRITE_PACKSWAP_SUPPORTED is not defined.");
;;;786    #endif
;;;787    #if !defined(PNG_WRITE_PACK_SUPPORTED) && defined(PNG_READ_PACK_SUPPORTED)
;;;788       if (png_ptr->transformations & PNG_PACK)
;;;789          png_warning(png_ptr, "PNG_WRITE_PACK_SUPPORTED is not defined.");
;;;790    #endif
;;;791    #if !defined(PNG_WRITE_SHIFT_SUPPORTED) && defined(PNG_READ_SHIFT_SUPPORTED)
;;;792       if (png_ptr->transformations & PNG_SHIFT)
;;;793          png_warning(png_ptr, "PNG_WRITE_SHIFT_SUPPORTED is not defined.");
;;;794    #endif
;;;795    #if !defined(PNG_WRITE_BGR_SUPPORTED) && defined(PNG_READ_BGR_SUPPORTED)
;;;796       if (png_ptr->transformations & PNG_BGR)
;;;797          png_warning(png_ptr, "PNG_WRITE_BGR_SUPPORTED is not defined.");
;;;798    #endif
;;;799    #if !defined(PNG_WRITE_SWAP_SUPPORTED) && defined(PNG_READ_SWAP_SUPPORTED)
;;;800       if (png_ptr->transformations & PNG_SWAP_BYTES)
;;;801          png_warning(png_ptr, "PNG_WRITE_SWAP_SUPPORTED is not defined.");
;;;802    #endif
;;;803    
;;;804          png_write_start_row(png_ptr);
;;;805       }
;;;806    
;;;807    #if defined(PNG_WRITE_INTERLACING_SUPPORTED)
;;;808       /* if interlaced and not interested in row, return */
;;;809       if (png_ptr->interlaced && (png_ptr->transformations & PNG_INTERLACE))
;;;810       {
;;;811          switch (png_ptr->pass)
;;;812          {
;;;813             case 0:
;;;814                if (png_ptr->row_number & 0x07)
;;;815                {
;;;816                   png_write_finish_row(png_ptr);
;;;817                   return;
;;;818                }
;;;819                break;
;;;820             case 1:
;;;821                if ((png_ptr->row_number & 0x07) || png_ptr->width < 5)
;;;822                {
;;;823                   png_write_finish_row(png_ptr);
;;;824                   return;
;;;825                }
;;;826                break;
;;;827             case 2:
;;;828                if ((png_ptr->row_number & 0x07) != 4)
;;;829                {
;;;830                   png_write_finish_row(png_ptr);
;;;831                   return;
;;;832                }
;;;833                break;
;;;834             case 3:
;;;835                if ((png_ptr->row_number & 0x03) || png_ptr->width < 3)
;;;836                {
;;;837                   png_write_finish_row(png_ptr);
;;;838                   return;
;;;839                }
;;;840                break;
;;;841             case 4:
;;;842                if ((png_ptr->row_number & 0x03) != 2)
;;;843                {
;;;844                   png_write_finish_row(png_ptr);
;;;845                   return;
;;;846                }
;;;847                break;
;;;848             case 5:
;;;849                if ((png_ptr->row_number & 0x01) || png_ptr->width < 2)
;;;850                {
;;;851                   png_write_finish_row(png_ptr);
;;;852                   return;
;;;853                }
;;;854                break;
;;;855             case 6:
;;;856                if (!(png_ptr->row_number & 0x01))
;;;857                {
;;;858                   png_write_finish_row(png_ptr);
;;;859                   return;
;;;860                }
;;;861                break;
;;;862          }
;;;863       }
;;;864    #endif
;;;865    
;;;866       /* set up row info for transformations */
;;;867       png_ptr->row_info.color_type = png_ptr->color_type;
;;;868       png_ptr->row_info.width = png_ptr->usr_width;
;;;869       png_ptr->row_info.channels = png_ptr->usr_channels;
;;;870       png_ptr->row_info.bit_depth = png_ptr->usr_bit_depth;
;;;871       png_ptr->row_info.pixel_depth = (png_byte)(png_ptr->row_info.bit_depth *
;;;872          png_ptr->row_info.channels);
;;;873    
;;;874       png_ptr->row_info.rowbytes = PNG_ROWBYTES(png_ptr->row_info.pixel_depth,
;;;875          png_ptr->row_info.width);
;;;876    
;;;877       png_debug1(3, "row_info->color_type = %d\n", png_ptr->row_info.color_type);
;;;878       png_debug1(3, "row_info->width = %lu\n", png_ptr->row_info.width);
;;;879       png_debug1(3, "row_info->channels = %d\n", png_ptr->row_info.channels);
;;;880       png_debug1(3, "row_info->bit_depth = %d\n", png_ptr->row_info.bit_depth);
;;;881       png_debug1(3, "row_info->pixel_depth = %d\n", png_ptr->row_info.pixel_depth);
;;;882       png_debug1(3, "row_info->rowbytes = %lu\n", png_ptr->row_info.rowbytes);
;;;883    
;;;884       /* Copy user's row into buffer, leaving room for filter byte. */
;;;885       png_memcpy_check(png_ptr, png_ptr->row_buf + 1, row,
;;;886          png_ptr->row_info.rowbytes);
;;;887    
;;;888    #if defined(PNG_WRITE_INTERLACING_SUPPORTED)
;;;889       /* handle interlacing */
;;;890       if (png_ptr->interlaced && png_ptr->pass < 6 &&
;;;891          (png_ptr->transformations & PNG_INTERLACE))
;;;892       {
;;;893          png_do_write_interlace(&(png_ptr->row_info),
;;;894             png_ptr->row_buf + 1, png_ptr->pass);
;;;895          /* this should always get caught above, but still ... */
;;;896          if (!(png_ptr->row_info.width))
;;;897          {
;;;898             png_write_finish_row(png_ptr);
;;;899             return;
;;;900          }
;;;901       }
;;;902    #endif
;;;903    
;;;904       /* handle other transformations */
;;;905       if (png_ptr->transformations)
;;;906          png_do_write_transformations(png_ptr);
;;;907    
;;;908    #if defined(PNG_MNG_FEATURES_SUPPORTED)
;;;909       /* Write filter_method 64 (intrapixel differencing) only if
;;;910        * 1. Libpng was compiled with PNG_MNG_FEATURES_SUPPORTED and
;;;911        * 2. Libpng did not write a PNG signature (this filter_method is only
;;;912        *    used in PNG datastreams that are embedded in MNG datastreams) and
;;;913        * 3. The application called png_permit_mng_features with a mask that
;;;914        *    included PNG_FLAG_MNG_FILTER_64 and
;;;915        * 4. The filter_method is 64 and
;;;916        * 5. The color_type is RGB or RGBA
;;;917        */
;;;918       if((png_ptr->mng_features_permitted & PNG_FLAG_MNG_FILTER_64) &&
;;;919          (png_ptr->filter_type == PNG_INTRAPIXEL_DIFFERENCING))
;;;920       {
;;;921          /* Intrapixel differencing */
;;;922          png_do_write_intrapixel(&(png_ptr->row_info), png_ptr->row_buf + 1);
;;;923       }
;;;924    #endif
;;;925    
;;;926       /* Find a filter if necessary, filter the row and write it out. */
;;;927       png_write_find_filter(png_ptr, &(png_ptr->row_info));
;;;928    
;;;929       if (png_ptr->write_row_fn != NULL)
;;;930          (*(png_ptr->write_row_fn))(png_ptr, png_ptr->row_number, png_ptr->pass);
;;;931    }
000b32  bd70              POP      {r4-r6,pc}
                  |L1.2868|
000b34  f8d40224          LDR      r0,[r4,#0x224]        ;767
000b38  b970              CBNZ     r0,|L1.2904|
000b3a  f8940264          LDRB     r0,[r4,#0x264]        ;767
000b3e  b958              CBNZ     r0,|L1.2904|
000b40  f8b401a8          LDRH     r0,[r4,#0x1a8]        ;770
000b44  f4006080          AND      r0,r0,#0x400          ;770
000b48  b918              CBNZ     r0,|L1.2898|
000b4a  a18f              ADR      r1,|L1.3464|
000b4c  4620              MOV      r0,r4                 ;771
000b4e  f7fffffe          BL       png_error
                  |L1.2898|
000b52  4620              MOV      r0,r4                 ;804
000b54  f7fffffe          BL       png_write_start_row
                  |L1.2904|
000b58  f8940263          LDRB     r0,[r4,#0x263]        ;809
000b5c  2800              CMP      r0,#0                 ;809
000b5e  d064              BEQ      |L1.3114|
000b60  f89401b0          LDRB     r0,[r4,#0x1b0]        ;809
000b64  f0000002          AND      r0,r0,#2              ;809
000b68  2800              CMP      r0,#0                 ;809
000b6a  d05e              BEQ      |L1.3114|
000b6c  f8940264          LDRB     r0,[r4,#0x264]        ;811
000b70  2807              CMP      r0,#7                 ;811
000b72  d259              BCS      |L1.3112|
000b74  e8dff000          TBB      [pc,r0]               ;811
000b78  040e1c27          DCB      0x04,0x0e,0x1c,0x27
000b7c  35404e00          DCB      0x35,0x40,0x4e,0x00
000b80  f8940224          LDRB     r0,[r4,#0x224]        ;814
000b84  f0000007          AND      r0,r0,#7              ;814
000b88  b118              CBZ      r0,|L1.2962|
000b8a  4620              MOV      r0,r4                 ;816
000b8c  f7fffffe          BL       png_write_finish_row
000b90  e7cf              B        |L1.2866|
                  |L1.2962|
000b92  e049              B        |L1.3112|
000b94  f8940224          LDRB     r0,[r4,#0x224]        ;821
000b98  f0000007          AND      r0,r0,#7              ;821
000b9c  b918              CBNZ     r0,|L1.2982|
000b9e  f8d40208          LDR      r0,[r4,#0x208]        ;821
000ba2  2805              CMP      r0,#5                 ;821
000ba4  d203              BCS      |L1.2990|
                  |L1.2982|
000ba6  4620              MOV      r0,r4                 ;823
000ba8  f7fffffe          BL       png_write_finish_row
000bac  e7c1              B        |L1.2866|
                  |L1.2990|
000bae  e03b              B        |L1.3112|
000bb0  f8940224          LDRB     r0,[r4,#0x224]        ;828
000bb4  f0000007          AND      r0,r0,#7              ;828
000bb8  2804              CMP      r0,#4                 ;828
000bba  d003              BEQ      |L1.3012|
000bbc  4620              MOV      r0,r4                 ;830
000bbe  f7fffffe          BL       png_write_finish_row
000bc2  e7b6              B        |L1.2866|
                  |L1.3012|
000bc4  e030              B        |L1.3112|
000bc6  f8940224          LDRB     r0,[r4,#0x224]        ;835
000bca  f0000003          AND      r0,r0,#3              ;835
000bce  b918              CBNZ     r0,|L1.3032|
000bd0  f8d40208          LDR      r0,[r4,#0x208]        ;835
000bd4  2803              CMP      r0,#3                 ;835
000bd6  d203              BCS      |L1.3040|
                  |L1.3032|
000bd8  4620              MOV      r0,r4                 ;837
000bda  f7fffffe          BL       png_write_finish_row
000bde  e7a8              B        |L1.2866|
                  |L1.3040|
000be0  e022              B        |L1.3112|
000be2  f8940224          LDRB     r0,[r4,#0x224]        ;842
000be6  f0000003          AND      r0,r0,#3              ;842
000bea  2802              CMP      r0,#2                 ;842
000bec  d003              BEQ      |L1.3062|
000bee  4620              MOV      r0,r4                 ;844
000bf0  f7fffffe          BL       png_write_finish_row
000bf4  e79d              B        |L1.2866|
                  |L1.3062|
000bf6  e017              B        |L1.3112|
000bf8  f8940224          LDRB     r0,[r4,#0x224]        ;849
000bfc  f0000001          AND      r0,r0,#1              ;849
000c00  b918              CBNZ     r0,|L1.3082|
000c02  f8d40208          LDR      r0,[r4,#0x208]        ;849
000c06  2802              CMP      r0,#2                 ;849
000c08  d203              BCS      |L1.3090|
                  |L1.3082|
000c0a  4620              MOV      r0,r4                 ;851
000c0c  f7fffffe          BL       png_write_finish_row
000c10  e78f              B        |L1.2866|
                  |L1.3090|
000c12  e009              B        |L1.3112|
000c14  f8940224          LDRB     r0,[r4,#0x224]        ;856
000c18  f0000001          AND      r0,r0,#1              ;856
000c1c  b918              CBNZ     r0,|L1.3110|
000c1e  4620              MOV      r0,r4                 ;858
000c20  f7fffffe          BL       png_write_finish_row
000c24  e785              B        |L1.2866|
                  |L1.3110|
000c26  bf00              NOP                            ;861
                  |L1.3112|
000c28  bf00              NOP                            ;819
                  |L1.3114|
000c2a  f8941266          LDRB     r1,[r4,#0x266]        ;867
000c2e  f44f7012          MOV      r0,#0x248             ;867
000c32  5501              STRB     r1,[r0,r4]            ;867
000c34  f8d40214          LDR      r0,[r4,#0x214]        ;868
000c38  f8c40240          STR      r0,[r4,#0x240]        ;868
000c3c  f894126b          LDRB     r1,[r4,#0x26b]        ;869
000c40  f240204a          MOV      r0,#0x24a             ;869
000c44  5501              STRB     r1,[r0,r4]            ;869
000c46  f8941268          LDRB     r1,[r4,#0x268]        ;870
000c4a  1e40              SUBS     r0,r0,#1              ;870
000c4c  5501              STRB     r1,[r0,r4]            ;870
000c4e  5d00              LDRB     r0,[r0,r4]            ;871
000c50  f240214a          MOV      r1,#0x24a             ;871
000c54  5d09              LDRB     r1,[r1,r4]            ;871
000c56  4348              MULS     r0,r1,r0              ;871
000c58  b2c1              UXTB     r1,r0                 ;871
000c5a  f240204b          MOV      r0,#0x24b             ;871
000c5e  5501              STRB     r1,[r0,r4]            ;871
000c60  5d00              LDRB     r0,[r0,r4]            ;874
000c62  2808              CMP      r0,#8                 ;874
000c64  db07              BLT      |L1.3190|
000c66  f240214b          MOV      r1,#0x24b             ;874
000c6a  5d09              LDRB     r1,[r1,r4]            ;874
000c6c  08c9              LSRS     r1,r1,#3              ;874
000c6e  f8d40240          LDR      r0,[r4,#0x240]        ;874
000c72  4348              MULS     r0,r1,r0              ;874
000c74  e007              B        |L1.3206|
                  |L1.3190|
000c76  f240214b          MOV      r1,#0x24b             ;874
000c7a  5d09              LDRB     r1,[r1,r4]            ;874
000c7c  f8d40240          LDR      r0,[r4,#0x240]        ;874
000c80  4348              MULS     r0,r1,r0              ;874
000c82  1dc0              ADDS     r0,r0,#7              ;874
000c84  08c0              LSRS     r0,r0,#3              ;874
                  |L1.3206|
000c86  f44f7111          MOV      r1,#0x244             ;874
000c8a  5108              STR      r0,[r1,r4]            ;874
000c8c  4608              MOV      r0,r1                 ;885
000c8e  5903              LDR      r3,[r0,r4]            ;885
000c90  f8d4022c          LDR      r0,[r4,#0x22c]        ;885
000c94  1c41              ADDS     r1,r0,#1              ;885
000c96  462a              MOV      r2,r5                 ;885
000c98  4620              MOV      r0,r4                 ;885
000c9a  f7fffffe          BL       png_memcpy_check
000c9e  f8940263          LDRB     r0,[r4,#0x263]        ;890
000ca2  b1c0              CBZ      r0,|L1.3286|
000ca4  f8940264          LDRB     r0,[r4,#0x264]        ;890
000ca8  2806              CMP      r0,#6                 ;890
000caa  da14              BGE      |L1.3286|
000cac  f89401b0          LDRB     r0,[r4,#0x1b0]        ;891
000cb0  f0000002          AND      r0,r0,#2              ;891
000cb4  b178              CBZ      r0,|L1.3286|
000cb6  f8942264          LDRB     r2,[r4,#0x264]        ;893
000cba  f8d4022c          LDR      r0,[r4,#0x22c]        ;893
000cbe  1c41              ADDS     r1,r0,#1              ;893
000cc0  f5047010          ADD      r0,r4,#0x240          ;893
000cc4  f7fffffe          BL       png_do_write_interlace
000cc8  f8d40240          LDR      r0,[r4,#0x240]        ;896
000ccc  b918              CBNZ     r0,|L1.3286|
000cce  4620              MOV      r0,r4                 ;898
000cd0  f7fffffe          BL       png_write_finish_row
000cd4  e72d              B        |L1.2866|
                  |L1.3286|
000cd6  f8d401b0          LDR      r0,[r4,#0x1b0]        ;905
000cda  b110              CBZ      r0,|L1.3298|
000cdc  4620              MOV      r0,r4                 ;906
000cde  f7fffffe          BL       png_do_write_transformations
                  |L1.3298|
000ce2  f894036c          LDRB     r0,[r4,#0x36c]        ;918
000ce6  f0000004          AND      r0,r0,#4              ;918
000cea  b150              CBZ      r0,|L1.3330|
000cec  f8940374          LDRB     r0,[r4,#0x374]        ;919
000cf0  2840              CMP      r0,#0x40              ;919
000cf2  d106              BNE      |L1.3330|
000cf4  f8d4022c          LDR      r0,[r4,#0x22c]        ;922
000cf8  1c41              ADDS     r1,r0,#1              ;922
000cfa  f5047010          ADD      r0,r4,#0x240          ;922
000cfe  f7fffffe          BL       png_do_write_intrapixel
                  |L1.3330|
000d02  f5047110          ADD      r1,r4,#0x240          ;927
000d06  4620              MOV      r0,r4                 ;927
000d08  f7fffffe          BL       png_write_find_filter
000d0c  f8d402dc          LDR      r0,[r4,#0x2dc]        ;929
000d10  b138              CBZ      r0,|L1.3362|
000d12  f8942264          LDRB     r2,[r4,#0x264]        ;930
000d16  4620              MOV      r0,r4                 ;930
000d18  f8d432dc          LDR      r3,[r4,#0x2dc]        ;930
000d1c  f8d41224          LDR      r1,[r4,#0x224]        ;930
000d20  4798              BLX      r3                    ;930
                  |L1.3362|
000d22  bf00              NOP      
000d24  e705              B        |L1.2866|
000d26  0000              DCW      0x0000
                  |L1.3368|
                          DCD      png_libpng_ver
                  |L1.3372|
000d2c  496e636f          DCB      "Incompatible libpng version in application and library",0
000d30  6d706174
000d34  69626c65
000d38  206c6962
000d3c  706e6720
000d40  76657273
000d44  696f6e20
000d48  696e2061
000d4c  70706c69
000d50  63617469
000d54  6f6e2061
000d58  6e64206c
000d5c  69627261
000d60  727900  
000d63  00                DCB      0
                  |L1.3428|
                          DCD      ||.conststring||
                  |L1.3432|
                          DCD      0x000f4240
                  |L1.3436|
                          DCD      ||.conststring||+0x48
                  |L1.3440|
                          DCD      ||.conststring||+0x90
                  |L1.3444|
000d74  312e302e          DCB      "1.0.6 or earlier",0
000d78  36206f72
000d7c  20656172
000d80  6c696572
000d84  00      
000d85  00                DCB      0
000d86  00                DCB      0
000d87  00                DCB      0
                  |L1.3464|
000d88  706e675f          DCB      "png_write_info was never called before png_write_row.",0
000d8c  77726974
000d90  655f696e
000d94  666f2077
000d98  6173206e
000d9c  65766572
000da0  2063616c
000da4  6c656420
000da8  6265666f
000dac  72652070
000db0  6e675f77
000db4  72697465
000db8  5f726f77
000dbc  2e00    
000dbe  00                DCB      0
000dbf  00                DCB      0
                          ENDP

                  png_write_rows PROC
;;;706    void PNGAPI
;;;707    png_write_rows(png_structp png_ptr, png_bytepp row,
000dc0  e92d41f0          PUSH     {r4-r8,lr}
;;;708       png_uint_32 num_rows)
;;;709    {
000dc4  4606              MOV      r6,r0
000dc6  460f              MOV      r7,r1
000dc8  4690              MOV      r8,r2
;;;710       png_uint_32 i; /* row counter */
;;;711       png_bytepp rp; /* row pointer */
;;;712    
;;;713       png_debug(1, "in png_write_rows\n");
;;;714    
;;;715       if (png_ptr == NULL)
000dca  b90e              CBNZ     r6,|L1.3536|
                  |L1.3532|
;;;716          return;
;;;717    
;;;718       /* loop through the rows */
;;;719       for (i = 0, rp = row; i < num_rows; i++, rp++)
;;;720       {
;;;721          png_write_row(png_ptr, *rp);
;;;722       }
;;;723    }
000dcc  e8bd81f0          POP      {r4-r8,pc}
                  |L1.3536|
000dd0  2400              MOVS     r4,#0                 ;719
000dd2  463d              MOV      r5,r7                 ;719
000dd4  e005              B        |L1.3554|
                  |L1.3542|
000dd6  4630              MOV      r0,r6                 ;721
000dd8  6829              LDR      r1,[r5,#0]            ;721
000dda  f7fffffe          BL       png_write_row
000dde  1c64              ADDS     r4,r4,#1              ;719
000de0  1d2d              ADDS     r5,r5,#4              ;719
                  |L1.3554|
000de2  4544              CMP      r4,r8                 ;719
000de4  d3f7              BCC      |L1.3542|
000de6  bf00              NOP      
000de8  e7f0              B        |L1.3532|
;;;724    
                          ENDP

                  png_write_image PROC
;;;728    void PNGAPI
;;;729    png_write_image(png_structp png_ptr, png_bytepp image)
000dea  e92d47f0          PUSH     {r4-r10,lr}
;;;730    {
000dee  4604              MOV      r4,r0
000df0  460f              MOV      r7,r1
;;;731       png_uint_32 i; /* row index */
;;;732       int pass, num_pass; /* pass variables */
;;;733       png_bytepp rp; /* points to current row */
;;;734    
;;;735       if (png_ptr == NULL)
000df2  b90c              CBNZ     r4,|L1.3576|
                  |L1.3572|
;;;736          return;
;;;737    
;;;738       png_debug(1, "in png_write_image\n");
;;;739    #if defined(PNG_WRITE_INTERLACING_SUPPORTED)
;;;740       /* intialize interlace handling.  If image is not interlaced,
;;;741          this will set pass to 1 */
;;;742       num_pass = png_set_interlace_handling(png_ptr);
;;;743    #else
;;;744       num_pass = 1;
;;;745    #endif
;;;746       /* loop through passes */
;;;747       for (pass = 0; pass < num_pass; pass++)
;;;748       {
;;;749          /* loop through image */
;;;750          for (i = 0, rp = image; i < png_ptr->height; i++, rp++)
;;;751          {
;;;752             png_write_row(png_ptr, *rp);
;;;753          }
;;;754       }
;;;755    }
000df4  e8bd87f0          POP      {r4-r10,pc}
                  |L1.3576|
000df8  4620              MOV      r0,r4                 ;742
000dfa  f7fffffe          BL       png_set_interlace_handling
000dfe  4606              MOV      r6,r0                 ;742
000e00  2500              MOVS     r5,#0                 ;747
000e02  e011              B        |L1.3624|
                  |L1.3588|
000e04  f04f0800          MOV      r8,#0                 ;750
000e08  46b9              MOV      r9,r7                 ;750
000e0a  e008              B        |L1.3614|
                  |L1.3596|
000e0c  4620              MOV      r0,r4                 ;752
000e0e  f8d91000          LDR      r1,[r9,#0]            ;752
000e12  f7fffffe          BL       png_write_row
000e16  f1080801          ADD      r8,r8,#1              ;750
000e1a  f1090904          ADD      r9,r9,#4              ;750
                  |L1.3614|
000e1e  f8d4020c          LDR      r0,[r4,#0x20c]        ;750
000e22  4540              CMP      r0,r8                 ;750
000e24  d8f2              BHI      |L1.3596|
000e26  1c6d              ADDS     r5,r5,#1              ;747
                  |L1.3624|
000e28  42b5              CMP      r5,r6                 ;747
000e2a  dbeb              BLT      |L1.3588|
000e2c  bf00              NOP      
000e2e  e7e1              B        |L1.3572|
;;;756    
                          ENDP

                  png_set_flush PROC
;;;935    void PNGAPI
;;;936    png_set_flush(png_structp png_ptr, int nrows)
000e30  b900              CBNZ     r0,|L1.3636|
                  |L1.3634|
;;;937    {
;;;938       png_debug(1, "in png_set_flush\n");
;;;939       if (png_ptr == NULL)
;;;940          return;
;;;941       png_ptr->flush_dist = (nrows < 0 ? 0 : nrows);
;;;942    }
000e32  4770              BX       lr
                  |L1.3636|
000e34  2900              CMP      r1,#0                 ;941
000e36  da01              BGE      |L1.3644|
000e38  2200              MOVS     r2,#0                 ;941
000e3a  e000              B        |L1.3646|
                  |L1.3644|
000e3c  460a              MOV      r2,r1                 ;941
                  |L1.3646|
000e3e  f8c02290          STR      r2,[r0,#0x290]        ;941
000e42  bf00              NOP      
000e44  e7f5              B        |L1.3634|
;;;943    
                          ENDP

                  png_write_flush PROC
;;;945    void PNGAPI
;;;946    png_write_flush(png_structp png_ptr)
000e46  b570              PUSH     {r4-r6,lr}
;;;947    {
000e48  4604              MOV      r4,r0
;;;948       int wrote_IDAT;
;;;949    
;;;950       png_debug(1, "in png_write_flush\n");
;;;951       if (png_ptr == NULL)
000e4a  b904              CBNZ     r4,|L1.3662|
                  |L1.3660|
;;;952          return;
;;;953       /* We have already written out all of the data */
;;;954       if (png_ptr->row_number >= png_ptr->num_rows)
;;;955         return;
;;;956    
;;;957       do
;;;958       {
;;;959          int ret;
;;;960    
;;;961          /* compress the data */
;;;962          ret = deflate(&png_ptr->zstream, Z_SYNC_FLUSH);
;;;963          wrote_IDAT = 0;
;;;964    
;;;965          /* check for compression errors */
;;;966          if (ret != Z_OK)
;;;967          {
;;;968             if (png_ptr->zstream.msg != NULL)
;;;969                png_error(png_ptr, png_ptr->zstream.msg);
;;;970             else
;;;971                png_error(png_ptr, "zlib error");
;;;972          }
;;;973    
;;;974          if (!(png_ptr->zstream.avail_out))
;;;975          {
;;;976             /* write the IDAT and reset the zlib output buffer */
;;;977             png_write_IDAT(png_ptr, png_ptr->zbuf,
;;;978                            png_ptr->zbuf_size);
;;;979             png_ptr->zstream.next_out = png_ptr->zbuf;
;;;980             png_ptr->zstream.avail_out = (uInt)png_ptr->zbuf_size;
;;;981             wrote_IDAT = 1;
;;;982          }
;;;983       } while(wrote_IDAT == 1);
;;;984    
;;;985       /* If there is any data left to be output, write it into a new IDAT */
;;;986       if (png_ptr->zbuf_size != png_ptr->zstream.avail_out)
;;;987       {
;;;988          /* write the IDAT and reset the zlib output buffer */
;;;989          png_write_IDAT(png_ptr, png_ptr->zbuf,
;;;990                         png_ptr->zbuf_size - png_ptr->zstream.avail_out);
;;;991          png_ptr->zstream.next_out = png_ptr->zbuf;
;;;992          png_ptr->zstream.avail_out = (uInt)png_ptr->zbuf_size;
;;;993       }
;;;994       png_ptr->flush_rows = 0;
;;;995       png_flush(png_ptr);
;;;996    }
000e4c  bd70              POP      {r4-r6,pc}
                  |L1.3662|
000e4e  f8d41210          LDR      r1,[r4,#0x210]        ;954
000e52  f8d40224          LDR      r0,[r4,#0x224]        ;954
000e56  4288              CMP      r0,r1                 ;954
000e58  d300              BCC      |L1.3676|
000e5a  e7f7              B        |L1.3660|
                  |L1.3676|
000e5c  bf00              NOP                            ;957
                  |L1.3678|
000e5e  2102              MOVS     r1,#2                 ;962
000e60  f50470da          ADD      r0,r4,#0x1b4          ;962
000e64  f7fffffe          BL       deflate
000e68  4606              MOV      r6,r0                 ;962
000e6a  2500              MOVS     r5,#0                 ;963
000e6c  b176              CBZ      r6,|L1.3724|
000e6e  f44f70e6          MOV      r0,#0x1cc             ;968
000e72  5900              LDR      r0,[r0,r4]            ;968
000e74  b130              CBZ      r0,|L1.3716|
000e76  f44f70e6          MOV      r0,#0x1cc             ;969
000e7a  5901              LDR      r1,[r0,r4]            ;969
000e7c  4620              MOV      r0,r4                 ;969
000e7e  f7fffffe          BL       png_error
000e82  e003              B        |L1.3724|
                  |L1.3716|
000e84  a1f7              ADR      r1,|L1.4708|
000e86  4620              MOV      r0,r4                 ;971
000e88  f7fffffe          BL       png_error
                  |L1.3724|
000e8c  f44f70e2          MOV      r0,#0x1c4             ;974
000e90  5900              LDR      r0,[r0,r4]            ;974
000e92  b978              CBNZ     r0,|L1.3764|
000e94  4620              MOV      r0,r4                 ;977
000e96  f50471f6          ADD      r1,r4,#0x1ec          ;977
000e9a  c906              LDM      r1,{r1,r2}            ;977
000e9c  f7fffffe          BL       png_write_IDAT
000ea0  f44f70e0          MOV      r0,#0x1c0             ;979
000ea4  f8d411ec          LDR      r1,[r4,#0x1ec]        ;979
000ea8  5101              STR      r1,[r0,r4]            ;979
000eaa  1d00              ADDS     r0,r0,#4              ;980
000eac  f8d411f0          LDR      r1,[r4,#0x1f0]        ;980
000eb0  5101              STR      r1,[r0,r4]            ;980
000eb2  2501              MOVS     r5,#1                 ;981
                  |L1.3764|
000eb4  2d01              CMP      r5,#1                 ;983
000eb6  d0d2              BEQ      |L1.3678|
000eb8  f44f70e2          MOV      r0,#0x1c4             ;986
000ebc  5900              LDR      r0,[r0,r4]            ;986
000ebe  f8d411f0          LDR      r1,[r4,#0x1f0]        ;986
000ec2  4281              CMP      r1,r0                 ;986
000ec4  d013              BEQ      |L1.3822|
000ec6  f44f70e2          MOV      r0,#0x1c4             ;989
000eca  5900              LDR      r0,[r0,r4]            ;989
000ecc  f8d431f0          LDR      r3,[r4,#0x1f0]        ;989
000ed0  1a1a              SUBS     r2,r3,r0              ;989
000ed2  4620              MOV      r0,r4                 ;989
000ed4  f8d411ec          LDR      r1,[r4,#0x1ec]        ;989
000ed8  f7fffffe          BL       png_write_IDAT
000edc  f44f70e0          MOV      r0,#0x1c0             ;991
000ee0  f8d411ec          LDR      r1,[r4,#0x1ec]        ;991
000ee4  5101              STR      r1,[r0,r4]            ;991
000ee6  1d00              ADDS     r0,r0,#4              ;992
000ee8  f8d411f0          LDR      r1,[r4,#0x1f0]        ;992
000eec  5101              STR      r1,[r0,r4]            ;992
                  |L1.3822|
000eee  2000              MOVS     r0,#0                 ;994
000ef0  f8c40294          STR      r0,[r4,#0x294]        ;994
000ef4  4620              MOV      r0,r4                 ;995
000ef6  f7fffffe          BL       png_flush
000efa  bf00              NOP      
000efc  e7a6              B        |L1.3660|
;;;997    #endif /* PNG_WRITE_FLUSH_SUPPORTED */
                          ENDP

                  png_write_destroy PROC
;;;1060   void /* PRIVATE */
;;;1061   png_write_destroy(png_structp png_ptr)
000efe  e92d41f0          PUSH     {r4-r8,lr}
;;;1062   {
000f02  b0e0              SUB      sp,sp,#0x180
000f04  4604              MOV      r4,r0
;;;1063   #ifdef PNG_SETJMP_SUPPORTED
;;;1064      jmp_buf tmp_jmp; /* save jump buffer */
;;;1065   #endif
;;;1066      png_error_ptr error_fn;
;;;1067      png_error_ptr warning_fn;
;;;1068      png_voidp error_ptr;
;;;1069   #ifdef PNG_USER_MEM_SUPPORTED
;;;1070      png_free_ptr free_fn;
;;;1071   #endif
;;;1072   
;;;1073      png_debug(1, "in png_write_destroy\n");
;;;1074      /* free any memory zlib uses */
;;;1075      deflateEnd(&png_ptr->zstream);
000f06  f50470da          ADD      r0,r4,#0x1b4
000f0a  f7fffffe          BL       deflateEnd
;;;1076   
;;;1077      /* free our memory.  png_free checks NULL for us. */
;;;1078      png_free(png_ptr, png_ptr->zbuf);
000f0e  4620              MOV      r0,r4
000f10  f8d411ec          LDR      r1,[r4,#0x1ec]
000f14  f7fffffe          BL       png_free
;;;1079      png_free(png_ptr, png_ptr->row_buf);
000f18  4620              MOV      r0,r4
000f1a  f8d4122c          LDR      r1,[r4,#0x22c]
000f1e  f7fffffe          BL       png_free
;;;1080      png_free(png_ptr, png_ptr->prev_row);
000f22  4620              MOV      r0,r4
000f24  f8d41228          LDR      r1,[r4,#0x228]
000f28  f7fffffe          BL       png_free
;;;1081      png_free(png_ptr, png_ptr->sub_row);
000f2c  4620              MOV      r0,r4
000f2e  f8d41230          LDR      r1,[r4,#0x230]
000f32  f7fffffe          BL       png_free
;;;1082      png_free(png_ptr, png_ptr->up_row);
000f36  4620              MOV      r0,r4
000f38  f8d41234          LDR      r1,[r4,#0x234]
000f3c  f7fffffe          BL       png_free
;;;1083      png_free(png_ptr, png_ptr->avg_row);
000f40  4620              MOV      r0,r4
000f42  f8d41238          LDR      r1,[r4,#0x238]
000f46  f7fffffe          BL       png_free
;;;1084      png_free(png_ptr, png_ptr->paeth_row);
000f4a  4620              MOV      r0,r4
000f4c  f8d4123c          LDR      r1,[r4,#0x23c]
000f50  f7fffffe          BL       png_free
;;;1085   
;;;1086   #if defined(PNG_TIME_RFC1123_SUPPORTED)
;;;1087      png_free(png_ptr, png_ptr->time_buffer);
;;;1088   #endif
;;;1089   
;;;1090   #if defined(PNG_WRITE_WEIGHTED_FILTER_SUPPORTED)
;;;1091      png_free(png_ptr, png_ptr->prev_filters);
000f54  4620              MOV      r0,r4
000f56  f8d4133c          LDR      r1,[r4,#0x33c]
000f5a  f7fffffe          BL       png_free
;;;1092      png_free(png_ptr, png_ptr->filter_weights);
000f5e  4620              MOV      r0,r4
000f60  f8d41340          LDR      r1,[r4,#0x340]
000f64  f7fffffe          BL       png_free
;;;1093      png_free(png_ptr, png_ptr->inv_filter_weights);
000f68  4620              MOV      r0,r4
000f6a  f8d41344          LDR      r1,[r4,#0x344]
000f6e  f7fffffe          BL       png_free
;;;1094      png_free(png_ptr, png_ptr->filter_costs);
000f72  4620              MOV      r0,r4
000f74  f8d41348          LDR      r1,[r4,#0x348]
000f78  f7fffffe          BL       png_free
;;;1095      png_free(png_ptr, png_ptr->inv_filter_costs);
000f7c  4620              MOV      r0,r4
000f7e  f8d4134c          LDR      r1,[r4,#0x34c]
000f82  f7fffffe          BL       png_free
;;;1096   #endif
;;;1097   
;;;1098   #ifdef PNG_SETJMP_SUPPORTED
;;;1099      /* reset structure */
;;;1100      png_memcpy(tmp_jmp, png_ptr->jmpbuf, png_sizeof (jmp_buf));
000f86  f44f72c0          MOV      r2,#0x180
000f8a  4621              MOV      r1,r4
000f8c  4668              MOV      r0,sp
000f8e  f7fffffe          BL       __aeabi_memcpy4
;;;1101   #endif
;;;1102   
;;;1103      error_fn = png_ptr->error_fn;
000f92  f8d45180          LDR      r5,[r4,#0x180]
;;;1104      warning_fn = png_ptr->warning_fn;
000f96  f8d46184          LDR      r6,[r4,#0x184]
;;;1105      error_ptr = png_ptr->error_ptr;
000f9a  f8d47188          LDR      r7,[r4,#0x188]
;;;1106   #ifdef PNG_USER_MEM_SUPPORTED
;;;1107      free_fn = png_ptr->free_fn;
000f9e  f8d48384          LDR      r8,[r4,#0x384]
;;;1108   #endif
;;;1109   
;;;1110      png_memset(png_ptr, 0, png_sizeof (png_struct));
000fa2  f44f716a          MOV      r1,#0x3a8
000fa6  4620              MOV      r0,r4
000fa8  f7fffffe          BL       __aeabi_memclr4
;;;1111   
;;;1112      png_ptr->error_fn = error_fn;
000fac  f8c45180          STR      r5,[r4,#0x180]
;;;1113      png_ptr->warning_fn = warning_fn;
000fb0  f8c46184          STR      r6,[r4,#0x184]
;;;1114      png_ptr->error_ptr = error_ptr;
000fb4  f8c47188          STR      r7,[r4,#0x188]
;;;1115   #ifdef PNG_USER_MEM_SUPPORTED
;;;1116      png_ptr->free_fn = free_fn;
000fb8  f8c48384          STR      r8,[r4,#0x384]
;;;1117   #endif
;;;1118   
;;;1119   #ifdef PNG_SETJMP_SUPPORTED
;;;1120      png_memcpy(png_ptr->jmpbuf, tmp_jmp, png_sizeof (jmp_buf));
000fbc  f44f72c0          MOV      r2,#0x180
000fc0  4669              MOV      r1,sp
000fc2  4620              MOV      r0,r4
000fc4  f7fffffe          BL       __aeabi_memcpy4
;;;1121   #endif
;;;1122   }
000fc8  b060              ADD      sp,sp,#0x180
000fca  e8bd81f0          POP      {r4-r8,pc}
;;;1123   
                          ENDP

                  png_destroy_write_struct PROC
;;;1000   void PNGAPI
;;;1001   png_destroy_write_struct(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr)
000fce  e92d47f0          PUSH     {r4-r10,lr}
;;;1002   {
000fd2  4605              MOV      r5,r0
000fd4  460e              MOV      r6,r1
;;;1003      png_structp png_ptr = NULL;
000fd6  2400              MOVS     r4,#0
;;;1004      png_infop info_ptr = NULL;
000fd8  2700              MOVS     r7,#0
;;;1005   #ifdef PNG_USER_MEM_SUPPORTED
;;;1006      png_free_ptr free_fn = NULL;
000fda  46a0              MOV      r8,r4
;;;1007      png_voidp mem_ptr = NULL;
000fdc  46a1              MOV      r9,r4
;;;1008   #endif
;;;1009   
;;;1010      png_debug(1, "in png_destroy_write_struct\n");
;;;1011      if (png_ptr_ptr != NULL)
000fde  b125              CBZ      r5,|L1.4074|
;;;1012      {
;;;1013         png_ptr = *png_ptr_ptr;
000fe0  682c              LDR      r4,[r5,#0]
;;;1014   #ifdef PNG_USER_MEM_SUPPORTED
;;;1015         free_fn = png_ptr->free_fn;
000fe2  f8d48384          LDR      r8,[r4,#0x384]
;;;1016         mem_ptr = png_ptr->mem_ptr;
000fe6  f8d4937c          LDR      r9,[r4,#0x37c]
                  |L1.4074|
;;;1017   #endif
;;;1018      }
;;;1019   
;;;1020      if (info_ptr_ptr != NULL)
000fea  b106              CBZ      r6,|L1.4078|
;;;1021         info_ptr = *info_ptr_ptr;
000fec  6837              LDR      r7,[r6,#0]
                  |L1.4078|
;;;1022   
;;;1023      if (info_ptr != NULL)
000fee  b1d7              CBZ      r7,|L1.4134|
;;;1024      {
;;;1025         png_free_data(png_ptr, info_ptr, PNG_FREE_ALL, -1);
000ff0  f04f33ff          MOV      r3,#0xffffffff
000ff4  0c5a              LSRS     r2,r3,#17
000ff6  4639              MOV      r1,r7
000ff8  4620              MOV      r0,r4
000ffa  f7fffffe          BL       png_free_data
;;;1026   
;;;1027   #if defined(PNG_UNKNOWN_CHUNKS_SUPPORTED)
;;;1028         if (png_ptr->num_chunk_list)
000ffe  f8d4035c          LDR      r0,[r4,#0x35c]
001002  b148              CBZ      r0,|L1.4120|
;;;1029         {
;;;1030            png_free(png_ptr, png_ptr->chunk_list);
001004  4620              MOV      r0,r4
001006  f8d41360          LDR      r1,[r4,#0x360]
00100a  f7fffffe          BL       png_free
;;;1031            png_ptr->chunk_list=NULL;
00100e  2000              MOVS     r0,#0
001010  f8c40360          STR      r0,[r4,#0x360]
;;;1032            png_ptr->num_chunk_list=0;
001014  f8c4035c          STR      r0,[r4,#0x35c]
                  |L1.4120|
;;;1033         }
;;;1034   #endif
;;;1035   
;;;1036   #ifdef PNG_USER_MEM_SUPPORTED
;;;1037         png_destroy_struct_2((png_voidp)info_ptr, (png_free_ptr)free_fn,
001018  464a              MOV      r2,r9
00101a  4641              MOV      r1,r8
00101c  4638              MOV      r0,r7
00101e  f7fffffe          BL       png_destroy_struct_2
;;;1038            (png_voidp)mem_ptr);
;;;1039   #else
;;;1040         png_destroy_struct((png_voidp)info_ptr);
;;;1041   #endif
;;;1042         *info_ptr_ptr = NULL;
001022  2000              MOVS     r0,#0
001024  6030              STR      r0,[r6,#0]
                  |L1.4134|
;;;1043      }
;;;1044   
;;;1045      if (png_ptr != NULL)
001026  b14c              CBZ      r4,|L1.4156|
;;;1046      {
;;;1047         png_write_destroy(png_ptr);
001028  4620              MOV      r0,r4
00102a  f7fffffe          BL       png_write_destroy
;;;1048   #ifdef PNG_USER_MEM_SUPPORTED
;;;1049         png_destroy_struct_2((png_voidp)png_ptr, (png_free_ptr)free_fn,
00102e  464a              MOV      r2,r9
001030  4641              MOV      r1,r8
001032  4620              MOV      r0,r4
001034  f7fffffe          BL       png_destroy_struct_2
;;;1050            (png_voidp)mem_ptr);
;;;1051   #else
;;;1052         png_destroy_struct((png_voidp)png_ptr);
;;;1053   #endif
;;;1054         *png_ptr_ptr = NULL;
001038  2000              MOVS     r0,#0
00103a  6028              STR      r0,[r5,#0]
                  |L1.4156|
;;;1055      }
;;;1056   }
00103c  e8bd87f0          POP      {r4-r10,pc}
;;;1057   
                          ENDP

                  png_set_filter PROC
;;;1125   void PNGAPI
;;;1126   png_set_filter(png_structp png_ptr, int method, int filters)
001040  b570              PUSH     {r4-r6,lr}
;;;1127   {
001042  4604              MOV      r4,r0
001044  460d              MOV      r5,r1
001046  4616              MOV      r6,r2
;;;1128      png_debug(1, "in png_set_filter\n");
;;;1129      if (png_ptr == NULL)
001048  b904              CBNZ     r4,|L1.4172|
                  |L1.4170|
;;;1130         return;
;;;1131   #if defined(PNG_MNG_FEATURES_SUPPORTED)
;;;1132      if((png_ptr->mng_features_permitted & PNG_FLAG_MNG_FILTER_64) &&
;;;1133         (method == PNG_INTRAPIXEL_DIFFERENCING))
;;;1134            method = PNG_FILTER_TYPE_BASE;
;;;1135   #endif
;;;1136      if (method == PNG_FILTER_TYPE_BASE)
;;;1137      {
;;;1138         switch (filters & (PNG_ALL_FILTERS | 0x07))
;;;1139         {
;;;1140            case 5:
;;;1141            case 6:
;;;1142            case 7: png_warning(png_ptr, "Unknown row filter for method 0");
;;;1143            case PNG_FILTER_VALUE_NONE:  png_ptr->do_filter=PNG_FILTER_NONE; break;
;;;1144            case PNG_FILTER_VALUE_SUB:   png_ptr->do_filter=PNG_FILTER_SUB;  break;
;;;1145            case PNG_FILTER_VALUE_UP:    png_ptr->do_filter=PNG_FILTER_UP;   break;
;;;1146            case PNG_FILTER_VALUE_AVG:   png_ptr->do_filter=PNG_FILTER_AVG;  break;
;;;1147            case PNG_FILTER_VALUE_PAETH: png_ptr->do_filter=PNG_FILTER_PAETH;break;
;;;1148            default: png_ptr->do_filter = (png_byte)filters; break;
;;;1149         }
;;;1150   
;;;1151         /* If we have allocated the row_buf, this means we have already started
;;;1152          * with the image and we should have allocated all of the filter buffers
;;;1153          * that have been selected.  If prev_row isn't already allocated, then
;;;1154          * it is too late to start using the filters that need it, since we
;;;1155          * will be missing the data in the previous row.  If an application
;;;1156          * wants to start and stop using particular filters during compression,
;;;1157          * it should start out with all of the filters, and then add and
;;;1158          * remove them after the start of compression.
;;;1159          */
;;;1160         if (png_ptr->row_buf != NULL)
;;;1161         {
;;;1162            if ((png_ptr->do_filter & PNG_FILTER_SUB) && png_ptr->sub_row == NULL)
;;;1163            {
;;;1164               png_ptr->sub_row = (png_bytep)png_malloc(png_ptr,
;;;1165                 (png_ptr->rowbytes + 1));
;;;1166               png_ptr->sub_row[0] = PNG_FILTER_VALUE_SUB;
;;;1167            }
;;;1168   
;;;1169            if ((png_ptr->do_filter & PNG_FILTER_UP) && png_ptr->up_row == NULL)
;;;1170            {
;;;1171               if (png_ptr->prev_row == NULL)
;;;1172               {
;;;1173                  png_warning(png_ptr, "Can't add Up filter after starting");
;;;1174                  png_ptr->do_filter &= ~PNG_FILTER_UP;
;;;1175               }
;;;1176               else
;;;1177               {
;;;1178                  png_ptr->up_row = (png_bytep)png_malloc(png_ptr,
;;;1179                     (png_ptr->rowbytes + 1));
;;;1180                  png_ptr->up_row[0] = PNG_FILTER_VALUE_UP;
;;;1181               }
;;;1182            }
;;;1183   
;;;1184            if ((png_ptr->do_filter & PNG_FILTER_AVG) && png_ptr->avg_row == NULL)
;;;1185            {
;;;1186               if (png_ptr->prev_row == NULL)
;;;1187               {
;;;1188                  png_warning(png_ptr, "Can't add Average filter after starting");
;;;1189                  png_ptr->do_filter &= ~PNG_FILTER_AVG;
;;;1190               }
;;;1191               else
;;;1192               {
;;;1193                  png_ptr->avg_row = (png_bytep)png_malloc(png_ptr,
;;;1194                     (png_ptr->rowbytes + 1));
;;;1195                  png_ptr->avg_row[0] = PNG_FILTER_VALUE_AVG;
;;;1196               }
;;;1197            }
;;;1198   
;;;1199            if ((png_ptr->do_filter & PNG_FILTER_PAETH) &&
;;;1200                png_ptr->paeth_row == NULL)
;;;1201            {
;;;1202               if (png_ptr->prev_row == NULL)
;;;1203               {
;;;1204                  png_warning(png_ptr, "Can't add Paeth filter after starting");
;;;1205                  png_ptr->do_filter &= (png_byte)(~PNG_FILTER_PAETH);
;;;1206               }
;;;1207               else
;;;1208               {
;;;1209                  png_ptr->paeth_row = (png_bytep)png_malloc(png_ptr,
;;;1210                     (png_ptr->rowbytes + 1));
;;;1211                  png_ptr->paeth_row[0] = PNG_FILTER_VALUE_PAETH;
;;;1212               }
;;;1213            }
;;;1214   
;;;1215            if (png_ptr->do_filter == PNG_NO_FILTERS)
;;;1216               png_ptr->do_filter = PNG_FILTER_NONE;
;;;1217         }
;;;1218      }
;;;1219      else
;;;1220         png_error(png_ptr, "Unknown custom filter method");
;;;1221   }
00104a  bd70              POP      {r4-r6,pc}
                  |L1.4172|
00104c  f894036c          LDRB     r0,[r4,#0x36c]        ;1132
001050  f0000004          AND      r0,r0,#4              ;1132
001054  b110              CBZ      r0,|L1.4188|
001056  2d40              CMP      r5,#0x40              ;1133
001058  d100              BNE      |L1.4188|
00105a  2500              MOVS     r5,#0                 ;1134
                  |L1.4188|
00105c  2d00              CMP      r5,#0                 ;1136
00105e  d177              BNE      |L1.4432|
001060  b2f0              UXTB     r0,r6                 ;1138
001062  2808              CMP      r0,#8                 ;1138
001064  d220              BCS      |L1.4264|
001066  e8dff000          TBB      [pc,r0]               ;1138
00106a  0b0f              DCB      0x0b,0x0f
00106c  13171b04          DCB      0x13,0x17,0x1b,0x04
001070  0506              DCB      0x05,0x06
001072  bf00              NOP                            ;1141
001074  bf00              NOP                            ;1142
001076  a17e              ADR      r1,|L1.4720|
001078  4620              MOV      r0,r4                 ;1142
00107a  f7fffffe          BL       png_warning
00107e  bf00              NOP                            ;1143
001080  2008              MOVS     r0,#8                 ;1143
001082  f8840265          STRB     r0,[r4,#0x265]        ;1143
001086  e012              B        |L1.4270|
001088  2010              MOVS     r0,#0x10              ;1144
00108a  f8840265          STRB     r0,[r4,#0x265]        ;1144
00108e  e00e              B        |L1.4270|
001090  2020              MOVS     r0,#0x20              ;1145
001092  f8840265          STRB     r0,[r4,#0x265]        ;1145
001096  e00a              B        |L1.4270|
001098  2040              MOVS     r0,#0x40              ;1146
00109a  f8840265          STRB     r0,[r4,#0x265]        ;1146
00109e  e006              B        |L1.4270|
0010a0  2080              MOVS     r0,#0x80              ;1147
0010a2  f8840265          STRB     r0,[r4,#0x265]        ;1147
0010a6  e002              B        |L1.4270|
                  |L1.4264|
0010a8  f8846265          STRB     r6,[r4,#0x265]        ;1148
0010ac  bf00              NOP                            ;1148
                  |L1.4270|
0010ae  bf00              NOP                            ;1143
0010b0  f8d4022c          LDR      r0,[r4,#0x22c]        ;1160
0010b4  2800              CMP      r0,#0                 ;1160
0010b6  d06e              BEQ      |L1.4502|
0010b8  f8940265          LDRB     r0,[r4,#0x265]        ;1162
0010bc  f0000010          AND      r0,r0,#0x10           ;1162
0010c0  b170              CBZ      r0,|L1.4320|
0010c2  f8d40230          LDR      r0,[r4,#0x230]        ;1162
0010c6  b958              CBNZ     r0,|L1.4320|
0010c8  f8d40218          LDR      r0,[r4,#0x218]        ;1164
0010cc  1c41              ADDS     r1,r0,#1              ;1164
0010ce  4620              MOV      r0,r4                 ;1164
0010d0  f7fffffe          BL       png_malloc
0010d4  f8c40230          STR      r0,[r4,#0x230]        ;1164
0010d8  2001              MOVS     r0,#1                 ;1166
0010da  f8d41230          LDR      r1,[r4,#0x230]        ;1166
0010de  7008              STRB     r0,[r1,#0]            ;1166
                  |L1.4320|
0010e0  f8940265          LDRB     r0,[r4,#0x265]        ;1169
0010e4  f0000020          AND      r0,r0,#0x20           ;1169
0010e8  b1e0              CBZ      r0,|L1.4388|
0010ea  f8d40234          LDR      r0,[r4,#0x234]        ;1169
0010ee  b9c8              CBNZ     r0,|L1.4388|
0010f0  f8d40228          LDR      r0,[r4,#0x228]        ;1171
0010f4  b950              CBNZ     r0,|L1.4364|
0010f6  a166              ADR      r1,|L1.4752|
0010f8  4620              MOV      r0,r4                 ;1173
0010fa  f7fffffe          BL       png_warning
0010fe  f8940265          LDRB     r0,[r4,#0x265]        ;1174
001102  f0200020          BIC      r0,r0,#0x20           ;1174
001106  f8840265          STRB     r0,[r4,#0x265]        ;1174
00110a  e00b              B        |L1.4388|
                  |L1.4364|
00110c  f8d40218          LDR      r0,[r4,#0x218]        ;1178
001110  1c41              ADDS     r1,r0,#1              ;1178
001112  4620              MOV      r0,r4                 ;1178
001114  f7fffffe          BL       png_malloc
001118  f8c40234          STR      r0,[r4,#0x234]        ;1178
00111c  2002              MOVS     r0,#2                 ;1180
00111e  f8d41234          LDR      r1,[r4,#0x234]        ;1180
001122  7008              STRB     r0,[r1,#0]            ;1180
                  |L1.4388|
001124  f8940265          LDRB     r0,[r4,#0x265]        ;1184
001128  f0000040          AND      r0,r0,#0x40           ;1184
00112c  b1e8              CBZ      r0,|L1.4458|
00112e  f8d40238          LDR      r0,[r4,#0x238]        ;1184
001132  b9d0              CBNZ     r0,|L1.4458|
001134  f8d40228          LDR      r0,[r4,#0x228]        ;1186
001138  b958              CBNZ     r0,|L1.4434|
00113a  a15e              ADR      r1,|L1.4788|
00113c  4620              MOV      r0,r4                 ;1188
00113e  f7fffffe          BL       png_warning
001142  f8940265          LDRB     r0,[r4,#0x265]        ;1189
001146  f0200040          BIC      r0,r0,#0x40           ;1189
00114a  f8840265          STRB     r0,[r4,#0x265]        ;1189
00114e  e00c              B        |L1.4458|
                  |L1.4432|
001150  e035              B        |L1.4542|
                  |L1.4434|
001152  f8d40218          LDR      r0,[r4,#0x218]        ;1193
001156  1c41              ADDS     r1,r0,#1              ;1193
001158  4620              MOV      r0,r4                 ;1193
00115a  f7fffffe          BL       png_malloc
00115e  f8c40238          STR      r0,[r4,#0x238]        ;1193
001162  2003              MOVS     r0,#3                 ;1195
001164  f8d41238          LDR      r1,[r4,#0x238]        ;1195
001168  7008              STRB     r0,[r1,#0]            ;1195
                  |L1.4458|
00116a  f8940265          LDRB     r0,[r4,#0x265]        ;1199
00116e  f0000080          AND      r0,r0,#0x80           ;1199
001172  b1e8              CBZ      r0,|L1.4528|
001174  f8d4023c          LDR      r0,[r4,#0x23c]        ;1200
001178  b9d0              CBNZ     r0,|L1.4528|
00117a  f8d40228          LDR      r0,[r4,#0x228]        ;1202
00117e  b958              CBNZ     r0,|L1.4504|
001180  a156              ADR      r1,|L1.4828|
001182  4620              MOV      r0,r4                 ;1204
001184  f7fffffe          BL       png_warning
001188  f8940265          LDRB     r0,[r4,#0x265]        ;1205
00118c  f000007f          AND      r0,r0,#0x7f           ;1205
001190  f8840265          STRB     r0,[r4,#0x265]        ;1205
001194  e00c              B        |L1.4528|
                  |L1.4502|
001196  e016              B        |L1.4550|
                  |L1.4504|
001198  f8d40218          LDR      r0,[r4,#0x218]        ;1209
00119c  1c41              ADDS     r1,r0,#1              ;1209
00119e  4620              MOV      r0,r4                 ;1209
0011a0  f7fffffe          BL       png_malloc
0011a4  f8c4023c          STR      r0,[r4,#0x23c]        ;1209
0011a8  2004              MOVS     r0,#4                 ;1211
0011aa  f8d4123c          LDR      r1,[r4,#0x23c]        ;1211
0011ae  7008              STRB     r0,[r1,#0]            ;1211
                  |L1.4528|
0011b0  f8940265          LDRB     r0,[r4,#0x265]        ;1215
0011b4  b938              CBNZ     r0,|L1.4550|
0011b6  2008              MOVS     r0,#8                 ;1216
0011b8  f8840265          STRB     r0,[r4,#0x265]        ;1216
0011bc  e003              B        |L1.4550|
                  |L1.4542|
0011be  a151              ADR      r1,|L1.4868|
0011c0  4620              MOV      r0,r4                 ;1220
0011c2  f7fffffe          BL       png_error
                  |L1.4550|
0011c6  bf00              NOP      
0011c8  e73f              B        |L1.4170|
;;;1222   
                          ENDP

                  png_set_compression_level PROC
;;;1349   void PNGAPI
;;;1350   png_set_compression_level(png_structp png_ptr, int level)
0011ca  b900              CBNZ     r0,|L1.4558|
                  |L1.4556|
;;;1351   {
;;;1352      png_debug(1, "in png_set_compression_level\n");
;;;1353      if (png_ptr == NULL)
;;;1354         return;
;;;1355      png_ptr->flags |= PNG_FLAG_ZLIB_CUSTOM_LEVEL;
;;;1356      png_ptr->zlib_level = level;
;;;1357   }
0011cc  4770              BX       lr
                  |L1.4558|
0011ce  f8d021ac          LDR      r2,[r0,#0x1ac]        ;1355
0011d2  f0420202          ORR      r2,r2,#2              ;1355
0011d6  f8c021ac          STR      r2,[r0,#0x1ac]        ;1355
0011da  f8c011f4          STR      r1,[r0,#0x1f4]        ;1356
0011de  bf00              NOP      
0011e0  e7f4              B        |L1.4556|
;;;1358   
                          ENDP

                  png_set_compression_mem_level PROC
;;;1359   void PNGAPI
;;;1360   png_set_compression_mem_level(png_structp png_ptr, int mem_level)
0011e2  b900              CBNZ     r0,|L1.4582|
                  |L1.4580|
;;;1361   {
;;;1362      png_debug(1, "in png_set_compression_mem_level\n");
;;;1363      if (png_ptr == NULL)
;;;1364         return;
;;;1365      png_ptr->flags |= PNG_FLAG_ZLIB_CUSTOM_MEM_LEVEL;
;;;1366      png_ptr->zlib_mem_level = mem_level;
;;;1367   }
0011e4  4770              BX       lr
                  |L1.4582|
0011e6  f8d021ac          LDR      r2,[r0,#0x1ac]        ;1365
0011ea  f0420204          ORR      r2,r2,#4              ;1365
0011ee  f8c021ac          STR      r2,[r0,#0x1ac]        ;1365
0011f2  f8c01200          STR      r1,[r0,#0x200]        ;1366
0011f6  bf00              NOP      
0011f8  e7f4              B        |L1.4580|
;;;1368   
                          ENDP

                  png_set_compression_strategy PROC
;;;1369   void PNGAPI
;;;1370   png_set_compression_strategy(png_structp png_ptr, int strategy)
0011fa  b900              CBNZ     r0,|L1.4606|
                  |L1.4604|
;;;1371   {
;;;1372      png_debug(1, "in png_set_compression_strategy\n");
;;;1373      if (png_ptr == NULL)
;;;1374         return;
;;;1375      png_ptr->flags |= PNG_FLAG_ZLIB_CUSTOM_STRATEGY;
;;;1376      png_ptr->zlib_strategy = strategy;
;;;1377   }
0011fc  4770              BX       lr
                  |L1.4606|
0011fe  f8d021ac          LDR      r2,[r0,#0x1ac]        ;1375
001202  f0420201          ORR      r2,r2,#1              ;1375
001206  f8c021ac          STR      r2,[r0,#0x1ac]        ;1375
00120a  f8c01204          STR      r1,[r0,#0x204]        ;1376
00120e  bf00              NOP      
001210  e7f4              B        |L1.4604|
;;;1378   
                          ENDP

                  png_set_compression_window_bits PROC
;;;1379   void PNGAPI
;;;1380   png_set_compression_window_bits(png_structp png_ptr, int window_bits)
001212  b570              PUSH     {r4-r6,lr}
;;;1381   {
001214  4604              MOV      r4,r0
001216  460d              MOV      r5,r1
;;;1382      if (png_ptr == NULL)
001218  b904              CBNZ     r4,|L1.4636|
                  |L1.4634|
;;;1383         return;
;;;1384      if (window_bits > 15)
;;;1385         png_warning(png_ptr, "Only compression windows <= 32k supported by PNG");
;;;1386      else if (window_bits < 8)
;;;1387         png_warning(png_ptr, "Only compression windows >= 256 supported by PNG");
;;;1388   #ifndef WBITS_8_OK
;;;1389      /* avoid libpng bug with 256-byte windows */
;;;1390      if (window_bits == 8)
;;;1391        {
;;;1392          png_warning(png_ptr, "Compression window is being reset to 512");
;;;1393          window_bits=9;
;;;1394        }
;;;1395   #endif
;;;1396      png_ptr->flags |= PNG_FLAG_ZLIB_CUSTOM_WINDOW_BITS;
;;;1397      png_ptr->zlib_window_bits = window_bits;
;;;1398   }
00121a  bd70              POP      {r4-r6,pc}
                  |L1.4636|
00121c  2d0f              CMP      r5,#0xf               ;1384
00121e  dd04              BLE      |L1.4650|
001220  a140              ADR      r1,|L1.4900|
001222  4620              MOV      r0,r4                 ;1385
001224  f7fffffe          BL       png_warning
001228  e005              B        |L1.4662|
                  |L1.4650|
00122a  2d08              CMP      r5,#8                 ;1386
00122c  da03              BGE      |L1.4662|
00122e  a14a              ADR      r1,|L1.4952|
001230  4620              MOV      r0,r4                 ;1387
001232  f7fffffe          BL       png_warning
                  |L1.4662|
001236  2d08              CMP      r5,#8                 ;1390
001238  d104              BNE      |L1.4676|
00123a  a154              ADR      r1,|L1.5004|
00123c  4620              MOV      r0,r4                 ;1392
00123e  f7fffffe          BL       png_warning
001242  2509              MOVS     r5,#9                 ;1393
                  |L1.4676|
001244  f8d401ac          LDR      r0,[r4,#0x1ac]        ;1396
001248  f0400008          ORR      r0,r0,#8              ;1396
00124c  f8c401ac          STR      r0,[r4,#0x1ac]        ;1396
001250  f8c451fc          STR      r5,[r4,#0x1fc]        ;1397
001254  bf00              NOP      
001256  e7e0              B        |L1.4634|
;;;1399   
                          ENDP

                  png_set_compression_method PROC
;;;1400   void PNGAPI
;;;1401   png_set_compression_method(png_structp png_ptr, int method)
001258  b570              PUSH     {r4-r6,lr}
;;;1402   {
00125a  4604              MOV      r4,r0
00125c  460d              MOV      r5,r1
;;;1403      png_debug(1, "in png_set_compression_method\n");
;;;1404      if (png_ptr == NULL)
00125e  b904              CBNZ     r4,|L1.4706|
;;;1405         return;
;;;1406      if (method != 8)
;;;1407         png_warning(png_ptr, "Only compression method 8 is supported by PNG");
;;;1408      png_ptr->flags |= PNG_FLAG_ZLIB_CUSTOM_METHOD;
;;;1409      png_ptr->zlib_method = method;
;;;1410   }
001260  bd70              POP      {r4-r6,pc}
                  |L1.4706|
001262  e0a9              B        |L1.5048|
                  |L1.4708|
001264  7a6c6962          DCB      "zlib error",0
001268  20657272
00126c  6f7200  
00126f  00                DCB      0
                  |L1.4720|
001270  556e6b6e          DCB      "Unknown row filter for method 0",0
001274  6f776e20
001278  726f7720
00127c  66696c74
001280  65722066
001284  6f72206d
001288  6574686f
00128c  64203000
                  |L1.4752|
001290  43616e27          DCB      "Can't add Up filter after starting",0
001294  74206164
001298  64205570
00129c  2066696c
0012a0  74657220
0012a4  61667465
0012a8  72207374
0012ac  61727469
0012b0  6e6700  
0012b3  00                DCB      0
                  |L1.4788|
0012b4  43616e27          DCB      "Can't add Average filter after starting",0
0012b8  74206164
0012bc  64204176
0012c0  65726167
0012c4  65206669
0012c8  6c746572
0012cc  20616674
0012d0  65722073
0012d4  74617274
0012d8  696e6700
                  |L1.4828|
0012dc  43616e27          DCB      "Can't add Paeth filter after starting",0
0012e0  74206164
0012e4  64205061
0012e8  65746820
0012ec  66696c74
0012f0  65722061
0012f4  66746572
0012f8  20737461
0012fc  7274696e
001300  6700    
001302  00                DCB      0
001303  00                DCB      0
                  |L1.4868|
001304  556e6b6e          DCB      "Unknown custom filter method",0
001308  6f776e20
00130c  63757374
001310  6f6d2066
001314  696c7465
001318  72206d65
00131c  74686f64
001320  00      
001321  00                DCB      0
001322  00                DCB      0
001323  00                DCB      0
                  |L1.4900|
001324  4f6e6c79          DCB      "Only compression windows <= 32k supported by PNG",0
001328  20636f6d
00132c  70726573
001330  73696f6e
001334  2077696e
001338  646f7773
00133c  203c3d20
001340  33326b20
001344  73757070
001348  6f727465
00134c  64206279
001350  20504e47
001354  00      
001355  00                DCB      0
001356  00                DCB      0
001357  00                DCB      0
                  |L1.4952|
001358  4f6e6c79          DCB      "Only compression windows >= 256 supported by PNG",0
00135c  20636f6d
001360  70726573
001364  73696f6e
001368  2077696e
00136c  646f7773
001370  203e3d20
001374  32353620
001378  73757070
00137c  6f727465
001380  64206279
001384  20504e47
001388  00      
001389  00                DCB      0
00138a  00                DCB      0
00138b  00                DCB      0
                  |L1.5004|
00138c  436f6d70          DCB      "Compression window is being reset to 512",0
001390  72657373
001394  696f6e20
001398  77696e64
00139c  6f772069
0013a0  73206265
0013a4  696e6720
0013a8  72657365
0013ac  7420746f
0013b0  20353132
0013b4  00      
0013b5  00                DCB      0
0013b6  00                DCB      0
0013b7  00                DCB      0
                  |L1.5048|
0013b8  2d08              CMP      r5,#8                 ;1406
0013ba  d003              BEQ      |L1.5060|
0013bc  a13e              ADR      r1,|L1.5304|
0013be  4620              MOV      r0,r4                 ;1407
0013c0  f7fffffe          BL       png_warning
                  |L1.5060|
0013c4  f8d401ac          LDR      r0,[r4,#0x1ac]        ;1408
0013c8  f0400010          ORR      r0,r0,#0x10           ;1408
0013cc  f8c401ac          STR      r0,[r4,#0x1ac]        ;1408
0013d0  f8c451f8          STR      r5,[r4,#0x1f8]        ;1409
0013d4  bf00              NOP      
0013d6  bd70              POP      {r4-r6,pc}
;;;1411   
                          ENDP

                  png_set_write_status_fn PROC
;;;1412   void PNGAPI
;;;1413   png_set_write_status_fn(png_structp png_ptr, png_write_status_ptr write_row_fn)
0013d8  b900              CBNZ     r0,|L1.5084|
                  |L1.5082|
;;;1414   {
;;;1415      if (png_ptr == NULL)
;;;1416         return;
;;;1417      png_ptr->write_row_fn = write_row_fn;
;;;1418   }
0013da  4770              BX       lr
                  |L1.5084|
0013dc  f8c012dc          STR      r1,[r0,#0x2dc]        ;1417
0013e0  bf00              NOP      
0013e2  e7fa              B        |L1.5082|
;;;1419   
                          ENDP

                  png_set_write_user_transform_fn PROC
;;;1421   void PNGAPI
;;;1422   png_set_write_user_transform_fn(png_structp png_ptr, png_user_transform_ptr
0013e4  b900              CBNZ     r0,|L1.5096|
                  |L1.5094|
;;;1423      write_user_transform_fn)
;;;1424   {
;;;1425      png_debug(1, "in png_set_write_user_transform_fn\n");
;;;1426      if (png_ptr == NULL)
;;;1427         return;
;;;1428      png_ptr->transformations |= PNG_USER_TRANSFORM;
;;;1429      png_ptr->write_user_transform_fn = write_user_transform_fn;
;;;1430   }
0013e6  4770              BX       lr
                  |L1.5096|
0013e8  f8d021b0          LDR      r2,[r0,#0x1b0]        ;1428
0013ec  f4421280          ORR      r2,r2,#0x100000       ;1428
0013f0  f8c021b0          STR      r2,[r0,#0x1b0]        ;1428
0013f4  f8c0119c          STR      r1,[r0,#0x19c]        ;1429
0013f8  bf00              NOP      
0013fa  e7f4              B        |L1.5094|
;;;1431   #endif
                          ENDP

                  png_write_png PROC
;;;1435   void PNGAPI
;;;1436   png_write_png(png_structp png_ptr, png_infop info_ptr,
0013fc  e92d41f0          PUSH     {r4-r8,lr}
;;;1437                 int transforms, voidp params)
;;;1438   {
001400  4606              MOV      r6,r0
001402  460d              MOV      r5,r1
001404  4614              MOV      r4,r2
001406  461f              MOV      r7,r3
;;;1439      if (png_ptr == NULL || info_ptr == NULL)
001408  b106              CBZ      r6,|L1.5132|
00140a  b90d              CBNZ     r5,|L1.5136|
                  |L1.5132|
;;;1440         return;
;;;1441   #if defined(PNG_WRITE_INVERT_ALPHA_SUPPORTED)
;;;1442      /* invert the alpha channel from opacity to transparency */
;;;1443      if (transforms & PNG_TRANSFORM_INVERT_ALPHA)
;;;1444          png_set_invert_alpha(png_ptr);
;;;1445   #endif
;;;1446   
;;;1447      /* Write the file header information. */
;;;1448      png_write_info(png_ptr, info_ptr);
;;;1449   
;;;1450      /* ------ these transformations don't touch the info structure ------- */
;;;1451   
;;;1452   #if defined(PNG_WRITE_INVERT_SUPPORTED)
;;;1453      /* invert monochrome pixels */
;;;1454      if (transforms & PNG_TRANSFORM_INVERT_MONO)
;;;1455          png_set_invert_mono(png_ptr);
;;;1456   #endif
;;;1457   
;;;1458   #if defined(PNG_WRITE_SHIFT_SUPPORTED)
;;;1459      /* Shift the pixels up to a legal bit depth and fill in
;;;1460       * as appropriate to correctly scale the image.
;;;1461       */
;;;1462      if ((transforms & PNG_TRANSFORM_SHIFT)
;;;1463                  && (info_ptr->valid & PNG_INFO_sBIT))
;;;1464          png_set_shift(png_ptr, &info_ptr->sig_bit);
;;;1465   #endif
;;;1466   
;;;1467   #if defined(PNG_WRITE_PACK_SUPPORTED)
;;;1468      /* pack pixels into bytes */
;;;1469      if (transforms & PNG_TRANSFORM_PACKING)
;;;1470          png_set_packing(png_ptr);
;;;1471   #endif
;;;1472   
;;;1473   #if defined(PNG_WRITE_SWAP_ALPHA_SUPPORTED)
;;;1474      /* swap location of alpha bytes from ARGB to RGBA */
;;;1475      if (transforms & PNG_TRANSFORM_SWAP_ALPHA)
;;;1476          png_set_swap_alpha(png_ptr);
;;;1477   #endif
;;;1478   
;;;1479   #if defined(PNG_WRITE_FILLER_SUPPORTED)
;;;1480      /* Get rid of filler (OR ALPHA) bytes, pack XRGB/RGBX/ARGB/RGBA into
;;;1481       * RGB (4 channels -> 3 channels). The second parameter is not used.
;;;1482       */
;;;1483      if (transforms & PNG_TRANSFORM_STRIP_FILLER)
;;;1484          png_set_filler(png_ptr, 0, PNG_FILLER_BEFORE);
;;;1485   #endif
;;;1486   
;;;1487   #if defined(PNG_WRITE_BGR_SUPPORTED)
;;;1488      /* flip BGR pixels to RGB */
;;;1489      if (transforms & PNG_TRANSFORM_BGR)
;;;1490          png_set_bgr(png_ptr);
;;;1491   #endif
;;;1492   
;;;1493   #if defined(PNG_WRITE_SWAP_SUPPORTED)
;;;1494      /* swap bytes of 16-bit files to most significant byte first */
;;;1495      if (transforms & PNG_TRANSFORM_SWAP_ENDIAN)
;;;1496          png_set_swap(png_ptr);
;;;1497   #endif
;;;1498   
;;;1499   #if defined(PNG_WRITE_PACKSWAP_SUPPORTED)
;;;1500      /* swap bits of 1, 2, 4 bit packed pixel formats */
;;;1501      if (transforms & PNG_TRANSFORM_PACKSWAP)
;;;1502          png_set_packswap(png_ptr);
;;;1503   #endif
;;;1504   
;;;1505      /* ----------------------- end of transformations ------------------- */
;;;1506   
;;;1507      /* write the bits */
;;;1508      if (info_ptr->valid & PNG_INFO_IDAT)
;;;1509          png_write_image(png_ptr, info_ptr->row_pointers);
;;;1510   
;;;1511      /* It is REQUIRED to call this to finish writing the rest of the file */
;;;1512      png_write_end(png_ptr, info_ptr);
;;;1513   
;;;1514      if(transforms == 0 || params == NULL)
;;;1515         /* quiet compiler warnings */ return;
;;;1516   }
00140c  e8bd81f0          POP      {r4-r8,pc}
                  |L1.5136|
001410  f4046080          AND      r0,r4,#0x400          ;1443
001414  b110              CBZ      r0,|L1.5148|
001416  4630              MOV      r0,r6                 ;1444
001418  f7fffffe          BL       png_set_invert_alpha
                  |L1.5148|
00141c  4629              MOV      r1,r5                 ;1448
00141e  4630              MOV      r0,r6                 ;1448
001420  f7fffffe          BL       png_write_info
001424  f0040020          AND      r0,r4,#0x20           ;1454
001428  b110              CBZ      r0,|L1.5168|
00142a  4630              MOV      r0,r6                 ;1455
00142c  f7fffffe          BL       png_set_invert_mono
                  |L1.5168|
001430  f0040040          AND      r0,r4,#0x40           ;1462
001434  b140              CBZ      r0,|L1.5192|
001436  7a28              LDRB     r0,[r5,#8]            ;1463
001438  f0000002          AND      r0,r0,#2              ;1463
00143c  b120              CBZ      r0,|L1.5192|
00143e  f1050144          ADD      r1,r5,#0x44           ;1464
001442  4630              MOV      r0,r6                 ;1464
001444  f7fffffe          BL       png_set_shift
                  |L1.5192|
001448  f0040004          AND      r0,r4,#4              ;1469
00144c  b110              CBZ      r0,|L1.5204|
00144e  4630              MOV      r0,r6                 ;1470
001450  f7fffffe          BL       png_set_packing
                  |L1.5204|
001454  f4047080          AND      r0,r4,#0x100          ;1475
001458  b110              CBZ      r0,|L1.5216|
00145a  4630              MOV      r0,r6                 ;1476
00145c  f7fffffe          BL       png_set_swap_alpha
                  |L1.5216|
001460  f4046000          AND      r0,r4,#0x800          ;1483
001464  b120              CBZ      r0,|L1.5232|
001466  2200              MOVS     r2,#0                 ;1484
001468  4611              MOV      r1,r2                 ;1484
00146a  4630              MOV      r0,r6                 ;1484
00146c  f7fffffe          BL       png_set_filler
                  |L1.5232|
001470  f0040080          AND      r0,r4,#0x80           ;1489
001474  b110              CBZ      r0,|L1.5244|
001476  4630              MOV      r0,r6                 ;1490
001478  f7fffffe          BL       png_set_bgr
                  |L1.5244|
00147c  f4047000          AND      r0,r4,#0x200          ;1495
001480  b110              CBZ      r0,|L1.5256|
001482  4630              MOV      r0,r6                 ;1496
001484  f7fffffe          BL       png_set_swap
                  |L1.5256|
001488  f0040008          AND      r0,r4,#8              ;1501
00148c  b110              CBZ      r0,|L1.5268|
00148e  4630              MOV      r0,r6                 ;1502
001490  f7fffffe          BL       png_set_packswap
                  |L1.5268|
001494  8928              LDRH     r0,[r5,#8]            ;1508
001496  f4004000          AND      r0,r0,#0x8000         ;1508
00149a  b120              CBZ      r0,|L1.5286|
00149c  4630              MOV      r0,r6                 ;1509
00149e  f8d510f8          LDR      r1,[r5,#0xf8]         ;1509
0014a2  f7fffffe          BL       png_write_image
                  |L1.5286|
0014a6  4629              MOV      r1,r5                 ;1512
0014a8  4630              MOV      r0,r6                 ;1512
0014aa  f7fffffe          BL       png_write_end
0014ae  b104              CBZ      r4,|L1.5298|
0014b0  b907              CBNZ     r7,|L1.5300|
                  |L1.5298|
0014b2  e7ab              B        |L1.5132|
                  |L1.5300|
0014b4  bf00              NOP      
0014b6  e7a9              B        |L1.5132|
;;;1517   #endif
                          ENDP

                  |L1.5304|
0014b8  4f6e6c79          DCB      "Only compression method 8 is supported by PNG",0
0014bc  20636f6d
0014c0  70726573
0014c4  73696f6e
0014c8  206d6574
0014cc  686f6420
0014d0  38206973
0014d4  20737570
0014d8  706f7274
0014dc  65642062
0014e0  7920504e
0014e4  4700    
0014e6  00                DCB      0
0014e7  00                DCB      0

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  4170706c          DCB      "Application uses deprecated png_write_init() and should"
000004  69636174
000008  696f6e20
00000c  75736573
000010  20646570
000014  72656361
000018  74656420
00001c  706e675f
000020  77726974
000024  655f696e
000028  69742829
00002c  20616e64
000030  2073686f
000034  756c64  
000037  20626520          DCB      " be recompiled.",0
00003b  7265636f
00003f  6d70696c
000043  65642e00
000047  00                DCB      0
000048  54686520          DCB      "The png struct allocated by the application for writing"
00004c  706e6720
000050  73747275
000054  63742061
000058  6c6c6f63
00005c  61746564
000060  20627920
000064  74686520
000068  6170706c
00006c  69636174
000070  696f6e20
000074  666f7220
000078  77726974
00007c  696e67  
00007f  20697320          DCB      " is too small.",0
000083  746f6f20
000087  736d616c
00008b  6c2e00  
00008e  00                DCB      0
00008f  00                DCB      0
000090  54686520          DCB      "The info struct allocated by the application for writin"
000094  696e666f
000098  20737472
00009c  75637420
0000a0  616c6c6f
0000a4  63617465
0000a8  64206279
0000ac  20746865
0000b0  20617070
0000b4  6c696361
0000b8  74696f6e
0000bc  20666f72
0000c0  20777269
0000c4  74696e  
0000c7  67206973          DCB      "g is too small.",0
0000cb  20746f6f
0000cf  20736d61
0000d3  6c6c2e00
