; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\inftrees.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\inftrees.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\FWlib\inc -I.\user -I.\CM3 -I.\MALLOC -I.\TFT -I.\EMWIN\EMWIN_INC -I.\EMWIN\DEMO -I.\FATFS -I.\SDIO -I.\PNG -IE:\material\GUI\STM32·Ü¶·°å-emwin+fatfs\RTE -Id:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.1.0\Device\Include -Id:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=515 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\inftrees.crf PNG\inftrees.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  inflate_table PROC
;;;40     */
;;;41     int inflate_table(codetype type, 
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;42                       unsigned short FAR *lens, 
;;;43                       unsigned codes, 
;;;44                       code FAR * FAR *table, 
;;;45                       unsigned FAR *bits, 
;;;46                       unsigned short FAR *work)                  
;;;47     {
000004  b09b              SUB      sp,sp,#0x6c
;;;48         unsigned len;               /* a code's length in bits */
;;;49         unsigned sym;               /* index of code symbols */
;;;50         unsigned min, max;          /* minimum and maximum code lengths */
;;;51         unsigned root;              /* number of index bits for root table */
;;;52         unsigned curr;              /* number of index bits for current table */
;;;53         unsigned drop;              /* code bits to drop for sub-table */
;;;54         int left;                   /* number of prefix codes available */
;;;55         unsigned used;              /* code entries in table used */
;;;56         unsigned huff;              /* Huffman code */
;;;57         unsigned incr;              /* for incrementing code, index */
;;;58         unsigned fill;              /* index for replicating entries */
;;;59         unsigned low;               /* low bits for current root entry */
;;;60         unsigned mask;              /* mask for low root bits */
;;;61         code this;                  /* table entry for duplication */
;;;62         code FAR *next;             /* next available space in table */
;;;63         const unsigned short FAR *base;     /* base value table to use */
;;;64         const unsigned short FAR *extra;    /* extra bits table to use */
;;;65         int end;                    /* use base and extra for symbol > end */
;;;66         unsigned short count[MAXBITS+1];    /* number of codes of each length */
;;;67         unsigned short offs[MAXBITS+1];     /* offsets in table for each length */
;;;68         static const unsigned short lbase[31] = { /* Length codes 257..285 base */
;;;69             3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
;;;70             35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0};
;;;71         static const unsigned short lext[31] = { /* Length codes 257..285 extra */
;;;72             16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,
;;;73             19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 201, 196};
;;;74         static const unsigned short dbase[32] = { /* Distance codes 0..29 base */
;;;75             1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
;;;76             257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
;;;77             8193, 12289, 16385, 24577, 0, 0};
;;;78         static const unsigned short dext[32] = { /* Distance codes 0..29 extra */
;;;79             16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,
;;;80             23, 23, 24, 24, 25, 25, 26, 26, 27, 27,
;;;81             28, 28, 29, 29, 64, 64};
;;;82     
;;;83         /*
;;;84            Process a set of code lengths to create a canonical Huffman code.  The
;;;85            code lengths are lens[0..codes-1].  Each length corresponds to the
;;;86            symbols 0..codes-1.  The Huffman code is generated by first sorting the
;;;87            symbols by length from short to long, and retaining the symbol order
;;;88            for codes with equal lengths.  Then the code starts with all zero bits
;;;89            for the first code of the shortest length, and the codes are integer
;;;90            increments for the same length, and zeros are appended as the length
;;;91            increases.  For the deflate format, these bits are stored backwards
;;;92            from their more natural integer increment ordering, and so when the
;;;93            decoding tables are built in the large loop below, the integer codes
;;;94            are incremented backwards.
;;;95     
;;;96            This routine assumes, but does not check, that all of the entries in
;;;97            lens[] are in the range 0..MAXBITS.  The caller must assure this.
;;;98            1..MAXBITS is interpreted as that code length.  zero means that that
;;;99            symbol does not occur in this code.
;;;100    
;;;101           The codes are sorted by computing a count of codes for each length,
;;;102           creating from that a table of starting indices for each length in the
;;;103           sorted table, and then entering the symbols in order in the sorted
;;;104           table.  The sorted table is work[], with that space being provided by
;;;105           the caller.
;;;106    
;;;107           The length counts are used for other purposes as well, i.e. finding
;;;108           the minimum and maximum length codes, determining if there are any
;;;109           codes at all, checking for a valid set of lengths, and looking ahead
;;;110           at length counts to determine sub-table sizes when building the
;;;111           decoding tables.
;;;112         */
;;;113    
;;;114        /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
;;;115        for (len = 0; len <= MAXBITS; len++)
000006  2100              MOVS     r1,#0
000008  e005              B        |L1.22|
                  |L1.10|
;;;116            count[len] = 0;
00000a  2000              MOVS     r0,#0
00000c  f10d0920          ADD      r9,sp,#0x20
000010  f8290011          STRH     r0,[r9,r1,LSL #1]
000014  1c49              ADDS     r1,r1,#1              ;115
                  |L1.22|
000016  290f              CMP      r1,#0xf               ;115
000018  d9f7              BLS      |L1.10|
;;;117        for (sym = 0; sym < codes; sym++)
00001a  2200              MOVS     r2,#0
00001c  e011              B        |L1.66|
                  |L1.30|
;;;118            count[lens[sym]]++;
00001e  981c              LDR      r0,[sp,#0x70]
000020  f8300012          LDRH     r0,[r0,r2,LSL #1]
000024  f10d0920          ADD      r9,sp,#0x20
000028  f8390010          LDRH     r0,[r9,r0,LSL #1]
00002c  1c40              ADDS     r0,r0,#1
00002e  fa1ff980          UXTH     r9,r0
000032  981c              LDR      r0,[sp,#0x70]
000034  f8300012          LDRH     r0,[r0,r2,LSL #1]
000038  f10d0a20          ADD      r10,sp,#0x20
00003c  f82a9010          STRH     r9,[r10,r0,LSL #1]
000040  1c52              ADDS     r2,r2,#1              ;117
                  |L1.66|
000042  981d              LDR      r0,[sp,#0x74]         ;117
000044  4282              CMP      r2,r0                 ;117
000046  d3ea              BCC      |L1.30|
;;;119    
;;;120        /* bound code lengths, force root to be within code lengths */
;;;121        root = *bits;
000048  9828              LDR      r0,[sp,#0xa0]
00004a  6805              LDR      r5,[r0,#0]
;;;122        for (max = MAXBITS; max >= 1; max--)
00004c  f04f0c0f          MOV      r12,#0xf
000050  e006              B        |L1.96|
                  |L1.82|
;;;123            if (count[max] != 0) break;
000052  a808              ADD      r0,sp,#0x20
000054  f830001c          LDRH     r0,[r0,r12,LSL #1]
000058  b100              CBZ      r0,|L1.92|
00005a  e004              B        |L1.102|
                  |L1.92|
00005c  f1ac0c01          SUB      r12,r12,#1            ;122
                  |L1.96|
000060  f1bc0f00          CMP      r12,#0                ;122
000064  d1f5              BNE      |L1.82|
                  |L1.102|
000066  bf00              NOP      
;;;124        if (root > max) root = max;
000068  4565              CMP      r5,r12
00006a  d900              BLS      |L1.110|
00006c  4665              MOV      r5,r12
                  |L1.110|
;;;125        if (max == 0) {                     /* no symbols to code at all */
00006e  f1bc0f00          CMP      r12,#0
000072  d121              BNE      |L1.184|
;;;126            this.op = (unsigned char)64;    /* invalid code marker */
000074  2040              MOVS     r0,#0x40
000076  f88d0050          STRB     r0,[sp,#0x50]
;;;127            this.bits = (unsigned char)1;
00007a  2001              MOVS     r0,#1
00007c  f88d0051          STRB     r0,[sp,#0x51]
;;;128            this.val = (unsigned short)0;
000080  2000              MOVS     r0,#0
000082  f8ad0052          STRH     r0,[sp,#0x52]
;;;129            *(*table)++ = this;             /* make a table to force an error */
000086  f8d39000          LDR      r9,[r3,#0]
00008a  f1090004          ADD      r0,r9,#4
00008e  6018              STR      r0,[r3,#0]
000090  9814              LDR      r0,[sp,#0x50]
000092  f8c90000          STR      r0,[r9,#0]
;;;130            *(*table)++ = this;
000096  f8d39000          LDR      r9,[r3,#0]
00009a  f1090004          ADD      r0,r9,#4
00009e  6018              STR      r0,[r3,#0]
0000a0  9814              LDR      r0,[sp,#0x50]
0000a2  f8c90000          STR      r0,[r9,#0]
;;;131            *bits = 1;
0000a6  f04f0901          MOV      r9,#1
0000aa  9828              LDR      r0,[sp,#0xa0]
0000ac  f8c09000          STR      r9,[r0,#0]
;;;132            return 0;     /* no symbols, but wait for decoding to report error */
0000b0  2000              MOVS     r0,#0
                  |L1.178|
;;;133        }
;;;134        for (min = 1; min <= MAXBITS; min++)
;;;135            if (count[min] != 0) break;
;;;136        if (root < min) root = min;
;;;137    
;;;138        /* check for an over-subscribed or incomplete set of lengths */
;;;139        left = 1;
;;;140        for (len = 1; len <= MAXBITS; len++) {
;;;141            left <<= 1;
;;;142            left -= count[len];
;;;143            if (left < 0) return -1;        /* over-subscribed */
;;;144        }
;;;145        if (left > 0 && (type == CODES || max != 1))
;;;146            return -1;                      /* incomplete set */
;;;147    
;;;148        /* generate offsets into symbol table for each length for sorting */
;;;149        offs[1] = 0;
;;;150        for (len = 1; len < MAXBITS; len++)
;;;151            offs[len + 1] = offs[len] + count[len];
;;;152    
;;;153        /* sort symbols by length, by symbol order within each length */
;;;154        for (sym = 0; sym < codes; sym++)
;;;155            if (lens[sym] != 0) work[offs[lens[sym]]++] = (unsigned short)sym;
;;;156    
;;;157        /*
;;;158           Create and fill in decoding tables.  In this loop, the table being
;;;159           filled is at next and has curr index bits.  The code being used is huff
;;;160           with length len.  That code is converted to an index by dropping drop
;;;161           bits off of the bottom.  For codes where len is less than drop + curr,
;;;162           those top drop + curr - len bits are incremented through all values to
;;;163           fill the table with replicated entries.
;;;164    
;;;165           root is the number of index bits for the root table.  When len exceeds
;;;166           root, sub-tables are created pointed to by the root entry with an index
;;;167           of the low root bits of huff.  This is saved in low to check for when a
;;;168           new sub-table should be started.  drop is zero when the root table is
;;;169           being filled, and drop is root when sub-tables are being filled.
;;;170    
;;;171           When a new sub-table is needed, it is necessary to look ahead in the
;;;172           code lengths to determine what size sub-table is needed.  The length
;;;173           counts are used for this, and so count[] is decremented as codes are
;;;174           entered in the tables.
;;;175    
;;;176           used keeps track of how many table entries have been allocated from the
;;;177           provided *table space.  It is checked when a LENS table is being made
;;;178           against the space in *table, ENOUGH, minus the maximum space needed by
;;;179           the worst case distance code, MAXD.  This should never happen, but the
;;;180           sufficiency of ENOUGH has not been proven exhaustively, hence the check.
;;;181           This assumes that when type == LENS, bits == 9.
;;;182    
;;;183           sym increments through all symbols, and the loop terminates when
;;;184           all codes of length max, i.e. all codes, have been processed.  This
;;;185           routine permits incomplete codes, so another loop after this one fills
;;;186           in the rest of the decoding tables with invalid code markers.
;;;187         */
;;;188    
;;;189        /* set up for code type */
;;;190        switch (type) {
;;;191        case CODES:
;;;192            base = extra = work;    /* dummy value--not used */
;;;193            end = 19;
;;;194            break;
;;;195        case LENS:
;;;196            base = lbase;
;;;197            base -= 257;
;;;198            extra = lext;
;;;199            extra -= 257;
;;;200            end = 256;
;;;201            break;
;;;202        default:            /* DISTS */
;;;203            base = dbase;
;;;204            extra = dext;
;;;205            end = -1;
;;;206        }
;;;207    
;;;208        /* initialize state for loop */
;;;209        huff = 0;                   /* starting code */
;;;210        sym = 0;                    /* starting code symbol */
;;;211        len = min;                  /* starting code length */
;;;212        next = *table;              /* current table to fill in */
;;;213        curr = root;                /* current table index bits */
;;;214        drop = 0;                   /* current bits to drop from code for index */
;;;215        low = (unsigned)(-1);       /* trigger new sub-table when len > root */
;;;216        used = 1U << root;          /* use root table entries */
;;;217        mask = used - 1;            /* mask for comparing low */
;;;218    
;;;219        /* check available table space */
;;;220        if (type == LENS && used >= ENOUGH - MAXD)
;;;221            return 1;
;;;222    
;;;223        /* process all codes and make table entries */
;;;224        for (;;) {
;;;225            /* create table entry */
;;;226            this.bits = (unsigned char)(len - drop);
;;;227            if ((int)(work[sym]) < end) {
;;;228                this.op = (unsigned char)0;
;;;229                this.val = work[sym];
;;;230            }
;;;231            else if ((int)(work[sym]) > end) {
;;;232                this.op = (unsigned char)(extra[work[sym]]);
;;;233                this.val = base[work[sym]];
;;;234            }
;;;235            else {
;;;236                this.op = (unsigned char)(32 + 64);         /* end of block */
;;;237                this.val = 0;
;;;238            }
;;;239    
;;;240            /* replicate for those indices with low len bits equal to huff */
;;;241            incr = 1U << (len - drop);
;;;242            fill = 1U << curr;
;;;243            min = fill;                 /* save offset to next table */
;;;244            do {
;;;245                fill -= incr;
;;;246                next[(huff >> drop) + fill] = this;
;;;247            } while (fill != 0);
;;;248    
;;;249            /* backwards increment the len-bit code huff */
;;;250            incr = 1U << (len - 1);
;;;251            while (huff & incr)
;;;252                incr >>= 1;
;;;253            if (incr != 0) {
;;;254                huff &= incr - 1;
;;;255                huff += incr;
;;;256            }
;;;257            else
;;;258                huff = 0;
;;;259    
;;;260            /* go to next symbol, update count, len */
;;;261            sym++;
;;;262            if (--(count[len]) == 0) {
;;;263                if (len == max) break;
;;;264                len = lens[work[sym]];
;;;265            }
;;;266    
;;;267            /* create new sub-table if needed */
;;;268            if (len > root && (huff & mask) != low) {
;;;269                /* if first time, transition to sub-tables */
;;;270                if (drop == 0)
;;;271                    drop = root;
;;;272    
;;;273                /* increment past last table */
;;;274                next += min;            /* here min is 1 << curr */
;;;275    
;;;276                /* determine length of next table */
;;;277                curr = len - drop;
;;;278                left = (int)(1 << curr);
;;;279                while (curr + drop < max) {
;;;280                    left -= count[curr + drop];
;;;281                    if (left <= 0) break;
;;;282                    curr++;
;;;283                    left <<= 1;
;;;284                }
;;;285    
;;;286                /* check for enough space */
;;;287                used += 1U << curr;
;;;288                if (type == LENS && used >= ENOUGH - MAXD)
;;;289                    return 1;
;;;290    
;;;291                /* point entry in root table to sub-table */
;;;292                low = huff & mask;
;;;293                (*table)[low].op = (unsigned char)curr;
;;;294                (*table)[low].bits = (unsigned char)root;
;;;295                (*table)[low].val = (unsigned short)(next - *table);
;;;296            }
;;;297        }
;;;298    
;;;299        /*
;;;300           Fill in rest of table for incomplete codes.  This loop is similar to the
;;;301           loop above in incrementing huff for table indices.  It is assumed that
;;;302           len is equal to curr + drop, so there is no loop needed to increment
;;;303           through high index bits.  When the current sub-table is filled, the loop
;;;304           drops back to the root table to fill in any remaining entries there.
;;;305         */
;;;306        this.op = (unsigned char)64;                /* invalid code marker */
;;;307        this.bits = (unsigned char)(len - drop);
;;;308        this.val = (unsigned short)0;
;;;309        while (huff != 0) {
;;;310            /* when done with sub-table, drop back to root table */
;;;311            if (drop != 0 && (huff & mask) != low) {
;;;312                drop = 0;
;;;313                len = root;
;;;314                next = *table;
;;;315                this.bits = (unsigned char)len;
;;;316            }
;;;317    
;;;318            /* put invalid code marker in table */
;;;319            next[huff >> drop] = this;
;;;320    
;;;321            /* backwards increment the len-bit code huff */
;;;322            incr = 1U << (len - 1);
;;;323            while (huff & incr)
;;;324                incr >>= 1;
;;;325            if (incr != 0) {
;;;326                huff &= incr - 1;
;;;327                huff += incr;
;;;328            }
;;;329            else
;;;330                huff = 0;
;;;331        }
;;;332    
;;;333        /* set return parameters */
;;;334        *table += used;
;;;335        *bits = root;
;;;336        return 0;
;;;337    }
0000b2  b01f              ADD      sp,sp,#0x7c
0000b4  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.184|
0000b8  2001              MOVS     r0,#1                 ;134
0000ba  901a              STR      r0,[sp,#0x68]         ;134
0000bc  e009              B        |L1.210|
                  |L1.190|
0000be  f10d0920          ADD      r9,sp,#0x20           ;135
0000c2  981a              LDR      r0,[sp,#0x68]         ;135
0000c4  f8390010          LDRH     r0,[r9,r0,LSL #1]     ;135
0000c8  b100              CBZ      r0,|L1.204|
0000ca  e005              B        |L1.216|
                  |L1.204|
0000cc  981a              LDR      r0,[sp,#0x68]         ;134
0000ce  1c40              ADDS     r0,r0,#1              ;134
0000d0  901a              STR      r0,[sp,#0x68]         ;134
                  |L1.210|
0000d2  981a              LDR      r0,[sp,#0x68]         ;134
0000d4  280f              CMP      r0,#0xf               ;134
0000d6  d9f2              BLS      |L1.190|
                  |L1.216|
0000d8  bf00              NOP                            ;135
0000da  981a              LDR      r0,[sp,#0x68]         ;136
0000dc  4285              CMP      r5,r0                 ;136
0000de  d200              BCS      |L1.226|
0000e0  9d1a              LDR      r5,[sp,#0x68]         ;136
                  |L1.226|
0000e2  2001              MOVS     r0,#1                 ;139
0000e4  9019              STR      r0,[sp,#0x64]         ;139
0000e6  2101              MOVS     r1,#1                 ;140
0000e8  e010              B        |L1.268|
                  |L1.234|
0000ea  9819              LDR      r0,[sp,#0x64]         ;141
0000ec  0040              LSLS     r0,r0,#1              ;141
0000ee  9019              STR      r0,[sp,#0x64]         ;141
0000f0  a808              ADD      r0,sp,#0x20           ;142
0000f2  f8309011          LDRH     r9,[r0,r1,LSL #1]     ;142
0000f6  9819              LDR      r0,[sp,#0x64]         ;142
0000f8  eba00009          SUB      r0,r0,r9              ;142
0000fc  9019              STR      r0,[sp,#0x64]         ;142
0000fe  9819              LDR      r0,[sp,#0x64]         ;143
000100  2800              CMP      r0,#0                 ;143
000102  da02              BGE      |L1.266|
000104  f04f30ff          MOV      r0,#0xffffffff        ;143
000108  e7d3              B        |L1.178|
                  |L1.266|
00010a  1c49              ADDS     r1,r1,#1              ;140
                  |L1.268|
00010c  290f              CMP      r1,#0xf               ;140
00010e  d9ec              BLS      |L1.234|
000110  9819              LDR      r0,[sp,#0x64]         ;145
000112  2800              CMP      r0,#0                 ;145
000114  dd07              BLE      |L1.294|
000116  981b              LDR      r0,[sp,#0x6c]         ;145
000118  b110              CBZ      r0,|L1.288|
00011a  f1bc0f01          CMP      r12,#1                ;145
00011e  d002              BEQ      |L1.294|
                  |L1.288|
000120  f04f30ff          MOV      r0,#0xffffffff        ;146
000124  e7c5              B        |L1.178|
                  |L1.294|
000126  2000              MOVS     r0,#0                 ;149
000128  f8ad0002          STRH     r0,[sp,#2]            ;149
00012c  2101              MOVS     r1,#1                 ;150
00012e  e00c              B        |L1.330|
                  |L1.304|
000130  f83d0011          LDRH     r0,[sp,r1,LSL #1]     ;151
000134  f10d0920          ADD      r9,sp,#0x20           ;151
000138  f8399011          LDRH     r9,[r9,r1,LSL #1]     ;151
00013c  4448              ADD      r0,r0,r9              ;151
00013e  fa1ff980          UXTH     r9,r0                 ;151
000142  1c48              ADDS     r0,r1,#1              ;151
000144  f82d9010          STRH     r9,[sp,r0,LSL #1]     ;151
000148  1c49              ADDS     r1,r1,#1              ;150
                  |L1.330|
00014a  290f              CMP      r1,#0xf               ;150
00014c  d3f0              BCC      |L1.304|
00014e  2200              MOVS     r2,#0                 ;154
000150  e019              B        |L1.390|
                  |L1.338|
000152  981c              LDR      r0,[sp,#0x70]         ;155
000154  f8300012          LDRH     r0,[r0,r2,LSL #1]     ;155
000158  b1a0              CBZ      r0,|L1.388|
00015a  981c              LDR      r0,[sp,#0x70]         ;155
00015c  f8300012          LDRH     r0,[r0,r2,LSL #1]     ;155
000160  f83da010          LDRH     r10,[sp,r0,LSL #1]    ;155
000164  981c              LDR      r0,[sp,#0x70]         ;155
000166  f8300012          LDRH     r0,[r0,r2,LSL #1]     ;155
00016a  f83d0010          LDRH     r0,[sp,r0,LSL #1]     ;155
00016e  1c40              ADDS     r0,r0,#1              ;155
000170  fa1ffb80          UXTH     r11,r0                ;155
000174  981c              LDR      r0,[sp,#0x70]         ;155
000176  f8300012          LDRH     r0,[r0,r2,LSL #1]     ;155
00017a  f82db010          STRH     r11,[sp,r0,LSL #1]    ;155
00017e  9829              LDR      r0,[sp,#0xa4]         ;155
000180  f820201a          STRH     r2,[r0,r10,LSL #1]    ;155
                  |L1.388|
000184  1c52              ADDS     r2,r2,#1              ;154
                  |L1.390|
000186  981d              LDR      r0,[sp,#0x74]         ;154
000188  4282              CMP      r2,r0                 ;154
00018a  d3e2              BCC      |L1.338|
00018c  981b              LDR      r0,[sp,#0x6c]         ;190
00018e  b110              CBZ      r0,|L1.406|
000190  2801              CMP      r0,#1                 ;190
000192  d116              BNE      |L1.450|
000194  e005              B        |L1.418|
                  |L1.406|
000196  9829              LDR      r0,[sp,#0xa4]         ;192
000198  9011              STR      r0,[sp,#0x44]         ;192
00019a  9012              STR      r0,[sp,#0x48]         ;192
00019c  2013              MOVS     r0,#0x13              ;193
00019e  9010              STR      r0,[sp,#0x40]         ;193
0001a0  e017              B        |L1.466|
                  |L1.418|
0001a2  48a0              LDR      r0,|L1.1060|
0001a4  9012              STR      r0,[sp,#0x48]         ;196
0001a6  9812              LDR      r0,[sp,#0x48]         ;197
0001a8  f2a02002          SUB      r0,r0,#0x202          ;197
0001ac  9012              STR      r0,[sp,#0x48]         ;197
0001ae  489e              LDR      r0,|L1.1064|
0001b0  9011              STR      r0,[sp,#0x44]         ;198
0001b2  9811              LDR      r0,[sp,#0x44]         ;199
0001b4  f2a02002          SUB      r0,r0,#0x202          ;199
0001b8  9011              STR      r0,[sp,#0x44]         ;199
0001ba  f44f7080          MOV      r0,#0x100             ;200
0001be  9010              STR      r0,[sp,#0x40]         ;200
0001c0  e007              B        |L1.466|
                  |L1.450|
0001c2  489a              LDR      r0,|L1.1068|
0001c4  9012              STR      r0,[sp,#0x48]         ;203
0001c6  489a              LDR      r0,|L1.1072|
0001c8  9011              STR      r0,[sp,#0x44]         ;204
0001ca  f04f30ff          MOV      r0,#0xffffffff        ;205
0001ce  9010              STR      r0,[sp,#0x40]         ;205
0001d0  bf00              NOP                            ;190
                  |L1.466|
0001d2  bf00              NOP                            ;194
0001d4  2400              MOVS     r4,#0                 ;209
0001d6  2200              MOVS     r2,#0                 ;210
0001d8  991a              LDR      r1,[sp,#0x68]         ;211
0001da  6818              LDR      r0,[r3,#0]            ;212
0001dc  9013              STR      r0,[sp,#0x4c]         ;212
0001de  46a8              MOV      r8,r5                 ;213
0001e0  2600              MOVS     r6,#0                 ;214
0001e2  1e50              SUBS     r0,r2,#1              ;215
0001e4  9016              STR      r0,[sp,#0x58]         ;215
0001e6  2001              MOVS     r0,#1                 ;216
0001e8  40a8              LSLS     r0,r0,r5              ;216
0001ea  9018              STR      r0,[sp,#0x60]         ;216
0001ec  9818              LDR      r0,[sp,#0x60]         ;217
0001ee  1e40              SUBS     r0,r0,#1              ;217
0001f0  9015              STR      r0,[sp,#0x54]         ;217
0001f2  981b              LDR      r0,[sp,#0x6c]         ;220
0001f4  2801              CMP      r0,#1                 ;220
0001f6  d105              BNE      |L1.516|
0001f8  9818              LDR      r0,[sp,#0x60]         ;220
0001fa  f5b06fb6          CMP      r0,#0x5b0             ;220
0001fe  d301              BCC      |L1.516|
000200  2001              MOVS     r0,#1                 ;221
000202  e756              B        |L1.178|
                  |L1.516|
000204  bf00              NOP                            ;224
                  |L1.518|
000206  1b88              SUBS     r0,r1,r6              ;226
000208  b2c0              UXTB     r0,r0                 ;226
00020a  f88d0051          STRB     r0,[sp,#0x51]         ;226
00020e  9829              LDR      r0,[sp,#0xa4]         ;227
000210  f8309012          LDRH     r9,[r0,r2,LSL #1]     ;227
000214  9810              LDR      r0,[sp,#0x40]         ;227
000216  4581              CMP      r9,r0                 ;227
000218  da08              BGE      |L1.556|
00021a  2000              MOVS     r0,#0                 ;228
00021c  f88d0050          STRB     r0,[sp,#0x50]         ;228
000220  9829              LDR      r0,[sp,#0xa4]         ;229
000222  f8300012          LDRH     r0,[r0,r2,LSL #1]     ;229
000226  f8ad0052          STRH     r0,[sp,#0x52]         ;229
00022a  e01c              B        |L1.614|
                  |L1.556|
00022c  9829              LDR      r0,[sp,#0xa4]         ;231
00022e  f8309012          LDRH     r9,[r0,r2,LSL #1]     ;231
000232  9810              LDR      r0,[sp,#0x40]         ;231
000234  4581              CMP      r9,r0                 ;231
000236  dd10              BLE      |L1.602|
000238  9829              LDR      r0,[sp,#0xa4]         ;232
00023a  f8309012          LDRH     r9,[r0,r2,LSL #1]     ;232
00023e  9811              LDR      r0,[sp,#0x44]         ;232
000240  f8100019          LDRB     r0,[r0,r9,LSL #1]     ;232
000244  f88d0050          STRB     r0,[sp,#0x50]         ;232
000248  9829              LDR      r0,[sp,#0xa4]         ;233
00024a  f8309012          LDRH     r9,[r0,r2,LSL #1]     ;233
00024e  9812              LDR      r0,[sp,#0x48]         ;233
000250  f8300019          LDRH     r0,[r0,r9,LSL #1]     ;233
000254  f8ad0052          STRH     r0,[sp,#0x52]         ;233
000258  e005              B        |L1.614|
                  |L1.602|
00025a  2060              MOVS     r0,#0x60              ;236
00025c  f88d0050          STRB     r0,[sp,#0x50]         ;236
000260  2000              MOVS     r0,#0                 ;237
000262  f8ad0052          STRH     r0,[sp,#0x52]         ;237
                  |L1.614|
000266  eba10906          SUB      r9,r1,r6              ;241
00026a  2001              MOVS     r0,#1                 ;241
00026c  fa00f709          LSL      r7,r0,r9              ;241
000270  fa00f008          LSL      r0,r0,r8              ;242
000274  9017              STR      r0,[sp,#0x5c]         ;242
000276  9817              LDR      r0,[sp,#0x5c]         ;243
000278  901a              STR      r0,[sp,#0x68]         ;243
00027a  bf00              NOP                            ;244
                  |L1.636|
00027c  9817              LDR      r0,[sp,#0x5c]         ;245
00027e  1bc0              SUBS     r0,r0,r7              ;245
000280  9017              STR      r0,[sp,#0x5c]         ;245
000282  fa24f006          LSR      r0,r4,r6              ;246
000286  f8dd905c          LDR      r9,[sp,#0x5c]         ;246
00028a  4481              ADD      r9,r9,r0              ;246
00028c  9813              LDR      r0,[sp,#0x4c]         ;246
00028e  eb000089          ADD      r0,r0,r9,LSL #2       ;246
000292  f8dd9050          LDR      r9,[sp,#0x50]         ;246
000296  f8c09000          STR      r9,[r0,#0]            ;246
00029a  9817              LDR      r0,[sp,#0x5c]         ;247
00029c  2800              CMP      r0,#0                 ;247
00029e  d1ed              BNE      |L1.636|
0002a0  1e48              SUBS     r0,r1,#1              ;250
0002a2  f04f0901          MOV      r9,#1                 ;250
0002a6  fa09f700          LSL      r7,r9,r0              ;250
0002aa  e000              B        |L1.686|
                  |L1.684|
0002ac  087f              LSRS     r7,r7,#1              ;252
                  |L1.686|
0002ae  ea040007          AND      r0,r4,r7              ;251
0002b2  2800              CMP      r0,#0                 ;251
0002b4  d1fa              BNE      |L1.684|
0002b6  b11f              CBZ      r7,|L1.704|
0002b8  1e78              SUBS     r0,r7,#1              ;254
0002ba  4004              ANDS     r4,r4,r0              ;254
0002bc  443c              ADD      r4,r4,r7              ;255
0002be  e000              B        |L1.706|
                  |L1.704|
0002c0  2400              MOVS     r4,#0                 ;258
                  |L1.706|
0002c2  1c52              ADDS     r2,r2,#1              ;261
0002c4  a808              ADD      r0,sp,#0x20           ;262
0002c6  f8300011          LDRH     r0,[r0,r1,LSL #1]     ;262
0002ca  1e40              SUBS     r0,r0,#1              ;262
0002cc  b280              UXTH     r0,r0                 ;262
0002ce  f10d0920          ADD      r9,sp,#0x20           ;262
0002d2  f8290011          STRH     r0,[r9,r1,LSL #1]     ;262
0002d6  b940              CBNZ     r0,|L1.746|
0002d8  4561              CMP      r1,r12                ;263
0002da  d100              BNE      |L1.734|
0002dc  e061              B        |L1.930|
                  |L1.734|
0002de  9829              LDR      r0,[sp,#0xa4]         ;264
0002e0  f8309012          LDRH     r9,[r0,r2,LSL #1]     ;264
0002e4  981c              LDR      r0,[sp,#0x70]         ;264
0002e6  f8301019          LDRH     r1,[r0,r9,LSL #1]     ;264
                  |L1.746|
0002ea  42a9              CMP      r1,r5                 ;268
0002ec  d98b              BLS      |L1.518|
0002ee  9815              LDR      r0,[sp,#0x54]         ;268
0002f0  4020              ANDS     r0,r0,r4              ;268
0002f2  f8dd9058          LDR      r9,[sp,#0x58]         ;268
0002f6  4548              CMP      r0,r9                 ;268
0002f8  d085              BEQ      |L1.518|
0002fa  b906              CBNZ     r6,|L1.766|
0002fc  462e              MOV      r6,r5                 ;271
                  |L1.766|
0002fe  f8dd9068          LDR      r9,[sp,#0x68]         ;274
000302  9813              LDR      r0,[sp,#0x4c]         ;274
000304  eb000089          ADD      r0,r0,r9,LSL #2       ;274
000308  9013              STR      r0,[sp,#0x4c]         ;274
00030a  eba10806          SUB      r8,r1,r6              ;277
00030e  2001              MOVS     r0,#1                 ;278
000310  fa00f008          LSL      r0,r0,r8              ;278
000314  9019              STR      r0,[sp,#0x64]         ;278
000316  e012              B        |L1.830|
                  |L1.792|
000318  eb080006          ADD      r0,r8,r6              ;280
00031c  f10d0920          ADD      r9,sp,#0x20           ;280
000320  f8399010          LDRH     r9,[r9,r0,LSL #1]     ;280
000324  9819              LDR      r0,[sp,#0x64]         ;280
000326  eba00009          SUB      r0,r0,r9              ;280
00032a  9019              STR      r0,[sp,#0x64]         ;280
00032c  9819              LDR      r0,[sp,#0x64]         ;281
00032e  2800              CMP      r0,#0                 ;281
000330  dc00              BGT      |L1.820|
000332  e008              B        |L1.838|
                  |L1.820|
000334  f1080801          ADD      r8,r8,#1              ;282
000338  9819              LDR      r0,[sp,#0x64]         ;283
00033a  0040              LSLS     r0,r0,#1              ;283
00033c  9019              STR      r0,[sp,#0x64]         ;283
                  |L1.830|
00033e  eb080006          ADD      r0,r8,r6              ;279
000342  4560              CMP      r0,r12                ;279
000344  d3e8              BCC      |L1.792|
                  |L1.838|
000346  bf00              NOP                            ;281
000348  2001              MOVS     r0,#1                 ;287
00034a  fa00f008          LSL      r0,r0,r8              ;287
00034e  f8dd9060          LDR      r9,[sp,#0x60]         ;287
000352  4448              ADD      r0,r0,r9              ;287
000354  9018              STR      r0,[sp,#0x60]         ;287
000356  981b              LDR      r0,[sp,#0x6c]         ;288
000358  2801              CMP      r0,#1                 ;288
00035a  d105              BNE      |L1.872|
00035c  9818              LDR      r0,[sp,#0x60]         ;288
00035e  f5b06fb6          CMP      r0,#0x5b0             ;288
000362  d301              BCC      |L1.872|
000364  2001              MOVS     r0,#1                 ;289
000366  e6a4              B        |L1.178|
                  |L1.872|
000368  9815              LDR      r0,[sp,#0x54]         ;292
00036a  4020              ANDS     r0,r0,r4              ;292
00036c  9016              STR      r0,[sp,#0x58]         ;292
00036e  f8d3a000          LDR      r10,[r3,#0]           ;293
000372  9816              LDR      r0,[sp,#0x58]         ;293
000374  f80a8020          STRB     r8,[r10,r0,LSL #2]    ;293
000378  f8d3a000          LDR      r10,[r3,#0]           ;294
00037c  9816              LDR      r0,[sp,#0x58]         ;294
00037e  eb0a0080          ADD      r0,r10,r0,LSL #2      ;294
000382  7045              STRB     r5,[r0,#1]            ;294
000384  f8d39000          LDR      r9,[r3,#0]            ;295
000388  9813              LDR      r0,[sp,#0x4c]         ;295
00038a  eba00009          SUB      r0,r0,r9              ;295
00038e  f3c0098f          UBFX     r9,r0,#2,#16          ;295
000392  f8d3a000          LDR      r10,[r3,#0]           ;295
000396  9816              LDR      r0,[sp,#0x58]         ;295
000398  eb0a0080          ADD      r0,r10,r0,LSL #2      ;295
00039c  f8a09002          STRH     r9,[r0,#2]            ;295
0003a0  e731              B        |L1.518|
                  |L1.930|
0003a2  bf00              NOP                            ;263
0003a4  2040              MOVS     r0,#0x40              ;306
0003a6  f88d0050          STRB     r0,[sp,#0x50]         ;306
0003aa  1b88              SUBS     r0,r1,r6              ;307
0003ac  b2c0              UXTB     r0,r0                 ;307
0003ae  f88d0051          STRB     r0,[sp,#0x51]         ;307
0003b2  2000              MOVS     r0,#0                 ;308
0003b4  f8ad0052          STRH     r0,[sp,#0x52]         ;308
0003b8  e028              B        |L1.1036|
                  |L1.954|
0003ba  b166              CBZ      r6,|L1.982|
0003bc  9815              LDR      r0,[sp,#0x54]         ;311
0003be  4020              ANDS     r0,r0,r4              ;311
0003c0  f8dd9058          LDR      r9,[sp,#0x58]         ;311
0003c4  4548              CMP      r0,r9                 ;311
0003c6  d006              BEQ      |L1.982|
0003c8  2600              MOVS     r6,#0                 ;312
0003ca  4629              MOV      r1,r5                 ;313
0003cc  6818              LDR      r0,[r3,#0]            ;314
0003ce  9013              STR      r0,[sp,#0x4c]         ;314
0003d0  b2c8              UXTB     r0,r1                 ;315
0003d2  f88d0051          STRB     r0,[sp,#0x51]         ;315
                  |L1.982|
0003d6  fa24f006          LSR      r0,r4,r6              ;319
0003da  f8dd904c          LDR      r9,[sp,#0x4c]         ;319
0003de  eb090080          ADD      r0,r9,r0,LSL #2       ;319
0003e2  f8dd9050          LDR      r9,[sp,#0x50]         ;319
0003e6  f8c09000          STR      r9,[r0,#0]            ;319
0003ea  1e48              SUBS     r0,r1,#1              ;322
0003ec  f04f0901          MOV      r9,#1                 ;322
0003f0  fa09f700          LSL      r7,r9,r0              ;322
0003f4  e000              B        |L1.1016|
                  |L1.1014|
0003f6  087f              LSRS     r7,r7,#1              ;324
                  |L1.1016|
0003f8  ea040007          AND      r0,r4,r7              ;323
0003fc  2800              CMP      r0,#0                 ;323
0003fe  d1fa              BNE      |L1.1014|
000400  b11f              CBZ      r7,|L1.1034|
000402  1e78              SUBS     r0,r7,#1              ;326
000404  4004              ANDS     r4,r4,r0              ;326
000406  443c              ADD      r4,r4,r7              ;327
000408  e000              B        |L1.1036|
                  |L1.1034|
00040a  2400              MOVS     r4,#0                 ;330
                  |L1.1036|
00040c  2c00              CMP      r4,#0                 ;309
00040e  d1d4              BNE      |L1.954|
000410  f8d39000          LDR      r9,[r3,#0]            ;334
000414  9818              LDR      r0,[sp,#0x60]         ;334
000416  eb090080          ADD      r0,r9,r0,LSL #2       ;334
00041a  6018              STR      r0,[r3,#0]            ;334
00041c  9828              LDR      r0,[sp,#0xa0]         ;335
00041e  6005              STR      r5,[r0,#0]            ;335
000420  2000              MOVS     r0,#0                 ;336
000422  e646              B        |L1.178|
                          ENDP

                  |L1.1060|
                          DCD      lbase
                  |L1.1064|
                          DCD      lext
                  |L1.1068|
                          DCD      dbase
                  |L1.1072|
                          DCD      dext

                          AREA ||.constdata||, DATA, READONLY, ALIGN=1

                  inflate_copyright
000000  20696e66          DCB      0x20,0x69,0x6e,0x66
000004  6c617465          DCB      0x6c,0x61,0x74,0x65
000008  20312e32          DCB      0x20,0x31,0x2e,0x32
00000c  2e332043          DCB      0x2e,0x33,0x20,0x43
000010  6f707972          DCB      0x6f,0x70,0x79,0x72
000014  69676874          DCB      0x69,0x67,0x68,0x74
000018  20313939          DCB      0x20,0x31,0x39,0x39
00001c  352d3230          DCB      0x35,0x2d,0x32,0x30
000020  3035204d          DCB      0x30,0x35,0x20,0x4d
000024  61726b20          DCB      0x61,0x72,0x6b,0x20
000028  41646c65          DCB      0x41,0x64,0x6c,0x65
00002c  72200000          DCB      0x72,0x20,0x00,0x00
                  lbase
000030  00030004          DCW      0x0003,0x0004
000034  00050006          DCW      0x0005,0x0006
000038  00070008          DCW      0x0007,0x0008
00003c  0009000a          DCW      0x0009,0x000a
000040  000b000d          DCW      0x000b,0x000d
000044  000f0011          DCW      0x000f,0x0011
000048  00130017          DCW      0x0013,0x0017
00004c  001b001f          DCW      0x001b,0x001f
000050  0023002b          DCW      0x0023,0x002b
000054  0033003b          DCW      0x0033,0x003b
000058  00430053          DCW      0x0043,0x0053
00005c  00630073          DCW      0x0063,0x0073
000060  008300a3          DCW      0x0083,0x00a3
000064  00c300e3          DCW      0x00c3,0x00e3
000068  01020000          DCW      0x0102,0x0000
00006c  0000              DCW      0x0000
                  lext
00006e  0010              DCW      0x0010
000070  00100010          DCW      0x0010,0x0010
000074  00100010          DCW      0x0010,0x0010
000078  00100010          DCW      0x0010,0x0010
00007c  00100011          DCW      0x0010,0x0011
000080  00110011          DCW      0x0011,0x0011
000084  00110012          DCW      0x0011,0x0012
000088  00120012          DCW      0x0012,0x0012
00008c  00120013          DCW      0x0012,0x0013
000090  00130013          DCW      0x0013,0x0013
000094  00130014          DCW      0x0013,0x0014
000098  00140014          DCW      0x0014,0x0014
00009c  00140015          DCW      0x0014,0x0015
0000a0  00150015          DCW      0x0015,0x0015
0000a4  00150010          DCW      0x0015,0x0010
0000a8  00c900c4          DCW      0x00c9,0x00c4
                  dbase
0000ac  00010002          DCW      0x0001,0x0002
0000b0  00030004          DCW      0x0003,0x0004
0000b4  00050007          DCW      0x0005,0x0007
0000b8  0009000d          DCW      0x0009,0x000d
0000bc  00110019          DCW      0x0011,0x0019
0000c0  00210031          DCW      0x0021,0x0031
0000c4  00410061          DCW      0x0041,0x0061
0000c8  008100c1          DCW      0x0081,0x00c1
0000cc  01010181          DCW      0x0101,0x0181
0000d0  02010301          DCW      0x0201,0x0301
0000d4  04010601          DCW      0x0401,0x0601
0000d8  08010c01          DCW      0x0801,0x0c01
0000dc  10011801          DCW      0x1001,0x1801
0000e0  20013001          DCW      0x2001,0x3001
0000e4  40016001          DCW      0x4001,0x6001
0000e8  00000000          DCW      0x0000,0x0000
                  dext
0000ec  00100010          DCW      0x0010,0x0010
0000f0  00100010          DCW      0x0010,0x0010
0000f4  00110011          DCW      0x0011,0x0011
0000f8  00120012          DCW      0x0012,0x0012
0000fc  00130013          DCW      0x0013,0x0013
000100  00140014          DCW      0x0014,0x0014
000104  00150015          DCW      0x0015,0x0015
000108  00160016          DCW      0x0016,0x0016
00010c  00170017          DCW      0x0017,0x0017
000110  00180018          DCW      0x0018,0x0018
000114  00190019          DCW      0x0019,0x0019
000118  001a001a          DCW      0x001a,0x001a
00011c  001b001b          DCW      0x001b,0x001b
000120  001c001c          DCW      0x001c,0x001c
000124  001d001d          DCW      0x001d,0x001d
000128  00400040          DCW      0x0040,0x0040
