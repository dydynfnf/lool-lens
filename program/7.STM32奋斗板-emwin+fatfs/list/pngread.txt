; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\pngread.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\pngread.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\FWlib\inc -I.\user -I.\CM3 -I.\MALLOC -I.\TFT -I.\EMWIN\EMWIN_INC -I.\EMWIN\DEMO -I.\FATFS -I.\SDIO -I.\PNG -IE:\material\GUI\STM32·Ü¶·°å-emwin+fatfs\RTE -Id:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.1.0\Device\Include -Id:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=515 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\pngread.crf PNG\pngread.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  png_create_read_struct_2 PROC
;;;31     png_structp PNGAPI
;;;32     png_create_read_struct_2(png_const_charp user_png_ver, png_voidp error_ptr,
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;33        png_error_ptr error_fn, png_error_ptr warn_fn, png_voidp mem_ptr,
;;;34        png_malloc_ptr malloc_fn, png_free_ptr free_fn)
;;;35     {
000004  4605              MOV      r5,r0
000006  468a              MOV      r10,r1
000008  4693              MOV      r11,r2
00000a  e9dd890f          LDRD     r8,r9,[sp,#0x3c]
00000e  9f0e              LDR      r7,[sp,#0x38]
;;;36     #endif /* PNG_USER_MEM_SUPPORTED */
;;;37     
;;;38        png_structp png_ptr;
;;;39     
;;;40     #ifdef PNG_SETJMP_SUPPORTED
;;;41     #ifdef USE_FAR_KEYWORD
;;;42        jmp_buf jmpbuf;
;;;43     #endif
;;;44     #endif
;;;45     
;;;46        int i;
;;;47     
;;;48        png_debug(1, "in png_create_read_struct\n");
;;;49     #ifdef PNG_USER_MEM_SUPPORTED
;;;50        png_ptr = (png_structp)png_create_struct_2(PNG_STRUCT_PNG,
000010  463a              MOV      r2,r7
000012  4641              MOV      r1,r8
000014  2001              MOVS     r0,#1
000016  f7fffffe          BL       png_create_struct_2
00001a  4604              MOV      r4,r0
;;;51           (png_malloc_ptr)malloc_fn, (png_voidp)mem_ptr);
;;;52     #else
;;;53        png_ptr = (png_structp)png_create_struct(PNG_STRUCT_PNG);
;;;54     #endif
;;;55        if (png_ptr == NULL)
00001c  b91c              CBNZ     r4,|L1.38|
;;;56           return (NULL);
00001e  2000              MOVS     r0,#0
                  |L1.32|
;;;57     
;;;58     #if !defined(PNG_1_0_X)
;;;59     #ifdef PNG_MMX_CODE_SUPPORTED
;;;60        png_init_mmx_flags(png_ptr);   /* 1.2.0 addition */
;;;61     #endif
;;;62     #endif /* PNG_1_0_X */
;;;63     
;;;64        /* added at libpng-1.2.6 */
;;;65     #ifdef PNG_SET_USER_LIMITS_SUPPORTED
;;;66        png_ptr->user_width_max=PNG_USER_WIDTH_MAX;
;;;67        png_ptr->user_height_max=PNG_USER_HEIGHT_MAX;
;;;68     #endif
;;;69     
;;;70     #ifdef PNG_SETJMP_SUPPORTED
;;;71     #ifdef USE_FAR_KEYWORD
;;;72        if (setjmp(jmpbuf))
;;;73     #else
;;;74        if (setjmp(png_ptr->jmpbuf))
;;;75     #endif
;;;76        {
;;;77           png_free(png_ptr, png_ptr->zbuf);
;;;78           png_ptr->zbuf=NULL;
;;;79     #ifdef PNG_USER_MEM_SUPPORTED
;;;80           png_destroy_struct_2((png_voidp)png_ptr,
;;;81              (png_free_ptr)free_fn, (png_voidp)mem_ptr);
;;;82     #else
;;;83           png_destroy_struct((png_voidp)png_ptr);
;;;84     #endif
;;;85           return (NULL);
;;;86        }
;;;87     #ifdef USE_FAR_KEYWORD
;;;88        png_memcpy(png_ptr->jmpbuf,jmpbuf,png_sizeof(jmp_buf));
;;;89     #endif
;;;90     #endif
;;;91     
;;;92     #ifdef PNG_USER_MEM_SUPPORTED
;;;93        png_set_mem_fn(png_ptr, mem_ptr, malloc_fn, free_fn);
;;;94     #endif
;;;95     
;;;96        png_set_error_fn(png_ptr, error_ptr, error_fn, warn_fn);
;;;97     
;;;98        i=0;
;;;99        do
;;;100       {
;;;101         if(user_png_ver[i] != png_libpng_ver[i])
;;;102            png_ptr->flags |= PNG_FLAG_LIBRARY_MISMATCH;
;;;103       } while (png_libpng_ver[i++]);
;;;104    
;;;105       if (png_ptr->flags & PNG_FLAG_LIBRARY_MISMATCH)
;;;106       {
;;;107         /* Libpng 0.90 and later are binary incompatible with libpng 0.89, so
;;;108          * we must recompile any applications that use any older library version.
;;;109          * For versions after libpng 1.0, we will be compatible, so we need
;;;110          * only check the first digit.
;;;111          */
;;;112         if (user_png_ver == NULL || user_png_ver[0] != png_libpng_ver[0] ||
;;;113             (user_png_ver[0] == '1' && user_png_ver[2] != png_libpng_ver[2]) ||
;;;114             (user_png_ver[0] == '0' && user_png_ver[2] < '9'))
;;;115         {
;;;116    #if !defined(PNG_NO_STDIO) && !defined(_WIN32_WCE)
;;;117            char msg[80];
;;;118            if (user_png_ver)
;;;119            {
;;;120              sprintf(msg, "Application was compiled with png.h from libpng-%.20s",
;;;121                 user_png_ver);
;;;122              png_warning(png_ptr, msg);
;;;123            }
;;;124            sprintf(msg, "Application  is  running with png.c from libpng-%.20s",
;;;125               png_libpng_ver);
;;;126            png_warning(png_ptr, msg);
;;;127    #endif
;;;128    #ifdef PNG_ERROR_NUMBERS_SUPPORTED
;;;129            png_ptr->flags=0;
;;;130    #endif
;;;131            png_error(png_ptr,
;;;132               "Incompatible libpng version in application and library");
;;;133         }
;;;134       }
;;;135    
;;;136       /* initialize zbuf - compression buffer */
;;;137       png_ptr->zbuf_size = PNG_ZBUF_SIZE;
;;;138       png_ptr->zbuf = (png_bytep)png_malloc(png_ptr,
;;;139         (png_uint_32)png_ptr->zbuf_size);
;;;140       png_ptr->zstream.zalloc = png_zalloc;
;;;141       png_ptr->zstream.zfree = png_zfree;
;;;142       png_ptr->zstream.opaque = (voidpf)png_ptr;
;;;143    
;;;144       switch (inflateInit(&png_ptr->zstream))
;;;145       {
;;;146         case Z_OK: /* Do nothing */ break;
;;;147         case Z_MEM_ERROR:
;;;148         case Z_STREAM_ERROR: png_error(png_ptr, "zlib memory error"); break;
;;;149         case Z_VERSION_ERROR: png_error(png_ptr, "zlib version error"); break;
;;;150         default: png_error(png_ptr, "Unknown zlib error");
;;;151       }
;;;152    
;;;153       png_ptr->zstream.next_out = png_ptr->zbuf;
;;;154       png_ptr->zstream.avail_out = (uInt)png_ptr->zbuf_size;
;;;155    
;;;156       png_set_read_fn(png_ptr, png_voidp_NULL, png_rw_ptr_NULL);
;;;157    
;;;158    #ifdef PNG_SETJMP_SUPPORTED
;;;159    /* Applications that neglect to set up their own setjmp() and then encounter
;;;160       a png_error() will longjmp here.  Since the jmpbuf is then meaningless we
;;;161       abort instead of returning. */
;;;162    #ifdef USE_FAR_KEYWORD
;;;163       if (setjmp(jmpbuf))
;;;164          PNG_ABORT();
;;;165       png_memcpy(png_ptr->jmpbuf,jmpbuf,png_sizeof(jmp_buf));
;;;166    #else
;;;167       if (setjmp(png_ptr->jmpbuf))
;;;168          PNG_ABORT();
;;;169    #endif
;;;170    #endif
;;;171       return (png_ptr);
;;;172    }
000020  b004              ADD      sp,sp,#0x10
000022  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.38|
000026  48fe              LDR      r0,|L1.1056|
000028  f8c4039c          STR      r0,[r4,#0x39c]        ;66
00002c  f8c403a0          STR      r0,[r4,#0x3a0]        ;67
000030  4620              MOV      r0,r4                 ;74
000032  f7fffffe          BL       setjmp
000036  b170              CBZ      r0,|L1.86|
000038  4620              MOV      r0,r4                 ;77
00003a  f8d411ec          LDR      r1,[r4,#0x1ec]        ;77
00003e  f7fffffe          BL       png_free
000042  2000              MOVS     r0,#0                 ;78
000044  f8c401ec          STR      r0,[r4,#0x1ec]        ;78
000048  463a              MOV      r2,r7                 ;80
00004a  4649              MOV      r1,r9                 ;80
00004c  4620              MOV      r0,r4                 ;80
00004e  f7fffffe          BL       png_destroy_struct_2
000052  2000              MOVS     r0,#0                 ;85
000054  e7e4              B        |L1.32|
                  |L1.86|
000056  464b              MOV      r3,r9                 ;93
000058  4642              MOV      r2,r8                 ;93
00005a  4639              MOV      r1,r7                 ;93
00005c  4620              MOV      r0,r4                 ;93
00005e  f7fffffe          BL       png_set_mem_fn
000062  465a              MOV      r2,r11                ;96
000064  4651              MOV      r1,r10                ;96
000066  4620              MOV      r0,r4                 ;96
000068  9b03              LDR      r3,[sp,#0xc]          ;96
00006a  f7fffffe          BL       png_set_error_fn
00006e  2600              MOVS     r6,#0                 ;98
000070  bf00              NOP                            ;99
                  |L1.114|
000072  5da8              LDRB     r0,[r5,r6]            ;101
000074  49eb              LDR      r1,|L1.1060|
000076  5d89              LDRB     r1,[r1,r6]            ;101
000078  4288              CMP      r0,r1                 ;101
00007a  d005              BEQ      |L1.136|
00007c  f8d401ac          LDR      r0,[r4,#0x1ac]        ;102
000080  f4403000          ORR      r0,r0,#0x20000        ;102
000084  f8c401ac          STR      r0,[r4,#0x1ac]        ;102
                  |L1.136|
000088  4630              MOV      r0,r6                 ;103
00008a  1c76              ADDS     r6,r6,#1              ;103
00008c  49e5              LDR      r1,|L1.1060|
00008e  5c08              LDRB     r0,[r1,r0]            ;103
000090  2800              CMP      r0,#0                 ;103
000092  d1ee              BNE      |L1.114|
000094  f8d401ac          LDR      r0,[r4,#0x1ac]        ;105
000098  f4003000          AND      r0,r0,#0x20000        ;105
00009c  b1c8              CBZ      r0,|L1.210|
00009e  b18d              CBZ      r5,|L1.196|
0000a0  7828              LDRB     r0,[r5,#0]            ;112
0000a2  7809              LDRB     r1,[r1,#0]            ;112  ; png_libpng_ver
0000a4  4288              CMP      r0,r1                 ;112
0000a6  d10d              BNE      |L1.196|
0000a8  7828              LDRB     r0,[r5,#0]            ;113
0000aa  2831              CMP      r0,#0x31              ;113
0000ac  d104              BNE      |L1.184|
0000ae  78a8              LDRB     r0,[r5,#2]            ;113
0000b0  49dc              LDR      r1,|L1.1060|
0000b2  7889              LDRB     r1,[r1,#2]            ;113  ; png_libpng_ver
0000b4  4288              CMP      r0,r1                 ;113
0000b6  d105              BNE      |L1.196|
                  |L1.184|
0000b8  7828              LDRB     r0,[r5,#0]            ;114
0000ba  2830              CMP      r0,#0x30              ;114
0000bc  d109              BNE      |L1.210|
0000be  78a8              LDRB     r0,[r5,#2]            ;114
0000c0  2839              CMP      r0,#0x39              ;114
0000c2  da06              BGE      |L1.210|
                  |L1.196|
0000c4  2000              MOVS     r0,#0                 ;129
0000c6  f8c401ac          STR      r0,[r4,#0x1ac]        ;129
0000ca  a1d7              ADR      r1,|L1.1064|
0000cc  4620              MOV      r0,r4                 ;131
0000ce  f7fffffe          BL       png_error
                  |L1.210|
0000d2  f44f5000          MOV      r0,#0x2000            ;137
0000d6  f8c401f0          STR      r0,[r4,#0x1f0]        ;137
0000da  4620              MOV      r0,r4                 ;138
0000dc  f8d411f0          LDR      r1,[r4,#0x1f0]        ;138
0000e0  f7fffffe          BL       png_malloc
0000e4  f8c401ec          STR      r0,[r4,#0x1ec]        ;138
0000e8  49dd              LDR      r1,|L1.1120|
0000ea  f44f70ea          MOV      r0,#0x1d4             ;140
0000ee  5101              STR      r1,[r0,r4]            ;140
0000f0  49dc              LDR      r1,|L1.1124|
0000f2  1d00              ADDS     r0,r0,#4              ;141
0000f4  5101              STR      r1,[r0,r4]            ;141
0000f6  1d00              ADDS     r0,r0,#4              ;142
0000f8  5104              STR      r4,[r0,r4]            ;142
0000fa  2238              MOVS     r2,#0x38              ;144
0000fc  a1da              ADR      r1,|L1.1128|
0000fe  f50470da          ADD      r0,r4,#0x1b4          ;144
000102  f7fffffe          BL       inflateInit_
000106  f1100f06          CMN      r0,#6                 ;144
00010a  d00d              BEQ      |L1.296|
00010c  f1100f04          CMN      r0,#4                 ;144
000110  d004              BEQ      |L1.284|
000112  f1100f02          CMN      r0,#2                 ;144
000116  d002              BEQ      |L1.286|
000118  b958              CBNZ     r0,|L1.306|
00011a  e00f              B        |L1.316|
                  |L1.284|
00011c  bf00              NOP                            ;148
                  |L1.286|
00011e  a1d4              ADR      r1,|L1.1136|
000120  4620              MOV      r0,r4                 ;148
000122  f7fffffe          BL       png_error
000126  e009              B        |L1.316|
                  |L1.296|
000128  a1d6              ADR      r1,|L1.1156|
00012a  4620              MOV      r0,r4                 ;149
00012c  f7fffffe          BL       png_error
000130  e004              B        |L1.316|
                  |L1.306|
000132  a1d9              ADR      r1,|L1.1176|
000134  4620              MOV      r0,r4                 ;150
000136  f7fffffe          BL       png_error
00013a  bf00              NOP                            ;144
                  |L1.316|
00013c  bf00              NOP                            ;146
00013e  f44f70e0          MOV      r0,#0x1c0             ;153
000142  f8d411ec          LDR      r1,[r4,#0x1ec]        ;153
000146  5101              STR      r1,[r0,r4]            ;153
000148  1d00              ADDS     r0,r0,#4              ;154
00014a  f8d411f0          LDR      r1,[r4,#0x1f0]        ;154
00014e  5101              STR      r1,[r0,r4]            ;154
000150  2200              MOVS     r2,#0                 ;156
000152  4611              MOV      r1,r2                 ;156
000154  4620              MOV      r0,r4                 ;156
000156  f7fffffe          BL       png_set_read_fn
00015a  4620              MOV      r0,r4                 ;167
00015c  f7fffffe          BL       setjmp
000160  b108              CBZ      r0,|L1.358|
000162  f7fffffe          BL       abort
                  |L1.358|
000166  4620              MOV      r0,r4                 ;171
000168  e75a              B        |L1.32|
;;;173    
                          ENDP

                  png_create_read_struct PROC
;;;20     png_structp PNGAPI
;;;21     png_create_read_struct(png_const_charp user_png_ver, png_voidp error_ptr,
00016a  b5fe              PUSH     {r1-r7,lr}
;;;22        png_error_ptr error_fn, png_error_ptr warn_fn)
;;;23     {
00016c  4604              MOV      r4,r0
00016e  460d              MOV      r5,r1
000170  4616              MOV      r6,r2
000172  461f              MOV      r7,r3
;;;24     
;;;25     #ifdef PNG_USER_MEM_SUPPORTED
;;;26        return (png_create_read_struct_2(user_png_ver, error_ptr, error_fn,
000174  2000              MOVS     r0,#0
000176  9000              STR      r0,[sp,#0]
000178  9001              STR      r0,[sp,#4]
00017a  463b              MOV      r3,r7
00017c  4632              MOV      r2,r6
00017e  4629              MOV      r1,r5
000180  9002              STR      r0,[sp,#8]
000182  4620              MOV      r0,r4
000184  f7fffffe          BL       png_create_read_struct_2
;;;27           warn_fn, png_voidp_NULL, png_malloc_ptr_NULL, png_free_ptr_NULL));
;;;28     }
000188  bdfe              POP      {r1-r7,pc}
;;;29     
                          ENDP

                  png_read_init_3 PROC
;;;231    void PNGAPI
;;;232    png_read_init_3(png_structpp ptr_ptr, png_const_charp user_png_ver,
00018a  e92d41f0          PUSH     {r4-r8,lr}
;;;233       png_size_t png_struct_size)
;;;234    {
00018e  b0e0              SUB      sp,sp,#0x180
000190  4605              MOV      r5,r0
000192  460f              MOV      r7,r1
000194  4690              MOV      r8,r2
;;;235    #ifdef PNG_SETJMP_SUPPORTED
;;;236       jmp_buf tmp_jmp;  /* to save current jump buffer */
;;;237    #endif
;;;238    
;;;239       int i=0;
000196  2600              MOVS     r6,#0
;;;240    
;;;241       png_structp png_ptr=*ptr_ptr;
000198  682c              LDR      r4,[r5,#0]
;;;242    
;;;243       if(png_ptr == NULL) return;
00019a  b914              CBNZ     r4,|L1.418|
                  |L1.412|
;;;244    
;;;245       do
;;;246       {
;;;247         if(user_png_ver[i] != png_libpng_ver[i])
;;;248         {
;;;249    #ifdef PNG_LEGACY_SUPPORTED
;;;250           png_ptr->flags |= PNG_FLAG_LIBRARY_MISMATCH;
;;;251    #else
;;;252           png_ptr->warning_fn=NULL;
;;;253           png_warning(png_ptr,
;;;254            "Application uses deprecated png_read_init() and should be recompiled.");
;;;255           break;
;;;256    #endif
;;;257         }
;;;258       } while (png_libpng_ver[i++]);
;;;259    
;;;260       png_debug(1, "in png_read_init_3\n");
;;;261    
;;;262    #ifdef PNG_SETJMP_SUPPORTED
;;;263       /* save jump buffer and error functions */
;;;264       png_memcpy(tmp_jmp, png_ptr->jmpbuf, png_sizeof (jmp_buf));
;;;265    #endif
;;;266    
;;;267       if(png_sizeof(png_struct) > png_struct_size)
;;;268         {
;;;269           png_destroy_struct(png_ptr);
;;;270           *ptr_ptr = (png_structp)png_create_struct(PNG_STRUCT_PNG);
;;;271           png_ptr = *ptr_ptr;
;;;272         }
;;;273    
;;;274       /* reset all variables to 0 */
;;;275       png_memset(png_ptr, 0, png_sizeof (png_struct));
;;;276    
;;;277    #ifdef PNG_SETJMP_SUPPORTED
;;;278       /* restore jump buffer */
;;;279       png_memcpy(png_ptr->jmpbuf, tmp_jmp, png_sizeof (jmp_buf));
;;;280    #endif
;;;281    
;;;282       /* added at libpng-1.2.6 */
;;;283    #ifdef PNG_SET_USER_LIMITS_SUPPORTED
;;;284       png_ptr->user_width_max=PNG_USER_WIDTH_MAX;
;;;285       png_ptr->user_height_max=PNG_USER_HEIGHT_MAX;
;;;286    #endif
;;;287    
;;;288       /* initialize zbuf - compression buffer */
;;;289       png_ptr->zbuf_size = PNG_ZBUF_SIZE;
;;;290       png_ptr->zbuf = (png_bytep)png_malloc(png_ptr,
;;;291         (png_uint_32)png_ptr->zbuf_size);
;;;292       png_ptr->zstream.zalloc = png_zalloc;
;;;293       png_ptr->zstream.zfree = png_zfree;
;;;294       png_ptr->zstream.opaque = (voidpf)png_ptr;
;;;295    
;;;296       switch (inflateInit(&png_ptr->zstream))
;;;297       {
;;;298         case Z_OK: /* Do nothing */ break;
;;;299         case Z_MEM_ERROR:
;;;300         case Z_STREAM_ERROR: png_error(png_ptr, "zlib memory"); break;
;;;301         case Z_VERSION_ERROR: png_error(png_ptr, "zlib version"); break;
;;;302         default: png_error(png_ptr, "Unknown zlib error");
;;;303       }
;;;304    
;;;305       png_ptr->zstream.next_out = png_ptr->zbuf;
;;;306       png_ptr->zstream.avail_out = (uInt)png_ptr->zbuf_size;
;;;307    
;;;308       png_set_read_fn(png_ptr, png_voidp_NULL, png_rw_ptr_NULL);
;;;309    }
00019c  b060              ADD      sp,sp,#0x180
00019e  e8bd81f0          POP      {r4-r8,pc}
                  |L1.418|
0001a2  bf00              NOP                            ;245
                  |L1.420|
0001a4  5db8              LDRB     r0,[r7,r6]            ;247
0001a6  499f              LDR      r1,|L1.1060|
0001a8  5d89              LDRB     r1,[r1,r6]            ;247
0001aa  4288              CMP      r0,r1                 ;247
0001ac  d007              BEQ      |L1.446|
0001ae  2000              MOVS     r0,#0                 ;252
0001b0  f8c40184          STR      r0,[r4,#0x184]        ;252
0001b4  49bd              LDR      r1,|L1.1196|
0001b6  4620              MOV      r0,r4                 ;253
0001b8  f7fffffe          BL       png_warning
0001bc  e005              B        |L1.458|
                  |L1.446|
0001be  4630              MOV      r0,r6                 ;258
0001c0  1c76              ADDS     r6,r6,#1              ;258
0001c2  4998              LDR      r1,|L1.1060|
0001c4  5c08              LDRB     r0,[r1,r0]            ;258
0001c6  2800              CMP      r0,#0                 ;258
0001c8  d1ec              BNE      |L1.420|
                  |L1.458|
0001ca  bf00              NOP                            ;255
0001cc  f44f72c0          MOV      r2,#0x180             ;264
0001d0  4621              MOV      r1,r4                 ;264
0001d2  4668              MOV      r0,sp                 ;264
0001d4  f7fffffe          BL       __aeabi_memcpy4
0001d8  f5b87f6a          CMP      r8,#0x3a8             ;267
0001dc  d207              BCS      |L1.494|
0001de  4620              MOV      r0,r4                 ;269
0001e0  f7fffffe          BL       png_destroy_struct
0001e4  2001              MOVS     r0,#1                 ;270
0001e6  f7fffffe          BL       png_create_struct
0001ea  6028              STR      r0,[r5,#0]            ;270
0001ec  682c              LDR      r4,[r5,#0]            ;271
                  |L1.494|
0001ee  f44f716a          MOV      r1,#0x3a8             ;275
0001f2  4620              MOV      r0,r4                 ;275
0001f4  f7fffffe          BL       __aeabi_memclr4
0001f8  f44f72c0          MOV      r2,#0x180             ;279
0001fc  4669              MOV      r1,sp                 ;279
0001fe  4620              MOV      r0,r4                 ;279
000200  f7fffffe          BL       __aeabi_memcpy4
000204  4886              LDR      r0,|L1.1056|
000206  f8c4039c          STR      r0,[r4,#0x39c]        ;284
00020a  f8c403a0          STR      r0,[r4,#0x3a0]        ;285
00020e  f44f5000          MOV      r0,#0x2000            ;289
000212  f8c401f0          STR      r0,[r4,#0x1f0]        ;289
000216  4620              MOV      r0,r4                 ;290
000218  f8d411f0          LDR      r1,[r4,#0x1f0]        ;290
00021c  f7fffffe          BL       png_malloc
000220  f8c401ec          STR      r0,[r4,#0x1ec]        ;290
000224  498e              LDR      r1,|L1.1120|
000226  f44f70ea          MOV      r0,#0x1d4             ;292
00022a  5101              STR      r1,[r0,r4]            ;292
00022c  498d              LDR      r1,|L1.1124|
00022e  1d00              ADDS     r0,r0,#4              ;293
000230  5101              STR      r1,[r0,r4]            ;293
000232  1d00              ADDS     r0,r0,#4              ;294
000234  5104              STR      r4,[r0,r4]            ;294
000236  2238              MOVS     r2,#0x38              ;296
000238  a18b              ADR      r1,|L1.1128|
00023a  f50470da          ADD      r0,r4,#0x1b4          ;296
00023e  f7fffffe          BL       inflateInit_
000242  f1100f06          CMN      r0,#6                 ;296
000246  d00d              BEQ      |L1.612|
000248  f1100f04          CMN      r0,#4                 ;296
00024c  d004              BEQ      |L1.600|
00024e  f1100f02          CMN      r0,#2                 ;296
000252  d002              BEQ      |L1.602|
000254  b958              CBNZ     r0,|L1.622|
000256  e00f              B        |L1.632|
                  |L1.600|
000258  bf00              NOP                            ;300
                  |L1.602|
00025a  a195              ADR      r1,|L1.1200|
00025c  4620              MOV      r0,r4                 ;300
00025e  f7fffffe          BL       png_error
000262  e009              B        |L1.632|
                  |L1.612|
000264  a195              ADR      r1,|L1.1212|
000266  4620              MOV      r0,r4                 ;301
000268  f7fffffe          BL       png_error
00026c  e004              B        |L1.632|
                  |L1.622|
00026e  a18a              ADR      r1,|L1.1176|
000270  4620              MOV      r0,r4                 ;302
000272  f7fffffe          BL       png_error
000276  bf00              NOP                            ;296
                  |L1.632|
000278  bf00              NOP                            ;298
00027a  f44f70e0          MOV      r0,#0x1c0             ;305
00027e  f8d411ec          LDR      r1,[r4,#0x1ec]        ;305
000282  5101              STR      r1,[r0,r4]            ;305
000284  1d00              ADDS     r0,r0,#4              ;306
000286  f8d411f0          LDR      r1,[r4,#0x1f0]        ;306
00028a  5101              STR      r1,[r0,r4]            ;306
00028c  2200              MOVS     r2,#0                 ;308
00028e  4611              MOV      r1,r2                 ;308
000290  4620              MOV      r0,r4                 ;308
000292  f7fffffe          BL       png_set_read_fn
000296  bf00              NOP      
000298  e780              B        |L1.412|
;;;310    
                          ENDP

                  png_read_init_2 PROC
;;;186    void PNGAPI
;;;187    png_read_init_2(png_structp png_ptr, png_const_charp user_png_ver,
00029a  b57f              PUSH     {r0-r6,lr}
;;;188       png_size_t png_struct_size, png_size_t png_info_size)
;;;189    {
00029c  460e              MOV      r6,r1
00029e  4614              MOV      r4,r2
0002a0  461d              MOV      r5,r3
;;;190       /* We only come here via pre-1.0.12-compiled applications */
;;;191       if(png_ptr == NULL) return;
0002a2  9800              LDR      r0,[sp,#0]
0002a4  b900              CBNZ     r0,|L1.680|
                  |L1.678|
;;;192    #if !defined(PNG_NO_STDIO) && !defined(_WIN32_WCE)
;;;193       if(png_sizeof(png_struct) > png_struct_size ||
;;;194          png_sizeof(png_info) > png_info_size)
;;;195       {
;;;196          char msg[80];
;;;197          png_ptr->warning_fn=NULL;
;;;198          if (user_png_ver)
;;;199          {
;;;200            sprintf(msg, "Application was compiled with png.h from libpng-%.20s",
;;;201               user_png_ver);
;;;202            png_warning(png_ptr, msg);
;;;203          }
;;;204          sprintf(msg, "Application  is  running with png.c from libpng-%.20s",
;;;205             png_libpng_ver);
;;;206          png_warning(png_ptr, msg);
;;;207       }
;;;208    #endif
;;;209       if(png_sizeof(png_struct) > png_struct_size)
;;;210         {
;;;211           png_ptr->error_fn=NULL;
;;;212    #ifdef PNG_ERROR_NUMBERS_SUPPORTED
;;;213           png_ptr->flags=0;
;;;214    #endif
;;;215           png_error(png_ptr,
;;;216           "The png struct allocated by the application for reading is too small.");
;;;217         }
;;;218       if(png_sizeof(png_info) > png_info_size)
;;;219         {
;;;220           png_ptr->error_fn=NULL;
;;;221    #ifdef PNG_ERROR_NUMBERS_SUPPORTED
;;;222           png_ptr->flags=0;
;;;223    #endif
;;;224           png_error(png_ptr,
;;;225             "The info struct allocated by application for reading is too small.");
;;;226         }
;;;227       png_read_init_3(&png_ptr, user_png_ver, png_struct_size);
;;;228    }
0002a6  bd7f              POP      {r0-r6,pc}
                  |L1.680|
0002a8  f5b47f6a          CMP      r4,#0x3a8             ;209
0002ac  d20a              BCS      |L1.708|
0002ae  2000              MOVS     r0,#0                 ;211
0002b0  9900              LDR      r1,[sp,#0]            ;211
0002b2  f8c10180          STR      r0,[r1,#0x180]        ;211
0002b6  9900              LDR      r1,[sp,#0]            ;213
0002b8  f8c101ac          STR      r0,[r1,#0x1ac]        ;213
0002bc  4983              LDR      r1,|L1.1228|
0002be  9800              LDR      r0,[sp,#0]            ;215
0002c0  f7fffffe          BL       png_error
                  |L1.708|
0002c4  f5b57f90          CMP      r5,#0x120             ;218
0002c8  d20a              BCS      |L1.736|
0002ca  2000              MOVS     r0,#0                 ;220
0002cc  9900              LDR      r1,[sp,#0]            ;220
0002ce  f8c10180          STR      r0,[r1,#0x180]        ;220
0002d2  9900              LDR      r1,[sp,#0]            ;222
0002d4  f8c101ac          STR      r0,[r1,#0x1ac]        ;222
0002d8  497d              LDR      r1,|L1.1232|
0002da  9800              LDR      r0,[sp,#0]            ;224
0002dc  f7fffffe          BL       png_error
                  |L1.736|
0002e0  4622              MOV      r2,r4                 ;227
0002e2  4631              MOV      r1,r6                 ;227
0002e4  4668              MOV      r0,sp                 ;227
0002e6  f7fffffe          BL       png_read_init_3
0002ea  bf00              NOP      
0002ec  e7db              B        |L1.678|
;;;229    #endif /* PNG_1_0_X || PNG_1_2_X */
                          ENDP

                  png_read_init PROC
;;;179    void PNGAPI
;;;180    png_read_init(png_structp png_ptr)
0002ee  b510              PUSH     {r4,lr}
;;;181    {
0002f0  4604              MOV      r4,r0
;;;182       /* We only come here via pre-1.0.7-compiled applications */
;;;183       png_read_init_2(png_ptr, "1.0.6 or earlier", 0, 0);
0002f2  2300              MOVS     r3,#0
0002f4  461a              MOV      r2,r3
0002f6  a177              ADR      r1,|L1.1236|
0002f8  4620              MOV      r0,r4
0002fa  f7fffffe          BL       png_read_init_2
;;;184    }
0002fe  bd10              POP      {r4,pc}
;;;185    
                          ENDP

                  png_read_info PROC
;;;320    void PNGAPI
;;;321    png_read_info(png_structp png_ptr, png_infop info_ptr)
000300  b5f8              PUSH     {r3-r7,lr}
;;;322    {
000302  4604              MOV      r4,r0
000304  460e              MOV      r6,r1
;;;323       if(png_ptr == NULL) return;
000306  b904              CBNZ     r4,|L1.778|
                  |L1.776|
;;;324       png_debug(1, "in png_read_info\n");
;;;325       /* If we haven't checked all of the PNG signature bytes, do so now. */
;;;326       if (png_ptr->sig_bytes < 8)
;;;327       {
;;;328          png_size_t num_checked = png_ptr->sig_bytes,
;;;329                     num_to_check = 8 - num_checked;
;;;330    
;;;331          png_read_data(png_ptr, &(info_ptr->signature[num_checked]), num_to_check);
;;;332          png_ptr->sig_bytes = 8;
;;;333    
;;;334          if (png_sig_cmp(info_ptr->signature, num_checked, num_to_check))
;;;335          {
;;;336             if (num_checked < 4 &&
;;;337                 png_sig_cmp(info_ptr->signature, num_checked, num_to_check - 4))
;;;338                png_error(png_ptr, "Not a PNG file");
;;;339             else
;;;340                png_error(png_ptr, "PNG file corrupted by ASCII conversion");
;;;341          }
;;;342          if (num_checked < 3)
;;;343             png_ptr->mode |= PNG_HAVE_PNG_SIGNATURE;
;;;344       }
;;;345    
;;;346       for(;;)
;;;347       {
;;;348    #ifdef PNG_USE_LOCAL_ARRAYS
;;;349          PNG_IHDR;
;;;350          PNG_IDAT;
;;;351          PNG_IEND;
;;;352          PNG_PLTE;
;;;353    #if defined(PNG_READ_bKGD_SUPPORTED)
;;;354          PNG_bKGD;
;;;355    #endif
;;;356    #if defined(PNG_READ_cHRM_SUPPORTED)
;;;357          PNG_cHRM;
;;;358    #endif
;;;359    #if defined(PNG_READ_gAMA_SUPPORTED)
;;;360          PNG_gAMA;
;;;361    #endif
;;;362    #if defined(PNG_READ_hIST_SUPPORTED)
;;;363          PNG_hIST;
;;;364    #endif
;;;365    #if defined(PNG_READ_iCCP_SUPPORTED)
;;;366          PNG_iCCP;
;;;367    #endif
;;;368    #if defined(PNG_READ_iTXt_SUPPORTED)
;;;369          PNG_iTXt;
;;;370    #endif
;;;371    #if defined(PNG_READ_oFFs_SUPPORTED)
;;;372          PNG_oFFs;
;;;373    #endif
;;;374    #if defined(PNG_READ_pCAL_SUPPORTED)
;;;375          PNG_pCAL;
;;;376    #endif
;;;377    #if defined(PNG_READ_pHYs_SUPPORTED)
;;;378          PNG_pHYs;
;;;379    #endif
;;;380    #if defined(PNG_READ_sBIT_SUPPORTED)
;;;381          PNG_sBIT;
;;;382    #endif
;;;383    #if defined(PNG_READ_sCAL_SUPPORTED)
;;;384          PNG_sCAL;
;;;385    #endif
;;;386    #if defined(PNG_READ_sPLT_SUPPORTED)
;;;387          PNG_sPLT;
;;;388    #endif
;;;389    #if defined(PNG_READ_sRGB_SUPPORTED)
;;;390          PNG_sRGB;
;;;391    #endif
;;;392    #if defined(PNG_READ_tEXt_SUPPORTED)
;;;393          PNG_tEXt;
;;;394    #endif
;;;395    #if defined(PNG_READ_tIME_SUPPORTED)
;;;396          PNG_tIME;
;;;397    #endif
;;;398    #if defined(PNG_READ_tRNS_SUPPORTED)
;;;399          PNG_tRNS;
;;;400    #endif
;;;401    #if defined(PNG_READ_zTXt_SUPPORTED)
;;;402          PNG_zTXt;
;;;403    #endif
;;;404    #endif /* PNG_USE_LOCAL_ARRAYS */
;;;405          png_byte chunk_length[4];
;;;406          png_uint_32 length;
;;;407    
;;;408          png_read_data(png_ptr, chunk_length, 4);
;;;409          length = png_get_uint_31(png_ptr,chunk_length);
;;;410    
;;;411          png_reset_crc(png_ptr);
;;;412          png_crc_read(png_ptr, png_ptr->chunk_name, 4);
;;;413    
;;;414          png_debug2(0, "Reading %s chunk, length=%lu.\n", png_ptr->chunk_name,
;;;415             length);
;;;416    
;;;417          /* This should be a binary subdivision search or a hash for
;;;418           * matching the chunk name rather than a linear search.
;;;419           */
;;;420          if (!png_memcmp(png_ptr->chunk_name, (png_bytep)png_IDAT, 4))
;;;421            if(png_ptr->mode & PNG_AFTER_IDAT)
;;;422              png_ptr->mode |= PNG_HAVE_CHUNK_AFTER_IDAT;
;;;423    
;;;424          if (!png_memcmp(png_ptr->chunk_name, png_IHDR, 4))
;;;425             png_handle_IHDR(png_ptr, info_ptr, length);
;;;426          else if (!png_memcmp(png_ptr->chunk_name, png_IEND, 4))
;;;427             png_handle_IEND(png_ptr, info_ptr, length);
;;;428    #ifdef PNG_HANDLE_AS_UNKNOWN_SUPPORTED
;;;429          else if (png_handle_as_unknown(png_ptr, png_ptr->chunk_name))
;;;430          {
;;;431             if (!png_memcmp(png_ptr->chunk_name, png_IDAT, 4))
;;;432                png_ptr->mode |= PNG_HAVE_IDAT;
;;;433             png_handle_unknown(png_ptr, info_ptr, length);
;;;434             if (!png_memcmp(png_ptr->chunk_name, png_PLTE, 4))
;;;435                png_ptr->mode |= PNG_HAVE_PLTE;
;;;436             else if (!png_memcmp(png_ptr->chunk_name, png_IDAT, 4))
;;;437             {
;;;438                if (!(png_ptr->mode & PNG_HAVE_IHDR))
;;;439                   png_error(png_ptr, "Missing IHDR before IDAT");
;;;440                else if (png_ptr->color_type == PNG_COLOR_TYPE_PALETTE &&
;;;441                         !(png_ptr->mode & PNG_HAVE_PLTE))
;;;442                   png_error(png_ptr, "Missing PLTE before IDAT");
;;;443                break;
;;;444             }
;;;445          }
;;;446    #endif
;;;447          else if (!png_memcmp(png_ptr->chunk_name, png_PLTE, 4))
;;;448             png_handle_PLTE(png_ptr, info_ptr, length);
;;;449          else if (!png_memcmp(png_ptr->chunk_name, png_IDAT, 4))
;;;450          {
;;;451             if (!(png_ptr->mode & PNG_HAVE_IHDR))
;;;452                png_error(png_ptr, "Missing IHDR before IDAT");
;;;453             else if (png_ptr->color_type == PNG_COLOR_TYPE_PALETTE &&
;;;454                      !(png_ptr->mode & PNG_HAVE_PLTE))
;;;455                png_error(png_ptr, "Missing PLTE before IDAT");
;;;456    
;;;457             png_ptr->idat_size = length;
;;;458             png_ptr->mode |= PNG_HAVE_IDAT;
;;;459             break;
;;;460          }
;;;461    #if defined(PNG_READ_bKGD_SUPPORTED)
;;;462          else if (!png_memcmp(png_ptr->chunk_name, png_bKGD, 4))
;;;463             png_handle_bKGD(png_ptr, info_ptr, length);
;;;464    #endif
;;;465    #if defined(PNG_READ_cHRM_SUPPORTED)
;;;466          else if (!png_memcmp(png_ptr->chunk_name, png_cHRM, 4))
;;;467             png_handle_cHRM(png_ptr, info_ptr, length);
;;;468    #endif
;;;469    #if defined(PNG_READ_gAMA_SUPPORTED)
;;;470          else if (!png_memcmp(png_ptr->chunk_name, png_gAMA, 4))
;;;471             png_handle_gAMA(png_ptr, info_ptr, length);
;;;472    #endif
;;;473    #if defined(PNG_READ_hIST_SUPPORTED)
;;;474          else if (!png_memcmp(png_ptr->chunk_name, png_hIST, 4))
;;;475             png_handle_hIST(png_ptr, info_ptr, length);
;;;476    #endif
;;;477    #if defined(PNG_READ_oFFs_SUPPORTED)
;;;478          else if (!png_memcmp(png_ptr->chunk_name, png_oFFs, 4))
;;;479             png_handle_oFFs(png_ptr, info_ptr, length);
;;;480    #endif
;;;481    #if defined(PNG_READ_pCAL_SUPPORTED)
;;;482          else if (!png_memcmp(png_ptr->chunk_name, png_pCAL, 4))
;;;483             png_handle_pCAL(png_ptr, info_ptr, length);
;;;484    #endif
;;;485    #if defined(PNG_READ_sCAL_SUPPORTED)
;;;486          else if (!png_memcmp(png_ptr->chunk_name, png_sCAL, 4))
;;;487             png_handle_sCAL(png_ptr, info_ptr, length);
;;;488    #endif
;;;489    #if defined(PNG_READ_pHYs_SUPPORTED)
;;;490          else if (!png_memcmp(png_ptr->chunk_name, png_pHYs, 4))
;;;491             png_handle_pHYs(png_ptr, info_ptr, length);
;;;492    #endif
;;;493    #if defined(PNG_READ_sBIT_SUPPORTED)
;;;494          else if (!png_memcmp(png_ptr->chunk_name, png_sBIT, 4))
;;;495             png_handle_sBIT(png_ptr, info_ptr, length);
;;;496    #endif
;;;497    #if defined(PNG_READ_sRGB_SUPPORTED)
;;;498          else if (!png_memcmp(png_ptr->chunk_name, png_sRGB, 4))
;;;499             png_handle_sRGB(png_ptr, info_ptr, length);
;;;500    #endif
;;;501    #if defined(PNG_READ_iCCP_SUPPORTED)
;;;502          else if (!png_memcmp(png_ptr->chunk_name, png_iCCP, 4))
;;;503             png_handle_iCCP(png_ptr, info_ptr, length);
;;;504    #endif
;;;505    #if defined(PNG_READ_sPLT_SUPPORTED)
;;;506          else if (!png_memcmp(png_ptr->chunk_name, png_sPLT, 4))
;;;507             png_handle_sPLT(png_ptr, info_ptr, length);
;;;508    #endif
;;;509    #if defined(PNG_READ_tEXt_SUPPORTED)
;;;510          else if (!png_memcmp(png_ptr->chunk_name, png_tEXt, 4))
;;;511             png_handle_tEXt(png_ptr, info_ptr, length);
;;;512    #endif
;;;513    #if defined(PNG_READ_tIME_SUPPORTED)
;;;514          else if (!png_memcmp(png_ptr->chunk_name, png_tIME, 4))
;;;515             png_handle_tIME(png_ptr, info_ptr, length);
;;;516    #endif
;;;517    #if defined(PNG_READ_tRNS_SUPPORTED)
;;;518          else if (!png_memcmp(png_ptr->chunk_name, png_tRNS, 4))
;;;519             png_handle_tRNS(png_ptr, info_ptr, length);
;;;520    #endif
;;;521    #if defined(PNG_READ_zTXt_SUPPORTED)
;;;522          else if (!png_memcmp(png_ptr->chunk_name, png_zTXt, 4))
;;;523             png_handle_zTXt(png_ptr, info_ptr, length);
;;;524    #endif
;;;525    #if defined(PNG_READ_iTXt_SUPPORTED)
;;;526          else if (!png_memcmp(png_ptr->chunk_name, png_iTXt, 4))
;;;527             png_handle_iTXt(png_ptr, info_ptr, length);
;;;528    #endif
;;;529          else
;;;530             png_handle_unknown(png_ptr, info_ptr, length);
;;;531       }
;;;532    }
000308  bdf8              POP      {r3-r7,pc}
                  |L1.778|
00030a  f894026c          LDRB     r0,[r4,#0x26c]        ;326
00030e  2808              CMP      r0,#8                 ;326
000310  da2f              BGE      |L1.882|
000312  f894526c          LDRB     r5,[r4,#0x26c]        ;328
000316  f1c50708          RSB      r7,r5,#8              ;329
00031a  f1060020          ADD      r0,r6,#0x20           ;331
00031e  1941              ADDS     r1,r0,r5              ;331
000320  463a              MOV      r2,r7                 ;331
000322  4620              MOV      r0,r4                 ;331
000324  f7fffffe          BL       png_read_data
000328  2008              MOVS     r0,#8                 ;332
00032a  f884026c          STRB     r0,[r4,#0x26c]        ;332
00032e  463a              MOV      r2,r7                 ;334
000330  4629              MOV      r1,r5                 ;334
000332  f1060020          ADD      r0,r6,#0x20           ;334
000336  f7fffffe          BL       png_sig_cmp
00033a  b188              CBZ      r0,|L1.864|
00033c  2d04              CMP      r5,#4                 ;336
00033e  d20b              BCS      |L1.856|
000340  1f3a              SUBS     r2,r7,#4              ;337
000342  4629              MOV      r1,r5                 ;337
000344  f1060020          ADD      r0,r6,#0x20           ;337
000348  f7fffffe          BL       png_sig_cmp
00034c  b120              CBZ      r0,|L1.856|
00034e  a166              ADR      r1,|L1.1256|
000350  4620              MOV      r0,r4                 ;338
000352  f7fffffe          BL       png_error
000356  e003              B        |L1.864|
                  |L1.856|
000358  a167              ADR      r1,|L1.1272|
00035a  4620              MOV      r0,r4                 ;340
00035c  f7fffffe          BL       png_error
                  |L1.864|
000360  2d03              CMP      r5,#3                 ;342
000362  d205              BCS      |L1.880|
000364  f8d401a8          LDR      r0,[r4,#0x1a8]        ;343
000368  f4405080          ORR      r0,r0,#0x1000         ;343
00036c  f8c401a8          STR      r0,[r4,#0x1a8]        ;343
                  |L1.880|
000370  bf00              NOP                            ;344
                  |L1.882|
000372  bf00              NOP                            ;346
                  |L1.884|
000374  2204              MOVS     r2,#4                 ;408
000376  4669              MOV      r1,sp                 ;408
000378  4620              MOV      r0,r4                 ;408
00037a  f7fffffe          BL       png_read_data
00037e  4669              MOV      r1,sp                 ;409
000380  4620              MOV      r0,r4                 ;409
000382  f7fffffe          BL       png_get_uint_31
000386  4605              MOV      r5,r0                 ;409
000388  4620              MOV      r0,r4                 ;411
00038a  f7fffffe          BL       png_reset_crc
00038e  2204              MOVS     r2,#4                 ;412
000390  f5047117          ADD      r1,r4,#0x25c          ;412
000394  4620              MOV      r0,r4                 ;412
000396  f7fffffe          BL       png_crc_read
00039a  2204              MOVS     r2,#4                 ;420
00039c  4960              LDR      r1,|L1.1312|
00039e  f5047017          ADD      r0,r4,#0x25c          ;420
0003a2  f7fffffe          BL       memcmp
0003a6  b950              CBNZ     r0,|L1.958|
0003a8  f89401a8          LDRB     r0,[r4,#0x1a8]        ;421
0003ac  f0000008          AND      r0,r0,#8              ;421
0003b0  b128              CBZ      r0,|L1.958|
0003b2  f8d401a8          LDR      r0,[r4,#0x1a8]        ;422
0003b6  f4405000          ORR      r0,r0,#0x2000         ;422
0003ba  f8c401a8          STR      r0,[r4,#0x1a8]        ;422
                  |L1.958|
0003be  2204              MOVS     r2,#4                 ;424
0003c0  4958              LDR      r1,|L1.1316|
0003c2  f5047017          ADD      r0,r4,#0x25c          ;424
0003c6  f7fffffe          BL       memcmp
0003ca  b928              CBNZ     r0,|L1.984|
0003cc  462a              MOV      r2,r5                 ;425
0003ce  4631              MOV      r1,r6                 ;425
0003d0  4620              MOV      r0,r4                 ;425
0003d2  f7fffffe          BL       png_handle_IHDR
0003d6  e1e5              B        |L1.1956|
                  |L1.984|
0003d8  2204              MOVS     r2,#4                 ;426
0003da  4953              LDR      r1,|L1.1320|
0003dc  f5047017          ADD      r0,r4,#0x25c          ;426
0003e0  f7fffffe          BL       memcmp
0003e4  b928              CBNZ     r0,|L1.1010|
0003e6  462a              MOV      r2,r5                 ;427
0003e8  4631              MOV      r1,r6                 ;427
0003ea  4620              MOV      r0,r4                 ;427
0003ec  f7fffffe          BL       png_handle_IEND
0003f0  e1d8              B        |L1.1956|
                  |L1.1010|
0003f2  f5047117          ADD      r1,r4,#0x25c          ;429
0003f6  4620              MOV      r0,r4                 ;429
0003f8  f7fffffe          BL       png_handle_as_unknown
0003fc  2800              CMP      r0,#0                 ;429
0003fe  d00d              BEQ      |L1.1052|
000400  2204              MOVS     r2,#4                 ;431
000402  4947              LDR      r1,|L1.1312|
000404  f5047017          ADD      r0,r4,#0x25c          ;431
000408  f7fffffe          BL       memcmp
00040c  b928              CBNZ     r0,|L1.1050|
00040e  f8d401a8          LDR      r0,[r4,#0x1a8]        ;432
000412  f0400004          ORR      r0,r0,#4              ;432
000416  f8c401a8          STR      r0,[r4,#0x1a8]        ;432
                  |L1.1050|
00041a  e087              B        |L1.1324|
                  |L1.1052|
00041c  e0b9              B        |L1.1426|
00041e  0000              DCW      0x0000
                  |L1.1056|
                          DCD      0x000f4240
                  |L1.1060|
                          DCD      png_libpng_ver
                  |L1.1064|
000428  496e636f          DCB      "Incompatible libpng version in application and library",0
00042c  6d706174
000430  69626c65
000434  206c6962
000438  706e6720
00043c  76657273
000440  696f6e20
000444  696e2061
000448  70706c69
00044c  63617469
000450  6f6e2061
000454  6e64206c
000458  69627261
00045c  727900  
00045f  00                DCB      0
                  |L1.1120|
                          DCD      png_zalloc
                  |L1.1124|
                          DCD      png_zfree
                  |L1.1128|
000468  312e322e          DCB      "1.2.3",0
00046c  3300    
00046e  00                DCB      0
00046f  00                DCB      0
                  |L1.1136|
000470  7a6c6962          DCB      "zlib memory error",0
000474  206d656d
000478  6f727920
00047c  6572726f
000480  7200    
000482  00                DCB      0
000483  00                DCB      0
                  |L1.1156|
000484  7a6c6962          DCB      "zlib version error",0
000488  20766572
00048c  73696f6e
000490  20657272
000494  6f7200  
000497  00                DCB      0
                  |L1.1176|
000498  556e6b6e          DCB      "Unknown zlib error",0
00049c  6f776e20
0004a0  7a6c6962
0004a4  20657272
0004a8  6f7200  
0004ab  00                DCB      0
                  |L1.1196|
                          DCD      ||.conststring||
                  |L1.1200|
0004b0  7a6c6962          DCB      "zlib memory",0
0004b4  206d656d
0004b8  6f727900
                  |L1.1212|
0004bc  7a6c6962          DCB      "zlib version",0
0004c0  20766572
0004c4  73696f6e
0004c8  00      
0004c9  00                DCB      0
0004ca  00                DCB      0
0004cb  00                DCB      0
                  |L1.1228|
                          DCD      ||.conststring||+0x48
                  |L1.1232|
                          DCD      ||.conststring||+0x90
                  |L1.1236|
0004d4  312e302e          DCB      "1.0.6 or earlier",0
0004d8  36206f72
0004dc  20656172
0004e0  6c696572
0004e4  00      
0004e5  00                DCB      0
0004e6  00                DCB      0
0004e7  00                DCB      0
                  |L1.1256|
0004e8  4e6f7420          DCB      "Not a PNG file",0
0004ec  6120504e
0004f0  47206669
0004f4  6c6500  
0004f7  00                DCB      0
                  |L1.1272|
0004f8  504e4720          DCB      "PNG file corrupted by ASCII conversion",0
0004fc  66696c65
000500  20636f72
000504  72757074
000508  65642062
00050c  79204153
000510  43494920
000514  636f6e76
000518  65727369
00051c  6f6e00  
00051f  00                DCB      0
                  |L1.1312|
                          DCD      png_IDAT
                  |L1.1316|
                          DCD      png_IHDR
                  |L1.1320|
                          DCD      png_IEND
                  |L1.1324|
00052c  462a              MOV      r2,r5                 ;433
00052e  4631              MOV      r1,r6                 ;433
000530  4620              MOV      r0,r4                 ;433
000532  f7fffffe          BL       png_handle_unknown
000536  2204              MOVS     r2,#4                 ;434
000538  49fd              LDR      r1,|L1.2352|
00053a  f5047017          ADD      r0,r4,#0x25c          ;434
00053e  f7fffffe          BL       memcmp
000542  b930              CBNZ     r0,|L1.1362|
000544  f8d401a8          LDR      r0,[r4,#0x1a8]        ;435
000548  f0400002          ORR      r0,r0,#2              ;435
00054c  f8c401a8          STR      r0,[r4,#0x1a8]        ;435
                  |L1.1360|
000550  e128              B        |L1.1956|
                  |L1.1362|
000552  2204              MOVS     r2,#4                 ;436
000554  49f7              LDR      r1,|L1.2356|
000556  f5047017          ADD      r0,r4,#0x25c          ;436
00055a  f7fffffe          BL       memcmp
00055e  2800              CMP      r0,#0                 ;436
000560  d1f6              BNE      |L1.1360|
000562  f89401a8          LDRB     r0,[r4,#0x1a8]        ;438
000566  f0000001          AND      r0,r0,#1              ;438
00056a  b920              CBNZ     r0,|L1.1398|
00056c  a1f2              ADR      r1,|L1.2360|
00056e  4620              MOV      r0,r4                 ;439
000570  f7fffffe          BL       png_error
000574  e00c              B        |L1.1424|
                  |L1.1398|
000576  f8940266          LDRB     r0,[r4,#0x266]        ;440
00057a  2803              CMP      r0,#3                 ;440
00057c  d108              BNE      |L1.1424|
00057e  f89401a8          LDRB     r0,[r4,#0x1a8]        ;441
000582  f0000002          AND      r0,r0,#2              ;441
000586  b918              CBNZ     r0,|L1.1424|
000588  a1f2              ADR      r1,|L1.2388|
00058a  4620              MOV      r0,r4                 ;442
00058c  f7fffffe          BL       png_error
                  |L1.1424|
000590  e109              B        |L1.1958|
                  |L1.1426|
000592  2204              MOVS     r2,#4                 ;447
000594  49e6              LDR      r1,|L1.2352|
000596  f5047017          ADD      r0,r4,#0x25c          ;447
00059a  f7fffffe          BL       memcmp
00059e  b928              CBNZ     r0,|L1.1452|
0005a0  462a              MOV      r2,r5                 ;448
0005a2  4631              MOV      r1,r6                 ;448
0005a4  4620              MOV      r0,r4                 ;448
0005a6  f7fffffe          BL       png_handle_PLTE
0005aa  e0fb              B        |L1.1956|
                  |L1.1452|
0005ac  2204              MOVS     r2,#4                 ;449
0005ae  49e1              LDR      r1,|L1.2356|
0005b0  f5047017          ADD      r0,r4,#0x25c          ;449
0005b4  f7fffffe          BL       memcmp
0005b8  b9f8              CBNZ     r0,|L1.1530|
0005ba  f89401a8          LDRB     r0,[r4,#0x1a8]        ;451
0005be  f0000001          AND      r0,r0,#1              ;451
0005c2  b920              CBNZ     r0,|L1.1486|
0005c4  a1dc              ADR      r1,|L1.2360|
0005c6  4620              MOV      r0,r4                 ;452
0005c8  f7fffffe          BL       png_error
0005cc  e00c              B        |L1.1512|
                  |L1.1486|
0005ce  f8940266          LDRB     r0,[r4,#0x266]        ;453
0005d2  2803              CMP      r0,#3                 ;453
0005d4  d108              BNE      |L1.1512|
0005d6  f89401a8          LDRB     r0,[r4,#0x1a8]        ;454
0005da  f0000002          AND      r0,r0,#2              ;454
0005de  b918              CBNZ     r0,|L1.1512|
0005e0  a1dc              ADR      r1,|L1.2388|
0005e2  4620              MOV      r0,r4                 ;455
0005e4  f7fffffe          BL       png_error
                  |L1.1512|
0005e8  f8c4524c          STR      r5,[r4,#0x24c]        ;457
0005ec  f8d401a8          LDR      r0,[r4,#0x1a8]        ;458
0005f0  f0400004          ORR      r0,r0,#4              ;458
0005f4  f8c401a8          STR      r0,[r4,#0x1a8]        ;458
0005f8  e0d5              B        |L1.1958|
                  |L1.1530|
0005fa  2204              MOVS     r2,#4                 ;462
0005fc  49dc              LDR      r1,|L1.2416|
0005fe  f5047017          ADD      r0,r4,#0x25c          ;462
000602  f7fffffe          BL       memcmp
000606  b928              CBNZ     r0,|L1.1556|
000608  462a              MOV      r2,r5                 ;463
00060a  4631              MOV      r1,r6                 ;463
00060c  4620              MOV      r0,r4                 ;463
00060e  f7fffffe          BL       png_handle_bKGD
000612  e0c7              B        |L1.1956|
                  |L1.1556|
000614  2204              MOVS     r2,#4                 ;466
000616  49d7              LDR      r1,|L1.2420|
000618  f5047017          ADD      r0,r4,#0x25c          ;466
00061c  f7fffffe          BL       memcmp
000620  b928              CBNZ     r0,|L1.1582|
000622  462a              MOV      r2,r5                 ;467
000624  4631              MOV      r1,r6                 ;467
000626  4620              MOV      r0,r4                 ;467
000628  f7fffffe          BL       png_handle_cHRM
00062c  e0ba              B        |L1.1956|
                  |L1.1582|
00062e  2204              MOVS     r2,#4                 ;470
000630  49d1              LDR      r1,|L1.2424|
000632  f5047017          ADD      r0,r4,#0x25c          ;470
000636  f7fffffe          BL       memcmp
00063a  b928              CBNZ     r0,|L1.1608|
00063c  462a              MOV      r2,r5                 ;471
00063e  4631              MOV      r1,r6                 ;471
000640  4620              MOV      r0,r4                 ;471
000642  f7fffffe          BL       png_handle_gAMA
000646  e0ad              B        |L1.1956|
                  |L1.1608|
000648  2204              MOVS     r2,#4                 ;474
00064a  49cc              LDR      r1,|L1.2428|
00064c  f5047017          ADD      r0,r4,#0x25c          ;474
000650  f7fffffe          BL       memcmp
000654  b928              CBNZ     r0,|L1.1634|
000656  462a              MOV      r2,r5                 ;475
000658  4631              MOV      r1,r6                 ;475
00065a  4620              MOV      r0,r4                 ;475
00065c  f7fffffe          BL       png_handle_hIST
000660  e0a0              B        |L1.1956|
                  |L1.1634|
000662  2204              MOVS     r2,#4                 ;478
000664  49c6              LDR      r1,|L1.2432|
000666  f5047017          ADD      r0,r4,#0x25c          ;478
00066a  f7fffffe          BL       memcmp
00066e  b928              CBNZ     r0,|L1.1660|
000670  462a              MOV      r2,r5                 ;479
000672  4631              MOV      r1,r6                 ;479
000674  4620              MOV      r0,r4                 ;479
000676  f7fffffe          BL       png_handle_oFFs
00067a  e093              B        |L1.1956|
                  |L1.1660|
00067c  2204              MOVS     r2,#4                 ;482
00067e  49c1              LDR      r1,|L1.2436|
000680  f5047017          ADD      r0,r4,#0x25c          ;482
000684  f7fffffe          BL       memcmp
000688  b928              CBNZ     r0,|L1.1686|
00068a  462a              MOV      r2,r5                 ;483
00068c  4631              MOV      r1,r6                 ;483
00068e  4620              MOV      r0,r4                 ;483
000690  f7fffffe          BL       png_handle_pCAL
000694  e086              B        |L1.1956|
                  |L1.1686|
000696  2204              MOVS     r2,#4                 ;486
000698  49bb              LDR      r1,|L1.2440|
00069a  f5047017          ADD      r0,r4,#0x25c          ;486
00069e  f7fffffe          BL       memcmp
0006a2  b928              CBNZ     r0,|L1.1712|
0006a4  462a              MOV      r2,r5                 ;487
0006a6  4631              MOV      r1,r6                 ;487
0006a8  4620              MOV      r0,r4                 ;487
0006aa  f7fffffe          BL       png_handle_sCAL
0006ae  e079              B        |L1.1956|
                  |L1.1712|
0006b0  2204              MOVS     r2,#4                 ;490
0006b2  49b6              LDR      r1,|L1.2444|
0006b4  f5047017          ADD      r0,r4,#0x25c          ;490
0006b8  f7fffffe          BL       memcmp
0006bc  b928              CBNZ     r0,|L1.1738|
0006be  462a              MOV      r2,r5                 ;491
0006c0  4631              MOV      r1,r6                 ;491
0006c2  4620              MOV      r0,r4                 ;491
0006c4  f7fffffe          BL       png_handle_pHYs
0006c8  e06c              B        |L1.1956|
                  |L1.1738|
0006ca  2204              MOVS     r2,#4                 ;494
0006cc  49b0              LDR      r1,|L1.2448|
0006ce  f5047017          ADD      r0,r4,#0x25c          ;494
0006d2  f7fffffe          BL       memcmp
0006d6  b928              CBNZ     r0,|L1.1764|
0006d8  462a              MOV      r2,r5                 ;495
0006da  4631              MOV      r1,r6                 ;495
0006dc  4620              MOV      r0,r4                 ;495
0006de  f7fffffe          BL       png_handle_sBIT
0006e2  e05f              B        |L1.1956|
                  |L1.1764|
0006e4  2204              MOVS     r2,#4                 ;498
0006e6  49ab              LDR      r1,|L1.2452|
0006e8  f5047017          ADD      r0,r4,#0x25c          ;498
0006ec  f7fffffe          BL       memcmp
0006f0  b928              CBNZ     r0,|L1.1790|
0006f2  462a              MOV      r2,r5                 ;499
0006f4  4631              MOV      r1,r6                 ;499
0006f6  4620              MOV      r0,r4                 ;499
0006f8  f7fffffe          BL       png_handle_sRGB
0006fc  e052              B        |L1.1956|
                  |L1.1790|
0006fe  2204              MOVS     r2,#4                 ;502
000700  49a5              LDR      r1,|L1.2456|
000702  f5047017          ADD      r0,r4,#0x25c          ;502
000706  f7fffffe          BL       memcmp
00070a  b928              CBNZ     r0,|L1.1816|
00070c  462a              MOV      r2,r5                 ;503
00070e  4631              MOV      r1,r6                 ;503
000710  4620              MOV      r0,r4                 ;503
000712  f7fffffe          BL       png_handle_iCCP
000716  e045              B        |L1.1956|
                  |L1.1816|
000718  2204              MOVS     r2,#4                 ;506
00071a  49a0              LDR      r1,|L1.2460|
00071c  f5047017          ADD      r0,r4,#0x25c          ;506
000720  f7fffffe          BL       memcmp
000724  b928              CBNZ     r0,|L1.1842|
000726  462a              MOV      r2,r5                 ;507
000728  4631              MOV      r1,r6                 ;507
00072a  4620              MOV      r0,r4                 ;507
00072c  f7fffffe          BL       png_handle_sPLT
000730  e038              B        |L1.1956|
                  |L1.1842|
000732  2204              MOVS     r2,#4                 ;510
000734  499a              LDR      r1,|L1.2464|
000736  f5047017          ADD      r0,r4,#0x25c          ;510
00073a  f7fffffe          BL       memcmp
00073e  b928              CBNZ     r0,|L1.1868|
000740  462a              MOV      r2,r5                 ;511
000742  4631              MOV      r1,r6                 ;511
000744  4620              MOV      r0,r4                 ;511
000746  f7fffffe          BL       png_handle_tEXt
00074a  e02b              B        |L1.1956|
                  |L1.1868|
00074c  2204              MOVS     r2,#4                 ;514
00074e  4995              LDR      r1,|L1.2468|
000750  f5047017          ADD      r0,r4,#0x25c          ;514
000754  f7fffffe          BL       memcmp
000758  b928              CBNZ     r0,|L1.1894|
00075a  462a              MOV      r2,r5                 ;515
00075c  4631              MOV      r1,r6                 ;515
00075e  4620              MOV      r0,r4                 ;515
000760  f7fffffe          BL       png_handle_tIME
000764  e01e              B        |L1.1956|
                  |L1.1894|
000766  2204              MOVS     r2,#4                 ;518
000768  498f              LDR      r1,|L1.2472|
00076a  f5047017          ADD      r0,r4,#0x25c          ;518
00076e  f7fffffe          BL       memcmp
000772  b928              CBNZ     r0,|L1.1920|
000774  462a              MOV      r2,r5                 ;519
000776  4631              MOV      r1,r6                 ;519
000778  4620              MOV      r0,r4                 ;519
00077a  f7fffffe          BL       png_handle_tRNS
00077e  e011              B        |L1.1956|
                  |L1.1920|
000780  2204              MOVS     r2,#4                 ;522
000782  498a              LDR      r1,|L1.2476|
000784  f5047017          ADD      r0,r4,#0x25c          ;522
000788  f7fffffe          BL       memcmp
00078c  b928              CBNZ     r0,|L1.1946|
00078e  462a              MOV      r2,r5                 ;523
000790  4631              MOV      r1,r6                 ;523
000792  4620              MOV      r0,r4                 ;523
000794  f7fffffe          BL       png_handle_zTXt
000798  e004              B        |L1.1956|
                  |L1.1946|
00079a  462a              MOV      r2,r5                 ;530
00079c  4631              MOV      r1,r6                 ;530
00079e  4620              MOV      r0,r4                 ;530
0007a0  f7fffffe          BL       png_handle_unknown
                  |L1.1956|
0007a4  e5e6              B        |L1.884|
                  |L1.1958|
0007a6  bf00              NOP                            ;443
0007a8  bf00              NOP      
0007aa  e5ad              B        |L1.776|
;;;533    #endif /* PNG_NO_SEQUENTIAL_READ_SUPPORTED */
                          ENDP

                  png_read_update_info PROC
;;;536    void PNGAPI
;;;537    png_read_update_info(png_structp png_ptr, png_infop info_ptr)
0007ac  b570              PUSH     {r4-r6,lr}
;;;538    {
0007ae  4604              MOV      r4,r0
0007b0  460d              MOV      r5,r1
;;;539       png_debug(1, "in png_read_update_info\n");
;;;540       if(png_ptr == NULL) return;
0007b2  b904              CBNZ     r4,|L1.1974|
                  |L1.1972|
;;;541       if (!(png_ptr->flags & PNG_FLAG_ROW_INIT))
;;;542          png_read_start_row(png_ptr);
;;;543       else
;;;544          png_warning(png_ptr,
;;;545          "Ignoring extra png_read_update_info() call; row buffer not reallocated");
;;;546       png_read_transform_info(png_ptr, info_ptr);
;;;547    }
0007b4  bd70              POP      {r4-r6,pc}
                  |L1.1974|
0007b6  f89401ac          LDRB     r0,[r4,#0x1ac]        ;541
0007ba  f0000040          AND      r0,r0,#0x40           ;541
0007be  b918              CBNZ     r0,|L1.1992|
0007c0  4620              MOV      r0,r4                 ;542
0007c2  f7fffffe          BL       png_read_start_row
0007c6  e003              B        |L1.2000|
                  |L1.1992|
0007c8  4979              LDR      r1,|L1.2480|
0007ca  4620              MOV      r0,r4                 ;544
0007cc  f7fffffe          BL       png_warning
                  |L1.2000|
0007d0  4629              MOV      r1,r5                 ;546
0007d2  4620              MOV      r0,r4                 ;546
0007d4  f7fffffe          BL       png_read_transform_info
0007d8  bf00              NOP      
0007da  e7eb              B        |L1.1972|
;;;548    
                          ENDP

                  png_start_read_image PROC
;;;555    void PNGAPI
;;;556    png_start_read_image(png_structp png_ptr)
0007dc  b510              PUSH     {r4,lr}
;;;557    {
0007de  4604              MOV      r4,r0
;;;558       png_debug(1, "in png_start_read_image\n");
;;;559       if(png_ptr == NULL) return;
0007e0  b904              CBNZ     r4,|L1.2020|
                  |L1.2018|
;;;560       if (!(png_ptr->flags & PNG_FLAG_ROW_INIT))
;;;561          png_read_start_row(png_ptr);
;;;562    }
0007e2  bd10              POP      {r4,pc}
                  |L1.2020|
0007e4  f89401ac          LDRB     r0,[r4,#0x1ac]        ;560
0007e8  f0000040          AND      r0,r0,#0x40           ;560
0007ec  b910              CBNZ     r0,|L1.2036|
0007ee  4620              MOV      r0,r4                 ;561
0007f0  f7fffffe          BL       png_read_start_row
                  |L1.2036|
0007f4  bf00              NOP      
0007f6  e7f4              B        |L1.2018|
;;;563    #endif /* PNG_NO_SEQUENTIAL_READ_SUPPORTED */
                          ENDP

                  png_read_row PROC
;;;566    void PNGAPI
;;;567    png_read_row(png_structp png_ptr, png_bytep row, png_bytep dsp_row)
0007f8  b5f8              PUSH     {r3-r7,lr}
;;;568    {
0007fa  4604              MOV      r4,r0
0007fc  460f              MOV      r7,r1
0007fe  4615              MOV      r5,r2
;;;569    #ifdef PNG_USE_LOCAL_ARRAYS
;;;570       PNG_IDAT;
;;;571       const int png_pass_dsp_mask[7] = {0xff, 0x0f, 0xff, 0x33, 0xff, 0x55, 0xff};
;;;572       const int png_pass_mask[7] = {0x80, 0x08, 0x88, 0x22, 0xaa, 0x55, 0xff};
;;;573    #endif
;;;574       int ret;
;;;575       if(png_ptr == NULL) return;
000800  b904              CBNZ     r4,|L1.2052|
                  |L1.2050|
;;;576       png_debug2(1, "in png_read_row (row %lu, pass %d)\n",
;;;577          png_ptr->row_number, png_ptr->pass);
;;;578       if (!(png_ptr->flags & PNG_FLAG_ROW_INIT))
;;;579          png_read_start_row(png_ptr);
;;;580       if (png_ptr->row_number == 0 && png_ptr->pass == 0)
;;;581       {
;;;582       /* check for transforms that have been set but were defined out */
;;;583    #if defined(PNG_WRITE_INVERT_SUPPORTED) && !defined(PNG_READ_INVERT_SUPPORTED)
;;;584       if (png_ptr->transformations & PNG_INVERT_MONO)
;;;585          png_warning(png_ptr, "PNG_READ_INVERT_SUPPORTED is not defined.");
;;;586    #endif
;;;587    #if defined(PNG_WRITE_FILLER_SUPPORTED) && !defined(PNG_READ_FILLER_SUPPORTED)
;;;588       if (png_ptr->transformations & PNG_FILLER)
;;;589          png_warning(png_ptr, "PNG_READ_FILLER_SUPPORTED is not defined.");
;;;590    #endif
;;;591    #if defined(PNG_WRITE_PACKSWAP_SUPPORTED) && !defined(PNG_READ_PACKSWAP_SUPPORTED)
;;;592       if (png_ptr->transformations & PNG_PACKSWAP)
;;;593          png_warning(png_ptr, "PNG_READ_PACKSWAP_SUPPORTED is not defined.");
;;;594    #endif
;;;595    #if defined(PNG_WRITE_PACK_SUPPORTED) && !defined(PNG_READ_PACK_SUPPORTED)
;;;596       if (png_ptr->transformations & PNG_PACK)
;;;597          png_warning(png_ptr, "PNG_READ_PACK_SUPPORTED is not defined.");
;;;598    #endif
;;;599    #if defined(PNG_WRITE_SHIFT_SUPPORTED) && !defined(PNG_READ_SHIFT_SUPPORTED)
;;;600       if (png_ptr->transformations & PNG_SHIFT)
;;;601          png_warning(png_ptr, "PNG_READ_SHIFT_SUPPORTED is not defined.");
;;;602    #endif
;;;603    #if defined(PNG_WRITE_BGR_SUPPORTED) && !defined(PNG_READ_BGR_SUPPORTED)
;;;604       if (png_ptr->transformations & PNG_BGR)
;;;605          png_warning(png_ptr, "PNG_READ_BGR_SUPPORTED is not defined.");
;;;606    #endif
;;;607    #if defined(PNG_WRITE_SWAP_SUPPORTED) && !defined(PNG_READ_SWAP_SUPPORTED)
;;;608       if (png_ptr->transformations & PNG_SWAP_BYTES)
;;;609          png_warning(png_ptr, "PNG_READ_SWAP_SUPPORTED is not defined.");
;;;610    #endif
;;;611       }
;;;612    
;;;613    #if defined(PNG_READ_INTERLACING_SUPPORTED)
;;;614       /* if interlaced and we do not need a new row, combine row and return */
;;;615       if (png_ptr->interlaced && (png_ptr->transformations & PNG_INTERLACE))
;;;616       {
;;;617          switch (png_ptr->pass)
;;;618          {
;;;619             case 0:
;;;620                if (png_ptr->row_number & 0x07)
;;;621                {
;;;622                   if (dsp_row != NULL)
;;;623                      png_combine_row(png_ptr, dsp_row,
;;;624                         png_pass_dsp_mask[png_ptr->pass]);
;;;625                   png_read_finish_row(png_ptr);
;;;626                   return;
;;;627                }
;;;628                break;
;;;629             case 1:
;;;630                if ((png_ptr->row_number & 0x07) || png_ptr->width < 5)
;;;631                {
;;;632                   if (dsp_row != NULL)
;;;633                      png_combine_row(png_ptr, dsp_row,
;;;634                         png_pass_dsp_mask[png_ptr->pass]);
;;;635                   png_read_finish_row(png_ptr);
;;;636                   return;
;;;637                }
;;;638                break;
;;;639             case 2:
;;;640                if ((png_ptr->row_number & 0x07) != 4)
;;;641                {
;;;642                   if (dsp_row != NULL && (png_ptr->row_number & 4))
;;;643                      png_combine_row(png_ptr, dsp_row,
;;;644                         png_pass_dsp_mask[png_ptr->pass]);
;;;645                   png_read_finish_row(png_ptr);
;;;646                   return;
;;;647                }
;;;648                break;
;;;649             case 3:
;;;650                if ((png_ptr->row_number & 3) || png_ptr->width < 3)
;;;651                {
;;;652                   if (dsp_row != NULL)
;;;653                      png_combine_row(png_ptr, dsp_row,
;;;654                         png_pass_dsp_mask[png_ptr->pass]);
;;;655                   png_read_finish_row(png_ptr);
;;;656                   return;
;;;657                }
;;;658                break;
;;;659             case 4:
;;;660                if ((png_ptr->row_number & 3) != 2)
;;;661                {
;;;662                   if (dsp_row != NULL && (png_ptr->row_number & 2))
;;;663                      png_combine_row(png_ptr, dsp_row,
;;;664                         png_pass_dsp_mask[png_ptr->pass]);
;;;665                   png_read_finish_row(png_ptr);
;;;666                   return;
;;;667                }
;;;668                break;
;;;669             case 5:
;;;670                if ((png_ptr->row_number & 1) || png_ptr->width < 2)
;;;671                {
;;;672                   if (dsp_row != NULL)
;;;673                      png_combine_row(png_ptr, dsp_row,
;;;674                         png_pass_dsp_mask[png_ptr->pass]);
;;;675                   png_read_finish_row(png_ptr);
;;;676                   return;
;;;677                }
;;;678                break;
;;;679             case 6:
;;;680                if (!(png_ptr->row_number & 1))
;;;681                {
;;;682                   png_read_finish_row(png_ptr);
;;;683                   return;
;;;684                }
;;;685                break;
;;;686          }
;;;687       }
;;;688    #endif
;;;689    
;;;690       if (!(png_ptr->mode & PNG_HAVE_IDAT))
;;;691          png_error(png_ptr, "Invalid attempt to read row data");
;;;692    
;;;693       png_ptr->zstream.next_out = png_ptr->row_buf;
;;;694       png_ptr->zstream.avail_out = (uInt)png_ptr->irowbytes;
;;;695       do
;;;696       {
;;;697          if (!(png_ptr->zstream.avail_in))
;;;698          {
;;;699             while (!png_ptr->idat_size)
;;;700             {
;;;701                png_byte chunk_length[4];
;;;702    
;;;703                png_crc_finish(png_ptr, 0);
;;;704    
;;;705                png_read_data(png_ptr, chunk_length, 4);
;;;706                png_ptr->idat_size = png_get_uint_31(png_ptr,chunk_length);
;;;707    
;;;708                png_reset_crc(png_ptr);
;;;709                png_crc_read(png_ptr, png_ptr->chunk_name, 4);
;;;710                if (png_memcmp(png_ptr->chunk_name, png_IDAT, 4))
;;;711                   png_error(png_ptr, "Not enough image data");
;;;712             }
;;;713             png_ptr->zstream.avail_in = (uInt)png_ptr->zbuf_size;
;;;714             png_ptr->zstream.next_in = png_ptr->zbuf;
;;;715             if (png_ptr->zbuf_size > png_ptr->idat_size)
;;;716                png_ptr->zstream.avail_in = (uInt)png_ptr->idat_size;
;;;717             png_crc_read(png_ptr, png_ptr->zbuf,
;;;718                (png_size_t)png_ptr->zstream.avail_in);
;;;719             png_ptr->idat_size -= png_ptr->zstream.avail_in;
;;;720          }
;;;721          ret = inflate(&png_ptr->zstream, Z_PARTIAL_FLUSH);
;;;722          if (ret == Z_STREAM_END)
;;;723          {
;;;724             if (png_ptr->zstream.avail_out || png_ptr->zstream.avail_in ||
;;;725                png_ptr->idat_size)
;;;726                png_error(png_ptr, "Extra compressed data");
;;;727             png_ptr->mode |= PNG_AFTER_IDAT;
;;;728             png_ptr->flags |= PNG_FLAG_ZLIB_FINISHED;
;;;729             break;
;;;730          }
;;;731          if (ret != Z_OK)
;;;732             png_error(png_ptr, png_ptr->zstream.msg ? png_ptr->zstream.msg :
;;;733                       "Decompression error");
;;;734    
;;;735       } while (png_ptr->zstream.avail_out);
;;;736    
;;;737       png_ptr->row_info.color_type = png_ptr->color_type;
;;;738       png_ptr->row_info.width = png_ptr->iwidth;
;;;739       png_ptr->row_info.channels = png_ptr->channels;
;;;740       png_ptr->row_info.bit_depth = png_ptr->bit_depth;
;;;741       png_ptr->row_info.pixel_depth = png_ptr->pixel_depth;
;;;742       png_ptr->row_info.rowbytes = PNG_ROWBYTES(png_ptr->row_info.pixel_depth,
;;;743           png_ptr->row_info.width);
;;;744    
;;;745       if(png_ptr->row_buf[0])
;;;746       png_read_filter_row(png_ptr, &(png_ptr->row_info),
;;;747          png_ptr->row_buf + 1, png_ptr->prev_row + 1,
;;;748          (int)(png_ptr->row_buf[0]));
;;;749    
;;;750       png_memcpy_check(png_ptr, png_ptr->prev_row, png_ptr->row_buf,
;;;751          png_ptr->rowbytes + 1);
;;;752    
;;;753    #if defined(PNG_MNG_FEATURES_SUPPORTED)
;;;754       if((png_ptr->mng_features_permitted & PNG_FLAG_MNG_FILTER_64) &&
;;;755          (png_ptr->filter_type == PNG_INTRAPIXEL_DIFFERENCING))
;;;756       {
;;;757          /* Intrapixel differencing */
;;;758          png_do_read_intrapixel(&(png_ptr->row_info), png_ptr->row_buf + 1);
;;;759       }
;;;760    #endif
;;;761    
;;;762    
;;;763       if (png_ptr->transformations || (png_ptr->flags&PNG_FLAG_STRIP_ALPHA))
;;;764          png_do_read_transformations(png_ptr);
;;;765    
;;;766    #if defined(PNG_READ_INTERLACING_SUPPORTED)
;;;767       /* blow up interlaced rows to full size */
;;;768       if (png_ptr->interlaced &&
;;;769          (png_ptr->transformations & PNG_INTERLACE))
;;;770       {
;;;771          if (png_ptr->pass < 6)
;;;772    /*       old interface (pre-1.0.9):
;;;773             png_do_read_interlace(&(png_ptr->row_info),
;;;774                png_ptr->row_buf + 1, png_ptr->pass, png_ptr->transformations);
;;;775     */
;;;776             png_do_read_interlace(png_ptr);
;;;777    
;;;778          if (dsp_row != NULL)
;;;779             png_combine_row(png_ptr, dsp_row,
;;;780                png_pass_dsp_mask[png_ptr->pass]);
;;;781          if (row != NULL)
;;;782             png_combine_row(png_ptr, row,
;;;783                png_pass_mask[png_ptr->pass]);
;;;784       }
;;;785       else
;;;786    #endif
;;;787       {
;;;788          if (row != NULL)
;;;789             png_combine_row(png_ptr, row, 0xff);
;;;790          if (dsp_row != NULL)
;;;791             png_combine_row(png_ptr, dsp_row, 0xff);
;;;792       }
;;;793       png_read_finish_row(png_ptr);
;;;794    
;;;795       if (png_ptr->read_row_fn != NULL)
;;;796          (*(png_ptr->read_row_fn))(png_ptr, png_ptr->row_number, png_ptr->pass);
;;;797    }
000802  bdf8              POP      {r3-r7,pc}
                  |L1.2052|
000804  f89401ac          LDRB     r0,[r4,#0x1ac]        ;578
000808  f0000040          AND      r0,r0,#0x40           ;578
00080c  b910              CBNZ     r0,|L1.2068|
00080e  4620              MOV      r0,r4                 ;579
000810  f7fffffe          BL       png_read_start_row
                  |L1.2068|
000814  f8940263          LDRB     r0,[r4,#0x263]        ;615
000818  2800              CMP      r0,#0                 ;615
                  |L1.2074|
00081a  d07d              BEQ      |L1.2328|
00081c  f89401b0          LDRB     r0,[r4,#0x1b0]        ;615
000820  f0000002          AND      r0,r0,#2              ;615
000824  2800              CMP      r0,#0                 ;615
000826  d0f8              BEQ      |L1.2074|
000828  f8940264          LDRB     r0,[r4,#0x264]        ;617
00082c  2807              CMP      r0,#7                 ;617
00082e  d218              BCS      |L1.2146|
000830  e8dff000          TBB      [pc,r0]               ;617
000834  0418304a          DCB      0x04,0x18,0x30,0x4a
000838  62c3db00          DCB      0x62,0xc3,0xdb,0x00
00083c  f8940224          LDRB     r0,[r4,#0x224]        ;620
000840  f0000007          AND      r0,r0,#7              ;620
000844  b168              CBZ      r0,|L1.2146|
000846  b145              CBZ      r5,|L1.2138|
000848  f8940264          LDRB     r0,[r4,#0x264]        ;623
00084c  4959              LDR      r1,|L1.2484|
00084e  f8512020          LDR      r2,[r1,r0,LSL #2]     ;623
000852  4629              MOV      r1,r5                 ;623
000854  4620              MOV      r0,r4                 ;623
000856  f7fffffe          BL       png_combine_row
                  |L1.2138|
00085a  4620              MOV      r0,r4                 ;625
00085c  f7fffffe          BL       png_read_finish_row
000860  e7cf              B        |L1.2050|
                  |L1.2146|
000862  e0cc              B        |L1.2558|
000864  f8940224          LDRB     r0,[r4,#0x224]        ;630
000868  f0000007          AND      r0,r0,#7              ;630
00086c  b918              CBNZ     r0,|L1.2166|
00086e  f8d40208          LDR      r0,[r4,#0x208]        ;630
000872  2805              CMP      r0,#5                 ;630
000874  d20d              BCS      |L1.2194|
                  |L1.2166|
000876  b145              CBZ      r5,|L1.2186|
000878  f8940264          LDRB     r0,[r4,#0x264]        ;633
00087c  494d              LDR      r1,|L1.2484|
00087e  f8512020          LDR      r2,[r1,r0,LSL #2]     ;633
000882  4629              MOV      r1,r5                 ;633
000884  4620              MOV      r0,r4                 ;633
000886  f7fffffe          BL       png_combine_row
                  |L1.2186|
00088a  4620              MOV      r0,r4                 ;635
00088c  f7fffffe          BL       png_read_finish_row
000890  e7b7              B        |L1.2050|
                  |L1.2194|
000892  e0b4              B        |L1.2558|
000894  f8940224          LDRB     r0,[r4,#0x224]        ;640
000898  f0000007          AND      r0,r0,#7              ;640
00089c  2804              CMP      r0,#4                 ;640
00089e  d012              BEQ      |L1.2246|
0008a0  b16d              CBZ      r5,|L1.2238|
0008a2  f8940224          LDRB     r0,[r4,#0x224]        ;642
0008a6  f0000004          AND      r0,r0,#4              ;642
0008aa  b140              CBZ      r0,|L1.2238|
0008ac  f8940264          LDRB     r0,[r4,#0x264]        ;643
0008b0  4940              LDR      r1,|L1.2484|
0008b2  f8512020          LDR      r2,[r1,r0,LSL #2]     ;643
0008b6  4629              MOV      r1,r5                 ;643
0008b8  4620              MOV      r0,r4                 ;643
0008ba  f7fffffe          BL       png_combine_row
                  |L1.2238|
0008be  4620              MOV      r0,r4                 ;645
0008c0  f7fffffe          BL       png_read_finish_row
0008c4  e79d              B        |L1.2050|
                  |L1.2246|
0008c6  e09a              B        |L1.2558|
0008c8  f8940224          LDRB     r0,[r4,#0x224]        ;650
0008cc  f0000003          AND      r0,r0,#3              ;650
0008d0  b918              CBNZ     r0,|L1.2266|
0008d2  f8d40208          LDR      r0,[r4,#0x208]        ;650
0008d6  2803              CMP      r0,#3                 ;650
0008d8  d20d              BCS      |L1.2294|
                  |L1.2266|
0008da  b145              CBZ      r5,|L1.2286|
0008dc  f8940264          LDRB     r0,[r4,#0x264]        ;653
0008e0  4934              LDR      r1,|L1.2484|
0008e2  f8512020          LDR      r2,[r1,r0,LSL #2]     ;653
0008e6  4629              MOV      r1,r5                 ;653
0008e8  4620              MOV      r0,r4                 ;653
0008ea  f7fffffe          BL       png_combine_row
                  |L1.2286|
0008ee  4620              MOV      r0,r4                 ;655
0008f0  f7fffffe          BL       png_read_finish_row
0008f4  e785              B        |L1.2050|
                  |L1.2294|
0008f6  e082              B        |L1.2558|
0008f8  f8940224          LDRB     r0,[r4,#0x224]        ;660
0008fc  f0000003          AND      r0,r0,#3              ;660
000900  2802              CMP      r0,#2                 ;660
000902  d059              BEQ      |L1.2488|
000904  b17d              CBZ      r5,|L1.2342|
000906  f8940224          LDRB     r0,[r4,#0x224]        ;662
00090a  f0000002          AND      r0,r0,#2              ;662
00090e  b150              CBZ      r0,|L1.2342|
000910  f8940264          LDRB     r0,[r4,#0x264]        ;663
000914  4927              LDR      r1,|L1.2484|
000916  e000              B        |L1.2330|
                  |L1.2328|
000918  e072              B        |L1.2560|
                  |L1.2330|
00091a  f8512020          LDR      r2,[r1,r0,LSL #2]     ;663
00091e  4629              MOV      r1,r5                 ;663
000920  4620              MOV      r0,r4                 ;663
000922  f7fffffe          BL       png_combine_row
                  |L1.2342|
000926  4620              MOV      r0,r4                 ;665
000928  f7fffffe          BL       png_read_finish_row
00092c  e769              B        |L1.2050|
00092e  0000              DCW      0x0000
                  |L1.2352|
                          DCD      png_PLTE
                  |L1.2356|
                          DCD      png_IDAT
                  |L1.2360|
000938  4d697373          DCB      "Missing IHDR before IDAT",0
00093c  696e6720
000940  49484452
000944  20626566
000948  6f726520
00094c  49444154
000950  00      
000951  00                DCB      0
000952  00                DCB      0
000953  00                DCB      0
                  |L1.2388|
000954  4d697373          DCB      "Missing PLTE before IDAT",0
000958  696e6720
00095c  504c5445
000960  20626566
000964  6f726520
000968  49444154
00096c  00      
00096d  00                DCB      0
00096e  00                DCB      0
00096f  00                DCB      0
                  |L1.2416|
                          DCD      png_bKGD
                  |L1.2420|
                          DCD      png_cHRM
                  |L1.2424|
                          DCD      png_gAMA
                  |L1.2428|
                          DCD      png_hIST
                  |L1.2432|
                          DCD      png_oFFs
                  |L1.2436|
                          DCD      png_pCAL
                  |L1.2440|
                          DCD      png_sCAL
                  |L1.2444|
                          DCD      png_pHYs
                  |L1.2448|
                          DCD      png_sBIT
                  |L1.2452|
                          DCD      png_sRGB
                  |L1.2456|
                          DCD      png_iCCP
                  |L1.2460|
                          DCD      png_sPLT
                  |L1.2464|
                          DCD      png_tEXt
                  |L1.2468|
                          DCD      png_tIME
                  |L1.2472|
                          DCD      png_tRNS
                  |L1.2476|
                          DCD      png_zTXt
                  |L1.2480|
                          DCD      ||.conststring||+0xd4
                  |L1.2484|
                          DCD      png_pass_dsp_mask
                  |L1.2488|
0009b8  e021              B        |L1.2558|
0009ba  f8940224          LDRB     r0,[r4,#0x224]        ;670
0009be  f0000001          AND      r0,r0,#1              ;670
0009c2  b918              CBNZ     r0,|L1.2508|
0009c4  f8d40208          LDR      r0,[r4,#0x208]        ;670
0009c8  2802              CMP      r0,#2                 ;670
0009ca  d20d              BCS      |L1.2536|
                  |L1.2508|
0009cc  b145              CBZ      r5,|L1.2528|
0009ce  f8940264          LDRB     r0,[r4,#0x264]        ;673
0009d2  49fa              LDR      r1,|L1.3516|
0009d4  f8512020          LDR      r2,[r1,r0,LSL #2]     ;673
0009d8  4629              MOV      r1,r5                 ;673
0009da  4620              MOV      r0,r4                 ;673
0009dc  f7fffffe          BL       png_combine_row
                  |L1.2528|
0009e0  4620              MOV      r0,r4                 ;675
0009e2  f7fffffe          BL       png_read_finish_row
0009e6  e70c              B        |L1.2050|
                  |L1.2536|
0009e8  e009              B        |L1.2558|
0009ea  f8940224          LDRB     r0,[r4,#0x224]        ;680
0009ee  f0000001          AND      r0,r0,#1              ;680
0009f2  b918              CBNZ     r0,|L1.2556|
0009f4  4620              MOV      r0,r4                 ;682
0009f6  f7fffffe          BL       png_read_finish_row
0009fa  e702              B        |L1.2050|
                  |L1.2556|
0009fc  bf00              NOP                            ;685
                  |L1.2558|
0009fe  bf00              NOP                            ;628
                  |L1.2560|
000a00  f89401a8          LDRB     r0,[r4,#0x1a8]        ;690
000a04  f0000004          AND      r0,r0,#4              ;690
000a08  b918              CBNZ     r0,|L1.2578|
000a0a  a1ed              ADR      r1,|L1.3520|
000a0c  4620              MOV      r0,r4                 ;691
000a0e  f7fffffe          BL       png_error
                  |L1.2578|
000a12  f44f70e0          MOV      r0,#0x1c0             ;693
000a16  f8d4122c          LDR      r1,[r4,#0x22c]        ;693
000a1a  5101              STR      r1,[r0,r4]            ;693
000a1c  1d00              ADDS     r0,r0,#4              ;694
000a1e  f8d4121c          LDR      r1,[r4,#0x21c]        ;694
000a22  5101              STR      r1,[r0,r4]            ;694
000a24  bf00              NOP                            ;695
                  |L1.2598|
000a26  f44f70dc          MOV      r0,#0x1b8             ;697
000a2a  5900              LDR      r0,[r0,r4]            ;697
000a2c  bbe8              CBNZ     r0,|L1.2730|
000a2e  e023              B        |L1.2680|
                  |L1.2608|
000a30  2100              MOVS     r1,#0                 ;703
000a32  4620              MOV      r0,r4                 ;703
000a34  f7fffffe          BL       png_crc_finish
000a38  2204              MOVS     r2,#4                 ;705
000a3a  4669              MOV      r1,sp                 ;705
000a3c  4620              MOV      r0,r4                 ;705
000a3e  f7fffffe          BL       png_read_data
000a42  4669              MOV      r1,sp                 ;706
000a44  4620              MOV      r0,r4                 ;706
000a46  f7fffffe          BL       png_get_uint_31
000a4a  f8c4024c          STR      r0,[r4,#0x24c]        ;706
000a4e  4620              MOV      r0,r4                 ;708
000a50  f7fffffe          BL       png_reset_crc
000a54  2204              MOVS     r2,#4                 ;709
000a56  f5047117          ADD      r1,r4,#0x25c          ;709
000a5a  4620              MOV      r0,r4                 ;709
000a5c  f7fffffe          BL       png_crc_read
000a60  2204              MOVS     r2,#4                 ;710
000a62  49e0              LDR      r1,|L1.3556|
000a64  f5047017          ADD      r0,r4,#0x25c          ;710
000a68  f7fffffe          BL       memcmp
000a6c  b118              CBZ      r0,|L1.2678|
000a6e  a1de              ADR      r1,|L1.3560|
000a70  4620              MOV      r0,r4                 ;711
000a72  f7fffffe          BL       png_error
                  |L1.2678|
000a76  bf00              NOP                            ;712
                  |L1.2680|
000a78  f8d4024c          LDR      r0,[r4,#0x24c]        ;699
000a7c  2800              CMP      r0,#0                 ;699
000a7e  d0d7              BEQ      |L1.2608|
000a80  f44f70dc          MOV      r0,#0x1b8             ;713
000a84  f8d411f0          LDR      r1,[r4,#0x1f0]        ;713
000a88  5101              STR      r1,[r0,r4]            ;713
000a8a  f8d401ec          LDR      r0,[r4,#0x1ec]        ;714
000a8e  f8c401b4          STR      r0,[r4,#0x1b4]        ;714
000a92  f8d4124c          LDR      r1,[r4,#0x24c]        ;715
000a96  f8d401f0          LDR      r0,[r4,#0x1f0]        ;715
000a9a  4288              CMP      r0,r1                 ;715
000a9c  d904              BLS      |L1.2728|
000a9e  f44f70dc          MOV      r0,#0x1b8             ;716
000aa2  f8d4124c          LDR      r1,[r4,#0x24c]        ;716
000aa6  5101              STR      r1,[r0,r4]            ;716
                  |L1.2728|
000aa8  e000              B        |L1.2732|
                  |L1.2730|
000aaa  e00f              B        |L1.2764|
                  |L1.2732|
000aac  f44f70dc          MOV      r0,#0x1b8             ;717
000ab0  5902              LDR      r2,[r0,r4]            ;717
000ab2  4620              MOV      r0,r4                 ;717
000ab4  f8d411ec          LDR      r1,[r4,#0x1ec]        ;717
000ab8  f7fffffe          BL       png_crc_read
000abc  f44f70dc          MOV      r0,#0x1b8             ;719
000ac0  5900              LDR      r0,[r0,r4]            ;719
000ac2  f8d4124c          LDR      r1,[r4,#0x24c]        ;719
000ac6  1a08              SUBS     r0,r1,r0              ;719
000ac8  f8c4024c          STR      r0,[r4,#0x24c]        ;719
                  |L1.2764|
000acc  2101              MOVS     r1,#1                 ;721
000ace  f50470da          ADD      r0,r4,#0x1b4          ;721
000ad2  f7fffffe          BL       inflate
000ad6  4606              MOV      r6,r0                 ;721
000ad8  2e01              CMP      r6,#1                 ;722
000ada  d11b              BNE      |L1.2836|
000adc  f44f70e2          MOV      r0,#0x1c4             ;724
000ae0  5900              LDR      r0,[r0,r4]            ;724
000ae2  b930              CBNZ     r0,|L1.2802|
000ae4  f44f70dc          MOV      r0,#0x1b8             ;724
000ae8  5900              LDR      r0,[r0,r4]            ;724
000aea  b910              CBNZ     r0,|L1.2802|
000aec  f8d4024c          LDR      r0,[r4,#0x24c]        ;725
000af0  b118              CBZ      r0,|L1.2810|
                  |L1.2802|
000af2  a1c3              ADR      r1,|L1.3584|
000af4  4620              MOV      r0,r4                 ;726
000af6  f7fffffe          BL       png_error
                  |L1.2810|
000afa  f8d401a8          LDR      r0,[r4,#0x1a8]        ;727
000afe  f0400008          ORR      r0,r0,#8              ;727
000b02  f8c401a8          STR      r0,[r4,#0x1a8]        ;727
000b06  f8d401ac          LDR      r0,[r4,#0x1ac]        ;728
000b0a  f0400020          ORR      r0,r0,#0x20           ;728
000b0e  f8c401ac          STR      r0,[r4,#0x1ac]        ;728
000b12  e013              B        |L1.2876|
                  |L1.2836|
000b14  b166              CBZ      r6,|L1.2864|
000b16  f44f70e6          MOV      r0,#0x1cc             ;732
000b1a  5900              LDR      r0,[r0,r4]            ;732
000b1c  b118              CBZ      r0,|L1.2854|
000b1e  f44f70e6          MOV      r0,#0x1cc             ;732
000b22  5900              LDR      r0,[r0,r4]            ;732
000b24  e000              B        |L1.2856|
                  |L1.2854|
000b26  a0bc              ADR      r0,|L1.3608|
                  |L1.2856|
000b28  4601              MOV      r1,r0                 ;733
000b2a  4620              MOV      r0,r4                 ;733
000b2c  f7fffffe          BL       png_error
                  |L1.2864|
000b30  f44f70e2          MOV      r0,#0x1c4             ;735
000b34  5900              LDR      r0,[r0,r4]            ;735
000b36  2800              CMP      r0,#0                 ;735
000b38  f47faf75          BNE      |L1.2598|
                  |L1.2876|
000b3c  bf00              NOP                            ;729
000b3e  f8941266          LDRB     r1,[r4,#0x266]        ;737
000b42  f44f7012          MOV      r0,#0x248             ;737
000b46  5501              STRB     r1,[r0,r4]            ;737
000b48  f8d40220          LDR      r0,[r4,#0x220]        ;738
000b4c  f8c40240          STR      r0,[r4,#0x240]        ;738
000b50  f894126a          LDRB     r1,[r4,#0x26a]        ;739
000b54  f240204a          MOV      r0,#0x24a             ;739
000b58  5501              STRB     r1,[r0,r4]            ;739
000b5a  f8941267          LDRB     r1,[r4,#0x267]        ;740
000b5e  1e40              SUBS     r0,r0,#1              ;740
000b60  5501              STRB     r1,[r0,r4]            ;740
000b62  f8941269          LDRB     r1,[r4,#0x269]        ;741
000b66  1c80              ADDS     r0,r0,#2              ;741
000b68  5501              STRB     r1,[r0,r4]            ;741
000b6a  5d00              LDRB     r0,[r0,r4]            ;742
000b6c  2808              CMP      r0,#8                 ;742
000b6e  db07              BLT      |L1.2944|
000b70  f240214b          MOV      r1,#0x24b             ;742
000b74  5d09              LDRB     r1,[r1,r4]            ;742
000b76  08c9              LSRS     r1,r1,#3              ;742
000b78  f8d40240          LDR      r0,[r4,#0x240]        ;742
000b7c  4348              MULS     r0,r1,r0              ;742
000b7e  e007              B        |L1.2960|
                  |L1.2944|
000b80  f240214b          MOV      r1,#0x24b             ;742
000b84  5d09              LDRB     r1,[r1,r4]            ;742
000b86  f8d40240          LDR      r0,[r4,#0x240]        ;742
000b8a  4348              MULS     r0,r1,r0              ;742
000b8c  1dc0              ADDS     r0,r0,#7              ;742
000b8e  08c0              LSRS     r0,r0,#3              ;742
                  |L1.2960|
000b90  f44f7111          MOV      r1,#0x244             ;742
000b94  5108              STR      r0,[r1,r4]            ;742
000b96  f8d4022c          LDR      r0,[r4,#0x22c]        ;745
000b9a  7800              LDRB     r0,[r0,#0]            ;745
000b9c  b170              CBZ      r0,|L1.3004|
000b9e  f8d4022c          LDR      r0,[r4,#0x22c]        ;746
000ba2  7800              LDRB     r0,[r0,#0]            ;746
000ba4  9000              STR      r0,[sp,#0]            ;746
000ba6  f8d40228          LDR      r0,[r4,#0x228]        ;746
000baa  1c43              ADDS     r3,r0,#1              ;746
000bac  f8d4022c          LDR      r0,[r4,#0x22c]        ;746
000bb0  1c42              ADDS     r2,r0,#1              ;746
000bb2  f5047110          ADD      r1,r4,#0x240          ;746
000bb6  4620              MOV      r0,r4                 ;746
000bb8  f7fffffe          BL       png_read_filter_row
                  |L1.3004|
000bbc  f8d40218          LDR      r0,[r4,#0x218]        ;750
000bc0  1c43              ADDS     r3,r0,#1              ;750
000bc2  4620              MOV      r0,r4                 ;750
000bc4  f504710a          ADD      r1,r4,#0x228          ;750
000bc8  c906              LDM      r1,{r1,r2}            ;750
000bca  f7fffffe          BL       png_memcpy_check
000bce  f894036c          LDRB     r0,[r4,#0x36c]        ;754
000bd2  f0000004          AND      r0,r0,#4              ;754
000bd6  b150              CBZ      r0,|L1.3054|
000bd8  f8940374          LDRB     r0,[r4,#0x374]        ;755
000bdc  2840              CMP      r0,#0x40              ;755
000bde  d106              BNE      |L1.3054|
000be0  f8d4022c          LDR      r0,[r4,#0x22c]        ;758
000be4  1c41              ADDS     r1,r0,#1              ;758
000be6  f5047010          ADD      r0,r4,#0x240          ;758
000bea  f7fffffe          BL       png_do_read_intrapixel
                  |L1.3054|
000bee  f8d401b0          LDR      r0,[r4,#0x1b0]        ;763
000bf2  b920              CBNZ     r0,|L1.3070|
000bf4  f8d401ac          LDR      r0,[r4,#0x1ac]        ;763
000bf8  f4000080          AND      r0,r0,#0x400000       ;763
000bfc  b110              CBZ      r0,|L1.3076|
                  |L1.3070|
000bfe  4620              MOV      r0,r4                 ;764
000c00  f7fffffe          BL       png_do_read_transformations
                  |L1.3076|
000c04  f8940263          LDRB     r0,[r4,#0x263]        ;768
000c08  b300              CBZ      r0,|L1.3148|
000c0a  f89401b0          LDRB     r0,[r4,#0x1b0]        ;769
000c0e  f0000002          AND      r0,r0,#2              ;769
000c12  b1d8              CBZ      r0,|L1.3148|
000c14  f8940264          LDRB     r0,[r4,#0x264]        ;771
000c18  2806              CMP      r0,#6                 ;771
000c1a  da02              BGE      |L1.3106|
000c1c  4620              MOV      r0,r4                 ;776
000c1e  f7fffffe          BL       png_do_read_interlace
                  |L1.3106|
000c22  b145              CBZ      r5,|L1.3126|
000c24  f8940264          LDRB     r0,[r4,#0x264]        ;779
000c28  4964              LDR      r1,|L1.3516|
000c2a  f8512020          LDR      r2,[r1,r0,LSL #2]     ;779
000c2e  4629              MOV      r1,r5                 ;779
000c30  4620              MOV      r0,r4                 ;779
000c32  f7fffffe          BL       png_combine_row
                  |L1.3126|
000c36  b1af              CBZ      r7,|L1.3172|
000c38  f8940264          LDRB     r0,[r4,#0x264]        ;782
000c3c  497b              LDR      r1,|L1.3628|
000c3e  f8512020          LDR      r2,[r1,r0,LSL #2]     ;782
000c42  4639              MOV      r1,r7                 ;782
000c44  4620              MOV      r0,r4                 ;782
000c46  f7fffffe          BL       png_combine_row
000c4a  e00b              B        |L1.3172|
                  |L1.3148|
000c4c  b127              CBZ      r7,|L1.3160|
000c4e  22ff              MOVS     r2,#0xff              ;789
000c50  4639              MOV      r1,r7                 ;789
000c52  4620              MOV      r0,r4                 ;789
000c54  f7fffffe          BL       png_combine_row
                  |L1.3160|
000c58  b125              CBZ      r5,|L1.3172|
000c5a  22ff              MOVS     r2,#0xff              ;791
000c5c  4629              MOV      r1,r5                 ;791
000c5e  4620              MOV      r0,r4                 ;791
000c60  f7fffffe          BL       png_combine_row
                  |L1.3172|
000c64  4620              MOV      r0,r4                 ;793
000c66  f7fffffe          BL       png_read_finish_row
000c6a  f8d402d8          LDR      r0,[r4,#0x2d8]        ;795
000c6e  b138              CBZ      r0,|L1.3200|
000c70  f8942264          LDRB     r2,[r4,#0x264]        ;796
000c74  4620              MOV      r0,r4                 ;796
000c76  f8d432d8          LDR      r3,[r4,#0x2d8]        ;796
000c7a  f8d41224          LDR      r1,[r4,#0x224]        ;796
000c7e  4798              BLX      r3                    ;796
                  |L1.3200|
000c80  bf00              NOP      
000c82  e5be              B        |L1.2050|
;;;798    #endif /* PNG_NO_SEQUENTIAL_READ_SUPPORTED */
                          ENDP

                  png_read_rows PROC
;;;825    void PNGAPI
;;;826    png_read_rows(png_structp png_ptr, png_bytepp row,
000c84  e92d4ff8          PUSH     {r3-r11,lr}
;;;827       png_bytepp display_row, png_uint_32 num_rows)
;;;828    {
000c88  4681              MOV      r9,r0
000c8a  4688              MOV      r8,r1
000c8c  4692              MOV      r10,r2
000c8e  461f              MOV      r7,r3
;;;829       png_uint_32 i;
;;;830       png_bytepp rp;
;;;831       png_bytepp dp;
;;;832    
;;;833       png_debug(1, "in png_read_rows\n");
;;;834       if(png_ptr == NULL) return;
000c90  f1b90f00          CMP      r9,#0
000c94  d101              BNE      |L1.3226|
                  |L1.3222|
;;;835       rp = row;
;;;836       dp = display_row;
;;;837       if (rp != NULL && dp != NULL)
;;;838          for (i = 0; i < num_rows; i++)
;;;839          {
;;;840             png_bytep rptr = *rp++;
;;;841             png_bytep dptr = *dp++;
;;;842    
;;;843             png_read_row(png_ptr, rptr, dptr);
;;;844          }
;;;845       else if(rp != NULL)
;;;846          for (i = 0; i < num_rows; i++)
;;;847          {
;;;848             png_bytep rptr = *rp;
;;;849             png_read_row(png_ptr, rptr, png_bytep_NULL);
;;;850             rp++;
;;;851          }
;;;852       else if(dp != NULL)
;;;853          for (i = 0; i < num_rows; i++)
;;;854          {
;;;855             png_bytep dptr = *dp;
;;;856             png_read_row(png_ptr, png_bytep_NULL, dptr);
;;;857             dp++;
;;;858          }
;;;859    }
000c96  e8bd8ff8          POP      {r3-r11,pc}
                  |L1.3226|
000c9a  4645              MOV      r5,r8                 ;835
000c9c  4656              MOV      r6,r10                ;836
000c9e  b17d              CBZ      r5,|L1.3264|
000ca0  b176              CBZ      r6,|L1.3264|
000ca2  2400              MOVS     r4,#0                 ;838
000ca4  e009              B        |L1.3258|
                  |L1.3238|
000ca6  f855bb04          LDR      r11,[r5],#4           ;840
000caa  ce01              LDM      r6!,{r0}              ;841
000cac  9000              STR      r0,[sp,#0]            ;841
000cae  4659              MOV      r1,r11                ;843
000cb0  4648              MOV      r0,r9                 ;843
000cb2  9a00              LDR      r2,[sp,#0]            ;843
000cb4  f7fffffe          BL       png_read_row
000cb8  1c64              ADDS     r4,r4,#1              ;838
                  |L1.3258|
000cba  42bc              CMP      r4,r7                 ;838
000cbc  d3f3              BCC      |L1.3238|
000cbe  e01c              B        |L1.3322|
                  |L1.3264|
000cc0  b16d              CBZ      r5,|L1.3294|
000cc2  2400              MOVS     r4,#0                 ;846
000cc4  e008              B        |L1.3288|
                  |L1.3270|
000cc6  f8d5b000          LDR      r11,[r5,#0]           ;848
000cca  2200              MOVS     r2,#0                 ;849
000ccc  4659              MOV      r1,r11                ;849
000cce  4648              MOV      r0,r9                 ;849
000cd0  f7fffffe          BL       png_read_row
000cd4  1d2d              ADDS     r5,r5,#4              ;850
000cd6  1c64              ADDS     r4,r4,#1              ;846
                  |L1.3288|
000cd8  42bc              CMP      r4,r7                 ;846
000cda  d3f4              BCC      |L1.3270|
000cdc  e00d              B        |L1.3322|
                  |L1.3294|
000cde  b166              CBZ      r6,|L1.3322|
000ce0  2400              MOVS     r4,#0                 ;853
000ce2  e008              B        |L1.3318|
                  |L1.3300|
000ce4  f8d6b000          LDR      r11,[r6,#0]           ;855
000ce8  465a              MOV      r2,r11                ;856
000cea  2100              MOVS     r1,#0                 ;856
000cec  4648              MOV      r0,r9                 ;856
000cee  f7fffffe          BL       png_read_row
000cf2  1d36              ADDS     r6,r6,#4              ;857
000cf4  1c64              ADDS     r4,r4,#1              ;853
                  |L1.3318|
000cf6  42bc              CMP      r4,r7                 ;853
000cf8  d3f4              BCC      |L1.3300|
                  |L1.3322|
000cfa  bf00              NOP      
000cfc  e7cb              B        |L1.3222|
;;;860    #endif /* PNG_NO_SEQUENTIAL_READ_SUPPORTED */
                          ENDP

                  png_read_image PROC
;;;875    void PNGAPI
;;;876    png_read_image(png_structp png_ptr, png_bytepp image)
000cfe  e92d47f0          PUSH     {r4-r10,lr}
;;;877    {
000d02  4604              MOV      r4,r0
000d04  4688              MOV      r8,r1
;;;878       png_uint_32 i,image_height;
;;;879       int pass, j;
;;;880       png_bytepp rp;
;;;881    
;;;882       png_debug(1, "in png_read_image\n");
;;;883       if(png_ptr == NULL) return;
000d06  b90c              CBNZ     r4,|L1.3340|
                  |L1.3336|
;;;884    
;;;885    #ifdef PNG_READ_INTERLACING_SUPPORTED
;;;886       pass = png_set_interlace_handling(png_ptr);
;;;887    #else
;;;888       if (png_ptr->interlaced)
;;;889          png_error(png_ptr,
;;;890            "Cannot read interlaced image -- interlace handler disabled.");
;;;891       pass = 1;
;;;892    #endif
;;;893    
;;;894    
;;;895       image_height=png_ptr->height;
;;;896       png_ptr->num_rows = image_height; /* Make sure this is set correctly */
;;;897    
;;;898       for (j = 0; j < pass; j++)
;;;899       {
;;;900          rp = image;
;;;901          for (i = 0; i < image_height; i++)
;;;902          {
;;;903             png_read_row(png_ptr, *rp, png_bytep_NULL);
;;;904             rp++;
;;;905          }
;;;906       }
;;;907    }
000d08  e8bd87f0          POP      {r4-r10,pc}
                  |L1.3340|
000d0c  4620              MOV      r0,r4                 ;886
000d0e  f7fffffe          BL       png_set_interlace_handling
000d12  4606              MOV      r6,r0                 ;886
000d14  f8d4520c          LDR      r5,[r4,#0x20c]        ;895
000d18  f8c45210          STR      r5,[r4,#0x210]        ;896
000d1c  2700              MOVS     r7,#0                 ;898
000d1e  e010              B        |L1.3394|
                  |L1.3360|
000d20  46c2              MOV      r10,r8                ;900
000d22  f04f0900          MOV      r9,#0                 ;901
000d26  e009              B        |L1.3388|
                  |L1.3368|
000d28  2200              MOVS     r2,#0                 ;903
000d2a  4620              MOV      r0,r4                 ;903
000d2c  f8da1000          LDR      r1,[r10,#0]           ;903
000d30  f7fffffe          BL       png_read_row
000d34  f10a0a04          ADD      r10,r10,#4            ;904
000d38  f1090901          ADD      r9,r9,#1              ;901
                  |L1.3388|
000d3c  45a9              CMP      r9,r5                 ;901
000d3e  d3f3              BCC      |L1.3368|
000d40  1c7f              ADDS     r7,r7,#1              ;898
                  |L1.3394|
000d42  42b7              CMP      r7,r6                 ;898
000d44  dbec              BLT      |L1.3360|
000d46  bf00              NOP      
000d48  e7de              B        |L1.3336|
;;;908    #endif /* PNG_NO_SEQUENTIAL_READ_SUPPORTED */
                          ENDP

                  png_read_end PROC
;;;915    void PNGAPI
;;;916    png_read_end(png_structp png_ptr, png_infop info_ptr)
000d4a  b5f8              PUSH     {r3-r7,lr}
;;;917    {
000d4c  4604              MOV      r4,r0
000d4e  460e              MOV      r6,r1
;;;918       png_byte chunk_length[4];
;;;919       png_uint_32 length;
;;;920    
;;;921       png_debug(1, "in png_read_end\n");
;;;922       if(png_ptr == NULL) return;
000d50  b904              CBNZ     r4,|L1.3412|
                  |L1.3410|
;;;923       png_crc_finish(png_ptr, 0); /* Finish off CRC from last IDAT chunk */
;;;924    
;;;925       do
;;;926       {
;;;927    #ifdef PNG_USE_LOCAL_ARRAYS
;;;928          PNG_IHDR;
;;;929          PNG_IDAT;
;;;930          PNG_IEND;
;;;931          PNG_PLTE;
;;;932    #if defined(PNG_READ_bKGD_SUPPORTED)
;;;933          PNG_bKGD;
;;;934    #endif
;;;935    #if defined(PNG_READ_cHRM_SUPPORTED)
;;;936          PNG_cHRM;
;;;937    #endif
;;;938    #if defined(PNG_READ_gAMA_SUPPORTED)
;;;939          PNG_gAMA;
;;;940    #endif
;;;941    #if defined(PNG_READ_hIST_SUPPORTED)
;;;942          PNG_hIST;
;;;943    #endif
;;;944    #if defined(PNG_READ_iCCP_SUPPORTED)
;;;945          PNG_iCCP;
;;;946    #endif
;;;947    #if defined(PNG_READ_iTXt_SUPPORTED)
;;;948          PNG_iTXt;
;;;949    #endif
;;;950    #if defined(PNG_READ_oFFs_SUPPORTED)
;;;951          PNG_oFFs;
;;;952    #endif
;;;953    #if defined(PNG_READ_pCAL_SUPPORTED)
;;;954          PNG_pCAL;
;;;955    #endif
;;;956    #if defined(PNG_READ_pHYs_SUPPORTED)
;;;957          PNG_pHYs;
;;;958    #endif
;;;959    #if defined(PNG_READ_sBIT_SUPPORTED)
;;;960          PNG_sBIT;
;;;961    #endif
;;;962    #if defined(PNG_READ_sCAL_SUPPORTED)
;;;963          PNG_sCAL;
;;;964    #endif
;;;965    #if defined(PNG_READ_sPLT_SUPPORTED)
;;;966          PNG_sPLT;
;;;967    #endif
;;;968    #if defined(PNG_READ_sRGB_SUPPORTED)
;;;969          PNG_sRGB;
;;;970    #endif
;;;971    #if defined(PNG_READ_tEXt_SUPPORTED)
;;;972          PNG_tEXt;
;;;973    #endif
;;;974    #if defined(PNG_READ_tIME_SUPPORTED)
;;;975          PNG_tIME;
;;;976    #endif
;;;977    #if defined(PNG_READ_tRNS_SUPPORTED)
;;;978          PNG_tRNS;
;;;979    #endif
;;;980    #if defined(PNG_READ_zTXt_SUPPORTED)
;;;981          PNG_zTXt;
;;;982    #endif
;;;983    #endif /* PNG_USE_LOCAL_ARRAYS */
;;;984    
;;;985          png_read_data(png_ptr, chunk_length, 4);
;;;986          length = png_get_uint_31(png_ptr,chunk_length);
;;;987    
;;;988          png_reset_crc(png_ptr);
;;;989          png_crc_read(png_ptr, png_ptr->chunk_name, 4);
;;;990    
;;;991          png_debug1(0, "Reading %s chunk.\n", png_ptr->chunk_name);
;;;992    
;;;993          if (!png_memcmp(png_ptr->chunk_name, png_IHDR, 4))
;;;994             png_handle_IHDR(png_ptr, info_ptr, length);
;;;995          else if (!png_memcmp(png_ptr->chunk_name, png_IEND, 4))
;;;996             png_handle_IEND(png_ptr, info_ptr, length);
;;;997    #ifdef PNG_HANDLE_AS_UNKNOWN_SUPPORTED
;;;998          else if (png_handle_as_unknown(png_ptr, png_ptr->chunk_name))
;;;999          {
;;;1000            if (!png_memcmp(png_ptr->chunk_name, png_IDAT, 4))
;;;1001            {
;;;1002               if ((length > 0) || (png_ptr->mode & PNG_HAVE_CHUNK_AFTER_IDAT))
;;;1003                  png_error(png_ptr, "Too many IDAT's found");
;;;1004            }
;;;1005            png_handle_unknown(png_ptr, info_ptr, length);
;;;1006            if (!png_memcmp(png_ptr->chunk_name, png_PLTE, 4))
;;;1007               png_ptr->mode |= PNG_HAVE_PLTE;
;;;1008         }
;;;1009   #endif
;;;1010         else if (!png_memcmp(png_ptr->chunk_name, png_IDAT, 4))
;;;1011         {
;;;1012            /* Zero length IDATs are legal after the last IDAT has been
;;;1013             * read, but not after other chunks have been read.
;;;1014             */
;;;1015            if ((length > 0) || (png_ptr->mode & PNG_HAVE_CHUNK_AFTER_IDAT))
;;;1016               png_error(png_ptr, "Too many IDAT's found");
;;;1017            png_crc_finish(png_ptr, length);
;;;1018         }
;;;1019         else if (!png_memcmp(png_ptr->chunk_name, png_PLTE, 4))
;;;1020            png_handle_PLTE(png_ptr, info_ptr, length);
;;;1021   #if defined(PNG_READ_bKGD_SUPPORTED)
;;;1022         else if (!png_memcmp(png_ptr->chunk_name, png_bKGD, 4))
;;;1023            png_handle_bKGD(png_ptr, info_ptr, length);
;;;1024   #endif
;;;1025   #if defined(PNG_READ_cHRM_SUPPORTED)
;;;1026         else if (!png_memcmp(png_ptr->chunk_name, png_cHRM, 4))
;;;1027            png_handle_cHRM(png_ptr, info_ptr, length);
;;;1028   #endif
;;;1029   #if defined(PNG_READ_gAMA_SUPPORTED)
;;;1030         else if (!png_memcmp(png_ptr->chunk_name, png_gAMA, 4))
;;;1031            png_handle_gAMA(png_ptr, info_ptr, length);
;;;1032   #endif
;;;1033   #if defined(PNG_READ_hIST_SUPPORTED)
;;;1034         else if (!png_memcmp(png_ptr->chunk_name, png_hIST, 4))
;;;1035            png_handle_hIST(png_ptr, info_ptr, length);
;;;1036   #endif
;;;1037   #if defined(PNG_READ_oFFs_SUPPORTED)
;;;1038         else if (!png_memcmp(png_ptr->chunk_name, png_oFFs, 4))
;;;1039            png_handle_oFFs(png_ptr, info_ptr, length);
;;;1040   #endif
;;;1041   #if defined(PNG_READ_pCAL_SUPPORTED)
;;;1042         else if (!png_memcmp(png_ptr->chunk_name, png_pCAL, 4))
;;;1043            png_handle_pCAL(png_ptr, info_ptr, length);
;;;1044   #endif
;;;1045   #if defined(PNG_READ_sCAL_SUPPORTED)
;;;1046         else if (!png_memcmp(png_ptr->chunk_name, png_sCAL, 4))
;;;1047            png_handle_sCAL(png_ptr, info_ptr, length);
;;;1048   #endif
;;;1049   #if defined(PNG_READ_pHYs_SUPPORTED)
;;;1050         else if (!png_memcmp(png_ptr->chunk_name, png_pHYs, 4))
;;;1051            png_handle_pHYs(png_ptr, info_ptr, length);
;;;1052   #endif
;;;1053   #if defined(PNG_READ_sBIT_SUPPORTED)
;;;1054         else if (!png_memcmp(png_ptr->chunk_name, png_sBIT, 4))
;;;1055            png_handle_sBIT(png_ptr, info_ptr, length);
;;;1056   #endif
;;;1057   #if defined(PNG_READ_sRGB_SUPPORTED)
;;;1058         else if (!png_memcmp(png_ptr->chunk_name, png_sRGB, 4))
;;;1059            png_handle_sRGB(png_ptr, info_ptr, length);
;;;1060   #endif
;;;1061   #if defined(PNG_READ_iCCP_SUPPORTED)
;;;1062         else if (!png_memcmp(png_ptr->chunk_name, png_iCCP, 4))
;;;1063            png_handle_iCCP(png_ptr, info_ptr, length);
;;;1064   #endif
;;;1065   #if defined(PNG_READ_sPLT_SUPPORTED)
;;;1066         else if (!png_memcmp(png_ptr->chunk_name, png_sPLT, 4))
;;;1067            png_handle_sPLT(png_ptr, info_ptr, length);
;;;1068   #endif
;;;1069   #if defined(PNG_READ_tEXt_SUPPORTED)
;;;1070         else if (!png_memcmp(png_ptr->chunk_name, png_tEXt, 4))
;;;1071            png_handle_tEXt(png_ptr, info_ptr, length);
;;;1072   #endif
;;;1073   #if defined(PNG_READ_tIME_SUPPORTED)
;;;1074         else if (!png_memcmp(png_ptr->chunk_name, png_tIME, 4))
;;;1075            png_handle_tIME(png_ptr, info_ptr, length);
;;;1076   #endif
;;;1077   #if defined(PNG_READ_tRNS_SUPPORTED)
;;;1078         else if (!png_memcmp(png_ptr->chunk_name, png_tRNS, 4))
;;;1079            png_handle_tRNS(png_ptr, info_ptr, length);
;;;1080   #endif
;;;1081   #if defined(PNG_READ_zTXt_SUPPORTED)
;;;1082         else if (!png_memcmp(png_ptr->chunk_name, png_zTXt, 4))
;;;1083            png_handle_zTXt(png_ptr, info_ptr, length);
;;;1084   #endif
;;;1085   #if defined(PNG_READ_iTXt_SUPPORTED)
;;;1086         else if (!png_memcmp(png_ptr->chunk_name, png_iTXt, 4))
;;;1087            png_handle_iTXt(png_ptr, info_ptr, length);
;;;1088   #endif
;;;1089         else
;;;1090            png_handle_unknown(png_ptr, info_ptr, length);
;;;1091      } while (!(png_ptr->mode & PNG_HAVE_IEND));
;;;1092   }
000d52  bdf8              POP      {r3-r7,pc}
                  |L1.3412|
000d54  2100              MOVS     r1,#0                 ;923
000d56  4620              MOV      r0,r4                 ;923
000d58  f7fffffe          BL       png_crc_finish
000d5c  bf00              NOP                            ;925
                  |L1.3422|
000d5e  2204              MOVS     r2,#4                 ;985
000d60  4669              MOV      r1,sp                 ;985
000d62  4620              MOV      r0,r4                 ;985
000d64  f7fffffe          BL       png_read_data
000d68  4669              MOV      r1,sp                 ;986
000d6a  4620              MOV      r0,r4                 ;986
000d6c  f7fffffe          BL       png_get_uint_31
000d70  4605              MOV      r5,r0                 ;986
000d72  4620              MOV      r0,r4                 ;988
000d74  f7fffffe          BL       png_reset_crc
000d78  2204              MOVS     r2,#4                 ;989
000d7a  f5047117          ADD      r1,r4,#0x25c          ;989
000d7e  4620              MOV      r0,r4                 ;989
000d80  f7fffffe          BL       png_crc_read
000d84  2204              MOVS     r2,#4                 ;993
000d86  492a              LDR      r1,|L1.3632|
000d88  f5047017          ADD      r0,r4,#0x25c          ;993
000d8c  f7fffffe          BL       memcmp
000d90  b928              CBNZ     r0,|L1.3486|
000d92  462a              MOV      r2,r5                 ;994
000d94  4631              MOV      r1,r6                 ;994
000d96  4620              MOV      r0,r4                 ;994
000d98  f7fffffe          BL       png_handle_IHDR
                  |L1.3484|
000d9c  e16f              B        |L1.4222|
                  |L1.3486|
000d9e  2204              MOVS     r2,#4                 ;995
000da0  4924              LDR      r1,|L1.3636|
000da2  f5047017          ADD      r0,r4,#0x25c          ;995
000da6  f7fffffe          BL       memcmp
000daa  b928              CBNZ     r0,|L1.3512|
000dac  462a              MOV      r2,r5                 ;996
000dae  4631              MOV      r1,r6                 ;996
000db0  4620              MOV      r0,r4                 ;996
000db2  f7fffffe          BL       png_handle_IEND
000db6  e162              B        |L1.4222|
                  |L1.3512|
000db8  e03e              B        |L1.3640|
000dba  0000              DCW      0x0000
                  |L1.3516|
                          DCD      png_pass_dsp_mask
                  |L1.3520|
000dc0  496e7661          DCB      "Invalid attempt to read row data",0
000dc4  6c696420
000dc8  61747465
000dcc  6d707420
000dd0  746f2072
000dd4  65616420
000dd8  726f7720
000ddc  64617461
000de0  00      
000de1  00                DCB      0
000de2  00                DCB      0
000de3  00                DCB      0
                  |L1.3556|
                          DCD      png_IDAT
                  |L1.3560|
000de8  4e6f7420          DCB      "Not enough image data",0
000dec  656e6f75
000df0  67682069
000df4  6d616765
000df8  20646174
000dfc  6100    
000dfe  00                DCB      0
000dff  00                DCB      0
                  |L1.3584|
000e00  45787472          DCB      "Extra compressed data",0
000e04  6120636f
000e08  6d707265
000e0c  73736564
000e10  20646174
000e14  6100    
000e16  00                DCB      0
000e17  00                DCB      0
                  |L1.3608|
000e18  4465636f          DCB      "Decompression error",0
000e1c  6d707265
000e20  7373696f
000e24  6e206572
000e28  726f7200
                  |L1.3628|
                          DCD      png_pass_mask
                  |L1.3632|
                          DCD      png_IHDR
                  |L1.3636|
                          DCD      png_IEND
                  |L1.3640|
000e38  f5047117          ADD      r1,r4,#0x25c          ;998
000e3c  4620              MOV      r0,r4                 ;998
000e3e  f7fffffe          BL       png_handle_as_unknown
000e42  b320              CBZ      r0,|L1.3726|
000e44  2204              MOVS     r2,#4                 ;1000
000e46  49fe              LDR      r1,|L1.4672|
000e48  f5047017          ADD      r0,r4,#0x25c          ;1000
000e4c  f7fffffe          BL       memcmp
000e50  b948              CBNZ     r0,|L1.3686|
000e52  b925              CBNZ     r5,|L1.3678|
000e54  f8b401a8          LDRH     r0,[r4,#0x1a8]        ;1002
000e58  f4005000          AND      r0,r0,#0x2000         ;1002
000e5c  b118              CBZ      r0,|L1.3686|
                  |L1.3678|
000e5e  a1f9              ADR      r1,|L1.4676|
000e60  4620              MOV      r0,r4                 ;1003
000e62  f7fffffe          BL       png_error
                  |L1.3686|
000e66  462a              MOV      r2,r5                 ;1005
000e68  4631              MOV      r1,r6                 ;1005
000e6a  4620              MOV      r0,r4                 ;1005
000e6c  f7fffffe          BL       png_handle_unknown
000e70  2204              MOVS     r2,#4                 ;1006
000e72  49fa              LDR      r1,|L1.4700|
000e74  f5047017          ADD      r0,r4,#0x25c          ;1006
000e78  f7fffffe          BL       memcmp
000e7c  2800              CMP      r0,#0                 ;1006
000e7e  d18d              BNE      |L1.3484|
000e80  f8d401a8          LDR      r0,[r4,#0x1a8]        ;1007
000e84  f0400002          ORR      r0,r0,#2              ;1007
000e88  f8c401a8          STR      r0,[r4,#0x1a8]        ;1007
000e8c  e0f7              B        |L1.4222|
                  |L1.3726|
000e8e  2204              MOVS     r2,#4                 ;1010
000e90  49eb              LDR      r1,|L1.4672|
000e92  f5047017          ADD      r0,r4,#0x25c          ;1010
000e96  f7fffffe          BL       memcmp
000e9a  b970              CBNZ     r0,|L1.3770|
000e9c  b925              CBNZ     r5,|L1.3752|
000e9e  f8b401a8          LDRH     r0,[r4,#0x1a8]        ;1015
000ea2  f4005000          AND      r0,r0,#0x2000         ;1015
000ea6  b118              CBZ      r0,|L1.3760|
                  |L1.3752|
000ea8  a1e6              ADR      r1,|L1.4676|
000eaa  4620              MOV      r0,r4                 ;1016
000eac  f7fffffe          BL       png_error
                  |L1.3760|
000eb0  4629              MOV      r1,r5                 ;1017
000eb2  4620              MOV      r0,r4                 ;1017
000eb4  f7fffffe          BL       png_crc_finish
000eb8  e0e1              B        |L1.4222|
                  |L1.3770|
000eba  2204              MOVS     r2,#4                 ;1019
000ebc  49e7              LDR      r1,|L1.4700|
000ebe  f5047017          ADD      r0,r4,#0x25c          ;1019
000ec2  f7fffffe          BL       memcmp
000ec6  b928              CBNZ     r0,|L1.3796|
000ec8  462a              MOV      r2,r5                 ;1020
000eca  4631              MOV      r1,r6                 ;1020
000ecc  4620              MOV      r0,r4                 ;1020
000ece  f7fffffe          BL       png_handle_PLTE
000ed2  e0d4              B        |L1.4222|
                  |L1.3796|
000ed4  2204              MOVS     r2,#4                 ;1022
000ed6  49e2              LDR      r1,|L1.4704|
000ed8  f5047017          ADD      r0,r4,#0x25c          ;1022
000edc  f7fffffe          BL       memcmp
000ee0  b928              CBNZ     r0,|L1.3822|
000ee2  462a              MOV      r2,r5                 ;1023
000ee4  4631              MOV      r1,r6                 ;1023
000ee6  4620              MOV      r0,r4                 ;1023
000ee8  f7fffffe          BL       png_handle_bKGD
000eec  e0c7              B        |L1.4222|
                  |L1.3822|
000eee  2204              MOVS     r2,#4                 ;1026
000ef0  49dc              LDR      r1,|L1.4708|
000ef2  f5047017          ADD      r0,r4,#0x25c          ;1026
000ef6  f7fffffe          BL       memcmp
000efa  b928              CBNZ     r0,|L1.3848|
000efc  462a              MOV      r2,r5                 ;1027
000efe  4631              MOV      r1,r6                 ;1027
000f00  4620              MOV      r0,r4                 ;1027
000f02  f7fffffe          BL       png_handle_cHRM
000f06  e0ba              B        |L1.4222|
                  |L1.3848|
000f08  2204              MOVS     r2,#4                 ;1030
000f0a  49d7              LDR      r1,|L1.4712|
000f0c  f5047017          ADD      r0,r4,#0x25c          ;1030
000f10  f7fffffe          BL       memcmp
000f14  b928              CBNZ     r0,|L1.3874|
000f16  462a              MOV      r2,r5                 ;1031
000f18  4631              MOV      r1,r6                 ;1031
000f1a  4620              MOV      r0,r4                 ;1031
000f1c  f7fffffe          BL       png_handle_gAMA
000f20  e0ad              B        |L1.4222|
                  |L1.3874|
000f22  2204              MOVS     r2,#4                 ;1034
000f24  49d1              LDR      r1,|L1.4716|
000f26  f5047017          ADD      r0,r4,#0x25c          ;1034
000f2a  f7fffffe          BL       memcmp
000f2e  b928              CBNZ     r0,|L1.3900|
000f30  462a              MOV      r2,r5                 ;1035
000f32  4631              MOV      r1,r6                 ;1035
000f34  4620              MOV      r0,r4                 ;1035
000f36  f7fffffe          BL       png_handle_hIST
000f3a  e0a0              B        |L1.4222|
                  |L1.3900|
000f3c  2204              MOVS     r2,#4                 ;1038
000f3e  49cc              LDR      r1,|L1.4720|
000f40  f5047017          ADD      r0,r4,#0x25c          ;1038
000f44  f7fffffe          BL       memcmp
000f48  b928              CBNZ     r0,|L1.3926|
000f4a  462a              MOV      r2,r5                 ;1039
000f4c  4631              MOV      r1,r6                 ;1039
000f4e  4620              MOV      r0,r4                 ;1039
000f50  f7fffffe          BL       png_handle_oFFs
000f54  e093              B        |L1.4222|
                  |L1.3926|
000f56  2204              MOVS     r2,#4                 ;1042
000f58  49c6              LDR      r1,|L1.4724|
000f5a  f5047017          ADD      r0,r4,#0x25c          ;1042
000f5e  f7fffffe          BL       memcmp
000f62  b928              CBNZ     r0,|L1.3952|
000f64  462a              MOV      r2,r5                 ;1043
000f66  4631              MOV      r1,r6                 ;1043
000f68  4620              MOV      r0,r4                 ;1043
000f6a  f7fffffe          BL       png_handle_pCAL
000f6e  e086              B        |L1.4222|
                  |L1.3952|
000f70  2204              MOVS     r2,#4                 ;1046
000f72  49c1              LDR      r1,|L1.4728|
000f74  f5047017          ADD      r0,r4,#0x25c          ;1046
000f78  f7fffffe          BL       memcmp
000f7c  b928              CBNZ     r0,|L1.3978|
000f7e  462a              MOV      r2,r5                 ;1047
000f80  4631              MOV      r1,r6                 ;1047
000f82  4620              MOV      r0,r4                 ;1047
000f84  f7fffffe          BL       png_handle_sCAL
000f88  e079              B        |L1.4222|
                  |L1.3978|
000f8a  2204              MOVS     r2,#4                 ;1050
000f8c  49bb              LDR      r1,|L1.4732|
000f8e  f5047017          ADD      r0,r4,#0x25c          ;1050
000f92  f7fffffe          BL       memcmp
000f96  b928              CBNZ     r0,|L1.4004|
000f98  462a              MOV      r2,r5                 ;1051
000f9a  4631              MOV      r1,r6                 ;1051
000f9c  4620              MOV      r0,r4                 ;1051
000f9e  f7fffffe          BL       png_handle_pHYs
000fa2  e06c              B        |L1.4222|
                  |L1.4004|
000fa4  2204              MOVS     r2,#4                 ;1054
000fa6  49b6              LDR      r1,|L1.4736|
000fa8  f5047017          ADD      r0,r4,#0x25c          ;1054
000fac  f7fffffe          BL       memcmp
000fb0  b928              CBNZ     r0,|L1.4030|
000fb2  462a              MOV      r2,r5                 ;1055
000fb4  4631              MOV      r1,r6                 ;1055
000fb6  4620              MOV      r0,r4                 ;1055
000fb8  f7fffffe          BL       png_handle_sBIT
000fbc  e05f              B        |L1.4222|
                  |L1.4030|
000fbe  2204              MOVS     r2,#4                 ;1058
000fc0  49b0              LDR      r1,|L1.4740|
000fc2  f5047017          ADD      r0,r4,#0x25c          ;1058
000fc6  f7fffffe          BL       memcmp
000fca  b928              CBNZ     r0,|L1.4056|
000fcc  462a              MOV      r2,r5                 ;1059
000fce  4631              MOV      r1,r6                 ;1059
000fd0  4620              MOV      r0,r4                 ;1059
000fd2  f7fffffe          BL       png_handle_sRGB
000fd6  e052              B        |L1.4222|
                  |L1.4056|
000fd8  2204              MOVS     r2,#4                 ;1062
000fda  49ab              LDR      r1,|L1.4744|
000fdc  f5047017          ADD      r0,r4,#0x25c          ;1062
000fe0  f7fffffe          BL       memcmp
000fe4  b928              CBNZ     r0,|L1.4082|
000fe6  462a              MOV      r2,r5                 ;1063
000fe8  4631              MOV      r1,r6                 ;1063
000fea  4620              MOV      r0,r4                 ;1063
000fec  f7fffffe          BL       png_handle_iCCP
000ff0  e045              B        |L1.4222|
                  |L1.4082|
000ff2  2204              MOVS     r2,#4                 ;1066
000ff4  49a5              LDR      r1,|L1.4748|
000ff6  f5047017          ADD      r0,r4,#0x25c          ;1066
000ffa  f7fffffe          BL       memcmp
000ffe  b928              CBNZ     r0,|L1.4108|
001000  462a              MOV      r2,r5                 ;1067
001002  4631              MOV      r1,r6                 ;1067
001004  4620              MOV      r0,r4                 ;1067
001006  f7fffffe          BL       png_handle_sPLT
00100a  e038              B        |L1.4222|
                  |L1.4108|
00100c  2204              MOVS     r2,#4                 ;1070
00100e  49a0              LDR      r1,|L1.4752|
001010  f5047017          ADD      r0,r4,#0x25c          ;1070
001014  f7fffffe          BL       memcmp
001018  b928              CBNZ     r0,|L1.4134|
00101a  462a              MOV      r2,r5                 ;1071
00101c  4631              MOV      r1,r6                 ;1071
00101e  4620              MOV      r0,r4                 ;1071
001020  f7fffffe          BL       png_handle_tEXt
001024  e02b              B        |L1.4222|
                  |L1.4134|
001026  2204              MOVS     r2,#4                 ;1074
001028  499a              LDR      r1,|L1.4756|
00102a  f5047017          ADD      r0,r4,#0x25c          ;1074
00102e  f7fffffe          BL       memcmp
001032  b928              CBNZ     r0,|L1.4160|
001034  462a              MOV      r2,r5                 ;1075
001036  4631              MOV      r1,r6                 ;1075
001038  4620              MOV      r0,r4                 ;1075
00103a  f7fffffe          BL       png_handle_tIME
00103e  e01e              B        |L1.4222|
                  |L1.4160|
001040  2204              MOVS     r2,#4                 ;1078
001042  4995              LDR      r1,|L1.4760|
001044  f5047017          ADD      r0,r4,#0x25c          ;1078
001048  f7fffffe          BL       memcmp
00104c  b928              CBNZ     r0,|L1.4186|
00104e  462a              MOV      r2,r5                 ;1079
001050  4631              MOV      r1,r6                 ;1079
001052  4620              MOV      r0,r4                 ;1079
001054  f7fffffe          BL       png_handle_tRNS
001058  e011              B        |L1.4222|
                  |L1.4186|
00105a  2204              MOVS     r2,#4                 ;1082
00105c  498f              LDR      r1,|L1.4764|
00105e  f5047017          ADD      r0,r4,#0x25c          ;1082
001062  f7fffffe          BL       memcmp
001066  b928              CBNZ     r0,|L1.4212|
001068  462a              MOV      r2,r5                 ;1083
00106a  4631              MOV      r1,r6                 ;1083
00106c  4620              MOV      r0,r4                 ;1083
00106e  f7fffffe          BL       png_handle_zTXt
001072  e004              B        |L1.4222|
                  |L1.4212|
001074  462a              MOV      r2,r5                 ;1090
001076  4631              MOV      r1,r6                 ;1090
001078  4620              MOV      r0,r4                 ;1090
00107a  f7fffffe          BL       png_handle_unknown
                  |L1.4222|
00107e  f89401a8          LDRB     r0,[r4,#0x1a8]        ;1091
001082  f0000010          AND      r0,r0,#0x10           ;1091
001086  2800              CMP      r0,#0                 ;1091
001088  f43fae69          BEQ      |L1.3422|
00108c  bf00              NOP      
00108e  e660              B        |L1.3410|
;;;1093   #endif /* PNG_NO_SEQUENTIAL_READ_SUPPORTED */
                          ENDP

                  png_read_destroy PROC
;;;1166   void /* PRIVATE */
;;;1167   png_read_destroy(png_structp png_ptr, png_infop info_ptr, png_infop end_info_ptr)
001090  e92d4ff0          PUSH     {r4-r11,lr}
;;;1168   {
001094  b0e3              SUB      sp,sp,#0x18c
001096  4604              MOV      r4,r0
001098  460f              MOV      r7,r1
00109a  4615              MOV      r5,r2
;;;1169   #ifdef PNG_SETJMP_SUPPORTED
;;;1170      jmp_buf tmp_jmp;
;;;1171   #endif
;;;1172      png_error_ptr error_fn;
;;;1173      png_error_ptr warning_fn;
;;;1174      png_voidp error_ptr;
;;;1175   #ifdef PNG_USER_MEM_SUPPORTED
;;;1176      png_free_ptr free_fn;
;;;1177   #endif
;;;1178   
;;;1179      png_debug(1, "in png_read_destroy\n");
;;;1180      if (info_ptr != NULL)
00109c  b11f              CBZ      r7,|L1.4262|
;;;1181         png_info_destroy(png_ptr, info_ptr);
00109e  4639              MOV      r1,r7
0010a0  4620              MOV      r0,r4
0010a2  f7fffffe          BL       png_info_destroy
                  |L1.4262|
;;;1182   
;;;1183      if (end_info_ptr != NULL)
0010a6  b11d              CBZ      r5,|L1.4272|
;;;1184         png_info_destroy(png_ptr, end_info_ptr);
0010a8  4629              MOV      r1,r5
0010aa  4620              MOV      r0,r4
0010ac  f7fffffe          BL       png_info_destroy
                  |L1.4272|
;;;1185   
;;;1186      png_free(png_ptr, png_ptr->zbuf);
0010b0  4620              MOV      r0,r4
0010b2  f8d411ec          LDR      r1,[r4,#0x1ec]
0010b6  f7fffffe          BL       png_free
;;;1187      png_free(png_ptr, png_ptr->big_row_buf);
0010ba  4620              MOV      r0,r4
0010bc  f8d41388          LDR      r1,[r4,#0x388]
0010c0  f7fffffe          BL       png_free
;;;1188      png_free(png_ptr, png_ptr->prev_row);
0010c4  4620              MOV      r0,r4
0010c6  f8d41228          LDR      r1,[r4,#0x228]
0010ca  f7fffffe          BL       png_free
;;;1189   #if defined(PNG_READ_DITHER_SUPPORTED)
;;;1190      png_free(png_ptr, png_ptr->palette_lookup);
0010ce  4620              MOV      r0,r4
0010d0  f8d4132c          LDR      r1,[r4,#0x32c]
0010d4  f7fffffe          BL       png_free
;;;1191      png_free(png_ptr, png_ptr->dither_index);
0010d8  4620              MOV      r0,r4
0010da  f8d41330          LDR      r1,[r4,#0x330]
0010de  f7fffffe          BL       png_free
;;;1192   #endif
;;;1193   #if defined(PNG_READ_GAMMA_SUPPORTED)
;;;1194      png_free(png_ptr, png_ptr->gamma_table);
0010e2  4620              MOV      r0,r4
0010e4  f8d412a4          LDR      r1,[r4,#0x2a4]
0010e8  f7fffffe          BL       png_free
;;;1195   #endif
;;;1196   #if defined(PNG_READ_BACKGROUND_SUPPORTED)
;;;1197      png_free(png_ptr, png_ptr->gamma_from_1);
0010ec  4620              MOV      r0,r4
0010ee  f8d412a8          LDR      r1,[r4,#0x2a8]
0010f2  f7fffffe          BL       png_free
;;;1198      png_free(png_ptr, png_ptr->gamma_to_1);
0010f6  4620              MOV      r0,r4
0010f8  f8d412ac          LDR      r1,[r4,#0x2ac]
0010fc  f7fffffe          BL       png_free
;;;1199   #endif
;;;1200   #ifdef PNG_FREE_ME_SUPPORTED
;;;1201      if (png_ptr->free_me & PNG_FREE_PLTE)
001100  f8b40350          LDRH     r0,[r4,#0x350]
001104  f4005080          AND      r0,r0,#0x1000
001108  b120              CBZ      r0,|L1.4372|
;;;1202         png_zfree(png_ptr, png_ptr->palette);
00110a  4620              MOV      r0,r4
00110c  f8d41254          LDR      r1,[r4,#0x254]
001110  f7fffffe          BL       png_zfree
                  |L1.4372|
;;;1203      png_ptr->free_me &= ~PNG_FREE_PLTE;
001114  f8d40350          LDR      r0,[r4,#0x350]
001118  f4205080          BIC      r0,r0,#0x1000
00111c  f8c40350          STR      r0,[r4,#0x350]
;;;1204   #else
;;;1205      if (png_ptr->flags & PNG_FLAG_FREE_PLTE)
;;;1206         png_zfree(png_ptr, png_ptr->palette);
;;;1207      png_ptr->flags &= ~PNG_FLAG_FREE_PLTE;
;;;1208   #endif
;;;1209   #if defined(PNG_tRNS_SUPPORTED) || \
;;;1210       defined(PNG_READ_EXPAND_SUPPORTED) || defined(PNG_READ_BACKGROUND_SUPPORTED)
;;;1211   #ifdef PNG_FREE_ME_SUPPORTED
;;;1212      if (png_ptr->free_me & PNG_FREE_TRNS)
001120  f8b40350          LDRH     r0,[r4,#0x350]
001124  f4005000          AND      r0,r0,#0x2000
001128  b120              CBZ      r0,|L1.4404|
;;;1213         png_free(png_ptr, png_ptr->trans);
00112a  4620              MOV      r0,r4
00112c  f8d412c8          LDR      r1,[r4,#0x2c8]
001130  f7fffffe          BL       png_free
                  |L1.4404|
;;;1214      png_ptr->free_me &= ~PNG_FREE_TRNS;
001134  f8d40350          LDR      r0,[r4,#0x350]
001138  f4205000          BIC      r0,r0,#0x2000
00113c  f8c40350          STR      r0,[r4,#0x350]
;;;1215   #else
;;;1216      if (png_ptr->flags & PNG_FLAG_FREE_TRNS)
;;;1217         png_free(png_ptr, png_ptr->trans);
;;;1218      png_ptr->flags &= ~PNG_FLAG_FREE_TRNS;
;;;1219   #endif
;;;1220   #endif
;;;1221   #if defined(PNG_READ_hIST_SUPPORTED)
;;;1222   #ifdef PNG_FREE_ME_SUPPORTED
;;;1223      if (png_ptr->free_me & PNG_FREE_HIST)
001140  f8940350          LDRB     r0,[r4,#0x350]
001144  f0000008          AND      r0,r0,#8
001148  b120              CBZ      r0,|L1.4436|
;;;1224         png_free(png_ptr, png_ptr->hist);
00114a  4620              MOV      r0,r4
00114c  f8d41334          LDR      r1,[r4,#0x334]
001150  f7fffffe          BL       png_free
                  |L1.4436|
;;;1225      png_ptr->free_me &= ~PNG_FREE_HIST;
001154  f8d40350          LDR      r0,[r4,#0x350]
001158  f0200008          BIC      r0,r0,#8
00115c  f8c40350          STR      r0,[r4,#0x350]
;;;1226   #else
;;;1227      if (png_ptr->flags & PNG_FLAG_FREE_HIST)
;;;1228         png_free(png_ptr, png_ptr->hist);
;;;1229      png_ptr->flags &= ~PNG_FLAG_FREE_HIST;
;;;1230   #endif
;;;1231   #endif
;;;1232   #if defined(PNG_READ_GAMMA_SUPPORTED)
;;;1233      if (png_ptr->gamma_16_table != NULL)
001160  f8d402b0          LDR      r0,[r4,#0x2b0]
001164  b1c8              CBZ      r0,|L1.4506|
;;;1234      {
;;;1235         int i;
;;;1236         int istop = (1 << (8 - png_ptr->gamma_shift));
001166  f8d40298          LDR      r0,[r4,#0x298]
00116a  f1c00108          RSB      r1,r0,#8
00116e  2001              MOVS     r0,#1
001170  4088              LSLS     r0,r0,r1
001172  9001              STR      r0,[sp,#4]
;;;1237         for (i = 0; i < istop; i++)
001174  2600              MOVS     r6,#0
001176  e007              B        |L1.4488|
                  |L1.4472|
;;;1238         {
;;;1239            png_free(png_ptr, png_ptr->gamma_16_table[i]);
001178  f8d402b0          LDR      r0,[r4,#0x2b0]
00117c  f8501026          LDR      r1,[r0,r6,LSL #2]
001180  4620              MOV      r0,r4
001182  f7fffffe          BL       png_free
001186  1c76              ADDS     r6,r6,#1              ;1237
                  |L1.4488|
001188  9801              LDR      r0,[sp,#4]            ;1237
00118a  4286              CMP      r6,r0                 ;1237
00118c  dbf4              BLT      |L1.4472|
;;;1240         }
;;;1241      png_free(png_ptr, png_ptr->gamma_16_table);
00118e  4620              MOV      r0,r4
001190  f8d412b0          LDR      r1,[r4,#0x2b0]
001194  f7fffffe          BL       png_free
;;;1242      }
001198  bf00              NOP      
                  |L1.4506|
;;;1243   #if defined(PNG_READ_BACKGROUND_SUPPORTED)
;;;1244      if (png_ptr->gamma_16_from_1 != NULL)
00119a  f8d402b4          LDR      r0,[r4,#0x2b4]
00119e  b1c8              CBZ      r0,|L1.4564|
;;;1245      {
;;;1246         int i;
;;;1247         int istop = (1 << (8 - png_ptr->gamma_shift));
0011a0  f8d40298          LDR      r0,[r4,#0x298]
0011a4  f1c00108          RSB      r1,r0,#8
0011a8  2001              MOVS     r0,#1
0011aa  4088              LSLS     r0,r0,r1
0011ac  9001              STR      r0,[sp,#4]
;;;1248         for (i = 0; i < istop; i++)
0011ae  2600              MOVS     r6,#0
0011b0  e007              B        |L1.4546|
                  |L1.4530|
;;;1249         {
;;;1250            png_free(png_ptr, png_ptr->gamma_16_from_1[i]);
0011b2  f8d402b4          LDR      r0,[r4,#0x2b4]
0011b6  f8501026          LDR      r1,[r0,r6,LSL #2]
0011ba  4620              MOV      r0,r4
0011bc  f7fffffe          BL       png_free
0011c0  1c76              ADDS     r6,r6,#1              ;1248
                  |L1.4546|
0011c2  9801              LDR      r0,[sp,#4]            ;1248
0011c4  4286              CMP      r6,r0                 ;1248
0011c6  dbf4              BLT      |L1.4530|
;;;1251         }
;;;1252      png_free(png_ptr, png_ptr->gamma_16_from_1);
0011c8  4620              MOV      r0,r4
0011ca  f8d412b4          LDR      r1,[r4,#0x2b4]
0011ce  f7fffffe          BL       png_free
;;;1253      }
0011d2  bf00              NOP      
                  |L1.4564|
;;;1254      if (png_ptr->gamma_16_to_1 != NULL)
0011d4  f8d402b8          LDR      r0,[r4,#0x2b8]
0011d8  b1c8              CBZ      r0,|L1.4622|
;;;1255      {
;;;1256         int i;
;;;1257         int istop = (1 << (8 - png_ptr->gamma_shift));
0011da  f8d40298          LDR      r0,[r4,#0x298]
0011de  f1c00108          RSB      r1,r0,#8
0011e2  2001              MOVS     r0,#1
0011e4  4088              LSLS     r0,r0,r1
0011e6  9001              STR      r0,[sp,#4]
;;;1258         for (i = 0; i < istop; i++)
0011e8  2600              MOVS     r6,#0
0011ea  e007              B        |L1.4604|
                  |L1.4588|
;;;1259         {
;;;1260            png_free(png_ptr, png_ptr->gamma_16_to_1[i]);
0011ec  f8d402b8          LDR      r0,[r4,#0x2b8]
0011f0  f8501026          LDR      r1,[r0,r6,LSL #2]
0011f4  4620              MOV      r0,r4
0011f6  f7fffffe          BL       png_free
0011fa  1c76              ADDS     r6,r6,#1              ;1258
                  |L1.4604|
0011fc  9801              LDR      r0,[sp,#4]            ;1258
0011fe  4286              CMP      r6,r0                 ;1258
001200  dbf4              BLT      |L1.4588|
;;;1261         }
;;;1262      png_free(png_ptr, png_ptr->gamma_16_to_1);
001202  4620              MOV      r0,r4
001204  f8d412b8          LDR      r1,[r4,#0x2b8]
001208  f7fffffe          BL       png_free
;;;1263      }
00120c  bf00              NOP      
                  |L1.4622|
;;;1264   #endif
;;;1265   #endif
;;;1266   #if defined(PNG_TIME_RFC1123_SUPPORTED)
;;;1267      png_free(png_ptr, png_ptr->time_buffer);
;;;1268   #endif
;;;1269   
;;;1270      inflateEnd(&png_ptr->zstream);
00120e  f50470da          ADD      r0,r4,#0x1b4
001212  f7fffffe          BL       inflateEnd
;;;1271   #ifdef PNG_PROGRESSIVE_READ_SUPPORTED
;;;1272      png_free(png_ptr, png_ptr->save_buffer);
001216  4620              MOV      r0,r4
001218  f8d412f0          LDR      r1,[r4,#0x2f0]
00121c  f7fffffe          BL       png_free
;;;1273   #endif
;;;1274   
;;;1275   #ifdef PNG_PROGRESSIVE_READ_SUPPORTED
;;;1276   #ifdef PNG_TEXT_SUPPORTED
;;;1277      png_free(png_ptr, png_ptr->current_text);
001220  4620              MOV      r0,r4
001222  f8d41324          LDR      r1,[r4,#0x324]
001226  f7fffffe          BL       png_free
;;;1278   #endif /* PNG_TEXT_SUPPORTED */
;;;1279   #endif /* PNG_PROGRESSIVE_READ_SUPPORTED */
;;;1280   
;;;1281      /* Save the important info out of the png_struct, in case it is
;;;1282       * being used again.
;;;1283       */
;;;1284   #ifdef PNG_SETJMP_SUPPORTED
;;;1285      png_memcpy(tmp_jmp, png_ptr->jmpbuf, png_sizeof (jmp_buf));
00122a  f44f72c0          MOV      r2,#0x180
00122e  4621              MOV      r1,r4
001230  a802              ADD      r0,sp,#8
001232  f7fffffe          BL       __aeabi_memcpy4
;;;1286   #endif
;;;1287   
;;;1288      error_fn = png_ptr->error_fn;
001236  f8d48180          LDR      r8,[r4,#0x180]
;;;1289      warning_fn = png_ptr->warning_fn;
00123a  f8d49184          LDR      r9,[r4,#0x184]
;;;1290      error_ptr = png_ptr->error_ptr;
00123e  e02f              B        |L1.4768|
                  |L1.4672|
                          DCD      png_IDAT
                  |L1.4676|
001244  546f6f20          DCB      "Too many IDAT's found",0
001248  6d616e79
00124c  20494441
001250  54277320
001254  666f756e
001258  6400    
00125a  00                DCB      0
00125b  00                DCB      0
                  |L1.4700|
                          DCD      png_PLTE
                  |L1.4704|
                          DCD      png_bKGD
                  |L1.4708|
                          DCD      png_cHRM
                  |L1.4712|
                          DCD      png_gAMA
                  |L1.4716|
                          DCD      png_hIST
                  |L1.4720|
                          DCD      png_oFFs
                  |L1.4724|
                          DCD      png_pCAL
                  |L1.4728|
                          DCD      png_sCAL
                  |L1.4732|
                          DCD      png_pHYs
                  |L1.4736|
                          DCD      png_sBIT
                  |L1.4740|
                          DCD      png_sRGB
                  |L1.4744|
                          DCD      png_iCCP
                  |L1.4748|
                          DCD      png_sPLT
                  |L1.4752|
                          DCD      png_tEXt
                  |L1.4756|
                          DCD      png_tIME
                  |L1.4760|
                          DCD      png_tRNS
                  |L1.4764|
                          DCD      png_zTXt
                  |L1.4768|
0012a0  f8d4a188          LDR      r10,[r4,#0x188]
;;;1291   #ifdef PNG_USER_MEM_SUPPORTED
;;;1292      free_fn = png_ptr->free_fn;
0012a4  f8d4b384          LDR      r11,[r4,#0x384]
;;;1293   #endif
;;;1294   
;;;1295      png_memset(png_ptr, 0, png_sizeof (png_struct));
0012a8  f44f716a          MOV      r1,#0x3a8
0012ac  4620              MOV      r0,r4
0012ae  f7fffffe          BL       __aeabi_memclr4
;;;1296   
;;;1297      png_ptr->error_fn = error_fn;
0012b2  f8c48180          STR      r8,[r4,#0x180]
;;;1298      png_ptr->warning_fn = warning_fn;
0012b6  f8c49184          STR      r9,[r4,#0x184]
;;;1299      png_ptr->error_ptr = error_ptr;
0012ba  f8c4a188          STR      r10,[r4,#0x188]
;;;1300   #ifdef PNG_USER_MEM_SUPPORTED
;;;1301      png_ptr->free_fn = free_fn;
0012be  f8c4b384          STR      r11,[r4,#0x384]
;;;1302   #endif
;;;1303   
;;;1304   #ifdef PNG_SETJMP_SUPPORTED
;;;1305      png_memcpy(png_ptr->jmpbuf, tmp_jmp, png_sizeof (jmp_buf));
0012c2  f44f72c0          MOV      r2,#0x180
0012c6  a902              ADD      r1,sp,#8
0012c8  4620              MOV      r0,r4
0012ca  f7fffffe          BL       __aeabi_memcpy4
;;;1306   #endif
;;;1307   
;;;1308   }
0012ce  b063              ADD      sp,sp,#0x18c
0012d0  e8bd8ff0          POP      {r4-r11,pc}
;;;1309   
                          ENDP

                  png_destroy_read_struct PROC
;;;1096   void PNGAPI
;;;1097   png_destroy_read_struct(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr,
0012d4  e92d5ff0          PUSH     {r4-r12,lr}
;;;1098      png_infopp end_info_ptr_ptr)
;;;1099   {
0012d8  4604              MOV      r4,r0
0012da  460d              MOV      r5,r1
0012dc  4616              MOV      r6,r2
;;;1100      png_structp png_ptr = NULL;
0012de  2700              MOVS     r7,#0
;;;1101      png_infop info_ptr = NULL, end_info_ptr = NULL;
0012e0  46b9              MOV      r9,r7
0012e2  46b8              MOV      r8,r7
;;;1102   #ifdef PNG_USER_MEM_SUPPORTED
;;;1103      png_free_ptr free_fn;
;;;1104      png_voidp mem_ptr;
;;;1105   #endif
;;;1106   
;;;1107      png_debug(1, "in png_destroy_read_struct\n");
;;;1108      if (png_ptr_ptr != NULL)
0012e4  b104              CBZ      r4,|L1.4840|
;;;1109         png_ptr = *png_ptr_ptr;
0012e6  6827              LDR      r7,[r4,#0]
                  |L1.4840|
;;;1110   
;;;1111      if (info_ptr_ptr != NULL)
0012e8  b10d              CBZ      r5,|L1.4846|
;;;1112         info_ptr = *info_ptr_ptr;
0012ea  f8d59000          LDR      r9,[r5,#0]
                  |L1.4846|
;;;1113   
;;;1114      if (end_info_ptr_ptr != NULL)
0012ee  b10e              CBZ      r6,|L1.4852|
;;;1115         end_info_ptr = *end_info_ptr_ptr;
0012f0  f8d68000          LDR      r8,[r6,#0]
                  |L1.4852|
;;;1116   
;;;1117   #ifdef PNG_USER_MEM_SUPPORTED
;;;1118      free_fn = png_ptr->free_fn;
0012f4  f8d7a384          LDR      r10,[r7,#0x384]
;;;1119      mem_ptr = png_ptr->mem_ptr;
0012f8  f8d7b37c          LDR      r11,[r7,#0x37c]
;;;1120   #endif
;;;1121   
;;;1122      png_read_destroy(png_ptr, info_ptr, end_info_ptr);
0012fc  4642              MOV      r2,r8
0012fe  4649              MOV      r1,r9
001300  4638              MOV      r0,r7
001302  f7fffffe          BL       png_read_destroy
;;;1123   
;;;1124      if (info_ptr != NULL)
001306  f1b90f00          CMP      r9,#0
00130a  d00e              BEQ      |L1.4906|
;;;1125      {
;;;1126   #if defined(PNG_TEXT_SUPPORTED)
;;;1127         png_free_data(png_ptr, info_ptr, PNG_FREE_TEXT, -1);
00130c  f04f33ff          MOV      r3,#0xffffffff
001310  f44f4280          MOV      r2,#0x4000
001314  4649              MOV      r1,r9
001316  4638              MOV      r0,r7
001318  f7fffffe          BL       png_free_data
;;;1128   #endif
;;;1129   
;;;1130   #ifdef PNG_USER_MEM_SUPPORTED
;;;1131         png_destroy_struct_2((png_voidp)info_ptr, (png_free_ptr)free_fn,
00131c  465a              MOV      r2,r11
00131e  4651              MOV      r1,r10
001320  4648              MOV      r0,r9
001322  f7fffffe          BL       png_destroy_struct_2
;;;1132             (png_voidp)mem_ptr);
;;;1133   #else
;;;1134         png_destroy_struct((png_voidp)info_ptr);
;;;1135   #endif
;;;1136         *info_ptr_ptr = NULL;
001326  2000              MOVS     r0,#0
001328  6028              STR      r0,[r5,#0]
                  |L1.4906|
;;;1137      }
;;;1138   
;;;1139      if (end_info_ptr != NULL)
00132a  f1b80f00          CMP      r8,#0
00132e  d00e              BEQ      |L1.4942|
;;;1140      {
;;;1141   #if defined(PNG_READ_TEXT_SUPPORTED)
;;;1142         png_free_data(png_ptr, end_info_ptr, PNG_FREE_TEXT, -1);
001330  f04f33ff          MOV      r3,#0xffffffff
001334  f44f4280          MOV      r2,#0x4000
001338  4641              MOV      r1,r8
00133a  4638              MOV      r0,r7
00133c  f7fffffe          BL       png_free_data
;;;1143   #endif
;;;1144   #ifdef PNG_USER_MEM_SUPPORTED
;;;1145         png_destroy_struct_2((png_voidp)end_info_ptr, (png_free_ptr)free_fn,
001340  465a              MOV      r2,r11
001342  4651              MOV      r1,r10
001344  4640              MOV      r0,r8
001346  f7fffffe          BL       png_destroy_struct_2
;;;1146            (png_voidp)mem_ptr);
;;;1147   #else
;;;1148         png_destroy_struct((png_voidp)end_info_ptr);
;;;1149   #endif
;;;1150         *end_info_ptr_ptr = NULL;
00134a  2000              MOVS     r0,#0
00134c  6030              STR      r0,[r6,#0]
                  |L1.4942|
;;;1151      }
;;;1152   
;;;1153      if (png_ptr != NULL)
00134e  b137              CBZ      r7,|L1.4958|
;;;1154      {
;;;1155   #ifdef PNG_USER_MEM_SUPPORTED
;;;1156         png_destroy_struct_2((png_voidp)png_ptr, (png_free_ptr)free_fn,
001350  465a              MOV      r2,r11
001352  4651              MOV      r1,r10
001354  4638              MOV      r0,r7
001356  f7fffffe          BL       png_destroy_struct_2
;;;1157             (png_voidp)mem_ptr);
;;;1158   #else
;;;1159         png_destroy_struct((png_voidp)png_ptr);
;;;1160   #endif
;;;1161         *png_ptr_ptr = NULL;
00135a  2000              MOVS     r0,#0
00135c  6020              STR      r0,[r4,#0]
                  |L1.4958|
;;;1162      }
;;;1163   }
00135e  e8bd9ff0          POP      {r4-r12,pc}
;;;1164   
                          ENDP

                  png_set_read_status_fn PROC
;;;1310   void PNGAPI
;;;1311   png_set_read_status_fn(png_structp png_ptr, png_read_status_ptr read_row_fn)
001362  b900              CBNZ     r0,|L1.4966|
                  |L1.4964|
;;;1312   {
;;;1313      if(png_ptr == NULL) return;
;;;1314      png_ptr->read_row_fn = read_row_fn;
;;;1315   }
001364  4770              BX       lr
                  |L1.4966|
001366  f8c012d8          STR      r1,[r0,#0x2d8]        ;1314
00136a  bf00              NOP      
00136c  e7fa              B        |L1.4964|
;;;1316   
                          ENDP

                  png_read_png PROC
;;;1320   void PNGAPI
;;;1321   png_read_png(png_structp png_ptr, png_infop info_ptr,
00136e  e92d43f8          PUSH     {r3-r9,lr}
;;;1322                              int transforms,
;;;1323                              voidp params)
;;;1324   {
001372  4606              MOV      r6,r0
001374  460c              MOV      r4,r1
001376  4615              MOV      r5,r2
001378  4698              MOV      r8,r3
;;;1325      int row;
;;;1326   
;;;1327      if(png_ptr == NULL) return;
00137a  b90e              CBNZ     r6,|L1.4992|
                  |L1.4988|
;;;1328   #if defined(PNG_READ_INVERT_ALPHA_SUPPORTED)
;;;1329      /* invert the alpha channel from opacity to transparency
;;;1330       */
;;;1331      if (transforms & PNG_TRANSFORM_INVERT_ALPHA)
;;;1332          png_set_invert_alpha(png_ptr);
;;;1333   #endif
;;;1334   
;;;1335      /* png_read_info() gives us all of the information from the
;;;1336       * PNG file before the first IDAT (image data chunk).
;;;1337       */
;;;1338      png_read_info(png_ptr, info_ptr);
;;;1339      if (info_ptr->height > PNG_UINT_32_MAX/png_sizeof(png_bytep))
;;;1340         png_error(png_ptr,"Image is too high to process with png_read_png()");
;;;1341   
;;;1342      /* -------------- image transformations start here ------------------- */
;;;1343   
;;;1344   #if defined(PNG_READ_16_TO_8_SUPPORTED)
;;;1345      /* tell libpng to strip 16 bit/color files down to 8 bits per color
;;;1346       */
;;;1347      if (transforms & PNG_TRANSFORM_STRIP_16)
;;;1348          png_set_strip_16(png_ptr);
;;;1349   #endif
;;;1350   
;;;1351   #if defined(PNG_READ_STRIP_ALPHA_SUPPORTED)
;;;1352      /* Strip alpha bytes from the input data without combining with
;;;1353       * the background (not recommended).
;;;1354       */
;;;1355      if (transforms & PNG_TRANSFORM_STRIP_ALPHA)
;;;1356          png_set_strip_alpha(png_ptr);
;;;1357   #endif
;;;1358   
;;;1359   #if defined(PNG_READ_PACK_SUPPORTED) && !defined(PNG_READ_EXPAND_SUPPORTED)
;;;1360      /* Extract multiple pixels with bit depths of 1, 2, or 4 from a single
;;;1361       * byte into separate bytes (useful for paletted and grayscale images).
;;;1362       */
;;;1363      if (transforms & PNG_TRANSFORM_PACKING)
;;;1364          png_set_packing(png_ptr);
;;;1365   #endif
;;;1366   
;;;1367   #if defined(PNG_READ_PACKSWAP_SUPPORTED)
;;;1368      /* Change the order of packed pixels to least significant bit first
;;;1369       * (not useful if you are using png_set_packing).
;;;1370       */
;;;1371      if (transforms & PNG_TRANSFORM_PACKSWAP)
;;;1372          png_set_packswap(png_ptr);
;;;1373   #endif
;;;1374   
;;;1375   #if defined(PNG_READ_EXPAND_SUPPORTED)
;;;1376      /* Expand paletted colors into true RGB triplets
;;;1377       * Expand grayscale images to full 8 bits from 1, 2, or 4 bits/pixel
;;;1378       * Expand paletted or RGB images with transparency to full alpha
;;;1379       * channels so the data will be available as RGBA quartets.
;;;1380       */
;;;1381      if (transforms & PNG_TRANSFORM_EXPAND)
;;;1382          if ((png_ptr->bit_depth < 8) ||
;;;1383              (png_ptr->color_type == PNG_COLOR_TYPE_PALETTE) ||
;;;1384              (png_get_valid(png_ptr, info_ptr, PNG_INFO_tRNS)))
;;;1385            png_set_expand(png_ptr);
;;;1386   #endif
;;;1387   
;;;1388      /* We don't handle background color or gamma transformation or dithering.
;;;1389       */
;;;1390   
;;;1391   #if defined(PNG_READ_INVERT_SUPPORTED)
;;;1392      /* invert monochrome files to have 0 as white and 1 as black
;;;1393       */
;;;1394      if (transforms & PNG_TRANSFORM_INVERT_MONO)
;;;1395          png_set_invert_mono(png_ptr);
;;;1396   #endif
;;;1397   
;;;1398   #if defined(PNG_READ_SHIFT_SUPPORTED)
;;;1399      /* If you want to shift the pixel values from the range [0,255] or
;;;1400       * [0,65535] to the original [0,7] or [0,31], or whatever range the
;;;1401       * colors were originally in:
;;;1402       */
;;;1403      if ((transforms & PNG_TRANSFORM_SHIFT)
;;;1404          && png_get_valid(png_ptr, info_ptr, PNG_INFO_sBIT))
;;;1405      {
;;;1406         png_color_8p sig_bit;
;;;1407   
;;;1408         png_get_sBIT(png_ptr, info_ptr, &sig_bit);
;;;1409         png_set_shift(png_ptr, sig_bit);
;;;1410      }
;;;1411   #endif
;;;1412   
;;;1413   #if defined(PNG_READ_BGR_SUPPORTED)
;;;1414      /* flip the RGB pixels to BGR (or RGBA to BGRA)
;;;1415       */
;;;1416      if (transforms & PNG_TRANSFORM_BGR)
;;;1417          png_set_bgr(png_ptr);
;;;1418   #endif
;;;1419   
;;;1420   #if defined(PNG_READ_SWAP_ALPHA_SUPPORTED)
;;;1421      /* swap the RGBA or GA data to ARGB or AG (or BGRA to ABGR)
;;;1422       */
;;;1423      if (transforms & PNG_TRANSFORM_SWAP_ALPHA)
;;;1424          png_set_swap_alpha(png_ptr);
;;;1425   #endif
;;;1426   
;;;1427   #if defined(PNG_READ_SWAP_SUPPORTED)
;;;1428      /* swap bytes of 16 bit files to least significant byte first
;;;1429       */
;;;1430      if (transforms & PNG_TRANSFORM_SWAP_ENDIAN)
;;;1431          png_set_swap(png_ptr);
;;;1432   #endif
;;;1433   
;;;1434      /* We don't handle adding filler bytes */
;;;1435   
;;;1436      /* Optional call to gamma correct and add the background to the palette
;;;1437       * and update info structure.  REQUIRED if you are expecting libpng to
;;;1438       * update the palette for you (i.e., you selected such a transform above).
;;;1439       */
;;;1440      png_read_update_info(png_ptr, info_ptr);
;;;1441   
;;;1442      /* -------------- image transformations end here ------------------- */
;;;1443   
;;;1444   #ifdef PNG_FREE_ME_SUPPORTED
;;;1445      png_free_data(png_ptr, info_ptr, PNG_FREE_ROWS, 0);
;;;1446   #endif
;;;1447      if(info_ptr->row_pointers == NULL)
;;;1448      {
;;;1449         info_ptr->row_pointers = (png_bytepp)png_malloc(png_ptr,
;;;1450            info_ptr->height * png_sizeof(png_bytep));
;;;1451   #ifdef PNG_FREE_ME_SUPPORTED
;;;1452         info_ptr->free_me |= PNG_FREE_ROWS;
;;;1453   #endif
;;;1454         for (row = 0; row < (int)info_ptr->height; row++)
;;;1455         {
;;;1456            info_ptr->row_pointers[row] = (png_bytep)png_malloc(png_ptr,
;;;1457               png_get_rowbytes(png_ptr, info_ptr));
;;;1458         }
;;;1459      }
;;;1460   
;;;1461      png_read_image(png_ptr, info_ptr->row_pointers);
;;;1462      info_ptr->valid |= PNG_INFO_IDAT;
;;;1463   
;;;1464      /* read rest of file, and get additional chunks in info_ptr - REQUIRED */
;;;1465      png_read_end(png_ptr, info_ptr);
;;;1466   
;;;1467      if(transforms == 0 || params == NULL)
;;;1468         /* quiet compiler warnings */ return;
;;;1469   
;;;1470   }
00137c  e8bd83f8          POP      {r3-r9,pc}
                  |L1.4992|
001380  f4056080          AND      r0,r5,#0x400          ;1331
001384  b110              CBZ      r0,|L1.5004|
001386  4630              MOV      r0,r6                 ;1332
001388  f7fffffe          BL       png_set_invert_alpha
                  |L1.5004|
00138c  4621              MOV      r1,r4                 ;1338
00138e  4630              MOV      r0,r6                 ;1338
001390  f7fffffe          BL       png_read_info
001394  6860              LDR      r0,[r4,#4]            ;1339
001396  f1b04f80          CMP      r0,#0x40000000        ;1339
00139a  d303              BCC      |L1.5028|
00139c  a14a              ADR      r1,|L1.5320|
00139e  4630              MOV      r0,r6                 ;1340
0013a0  f7fffffe          BL       png_error
                  |L1.5028|
0013a4  f0050001          AND      r0,r5,#1              ;1347
0013a8  b110              CBZ      r0,|L1.5040|
0013aa  4630              MOV      r0,r6                 ;1348
0013ac  f7fffffe          BL       png_set_strip_16
                  |L1.5040|
0013b0  f0050002          AND      r0,r5,#2              ;1355
0013b4  b110              CBZ      r0,|L1.5052|
0013b6  4630              MOV      r0,r6                 ;1356
0013b8  f7fffffe          BL       png_set_strip_alpha
                  |L1.5052|
0013bc  f0050008          AND      r0,r5,#8              ;1371
0013c0  b110              CBZ      r0,|L1.5064|
0013c2  4630              MOV      r0,r6                 ;1372
0013c4  f7fffffe          BL       png_set_packswap
                  |L1.5064|
0013c8  f0050010          AND      r0,r5,#0x10           ;1381
0013cc  b180              CBZ      r0,|L1.5104|
0013ce  f8960267          LDRB     r0,[r6,#0x267]        ;1382
0013d2  2808              CMP      r0,#8                 ;1382
0013d4  db09              BLT      |L1.5098|
0013d6  f8960266          LDRB     r0,[r6,#0x266]        ;1383
0013da  2803              CMP      r0,#3                 ;1383
0013dc  d005              BEQ      |L1.5098|
0013de  2210              MOVS     r2,#0x10              ;1384
0013e0  4621              MOV      r1,r4                 ;1384
0013e2  4630              MOV      r0,r6                 ;1384
0013e4  f7fffffe          BL       png_get_valid
0013e8  b110              CBZ      r0,|L1.5104|
                  |L1.5098|
0013ea  4630              MOV      r0,r6                 ;1385
0013ec  f7fffffe          BL       png_set_expand
                  |L1.5104|
0013f0  f0050020          AND      r0,r5,#0x20           ;1394
0013f4  b110              CBZ      r0,|L1.5116|
0013f6  4630              MOV      r0,r6                 ;1395
0013f8  f7fffffe          BL       png_set_invert_mono
                  |L1.5116|
0013fc  f0050040          AND      r0,r5,#0x40           ;1403
001400  b178              CBZ      r0,|L1.5154|
001402  2202              MOVS     r2,#2                 ;1404
001404  4621              MOV      r1,r4                 ;1404
001406  4630              MOV      r0,r6                 ;1404
001408  f7fffffe          BL       png_get_valid
00140c  b148              CBZ      r0,|L1.5154|
00140e  466a              MOV      r2,sp                 ;1408
001410  4621              MOV      r1,r4                 ;1408
001412  4630              MOV      r0,r6                 ;1408
001414  f7fffffe          BL       png_get_sBIT
001418  4630              MOV      r0,r6                 ;1409
00141a  9900              LDR      r1,[sp,#0]            ;1409
00141c  f7fffffe          BL       png_set_shift
001420  bf00              NOP                            ;1410
                  |L1.5154|
001422  f0050080          AND      r0,r5,#0x80           ;1416
001426  b110              CBZ      r0,|L1.5166|
001428  4630              MOV      r0,r6                 ;1417
00142a  f7fffffe          BL       png_set_bgr
                  |L1.5166|
00142e  f4057080          AND      r0,r5,#0x100          ;1423
001432  b110              CBZ      r0,|L1.5178|
001434  4630              MOV      r0,r6                 ;1424
001436  f7fffffe          BL       png_set_swap_alpha
                  |L1.5178|
00143a  f4057000          AND      r0,r5,#0x200          ;1430
00143e  b110              CBZ      r0,|L1.5190|
001440  4630              MOV      r0,r6                 ;1431
001442  f7fffffe          BL       png_set_swap
                  |L1.5190|
001446  4621              MOV      r1,r4                 ;1440
001448  4630              MOV      r0,r6                 ;1440
00144a  f7fffffe          BL       png_read_update_info
00144e  2300              MOVS     r3,#0                 ;1445
001450  2240              MOVS     r2,#0x40              ;1445
001452  4621              MOV      r1,r4                 ;1445
001454  4630              MOV      r0,r6                 ;1445
001456  f7fffffe          BL       png_free_data
00145a  f8d400f8          LDR      r0,[r4,#0xf8]         ;1447
00145e  b9f8              CBNZ     r0,|L1.5280|
001460  6860              LDR      r0,[r4,#4]            ;1449
001462  0081              LSLS     r1,r0,#2              ;1449
001464  4630              MOV      r0,r6                 ;1449
001466  f7fffffe          BL       png_malloc
00146a  f8c400f8          STR      r0,[r4,#0xf8]         ;1449
00146e  f8d400b8          LDR      r0,[r4,#0xb8]         ;1452
001472  f0400040          ORR      r0,r0,#0x40           ;1452
001476  f8c400b8          STR      r0,[r4,#0xb8]         ;1452
00147a  2700              MOVS     r7,#0                 ;1454
00147c  e00d              B        |L1.5274|
                  |L1.5246|
00147e  4621              MOV      r1,r4                 ;1456
001480  4630              MOV      r0,r6                 ;1456
001482  f7fffffe          BL       png_get_rowbytes
001486  4681              MOV      r9,r0                 ;1456
001488  4649              MOV      r1,r9                 ;1456
00148a  4630              MOV      r0,r6                 ;1456
00148c  f7fffffe          BL       png_malloc
001490  f8d410f8          LDR      r1,[r4,#0xf8]         ;1456
001494  f8410027          STR      r0,[r1,r7,LSL #2]     ;1456
001498  1c7f              ADDS     r7,r7,#1              ;1454
                  |L1.5274|
00149a  6860              LDR      r0,[r4,#4]            ;1454
00149c  42b8              CMP      r0,r7                 ;1454
00149e  dcee              BGT      |L1.5246|
                  |L1.5280|
0014a0  4630              MOV      r0,r6                 ;1461
0014a2  f8d410f8          LDR      r1,[r4,#0xf8]         ;1461
0014a6  f7fffffe          BL       png_read_image
0014aa  68a0              LDR      r0,[r4,#8]            ;1462
0014ac  f4404000          ORR      r0,r0,#0x8000         ;1462
0014b0  60a0              STR      r0,[r4,#8]            ;1462
0014b2  4621              MOV      r1,r4                 ;1465
0014b4  4630              MOV      r0,r6                 ;1465
0014b6  f7fffffe          BL       png_read_end
0014ba  b115              CBZ      r5,|L1.5314|
0014bc  f1b80f00          CMP      r8,#0                 ;1467
0014c0  d100              BNE      |L1.5316|
                  |L1.5314|
0014c2  e75b              B        |L1.4988|
                  |L1.5316|
0014c4  bf00              NOP      
0014c6  e759              B        |L1.4988|
;;;1471   #endif /* PNG_INFO_IMAGE_SUPPORTED */
                          ENDP

                  |L1.5320|
0014c8  496d6167          DCB      "Image is too high to process with png_read_png()",0
0014cc  65206973
0014d0  20746f6f
0014d4  20686967
0014d8  6820746f
0014dc  2070726f
0014e0  63657373
0014e4  20776974
0014e8  6820706e
0014ec  675f7265
0014f0  61645f70
0014f4  6e672829
0014f8  00      
0014f9  00                DCB      0
0014fa  00                DCB      0
0014fb  00                DCB      0

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  4170706c          DCB      "Application uses deprecated png_read_init() and should "
000004  69636174
000008  696f6e20
00000c  75736573
000010  20646570
000014  72656361
000018  74656420
00001c  706e675f
000020  72656164
000024  5f696e69
000028  74282920
00002c  616e6420
000030  73686f75
000034  6c6420  
000037  62652072          DCB      "be recompiled.",0
00003b  65636f6d
00003f  70696c65
000043  642e00  
000046  00                DCB      0
000047  00                DCB      0
000048  54686520          DCB      "The png struct allocated by the application for reading"
00004c  706e6720
000050  73747275
000054  63742061
000058  6c6c6f63
00005c  61746564
000060  20627920
000064  74686520
000068  6170706c
00006c  69636174
000070  696f6e20
000074  666f7220
000078  72656164
00007c  696e67  
00007f  20697320          DCB      " is too small.",0
000083  746f6f20
000087  736d616c
00008b  6c2e00  
00008e  00                DCB      0
00008f  00                DCB      0
000090  54686520          DCB      "The info struct allocated by application for reading is"
000094  696e666f
000098  20737472
00009c  75637420
0000a0  616c6c6f
0000a4  63617465
0000a8  64206279
0000ac  20617070
0000b0  6c696361
0000b4  74696f6e
0000b8  20666f72
0000bc  20726561
0000c0  64696e67
0000c4  206973  
0000c7  20746f6f          DCB      " too small.",0
0000cb  20736d61
0000cf  6c6c2e00
0000d3  00                DCB      0
0000d4  49676e6f          DCB      "Ignoring extra png_read_update_info() call; row buffer "
0000d8  72696e67
0000dc  20657874
0000e0  72612070
0000e4  6e675f72
0000e8  6561645f
0000ec  75706461
0000f0  74655f69
0000f4  6e666f28
0000f8  29206361
0000fc  6c6c3b20
000100  726f7720
000104  62756666
000108  657220  
00010b  6e6f7420          DCB      "not reallocated",0
00010f  7265616c
000113  6c6f6361
000117  74656400
