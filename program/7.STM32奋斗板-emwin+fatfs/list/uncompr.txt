; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\uncompr.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\uncompr.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\FWlib\inc -I.\user -I.\CM3 -I.\MALLOC -I.\TFT -I.\EMWIN\EMWIN_INC -I.\EMWIN\DEMO -I.\FATFS -I.\SDIO -I.\PNG -IE:\material\GUI\STM32·Ü¶·°å-emwin+fatfs\RTE -Id:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.1.0\Device\Include -Id:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=515 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\uncompr.crf PNG\uncompr.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  uncompress PROC
;;;25     */
;;;26     int ZEXPORT uncompress (dest, destLen, source, sourceLen)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;27         Bytef *dest;
;;;28         uLongf *destLen;
;;;29         const Bytef *source;
;;;30         uLong sourceLen;
;;;31     {
000004  b08e              SUB      sp,sp,#0x38
000006  4607              MOV      r7,r0
000008  460d              MOV      r5,r1
00000a  4690              MOV      r8,r2
00000c  461e              MOV      r6,r3
;;;32         z_stream stream;
;;;33         int err;
;;;34     
;;;35         stream.next_in = (Bytef*)source;
00000e  f8cd8000          STR      r8,[sp,#0]
;;;36         stream.avail_in = (uInt)sourceLen;
000012  9601              STR      r6,[sp,#4]
;;;37         /* Check for source > 64K on 16-bit machine: */
;;;38         if ((uLong)stream.avail_in != sourceLen) return Z_BUF_ERROR;
000014  9801              LDR      r0,[sp,#4]
000016  42b0              CMP      r0,r6
000018  d004              BEQ      |L1.36|
00001a  f06f0004          MVN      r0,#4
                  |L1.30|
;;;39     
;;;40         stream.next_out = dest;
;;;41         stream.avail_out = (uInt)*destLen;
;;;42         if ((uLong)stream.avail_out != *destLen) return Z_BUF_ERROR;
;;;43     
;;;44         stream.zalloc = (alloc_func)0;
;;;45         stream.zfree = (free_func)0;
;;;46     
;;;47         err = inflateInit(&stream);
;;;48         if (err != Z_OK) return err;
;;;49     
;;;50         err = inflate(&stream, Z_FINISH);
;;;51         if (err != Z_STREAM_END) {
;;;52             inflateEnd(&stream);
;;;53             if (err == Z_NEED_DICT || (err == Z_BUF_ERROR && stream.avail_in == 0))
;;;54                 return Z_DATA_ERROR;
;;;55             return err;
;;;56         }
;;;57         *destLen = stream.total_out;
;;;58     
;;;59         err = inflateEnd(&stream);
;;;60         return err;
;;;61     }
00001e  b00e              ADD      sp,sp,#0x38
000020  e8bd81f0          POP      {r4-r8,pc}
                  |L1.36|
000024  9703              STR      r7,[sp,#0xc]          ;40
000026  6828              LDR      r0,[r5,#0]            ;41
000028  9004              STR      r0,[sp,#0x10]         ;41
00002a  9804              LDR      r0,[sp,#0x10]         ;42
00002c  6829              LDR      r1,[r5,#0]            ;42
00002e  4288              CMP      r0,r1                 ;42
000030  d002              BEQ      |L1.56|
000032  f06f0004          MVN      r0,#4                 ;42
000036  e7f2              B        |L1.30|
                  |L1.56|
000038  2000              MOVS     r0,#0                 ;44
00003a  9008              STR      r0,[sp,#0x20]         ;44
00003c  9009              STR      r0,[sp,#0x24]         ;45
00003e  2238              MOVS     r2,#0x38              ;47
000040  a112              ADR      r1,|L1.140|
000042  4668              MOV      r0,sp                 ;47
000044  f7fffffe          BL       inflateInit_
000048  4604              MOV      r4,r0                 ;47
00004a  b10c              CBZ      r4,|L1.80|
00004c  4620              MOV      r0,r4                 ;48
00004e  e7e6              B        |L1.30|
                  |L1.80|
000050  2104              MOVS     r1,#4                 ;50
000052  4668              MOV      r0,sp                 ;50
000054  f7fffffe          BL       inflate
000058  4604              MOV      r4,r0                 ;50
00005a  2c01              CMP      r4,#1                 ;51
00005c  d00d              BEQ      |L1.122|
00005e  4668              MOV      r0,sp                 ;52
000060  f7fffffe          BL       inflateEnd
000064  2c02              CMP      r4,#2                 ;53
000066  d003              BEQ      |L1.112|
000068  1d60              ADDS     r0,r4,#5              ;53
00006a  b920              CBNZ     r0,|L1.118|
00006c  9801              LDR      r0,[sp,#4]            ;53
00006e  b910              CBNZ     r0,|L1.118|
                  |L1.112|
000070  f06f0002          MVN      r0,#2                 ;54
000074  e7d3              B        |L1.30|
                  |L1.118|
000076  4620              MOV      r0,r4                 ;55
000078  e7d1              B        |L1.30|
                  |L1.122|
00007a  9805              LDR      r0,[sp,#0x14]         ;57
00007c  6028              STR      r0,[r5,#0]            ;57
00007e  4668              MOV      r0,sp                 ;59
000080  f7fffffe          BL       inflateEnd
000084  4604              MOV      r4,r0                 ;59
000086  4620              MOV      r0,r4                 ;60
000088  e7c9              B        |L1.30|
                          ENDP

00008a  0000              DCW      0x0000
                  |L1.140|
00008c  312e322e          DCB      "1.2.3",0
000090  3300    
000092  00                DCB      0
000093  00                DCB      0
