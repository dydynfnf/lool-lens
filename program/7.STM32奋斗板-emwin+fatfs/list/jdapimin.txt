; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\jdapimin.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\jdapimin.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -I.\GUI\AntiAlias -I.\GUI\Config -I.\GUI\ConvertColor -I.\GUI\ConvertMono -I.\GUI\Core -I.\GUI\Font -I.\GUI\GUI_X -I.\GUI\JPEG -I.\GUI\LCDDriver -I.\GUI\MemDev -I.\GUI\MultiLayer -I.\GUI\Widget -I.\GUI\WM -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\INC\ST\STM32F10x -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\jdapimin.crf GUI\JPEG\jdapimin.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  jpeg_CreateDecompress PROC
;;;29     GLOBAL(void)
;;;30     jpeg_CreateDecompress (j_decompress_ptr cinfo, int version, size_t structsize)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;31     {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;32       int i;
;;;33     
;;;34       /* Guard against version mismatches between library and caller. */
;;;35       cinfo->mem = NULL;		/* so jpeg_destroy knows mem mgr not called */
00000a  f04f0000          MOV      r0,#0
00000e  6060              STR      r0,[r4,#4]
;;;36       if (version != JPEG_LIB_VERSION)
000010  2e3e              CMP      r6,#0x3e
000012  d00d              BEQ      |L1.48|
;;;37         ERREXIT2(cinfo, JERR_BAD_LIB_VERSION, JPEG_LIB_VERSION, version);
000014  f04f000c          MOV      r0,#0xc
000018  6821              LDR      r1,[r4,#0]
00001a  6148              STR      r0,[r1,#0x14]
00001c  f04f003e          MOV      r0,#0x3e
000020  6821              LDR      r1,[r4,#0]
000022  6188              STR      r0,[r1,#0x18]
000024  6820              LDR      r0,[r4,#0]
000026  61c6              STR      r6,[r0,#0x1c]
000028  6820              LDR      r0,[r4,#0]
00002a  6801              LDR      r1,[r0,#0]
00002c  4620              MOV      r0,r4
00002e  4788              BLX      r1
                  |L1.48|
;;;38       if (structsize != SIZEOF(struct jpeg_decompress_struct))
000030  f5b77fe8          CMP      r7,#0x1d0
000034  d00d              BEQ      |L1.82|
;;;39         ERREXIT2(cinfo, JERR_BAD_STRUCT_SIZE, 
000036  f04f0015          MOV      r0,#0x15
00003a  6821              LDR      r1,[r4,#0]
00003c  6148              STR      r0,[r1,#0x14]
00003e  f44f70e8          MOV      r0,#0x1d0
000042  6821              LDR      r1,[r4,#0]
000044  6188              STR      r0,[r1,#0x18]
000046  6820              LDR      r0,[r4,#0]
000048  61c7              STR      r7,[r0,#0x1c]
00004a  6820              LDR      r0,[r4,#0]
00004c  6801              LDR      r1,[r0,#0]
00004e  4620              MOV      r0,r4
000050  4788              BLX      r1
                  |L1.82|
;;;40     	     (int) SIZEOF(struct jpeg_decompress_struct), (int) structsize);
;;;41     
;;;42       /* For debugging purposes, we zero the whole master structure.
;;;43        * But the application has already set the err pointer, and may have set
;;;44        * client_data, so we have to save and restore those fields.
;;;45        * Note: if application hasn't set client_data, tools like Purify may
;;;46        * complain here.
;;;47        */
;;;48       {
;;;49         struct jpeg_error_mgr * err = cinfo->err;
000052  f8d48000          LDR      r8,[r4,#0]
;;;50         void * client_data = cinfo->client_data; /* ignore Purify complaint here */
000056  f8d4900c          LDR      r9,[r4,#0xc]
;;;51         MEMZERO(cinfo, SIZEOF(struct jpeg_decompress_struct));
00005a  f44f71e8          MOV      r1,#0x1d0
00005e  4620              MOV      r0,r4
000060  f7fffffe          BL       __aeabi_memclr4
;;;52         cinfo->err = err;
000064  f8c48000          STR      r8,[r4,#0]
;;;53         cinfo->client_data = client_data;
000068  f8c4900c          STR      r9,[r4,#0xc]
;;;54       }
;;;55       cinfo->is_decompressor = TRUE;
00006c  f04f0001          MOV      r0,#1
000070  6120              STR      r0,[r4,#0x10]
;;;56     
;;;57       /* Initialize a memory manager instance for this object */
;;;58       jinit_memory_mgr((j_common_ptr) cinfo);
000072  4620              MOV      r0,r4
000074  f7fffffe          BL       jinit_memory_mgr
;;;59     
;;;60       /* Zero out pointers to permanent structures. */
;;;61       cinfo->progress = NULL;
000078  f04f0000          MOV      r0,#0
00007c  60a0              STR      r0,[r4,#8]
;;;62       cinfo->src = NULL;
00007e  61a0              STR      r0,[r4,#0x18]
;;;63     
;;;64       for (i = 0; i < NUM_QUANT_TBLS; i++)
000080  4605              MOV      r5,r0
000082  e007              B        |L1.148|
                  |L1.132|
;;;65         cinfo->quant_tbl_ptrs[i] = NULL;
000084  f04f0100          MOV      r1,#0
000088  f10400a4          ADD      r0,r4,#0xa4
00008c  f8401025          STR      r1,[r0,r5,LSL #2]
000090  f1050501          ADD      r5,r5,#1              ;64
                  |L1.148|
000094  2d04              CMP      r5,#4                 ;64
000096  dbf5              BLT      |L1.132|
;;;66     
;;;67       for (i = 0; i < NUM_HUFF_TBLS; i++) {
000098  f04f0500          MOV      r5,#0
00009c  e00b              B        |L1.182|
                  |L1.158|
;;;68         cinfo->dc_huff_tbl_ptrs[i] = NULL;
00009e  f04f0100          MOV      r1,#0
0000a2  f10400b4          ADD      r0,r4,#0xb4
0000a6  f8401025          STR      r1,[r0,r5,LSL #2]
;;;69         cinfo->ac_huff_tbl_ptrs[i] = NULL;
0000aa  f10400c4          ADD      r0,r4,#0xc4
0000ae  f8401025          STR      r1,[r0,r5,LSL #2]
0000b2  f1050501          ADD      r5,r5,#1              ;67
                  |L1.182|
0000b6  2d04              CMP      r5,#4                 ;67
0000b8  dbf1              BLT      |L1.158|
;;;70       }
;;;71     
;;;72       /* Initialize marker processor so application can override methods
;;;73        * for COM, APPn markers before calling jpeg_read_header.
;;;74        */
;;;75       cinfo->marker_list = NULL;
0000ba  f04f0000          MOV      r0,#0
0000be  f8c40130          STR      r0,[r4,#0x130]
;;;76       jinit_marker_reader(cinfo);
0000c2  4620              MOV      r0,r4
0000c4  f7fffffe          BL       jinit_marker_reader
;;;77     
;;;78       /* And initialize the overall input controller. */
;;;79       jinit_input_controller(cinfo);
0000c8  4620              MOV      r0,r4
0000ca  f7fffffe          BL       jinit_input_controller
;;;80     
;;;81       /* OK, I'm ready */
;;;82       cinfo->global_state = DSTATE_START;
0000ce  f04f00c8          MOV      r0,#0xc8
0000d2  6160              STR      r0,[r4,#0x14]
;;;83     }
0000d4  e8bd87f0          POP      {r4-r10,pc}
;;;84     
                          ENDP

                  jpeg_destroy_decompress PROC
;;;90     GLOBAL(void)
;;;91     jpeg_destroy_decompress (j_decompress_ptr cinfo)
0000d8  b510              PUSH     {r4,lr}
;;;92     {
0000da  4604              MOV      r4,r0
;;;93       jpeg_destroy((j_common_ptr) cinfo); /* use common routine */
0000dc  4620              MOV      r0,r4
0000de  f7fffffe          BL       jpeg_destroy
;;;94     }
0000e2  bd10              POP      {r4,pc}
;;;95     
                          ENDP

                  jpeg_abort_decompress PROC
;;;102    GLOBAL(void)
;;;103    jpeg_abort_decompress (j_decompress_ptr cinfo)
0000e4  b510              PUSH     {r4,lr}
;;;104    {
0000e6  4604              MOV      r4,r0
;;;105      jpeg_abort((j_common_ptr) cinfo); /* use common routine */
0000e8  4620              MOV      r0,r4
0000ea  f7fffffe          BL       jpeg_abort
;;;106    }
0000ee  bd10              POP      {r4,pc}
;;;107    
                          ENDP

                  default_decompress_parms PROC
;;;113    LOCAL(void)
;;;114    default_decompress_parms (j_decompress_ptr cinfo)
0000f0  e92d41f0          PUSH     {r4-r8,lr}
;;;115    {
0000f4  4604              MOV      r4,r0
;;;116      /* Guess the input colorspace, and set output colorspace accordingly. */
;;;117      /* (Wish JPEG committee had provided a real way to specify this...) */
;;;118      /* Note application may override our guesses. */
;;;119      switch (cinfo->num_components) {
0000f6  6a60              LDR      r0,[r4,#0x24]
0000f8  2801              CMP      r0,#1
0000fa  d004              BEQ      |L1.262|
0000fc  2803              CMP      r0,#3
0000fe  d009              BEQ      |L1.276|
000100  2804              CMP      r0,#4
000102  d174              BNE      |L1.494|
000104  e074              B        |L1.496|
                  |L1.262|
;;;120      case 1:
;;;121        cinfo->jpeg_color_space = JCS_GRAYSCALE;
000106  f04f0001          MOV      r0,#1
00010a  f8840028          STRB     r0,[r4,#0x28]
;;;122        cinfo->out_color_space = JCS_GRAYSCALE;
00010e  f8840029          STRB     r0,[r4,#0x29]
;;;123        break;
000112  e0a4              B        |L1.606|
                  |L1.276|
;;;124        
;;;125      case 3:
;;;126        if (cinfo->saw_JFIF_marker) {
000114  f8d40118          LDR      r0,[r4,#0x118]
000118  b120              CBZ      r0,|L1.292|
;;;127          cinfo->jpeg_color_space = JCS_YCbCr; /* JFIF implies YCbCr */
00011a  f04f0003          MOV      r0,#3
00011e  f8840028          STRB     r0,[r4,#0x28]
000122  e05f              B        |L1.484|
                  |L1.292|
;;;128        } else if (cinfo->saw_Adobe_marker) {
000124  f8d40124          LDR      r0,[r4,#0x124]
000128  b318              CBZ      r0,|L1.370|
;;;129          switch (cinfo->Adobe_transform) {
00012a  f8940128          LDRB     r0,[r4,#0x128]
00012e  b110              CBZ      r0,|L1.310|
000130  2801              CMP      r0,#1
000132  d10a              BNE      |L1.330|
000134  e004              B        |L1.320|
                  |L1.310|
;;;130          case 0:
;;;131    	cinfo->jpeg_color_space = JCS_RGB;
000136  f04f0002          MOV      r0,#2
00013a  f8840028          STRB     r0,[r4,#0x28]
;;;132    	break;
00013e  e017              B        |L1.368|
                  |L1.320|
;;;133          case 1:
;;;134    	cinfo->jpeg_color_space = JCS_YCbCr;
000140  f04f0003          MOV      r0,#3
000144  f8840028          STRB     r0,[r4,#0x28]
;;;135    	break;
000148  e012              B        |L1.368|
                  |L1.330|
;;;136          default:
;;;137    	WARNMS1(cinfo, JWRN_ADOBE_XFORM, cinfo->Adobe_transform);
00014a  f04f0072          MOV      r0,#0x72
00014e  6821              LDR      r1,[r4,#0]
000150  6148              STR      r0,[r1,#0x14]
000152  f8940128          LDRB     r0,[r4,#0x128]
000156  6821              LDR      r1,[r4,#0]
000158  6188              STR      r0,[r1,#0x18]
00015a  6820              LDR      r0,[r4,#0]
00015c  f04f31ff          MOV      r1,#0xffffffff
000160  6842              LDR      r2,[r0,#4]
000162  4620              MOV      r0,r4
000164  4790              BLX      r2
;;;138    	cinfo->jpeg_color_space = JCS_YCbCr; /* assume it's YCbCr */
000166  f04f0003          MOV      r0,#3
00016a  f8840028          STRB     r0,[r4,#0x28]
;;;139    	break;
00016e  bf00              NOP      
                  |L1.368|
000170  e038              B        |L1.484|
                  |L1.370|
;;;140          }
;;;141        } else {
;;;142          /* Saw no special markers, try to guess from the component IDs */
;;;143          int cid0 = cinfo->comp_info[0].component_id;
000172  f8540fd8          LDR      r0,[r4,#0xd8]!
000176  6805              LDR      r5,[r0,#0]
;;;144          int cid1 = cinfo->comp_info[1].component_id;
000178  6820              LDR      r0,[r4,#0]
00017a  6d46              LDR      r6,[r0,#0x54]
;;;145          int cid2 = cinfo->comp_info[2].component_id;
00017c  f85409d8          LDR      r0,[r4],#-0xd8
000180  f8d070a8          LDR      r7,[r0,#0xa8]
;;;146    
;;;147          if (cid0 == 1 && cid1 == 2 && cid2 == 3)
000184  2d01              CMP      r5,#1
000186  d108              BNE      |L1.410|
000188  2e02              CMP      r6,#2
00018a  d106              BNE      |L1.410|
00018c  2f03              CMP      r7,#3
00018e  d104              BNE      |L1.410|
;;;148    	cinfo->jpeg_color_space = JCS_YCbCr; /* assume JFIF w/out marker */
000190  f04f0003          MOV      r0,#3
000194  f8840028          STRB     r0,[r4,#0x28]
000198  e023              B        |L1.482|
                  |L1.410|
;;;149          else if (cid0 == 82 && cid1 == 71 && cid2 == 66)
00019a  2d52              CMP      r5,#0x52
00019c  d108              BNE      |L1.432|
00019e  2e47              CMP      r6,#0x47
0001a0  d106              BNE      |L1.432|
0001a2  2f42              CMP      r7,#0x42
0001a4  d104              BNE      |L1.432|
;;;150    	cinfo->jpeg_color_space = JCS_RGB; /* ASCII 'R', 'G', 'B' */
0001a6  f04f0002          MOV      r0,#2
0001aa  f8840028          STRB     r0,[r4,#0x28]
0001ae  e018              B        |L1.482|
                  |L1.432|
;;;151          else {
;;;152    	TRACEMS3(cinfo, 1, JTRC_UNKNOWN_IDS, cid0, cid1, cid2);
0001b0  bf00              NOP      
0001b2  6820              LDR      r0,[r4,#0]
0001b4  f1000818          ADD      r8,r0,#0x18
0001b8  f8c85000          STR      r5,[r8,#0]
0001bc  f8c86004          STR      r6,[r8,#4]
0001c0  f8c87008          STR      r7,[r8,#8]
0001c4  f04f006f          MOV      r0,#0x6f
0001c8  6821              LDR      r1,[r4,#0]
0001ca  6148              STR      r0,[r1,#0x14]
0001cc  6820              LDR      r0,[r4,#0]
0001ce  f04f0101          MOV      r1,#1
0001d2  6842              LDR      r2,[r0,#4]
0001d4  4620              MOV      r0,r4
0001d6  4790              BLX      r2
0001d8  bf00              NOP      
;;;153    	cinfo->jpeg_color_space = JCS_YCbCr; /* assume it's YCbCr */
0001da  f04f0003          MOV      r0,#3
0001de  f8840028          STRB     r0,[r4,#0x28]
                  |L1.482|
;;;154          }
;;;155        }
0001e2  bf00              NOP      
                  |L1.484|
;;;156        /* Always guess RGB is proper output colorspace. */
;;;157        cinfo->out_color_space = JCS_RGB;
0001e4  f04f0002          MOV      r0,#2
0001e8  f8840029          STRB     r0,[r4,#0x29]
;;;158        break;
0001ec  e037              B        |L1.606|
                  |L1.494|
0001ee  e02f              B        |L1.592|
                  |L1.496|
;;;159        
;;;160      case 4:
;;;161        if (cinfo->saw_Adobe_marker) {
0001f0  f8d40124          LDR      r0,[r4,#0x124]
0001f4  b318              CBZ      r0,|L1.574|
;;;162          switch (cinfo->Adobe_transform) {
0001f6  f8940128          LDRB     r0,[r4,#0x128]
0001fa  b110              CBZ      r0,|L1.514|
0001fc  2802              CMP      r0,#2
0001fe  d10a              BNE      |L1.534|
000200  e004              B        |L1.524|
                  |L1.514|
;;;163          case 0:
;;;164    	cinfo->jpeg_color_space = JCS_CMYK;
000202  f04f0004          MOV      r0,#4
000206  f8840028          STRB     r0,[r4,#0x28]
;;;165    	break;
00020a  e017              B        |L1.572|
                  |L1.524|
;;;166          case 2:
;;;167    	cinfo->jpeg_color_space = JCS_YCCK;
00020c  f04f0005          MOV      r0,#5
000210  f8840028          STRB     r0,[r4,#0x28]
;;;168    	break;
000214  e012              B        |L1.572|
                  |L1.534|
;;;169          default:
;;;170    	WARNMS1(cinfo, JWRN_ADOBE_XFORM, cinfo->Adobe_transform);
000216  f04f0072          MOV      r0,#0x72
00021a  6821              LDR      r1,[r4,#0]
00021c  6148              STR      r0,[r1,#0x14]
00021e  f8940128          LDRB     r0,[r4,#0x128]
000222  6821              LDR      r1,[r4,#0]
000224  6188              STR      r0,[r1,#0x18]
000226  6820              LDR      r0,[r4,#0]
000228  f04f31ff          MOV      r1,#0xffffffff
00022c  6842              LDR      r2,[r0,#4]
00022e  4620              MOV      r0,r4
000230  4790              BLX      r2
;;;171    	cinfo->jpeg_color_space = JCS_YCCK; /* assume it's YCCK */
000232  f04f0005          MOV      r0,#5
000236  f8840028          STRB     r0,[r4,#0x28]
;;;172    	break;
00023a  bf00              NOP      
                  |L1.572|
00023c  e003              B        |L1.582|
                  |L1.574|
;;;173          }
;;;174        } else {
;;;175          /* No special markers, assume straight CMYK. */
;;;176          cinfo->jpeg_color_space = JCS_CMYK;
00023e  f04f0004          MOV      r0,#4
000242  f8840028          STRB     r0,[r4,#0x28]
                  |L1.582|
;;;177        }
;;;178        cinfo->out_color_space = JCS_CMYK;
000246  f04f0004          MOV      r0,#4
00024a  f8840029          STRB     r0,[r4,#0x29]
;;;179        break;
00024e  e006              B        |L1.606|
                  |L1.592|
;;;180        
;;;181      default:
;;;182        cinfo->jpeg_color_space = JCS_UNKNOWN;
000250  f04f0000          MOV      r0,#0
000254  f8840028          STRB     r0,[r4,#0x28]
;;;183        cinfo->out_color_space = JCS_UNKNOWN;
000258  f8840029          STRB     r0,[r4,#0x29]
;;;184        break;
00025c  bf00              NOP      
                  |L1.606|
00025e  bf00              NOP                            ;123
;;;185      }
;;;186    
;;;187      /* Set defaults for other decompression parameters. */
;;;188      cinfo->scale_num = 1;		/* 1:1 scaling */
000260  f04f0001          MOV      r0,#1
000264  62e0              STR      r0,[r4,#0x2c]
;;;189      cinfo->scale_denom = 1;
000266  6320              STR      r0,[r4,#0x30]
;;;190      cinfo->output_gamma = 1.0;
000268  f04f0100          MOV      r1,#0
00026c  488e              LDR      r0,|L1.1192|
00026e  e9c4100e          STRD     r1,r0,[r4,#0x38]
;;;191      cinfo->buffered_image = FALSE;
000272  f04f0000          MOV      r0,#0
000276  6420              STR      r0,[r4,#0x40]
;;;192      cinfo->raw_data_out = FALSE;
000278  6460              STR      r0,[r4,#0x44]
;;;193      cinfo->dct_method = JDCT_DEFAULT;
00027a  f8840048          STRB     r0,[r4,#0x48]
;;;194      cinfo->do_fancy_upsampling = TRUE;
00027e  f04f0001          MOV      r0,#1
000282  64e0              STR      r0,[r4,#0x4c]
;;;195      cinfo->do_block_smoothing = TRUE;
000284  6520              STR      r0,[r4,#0x50]
;;;196      cinfo->quantize_colors = FALSE;
000286  f04f0000          MOV      r0,#0
00028a  6560              STR      r0,[r4,#0x54]
;;;197      /* We set these in case application only sets quantize_colors. */
;;;198      cinfo->dither_mode = JDITHER_FS;
00028c  f04f0002          MOV      r0,#2
000290  f8840058          STRB     r0,[r4,#0x58]
;;;199    #ifdef QUANT_2PASS_SUPPORTED
;;;200      cinfo->two_pass_quantize = TRUE;
000294  f04f0001          MOV      r0,#1
000298  65e0              STR      r0,[r4,#0x5c]
;;;201    #else
;;;202      cinfo->two_pass_quantize = FALSE;
;;;203    #endif
;;;204      cinfo->desired_number_of_colors = 256;
00029a  f44f7080          MOV      r0,#0x100
00029e  6620              STR      r0,[r4,#0x60]
;;;205      cinfo->colormap = NULL;
0002a0  f04f0000          MOV      r0,#0
0002a4  f8c40088          STR      r0,[r4,#0x88]
;;;206      /* Initialize for no mode change in buffered-image mode. */
;;;207      cinfo->enable_1pass_quant = FALSE;
0002a8  6660              STR      r0,[r4,#0x64]
;;;208      cinfo->enable_external_quant = FALSE;
0002aa  66a0              STR      r0,[r4,#0x68]
;;;209      cinfo->enable_2pass_quant = FALSE;
0002ac  66e0              STR      r0,[r4,#0x6c]
;;;210    }
0002ae  e8bd81f0          POP      {r4-r8,pc}
;;;211    
                          ENDP

                  jpeg_consume_input PROC
;;;286    GLOBAL(int)
;;;287    jpeg_consume_input (j_decompress_ptr cinfo)
0002b2  b570              PUSH     {r4-r6,lr}
;;;288    {
0002b4  4604              MOV      r4,r0
;;;289      int retcode = JPEG_SUSPENDED;
0002b6  f04f0500          MOV      r5,#0
;;;290    
;;;291      /* NB: every possible DSTATE value should be listed in this switch */
;;;292      switch (cinfo->global_state) {
0002ba  6960              LDR      r0,[r4,#0x14]
0002bc  f1a000c8          SUB      r0,r0,#0xc8
0002c0  280b              CMP      r0,#0xb
0002c2  d233              BCS      |L1.812|
0002c4  e8dff000          TBB      [pc,r0]
0002c8  06132225          DCB      0x06,0x13,0x22,0x25
0002cc  26272829          DCB      0x26,0x27,0x28,0x29
0002d0  2a322b00          DCB      0x2a,0x32,0x2b,0x00
;;;293      case DSTATE_START:
;;;294        /* Start-of-datastream actions: reset appropriate modules */
;;;295        (*cinfo->inputctl->reset_input_controller) (cinfo);
0002d4  f8d401b4          LDR      r0,[r4,#0x1b4]
0002d8  6841              LDR      r1,[r0,#4]
0002da  4620              MOV      r0,r4
0002dc  4788              BLX      r1
;;;296        /* Initialize application's data source module */
;;;297        (*cinfo->src->init_source) (cinfo);
0002de  69a0              LDR      r0,[r4,#0x18]
0002e0  6881              LDR      r1,[r0,#8]
0002e2  4620              MOV      r0,r4
0002e4  4788              BLX      r1
;;;298        cinfo->global_state = DSTATE_INHEADER;
0002e6  f04f00c9          MOV      r0,#0xc9
0002ea  6160              STR      r0,[r4,#0x14]
;;;299        /*FALLTHROUGH*/
;;;300      case DSTATE_INHEADER:
0002ec  bf00              NOP      
;;;301        retcode = (*cinfo->inputctl->consume_input) (cinfo);
0002ee  f8d401b4          LDR      r0,[r4,#0x1b4]
0002f2  6801              LDR      r1,[r0,#0]
0002f4  4620              MOV      r0,r4
0002f6  4788              BLX      r1
0002f8  4605              MOV      r5,r0
;;;302        if (retcode == JPEG_REACHED_SOS) { /* Found SOS, prepare to decompress */
0002fa  2d01              CMP      r5,#1
0002fc  d105              BNE      |L1.778|
;;;303          /* Set up default parameters based on header data */
;;;304          default_decompress_parms(cinfo);
0002fe  4620              MOV      r0,r4
000300  f7fffffe          BL       default_decompress_parms
;;;305          /* Set global state: ready for start_decompress */
;;;306          cinfo->global_state = DSTATE_READY;
000304  f04f00ca          MOV      r0,#0xca
000308  6160              STR      r0,[r4,#0x14]
                  |L1.778|
;;;307        }
;;;308        break;
00030a  e01b              B        |L1.836|
;;;309      case DSTATE_READY:
;;;310        /* Can't advance past first SOS until start_decompress is called */
;;;311        retcode = JPEG_REACHED_SOS;
00030c  f04f0501          MOV      r5,#1
;;;312        break;
000310  e018              B        |L1.836|
;;;313      case DSTATE_PRELOAD:
;;;314      case DSTATE_PRESCAN:
000312  bf00              NOP      
;;;315      case DSTATE_SCANNING:
000314  bf00              NOP      
;;;316      case DSTATE_RAW_OK:
000316  bf00              NOP      
;;;317      case DSTATE_BUFIMAGE:
000318  bf00              NOP      
;;;318      case DSTATE_BUFPOST:
00031a  bf00              NOP      
;;;319      case DSTATE_STOPPING:
00031c  bf00              NOP      
;;;320        retcode = (*cinfo->inputctl->consume_input) (cinfo);
00031e  f8d401b4          LDR      r0,[r4,#0x1b4]
000322  6801              LDR      r1,[r0,#0]
000324  4620              MOV      r0,r4
000326  4788              BLX      r1
000328  4605              MOV      r5,r0
;;;321        break;
00032a  e00b              B        |L1.836|
                  |L1.812|
;;;322      default:
;;;323        ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
00032c  f04f0014          MOV      r0,#0x14
000330  6821              LDR      r1,[r4,#0]
000332  6148              STR      r0,[r1,#0x14]
000334  6821              LDR      r1,[r4,#0]
000336  6960              LDR      r0,[r4,#0x14]
000338  6188              STR      r0,[r1,#0x18]
00033a  6820              LDR      r0,[r4,#0]
00033c  6801              LDR      r1,[r0,#0]
00033e  4620              MOV      r0,r4
000340  4788              BLX      r1
000342  bf00              NOP                            ;292
                  |L1.836|
000344  bf00              NOP                            ;308
;;;324      }
;;;325      return retcode;
000346  4628              MOV      r0,r5
;;;326    }
000348  bd70              POP      {r4-r6,pc}
;;;327    
                          ENDP

                  jpeg_read_header PROC
;;;240    GLOBAL(int)
;;;241    jpeg_read_header (j_decompress_ptr cinfo, boolean require_image)
00034a  b570              PUSH     {r4-r6,lr}
;;;242    {
00034c  4604              MOV      r4,r0
00034e  460e              MOV      r6,r1
;;;243      int retcode;
;;;244    
;;;245      if (cinfo->global_state != DSTATE_START &&
000350  6960              LDR      r0,[r4,#0x14]
000352  28c8              CMP      r0,#0xc8
000354  d00d              BEQ      |L1.882|
;;;246          cinfo->global_state != DSTATE_INHEADER)
000356  6960              LDR      r0,[r4,#0x14]
000358  28c9              CMP      r0,#0xc9
00035a  d00a              BEQ      |L1.882|
;;;247        ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
00035c  f04f0014          MOV      r0,#0x14
000360  6821              LDR      r1,[r4,#0]
000362  6148              STR      r0,[r1,#0x14]
000364  6821              LDR      r1,[r4,#0]
000366  6960              LDR      r0,[r4,#0x14]
000368  6188              STR      r0,[r1,#0x18]
00036a  6820              LDR      r0,[r4,#0]
00036c  6801              LDR      r1,[r0,#0]
00036e  4620              MOV      r0,r4
000370  4788              BLX      r1
                  |L1.882|
;;;248    
;;;249      retcode = jpeg_consume_input(cinfo);
000372  4620              MOV      r0,r4
000374  f7fffffe          BL       jpeg_consume_input
000378  4605              MOV      r5,r0
;;;250    
;;;251      switch (retcode) {
00037a  b1b5              CBZ      r5,|L1.938|
00037c  2d01              CMP      r5,#1
00037e  d002              BEQ      |L1.902|
000380  2d02              CMP      r5,#2
000382  d113              BNE      |L1.940|
000384  e002              B        |L1.908|
                  |L1.902|
;;;252      case JPEG_REACHED_SOS:
;;;253        retcode = JPEG_HEADER_OK;
000386  f04f0501          MOV      r5,#1
;;;254        break;
00038a  e00f              B        |L1.940|
                  |L1.908|
;;;255      case JPEG_REACHED_EOI:
;;;256        if (require_image)		/* Complain if application wanted an image */
00038c  b13e              CBZ      r6,|L1.926|
;;;257          ERREXIT(cinfo, JERR_NO_IMAGE);
00038e  f04f0033          MOV      r0,#0x33
000392  6821              LDR      r1,[r4,#0]
000394  6148              STR      r0,[r1,#0x14]
000396  6820              LDR      r0,[r4,#0]
000398  6801              LDR      r1,[r0,#0]
00039a  4620              MOV      r0,r4
00039c  4788              BLX      r1
                  |L1.926|
;;;258        /* Reset to start state; it would be safer to require the application to
;;;259         * call jpeg_abort, but we can't change it now for compatibility reasons.
;;;260         * A side effect is to free any temporary memory (there shouldn't be any).
;;;261         */
;;;262        jpeg_abort((j_common_ptr) cinfo); /* sets state = DSTATE_START */
00039e  4620              MOV      r0,r4
0003a0  f7fffffe          BL       jpeg_abort
;;;263        retcode = JPEG_HEADER_TABLES_ONLY;
0003a4  f04f0502          MOV      r5,#2
;;;264        break;
0003a8  e000              B        |L1.940|
                  |L1.938|
;;;265      case JPEG_SUSPENDED:
;;;266        /* no work */
;;;267        break;
0003aa  bf00              NOP      
                  |L1.940|
0003ac  bf00              NOP                            ;254
;;;268      }
;;;269    
;;;270      return retcode;
0003ae  4628              MOV      r0,r5
;;;271    }
0003b0  bd70              POP      {r4-r6,pc}
;;;272    
                          ENDP

                  jpeg_input_complete PROC
;;;333    GLOBAL(boolean)
;;;334    jpeg_input_complete (j_decompress_ptr cinfo)
0003b2  b510              PUSH     {r4,lr}
;;;335    {
0003b4  4604              MOV      r4,r0
;;;336      /* Check for valid jpeg object */
;;;337      if (cinfo->global_state < DSTATE_START ||
0003b6  6960              LDR      r0,[r4,#0x14]
0003b8  28c8              CMP      r0,#0xc8
0003ba  db02              BLT      |L1.962|
;;;338          cinfo->global_state > DSTATE_STOPPING)
0003bc  6960              LDR      r0,[r4,#0x14]
0003be  28d2              CMP      r0,#0xd2
0003c0  dd0a              BLE      |L1.984|
                  |L1.962|
;;;339        ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
0003c2  f04f0014          MOV      r0,#0x14
0003c6  6821              LDR      r1,[r4,#0]
0003c8  6148              STR      r0,[r1,#0x14]
0003ca  6821              LDR      r1,[r4,#0]
0003cc  6960              LDR      r0,[r4,#0x14]
0003ce  6188              STR      r0,[r1,#0x18]
0003d0  6820              LDR      r0,[r4,#0]
0003d2  6801              LDR      r1,[r0,#0]
0003d4  4620              MOV      r0,r4
0003d6  4788              BLX      r1
                  |L1.984|
;;;340      return cinfo->inputctl->eoi_reached;
0003d8  f8d401b4          LDR      r0,[r4,#0x1b4]
0003dc  6940              LDR      r0,[r0,#0x14]
;;;341    }
0003de  bd10              POP      {r4,pc}
;;;342    
                          ENDP

                  jpeg_has_multiple_scans PROC
;;;348    GLOBAL(boolean)
;;;349    jpeg_has_multiple_scans (j_decompress_ptr cinfo)
0003e0  b510              PUSH     {r4,lr}
;;;350    {
0003e2  4604              MOV      r4,r0
;;;351      /* Only valid after jpeg_read_header completes */
;;;352      if (cinfo->global_state < DSTATE_READY ||
0003e4  6960              LDR      r0,[r4,#0x14]
0003e6  28ca              CMP      r0,#0xca
0003e8  db02              BLT      |L1.1008|
;;;353          cinfo->global_state > DSTATE_STOPPING)
0003ea  6960              LDR      r0,[r4,#0x14]
0003ec  28d2              CMP      r0,#0xd2
0003ee  dd0a              BLE      |L1.1030|
                  |L1.1008|
;;;354        ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
0003f0  f04f0014          MOV      r0,#0x14
0003f4  6821              LDR      r1,[r4,#0]
0003f6  6148              STR      r0,[r1,#0x14]
0003f8  6821              LDR      r1,[r4,#0]
0003fa  6960              LDR      r0,[r4,#0x14]
0003fc  6188              STR      r0,[r1,#0x18]
0003fe  6820              LDR      r0,[r4,#0]
000400  6801              LDR      r1,[r0,#0]
000402  4620              MOV      r0,r4
000404  4788              BLX      r1
                  |L1.1030|
;;;355      return cinfo->inputctl->has_multiple_scans;
000406  f8d401b4          LDR      r0,[r4,#0x1b4]
00040a  6900              LDR      r0,[r0,#0x10]
;;;356    }
00040c  bd10              POP      {r4,pc}
;;;357    
                          ENDP

                  jpeg_finish_decompress PROC
;;;368    GLOBAL(boolean)
;;;369    jpeg_finish_decompress (j_decompress_ptr cinfo)
00040e  b510              PUSH     {r4,lr}
;;;370    {
000410  4604              MOV      r4,r0
;;;371      if ((cinfo->global_state == DSTATE_SCANNING ||
000412  6960              LDR      r0,[r4,#0x14]
000414  28cd              CMP      r0,#0xcd
000416  d002              BEQ      |L1.1054|
;;;372           cinfo->global_state == DSTATE_RAW_OK) && ! cinfo->buffered_image) {
000418  6960              LDR      r0,[r4,#0x14]
00041a  28ce              CMP      r0,#0xce
00041c  d117              BNE      |L1.1102|
                  |L1.1054|
00041e  6c20              LDR      r0,[r4,#0x40]
000420  b9a8              CBNZ     r0,|L1.1102|
;;;373        /* Terminate final pass of non-buffered mode */
;;;374        if (cinfo->output_scanline < cinfo->output_height)
000422  6f61              LDR      r1,[r4,#0x74]
000424  f8d4008c          LDR      r0,[r4,#0x8c]
000428  4288              CMP      r0,r1
00042a  d207              BCS      |L1.1084|
;;;375          ERREXIT(cinfo, JERR_TOO_LITTLE_DATA);
00042c  f04f0043          MOV      r0,#0x43
000430  6821              LDR      r1,[r4,#0]
000432  6148              STR      r0,[r1,#0x14]
000434  6820              LDR      r0,[r4,#0]
000436  6801              LDR      r1,[r0,#0]
000438  4620              MOV      r0,r4
00043a  4788              BLX      r1
                  |L1.1084|
;;;376        (*cinfo->master->finish_output_pass) (cinfo);
00043c  f8d401a4          LDR      r0,[r4,#0x1a4]
000440  6841              LDR      r1,[r0,#4]
000442  4620              MOV      r0,r4
000444  4788              BLX      r1
;;;377        cinfo->global_state = DSTATE_STOPPING;
000446  f04f00d2          MOV      r0,#0xd2
00044a  6160              STR      r0,[r4,#0x14]
00044c  e014              B        |L1.1144|
                  |L1.1102|
;;;378      } else if (cinfo->global_state == DSTATE_BUFIMAGE) {
00044e  6960              LDR      r0,[r4,#0x14]
000450  28cf              CMP      r0,#0xcf
000452  d103              BNE      |L1.1116|
;;;379        /* Finishing after a buffered-image operation */
;;;380        cinfo->global_state = DSTATE_STOPPING;
000454  f04f00d2          MOV      r0,#0xd2
000458  6160              STR      r0,[r4,#0x14]
00045a  e00d              B        |L1.1144|
                  |L1.1116|
;;;381      } else if (cinfo->global_state != DSTATE_STOPPING) {
00045c  6960              LDR      r0,[r4,#0x14]
00045e  28d2              CMP      r0,#0xd2
000460  d00a              BEQ      |L1.1144|
;;;382        /* STOPPING = repeat call after a suspension, anything else is error */
;;;383        ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
000462  f04f0014          MOV      r0,#0x14
000466  6821              LDR      r1,[r4,#0]
000468  6148              STR      r0,[r1,#0x14]
00046a  6821              LDR      r1,[r4,#0]
00046c  6960              LDR      r0,[r4,#0x14]
00046e  6188              STR      r0,[r1,#0x18]
000470  6820              LDR      r0,[r4,#0]
000472  6801              LDR      r1,[r0,#0]
000474  4620              MOV      r0,r4
000476  4788              BLX      r1
                  |L1.1144|
;;;384      }
;;;385      /* Read until EOI */
;;;386      while (! cinfo->inputctl->eoi_reached) {
000478  e007              B        |L1.1162|
                  |L1.1146|
;;;387        if ((*cinfo->inputctl->consume_input) (cinfo) == JPEG_SUSPENDED)
00047a  f8d401b4          LDR      r0,[r4,#0x1b4]
00047e  6801              LDR      r1,[r0,#0]
000480  4620              MOV      r0,r4
000482  4788              BLX      r1
000484  b908              CBNZ     r0,|L1.1162|
;;;388          return FALSE;		/* Suspend, come back later */
000486  2000              MOVS     r0,#0
                  |L1.1160|
;;;389      }
;;;390      /* Do final cleanup */
;;;391      (*cinfo->src->term_source) (cinfo);
;;;392      /* We can use jpeg_abort to release memory and reset global_state */
;;;393      jpeg_abort((j_common_ptr) cinfo);
;;;394      return TRUE;
;;;395    }
000488  bd10              POP      {r4,pc}
                  |L1.1162|
00048a  f8d401b4          LDR      r0,[r4,#0x1b4]        ;386
00048e  6940              LDR      r0,[r0,#0x14]         ;386
000490  2800              CMP      r0,#0                 ;386
000492  d0f2              BEQ      |L1.1146|
000494  69a0              LDR      r0,[r4,#0x18]         ;391
000496  6981              LDR      r1,[r0,#0x18]         ;391
000498  4620              MOV      r0,r4                 ;391
00049a  4788              BLX      r1                    ;391
00049c  4620              MOV      r0,r4                 ;393
00049e  f7fffffe          BL       jpeg_abort
0004a2  2001              MOVS     r0,#1                 ;394
0004a4  e7f0              B        |L1.1160|
                          ENDP

0004a6  0000              DCW      0x0000
                  |L1.1192|
                          DCD      0x3ff00000
