; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\wm_setscrollpos.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\wm_setscrollpos.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -I.\GUI\AntiAlias -I.\GUI\Config -I.\GUI\ConvertColor -I.\GUI\ConvertMono -I.\GUI\Core -I.\GUI\Font -I.\GUI\GUI_X -I.\GUI\JPEG -I.\GUI\LCDDriver -I.\GUI\MemDev -I.\GUI\MultiLayer -I.\GUI\Widget -I.\GUI\WM -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\INC\ST\STM32F10x -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\wm_setscrollpos.crf GUI\WM\WM_SetScrollPos.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=1

                  _SetScrollPos PROC
;;;33     */
;;;34     static void _SetScrollPos(WM_HWIN hWin, unsigned ScrollPos, int Id) {
000000  e92d43fe          PUSH     {r1-r9,lr}
000004  4607              MOV      r7,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
;;;35       WM_HWIN hVScroll;
;;;36       hVScroll = WM_GetDialogItem(hWin, Id);
00000a  4629              MOV      r1,r5
00000c  4638              MOV      r0,r7
00000e  f7fffffe          BL       WM_GetDialogItem
000012  4606              MOV      r6,r0
;;;37       if (hVScroll) {
000014  b1b6              CBZ      r6,|L1.68|
;;;38         int OldValue;
;;;39         WM_SCROLL_STATE ScrollState = {0};
000016  f04f0000          MOV      r0,#0
00001a  9000              STR      r0,[sp,#0]
00001c  9001              STR      r0,[sp,#4]
00001e  9002              STR      r0,[sp,#8]
;;;40         WM_GetScrollState(hVScroll, &ScrollState);
000020  4669              MOV      r1,sp
000022  4630              MOV      r0,r6
000024  f7fffffe          BL       WM_GetScrollState
;;;41         OldValue = ScrollState.v;
000028  f8dd8004          LDR      r8,[sp,#4]
;;;42         ScrollState.v = ScrollPos;
00002c  9401              STR      r4,[sp,#4]
;;;43         WM_CheckScrollBounds(&ScrollState);
00002e  4668              MOV      r0,sp
000030  f7fffffe          BL       WM_CheckScrollBounds
;;;44         if (ScrollState.v != OldValue) {
000034  9801              LDR      r0,[sp,#4]
000036  4540              CMP      r0,r8
000038  d003              BEQ      |L1.66|
;;;45           WM_SetScrollState(hVScroll, &ScrollState);
00003a  4669              MOV      r1,sp
00003c  4630              MOV      r0,r6
00003e  f7fffffe          BL       WM_SetScrollState
                  |L1.66|
;;;46         }
;;;47       }
000042  bf00              NOP      
                  |L1.68|
;;;48     }
000044  e8bd83fe          POP      {r1-r9,pc}
;;;49     
                          ENDP

                  WM_SetScrollPosH PROC
;;;59     */
;;;60     void WM_SetScrollPosH(WM_HWIN hWin, unsigned ScrollPos) {
000048  b570              PUSH     {r4-r6,lr}
00004a  4604              MOV      r4,r0
00004c  460d              MOV      r5,r1
;;;61       WM_LOCK();
;;;62       _SetScrollPos(hWin, ScrollPos, GUI_ID_HSCROLL);
00004e  f04f02ff          MOV      r2,#0xff
000052  4629              MOV      r1,r5
000054  4620              MOV      r0,r4
000056  f7fffffe          BL       _SetScrollPos
;;;63       WM_UNLOCK();
;;;64     }
00005a  bd70              POP      {r4-r6,pc}
;;;65     
                          ENDP

                  WM_SetScrollPosV PROC
;;;69     */
;;;70     void WM_SetScrollPosV(WM_HWIN hWin, unsigned ScrollPos) {
00005c  b570              PUSH     {r4-r6,lr}
00005e  4604              MOV      r4,r0
000060  460d              MOV      r5,r1
;;;71       WM_LOCK();
;;;72       _SetScrollPos(hWin, ScrollPos, GUI_ID_VSCROLL);
000062  f04f02fe          MOV      r2,#0xfe
000066  4629              MOV      r1,r5
000068  4620              MOV      r0,r4
00006a  f7fffffe          BL       _SetScrollPos
;;;73       WM_UNLOCK();
;;;74     }
00006e  bd70              POP      {r4-r6,pc}
;;;75     
                          ENDP

