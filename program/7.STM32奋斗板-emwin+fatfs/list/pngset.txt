; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\pngset.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\pngset.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\FWlib\inc -I.\user -I.\CM3 -I.\MALLOC -I.\TFT -I.\EMWIN\EMWIN_INC -I.\EMWIN\DEMO -I.\FATFS -I.\SDIO -I.\PNG -IE:\material\GUI\STM32·Ü¶·°å-emwin+fatfs\RTE -Id:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.1.0\Device\Include -Id:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=515 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\pngset.crf PNG\pngset.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  png_set_bKGD PROC
;;;22     void PNGAPI
;;;23     png_set_bKGD(png_structp png_ptr, png_infop info_ptr, png_color_16p background)
000000  b100              CBZ      r0,|L1.4|
;;;24     {
;;;25        png_debug1(1, "in %s storage function\n", "bKGD");
;;;26        if (png_ptr == NULL || info_ptr == NULL)
000002  b901              CBNZ     r1,|L1.6|
                  |L1.4|
;;;27           return;
;;;28     
;;;29        png_memcpy(&(info_ptr->background), background, png_sizeof(png_color_16));
;;;30        info_ptr->valid |= PNG_INFO_bKGD;
;;;31     }
000004  4770              BX       lr
                  |L1.6|
000006  6813              LDR      r3,[r2,#0]            ;29
000008  f8c1305a          STR      r3,[r1,#0x5a]         ;29
00000c  6853              LDR      r3,[r2,#4]            ;29
00000e  f8c1305e          STR      r3,[r1,#0x5e]         ;29
000012  8913              LDRH     r3,[r2,#8]            ;29
000014  f8a13062          STRH     r3,[r1,#0x62]         ;29
000018  688b              LDR      r3,[r1,#8]            ;30
00001a  f0430320          ORR      r3,r3,#0x20           ;30
00001e  608b              STR      r3,[r1,#8]            ;30
000020  bf00              NOP      
000022  e7ef              B        |L1.4|
;;;32     #endif
                          ENDP

                  png_set_cHRM PROC
;;;36     void PNGAPI
;;;37     png_set_cHRM(png_structp png_ptr, png_infop info_ptr,
000024  e92d5fff          PUSH     {r0-r12,lr}
;;;38        double white_x, double white_y, double red_x, double red_y,
;;;39        double green_x, double green_y, double blue_x, double blue_y)
;;;40     {
000028  4683              MOV      r11,r0
00002a  468a              MOV      r10,r1
00002c  4614              MOV      r4,r2
00002e  461d              MOV      r5,r3
000030  ae0e              ADD      r6,sp,#0x38
000032  e89603c0          LDM      r6,{r6-r9}
;;;41        png_debug1(1, "in %s storage function\n", "cHRM");
;;;42        if (png_ptr == NULL || info_ptr == NULL)
000036  f1bb0f00          CMP      r11,#0
00003a  d002              BEQ      |L1.66|
00003c  f1ba0f00          CMP      r10,#0
000040  d101              BNE      |L1.70|
                  |L1.66|
;;;43           return;
;;;44     
;;;45        if (white_x < 0.0 || white_y < 0.0 ||
;;;46              red_x < 0.0 ||   red_y < 0.0 ||
;;;47            green_x < 0.0 || green_y < 0.0 ||
;;;48             blue_x < 0.0 ||  blue_y < 0.0)
;;;49        {
;;;50           png_warning(png_ptr,
;;;51             "Ignoring attempt to set negative chromaticity value");
;;;52           return;
;;;53        }
;;;54        if (white_x > 21474.83 || white_y > 21474.83 ||
;;;55              red_x > 21474.83 ||   red_y > 21474.83 ||
;;;56            green_x > 21474.83 || green_y > 21474.83 ||
;;;57             blue_x > 21474.83 ||  blue_y > 21474.83)
;;;58        {
;;;59           png_warning(png_ptr,
;;;60             "Ignoring attempt to set chromaticity value exceeding 21474.83");
;;;61           return;
;;;62        }
;;;63     
;;;64        info_ptr->x_white = (float)white_x;
;;;65        info_ptr->y_white = (float)white_y;
;;;66        info_ptr->x_red   = (float)red_x;
;;;67        info_ptr->y_red   = (float)red_y;
;;;68        info_ptr->x_green = (float)green_x;
;;;69        info_ptr->y_green = (float)green_y;
;;;70        info_ptr->x_blue  = (float)blue_x;
;;;71        info_ptr->y_blue  = (float)blue_y;
;;;72     #ifdef PNG_FIXED_POINT_SUPPORTED
;;;73        info_ptr->int_x_white = (png_fixed_point)(white_x*100000.+0.5);
;;;74        info_ptr->int_y_white = (png_fixed_point)(white_y*100000.+0.5);
;;;75        info_ptr->int_x_red   = (png_fixed_point)(  red_x*100000.+0.5);
;;;76        info_ptr->int_y_red   = (png_fixed_point)(  red_y*100000.+0.5);
;;;77        info_ptr->int_x_green = (png_fixed_point)(green_x*100000.+0.5);
;;;78        info_ptr->int_y_green = (png_fixed_point)(green_y*100000.+0.5);
;;;79        info_ptr->int_x_blue  = (png_fixed_point)( blue_x*100000.+0.5);
;;;80        info_ptr->int_y_blue  = (png_fixed_point)( blue_y*100000.+0.5);
;;;81     #endif
;;;82        info_ptr->valid |= PNG_INFO_cHRM;
;;;83     }
000042  e8bd9fff          POP      {r0-r12,pc}
                  |L1.70|
000046  2200              MOVS     r2,#0                 ;45
000048  4613              MOV      r3,r2                 ;45
00004a  4620              MOV      r0,r4                 ;45
00004c  4629              MOV      r1,r5                 ;45
00004e  f7fffffe          BL       __aeabi_cdcmple
000052  d330              BCC      |L1.182|
000054  2200              MOVS     r2,#0                 ;45
000056  4613              MOV      r3,r2                 ;45
000058  4630              MOV      r0,r6                 ;45
00005a  4639              MOV      r1,r7                 ;45
00005c  f7fffffe          BL       __aeabi_cdcmple
000060  d329              BCC      |L1.182|
000062  2200              MOVS     r2,#0                 ;46
000064  4613              MOV      r3,r2                 ;46
000066  4640              MOV      r0,r8                 ;46
000068  4649              MOV      r1,r9                 ;46
00006a  f7fffffe          BL       __aeabi_cdcmple
00006e  d322              BCC      |L1.182|
000070  2200              MOVS     r2,#0                 ;46
000072  4613              MOV      r3,r2                 ;46
000074  e9dd0112          LDRD     r0,r1,[sp,#0x48]      ;46
000078  f7fffffe          BL       __aeabi_cdcmple
00007c  d31b              BCC      |L1.182|
00007e  2200              MOVS     r2,#0                 ;47
000080  4613              MOV      r3,r2                 ;47
000082  e9dd0114          LDRD     r0,r1,[sp,#0x50]      ;47
000086  f7fffffe          BL       __aeabi_cdcmple
00008a  d314              BCC      |L1.182|
00008c  2200              MOVS     r2,#0                 ;47
00008e  4613              MOV      r3,r2                 ;47
000090  e9dd0116          LDRD     r0,r1,[sp,#0x58]      ;47
000094  f7fffffe          BL       __aeabi_cdcmple
000098  d30d              BCC      |L1.182|
00009a  2200              MOVS     r2,#0                 ;48
00009c  4613              MOV      r3,r2                 ;48
00009e  e9dd0118          LDRD     r0,r1,[sp,#0x60]      ;48
0000a2  f7fffffe          BL       __aeabi_cdcmple
0000a6  d306              BCC      |L1.182|
0000a8  2200              MOVS     r2,#0                 ;48
0000aa  4613              MOV      r3,r2                 ;48
0000ac  e9dd011a          LDRD     r0,r1,[sp,#0x68]      ;48
0000b0  f7fffffe          BL       __aeabi_cdcmple
0000b4  d204              BCS      |L1.192|
                  |L1.182|
0000b6  a1f3              ADR      r1,|L1.1156|
0000b8  4658              MOV      r0,r11                ;50
0000ba  f7fffffe          BL       png_warning
0000be  e7c0              B        |L1.66|
                  |L1.192|
0000c0  4afd              LDR      r2,|L1.1208|
0000c2  4bfe              LDR      r3,|L1.1212|
0000c4  4620              MOV      r0,r4                 ;54
0000c6  4629              MOV      r1,r5                 ;54
0000c8  f7fffffe          BL       __aeabi_cdrcmple
0000cc  d330              BCC      |L1.304|
0000ce  4afa              LDR      r2,|L1.1208|
0000d0  4bfa              LDR      r3,|L1.1212|
0000d2  4630              MOV      r0,r6                 ;54
0000d4  4639              MOV      r1,r7                 ;54
0000d6  f7fffffe          BL       __aeabi_cdrcmple
0000da  d329              BCC      |L1.304|
0000dc  4af6              LDR      r2,|L1.1208|
0000de  4bf7              LDR      r3,|L1.1212|
0000e0  4640              MOV      r0,r8                 ;55
0000e2  4649              MOV      r1,r9                 ;55
0000e4  f7fffffe          BL       __aeabi_cdrcmple
0000e8  d322              BCC      |L1.304|
0000ea  4af3              LDR      r2,|L1.1208|
0000ec  4bf3              LDR      r3,|L1.1212|
0000ee  e9dd0112          LDRD     r0,r1,[sp,#0x48]      ;55
0000f2  f7fffffe          BL       __aeabi_cdrcmple
0000f6  d31b              BCC      |L1.304|
0000f8  4aef              LDR      r2,|L1.1208|
0000fa  4bf0              LDR      r3,|L1.1212|
0000fc  e9dd0114          LDRD     r0,r1,[sp,#0x50]      ;56
000100  f7fffffe          BL       __aeabi_cdrcmple
000104  d314              BCC      |L1.304|
000106  4aec              LDR      r2,|L1.1208|
000108  4bec              LDR      r3,|L1.1212|
00010a  e9dd0116          LDRD     r0,r1,[sp,#0x58]      ;56
00010e  f7fffffe          BL       __aeabi_cdrcmple
000112  d30d              BCC      |L1.304|
000114  4ae8              LDR      r2,|L1.1208|
000116  4be9              LDR      r3,|L1.1212|
000118  e9dd0118          LDRD     r0,r1,[sp,#0x60]      ;57
00011c  f7fffffe          BL       __aeabi_cdrcmple
000120  d306              BCC      |L1.304|
000122  4ae5              LDR      r2,|L1.1208|
000124  4be5              LDR      r3,|L1.1212|
000126  e9dd011a          LDRD     r0,r1,[sp,#0x68]      ;57
00012a  f7fffffe          BL       __aeabi_cdrcmple
00012e  d204              BCS      |L1.314|
                  |L1.304|
000130  a1e3              ADR      r1,|L1.1216|
000132  4658              MOV      r0,r11                ;59
000134  f7fffffe          BL       png_warning
000138  e783              B        |L1.66|
                  |L1.314|
00013a  4620              MOV      r0,r4                 ;64
00013c  4629              MOV      r1,r5                 ;64
00013e  f7fffffe          BL       __aeabi_d2f
000142  f8ca0080          STR      r0,[r10,#0x80]        ;64
000146  4630              MOV      r0,r6                 ;65
000148  4639              MOV      r1,r7                 ;65
00014a  f7fffffe          BL       __aeabi_d2f
00014e  f8ca0084          STR      r0,[r10,#0x84]        ;65
000152  4640              MOV      r0,r8                 ;66
000154  4649              MOV      r1,r9                 ;66
000156  f7fffffe          BL       __aeabi_d2f
00015a  f8ca0088          STR      r0,[r10,#0x88]        ;66
00015e  e9dd0112          LDRD     r0,r1,[sp,#0x48]      ;67
000162  f7fffffe          BL       __aeabi_d2f
000166  f8ca008c          STR      r0,[r10,#0x8c]        ;67
00016a  e9dd0114          LDRD     r0,r1,[sp,#0x50]      ;68
00016e  f7fffffe          BL       __aeabi_d2f
000172  f8ca0090          STR      r0,[r10,#0x90]        ;68
000176  e9dd0116          LDRD     r0,r1,[sp,#0x58]      ;69
00017a  f7fffffe          BL       __aeabi_d2f
00017e  f8ca0094          STR      r0,[r10,#0x94]        ;69
000182  e9dd0118          LDRD     r0,r1,[sp,#0x60]      ;70
000186  f7fffffe          BL       __aeabi_d2f
00018a  f8ca0098          STR      r0,[r10,#0x98]        ;70
00018e  e9dd011a          LDRD     r0,r1,[sp,#0x68]      ;71
000192  f7fffffe          BL       __aeabi_d2f
000196  f8ca009c          STR      r0,[r10,#0x9c]        ;71
00019a  2200              MOVS     r2,#0                 ;73
00019c  4bd8              LDR      r3,|L1.1280|
00019e  4620              MOV      r0,r4                 ;73
0001a0  4629              MOV      r1,r5                 ;73
0001a2  f7fffffe          BL       __aeabi_dmul
0001a6  2200              MOVS     r2,#0                 ;73
0001a8  4bd6              LDR      r3,|L1.1284|
0001aa  e9cd0100          STRD     r0,r1,[sp,#0]         ;73
0001ae  f7fffffe          BL       __aeabi_dadd
0001b2  e9cd0102          STRD     r0,r1,[sp,#8]         ;73
0001b6  f7fffffe          BL       __aeabi_d2iz
0001ba  f8ca0100          STR      r0,[r10,#0x100]       ;73
0001be  2200              MOVS     r2,#0                 ;74
0001c0  4bcf              LDR      r3,|L1.1280|
0001c2  4630              MOV      r0,r6                 ;74
0001c4  4639              MOV      r1,r7                 ;74
0001c6  f7fffffe          BL       __aeabi_dmul
0001ca  2200              MOVS     r2,#0                 ;74
0001cc  4bcd              LDR      r3,|L1.1284|
0001ce  e9cd0100          STRD     r0,r1,[sp,#0]         ;74
0001d2  f7fffffe          BL       __aeabi_dadd
0001d6  e9cd0102          STRD     r0,r1,[sp,#8]         ;74
0001da  f7fffffe          BL       __aeabi_d2iz
0001de  f8ca0104          STR      r0,[r10,#0x104]       ;74
0001e2  2200              MOVS     r2,#0                 ;75
0001e4  4bc6              LDR      r3,|L1.1280|
0001e6  4640              MOV      r0,r8                 ;75
0001e8  4649              MOV      r1,r9                 ;75
0001ea  f7fffffe          BL       __aeabi_dmul
0001ee  2200              MOVS     r2,#0                 ;75
0001f0  4bc4              LDR      r3,|L1.1284|
0001f2  e9cd0100          STRD     r0,r1,[sp,#0]         ;75
0001f6  f7fffffe          BL       __aeabi_dadd
0001fa  e9cd0102          STRD     r0,r1,[sp,#8]         ;75
0001fe  f7fffffe          BL       __aeabi_d2iz
000202  f8ca0108          STR      r0,[r10,#0x108]       ;75
000206  2200              MOVS     r2,#0                 ;76
000208  4bbd              LDR      r3,|L1.1280|
00020a  e9dd0112          LDRD     r0,r1,[sp,#0x48]      ;76
00020e  f7fffffe          BL       __aeabi_dmul
000212  2200              MOVS     r2,#0                 ;76
000214  4bbb              LDR      r3,|L1.1284|
000216  e9cd0100          STRD     r0,r1,[sp,#0]         ;76
00021a  f7fffffe          BL       __aeabi_dadd
00021e  e9cd0102          STRD     r0,r1,[sp,#8]         ;76
000222  f7fffffe          BL       __aeabi_d2iz
000226  f8ca010c          STR      r0,[r10,#0x10c]       ;76
00022a  2200              MOVS     r2,#0                 ;77
00022c  4bb4              LDR      r3,|L1.1280|
00022e  e9dd0114          LDRD     r0,r1,[sp,#0x50]      ;77
000232  f7fffffe          BL       __aeabi_dmul
000236  2200              MOVS     r2,#0                 ;77
000238  4bb2              LDR      r3,|L1.1284|
00023a  e9cd0100          STRD     r0,r1,[sp,#0]         ;77
00023e  f7fffffe          BL       __aeabi_dadd
000242  e9cd0102          STRD     r0,r1,[sp,#8]         ;77
000246  f7fffffe          BL       __aeabi_d2iz
00024a  f8ca0110          STR      r0,[r10,#0x110]       ;77
00024e  2200              MOVS     r2,#0                 ;78
000250  4bab              LDR      r3,|L1.1280|
000252  e9dd0116          LDRD     r0,r1,[sp,#0x58]      ;78
000256  f7fffffe          BL       __aeabi_dmul
00025a  2200              MOVS     r2,#0                 ;78
00025c  4ba9              LDR      r3,|L1.1284|
00025e  e9cd0100          STRD     r0,r1,[sp,#0]         ;78
000262  f7fffffe          BL       __aeabi_dadd
000266  e9cd0102          STRD     r0,r1,[sp,#8]         ;78
00026a  f7fffffe          BL       __aeabi_d2iz
00026e  f8ca0114          STR      r0,[r10,#0x114]       ;78
000272  2200              MOVS     r2,#0                 ;79
000274  4ba2              LDR      r3,|L1.1280|
000276  e9dd0118          LDRD     r0,r1,[sp,#0x60]      ;79
00027a  f7fffffe          BL       __aeabi_dmul
00027e  2200              MOVS     r2,#0                 ;79
000280  4ba0              LDR      r3,|L1.1284|
000282  e9cd0100          STRD     r0,r1,[sp,#0]         ;79
000286  f7fffffe          BL       __aeabi_dadd
00028a  e9cd0102          STRD     r0,r1,[sp,#8]         ;79
00028e  f7fffffe          BL       __aeabi_d2iz
000292  f8ca0118          STR      r0,[r10,#0x118]       ;79
000296  2200              MOVS     r2,#0                 ;80
000298  4b99              LDR      r3,|L1.1280|
00029a  e9dd011a          LDRD     r0,r1,[sp,#0x68]      ;80
00029e  f7fffffe          BL       __aeabi_dmul
0002a2  2200              MOVS     r2,#0                 ;80
0002a4  4b97              LDR      r3,|L1.1284|
0002a6  e9cd0100          STRD     r0,r1,[sp,#0]         ;80
0002aa  f7fffffe          BL       __aeabi_dadd
0002ae  e9cd0102          STRD     r0,r1,[sp,#8]         ;80
0002b2  f7fffffe          BL       __aeabi_d2iz
0002b6  f8ca011c          STR      r0,[r10,#0x11c]       ;80
0002ba  f8da0008          LDR      r0,[r10,#8]           ;82
0002be  f0400004          ORR      r0,r0,#4              ;82
0002c2  f8ca0008          STR      r0,[r10,#8]           ;82
0002c6  bf00              NOP      
0002c8  e6bb              B        |L1.66|
;;;84     #endif
                          ENDP

                  png_set_cHRM_fixed PROC
;;;86     void PNGAPI
;;;87     png_set_cHRM_fixed(png_structp png_ptr, png_infop info_ptr,
0002ca  e92d4fff          PUSH     {r0-r11,lr}
;;;88        png_fixed_point white_x, png_fixed_point white_y, png_fixed_point red_x,
;;;89        png_fixed_point red_y, png_fixed_point green_x, png_fixed_point green_y,
;;;90        png_fixed_point blue_x, png_fixed_point blue_y)
;;;91     {
0002ce  b085              SUB      sp,sp,#0x14
0002d0  460c              MOV      r4,r1
0002d2  4615              MOV      r5,r2
0002d4  461e              MOV      r6,r3
0002d6  af12              ADD      r7,sp,#0x48
0002d8  e8970f80          LDM      r7,{r7-r11}
;;;92        png_debug1(1, "in %s storage function\n", "cHRM");
;;;93        if (png_ptr == NULL || info_ptr == NULL)
0002dc  9805              LDR      r0,[sp,#0x14]
0002de  b100              CBZ      r0,|L1.738|
0002e0  b914              CBNZ     r4,|L1.744|
                  |L1.738|
;;;94           return;
;;;95     
;;;96        if (white_x < 0 || white_y < 0 ||
;;;97              red_x < 0 ||   red_y < 0 ||
;;;98            green_x < 0 || green_y < 0 ||
;;;99             blue_x < 0 ||  blue_y < 0)
;;;100       {
;;;101          png_warning(png_ptr,
;;;102            "Ignoring attempt to set negative chromaticity value");
;;;103          return;
;;;104       }
;;;105    #ifdef PNG_FLOATING_POINT_SUPPORTED
;;;106       if (white_x > (double) PNG_UINT_31_MAX ||
;;;107           white_y > (double) PNG_UINT_31_MAX ||
;;;108             red_x > (double) PNG_UINT_31_MAX ||
;;;109             red_y > (double) PNG_UINT_31_MAX ||
;;;110           green_x > (double) PNG_UINT_31_MAX ||
;;;111           green_y > (double) PNG_UINT_31_MAX ||
;;;112            blue_x > (double) PNG_UINT_31_MAX ||
;;;113            blue_y > (double) PNG_UINT_31_MAX)
;;;114    #else
;;;115       if (white_x > (png_fixed_point) PNG_UINT_31_MAX/100000L ||
;;;116           white_y > (png_fixed_point) PNG_UINT_31_MAX/100000L ||
;;;117             red_x > (png_fixed_point) PNG_UINT_31_MAX/100000L ||
;;;118             red_y > (png_fixed_point) PNG_UINT_31_MAX/100000L ||
;;;119           green_x > (png_fixed_point) PNG_UINT_31_MAX/100000L ||
;;;120           green_y > (png_fixed_point) PNG_UINT_31_MAX/100000L ||
;;;121            blue_x > (png_fixed_point) PNG_UINT_31_MAX/100000L ||
;;;122            blue_y > (png_fixed_point) PNG_UINT_31_MAX/100000L)
;;;123    #endif
;;;124       {
;;;125          png_warning(png_ptr,
;;;126            "Ignoring attempt to set chromaticity value exceeding 21474.83");
;;;127          return;
;;;128       }
;;;129       info_ptr->int_x_white = white_x;
;;;130       info_ptr->int_y_white = white_y;
;;;131       info_ptr->int_x_red   = red_x;
;;;132       info_ptr->int_y_red   = red_y;
;;;133       info_ptr->int_x_green = green_x;
;;;134       info_ptr->int_y_green = green_y;
;;;135       info_ptr->int_x_blue  = blue_x;
;;;136       info_ptr->int_y_blue  = blue_y;
;;;137    #ifdef PNG_FLOATING_POINT_SUPPORTED
;;;138       info_ptr->x_white = (float)(white_x/100000.);
;;;139       info_ptr->y_white = (float)(white_y/100000.);
;;;140       info_ptr->x_red   = (float)(  red_x/100000.);
;;;141       info_ptr->y_red   = (float)(  red_y/100000.);
;;;142       info_ptr->x_green = (float)(green_x/100000.);
;;;143       info_ptr->y_green = (float)(green_y/100000.);
;;;144       info_ptr->x_blue  = (float)( blue_x/100000.);
;;;145       info_ptr->y_blue  = (float)( blue_y/100000.);
;;;146    #endif
;;;147       info_ptr->valid |= PNG_INFO_cHRM;
;;;148    }
0002e2  b009              ADD      sp,sp,#0x24
0002e4  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.744|
0002e8  2d00              CMP      r5,#0                 ;96
0002ea  db12              BLT      |L1.786|
0002ec  2e00              CMP      r6,#0                 ;96
0002ee  db10              BLT      |L1.786|
0002f0  2f00              CMP      r7,#0                 ;97
0002f2  db0e              BLT      |L1.786|
0002f4  f1b80f00          CMP      r8,#0                 ;97
0002f8  db0b              BLT      |L1.786|
0002fa  f1b90f00          CMP      r9,#0                 ;98
0002fe  db08              BLT      |L1.786|
000300  f1ba0f00          CMP      r10,#0                ;98
000304  db05              BLT      |L1.786|
000306  f1bb0f00          CMP      r11,#0                ;99
00030a  db02              BLT      |L1.786|
00030c  9817              LDR      r0,[sp,#0x5c]         ;99
00030e  2800              CMP      r0,#0                 ;99
000310  da04              BGE      |L1.796|
                  |L1.786|
000312  a15c              ADR      r1,|L1.1156|
000314  9805              LDR      r0,[sp,#0x14]         ;101
000316  f7fffffe          BL       png_warning
00031a  e7e2              B        |L1.738|
                  |L1.796|
00031c  4628              MOV      r0,r5                 ;106
00031e  f7fffffe          BL       __aeabi_i2d
000322  4a79              LDR      r2,|L1.1288|
000324  4b79              LDR      r3,|L1.1292|
000326  e9cd0102          STRD     r0,r1,[sp,#8]         ;106
00032a  f7fffffe          BL       __aeabi_cdrcmple
00032e  d345              BCC      |L1.956|
000330  4630              MOV      r0,r6                 ;107
000332  f7fffffe          BL       __aeabi_i2d
000336  4a74              LDR      r2,|L1.1288|
000338  4b74              LDR      r3,|L1.1292|
00033a  e9cd0102          STRD     r0,r1,[sp,#8]         ;107
00033e  f7fffffe          BL       __aeabi_cdrcmple
000342  d33b              BCC      |L1.956|
000344  4638              MOV      r0,r7                 ;108
000346  f7fffffe          BL       __aeabi_i2d
00034a  4a6f              LDR      r2,|L1.1288|
00034c  4b6f              LDR      r3,|L1.1292|
00034e  e9cd0102          STRD     r0,r1,[sp,#8]         ;108
000352  f7fffffe          BL       __aeabi_cdrcmple
000356  d331              BCC      |L1.956|
000358  4640              MOV      r0,r8                 ;109
00035a  f7fffffe          BL       __aeabi_i2d
00035e  4a6a              LDR      r2,|L1.1288|
000360  4b6a              LDR      r3,|L1.1292|
000362  e9cd0102          STRD     r0,r1,[sp,#8]         ;109
000366  f7fffffe          BL       __aeabi_cdrcmple
00036a  d327              BCC      |L1.956|
00036c  4648              MOV      r0,r9                 ;110
00036e  f7fffffe          BL       __aeabi_i2d
000372  4a65              LDR      r2,|L1.1288|
000374  4b65              LDR      r3,|L1.1292|
000376  e9cd0102          STRD     r0,r1,[sp,#8]         ;110
00037a  f7fffffe          BL       __aeabi_cdrcmple
00037e  d31d              BCC      |L1.956|
000380  4650              MOV      r0,r10                ;111
000382  f7fffffe          BL       __aeabi_i2d
000386  4a60              LDR      r2,|L1.1288|
000388  4b60              LDR      r3,|L1.1292|
00038a  e9cd0102          STRD     r0,r1,[sp,#8]         ;111
00038e  f7fffffe          BL       __aeabi_cdrcmple
000392  d313              BCC      |L1.956|
000394  4658              MOV      r0,r11                ;112
000396  f7fffffe          BL       __aeabi_i2d
00039a  4a5b              LDR      r2,|L1.1288|
00039c  4b5b              LDR      r3,|L1.1292|
00039e  e9cd0102          STRD     r0,r1,[sp,#8]         ;112
0003a2  f7fffffe          BL       __aeabi_cdrcmple
0003a6  d309              BCC      |L1.956|
0003a8  9817              LDR      r0,[sp,#0x5c]         ;113
0003aa  f7fffffe          BL       __aeabi_i2d
0003ae  4a56              LDR      r2,|L1.1288|
0003b0  4b56              LDR      r3,|L1.1292|
0003b2  e9cd0102          STRD     r0,r1,[sp,#8]         ;113
0003b6  f7fffffe          BL       __aeabi_cdrcmple
0003ba  d204              BCS      |L1.966|
                  |L1.956|
0003bc  a140              ADR      r1,|L1.1216|
0003be  9805              LDR      r0,[sp,#0x14]         ;125
0003c0  f7fffffe          BL       png_warning
0003c4  e78d              B        |L1.738|
                  |L1.966|
0003c6  3420              ADDS     r4,r4,#0x20           ;129
0003c8  f8c450e0          STR      r5,[r4,#0xe0]         ;129
0003cc  f8c460e4          STR      r6,[r4,#0xe4]         ;130
0003d0  f8c470e8          STR      r7,[r4,#0xe8]         ;131
0003d4  f8c480ec          STR      r8,[r4,#0xec]         ;132
0003d8  f8c490f0          STR      r9,[r4,#0xf0]         ;133
0003dc  f8c4a0f4          STR      r10,[r4,#0xf4]        ;134
0003e0  f8c4b0f8          STR      r11,[r4,#0xf8]        ;135
0003e4  9817              LDR      r0,[sp,#0x5c]         ;136
0003e6  f8c400fc          STR      r0,[r4,#0xfc]         ;136
0003ea  4628              MOV      r0,r5                 ;138
0003ec  f7fffffe          BL       __aeabi_i2d
0003f0  2200              MOVS     r2,#0                 ;138
0003f2  4b43              LDR      r3,|L1.1280|
0003f4  e9cd0100          STRD     r0,r1,[sp,#0]         ;138
0003f8  f7fffffe          BL       __aeabi_ddiv
0003fc  e9cd0102          STRD     r0,r1,[sp,#8]         ;138
000400  f7fffffe          BL       __aeabi_d2f
000404  6620              STR      r0,[r4,#0x60]         ;138
000406  4630              MOV      r0,r6                 ;139
000408  f7fffffe          BL       __aeabi_i2d
00040c  2200              MOVS     r2,#0                 ;139
00040e  4b3c              LDR      r3,|L1.1280|
000410  e9cd0100          STRD     r0,r1,[sp,#0]         ;139
000414  f7fffffe          BL       __aeabi_ddiv
000418  e9cd0102          STRD     r0,r1,[sp,#8]         ;139
00041c  f7fffffe          BL       __aeabi_d2f
000420  6660              STR      r0,[r4,#0x64]         ;139
000422  4638              MOV      r0,r7                 ;140
000424  f7fffffe          BL       __aeabi_i2d
000428  2200              MOVS     r2,#0                 ;140
00042a  4b35              LDR      r3,|L1.1280|
00042c  e9cd0100          STRD     r0,r1,[sp,#0]         ;140
000430  f7fffffe          BL       __aeabi_ddiv
000434  e9cd0102          STRD     r0,r1,[sp,#8]         ;140
000438  f7fffffe          BL       __aeabi_d2f
00043c  66a0              STR      r0,[r4,#0x68]         ;140
00043e  4640              MOV      r0,r8                 ;141
000440  f7fffffe          BL       __aeabi_i2d
000444  2200              MOVS     r2,#0                 ;141
000446  4b2e              LDR      r3,|L1.1280|
000448  e9cd0100          STRD     r0,r1,[sp,#0]         ;141
00044c  f7fffffe          BL       __aeabi_ddiv
000450  e9cd0102          STRD     r0,r1,[sp,#8]         ;141
000454  f7fffffe          BL       __aeabi_d2f
000458  66e0              STR      r0,[r4,#0x6c]         ;141
00045a  4648              MOV      r0,r9                 ;142
00045c  f7fffffe          BL       __aeabi_i2d
000460  2200              MOVS     r2,#0                 ;142
000462  4b27              LDR      r3,|L1.1280|
000464  e9cd0100          STRD     r0,r1,[sp,#0]         ;142
000468  f7fffffe          BL       __aeabi_ddiv
00046c  e9cd0102          STRD     r0,r1,[sp,#8]         ;142
000470  f7fffffe          BL       __aeabi_d2f
000474  6720              STR      r0,[r4,#0x70]         ;142
000476  4650              MOV      r0,r10                ;143
000478  f7fffffe          BL       __aeabi_i2d
00047c  2200              MOVS     r2,#0                 ;143
00047e  4b20              LDR      r3,|L1.1280|
000480  e046              B        |L1.1296|
000482  0000              DCW      0x0000
                  |L1.1156|
000484  49676e6f          DCB      "Ignoring attempt to set negative chromaticity value",0
000488  72696e67
00048c  20617474
000490  656d7074
000494  20746f20
000498  73657420
00049c  6e656761
0004a0  74697665
0004a4  20636872
0004a8  6f6d6174
0004ac  69636974
0004b0  79207661
0004b4  6c756500
                  |L1.1208|
                          DCD      0x1eb851ec
                  |L1.1212|
                          DCD      0x40d4f8b5
                  |L1.1216|
0004c0  49676e6f          DCB      "Ignoring attempt to set chromaticity value exceeding 21"
0004c4  72696e67
0004c8  20617474
0004cc  656d7074
0004d0  20746f20
0004d4  73657420
0004d8  6368726f
0004dc  6d617469
0004e0  63697479
0004e4  2076616c
0004e8  75652065
0004ec  78636565
0004f0  64696e67
0004f4  203231  
0004f7  3437342e          DCB      "474.83",0
0004fb  383300  
0004fe  00                DCB      0
0004ff  00                DCB      0
                  |L1.1280|
                          DCD      0x40f86a00
                  |L1.1284|
                          DCD      0x3fe00000
                  |L1.1288|
                          DCD      0xffc00000
                  |L1.1292|
                          DCD      0x41dfffff
                  |L1.1296|
000510  e9cd0100          STRD     r0,r1,[sp,#0]         ;143
000514  f7fffffe          BL       __aeabi_ddiv
000518  e9cd0102          STRD     r0,r1,[sp,#8]         ;143
00051c  f7fffffe          BL       __aeabi_d2f
000520  6760              STR      r0,[r4,#0x74]         ;143
000522  4658              MOV      r0,r11                ;144
000524  f7fffffe          BL       __aeabi_i2d
000528  2200              MOVS     r2,#0                 ;144
00052a  4bf3              LDR      r3,|L1.2296|
00052c  e9cd0100          STRD     r0,r1,[sp,#0]         ;144
000530  f7fffffe          BL       __aeabi_ddiv
000534  e9cd0102          STRD     r0,r1,[sp,#8]         ;144
000538  f7fffffe          BL       __aeabi_d2f
00053c  67a0              STR      r0,[r4,#0x78]         ;144
00053e  9817              LDR      r0,[sp,#0x5c]         ;145
000540  f7fffffe          BL       __aeabi_i2d
000544  2200              MOVS     r2,#0                 ;145
000546  4bec              LDR      r3,|L1.2296|
000548  e9cd0100          STRD     r0,r1,[sp,#0]         ;145
00054c  f7fffffe          BL       __aeabi_ddiv
000550  e9cd0102          STRD     r0,r1,[sp,#8]         ;145
000554  f7fffffe          BL       __aeabi_d2f
000558  67e0              STR      r0,[r4,#0x7c]         ;145
00055a  f8540c18          LDR      r0,[r4,#-0x18]        ;147
00055e  f0400004          ORR      r0,r0,#4              ;147
000562  f8440c18          STR      r0,[r4,#-0x18]        ;147
000566  3c20              SUBS     r4,r4,#0x20           ;147
000568  bf00              NOP      
00056a  e6ba              B        |L1.738|
;;;149    #endif
                          ENDP

                  png_set_gAMA PROC
;;;154    void PNGAPI
;;;155    png_set_gAMA(png_structp png_ptr, png_infop info_ptr, double file_gamma)
00056c  e92d5ffc          PUSH     {r2-r12,lr}
;;;156    {
000570  4683              MOV      r11,r0
000572  468a              MOV      r10,r1
000574  4616              MOV      r6,r2
000576  461f              MOV      r7,r3
;;;157       double gamma;
;;;158       png_debug1(1, "in %s storage function\n", "gAMA");
;;;159       if (png_ptr == NULL || info_ptr == NULL)
000578  f1bb0f00          CMP      r11,#0
00057c  d002              BEQ      |L1.1412|
00057e  f1ba0f00          CMP      r10,#0
000582  d101              BNE      |L1.1416|
                  |L1.1412|
;;;160          return;
;;;161    
;;;162       /* Check for overflow */
;;;163       if (file_gamma > 21474.83)
;;;164       {
;;;165          png_warning(png_ptr, "Limiting gamma to 21474.83");
;;;166          gamma=21474.83;
;;;167       }
;;;168       else
;;;169          gamma=file_gamma;
;;;170       info_ptr->gamma = (float)gamma;
;;;171    #ifdef PNG_FIXED_POINT_SUPPORTED
;;;172       info_ptr->int_gamma = (int)(gamma*100000.+.5);
;;;173    #endif
;;;174       info_ptr->valid |= PNG_INFO_gAMA;
;;;175       if(gamma == 0.0)
;;;176          png_warning(png_ptr, "Setting gamma=0");
;;;177    }
000584  e8bd9ffc          POP      {r2-r12,pc}
                  |L1.1416|
000588  4adc              LDR      r2,|L1.2300|
00058a  4bdd              LDR      r3,|L1.2304|
00058c  4630              MOV      r0,r6                 ;163
00058e  4639              MOV      r1,r7                 ;163
000590  f7fffffe          BL       __aeabi_cdrcmple
000594  d206              BCS      |L1.1444|
000596  a1db              ADR      r1,|L1.2308|
000598  4658              MOV      r0,r11                ;165
00059a  f7fffffe          BL       png_warning
00059e  4cd7              LDR      r4,|L1.2300|
0005a0  4dd7              LDR      r5,|L1.2304|
0005a2  e001              B        |L1.1448|
                  |L1.1444|
0005a4  4634              MOV      r4,r6                 ;169
0005a6  463d              MOV      r5,r7                 ;169
                  |L1.1448|
0005a8  4620              MOV      r0,r4                 ;170
0005aa  4629              MOV      r1,r5                 ;170
0005ac  f7fffffe          BL       __aeabi_d2f
0005b0  f8ca0028          STR      r0,[r10,#0x28]        ;170
0005b4  2200              MOVS     r2,#0                 ;172
0005b6  4bd0              LDR      r3,|L1.2296|
0005b8  4620              MOV      r0,r4                 ;172
0005ba  4629              MOV      r1,r5                 ;172
0005bc  f7fffffe          BL       __aeabi_dmul
0005c0  4680              MOV      r8,r0                 ;172
0005c2  2200              MOVS     r2,#0                 ;172
0005c4  4bd6              LDR      r3,|L1.2336|
0005c6  f7fffffe          BL       __aeabi_dadd
0005ca  e9cd0100          STRD     r0,r1,[sp,#0]         ;172
0005ce  f7fffffe          BL       __aeabi_d2iz
0005d2  f8ca00fc          STR      r0,[r10,#0xfc]        ;172
0005d6  f8da0008          LDR      r0,[r10,#8]           ;174
0005da  f0400001          ORR      r0,r0,#1              ;174
0005de  f8ca0008          STR      r0,[r10,#8]           ;174
0005e2  2200              MOVS     r2,#0                 ;175
0005e4  4613              MOV      r3,r2                 ;175
0005e6  4620              MOV      r0,r4                 ;175
0005e8  4629              MOV      r1,r5                 ;175
0005ea  f7fffffe          BL       __aeabi_cdcmpeq
0005ee  d103              BNE      |L1.1528|
0005f0  a1cc              ADR      r1,|L1.2340|
0005f2  4658              MOV      r0,r11                ;176
0005f4  f7fffffe          BL       png_warning
                  |L1.1528|
0005f8  bf00              NOP      
0005fa  e7c3              B        |L1.1412|
;;;178    #endif
                          ENDP

                  png_set_gAMA_fixed PROC
;;;179    void PNGAPI
;;;180    png_set_gAMA_fixed(png_structp png_ptr, png_infop info_ptr, png_fixed_point
0005fc  e92d5ff0          PUSH     {r4-r12,lr}
;;;181       int_gamma)
;;;182    {
000600  4683              MOV      r11,r0
000602  460c              MOV      r4,r1
000604  4692              MOV      r10,r2
;;;183       png_fixed_point gamma;
;;;184    
;;;185       png_debug1(1, "in %s storage function\n", "gAMA");
;;;186       if (png_ptr == NULL || info_ptr == NULL)
000606  f1bb0f00          CMP      r11,#0
00060a  d000              BEQ      |L1.1550|
00060c  b90c              CBNZ     r4,|L1.1554|
                  |L1.1550|
;;;187          return;
;;;188    
;;;189       if (int_gamma > (png_fixed_point) PNG_UINT_31_MAX)
;;;190       {
;;;191         png_warning(png_ptr, "Limiting gamma to 21474.83");
;;;192         gamma=PNG_UINT_31_MAX;
;;;193       }
;;;194       else
;;;195       {
;;;196         if (int_gamma < 0)
;;;197         {
;;;198           png_warning(png_ptr, "Setting negative gamma to zero");
;;;199           gamma=0;
;;;200         }
;;;201         else
;;;202           gamma=int_gamma;
;;;203       }
;;;204    #ifdef PNG_FLOATING_POINT_SUPPORTED
;;;205       info_ptr->gamma = (float)(gamma/100000.);
;;;206    #endif
;;;207    #ifdef PNG_FIXED_POINT_SUPPORTED
;;;208       info_ptr->int_gamma = gamma;
;;;209    #endif
;;;210       info_ptr->valid |= PNG_INFO_gAMA;
;;;211       if(gamma == 0)
;;;212          png_warning(png_ptr, "Setting gamma=0");
;;;213    }
00060e  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.1554|
000612  bf00              NOP                            ;189
000614  f1ba0f00          CMP      r10,#0                ;196
000618  da06              BGE      |L1.1576|
00061a  a1c6              ADR      r1,|L1.2356|
00061c  4658              MOV      r0,r11                ;198
00061e  f7fffffe          BL       png_warning
000622  f04f0900          MOV      r9,#0                 ;199
000626  e000              B        |L1.1578|
                  |L1.1576|
000628  46d1              MOV      r9,r10                ;202
                  |L1.1578|
00062a  4648              MOV      r0,r9                 ;205
00062c  f7fffffe          BL       __aeabi_i2d
000630  4607              MOV      r7,r0                 ;205
000632  2200              MOVS     r2,#0                 ;205
000634  4bb0              LDR      r3,|L1.2296|
000636  f7fffffe          BL       __aeabi_ddiv
00063a  4605              MOV      r5,r0                 ;205
00063c  f7fffffe          BL       __aeabi_d2f
000640  62a0              STR      r0,[r4,#0x28]         ;205
000642  f8c490fc          STR      r9,[r4,#0xfc]         ;208
000646  68a0              LDR      r0,[r4,#8]            ;210
000648  f0400001          ORR      r0,r0,#1              ;210
00064c  60a0              STR      r0,[r4,#8]            ;210
00064e  f1b90f00          CMP      r9,#0                 ;211
000652  d103              BNE      |L1.1628|
000654  a1b3              ADR      r1,|L1.2340|
000656  4658              MOV      r0,r11                ;212
000658  f7fffffe          BL       png_warning
                  |L1.1628|
00065c  bf00              NOP      
00065e  e7d6              B        |L1.1550|
;;;214    #endif
                          ENDP

                  png_set_hIST PROC
;;;217    void PNGAPI
;;;218    png_set_hIST(png_structp png_ptr, png_infop info_ptr, png_uint_16p hist)
000660  e92d41f0          PUSH     {r4-r8,lr}
;;;219    {
000664  4605              MOV      r5,r0
000666  460c              MOV      r4,r1
000668  4617              MOV      r7,r2
;;;220       int i;
;;;221    
;;;222       png_debug1(1, "in %s storage function\n", "hIST");
;;;223       if (png_ptr == NULL || info_ptr == NULL)
00066a  b105              CBZ      r5,|L1.1646|
00066c  b90c              CBNZ     r4,|L1.1650|
                  |L1.1646|
;;;224          return;
;;;225       if (info_ptr->num_palette <= 0 || info_ptr->num_palette
;;;226           > PNG_MAX_PALETTE_LENGTH)
;;;227       {
;;;228           png_warning(png_ptr,
;;;229              "Invalid palette size, hIST allocation skipped.");
;;;230           return;
;;;231       }
;;;232    
;;;233    #ifdef PNG_FREE_ME_SUPPORTED
;;;234       png_free_data(png_ptr, info_ptr, PNG_FREE_HIST, 0);
;;;235    #endif
;;;236       /* Changed from info->num_palette to PNG_MAX_PALETTE_LENGTH in version
;;;237          1.2.1 */
;;;238       png_ptr->hist = (png_uint_16p)png_malloc_warn(png_ptr,
;;;239          (png_uint_32)(PNG_MAX_PALETTE_LENGTH * png_sizeof (png_uint_16)));
;;;240       if (png_ptr->hist == NULL)
;;;241         {
;;;242           png_warning(png_ptr, "Insufficient memory for hIST chunk data.");
;;;243           return;
;;;244         }
;;;245    
;;;246       for (i = 0; i < info_ptr->num_palette; i++)
;;;247           png_ptr->hist[i] = hist[i];
;;;248       info_ptr->hist = png_ptr->hist;
;;;249       info_ptr->valid |= PNG_INFO_hIST;
;;;250    
;;;251    #ifdef PNG_FREE_ME_SUPPORTED
;;;252       info_ptr->free_me |= PNG_FREE_HIST;
;;;253    #else
;;;254       png_ptr->flags |= PNG_FLAG_FREE_HIST;
;;;255    #endif
;;;256    }
00066e  e8bd81f0          POP      {r4-r8,pc}
                  |L1.1650|
000672  8aa0              LDRH     r0,[r4,#0x14]         ;225
000674  2800              CMP      r0,#0                 ;225
000676  dd03              BLE      |L1.1664|
000678  8aa0              LDRH     r0,[r4,#0x14]         ;225
00067a  f5b07f80          CMP      r0,#0x100             ;225
00067e  dd04              BLE      |L1.1674|
                  |L1.1664|
000680  a1b4              ADR      r1,|L1.2388|
000682  4628              MOV      r0,r5                 ;228
000684  f7fffffe          BL       png_warning
000688  e7f1              B        |L1.1646|
                  |L1.1674|
00068a  2300              MOVS     r3,#0                 ;234
00068c  2208              MOVS     r2,#8                 ;234
00068e  4621              MOV      r1,r4                 ;234
000690  4628              MOV      r0,r5                 ;234
000692  f7fffffe          BL       png_free_data
000696  f44f7100          MOV      r1,#0x200             ;238
00069a  4628              MOV      r0,r5                 ;238
00069c  f7fffffe          BL       png_malloc_warn
0006a0  f8c50334          STR      r0,[r5,#0x334]        ;238
0006a4  f8d50334          LDR      r0,[r5,#0x334]        ;240
0006a8  b920              CBNZ     r0,|L1.1716|
0006aa  a1b6              ADR      r1,|L1.2436|
0006ac  4628              MOV      r0,r5                 ;242
0006ae  f7fffffe          BL       png_warning
0006b2  e7dc              B        |L1.1646|
                  |L1.1716|
0006b4  2600              MOVS     r6,#0                 ;246
0006b6  e006              B        |L1.1734|
                  |L1.1720|
0006b8  f8370016          LDRH     r0,[r7,r6,LSL #1]     ;247
0006bc  f8d51334          LDR      r1,[r5,#0x334]        ;247
0006c0  f8210016          STRH     r0,[r1,r6,LSL #1]     ;247
0006c4  1c76              ADDS     r6,r6,#1              ;246
                  |L1.1734|
0006c6  8aa0              LDRH     r0,[r4,#0x14]         ;246
0006c8  42b0              CMP      r0,r6                 ;246
0006ca  dcf5              BGT      |L1.1720|
0006cc  f8d50334          LDR      r0,[r5,#0x334]        ;248
0006d0  67e0              STR      r0,[r4,#0x7c]         ;248
0006d2  68a0              LDR      r0,[r4,#8]            ;249
0006d4  f0400040          ORR      r0,r0,#0x40           ;249
0006d8  60a0              STR      r0,[r4,#8]            ;249
0006da  f8d400b8          LDR      r0,[r4,#0xb8]         ;252
0006de  f0400008          ORR      r0,r0,#8              ;252
0006e2  f8c400b8          STR      r0,[r4,#0xb8]         ;252
0006e6  bf00              NOP      
0006e8  e7c1              B        |L1.1646|
;;;257    #endif
                          ENDP

                  png_set_IHDR PROC
;;;259    void PNGAPI
;;;260    png_set_IHDR(png_structp png_ptr, png_infop info_ptr,
0006ea  e92d5ff0          PUSH     {r4-r12,lr}
;;;261       png_uint_32 width, png_uint_32 height, int bit_depth,
;;;262       int color_type, int interlace_type, int compression_type,
;;;263       int filter_type)
;;;264    {
0006ee  4606              MOV      r6,r0
0006f0  460c              MOV      r4,r1
0006f2  4617              MOV      r7,r2
0006f4  4699              MOV      r9,r3
0006f6  e9dd5b0b          LDRD     r5,r11,[sp,#0x2c]
0006fa  f8dda038          LDR      r10,[sp,#0x38]
0006fe  f8dd8028          LDR      r8,[sp,#0x28]
;;;265       png_debug1(1, "in %s storage function\n", "IHDR");
;;;266       if (png_ptr == NULL || info_ptr == NULL)
000702  b106              CBZ      r6,|L1.1798|
000704  b90c              CBNZ     r4,|L1.1802|
                  |L1.1798|
;;;267          return;
;;;268    
;;;269       /* check for width and height valid values */
;;;270       if (width == 0 || height == 0)
;;;271          png_error(png_ptr, "Image width or height is zero in IHDR");
;;;272    #ifdef PNG_SET_USER_LIMITS_SUPPORTED
;;;273       if (width > png_ptr->user_width_max || height > png_ptr->user_height_max)
;;;274          png_error(png_ptr, "image size exceeds user limits in IHDR");
;;;275    #else
;;;276       if (width > PNG_USER_WIDTH_MAX || height > PNG_USER_HEIGHT_MAX)
;;;277          png_error(png_ptr, "image size exceeds user limits in IHDR");
;;;278    #endif
;;;279       if (width > PNG_UINT_31_MAX || height > PNG_UINT_31_MAX)
;;;280          png_error(png_ptr, "Invalid image size in IHDR");
;;;281       if ( width > (PNG_UINT_32_MAX
;;;282                     >> 3)      /* 8-byte RGBA pixels */
;;;283                     - 64       /* bigrowbuf hack */
;;;284                     - 1        /* filter byte */
;;;285                     - 7*8      /* rounding of width to multiple of 8 pixels */
;;;286                     - 8)       /* extra max_pixel_depth pad */
;;;287          png_warning(png_ptr, "Width is too large for libpng to process pixels");
;;;288    
;;;289       /* check other values */
;;;290       if (bit_depth != 1 && bit_depth != 2 && bit_depth != 4 &&
;;;291          bit_depth != 8 && bit_depth != 16)
;;;292          png_error(png_ptr, "Invalid bit depth in IHDR");
;;;293    
;;;294       if (color_type < 0 || color_type == 1 ||
;;;295          color_type == 5 || color_type > 6)
;;;296          png_error(png_ptr, "Invalid color type in IHDR");
;;;297    
;;;298       if (((color_type == PNG_COLOR_TYPE_PALETTE) && bit_depth > 8) ||
;;;299           ((color_type == PNG_COLOR_TYPE_RGB ||
;;;300             color_type == PNG_COLOR_TYPE_GRAY_ALPHA ||
;;;301             color_type == PNG_COLOR_TYPE_RGB_ALPHA) && bit_depth < 8))
;;;302          png_error(png_ptr, "Invalid color type/bit depth combination in IHDR");
;;;303    
;;;304       if (interlace_type >= PNG_INTERLACE_LAST)
;;;305          png_error(png_ptr, "Unknown interlace method in IHDR");
;;;306    
;;;307       if (compression_type != PNG_COMPRESSION_TYPE_BASE)
;;;308          png_error(png_ptr, "Unknown compression method in IHDR");
;;;309    
;;;310    #if defined(PNG_MNG_FEATURES_SUPPORTED)
;;;311       /* Accept filter_method 64 (intrapixel differencing) only if
;;;312        * 1. Libpng was compiled with PNG_MNG_FEATURES_SUPPORTED and
;;;313        * 2. Libpng did not read a PNG signature (this filter_method is only
;;;314        *    used in PNG datastreams that are embedded in MNG datastreams) and
;;;315        * 3. The application called png_permit_mng_features with a mask that
;;;316        *    included PNG_FLAG_MNG_FILTER_64 and
;;;317        * 4. The filter_method is 64 and
;;;318        * 5. The color_type is RGB or RGBA
;;;319        */
;;;320       if((png_ptr->mode&PNG_HAVE_PNG_SIGNATURE)&&png_ptr->mng_features_permitted)
;;;321          png_warning(png_ptr,"MNG features are not allowed in a PNG datastream");
;;;322       if(filter_type != PNG_FILTER_TYPE_BASE)
;;;323       {
;;;324         if(!((png_ptr->mng_features_permitted & PNG_FLAG_MNG_FILTER_64) &&
;;;325            (filter_type == PNG_INTRAPIXEL_DIFFERENCING) &&
;;;326            ((png_ptr->mode&PNG_HAVE_PNG_SIGNATURE) == 0) &&
;;;327            (color_type == PNG_COLOR_TYPE_RGB ||
;;;328             color_type == PNG_COLOR_TYPE_RGB_ALPHA)))
;;;329            png_error(png_ptr, "Unknown filter method in IHDR");
;;;330         if(png_ptr->mode&PNG_HAVE_PNG_SIGNATURE)
;;;331            png_warning(png_ptr, "Invalid filter method in IHDR");
;;;332       }
;;;333    #else
;;;334       if(filter_type != PNG_FILTER_TYPE_BASE)
;;;335          png_error(png_ptr, "Unknown filter method in IHDR");
;;;336    #endif
;;;337    
;;;338       info_ptr->width = width;
;;;339       info_ptr->height = height;
;;;340       info_ptr->bit_depth = (png_byte)bit_depth;
;;;341       info_ptr->color_type =(png_byte) color_type;
;;;342       info_ptr->compression_type = (png_byte)compression_type;
;;;343       info_ptr->filter_type = (png_byte)filter_type;
;;;344       info_ptr->interlace_type = (png_byte)interlace_type;
;;;345       if (info_ptr->color_type == PNG_COLOR_TYPE_PALETTE)
;;;346          info_ptr->channels = 1;
;;;347       else if (info_ptr->color_type & PNG_COLOR_MASK_COLOR)
;;;348          info_ptr->channels = 3;
;;;349       else
;;;350          info_ptr->channels = 1;
;;;351       if (info_ptr->color_type & PNG_COLOR_MASK_ALPHA)
;;;352          info_ptr->channels++;
;;;353       info_ptr->pixel_depth = (png_byte)(info_ptr->channels * info_ptr->bit_depth);
;;;354    
;;;355       /* check for potential overflow */
;;;356       if ( width > (PNG_UINT_32_MAX
;;;357                     >> 3)      /* 8-byte RGBA pixels */
;;;358                     - 64       /* bigrowbuf hack */
;;;359                     - 1        /* filter byte */
;;;360                     - 7*8      /* rounding of width to multiple of 8 pixels */
;;;361                     - 8)       /* extra max_pixel_depth pad */
;;;362          info_ptr->rowbytes = (png_size_t)0;
;;;363       else
;;;364          info_ptr->rowbytes = PNG_ROWBYTES(info_ptr->pixel_depth,width);
;;;365    }
000706  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.1802|
00070a  b117              CBZ      r7,|L1.1810|
00070c  f1b90f00          CMP      r9,#0                 ;270
000710  d103              BNE      |L1.1818|
                  |L1.1810|
000712  a1a7              ADR      r1,|L1.2480|
000714  4630              MOV      r0,r6                 ;271
000716  f7fffffe          BL       png_error
                  |L1.1818|
00071a  f8d6039c          LDR      r0,[r6,#0x39c]        ;273
00071e  42b8              CMP      r0,r7                 ;273
000720  d303              BCC      |L1.1834|
000722  f8d603a0          LDR      r0,[r6,#0x3a0]        ;273
000726  4548              CMP      r0,r9                 ;273
000728  d203              BCS      |L1.1842|
                  |L1.1834|
00072a  a1ab              ADR      r1,|L1.2520|
00072c  4630              MOV      r0,r6                 ;274
00072e  f7fffffe          BL       png_error
                  |L1.1842|
000732  f1b74f00          CMP      r7,#0x80000000        ;279
000736  d202              BCS      |L1.1854|
000738  f1b94f00          CMP      r9,#0x80000000        ;279
00073c  d303              BCC      |L1.1862|
                  |L1.1854|
00073e  a1b0              ADR      r1,|L1.2560|
000740  4630              MOV      r0,r6                 ;280
000742  f7fffffe          BL       png_error
                  |L1.1862|
000746  48b5              LDR      r0,|L1.2588|
000748  4287              CMP      r7,r0                 ;281
00074a  d903              BLS      |L1.1876|
00074c  a1b4              ADR      r1,|L1.2592|
00074e  4630              MOV      r0,r6                 ;287
000750  f7fffffe          BL       png_warning
                  |L1.1876|
000754  f1b80f01          CMP      r8,#1                 ;290
000758  d00f              BEQ      |L1.1914|
00075a  f1b80f02          CMP      r8,#2                 ;290
00075e  d00c              BEQ      |L1.1914|
000760  f1b80f04          CMP      r8,#4                 ;290
000764  d009              BEQ      |L1.1914|
000766  f1b80f08          CMP      r8,#8                 ;291
00076a  d006              BEQ      |L1.1914|
00076c  f1b80f10          CMP      r8,#0x10              ;291
000770  d003              BEQ      |L1.1914|
000772  a1b7              ADR      r1,|L1.2640|
000774  4630              MOV      r0,r6                 ;292
000776  f7fffffe          BL       png_error
                  |L1.1914|
00077a  2d00              CMP      r5,#0                 ;294
00077c  db05              BLT      |L1.1930|
00077e  2d01              CMP      r5,#1                 ;294
000780  d003              BEQ      |L1.1930|
000782  2d05              CMP      r5,#5                 ;295
000784  d001              BEQ      |L1.1930|
000786  2d06              CMP      r5,#6                 ;295
000788  dd03              BLE      |L1.1938|
                  |L1.1930|
00078a  a1b8              ADR      r1,|L1.2668|
00078c  4630              MOV      r0,r6                 ;296
00078e  f7fffffe          BL       png_error
                  |L1.1938|
000792  2d03              CMP      r5,#3                 ;298
000794  d102              BNE      |L1.1948|
000796  f1b80f08          CMP      r8,#8                 ;298
00079a  dc08              BGT      |L1.1966|
                  |L1.1948|
00079c  2d02              CMP      r5,#2                 ;299
00079e  d003              BEQ      |L1.1960|
0007a0  2d04              CMP      r5,#4                 ;300
0007a2  d001              BEQ      |L1.1960|
0007a4  2d06              CMP      r5,#6                 ;301
0007a6  d106              BNE      |L1.1974|
                  |L1.1960|
0007a8  f1b80f08          CMP      r8,#8                 ;301
0007ac  da03              BGE      |L1.1974|
                  |L1.1966|
0007ae  a1b6              ADR      r1,|L1.2696|
0007b0  4630              MOV      r0,r6                 ;302
0007b2  f7fffffe          BL       png_error
                  |L1.1974|
0007b6  f1bb0f02          CMP      r11,#2                ;304
0007ba  db03              BLT      |L1.1988|
0007bc  a1bf              ADR      r1,|L1.2748|
0007be  4630              MOV      r0,r6                 ;305
0007c0  f7fffffe          BL       png_error
                  |L1.1988|
0007c4  980d              LDR      r0,[sp,#0x34]         ;307
0007c6  b118              CBZ      r0,|L1.2000|
0007c8  a1c5              ADR      r1,|L1.2784|
0007ca  4630              MOV      r0,r6                 ;308
0007cc  f7fffffe          BL       png_error
                  |L1.2000|
0007d0  f8b601a8          LDRH     r0,[r6,#0x1a8]        ;320
0007d4  f4005080          AND      r0,r0,#0x1000         ;320
0007d8  b130              CBZ      r0,|L1.2024|
0007da  f8d6036c          LDR      r0,[r6,#0x36c]        ;320
0007de  b118              CBZ      r0,|L1.2024|
0007e0  a1c8              ADR      r1,|L1.2820|
0007e2  4630              MOV      r0,r6                 ;321
0007e4  f7fffffe          BL       png_warning
                  |L1.2024|
0007e8  f1ba0f00          CMP      r10,#0                ;322
0007ec  d01d              BEQ      |L1.2090|
0007ee  f896036c          LDRB     r0,[r6,#0x36c]        ;324
0007f2  f0000004          AND      r0,r0,#4              ;324
0007f6  b158              CBZ      r0,|L1.2064|
0007f8  f1ba0f40          CMP      r10,#0x40             ;324
0007fc  d108              BNE      |L1.2064|
0007fe  f8b601a8          LDRH     r0,[r6,#0x1a8]        ;324
000802  f4005080          AND      r0,r0,#0x1000         ;324
000806  b918              CBNZ     r0,|L1.2064|
000808  2d02              CMP      r5,#2                 ;324
00080a  d005              BEQ      |L1.2072|
00080c  2d06              CMP      r5,#6                 ;324
00080e  d003              BEQ      |L1.2072|
                  |L1.2064|
000810  a1c9              ADR      r1,|L1.2872|
000812  4630              MOV      r0,r6                 ;329
000814  f7fffffe          BL       png_error
                  |L1.2072|
000818  f8b601a8          LDRH     r0,[r6,#0x1a8]        ;330
00081c  f4005080          AND      r0,r0,#0x1000         ;330
000820  b118              CBZ      r0,|L1.2090|
000822  a1cd              ADR      r1,|L1.2904|
000824  4630              MOV      r0,r6                 ;331
000826  f7fffffe          BL       png_warning
                  |L1.2090|
00082a  6027              STR      r7,[r4,#0]            ;338
00082c  f8c49004          STR      r9,[r4,#4]            ;339
000830  f8848018          STRB     r8,[r4,#0x18]         ;340
000834  7665              STRB     r5,[r4,#0x19]         ;341
000836  980d              LDR      r0,[sp,#0x34]         ;342
000838  76a0              STRB     r0,[r4,#0x1a]         ;342
00083a  f884a01b          STRB     r10,[r4,#0x1b]        ;343
00083e  f884b01c          STRB     r11,[r4,#0x1c]        ;344
000842  7e60              LDRB     r0,[r4,#0x19]         ;345
000844  2803              CMP      r0,#3                 ;345
000846  d102              BNE      |L1.2126|
000848  2001              MOVS     r0,#1                 ;346
00084a  7760              STRB     r0,[r4,#0x1d]         ;346
00084c  e008              B        |L1.2144|
                  |L1.2126|
00084e  7e60              LDRB     r0,[r4,#0x19]         ;347
000850  f0000002          AND      r0,r0,#2              ;347
000854  b110              CBZ      r0,|L1.2140|
000856  2003              MOVS     r0,#3                 ;348
000858  7760              STRB     r0,[r4,#0x1d]         ;348
00085a  e001              B        |L1.2144|
                  |L1.2140|
00085c  2001              MOVS     r0,#1                 ;350
00085e  7760              STRB     r0,[r4,#0x1d]         ;350
                  |L1.2144|
000860  7e60              LDRB     r0,[r4,#0x19]         ;351
000862  f0000004          AND      r0,r0,#4              ;351
000866  b110              CBZ      r0,|L1.2158|
000868  7f60              LDRB     r0,[r4,#0x1d]         ;352
00086a  1c40              ADDS     r0,r0,#1              ;352
00086c  7760              STRB     r0,[r4,#0x1d]         ;352
                  |L1.2158|
00086e  7f60              LDRB     r0,[r4,#0x1d]         ;353
000870  7e21              LDRB     r1,[r4,#0x18]         ;353
000872  4348              MULS     r0,r1,r0              ;353
000874  77a0              STRB     r0,[r4,#0x1e]         ;353
000876  4869              LDR      r0,|L1.2588|
000878  4287              CMP      r7,r0                 ;356
00087a  d902              BLS      |L1.2178|
00087c  2000              MOVS     r0,#0                 ;362
00087e  60e0              STR      r0,[r4,#0xc]          ;362
000880  e00b              B        |L1.2202|
                  |L1.2178|
000882  7fa0              LDRB     r0,[r4,#0x1e]         ;364
000884  2808              CMP      r0,#8                 ;364
000886  db03              BLT      |L1.2192|
000888  7fa0              LDRB     r0,[r4,#0x1e]         ;364
00088a  08c0              LSRS     r0,r0,#3              ;364
00088c  4378              MULS     r0,r7,r0              ;364
00088e  e003              B        |L1.2200|
                  |L1.2192|
000890  7fa0              LDRB     r0,[r4,#0x1e]         ;364
000892  4378              MULS     r0,r7,r0              ;364
000894  1dc0              ADDS     r0,r0,#7              ;364
000896  08c0              LSRS     r0,r0,#3              ;364
                  |L1.2200|
000898  60e0              STR      r0,[r4,#0xc]          ;364
                  |L1.2202|
00089a  bf00              NOP      
00089c  e733              B        |L1.1798|
;;;366    
                          ENDP

                  png_set_oFFs PROC
;;;368    void PNGAPI
;;;369    png_set_oFFs(png_structp png_ptr, png_infop info_ptr,
00089e  b530              PUSH     {r4,r5,lr}
;;;370       png_int_32 offset_x, png_int_32 offset_y, int unit_type)
;;;371    {
0008a0  9c03              LDR      r4,[sp,#0xc]
;;;372       png_debug1(1, "in %s storage function\n", "oFFs");
;;;373       if (png_ptr == NULL || info_ptr == NULL)
0008a2  b100              CBZ      r0,|L1.2214|
0008a4  b901              CBNZ     r1,|L1.2216|
                  |L1.2214|
;;;374          return;
;;;375    
;;;376       info_ptr->x_offset = offset_x;
;;;377       info_ptr->y_offset = offset_y;
;;;378       info_ptr->offset_unit_type = (png_byte)unit_type;
;;;379       info_ptr->valid |= PNG_INFO_oFFs;
;;;380    }
0008a6  bd30              POP      {r4,r5,pc}
                  |L1.2216|
0008a8  664a              STR      r2,[r1,#0x64]         ;376
0008aa  668b              STR      r3,[r1,#0x68]         ;377
0008ac  f881406c          STRB     r4,[r1,#0x6c]         ;378
0008b0  688d              LDR      r5,[r1,#8]            ;379
0008b2  f4457580          ORR      r5,r5,#0x100          ;379
0008b6  608d              STR      r5,[r1,#8]            ;379
0008b8  bf00              NOP      
0008ba  e7f4              B        |L1.2214|
;;;381    #endif
                          ENDP

                  png_set_pCAL PROC
;;;384    void PNGAPI
;;;385    png_set_pCAL(png_structp png_ptr, png_infop info_ptr,
0008bc  e92d5ff0          PUSH     {r4-r12,lr}
;;;386       png_charp purpose, png_int_32 X0, png_int_32 X1, int type, int nparams,
;;;387       png_charp units, png_charpp params)
;;;388    {
0008c0  4681              MOV      r9,r0
0008c2  460c              MOV      r4,r1
0008c4  4617              MOV      r7,r2
0008c6  469a              MOV      r10,r3
0008c8  e9dd6b0c          LDRD     r6,r11,[sp,#0x30]
;;;389       png_uint_32 length;
;;;390       int i;
;;;391    
;;;392       png_debug1(1, "in %s storage function\n", "pCAL");
;;;393       if (png_ptr == NULL || info_ptr == NULL)
0008cc  f1b90f00          CMP      r9,#0
0008d0  d000              BEQ      |L1.2260|
0008d2  b90c              CBNZ     r4,|L1.2264|
                  |L1.2260|
;;;394          return;
;;;395    
;;;396       length = png_strlen(purpose) + 1;
;;;397       png_debug1(3, "allocating purpose for info (%lu bytes)\n", length);
;;;398       info_ptr->pcal_purpose = (png_charp)png_malloc_warn(png_ptr, length);
;;;399       if (info_ptr->pcal_purpose == NULL)
;;;400         {
;;;401           png_warning(png_ptr, "Insufficient memory for pCAL purpose.");
;;;402           return;
;;;403         }
;;;404       png_memcpy(info_ptr->pcal_purpose, purpose, (png_size_t)length);
;;;405    
;;;406       png_debug(3, "storing X0, X1, type, and nparams in info\n");
;;;407       info_ptr->pcal_X0 = X0;
;;;408       info_ptr->pcal_X1 = X1;
;;;409       info_ptr->pcal_type = (png_byte)type;
;;;410       info_ptr->pcal_nparams = (png_byte)nparams;
;;;411    
;;;412       length = png_strlen(units) + 1;
;;;413       png_debug1(3, "allocating units for info (%lu bytes)\n", length);
;;;414       info_ptr->pcal_units = (png_charp)png_malloc_warn(png_ptr, length);
;;;415       if (info_ptr->pcal_units == NULL)
;;;416         {
;;;417           png_warning(png_ptr, "Insufficient memory for pCAL units.");
;;;418           return;
;;;419         }
;;;420       png_memcpy(info_ptr->pcal_units, units, (png_size_t)length);
;;;421    
;;;422       info_ptr->pcal_params = (png_charpp)png_malloc_warn(png_ptr,
;;;423          (png_uint_32)((nparams + 1) * png_sizeof(png_charp)));
;;;424       if (info_ptr->pcal_params == NULL)
;;;425         {
;;;426           png_warning(png_ptr, "Insufficient memory for pCAL params.");
;;;427           return;
;;;428         }
;;;429    
;;;430       info_ptr->pcal_params[nparams] = NULL;
;;;431    
;;;432       for (i = 0; i < nparams; i++)
;;;433       {
;;;434          length = png_strlen(params[i]) + 1;
;;;435          png_debug2(3, "allocating parameter %d for info (%lu bytes)\n", i, length);
;;;436          info_ptr->pcal_params[i] = (png_charp)png_malloc_warn(png_ptr, length);
;;;437          if (info_ptr->pcal_params[i] == NULL)
;;;438            {
;;;439              png_warning(png_ptr, "Insufficient memory for pCAL parameter.");
;;;440              return;
;;;441            }
;;;442          png_memcpy(info_ptr->pcal_params[i], params[i], (png_size_t)length);
;;;443       }
;;;444    
;;;445       info_ptr->valid |= PNG_INFO_pCAL;
;;;446    #ifdef PNG_FREE_ME_SUPPORTED
;;;447       info_ptr->free_me |= PNG_FREE_PCAL;
;;;448    #endif
;;;449    }
0008d4  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.2264|
0008d8  4638              MOV      r0,r7                 ;396
0008da  f7fffffe          BL       strlen
0008de  f1000801          ADD      r8,r0,#1              ;396
0008e2  4641              MOV      r1,r8                 ;398
0008e4  4648              MOV      r0,r9                 ;398
0008e6  f7fffffe          BL       png_malloc_warn
0008ea  f8c400a0          STR      r0,[r4,#0xa0]         ;398
0008ee  f8d400a0          LDR      r0,[r4,#0xa0]         ;399
0008f2  b900              CBNZ     r0,|L1.2294|
0008f4  e140              B        |L1.2936|
                  |L1.2294|
0008f6  e144              B        |L1.2946|
                  |L1.2296|
                          DCD      0x40f86a00
                  |L1.2300|
                          DCD      0x1eb851ec
                  |L1.2304|
                          DCD      0x40d4f8b5
                  |L1.2308|
000904  4c696d69          DCB      "Limiting gamma to 21474.83",0
000908  74696e67
00090c  2067616d
000910  6d612074
000914  6f203231
000918  3437342e
00091c  383300  
00091f  00                DCB      0
                  |L1.2336|
                          DCD      0x3fe00000
                  |L1.2340|
000924  53657474          DCB      "Setting gamma=0",0
000928  696e6720
00092c  67616d6d
000930  613d3000
                  |L1.2356|
000934  53657474          DCB      "Setting negative gamma to zero",0
000938  696e6720
00093c  6e656761
000940  74697665
000944  2067616d
000948  6d612074
00094c  6f207a65
000950  726f00  
000953  00                DCB      0
                  |L1.2388|
000954  496e7661          DCB      "Invalid palette size, hIST allocation skipped.",0
000958  6c696420
00095c  70616c65
000960  74746520
000964  73697a65
000968  2c206849
00096c  53542061
000970  6c6c6f63
000974  6174696f
000978  6e20736b
00097c  69707065
000980  642e00  
000983  00                DCB      0
                  |L1.2436|
000984  496e7375          DCB      "Insufficient memory for hIST chunk data.",0
000988  66666963
00098c  69656e74
000990  206d656d
000994  6f727920
000998  666f7220
00099c  68495354
0009a0  20636875
0009a4  6e6b2064
0009a8  6174612e
0009ac  00      
0009ad  00                DCB      0
0009ae  00                DCB      0
0009af  00                DCB      0
                  |L1.2480|
0009b0  496d6167          DCB      "Image width or height is zero in IHDR",0
0009b4  65207769
0009b8  64746820
0009bc  6f722068
0009c0  65696768
0009c4  74206973
0009c8  207a6572
0009cc  6f20696e
0009d0  20494844
0009d4  5200    
0009d6  00                DCB      0
0009d7  00                DCB      0
                  |L1.2520|
0009d8  696d6167          DCB      "image size exceeds user limits in IHDR",0
0009dc  65207369
0009e0  7a652065
0009e4  78636565
0009e8  64732075
0009ec  73657220
0009f0  6c696d69
0009f4  74732069
0009f8  6e204948
0009fc  445200  
0009ff  00                DCB      0
                  |L1.2560|
000a00  496e7661          DCB      "Invalid image size in IHDR",0
000a04  6c696420
000a08  696d6167
000a0c  65207369
000a10  7a652069
000a14  6e204948
000a18  445200  
000a1b  00                DCB      0
                  |L1.2588|
                          DCD      0x1fffff7e
                  |L1.2592|
000a20  57696474          DCB      "Width is too large for libpng to process pixels",0
000a24  68206973
000a28  20746f6f
000a2c  206c6172
000a30  67652066
000a34  6f72206c
000a38  6962706e
000a3c  6720746f
000a40  2070726f
000a44  63657373
000a48  20706978
000a4c  656c7300
                  |L1.2640|
000a50  496e7661          DCB      "Invalid bit depth in IHDR",0
000a54  6c696420
000a58  62697420
000a5c  64657074
000a60  6820696e
000a64  20494844
000a68  5200    
000a6a  00                DCB      0
000a6b  00                DCB      0
                  |L1.2668|
000a6c  496e7661          DCB      "Invalid color type in IHDR",0
000a70  6c696420
000a74  636f6c6f
000a78  72207479
000a7c  70652069
000a80  6e204948
000a84  445200  
000a87  00                DCB      0
                  |L1.2696|
000a88  496e7661          DCB      "Invalid color type/bit depth combination in IHDR",0
000a8c  6c696420
000a90  636f6c6f
000a94  72207479
000a98  70652f62
000a9c  69742064
000aa0  65707468
000aa4  20636f6d
000aa8  62696e61
000aac  74696f6e
000ab0  20696e20
000ab4  49484452
000ab8  00      
000ab9  00                DCB      0
000aba  00                DCB      0
000abb  00                DCB      0
                  |L1.2748|
000abc  556e6b6e          DCB      "Unknown interlace method in IHDR",0
000ac0  6f776e20
000ac4  696e7465
000ac8  726c6163
000acc  65206d65
000ad0  74686f64
000ad4  20696e20
000ad8  49484452
000adc  00      
000add  00                DCB      0
000ade  00                DCB      0
000adf  00                DCB      0
                  |L1.2784|
000ae0  556e6b6e          DCB      "Unknown compression method in IHDR",0
000ae4  6f776e20
000ae8  636f6d70
000aec  72657373
000af0  696f6e20
000af4  6d657468
000af8  6f642069
000afc  6e204948
000b00  445200  
000b03  00                DCB      0
                  |L1.2820|
000b04  4d4e4720          DCB      "MNG features are not allowed in a PNG datastream",0
000b08  66656174
000b0c  75726573
000b10  20617265
000b14  206e6f74
000b18  20616c6c
000b1c  6f776564
000b20  20696e20
000b24  6120504e
000b28  47206461
000b2c  74617374
000b30  7265616d
000b34  00      
000b35  00                DCB      0
000b36  00                DCB      0
000b37  00                DCB      0
                  |L1.2872|
000b38  556e6b6e          DCB      "Unknown filter method in IHDR",0
000b3c  6f776e20
000b40  66696c74
000b44  6572206d
000b48  6574686f
000b4c  6420696e
000b50  20494844
000b54  5200    
000b56  00                DCB      0
000b57  00                DCB      0
                  |L1.2904|
000b58  496e7661          DCB      "Invalid filter method in IHDR",0
000b5c  6c696420
000b60  66696c74
000b64  6572206d
000b68  6574686f
000b6c  6420696e
000b70  20494844
000b74  5200    
000b76  00                DCB      0
000b77  00                DCB      0
                  |L1.2936|
000b78  a1fd              ADR      r1,|L1.3952|
000b7a  4648              MOV      r0,r9                 ;401
000b7c  f7fffffe          BL       png_warning
000b80  e6a8              B        |L1.2260|
                  |L1.2946|
000b82  f8540fa0          LDR      r0,[r4,#0xa0]!        ;404
000b86  4642              MOV      r2,r8                 ;404
000b88  4639              MOV      r1,r7                 ;404
000b8a  f7fffffe          BL       __aeabi_memcpy
000b8e  f8c4a004          STR      r10,[r4,#4]           ;407
000b92  980a              LDR      r0,[sp,#0x28]         ;408
000b94  60a0              STR      r0,[r4,#8]            ;408
000b96  980b              LDR      r0,[sp,#0x2c]         ;409
000b98  7520              STRB     r0,[r4,#0x14]         ;409
000b9a  7566              STRB     r6,[r4,#0x15]         ;410
000b9c  4658              MOV      r0,r11                ;412
000b9e  f7fffffe          BL       strlen
000ba2  f1000801          ADD      r8,r0,#1              ;412
000ba6  4641              MOV      r1,r8                 ;414
000ba8  4648              MOV      r0,r9                 ;414
000baa  f7fffffe          BL       png_malloc_warn
000bae  60e0              STR      r0,[r4,#0xc]          ;414
000bb0  68e0              LDR      r0,[r4,#0xc]          ;415
000bb2  3ca0              SUBS     r4,r4,#0xa0           ;415
000bb4  b920              CBNZ     r0,|L1.3008|
000bb6  a1f8              ADR      r1,|L1.3992|
000bb8  4648              MOV      r0,r9                 ;417
000bba  f7fffffe          BL       png_warning
000bbe  e689              B        |L1.2260|
                  |L1.3008|
000bc0  f8540fac          LDR      r0,[r4,#0xac]!        ;420
000bc4  4642              MOV      r2,r8                 ;420
000bc6  4659              MOV      r1,r11                ;420
000bc8  f7fffffe          BL       __aeabi_memcpy
000bcc  1c70              ADDS     r0,r6,#1              ;422
000bce  0081              LSLS     r1,r0,#2              ;422
000bd0  4648              MOV      r0,r9                 ;422
000bd2  f7fffffe          BL       png_malloc_warn
000bd6  6060              STR      r0,[r4,#4]            ;422
000bd8  6860              LDR      r0,[r4,#4]            ;424
000bda  3cac              SUBS     r4,r4,#0xac           ;424
000bdc  b920              CBNZ     r0,|L1.3048|
000bde  a1f7              ADR      r1,|L1.4028|
000be0  4648              MOV      r0,r9                 ;426
000be2  f7fffffe          BL       png_warning
000be6  e675              B        |L1.2260|
                  |L1.3048|
000be8  2000              MOVS     r0,#0                 ;430
000bea  f8d410b0          LDR      r1,[r4,#0xb0]         ;430
000bee  f8410026          STR      r0,[r1,r6,LSL #2]     ;430
000bf2  2500              MOVS     r5,#0                 ;432
000bf4  e023              B        |L1.3134|
                  |L1.3062|
000bf6  990e              LDR      r1,[sp,#0x38]         ;434
000bf8  f8510025          LDR      r0,[r1,r5,LSL #2]     ;434
000bfc  f7fffffe          BL       strlen
000c00  f1000801          ADD      r8,r0,#1              ;434
000c04  4641              MOV      r1,r8                 ;436
000c06  4648              MOV      r0,r9                 ;436
000c08  f7fffffe          BL       png_malloc_warn
000c0c  f8d410b0          LDR      r1,[r4,#0xb0]         ;436
000c10  f8410025          STR      r0,[r1,r5,LSL #2]     ;436
000c14  f8d400b0          LDR      r0,[r4,#0xb0]         ;437
000c18  f8500025          LDR      r0,[r0,r5,LSL #2]     ;437
000c1c  b920              CBNZ     r0,|L1.3112|
000c1e  a1f1              ADR      r1,|L1.4068|
000c20  4648              MOV      r0,r9                 ;439
000c22  f7fffffe          BL       png_warning
000c26  e655              B        |L1.2260|
                  |L1.3112|
000c28  f8d420b0          LDR      r2,[r4,#0xb0]         ;442
000c2c  f8520025          LDR      r0,[r2,r5,LSL #2]     ;442
000c30  9a0e              LDR      r2,[sp,#0x38]         ;442
000c32  f8521025          LDR      r1,[r2,r5,LSL #2]     ;442
000c36  4642              MOV      r2,r8                 ;442
000c38  f7fffffe          BL       __aeabi_memcpy
000c3c  1c6d              ADDS     r5,r5,#1              ;432
                  |L1.3134|
000c3e  42b5              CMP      r5,r6                 ;432
000c40  dbd9              BLT      |L1.3062|
000c42  68a0              LDR      r0,[r4,#8]            ;445
000c44  f4406080          ORR      r0,r0,#0x400          ;445
000c48  60a0              STR      r0,[r4,#8]            ;445
000c4a  f8d400b8          LDR      r0,[r4,#0xb8]         ;447
000c4e  f0400080          ORR      r0,r0,#0x80           ;447
000c52  f8c400b8          STR      r0,[r4,#0xb8]         ;447
000c56  bf00              NOP      
000c58  e63c              B        |L1.2260|
;;;450    #endif
                          ENDP

                  png_set_sCAL PROC
;;;454    void PNGAPI
;;;455    png_set_sCAL(png_structp png_ptr, png_infop info_ptr,
000c5a  b5f0              PUSH     {r4-r7,lr}
;;;456                 int unit, double width, double height)
;;;457    {
000c5c  ab05              ADD      r3,sp,#0x14
000c5e  cb78              LDM      r3,{r3-r6}
;;;458       png_debug1(1, "in %s storage function\n", "sCAL");
;;;459       if (png_ptr == NULL || info_ptr == NULL)
000c60  b100              CBZ      r0,|L1.3172|
000c62  b901              CBNZ     r1,|L1.3174|
                  |L1.3172|
;;;460          return;
;;;461    
;;;462       info_ptr->scal_unit = (png_byte)unit;
;;;463       info_ptr->scal_pixel_width = width;
;;;464       info_ptr->scal_pixel_height = height;
;;;465    
;;;466       info_ptr->valid |= PNG_INFO_sCAL;
;;;467    }
000c64  bdf0              POP      {r4-r7,pc}
                  |L1.3174|
000c66  f8012fdc          STRB     r2,[r1,#0xdc]!        ;462
000c6a  e9c13401          STRD     r3,r4,[r1,#4]         ;463
000c6e  e9c15603          STRD     r5,r6,[r1,#0xc]       ;464
000c72  f8517cd4          LDR      r7,[r1,#-0xd4]        ;466
000c76  f4474780          ORR      r7,r7,#0x4000         ;466
000c7a  f8417cd4          STR      r7,[r1,#-0xd4]        ;466
000c7e  39dc              SUBS     r1,r1,#0xdc           ;466
000c80  bf00              NOP      
000c82  e7ef              B        |L1.3172|
;;;468    #else
                          ENDP

                  png_set_pHYs PROC
;;;511    void PNGAPI
;;;512    png_set_pHYs(png_structp png_ptr, png_infop info_ptr,
000c84  b530              PUSH     {r4,r5,lr}
;;;513       png_uint_32 res_x, png_uint_32 res_y, int unit_type)
;;;514    {
000c86  9c03              LDR      r4,[sp,#0xc]
;;;515       png_debug1(1, "in %s storage function\n", "pHYs");
;;;516       if (png_ptr == NULL || info_ptr == NULL)
000c88  b100              CBZ      r0,|L1.3212|
000c8a  b901              CBNZ     r1,|L1.3214|
                  |L1.3212|
;;;517          return;
;;;518    
;;;519       info_ptr->x_pixels_per_unit = res_x;
;;;520       info_ptr->y_pixels_per_unit = res_y;
;;;521       info_ptr->phys_unit_type = (png_byte)unit_type;
;;;522       info_ptr->valid |= PNG_INFO_pHYs;
;;;523    }
000c8c  bd30              POP      {r4,r5,pc}
                  |L1.3214|
000c8e  670a              STR      r2,[r1,#0x70]         ;519
000c90  674b              STR      r3,[r1,#0x74]         ;520
000c92  f8814078          STRB     r4,[r1,#0x78]         ;521
000c96  688d              LDR      r5,[r1,#8]            ;522
000c98  f0450580          ORR      r5,r5,#0x80           ;522
000c9c  608d              STR      r5,[r1,#8]            ;522
000c9e  bf00              NOP      
000ca0  e7f4              B        |L1.3212|
;;;524    #endif
                          ENDP

                  png_set_PLTE PROC
;;;526    void PNGAPI
;;;527    png_set_PLTE(png_structp png_ptr, png_infop info_ptr,
000ca2  e92d41f0          PUSH     {r4-r8,lr}
;;;528       png_colorp palette, int num_palette)
;;;529    {
000ca6  4605              MOV      r5,r0
000ca8  460c              MOV      r4,r1
000caa  4617              MOV      r7,r2
000cac  461e              MOV      r6,r3
;;;530    
;;;531       png_debug1(1, "in %s storage function\n", "PLTE");
;;;532       if (png_ptr == NULL || info_ptr == NULL)
000cae  b105              CBZ      r5,|L1.3250|
000cb0  b90c              CBNZ     r4,|L1.3254|
                  |L1.3250|
;;;533          return;
;;;534    
;;;535       if (num_palette < 0 || num_palette > PNG_MAX_PALETTE_LENGTH)
;;;536         {
;;;537           if (info_ptr->color_type == PNG_COLOR_TYPE_PALETTE)
;;;538             png_error(png_ptr, "Invalid palette length");
;;;539           else
;;;540           {
;;;541             png_warning(png_ptr, "Invalid palette length");
;;;542             return;
;;;543           }
;;;544         }
;;;545    
;;;546       /*
;;;547        * It may not actually be necessary to set png_ptr->palette here;
;;;548        * we do it for backward compatibility with the way the png_handle_tRNS
;;;549        * function used to do the allocation.
;;;550        */
;;;551    #ifdef PNG_FREE_ME_SUPPORTED
;;;552       png_free_data(png_ptr, info_ptr, PNG_FREE_PLTE, 0);
;;;553    #endif
;;;554    
;;;555       /* Changed in libpng-1.2.1 to allocate PNG_MAX_PALETTE_LENGTH instead
;;;556          of num_palette entries,
;;;557          in case of an invalid PNG file that has too-large sample values. */
;;;558       png_ptr->palette = (png_colorp)png_malloc(png_ptr,
;;;559          PNG_MAX_PALETTE_LENGTH * png_sizeof(png_color));
;;;560       png_memset(png_ptr->palette, 0, PNG_MAX_PALETTE_LENGTH *
;;;561          png_sizeof(png_color));
;;;562       png_memcpy(png_ptr->palette, palette, num_palette * png_sizeof (png_color));
;;;563       info_ptr->palette = png_ptr->palette;
;;;564       info_ptr->num_palette = png_ptr->num_palette = (png_uint_16)num_palette;
;;;565    
;;;566    #ifdef PNG_FREE_ME_SUPPORTED
;;;567       info_ptr->free_me |= PNG_FREE_PLTE;
;;;568    #else
;;;569       png_ptr->flags |= PNG_FLAG_FREE_PLTE;
;;;570    #endif
;;;571    
;;;572       info_ptr->valid |= PNG_INFO_PLTE;
;;;573    }
000cb2  e8bd81f0          POP      {r4-r8,pc}
                  |L1.3254|
000cb6  2e00              CMP      r6,#0                 ;535
000cb8  db02              BLT      |L1.3264|
000cba  f5b67f80          CMP      r6,#0x100             ;535
000cbe  dd0c              BLE      |L1.3290|
                  |L1.3264|
000cc0  7e60              LDRB     r0,[r4,#0x19]         ;537
000cc2  2803              CMP      r0,#3                 ;537
000cc4  d104              BNE      |L1.3280|
000cc6  a1d1              ADR      r1,|L1.4108|
000cc8  4628              MOV      r0,r5                 ;538
000cca  f7fffffe          BL       png_error
000cce  e004              B        |L1.3290|
                  |L1.3280|
000cd0  a1ce              ADR      r1,|L1.4108|
000cd2  4628              MOV      r0,r5                 ;541
000cd4  f7fffffe          BL       png_warning
000cd8  e7eb              B        |L1.3250|
                  |L1.3290|
000cda  2300              MOVS     r3,#0                 ;552
000cdc  f44f5280          MOV      r2,#0x1000            ;552
000ce0  4621              MOV      r1,r4                 ;552
000ce2  4628              MOV      r0,r5                 ;552
000ce4  f7fffffe          BL       png_free_data
000ce8  f44f7140          MOV      r1,#0x300             ;558
000cec  4628              MOV      r0,r5                 ;558
000cee  f7fffffe          BL       png_malloc
000cf2  f5057515          ADD      r5,r5,#0x254          ;558
000cf6  6028              STR      r0,[r5,#0]            ;558
000cf8  f44f7140          MOV      r1,#0x300             ;560
000cfc  6828              LDR      r0,[r5,#0]            ;560
000cfe  f7fffffe          BL       __aeabi_memclr
000d02  eb060246          ADD      r2,r6,r6,LSL #1       ;562
000d06  4639              MOV      r1,r7                 ;562
000d08  6828              LDR      r0,[r5,#0]            ;562
000d0a  f7fffffe          BL       __aeabi_memcpy
000d0e  6828              LDR      r0,[r5,#0]            ;563
000d10  6120              STR      r0,[r4,#0x10]         ;563
000d12  b2b0              UXTH     r0,r6                 ;564
000d14  80a8              STRH     r0,[r5,#4]            ;564
000d16  f5a57515          SUB      r5,r5,#0x254          ;564
000d1a  82a0              STRH     r0,[r4,#0x14]         ;564
000d1c  f8d400b8          LDR      r0,[r4,#0xb8]         ;567
000d20  f4405080          ORR      r0,r0,#0x1000         ;567
000d24  f8c400b8          STR      r0,[r4,#0xb8]         ;567
000d28  68a0              LDR      r0,[r4,#8]            ;572
000d2a  f0400008          ORR      r0,r0,#8              ;572
000d2e  60a0              STR      r0,[r4,#8]            ;572
000d30  bf00              NOP      
000d32  e7be              B        |L1.3250|
;;;574    
                          ENDP

                  png_set_sBIT PROC
;;;576    void PNGAPI
;;;577    png_set_sBIT(png_structp png_ptr, png_infop info_ptr,
000d34  b100              CBZ      r0,|L1.3384|
;;;578       png_color_8p sig_bit)
;;;579    {
;;;580       png_debug1(1, "in %s storage function\n", "sBIT");
;;;581       if (png_ptr == NULL || info_ptr == NULL)
000d36  b901              CBNZ     r1,|L1.3386|
                  |L1.3384|
;;;582          return;
;;;583    
;;;584       png_memcpy(&(info_ptr->sig_bit), sig_bit, png_sizeof (png_color_8));
;;;585       info_ptr->valid |= PNG_INFO_sBIT;
;;;586    }
000d38  4770              BX       lr
                  |L1.3386|
000d3a  6813              LDR      r3,[r2,#0]            ;584
000d3c  644b              STR      r3,[r1,#0x44]         ;584
000d3e  7913              LDRB     r3,[r2,#4]            ;584
000d40  f8813048          STRB     r3,[r1,#0x48]         ;584
000d44  688b              LDR      r3,[r1,#8]            ;585
000d46  f0430302          ORR      r3,r3,#2              ;585
000d4a  608b              STR      r3,[r1,#8]            ;585
000d4c  bf00              NOP      
000d4e  e7f3              B        |L1.3384|
;;;587    #endif
                          ENDP

                  png_set_sRGB PROC
;;;590    void PNGAPI
;;;591    png_set_sRGB(png_structp png_ptr, png_infop info_ptr, int intent)
000d50  b100              CBZ      r0,|L1.3412|
;;;592    {
;;;593       png_debug1(1, "in %s storage function\n", "sRGB");
;;;594       if (png_ptr == NULL || info_ptr == NULL)
000d52  b901              CBNZ     r1,|L1.3414|
                  |L1.3412|
;;;595          return;
;;;596    
;;;597       info_ptr->srgb_intent = (png_byte)intent;
;;;598       info_ptr->valid |= PNG_INFO_sRGB;
;;;599    }
000d54  4770              BX       lr
                  |L1.3414|
000d56  f881202c          STRB     r2,[r1,#0x2c]         ;597
000d5a  688b              LDR      r3,[r1,#8]            ;598
000d5c  f4436300          ORR      r3,r3,#0x800          ;598
000d60  608b              STR      r3,[r1,#8]            ;598
000d62  bf00              NOP      
000d64  e7f6              B        |L1.3412|
;;;600    
                          ENDP

                  png_set_sRGB_gAMA_and_cHRM PROC
;;;601    void PNGAPI
;;;602    png_set_sRGB_gAMA_and_cHRM(png_structp png_ptr, png_infop info_ptr,
000d66  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;603       int intent)
;;;604    {
000d6a  b0aa              SUB      sp,sp,#0xa8
000d6c  4604              MOV      r4,r0
000d6e  460d              MOV      r5,r1
;;;605    #if defined(PNG_gAMA_SUPPORTED)
;;;606    #ifdef PNG_FLOATING_POINT_SUPPORTED
;;;607       float file_gamma;
;;;608    #endif
;;;609    #ifdef PNG_FIXED_POINT_SUPPORTED
;;;610       png_fixed_point int_file_gamma;
;;;611    #endif
;;;612    #endif
;;;613    #if defined(PNG_cHRM_SUPPORTED)
;;;614    #ifdef PNG_FLOATING_POINT_SUPPORTED
;;;615       float white_x, white_y, red_x, red_y, green_x, green_y, blue_x, blue_y;
;;;616    #endif
;;;617    #ifdef PNG_FIXED_POINT_SUPPORTED
;;;618       png_fixed_point int_white_x, int_white_y, int_red_x, int_red_y, int_green_x,
;;;619          int_green_y, int_blue_x, int_blue_y;
;;;620    #endif
;;;621    #endif
;;;622       png_debug1(1, "in %s storage function\n", "sRGB_gAMA_and_cHRM");
;;;623       if (png_ptr == NULL || info_ptr == NULL)
000d70  b104              CBZ      r4,|L1.3444|
000d72  b915              CBNZ     r5,|L1.3450|
                  |L1.3444|
;;;624          return;
;;;625    
;;;626       png_set_sRGB(png_ptr, info_ptr, intent);
;;;627    
;;;628    #if defined(PNG_gAMA_SUPPORTED)
;;;629    #ifdef PNG_FLOATING_POINT_SUPPORTED
;;;630       file_gamma = (float).45455;
;;;631       png_set_gAMA(png_ptr, info_ptr, file_gamma);
;;;632    #endif
;;;633    #ifdef PNG_FIXED_POINT_SUPPORTED
;;;634       int_file_gamma = 45455L;
;;;635       png_set_gAMA_fixed(png_ptr, info_ptr, int_file_gamma);
;;;636    #endif
;;;637    #endif
;;;638    
;;;639    #if defined(PNG_cHRM_SUPPORTED)
;;;640    #ifdef PNG_FIXED_POINT_SUPPORTED
;;;641       int_white_x = 31270L;
;;;642       int_white_y = 32900L;
;;;643       int_red_x   = 64000L;
;;;644       int_red_y   = 33000L;
;;;645       int_green_x = 30000L;
;;;646       int_green_y = 60000L;
;;;647       int_blue_x  = 15000L;
;;;648       int_blue_y  =  6000L;
;;;649    
;;;650       png_set_cHRM_fixed(png_ptr, info_ptr,
;;;651          int_white_x, int_white_y, int_red_x, int_red_y, int_green_x, int_green_y,
;;;652          int_blue_x, int_blue_y);
;;;653    #endif
;;;654    #ifdef PNG_FLOATING_POINT_SUPPORTED
;;;655       white_x = (float).3127;
;;;656       white_y = (float).3290;
;;;657       red_x   = (float).64;
;;;658       red_y   = (float).33;
;;;659       green_x = (float).30;
;;;660       green_y = (float).60;
;;;661       blue_x  = (float).15;
;;;662       blue_y  = (float).06;
;;;663    
;;;664       png_set_cHRM(png_ptr, info_ptr,
;;;665          white_x, white_y, red_x, red_y, green_x, green_y, blue_x, blue_y);
;;;666    #endif
;;;667    #endif
;;;668    }
000d74  b02d              ADD      sp,sp,#0xb4
000d76  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.3450|
000d7a  4629              MOV      r1,r5                 ;626
000d7c  4620              MOV      r0,r4                 ;626
000d7e  9a2c              LDR      r2,[sp,#0xb0]         ;626
000d80  f7fffffe          BL       png_set_sRGB
000d84  4ea7              LDR      r6,|L1.4132|
000d86  4630              MOV      r0,r6                 ;631
000d88  f7fffffe          BL       __aeabi_f2d
000d8c  4602              MOV      r2,r0                 ;631
000d8e  460b              MOV      r3,r1                 ;631
000d90  e9cd011c          STRD     r0,r1,[sp,#0x70]      ;631
000d94  4629              MOV      r1,r5                 ;631
000d96  4620              MOV      r0,r4                 ;631
000d98  f7fffffe          BL       png_set_gAMA
000d9c  f24b178f          MOV      r7,#0xb18f            ;634
000da0  463a              MOV      r2,r7                 ;635
000da2  4629              MOV      r1,r5                 ;635
000da4  4620              MOV      r0,r4                 ;635
000da6  f7fffffe          BL       png_set_gAMA_fixed
000daa  f6472026          MOV      r0,#0x7a26            ;641
000dae  9021              STR      r0,[sp,#0x84]         ;641
000db0  f2480084          MOV      r0,#0x8084            ;642
000db4  9020              STR      r0,[sp,#0x80]         ;642
000db6  f44f417a          MOV      r1,#0xfa00            ;643
000dba  911f              STR      r1,[sp,#0x7c]         ;643
000dbc  f24800e8          MOV      r0,#0x80e8            ;644
000dc0  901e              STR      r0,[sp,#0x78]         ;644
000dc2  f2475830          MOV      r8,#0x7530            ;645
000dc6  f64e2960          MOV      r9,#0xea60            ;646
000dca  f6432a98          MOV      r10,#0x3a98           ;647
000dce  f2417b70          MOV      r11,#0x1770           ;648
000dd2  a802              ADD      r0,sp,#8              ;650
000dd4  e8a00f00          STM      r0!,{r8-r11}          ;650
000dd8  e9dd101e          LDRD     r1,r0,[sp,#0x78]      ;650
000ddc  e9cd0100          STRD     r0,r1,[sp,#0]         ;650
000de0  4629              MOV      r1,r5                 ;650
000de2  4620              MOV      r0,r4                 ;650
000de4  e9dd3220          LDRD     r3,r2,[sp,#0x80]      ;650
000de8  f7fffffe          BL       png_set_cHRM_fixed
000dec  488e              LDR      r0,|L1.4136|
000dee  9029              STR      r0,[sp,#0xa4]         ;655
000df0  488e              LDR      r0,|L1.4140|
000df2  9028              STR      r0,[sp,#0xa0]         ;656
000df4  488e              LDR      r0,|L1.4144|
000df6  9027              STR      r0,[sp,#0x9c]         ;657
000df8  488e              LDR      r0,|L1.4148|
000dfa  9026              STR      r0,[sp,#0x98]         ;658
000dfc  488e              LDR      r0,|L1.4152|
000dfe  9025              STR      r0,[sp,#0x94]         ;659
000e00  488e              LDR      r0,|L1.4156|
000e02  9024              STR      r0,[sp,#0x90]         ;660
000e04  488e              LDR      r0,|L1.4160|
000e06  9023              STR      r0,[sp,#0x8c]         ;661
000e08  488e              LDR      r0,|L1.4164|
000e0a  9022              STR      r0,[sp,#0x88]         ;662
000e0c  9822              LDR      r0,[sp,#0x88]         ;664
000e0e  f7fffffe          BL       __aeabi_f2d
000e12  e9cd011c          STRD     r0,r1,[sp,#0x70]      ;664
000e16  9823              LDR      r0,[sp,#0x8c]         ;664
000e18  f7fffffe          BL       __aeabi_f2d
000e1c  e9cd011a          STRD     r0,r1,[sp,#0x68]      ;664
000e20  9824              LDR      r0,[sp,#0x90]         ;664
000e22  f7fffffe          BL       __aeabi_f2d
000e26  e9cd0118          STRD     r0,r1,[sp,#0x60]      ;664
000e2a  9825              LDR      r0,[sp,#0x94]         ;664
000e2c  f7fffffe          BL       __aeabi_f2d
000e30  e9cd0116          STRD     r0,r1,[sp,#0x58]      ;664
000e34  9826              LDR      r0,[sp,#0x98]         ;664
000e36  f7fffffe          BL       __aeabi_f2d
000e3a  e9cd0114          STRD     r0,r1,[sp,#0x50]      ;664
000e3e  9827              LDR      r0,[sp,#0x9c]         ;664
000e40  f7fffffe          BL       __aeabi_f2d
000e44  e9cd0112          STRD     r0,r1,[sp,#0x48]      ;664
000e48  9828              LDR      r0,[sp,#0xa0]         ;664
000e4a  f7fffffe          BL       __aeabi_f2d
000e4e  e9cd0110          STRD     r0,r1,[sp,#0x40]      ;664
000e52  9829              LDR      r0,[sp,#0xa4]         ;664
000e54  f7fffffe          BL       __aeabi_f2d
000e58  e9cd010e          STRD     r0,r1,[sp,#0x38]      ;664
000e5c  e9dd011c          LDRD     r0,r1,[sp,#0x70]      ;664
000e60  e9cd010c          STRD     r0,r1,[sp,#0x30]      ;664
000e64  e9dd011a          LDRD     r0,r1,[sp,#0x68]      ;664
000e68  e9cd010a          STRD     r0,r1,[sp,#0x28]      ;664
000e6c  e9dd0118          LDRD     r0,r1,[sp,#0x60]      ;664
000e70  e9cd0108          STRD     r0,r1,[sp,#0x20]      ;664
000e74  e9dd0116          LDRD     r0,r1,[sp,#0x58]      ;664
000e78  e9cd0106          STRD     r0,r1,[sp,#0x18]      ;664
000e7c  e9dd0114          LDRD     r0,r1,[sp,#0x50]      ;664
000e80  e9cd0104          STRD     r0,r1,[sp,#0x10]      ;664
000e84  e9dd0112          LDRD     r0,r1,[sp,#0x48]      ;664
000e88  e9cd0102          STRD     r0,r1,[sp,#8]         ;664
000e8c  e9dd0110          LDRD     r0,r1,[sp,#0x40]      ;664
000e90  e9cd0100          STRD     r0,r1,[sp,#0]         ;664
000e94  4629              MOV      r1,r5                 ;664
000e96  4620              MOV      r0,r4                 ;664
000e98  e9dd230e          LDRD     r2,r3,[sp,#0x38]      ;664
000e9c  f7fffffe          BL       png_set_cHRM
000ea0  bf00              NOP      
000ea2  e767              B        |L1.3444|
;;;669    #endif
                          ENDP

                  png_set_iCCP PROC
;;;673    void PNGAPI
;;;674    png_set_iCCP(png_structp png_ptr, png_infop info_ptr,
000ea4  e92d4ff8          PUSH     {r3-r11,lr}
;;;675                 png_charp name, int compression_type,
;;;676                 png_charp profile, png_uint_32 proflen)
;;;677    {
000ea8  4681              MOV      r9,r0
000eaa  460c              MOV      r4,r1
000eac  4616              MOV      r6,r2
000eae  469a              MOV      r10,r3
000eb0  e9ddb80a          LDRD     r11,r8,[sp,#0x28]
;;;678       png_charp new_iccp_name;
;;;679       png_charp new_iccp_profile;
;;;680    
;;;681       png_debug1(1, "in %s storage function\n", "iCCP");
;;;682       if (png_ptr == NULL || info_ptr == NULL || name == NULL || profile == NULL)
000eb4  f1b90f00          CMP      r9,#0
000eb8  d004              BEQ      |L1.3780|
000eba  b11c              CBZ      r4,|L1.3780|
000ebc  b116              CBZ      r6,|L1.3780|
000ebe  f1bb0f00          CMP      r11,#0
000ec2  d101              BNE      |L1.3784|
                  |L1.3780|
;;;683          return;
;;;684    
;;;685       new_iccp_name = (png_charp)png_malloc_warn(png_ptr, png_strlen(name)+1);
;;;686       if (new_iccp_name == NULL)
;;;687       {
;;;688          png_warning(png_ptr, "Insufficient memory to process iCCP chunk.");
;;;689          return;
;;;690       }
;;;691       png_strcpy(new_iccp_name, name);
;;;692       new_iccp_profile = (png_charp)png_malloc_warn(png_ptr, proflen);
;;;693       if (new_iccp_profile == NULL)
;;;694       {
;;;695          png_free (png_ptr, new_iccp_name);
;;;696          png_warning(png_ptr, "Insufficient memory to process iCCP profile.");
;;;697          return;
;;;698       }
;;;699       png_memcpy(new_iccp_profile, profile, (png_size_t)proflen);
;;;700    
;;;701       png_free_data(png_ptr, info_ptr, PNG_FREE_ICCP, 0);
;;;702    
;;;703       info_ptr->iccp_proflen = proflen;
;;;704       info_ptr->iccp_name = new_iccp_name;
;;;705       info_ptr->iccp_profile = new_iccp_profile;
;;;706       /* Compression is always zero but is here so the API and info structure
;;;707        * does not have to change if we introduce multiple compression types */
;;;708       info_ptr->iccp_compression = (png_byte)compression_type;
;;;709    #ifdef PNG_FREE_ME_SUPPORTED
;;;710       info_ptr->free_me |= PNG_FREE_ICCP;
;;;711    #endif
;;;712       info_ptr->valid |= PNG_INFO_iCCP;
;;;713    }
000ec4  e8bd8ff8          POP      {r3-r11,pc}
                  |L1.3784|
000ec8  4630              MOV      r0,r6                 ;685
000eca  f7fffffe          BL       strlen
000ece  1c40              ADDS     r0,r0,#1              ;685
000ed0  4601              MOV      r1,r0                 ;685
000ed2  9000              STR      r0,[sp,#0]            ;685
000ed4  4648              MOV      r0,r9                 ;685
000ed6  f7fffffe          BL       png_malloc_warn
000eda  4605              MOV      r5,r0                 ;685
000edc  b925              CBNZ     r5,|L1.3816|
000ede  a15a              ADR      r1,|L1.4168|
000ee0  4648              MOV      r0,r9                 ;688
000ee2  f7fffffe          BL       png_warning
000ee6  e7ed              B        |L1.3780|
                  |L1.3816|
000ee8  4631              MOV      r1,r6                 ;691
000eea  4628              MOV      r0,r5                 ;691
000eec  f7fffffe          BL       strcpy
000ef0  4641              MOV      r1,r8                 ;692
000ef2  4648              MOV      r0,r9                 ;692
000ef4  f7fffffe          BL       png_malloc_warn
000ef8  4607              MOV      r7,r0                 ;692
000efa  b947              CBNZ     r7,|L1.3854|
000efc  4629              MOV      r1,r5                 ;695
000efe  4648              MOV      r0,r9                 ;695
000f00  f7fffffe          BL       png_free
000f04  a15b              ADR      r1,|L1.4212|
000f06  4648              MOV      r0,r9                 ;696
000f08  f7fffffe          BL       png_warning
000f0c  e7da              B        |L1.3780|
                  |L1.3854|
000f0e  4642              MOV      r2,r8                 ;699
000f10  4659              MOV      r1,r11                ;699
000f12  4638              MOV      r0,r7                 ;699
000f14  f7fffffe          BL       __aeabi_memcpy
000f18  2300              MOVS     r3,#0                 ;701
000f1a  2210              MOVS     r2,#0x10              ;701
000f1c  4621              MOV      r1,r4                 ;701
000f1e  4648              MOV      r0,r9                 ;701
000f20  f7fffffe          BL       png_free_data
000f24  34b4              ADDS     r4,r4,#0xb4           ;703
000f26  f8c48018          STR      r8,[r4,#0x18]         ;703
000f2a  6125              STR      r5,[r4,#0x10]         ;704
000f2c  6167              STR      r7,[r4,#0x14]         ;705
000f2e  f884a01c          STRB     r10,[r4,#0x1c]        ;708
000f32  6860              LDR      r0,[r4,#4]            ;710
000f34  f0400010          ORR      r0,r0,#0x10           ;710
000f38  6060              STR      r0,[r4,#4]            ;710
000f3a  f8540cac          LDR      r0,[r4,#-0xac]        ;712
000f3e  f4405080          ORR      r0,r0,#0x1000         ;712
000f42  f8440cac          STR      r0,[r4,#-0xac]        ;712
000f46  3cb4              SUBS     r4,r4,#0xb4           ;712
000f48  bf00              NOP      
000f4a  e7bb              B        |L1.3780|
;;;714    #endif
                          ENDP

                  png_set_text_2 PROC
;;;727    int /* PRIVATE */
;;;728    png_set_text_2(png_structp png_ptr, png_infop info_ptr, png_textp text_ptr,
000f4c  e92d4fff          PUSH     {r0-r11,lr}
;;;729       int num_text)
;;;730    {
000f50  b081              SUB      sp,sp,#4
000f52  460c              MOV      r4,r1
000f54  4617              MOV      r7,r2
000f56  4699              MOV      r9,r3
;;;731       int i;
;;;732    
;;;733       png_debug1(1, "in %s storage function\n", (png_ptr->chunk_name[0] == '\0' ?
;;;734          "text" : (png_const_charp)png_ptr->chunk_name));
;;;735    
;;;736       if (png_ptr == NULL || info_ptr == NULL || num_text == 0)
000f58  9801              LDR      r0,[sp,#4]
000f5a  b118              CBZ      r0,|L1.3940|
000f5c  b114              CBZ      r4,|L1.3940|
000f5e  f1b90f00          CMP      r9,#0
000f62  d103              BNE      |L1.3948|
                  |L1.3940|
;;;737          return(0);
000f64  2000              MOVS     r0,#0
;;;738    
;;;739       /* Make sure we have enough space in the "text" array in info_struct
;;;740        * to hold all of the incoming text_ptr objects.
;;;741        */
;;;742       if (info_ptr->num_text + num_text > info_ptr->max_text)
;;;743       {
;;;744          if (info_ptr->text != NULL)
;;;745          {
;;;746             png_textp old_text;
;;;747             int old_max;
;;;748    
;;;749             old_max = info_ptr->max_text;
;;;750             info_ptr->max_text = info_ptr->num_text + num_text + 8;
;;;751             old_text = info_ptr->text;
;;;752             info_ptr->text = (png_textp)png_malloc_warn(png_ptr,
;;;753                (png_uint_32)(info_ptr->max_text * png_sizeof (png_text)));
;;;754             if (info_ptr->text == NULL)
;;;755               {
;;;756                 png_free(png_ptr, old_text);
;;;757                 return(1);
;;;758               }
;;;759             png_memcpy(info_ptr->text, old_text, (png_size_t)(old_max *
;;;760                png_sizeof(png_text)));
;;;761             png_free(png_ptr, old_text);
;;;762          }
;;;763          else
;;;764          {
;;;765             info_ptr->max_text = num_text + 8;
;;;766             info_ptr->num_text = 0;
;;;767             info_ptr->text = (png_textp)png_malloc_warn(png_ptr,
;;;768                (png_uint_32)(info_ptr->max_text * png_sizeof (png_text)));
;;;769             if (info_ptr->text == NULL)
;;;770               return(1);
;;;771    #ifdef PNG_FREE_ME_SUPPORTED
;;;772             info_ptr->free_me |= PNG_FREE_TEXT;
;;;773    #endif
;;;774          }
;;;775          png_debug1(3, "allocated %d entries for info_ptr->text\n",
;;;776             info_ptr->max_text);
;;;777       }
;;;778       for (i = 0; i < num_text; i++)
;;;779       {
;;;780          png_size_t text_length,key_len;
;;;781          png_size_t lang_len,lang_key_len;
;;;782          png_textp textp = &(info_ptr->text[info_ptr->num_text]);
;;;783    
;;;784          if (text_ptr[i].key == NULL)
;;;785              continue;
;;;786    
;;;787          key_len = png_strlen(text_ptr[i].key);
;;;788    
;;;789          if(text_ptr[i].compression <= 0)
;;;790          {
;;;791            lang_len = 0;
;;;792            lang_key_len = 0;
;;;793          }
;;;794          else
;;;795    #ifdef PNG_iTXt_SUPPORTED
;;;796          {
;;;797            /* set iTXt data */
;;;798            if (text_ptr[i].lang != NULL)
;;;799              lang_len = png_strlen(text_ptr[i].lang);
;;;800            else
;;;801              lang_len = 0;
;;;802            if (text_ptr[i].lang_key != NULL)
;;;803              lang_key_len = png_strlen(text_ptr[i].lang_key);
;;;804            else
;;;805              lang_key_len = 0;
;;;806          }
;;;807    #else
;;;808          {
;;;809            png_warning(png_ptr, "iTXt chunk not supported.");
;;;810            continue;
;;;811          }
;;;812    #endif
;;;813    
;;;814          if (text_ptr[i].text == NULL || text_ptr[i].text[0] == '\0')
;;;815          {
;;;816             text_length = 0;
;;;817    #ifdef PNG_iTXt_SUPPORTED
;;;818             if(text_ptr[i].compression > 0)
;;;819                textp->compression = PNG_ITXT_COMPRESSION_NONE;
;;;820             else
;;;821    #endif
;;;822                textp->compression = PNG_TEXT_COMPRESSION_NONE;
;;;823          }
;;;824          else
;;;825          {
;;;826             text_length = png_strlen(text_ptr[i].text);
;;;827             textp->compression = text_ptr[i].compression;
;;;828          }
;;;829    
;;;830          textp->key = (png_charp)png_malloc_warn(png_ptr,
;;;831             (png_uint_32)(key_len + text_length + lang_len + lang_key_len + 4));
;;;832          if (textp->key == NULL)
;;;833            return(1);
;;;834          png_debug2(2, "Allocated %lu bytes at %x in png_set_text\n",
;;;835             (png_uint_32)(key_len + lang_len + lang_key_len + text_length + 4),
;;;836             (int)textp->key);
;;;837    
;;;838          png_memcpy(textp->key, text_ptr[i].key,
;;;839             (png_size_t)(key_len));
;;;840          *(textp->key+key_len) = '\0';
;;;841    #ifdef PNG_iTXt_SUPPORTED
;;;842          if (text_ptr[i].compression > 0)
;;;843          {
;;;844             textp->lang=textp->key + key_len + 1;
;;;845             png_memcpy(textp->lang, text_ptr[i].lang, lang_len);
;;;846             *(textp->lang+lang_len) = '\0';
;;;847             textp->lang_key=textp->lang + lang_len + 1;
;;;848             png_memcpy(textp->lang_key, text_ptr[i].lang_key, lang_key_len);
;;;849             *(textp->lang_key+lang_key_len) = '\0';
;;;850             textp->text=textp->lang_key + lang_key_len + 1;
;;;851          }
;;;852          else
;;;853    #endif
;;;854          {
;;;855    #ifdef PNG_iTXt_SUPPORTED
;;;856             textp->lang=NULL;
;;;857             textp->lang_key=NULL;
;;;858    #endif
;;;859             textp->text=textp->key + key_len + 1;
;;;860          }
;;;861          if(text_length)
;;;862             png_memcpy(textp->text, text_ptr[i].text,
;;;863                (png_size_t)(text_length));
;;;864          *(textp->text+text_length) = '\0';
;;;865    
;;;866    #ifdef PNG_iTXt_SUPPORTED
;;;867          if(textp->compression > 0)
;;;868          {
;;;869             textp->text_length = 0;
;;;870             textp->itxt_length = text_length;
;;;871          }
;;;872          else
;;;873    #endif
;;;874          {
;;;875             textp->text_length = text_length;
;;;876    #ifdef PNG_iTXt_SUPPORTED
;;;877             textp->itxt_length = 0;
;;;878    #endif
;;;879          }
;;;880          info_ptr->text[info_ptr->num_text]= *textp;
;;;881          info_ptr->num_text++;
;;;882          png_debug1(3, "transferred text chunk %d\n", info_ptr->num_text);
;;;883       }
;;;884       return(0);
;;;885    }
000f66  b005              ADD      sp,sp,#0x14
000f68  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.3948|
000f6c  e09a              B        |L1.4260|
000f6e  0000              DCW      0x0000
                  |L1.3952|
000f70  496e7375          DCB      "Insufficient memory for pCAL purpose.",0
000f74  66666963
000f78  69656e74
000f7c  206d656d
000f80  6f727920
000f84  666f7220
000f88  7043414c
000f8c  20707572
000f90  706f7365
000f94  2e00    
000f96  00                DCB      0
000f97  00                DCB      0
                  |L1.3992|
000f98  496e7375          DCB      "Insufficient memory for pCAL units.",0
000f9c  66666963
000fa0  69656e74
000fa4  206d656d
000fa8  6f727920
000fac  666f7220
000fb0  7043414c
000fb4  20756e69
000fb8  74732e00
                  |L1.4028|
000fbc  496e7375          DCB      "Insufficient memory for pCAL params.",0
000fc0  66666963
000fc4  69656e74
000fc8  206d656d
000fcc  6f727920
000fd0  666f7220
000fd4  7043414c
000fd8  20706172
000fdc  616d732e
000fe0  00      
000fe1  00                DCB      0
000fe2  00                DCB      0
000fe3  00                DCB      0
                  |L1.4068|
000fe4  496e7375          DCB      "Insufficient memory for pCAL parameter.",0
000fe8  66666963
000fec  69656e74
000ff0  206d656d
000ff4  6f727920
000ff8  666f7220
000ffc  7043414c
001000  20706172
001004  616d6574
001008  65722e00
                  |L1.4108|
00100c  496e7661          DCB      "Invalid palette length",0
001010  6c696420
001014  70616c65
001018  74746520
00101c  6c656e67
001020  746800  
001023  00                DCB      0
                  |L1.4132|
                          DCD      0x3ee8bac7
                  |L1.4136|
                          DCD      0x3ea01a37
                  |L1.4140|
                          DCD      0x3ea872b0
                  |L1.4144|
                          DCD      0x3f23d70a
                  |L1.4148|
                          DCD      0x3ea8f5c3
                  |L1.4152|
                          DCD      0x3e99999a
                  |L1.4156|
                          DCD      0x3f19999a
                  |L1.4160|
                          DCD      0x3e19999a
                  |L1.4164|
                          DCD      0x3d75c28f
                  |L1.4168|
001048  496e7375          DCB      "Insufficient memory to process iCCP chunk.",0
00104c  66666963
001050  69656e74
001054  206d656d
001058  6f727920
00105c  746f2070
001060  726f6365
001064  73732069
001068  43435020
00106c  6368756e
001070  6b2e00  
001073  00                DCB      0
                  |L1.4212|
001074  496e7375          DCB      "Insufficient memory to process iCCP profile.",0
001078  66666963
00107c  69656e74
001080  206d656d
001084  6f727920
001088  746f2070
00108c  726f6365
001090  73732069
001094  43435020
001098  70726f66
00109c  696c652e
0010a0  00      
0010a1  00                DCB      0
0010a2  00                DCB      0
0010a3  00                DCB      0
                  |L1.4260|
0010a4  6b20              LDR      r0,[r4,#0x30]         ;742
0010a6  4448              ADD      r0,r0,r9              ;742
0010a8  6b61              LDR      r1,[r4,#0x34]         ;742
0010aa  4288              CMP      r0,r1                 ;742
0010ac  dd38              BLE      |L1.4384|
0010ae  6ba0              LDR      r0,[r4,#0x38]         ;744
0010b0  b308              CBZ      r0,|L1.4342|
0010b2  f8d48034          LDR      r8,[r4,#0x34]         ;749
0010b6  6b20              LDR      r0,[r4,#0x30]         ;750
0010b8  4448              ADD      r0,r0,r9              ;750
0010ba  3008              ADDS     r0,r0,#8              ;750
0010bc  6360              STR      r0,[r4,#0x34]         ;750
0010be  6ba6              LDR      r6,[r4,#0x38]         ;751
0010c0  6b60              LDR      r0,[r4,#0x34]         ;752
0010c2  0101              LSLS     r1,r0,#4              ;752
0010c4  9801              LDR      r0,[sp,#4]            ;752
0010c6  f7fffffe          BL       png_malloc_warn
0010ca  63a0              STR      r0,[r4,#0x38]         ;752
0010cc  6ba0              LDR      r0,[r4,#0x38]         ;754
0010ce  b938              CBNZ     r0,|L1.4320|
0010d0  4631              MOV      r1,r6                 ;756
0010d2  9801              LDR      r0,[sp,#4]            ;756
0010d4  f7fffffe          BL       png_free
0010d8  2001              MOVS     r0,#1                 ;757
                  |L1.4314|
0010da  b005              ADD      sp,sp,#0x14
0010dc  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.4320|
0010e0  ea4f1208          LSL      r2,r8,#4              ;759
0010e4  4631              MOV      r1,r6                 ;759
0010e6  6ba0              LDR      r0,[r4,#0x38]         ;759
0010e8  f7fffffe          BL       __aeabi_memcpy4
0010ec  4631              MOV      r1,r6                 ;761
0010ee  9801              LDR      r0,[sp,#4]            ;761
0010f0  f7fffffe          BL       png_free
0010f4  e014              B        |L1.4384|
                  |L1.4342|
0010f6  f1090008          ADD      r0,r9,#8              ;765
0010fa  6360              STR      r0,[r4,#0x34]         ;765
0010fc  2000              MOVS     r0,#0                 ;766
0010fe  6320              STR      r0,[r4,#0x30]         ;766
001100  6b60              LDR      r0,[r4,#0x34]         ;767
001102  0101              LSLS     r1,r0,#4              ;767
001104  9801              LDR      r0,[sp,#4]            ;767
001106  f7fffffe          BL       png_malloc_warn
00110a  63a0              STR      r0,[r4,#0x38]         ;767
00110c  6ba0              LDR      r0,[r4,#0x38]         ;769
00110e  b908              CBNZ     r0,|L1.4372|
001110  2001              MOVS     r0,#1                 ;770
001112  e7e2              B        |L1.4314|
                  |L1.4372|
001114  f8d400b8          LDR      r0,[r4,#0xb8]         ;772
001118  f4404080          ORR      r0,r0,#0x4000         ;772
00111c  f8c400b8          STR      r0,[r4,#0xb8]         ;772
                  |L1.4384|
001120  2500              MOVS     r5,#0                 ;778
001122  e071              B        |L1.4616|
                  |L1.4388|
001124  6b21              LDR      r1,[r4,#0x30]         ;782
001126  6ba0              LDR      r0,[r4,#0x38]         ;782
001128  eb001601          ADD      r6,r0,r1,LSL #4       ;782
00112c  eb071005          ADD      r0,r7,r5,LSL #4       ;784
001130  6840              LDR      r0,[r0,#4]            ;784
001132  b900              CBNZ     r0,|L1.4406|
001134  e067              B        |L1.4614|
                  |L1.4406|
001136  eb071105          ADD      r1,r7,r5,LSL #4       ;787
00113a  6848              LDR      r0,[r1,#4]            ;787
00113c  f7fffffe          BL       strlen
001140  4682              MOV      r10,r0                ;787
001142  eb071005          ADD      r0,r7,r5,LSL #4       ;789
001146  6800              LDR      r0,[r0,#0]            ;789
001148  2800              CMP      r0,#0                 ;789
00114a  dc04              BGT      |L1.4438|
00114c  f04f0b00          MOV      r11,#0                ;791
001150  2000              MOVS     r0,#0                 ;792
001152  9000              STR      r0,[sp,#0]            ;792
001154  e004              B        |L1.4448|
                  |L1.4438|
001156  a1f7              ADR      r1,|L1.5428|
001158  9801              LDR      r0,[sp,#4]            ;809
00115a  f7fffffe          BL       png_warning
00115e  e052              B        |L1.4614|
                  |L1.4448|
001160  eb071005          ADD      r0,r7,r5,LSL #4       ;814
001164  6880              LDR      r0,[r0,#8]            ;814
001166  b120              CBZ      r0,|L1.4466|
001168  eb071005          ADD      r0,r7,r5,LSL #4       ;814
00116c  6880              LDR      r0,[r0,#8]            ;814
00116e  7800              LDRB     r0,[r0,#0]            ;814
001170  b928              CBNZ     r0,|L1.4478|
                  |L1.4466|
001172  f04f0800          MOV      r8,#0                 ;816
001176  f04f30ff          MOV      r0,#0xffffffff        ;822
00117a  6030              STR      r0,[r6,#0]            ;822
00117c  e009              B        |L1.4498|
                  |L1.4478|
00117e  eb071105          ADD      r1,r7,r5,LSL #4       ;826
001182  6888              LDR      r0,[r1,#8]            ;826
001184  f7fffffe          BL       strlen
001188  4680              MOV      r8,r0                 ;826
00118a  eb071005          ADD      r0,r7,r5,LSL #4       ;827
00118e  6800              LDR      r0,[r0,#0]            ;827
001190  6030              STR      r0,[r6,#0]            ;827
                  |L1.4498|
001192  eb0a0008          ADD      r0,r10,r8             ;830
001196  eb00020b          ADD      r2,r0,r11             ;830
00119a  9800              LDR      r0,[sp,#0]            ;830
00119c  4410              ADD      r0,r0,r2              ;830
00119e  1d01              ADDS     r1,r0,#4              ;830
0011a0  9801              LDR      r0,[sp,#4]            ;830
0011a2  f7fffffe          BL       png_malloc_warn
0011a6  6070              STR      r0,[r6,#4]            ;830
0011a8  6870              LDR      r0,[r6,#4]            ;832
0011aa  b908              CBNZ     r0,|L1.4528|
0011ac  2001              MOVS     r0,#1                 ;833
0011ae  e794              B        |L1.4314|
                  |L1.4528|
0011b0  eb071205          ADD      r2,r7,r5,LSL #4       ;838
0011b4  6851              LDR      r1,[r2,#4]            ;838
0011b6  4652              MOV      r2,r10                ;838
0011b8  6870              LDR      r0,[r6,#4]            ;838
0011ba  f7fffffe          BL       __aeabi_memcpy
0011be  2000              MOVS     r0,#0                 ;840
0011c0  6871              LDR      r1,[r6,#4]            ;840
0011c2  f801000a          STRB     r0,[r1,r10]           ;840
0011c6  6870              LDR      r0,[r6,#4]            ;859
0011c8  4450              ADD      r0,r0,r10             ;859
0011ca  1c40              ADDS     r0,r0,#1              ;859
0011cc  60b0              STR      r0,[r6,#8]            ;859
0011ce  f1b80f00          CMP      r8,#0                 ;861
0011d2  d006              BEQ      |L1.4578|
0011d4  eb071205          ADD      r2,r7,r5,LSL #4       ;862
0011d8  6891              LDR      r1,[r2,#8]            ;862
0011da  4642              MOV      r2,r8                 ;862
0011dc  68b0              LDR      r0,[r6,#8]            ;862
0011de  f7fffffe          BL       __aeabi_memcpy
                  |L1.4578|
0011e2  2000              MOVS     r0,#0                 ;864
0011e4  68b1              LDR      r1,[r6,#8]            ;864
0011e6  f8010008          STRB     r0,[r1,r8]            ;864
0011ea  f8c6800c          STR      r8,[r6,#0xc]          ;875
0011ee  6b21              LDR      r1,[r4,#0x30]         ;880
0011f0  6ba0              LDR      r0,[r4,#0x38]         ;880
0011f2  eb001001          ADD      r0,r0,r1,LSL #4       ;880
0011f6  e896100e          LDM      r6,{r1-r3,r12}        ;880
0011fa  e8a0100e          STM      r0!,{r1-r3,r12}       ;880
0011fe  6b20              LDR      r0,[r4,#0x30]         ;881
001200  1c40              ADDS     r0,r0,#1              ;881
001202  6320              STR      r0,[r4,#0x30]         ;881
001204  bf00              NOP                            ;785
                  |L1.4614|
001206  1c6d              ADDS     r5,r5,#1              ;778
                  |L1.4616|
001208  454d              CMP      r5,r9                 ;778
00120a  db8b              BLT      |L1.4388|
00120c  2000              MOVS     r0,#0                 ;884
00120e  e764              B        |L1.4314|
;;;886    #endif
                          ENDP

                  png_set_text PROC
;;;717    void PNGAPI
;;;718    png_set_text(png_structp png_ptr, png_infop info_ptr, png_textp text_ptr,
001210  e92d41f0          PUSH     {r4-r8,lr}
;;;719       int num_text)
;;;720    {
001214  4604              MOV      r4,r0
001216  460d              MOV      r5,r1
001218  4616              MOV      r6,r2
00121a  461f              MOV      r7,r3
;;;721       int ret;
;;;722       ret=png_set_text_2(png_ptr, info_ptr, text_ptr, num_text);
00121c  463b              MOV      r3,r7
00121e  4632              MOV      r2,r6
001220  4629              MOV      r1,r5
001222  4620              MOV      r0,r4
001224  f7fffffe          BL       png_set_text_2
001228  4680              MOV      r8,r0
;;;723       if (ret)
00122a  f1b80f00          CMP      r8,#0
00122e  d003              BEQ      |L1.4664|
;;;724         png_error(png_ptr, "Insufficient memory to store text");
001230  a1c7              ADR      r1,|L1.5456|
001232  4620              MOV      r0,r4
001234  f7fffffe          BL       png_error
                  |L1.4664|
;;;725    }
001238  e8bd81f0          POP      {r4-r8,pc}
;;;726    
                          ENDP

                  png_set_tIME PROC
;;;889    void PNGAPI
;;;890    png_set_tIME(png_structp png_ptr, png_infop info_ptr, png_timep mod_time)
00123c  b128              CBZ      r0,|L1.4682|
;;;891    {
;;;892       png_debug1(1, "in %s storage function\n", "tIME");
;;;893       if (png_ptr == NULL || info_ptr == NULL ||
00123e  b121              CBZ      r1,|L1.4682|
;;;894           (png_ptr->mode & PNG_WROTE_tIME))
001240  f8b031a8          LDRH     r3,[r0,#0x1a8]
001244  f4037300          AND      r3,r3,#0x200
001248  b103              CBZ      r3,|L1.4684|
                  |L1.4682|
;;;895          return;
;;;896    
;;;897       png_memcpy(&(info_ptr->mod_time), mod_time, png_sizeof (png_time));
;;;898       info_ptr->valid |= PNG_INFO_tIME;
;;;899    }
00124a  4770              BX       lr
                  |L1.4684|
00124c  6813              LDR      r3,[r2,#0]            ;897
00124e  63cb              STR      r3,[r1,#0x3c]         ;897
001250  6853              LDR      r3,[r2,#4]            ;897
001252  640b              STR      r3,[r1,#0x40]         ;897
001254  688b              LDR      r3,[r1,#8]            ;898
001256  f4437300          ORR      r3,r3,#0x200          ;898
00125a  608b              STR      r3,[r1,#8]            ;898
00125c  bf00              NOP      
00125e  e7f4              B        |L1.4682|
;;;900    #endif
                          ENDP

                  png_set_tRNS PROC
;;;903    void PNGAPI
;;;904    png_set_tRNS(png_structp png_ptr, png_infop info_ptr,
001260  e92d41f0          PUSH     {r4-r8,lr}
;;;905       png_bytep trans, int num_trans, png_color_16p trans_values)
;;;906    {
001264  4606              MOV      r6,r0
001266  460c              MOV      r4,r1
001268  4617              MOV      r7,r2
00126a  461d              MOV      r5,r3
00126c  f8dd8018          LDR      r8,[sp,#0x18]
;;;907       png_debug1(1, "in %s storage function\n", "tRNS");
;;;908       if (png_ptr == NULL || info_ptr == NULL)
001270  b106              CBZ      r6,|L1.4724|
001272  b90c              CBNZ     r4,|L1.4728|
                  |L1.4724|
;;;909          return;
;;;910    
;;;911       if (trans != NULL)
;;;912       {
;;;913           /*
;;;914            * It may not actually be necessary to set png_ptr->trans here;
;;;915            * we do it for backward compatibility with the way the png_handle_tRNS
;;;916            * function used to do the allocation.
;;;917            */
;;;918    #ifdef PNG_FREE_ME_SUPPORTED
;;;919           png_free_data(png_ptr, info_ptr, PNG_FREE_TRNS, 0);
;;;920    #endif
;;;921           /* Changed from num_trans to PNG_MAX_PALETTE_LENGTH in version 1.2.1 */
;;;922           png_ptr->trans = info_ptr->trans = (png_bytep)png_malloc(png_ptr,
;;;923               (png_uint_32)PNG_MAX_PALETTE_LENGTH);
;;;924           if (num_trans <= PNG_MAX_PALETTE_LENGTH)
;;;925             png_memcpy(info_ptr->trans, trans, (png_size_t)num_trans);
;;;926    #ifdef PNG_FREE_ME_SUPPORTED
;;;927           info_ptr->free_me |= PNG_FREE_TRNS;
;;;928    #else
;;;929           png_ptr->flags |= PNG_FLAG_FREE_TRNS;
;;;930    #endif
;;;931       }
;;;932    
;;;933       if (trans_values != NULL)
;;;934       {
;;;935          png_memcpy(&(info_ptr->trans_values), trans_values,
;;;936             png_sizeof(png_color_16));
;;;937          if (num_trans == 0)
;;;938            num_trans = 1;
;;;939       }
;;;940       info_ptr->num_trans = (png_uint_16)num_trans;
;;;941       info_ptr->valid |= PNG_INFO_tRNS;
;;;942    }
001274  e8bd81f0          POP      {r4-r8,pc}
                  |L1.4728|
001278  b1e7              CBZ      r7,|L1.4788|
00127a  2300              MOVS     r3,#0                 ;919
00127c  f44f5200          MOV      r2,#0x2000            ;919
001280  4621              MOV      r1,r4                 ;919
001282  4630              MOV      r0,r6                 ;919
001284  f7fffffe          BL       png_free_data
001288  f44f7180          MOV      r1,#0x100             ;922
00128c  4630              MOV      r0,r6                 ;922
00128e  f7fffffe          BL       png_malloc
001292  64e0              STR      r0,[r4,#0x4c]         ;922
001294  f8c602c8          STR      r0,[r6,#0x2c8]        ;922
001298  f5b57f80          CMP      r5,#0x100             ;924
00129c  dc04              BGT      |L1.4776|
00129e  462a              MOV      r2,r5                 ;925
0012a0  4639              MOV      r1,r7                 ;925
0012a2  6ce0              LDR      r0,[r4,#0x4c]         ;925
0012a4  f7fffffe          BL       __aeabi_memcpy
                  |L1.4776|
0012a8  f8d400b8          LDR      r0,[r4,#0xb8]         ;927
0012ac  f4405000          ORR      r0,r0,#0x2000         ;927
0012b0  f8c400b8          STR      r0,[r4,#0xb8]         ;927
                  |L1.4788|
0012b4  f1b80f00          CMP      r8,#0                 ;933
0012b8  d00b              BEQ      |L1.4818|
0012ba  f8d80000          LDR      r0,[r8,#0]            ;935
0012be  6520              STR      r0,[r4,#0x50]         ;935
0012c0  f8d80004          LDR      r0,[r8,#4]            ;935
0012c4  6560              STR      r0,[r4,#0x54]         ;935
0012c6  f8b80008          LDRH     r0,[r8,#8]            ;935
0012ca  f8a40058          STRH     r0,[r4,#0x58]         ;935
0012ce  b905              CBNZ     r5,|L1.4818|
0012d0  2501              MOVS     r5,#1                 ;938
                  |L1.4818|
0012d2  82e5              STRH     r5,[r4,#0x16]         ;940
0012d4  68a0              LDR      r0,[r4,#8]            ;941
0012d6  f0400010          ORR      r0,r0,#0x10           ;941
0012da  60a0              STR      r0,[r4,#8]            ;941
0012dc  bf00              NOP      
0012de  e7c9              B        |L1.4724|
;;;943    #endif
                          ENDP

                  png_set_sPLT PROC
;;;946    void PNGAPI
;;;947    png_set_sPLT(png_structp png_ptr,
0012e0  e92d4ff8          PUSH     {r3-r11,lr}
;;;948                 png_infop info_ptr, png_sPLT_tp entries, int nentries)
;;;949    {
0012e4  4682              MOV      r10,r0
0012e6  460c              MOV      r4,r1
0012e8  4693              MOV      r11,r2
0012ea  4699              MOV      r9,r3
;;;950        png_sPLT_tp np;
;;;951        int i;
;;;952    
;;;953        if (png_ptr == NULL || info_ptr == NULL)
0012ec  f1ba0f00          CMP      r10,#0
0012f0  d000              BEQ      |L1.4852|
0012f2  b90c              CBNZ     r4,|L1.4856|
                  |L1.4852|
;;;954           return;
;;;955    
;;;956        np = (png_sPLT_tp)png_malloc_warn(png_ptr,
;;;957            (info_ptr->splt_palettes_num + nentries) * png_sizeof(png_sPLT_t));
;;;958        if (np == NULL)
;;;959        {
;;;960          png_warning(png_ptr, "No memory for sPLT palettes.");
;;;961          return;
;;;962        }
;;;963    
;;;964        png_memcpy(np, info_ptr->splt_palettes,
;;;965               info_ptr->splt_palettes_num * png_sizeof(png_sPLT_t));
;;;966        png_free(png_ptr, info_ptr->splt_palettes);
;;;967        info_ptr->splt_palettes=NULL;
;;;968    
;;;969        for (i = 0; i < nentries; i++)
;;;970        {
;;;971            png_sPLT_tp to = np + info_ptr->splt_palettes_num + i;
;;;972            png_sPLT_tp from = entries + i;
;;;973    
;;;974            to->name = (png_charp)png_malloc(png_ptr,
;;;975                png_strlen(from->name) + 1);
;;;976            /* TODO: use png_malloc_warn */
;;;977            png_strcpy(to->name, from->name);
;;;978            to->entries = (png_sPLT_entryp)png_malloc(png_ptr,
;;;979                from->nentries * png_sizeof(png_sPLT_entry));
;;;980            /* TODO: use png_malloc_warn */
;;;981            png_memcpy(to->entries, from->entries,
;;;982                from->nentries * png_sizeof(png_sPLT_entry));
;;;983            to->nentries = from->nentries;
;;;984            to->depth = from->depth;
;;;985        }
;;;986    
;;;987        info_ptr->splt_palettes = np;
;;;988        info_ptr->splt_palettes_num += nentries;
;;;989        info_ptr->valid |= PNG_INFO_sPLT;
;;;990    #ifdef PNG_FREE_ME_SUPPORTED
;;;991        info_ptr->free_me |= PNG_FREE_SPLT;
;;;992    #endif
;;;993    }
0012f4  e8bd8ff8          POP      {r3-r11,pc}
                  |L1.4856|
0012f8  f8d400d8          LDR      r0,[r4,#0xd8]         ;956
0012fc  4448              ADD      r0,r0,r9              ;956
0012fe  0101              LSLS     r1,r0,#4              ;956
001300  4650              MOV      r0,r10                ;956
001302  f7fffffe          BL       png_malloc_warn
001306  4607              MOV      r7,r0                 ;956
001308  b927              CBNZ     r7,|L1.4884|
00130a  a19a              ADR      r1,|L1.5492|
00130c  4650              MOV      r0,r10                ;960
00130e  f7fffffe          BL       png_warning
001312  e7ef              B        |L1.4852|
                  |L1.4884|
001314  34d4              ADDS     r4,r4,#0xd4           ;964
001316  6860              LDR      r0,[r4,#4]            ;964
001318  0102              LSLS     r2,r0,#4              ;964
00131a  4638              MOV      r0,r7                 ;964
00131c  6821              LDR      r1,[r4,#0]            ;964
00131e  f7fffffe          BL       __aeabi_memcpy4
001322  4650              MOV      r0,r10                ;966
001324  6821              LDR      r1,[r4,#0]            ;966
001326  f7fffffe          BL       png_free
00132a  2000              MOVS     r0,#0                 ;967
00132c  f84409d4          STR      r0,[r4],#-0xd4        ;967
001330  4680              MOV      r8,r0                 ;969
001332  e02b              B        |L1.5004|
                  |L1.4916|
001334  f8d400d8          LDR      r0,[r4,#0xd8]         ;971
001338  eb071000          ADD      r0,r7,r0,LSL #4       ;971
00133c  eb001608          ADD      r6,r0,r8,LSL #4       ;971
001340  eb0b1508          ADD      r5,r11,r8,LSL #4      ;972
001344  6828              LDR      r0,[r5,#0]            ;974
001346  f7fffffe          BL       strlen
00134a  1c40              ADDS     r0,r0,#1              ;974
00134c  4601              MOV      r1,r0                 ;974
00134e  9000              STR      r0,[sp,#0]            ;974
001350  4650              MOV      r0,r10                ;974
001352  f7fffffe          BL       png_malloc
001356  6030              STR      r0,[r6,#0]            ;974
001358  6829              LDR      r1,[r5,#0]            ;977
00135a  6830              LDR      r0,[r6,#0]            ;977
00135c  f7fffffe          BL       strcpy
001360  68e8              LDR      r0,[r5,#0xc]          ;978
001362  eb000080          ADD      r0,r0,r0,LSL #2       ;978
001366  0041              LSLS     r1,r0,#1              ;978
001368  4650              MOV      r0,r10                ;978
00136a  f7fffffe          BL       png_malloc
00136e  60b0              STR      r0,[r6,#8]            ;978
001370  68eb              LDR      r3,[r5,#0xc]          ;981
001372  eb030383          ADD      r3,r3,r3,LSL #2       ;981
001376  005a              LSLS     r2,r3,#1              ;981
001378  68a9              LDR      r1,[r5,#8]            ;981
00137a  68b0              LDR      r0,[r6,#8]            ;981
00137c  f7fffffe          BL       __aeabi_memcpy
001380  68e8              LDR      r0,[r5,#0xc]          ;983
001382  60f0              STR      r0,[r6,#0xc]          ;983
001384  7928              LDRB     r0,[r5,#4]            ;984
001386  7130              STRB     r0,[r6,#4]            ;984
001388  f1080801          ADD      r8,r8,#1              ;969
                  |L1.5004|
00138c  45c8              CMP      r8,r9                 ;969
00138e  dbd1              BLT      |L1.4916|
001390  345c              ADDS     r4,r4,#0x5c           ;987
001392  67a7              STR      r7,[r4,#0x78]         ;987
001394  6fe0              LDR      r0,[r4,#0x7c]         ;988
001396  4448              ADD      r0,r0,r9              ;988
001398  67e0              STR      r0,[r4,#0x7c]         ;988
00139a  f8540c54          LDR      r0,[r4,#-0x54]        ;989
00139e  f4405000          ORR      r0,r0,#0x2000         ;989
0013a2  f8440c54          STR      r0,[r4,#-0x54]        ;989
0013a6  6de0              LDR      r0,[r4,#0x5c]         ;991
0013a8  f0400020          ORR      r0,r0,#0x20           ;991
0013ac  65e0              STR      r0,[r4,#0x5c]         ;991
0013ae  3c5c              SUBS     r4,r4,#0x5c           ;991
0013b0  bf00              NOP      
0013b2  e79f              B        |L1.4852|
;;;994    #endif /* PNG_sPLT_SUPPORTED */
                          ENDP

                  png_set_unknown_chunks PROC
;;;997    void PNGAPI
;;;998    png_set_unknown_chunks(png_structp png_ptr,
0013b4  e92d5ff0          PUSH     {r4-r12,lr}
;;;999       png_infop info_ptr, png_unknown_chunkp unknowns, int num_unknowns)
;;;1000   {
0013b8  4682              MOV      r10,r0
0013ba  460c              MOV      r4,r1
0013bc  4693              MOV      r11,r2
0013be  461e              MOV      r6,r3
;;;1001       png_unknown_chunkp np;
;;;1002       int i;
;;;1003   
;;;1004       if (png_ptr == NULL || info_ptr == NULL || num_unknowns == 0)
0013c0  f1ba0f00          CMP      r10,#0
0013c4  d001              BEQ      |L1.5066|
0013c6  b104              CBZ      r4,|L1.5066|
0013c8  b90e              CBNZ     r6,|L1.5070|
                  |L1.5066|
;;;1005           return;
;;;1006   
;;;1007       np = (png_unknown_chunkp)png_malloc_warn(png_ptr,
;;;1008           (info_ptr->unknown_chunks_num + num_unknowns) *
;;;1009           png_sizeof(png_unknown_chunk));
;;;1010       if (np == NULL)
;;;1011       {
;;;1012          png_warning(png_ptr, "Out of memory while processing unknown chunk.");
;;;1013          return;
;;;1014       }
;;;1015   
;;;1016       png_memcpy(np, info_ptr->unknown_chunks,
;;;1017              info_ptr->unknown_chunks_num * png_sizeof(png_unknown_chunk));
;;;1018       png_free(png_ptr, info_ptr->unknown_chunks);
;;;1019       info_ptr->unknown_chunks=NULL;
;;;1020   
;;;1021       for (i = 0; i < num_unknowns; i++)
;;;1022       {
;;;1023           png_unknown_chunkp to = np + info_ptr->unknown_chunks_num + i;
;;;1024           png_unknown_chunkp from = unknowns + i;
;;;1025   
;;;1026           png_strncpy((png_charp)to->name, (png_charp)from->name, 5);
;;;1027           to->data = (png_bytep)png_malloc_warn(png_ptr, from->size);
;;;1028           if (to->data == NULL)
;;;1029           {
;;;1030              png_warning(png_ptr, "Out of memory processing unknown chunk.");
;;;1031           }
;;;1032           else
;;;1033           {
;;;1034              png_memcpy(to->data, from->data, from->size);
;;;1035              to->size = from->size;
;;;1036   
;;;1037              /* note our location in the read or write sequence */
;;;1038              to->location = (png_byte)(png_ptr->mode & 0xff);
;;;1039           }
;;;1040       }
;;;1041   
;;;1042       info_ptr->unknown_chunks = np;
;;;1043       info_ptr->unknown_chunks_num += num_unknowns;
;;;1044   #ifdef PNG_FREE_ME_SUPPORTED
;;;1045       info_ptr->free_me |= PNG_FREE_UNKN;
;;;1046   #endif
;;;1047   }
0013ca  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.5070|
0013ce  f8d400c0          LDR      r0,[r4,#0xc0]         ;1007
0013d2  4430              ADD      r0,r0,r6              ;1007
0013d4  eb000080          ADD      r0,r0,r0,LSL #2       ;1007
0013d8  0081              LSLS     r1,r0,#2              ;1007
0013da  4650              MOV      r0,r10                ;1007
0013dc  f7fffffe          BL       png_malloc_warn
0013e0  4607              MOV      r7,r0                 ;1007
0013e2  b927              CBNZ     r7,|L1.5102|
0013e4  a16b              ADR      r1,|L1.5524|
0013e6  4650              MOV      r0,r10                ;1012
0013e8  f7fffffe          BL       png_warning
0013ec  e7ed              B        |L1.5066|
                  |L1.5102|
0013ee  34bc              ADDS     r4,r4,#0xbc           ;1016
0013f0  6860              LDR      r0,[r4,#4]            ;1016
0013f2  eb000080          ADD      r0,r0,r0,LSL #2       ;1016
0013f6  0082              LSLS     r2,r0,#2              ;1016
0013f8  4638              MOV      r0,r7                 ;1016
0013fa  6821              LDR      r1,[r4,#0]            ;1016
0013fc  f7fffffe          BL       __aeabi_memcpy4
001400  4650              MOV      r0,r10                ;1018
001402  6821              LDR      r1,[r4,#0]            ;1018
001404  f7fffffe          BL       png_free
001408  2000              MOVS     r0,#0                 ;1019
00140a  f84409bc          STR      r0,[r4],#-0xbc        ;1019
00140e  4680              MOV      r8,r0                 ;1021
001410  e02c              B        |L1.5228|
                  |L1.5138|
001412  f8d400c0          LDR      r0,[r4,#0xc0]         ;1023
001416  eb000080          ADD      r0,r0,r0,LSL #2       ;1023
00141a  eb070080          ADD      r0,r7,r0,LSL #2       ;1023
00141e  eb080188          ADD      r1,r8,r8,LSL #2       ;1023
001422  eb000581          ADD      r5,r0,r1,LSL #2       ;1023
001426  eb080088          ADD      r0,r8,r8,LSL #2       ;1024
00142a  eb0b0980          ADD      r9,r11,r0,LSL #2      ;1024
00142e  2205              MOVS     r2,#5                 ;1026
001430  4649              MOV      r1,r9                 ;1026
001432  4628              MOV      r0,r5                 ;1026
001434  f7fffffe          BL       strncpy
001438  4650              MOV      r0,r10                ;1027
00143a  f8d9100c          LDR      r1,[r9,#0xc]          ;1027
00143e  f7fffffe          BL       png_malloc_warn
001442  60a8              STR      r0,[r5,#8]            ;1027
001444  68a8              LDR      r0,[r5,#8]            ;1028
001446  b920              CBNZ     r0,|L1.5202|
001448  a15e              ADR      r1,|L1.5572|
00144a  4650              MOV      r0,r10                ;1030
00144c  f7fffffe          BL       png_warning
001450  e00a              B        |L1.5224|
                  |L1.5202|
001452  e9d91202          LDRD     r1,r2,[r9,#8]         ;1034
001456  68a8              LDR      r0,[r5,#8]            ;1034
001458  f7fffffe          BL       __aeabi_memcpy
00145c  f8d9000c          LDR      r0,[r9,#0xc]          ;1035
001460  60e8              STR      r0,[r5,#0xc]          ;1035
001462  f89a01a8          LDRB     r0,[r10,#0x1a8]       ;1038
001466  7428              STRB     r0,[r5,#0x10]         ;1038
                  |L1.5224|
001468  f1080801          ADD      r8,r8,#1              ;1021
                  |L1.5228|
00146c  45b0              CMP      r8,r6                 ;1021
00146e  dbd0              BLT      |L1.5138|
001470  34b8              ADDS     r4,r4,#0xb8           ;1042
001472  6067              STR      r7,[r4,#4]            ;1042
001474  68a0              LDR      r0,[r4,#8]            ;1043
001476  4430              ADD      r0,r0,r6              ;1043
001478  60a0              STR      r0,[r4,#8]            ;1043
00147a  6820              LDR      r0,[r4,#0]            ;1045
00147c  f4407000          ORR      r0,r0,#0x200          ;1045
001480  f84409b8          STR      r0,[r4],#-0xb8        ;1045
001484  bf00              NOP      
001486  e7a0              B        |L1.5066|
;;;1048   void PNGAPI
                          ENDP

                  png_set_unknown_chunk_location PROC
;;;1049   png_set_unknown_chunk_location(png_structp png_ptr, png_infop info_ptr,
001488  b570              PUSH     {r4-r6,lr}
;;;1050      int chunk, int location)
;;;1051   {
;;;1052      if(png_ptr != NULL && info_ptr != NULL && chunk >= 0 && chunk <
00148a  b168              CBZ      r0,|L1.5288|
00148c  b161              CBZ      r1,|L1.5288|
00148e  2a00              CMP      r2,#0
001490  db0a              BLT      |L1.5288|
001492  f8d140c0          LDR      r4,[r1,#0xc0]
001496  4294              CMP      r4,r2
001498  dd06              BLE      |L1.5288|
;;;1053            (int)info_ptr->unknown_chunks_num)
;;;1054         info_ptr->unknown_chunks[chunk].location = (png_byte)location;
00149a  eb020682          ADD      r6,r2,r2,LSL #2
00149e  f8d150bc          LDR      r5,[r1,#0xbc]
0014a2  eb050586          ADD      r5,r5,r6,LSL #2
0014a6  742b              STRB     r3,[r5,#0x10]
                  |L1.5288|
;;;1055   }
0014a8  bd70              POP      {r4-r6,pc}
;;;1056   #endif
                          ENDP

                  png_permit_empty_plte PROC
;;;1061   void PNGAPI
;;;1062   png_permit_empty_plte (png_structp png_ptr, int empty_plte_permitted)
0014aa  b900              CBNZ     r0,|L1.5294|
                  |L1.5292|
;;;1063   {
;;;1064      /* This function is deprecated in favor of png_permit_mng_features()
;;;1065         and will be removed from libpng-1.3.0 */
;;;1066      png_debug(1, "in png_permit_empty_plte, DEPRECATED.\n");
;;;1067      if (png_ptr == NULL)
;;;1068         return;
;;;1069      png_ptr->mng_features_permitted = (png_byte)
;;;1070        ((png_ptr->mng_features_permitted & (~(PNG_FLAG_MNG_EMPTY_PLTE))) |
;;;1071        ((empty_plte_permitted & PNG_FLAG_MNG_EMPTY_PLTE)));
;;;1072   }
0014ac  4770              BX       lr
                  |L1.5294|
0014ae  f890236c          LDRB     r2,[r0,#0x36c]        ;1069
0014b2  f3610200          BFI      r2,r1,#0,#1           ;1069
0014b6  b2d2              UXTB     r2,r2                 ;1069
0014b8  f8c0236c          STR      r2,[r0,#0x36c]        ;1069
0014bc  bf00              NOP      
0014be  e7f5              B        |L1.5292|
;;;1073   #endif
                          ENDP

                  png_permit_mng_features PROC
;;;1077   png_uint_32 PNGAPI
;;;1078   png_permit_mng_features (png_structp png_ptr, png_uint_32 mng_features)
0014c0  4602              MOV      r2,r0
;;;1079   {
;;;1080      png_debug(1, "in png_permit_mng_features\n");
;;;1081      if (png_ptr == NULL)
0014c2  b90a              CBNZ     r2,|L1.5320|
;;;1082         return (png_uint_32)0;
0014c4  2000              MOVS     r0,#0
                  |L1.5318|
;;;1083      png_ptr->mng_features_permitted =
;;;1084        (png_byte)(mng_features & PNG_ALL_MNG_FEATURES);
;;;1085      return (png_uint_32)png_ptr->mng_features_permitted;
;;;1086   }
0014c6  4770              BX       lr
                  |L1.5320|
0014c8  f0010005          AND      r0,r1,#5              ;1083
0014cc  f8c2036c          STR      r0,[r2,#0x36c]        ;1083
0014d0  f8d2036c          LDR      r0,[r2,#0x36c]        ;1085
0014d4  e7f7              B        |L1.5318|
;;;1087   #endif
                          ENDP

                  png_set_keep_unknown_chunks PROC
;;;1090   void PNGAPI
;;;1091   png_set_keep_unknown_chunks(png_structp png_ptr, int keep, png_bytep
0014d6  e92d5ff0          PUSH     {r4-r12,lr}
;;;1092      chunk_list, int num_chunks)
;;;1093   {
0014da  4604              MOV      r4,r0
0014dc  460f              MOV      r7,r1
0014de  4691              MOV      r9,r2
0014e0  461d              MOV      r5,r3
;;;1094       png_bytep new_list, p;
;;;1095       int i, old_num_chunks;
;;;1096       if (png_ptr == NULL)
0014e2  b90c              CBNZ     r4,|L1.5352|
                  |L1.5348|
;;;1097          return;
;;;1098       if (num_chunks == 0)
;;;1099       {
;;;1100         if(keep == PNG_HANDLE_CHUNK_ALWAYS || keep == PNG_HANDLE_CHUNK_IF_SAFE)
;;;1101           png_ptr->flags |= PNG_FLAG_KEEP_UNKNOWN_CHUNKS;
;;;1102         else
;;;1103           png_ptr->flags &= ~PNG_FLAG_KEEP_UNKNOWN_CHUNKS;
;;;1104   
;;;1105         if(keep == PNG_HANDLE_CHUNK_ALWAYS)
;;;1106           png_ptr->flags |= PNG_FLAG_KEEP_UNSAFE_CHUNKS;
;;;1107         else
;;;1108           png_ptr->flags &= ~PNG_FLAG_KEEP_UNSAFE_CHUNKS;
;;;1109         return;
;;;1110       }
;;;1111       if (chunk_list == NULL)
;;;1112         return;
;;;1113       old_num_chunks=png_ptr->num_chunk_list;
;;;1114       new_list=(png_bytep)png_malloc(png_ptr,
;;;1115          (png_uint_32)(5*(num_chunks+old_num_chunks)));
;;;1116       if(png_ptr->chunk_list != NULL)
;;;1117       {
;;;1118          png_memcpy(new_list, png_ptr->chunk_list,
;;;1119             (png_size_t)(5*old_num_chunks));
;;;1120          png_free(png_ptr, png_ptr->chunk_list);
;;;1121          png_ptr->chunk_list=NULL;
;;;1122       }
;;;1123       png_memcpy(new_list+5*old_num_chunks, chunk_list,
;;;1124          (png_size_t)(5*num_chunks));
;;;1125       for (p=new_list+5*old_num_chunks+4, i=0; i<num_chunks; i++, p+=5)
;;;1126          *p=(png_byte)keep;
;;;1127       png_ptr->num_chunk_list=old_num_chunks+num_chunks;
;;;1128       png_ptr->chunk_list=new_list;
;;;1129   #ifdef PNG_FREE_ME_SUPPORTED
;;;1130       png_ptr->free_me |= PNG_FREE_LIST;
;;;1131   #endif
;;;1132   }
0014e4  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.5352|
0014e8  bb05              CBNZ     r5,|L1.5420|
0014ea  2f03              CMP      r7,#3                 ;1100
0014ec  d001              BEQ      |L1.5362|
0014ee  2f02              CMP      r7,#2                 ;1100
0014f0  d106              BNE      |L1.5376|
                  |L1.5362|
0014f2  f8d401ac          LDR      r0,[r4,#0x1ac]        ;1101
0014f6  f4404000          ORR      r0,r0,#0x8000         ;1101
0014fa  f8c401ac          STR      r0,[r4,#0x1ac]        ;1101
0014fe  e005              B        |L1.5388|
                  |L1.5376|
001500  f8d401ac          LDR      r0,[r4,#0x1ac]        ;1103
001504  f4204000          BIC      r0,r0,#0x8000         ;1103
001508  f8c401ac          STR      r0,[r4,#0x1ac]        ;1103
                  |L1.5388|
00150c  2f03              CMP      r7,#3                 ;1105
00150e  d106              BNE      |L1.5406|
001510  f8d401ac          LDR      r0,[r4,#0x1ac]        ;1106
001514  f4403080          ORR      r0,r0,#0x10000        ;1106
001518  f8c401ac          STR      r0,[r4,#0x1ac]        ;1106
00151c  e005              B        |L1.5418|
                  |L1.5406|
00151e  f8d401ac          LDR      r0,[r4,#0x1ac]        ;1108
001522  f4203080          BIC      r0,r0,#0x10000        ;1108
001526  f8c401ac          STR      r0,[r4,#0x1ac]        ;1108
                  |L1.5418|
00152a  e7db              B        |L1.5348|
                  |L1.5420|
00152c  f1b90f00          CMP      r9,#0                 ;1111
001530  d15c              BNE      |L1.5612|
001532  e7d7              B        |L1.5348|
                  |L1.5428|
001534  69545874          DCB      "iTXt chunk not supported.",0
001538  20636875
00153c  6e6b206e
001540  6f742073
001544  7570706f
001548  72746564
00154c  2e00    
00154e  00                DCB      0
00154f  00                DCB      0
                  |L1.5456|
001550  496e7375          DCB      "Insufficient memory to store text",0
001554  66666963
001558  69656e74
00155c  206d656d
001560  6f727920
001564  746f2073
001568  746f7265
00156c  20746578
001570  7400    
001572  00                DCB      0
001573  00                DCB      0
                  |L1.5492|
001574  4e6f206d          DCB      "No memory for sPLT palettes.",0
001578  656d6f72
00157c  7920666f
001580  72207350
001584  4c542070
001588  616c6574
00158c  7465732e
001590  00      
001591  00                DCB      0
001592  00                DCB      0
001593  00                DCB      0
                  |L1.5524|
001594  4f757420          DCB      "Out of memory while processing unknown chunk.",0
001598  6f66206d
00159c  656d6f72
0015a0  79207768
0015a4  696c6520
0015a8  70726f63
0015ac  65737369
0015b0  6e672075
0015b4  6e6b6e6f
0015b8  776e2063
0015bc  68756e6b
0015c0  2e00    
0015c2  00                DCB      0
0015c3  00                DCB      0
                  |L1.5572|
0015c4  4f757420          DCB      "Out of memory processing unknown chunk.",0
0015c8  6f66206d
0015cc  656d6f72
0015d0  79207072
0015d4  6f636573
0015d8  73696e67
0015dc  20756e6b
0015e0  6e6f776e
0015e4  20636875
0015e8  6e6b2e00
                  |L1.5612|
0015ec  f8d4635c          LDR      r6,[r4,#0x35c]        ;1113
0015f0  19a8              ADDS     r0,r5,r6              ;1114
0015f2  eb000180          ADD      r1,r0,r0,LSL #2       ;1114
0015f6  4620              MOV      r0,r4                 ;1114
0015f8  f7fffffe          BL       png_malloc
0015fc  4680              MOV      r8,r0                 ;1114
0015fe  f8d40360          LDR      r0,[r4,#0x360]        ;1116
001602  b170              CBZ      r0,|L1.5666|
001604  eb060286          ADD      r2,r6,r6,LSL #2       ;1118
001608  4640              MOV      r0,r8                 ;1118
00160a  f8d41360          LDR      r1,[r4,#0x360]        ;1118
00160e  f7fffffe          BL       __aeabi_memcpy
001612  4620              MOV      r0,r4                 ;1120
001614  f8d41360          LDR      r1,[r4,#0x360]        ;1120
001618  f7fffffe          BL       png_free
00161c  2000              MOVS     r0,#0                 ;1121
00161e  f8c40360          STR      r0,[r4,#0x360]        ;1121
                  |L1.5666|
001622  eb050285          ADD      r2,r5,r5,LSL #2       ;1123
001626  2105              MOVS     r1,#5                 ;1123
001628  fb018006          MLA      r0,r1,r6,r8           ;1123
00162c  4649              MOV      r1,r9                 ;1123
00162e  f7fffffe          BL       __aeabi_memcpy
001632  2005              MOVS     r0,#5                 ;1125
001634  fb008006          MLA      r0,r0,r6,r8           ;1125
001638  f1000a04          ADD      r10,r0,#4             ;1125
00163c  f04f0b00          MOV      r11,#0                ;1125
001640  e005              B        |L1.5710|
                  |L1.5698|
001642  f88a7000          STRB     r7,[r10,#0]           ;1126
001646  f10b0b01          ADD      r11,r11,#1            ;1125
00164a  f10a0a05          ADD      r10,r10,#5            ;1125
                  |L1.5710|
00164e  45ab              CMP      r11,r5                ;1125
001650  dbf7              BLT      |L1.5698|
001652  1970              ADDS     r0,r6,r5              ;1127
001654  f8c4035c          STR      r0,[r4,#0x35c]        ;1127
001658  f8c48360          STR      r8,[r4,#0x360]        ;1128
00165c  f8d40350          LDR      r0,[r4,#0x350]        ;1130
001660  f4406080          ORR      r0,r0,#0x400          ;1130
001664  f8c40350          STR      r0,[r4,#0x350]        ;1130
001668  bf00              NOP      
00166a  e73b              B        |L1.5348|
;;;1133   #endif
                          ENDP

                  png_set_read_user_chunk_fn PROC
;;;1136   void PNGAPI
;;;1137   png_set_read_user_chunk_fn(png_structp png_ptr, png_voidp user_chunk_ptr,
00166c  b900              CBNZ     r0,|L1.5744|
                  |L1.5742|
;;;1138      png_user_chunk_ptr read_user_chunk_fn)
;;;1139   {
;;;1140      png_debug(1, "in png_set_read_user_chunk_fn\n");
;;;1141      if (png_ptr == NULL)
;;;1142         return;
;;;1143      png_ptr->read_user_chunk_fn = read_user_chunk_fn;
;;;1144      png_ptr->user_chunk_ptr = user_chunk_ptr;
;;;1145   }
00166e  4770              BX       lr
                  |L1.5744|
001670  f8c02358          STR      r2,[r0,#0x358]        ;1143
001674  f8c01354          STR      r1,[r0,#0x354]        ;1144
001678  bf00              NOP      
00167a  e7f8              B        |L1.5742|
;;;1146   #endif
                          ENDP

                  png_set_rows PROC
;;;1149   void PNGAPI
;;;1150   png_set_rows(png_structp png_ptr, png_infop info_ptr, png_bytepp row_pointers)
00167c  b570              PUSH     {r4-r6,lr}
;;;1151   {
00167e  4606              MOV      r6,r0
001680  460c              MOV      r4,r1
001682  4615              MOV      r5,r2
;;;1152      png_debug1(1, "in %s storage function\n", "rows");
;;;1153   
;;;1154      if (png_ptr == NULL || info_ptr == NULL)
001684  b106              CBZ      r6,|L1.5768|
001686  b904              CBNZ     r4,|L1.5770|
                  |L1.5768|
;;;1155         return;
;;;1156   
;;;1157      if(info_ptr->row_pointers && (info_ptr->row_pointers != row_pointers))
;;;1158         png_free_data(png_ptr, info_ptr, PNG_FREE_ROWS, 0);
;;;1159      info_ptr->row_pointers = row_pointers;
;;;1160      if(row_pointers)
;;;1161         info_ptr->valid |= PNG_INFO_IDAT;
;;;1162   }
001688  bd70              POP      {r4-r6,pc}
                  |L1.5770|
00168a  f8d400f8          LDR      r0,[r4,#0xf8]         ;1157
00168e  b148              CBZ      r0,|L1.5796|
001690  f8d400f8          LDR      r0,[r4,#0xf8]         ;1157
001694  42a8              CMP      r0,r5                 ;1157
001696  d005              BEQ      |L1.5796|
001698  2300              MOVS     r3,#0                 ;1158
00169a  2240              MOVS     r2,#0x40              ;1158
00169c  4621              MOV      r1,r4                 ;1158
00169e  4630              MOV      r0,r6                 ;1158
0016a0  f7fffffe          BL       png_free_data
                  |L1.5796|
0016a4  f8c450f8          STR      r5,[r4,#0xf8]         ;1159
0016a8  b11d              CBZ      r5,|L1.5810|
0016aa  68a0              LDR      r0,[r4,#8]            ;1161
0016ac  f4404000          ORR      r0,r0,#0x8000         ;1161
0016b0  60a0              STR      r0,[r4,#8]            ;1161
                  |L1.5810|
0016b2  bf00              NOP      
0016b4  e7e8              B        |L1.5768|
;;;1163   #endif
                          ENDP

                  png_set_compression_buffer_size PROC
;;;1166   void PNGAPI
;;;1167   png_set_compression_buffer_size(png_structp png_ptr, png_uint_32 size)
0016b6  b570              PUSH     {r4-r6,lr}
;;;1168   {
0016b8  4604              MOV      r4,r0
0016ba  460d              MOV      r5,r1
;;;1169       if (png_ptr == NULL)
0016bc  b904              CBNZ     r4,|L1.5824|
                  |L1.5822|
;;;1170          return;
;;;1171       if(png_ptr->zbuf)
;;;1172          png_free(png_ptr, png_ptr->zbuf);
;;;1173       png_ptr->zbuf_size = (png_size_t)size;
;;;1174       png_ptr->zbuf = (png_bytep)png_malloc(png_ptr, size);
;;;1175       png_ptr->zstream.next_out = png_ptr->zbuf;
;;;1176       png_ptr->zstream.avail_out = (uInt)png_ptr->zbuf_size;
;;;1177   }
0016be  bd70              POP      {r4-r6,pc}
                  |L1.5824|
0016c0  f8d401ec          LDR      r0,[r4,#0x1ec]        ;1171
0016c4  b120              CBZ      r0,|L1.5840|
0016c6  4620              MOV      r0,r4                 ;1172
0016c8  f8d411ec          LDR      r1,[r4,#0x1ec]        ;1172
0016cc  f7fffffe          BL       png_free
                  |L1.5840|
0016d0  f8c451f0          STR      r5,[r4,#0x1f0]        ;1173
0016d4  4629              MOV      r1,r5                 ;1174
0016d6  4620              MOV      r0,r4                 ;1174
0016d8  f7fffffe          BL       png_malloc
0016dc  f8c401ec          STR      r0,[r4,#0x1ec]        ;1174
0016e0  f44f70e0          MOV      r0,#0x1c0             ;1175
0016e4  f8d411ec          LDR      r1,[r4,#0x1ec]        ;1175
0016e8  5101              STR      r1,[r0,r4]            ;1175
0016ea  1d00              ADDS     r0,r0,#4              ;1176
0016ec  f8d411f0          LDR      r1,[r4,#0x1f0]        ;1176
0016f0  5101              STR      r1,[r0,r4]            ;1176
0016f2  bf00              NOP      
0016f4  e7e3              B        |L1.5822|
;;;1178   #endif
                          ENDP

                  png_set_invalid PROC
;;;1180   void PNGAPI
;;;1181   png_set_invalid(png_structp png_ptr, png_infop info_ptr, int mask)
0016f6  b118              CBZ      r0,|L1.5888|
;;;1182   {
;;;1183      if (png_ptr && info_ptr)
0016f8  b111              CBZ      r1,|L1.5888|
;;;1184         info_ptr->valid &= ~(mask);
0016fa  688b              LDR      r3,[r1,#8]
0016fc  4393              BICS     r3,r3,r2
0016fe  608b              STR      r3,[r1,#8]
                  |L1.5888|
;;;1185   }
001700  4770              BX       lr
;;;1186   
                          ENDP

                  png_set_asm_flags PROC
;;;1191   void PNGAPI
;;;1192   png_set_asm_flags (png_structp png_ptr, png_uint_32 asm_flags)
001702  b900              CBNZ     r0,|L1.5894|
                  |L1.5892|
;;;1193   {
;;;1194   #ifdef PNG_MMX_CODE_SUPPORTED
;;;1195       png_uint_32 settable_asm_flags;
;;;1196       png_uint_32 settable_mmx_flags;
;;;1197   #endif
;;;1198       if (png_ptr == NULL)
;;;1199          return;
;;;1200   #ifdef PNG_MMX_CODE_SUPPORTED
;;;1201   
;;;1202       settable_mmx_flags =
;;;1203   #ifdef PNG_HAVE_ASSEMBLER_COMBINE_ROW
;;;1204                            PNG_ASM_FLAG_MMX_READ_COMBINE_ROW  |
;;;1205   #endif
;;;1206   #ifdef PNG_HAVE_ASSEMBLER_READ_INTERLACE
;;;1207                            PNG_ASM_FLAG_MMX_READ_INTERLACE    |
;;;1208   #endif
;;;1209   #ifdef PNG_HAVE_ASSEMBLER_READ_FILTER_ROW
;;;1210                            PNG_ASM_FLAG_MMX_READ_FILTER_SUB   |
;;;1211                            PNG_ASM_FLAG_MMX_READ_FILTER_UP    |
;;;1212                            PNG_ASM_FLAG_MMX_READ_FILTER_AVG   |
;;;1213                            PNG_ASM_FLAG_MMX_READ_FILTER_PAETH |
;;;1214   #endif
;;;1215                            0;
;;;1216   
;;;1217       /* could be some non-MMX ones in the future, but not currently: */
;;;1218       settable_asm_flags = settable_mmx_flags;
;;;1219   
;;;1220       if (!(png_ptr->asm_flags & PNG_ASM_FLAG_MMX_SUPPORT_COMPILED) ||
;;;1221           !(png_ptr->asm_flags & PNG_ASM_FLAG_MMX_SUPPORT_IN_CPU))
;;;1222       {
;;;1223           /* clear all MMX flags if MMX isn't supported */
;;;1224           settable_asm_flags &= ~settable_mmx_flags;
;;;1225           png_ptr->asm_flags &= ~settable_mmx_flags;
;;;1226       }
;;;1227   
;;;1228       /* we're replacing the settable bits with those passed in by the user,
;;;1229        * so first zero them out of the master copy, then bitwise-OR in the
;;;1230        * allowed subset that was requested */
;;;1231   
;;;1232       png_ptr->asm_flags &= ~settable_asm_flags;               /* zero them */
;;;1233       png_ptr->asm_flags |= (asm_flags & settable_asm_flags);  /* set them */
;;;1234   #endif /* ?PNG_MMX_CODE_SUPPORTED */
;;;1235   }
001704  4770              BX       lr
                  |L1.5894|
001706  bf00              NOP      
001708  e7fc              B        |L1.5892|
;;;1236   
                          ENDP

                  png_set_mmx_thresholds PROC
;;;1238   void PNGAPI
;;;1239   png_set_mmx_thresholds (png_structp png_ptr,
00170a  b900              CBNZ     r0,|L1.5902|
                  |L1.5900|
;;;1240                           png_byte mmx_bitdepth_threshold,
;;;1241                           png_uint_32 mmx_rowbytes_threshold)
;;;1242   {
;;;1243       if (png_ptr == NULL)
;;;1244          return;
;;;1245   #ifdef PNG_MMX_CODE_SUPPORTED
;;;1246       png_ptr->mmx_bitdepth_threshold = mmx_bitdepth_threshold;
;;;1247       png_ptr->mmx_rowbytes_threshold = mmx_rowbytes_threshold;
;;;1248   #endif /* ?PNG_MMX_CODE_SUPPORTED */
;;;1249   }
00170c  4770              BX       lr
                  |L1.5902|
00170e  bf00              NOP      
001710  e7fc              B        |L1.5900|
;;;1250   #endif /* ?PNG_ASSEMBLER_CODE_SUPPORTED */
                          ENDP

                  png_set_user_limits PROC
;;;1254   void PNGAPI
;;;1255   png_set_user_limits (png_structp png_ptr, png_uint_32 user_width_max,
001712  b900              CBNZ     r0,|L1.5910|
                  |L1.5908|
;;;1256       png_uint_32 user_height_max)
;;;1257   {
;;;1258       /* Images with dimensions larger than these limits will be
;;;1259        * rejected by png_set_IHDR().  To accept any PNG datastream
;;;1260        * regardless of dimensions, set both limits to 0x7ffffffL.
;;;1261        */
;;;1262       if(png_ptr == NULL) return;
;;;1263       png_ptr->user_width_max = user_width_max;
;;;1264       png_ptr->user_height_max = user_height_max;
;;;1265   }
001714  4770              BX       lr
                  |L1.5910|
001716  f8c0139c          STR      r1,[r0,#0x39c]        ;1263
00171a  f8c023a0          STR      r2,[r0,#0x3a0]        ;1264
00171e  bf00              NOP      
001720  e7f8              B        |L1.5908|
;;;1266   #endif /* ?PNG_SET_USER_LIMITS_SUPPORTED */
                          ENDP

