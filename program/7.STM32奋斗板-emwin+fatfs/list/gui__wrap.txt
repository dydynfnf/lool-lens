; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\gui__wrap.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\gui__wrap.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -I.\GUI\AntiAlias -I.\GUI\Config -I.\GUI\ConvertColor -I.\GUI\ConvertMono -I.\GUI\Core -I.\GUI\Font -I.\GUI\GUI_X -I.\GUI\JPEG -I.\GUI\LCDDriver -I.\GUI\MemDev -I.\GUI\MultiLayer -I.\GUI\Widget -I.\GUI\WM -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\INC\ST\STM32F10x -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\gui__wrap.crf GUI\Core\GUI__Wrap.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=1

                  _IsLineEnd PROC
;;;31     */
;;;32     static int _IsLineEnd(U16 Char) {
000000  4601              MOV      r1,r0
;;;33       if (!Char || (Char == '\n')) {
000002  b109              CBZ      r1,|L1.8|
000004  290a              CMP      r1,#0xa
000006  d101              BNE      |L1.12|
                  |L1.8|
;;;34         return 1;
000008  2001              MOVS     r0,#1
                  |L1.10|
;;;35       }
;;;36       return 0;
;;;37     }
00000a  4770              BX       lr
                  |L1.12|
00000c  2000              MOVS     r0,#0                 ;36
00000e  e7fc              B        |L1.10|
;;;38     
                          ENDP

                  _GetNoWrap PROC
;;;42     */
;;;43     static int _GetNoWrap(const char GUI_UNI_PTR * s) {
000010  b510              PUSH     {r4,lr}
000012  4604              MOV      r4,r0
;;;44       return GUI__GetLineNumChars(s, 0x7FFF);
000014  f64771ff          MOV      r1,#0x7fff
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       GUI__GetLineNumChars
;;;45     }
00001e  bd10              POP      {r4,pc}
;;;46     
                          ENDP

                  _GetWordWrap PROC
;;;177    */
;;;178    static int _GetWordWrap(const char GUI_UNI_PTR * s, int xSize, int * pxDist) {
000020  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
000024  b082              SUB      sp,sp,#8
000026  4688              MOV      r8,r1
000028  4617              MOV      r7,r2
;;;179      int xDist = 0, NumChars = 0, WordWrap = 0, CharDist = 0;
00002a  f04f0600          MOV      r6,#0
00002e  4635              MOV      r5,r6
000030  4628              MOV      r0,r5
000032  9001              STR      r0,[sp,#4]
000034  4681              MOV      r9,r0
;;;180      U16 Char, PrevChar = 0, FirstChar = 0;
000036  4682              MOV      r10,r0
000038  4683              MOV      r11,r0
;;;181      while (1) {
00003a  e02f              B        |L1.156|
                  |L1.60|
;;;182        Char = GUI_UC__GetCharCodeInc(&s);   /* Similar to:  *s++ */
00003c  a802              ADD      r0,sp,#8
00003e  f7fffffe          BL       GUI_UC__GetCharCodeInc
000042  4604              MOV      r4,r0
;;;183        if (!FirstChar) {
000044  f1bb0f00          CMP      r11,#0
000048  d100              BNE      |L1.76|
;;;184          FirstChar = Char;
00004a  46a3              MOV      r11,r4
                  |L1.76|
;;;185        }
;;;186        /* Let's first check if the line end is reached. In this case we are done. */
;;;187        if (_IsLineEnd(Char)) {
00004c  4620              MOV      r0,r4
00004e  f7fffffe          BL       _IsLineEnd
000052  b108              CBZ      r0,|L1.88|
;;;188          WordWrap = NumChars;
000054  9501              STR      r5,[sp,#4]
;;;189          break;
000056  e022              B        |L1.158|
                  |L1.88|
;;;190        }
;;;191        /* If the current character is part of leading spaces the position can be used for wrapping */
;;;192        if ((Char != ' ') && (FirstChar == ' ')) {
000058  2c20              CMP      r4,#0x20
00005a  d006              BEQ      |L1.106|
00005c  f1bb0f20          CMP      r11,#0x20
000060  d103              BNE      |L1.106|
;;;193          FirstChar = 0;
000062  f04f0b00          MOV      r11,#0
;;;194          WordWrap = NumChars;
000066  9501              STR      r5,[sp,#4]
000068  e00b              B        |L1.130|
                  |L1.106|
;;;195        /* If the current character is a space and the previous character not, we found a wrapping position */
;;;196        } else if ((Char == ' ') && (Char != PrevChar)) {
00006a  2c20              CMP      r4,#0x20
00006c  d103              BNE      |L1.118|
00006e  4554              CMP      r4,r10
000070  d001              BEQ      |L1.118|
;;;197          WordWrap = NumChars;
000072  9501              STR      r5,[sp,#4]
000074  e005              B        |L1.130|
                  |L1.118|
;;;198        /* If the current character is a trailing space the position can be used for wrapping */
;;;199        } else if ((Char == ' ') && (PrevChar == ' ')) {
000076  2c20              CMP      r4,#0x20
000078  d103              BNE      |L1.130|
00007a  f1ba0f20          CMP      r10,#0x20
00007e  d100              BNE      |L1.130|
;;;200          WordWrap = NumChars;
000080  9501              STR      r5,[sp,#4]
                  |L1.130|
;;;201        }
;;;202        PrevChar = Char;
000082  46a2              MOV      r10,r4
;;;203        CharDist = GUI_GetCharDistX(Char);
000084  4620              MOV      r0,r4
000086  f7fffffe          BL       GUI_GetCharDistX
00008a  4681              MOV      r9,r0
;;;204        xDist += CharDist;
00008c  444e              ADD      r6,r6,r9
;;;205        if ((xDist <= xSize) || (NumChars == 0)) {
00008e  4546              CMP      r6,r8
000090  dd00              BLE      |L1.148|
000092  b915              CBNZ     r5,|L1.154|
                  |L1.148|
;;;206          NumChars++;
000094  f1050501          ADD      r5,r5,#1
000098  e000              B        |L1.156|
                  |L1.154|
;;;207        } else {
;;;208          break;
00009a  e000              B        |L1.158|
                  |L1.156|
00009c  e7ce              B        |L1.60|
                  |L1.158|
00009e  bf00              NOP                            ;189
;;;209        }
;;;210      }
;;;211      if (!WordWrap) {
0000a0  9801              LDR      r0,[sp,#4]
0000a2  b900              CBNZ     r0,|L1.166|
;;;212        WordWrap = NumChars;
0000a4  9501              STR      r5,[sp,#4]
                  |L1.166|
;;;213      }
;;;214      if (pxDist) {
0000a6  b117              CBZ      r7,|L1.174|
;;;215        xDist -= CharDist;
0000a8  eba60609          SUB      r6,r6,r9
;;;216        *pxDist = xDist;
0000ac  603e              STR      r6,[r7,#0]
                  |L1.174|
;;;217      }
;;;218      return WordWrap;
0000ae  9801              LDR      r0,[sp,#4]
;;;219    }
0000b0  b005              ADD      sp,sp,#0x14
0000b2  e8bd8ff0          POP      {r4-r11,pc}
;;;220    
                          ENDP

                  _GetCharWrap PROC
;;;224    */
;;;225    static int _GetCharWrap(const char GUI_UNI_PTR * s, int xSize) {
0000b6  e92d41f3          PUSH     {r0,r1,r4-r8,lr}
0000ba  460e              MOV      r6,r1
;;;226      int xDist = 0, NumChars = 0;
0000bc  f04f0700          MOV      r7,#0
0000c0  463c              MOV      r4,r7
;;;227      U16 Char;
;;;228      while ((Char = GUI_UC__GetCharCodeInc(&s)) != 0) {
0000c2  e00b              B        |L1.220|
                  |L1.196|
;;;229        xDist += GUI_GetCharDistX(Char);
0000c4  4628              MOV      r0,r5
0000c6  f7fffffe          BL       GUI_GetCharDistX
0000ca  4407              ADD      r7,r7,r0
;;;230        if ((NumChars && (xDist > xSize)) || (Char == '\n')) {
0000cc  b10c              CBZ      r4,|L1.210|
0000ce  42b7              CMP      r7,r6
0000d0  dc01              BGT      |L1.214|
                  |L1.210|
0000d2  2d0a              CMP      r5,#0xa
0000d4  d100              BNE      |L1.216|
                  |L1.214|
;;;231          break;
0000d6  e006              B        |L1.230|
                  |L1.216|
;;;232        }
;;;233        NumChars++;
0000d8  f1040401          ADD      r4,r4,#1
                  |L1.220|
0000dc  4668              MOV      r0,sp                 ;228
0000de  f7fffffe          BL       GUI_UC__GetCharCodeInc
0000e2  0005              MOVS     r5,r0                 ;228
0000e4  d1ee              BNE      |L1.196|
                  |L1.230|
0000e6  bf00              NOP                            ;231
;;;234      }
;;;235      return NumChars;
0000e8  4620              MOV      r0,r4
;;;236    }
0000ea  e8bd81fc          POP      {r2-r8,pc}
;;;237    
                          ENDP

                  _WrapGetNumCharsDisp PROC
;;;243    */
;;;244    static int _WrapGetNumCharsDisp(const char GUI_UNI_PTR * pText, int xSize, GUI_WRAPMODE WrapMode, int * pxDist) {
0000ee  e92d41f0          PUSH     {r4-r8,lr}
0000f2  4607              MOV      r7,r0
0000f4  4688              MOV      r8,r1
0000f6  4615              MOV      r5,r2
0000f8  461e              MOV      r6,r3
;;;245      int r;
;;;246      switch (WrapMode) {
0000fa  2d01              CMP      r5,#1
0000fc  d002              BEQ      |L1.260|
0000fe  2d02              CMP      r5,#2
000100  d10d              BNE      |L1.286|
000102  e006              B        |L1.274|
                  |L1.260|
;;;247      case GUI_WRAPMODE_WORD:
;;;248        r = _GetWordWrap(pText, xSize, pxDist);
000104  4632              MOV      r2,r6
000106  4641              MOV      r1,r8
000108  4638              MOV      r0,r7
00010a  f7fffffe          BL       _GetWordWrap
00010e  4604              MOV      r4,r0
;;;249        break;
000110  e00a              B        |L1.296|
                  |L1.274|
;;;250      case GUI_WRAPMODE_CHAR:
;;;251        r = _GetCharWrap(pText, xSize);
000112  4641              MOV      r1,r8
000114  4638              MOV      r0,r7
000116  f7fffffe          BL       _GetCharWrap
00011a  4604              MOV      r4,r0
;;;252        break;
00011c  e004              B        |L1.296|
                  |L1.286|
;;;253      default:
;;;254        r = _GetNoWrap(pText);
00011e  4638              MOV      r0,r7
000120  f7fffffe          BL       _GetNoWrap
000124  4604              MOV      r4,r0
000126  bf00              NOP                            ;246
                  |L1.296|
000128  bf00              NOP                            ;249
;;;255      }
;;;256      return r;
00012a  4620              MOV      r0,r4
;;;257    }
00012c  e8bd81f0          POP      {r4-r8,pc}
;;;258    
                          ENDP

                  GUI__WrapGetNumCharsDisp PROC
;;;273    */
;;;274    int GUI__WrapGetNumCharsDisp(const char GUI_UNI_PTR * pText, int xSize, GUI_WRAPMODE WrapMode) {
000130  b570              PUSH     {r4-r6,lr}
000132  4604              MOV      r4,r0
000134  460d              MOV      r5,r1
000136  4616              MOV      r6,r2
;;;275      return _WrapGetNumCharsDisp(pText, xSize, WrapMode, 0);
000138  f04f0300          MOV      r3,#0
00013c  4632              MOV      r2,r6
00013e  4629              MOV      r1,r5
000140  4620              MOV      r0,r4
000142  f7fffffe          BL       _WrapGetNumCharsDisp
;;;276    }
000146  bd70              POP      {r4-r6,pc}
;;;277    
                          ENDP

                  GUI__WrapGetNumCharsToNextLine PROC
;;;281    */
;;;282    int GUI__WrapGetNumCharsToNextLine(const char GUI_UNI_PTR * pText, int xSize, GUI_WRAPMODE WrapMode) {
000148  e92d41f7          PUSH     {r0-r2,r4-r8,lr}
00014c  b081              SUB      sp,sp,#4
00014e  460e              MOV      r6,r1
000150  4617              MOV      r7,r2
;;;283      int NumChars;
;;;284      int xDist;
;;;285      U16 Char;
;;;286      NumChars = _WrapGetNumCharsDisp(pText, xSize, WrapMode, &xDist);
000152  466b              MOV      r3,sp
000154  463a              MOV      r2,r7
000156  4631              MOV      r1,r6
000158  9801              LDR      r0,[sp,#4]
00015a  f7fffffe          BL       _WrapGetNumCharsDisp
00015e  4604              MOV      r4,r0
;;;287      pText   += GUI_UC__NumChars2NumBytes(pText, NumChars);
000160  4621              MOV      r1,r4
000162  9801              LDR      r0,[sp,#4]
000164  f7fffffe          BL       GUI_UC__NumChars2NumBytes
000168  9901              LDR      r1,[sp,#4]
00016a  4408              ADD      r0,r0,r1
00016c  9001              STR      r0,[sp,#4]
;;;288      Char     = GUI_UC__GetCharCodeInc(&pText);
00016e  a801              ADD      r0,sp,#4
000170  f7fffffe          BL       GUI_UC__GetCharCodeInc
000174  4605              MOV      r5,r0
;;;289      if (Char == '\n') {
000176  2d0a              CMP      r5,#0xa
000178  d102              BNE      |L1.384|
;;;290        NumChars++;
00017a  f1040401          ADD      r4,r4,#1
00017e  e017              B        |L1.432|
                  |L1.384|
;;;291      } else {
;;;292        if ((WrapMode == GUI_WRAPMODE_WORD) && (Char == ' ')) {
000180  2f01              CMP      r7,#1
000182  d115              BNE      |L1.432|
000184  2d20              CMP      r5,#0x20
000186  d113              BNE      |L1.432|
;;;293          int xDistChar = GUI_GetCharDistX(Char);
000188  4628              MOV      r0,r5
00018a  f7fffffe          BL       GUI_GetCharDistX
00018e  4680              MOV      r8,r0
;;;294          while ((Char == ' ') && (xSize >= xDist)) {
000190  e008              B        |L1.420|
                  |L1.402|
;;;295            NumChars++;
000192  f1040401          ADD      r4,r4,#1
;;;296            xDist += xDistChar;
000196  9800              LDR      r0,[sp,#0]
000198  4440              ADD      r0,r0,r8
00019a  9000              STR      r0,[sp,#0]
;;;297            Char = GUI_UC__GetCharCodeInc(&pText);
00019c  a801              ADD      r0,sp,#4
00019e  f7fffffe          BL       GUI_UC__GetCharCodeInc
0001a2  4605              MOV      r5,r0
                  |L1.420|
0001a4  2d20              CMP      r5,#0x20              ;294
0001a6  d102              BNE      |L1.430|
0001a8  9800              LDR      r0,[sp,#0]            ;294
0001aa  4286              CMP      r6,r0                 ;294
0001ac  daf1              BGE      |L1.402|
                  |L1.430|
;;;298          }
;;;299        }
0001ae  bf00              NOP      
                  |L1.432|
;;;300      }
;;;301      return NumChars;
0001b0  4620              MOV      r0,r4
;;;302    }
0001b2  b004              ADD      sp,sp,#0x10
0001b4  e8bd81f0          POP      {r4-r8,pc}
;;;303    
                          ENDP

                  GUI__WrapGetNumBytesToNextLine PROC
;;;307    */
;;;308    int GUI__WrapGetNumBytesToNextLine(const char GUI_UNI_PTR * pText, int xSize, GUI_WRAPMODE WrapMode) {
0001b8  e92d41f0          PUSH     {r4-r8,lr}
0001bc  4604              MOV      r4,r0
0001be  460d              MOV      r5,r1
0001c0  4616              MOV      r6,r2
;;;309      int NumChars, NumBytes;
;;;310      NumChars = GUI__WrapGetNumCharsToNextLine(pText, xSize, WrapMode);
0001c2  4632              MOV      r2,r6
0001c4  4629              MOV      r1,r5
0001c6  4620              MOV      r0,r4
0001c8  f7fffffe          BL       GUI__WrapGetNumCharsToNextLine
0001cc  4680              MOV      r8,r0
;;;311      NumBytes = GUI_UC__NumChars2NumBytes(pText, NumChars);
0001ce  4641              MOV      r1,r8
0001d0  4620              MOV      r0,r4
0001d2  f7fffffe          BL       GUI_UC__NumChars2NumBytes
0001d6  4607              MOV      r7,r0
;;;312      return NumBytes;
0001d8  4638              MOV      r0,r7
;;;313    }
0001da  e8bd81f0          POP      {r4-r8,pc}
;;;314    
                          ENDP

