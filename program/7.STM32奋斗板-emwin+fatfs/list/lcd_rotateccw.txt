; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\lcd_rotateccw.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\lcd_rotateccw.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -I.\GUI\AntiAlias -I.\GUI\Config -I.\GUI\ConvertColor -I.\GUI\ConvertMono -I.\GUI\Core -I.\GUI\Font -I.\GUI\GUI_X -I.\GUI\JPEG -I.\GUI\LCDDriver -I.\GUI\MemDev -I.\GUI\MultiLayer -I.\GUI\Widget -I.\GUI\WM -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\INC\ST\STM32F10x -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\lcd_rotateccw.crf GUI\Core\LCD_RotateCCW.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _DrawBitLine1BPP PROC
;;;37     */
;;;38     static void  _DrawBitLine1BPP(int x, int y, U8 const GUI_UNI_PTR *p, int Diff, int xsize, const LCD_PIXELINDEX*pTrans) {
000000  e92d4ff8          PUSH     {r3-r11,lr}
000004  4681              MOV      r9,r0
000006  460e              MOV      r6,r1
000008  4615              MOV      r5,r2
00000a  461c              MOV      r4,r3
00000c  e9dd780a          LDRD     r7,r8,[sp,#0x28]
;;;39       LCD_PIXELINDEX Index0 = *(pTrans+0);
000010  f8b80000          LDRH     r0,[r8,#0]
000014  9000              STR      r0,[sp,#0]
;;;40       LCD_PIXELINDEX Index1 = *(pTrans+1);
000016  f8b8a002          LDRH     r10,[r8,#2]
;;;41       y -= Diff;
00001a  eba60604          SUB      r6,r6,r4
;;;42       switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
00001e  48fb              LDR      r0,|L1.1036|
000020  7c00              LDRB     r0,[r0,#0x10]  ; GUI_Context
000022  f0100003          ANDS     r0,r0,#3
000026  d004              BEQ      |L1.50|
000028  2801              CMP      r0,#1
00002a  d041              BEQ      |L1.176|
00002c  2802              CMP      r0,#2
00002e  d166              BNE      |L1.254|
000030  e020              B        |L1.116|
                  |L1.50|
;;;43       case 0:
;;;44         do {
000032  bf00              NOP      
                  |L1.52|
;;;45           LCDDEV_L0_SetPixelIndex(x, y, (*p & (0x80 >> Diff)) ? Index1 : Index0);
000034  7828              LDRB     r0,[r5,#0]
000036  2180              MOVS     r1,#0x80
000038  fa41f104          ASR      r1,r1,r4
00003c  4208              TST      r0,r1
00003e  d001              BEQ      |L1.68|
000040  4650              MOV      r0,r10
000042  e000              B        |L1.70|
                  |L1.68|
000044  9800              LDR      r0,[sp,#0]
                  |L1.70|
000046  4602              MOV      r2,r0
000048  48f0              LDR      r0,|L1.1036|
00004a  6c80              LDR      r0,[r0,#0x48]  ; GUI_Context
00004c  4631              MOV      r1,r6
00004e  6a43              LDR      r3,[r0,#0x24]
000050  4648              MOV      r0,r9
000052  4798              BLX      r3
;;;46           y--;
000054  f1a60601          SUB      r6,r6,#1
;;;47     			if (++Diff == 8) {
000058  f1040001          ADD      r0,r4,#1
00005c  4604              MOV      r4,r0
00005e  2808              CMP      r0,#8
000060  d103              BNE      |L1.106|
;;;48             Diff = 0;
000062  f04f0400          MOV      r4,#0
;;;49     				p++;
000066  f1050501          ADD      r5,r5,#1
                  |L1.106|
;;;50     			}
;;;51     		} while (--xsize);
00006a  f1a70001          SUB      r0,r7,#1
00006e  0007              MOVS     r7,r0
000070  d1e0              BNE      |L1.52|
;;;52         break;
000072  e044              B        |L1.254|
                  |L1.116|
;;;53       case LCD_DRAWMODE_TRANS:
;;;54         do {
000074  bf00              NOP      
                  |L1.118|
;;;55       		if (*p & (0x80 >> Diff))
000076  7829              LDRB     r1,[r5,#0]
000078  2080              MOVS     r0,#0x80
00007a  fa40f004          ASR      r0,r0,r4
00007e  4201              TST      r1,r0
000080  d006              BEQ      |L1.144|
;;;56             LCDDEV_L0_SetPixelIndex(x, y, Index1);
000082  48e2              LDR      r0,|L1.1036|
000084  6c80              LDR      r0,[r0,#0x48]  ; GUI_Context
000086  4652              MOV      r2,r10
000088  4631              MOV      r1,r6
00008a  6a43              LDR      r3,[r0,#0x24]
00008c  4648              MOV      r0,r9
00008e  4798              BLX      r3
                  |L1.144|
;;;57           y--;
000090  f1a60601          SUB      r6,r6,#1
;;;58     			if (++Diff == 8) {
000094  f1040001          ADD      r0,r4,#1
000098  4604              MOV      r4,r0
00009a  2808              CMP      r0,#8
00009c  d103              BNE      |L1.166|
;;;59             Diff = 0;
00009e  f04f0400          MOV      r4,#0
;;;60     				p++;
0000a2  f1050501          ADD      r5,r5,#1
                  |L1.166|
;;;61     			}
;;;62     		} while (--xsize);
0000a6  f1a70001          SUB      r0,r7,#1
0000aa  0007              MOVS     r7,r0
0000ac  d1e3              BNE      |L1.118|
;;;63         break;
0000ae  e026              B        |L1.254|
                  |L1.176|
;;;64       case LCD_DRAWMODE_XOR:;
;;;65         do {
0000b0  bf00              NOP      
                  |L1.178|
;;;66       		if (*p & (0x80 >> Diff)) {
0000b2  7828              LDRB     r0,[r5,#0]
0000b4  2180              MOVS     r1,#0x80
0000b6  fa41f104          ASR      r1,r1,r4
0000ba  4208              TST      r0,r1
0000bc  d00f              BEQ      |L1.222|
;;;67             int Pixel = LCD_L0_GetPixelIndex(x, y);
0000be  4631              MOV      r1,r6
0000c0  4648              MOV      r0,r9
0000c2  f7fffffe          BL       LCD_L0_GetPixelIndex
0000c6  4683              MOV      r11,r0
;;;68             LCDDEV_L0_SetPixelIndex(x, y, LCD_NUM_COLORS - 1 - Pixel);
0000c8  f64f70ff          MOV      r0,#0xffff
0000cc  eba0020b          SUB      r2,r0,r11
0000d0  48ce              LDR      r0,|L1.1036|
0000d2  6c80              LDR      r0,[r0,#0x48]  ; GUI_Context
0000d4  4631              MOV      r1,r6
0000d6  6a43              LDR      r3,[r0,#0x24]
0000d8  4648              MOV      r0,r9
0000da  4798              BLX      r3
;;;69           }
0000dc  bf00              NOP      
                  |L1.222|
;;;70           y--;
0000de  f1a60601          SUB      r6,r6,#1
;;;71     			if (++Diff == 8) {
0000e2  f1040001          ADD      r0,r4,#1
0000e6  4604              MOV      r4,r0
0000e8  2808              CMP      r0,#8
0000ea  d103              BNE      |L1.244|
;;;72             Diff = 0;
0000ec  f04f0400          MOV      r4,#0
;;;73     				p++;
0000f0  f1050501          ADD      r5,r5,#1
                  |L1.244|
;;;74     			}
;;;75     		} while (--xsize);
0000f4  f1a70001          SUB      r0,r7,#1
0000f8  0007              MOVS     r7,r0
0000fa  d1da              BNE      |L1.178|
;;;76         break;
0000fc  bf00              NOP      
                  |L1.254|
0000fe  bf00              NOP                            ;52
;;;77     	}
;;;78     }
000100  e8bd8ff8          POP      {r3-r11,pc}
;;;79     
                          ENDP

                  _DrawBitmap PROC
;;;86     */
;;;87     static void _DrawBitmap(int x0, int y0,
000104  e92d5ffc          PUSH     {r2-r12,lr}
;;;88                            int xsize, int ysize,
;;;89                            int BitsPerPixel, 
;;;90                            int BytesPerLine,
;;;91                            const U8 GUI_UNI_PTR * pData, int Diff,
;;;92                            const LCD_PIXELINDEX* pTrans)
;;;93     {
000108  4605              MOV      r5,r0
00010a  4689              MOV      r9,r1
00010c  4616              MOV      r6,r2
00010e  461f              MOV      r7,r3
000110  f8ddb040          LDR      r11,[sp,#0x40]
000114  f8dda030          LDR      r10,[sp,#0x30]
000118  f8dd8038          LDR      r8,[sp,#0x38]
;;;94       int i;
;;;95       /* Use _DrawBitLineXBPP */
;;;96       for (i=0; i<ysize; i++) {
00011c  f04f0400          MOV      r4,#0
000120  e010              B        |L1.324|
                  |L1.290|
;;;97         switch (BitsPerPixel) {
000122  f1ba0f01          CMP      r10,#1
000126  d108              BNE      |L1.314|
;;;98         case 1:
;;;99           _DrawBitLine1BPP(x0 + i, y0, pData, Diff, xsize, pTrans);
000128  1928              ADDS     r0,r5,r4
00012a  e9cd6b00          STRD     r6,r11,[sp,#0]
00012e  4642              MOV      r2,r8
000130  4649              MOV      r1,r9
000132  9b0f              LDR      r3,[sp,#0x3c]
000134  f7fffffe          BL       _DrawBitLine1BPP
;;;100          break;
000138  bf00              NOP      
                  |L1.314|
00013a  bf00              NOP      
;;;101        }
;;;102        pData += BytesPerLine;
00013c  980d              LDR      r0,[sp,#0x34]
00013e  4480              ADD      r8,r8,r0
000140  f1040401          ADD      r4,r4,#1              ;96
                  |L1.324|
000144  42bc              CMP      r4,r7                 ;96
000146  dbec              BLT      |L1.290|
;;;103      }
;;;104    }
000148  e8bd9ffc          POP      {r2-r12,pc}
;;;105    
                          ENDP

                  _Rect2TextRect PROC
;;;113    */
;;;114    static void _Rect2TextRect(GUI_RECT * pRect) {
00014c  b510              PUSH     {r4,lr}
;;;115      int x1, y1;
;;;116      x1 = pRect->x1;
00014e  f9b01004          LDRSH    r1,[r0,#4]
;;;117      y1 = pRect->y1;
000152  f9b02006          LDRSH    r2,[r0,#6]
;;;118      pRect->x1 = pRect->x0 + (y1 - pRect->y0);
000156  8803              LDRH     r3,[r0,#0]
000158  8844              LDRH     r4,[r0,#2]
00015a  eba20404          SUB      r4,r2,r4
00015e  4423              ADD      r3,r3,r4
000160  b21b              SXTH     r3,r3
000162  8083              STRH     r3,[r0,#4]
;;;119      pRect->y1 = pRect->y0 + (x1 - pRect->x0);
000164  8843              LDRH     r3,[r0,#2]
000166  8804              LDRH     r4,[r0,#0]
000168  eba10404          SUB      r4,r1,r4
00016c  4423              ADD      r3,r3,r4
00016e  b21b              SXTH     r3,r3
000170  80c3              STRH     r3,[r0,#6]
;;;120    }
000172  bd10              POP      {r4,pc}
;;;121    
                          ENDP

                  _TransformPointCCW PROC
;;;130    */
;;;131    static void _TransformPointCCW(int * pXPos, int * pYPos) {
000174  e92d47fc          PUSH     {r2-r10,lr}
000178  4604              MOV      r4,r0
00017a  460d              MOV      r5,r1
;;;132      GUI_RECT ClientRect = {0};
00017c  f04f0000          MOV      r0,#0
000180  9000              STR      r0,[sp,#0]
000182  9001              STR      r0,[sp,#4]
;;;133      int xPos, yPos, xNumPixel, yNumPixel;
;;;134      /* Get the client rectangle */
;;;135      #if GUI_WINSUPPORT
;;;136        WM_GetWindowRect(&ClientRect);
000184  4668              MOV      r0,sp
000186  f7fffffe          BL       WM_GetWindowRect
;;;137      #else
;;;138        GUI_GetClientRect(&ClientRect);
;;;139      #endif
;;;140      xNumPixel = LCD_GetXSize() - 1;
00018a  f7fffffe          BL       LCD_GetXSize
00018e  f1a00801          SUB      r8,r0,#1
;;;141      yNumPixel = LCD_GetYSize() - 1;
000192  f7fffffe          BL       LCD_GetYSize
000196  f1a00901          SUB      r9,r0,#1
;;;142      if (ClientRect.x1 > xNumPixel) {
00019a  f9bd0004          LDRSH    r0,[sp,#4]
00019e  4540              CMP      r0,r8
0001a0  dd03              BLE      |L1.426|
;;;143        ClientRect.x1 = xNumPixel;
0001a2  fa0ff088          SXTH     r0,r8
0001a6  f8ad0004          STRH     r0,[sp,#4]
                  |L1.426|
;;;144      }
;;;145      if (ClientRect.y1 > yNumPixel) {
0001aa  f9bd0006          LDRSH    r0,[sp,#6]
0001ae  4548              CMP      r0,r9
0001b0  dd03              BLE      |L1.442|
;;;146        ClientRect.y1 = yNumPixel;
0001b2  fa0ff089          SXTH     r0,r9
0001b6  f8ad0006          STRH     r0,[sp,#6]
                  |L1.442|
;;;147      }
;;;148      /* Save old positions */
;;;149      xPos = *pXPos;
0001ba  6826              LDR      r6,[r4,#0]
;;;150      yPos = *pYPos;
0001bc  682f              LDR      r7,[r5,#0]
;;;151      /* Rotate and add window origin */
;;;152      *pXPos = ClientRect.x0 + yPos;
0001be  f9bd0000          LDRSH    r0,[sp,#0]
0001c2  4438              ADD      r0,r0,r7
0001c4  6020              STR      r0,[r4,#0]
;;;153      *pYPos = ClientRect.y1 - xPos;
0001c6  f9bd0006          LDRSH    r0,[sp,#6]
0001ca  eba00006          SUB      r0,r0,r6
0001ce  6028              STR      r0,[r5,#0]
;;;154      /* Handle rotation of text rectangle */
;;;155      *pXPos = *pXPos + GUI_RectDispString.x0 - GUI_RectDispString.y0;
0001d0  498f              LDR      r1,|L1.1040|
0001d2  f9b11000          LDRSH    r1,[r1,#0]  ; GUI_RectDispString
0001d6  6820              LDR      r0,[r4,#0]
0001d8  4408              ADD      r0,r0,r1
0001da  498d              LDR      r1,|L1.1040|
0001dc  f9b11002          LDRSH    r1,[r1,#2]  ; GUI_RectDispString
0001e0  eba00001          SUB      r0,r0,r1
0001e4  6020              STR      r0,[r4,#0]
;;;156      *pYPos = *pYPos + GUI_RectDispString.y1 - (ClientRect.y1 - ClientRect.y0) + GUI_RectDispString.x0;
0001e6  498a              LDR      r1,|L1.1040|
0001e8  f9b11006          LDRSH    r1,[r1,#6]  ; GUI_RectDispString
0001ec  6828              LDR      r0,[r5,#0]
0001ee  4408              ADD      r0,r0,r1
0001f0  f9bd1006          LDRSH    r1,[sp,#6]
0001f4  f9bd2002          LDRSH    r2,[sp,#2]
0001f8  eba10102          SUB      r1,r1,r2
0001fc  eba00001          SUB      r0,r0,r1
000200  4983              LDR      r1,|L1.1040|
000202  f9b11000          LDRSH    r1,[r1,#0]  ; GUI_RectDispString
000206  4408              ADD      r0,r0,r1
000208  6028              STR      r0,[r5,#0]
;;;157    }
00020a  e8bd87fc          POP      {r2-r10,pc}
;;;158    
                          ENDP

                  _DrawBitmapCCW PROC
;;;162    */
;;;163    static void _DrawBitmapCCW(int x0, int y0, int xsize, int ysize, int xMul, int yMul,
00020e  e92d4fff          PUSH     {r0-r11,lr}
;;;164                               int BitsPerPixel, int BytesPerLine,
;;;165                               const U8 GUI_UNI_PTR * pPixel, const LCD_PIXELINDEX* pTrans)
;;;166    {
000212  b08b              SUB      sp,sp,#0x2c
000214  4614              MOV      r4,r2
000216  461d              MOV      r5,r3
000218  f8dda060          LDR      r10,[sp,#0x60]
00021c  9f1c              LDR      r7,[sp,#0x70]
00021e  9e1a              LDR      r6,[sp,#0x68]
;;;167      U8  Data = 0;
000220  f04f0000          MOV      r0,#0
000224  900a              STR      r0,[sp,#0x28]
;;;168      int x1, y1;
;;;169      /* Handle the optional Y-magnification */
;;;170      y1 = y0 + ysize - 1;
000226  980c              LDR      r0,[sp,#0x30]
000228  4428              ADD      r0,r0,r5
00022a  f1a00001          SUB      r0,r0,#1
00022e  9008              STR      r0,[sp,#0x20]
;;;171      x1 = x0 + xsize - 1;
000230  980b              LDR      r0,[sp,#0x2c]
000232  4420              ADD      r0,r0,r4
000234  f1a00001          SUB      r0,r0,#1
000238  9009              STR      r0,[sp,#0x24]
;;;172      /* Rotate positions */
;;;173      _TransformPointCCW(&x0, &y0);
00023a  a90c              ADD      r1,sp,#0x30
00023c  a80b              ADD      r0,sp,#0x2c
00023e  f7fffffe          BL       _TransformPointCCW
;;;174      _TransformPointCCW(&x1, &y1);
000242  a908              ADD      r1,sp,#0x20
000244  a809              ADD      r0,sp,#0x24
000246  f7fffffe          BL       _TransformPointCCW
;;;175      /*  Handle BITMAP without magnification */
;;;176      if ((xMul == 1) && (yMul == 1)) {
00024a  f1ba0f01          CMP      r10,#1
00024e  d169              BNE      |L1.804|
000250  9819              LDR      r0,[sp,#0x64]
000252  2801              CMP      r0,#1
000254  d166              BNE      |L1.804|
;;;177        int Diff = 0;
000256  f04f0800          MOV      r8,#0
;;;178        /* Clip top */
;;;179        if (y1 < GUI_Context.ClipRect.y0) {
00025a  486c              LDR      r0,|L1.1036|
00025c  f9b0000a          LDRSH    r0,[r0,#0xa]
000260  9908              LDR      r1,[sp,#0x20]
000262  4288              CMP      r0,r1
000264  dd08              BLE      |L1.632|
;;;180          int Diff = GUI_Context.ClipRect.y0 - y1;
000266  4969              LDR      r1,|L1.1036|
000268  f9b1100a          LDRSH    r1,[r1,#0xa]  ; GUI_Context
00026c  9a08              LDR      r2,[sp,#0x20]
00026e  eba10002          SUB      r0,r1,r2
;;;181          xsize -= Diff;
000272  eba40400          SUB      r4,r4,r0
;;;182        }
000276  bf00              NOP      
                  |L1.632|
;;;183        /* Clip bottom */
;;;184        if (y0 > GUI_Context.ClipRect.y1) {
000278  4864              LDR      r0,|L1.1036|
00027a  f9b0000e          LDRSH    r0,[r0,#0xe]
00027e  990c              LDR      r1,[sp,#0x30]
000280  4288              CMP      r0,r1
000282  da15              BGE      |L1.688|
;;;185          Diff = y0 - GUI_Context.ClipRect.y1;
000284  4861              LDR      r0,|L1.1036|
000286  f9b0000e          LDRSH    r0,[r0,#0xe]
00028a  990c              LDR      r1,[sp,#0x30]
00028c  eba10800          SUB      r8,r1,r0
;;;186    			xsize -= Diff;
000290  eba40408          SUB      r4,r4,r8
;;;187    			switch (BitsPerPixel) {
000294  2e01              CMP      r6,#1
000296  d10a              BNE      |L1.686|
;;;188    			case 1:
;;;189      			pPixel += (Diff >> 3); y0 -= (Diff >> 3) << 3; Diff &= 7;
000298  eb0707e8          ADD      r7,r7,r8,ASR #3
00029c  ea4f00e8          ASR      r0,r8,#3
0002a0  990c              LDR      r1,[sp,#0x30]
0002a2  eba100c0          SUB      r0,r1,r0,LSL #3
0002a6  900c              STR      r0,[sp,#0x30]
0002a8  f0080807          AND      r8,r8,#7
;;;190    				break;
0002ac  bf00              NOP      
                  |L1.686|
0002ae  bf00              NOP      
                  |L1.688|
;;;191    			}
;;;192        }
;;;193        if (ysize <= 0) {
0002b0  2d00              CMP      r5,#0
0002b2  dc02              BGT      |L1.698|
                  |L1.692|
;;;194    		  return;
;;;195        }
;;;196        /* Clip right side */
;;;197        if (x1 > GUI_Context.ClipRect.x1) {
;;;198          int Diff = x1 - GUI_Context.ClipRect.x1;
;;;199          ysize -= Diff;
;;;200        }
;;;201        /* Clip left side */
;;;202        if (x0 < GUI_Context.ClipRect.x0) {
;;;203          int Diff = GUI_Context.ClipRect.x0 - x0;
;;;204          pPixel += Diff * BytesPerLine;
;;;205          x0 += Diff;
;;;206          ysize -= Diff;
;;;207        }
;;;208        if (xsize <= 0) {
;;;209    		  return;
;;;210        }
;;;211        _DrawBitmap(x0, y0, xsize, ysize, BitsPerPixel, BytesPerLine, pPixel, Diff, pTrans);
;;;212      } else {
;;;213        /* Handle BITMAP with magnification */
;;;214        int x, y, xi, yi;
;;;215        int Shift = 8 - BitsPerPixel;
;;;216        for (x = x0, xi = 0; xi < ysize; xi++, x += yMul, pPixel += BytesPerLine) {
;;;217          int xMax = x + yMul - 1;
;;;218          if ((xMax >= GUI_Context.ClipRect.x0) && (x <= GUI_Context.ClipRect.x1)) {
;;;219            int BitsLeft = 0;
;;;220            const U8 GUI_UNI_PTR * pDataLine = pPixel;
;;;221            for (y = y0, yi = 0; yi < xsize; yi++, y -= xMul) {
;;;222              U8  Index;
;;;223              if (!BitsLeft) {
;;;224                Data = *pDataLine++;
;;;225                BitsLeft =8;
;;;226              }
;;;227              Index = Data >> Shift;
;;;228              Data    <<= BitsPerPixel;
;;;229              BitsLeft -= BitsPerPixel;
;;;230              if (Index || ((GUI_Context.DrawMode & LCD_DRAWMODE_TRANS) == 0)) {
;;;231                LCD_PIXELINDEX OldColor = LCD_COLORINDEX;
;;;232                if (pTrans) {
;;;233                  LCD_COLORINDEX = *(pTrans + Index);
;;;234                } else {
;;;235                  LCD_COLORINDEX = Index;
;;;236                }
;;;237                LCD_FillRect(x, y - xMul + 1, xMax, y);
;;;238                LCD_COLORINDEX = OldColor;
;;;239              }
;;;240            }
;;;241          }
;;;242        }
;;;243      }
;;;244    }
0002b4  b00f              ADD      sp,sp,#0x3c
0002b6  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.698|
0002ba  4854              LDR      r0,|L1.1036|
0002bc  f9b0000c          LDRSH    r0,[r0,#0xc]          ;197
0002c0  9909              LDR      r1,[sp,#0x24]         ;197
0002c2  4288              CMP      r0,r1                 ;197
0002c4  da08              BGE      |L1.728|
0002c6  4951              LDR      r1,|L1.1036|
0002c8  f9b1100c          LDRSH    r1,[r1,#0xc]          ;198  ; GUI_Context
0002cc  9a09              LDR      r2,[sp,#0x24]         ;198
0002ce  eba20001          SUB      r0,r2,r1              ;198
0002d2  eba50500          SUB      r5,r5,r0              ;199
0002d6  bf00              NOP                            ;200
                  |L1.728|
0002d8  484c              LDR      r0,|L1.1036|
0002da  f9b00008          LDRSH    r0,[r0,#8]            ;202  ; GUI_Context
0002de  990b              LDR      r1,[sp,#0x2c]         ;202
0002e0  4288              CMP      r0,r1                 ;202
0002e2  dd0e              BLE      |L1.770|
0002e4  4949              LDR      r1,|L1.1036|
0002e6  f9b11008          LDRSH    r1,[r1,#8]            ;203  ; GUI_Context
0002ea  9a0b              LDR      r2,[sp,#0x2c]         ;203
0002ec  eba10002          SUB      r0,r1,r2              ;203
0002f0  991b              LDR      r1,[sp,#0x6c]         ;204
0002f2  fb007701          MLA      r7,r0,r1,r7           ;204
0002f6  990b              LDR      r1,[sp,#0x2c]         ;205
0002f8  4401              ADD      r1,r1,r0              ;205
0002fa  910b              STR      r1,[sp,#0x2c]         ;205
0002fc  eba50500          SUB      r5,r5,r0              ;206
000300  bf00              NOP                            ;207
                  |L1.770|
000302  2c00              CMP      r4,#0                 ;208
000304  dc00              BGT      |L1.776|
000306  e7d5              B        |L1.692|
                  |L1.776|
000308  991b              LDR      r1,[sp,#0x6c]         ;211
00030a  981d              LDR      r0,[sp,#0x74]         ;211
00030c  462b              MOV      r3,r5                 ;211
00030e  4622              MOV      r2,r4                 ;211
000310  e9cd7802          STRD     r7,r8,[sp,#8]         ;211
000314  e9cd6100          STRD     r6,r1,[sp,#0]         ;211
000318  9004              STR      r0,[sp,#0x10]         ;211
00031a  e9dd010b          LDRD     r0,r1,[sp,#0x2c]      ;211
00031e  f7fffffe          BL       _DrawBitmap
000322  e071              B        |L1.1032|
                  |L1.804|
000324  f1c60008          RSB      r0,r6,#8              ;215
000328  9005              STR      r0,[sp,#0x14]         ;215
00032a  f8dd802c          LDR      r8,[sp,#0x2c]         ;216
00032e  f04f0000          MOV      r0,#0                 ;216
000332  9007              STR      r0,[sp,#0x1c]         ;216
000334  e064              B        |L1.1024|
                  |L1.822|
000336  9819              LDR      r0,[sp,#0x64]         ;217
000338  4440              ADD      r0,r0,r8              ;217
00033a  f1a00001          SUB      r0,r0,#1              ;217
00033e  9004              STR      r0,[sp,#0x10]         ;217
000340  4832              LDR      r0,|L1.1036|
000342  f9b01008          LDRSH    r1,[r0,#8]            ;218  ; GUI_Context
000346  9804              LDR      r0,[sp,#0x10]         ;218
000348  4281              CMP      r1,r0                 ;218
00034a  dc51              BGT      |L1.1008|
00034c  482f              LDR      r0,|L1.1036|
00034e  f9b0000c          LDRSH    r0,[r0,#0xc]          ;218
000352  4540              CMP      r0,r8                 ;218
000354  db4c              BLT      |L1.1008|
000356  f04f0000          MOV      r0,#0                 ;219
00035a  9003              STR      r0,[sp,#0xc]          ;219
00035c  9702              STR      r7,[sp,#8]            ;220
00035e  f8ddb030          LDR      r11,[sp,#0x30]        ;221
000362  9006              STR      r0,[sp,#0x18]         ;221
000364  e040              B        |L1.1000|
                  |L1.870|
000366  9803              LDR      r0,[sp,#0xc]          ;223
000368  b948              CBNZ     r0,|L1.894|
00036a  9802              LDR      r0,[sp,#8]            ;224
00036c  7800              LDRB     r0,[r0,#0]            ;224
00036e  900a              STR      r0,[sp,#0x28]         ;224
000370  9802              LDR      r0,[sp,#8]            ;224
000372  f1000001          ADD      r0,r0,#1              ;224
000376  9002              STR      r0,[sp,#8]            ;224
000378  f04f0008          MOV      r0,#8                 ;225
00037c  9003              STR      r0,[sp,#0xc]          ;225
                  |L1.894|
00037e  9905              LDR      r1,[sp,#0x14]         ;227
000380  980a              LDR      r0,[sp,#0x28]         ;227
000382  fa40f901          ASR      r9,r0,r1              ;227
000386  980a              LDR      r0,[sp,#0x28]         ;228
000388  fa00f006          LSL      r0,r0,r6              ;228
00038c  b2c0              UXTB     r0,r0                 ;228
00038e  900a              STR      r0,[sp,#0x28]         ;228
000390  9803              LDR      r0,[sp,#0xc]          ;229
000392  eba00006          SUB      r0,r0,r6              ;229
000396  9003              STR      r0,[sp,#0xc]          ;229
000398  f1b90f00          CMP      r9,#0                 ;230
00039c  d104              BNE      |L1.936|
00039e  481b              LDR      r0,|L1.1036|
0003a0  7c00              LDRB     r0,[r0,#0x10]         ;230  ; GUI_Context
0003a2  f0100f02          TST      r0,#2                 ;230
0003a6  d119              BNE      |L1.988|
                  |L1.936|
0003a8  4818              LDR      r0,|L1.1036|
0003aa  8840              LDRH     r0,[r0,#2]            ;231  ; GUI_Context
0003ac  9001              STR      r0,[sp,#4]            ;231
0003ae  981d              LDR      r0,[sp,#0x74]         ;232
0003b0  b128              CBZ      r0,|L1.958|
0003b2  981d              LDR      r0,[sp,#0x74]         ;233
0003b4  f8300019          LDRH     r0,[r0,r9,LSL #1]     ;233
0003b8  4914              LDR      r1,|L1.1036|
0003ba  8048              STRH     r0,[r1,#2]            ;233
0003bc  e002              B        |L1.964|
                  |L1.958|
0003be  4813              LDR      r0,|L1.1036|
0003c0  f8a09002          STRH     r9,[r0,#2]            ;235
                  |L1.964|
0003c4  ebab000a          SUB      r0,r11,r10            ;237
0003c8  1c41              ADDS     r1,r0,#1              ;237
0003ca  465b              MOV      r3,r11                ;237
0003cc  4640              MOV      r0,r8                 ;237
0003ce  9a04              LDR      r2,[sp,#0x10]         ;237
0003d0  f7fffffe          BL       LCD_FillRect
0003d4  490d              LDR      r1,|L1.1036|
0003d6  9801              LDR      r0,[sp,#4]            ;238
0003d8  8048              STRH     r0,[r1,#2]            ;238
0003da  bf00              NOP                            ;239
                  |L1.988|
0003dc  9806              LDR      r0,[sp,#0x18]         ;221
0003de  f1000001          ADD      r0,r0,#1              ;221
0003e2  9006              STR      r0,[sp,#0x18]         ;221
0003e4  ebab0b0a          SUB      r11,r11,r10           ;221
                  |L1.1000|
0003e8  9806              LDR      r0,[sp,#0x18]         ;221
0003ea  42a0              CMP      r0,r4                 ;221
0003ec  dbbb              BLT      |L1.870|
0003ee  bf00              NOP                            ;241
                  |L1.1008|
0003f0  9807              LDR      r0,[sp,#0x1c]         ;216
0003f2  f1000001          ADD      r0,r0,#1              ;216
0003f6  9007              STR      r0,[sp,#0x1c]         ;216
0003f8  9819              LDR      r0,[sp,#0x64]         ;216
0003fa  4480              ADD      r8,r8,r0              ;216
0003fc  981b              LDR      r0,[sp,#0x6c]         ;216
0003fe  4407              ADD      r7,r7,r0              ;216
                  |L1.1024|
000400  9807              LDR      r0,[sp,#0x1c]         ;216
000402  42a8              CMP      r0,r5                 ;216
000404  db97              BLT      |L1.822|
000406  bf00              NOP                            ;243
                  |L1.1032|
000408  bf00              NOP      
00040a  e753              B        |L1.692|
                  |L1.1036|
                          DCD      GUI_Context
                  |L1.1040|
                          DCD      GUI_RectDispString
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  LCD_APIListCCW
                          DCD      _DrawBitmapCCW
                          DCD      _Rect2TextRect
