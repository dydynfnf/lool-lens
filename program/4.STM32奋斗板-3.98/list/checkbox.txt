; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\checkbox.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\checkbox.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -I.\GUI\AntiAlias -I.\GUI\Config -I.\GUI\ConvertColor -I.\GUI\ConvertMono -I.\GUI\Core -I.\GUI\Font -I.\GUI\GUI_X -I.\GUI\JPEG -I.\GUI\LCDDriver -I.\GUI\MemDev -I.\GUI\MultiLayer -I.\GUI\Widget -I.\GUI\WM -IC:\Users\Administrator\Desktop\gui\STM32·Ü¶·°å-3.98\RTE -Id:\Keil_v5\ARM\PACK\ARM\CMSIS\4.3.0\CMSIS\Include -Id:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.1.0\Device\Include -D__UVISION_VERSION=515 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\checkbox.crf GUI\Widget\CHECKBOX.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _Paint PROC
;;;107    */
;;;108    static void _Paint(CHECKBOX_Obj* pObj, CHECKBOX_Handle hObj) {
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  b087              SUB      sp,sp,#0x1c
000006  4604              MOV      r4,r0
000008  4689              MOV      r9,r1
;;;109      GUI_RECT RectBox = {0};
00000a  2000              MOVS     r0,#0
00000c  9005              STR      r0,[sp,#0x14]
00000e  9006              STR      r0,[sp,#0x18]
;;;110      int ColorIndex, EffectSize, Index;
;;;111      EffectSize = pObj->Widget.pEffect->EffectSize;
000010  6a20              LDR      r0,[r4,#0x20]
000012  6945              LDR      r5,[r0,#0x14]
;;;112      ColorIndex = WM__IsEnabled(hObj);
000014  4648              MOV      r0,r9
000016  f7fffffe          BL       WM__IsEnabled
00001a  4682              MOV      r10,r0
;;;113      /* Clear inside ... Just in case      */
;;;114      /* Fill with parents background color */
;;;115    #if WM_SUPPORT_TRANSPARENCY
;;;116      if (!WM_GetHasTrans(hObj))
00001c  4648              MOV      r0,r9
00001e  f7fffffe          BL       WM_GetHasTrans
000022  b980              CBNZ     r0,|L1.70|
;;;117    #endif
;;;118      {
;;;119        if (pObj->Props.BkColor == GUI_INVALID_COLOR) {
000024  f06f4170          MVN      r1,#0xf0000000
000028  6b60              LDR      r0,[r4,#0x34]
00002a  4288              CMP      r0,r1
00002c  d106              BNE      |L1.60|
;;;120          LCD_SetBkColor(WIDGET__GetBkColor(hObj));
00002e  4648              MOV      r0,r9
000030  f7fffffe          BL       WIDGET__GetBkColor
000034  4607              MOV      r7,r0
000036  f7fffffe          BL       LCD_SetBkColor
00003a  e002              B        |L1.66|
                  |L1.60|
;;;121        } else {
;;;122          LCD_SetBkColor(pObj->Props.BkColor);
00003c  6b60              LDR      r0,[r4,#0x34]
00003e  f7fffffe          BL       LCD_SetBkColor
                  |L1.66|
;;;123        }
;;;124        GUI_Clear();
000042  f7fffffe          BL       GUI_Clear
                  |L1.70|
;;;125      }
;;;126      /* Get size from bitmap */
;;;127      RectBox.x1 = pObj->Props.apBm[CHECKBOX_BI_ACTIV]->XSize - 1 + 2 * EffectSize;
000046  6d20              LDR      r0,[r4,#0x50]
000048  8800              LDRH     r0,[r0,#0]
00004a  1e40              SUBS     r0,r0,#1
00004c  2102              MOVS     r1,#2
00004e  fb010005          MLA      r0,r1,r5,r0
000052  b200              SXTH     r0,r0
000054  f8ad0018          STRH     r0,[sp,#0x18]
;;;128      RectBox.y1 = pObj->Props.apBm[CHECKBOX_BI_ACTIV]->YSize - 1 + 2 * EffectSize;
000058  6d20              LDR      r0,[r4,#0x50]
00005a  8840              LDRH     r0,[r0,#2]
00005c  1e40              SUBS     r0,r0,#1
00005e  fb010005          MLA      r0,r1,r5,r0
000062  b200              SXTH     r0,r0
000064  f8ad001a          STRH     r0,[sp,#0x1a]
;;;129      WM_SetUserClipRect(&RectBox);
000068  a805              ADD      r0,sp,#0x14
00006a  f7fffffe          BL       WM_SetUserClipRect
;;;130      /* Clear inside  ... Just in case */
;;;131      LCD_SetBkColor(pObj->Props.aBkColorBox[ColorIndex]);
00006e  f104012c          ADD      r1,r4,#0x2c
000072  f851002a          LDR      r0,[r1,r10,LSL #2]
000076  f7fffffe          BL       LCD_SetBkColor
;;;132      GUI_Clear();
00007a  f7fffffe          BL       GUI_Clear
;;;133      Index = pObj->CurrentState * 2 + ColorIndex;
00007e  f894005d          LDRB     r0,[r4,#0x5d]
000082  eb0a0640          ADD      r6,r10,r0,LSL #1
;;;134      if (pObj->Props.apBm[Index]) {
000086  f1040044          ADD      r0,r4,#0x44
00008a  f8500026          LDR      r0,[r0,r6,LSL #2]
00008e  b138              CBZ      r0,|L1.160|
;;;135        GUI_DrawBitmap(pObj->Props.apBm[Index], EffectSize, EffectSize);
000090  f1040144          ADD      r1,r4,#0x44
000094  f8510026          LDR      r0,[r1,r6,LSL #2]
000098  462a              MOV      r2,r5
00009a  4629              MOV      r1,r5
00009c  f7fffffe          BL       GUI_DrawBitmap
                  |L1.160|
;;;136      }
;;;137      /* Draw the effect arround the box */
;;;138      WIDGET__EFFECT_DrawDownRect(&pObj->Widget, &RectBox);
0000a0  a905              ADD      r1,sp,#0x14
0000a2  4620              MOV      r0,r4
0000a4  f7fffffe          BL       WIDGET__EFFECT_DrawDownRect
;;;139      WM_SetUserClipRect(NULL);
0000a8  2000              MOVS     r0,#0
0000aa  f7fffffe          BL       WM_SetUserClipRect
;;;140      /* Draw text if needed */
;;;141      if (pObj->hpText) {
0000ae  f8b4005e          LDRH     r0,[r4,#0x5e]
0000b2  2800              CMP      r0,#0
0000b4  d07e              BEQ      |L1.436|
;;;142        const char * s;
;;;143        GUI_RECT RectText;
;;;144        /* Draw the text */
;;;145        s = (const char *) GUI_ALLOC_h2p(pObj->hpText);
0000b6  f9b4005e          LDRSH    r0,[r4,#0x5e]
0000ba  f7fffffe          BL       GUI_ALLOC_h2p
0000be  4683              MOV      r11,r0
;;;146        WM_GetClientRect(&RectText);
0000c0  a803              ADD      r0,sp,#0xc
0000c2  f7fffffe          BL       WM_GetClientRect
;;;147        RectText.x0 += RectBox.x1 + 1 + pObj->Props.Spacing;
0000c6  f8bd0018          LDRH     r0,[sp,#0x18]
0000ca  1c40              ADDS     r0,r0,#1
0000cc  2142              MOVS     r1,#0x42
0000ce  5d09              LDRB     r1,[r1,r4]
0000d0  4408              ADD      r0,r0,r1
0000d2  f8bd100c          LDRH     r1,[sp,#0xc]
0000d6  4408              ADD      r0,r0,r1
0000d8  b200              SXTH     r0,r0
0000da  f8ad000c          STRH     r0,[sp,#0xc]
;;;148        GUI_SetTextMode(GUI_TM_TRANS);
0000de  2002              MOVS     r0,#2
0000e0  f7fffffe          BL       GUI_SetTextMode
;;;149        LCD_SetColor(pObj->Props.TextColor);
0000e4  6ba0              LDR      r0,[r4,#0x38]
0000e6  f7fffffe          BL       LCD_SetColor
;;;150        GUI_SetFont(pObj->Props.pFont);
0000ea  6aa0              LDR      r0,[r4,#0x28]
0000ec  f7fffffe          BL       GUI_SetFont
;;;151        GUI_DispStringInRect(s, &RectText, pObj->Props.Align);
0000f0  f9b42040          LDRSH    r2,[r4,#0x40]
0000f4  a903              ADD      r1,sp,#0xc
0000f6  4658              MOV      r0,r11
0000f8  f7fffffe          BL       GUI_DispStringInRect
;;;152        /* Draw focus rectangle */
;;;153        if (pObj->Widget.State & WIDGET_STATE_FOCUS) {
0000fc  f8940026          LDRB     r0,[r4,#0x26]
000100  f0000001          AND      r0,r0,#1
000104  2800              CMP      r0,#0
000106  d066              BEQ      |L1.470|
;;;154          int xSizeText = GUI_GetStringDistX(s);
000108  4658              MOV      r0,r11
00010a  f7fffffe          BL       GUI_GetStringDistX
00010e  4607              MOV      r7,r0
;;;155          int ySizeText = GUI_GetFontSizeY();
000110  f7fffffe          BL       GUI_GetFontSizeY
000114  4680              MOV      r8,r0
;;;156          GUI_RECT RectFocus = RectText;
000116  e9dd0103          LDRD     r0,r1,[sp,#0xc]
00011a  e9cd0101          STRD     r0,r1,[sp,#4]
;;;157          switch (pObj->Props.Align & ~(GUI_TA_HORIZONTAL)) {
00011e  f9b40040          LDRSH    r0,[r4,#0x40]
000122  f0200003          BIC      r0,r0,#3
000126  2804              CMP      r0,#4
000128  d00d              BEQ      |L1.326|
00012a  280c              CMP      r0,#0xc
00012c  d113              BNE      |L1.342|
;;;158          case GUI_TA_VCENTER:
;;;159            RectFocus.y0 = (RectText.y1 - ySizeText + 1) / 2;
00012e  f9bd1012          LDRSH    r1,[sp,#0x12]
000132  eba10108          SUB      r1,r1,r8
000136  1c48              ADDS     r0,r1,#1
000138  eb0071d0          ADD      r1,r0,r0,LSR #31
00013c  1049              ASRS     r1,r1,#1
00013e  b209              SXTH     r1,r1
000140  f8ad1006          STRH     r1,[sp,#6]
;;;160            break;
000144  e007              B        |L1.342|
                  |L1.326|
;;;161          case GUI_TA_BOTTOM:
;;;162            RectFocus.y0 = RectText.y1 - ySizeText;
000146  f8bd0012          LDRH     r0,[sp,#0x12]
00014a  eba00008          SUB      r0,r0,r8
00014e  b200              SXTH     r0,r0
000150  f8ad0006          STRH     r0,[sp,#6]
;;;163            break;
000154  bf00              NOP      
                  |L1.342|
000156  bf00              NOP                            ;160
;;;164          }
;;;165          switch (pObj->Props.Align & ~(GUI_TA_VERTICAL)) {
000158  f9b40040          LDRSH    r0,[r4,#0x40]
00015c  f020000c          BIC      r0,r0,#0xc
000160  2801              CMP      r0,#1
000162  d011              BEQ      |L1.392|
000164  2802              CMP      r0,#2
000166  d11c              BNE      |L1.418|
;;;166          case GUI_TA_HCENTER:
;;;167            RectFocus.x0 += ((RectText.x1 - RectText.x0) - xSizeText) / 2;
000168  f9bd1010          LDRSH    r1,[sp,#0x10]
00016c  f9bd200c          LDRSH    r2,[sp,#0xc]
000170  1a89              SUBS     r1,r1,r2
000172  1bc8              SUBS     r0,r1,r7
000174  eb0071d0          ADD      r1,r0,r0,LSR #31
000178  f8bd2004          LDRH     r2,[sp,#4]
00017c  eb020161          ADD      r1,r2,r1,ASR #1
000180  b209              SXTH     r1,r1
000182  f8ad1004          STRH     r1,[sp,#4]
;;;168            break;
000186  e00c              B        |L1.418|
                  |L1.392|
;;;169          case GUI_TA_RIGHT:
;;;170            RectFocus.x0 += (RectText.x1 - RectText.x0) - xSizeText;
000188  f8bd0010          LDRH     r0,[sp,#0x10]
00018c  f8bd100c          LDRH     r1,[sp,#0xc]
000190  1a40              SUBS     r0,r0,r1
000192  1bc0              SUBS     r0,r0,r7
000194  f8bd1004          LDRH     r1,[sp,#4]
000198  4408              ADD      r0,r0,r1
00019a  b200              SXTH     r0,r0
00019c  f8ad0004          STRH     r0,[sp,#4]
;;;171            break;
0001a0  bf00              NOP      
                  |L1.418|
0001a2  bf00              NOP                            ;168
;;;172          }
;;;173          RectFocus.x1 = RectFocus.x0 + xSizeText - 1;
0001a4  f8bd0004          LDRH     r0,[sp,#4]
0001a8  4438              ADD      r0,r0,r7
0001aa  1e40              SUBS     r0,r0,#1
0001ac  b200              SXTH     r0,r0
0001ae  f8ad0008          STRH     r0,[sp,#8]
;;;174          RectFocus.y1 = RectFocus.y0 + ySizeText - 1;
0001b2  e000              B        |L1.438|
                  |L1.436|
0001b4  e010              B        |L1.472|
                  |L1.438|
0001b6  f8bd0006          LDRH     r0,[sp,#6]
0001ba  4440              ADD      r0,r0,r8
0001bc  1e40              SUBS     r0,r0,#1
0001be  b200              SXTH     r0,r0
0001c0  f8ad000a          STRH     r0,[sp,#0xa]
;;;175          LCD_SetColor(pObj->Props.FocusColor);
0001c4  6be0              LDR      r0,[r4,#0x3c]
0001c6  f7fffffe          BL       LCD_SetColor
;;;176          GUI_DrawFocusRect(&RectFocus, -1);
0001ca  f04f31ff          MOV      r1,#0xffffffff
0001ce  a801              ADD      r0,sp,#4
0001d0  f7fffffe          BL       GUI_DrawFocusRect
;;;177        }
0001d4  bf00              NOP      
                  |L1.470|
;;;178      }
0001d6  bf00              NOP      
                  |L1.472|
;;;179    }
0001d8  b007              ADD      sp,sp,#0x1c
0001da  e8bd8ff0          POP      {r4-r11,pc}
;;;180    
                          ENDP

                  _OnTouch PROC
;;;184    */
;;;185    static void _OnTouch(CHECKBOX_Handle hObj, CHECKBOX_Obj* pObj, WM_MESSAGE*pMsg) {
0001de  e92d47f0          PUSH     {r4-r10,lr}
0001e2  4606              MOV      r6,r0
0001e4  460c              MOV      r4,r1
0001e6  4615              MOV      r5,r2
;;;186      int Notification = 0;
0001e8  2700              MOVS     r7,#0
;;;187      int Hit = 0;
0001ea  46b8              MOV      r8,r7
;;;188      const GUI_PID_STATE* pState = (const GUI_PID_STATE*)pMsg->Data.p;
0001ec  f8d59008          LDR      r9,[r5,#8]
;;;189      if (pMsg->Data.p) {  /* Something happened in our area (pressed or released) */
0001f0  68a8              LDR      r0,[r5,#8]
0001f2  b1e8              CBZ      r0,|L1.560|
;;;190        if (!WM_HasCaptured(hObj)) {
0001f4  4630              MOV      r0,r6
0001f6  f7fffffe          BL       WM_HasCaptured
0001fa  b9d0              CBNZ     r0,|L1.562|
;;;191          if (pState->Pressed) {
0001fc  f8990008          LDRB     r0,[r9,#8]
000200  b190              CBZ      r0,|L1.552|
;;;192            WM_SetCapture(hObj, 1);
000202  2101              MOVS     r1,#1
000204  4630              MOV      r0,r6
000206  f7fffffe          BL       WM_SetCapture
;;;193            CHECKBOX_SetState(hObj, (pObj->CurrentState + 1) % pObj->NumStates);
00020a  f894005d          LDRB     r0,[r4,#0x5d]
00020e  1c40              ADDS     r0,r0,#1
000210  f894105c          LDRB     r1,[r4,#0x5c]
000214  fb90f2f1          SDIV     r2,r0,r1
000218  fb010a12          MLS      r10,r1,r2,r0
00021c  4651              MOV      r1,r10
00021e  4630              MOV      r0,r6
000220  f7fffffe          BL       CHECKBOX_SetState
;;;194            Notification = WM_NOTIFICATION_CLICKED;
000224  2701              MOVS     r7,#1
000226  e004              B        |L1.562|
                  |L1.552|
;;;195          } else {
;;;196            Hit =1;
000228  f04f0801          MOV      r8,#1
;;;197            Notification = WM_NOTIFICATION_RELEASED;
00022c  2702              MOVS     r7,#2
00022e  e000              B        |L1.562|
                  |L1.560|
;;;198          }
;;;199        }
;;;200      } else {
;;;201        Notification = WM_NOTIFICATION_MOVED_OUT;
000230  2703              MOVS     r7,#3
                  |L1.562|
;;;202      }
;;;203      WM_NotifyParent(hObj, Notification);
000232  4639              MOV      r1,r7
000234  4630              MOV      r0,r6
000236  f7fffffe          BL       WM_NotifyParent
;;;204      if (Hit == 1) {
00023a  f1b80f01          CMP      r8,#1
00023e  d103              BNE      |L1.584|
;;;205        GUI_DEBUG_LOG("CHECKBOX: Hit\n");
;;;206        GUI_StoreKey(pObj->Widget.Id);
000240  f9b40024          LDRSH    r0,[r4,#0x24]
000244  f7fffffe          BL       GUI_StoreKey
                  |L1.584|
;;;207      }
;;;208    }
000248  e8bd87f0          POP      {r4-r10,pc}
;;;209    
                          ENDP

                  _OnKey PROC
;;;213    */
;;;214    static void  _OnKey(CHECKBOX_Handle hObj, CHECKBOX_Obj * pObj, WM_MESSAGE * pMsg) {
00024c  e92d41f0          PUSH     {r4-r8,lr}
000250  4607              MOV      r7,r0
000252  460c              MOV      r4,r1
000254  4616              MOV      r6,r2
;;;215      WM_KEY_INFO * pKeyInfo;
;;;216      if (WM__IsEnabled(hObj)) {
000256  4638              MOV      r0,r7
000258  f7fffffe          BL       WM__IsEnabled
00025c  b1a8              CBZ      r0,|L1.650|
;;;217        pKeyInfo = (WM_KEY_INFO *)(pMsg->Data.p);
00025e  68b5              LDR      r5,[r6,#8]
;;;218        if (pKeyInfo->PressedCnt > 0) {
000260  6868              LDR      r0,[r5,#4]
000262  2800              CMP      r0,#0
000264  dd11              BLE      |L1.650|
;;;219          switch (pKeyInfo->Key) {
000266  6828              LDR      r0,[r5,#0]
000268  2820              CMP      r0,#0x20
00026a  d10d              BNE      |L1.648|
;;;220          case GUI_KEY_SPACE:
;;;221            CHECKBOX_SetState(hObj, (pObj->CurrentState + 1) % pObj->NumStates);
00026c  f894005d          LDRB     r0,[r4,#0x5d]
000270  1c40              ADDS     r0,r0,#1
000272  f894105c          LDRB     r1,[r4,#0x5c]
000276  fb90f2f1          SDIV     r2,r0,r1
00027a  fb010812          MLS      r8,r1,r2,r0
00027e  4641              MOV      r1,r8
000280  4638              MOV      r0,r7
000282  f7fffffe          BL       CHECKBOX_SetState
;;;222            break;                    /* Send to parent by not doing anything */
000286  bf00              NOP      
                  |L1.648|
000288  bf00              NOP      
                  |L1.650|
;;;223          }
;;;224        }
;;;225      }
;;;226    }
00028a  e8bd81f0          POP      {r4-r8,pc}
;;;227    
                          ENDP

                  _Delete PROC
;;;231    */
;;;232    static void _Delete(CHECKBOX_Obj * pObj) {
00028e  b510              PUSH     {r4,lr}
000290  4604              MOV      r4,r0
;;;233      /* Delete attached objects (if any) */
;;;234      GUI_DEBUG_LOG("CHECKBOX: Delete() Deleting attached items");
;;;235      GUI_ALLOC_FreePtr(&pObj->hpText);
000292  f104005e          ADD      r0,r4,#0x5e
000296  f7fffffe          BL       GUI_ALLOC_FreePtr
;;;236    }
00029a  bd10              POP      {r4,pc}
;;;237    
                          ENDP

                  CHECKBOX_Callback PROC
;;;270    */
;;;271    void CHECKBOX_Callback (WM_MESSAGE *pMsg) {
00029c  b570              PUSH     {r4-r6,lr}
00029e  4604              MOV      r4,r0
;;;272      CHECKBOX_Handle hObj;
;;;273      CHECKBOX_Obj* pObj;
;;;274      hObj = pMsg->hWin;
0002a0  f9b45004          LDRSH    r5,[r4,#4]
;;;275      pObj = (CHECKBOX_Obj *)GUI_ALLOC_h2p(hObj); /* Don't use use WIDGET_H2P because WIDGET_INIT_ID() has not be called at this point */
0002a4  4628              MOV      r0,r5
0002a6  f7fffffe          BL       GUI_ALLOC_h2p
0002aa  4606              MOV      r6,r0
;;;276      /* Let widget handle the standard messages */
;;;277      if (WIDGET_HandleActive(hObj, pMsg) == 0) {
0002ac  4621              MOV      r1,r4
0002ae  4628              MOV      r0,r5
0002b0  f7fffffe          BL       WIDGET_HandleActive
0002b4  b900              CBNZ     r0,|L1.696|
                  |L1.694|
;;;278        return;
;;;279      }
;;;280      switch (pMsg->MsgId) {
;;;281      case WM_KEY:
;;;282        _OnKey(hObj, pObj, pMsg);
;;;283        break;
;;;284      case WM_PAINT:
;;;285        GUI_DEBUG_LOG("CHECKBOX: _Callback(WM_PAINT)\n");
;;;286        _Paint(pObj, hObj);
;;;287        return;
;;;288      case WM_TOUCH:
;;;289        _OnTouch(hObj, pObj, pMsg);
;;;290        break;
;;;291      case WM_DELETE:
;;;292        GUI_DEBUG_LOG("CHECKBOX: _Callback(WM_DELETE)\n");
;;;293        _Delete(pObj);
;;;294        break;       /* No return here ... WM_DefaultProc needs to be called */
;;;295      }
;;;296      WM_DefaultProc(pMsg);
;;;297    }
0002b6  bd70              POP      {r4-r6,pc}
                  |L1.696|
0002b8  6820              LDR      r0,[r4,#0]            ;280
0002ba  280b              CMP      r0,#0xb               ;280
0002bc  d017              BEQ      |L1.750|
0002be  280c              CMP      r0,#0xc               ;280
0002c0  d00f              BEQ      |L1.738|
0002c2  280e              CMP      r0,#0xe               ;280
0002c4  d002              BEQ      |L1.716|
0002c6  280f              CMP      r0,#0xf               ;280
0002c8  d115              BNE      |L1.758|
0002ca  e005              B        |L1.728|
                  |L1.716|
0002cc  4622              MOV      r2,r4                 ;282
0002ce  4631              MOV      r1,r6                 ;282
0002d0  4628              MOV      r0,r5                 ;282
0002d2  f7fffffe          BL       _OnKey
0002d6  e00e              B        |L1.758|
                  |L1.728|
0002d8  4629              MOV      r1,r5                 ;286
0002da  4630              MOV      r0,r6                 ;286
0002dc  f7fffffe          BL       _Paint
0002e0  e7e9              B        |L1.694|
                  |L1.738|
0002e2  4622              MOV      r2,r4                 ;289
0002e4  4631              MOV      r1,r6                 ;289
0002e6  4628              MOV      r0,r5                 ;289
0002e8  f7fffffe          BL       _OnTouch
0002ec  e003              B        |L1.758|
                  |L1.750|
0002ee  4630              MOV      r0,r6                 ;293
0002f0  f7fffffe          BL       _Delete
0002f4  bf00              NOP                            ;294
                  |L1.758|
0002f6  bf00              NOP                            ;283
0002f8  4620              MOV      r0,r4                 ;296
0002fa  f7fffffe          BL       WM_DefaultProc
0002fe  bf00              NOP      
000300  e7d9              B        |L1.694|
;;;298    
                          ENDP

                  CHECKBOX_CreateEx PROC
;;;312    */
;;;313    CHECKBOX_Handle CHECKBOX_CreateEx(int x0, int y0, int xsize, int ysize, WM_HWIN hParent,
000302  e92d5fff          PUSH     {r0-r12,lr}
;;;314                                        int WinFlags, int ExFlags, int Id)
;;;315    {
000306  4681              MOV      r9,r0
000308  468a              MOV      r10,r1
00030a  4614              MOV      r4,r2
00030c  461d              MOV      r5,r3
00030e  e9ddb80e          LDRD     r11,r8,[sp,#0x38]
;;;316      CHECKBOX_Handle hObj;
;;;317      GUI_USE_PARA(ExFlags);
000312  9810              LDR      r0,[sp,#0x40]
000314  9010              STR      r0,[sp,#0x40]
;;;318      WM_LOCK();
;;;319      /* Calculate size if needed */
;;;320      if ((xsize == 0) || (ysize == 0)) {
000316  b104              CBZ      r4,|L1.794|
000318  b98d              CBNZ     r5,|L1.830|
                  |L1.794|
;;;321        int EffectSize;
;;;322        EffectSize = WIDGET_GetDefaultEffect()->EffectSize;
00031a  f7fffffe          BL       WIDGET_GetDefaultEffect
00031e  6947              LDR      r7,[r0,#0x14]
;;;323        if (xsize == 0) {
000320  b92c              CBNZ     r4,|L1.814|
;;;324          xsize = CHECKBOX__DefaultProps.apBm[CHECKBOX_BI_ACTIV]->XSize + 2 * EffectSize;
000322  481f              LDR      r0,|L1.928|
000324  6a80              LDR      r0,[r0,#0x28]
000326  8800              LDRH     r0,[r0,#0]
000328  2102              MOVS     r1,#2
00032a  fb010407          MLA      r4,r1,r7,r0
                  |L1.814|
;;;325        }
;;;326        if (ysize == 0) {
00032e  b92d              CBNZ     r5,|L1.828|
;;;327          ysize = CHECKBOX__DefaultProps.apBm[CHECKBOX_BI_ACTIV]->YSize + 2 * EffectSize;
000330  481b              LDR      r0,|L1.928|
000332  6a80              LDR      r0,[r0,#0x28]
000334  8840              LDRH     r0,[r0,#2]
000336  2102              MOVS     r1,#2
000338  fb010507          MLA      r5,r1,r7,r0
                  |L1.828|
;;;328        }
;;;329      }
00033c  bf00              NOP      
                  |L1.830|
;;;330    #if WM_SUPPORT_TRANSPARENCY
;;;331      if (CHECKBOX__DefaultProps.BkColor == GUI_INVALID_COLOR) {
00033e  4818              LDR      r0,|L1.928|
000340  68c0              LDR      r0,[r0,#0xc]  ; CHECKBOX__DefaultProps
000342  f06f4170          MVN      r1,#0xf0000000
000346  4288              CMP      r0,r1
000348  d101              BNE      |L1.846|
;;;332        WinFlags |= WM_CF_HASTRANS;
00034a  f0480801          ORR      r8,r8,#1
                  |L1.846|
;;;333      }
;;;334    #endif
;;;335      /* Create the window */
;;;336      hObj = WM_CreateWindowAsChild(x0, y0, xsize, ysize, hParent, WinFlags, CHECKBOX_Callback,
00034e  2140              MOVS     r1,#0x40
000350  f2af02b7          ADR      r2,CHECKBOX_Callback + 1
000354  fa1ff088          UXTH     r0,r8
000358  462b              MOV      r3,r5
00035a  e9cdb000          STRD     r11,r0,[sp,#0]
00035e  e9cd2102          STRD     r2,r1,[sp,#8]
000362  4622              MOV      r2,r4
000364  4651              MOV      r1,r10
000366  4648              MOV      r0,r9
000368  f7fffffe          BL       WM_CreateWindowAsChild
00036c  4606              MOV      r6,r0
;;;337                                    sizeof(CHECKBOX_Obj) - sizeof(WM_Obj));
;;;338      if (hObj) {
00036e  b196              CBZ      r6,|L1.918|
;;;339        CHECKBOX_Obj* pObj = (CHECKBOX_Obj *)GUI_ALLOC_h2p(hObj); /* Don't use use WIDGET_H2P because WIDGET_INIT_ID() has not be called at this point */
000370  4630              MOV      r0,r6
000372  f7fffffe          BL       GUI_ALLOC_h2p
000376  4607              MOV      r7,r0
;;;340        /* init widget specific variables */
;;;341        WIDGET__Init(&pObj->Widget, Id, WIDGET_STATE_FOCUSSABLE);
000378  2210              MOVS     r2,#0x10
00037a  4638              MOV      r0,r7
00037c  9911              LDR      r1,[sp,#0x44]
00037e  f7fffffe          BL       WIDGET__Init
;;;342        CHECKBOX_INIT_ID(pObj);
;;;343        /* init member variables */
;;;344        pObj->Props = CHECKBOX__DefaultProps;
000382  2234              MOVS     r2,#0x34
000384  4906              LDR      r1,|L1.928|
000386  f1070028          ADD      r0,r7,#0x28
00038a  f7fffffe          BL       __aeabi_memcpy4
;;;345        pObj->NumStates   = 2; /* Default behaviour is 2 states: checked and unchecked */
00038e  2002              MOVS     r0,#2
000390  f887005c          STRB     r0,[r7,#0x5c]
;;;346      } else {
000394  bf00              NOP      
                  |L1.918|
;;;347        GUI_DEBUG_ERROROUT_IF(hObj==0, "CHECKBOX_Create failed")
;;;348      }
;;;349      WM_UNLOCK();
;;;350      return hObj;
000396  4630              MOV      r0,r6
;;;351    }
000398  b004              ADD      sp,sp,#0x10
00039a  e8bd9ff0          POP      {r4-r12,pc}
;;;352    
                          ENDP

00039e  0000              DCW      0x0000
                  |L1.928|
                          DCD      CHECKBOX__DefaultProps

                          AREA ||.data||, DATA, ALIGN=2

                  CHECKBOX__DefaultProps
                          DCD      GUI_Font13_1
                          DCD      0x00808080
                          DCD      0x00ffffff
                          DCD      0x00c0c0c0
                          DCD      0x00000000
                          DCD      0x00000000
000018  000c              DCW      0x000c
00001a  0400              DCB      0x04,0x00
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      CHECKBOX__abmCheck
                          DCD      CHECKBOX__abmCheck+0x14
                          %        8
