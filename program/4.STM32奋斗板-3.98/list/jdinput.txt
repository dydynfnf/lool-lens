; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\jdinput.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\jdinput.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -I.\GUI\AntiAlias -I.\GUI\Config -I.\GUI\ConvertColor -I.\GUI\ConvertMono -I.\GUI\Core -I.\GUI\Font -I.\GUI\GUI_X -I.\GUI\JPEG -I.\GUI\LCDDriver -I.\GUI\MemDev -I.\GUI\MultiLayer -I.\GUI\Widget -I.\GUI\WM -IC:\Users\Administrator\Desktop\gui\STM32·Ü¶·°å-3.98\RTE -Id:\Keil_v5\ARM\PACK\ARM\CMSIS\4.3.0\CMSIS\Include -Id:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.1.0\Device\Include -D__UVISION_VERSION=515 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\jdinput.crf GUI\JPEG\jdinput.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  initial_setup PROC
;;;38     LOCAL(void)
;;;39     initial_setup (j_decompress_ptr cinfo)
000000  b570              PUSH     {r4-r6,lr}
;;;40     /* Called once, when first SOS marker is reached */
;;;41     {
000002  4604              MOV      r4,r0
;;;42       int ci;
;;;43       jpeg_component_info *compptr;
;;;44     
;;;45       /* Make sure image isn't bigger than I can handle */
;;;46       if ((long) cinfo->image_height > (long) JPEG_MAX_DIMENSION ||
000004  f64f71dc          MOV      r1,#0xffdc
000008  6a20              LDR      r0,[r4,#0x20]
00000a  4288              CMP      r0,r1
00000c  dc02              BGT      |L1.20|
;;;47           (long) cinfo->image_width > (long) JPEG_MAX_DIMENSION)
00000e  69e0              LDR      r0,[r4,#0x1c]
000010  4288              CMP      r0,r1
000012  dd0a              BLE      |L1.42|
                  |L1.20|
;;;48         ERREXIT1(cinfo, JERR_IMAGE_TOO_BIG, (unsigned int) JPEG_MAX_DIMENSION);
000014  2029              MOVS     r0,#0x29
000016  6821              LDR      r1,[r4,#0]
000018  6148              STR      r0,[r1,#0x14]
00001a  f64f70dc          MOV      r0,#0xffdc
00001e  6821              LDR      r1,[r4,#0]
000020  6188              STR      r0,[r1,#0x18]
000022  6820              LDR      r0,[r4,#0]
000024  6801              LDR      r1,[r0,#0]
000026  4620              MOV      r0,r4
000028  4788              BLX      r1
                  |L1.42|
;;;49     
;;;50       /* For now, precision must match compiled-in value... */
;;;51       if (cinfo->data_precision != BITS_IN_JSAMPLE)
00002a  f8d400d4          LDR      r0,[r4,#0xd4]
00002e  2808              CMP      r0,#8
000030  d00a              BEQ      |L1.72|
;;;52         ERREXIT1(cinfo, JERR_BAD_PRECISION, cinfo->data_precision);
000032  200f              MOVS     r0,#0xf
000034  6821              LDR      r1,[r4,#0]
000036  6148              STR      r0,[r1,#0x14]
000038  6821              LDR      r1,[r4,#0]
00003a  f8d400d4          LDR      r0,[r4,#0xd4]
00003e  6188              STR      r0,[r1,#0x18]
000040  6820              LDR      r0,[r4,#0]
000042  6801              LDR      r1,[r0,#0]
000044  4620              MOV      r0,r4
000046  4788              BLX      r1
                  |L1.72|
;;;53     
;;;54       /* Check that number of components won't exceed internal array sizes */
;;;55       if (cinfo->num_components > MAX_COMPONENTS)
000048  6a60              LDR      r0,[r4,#0x24]
00004a  2804              CMP      r0,#4
00004c  dd0c              BLE      |L1.104|
;;;56         ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->num_components,
00004e  201a              MOVS     r0,#0x1a
000050  6821              LDR      r1,[r4,#0]
000052  6148              STR      r0,[r1,#0x14]
000054  6821              LDR      r1,[r4,#0]
000056  6a60              LDR      r0,[r4,#0x24]
000058  6188              STR      r0,[r1,#0x18]
00005a  2104              MOVS     r1,#4
00005c  6820              LDR      r0,[r4,#0]
00005e  61c1              STR      r1,[r0,#0x1c]
000060  6820              LDR      r0,[r4,#0]
000062  6801              LDR      r1,[r0,#0]
000064  4620              MOV      r0,r4
000066  4788              BLX      r1
                  |L1.104|
;;;57     	     MAX_COMPONENTS);
;;;58     
;;;59       /* Compute maximum sampling factors; check factor validity */
;;;60       cinfo->max_h_samp_factor = 1;
000068  2001              MOVS     r0,#1
00006a  34d8              ADDS     r4,r4,#0xd8
00006c  65e0              STR      r0,[r4,#0x5c]
;;;61       cinfo->max_v_samp_factor = 1;
00006e  6620              STR      r0,[r4,#0x60]
;;;62       for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
000070  2600              MOVS     r6,#0
000072  f85459d8          LDR      r5,[r4],#-0xd8
000076  e02a              B        |L1.206|
                  |L1.120|
;;;63            ci++, compptr++) {
;;;64         if (compptr->h_samp_factor<=0 || compptr->h_samp_factor>MAX_SAMP_FACTOR ||
000078  68a8              LDR      r0,[r5,#8]
00007a  2800              CMP      r0,#0
00007c  dd08              BLE      |L1.144|
00007e  68a8              LDR      r0,[r5,#8]
000080  2804              CMP      r0,#4
000082  dc05              BGT      |L1.144|
;;;65     	compptr->v_samp_factor<=0 || compptr->v_samp_factor>MAX_SAMP_FACTOR)
000084  68e8              LDR      r0,[r5,#0xc]
000086  2800              CMP      r0,#0
000088  dd02              BLE      |L1.144|
00008a  68e8              LDR      r0,[r5,#0xc]
00008c  2804              CMP      r0,#4
00008e  dd06              BLE      |L1.158|
                  |L1.144|
;;;66           ERREXIT(cinfo, JERR_BAD_SAMPLING);
000090  2012              MOVS     r0,#0x12
000092  6821              LDR      r1,[r4,#0]
000094  6148              STR      r0,[r1,#0x14]
000096  6820              LDR      r0,[r4,#0]
000098  6801              LDR      r1,[r0,#0]
00009a  4620              MOV      r0,r4
00009c  4788              BLX      r1
                  |L1.158|
;;;67         cinfo->max_h_samp_factor = MAX(cinfo->max_h_samp_factor,
00009e  f8d40134          LDR      r0,[r4,#0x134]
0000a2  68a9              LDR      r1,[r5,#8]
0000a4  4288              CMP      r0,r1
0000a6  dd02              BLE      |L1.174|
0000a8  f8d40134          LDR      r0,[r4,#0x134]
0000ac  e000              B        |L1.176|
                  |L1.174|
0000ae  68a8              LDR      r0,[r5,#8]
                  |L1.176|
0000b0  f8c40134          STR      r0,[r4,#0x134]
;;;68     				   compptr->h_samp_factor);
;;;69         cinfo->max_v_samp_factor = MAX(cinfo->max_v_samp_factor,
0000b4  f8d40138          LDR      r0,[r4,#0x138]
0000b8  68e9              LDR      r1,[r5,#0xc]
0000ba  4288              CMP      r0,r1
0000bc  dd02              BLE      |L1.196|
0000be  f8d40138          LDR      r0,[r4,#0x138]
0000c2  e000              B        |L1.198|
                  |L1.196|
0000c4  68e8              LDR      r0,[r5,#0xc]
                  |L1.198|
0000c6  f8c40138          STR      r0,[r4,#0x138]
0000ca  1c76              ADDS     r6,r6,#1              ;63
0000cc  3554              ADDS     r5,r5,#0x54           ;63
                  |L1.206|
0000ce  6a60              LDR      r0,[r4,#0x24]         ;62
0000d0  42b0              CMP      r0,r6                 ;62
0000d2  dcd1              BGT      |L1.120|
;;;70     				   compptr->v_samp_factor);
;;;71       }
;;;72     
;;;73       /* We initialize DCT_scaled_size and min_DCT_scaled_size to DCTSIZE.
;;;74        * In the full decompressor, this will be overridden by jdmaster.c;
;;;75        * but in the transcoder, jdmaster.c is not used, so we must do it here.
;;;76        */
;;;77       cinfo->min_DCT_scaled_size = DCTSIZE;
0000d4  2008              MOVS     r0,#8
0000d6  f8c4013c          STR      r0,[r4,#0x13c]
;;;78     
;;;79       /* Compute dimensions of components */
;;;80       for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
0000da  2600              MOVS     r6,#0
0000dc  f8d450d8          LDR      r5,[r4,#0xd8]
0000e0  e02d              B        |L1.318|
                  |L1.226|
;;;81            ci++, compptr++) {
;;;82         compptr->DCT_scaled_size = DCTSIZE;
0000e2  2008              MOVS     r0,#8
0000e4  6268              STR      r0,[r5,#0x24]
;;;83         /* Size in DCT blocks */
;;;84         compptr->width_in_blocks = (JDIMENSION)
0000e6  69e2              LDR      r2,[r4,#0x1c]
0000e8  68ab              LDR      r3,[r5,#8]
0000ea  fb02f003          MUL      r0,r2,r3
0000ee  f8d42134          LDR      r2,[r4,#0x134]
0000f2  00d1              LSLS     r1,r2,#3
0000f4  f7fffffe          BL       jdiv_round_up
0000f8  61e8              STR      r0,[r5,#0x1c]
;;;85           jdiv_round_up((long) cinfo->image_width * (long) compptr->h_samp_factor,
;;;86     		    (long) (cinfo->max_h_samp_factor * DCTSIZE));
;;;87         compptr->height_in_blocks = (JDIMENSION)
0000fa  6a22              LDR      r2,[r4,#0x20]
0000fc  68eb              LDR      r3,[r5,#0xc]
0000fe  fb02f003          MUL      r0,r2,r3
000102  f8d42138          LDR      r2,[r4,#0x138]
000106  00d1              LSLS     r1,r2,#3
000108  f7fffffe          BL       jdiv_round_up
00010c  6228              STR      r0,[r5,#0x20]
;;;88           jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
;;;89     		    (long) (cinfo->max_v_samp_factor * DCTSIZE));
;;;90         /* downsampled_width and downsampled_height will also be overridden by
;;;91          * jdmaster.c if we are doing full decompression.  The transcoder library
;;;92          * doesn't use these values, but the calling application might.
;;;93          */
;;;94         /* Size in samples */
;;;95         compptr->downsampled_width = (JDIMENSION)
00010e  69e2              LDR      r2,[r4,#0x1c]
000110  68ab              LDR      r3,[r5,#8]
000112  fb02f003          MUL      r0,r2,r3
000116  f8d41134          LDR      r1,[r4,#0x134]
00011a  f7fffffe          BL       jdiv_round_up
00011e  62a8              STR      r0,[r5,#0x28]
;;;96           jdiv_round_up((long) cinfo->image_width * (long) compptr->h_samp_factor,
;;;97     		    (long) cinfo->max_h_samp_factor);
;;;98         compptr->downsampled_height = (JDIMENSION)
000120  6a22              LDR      r2,[r4,#0x20]
000122  68eb              LDR      r3,[r5,#0xc]
000124  fb02f003          MUL      r0,r2,r3
000128  f8d41138          LDR      r1,[r4,#0x138]
00012c  f7fffffe          BL       jdiv_round_up
000130  62e8              STR      r0,[r5,#0x2c]
;;;99           jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
;;;100    		    (long) cinfo->max_v_samp_factor);
;;;101        /* Mark component needed, until color conversion says otherwise */
;;;102        compptr->component_needed = TRUE;
000132  2001              MOVS     r0,#1
000134  6328              STR      r0,[r5,#0x30]
;;;103        /* Mark no quantization table yet saved for component */
;;;104        compptr->quant_table = NULL;
000136  2000              MOVS     r0,#0
000138  64e8              STR      r0,[r5,#0x4c]
00013a  1c76              ADDS     r6,r6,#1              ;81
00013c  3554              ADDS     r5,r5,#0x54           ;81
                  |L1.318|
00013e  6a60              LDR      r0,[r4,#0x24]         ;80
000140  42b0              CMP      r0,r6                 ;80
000142  dcce              BGT      |L1.226|
;;;105      }
;;;106    
;;;107      /* Compute number of fully interleaved MCU rows. */
;;;108      cinfo->total_iMCU_rows = (JDIMENSION)
000144  f8d42138          LDR      r2,[r4,#0x138]
000148  00d1              LSLS     r1,r2,#3
00014a  6a20              LDR      r0,[r4,#0x20]
00014c  f7fffffe          BL       jdiv_round_up
000150  f8c40140          STR      r0,[r4,#0x140]
;;;109        jdiv_round_up((long) cinfo->image_height,
;;;110    		  (long) (cinfo->max_v_samp_factor*DCTSIZE));
;;;111    
;;;112      /* Decide whether file contains multiple scans */
;;;113      if (cinfo->comps_in_scan < cinfo->num_components || cinfo->progressive_mode)
000154  6a61              LDR      r1,[r4,#0x24]
000156  f8d40148          LDR      r0,[r4,#0x148]
00015a  4288              CMP      r0,r1
00015c  db02              BLT      |L1.356|
00015e  f8d400dc          LDR      r0,[r4,#0xdc]
000162  b120              CBZ      r0,|L1.366|
                  |L1.356|
;;;114        cinfo->inputctl->has_multiple_scans = TRUE;
000164  2001              MOVS     r0,#1
000166  f8d411b4          LDR      r1,[r4,#0x1b4]
00016a  6108              STR      r0,[r1,#0x10]
00016c  e003              B        |L1.374|
                  |L1.366|
;;;115      else
;;;116        cinfo->inputctl->has_multiple_scans = FALSE;
00016e  2000              MOVS     r0,#0
000170  f8d411b4          LDR      r1,[r4,#0x1b4]
000174  6108              STR      r0,[r1,#0x10]
                  |L1.374|
;;;117    }
000176  bd70              POP      {r4-r6,pc}
;;;118    
                          ENDP

                  per_scan_setup PROC
;;;120    LOCAL(void)
;;;121    per_scan_setup (j_decompress_ptr cinfo)
000178  e92d41f0          PUSH     {r4-r8,lr}
;;;122    /* Do computations that are needed before processing a JPEG scan */
;;;123    /* cinfo->comps_in_scan and cinfo->cur_comp_info[] were set from SOS marker */
;;;124    {
00017c  4605              MOV      r5,r0
;;;125      int ci, mcublks, tmp;
;;;126      jpeg_component_info *compptr;
;;;127      
;;;128      if (cinfo->comps_in_scan == 1) {
00017e  f8d50148          LDR      r0,[r5,#0x148]
000182  2801              CMP      r0,#1
000184  d11f              BNE      |L1.454|
;;;129        
;;;130        /* Noninterleaved (single-component) scan */
;;;131        compptr = cinfo->cur_comp_info[0];
000186  f8d5414c          LDR      r4,[r5,#0x14c]
;;;132        
;;;133        /* Overall image size in MCUs */
;;;134        cinfo->MCUs_per_row = compptr->width_in_blocks;
00018a  69e0              LDR      r0,[r4,#0x1c]
00018c  f8c5015c          STR      r0,[r5,#0x15c]
;;;135        cinfo->MCU_rows_in_scan = compptr->height_in_blocks;
000190  6a20              LDR      r0,[r4,#0x20]
000192  f8c50160          STR      r0,[r5,#0x160]
;;;136        
;;;137        /* For noninterleaved scan, always one block per MCU */
;;;138        compptr->MCU_width = 1;
000196  2001              MOVS     r0,#1
000198  6360              STR      r0,[r4,#0x34]
;;;139        compptr->MCU_height = 1;
00019a  63a0              STR      r0,[r4,#0x38]
;;;140        compptr->MCU_blocks = 1;
00019c  63e0              STR      r0,[r4,#0x3c]
;;;141        compptr->MCU_sample_width = compptr->DCT_scaled_size;
00019e  6a60              LDR      r0,[r4,#0x24]
0001a0  6420              STR      r0,[r4,#0x40]
;;;142        compptr->last_col_width = 1;
0001a2  2001              MOVS     r0,#1
0001a4  6460              STR      r0,[r4,#0x44]
;;;143        /* For noninterleaved scans, it is convenient to define last_row_height
;;;144         * as the number of block rows present in the last iMCU row.
;;;145         */
;;;146        tmp = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
0001a6  68e1              LDR      r1,[r4,#0xc]
0001a8  6a20              LDR      r0,[r4,#0x20]
0001aa  fbb0f2f1          UDIV     r2,r0,r1
0001ae  fb010612          MLS      r6,r1,r2,r0
;;;147        if (tmp == 0) tmp = compptr->v_samp_factor;
0001b2  b906              CBNZ     r6,|L1.438|
0001b4  68e6              LDR      r6,[r4,#0xc]
                  |L1.438|
;;;148        compptr->last_row_height = tmp;
0001b6  64a6              STR      r6,[r4,#0x48]
;;;149        
;;;150        /* Prepare array describing MCU composition */
;;;151        cinfo->blocks_in_MCU = 1;
0001b8  2001              MOVS     r0,#1
0001ba  f8c50164          STR      r0,[r5,#0x164]
;;;152        cinfo->MCU_membership[0] = 0;
0001be  2000              MOVS     r0,#0
0001c0  f8c50168          STR      r0,[r5,#0x168]
0001c4  e06d              B        |L1.674|
                  |L1.454|
;;;153        
;;;154      } else {
;;;155        
;;;156        /* Interleaved (multi-component) scan */
;;;157        if (cinfo->comps_in_scan <= 0 || cinfo->comps_in_scan > MAX_COMPS_IN_SCAN)
0001c6  f8d50148          LDR      r0,[r5,#0x148]
0001ca  2800              CMP      r0,#0
0001cc  dd03              BLE      |L1.470|
0001ce  f8d50148          LDR      r0,[r5,#0x148]
0001d2  2804              CMP      r0,#4
0001d4  dd0d              BLE      |L1.498|
                  |L1.470|
;;;158          ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->comps_in_scan,
0001d6  201a              MOVS     r0,#0x1a
0001d8  6829              LDR      r1,[r5,#0]
0001da  6148              STR      r0,[r1,#0x14]
0001dc  6829              LDR      r1,[r5,#0]
0001de  f8d50148          LDR      r0,[r5,#0x148]
0001e2  6188              STR      r0,[r1,#0x18]
0001e4  2104              MOVS     r1,#4
0001e6  6828              LDR      r0,[r5,#0]
0001e8  61c1              STR      r1,[r0,#0x1c]
0001ea  6828              LDR      r0,[r5,#0]
0001ec  6801              LDR      r1,[r0,#0]
0001ee  4628              MOV      r0,r5
0001f0  4788              BLX      r1
                  |L1.498|
;;;159    	       MAX_COMPS_IN_SCAN);
;;;160        
;;;161        /* Overall image size in MCUs */
;;;162        cinfo->MCUs_per_row = (JDIMENSION)
0001f2  35e8              ADDS     r5,r5,#0xe8
0001f4  6cea              LDR      r2,[r5,#0x4c]
0001f6  00d1              LSLS     r1,r2,#3
0001f8  f8550ccc          LDR      r0,[r5,#-0xcc]
0001fc  f7fffffe          BL       jdiv_round_up
000200  6768              STR      r0,[r5,#0x74]
;;;163          jdiv_round_up((long) cinfo->image_width,
;;;164    		    (long) (cinfo->max_h_samp_factor*DCTSIZE));
;;;165        cinfo->MCU_rows_in_scan = (JDIMENSION)
000202  6d2a              LDR      r2,[r5,#0x50]
000204  00d1              LSLS     r1,r2,#3
000206  f8550cc8          LDR      r0,[r5,#-0xc8]
00020a  f7fffffe          BL       jdiv_round_up
00020e  67a8              STR      r0,[r5,#0x78]
;;;166          jdiv_round_up((long) cinfo->image_height,
;;;167    		    (long) (cinfo->max_v_samp_factor*DCTSIZE));
;;;168        
;;;169        cinfo->blocks_in_MCU = 0;
000210  2000              MOVS     r0,#0
000212  67e8              STR      r0,[r5,#0x7c]
000214  3de8              SUBS     r5,r5,#0xe8
;;;170        
;;;171        for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
000216  2700              MOVS     r7,#0
000218  e03f              B        |L1.666|
                  |L1.538|
;;;172          compptr = cinfo->cur_comp_info[ci];
00021a  f50570a6          ADD      r0,r5,#0x14c
00021e  f8504027          LDR      r4,[r0,r7,LSL #2]
;;;173          /* Sampling factors give # of blocks of component in each MCU */
;;;174          compptr->MCU_width = compptr->h_samp_factor;
000222  68a0              LDR      r0,[r4,#8]
000224  6360              STR      r0,[r4,#0x34]
;;;175          compptr->MCU_height = compptr->v_samp_factor;
000226  68e0              LDR      r0,[r4,#0xc]
000228  63a0              STR      r0,[r4,#0x38]
;;;176          compptr->MCU_blocks = compptr->MCU_width * compptr->MCU_height;
00022a  e9d4010d          LDRD     r0,r1,[r4,#0x34]
00022e  4348              MULS     r0,r1,r0
000230  63e0              STR      r0,[r4,#0x3c]
;;;177          compptr->MCU_sample_width = compptr->MCU_width * compptr->DCT_scaled_size;
000232  6a61              LDR      r1,[r4,#0x24]
000234  6b60              LDR      r0,[r4,#0x34]
000236  4348              MULS     r0,r1,r0
000238  6420              STR      r0,[r4,#0x40]
;;;178          /* Figure number of non-dummy blocks in last MCU column & row */
;;;179          tmp = (int) (compptr->width_in_blocks % compptr->MCU_width);
00023a  6b61              LDR      r1,[r4,#0x34]
00023c  69e0              LDR      r0,[r4,#0x1c]
00023e  fbb0f2f1          UDIV     r2,r0,r1
000242  fb010612          MLS      r6,r1,r2,r0
;;;180          if (tmp == 0) tmp = compptr->MCU_width;
000246  b906              CBNZ     r6,|L1.586|
000248  6b66              LDR      r6,[r4,#0x34]
                  |L1.586|
;;;181          compptr->last_col_width = tmp;
00024a  6466              STR      r6,[r4,#0x44]
;;;182          tmp = (int) (compptr->height_in_blocks % compptr->MCU_height);
00024c  6ba1              LDR      r1,[r4,#0x38]
00024e  6a20              LDR      r0,[r4,#0x20]
000250  fbb0f2f1          UDIV     r2,r0,r1
000254  fb010612          MLS      r6,r1,r2,r0
;;;183          if (tmp == 0) tmp = compptr->MCU_height;
000258  b906              CBNZ     r6,|L1.604|
00025a  6ba6              LDR      r6,[r4,#0x38]
                  |L1.604|
;;;184          compptr->last_row_height = tmp;
00025c  64a6              STR      r6,[r4,#0x48]
;;;185          /* Prepare array describing MCU composition */
;;;186          mcublks = compptr->MCU_blocks;
00025e  f8d4803c          LDR      r8,[r4,#0x3c]
;;;187          if (cinfo->blocks_in_MCU + mcublks > D_MAX_BLOCKS_IN_MCU)
000262  f8d50164          LDR      r0,[r5,#0x164]
000266  4440              ADD      r0,r0,r8
000268  280a              CMP      r0,#0xa
00026a  dd06              BLE      |L1.634|
;;;188    	ERREXIT(cinfo, JERR_BAD_MCU_SIZE);
00026c  200d              MOVS     r0,#0xd
00026e  6829              LDR      r1,[r5,#0]
000270  6148              STR      r0,[r1,#0x14]
000272  6828              LDR      r0,[r5,#0]
000274  6801              LDR      r1,[r0,#0]
000276  4628              MOV      r0,r5
000278  4788              BLX      r1
                  |L1.634|
;;;189          while (mcublks-- > 0) {
00027a  e008              B        |L1.654|
                  |L1.636|
;;;190    	cinfo->MCU_membership[cinfo->blocks_in_MCU++] = ci;
00027c  f8d51164          LDR      r1,[r5,#0x164]
000280  1c48              ADDS     r0,r1,#1
000282  f8c50164          STR      r0,[r5,#0x164]
000286  f50570b4          ADD      r0,r5,#0x168
00028a  f8407021          STR      r7,[r0,r1,LSL #2]
                  |L1.654|
00028e  f1b80000          SUBS     r0,r8,#0              ;189
000292  f1a80801          SUB      r8,r8,#1              ;189
000296  dcf1              BGT      |L1.636|
000298  1c7f              ADDS     r7,r7,#1              ;171
                  |L1.666|
00029a  f8d50148          LDR      r0,[r5,#0x148]        ;171
00029e  42b8              CMP      r0,r7                 ;171
0002a0  dcbb              BGT      |L1.538|
                  |L1.674|
;;;191          }
;;;192        }
;;;193        
;;;194      }
;;;195    }
0002a2  e8bd81f0          POP      {r4-r8,pc}
;;;196    
                          ENDP

                  latch_quant_tables PROC
;;;219    LOCAL(void)
;;;220    latch_quant_tables (j_decompress_ptr cinfo)
0002a6  e92d41f0          PUSH     {r4-r8,lr}
;;;221    {
0002aa  4604              MOV      r4,r0
;;;222      int ci, qtblno;
;;;223      jpeg_component_info *compptr;
;;;224      JQUANT_TBL * qtbl;
;;;225    
;;;226      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
0002ac  2700              MOVS     r7,#0
0002ae  e02c              B        |L1.778|
                  |L1.688|
;;;227        compptr = cinfo->cur_comp_info[ci];
0002b0  f50470a6          ADD      r0,r4,#0x14c
0002b4  f8506027          LDR      r6,[r0,r7,LSL #2]
;;;228        /* No work if we already saved Q-table for this component */
;;;229        if (compptr->quant_table != NULL)
0002b8  6cf0              LDR      r0,[r6,#0x4c]
0002ba  b100              CBZ      r0,|L1.702|
;;;230          continue;
0002bc  e024              B        |L1.776|
                  |L1.702|
;;;231        /* Make sure specified quantization table is present */
;;;232        qtblno = compptr->quant_tbl_no;
0002be  6935              LDR      r5,[r6,#0x10]
;;;233        if (qtblno < 0 || qtblno >= NUM_QUANT_TBLS ||
0002c0  2d00              CMP      r5,#0
0002c2  db06              BLT      |L1.722|
0002c4  2d04              CMP      r5,#4
0002c6  da04              BGE      |L1.722|
;;;234    	cinfo->quant_tbl_ptrs[qtblno] == NULL)
0002c8  f10400a4          ADD      r0,r4,#0xa4
0002cc  f8500025          LDR      r0,[r0,r5,LSL #2]
0002d0  b940              CBNZ     r0,|L1.740|
                  |L1.722|
;;;235          ERREXIT1(cinfo, JERR_NO_QUANT_TABLE, qtblno);
0002d2  2034              MOVS     r0,#0x34
0002d4  6821              LDR      r1,[r4,#0]
0002d6  6148              STR      r0,[r1,#0x14]
0002d8  6820              LDR      r0,[r4,#0]
0002da  6185              STR      r5,[r0,#0x18]
0002dc  6820              LDR      r0,[r4,#0]
0002de  6801              LDR      r1,[r0,#0]
0002e0  4620              MOV      r0,r4
0002e2  4788              BLX      r1
                  |L1.740|
;;;236        /* OK, save away the quantization table */
;;;237        qtbl = (JQUANT_TBL *)
0002e4  6860              LDR      r0,[r4,#4]
0002e6  2284              MOVS     r2,#0x84
0002e8  2101              MOVS     r1,#1
0002ea  6803              LDR      r3,[r0,#0]
0002ec  4620              MOV      r0,r4
0002ee  4798              BLX      r3
0002f0  4680              MOV      r8,r0
;;;238          (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
;;;239    				  SIZEOF(JQUANT_TBL));
;;;240        MEMCOPY(qtbl, cinfo->quant_tbl_ptrs[qtblno], SIZEOF(JQUANT_TBL));
0002f2  f10400a4          ADD      r0,r4,#0xa4
0002f6  f8501025          LDR      r1,[r0,r5,LSL #2]
0002fa  2284              MOVS     r2,#0x84
0002fc  4640              MOV      r0,r8
0002fe  f7fffffe          BL       __aeabi_memcpy4
;;;241        compptr->quant_table = qtbl;
000302  f8c6804c          STR      r8,[r6,#0x4c]
000306  bf00              NOP                            ;230
                  |L1.776|
000308  1c7f              ADDS     r7,r7,#1              ;226
                  |L1.778|
00030a  f8d40148          LDR      r0,[r4,#0x148]        ;226
00030e  42b8              CMP      r0,r7                 ;226
000310  dcce              BGT      |L1.688|
;;;242      }
;;;243    }
000312  e8bd81f0          POP      {r4-r8,pc}
;;;244    
                          ENDP

                  start_input_pass PROC
;;;253    METHODDEF(void)
;;;254    start_input_pass (j_decompress_ptr cinfo)
000316  b510              PUSH     {r4,lr}
;;;255    {
000318  4604              MOV      r4,r0
;;;256      per_scan_setup(cinfo);
00031a  4620              MOV      r0,r4
00031c  f7fffffe          BL       per_scan_setup
;;;257      latch_quant_tables(cinfo);
000320  4620              MOV      r0,r4
000322  f7fffffe          BL       latch_quant_tables
;;;258      (*cinfo->entropy->start_pass) (cinfo);
000326  f8d401bc          LDR      r0,[r4,#0x1bc]
00032a  6801              LDR      r1,[r0,#0]
00032c  4620              MOV      r0,r4
00032e  4788              BLX      r1
;;;259      (*cinfo->coef->start_input_pass) (cinfo);
000330  f8d401ac          LDR      r0,[r4,#0x1ac]
000334  6801              LDR      r1,[r0,#0]
000336  4620              MOV      r0,r4
000338  4788              BLX      r1
;;;260      cinfo->inputctl->consume_input = cinfo->coef->consume_data;
00033a  f8d401ac          LDR      r0,[r4,#0x1ac]
00033e  6840              LDR      r0,[r0,#4]
000340  f8d411b4          LDR      r1,[r4,#0x1b4]
000344  6008              STR      r0,[r1,#0]
;;;261    }
000346  bd10              POP      {r4,pc}
;;;262    
                          ENDP

                  consume_markers PROC
;;;287    METHODDEF(int)
;;;288    consume_markers (j_decompress_ptr cinfo)
000348  b570              PUSH     {r4-r6,lr}
;;;289    {
00034a  4604              MOV      r4,r0
;;;290      my_inputctl_ptr inputctl = (my_inputctl_ptr) cinfo->inputctl;
00034c  f8d451b4          LDR      r5,[r4,#0x1b4]
;;;291      int val;
;;;292    
;;;293      if (inputctl->pub.eoi_reached) /* After hitting EOI, read no further */
000350  6968              LDR      r0,[r5,#0x14]
000352  b108              CBZ      r0,|L1.856|
;;;294        return JPEG_REACHED_EOI;
000354  2002              MOVS     r0,#2
                  |L1.854|
;;;295    
;;;296      val = (*cinfo->marker->read_markers) (cinfo);
;;;297    
;;;298      switch (val) {
;;;299      case JPEG_REACHED_SOS:	/* Found SOS */
;;;300        if (inputctl->inheaders) {	/* 1st SOS */
;;;301          initial_setup(cinfo);
;;;302          inputctl->inheaders = FALSE;
;;;303          /* Note: start_input_pass must be called by jdmaster.c
;;;304           * before any more input can be consumed.  jdapimin.c is
;;;305           * responsible for enforcing this sequencing.
;;;306           */
;;;307        } else {			/* 2nd or later SOS marker */
;;;308          if (! inputctl->pub.has_multiple_scans)
;;;309    	ERREXIT(cinfo, JERR_EOI_EXPECTED); /* Oops, I wasn't expecting this! */
;;;310          start_input_pass(cinfo);
;;;311        }
;;;312        break;
;;;313      case JPEG_REACHED_EOI:	/* Found EOI */
;;;314        inputctl->pub.eoi_reached = TRUE;
;;;315        if (inputctl->inheaders) {	/* Tables-only datastream, apparently */
;;;316          if (cinfo->marker->saw_SOF)
;;;317    	ERREXIT(cinfo, JERR_SOF_NO_SOS);
;;;318        } else {
;;;319          /* Prevent infinite loop in coef ctlr's decompress_data routine
;;;320           * if user set output_scan_number larger than number of scans.
;;;321           */
;;;322          if (cinfo->output_scan_number > cinfo->input_scan_number)
;;;323    	cinfo->output_scan_number = cinfo->input_scan_number;
;;;324        }
;;;325        break;
;;;326      case JPEG_SUSPENDED:
;;;327        break;
;;;328      }
;;;329    
;;;330      return val;
;;;331    }
000356  bd70              POP      {r4-r6,pc}
                  |L1.856|
000358  f8d401b8          LDR      r0,[r4,#0x1b8]        ;296
00035c  6841              LDR      r1,[r0,#4]            ;296
00035e  4620              MOV      r0,r4                 ;296
000360  4788              BLX      r1                    ;296
000362  4606              MOV      r6,r0                 ;296
000364  b3a6              CBZ      r6,|L1.976|
000366  2e01              CMP      r6,#1                 ;298
000368  d002              BEQ      |L1.880|
00036a  2e02              CMP      r6,#2                 ;298
00036c  d132              BNE      |L1.980|
00036e  e014              B        |L1.922|
                  |L1.880|
000370  69a8              LDR      r0,[r5,#0x18]         ;300
000372  b128              CBZ      r0,|L1.896|
000374  4620              MOV      r0,r4                 ;301
000376  f7fffffe          BL       initial_setup
00037a  2000              MOVS     r0,#0                 ;302
00037c  61a8              STR      r0,[r5,#0x18]         ;302
00037e  e00b              B        |L1.920|
                  |L1.896|
000380  6928              LDR      r0,[r5,#0x10]         ;308
000382  b930              CBNZ     r0,|L1.914|
000384  2023              MOVS     r0,#0x23              ;309
000386  6821              LDR      r1,[r4,#0]            ;309
000388  6148              STR      r0,[r1,#0x14]         ;309
00038a  6820              LDR      r0,[r4,#0]            ;309
00038c  6801              LDR      r1,[r0,#0]            ;309
00038e  4620              MOV      r0,r4                 ;309
000390  4788              BLX      r1                    ;309
                  |L1.914|
000392  4620              MOV      r0,r4                 ;310
000394  f7fffffe          BL       start_input_pass
                  |L1.920|
000398  e01c              B        |L1.980|
                  |L1.922|
00039a  2001              MOVS     r0,#1                 ;314
00039c  6168              STR      r0,[r5,#0x14]         ;314
00039e  69a8              LDR      r0,[r5,#0x18]         ;315
0003a0  b158              CBZ      r0,|L1.954|
0003a2  f8d401b8          LDR      r0,[r4,#0x1b8]        ;316
0003a6  6900              LDR      r0,[r0,#0x10]         ;316
0003a8  b188              CBZ      r0,|L1.974|
0003aa  203b              MOVS     r0,#0x3b              ;317
0003ac  6821              LDR      r1,[r4,#0]            ;317
0003ae  6148              STR      r0,[r1,#0x14]         ;317
0003b0  6820              LDR      r0,[r4,#0]            ;317
0003b2  6801              LDR      r1,[r0,#0]            ;317
0003b4  4620              MOV      r0,r4                 ;317
0003b6  4788              BLX      r1                    ;317
0003b8  e009              B        |L1.974|
                  |L1.954|
0003ba  f8d41090          LDR      r1,[r4,#0x90]         ;322
0003be  f8d40098          LDR      r0,[r4,#0x98]         ;322
0003c2  4288              CMP      r0,r1                 ;322
0003c4  dd03              BLE      |L1.974|
0003c6  f8d40090          LDR      r0,[r4,#0x90]         ;323
0003ca  f8c40098          STR      r0,[r4,#0x98]         ;323
                  |L1.974|
0003ce  e001              B        |L1.980|
                  |L1.976|
0003d0  e7ff              B        |L1.978|
                  |L1.978|
0003d2  bf00              NOP                            ;327
                  |L1.980|
0003d4  bf00              NOP                            ;312
0003d6  4630              MOV      r0,r6                 ;330
0003d8  e7bd              B        |L1.854|
;;;332    
                          ENDP

                  finish_input_pass PROC
;;;270    METHODDEF(void)
;;;271    finish_input_pass (j_decompress_ptr cinfo)
0003da  491b              LDR      r1,|L1.1096|
;;;272    {
;;;273      cinfo->inputctl->consume_input = consume_markers;
0003dc  f8d021b4          LDR      r2,[r0,#0x1b4]
0003e0  6011              STR      r1,[r2,#0]
;;;274    }
0003e2  4770              BX       lr
;;;275    
                          ENDP

                  reset_input_controller PROC
;;;338    METHODDEF(void)
;;;339    reset_input_controller (j_decompress_ptr cinfo)
0003e4  b570              PUSH     {r4-r6,lr}
;;;340    {
0003e6  4604              MOV      r4,r0
;;;341      my_inputctl_ptr inputctl = (my_inputctl_ptr) cinfo->inputctl;
0003e8  f8d451b4          LDR      r5,[r4,#0x1b4]
;;;342    
;;;343      inputctl->pub.consume_input = consume_markers;
0003ec  4816              LDR      r0,|L1.1096|
0003ee  6028              STR      r0,[r5,#0]
;;;344      inputctl->pub.has_multiple_scans = FALSE; /* "unknown" would be better */
0003f0  2000              MOVS     r0,#0
0003f2  6128              STR      r0,[r5,#0x10]
;;;345      inputctl->pub.eoi_reached = FALSE;
0003f4  6168              STR      r0,[r5,#0x14]
;;;346      inputctl->inheaders = TRUE;
0003f6  2001              MOVS     r0,#1
0003f8  61a8              STR      r0,[r5,#0x18]
;;;347      /* Reset other modules */
;;;348      (*cinfo->err->reset_error_mgr) ((j_common_ptr) cinfo);
0003fa  6820              LDR      r0,[r4,#0]
0003fc  6901              LDR      r1,[r0,#0x10]
0003fe  4620              MOV      r0,r4
000400  4788              BLX      r1
;;;349      (*cinfo->marker->reset_marker_reader) (cinfo);
000402  f8d401b8          LDR      r0,[r4,#0x1b8]
000406  6801              LDR      r1,[r0,#0]
000408  4620              MOV      r0,r4
00040a  4788              BLX      r1
;;;350      /* Reset progression state -- would be cleaner if entropy decoder did this */
;;;351      cinfo->coef_bits = NULL;
00040c  2000              MOVS     r0,#0
00040e  f8c400a0          STR      r0,[r4,#0xa0]
;;;352    }
000412  bd70              POP      {r4-r6,pc}
;;;353    
                          ENDP

                  jinit_input_controller PROC
;;;360    GLOBAL(void)
;;;361    jinit_input_controller (j_decompress_ptr cinfo)
000414  b570              PUSH     {r4-r6,lr}
;;;362    {
000416  4605              MOV      r5,r0
;;;363      my_inputctl_ptr inputctl;
;;;364    
;;;365      /* Create subobject in permanent pool */
;;;366      inputctl = (my_inputctl_ptr)
000418  6868              LDR      r0,[r5,#4]
00041a  221c              MOVS     r2,#0x1c
00041c  2100              MOVS     r1,#0
00041e  6803              LDR      r3,[r0,#0]
000420  4628              MOV      r0,r5
000422  4798              BLX      r3
000424  4604              MOV      r4,r0
;;;367        (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
;;;368    				SIZEOF(my_input_controller));
;;;369      cinfo->inputctl = (struct jpeg_input_controller *) inputctl;
000426  f8c541b4          STR      r4,[r5,#0x1b4]
;;;370      /* Initialize method pointers */
;;;371      inputctl->pub.consume_input = consume_markers;
00042a  4807              LDR      r0,|L1.1096|
00042c  6020              STR      r0,[r4,#0]
;;;372      inputctl->pub.reset_input_controller = reset_input_controller;
00042e  4807              LDR      r0,|L1.1100|
000430  6060              STR      r0,[r4,#4]
;;;373      inputctl->pub.start_input_pass = start_input_pass;
000432  4807              LDR      r0,|L1.1104|
000434  60a0              STR      r0,[r4,#8]
;;;374      inputctl->pub.finish_input_pass = finish_input_pass;
000436  4807              LDR      r0,|L1.1108|
000438  60e0              STR      r0,[r4,#0xc]
;;;375      /* Initialize state: can't use reset_input_controller since we don't
;;;376       * want to try to reset other modules yet.
;;;377       */
;;;378      inputctl->pub.has_multiple_scans = FALSE; /* "unknown" would be better */
00043a  2000              MOVS     r0,#0
00043c  6120              STR      r0,[r4,#0x10]
;;;379      inputctl->pub.eoi_reached = FALSE;
00043e  6160              STR      r0,[r4,#0x14]
;;;380      inputctl->inheaders = TRUE;
000440  2001              MOVS     r0,#1
000442  61a0              STR      r0,[r4,#0x18]
;;;381    }
000444  bd70              POP      {r4-r6,pc}
                          ENDP

000446  0000              DCW      0x0000
                  |L1.1096|
                          DCD      consume_markers
                  |L1.1100|
                          DCD      reset_input_controller
                  |L1.1104|
                          DCD      start_input_pass
                  |L1.1108|
                          DCD      finish_input_pass
