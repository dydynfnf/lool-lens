; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\gui_errorout.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\gui_errorout.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -I.\GUI\AntiAlias -I.\GUI\Config -I.\GUI\ConvertColor -I.\GUI\ConvertMono -I.\GUI\Core -I.\GUI\Font -I.\GUI\GUI_X -I.\GUI\JPEG -I.\GUI\LCDDriver -I.\GUI\MemDev -I.\GUI\MultiLayer -I.\GUI\Widget -I.\GUI\WM -IC:\Users\Administrator\Desktop\gui\STM32·Ü¶·°å-3.98\RTE -Id:\Keil_v5\ARM\PACK\ARM\CMSIS\4.3.0\CMSIS\Include -Id:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.1.0\Device\Include -D__UVISION_VERSION=515 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\gui_errorout.crf GUI\Core\GUI_ErrorOut.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=1

                  _CopyString PROC
;;;43     */
;;;44     static void _CopyString(char*d, const char*s, int MaxLen) {
000000  e004              B        |L1.12|
                  |L1.2|
;;;45       while ((MaxLen > 0) && *s) {
;;;46         *d++ = *s++;
000002  f8113b01          LDRB     r3,[r1],#1
000006  f8003b01          STRB     r3,[r0],#1
;;;47         MaxLen--;
00000a  1e52              SUBS     r2,r2,#1
                  |L1.12|
00000c  2a00              CMP      r2,#0                 ;45
00000e  dd02              BLE      |L1.22|
000010  780b              LDRB     r3,[r1,#0]            ;45
000012  2b00              CMP      r3,#0                 ;45
000014  d1f5              BNE      |L1.2|
                  |L1.22|
;;;48       }
;;;49       *d = 0;
000016  2300              MOVS     r3,#0
000018  7003              STRB     r3,[r0,#0]
;;;50     }
00001a  4770              BX       lr
;;;51     
                          ENDP

                  GUI_ErrorOut PROC
;;;61     */
;;;62     void GUI_ErrorOut(const char *s) { GUI_X_ErrorOut(s); }
00001c  b510              PUSH     {r4,lr}
00001e  4604              MOV      r4,r0
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       GUI_X_ErrorOut
000026  bd10              POP      {r4,pc}
;;;63     
                          ENDP

                  GUI_ErrorOut1 PROC
;;;67     */
;;;68     void GUI_ErrorOut1(const char *s, int p0) {
000028  b530              PUSH     {r4,r5,lr}
00002a  b091              SUB      sp,sp,#0x44
00002c  4604              MOV      r4,r0
00002e  460d              MOV      r5,r1
;;;69       char ac[MAXLEN + 10];
;;;70       char* sOut = ac;
000030  a802              ADD      r0,sp,#8
000032  9001              STR      r0,[sp,#4]
;;;71       GUI_MEMSET((U8*)ac, 0, sizeof(ac));
000034  223c              MOVS     r2,#0x3c
000036  2100              MOVS     r1,#0
000038  f7fffffe          BL       GUI__memset
;;;72       _CopyString(ac, s, MAXLEN);
00003c  2232              MOVS     r2,#0x32
00003e  4621              MOV      r1,r4
000040  a802              ADD      r0,sp,#8
000042  f7fffffe          BL       _CopyString
;;;73       sOut += strlen(sOut);
000046  9801              LDR      r0,[sp,#4]
000048  f7fffffe          BL       strlen
00004c  9901              LDR      r1,[sp,#4]
00004e  4408              ADD      r0,r0,r1
000050  9001              STR      r0,[sp,#4]
;;;74       GUI__AddSpaceHex(p0, 8, &sOut);
000052  aa01              ADD      r2,sp,#4
000054  2108              MOVS     r1,#8
000056  4628              MOV      r0,r5
000058  f7fffffe          BL       GUI__AddSpaceHex
;;;75       GUI_ErrorOut(ac);
00005c  a802              ADD      r0,sp,#8
00005e  f7fffffe          BL       GUI_ErrorOut
;;;76     }
000062  b011              ADD      sp,sp,#0x44
000064  bd30              POP      {r4,r5,pc}
;;;77     
                          ENDP

                  GUI_ErrorOut2 PROC
;;;81     */
;;;82     void GUI_ErrorOut2(const char *s, int p0, int p1) {
000066  b570              PUSH     {r4-r6,lr}
000068  b094              SUB      sp,sp,#0x50
00006a  4604              MOV      r4,r0
00006c  460d              MOV      r5,r1
00006e  4616              MOV      r6,r2
;;;83       char ac[MAXLEN + 20];
;;;84       char* sOut = ac;
000070  a802              ADD      r0,sp,#8
000072  9001              STR      r0,[sp,#4]
;;;85       GUI_MEMSET((U8*)ac, 0, sizeof(ac));
000074  2246              MOVS     r2,#0x46
000076  2100              MOVS     r1,#0
000078  f7fffffe          BL       GUI__memset
;;;86       _CopyString(ac, s, MAXLEN);
00007c  2232              MOVS     r2,#0x32
00007e  4621              MOV      r1,r4
000080  a802              ADD      r0,sp,#8
000082  f7fffffe          BL       _CopyString
;;;87       sOut += strlen(sOut);
000086  9801              LDR      r0,[sp,#4]
000088  f7fffffe          BL       strlen
00008c  9901              LDR      r1,[sp,#4]
00008e  4408              ADD      r0,r0,r1
000090  9001              STR      r0,[sp,#4]
;;;88       GUI__AddSpaceHex(p0, 8, &sOut);
000092  aa01              ADD      r2,sp,#4
000094  2108              MOVS     r1,#8
000096  4628              MOV      r0,r5
000098  f7fffffe          BL       GUI__AddSpaceHex
;;;89       GUI__AddSpaceHex(p1, 8, &sOut);
00009c  aa01              ADD      r2,sp,#4
00009e  2108              MOVS     r1,#8
0000a0  4630              MOV      r0,r6
0000a2  f7fffffe          BL       GUI__AddSpaceHex
;;;90       GUI_ErrorOut(ac);
0000a6  a802              ADD      r0,sp,#8
0000a8  f7fffffe          BL       GUI_ErrorOut
;;;91     }
0000ac  b014              ADD      sp,sp,#0x50
0000ae  bd70              POP      {r4-r6,pc}
;;;92     
                          ENDP

                  GUI_ErrorOut3 PROC
;;;96     */
;;;97     void GUI_ErrorOut3(const char *s, int p0, int p1, int p2) {
0000b0  b5f0              PUSH     {r4-r7,lr}
0000b2  b095              SUB      sp,sp,#0x54
0000b4  4604              MOV      r4,r0
0000b6  460d              MOV      r5,r1
0000b8  4616              MOV      r6,r2
0000ba  461f              MOV      r7,r3
;;;98       char ac[MAXLEN + 30];
;;;99       char* sOut = ac;
0000bc  a801              ADD      r0,sp,#4
0000be  9000              STR      r0,[sp,#0]
;;;100      GUI_MEMSET((U8*)ac, 0, sizeof(ac));
0000c0  2250              MOVS     r2,#0x50
0000c2  2100              MOVS     r1,#0
0000c4  f7fffffe          BL       GUI__memset
;;;101      _CopyString(ac, s, MAXLEN);
0000c8  2232              MOVS     r2,#0x32
0000ca  4621              MOV      r1,r4
0000cc  a801              ADD      r0,sp,#4
0000ce  f7fffffe          BL       _CopyString
;;;102      sOut += strlen(sOut);
0000d2  9800              LDR      r0,[sp,#0]
0000d4  f7fffffe          BL       strlen
0000d8  9900              LDR      r1,[sp,#0]
0000da  4408              ADD      r0,r0,r1
0000dc  9000              STR      r0,[sp,#0]
;;;103      GUI__AddSpaceHex(p0, 8, &sOut);
0000de  466a              MOV      r2,sp
0000e0  2108              MOVS     r1,#8
0000e2  4628              MOV      r0,r5
0000e4  f7fffffe          BL       GUI__AddSpaceHex
;;;104      GUI__AddSpaceHex(p1, 8, &sOut);
0000e8  466a              MOV      r2,sp
0000ea  2108              MOVS     r1,#8
0000ec  4630              MOV      r0,r6
0000ee  f7fffffe          BL       GUI__AddSpaceHex
;;;105      GUI__AddSpaceHex(p2, 8, &sOut);
0000f2  466a              MOV      r2,sp
0000f4  2108              MOVS     r1,#8
0000f6  4638              MOV      r0,r7
0000f8  f7fffffe          BL       GUI__AddSpaceHex
;;;106      GUI_ErrorOut(ac);
0000fc  a801              ADD      r0,sp,#4
0000fe  f7fffffe          BL       GUI_ErrorOut
;;;107    }
000102  b015              ADD      sp,sp,#0x54
000104  bdf0              POP      {r4-r7,pc}
;;;108    
                          ENDP

                  GUI_ErrorOut4 PROC
;;;112    */
;;;113    void GUI_ErrorOut4(const char *s, int p0, int p1, int p2, int p3) {
000106  e92d41f0          PUSH     {r4-r8,lr}
00010a  b098              SUB      sp,sp,#0x60
00010c  4604              MOV      r4,r0
00010e  460d              MOV      r5,r1
000110  4616              MOV      r6,r2
000112  461f              MOV      r7,r3
000114  f8dd8078          LDR      r8,[sp,#0x78]
;;;114      char ac[MAXLEN + 40] = {0};
000118  215c              MOVS     r1,#0x5c
00011a  a801              ADD      r0,sp,#4
00011c  f7fffffe          BL       __aeabi_memclr4
;;;115      char* sOut = ac;
000120  a801              ADD      r0,sp,#4
000122  9000              STR      r0,[sp,#0]
;;;116      GUI_MEMSET((U8*)ac, 0, sizeof(ac));
000124  225a              MOVS     r2,#0x5a
000126  2100              MOVS     r1,#0
000128  f7fffffe          BL       GUI__memset
;;;117      _CopyString(ac, s, MAXLEN);
00012c  2232              MOVS     r2,#0x32
00012e  4621              MOV      r1,r4
000130  a801              ADD      r0,sp,#4
000132  f7fffffe          BL       _CopyString
;;;118      sOut += strlen(sOut);
000136  9800              LDR      r0,[sp,#0]
000138  f7fffffe          BL       strlen
00013c  9900              LDR      r1,[sp,#0]
00013e  4408              ADD      r0,r0,r1
000140  9000              STR      r0,[sp,#0]
;;;119      GUI__AddSpaceHex(p0, 8, &sOut);
000142  466a              MOV      r2,sp
000144  2108              MOVS     r1,#8
000146  4628              MOV      r0,r5
000148  f7fffffe          BL       GUI__AddSpaceHex
;;;120      GUI__AddSpaceHex(p1, 8, &sOut);
00014c  466a              MOV      r2,sp
00014e  2108              MOVS     r1,#8
000150  4630              MOV      r0,r6
000152  f7fffffe          BL       GUI__AddSpaceHex
;;;121      GUI__AddSpaceHex(p2, 8, &sOut);
000156  466a              MOV      r2,sp
000158  2108              MOVS     r1,#8
00015a  4638              MOV      r0,r7
00015c  f7fffffe          BL       GUI__AddSpaceHex
;;;122      GUI__AddSpaceHex(p3, 8, &sOut);
000160  466a              MOV      r2,sp
000162  2108              MOVS     r1,#8
000164  4640              MOV      r0,r8
000166  f7fffffe          BL       GUI__AddSpaceHex
;;;123      GUI_ErrorOut(ac);
00016a  a801              ADD      r0,sp,#4
00016c  f7fffffe          BL       GUI_ErrorOut
;;;124    }
000170  b018              ADD      sp,sp,#0x60
000172  e8bd81f0          POP      {r4-r8,pc}
;;;125    
                          ENDP

