; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\gui_mouse_driverps2.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\gui_mouse_driverps2.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -I.\GUI\AntiAlias -I.\GUI\Config -I.\GUI\ConvertColor -I.\GUI\ConvertMono -I.\GUI\Core -I.\GUI\Font -I.\GUI\GUI_X -I.\GUI\JPEG -I.\GUI\LCDDriver -I.\GUI\MemDev -I.\GUI\MultiLayer -I.\GUI\Widget -I.\GUI\WM -IC:\Users\Administrator\Desktop\gui\STM32·Ü¶·°å-3.98\RTE -Id:\Keil_v5\ARM\PACK\ARM\CMSIS\4.3.0\CMSIS\Include -Id:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.1.0\Device\Include -D__UVISION_VERSION=515 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\gui_mouse_driverps2.crf GUI\Core\GUI_MOUSE_DriverPS2.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _EvaPacket PROC
;;;57     */
;;;58     static void _EvaPacket(void) {
000000  b53e              PUSH     {r1-r5,lr}
;;;59       char a;
;;;60       GUI_PID_STATE State;
;;;61       _Buttons = _abInBuffer[0] & 0x03;
000002  4841              LDR      r0,|L1.264|
000004  7800              LDRB     r0,[r0,#0]  ; _abInBuffer
000006  f0000003          AND      r0,r0,#3
00000a  4940              LDR      r1,|L1.268|
00000c  7008              STRB     r0,[r1,#0]
;;;62       a = _abInBuffer[1];
00000e  483e              LDR      r0,|L1.264|
000010  7844              LDRB     r4,[r0,#1]  ; _abInBuffer
;;;63       /* test x move sign. */
;;;64       if(_abInBuffer[0] & 0x10) {
000012  7800              LDRB     r0,[r0,#0]  ; _abInBuffer
000014  f0000010          AND      r0,r0,#0x10
000018  b138              CBZ      r0,|L1.42|
;;;65         a=-a;
00001a  4260              RSBS     r0,r4,#0
00001c  b2c4              UXTB     r4,r0
;;;66         _ScreenX  -= a;
00001e  483c              LDR      r0,|L1.272|
000020  6800              LDR      r0,[r0,#0]  ; _ScreenX
000022  1b00              SUBS     r0,r0,r4
000024  493a              LDR      r1,|L1.272|
000026  6008              STR      r0,[r1,#0]  ; _ScreenX
000028  e004              B        |L1.52|
                  |L1.42|
;;;67       }        /* direction is negative, move left */
;;;68       else {
;;;69         _ScreenX  += a;
00002a  4839              LDR      r0,|L1.272|
00002c  6800              LDR      r0,[r0,#0]  ; _ScreenX
00002e  4420              ADD      r0,r0,r4
000030  4937              LDR      r1,|L1.272|
000032  6008              STR      r0,[r1,#0]  ; _ScreenX
                  |L1.52|
;;;70       }
;;;71       a = _abInBuffer[2];
000034  4834              LDR      r0,|L1.264|
000036  7884              LDRB     r4,[r0,#2]  ; _abInBuffer
;;;72       /* test y move sign. */
;;;73       if(_abInBuffer[0] & 0x20) {
000038  7800              LDRB     r0,[r0,#0]  ; _abInBuffer
00003a  f0000020          AND      r0,r0,#0x20
00003e  b138              CBZ      r0,|L1.80|
;;;74         a=-a;
000040  4260              RSBS     r0,r4,#0
000042  b2c4              UXTB     r4,r0
;;;75         _ScreenY  += a;
000044  4833              LDR      r0,|L1.276|
000046  6800              LDR      r0,[r0,#0]  ; _ScreenY
000048  4420              ADD      r0,r0,r4
00004a  4932              LDR      r1,|L1.276|
00004c  6008              STR      r0,[r1,#0]  ; _ScreenY
00004e  e004              B        |L1.90|
                  |L1.80|
;;;76       }  /* direction is negative, move down */ else {
;;;77         _ScreenY  -= a;
000050  4830              LDR      r0,|L1.276|
000052  6800              LDR      r0,[r0,#0]  ; _ScreenY
000054  1b00              SUBS     r0,r0,r4
000056  492f              LDR      r1,|L1.276|
000058  6008              STR      r0,[r1,#0]  ; _ScreenY
                  |L1.90|
;;;78       }
;;;79       /* check min/max positions */    
;;;80       if (_ScreenX < 0) {
00005a  482d              LDR      r0,|L1.272|
00005c  6800              LDR      r0,[r0,#0]  ; _ScreenX
00005e  2800              CMP      r0,#0
000060  da03              BGE      |L1.106|
;;;81         _ScreenX = 0;
000062  2000              MOVS     r0,#0
000064  492a              LDR      r1,|L1.272|
000066  6008              STR      r0,[r1,#0]  ; _ScreenX
000068  e008              B        |L1.124|
                  |L1.106|
;;;82       } else if (_ScreenX > LCD_XSIZE-1) {
00006a  4829              LDR      r0,|L1.272|
00006c  6800              LDR      r0,[r0,#0]  ; _ScreenX
00006e  f5b07fa0          CMP      r0,#0x140
000072  db03              BLT      |L1.124|
;;;83         _ScreenX = LCD_XSIZE-1;
000074  f240103f          MOV      r0,#0x13f
000078  4925              LDR      r1,|L1.272|
00007a  6008              STR      r0,[r1,#0]  ; _ScreenX
                  |L1.124|
;;;84       } if (_ScreenY < 0) {
00007c  4825              LDR      r0,|L1.276|
00007e  6800              LDR      r0,[r0,#0]  ; _ScreenY
000080  2800              CMP      r0,#0
000082  da03              BGE      |L1.140|
;;;85         _ScreenY = 0;
000084  2000              MOVS     r0,#0
000086  4923              LDR      r1,|L1.276|
000088  6008              STR      r0,[r1,#0]  ; _ScreenY
00008a  e006              B        |L1.154|
                  |L1.140|
;;;86       } else if (_ScreenY > LCD_YSIZE-1) {
00008c  4821              LDR      r0,|L1.276|
00008e  6800              LDR      r0,[r0,#0]  ; _ScreenY
000090  28ef              CMP      r0,#0xef
000092  dd02              BLE      |L1.154|
;;;87         _ScreenY = LCD_YSIZE-1;
000094  20ef              MOVS     r0,#0xef
000096  491f              LDR      r1,|L1.276|
000098  6008              STR      r0,[r1,#0]  ; _ScreenY
                  |L1.154|
;;;88       }
;;;89       /* signal new mouse data */
;;;90       State.x       = _ScreenX;
00009a  481d              LDR      r0,|L1.272|
00009c  6800              LDR      r0,[r0,#0]  ; _ScreenX
00009e  9000              STR      r0,[sp,#0]
;;;91       State.y       = _ScreenY;
0000a0  481c              LDR      r0,|L1.276|
0000a2  6800              LDR      r0,[r0,#0]  ; _ScreenY
0000a4  9001              STR      r0,[sp,#4]
;;;92       State.Pressed = _Buttons;
0000a6  4819              LDR      r0,|L1.268|
0000a8  7800              LDRB     r0,[r0,#0]  ; _Buttons
0000aa  f88d0008          STRB     r0,[sp,#8]
;;;93       GUI_MOUSE_StoreState(&State);
0000ae  4668              MOV      r0,sp
0000b0  f7fffffe          BL       GUI_MOUSE_StoreState
;;;94     }
0000b4  bd3e              POP      {r1-r5,pc}
;;;95     
                          ENDP

                  GUI_MOUSE_DRIVER_PS2_OnRx PROC
;;;109    */
;;;110    void GUI_MOUSE_DRIVER_PS2_OnRx(unsigned char Data) {
0000b6  b510              PUSH     {r4,lr}
0000b8  4604              MOV      r4,r0
;;;111      if (!_NumBytesInBuffer) {
0000ba  4817              LDR      r0,|L1.280|
0000bc  6800              LDR      r0,[r0,#0]  ; _NumBytesInBuffer
0000be  b958              CBNZ     r0,|L1.216|
;;;112        /* check for start frame */
;;;113        if ((Data & 0x0c) == 0x08) {
0000c0  f004000c          AND      r0,r4,#0xc
0000c4  2808              CMP      r0,#8
0000c6  d119              BNE      |L1.252|
;;;114          _abInBuffer[0] = Data;
0000c8  480f              LDR      r0,|L1.264|
0000ca  7004              STRB     r4,[r0,#0]
;;;115          _NumBytesInBuffer++;
0000cc  4812              LDR      r0,|L1.280|
0000ce  6800              LDR      r0,[r0,#0]  ; _NumBytesInBuffer
0000d0  1c40              ADDS     r0,r0,#1
0000d2  4911              LDR      r1,|L1.280|
0000d4  6008              STR      r0,[r1,#0]  ; _NumBytesInBuffer
0000d6  e011              B        |L1.252|
                  |L1.216|
;;;116        }
;;;117      } else {
;;;118        _abInBuffer[_NumBytesInBuffer] = Data;
0000d8  480b              LDR      r0,|L1.264|
0000da  490f              LDR      r1,|L1.280|
0000dc  6809              LDR      r1,[r1,#0]  ; _NumBytesInBuffer
0000de  5444              STRB     r4,[r0,r1]
;;;119        _NumBytesInBuffer++;
0000e0  480d              LDR      r0,|L1.280|
0000e2  6800              LDR      r0,[r0,#0]  ; _NumBytesInBuffer
0000e4  1c40              ADDS     r0,r0,#1
0000e6  490c              LDR      r1,|L1.280|
0000e8  6008              STR      r0,[r1,#0]  ; _NumBytesInBuffer
;;;120        if (_NumBytesInBuffer >= 3) {
0000ea  4608              MOV      r0,r1
0000ec  6800              LDR      r0,[r0,#0]  ; _NumBytesInBuffer
0000ee  2803              CMP      r0,#3
0000f0  db04              BLT      |L1.252|
;;;121          _EvaPacket();
0000f2  f7fffffe          BL       _EvaPacket
;;;122          _NumBytesInBuffer = 0;
0000f6  2000              MOVS     r0,#0
0000f8  4907              LDR      r1,|L1.280|
0000fa  6008              STR      r0,[r1,#0]  ; _NumBytesInBuffer
                  |L1.252|
;;;123        }
;;;124      }
;;;125    }
0000fc  bd10              POP      {r4,pc}
;;;126    
                          ENDP

                  GUI_MOUSE_DRIVER_PS2_Init PROC
;;;130    */
;;;131    void GUI_MOUSE_DRIVER_PS2_Init(void) {
0000fe  2000              MOVS     r0,#0
;;;132      _NumBytesInBuffer = 0; 
000100  4905              LDR      r1,|L1.280|
000102  6008              STR      r0,[r1,#0]  ; _NumBytesInBuffer
;;;133    }
000104  4770              BX       lr
;;;134    
                          ENDP

000106  0000              DCW      0x0000
                  |L1.264|
                          DCD      _abInBuffer
                  |L1.268|
                          DCD      _Buttons
                  |L1.272|
                          DCD      _ScreenX
                  |L1.276|
                          DCD      _ScreenY
                  |L1.280|
                          DCD      _NumBytesInBuffer

                          AREA ||.data||, DATA, ALIGN=2

                  _ScreenX
                          DCD      0x00000000
                  _ScreenY
                          DCD      0x00000000
                  _NumBytesInBuffer
                          DCD      0x00000000
                  _Buttons
00000c  00                DCB      0x00
                  _abInBuffer
00000d  000000            DCB      0x00,0x00,0x00
