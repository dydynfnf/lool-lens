; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\guidev_measure.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\guidev_measure.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -I.\GUI\AntiAlias -I.\GUI\Config -I.\GUI\ConvertColor -I.\GUI\ConvertMono -I.\GUI\Core -I.\GUI\Font -I.\GUI\GUI_X -I.\GUI\JPEG -I.\GUI\LCDDriver -I.\GUI\MemDev -I.\GUI\MultiLayer -I.\GUI\Widget -I.\GUI\WM -IC:\Users\Administrator\Desktop\gui\STM32·Ü¶·°å-3.98\RTE -Id:\Keil_v5\ARM\PACK\ARM\CMSIS\4.3.0\CMSIS\Include -Id:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.1.0\Device\Include -D__UVISION_VERSION=515 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\guidev_measure.crf GUI\MemDev\GUIDEV_Measure.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _MarkPixel PROC
;;;69     */
;;;70     static void _MarkPixel(int x, int y) {
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;71       GUI_MEASDEV* pDev = (GUI_MEASDEV*)(GUI_MEMDEV_H2P(GUI_Context.hDevData));
000006  49dc              LDR      r1,|L1.888|
000008  f9b1004c          LDRSH    r0,[r1,#0x4c]  ; GUI_Context
00000c  f7fffffe          BL       GUI_ALLOC_h2p
000010  4604              MOV      r4,r0
;;;72       if (x < pDev->rUsed.x0)
000012  f9b40000          LDRSH    r0,[r4,#0]
000016  42a8              CMP      r0,r5
000018  dd01              BLE      |L1.30|
;;;73         pDev->rUsed.x0 = x;
00001a  b228              SXTH     r0,r5
00001c  8020              STRH     r0,[r4,#0]
                  |L1.30|
;;;74       if (x > pDev->rUsed.x1)
00001e  f9b40004          LDRSH    r0,[r4,#4]
000022  42a8              CMP      r0,r5
000024  da01              BGE      |L1.42|
;;;75         pDev->rUsed.x1 = x;
000026  b228              SXTH     r0,r5
000028  80a0              STRH     r0,[r4,#4]
                  |L1.42|
;;;76       if (y < pDev->rUsed.y0)
00002a  f9b40002          LDRSH    r0,[r4,#2]
00002e  42b0              CMP      r0,r6
000030  dd01              BLE      |L1.54|
;;;77         pDev->rUsed.y0 = y;
000032  b230              SXTH     r0,r6
000034  8060              STRH     r0,[r4,#2]
                  |L1.54|
;;;78       if (y > pDev->rUsed.y1)
000036  f9b40006          LDRSH    r0,[r4,#6]
00003a  42b0              CMP      r0,r6
00003c  da01              BGE      |L1.66|
;;;79         pDev->rUsed.y1 = y;
00003e  b230              SXTH     r0,r6
000040  80e0              STRH     r0,[r4,#6]
                  |L1.66|
;;;80     }
000042  bd70              POP      {r4-r6,pc}
;;;81     
                          ENDP

                  _MarkRect PROC
;;;85     */
;;;86     static void _MarkRect(int x0, int y0, int x1, int y1) {
000044  e92d41f0          PUSH     {r4-r8,lr}
000048  4606              MOV      r6,r0
00004a  4688              MOV      r8,r1
00004c  4617              MOV      r7,r2
00004e  461d              MOV      r5,r3
;;;87       GUI_MEASDEV* pDev = (GUI_MEASDEV*)(GUI_MEMDEV_H2P(GUI_Context.hDevData));
000050  49c9              LDR      r1,|L1.888|
000052  f9b1004c          LDRSH    r0,[r1,#0x4c]  ; GUI_Context
000056  f7fffffe          BL       GUI_ALLOC_h2p
00005a  4604              MOV      r4,r0
;;;88       if (x0 < pDev->rUsed.x0)
00005c  f9b40000          LDRSH    r0,[r4,#0]
000060  42b0              CMP      r0,r6
000062  dd01              BLE      |L1.104|
;;;89         pDev->rUsed.x0 = x0;
000064  b230              SXTH     r0,r6
000066  8020              STRH     r0,[r4,#0]
                  |L1.104|
;;;90       if (x1 > pDev->rUsed.x1)
000068  f9b40004          LDRSH    r0,[r4,#4]
00006c  42b8              CMP      r0,r7
00006e  da01              BGE      |L1.116|
;;;91         pDev->rUsed.x1 = x1;
000070  b238              SXTH     r0,r7
000072  80a0              STRH     r0,[r4,#4]
                  |L1.116|
;;;92       if (y1 < pDev->rUsed.y0)
000074  f9b40002          LDRSH    r0,[r4,#2]
000078  42a8              CMP      r0,r5
00007a  dd02              BLE      |L1.130|
;;;93         pDev->rUsed.y0 = y0;
00007c  fa0ff088          SXTH     r0,r8
000080  8060              STRH     r0,[r4,#2]
                  |L1.130|
;;;94       if (y1 > pDev->rUsed.y1)
000082  f9b40006          LDRSH    r0,[r4,#6]
000086  42a8              CMP      r0,r5
000088  da01              BGE      |L1.142|
;;;95         pDev->rUsed.y1 = y1;
00008a  b228              SXTH     r0,r5
00008c  80e0              STRH     r0,[r4,#6]
                  |L1.142|
;;;96     }
00008e  e8bd81f0          POP      {r4-r8,pc}
;;;97     
                          ENDP

                  _DrawBitmap PROC
;;;101    */
;;;102    static void _DrawBitmap(int x0, int y0, int xsize, int ysize,
000092  e92d5ff0          PUSH     {r4-r12,lr}
;;;103                           int BitsPerPixel, int BytesPerLine,
;;;104                           const U8 GUI_UNI_PTR * pData, int Diff,
;;;105                           const LCD_PIXELINDEX* pTrans)
;;;106    {
000096  4604              MOV      r4,r0
000098  460d              MOV      r5,r1
00009a  4616              MOV      r6,r2
00009c  461f              MOV      r7,r3
00009e  e9ddab0c          LDRD     r10,r11,[sp,#0x30]
0000a2  e9dd890a          LDRD     r8,r9,[sp,#0x28]
;;;107      GUI_USE_PARA(BitsPerPixel);
0000a6  bf00              NOP      
;;;108      GUI_USE_PARA(BytesPerLine);
0000a8  bf00              NOP      
;;;109      GUI_USE_PARA(pData);
0000aa  bf00              NOP      
;;;110      GUI_USE_PARA(Diff);
0000ac  bf00              NOP      
;;;111      GUI_USE_PARA(pTrans);
0000ae  980e              LDR      r0,[sp,#0x38]
0000b0  900e              STR      r0,[sp,#0x38]
;;;112      _MarkRect(x0, y0, x0 + xsize - 1, y0 + ysize - 1);
0000b2  19e8              ADDS     r0,r5,r7
0000b4  1e43              SUBS     r3,r0,#1
0000b6  19a0              ADDS     r0,r4,r6
0000b8  1e42              SUBS     r2,r0,#1
0000ba  4629              MOV      r1,r5
0000bc  4620              MOV      r0,r4
0000be  f7fffffe          BL       _MarkRect
;;;113    }
0000c2  e8bd9ff0          POP      {r4-r12,pc}
;;;114    
                          ENDP

                  _DrawHLine PROC
;;;118    */
;;;119    static void _DrawHLine(int x0, int y,  int x1) {
0000c6  b570              PUSH     {r4-r6,lr}
0000c8  4605              MOV      r5,r0
0000ca  460c              MOV      r4,r1
0000cc  4616              MOV      r6,r2
;;;120      _MarkRect(x0, y, x1, y);
0000ce  4623              MOV      r3,r4
0000d0  4632              MOV      r2,r6
0000d2  4621              MOV      r1,r4
0000d4  4628              MOV      r0,r5
0000d6  f7fffffe          BL       _MarkRect
;;;121    }
0000da  bd70              POP      {r4-r6,pc}
;;;122    
                          ENDP

                  _DrawVLine PROC
;;;126    */
;;;127    static void _DrawVLine(int x , int y0,  int y1) {
0000dc  b570              PUSH     {r4-r6,lr}
0000de  4604              MOV      r4,r0
0000e0  460e              MOV      r6,r1
0000e2  4615              MOV      r5,r2
;;;128      _MarkRect(x, y0, x, y1);
0000e4  462b              MOV      r3,r5
0000e6  4622              MOV      r2,r4
0000e8  4631              MOV      r1,r6
0000ea  4620              MOV      r0,r4
0000ec  f7fffffe          BL       _MarkRect
;;;129    }
0000f0  bd70              POP      {r4-r6,pc}
;;;130    
                          ENDP

                  _SetPixelIndex PROC
;;;134    */
;;;135    static void _SetPixelIndex(int x, int y, int Index) {
0000f2  b570              PUSH     {r4-r6,lr}
0000f4  4605              MOV      r5,r0
0000f6  460e              MOV      r6,r1
0000f8  4614              MOV      r4,r2
;;;136      GUI_USE_PARA(Index);
0000fa  bf00              NOP      
;;;137      _MarkPixel(x, y);
0000fc  4631              MOV      r1,r6
0000fe  4628              MOV      r0,r5
000100  f7fffffe          BL       _MarkPixel
;;;138    }
000104  bd70              POP      {r4-r6,pc}
;;;139    
                          ENDP

                  _XorPixel PROC
;;;143    */
;;;144    static void _XorPixel(int x, int y) {
000106  b570              PUSH     {r4-r6,lr}
000108  4604              MOV      r4,r0
00010a  460d              MOV      r5,r1
;;;145      _MarkPixel(x, y);
00010c  4629              MOV      r1,r5
00010e  4620              MOV      r0,r4
000110  f7fffffe          BL       _MarkPixel
;;;146    }
000114  bd70              POP      {r4-r6,pc}
;;;147    
                          ENDP

                  _GetPixelIndex PROC
;;;151    */
;;;152    static unsigned int _GetPixelIndex(int x, int y) { 
000116  4602              MOV      r2,r0
;;;153      GUI_USE_PARA(x);
000118  bf00              NOP      
;;;154      GUI_USE_PARA(y);
00011a  bf00              NOP      
;;;155      return 0;
00011c  2000              MOVS     r0,#0
;;;156    }
00011e  4770              BX       lr
;;;157    
                          ENDP

                  _FillRect PROC
;;;161    */
;;;162    static void _FillRect(int x0, int y0, int x1, int y1) {
000120  e92d41f0          PUSH     {r4-r8,lr}
000124  4604              MOV      r4,r0
000126  460d              MOV      r5,r1
000128  4616              MOV      r6,r2
00012a  461f              MOV      r7,r3
;;;163      _MarkRect(x0, y0, x1, y1);
00012c  463b              MOV      r3,r7
00012e  4632              MOV      r2,r6
000130  4629              MOV      r1,r5
000132  4620              MOV      r0,r4
000134  f7fffffe          BL       _MarkRect
;;;164    }
000138  e8bd81f0          POP      {r4-r8,pc}
;;;165    
                          ENDP

                  _GetRect PROC
;;;169    */
;;;170    static void _GetRect(LCD_RECT* pRect) {
00013c  498f              LDR      r1,|L1.892|
;;;171      pRect->x0 = pRect->y0 = -4095;
00013e  8041              STRH     r1,[r0,#2]
000140  8001              STRH     r1,[r0,#0]
;;;172      pRect->x1 = pRect->y1 =  4095;
000142  0d09              LSRS     r1,r1,#20
000144  80c1              STRH     r1,[r0,#6]
000146  8081              STRH     r1,[r0,#4]
;;;173    }
000148  4770              BX       lr
;;;174    
                          ENDP

                  _Color2Index PROC
;;;178    */
;;;179    static unsigned int _Color2Index(LCD_COLOR Color) {
00014a  b570              PUSH     {r4-r6,lr}
00014c  4604              MOV      r4,r0
;;;180      GUI_MEASDEV* pDev = GUI_MEASDEV_H2P(GUI_Context.hDevData);
00014e  498a              LDR      r1,|L1.888|
000150  f9b1004c          LDRSH    r0,[r1,#0x4c]  ; GUI_Context
000154  f7fffffe          BL       GUI_ALLOC_h2p
000158  4605              MOV      r5,r0
;;;181      return pDev->pfColor2Index(Color);
00015a  4620              MOV      r0,r4
00015c  68a9              LDR      r1,[r5,#8]
00015e  4788              BLX      r1
;;;182    }
000160  bd70              POP      {r4-r6,pc}
;;;183    
                          ENDP

                  _Index2Color PROC
;;;187    */
;;;188    static LCD_COLOR _Index2Color(int Index) {
000162  b570              PUSH     {r4-r6,lr}
000164  4604              MOV      r4,r0
;;;189      GUI_MEASDEV* pDev = GUI_MEASDEV_H2P(GUI_Context.hDevData);
000166  4984              LDR      r1,|L1.888|
000168  f9b1004c          LDRSH    r0,[r1,#0x4c]  ; GUI_Context
00016c  f7fffffe          BL       GUI_ALLOC_h2p
000170  4605              MOV      r5,r0
;;;190      return pDev->pfIndex2Color(Index);
000172  4620              MOV      r0,r4
000174  68e9              LDR      r1,[r5,#0xc]
000176  4788              BLX      r1
;;;191    }
000178  bd70              POP      {r4-r6,pc}
;;;192    
                          ENDP

                  _GetIndexMask PROC
;;;196    */
;;;197    static unsigned int _GetIndexMask(void) {
00017a  b510              PUSH     {r4,lr}
;;;198      GUI_MEASDEV* pDev = GUI_MEASDEV_H2P(GUI_Context.hDevData);
00017c  497e              LDR      r1,|L1.888|
00017e  f9b1004c          LDRSH    r0,[r1,#0x4c]  ; GUI_Context
000182  f7fffffe          BL       GUI_ALLOC_h2p
000186  4604              MOV      r4,r0
;;;199      return pDev->pfGetIndexMask();
000188  6920              LDR      r0,[r4,#0x10]
00018a  4780              BLX      r0
;;;200    }
00018c  bd10              POP      {r4,pc}
;;;201    
                          ENDP

                  _CalcPolyRect PROC
;;;205    */
;;;206    static void _CalcPolyRect(GUI_RECT *pr, const GUI_POINT* paPoint, int NumPoints) {
00018e  e92d43f0          PUSH     {r4-r9,lr}
000192  4614              MOV      r4,r2
;;;207      int i;
;;;208      int xMin, xMax, yMin, yMax;
;;;209      xMin = GUI_XMAX;
000194  f64078ff          MOV      r8,#0xfff
;;;210      yMin = GUI_YMAX;
000198  4647              MOV      r7,r8
;;;211      xMax = GUI_XMIN;
00019a  427e              RSBS     r6,r7,#0
;;;212      yMax = GUI_YMIN;
00019c  46b4              MOV      r12,r6
;;;213      for (i = 0; i  <NumPoints; i++) {
00019e  2500              MOVS     r5,#0
0001a0  e011              B        |L1.454|
                  |L1.418|
;;;214        int x = paPoint->x;
0001a2  f9b12000          LDRSH    r2,[r1,#0]
;;;215        int y = paPoint->y;
0001a6  f9b13002          LDRSH    r3,[r1,#2]
;;;216        if (xMin > x)
0001aa  4590              CMP      r8,r2
0001ac  dd00              BLE      |L1.432|
;;;217          xMin = x;
0001ae  4690              MOV      r8,r2
                  |L1.432|
;;;218        if (xMax < x)
0001b0  4296              CMP      r6,r2
0001b2  da00              BGE      |L1.438|
;;;219          xMax = x;
0001b4  4616              MOV      r6,r2
                  |L1.438|
;;;220        if (yMin > y)
0001b6  429f              CMP      r7,r3
0001b8  dd00              BLE      |L1.444|
;;;221          yMin = y;
0001ba  461f              MOV      r7,r3
                  |L1.444|
;;;222        if (yMax < y)
0001bc  459c              CMP      r12,r3
0001be  da00              BGE      |L1.450|
;;;223          yMax = y;
0001c0  469c              MOV      r12,r3
                  |L1.450|
;;;224        paPoint++;
0001c2  1d09              ADDS     r1,r1,#4
0001c4  1c6d              ADDS     r5,r5,#1              ;213
                  |L1.454|
0001c6  42a5              CMP      r5,r4                 ;213
0001c8  dbeb              BLT      |L1.418|
;;;225      }
;;;226      pr->x0 = xMin;
0001ca  fa0ff288          SXTH     r2,r8
0001ce  8002              STRH     r2,[r0,#0]
;;;227      pr->x1 = xMax;
0001d0  b232              SXTH     r2,r6
0001d2  8082              STRH     r2,[r0,#4]
;;;228      pr->y0 = yMin;
0001d4  b23a              SXTH     r2,r7
0001d6  8042              STRH     r2,[r0,#2]
;;;229      pr->y1 = yMax;
0001d8  fa0ff28c          SXTH     r2,r12
0001dc  80c2              STRH     r2,[r0,#6]
;;;230    }
0001de  e8bd83f0          POP      {r4-r9,pc}
;;;231    
                          ENDP

                  _FillPolygon PROC
;;;235    */
;;;236    static void _FillPolygon(const GUI_POINT* paPoint, int NumPoints, int x0, int y0) {
0001e2  e92d41fc          PUSH     {r2-r8,lr}
0001e6  4604              MOV      r4,r0
0001e8  460d              MOV      r5,r1
0001ea  4616              MOV      r6,r2
0001ec  461f              MOV      r7,r3
;;;237      GUI_RECT r;
;;;238      _CalcPolyRect(&r, paPoint, NumPoints);
0001ee  462a              MOV      r2,r5
0001f0  4621              MOV      r1,r4
0001f2  4668              MOV      r0,sp
0001f4  f7fffffe          BL       _CalcPolyRect
;;;239      GUI_MoveRect(&r, x0, y0);
0001f8  463a              MOV      r2,r7
0001fa  4631              MOV      r1,r6
0001fc  4668              MOV      r0,sp
0001fe  f7fffffe          BL       GUI_MoveRect
;;;240      _MarkRect(r.x0, r.y0, r.x1, r.y1);
000202  f9bd3006          LDRSH    r3,[sp,#6]
000206  f9bd2004          LDRSH    r2,[sp,#4]
00020a  f9bd1002          LDRSH    r1,[sp,#2]
00020e  f9bd0000          LDRSH    r0,[sp,#0]
000212  f7fffffe          BL       _MarkRect
;;;241    }
000216  e8bd81fc          POP      {r2-r8,pc}
;;;242    
                          ENDP

                  _FillPolygonAA PROC
;;;246    */
;;;247    static void _FillPolygonAA(const GUI_POINT* paPoint, int NumPoints, int x0, int y0) {
00021a  e92d41fc          PUSH     {r2-r8,lr}
00021e  4604              MOV      r4,r0
000220  460d              MOV      r5,r1
000222  4616              MOV      r6,r2
000224  461f              MOV      r7,r3
;;;248      #if GUI_SUPPORT_AA
;;;249        GUI_RECT r;
;;;250        _CalcPolyRect(&r, paPoint, NumPoints);
000226  462a              MOV      r2,r5
000228  4621              MOV      r1,r4
00022a  4668              MOV      r0,sp
00022c  f7fffffe          BL       _CalcPolyRect
;;;251        GUI_MoveRect(&r, x0, y0);
000230  463a              MOV      r2,r7
000232  4631              MOV      r1,r6
000234  4668              MOV      r0,sp
000236  f7fffffe          BL       GUI_MoveRect
;;;252        if (GUI_Context.AA_HiResEnable) {
00023a  484f              LDR      r0,|L1.888|
00023c  f890005d          LDRB     r0,[r0,#0x5d]  ; GUI_Context
000240  b388              CBZ      r0,|L1.678|
;;;253          r.x0 /= GUI_Context.AA_Factor;
000242  f9bd0000          LDRSH    r0,[sp,#0]
000246  494c              LDR      r1,|L1.888|
000248  f891105c          LDRB     r1,[r1,#0x5c]  ; GUI_Context
00024c  fb90f0f1          SDIV     r0,r0,r1
000250  b200              SXTH     r0,r0
000252  f8ad0000          STRH     r0,[sp,#0]
;;;254          r.y0 /= GUI_Context.AA_Factor;
000256  f9bd0002          LDRSH    r0,[sp,#2]
00025a  4947              LDR      r1,|L1.888|
00025c  f891105c          LDRB     r1,[r1,#0x5c]  ; GUI_Context
000260  fb90f0f1          SDIV     r0,r0,r1
000264  b200              SXTH     r0,r0
000266  f8ad0002          STRH     r0,[sp,#2]
;;;255          r.x1 = (r.x1 + GUI_Context.AA_Factor - 1) / GUI_Context.AA_Factor;
00026a  f9bd0004          LDRSH    r0,[sp,#4]
00026e  4942              LDR      r1,|L1.888|
000270  f891105c          LDRB     r1,[r1,#0x5c]  ; GUI_Context
000274  4408              ADD      r0,r0,r1
000276  1e40              SUBS     r0,r0,#1
000278  493f              LDR      r1,|L1.888|
00027a  f891105c          LDRB     r1,[r1,#0x5c]  ; GUI_Context
00027e  fb90f0f1          SDIV     r0,r0,r1
000282  b200              SXTH     r0,r0
000284  f8ad0004          STRH     r0,[sp,#4]
;;;256          r.y1 = (r.y1 + GUI_Context.AA_Factor - 1) / GUI_Context.AA_Factor;
000288  f9bd0006          LDRSH    r0,[sp,#6]
00028c  493a              LDR      r1,|L1.888|
00028e  f891105c          LDRB     r1,[r1,#0x5c]  ; GUI_Context
000292  4408              ADD      r0,r0,r1
000294  1e40              SUBS     r0,r0,#1
000296  4938              LDR      r1,|L1.888|
000298  f891105c          LDRB     r1,[r1,#0x5c]  ; GUI_Context
00029c  fb90f0f1          SDIV     r0,r0,r1
0002a0  b200              SXTH     r0,r0
0002a2  f8ad0006          STRH     r0,[sp,#6]
                  |L1.678|
;;;257        }
;;;258        _MarkRect(r.x0, r.y0, r.x1, r.y1);
0002a6  f9bd3006          LDRSH    r3,[sp,#6]
0002aa  f9bd2004          LDRSH    r2,[sp,#4]
0002ae  f9bd1002          LDRSH    r1,[sp,#2]
0002b2  f9bd0000          LDRSH    r0,[sp,#0]
0002b6  f7fffffe          BL       _MarkRect
;;;259      #else
;;;260        GUI_USE_PARA(paPoint);
;;;261        GUI_USE_PARA(NumPoints);
;;;262        GUI_USE_PARA(x0);
;;;263        GUI_USE_PARA(y0);
;;;264      #endif
;;;265    }
0002ba  e8bd81fc          POP      {r2-r8,pc}
;;;266    
                          ENDP

                  GUI_MEASDEV_Delete PROC
;;;300    */
;;;301    void GUI_MEASDEV_Delete(GUI_MEASDEV_Handle hMemDev) {
0002be  b510              PUSH     {r4,lr}
0002c0  4604              MOV      r4,r0
;;;302      /* Make sure memory device is not used */
;;;303      if ((GUI_Context.hDevData = hMemDev) != 0) {
0002c2  482d              LDR      r0,|L1.888|
0002c4  f8a0404c          STRH     r4,[r0,#0x4c]
0002c8  b10c              CBZ      r4,|L1.718|
;;;304    	  GUI_SelectLCD();
0002ca  f7fffffe          BL       GUI_SelectLCD
                  |L1.718|
;;;305      }
;;;306      GUI_ALLOC_Free(hMemDev);
0002ce  4620              MOV      r0,r4
0002d0  f7fffffe          BL       GUI_ALLOC_Free
;;;307    }
0002d4  bd10              POP      {r4,pc}
;;;308    
                          ENDP

                  GUI_MEASDEV_ClearRect PROC
;;;312    */
;;;313    void GUI_MEASDEV_ClearRect(GUI_MEASDEV_Handle hMemDev) {
0002d6  b570              PUSH     {r4-r6,lr}
0002d8  4605              MOV      r5,r0
;;;314      if (hMemDev) {
0002da  b165              CBZ      r5,|L1.758|
;;;315        GUI_MEASDEV* pDevData;
;;;316        GUI_LOCK();
;;;317        pDevData = (GUI_MEASDEV*)GUI_ALLOC_h2p(hMemDev);
0002dc  4628              MOV      r0,r5
0002de  f7fffffe          BL       GUI_ALLOC_h2p
0002e2  4604              MOV      r4,r0
;;;318        pDevData->rUsed.x0 = GUI_XMAX;
0002e4  f64070ff          MOV      r0,#0xfff
0002e8  8020              STRH     r0,[r4,#0]
;;;319        pDevData->rUsed.y0 = GUI_YMAX;
0002ea  8060              STRH     r0,[r4,#2]
;;;320        pDevData->rUsed.x1 = GUI_XMIN;
0002ec  f24f0001          MOV      r0,#0xf001
0002f0  80a0              STRH     r0,[r4,#4]
;;;321        pDevData->rUsed.y1 = GUI_YMIN;
0002f2  80e0              STRH     r0,[r4,#6]
;;;322        GUI_UNLOCK();
;;;323      } 
0002f4  bf00              NOP      
                  |L1.758|
;;;324    }
0002f6  bd70              POP      {r4-r6,pc}
;;;325    
                          ENDP

                  GUI_MEASDEV_Create PROC
;;;329    */
;;;330    GUI_MEASDEV_Handle GUI_MEASDEV_Create(void) {
0002f8  b570              PUSH     {r4-r6,lr}
;;;331      int MemSize;
;;;332      GUI_MEASDEV_Handle hMemDev;
;;;333      MemSize = sizeof(GUI_MEASDEV);
0002fa  2414              MOVS     r4,#0x14
;;;334      hMemDev = GUI_ALLOC_AllocZero(MemSize);
0002fc  4620              MOV      r0,r4
0002fe  f7fffffe          BL       GUI_ALLOC_AllocZero
000302  4605              MOV      r5,r0
;;;335      if (hMemDev) {
000304  b17d              CBZ      r5,|L1.806|
;;;336        GUI_MEASDEV* pDevData;
;;;337        GUI_LOCK();
;;;338        pDevData = (GUI_MEASDEV*)GUI_ALLOC_h2p(hMemDev);
000306  4628              MOV      r0,r5
000308  f7fffffe          BL       GUI_ALLOC_h2p
00030c  4606              MOV      r6,r0
;;;339        pDevData->pfColor2Index = GUI_Context.pDeviceAPI->pfColor2Index;    
00030e  481a              LDR      r0,|L1.888|
000310  6c80              LDR      r0,[r0,#0x48]  ; GUI_Context
000312  6800              LDR      r0,[r0,#0]
000314  60b0              STR      r0,[r6,#8]
;;;340        pDevData->pfIndex2Color = GUI_Context.pDeviceAPI->pfIndex2Color;
000316  4818              LDR      r0,|L1.888|
000318  6c80              LDR      r0,[r0,#0x48]  ; GUI_Context
00031a  6840              LDR      r0,[r0,#4]
00031c  60f0              STR      r0,[r6,#0xc]
;;;341        GUI_MEASDEV_ClearRect(hMemDev);
00031e  4628              MOV      r0,r5
000320  f7fffffe          BL       GUI_MEASDEV_ClearRect
;;;342        GUI_UNLOCK();
;;;343      } else {
000324  bf00              NOP      
                  |L1.806|
;;;344        GUI_DEBUG_WARN("GUI_MEASDEV_Create: Alloc failed");
;;;345      }
;;;346      return hMemDev;
000326  4628              MOV      r0,r5
;;;347    }
000328  bd70              POP      {r4-r6,pc}
;;;348    
                          ENDP

                  GUI_MEASDEV_Select PROC
;;;352    */
;;;353    void GUI_MEASDEV_Select(GUI_MEASDEV_Handle hMem) {
00032a  b510              PUSH     {r4,lr}
00032c  4604              MOV      r4,r0
;;;354      if (hMem == 0) {
00032e  b914              CBNZ     r4,|L1.822|
;;;355        GUI_SelectLCD();
000330  f7fffffe          BL       GUI_SelectLCD
000334  e00b              B        |L1.846|
                  |L1.822|
;;;356      } else {
;;;357        #if GUI_WINSUPPORT
;;;358          WM_Deactivate();
000336  f7fffffe          BL       WM_Deactivate
;;;359        #endif
;;;360        GUI_Context.hDevData     = hMem;
00033a  480f              LDR      r0,|L1.888|
00033c  f8a0404c          STRH     r4,[r0,#0x4c]
;;;361        GUI_Context.pDeviceAPI   = &_APIList;
000340  480f              LDR      r0,|L1.896|
000342  490d              LDR      r1,|L1.888|
000344  6488              STR      r0,[r1,#0x48]  ; GUI_Context
;;;362        GUI_Context.pClipRect_HL = NULL;
000346  2000              MOVS     r0,#0
000348  6148              STR      r0,[r1,#0x14]  ; GUI_Context
;;;363        LCD_SetClipRectMax();
00034a  f7fffffe          BL       LCD_SetClipRectMax
                  |L1.846|
;;;364      }
;;;365    }
00034e  bd10              POP      {r4,pc}
;;;366    
                          ENDP

                  GUI_MEASDEV_GetRect PROC
;;;370    */
;;;371    void GUI_MEASDEV_GetRect(GUI_MEASDEV_Handle hMem, GUI_RECT* pRect) {
000350  b570              PUSH     {r4-r6,lr}
000352  4606              MOV      r6,r0
000354  460c              MOV      r4,r1
;;;372      if (hMem) {
000356  b16e              CBZ      r6,|L1.884|
;;;373        GUI_MEASDEV* pDev;
;;;374        GUI_LOCK();
;;;375        pDev = (GUI_MEASDEV*)GUI_ALLOC_h2p(hMem);
000358  4630              MOV      r0,r6
00035a  f7fffffe          BL       GUI_ALLOC_h2p
00035e  4605              MOV      r5,r0
;;;376        if (pRect) {
000360  b13c              CBZ      r4,|L1.882|
;;;377          pRect->x0 = pDev->rUsed.x0;
000362  8828              LDRH     r0,[r5,#0]
000364  8020              STRH     r0,[r4,#0]
;;;378          pRect->y0 = pDev->rUsed.y0;
000366  8868              LDRH     r0,[r5,#2]
000368  8060              STRH     r0,[r4,#2]
;;;379          pRect->x1 = pDev->rUsed.x1;
00036a  88a8              LDRH     r0,[r5,#4]
00036c  80a0              STRH     r0,[r4,#4]
;;;380          pRect->y1 = pDev->rUsed.y1;
00036e  88e8              LDRH     r0,[r5,#6]
000370  80e0              STRH     r0,[r4,#6]
                  |L1.882|
;;;381        }
;;;382        GUI_UNLOCK();
;;;383      }
000372  bf00              NOP      
                  |L1.884|
;;;384    }
000374  bd70              POP      {r4-r6,pc}
;;;385    
                          ENDP

000376  0000              DCW      0x0000
                  |L1.888|
                          DCD      GUI_Context
                  |L1.892|
                          DCD      0xfffff001
                  |L1.896|
                          DCD      _APIList

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  _APIList
                          DCD      _Color2Index
                          DCD      _Index2Color
                          DCD      _GetIndexMask
                          DCD      _DrawBitmap
                          DCD      _DrawHLine
                          DCD      _DrawVLine
                          DCD      _FillRect
                          DCD      _GetPixelIndex
                          DCD      _GetRect
                          DCD      _SetPixelIndex
                          DCD      _XorPixel
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      _FillPolygon
                          DCD      _FillPolygonAA
                          DCD      0x00000000
                          DCD      0x00000000
