; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\gui_drawline.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\gui_drawline.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -I.\GUI\AntiAlias -I.\GUI\Config -I.\GUI\ConvertColor -I.\GUI\ConvertMono -I.\GUI\Core -I.\GUI\Font -I.\GUI\GUI_X -I.\GUI\JPEG -I.\GUI\LCDDriver -I.\GUI\MemDev -I.\GUI\MultiLayer -I.\GUI\Widget -I.\GUI\WM -IC:\Users\Administrator\Desktop\gui\STM32·Ü¶·°å-3.98\RTE -Id:\Keil_v5\ARM\PACK\ARM\CMSIS\4.3.0\CMSIS\Include -Id:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.1.0\Device\Include -D__UVISION_VERSION=515 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\gui_drawline.crf GUI\Core\GUI_DrawLine.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _SwapInt PROC
;;;42     */
;;;43     static void _SwapInt(int* pa, int* pb) {
000000  6802              LDR      r2,[r0,#0]
;;;44       int t;
;;;45       t = *pa;
;;;46       *pa = *pb;
000002  680b              LDR      r3,[r1,#0]
000004  6003              STR      r3,[r0,#0]
;;;47       *pb = t;
000006  600a              STR      r2,[r1,#0]
;;;48     }
000008  4770              BX       lr
;;;49     
                          ENDP

                  Abs PROC
;;;53     */
;;;54     static int Abs(int v) {
00000a  4601              MOV      r1,r0
;;;55       return ABS(v);
00000c  2900              CMP      r1,#0
00000e  dd01              BLE      |L1.20|
000010  4608              MOV      r0,r1
                  |L1.18|
;;;56     }
000012  4770              BX       lr
                  |L1.20|
000014  4248              RSBS     r0,r1,#0              ;55
000016  e7fc              B        |L1.18|
;;;57     
                          ENDP

                  GUI_sin PROC
;;;105    */
;;;106    int GUI_sin(int angle) {
000018  b570              PUSH     {r4-r6,lr}
00001a  4601              MOV      r1,r0
;;;107      char IsNeg =0;
00001c  2500              MOVS     r5,#0
;;;108      int i;
;;;109    	U16 Faktor;
;;;110      U32 t;
;;;111      angle &= ((1<<12)-1);  /* reduce to 0-360 degrees */
00001e  f3c1010b          UBFX     r1,r1,#0,#12
;;;112      if (angle> 2* GUI_90DEG) {
000022  f5b16f00          CMP      r1,#0x800
000026  dd02              BLE      |L1.46|
;;;113        angle -= 2* GUI_90DEG;
000028  f5a16100          SUB      r1,r1,#0x800
;;;114        IsNeg =1;
00002c  2501              MOVS     r5,#1
                  |L1.46|
;;;115      }
;;;116      if (angle> GUI_90DEG) {  /* between 90-180 */
00002e  f5b16f80          CMP      r1,#0x400
000032  dd01              BLE      |L1.56|
;;;117        angle = 2*GUI_90DEG-angle;   /* use sine symetry */
000034  f5c16100          RSB      r1,r1,#0x800
                  |L1.56|
;;;118      }
;;;119      /* Now angle is reduced to 0° <= <= 90° */
;;;120      i = angle>>6;
000038  118c              ASRS     r4,r1,#6
;;;121      {
;;;122        Faktor = (U16)((1<<6)-(angle&((1<<6)-1)));
00003a  f001003f          AND      r0,r1,#0x3f
00003e  f1c00240          RSB      r2,r0,#0x40
;;;123        t = aSin[i]*(U32)Faktor;
000042  48f8              LDR      r0,|L1.1060|
000044  f8300014          LDRH     r0,[r0,r4,LSL #1]
000048  fb00f302          MUL      r3,r0,r2
;;;124        if (Faktor !=(1<<6)) {
00004c  2a40              CMP      r2,#0x40
00004e  d007              BEQ      |L1.96|
;;;125          t += aSin[i+1]*((1<<6)-Faktor);
000050  4ef4              LDR      r6,|L1.1060|
000052  1c60              ADDS     r0,r4,#1
000054  f8360010          LDRH     r0,[r6,r0,LSL #1]
000058  f1c20640          RSB      r6,r2,#0x40
00005c  fb003306          MLA      r3,r0,r6,r3
                  |L1.96|
;;;126        }
;;;127    	}
;;;128      t = (t+(1<<5)) >>6;   /* divide,incl. rounding */
000060  f1030020          ADD      r0,r3,#0x20
000064  0983              LSRS     r3,r0,#6
;;;129      return (IsNeg) ? 0-t : t;
000066  b10d              CBZ      r5,|L1.108|
000068  4258              RSBS     r0,r3,#0
                  |L1.106|
;;;130    }
00006a  bd70              POP      {r4-r6,pc}
                  |L1.108|
00006c  4618              MOV      r0,r3                 ;129
00006e  e7fc              B        |L1.106|
;;;131    
                          ENDP

                  GUI_cos PROC
;;;135    */
;;;136    int GUI_cos(int angle) {
000070  b510              PUSH     {r4,lr}
000072  4604              MOV      r4,r0
;;;137      return GUI_sin(angle+GUI_90DEG);
000074  f5046080          ADD      r0,r4,#0x400
000078  f7fffffe          BL       GUI_sin
;;;138    }
00007c  bd10              POP      {r4,pc}
;;;139    
                          ENDP

                  _atan0_45 PROC
;;;171    */
;;;172    static int _atan0_45(int q) {
00007e  b530              PUSH     {r4,r5,lr}
000080  4601              MOV      r1,r0
;;;173      int r;
;;;174      int i, Faktor;
;;;175      /* Now angle is reduced to 0° <= <= 90° ==>  0 <= <= 256*/
;;;176      q >>=2;    /* make sure we do not exceed 16 bits in calculations */
000082  1089              ASRS     r1,r1,#2
;;;177      i = q>>4;
000084  110b              ASRS     r3,r1,#4
;;;178      Faktor = (1<<4)-(q&((1<<4)-1));
000086  f001040f          AND      r4,r1,#0xf
00008a  f1c40210          RSB      r2,r4,#0x10
;;;179      r = aTan[i]*Faktor;
00008e  4ce6              LDR      r4,|L1.1064|
000090  f9344013          LDRSH    r4,[r4,r3,LSL #1]
000094  fb04f002          MUL      r0,r4,r2
;;;180      if (Faktor !=(1<<4)) {
000098  2a10              CMP      r2,#0x10
00009a  d007              BEQ      |L1.172|
;;;181        r += aTan[i+1]*((1<<4)-Faktor);
00009c  4de2              LDR      r5,|L1.1064|
00009e  1c5c              ADDS     r4,r3,#1
0000a0  f9354014          LDRSH    r4,[r5,r4,LSL #1]
0000a4  f1c20510          RSB      r5,r2,#0x10
0000a8  fb040005          MLA      r0,r4,r5,r0
                  |L1.172|
;;;182      }
;;;183      r = (r+(1<<3))/(1<<4);   /* divide  incl. rounding */
0000ac  f1000408          ADD      r4,r0,#8
0000b0  17e5              ASRS     r5,r4,#31
0000b2  eb047515          ADD      r5,r4,r5,LSR #28
0000b6  1128              ASRS     r0,r5,#4
;;;184      return r;
;;;185    }
0000b8  bd30              POP      {r4,r5,pc}
;;;186    
                          ENDP

                  _atan2 PROC
;;;190    */
;;;191    static int _atan2(I32 x, I32 y) {
0000ba  e92d41f0          PUSH     {r4-r8,lr}
0000be  4605              MOV      r5,r0
0000c0  460c              MOV      r4,r1
;;;192      U8 q =0;
0000c2  2600              MOVS     r6,#0
;;;193      int angle;
;;;194    /* first make sure we are in angle between 0 and 45° */
;;;195      if (x<0) {
0000c4  2d00              CMP      r5,#0
0000c6  da01              BGE      |L1.204|
;;;196        q=1;
0000c8  2601              MOVS     r6,#1
;;;197        x=-x;
0000ca  426d              RSBS     r5,r5,#0
                  |L1.204|
;;;198      }
;;;199      if (y<0) {
0000cc  2c00              CMP      r4,#0
0000ce  da02              BGE      |L1.214|
;;;200        q |= (1<<1);
0000d0  f0460602          ORR      r6,r6,#2
;;;201        y=-y;
0000d4  4264              RSBS     r4,r4,#0
                  |L1.214|
;;;202      }
;;;203      if (y>x) {
0000d6  42ac              CMP      r4,r5
0000d8  dd05              BLE      |L1.230|
;;;204        int t = y;
0000da  4620              MOV      r0,r4
;;;205        y=x;
0000dc  462c              MOV      r4,r5
;;;206        x=t;
0000de  4605              MOV      r5,r0
;;;207        q |= (1<<2);
0000e0  f0460604          ORR      r6,r6,#4
;;;208      }
0000e4  bf00              NOP      
                  |L1.230|
;;;209      y <<=10;
0000e6  02a4              LSLS     r4,r4,#10
;;;210      y += (x/2);
0000e8  4628              MOV      r0,r5
0000ea  eb0571d0          ADD      r1,r5,r0,LSR #31
0000ee  eb040461          ADD      r4,r4,r1,ASR #1
;;;211      y /= x;
0000f2  fb94f4f5          SDIV     r4,r4,r5
;;;212      angle = _atan0_45(y);
0000f6  4620              MOV      r0,r4
0000f8  f7fffffe          BL       _atan0_45
0000fc  4607              MOV      r7,r0
;;;213      if (q&(1<<2)) { /* y/x reverse ? */
0000fe  f0060004          AND      r0,r6,#4
000102  b108              CBZ      r0,|L1.264|
;;;214        angle = GUI_90DEG-angle;
000104  f5c76780          RSB      r7,r7,#0x400
                  |L1.264|
;;;215      }
;;;216      if (q&1) {  /* xreverse ? */
000108  f0060001          AND      r0,r6,#1
00010c  b108              CBZ      r0,|L1.274|
;;;217        angle = GUI_180DEG-angle;
00010e  f5c76700          RSB      r7,r7,#0x800
                  |L1.274|
;;;218      }
;;;219      if (q&(1<<1)) { /* y-reverse ? */
000112  f0060002          AND      r0,r6,#2
000116  b108              CBZ      r0,|L1.284|
;;;220        angle = GUI_360DEG-angle;
000118  f5c75780          RSB      r7,r7,#0x1000
                  |L1.284|
;;;221      }
;;;222      return angle;
00011c  4638              MOV      r0,r7
;;;223    }
00011e  e8bd81f0          POP      {r4-r8,pc}
;;;224    
                          ENDP

                  _SetLineColor PROC
;;;228    */
;;;229    static int _SetLineColor(int i) {
000122  4601              MOV      r1,r0
;;;230      switch (GUI_Context.LineStyle) {
000124  48c1              LDR      r0,|L1.1068|
000126  7e80              LDRB     r0,[r0,#0x1a]  ; GUI_Context
000128  2801              CMP      r0,#1
00012a  d006              BEQ      |L1.314|
00012c  2802              CMP      r0,#2
00012e  d011              BEQ      |L1.340|
000130  2803              CMP      r0,#3
000132  d01c              BEQ      |L1.366|
000134  2804              CMP      r0,#4
000136  d142              BNE      |L1.446|
000138  e02a              B        |L1.400|
                  |L1.314|
;;;231      case GUI_LS_DASH:
;;;232        i = (i + 6) % 16;
00013a  1d88              ADDS     r0,r1,#6
00013c  17c2              ASRS     r2,r0,#31
00013e  eb007212          ADD      r2,r0,r2,LSR #28
000142  1112              ASRS     r2,r2,#4
000144  eba01102          SUB      r1,r0,r2,LSL #4
;;;233        return (i < 12);
000148  290c              CMP      r1,#0xc
00014a  da01              BGE      |L1.336|
00014c  2001              MOVS     r0,#1
                  |L1.334|
;;;234      case GUI_LS_DOT:
;;;235        i %= 4;
;;;236        return (i < 2);
;;;237      case GUI_LS_DASHDOT:
;;;238        i %= 20;
;;;239        if (i < 12) {
;;;240          return 1;
;;;241        } else if ((i >= 16) && (i < 18)) {
;;;242          return 1;
;;;243        }
;;;244        return 0;
;;;245      case GUI_LS_DASHDOTDOT:
;;;246        i %= 24;
;;;247        if (i < 12) {
;;;248          return 1;
;;;249        } else if ((i >= 16) && (i < 18)) {
;;;250          return 1;
;;;251        } else if ((i >= 20) && (i < 22)) {
;;;252          return 1;
;;;253        } else {
;;;254          return 0;
;;;255        }
;;;256      }
;;;257      return 0;
;;;258    }
00014e  4770              BX       lr
                  |L1.336|
000150  2000              MOVS     r0,#0                 ;233
000152  e7fc              B        |L1.334|
                  |L1.340|
000154  4608              MOV      r0,r1                 ;235
000156  17ca              ASRS     r2,r1,#31             ;235
000158  eb017292          ADD      r2,r1,r2,LSR #30      ;235
00015c  1092              ASRS     r2,r2,#2              ;235
00015e  eba10182          SUB      r1,r1,r2,LSL #2       ;235
000162  2902              CMP      r1,#2                 ;236
000164  da01              BGE      |L1.362|
000166  2001              MOVS     r0,#1                 ;236
000168  e7f1              B        |L1.334|
                  |L1.362|
00016a  2000              MOVS     r0,#0                 ;236
00016c  e7ef              B        |L1.334|
                  |L1.366|
00016e  2014              MOVS     r0,#0x14              ;238
000170  fb91f2f0          SDIV     r2,r1,r0              ;238
000174  fb001112          MLS      r1,r0,r2,r1           ;238
000178  290c              CMP      r1,#0xc               ;239
00017a  da01              BGE      |L1.384|
00017c  2001              MOVS     r0,#1                 ;240
00017e  e7e6              B        |L1.334|
                  |L1.384|
000180  2910              CMP      r1,#0x10              ;241
000182  db03              BLT      |L1.396|
000184  2912              CMP      r1,#0x12              ;241
000186  da01              BGE      |L1.396|
000188  2001              MOVS     r0,#1                 ;242
00018a  e7e0              B        |L1.334|
                  |L1.396|
00018c  2000              MOVS     r0,#0                 ;244
00018e  e7de              B        |L1.334|
                  |L1.400|
000190  2018              MOVS     r0,#0x18              ;246
000192  fb91f2f0          SDIV     r2,r1,r0              ;246
000196  fb001112          MLS      r1,r0,r2,r1           ;246
00019a  290c              CMP      r1,#0xc               ;247
00019c  da01              BGE      |L1.418|
00019e  2001              MOVS     r0,#1                 ;248
0001a0  e7d5              B        |L1.334|
                  |L1.418|
0001a2  2910              CMP      r1,#0x10              ;249
0001a4  db03              BLT      |L1.430|
0001a6  2912              CMP      r1,#0x12              ;249
0001a8  da01              BGE      |L1.430|
0001aa  2001              MOVS     r0,#1                 ;250
0001ac  e7cf              B        |L1.334|
                  |L1.430|
0001ae  2914              CMP      r1,#0x14              ;251
0001b0  db03              BLT      |L1.442|
0001b2  2916              CMP      r1,#0x16              ;251
0001b4  da01              BGE      |L1.442|
0001b6  2001              MOVS     r0,#1                 ;252
0001b8  e7c9              B        |L1.334|
                  |L1.442|
0001ba  2000              MOVS     r0,#0                 ;254
0001bc  e7c7              B        |L1.334|
                  |L1.446|
0001be  2000              MOVS     r0,#0                 ;257
0001c0  e7c5              B        |L1.334|
;;;259    
                          ENDP

                  _CalcOrto PROC
;;;263    */
;;;264    static void _CalcOrto(int xDiff, int yDiff, I32 r, int*px, int*py) {
0001c2  e92d5ff0          PUSH     {r4-r12,lr}
0001c6  4681              MOV      r9,r0
0001c8  468a              MOV      r10,r1
0001ca  4616              MOV      r6,r2
0001cc  461f              MOV      r7,r3
0001ce  f8ddb028          LDR      r11,[sp,#0x28]
;;;265      I32 x,y;
;;;266      int Angle = _atan2(xDiff, yDiff);
0001d2  4651              MOV      r1,r10
0001d4  4648              MOV      r0,r9
0001d6  f7fffffe          BL       _atan2
0001da  4680              MOV      r8,r0
;;;267      Angle+= GUI_90DEG;
0001dc  f5086880          ADD      r8,r8,#0x400
;;;268      x = ( r*(I32)GUI_cos(Angle));
0001e0  4640              MOV      r0,r8
0001e2  f7fffffe          BL       GUI_cos
0001e6  fb00f406          MUL      r4,r0,r6
;;;269      y = ( r*(I32)GUI_sin(Angle));
0001ea  4640              MOV      r0,r8
0001ec  f7fffffe          BL       GUI_sin
0001f0  fb00f506          MUL      r5,r0,r6
;;;270      x = (x<0) ? -((-x+512)>>10) : ((x+512)>>10);
0001f4  2c00              CMP      r4,#0
0001f6  da04              BGE      |L1.514|
0001f8  f5c47000          RSB      r0,r4,#0x200
0001fc  1280              ASRS     r0,r0,#10
0001fe  4240              RSBS     r0,r0,#0
000200  e002              B        |L1.520|
                  |L1.514|
000202  f5047000          ADD      r0,r4,#0x200
000206  1280              ASRS     r0,r0,#10
                  |L1.520|
000208  4604              MOV      r4,r0
;;;271      y = (y<0) ? -((-y+512)>>10) : ((y+512)>>10);
00020a  2d00              CMP      r5,#0
00020c  da04              BGE      |L1.536|
00020e  f5c57000          RSB      r0,r5,#0x200
000212  1280              ASRS     r0,r0,#10
000214  4240              RSBS     r0,r0,#0
000216  e002              B        |L1.542|
                  |L1.536|
000218  f5057000          ADD      r0,r5,#0x200
00021c  1280              ASRS     r0,r0,#10
                  |L1.542|
00021e  4605              MOV      r5,r0
;;;272      *px = x;
000220  603c              STR      r4,[r7,#0]
;;;273      *py = y;
000222  f8cb5000          STR      r5,[r11,#0]
;;;274    }
000226  e8bd9ff0          POP      {r4-r12,pc}
;;;275    
                          ENDP

                  _DrawLineEnd PROC
;;;279    */
;;;280    static void _DrawLineEnd(int x0, int y0) {
00022a  b570              PUSH     {r4-r6,lr}
00022c  4604              MOV      r4,r0
00022e  460d              MOV      r5,r1
;;;281      switch (GUI_Context.PenShape) {
000230  487e              LDR      r0,|L1.1068|
000232  7e40              LDRB     r0,[r0,#0x19]  ; GUI_Context
000234  b110              CBZ      r0,|L1.572|
000236  2801              CMP      r0,#1
000238  d106              BNE      |L1.584|
00023a  e004              B        |L1.582|
                  |L1.572|
;;;282      case GUI_PS_ROUND:
;;;283        GL_DrawPoint(x0,y0);
00023c  4629              MOV      r1,r5
00023e  4620              MOV      r0,r4
000240  f7fffffe          BL       GL_DrawPoint
;;;284        break;
000244  e000              B        |L1.584|
                  |L1.582|
;;;285      case GUI_PS_FLAT:
;;;286        break;
000246  bf00              NOP      
                  |L1.584|
000248  bf00              NOP                            ;284
;;;287      }
;;;288    }
00024a  bd70              POP      {r4-r6,pc}
;;;289    
                          ENDP

                  GL_DrawLine1Ex PROC
;;;299    */
;;;300    void GL_DrawLine1Ex(int x0, int y0, int x1, int y1, unsigned * pPixelCnt) {
00024c  e92d4fff          PUSH     {r0-r11,lr}
000250  b083              SUB      sp,sp,#0xc
000252  9d10              LDR      r5,[sp,#0x40]
;;;301      int xdiff = x1 - x0;
000254  9903              LDR      r1,[sp,#0xc]
000256  9805              LDR      r0,[sp,#0x14]
000258  1a40              SUBS     r0,r0,r1
00025a  9002              STR      r0,[sp,#8]
;;;302      int ydiff = y1 - y0;
00025c  9904              LDR      r1,[sp,#0x10]
00025e  9806              LDR      r0,[sp,#0x18]
000260  1a40              SUBS     r0,r0,r1
000262  9001              STR      r0,[sp,#4]
;;;303      int xdiffby2;
;;;304      int i;
;;;305      char XYSwapped = 0;
000264  f04f0a00          MOV      r10,#0
;;;306      int Dir;
;;;307      int PixelCnt = * pPixelCnt;
000268  f8d58000          LDR      r8,[r5,#0]
;;;308    /* check if no line */
;;;309      if (!(xdiff | ydiff)) {
00026c  e9dd1001          LDRD     r1,r0,[sp,#4]
000270  4308              ORRS     r0,r0,r1
000272  b930              CBNZ     r0,|L1.642|
;;;310        GL_DrawPoint(x0, y0);
000274  e9dd0103          LDRD     r0,r1,[sp,#0xc]
000278  f7fffffe          BL       GL_DrawPoint
                  |L1.636|
;;;311        return;
;;;312      }
;;;313    /* check if we swap x and y for calculation */
;;;314      if (Abs(xdiff) < Abs(ydiff)) {
;;;315        _SwapInt(&xdiff, &ydiff);
;;;316        _SwapInt(&x0, &y0);
;;;317        _SwapInt(&x1, &y1);
;;;318        XYSwapped = 1;
;;;319      }
;;;320    /* make sure line direction is positive */
;;;321      if (xdiff != Abs(xdiff)) {
;;;322        xdiff = -xdiff;
;;;323        ydiff = -ydiff;
;;;324        _SwapInt(&x0, &x1);
;;;325        _SwapInt(&y0, &y1);
;;;326        Dir = -1;
;;;327      } else {
;;;328        Dir = 1;
;;;329      }
;;;330    /* Draw horizontal or vertical line if possible */
;;;331      if (ydiff == 0) {
;;;332        if (XYSwapped) {
;;;333          if (GUI_Context.LineStyle == GUI_LS_SOLID) {
;;;334            LCD_DrawVLine(y0, x0, x1);
;;;335          } else {
;;;336            for (i = 0; i <= xdiff; i++) {
;;;337              if (!_SetLineColor(PixelCnt++)) {
;;;338                LCD_HL_DrawPixel(y0, x0 + i);
;;;339              }
;;;340            }
;;;341            *pPixelCnt = PixelCnt - 1;
;;;342          }
;;;343        } else {
;;;344          if (GUI_Context.LineStyle == GUI_LS_SOLID) {
;;;345            LCD_HL_DrawHLine(x0, y0, x1);
;;;346          } else {
;;;347            for (i = 0; i <= xdiff; i++) {
;;;348              if (!_SetLineColor(PixelCnt++)) {
;;;349                LCD_HL_DrawPixel(x0 + i, y0);
;;;350              }
;;;351            }
;;;352            *pPixelCnt = PixelCnt - 1;
;;;353          }
;;;354        }
;;;355        return;
;;;356      }
;;;357      xdiffby2 = xdiff / 2;
;;;358      if (ydiff < 0) {
;;;359        xdiffby2 = -xdiffby2;
;;;360      }
;;;361    /* Draw pixel by pixel solid*/
;;;362      if (GUI_Context.LineStyle == GUI_LS_SOLID) {
;;;363        for (i = 0; i <= xdiff; i++) {
;;;364          I32 l = ((I32)ydiff) * i + xdiffby2;
;;;365          int y = (ABS(l) < 32767) ? (y0 + ((int)l) / xdiff) : (y0 + l / xdiff);
;;;366          if (!XYSwapped) {
;;;367            LCD_HL_DrawPixel(x0+ i , y);
;;;368          } else {
;;;369            LCD_HL_DrawPixel(y, x0 + i);
;;;370          }
;;;371        }
;;;372    /* Draw pixel by pixel with fill style */
;;;373      } else {
;;;374        if (Dir < 0) {
;;;375          *pPixelCnt += xdiff;
;;;376        }
;;;377        for (i = 0; i <= xdiff; i++) {
;;;378          long l = ((long)ydiff) * i + xdiffby2;
;;;379          int y = (ABS(l) < 32767) ? (y0 + ((int)l) / xdiff) : (y0 + l / xdiff);
;;;380          if (!_SetLineColor((*pPixelCnt) += Dir)) {
;;;381            if (!XYSwapped) {
;;;382              LCD_HL_DrawPixel(x0 + i, y);
;;;383            } else {
;;;384              LCD_HL_DrawPixel(y, x0 + i);
;;;385            }
;;;386          }
;;;387        }
;;;388        if (Dir < 0) {
;;;389          *pPixelCnt += xdiff;
;;;390        }
;;;391        *pPixelCnt -= Dir;
;;;392      }
;;;393    }
00027c  b007              ADD      sp,sp,#0x1c
00027e  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.642|
000282  9802              LDR      r0,[sp,#8]            ;314
000284  f7fffffe          BL       Abs
000288  4681              MOV      r9,r0                 ;314
00028a  9801              LDR      r0,[sp,#4]            ;314
00028c  f7fffffe          BL       Abs
000290  4581              CMP      r9,r0                 ;314
000292  da0d              BGE      |L1.688|
000294  a901              ADD      r1,sp,#4              ;315
000296  a802              ADD      r0,sp,#8              ;315
000298  f7fffffe          BL       _SwapInt
00029c  a904              ADD      r1,sp,#0x10           ;316
00029e  a803              ADD      r0,sp,#0xc            ;316
0002a0  f7fffffe          BL       _SwapInt
0002a4  a906              ADD      r1,sp,#0x18           ;317
0002a6  a805              ADD      r0,sp,#0x14           ;317
0002a8  f7fffffe          BL       _SwapInt
0002ac  f04f0a01          MOV      r10,#1                ;318
                  |L1.688|
0002b0  9802              LDR      r0,[sp,#8]            ;321
0002b2  f7fffffe          BL       Abs
0002b6  9902              LDR      r1,[sp,#8]            ;321
0002b8  4288              CMP      r0,r1                 ;321
0002ba  d010              BEQ      |L1.734|
0002bc  9802              LDR      r0,[sp,#8]            ;322
0002be  4240              RSBS     r0,r0,#0              ;322
0002c0  9002              STR      r0,[sp,#8]            ;322
0002c2  9801              LDR      r0,[sp,#4]            ;323
0002c4  4240              RSBS     r0,r0,#0              ;323
0002c6  9001              STR      r0,[sp,#4]            ;323
0002c8  a905              ADD      r1,sp,#0x14           ;324
0002ca  a803              ADD      r0,sp,#0xc            ;324
0002cc  f7fffffe          BL       _SwapInt
0002d0  a906              ADD      r1,sp,#0x18           ;325
0002d2  a804              ADD      r0,sp,#0x10           ;325
0002d4  f7fffffe          BL       _SwapInt
0002d8  f04f36ff          MOV      r6,#0xffffffff        ;326
0002dc  e000              B        |L1.736|
                  |L1.734|
0002de  2601              MOVS     r6,#1                 ;328
                  |L1.736|
0002e0  9801              LDR      r0,[sp,#4]            ;331
0002e2  2800              CMP      r0,#0                 ;331
0002e4  d143              BNE      |L1.878|
0002e6  f1ba0f00          CMP      r10,#0                ;332
0002ea  d01f              BEQ      |L1.812|
0002ec  484f              LDR      r0,|L1.1068|
0002ee  7e80              LDRB     r0,[r0,#0x1a]         ;333  ; GUI_Context
0002f0  b928              CBNZ     r0,|L1.766|
0002f2  e9dd0204          LDRD     r0,r2,[sp,#0x10]      ;334
0002f6  9903              LDR      r1,[sp,#0xc]          ;334
0002f8  f7fffffe          BL       LCD_DrawVLine
0002fc  e036              B        |L1.876|
                  |L1.766|
0002fe  2400              MOVS     r4,#0                 ;336
000300  e00d              B        |L1.798|
                  |L1.770|
000302  4640              MOV      r0,r8                 ;337
000304  f1080801          ADD      r8,r8,#1              ;337
000308  f7fffffe          BL       _SetLineColor
00030c  b930              CBNZ     r0,|L1.796|
00030e  9803              LDR      r0,[sp,#0xc]          ;338
000310  1901              ADDS     r1,r0,r4              ;338
000312  4846              LDR      r0,|L1.1068|
000314  6d80              LDR      r0,[r0,#0x58]         ;338  ; GUI_Context
000316  6842              LDR      r2,[r0,#4]            ;338
000318  9804              LDR      r0,[sp,#0x10]         ;338
00031a  4790              BLX      r2                    ;338
                  |L1.796|
00031c  1c64              ADDS     r4,r4,#1              ;336
                  |L1.798|
00031e  9802              LDR      r0,[sp,#8]            ;336
000320  4284              CMP      r4,r0                 ;336
000322  ddee              BLE      |L1.770|
000324  f1a80001          SUB      r0,r8,#1              ;341
000328  6028              STR      r0,[r5,#0]            ;341
00032a  e01f              B        |L1.876|
                  |L1.812|
00032c  483f              LDR      r0,|L1.1068|
00032e  7e80              LDRB     r0,[r0,#0x1a]         ;344  ; GUI_Context
000330  b930              CBNZ     r0,|L1.832|
000332  483e              LDR      r0,|L1.1068|
000334  6d80              LDR      r0,[r0,#0x58]         ;345  ; GUI_Context
000336  6803              LDR      r3,[r0,#0]            ;345
000338  a803              ADD      r0,sp,#0xc            ;345
00033a  c807              LDM      r0,{r0-r2}            ;345
00033c  4798              BLX      r3                    ;345
00033e  e015              B        |L1.876|
                  |L1.832|
000340  2400              MOVS     r4,#0                 ;347
000342  e00d              B        |L1.864|
                  |L1.836|
000344  4640              MOV      r0,r8                 ;348
000346  f1080801          ADD      r8,r8,#1              ;348
00034a  f7fffffe          BL       _SetLineColor
00034e  b930              CBNZ     r0,|L1.862|
000350  9903              LDR      r1,[sp,#0xc]          ;349
000352  1908              ADDS     r0,r1,r4              ;349
000354  4935              LDR      r1,|L1.1068|
000356  6d89              LDR      r1,[r1,#0x58]         ;349  ; GUI_Context
000358  684a              LDR      r2,[r1,#4]            ;349
00035a  9904              LDR      r1,[sp,#0x10]         ;349
00035c  4790              BLX      r2                    ;349
                  |L1.862|
00035e  1c64              ADDS     r4,r4,#1              ;347
                  |L1.864|
000360  9802              LDR      r0,[sp,#8]            ;347
000362  4284              CMP      r4,r0                 ;347
000364  ddee              BLE      |L1.836|
000366  f1a80001          SUB      r0,r8,#1              ;352
00036a  6028              STR      r0,[r5,#0]            ;352
                  |L1.876|
00036c  e786              B        |L1.636|
                  |L1.878|
00036e  9802              LDR      r0,[sp,#8]            ;357
000370  eb0071d0          ADD      r1,r0,r0,LSR #31      ;357
000374  104f              ASRS     r7,r1,#1              ;357
000376  9801              LDR      r0,[sp,#4]            ;358
000378  2800              CMP      r0,#0                 ;358
00037a  da00              BGE      |L1.894|
00037c  427f              RSBS     r7,r7,#0              ;359
                  |L1.894|
00037e  482b              LDR      r0,|L1.1068|
000380  7e80              LDRB     r0,[r0,#0x1a]         ;362  ; GUI_Context
000382  bb90              CBNZ     r0,|L1.1002|
000384  2400              MOVS     r4,#0                 ;363
000386  e02c              B        |L1.994|
                  |L1.904|
000388  9801              LDR      r0,[sp,#4]            ;364
00038a  fb007904          MLA      r9,r0,r4,r7           ;364
00038e  f1b90f00          CMP      r9,#0                 ;365
000392  dd01              BLE      |L1.920|
000394  4648              MOV      r0,r9                 ;365
000396  e001              B        |L1.924|
                  |L1.920|
000398  f1c90000          RSB      r0,r9,#0              ;365
                  |L1.924|
00039c  f64771ff          MOV      r1,#0x7fff            ;365
0003a0  4288              CMP      r0,r1                 ;365
0003a2  da05              BGE      |L1.944|
0003a4  9802              LDR      r0,[sp,#8]            ;365
0003a6  fb99f0f0          SDIV     r0,r9,r0              ;365
0003aa  9904              LDR      r1,[sp,#0x10]         ;365
0003ac  4408              ADD      r0,r0,r1              ;365
0003ae  e004              B        |L1.954|
                  |L1.944|
0003b0  9802              LDR      r0,[sp,#8]            ;365
0003b2  fb99f0f0          SDIV     r0,r9,r0              ;365
0003b6  9904              LDR      r1,[sp,#0x10]         ;365
0003b8  4408              ADD      r0,r0,r1              ;365
                  |L1.954|
0003ba  4683              MOV      r11,r0                ;365
0003bc  f1ba0f00          CMP      r10,#0                ;366
0003c0  d107              BNE      |L1.978|
0003c2  9903              LDR      r1,[sp,#0xc]          ;367
0003c4  1908              ADDS     r0,r1,r4              ;367
0003c6  4919              LDR      r1,|L1.1068|
0003c8  6d89              LDR      r1,[r1,#0x58]         ;367  ; GUI_Context
0003ca  684a              LDR      r2,[r1,#4]            ;367
0003cc  4659              MOV      r1,r11                ;367
0003ce  4790              BLX      r2                    ;367
0003d0  e006              B        |L1.992|
                  |L1.978|
0003d2  9803              LDR      r0,[sp,#0xc]          ;369
0003d4  1901              ADDS     r1,r0,r4              ;369
0003d6  4815              LDR      r0,|L1.1068|
0003d8  6d80              LDR      r0,[r0,#0x58]         ;369  ; GUI_Context
0003da  6842              LDR      r2,[r0,#4]            ;369
0003dc  4658              MOV      r0,r11                ;369
0003de  4790              BLX      r2                    ;369
                  |L1.992|
0003e0  1c64              ADDS     r4,r4,#1              ;363
                  |L1.994|
0003e2  9802              LDR      r0,[sp,#8]            ;363
0003e4  4284              CMP      r4,r0                 ;363
0003e6  ddcf              BLE      |L1.904|
0003e8  e04e              B        |L1.1160|
                  |L1.1002|
0003ea  e7ff              B        |L1.1004|
                  |L1.1004|
0003ec  2e00              CMP      r6,#0                 ;374
0003ee  da03              BGE      |L1.1016|
0003f0  6828              LDR      r0,[r5,#0]            ;375
0003f2  9902              LDR      r1,[sp,#8]            ;375
0003f4  4408              ADD      r0,r0,r1              ;375
0003f6  6028              STR      r0,[r5,#0]            ;375
                  |L1.1016|
0003f8  2400              MOVS     r4,#0                 ;377
0003fa  e039              B        |L1.1136|
                  |L1.1020|
0003fc  9801              LDR      r0,[sp,#4]            ;378
0003fe  fb007904          MLA      r9,r0,r4,r7           ;378
000402  f1b90f00          CMP      r9,#0                 ;379
000406  dd01              BLE      |L1.1036|
000408  4648              MOV      r0,r9                 ;379
00040a  e001              B        |L1.1040|
                  |L1.1036|
00040c  f1c90000          RSB      r0,r9,#0              ;379
                  |L1.1040|
000410  f64771ff          MOV      r1,#0x7fff            ;379
000414  4288              CMP      r0,r1                 ;379
000416  da0b              BGE      |L1.1072|
000418  9802              LDR      r0,[sp,#8]            ;379
00041a  fb99f0f0          SDIV     r0,r9,r0              ;379
00041e  9904              LDR      r1,[sp,#0x10]         ;379
000420  4408              ADD      r0,r0,r1              ;379
000422  e00a              B        |L1.1082|
                  |L1.1060|
                          DCD      aSin
                  |L1.1064|
                          DCD      aTan
                  |L1.1068|
                          DCD      GUI_Context
                  |L1.1072|
000430  9802              LDR      r0,[sp,#8]            ;379
000432  fb99f0f0          SDIV     r0,r9,r0              ;379
000436  9904              LDR      r1,[sp,#0x10]         ;379
000438  4408              ADD      r0,r0,r1              ;379
                  |L1.1082|
00043a  4683              MOV      r11,r0                ;379
00043c  6829              LDR      r1,[r5,#0]            ;380
00043e  4431              ADD      r1,r1,r6              ;380
000440  4608              MOV      r0,r1                 ;380
000442  6029              STR      r1,[r5,#0]            ;380
000444  f7fffffe          BL       _SetLineColor
000448  b988              CBNZ     r0,|L1.1134|
00044a  f1ba0f00          CMP      r10,#0                ;381
00044e  d107              BNE      |L1.1120|
000450  9903              LDR      r1,[sp,#0xc]          ;382
000452  1908              ADDS     r0,r1,r4              ;382
000454  49ab              LDR      r1,|L1.1796|
000456  6d89              LDR      r1,[r1,#0x58]         ;382  ; GUI_Context
000458  684a              LDR      r2,[r1,#4]            ;382
00045a  4659              MOV      r1,r11                ;382
00045c  4790              BLX      r2                    ;382
00045e  e006              B        |L1.1134|
                  |L1.1120|
000460  9803              LDR      r0,[sp,#0xc]          ;384
000462  1901              ADDS     r1,r0,r4              ;384
000464  48a7              LDR      r0,|L1.1796|
000466  6d80              LDR      r0,[r0,#0x58]         ;384  ; GUI_Context
000468  6842              LDR      r2,[r0,#4]            ;384
00046a  4658              MOV      r0,r11                ;384
00046c  4790              BLX      r2                    ;384
                  |L1.1134|
00046e  1c64              ADDS     r4,r4,#1              ;377
                  |L1.1136|
000470  9802              LDR      r0,[sp,#8]            ;377
000472  4284              CMP      r4,r0                 ;377
000474  ddc2              BLE      |L1.1020|
000476  2e00              CMP      r6,#0                 ;388
000478  da03              BGE      |L1.1154|
00047a  6828              LDR      r0,[r5,#0]            ;389
00047c  9902              LDR      r1,[sp,#8]            ;389
00047e  4408              ADD      r0,r0,r1              ;389
000480  6028              STR      r0,[r5,#0]            ;389
                  |L1.1154|
000482  6828              LDR      r0,[r5,#0]            ;391
000484  1b80              SUBS     r0,r0,r6              ;391
000486  6028              STR      r0,[r5,#0]            ;391
                  |L1.1160|
000488  bf00              NOP      
00048a  e6f7              B        |L1.636|
;;;394    
                          ENDP

                  GL_DrawLine1 PROC
;;;398    */
;;;399    void GL_DrawLine1(int x0, int y0, int x1, int y1) {
00048c  e92d41fc          PUSH     {r2-r8,lr}
000490  4604              MOV      r4,r0
000492  460d              MOV      r5,r1
000494  4616              MOV      r6,r2
000496  461f              MOV      r7,r3
;;;400      unsigned PixelCnt;
;;;401      PixelCnt = 0;
000498  2000              MOVS     r0,#0
00049a  9001              STR      r0,[sp,#4]
;;;402      GL_DrawLine1Ex(x0, y0, x1, y1, &PixelCnt);
00049c  a801              ADD      r0,sp,#4
00049e  463b              MOV      r3,r7
0004a0  4632              MOV      r2,r6
0004a2  4629              MOV      r1,r5
0004a4  9000              STR      r0,[sp,#0]
0004a6  4620              MOV      r0,r4
0004a8  f7fffffe          BL       GL_DrawLine1Ex
;;;403    }
0004ac  e8bd81fc          POP      {r2-r8,pc}
;;;404    
                          ENDP

                  GL_DrawLineEx PROC
;;;408    */
;;;409    void GL_DrawLineEx(int x0, int y0, int x1, int y1, unsigned * pPixelCnt) {
0004b0  e92d4ff0          PUSH     {r4-r11,lr}
0004b4  b089              SUB      sp,sp,#0x24
0004b6  4606              MOV      r6,r0
0004b8  460f              MOV      r7,r1
0004ba  4614              MOV      r4,r2
0004bc  461d              MOV      r5,r3
;;;410      if (GUI_Context.PenSize ==1) {
0004be  4891              LDR      r0,|L1.1796|
0004c0  7e00              LDRB     r0,[r0,#0x18]  ; GUI_Context
0004c2  2801              CMP      r0,#1
0004c4  d108              BNE      |L1.1240|
;;;411        GL_DrawLine1Ex(x0,y0,x1,y1,pPixelCnt);
0004c6  9812              LDR      r0,[sp,#0x48]
0004c8  462b              MOV      r3,r5
0004ca  4622              MOV      r2,r4
0004cc  4639              MOV      r1,r7
0004ce  9000              STR      r0,[sp,#0]
0004d0  4630              MOV      r0,r6
0004d2  f7fffffe          BL       GL_DrawLine1Ex
0004d6  e07e              B        |L1.1494|
                  |L1.1240|
;;;412      } else {
;;;413        int xdiff, ydiff;
;;;414        xdiff = x0-x1;
0004d8  1b30              SUBS     r0,r6,r4
0004da  9008              STR      r0,[sp,#0x20]
;;;415        ydiff = y0-y1;
0004dc  1b78              SUBS     r0,r7,r5
0004de  9007              STR      r0,[sp,#0x1c]
;;;416        if (xdiff | ydiff) {
0004e0  e9dd1007          LDRD     r1,r0,[sp,#0x1c]
0004e4  4308              ORRS     r0,r0,r1
0004e6  2800              CMP      r0,#0
0004e8  d074              BEQ      |L1.1492|
;;;417          GUI_POINT Poly[4];
;;;418          int xOff, yOff;
;;;419          int xOffP, yOffP, xOffM, yOffM;
;;;420          _CalcOrto(x0-x1,y0-y1, (I32)(GUI_Context.PenSize-1), &xOff, &yOff);
0004ea  a801              ADD      r0,sp,#4
0004ec  4b85              LDR      r3,|L1.1796|
0004ee  9000              STR      r0,[sp,#0]
0004f0  7e1b              LDRB     r3,[r3,#0x18]  ; GUI_Context
0004f2  1e5a              SUBS     r2,r3,#1
0004f4  1b79              SUBS     r1,r7,r5
0004f6  1b30              SUBS     r0,r6,r4
0004f8  ab02              ADD      r3,sp,#8
0004fa  f7fffffe          BL       _CalcOrto
;;;421      /* Do rounding for offsets */
;;;422          if (xOff >0) {
0004fe  9802              LDR      r0,[sp,#8]
000500  2800              CMP      r0,#0
000502  dd0b              BLE      |L1.1308|
;;;423            xOffP = (xOff+1)/2;
000504  9902              LDR      r1,[sp,#8]
000506  1c48              ADDS     r0,r1,#1
000508  eb0071d0          ADD      r1,r0,r0,LSR #31
00050c  ea4f0861          ASR      r8,r1,#1
;;;424            xOffM =  xOff   /2;
000510  9802              LDR      r0,[sp,#8]
000512  eb0071d0          ADD      r1,r0,r0,LSR #31
000516  ea4f0a61          ASR      r10,r1,#1
00051a  e00a              B        |L1.1330|
                  |L1.1308|
;;;425          } else {
;;;426            xOffP =   xOff/2;
00051c  9802              LDR      r0,[sp,#8]
00051e  eb0071d0          ADD      r1,r0,r0,LSR #31
000522  ea4f0861          ASR      r8,r1,#1
;;;427            xOffM =  (xOff-1)   /2;
000526  9902              LDR      r1,[sp,#8]
000528  1e48              SUBS     r0,r1,#1
00052a  eb0071d0          ADD      r1,r0,r0,LSR #31
00052e  ea4f0a61          ASR      r10,r1,#1
                  |L1.1330|
;;;428          }
;;;429          if (yOff >0) {
000532  9801              LDR      r0,[sp,#4]
000534  2800              CMP      r0,#0
000536  dd0b              BLE      |L1.1360|
;;;430            yOffP = (yOff+1)/2;
000538  9901              LDR      r1,[sp,#4]
00053a  1c48              ADDS     r0,r1,#1
00053c  eb0071d0          ADD      r1,r0,r0,LSR #31
000540  ea4f0961          ASR      r9,r1,#1
;;;431            yOffM =  yOff   /2;
000544  9801              LDR      r0,[sp,#4]
000546  eb0071d0          ADD      r1,r0,r0,LSR #31
00054a  ea4f0b61          ASR      r11,r1,#1
00054e  e00a              B        |L1.1382|
                  |L1.1360|
;;;432          } else {
;;;433            yOffP =   yOff/2;
000550  9801              LDR      r0,[sp,#4]
000552  eb0071d0          ADD      r1,r0,r0,LSR #31
000556  ea4f0961          ASR      r9,r1,#1
;;;434            yOffM =  (yOff-1)   /2;
00055a  9901              LDR      r1,[sp,#4]
00055c  1e48              SUBS     r0,r1,#1
00055e  eb0071d0          ADD      r1,r0,r0,LSR #31
000562  ea4f0b61          ASR      r11,r1,#1
                  |L1.1382|
;;;435          }
;;;436          Poly[0].x = x0+xOffP;
000566  eb060008          ADD      r0,r6,r8
00056a  b200              SXTH     r0,r0
00056c  f8ad000c          STRH     r0,[sp,#0xc]
;;;437          Poly[0].y = y0+yOffP;
000570  eb070009          ADD      r0,r7,r9
000574  b200              SXTH     r0,r0
000576  f8ad000e          STRH     r0,[sp,#0xe]
;;;438          Poly[1].x = x0-xOffM;
00057a  eba6000a          SUB      r0,r6,r10
00057e  b200              SXTH     r0,r0
000580  f8ad0010          STRH     r0,[sp,#0x10]
;;;439          Poly[1].y = y0-yOffM;
000584  eba7000b          SUB      r0,r7,r11
000588  b201              SXTH     r1,r0
00058a  f8ad1012          STRH     r1,[sp,#0x12]
;;;440          Poly[2].x = x1-xOffM;
00058e  eba4000a          SUB      r0,r4,r10
000592  b200              SXTH     r0,r0
000594  f8ad0014          STRH     r0,[sp,#0x14]
;;;441          Poly[2].y = y1-yOffM;
000598  eba5000b          SUB      r0,r5,r11
00059c  b201              SXTH     r1,r0
00059e  f8ad1016          STRH     r1,[sp,#0x16]
;;;442          Poly[3].x = x1+xOffP;
0005a2  eb040008          ADD      r0,r4,r8
0005a6  b200              SXTH     r0,r0
0005a8  f8ad0018          STRH     r0,[sp,#0x18]
;;;443          Poly[3].y = y1+yOffP;
0005ac  eb050009          ADD      r0,r5,r9
0005b0  b201              SXTH     r1,r0
0005b2  f8ad101a          STRH     r1,[sp,#0x1a]
;;;444          GL_FillPolygon(&Poly[0], 4, 0,0);
0005b6  2300              MOVS     r3,#0
0005b8  461a              MOV      r2,r3
0005ba  2104              MOVS     r1,#4
0005bc  a803              ADD      r0,sp,#0xc
0005be  f7fffffe          BL       GL_FillPolygon
;;;445          _DrawLineEnd(x0,y0);
0005c2  4639              MOV      r1,r7
0005c4  4630              MOV      r0,r6
0005c6  f7fffffe          BL       _DrawLineEnd
;;;446          _DrawLineEnd(x1,y1);
0005ca  4629              MOV      r1,r5
0005cc  4620              MOV      r0,r4
0005ce  f7fffffe          BL       _DrawLineEnd
;;;447        }
0005d2  bf00              NOP      
                  |L1.1492|
;;;448      }
0005d4  bf00              NOP      
                  |L1.1494|
;;;449    }
0005d6  b009              ADD      sp,sp,#0x24
0005d8  e8bd8ff0          POP      {r4-r11,pc}
;;;450    
                          ENDP

                  GL_DrawLine PROC
;;;454    */
;;;455    void GL_DrawLine(int x0, int y0, int x1, int y1) {
0005dc  e92d41fc          PUSH     {r2-r8,lr}
0005e0  4604              MOV      r4,r0
0005e2  460d              MOV      r5,r1
0005e4  4616              MOV      r6,r2
0005e6  461f              MOV      r7,r3
;;;456      unsigned PixelCnt;
;;;457      PixelCnt = 0;
0005e8  2000              MOVS     r0,#0
0005ea  9001              STR      r0,[sp,#4]
;;;458      GL_DrawLineEx(x0, y0, x1, y1, &PixelCnt);
0005ec  a801              ADD      r0,sp,#4
0005ee  463b              MOV      r3,r7
0005f0  4632              MOV      r2,r6
0005f2  4629              MOV      r1,r5
0005f4  9000              STR      r0,[sp,#0]
0005f6  4620              MOV      r0,r4
0005f8  f7fffffe          BL       GL_DrawLineEx
;;;459    }
0005fc  e8bd81fc          POP      {r2-r8,pc}
;;;460    
                          ENDP

                  GUI_DrawLine PROC
;;;464    */
;;;465    void GUI_DrawLine(int x0, int y0, int x1, int y1) {
000600  e92d41f0          PUSH     {r4-r8,lr}
000604  4604              MOV      r4,r0
000606  460d              MOV      r5,r1
000608  4616              MOV      r6,r2
00060a  461f              MOV      r7,r3
;;;466      GUI_LOCK();
;;;467      #if (GUI_WINSUPPORT)
;;;468        WM_ADDORG(x0,y0);
00060c  483d              LDR      r0,|L1.1796|
00060e  6c00              LDR      r0,[r0,#0x40]  ; GUI_Context
000610  4404              ADD      r4,r4,r0
000612  483c              LDR      r0,|L1.1796|
000614  6c40              LDR      r0,[r0,#0x44]  ; GUI_Context
000616  4405              ADD      r5,r5,r0
;;;469        WM_ADDORG(x1,y1);
000618  483a              LDR      r0,|L1.1796|
00061a  6c00              LDR      r0,[r0,#0x40]  ; GUI_Context
00061c  4406              ADD      r6,r6,r0
00061e  4839              LDR      r0,|L1.1796|
000620  6c40              LDR      r0,[r0,#0x44]  ; GUI_Context
000622  4407              ADD      r7,r7,r0
;;;470        WM_ITERATE_START(NULL); {
000624  2000              MOVS     r0,#0
000626  f7fffffe          BL       WM__InitIVRSearch
00062a  b150              CBZ      r0,|L1.1602|
00062c  bf00              NOP      
                  |L1.1582|
;;;471      #endif
;;;472      GL_DrawLine (x0, y0, x1, y1);
00062e  463b              MOV      r3,r7
000630  4632              MOV      r2,r6
000632  4629              MOV      r1,r5
000634  4620              MOV      r0,r4
000636  f7fffffe          BL       GL_DrawLine
;;;473      #if (GUI_WINSUPPORT)
;;;474        } WM_ITERATE_END();
00063a  f7fffffe          BL       WM__GetNextIVR
00063e  2800              CMP      r0,#0
000640  d1f5              BNE      |L1.1582|
                  |L1.1602|
;;;475      #endif
;;;476      GUI_UNLOCK();
;;;477    }
000642  e8bd81f0          POP      {r4-r8,pc}
;;;478    
                          ENDP

                  GUI_DrawLineRel PROC
;;;488    */
;;;489    void GUI_DrawLineRel(int dx, int dy) {
000646  b570              PUSH     {r4-r6,lr}
000648  4604              MOV      r4,r0
00064a  460d              MOV      r5,r1
;;;490      GUI_LOCK();
;;;491      #if (GUI_WINSUPPORT)
;;;492        WM_ITERATE_START(NULL); {
00064c  2000              MOVS     r0,#0
00064e  f7fffffe          BL       WM__InitIVRSearch
000652  b198              CBZ      r0,|L1.1660|
000654  bf00              NOP      
                  |L1.1622|
;;;493      #endif
;;;494      GL_DrawLine (GUI_Context.DrawPosX,    GUI_Context.DrawPosY,
000656  4e2b              LDR      r6,|L1.1796|
000658  f9b66028          LDRSH    r6,[r6,#0x28]  ; GUI_Context
00065c  1973              ADDS     r3,r6,r5
00065e  4e29              LDR      r6,|L1.1796|
000660  f9b66026          LDRSH    r6,[r6,#0x26]  ; GUI_Context
000664  1932              ADDS     r2,r6,r4
000666  4e27              LDR      r6,|L1.1796|
000668  f9b61028          LDRSH    r1,[r6,#0x28]  ; GUI_Context
00066c  f9b60026          LDRSH    r0,[r6,#0x26]  ; GUI_Context
000670  f7fffffe          BL       GL_DrawLine
;;;495                   GUI_Context.DrawPosX+dx, GUI_Context.DrawPosY+dy);
;;;496      #if (GUI_WINSUPPORT)
;;;497        } WM_ITERATE_END();
000674  f7fffffe          BL       WM__GetNextIVR
000678  2800              CMP      r0,#0
00067a  d1ec              BNE      |L1.1622|
                  |L1.1660|
;;;498      #endif
;;;499      GUI_MoveRel(dx,dy);
00067c  4629              MOV      r1,r5
00067e  4620              MOV      r0,r4
000680  f7fffffe          BL       GUI_MoveRel
;;;500      GUI_UNLOCK();
;;;501    }
000684  bd70              POP      {r4-r6,pc}
;;;502    
                          ENDP

                  GL_DrawLineToEx PROC
;;;506    */
;;;507    void GL_DrawLineToEx(int x, int y, unsigned * pPixelCnt) {
000686  b5f8              PUSH     {r3-r7,lr}
000688  4604              MOV      r4,r0
00068a  460d              MOV      r5,r1
00068c  4616              MOV      r6,r2
;;;508      GL_DrawLineEx(GUI_Context.DrawPosX, GUI_Context.DrawPosY, x, y, pPixelCnt);
00068e  4a1d              LDR      r2,|L1.1796|
000690  9600              STR      r6,[sp,#0]
000692  f9b21028          LDRSH    r1,[r2,#0x28]  ; GUI_Context
000696  f9b20026          LDRSH    r0,[r2,#0x26]  ; GUI_Context
00069a  462b              MOV      r3,r5
00069c  4622              MOV      r2,r4
00069e  f7fffffe          BL       GL_DrawLineEx
;;;509      GUI_Context.DrawPosX = x;
0006a2  b220              SXTH     r0,r4
0006a4  4917              LDR      r1,|L1.1796|
0006a6  84c8              STRH     r0,[r1,#0x26]
;;;510      GUI_Context.DrawPosY = y;
0006a8  b228              SXTH     r0,r5
0006aa  8508              STRH     r0,[r1,#0x28]
;;;511    }
0006ac  bdf8              POP      {r3-r7,pc}
;;;512    
                          ENDP

                  GL_DrawLineTo PROC
;;;516    */
;;;517    void GL_DrawLineTo(int x, int y) {
0006ae  b538              PUSH     {r3-r5,lr}
0006b0  4604              MOV      r4,r0
0006b2  460d              MOV      r5,r1
;;;518      unsigned PixelCnt;
;;;519      PixelCnt = 0;
0006b4  2000              MOVS     r0,#0
0006b6  9000              STR      r0,[sp,#0]
;;;520      GL_DrawLineToEx(x, y, &PixelCnt);
0006b8  466a              MOV      r2,sp
0006ba  4629              MOV      r1,r5
0006bc  4620              MOV      r0,r4
0006be  f7fffffe          BL       GL_DrawLineToEx
;;;521    }
0006c2  bd38              POP      {r3-r5,pc}
;;;522    
                          ENDP

                  GUI_DrawLineTo PROC
;;;526    */
;;;527    void GUI_DrawLineTo(int x, int y) {
0006c4  b570              PUSH     {r4-r6,lr}
0006c6  4604              MOV      r4,r0
0006c8  460d              MOV      r5,r1
;;;528      GUI_LOCK();
;;;529      #if (GUI_WINSUPPORT)
;;;530        WM_ADDORG(x,y);
0006ca  480e              LDR      r0,|L1.1796|
0006cc  6c00              LDR      r0,[r0,#0x40]  ; GUI_Context
0006ce  4404              ADD      r4,r4,r0
0006d0  480c              LDR      r0,|L1.1796|
0006d2  6c40              LDR      r0,[r0,#0x44]  ; GUI_Context
0006d4  4405              ADD      r5,r5,r0
;;;531        WM_ITERATE_START(NULL); {
0006d6  2000              MOVS     r0,#0
0006d8  f7fffffe          BL       WM__InitIVRSearch
0006dc  b168              CBZ      r0,|L1.1786|
0006de  bf00              NOP      
                  |L1.1760|
;;;532      #endif
;;;533      GL_DrawLine (GUI_Context.DrawPosX, GUI_Context.DrawPosY, x, y);
0006e0  4a08              LDR      r2,|L1.1796|
0006e2  f9b21028          LDRSH    r1,[r2,#0x28]  ; GUI_Context
0006e6  f9b20026          LDRSH    r0,[r2,#0x26]  ; GUI_Context
0006ea  462b              MOV      r3,r5
0006ec  4622              MOV      r2,r4
0006ee  f7fffffe          BL       GL_DrawLine
;;;534      #if (GUI_WINSUPPORT)
;;;535        } WM_ITERATE_END();
0006f2  f7fffffe          BL       WM__GetNextIVR
0006f6  2800              CMP      r0,#0
0006f8  d1f2              BNE      |L1.1760|
                  |L1.1786|
;;;536      #endif
;;;537      GL_MoveTo(x,y);
0006fa  4629              MOV      r1,r5
0006fc  4620              MOV      r0,r4
0006fe  f7fffffe          BL       GL_MoveTo
;;;538      GUI_UNLOCK();
;;;539    }
000702  bd70              POP      {r4-r6,pc}
;;;540    
                          ENDP

                  |L1.1796|
                          DCD      GUI_Context

                          AREA ||.constdata||, DATA, READONLY, ALIGN=1

                  aSin
000000  00000064          DCW      0x0000,0x0064
000004  00c80129          DCW      0x00c8,0x0129
000008  018801e3          DCW      0x0188,0x01e3
00000c  0239028a          DCW      0x0239,0x028a
000010  02d40318          DCW      0x02d4,0x0318
000014  03530387          DCW      0x0353,0x0387
000018  03b203d4          DCW      0x03b2,0x03d4
00001c  03ec03fb          DCW      0x03ec,0x03fb
000020  0400              DCW      0x0400
                  aTan
000022  0000              DCW      0x0000
000024  00290051          DCW      0x0029,0x0051
000028  007900a0          DCW      0x0079,0x00a0
00002c  00c500ea          DCW      0x00c5,0x00ea
000030  010d012e          DCW      0x010d,0x012e
000034  014e016c          DCW      0x014e,0x016c
000038  018901a3          DCW      0x0189,0x01a3
00003c  01bd01d5          DCW      0x01bd,0x01d5
000040  01eb0200          DCW      0x01eb,0x0200
