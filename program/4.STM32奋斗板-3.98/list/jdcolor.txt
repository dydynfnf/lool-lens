; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\jdcolor.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\jdcolor.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -I.\GUI\AntiAlias -I.\GUI\Config -I.\GUI\ConvertColor -I.\GUI\ConvertMono -I.\GUI\Core -I.\GUI\Font -I.\GUI\GUI_X -I.\GUI\JPEG -I.\GUI\LCDDriver -I.\GUI\MemDev -I.\GUI\MultiLayer -I.\GUI\Widget -I.\GUI\WM -IC:\Users\Administrator\Desktop\gui\STM32·Ü¶·°å-3.98\RTE -Id:\Keil_v5\ARM\PACK\ARM\CMSIS\4.3.0\CMSIS\Include -Id:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.1.0\Device\Include -D__UVISION_VERSION=515 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\jdcolor.crf GUI\JPEG\jdcolor.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  build_ycc_rgb_table PROC
;;;69     LOCAL(void)
;;;70     build_ycc_rgb_table (j_decompress_ptr cinfo)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;71     {
000004  4605              MOV      r5,r0
;;;72       my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
000006  f8d541c8          LDR      r4,[r5,#0x1c8]
;;;73       int i;
;;;74       INT32 x;
;;;75       SHIFT_TEMPS
;;;76     
;;;77       cconvert->Cr_r_tab = (int *)
00000a  6868              LDR      r0,[r5,#4]
00000c  f44f6280          MOV      r2,#0x400
000010  2101              MOVS     r1,#1
000012  6803              LDR      r3,[r0,#0]
000014  4628              MOV      r0,r5
000016  4798              BLX      r3
000018  60a0              STR      r0,[r4,#8]
;;;78         (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
;;;79     				(MAXJSAMPLE+1) * SIZEOF(int));
;;;80       cconvert->Cb_b_tab = (int *)
00001a  6868              LDR      r0,[r5,#4]
00001c  f44f6280          MOV      r2,#0x400
000020  2101              MOVS     r1,#1
000022  6803              LDR      r3,[r0,#0]
000024  4628              MOV      r0,r5
000026  4798              BLX      r3
000028  60e0              STR      r0,[r4,#0xc]
;;;81         (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
;;;82     				(MAXJSAMPLE+1) * SIZEOF(int));
;;;83       cconvert->Cr_g_tab = (INT32 *)
00002a  6868              LDR      r0,[r5,#4]
00002c  f44f6280          MOV      r2,#0x400
000030  2101              MOVS     r1,#1
000032  6803              LDR      r3,[r0,#0]
000034  4628              MOV      r0,r5
000036  4798              BLX      r3
000038  6120              STR      r0,[r4,#0x10]
;;;84         (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
;;;85     				(MAXJSAMPLE+1) * SIZEOF(INT32));
;;;86       cconvert->Cb_g_tab = (INT32 *)
00003a  6868              LDR      r0,[r5,#4]
00003c  f44f6280          MOV      r2,#0x400
000040  2101              MOVS     r1,#1
000042  6803              LDR      r3,[r0,#0]
000044  4628              MOV      r0,r5
000046  4798              BLX      r3
000048  6160              STR      r0,[r4,#0x14]
;;;87         (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
;;;88     				(MAXJSAMPLE+1) * SIZEOF(INT32));
;;;89     
;;;90       for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
00004a  2600              MOVS     r6,#0
00004c  f06f077f          MVN      r7,#0x7f
000050  e020              B        |L1.148|
                  |L1.82|
;;;91         /* i is the actual input pixel value, in the range 0..MAXJSAMPLE */
;;;92         /* The Cb or Cr value we are thinking of is x = i - CENTERJSAMPLE */
;;;93         /* Cr=>R value is nearest int to 1.40200 * x */
;;;94         cconvert->Cr_r_tab[i] = (int)
000052  49fb              LDR      r1,|L1.1088|
000054  fb07f001          MUL      r0,r7,r1
000058  f5004000          ADD      r0,r0,#0x8000
00005c  1400              ASRS     r0,r0,#16
00005e  68a1              LDR      r1,[r4,#8]
000060  f8410026          STR      r0,[r1,r6,LSL #2]
;;;95     		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
;;;96         /* Cb=>B value is nearest int to 1.77200 * x */
;;;97         cconvert->Cb_b_tab[i] = (int)
000064  49f7              LDR      r1,|L1.1092|
000066  fb07f001          MUL      r0,r7,r1
00006a  f5004000          ADD      r0,r0,#0x8000
00006e  1400              ASRS     r0,r0,#16
000070  68e1              LDR      r1,[r4,#0xc]
000072  f8410026          STR      r0,[r1,r6,LSL #2]
;;;98     		    RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
;;;99         /* Cr=>G value is scaled-up -0.71414 * x */
;;;100        cconvert->Cr_g_tab[i] = (- FIX(0.71414)) * x;
000076  48f4              LDR      r0,|L1.1096|
000078  4378              MULS     r0,r7,r0
00007a  6921              LDR      r1,[r4,#0x10]
00007c  f8410026          STR      r0,[r1,r6,LSL #2]
;;;101        /* Cb=>G value is scaled-up -0.34414 * x */
;;;102        /* We also add in ONE_HALF so that need not do it in inner loop */
;;;103        cconvert->Cb_g_tab[i] = (- FIX(0.34414)) * x + ONE_HALF;
000080  49f2              LDR      r1,|L1.1100|
000082  fb07f001          MUL      r0,r7,r1
000086  f5004000          ADD      r0,r0,#0x8000
00008a  6961              LDR      r1,[r4,#0x14]
00008c  f8410026          STR      r0,[r1,r6,LSL #2]
000090  1c76              ADDS     r6,r6,#1              ;90
000092  1c7f              ADDS     r7,r7,#1              ;90
                  |L1.148|
000094  2eff              CMP      r6,#0xff              ;90
000096  dddc              BLE      |L1.82|
;;;104      }
;;;105    }
000098  e8bd81f0          POP      {r4-r8,pc}
;;;106    
                          ENDP

                  ycc_rgb_convert PROC
;;;119    METHODDEF(void)
;;;120    ycc_rgb_convert (j_decompress_ptr cinfo,
00009c  e92d4ff0          PUSH     {r4-r11,lr}
;;;121    		 JSAMPIMAGE input_buf, JDIMENSION input_row,
;;;122    		 JSAMPARRAY output_buf, int num_rows)
;;;123    {
0000a0  b087              SUB      sp,sp,#0x1c
0000a2  4604              MOV      r4,r0
0000a4  461f              MOV      r7,r3
;;;124      my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
0000a6  f8d431c8          LDR      r3,[r4,#0x1c8]
;;;125      register int y, cb, cr;
;;;126      register JSAMPROW outptr;
;;;127      register JSAMPROW inptr0, inptr1, inptr2;
;;;128      register JDIMENSION col;
;;;129      JDIMENSION num_cols = cinfo->output_width;
0000aa  f8d4b070          LDR      r11,[r4,#0x70]
0000ae  f8cdb010          STR      r11,[sp,#0x10]
;;;130      /* copy these pointers into registers if possible */
;;;131      register JSAMPLE * range_limit = cinfo->sample_range_limit;
0000b2  f8d49144          LDR      r9,[r4,#0x144]
;;;132      register int * Crrtab = cconvert->Cr_r_tab;
0000b6  f8d3b008          LDR      r11,[r3,#8]
0000ba  f8cdb00c          STR      r11,[sp,#0xc]
;;;133      register int * Cbbtab = cconvert->Cb_b_tab;
0000be  f8d3b00c          LDR      r11,[r3,#0xc]
0000c2  f8cdb008          STR      r11,[sp,#8]
;;;134      register INT32 * Crgtab = cconvert->Cr_g_tab;
0000c6  f8d3b010          LDR      r11,[r3,#0x10]
0000ca  f8cdb004          STR      r11,[sp,#4]
;;;135      register INT32 * Cbgtab = cconvert->Cb_g_tab;
0000ce  f8d3b014          LDR      r11,[r3,#0x14]
0000d2  f8cdb000          STR      r11,[sp,#0]
;;;136      SHIFT_TEMPS
;;;137    
;;;138      while (--num_rows >= 0) {
0000d6  e044              B        |L1.354|
                  |L1.216|
;;;139        inptr0 = input_buf[0][input_row];
0000d8  f8d1b000          LDR      r11,[r1,#0]
0000dc  f85ba022          LDR      r10,[r11,r2,LSL #2]
;;;140        inptr1 = input_buf[1][input_row];
0000e0  f8d1b004          LDR      r11,[r1,#4]
0000e4  f85bb022          LDR      r11,[r11,r2,LSL #2]
0000e8  f8cdb018          STR      r11,[sp,#0x18]
;;;141        inptr2 = input_buf[2][input_row];
0000ec  f8d1b008          LDR      r11,[r1,#8]
0000f0  f85bb022          LDR      r11,[r11,r2,LSL #2]
0000f4  f8cdb014          STR      r11,[sp,#0x14]
;;;142        input_row++;
0000f8  1c52              ADDS     r2,r2,#1
;;;143        outptr = *output_buf++;
0000fa  cf40              LDM      r7!,{r6}
;;;144        for (col = 0; col < num_cols; col++) {
0000fc  2000              MOVS     r0,#0
0000fe  e02c              B        |L1.346|
                  |L1.256|
;;;145          y  = GETJSAMPLE(inptr0[col]);
000100  f81a5000          LDRB     r5,[r10,r0]
;;;146          cb = GETJSAMPLE(inptr1[col]);
000104  f8ddb018          LDR      r11,[sp,#0x18]
000108  f81bc000          LDRB     r12,[r11,r0]
;;;147          cr = GETJSAMPLE(inptr2[col]);
00010c  f8ddb014          LDR      r11,[sp,#0x14]
000110  f81b8000          LDRB     r8,[r11,r0]
;;;148          /* Range-limiting is essential due to noise introduced by DCT losses. */
;;;149          outptr[RGB_RED] =   range_limit[y + Crrtab[cr]];
000114  f8ddb00c          LDR      r11,[sp,#0xc]
000118  f85bb028          LDR      r11,[r11,r8,LSL #2]
00011c  44ab              ADD      r11,r11,r5
00011e  f819b00b          LDRB     r11,[r9,r11]
000122  f886b000          STRB     r11,[r6,#0]
;;;150          outptr[RGB_GREEN] = range_limit[y +
000126  f8ddb000          LDR      r11,[sp,#0]
00012a  f85be02c          LDR      lr,[r11,r12,LSL #2]
00012e  f8ddb004          LDR      r11,[sp,#4]
000132  f85bb028          LDR      r11,[r11,r8,LSL #2]
000136  44f3              ADD      r11,r11,lr
000138  eb054b2b          ADD      r11,r5,r11,ASR #16
00013c  f819b00b          LDRB     r11,[r9,r11]
000140  f886b001          STRB     r11,[r6,#1]
;;;151    			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
;;;152    						 SCALEBITS))];
;;;153          outptr[RGB_BLUE] =  range_limit[y + Cbbtab[cb]];
000144  f8ddb008          LDR      r11,[sp,#8]
000148  f85bb02c          LDR      r11,[r11,r12,LSL #2]
00014c  44ab              ADD      r11,r11,r5
00014e  f819b00b          LDRB     r11,[r9,r11]
000152  f886b002          STRB     r11,[r6,#2]
;;;154          outptr += RGB_PIXELSIZE;
000156  1cf6              ADDS     r6,r6,#3
000158  1c40              ADDS     r0,r0,#1              ;144
                  |L1.346|
00015a  f8ddb010          LDR      r11,[sp,#0x10]        ;144
00015e  4558              CMP      r0,r11                ;144
000160  d3ce              BCC      |L1.256|
                  |L1.354|
000162  f8ddb040          LDR      r11,[sp,#0x40]        ;138
000166  f1ab0b01          SUB      r11,r11,#1            ;138
00016a  f8cdb040          STR      r11,[sp,#0x40]        ;138
00016e  f1bb0f00          CMP      r11,#0                ;138
000172  dab1              BGE      |L1.216|
;;;155        }
;;;156      }
;;;157    }
000174  b007              ADD      sp,sp,#0x1c
000176  e8bd8ff0          POP      {r4-r11,pc}
;;;158    
                          ENDP

                  null_convert PROC
;;;168    METHODDEF(void)
;;;169    null_convert (j_decompress_ptr cinfo,
00017a  e92d47f0          PUSH     {r4-r10,lr}
;;;170    	      JSAMPIMAGE input_buf, JDIMENSION input_row,
;;;171    	      JSAMPARRAY output_buf, int num_rows)
;;;172    {
00017e  4604              MOV      r4,r0
000180  f8dd8020          LDR      r8,[sp,#0x20]
;;;173      register JSAMPROW inptr, outptr;
;;;174      register JDIMENSION count;
;;;175      register int num_components = cinfo->num_components;
000184  f8d4c024          LDR      r12,[r4,#0x24]
;;;176      JDIMENSION num_cols = cinfo->output_width;
000188  f8d49070          LDR      r9,[r4,#0x70]
;;;177      int ci;
;;;178    
;;;179      while (--num_rows >= 0) {
00018c  e018              B        |L1.448|
                  |L1.398|
;;;180        for (ci = 0; ci < num_components; ci++) {
00018e  2000              MOVS     r0,#0
000190  e012              B        |L1.440|
                  |L1.402|
;;;181          inptr = input_buf[ci][input_row];
000192  f851a020          LDR      r10,[r1,r0,LSL #2]
000196  f85a6022          LDR      r6,[r10,r2,LSL #2]
;;;182          outptr = output_buf[0] + ci;
00019a  f8d3a000          LDR      r10,[r3,#0]
00019e  eb0a0700          ADD      r7,r10,r0
;;;183          for (count = num_cols; count > 0; count--) {
0001a2  464d              MOV      r5,r9
0001a4  e005              B        |L1.434|
                  |L1.422|
;;;184    	*outptr = *inptr++;	/* needn't bother with GETJSAMPLE() here */
0001a6  f816ab01          LDRB     r10,[r6],#1
0001aa  f887a000          STRB     r10,[r7,#0]
;;;185    	outptr += num_components;
0001ae  4467              ADD      r7,r7,r12
0001b0  1e6d              SUBS     r5,r5,#1              ;183
                  |L1.434|
0001b2  2d00              CMP      r5,#0                 ;183
0001b4  d1f7              BNE      |L1.422|
0001b6  1c40              ADDS     r0,r0,#1              ;180
                  |L1.440|
0001b8  4560              CMP      r0,r12                ;180
0001ba  dbea              BLT      |L1.402|
;;;186          }
;;;187        }
;;;188        input_row++;
0001bc  1c52              ADDS     r2,r2,#1
;;;189        output_buf++;
0001be  1d1b              ADDS     r3,r3,#4
                  |L1.448|
0001c0  f1a80a01          SUB      r10,r8,#1             ;179
0001c4  f1ba0800          SUBS     r8,r10,#0             ;179
0001c8  dae1              BGE      |L1.398|
;;;190      }
;;;191    }
0001ca  e8bd87f0          POP      {r4-r10,pc}
;;;192    
                          ENDP

                  grayscale_convert PROC
;;;200    METHODDEF(void)
;;;201    grayscale_convert (j_decompress_ptr cinfo,
0001ce  e92d41fc          PUSH     {r2-r8,lr}
;;;202    		   JSAMPIMAGE input_buf, JDIMENSION input_row,
;;;203    		   JSAMPARRAY output_buf, int num_rows)
;;;204    {
0001d2  4604              MOV      r4,r0
0001d4  460d              MOV      r5,r1
0001d6  4616              MOV      r6,r2
0001d8  461f              MOV      r7,r3
0001da  f8dd8020          LDR      r8,[sp,#0x20]
;;;205      jcopy_sample_rows(input_buf[0], (int) input_row, output_buf, 0,
0001de  6f20              LDR      r0,[r4,#0x70]
0001e0  e9cd8000          STRD     r8,r0,[sp,#0]
0001e4  2300              MOVS     r3,#0
0001e6  463a              MOV      r2,r7
0001e8  4631              MOV      r1,r6
0001ea  6828              LDR      r0,[r5,#0]
0001ec  f7fffffe          BL       jcopy_sample_rows
;;;206    		    num_rows, cinfo->output_width);
;;;207    }
0001f0  e8bd81fc          POP      {r2-r8,pc}
;;;208    
                          ENDP

                  gray_rgb_convert PROC
;;;216    METHODDEF(void)
;;;217    gray_rgb_convert (j_decompress_ptr cinfo,
0001f4  e92d47f0          PUSH     {r4-r10,lr}
;;;218    		  JSAMPIMAGE input_buf, JDIMENSION input_row,
;;;219    		  JSAMPARRAY output_buf, int num_rows)
;;;220    {
0001f8  4604              MOV      r4,r0
0001fa  460d              MOV      r5,r1
0001fc  9f08              LDR      r7,[sp,#0x20]
;;;221      register JSAMPROW inptr, outptr;
;;;222      register JDIMENSION col;
;;;223      JDIMENSION num_cols = cinfo->output_width;
0001fe  f8d4c070          LDR      r12,[r4,#0x70]
;;;224    
;;;225      while (--num_rows >= 0) {
000202  e014              B        |L1.558|
                  |L1.516|
;;;226        inptr = input_buf[0][input_row++];
000204  4690              MOV      r8,r2
000206  1c52              ADDS     r2,r2,#1
000208  f8d5a000          LDR      r10,[r5,#0]
00020c  f85a6028          LDR      r6,[r10,r8,LSL #2]
;;;227        outptr = *output_buf++;
000210  cb01              LDM      r3!,{r0}
;;;228        for (col = 0; col < num_cols; col++) {
000212  2100              MOVS     r1,#0
000214  e009              B        |L1.554|
                  |L1.534|
;;;229          /* We can dispense with GETJSAMPLE() here */
;;;230          outptr[RGB_RED] = outptr[RGB_GREEN] = outptr[RGB_BLUE] = inptr[col];
000216  f8168001          LDRB     r8,[r6,r1]
00021a  f8808002          STRB     r8,[r0,#2]
00021e  f8808001          STRB     r8,[r0,#1]
000222  f8808000          STRB     r8,[r0,#0]
;;;231          outptr += RGB_PIXELSIZE;
000226  1cc0              ADDS     r0,r0,#3
000228  1c49              ADDS     r1,r1,#1              ;228
                  |L1.554|
00022a  4561              CMP      r1,r12                ;228
00022c  d3f3              BCC      |L1.534|
                  |L1.558|
00022e  f1a70801          SUB      r8,r7,#1              ;225
000232  f1b80700          SUBS     r7,r8,#0              ;225
000236  dae5              BGE      |L1.516|
;;;232        }
;;;233      }
;;;234    }
000238  e8bd87f0          POP      {r4-r10,pc}
;;;235    
                          ENDP

                  ycck_cmyk_convert PROC
;;;244    METHODDEF(void)
;;;245    ycck_cmyk_convert (j_decompress_ptr cinfo,
00023c  e92d4ff0          PUSH     {r4-r11,lr}
;;;246    		   JSAMPIMAGE input_buf, JDIMENSION input_row,
;;;247    		   JSAMPARRAY output_buf, int num_rows)
;;;248    {
000240  b088              SUB      sp,sp,#0x20
000242  4604              MOV      r4,r0
000244  461f              MOV      r7,r3
;;;249      my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
000246  f8d451c8          LDR      r5,[r4,#0x1c8]
;;;250      register int y, cb, cr;
;;;251      register JSAMPROW outptr;
;;;252      register JSAMPROW inptr0, inptr1, inptr2, inptr3;
;;;253      register JDIMENSION col;
;;;254      JDIMENSION num_cols = cinfo->output_width;
00024a  f8d4b070          LDR      r11,[r4,#0x70]
00024e  f8cdb010          STR      r11,[sp,#0x10]
;;;255      /* copy these pointers into registers if possible */
;;;256      register JSAMPLE * range_limit = cinfo->sample_range_limit;
000252  f8d49144          LDR      r9,[r4,#0x144]
;;;257      register int * Crrtab = cconvert->Cr_r_tab;
000256  f8d5b008          LDR      r11,[r5,#8]
00025a  f8cdb00c          STR      r11,[sp,#0xc]
;;;258      register int * Cbbtab = cconvert->Cb_b_tab;
00025e  f8d5b00c          LDR      r11,[r5,#0xc]
000262  f8cdb008          STR      r11,[sp,#8]
;;;259      register INT32 * Crgtab = cconvert->Cr_g_tab;
000266  f8d5b010          LDR      r11,[r5,#0x10]
00026a  f8cdb004          STR      r11,[sp,#4]
;;;260      register INT32 * Cbgtab = cconvert->Cb_g_tab;
00026e  f8d5b014          LDR      r11,[r5,#0x14]
000272  f8cdb000          STR      r11,[sp,#0]
;;;261      SHIFT_TEMPS
;;;262    
;;;263      while (--num_rows >= 0) {
000276  e056              B        |L1.806|
                  |L1.632|
;;;264        inptr0 = input_buf[0][input_row];
000278  f8d1b000          LDR      r11,[r1,#0]
00027c  f85ba022          LDR      r10,[r11,r2,LSL #2]
;;;265        inptr1 = input_buf[1][input_row];
000280  f8d1b004          LDR      r11,[r1,#4]
000284  f85bb022          LDR      r11,[r11,r2,LSL #2]
000288  f8cdb01c          STR      r11,[sp,#0x1c]
;;;266        inptr2 = input_buf[2][input_row];
00028c  f8d1b008          LDR      r11,[r1,#8]
000290  f85bb022          LDR      r11,[r11,r2,LSL #2]
000294  f8cdb018          STR      r11,[sp,#0x18]
;;;267        inptr3 = input_buf[3][input_row];
000298  f8d1b00c          LDR      r11,[r1,#0xc]
00029c  f85bb022          LDR      r11,[r11,r2,LSL #2]
0002a0  f8cdb014          STR      r11,[sp,#0x14]
;;;268        input_row++;
0002a4  1c52              ADDS     r2,r2,#1
;;;269        outptr = *output_buf++;
0002a6  cf08              LDM      r7!,{r3}
;;;270        for (col = 0; col < num_cols; col++) {
0002a8  2000              MOVS     r0,#0
0002aa  e038              B        |L1.798|
                  |L1.684|
;;;271          y  = GETJSAMPLE(inptr0[col]);
0002ac  f81a6000          LDRB     r6,[r10,r0]
;;;272          cb = GETJSAMPLE(inptr1[col]);
0002b0  f8ddb01c          LDR      r11,[sp,#0x1c]
0002b4  f81bc000          LDRB     r12,[r11,r0]
;;;273          cr = GETJSAMPLE(inptr2[col]);
0002b8  f8ddb018          LDR      r11,[sp,#0x18]
0002bc  f81b8000          LDRB     r8,[r11,r0]
;;;274          /* Range-limiting is essential due to noise introduced by DCT losses. */
;;;275          outptr[0] = range_limit[MAXJSAMPLE - (y + Crrtab[cr])];	/* red */
0002c0  f8ddb00c          LDR      r11,[sp,#0xc]
0002c4  f85bb028          LDR      r11,[r11,r8,LSL #2]
0002c8  44b3              ADD      r11,r11,r6
0002ca  f1cb0bff          RSB      r11,r11,#0xff
0002ce  f819b00b          LDRB     r11,[r9,r11]
0002d2  f883b000          STRB     r11,[r3,#0]
;;;276          outptr[1] = range_limit[MAXJSAMPLE - (y +			/* green */
0002d6  f8ddb000          LDR      r11,[sp,#0]
0002da  f85be02c          LDR      lr,[r11,r12,LSL #2]
0002de  f8ddb004          LDR      r11,[sp,#4]
0002e2  f85bb028          LDR      r11,[r11,r8,LSL #2]
0002e6  44f3              ADD      r11,r11,lr
0002e8  eb064b2b          ADD      r11,r6,r11,ASR #16
0002ec  f1cb0bff          RSB      r11,r11,#0xff
0002f0  f819b00b          LDRB     r11,[r9,r11]
0002f4  f883b001          STRB     r11,[r3,#1]
;;;277    			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
;;;278    						 SCALEBITS)))];
;;;279          outptr[2] = range_limit[MAXJSAMPLE - (y + Cbbtab[cb])];	/* blue */
0002f8  f8ddb008          LDR      r11,[sp,#8]
0002fc  f85bb02c          LDR      r11,[r11,r12,LSL #2]
000300  44b3              ADD      r11,r11,r6
000302  f1cb0bff          RSB      r11,r11,#0xff
000306  f819b00b          LDRB     r11,[r9,r11]
00030a  f883b002          STRB     r11,[r3,#2]
;;;280          /* K passes through unchanged */
;;;281          outptr[3] = inptr3[col];	/* don't need GETJSAMPLE here */
00030e  f8ddb014          LDR      r11,[sp,#0x14]
000312  f81bb000          LDRB     r11,[r11,r0]
000316  f883b003          STRB     r11,[r3,#3]
;;;282          outptr += 4;
00031a  1d1b              ADDS     r3,r3,#4
00031c  1c40              ADDS     r0,r0,#1              ;270
                  |L1.798|
00031e  f8ddb010          LDR      r11,[sp,#0x10]        ;270
000322  4558              CMP      r0,r11                ;270
000324  d3c2              BCC      |L1.684|
                  |L1.806|
000326  f8ddb044          LDR      r11,[sp,#0x44]        ;263
00032a  f1ab0b01          SUB      r11,r11,#1            ;263
00032e  f8cdb044          STR      r11,[sp,#0x44]        ;263
000332  f1bb0f00          CMP      r11,#0                ;263
000336  da9f              BGE      |L1.632|
;;;283        }
;;;284      }
;;;285    }
000338  b008              ADD      sp,sp,#0x20
00033a  e8bd8ff0          POP      {r4-r11,pc}
;;;286    
                          ENDP

                  start_pass_dcolor PROC
;;;292    METHODDEF(void)
;;;293    start_pass_dcolor (j_decompress_ptr cinfo)
00033e  bf00              NOP      
;;;294    {
;;;295      GUI_USE_PARA(cinfo);
;;;296      /* no work needed */
;;;297    }
000340  4770              BX       lr
;;;298    
                          ENDP

                  jinit_color_deconverter PROC
;;;304    GLOBAL(void)
;;;305    jinit_color_deconverter (j_decompress_ptr cinfo)
000342  b570              PUSH     {r4-r6,lr}
;;;306    {
000344  4604              MOV      r4,r0
;;;307      my_cconvert_ptr cconvert;
;;;308      int ci;
;;;309    
;;;310      cconvert = (my_cconvert_ptr)
000346  6860              LDR      r0,[r4,#4]
000348  2218              MOVS     r2,#0x18
00034a  2101              MOVS     r1,#1
00034c  6803              LDR      r3,[r0,#0]
00034e  4620              MOV      r0,r4
000350  4798              BLX      r3
000352  4605              MOV      r5,r0
;;;311        (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
;;;312    				SIZEOF(my_color_deconverter));
;;;313      cinfo->cconvert = (struct jpeg_color_deconverter *) cconvert;
000354  f8c451c8          STR      r5,[r4,#0x1c8]
;;;314      cconvert->pub.start_pass = start_pass_dcolor;
000358  483d              LDR      r0,|L1.1104|
00035a  6028              STR      r0,[r5,#0]
;;;315    
;;;316      /* Make sure num_components agrees with jpeg_color_space */
;;;317      switch (cinfo->jpeg_color_space) {
00035c  f8940028          LDRB     r0,[r4,#0x28]
000360  2806              CMP      r0,#6
000362  d227              BCS      |L1.948|
000364  e8dff000          TBB      [pc,r0]
000368  26030e0f          DCB      0x26,0x03,0x0e,0x0f
00036c  1a1b              DCB      0x1a,0x1b
;;;318      case JCS_GRAYSCALE:
;;;319        if (cinfo->num_components != 1)
00036e  6a60              LDR      r0,[r4,#0x24]
000370  2801              CMP      r0,#1
000372  d006              BEQ      |L1.898|
;;;320          ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
000374  200a              MOVS     r0,#0xa
000376  6821              LDR      r1,[r4,#0]
000378  6148              STR      r0,[r1,#0x14]
00037a  6820              LDR      r0,[r4,#0]
00037c  6801              LDR      r1,[r0,#0]
00037e  4620              MOV      r0,r4
000380  4788              BLX      r1
                  |L1.898|
;;;321        break;
000382  e022              B        |L1.970|
;;;322    
;;;323      case JCS_RGB:
;;;324      case JCS_YCbCr:
000384  bf00              NOP      
;;;325        if (cinfo->num_components != 3)
000386  6a60              LDR      r0,[r4,#0x24]
000388  2803              CMP      r0,#3
00038a  d006              BEQ      |L1.922|
;;;326          ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
00038c  200a              MOVS     r0,#0xa
00038e  6821              LDR      r1,[r4,#0]
000390  6148              STR      r0,[r1,#0x14]
000392  6820              LDR      r0,[r4,#0]
000394  6801              LDR      r1,[r0,#0]
000396  4620              MOV      r0,r4
000398  4788              BLX      r1
                  |L1.922|
;;;327        break;
00039a  e016              B        |L1.970|
;;;328    
;;;329      case JCS_CMYK:
;;;330      case JCS_YCCK:
00039c  bf00              NOP      
;;;331        if (cinfo->num_components != 4)
00039e  6a60              LDR      r0,[r4,#0x24]
0003a0  2804              CMP      r0,#4
0003a2  d006              BEQ      |L1.946|
;;;332          ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
0003a4  200a              MOVS     r0,#0xa
0003a6  6821              LDR      r1,[r4,#0]
0003a8  6148              STR      r0,[r1,#0x14]
0003aa  6820              LDR      r0,[r4,#0]
0003ac  6801              LDR      r1,[r0,#0]
0003ae  4620              MOV      r0,r4
0003b0  4788              BLX      r1
                  |L1.946|
;;;333        break;
0003b2  e00a              B        |L1.970|
                  |L1.948|
;;;334    
;;;335      default:			/* JCS_UNKNOWN can be anything */
;;;336        if (cinfo->num_components < 1)
0003b4  6a60              LDR      r0,[r4,#0x24]
0003b6  2801              CMP      r0,#1
0003b8  da06              BGE      |L1.968|
;;;337          ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
0003ba  200a              MOVS     r0,#0xa
0003bc  6821              LDR      r1,[r4,#0]
0003be  6148              STR      r0,[r1,#0x14]
0003c0  6820              LDR      r0,[r4,#0]
0003c2  6801              LDR      r1,[r0,#0]
0003c4  4620              MOV      r0,r4
0003c6  4788              BLX      r1
                  |L1.968|
;;;338        break;
0003c8  bf00              NOP      
                  |L1.970|
0003ca  bf00              NOP                            ;321
;;;339      }
;;;340    
;;;341      /* Set out_color_components and conversion method based on requested space.
;;;342       * Also clear the component_needed flags for any unused components,
;;;343       * so that earlier pipeline stages can avoid useless computation.
;;;344       */
;;;345    
;;;346      switch (cinfo->out_color_space) {
0003cc  f8940029          LDRB     r0,[r4,#0x29]
0003d0  2801              CMP      r0,#1
0003d2  d004              BEQ      |L1.990|
0003d4  2802              CMP      r0,#2
0003d6  d027              BEQ      |L1.1064|
0003d8  2804              CMP      r0,#4
0003da  d172              BNE      |L1.1218|
0003dc  e055              B        |L1.1162|
                  |L1.990|
;;;347      case JCS_GRAYSCALE:
;;;348        cinfo->out_color_components = 1;
0003de  2001              MOVS     r0,#1
0003e0  67a0              STR      r0,[r4,#0x78]
;;;349        if (cinfo->jpeg_color_space == JCS_GRAYSCALE ||
0003e2  f8940028          LDRB     r0,[r4,#0x28]
0003e6  2801              CMP      r0,#1
0003e8  d003              BEQ      |L1.1010|
;;;350    	cinfo->jpeg_color_space == JCS_YCbCr) {
0003ea  f8940028          LDRB     r0,[r4,#0x28]
0003ee  2803              CMP      r0,#3
0003f0  d112              BNE      |L1.1048|
                  |L1.1010|
;;;351          cconvert->pub.color_convert = grayscale_convert;
0003f2  4818              LDR      r0,|L1.1108|
0003f4  6068              STR      r0,[r5,#4]
;;;352          /* For color->grayscale conversion, only the Y (0) component is needed */
;;;353          for (ci = 1; ci < cinfo->num_components; ci++)
0003f6  2601              MOVS     r6,#1
0003f8  e00a              B        |L1.1040|
                  |L1.1018|
;;;354    	cinfo->comp_info[ci].component_needed = FALSE;
0003fa  2000              MOVS     r0,#0
0003fc  ebc602c6          RSB      r2,r6,r6,LSL #3
000400  eb020242          ADD      r2,r2,r2,LSL #1
000404  f8d410d8          LDR      r1,[r4,#0xd8]
000408  eb010182          ADD      r1,r1,r2,LSL #2
00040c  6308              STR      r0,[r1,#0x30]
00040e  1c76              ADDS     r6,r6,#1              ;353
                  |L1.1040|
000410  6a60              LDR      r0,[r4,#0x24]         ;353
000412  42b0              CMP      r0,r6                 ;353
000414  dcf1              BGT      |L1.1018|
000416  e006              B        |L1.1062|
                  |L1.1048|
;;;355        } else
;;;356          ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
000418  201b              MOVS     r0,#0x1b
00041a  6821              LDR      r1,[r4,#0]
00041c  6148              STR      r0,[r1,#0x14]
00041e  6820              LDR      r0,[r4,#0]
000420  6801              LDR      r1,[r0,#0]
000422  4620              MOV      r0,r4
000424  4788              BLX      r1
                  |L1.1062|
;;;357        break;
000426  e05f              B        |L1.1256|
                  |L1.1064|
;;;358    
;;;359      case JCS_RGB:
;;;360        cinfo->out_color_components = RGB_PIXELSIZE;
000428  2003              MOVS     r0,#3
00042a  67a0              STR      r0,[r4,#0x78]
;;;361        if (cinfo->jpeg_color_space == JCS_YCbCr) {
00042c  f8940028          LDRB     r0,[r4,#0x28]
000430  2803              CMP      r0,#3
000432  d113              BNE      |L1.1116|
;;;362          cconvert->pub.color_convert = ycc_rgb_convert;
000434  4808              LDR      r0,|L1.1112|
000436  6068              STR      r0,[r5,#4]
;;;363          build_ycc_rgb_table(cinfo);
000438  4620              MOV      r0,r4
00043a  f7fffffe          BL       build_ycc_rgb_table
00043e  e023              B        |L1.1160|
                  |L1.1088|
                          DCD      0x000166e9
                  |L1.1092|
                          DCD      0x0001c5a2
                  |L1.1096|
                          DCD      0xffff492e
                  |L1.1100|
                          DCD      0xffffa7e6
                  |L1.1104|
                          DCD      start_pass_dcolor
                  |L1.1108|
                          DCD      grayscale_convert
                  |L1.1112|
                          DCD      ycc_rgb_convert
                  |L1.1116|
;;;364        } else if (cinfo->jpeg_color_space == JCS_GRAYSCALE) {
00045c  f8940028          LDRB     r0,[r4,#0x28]
000460  2801              CMP      r0,#1
000462  d102              BNE      |L1.1130|
;;;365          cconvert->pub.color_convert = gray_rgb_convert;
000464  4825              LDR      r0,|L1.1276|
000466  6068              STR      r0,[r5,#4]
000468  e00e              B        |L1.1160|
                  |L1.1130|
;;;366        } else if (cinfo->jpeg_color_space == JCS_RGB && RGB_PIXELSIZE == 3) {
00046a  f8940028          LDRB     r0,[r4,#0x28]
00046e  2802              CMP      r0,#2
000470  d103              BNE      |L1.1146|
000472  bf00              NOP      
;;;367          cconvert->pub.color_convert = null_convert;
000474  4822              LDR      r0,|L1.1280|
000476  6068              STR      r0,[r5,#4]
000478  e006              B        |L1.1160|
                  |L1.1146|
;;;368        } else
;;;369          ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
00047a  201b              MOVS     r0,#0x1b
00047c  6821              LDR      r1,[r4,#0]
00047e  6148              STR      r0,[r1,#0x14]
000480  6820              LDR      r0,[r4,#0]
000482  6801              LDR      r1,[r0,#0]
000484  4620              MOV      r0,r4
000486  4788              BLX      r1
                  |L1.1160|
;;;370        break;
000488  e02e              B        |L1.1256|
                  |L1.1162|
;;;371    
;;;372      case JCS_CMYK:
;;;373        cinfo->out_color_components = 4;
00048a  2004              MOVS     r0,#4
00048c  67a0              STR      r0,[r4,#0x78]
;;;374        if (cinfo->jpeg_color_space == JCS_YCCK) {
00048e  f8940028          LDRB     r0,[r4,#0x28]
000492  2805              CMP      r0,#5
000494  d105              BNE      |L1.1186|
;;;375          cconvert->pub.color_convert = ycck_cmyk_convert;
000496  481b              LDR      r0,|L1.1284|
000498  6068              STR      r0,[r5,#4]
;;;376          build_ycc_rgb_table(cinfo);
00049a  4620              MOV      r0,r4
00049c  f7fffffe          BL       build_ycc_rgb_table
0004a0  e00d              B        |L1.1214|
                  |L1.1186|
;;;377        } else if (cinfo->jpeg_color_space == JCS_CMYK) {
0004a2  f8940028          LDRB     r0,[r4,#0x28]
0004a6  2804              CMP      r0,#4
0004a8  d102              BNE      |L1.1200|
;;;378          cconvert->pub.color_convert = null_convert;
0004aa  4815              LDR      r0,|L1.1280|
0004ac  6068              STR      r0,[r5,#4]
0004ae  e006              B        |L1.1214|
                  |L1.1200|
;;;379        } else
;;;380          ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
0004b0  201b              MOVS     r0,#0x1b
0004b2  6821              LDR      r1,[r4,#0]
0004b4  6148              STR      r0,[r1,#0x14]
0004b6  6820              LDR      r0,[r4,#0]
0004b8  6801              LDR      r1,[r0,#0]
0004ba  4620              MOV      r0,r4
0004bc  4788              BLX      r1
                  |L1.1214|
;;;381        break;
0004be  e013              B        |L1.1256|
0004c0  e7ff              B        |L1.1218|
                  |L1.1218|
;;;382    
;;;383      default:
;;;384        /* Permit null conversion to same output space */
;;;385        if (cinfo->out_color_space == cinfo->jpeg_color_space) {
0004c2  f8940029          LDRB     r0,[r4,#0x29]
0004c6  f8941028          LDRB     r1,[r4,#0x28]
0004ca  4288              CMP      r0,r1
0004cc  d104              BNE      |L1.1240|
;;;386          cinfo->out_color_components = cinfo->num_components;
0004ce  6a60              LDR      r0,[r4,#0x24]
0004d0  67a0              STR      r0,[r4,#0x78]
;;;387          cconvert->pub.color_convert = null_convert;
0004d2  480b              LDR      r0,|L1.1280|
0004d4  6068              STR      r0,[r5,#4]
0004d6  e006              B        |L1.1254|
                  |L1.1240|
;;;388        } else			/* unsupported non-null conversion */
;;;389          ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
0004d8  201b              MOVS     r0,#0x1b
0004da  6821              LDR      r1,[r4,#0]
0004dc  6148              STR      r0,[r1,#0x14]
0004de  6820              LDR      r0,[r4,#0]
0004e0  6801              LDR      r1,[r0,#0]
0004e2  4620              MOV      r0,r4
0004e4  4788              BLX      r1
                  |L1.1254|
;;;390        break;
0004e6  bf00              NOP      
                  |L1.1256|
0004e8  bf00              NOP                            ;357
;;;391      }
;;;392    
;;;393      if (cinfo->quantize_colors)
0004ea  6d60              LDR      r0,[r4,#0x54]
0004ec  b110              CBZ      r0,|L1.1268|
;;;394        cinfo->output_components = 1; /* single colormapped output component */
0004ee  2001              MOVS     r0,#1
0004f0  67e0              STR      r0,[r4,#0x7c]
0004f2  e001              B        |L1.1272|
                  |L1.1268|
;;;395      else
;;;396        cinfo->output_components = cinfo->out_color_components;
0004f4  6fa0              LDR      r0,[r4,#0x78]
0004f6  67e0              STR      r0,[r4,#0x7c]
                  |L1.1272|
;;;397    }
0004f8  bd70              POP      {r4-r6,pc}
                          ENDP

0004fa  0000              DCW      0x0000
                  |L1.1276|
                          DCD      gray_rgb_convert
                  |L1.1280|
                          DCD      null_convert
                  |L1.1284|
                          DCD      ycck_cmyk_convert
