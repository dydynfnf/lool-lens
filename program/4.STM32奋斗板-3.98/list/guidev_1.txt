; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\guidev_1.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\guidev_1.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -I.\GUI\AntiAlias -I.\GUI\Config -I.\GUI\ConvertColor -I.\GUI\ConvertMono -I.\GUI\Core -I.\GUI\Font -I.\GUI\GUI_X -I.\GUI\JPEG -I.\GUI\LCDDriver -I.\GUI\MemDev -I.\GUI\MultiLayer -I.\GUI\Widget -I.\GUI\WM -IC:\Users\Administrator\Desktop\gui\STM32·Ü¶·°å-3.98\RTE -Id:\Keil_v5\ARM\PACK\ARM\CMSIS\4.3.0\CMSIS\Include -Id:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.1.0\Device\Include -D__UVISION_VERSION=515 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\guidev_1.crf GUI\MemDev\GUIDEV_1.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _XY2PTR_BITOFFSET PROC
;;;70     */
;;;71     static U8* _XY2PTR_BITOFFSET(int x, int y, int* pBitOffset) {
000000  e92d47f0          PUSH     {r4-r10,lr}
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;72       GUI_ALLOC_DATATYPE_U Offset;
;;;73       GUI_MEMDEV* pDev;
;;;74       U8* pData;
;;;75       pDev  = GUI_MEMDEV_H2P(GUI_Context.hDevData);
00000a  49f7              LDR      r1,|L1.1000|
00000c  f9b1004c          LDRSH    r0,[r1,#0x4c]  ; GUI_Context
000010  f7fffffe          BL       GUI_ALLOC_h2p
000014  4605              MOV      r5,r0
;;;76       pData = (U8*)(pDev + 1);
000016  f105092c          ADD      r9,r5,#0x2c
;;;77       #if GUI_DEBUG_LEVEL >= GUI_DEBUG_LEVEL_CHECK_ALL
;;;78         if ((x >= pDev->x0+pDev->XSize) | (x<pDev->x0) | (y >= pDev->y0+pDev->YSize) | (y<pDev->y0)) {
;;;79           GUI_DEBUG_ERROROUT2("_XY2PTR: parameters out of bounds", x, y);
;;;80         }
;;;81       #endif
;;;82       x -= pDev->x0;
00001a  f9b50000          LDRSH    r0,[r5,#0]
00001e  1a24              SUBS     r4,r4,r0
;;;83       y -= pDev->y0;
000020  f9b50002          LDRSH    r0,[r5,#2]
000024  1a36              SUBS     r6,r6,r0
;;;84       Offset = (GUI_ALLOC_DATATYPE_U)(y) * (GUI_ALLOC_DATATYPE_U)(pDev->BytesPerLine) + (x >> 3);
000026  89a8              LDRH     r0,[r5,#0xc]
000028  4370              MULS     r0,r6,r0
00002a  eb0000e4          ADD      r0,r0,r4,ASR #3
00002e  fa1ff880          UXTH     r8,r0
;;;85       if (pBitOffset) {
000032  b127              CBZ      r7,|L1.62|
;;;86         *pBitOffset = 7 - (x & 7);
000034  f0040007          AND      r0,r4,#7
000038  f1c00007          RSB      r0,r0,#7
00003c  6038              STR      r0,[r7,#0]
                  |L1.62|
;;;87       }
;;;88       return pData + Offset;
00003e  eb090008          ADD      r0,r9,r8
;;;89     }
000042  e8bd87f0          POP      {r4-r10,pc}
;;;90     
                          ENDP

                  _DrawBitLine1BPP PROC
;;;94     */
;;;95     static void _DrawBitLine1BPP(GUI_USAGE* pUsage, int x, int y, const U8 GUI_UNI_PTR * p, int Diff, unsigned int xsize,
000046  e92d4ff8          PUSH     {r3-r11,lr}
;;;96                                  const LCD_PIXELINDEX* pTrans, GUI_MEMDEV* pDev, PIXELINDEX* pDest)
;;;97     {
00004a  4682              MOV      r10,r0
00004c  460f              MOV      r7,r1
00004e  4693              MOV      r11,r2
000050  4698              MOV      r8,r3
000052  f8dd9034          LDR      r9,[sp,#0x34]
000056  9c0b              LDR      r4,[sp,#0x2c]
;;;98       PIXELINDEX pixels;
;;;99       PIXELINDEX Index1;
;;;100      unsigned int PixelCnt;
;;;101      GUI_USE_PARA(pUsage);
000058  bf00              NOP      
;;;102      PixelCnt = 8 - (Diff & 7);
00005a  980a              LDR      r0,[sp,#0x28]
00005c  f0000007          AND      r0,r0,#7
000060  f1c00508          RSB      r5,r0,#8
;;;103      pixels = (*p) << (Diff & 7);
000064  f8980000          LDRB     r0,[r8,#0]
000068  990a              LDR      r1,[sp,#0x28]
00006a  f0010107          AND      r1,r1,#7
00006e  4088              LSLS     r0,r0,r1
000070  b2c6              UXTB     r6,r0
;;;104      GUI_DEBUG_ERROROUT3_IF( x < pDev->x0, "GUIDEV.c: DrawBitLine1BPP, Act= %d, Border= %d, Clip= %d"
;;;105                        ,x,pDev->x0, GUI_Context.ClipRect.x0);
;;;106      switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
000072  48dd              LDR      r0,|L1.1000|
000074  7c00              LDRB     r0,[r0,#0x10]  ; GUI_Context
000076  f0000003          AND      r0,r0,#3
00007a  b120              CBZ      r0,|L1.134|
00007c  2801              CMP      r0,#1
00007e  d048              BEQ      |L1.274|
000080  2802              CMP      r0,#2
000082  d166              BNE      |L1.338|
000084  e01f              B        |L1.198|
                  |L1.134|
;;;107      case 0:    /* Write mode */
;;;108        do {
000086  bf00              NOP      
                  |L1.136|
;;;109          /* Prepare loop */
;;;110          if (PixelCnt > xsize) {
000088  42a5              CMP      r5,r4
00008a  d900              BLS      |L1.142|
;;;111            PixelCnt = xsize;
00008c  4625              MOV      r5,r4
                  |L1.142|
;;;112          }
;;;113          xsize -= PixelCnt;
00008e  1b64              SUBS     r4,r4,r5
;;;114          /* Write as many pixels as we are allowed to and have loaded in this inner loop */
;;;115          do {
000090  bf00              NOP      
                  |L1.146|
;;;116            (*pDev->pAPIList->pfSetPixelIndex)(x++, y, *(pTrans + ((U8)pixels >> 7)));
000092  ea4f1ce6          ASR      r12,r6,#7
000096  990c              LDR      r1,[sp,#0x30]
000098  f831201c          LDRH     r2,[r1,r12,LSL #1]
00009c  4638              MOV      r0,r7
00009e  1c7f              ADDS     r7,r7,#1
0000a0  f8d91028          LDR      r1,[r9,#0x28]
0000a4  6a4b              LDR      r3,[r1,#0x24]
0000a6  4659              MOV      r1,r11
0000a8  4798              BLX      r3
;;;117            pixels <<= 1;
0000aa  0670              LSLS     r0,r6,#25
0000ac  0e06              LSRS     r6,r0,#24
;;;118          } while (--PixelCnt);
0000ae  1e68              SUBS     r0,r5,#1
0000b0  0005              MOVS     r5,r0
0000b2  d1ee              BNE      |L1.146|
;;;119          /* Check if an other Source byte needs to be loaded */
;;;120          if (xsize == 0) {
0000b4  b90c              CBNZ     r4,|L1.186|
                  |L1.182|
;;;121            return;
;;;122          }
;;;123          PixelCnt = 8;
;;;124          pixels = *(++p);
;;;125        } while (1);
;;;126      case LCD_DRAWMODE_TRANS:
;;;127        Index1 = *(pTrans + 1);
;;;128        do {
;;;129          /* Prepare loop */
;;;130          if (PixelCnt > xsize) {
;;;131            PixelCnt = xsize;
;;;132          }
;;;133          xsize -= PixelCnt;
;;;134          while (pixels) {
;;;135            if ((pixels & 0x80)) {
;;;136              (*pDev->pAPIList->pfSetPixelIndex)(x, y, Index1);
;;;137            }
;;;138            x++;
;;;139            pixels <<= 1;
;;;140            if (--PixelCnt == 0) {
;;;141              break;
;;;142            }
;;;143          }
;;;144          /* Check if an other Source byte needs to be loaded */
;;;145          if (xsize == 0) {
;;;146            return;
;;;147          }
;;;148          x += PixelCnt;
;;;149          PixelCnt = 8;
;;;150          pixels = *(++p);
;;;151        } while (1);
;;;152      case LCD_DRAWMODE_XOR:;
;;;153      PixelLoopXor:
;;;154        if (PixelCnt > xsize) {
;;;155          PixelCnt = xsize;
;;;156        }
;;;157        xsize -= PixelCnt;
;;;158        do {
;;;159          if ((pixels & 0x80)) {
;;;160            (*pDev->pAPIList->pfXorPixel)(x, y);
;;;161          }
;;;162          x++;
;;;163          pDest++;
;;;164          pixels <<= 1;
;;;165        } while (--PixelCnt);
;;;166        if (xsize) {
;;;167          PixelCnt = 8;
;;;168          pixels = *(++p);
;;;169          goto PixelLoopXor;
;;;170        }
;;;171        break;
;;;172      }
;;;173    }
0000b6  e8bd8ff8          POP      {r3-r11,pc}
                  |L1.186|
0000ba  2508              MOVS     r5,#8                 ;123
0000bc  f1080001          ADD      r0,r8,#1              ;124
0000c0  4680              MOV      r8,r0                 ;124
0000c2  7806              LDRB     r6,[r0,#0]            ;124
0000c4  e7e0              B        |L1.136|
                  |L1.198|
0000c6  980c              LDR      r0,[sp,#0x30]         ;127
0000c8  7880              LDRB     r0,[r0,#2]            ;127
0000ca  9000              STR      r0,[sp,#0]            ;127
0000cc  bf00              NOP                            ;128
                  |L1.206|
0000ce  42a5              CMP      r5,r4                 ;130
0000d0  d900              BLS      |L1.212|
0000d2  4625              MOV      r5,r4                 ;131
                  |L1.212|
0000d4  1b64              SUBS     r4,r4,r5              ;133
0000d6  e010              B        |L1.250|
                  |L1.216|
0000d8  f0060080          AND      r0,r6,#0x80           ;135
0000dc  b130              CBZ      r0,|L1.236|
0000de  f8d90028          LDR      r0,[r9,#0x28]         ;136
0000e2  6a43              LDR      r3,[r0,#0x24]         ;136
0000e4  4659              MOV      r1,r11                ;136
0000e6  4638              MOV      r0,r7                 ;136
0000e8  9a00              LDR      r2,[sp,#0]            ;136
0000ea  4798              BLX      r3                    ;136
                  |L1.236|
0000ec  1c7f              ADDS     r7,r7,#1              ;138
0000ee  0670              LSLS     r0,r6,#25             ;139
0000f0  0e06              LSRS     r6,r0,#24             ;139
0000f2  1e68              SUBS     r0,r5,#1              ;140
0000f4  0005              MOVS     r5,r0                 ;140
0000f6  d100              BNE      |L1.250|
0000f8  e001              B        |L1.254|
                  |L1.250|
0000fa  2e00              CMP      r6,#0                 ;134
0000fc  d1ec              BNE      |L1.216|
                  |L1.254|
0000fe  bf00              NOP                            ;141
000100  b904              CBNZ     r4,|L1.260|
000102  e7d8              B        |L1.182|
                  |L1.260|
000104  442f              ADD      r7,r7,r5              ;148
000106  2508              MOVS     r5,#8                 ;149
000108  f1080001          ADD      r0,r8,#1              ;150
00010c  4680              MOV      r8,r0                 ;150
00010e  7806              LDRB     r6,[r0,#0]            ;150
000110  e7dd              B        |L1.206|
                  |L1.274|
000112  bf00              NOP                            ;153
                  |L1.276|
000114  42a5              CMP      r5,r4                 ;154
000116  d900              BLS      |L1.282|
000118  4625              MOV      r5,r4                 ;155
                  |L1.282|
00011a  1b64              SUBS     r4,r4,r5              ;157
00011c  bf00              NOP                            ;158
                  |L1.286|
00011e  f0060080          AND      r0,r6,#0x80           ;159
000122  b128              CBZ      r0,|L1.304|
000124  f8d90028          LDR      r0,[r9,#0x28]         ;160
000128  4659              MOV      r1,r11                ;160
00012a  6a82              LDR      r2,[r0,#0x28]         ;160
00012c  4638              MOV      r0,r7                 ;160
00012e  4790              BLX      r2                    ;160
                  |L1.304|
000130  1c7f              ADDS     r7,r7,#1              ;162
000132  980e              LDR      r0,[sp,#0x38]         ;163
000134  1c40              ADDS     r0,r0,#1              ;163
000136  900e              STR      r0,[sp,#0x38]         ;163
000138  0670              LSLS     r0,r6,#25             ;164
00013a  0e06              LSRS     r6,r0,#24             ;164
00013c  1e68              SUBS     r0,r5,#1              ;165
00013e  0005              MOVS     r5,r0                 ;165
000140  d1ed              BNE      |L1.286|
000142  b12c              CBZ      r4,|L1.336|
000144  2508              MOVS     r5,#8                 ;167
000146  f1080001          ADD      r0,r8,#1              ;168
00014a  4680              MOV      r8,r0                 ;168
00014c  7806              LDRB     r6,[r0,#0]            ;168
00014e  e7e1              B        |L1.276|
                  |L1.336|
000150  bf00              NOP                            ;171
                  |L1.338|
000152  bf00              NOP                            ;171
000154  bf00              NOP      
000156  e7ae              B        |L1.182|
;;;174    
                          ENDP

                  _DrawBitLine2BPP PROC
;;;178    */
;;;179    static void _DrawBitLine2BPP(GUI_USAGE* pUsage, int x, int y, const U8 GUI_UNI_PTR * p, int Diff, int xsize,
000158  e92d5fff          PUSH     {r0-r12,lr}
;;;180                                 const LCD_PIXELINDEX* pTrans, GUI_MEMDEV* pDev, PIXELINDEX* pDest)
;;;181    {
00015c  4681              MOV      r9,r0
00015e  460f              MOV      r7,r1
000160  4698              MOV      r8,r3
000162  f8ddb044          LDR      r11,[sp,#0x44]
000166  e9dda40e          LDRD     r10,r4,[sp,#0x38]
;;;182      U8 pixels;
;;;183      U8  PixelCnt;
;;;184      GUI_USE_PARA(pUsage);
00016a  bf00              NOP      
;;;185      GUI_USE_PARA(pDest);
00016c  9812              LDR      r0,[sp,#0x48]
00016e  9012              STR      r0,[sp,#0x48]
;;;186      PixelCnt = 4 - (Diff & 3);
000170  f00a0003          AND      r0,r10,#3
000174  f1c00504          RSB      r5,r0,#4
;;;187      pixels = (*p) << ((Diff & 3) << 1);
000178  f8980000          LDRB     r0,[r8,#0]
00017c  ea4f718a          LSL      r1,r10,#30
000180  0f49              LSRS     r1,r1,#29
000182  4088              LSLS     r0,r0,r1
000184  b2c6              UXTB     r6,r0
;;;188      switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
000186  4898              LDR      r0,|L1.1000|
000188  7c00              LDRB     r0,[r0,#0x10]  ; GUI_Context
00018a  f0000003          AND      r0,r0,#3
00018e  b110              CBZ      r0,|L1.406|
000190  2802              CMP      r0,#2
000192  d142              BNE      |L1.538|
000194  e01f              B        |L1.470|
                  |L1.406|
;;;189      case 0:    /* Write mode */
;;;190      PixelLoopWrite:
000196  bf00              NOP      
                  |L1.408|
;;;191        if (PixelCnt > xsize) {
000198  42a5              CMP      r5,r4
00019a  dd00              BLE      |L1.414|
;;;192          PixelCnt = xsize;
00019c  b2e5              UXTB     r5,r4
                  |L1.414|
;;;193        }
;;;194        xsize -= PixelCnt;
00019e  1b64              SUBS     r4,r4,r5
;;;195        do {
0001a0  bf00              NOP      
                  |L1.418|
;;;196          (*pDev->pAPIList->pfSetPixelIndex)(x++, y, *(pTrans + (pixels >> 6)));
0001a2  ea4f1ca6          ASR      r12,r6,#6
0001a6  9910              LDR      r1,[sp,#0x40]
0001a8  f831201c          LDRH     r2,[r1,r12,LSL #1]
0001ac  4638              MOV      r0,r7
0001ae  1c7f              ADDS     r7,r7,#1
0001b0  f8db1028          LDR      r1,[r11,#0x28]
0001b4  6a4b              LDR      r3,[r1,#0x24]
0001b6  9902              LDR      r1,[sp,#8]
0001b8  4798              BLX      r3
;;;197          pixels <<= 2;
0001ba  06b0              LSLS     r0,r6,#26
0001bc  0e06              LSRS     r6,r0,#24
;;;198        } while (--PixelCnt);
0001be  1e68              SUBS     r0,r5,#1
0001c0  b2c0              UXTB     r0,r0
0001c2  0005              MOVS     r5,r0
0001c4  d1ed              BNE      |L1.418|
;;;199        if (xsize) {
0001c6  b12c              CBZ      r4,|L1.468|
;;;200          PixelCnt = 4;
0001c8  2504              MOVS     r5,#4
;;;201          pixels = *(++p);
0001ca  f1080001          ADD      r0,r8,#1
0001ce  4680              MOV      r8,r0
0001d0  7806              LDRB     r6,[r0,#0]
;;;202          goto PixelLoopWrite;
0001d2  e7e1              B        |L1.408|
                  |L1.468|
;;;203        }
;;;204        break;
0001d4  e021              B        |L1.538|
                  |L1.470|
;;;205      case LCD_DRAWMODE_TRANS:
;;;206      PixelLoopTrans:
0001d6  bf00              NOP      
                  |L1.472|
;;;207        if (PixelCnt > xsize)
0001d8  42a5              CMP      r5,r4
0001da  dd00              BLE      |L1.478|
;;;208          PixelCnt = xsize;
0001dc  b2e5              UXTB     r5,r4
                  |L1.478|
;;;209        xsize -= PixelCnt;
0001de  1b64              SUBS     r4,r4,r5
;;;210        do {
0001e0  bf00              NOP      
                  |L1.482|
;;;211          if (pixels & 0xc0) {
0001e2  f00600c0          AND      r0,r6,#0xc0
0001e6  b148              CBZ      r0,|L1.508|
;;;212            (*pDev->pAPIList->pfSetPixelIndex)(x, y, *(pTrans + (pixels >> 6)));
0001e8  11b1              ASRS     r1,r6,#6
0001ea  9810              LDR      r0,[sp,#0x40]
0001ec  f8302011          LDRH     r2,[r0,r1,LSL #1]
0001f0  f8db0028          LDR      r0,[r11,#0x28]
0001f4  6a43              LDR      r3,[r0,#0x24]
0001f6  4638              MOV      r0,r7
0001f8  9902              LDR      r1,[sp,#8]
0001fa  4798              BLX      r3
                  |L1.508|
;;;213          }
;;;214          x++;
0001fc  1c7f              ADDS     r7,r7,#1
;;;215          pixels <<= 2;
0001fe  06b0              LSLS     r0,r6,#26
000200  0e06              LSRS     r6,r0,#24
;;;216        } while (--PixelCnt);
000202  1e68              SUBS     r0,r5,#1
000204  b2c0              UXTB     r0,r0
000206  0005              MOVS     r5,r0
000208  d1eb              BNE      |L1.482|
;;;217        if (xsize) {
00020a  b12c              CBZ      r4,|L1.536|
;;;218          PixelCnt = 4;
00020c  2504              MOVS     r5,#4
;;;219          pixels = *(++p);
00020e  f1080001          ADD      r0,r8,#1
000212  4680              MOV      r8,r0
000214  7806              LDRB     r6,[r0,#0]
;;;220          goto PixelLoopTrans;
000216  e7df              B        |L1.472|
                  |L1.536|
;;;221        }
;;;222        break;
000218  bf00              NOP      
                  |L1.538|
00021a  bf00              NOP                            ;204
;;;223      }
;;;224    }
00021c  e8bd9fff          POP      {r0-r12,pc}
;;;225    
                          ENDP

                  _DrawBitLine4BPP PROC
;;;229    */
;;;230    static void _DrawBitLine4BPP(GUI_USAGE* pUsage, int x, int y, const U8 GUI_UNI_PTR * p, int Diff, int xsize,
000220  e92d4fff          PUSH     {r0-r11,lr}
;;;231                                 const LCD_PIXELINDEX* pTrans, GUI_MEMDEV* pDev, PIXELINDEX* pDest)
;;;232    {
000224  b081              SUB      sp,sp,#4
000226  4683              MOV      r11,r0
000228  460d              MOV      r5,r1
00022a  4699              MOV      r9,r3
00022c  e9dda60e          LDRD     r10,r6,[sp,#0x38]
000230  e9dd7810          LDRD     r7,r8,[sp,#0x40]
;;;233      U8 pixels;
;;;234      GUI_USE_PARA(pUsage);
000234  bf00              NOP      
;;;235      GUI_USE_PARA(pDest);
000236  9812              LDR      r0,[sp,#0x48]
000238  9012              STR      r0,[sp,#0x48]
;;;236      pixels = (*p) << ((Diff & 1) << 2);
00023a  f8990000          LDRB     r0,[r9,#0]
00023e  ea4f71ca          LSL      r1,r10,#31
000242  0f49              LSRS     r1,r1,#29
000244  4088              LSLS     r0,r0,r1
000246  b2c4              UXTB     r4,r0
;;;237      switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
000248  4867              LDR      r0,|L1.1000|
00024a  7c00              LDRB     r0,[r0,#0x10]  ; GUI_Context
00024c  f0000003          AND      r0,r0,#3
000250  b110              CBZ      r0,|L1.600|
000252  2802              CMP      r0,#2
000254  d143              BNE      |L1.734|
000256  e043              B        |L1.736|
                  |L1.600|
;;;238    /*
;;;239              * Write mode *
;;;240    */
;;;241      case 0:
;;;242        /* Draw incomplete bytes to the left of center area */
;;;243        if (Diff) {
000258  f1ba0f00          CMP      r10,#0
00025c  d00e              BEQ      |L1.636|
;;;244          (*pDev->pAPIList->pfSetPixelIndex)(x++, y, *(pTrans + (pixels >> 4)));
00025e  1121              ASRS     r1,r4,#4
000260  f8372011          LDRH     r2,[r7,r1,LSL #1]
000264  4628              MOV      r0,r5
000266  1c6d              ADDS     r5,r5,#1
000268  f8d81028          LDR      r1,[r8,#0x28]
00026c  6a4b              LDR      r3,[r1,#0x24]
00026e  9903              LDR      r1,[sp,#0xc]
000270  4798              BLX      r3
;;;245          xsize--;
000272  1e76              SUBS     r6,r6,#1
;;;246          pixels = *++p;
000274  f1090001          ADD      r0,r9,#1
000278  4681              MOV      r9,r0
00027a  7804              LDRB     r4,[r0,#0]
                  |L1.636|
;;;247        }
;;;248        /* Draw center area (2 pixels in one byte) */
;;;249        if (xsize >= 2) {
00027c  2e02              CMP      r6,#2
00027e  db23              BLT      |L1.712|
;;;250          int i = xsize >> 1;
000280  1070              ASRS     r0,r6,#1
000282  9000              STR      r0,[sp,#0]
;;;251          xsize &= 1;
000284  f0060601          AND      r6,r6,#1
;;;252          do {
000288  bf00              NOP      
                  |L1.650|
;;;253            (*pDev->pAPIList->pfSetPixelIndex)(x++, y, *(pTrans + (pixels >>  4)));
00028a  1121              ASRS     r1,r4,#4
00028c  f8372011          LDRH     r2,[r7,r1,LSL #1]
000290  4628              MOV      r0,r5
000292  1c6d              ADDS     r5,r5,#1
000294  f8d81028          LDR      r1,[r8,#0x28]
000298  6a4b              LDR      r3,[r1,#0x24]
00029a  9903              LDR      r1,[sp,#0xc]
00029c  4798              BLX      r3
;;;254            (*pDev->pAPIList->pfSetPixelIndex)(x++, y, *(pTrans + (pixels  & 15)));
00029e  f004010f          AND      r1,r4,#0xf
0002a2  f8372011          LDRH     r2,[r7,r1,LSL #1]
0002a6  4628              MOV      r0,r5
0002a8  1c6d              ADDS     r5,r5,#1
0002aa  f8d81028          LDR      r1,[r8,#0x28]
0002ae  6a4b              LDR      r3,[r1,#0x24]
0002b0  9903              LDR      r1,[sp,#0xc]
0002b2  4798              BLX      r3
;;;255            pixels = *++p;
0002b4  f1090001          ADD      r0,r9,#1
0002b8  4681              MOV      r9,r0
0002ba  7804              LDRB     r4,[r0,#0]
;;;256          } while (--i);
0002bc  9800              LDR      r0,[sp,#0]
0002be  1e40              SUBS     r0,r0,#1
0002c0  9000              STR      r0,[sp,#0]
0002c2  2800              CMP      r0,#0
0002c4  d1e1              BNE      |L1.650|
;;;257        }
0002c6  bf00              NOP      
                  |L1.712|
;;;258        /* Draw incomplete bytes to the right of center area */
;;;259        if (xsize) {
0002c8  b14e              CBZ      r6,|L1.734|
;;;260          (*pDev->pAPIList->pfSetPixelIndex)(x++, y, *(pTrans + (pixels >> 4)));
0002ca  1121              ASRS     r1,r4,#4
0002cc  f8372011          LDRH     r2,[r7,r1,LSL #1]
0002d0  4628              MOV      r0,r5
0002d2  1c6d              ADDS     r5,r5,#1
0002d4  f8d81028          LDR      r1,[r8,#0x28]
0002d8  6a4b              LDR      r3,[r1,#0x24]
0002da  9903              LDR      r1,[sp,#0xc]
0002dc  4798              BLX      r3
                  |L1.734|
;;;261        }
;;;262        break;
0002de  e042              B        |L1.870|
                  |L1.736|
;;;263    /*
;;;264              * Transparent draw mode *
;;;265    */
;;;266      case LCD_DRAWMODE_TRANS:
;;;267        /* Draw incomplete bytes to the left of center area */
;;;268        if (Diff) {
0002e0  f1ba0f00          CMP      r10,#0
0002e4  d011              BEQ      |L1.778|
;;;269          if (pixels & 0xF0) {
0002e6  f00400f0          AND      r0,r4,#0xf0
0002ea  b140              CBZ      r0,|L1.766|
;;;270            (*pDev->pAPIList->pfSetPixelIndex)(x, y, *(pTrans + (pixels >> 4)));
0002ec  1120              ASRS     r0,r4,#4
0002ee  f8372010          LDRH     r2,[r7,r0,LSL #1]
0002f2  f8d80028          LDR      r0,[r8,#0x28]
0002f6  6a43              LDR      r3,[r0,#0x24]
0002f8  4628              MOV      r0,r5
0002fa  9903              LDR      r1,[sp,#0xc]
0002fc  4798              BLX      r3
                  |L1.766|
;;;271          }
;;;272          x++;
0002fe  1c6d              ADDS     r5,r5,#1
;;;273          xsize--;
000300  1e76              SUBS     r6,r6,#1
;;;274          pixels = *++p;
000302  f1090001          ADD      r0,r9,#1
000306  4681              MOV      r9,r0
000308  7804              LDRB     r4,[r0,#0]
                  |L1.778|
;;;275        }
;;;276        /* Draw center area (2 pixels in one byte) */
;;;277        while (xsize >= 2) {
00030a  e01d              B        |L1.840|
                  |L1.780|
;;;278          /* Draw 1. (left) pixel */
;;;279          if (pixels & 0xF0) {
00030c  f00400f0          AND      r0,r4,#0xf0
000310  b140              CBZ      r0,|L1.804|
;;;280            (*pDev->pAPIList->pfSetPixelIndex)(x, y, *(pTrans + (pixels >> 4)));
000312  1120              ASRS     r0,r4,#4
000314  f8372010          LDRH     r2,[r7,r0,LSL #1]
000318  f8d80028          LDR      r0,[r8,#0x28]
00031c  6a43              LDR      r3,[r0,#0x24]
00031e  4628              MOV      r0,r5
000320  9903              LDR      r1,[sp,#0xc]
000322  4798              BLX      r3
                  |L1.804|
;;;281          }
;;;282          /* Draw 2. (right) pixel */
;;;283          if (pixels &= 15) {
000324  f004000f          AND      r0,r4,#0xf
000328  0004              MOVS     r4,r0
00032a  d007              BEQ      |L1.828|
;;;284            (*pDev->pAPIList->pfSetPixelIndex)(x + 1, y, *(pTrans + pixels));
00032c  f8372014          LDRH     r2,[r7,r4,LSL #1]
000330  f8d80028          LDR      r0,[r8,#0x28]
000334  6a43              LDR      r3,[r0,#0x24]
000336  1c68              ADDS     r0,r5,#1
000338  9903              LDR      r1,[sp,#0xc]
00033a  4798              BLX      r3
                  |L1.828|
;;;285          }
;;;286          x += 2;
00033c  1cad              ADDS     r5,r5,#2
;;;287          xsize -= 2;
00033e  1eb6              SUBS     r6,r6,#2
;;;288          pixels = *++p;
000340  f1090001          ADD      r0,r9,#1
000344  4681              MOV      r9,r0
000346  7804              LDRB     r4,[r0,#0]
                  |L1.840|
000348  2e02              CMP      r6,#2                 ;277
00034a  dadf              BGE      |L1.780|
;;;289        }
;;;290        /* Draw incomplete bytes to the right of center area */
;;;291        if (xsize) {
00034c  b156              CBZ      r6,|L1.868|
;;;292          if (pixels >>= 4) {
00034e  1120              ASRS     r0,r4,#4
000350  0004              MOVS     r4,r0
000352  d007              BEQ      |L1.868|
;;;293            (*pDev->pAPIList->pfSetPixelIndex)(x, y, *(pTrans + pixels));
000354  f8372014          LDRH     r2,[r7,r4,LSL #1]
000358  f8d80028          LDR      r0,[r8,#0x28]
00035c  6a43              LDR      r3,[r0,#0x24]
00035e  4628              MOV      r0,r5
000360  9903              LDR      r1,[sp,#0xc]
000362  4798              BLX      r3
                  |L1.868|
;;;294          }
;;;295        }
;;;296        break;
000364  bf00              NOP      
                  |L1.870|
000366  bf00              NOP                            ;262
;;;297      }
;;;298    }
000368  b005              ADD      sp,sp,#0x14
00036a  e8bd8ff0          POP      {r4-r11,pc}
;;;299    
                          ENDP

                  _DrawBitLine8BPP PROC
;;;303    */
;;;304    static void _DrawBitLine8BPP(GUI_USAGE* pUsage, int x, int y, const U8 GUI_UNI_PTR * pSrc, int xsize,
00036e  e92d5ff0          PUSH     {r4-r12,lr}
;;;305                                 const LCD_PIXELINDEX* pTrans, GUI_MEMDEV* pDev, PIXELINDEX* pDest) {
000372  4606              MOV      r6,r0
000374  460d              MOV      r5,r1
000376  4617              MOV      r7,r2
000378  461c              MOV      r4,r3
00037a  e9ddab0c          LDRD     r10,r11,[sp,#0x30]
00037e  e9dd890a          LDRD     r8,r9,[sp,#0x28]
;;;306      GUI_USE_PARA(pUsage);
000382  bf00              NOP      
;;;307      GUI_USE_PARA(pDest);
000384  bf00              NOP      
;;;308      switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
000386  4818              LDR      r0,|L1.1000|
000388  7c00              LDRB     r0,[r0,#0x10]  ; GUI_Context
00038a  f0000003          AND      r0,r0,#3
00038e  b110              CBZ      r0,|L1.918|
000390  2802              CMP      r0,#2
000392  d126              BNE      |L1.994|
000394  e011              B        |L1.954|
                  |L1.918|
;;;309      case 0:    /* Write mode */
;;;310        do {
000396  bf00              NOP      
                  |L1.920|
;;;311          (*pDev->pAPIList->pfSetPixelIndex)(x++, y, *(pTrans + *pSrc));
000398  7821              LDRB     r1,[r4,#0]
00039a  f8392011          LDRH     r2,[r9,r1,LSL #1]
00039e  4628              MOV      r0,r5
0003a0  1c6d              ADDS     r5,r5,#1
0003a2  f8da1028          LDR      r1,[r10,#0x28]
0003a6  6a4b              LDR      r3,[r1,#0x24]
0003a8  4639              MOV      r1,r7
0003aa  4798              BLX      r3
;;;312          pSrc++;
0003ac  1c64              ADDS     r4,r4,#1
;;;313        } while (--xsize);
0003ae  f1a80001          SUB      r0,r8,#1
0003b2  ea5f0800          MOVS     r8,r0
0003b6  d1ef              BNE      |L1.920|
;;;314        break;
0003b8  e013              B        |L1.994|
                  |L1.954|
;;;315      case LCD_DRAWMODE_TRANS:
;;;316        do {
0003ba  bf00              NOP      
                  |L1.956|
;;;317          if (*pSrc) {
0003bc  7820              LDRB     r0,[r4,#0]
0003be  b140              CBZ      r0,|L1.978|
;;;318            (*pDev->pAPIList->pfSetPixelIndex)(x, y, *(pTrans + *pSrc));
0003c0  7820              LDRB     r0,[r4,#0]
0003c2  f8392010          LDRH     r2,[r9,r0,LSL #1]
0003c6  f8da0028          LDR      r0,[r10,#0x28]
0003ca  4639              MOV      r1,r7
0003cc  6a43              LDR      r3,[r0,#0x24]
0003ce  4628              MOV      r0,r5
0003d0  4798              BLX      r3
                  |L1.978|
;;;319          }
;;;320          x++;
0003d2  1c6d              ADDS     r5,r5,#1
;;;321          pSrc++;
0003d4  1c64              ADDS     r4,r4,#1
;;;322        } while (--xsize);
0003d6  f1a80001          SUB      r0,r8,#1
0003da  ea5f0800          MOVS     r8,r0
0003de  d1ed              BNE      |L1.956|
;;;323        break;
0003e0  bf00              NOP      
                  |L1.994|
0003e2  bf00              NOP                            ;314
;;;324      }
;;;325    }
0003e4  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.1000|
                          DCD      GUI_Context
                          ENDP

                  _DrawBitLine8BPP_DDB PROC
;;;330    */
;;;331    static void _DrawBitLine8BPP_DDB(GUI_USAGE* pUsage, int x, int y, const U8 GUI_UNI_PTR * pSrc, int xsize, GUI_MEMDEV* pDev, PIXELINDEX* pDest) {
0003ec  e92d47f0          PUSH     {r4-r10,lr}
0003f0  4606              MOV      r6,r0
0003f2  460d              MOV      r5,r1
0003f4  4617              MOV      r7,r2
0003f6  461c              MOV      r4,r3
0003f8  e9dd9a09          LDRD     r9,r10,[sp,#0x24]
0003fc  f8dd8020          LDR      r8,[sp,#0x20]
;;;332      GUI_USE_PARA(pUsage);
000400  bf00              NOP      
;;;333      GUI_USE_PARA(pDest);
000402  bf00              NOP      
;;;334      switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
000404  48fe              LDR      r0,|L1.2048|
000406  7c00              LDRB     r0,[r0,#0x10]  ; GUI_Context
000408  f0000003          AND      r0,r0,#3
00040c  b110              CBZ      r0,|L1.1044|
00040e  2802              CMP      r0,#2
000410  d122              BNE      |L1.1112|
000412  e00f              B        |L1.1076|
                  |L1.1044|
;;;335      case 0:    /* Write mode */
;;;336        do {
000414  bf00              NOP      
                  |L1.1046|
;;;337          (*pDev->pAPIList->pfSetPixelIndex)(x++, y, *pSrc);
000416  7822              LDRB     r2,[r4,#0]
000418  4628              MOV      r0,r5
00041a  1c6d              ADDS     r5,r5,#1
00041c  f8d91028          LDR      r1,[r9,#0x28]
000420  6a4b              LDR      r3,[r1,#0x24]
000422  4639              MOV      r1,r7
000424  4798              BLX      r3
;;;338          pSrc++;
000426  1c64              ADDS     r4,r4,#1
;;;339        } while (--xsize);
000428  f1a80001          SUB      r0,r8,#1
00042c  ea5f0800          MOVS     r8,r0
000430  d1f1              BNE      |L1.1046|
;;;340        break;
000432  e011              B        |L1.1112|
                  |L1.1076|
;;;341      case LCD_DRAWMODE_TRANS:
;;;342        do {
000434  bf00              NOP      
                  |L1.1078|
;;;343          if (*pSrc) {
000436  7820              LDRB     r0,[r4,#0]
000438  b130              CBZ      r0,|L1.1096|
;;;344            (*pDev->pAPIList->pfSetPixelIndex)(x, y, *pSrc);
00043a  7822              LDRB     r2,[r4,#0]
00043c  f8d90028          LDR      r0,[r9,#0x28]
000440  4639              MOV      r1,r7
000442  6a43              LDR      r3,[r0,#0x24]
000444  4628              MOV      r0,r5
000446  4798              BLX      r3
                  |L1.1096|
;;;345          }
;;;346          x++;
000448  1c6d              ADDS     r5,r5,#1
;;;347          pSrc++;
00044a  1c64              ADDS     r4,r4,#1
;;;348        } while (--xsize);
00044c  f1a80001          SUB      r0,r8,#1
000450  ea5f0800          MOVS     r8,r0
000454  d1ef              BNE      |L1.1078|
;;;349        break;
000456  bf00              NOP      
                  |L1.1112|
000458  bf00              NOP                            ;340
;;;350      }
;;;351    }
00045a  e8bd87f0          POP      {r4-r10,pc}
;;;352    
                          ENDP

                  _DrawBitmap PROC
;;;356    */
;;;357    static void _DrawBitmap(int x0, int y0, int xsize, int ysize,
00045e  e92d4fff          PUSH     {r0-r11,lr}
;;;358                            int BitsPerPixel, int BytesPerLine,
;;;359                            const U8 GUI_UNI_PTR * pData, int Diff, const LCD_PIXELINDEX* pTrans)
;;;360    {
000462  b087              SUB      sp,sp,#0x1c
000464  460f              MOV      r7,r1
000466  4690              MOV      r8,r2
000468  469a              MOV      r10,r3
00046a  e9ddb917          LDRD     r11,r9,[sp,#0x5c]
;;;361      int i;
;;;362      GUI_MEMDEV* pDev   = GUI_MEMDEV_H2P(GUI_Context.hDevData);
00046e  49e4              LDR      r1,|L1.2048|
000470  f9b1004c          LDRSH    r0,[r1,#0x4c]  ; GUI_Context
000474  f7fffffe          BL       GUI_ALLOC_h2p
000478  4606              MOV      r6,r0
;;;363      GUI_USAGE*  pUsage = (pDev->hUsage) ? GUI_USAGE_H2P(pDev->hUsage) : 0;
00047a  8b30              LDRH     r0,[r6,#0x18]
00047c  b120              CBZ      r0,|L1.1160|
00047e  f9b60018          LDRSH    r0,[r6,#0x18]
000482  f7fffffe          BL       GUI_ALLOC_h2p
000486  e000              B        |L1.1162|
                  |L1.1160|
000488  2000              MOVS     r0,#0
                  |L1.1162|
00048a  9006              STR      r0,[sp,#0x18]
;;;364      unsigned    BytesPerLineDest;
;;;365      PIXELINDEX* pDest;
;;;366      BytesPerLineDest = pDev->BytesPerLine;
00048c  68f0              LDR      r0,[r6,#0xc]
00048e  9005              STR      r0,[sp,#0x14]
;;;367      x0 += Diff;
000490  9807              LDR      r0,[sp,#0x1c]
000492  4458              ADD      r0,r0,r11
000494  9007              STR      r0,[sp,#0x1c]
;;;368      /* Mark all affected pixels dirty unless transparency is set */
;;;369      if (pUsage) {
000496  9806              LDR      r0,[sp,#0x18]
000498  b160              CBZ      r0,|L1.1204|
;;;370        if ((GUI_Context.DrawMode & LCD_DRAWMODE_TRANS) == 0) {
00049a  48d9              LDR      r0,|L1.2048|
00049c  7c00              LDRB     r0,[r0,#0x10]  ; GUI_Context
00049e  f0000002          AND      r0,r0,#2
0004a2  b938              CBNZ     r0,|L1.1204|
;;;371          GUI_USAGE_AddRect(pUsage, x0, y0 , xsize, ysize);
0004a4  4643              MOV      r3,r8
0004a6  463a              MOV      r2,r7
0004a8  f8cda000          STR      r10,[sp,#0]
0004ac  e9dd0106          LDRD     r0,r1,[sp,#0x18]
0004b0  f7fffffe          BL       GUI_USAGE_AddRect
                  |L1.1204|
;;;372        }
;;;373      }
;;;374      pDest = _XY2PTR_BITOFFSET(x0, y0, 0);
0004b4  2200              MOVS     r2,#0
0004b6  4639              MOV      r1,r7
0004b8  9807              LDR      r0,[sp,#0x1c]
0004ba  f7fffffe          BL       _XY2PTR_BITOFFSET
0004be  4605              MOV      r5,r0
;;;375    #if BITSPERPIXEL == 16
;;;376      /* handle 16 bpp bitmaps in high color modes, but only without palette */
;;;377      if (BitsPerPixel == 16) {
;;;378        for (i = 0; i < ysize; i++) {
;;;379          _DrawBitLine16BPP_DDB(pUsage, x0, i + y0, (const U16*)pData, xsize, pDev, pDest);
;;;380          pData += BytesPerLine;
;;;381          pDest = (PIXELINDEX*)((U8*)pDest + BytesPerLineDest); 
;;;382        }
;;;383        return;
;;;384      }
;;;385    #endif
;;;386      /* Handle 8 bpp bitmaps seperately as we have different routine bitmaps with or without palette */
;;;387      if (BitsPerPixel == 8) {
0004c0  9814              LDR      r0,[sp,#0x50]
0004c2  2808              CMP      r0,#8
0004c4  d124              BNE      |L1.1296|
;;;388        for (i = 0; i < ysize; i++) {
0004c6  2400              MOVS     r4,#0
0004c8  e01d              B        |L1.1286|
                  |L1.1226|
;;;389          if (pTrans) {
0004ca  f1b90f00          CMP      r9,#0
0004ce  d00a              BEQ      |L1.1254|
;;;390            _DrawBitLine8BPP(pUsage, x0, i + y0, pData, xsize, pTrans, pDev, pDest);
0004d0  19e2              ADDS     r2,r4,r7
0004d2  e9cd8900          STRD     r8,r9,[sp,#0]
0004d6  e9cd6502          STRD     r6,r5,[sp,#8]
0004da  9b16              LDR      r3,[sp,#0x58]
0004dc  e9dd0106          LDRD     r0,r1,[sp,#0x18]
0004e0  f7fffffe          BL       _DrawBitLine8BPP
0004e4  e008              B        |L1.1272|
                  |L1.1254|
;;;391          } else {
;;;392            _DrawBitLine8BPP_DDB(pUsage, x0, i + y0, pData, xsize, pDev, pDest);
0004e6  19e2              ADDS     r2,r4,r7
0004e8  e9cd8600          STRD     r8,r6,[sp,#0]
0004ec  9502              STR      r5,[sp,#8]
0004ee  9b16              LDR      r3,[sp,#0x58]
0004f0  e9dd0106          LDRD     r0,r1,[sp,#0x18]
0004f4  f7fffffe          BL       _DrawBitLine8BPP_DDB
                  |L1.1272|
;;;393          }
;;;394          pData += BytesPerLine;
0004f8  e9dd1015          LDRD     r1,r0,[sp,#0x54]
0004fc  4408              ADD      r0,r0,r1
0004fe  9016              STR      r0,[sp,#0x58]
;;;395          pDest = (PIXELINDEX*)((U8*)pDest + BytesPerLineDest); 
000500  9805              LDR      r0,[sp,#0x14]
000502  4405              ADD      r5,r5,r0
000504  1c64              ADDS     r4,r4,#1              ;388
                  |L1.1286|
000506  4554              CMP      r4,r10                ;388
000508  dbdf              BLT      |L1.1226|
                  |L1.1290|
;;;396        }
;;;397        return;
;;;398      }
;;;399      /* Use aID for bitmaps without palette */
;;;400      if (!pTrans) {
;;;401        pTrans = aID;
;;;402      }
;;;403      for (i = 0; i < ysize; i++) {
;;;404        switch (BitsPerPixel) {
;;;405        case 1:
;;;406          _DrawBitLine1BPP(pUsage, x0, i + y0, pData, Diff, xsize, pTrans, pDev, pDest);
;;;407          break;
;;;408        case 2:
;;;409          _DrawBitLine2BPP(pUsage, x0, i + y0, pData, Diff, xsize, pTrans, pDev, pDest);
;;;410          break;
;;;411        case 4:
;;;412          _DrawBitLine4BPP(pUsage, x0, i + y0, pData, Diff, xsize, pTrans, pDev, pDest);
;;;413          break;
;;;414        }
;;;415        pData += BytesPerLine;
;;;416        pDest = (PIXELINDEX*)((U8*)pDest + BytesPerLineDest); 
;;;417      }
;;;418    }
00050a  b00b              ADD      sp,sp,#0x2c
00050c  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.1296|
000510  f1b90f00          CMP      r9,#0                 ;400
000514  d101              BNE      |L1.1306|
000516  f8df92ec          LDR      r9,|L1.2052|
                  |L1.1306|
00051a  2400              MOVS     r4,#0                 ;403
00051c  e033              B        |L1.1414|
                  |L1.1310|
00051e  9814              LDR      r0,[sp,#0x50]         ;404
000520  2801              CMP      r0,#1                 ;404
000522  d004              BEQ      |L1.1326|
000524  2802              CMP      r0,#2                 ;404
000526  d00e              BEQ      |L1.1350|
000528  2804              CMP      r0,#4                 ;404
00052a  d124              BNE      |L1.1398|
00052c  e017              B        |L1.1374|
                  |L1.1326|
00052e  19e2              ADDS     r2,r4,r7              ;406
000530  e9cdb800          STRD     r11,r8,[sp,#0]        ;406
000534  e9cd9602          STRD     r9,r6,[sp,#8]         ;406
000538  9504              STR      r5,[sp,#0x10]         ;406
00053a  9b16              LDR      r3,[sp,#0x58]         ;406
00053c  e9dd0106          LDRD     r0,r1,[sp,#0x18]      ;406
000540  f7fffffe          BL       _DrawBitLine1BPP
000544  e017              B        |L1.1398|
                  |L1.1350|
000546  19e2              ADDS     r2,r4,r7              ;409
000548  e9cdb800          STRD     r11,r8,[sp,#0]        ;409
00054c  e9cd9602          STRD     r9,r6,[sp,#8]         ;409
000550  9504              STR      r5,[sp,#0x10]         ;409
000552  9b16              LDR      r3,[sp,#0x58]         ;409
000554  e9dd0106          LDRD     r0,r1,[sp,#0x18]      ;409
000558  f7fffffe          BL       _DrawBitLine2BPP
00055c  e00b              B        |L1.1398|
                  |L1.1374|
00055e  19e2              ADDS     r2,r4,r7              ;412
000560  e9cdb800          STRD     r11,r8,[sp,#0]        ;412
000564  e9cd9602          STRD     r9,r6,[sp,#8]         ;412
000568  9504              STR      r5,[sp,#0x10]         ;412
00056a  9b16              LDR      r3,[sp,#0x58]         ;412
00056c  e9dd0106          LDRD     r0,r1,[sp,#0x18]      ;412
000570  f7fffffe          BL       _DrawBitLine4BPP
000574  bf00              NOP                            ;413
                  |L1.1398|
000576  bf00              NOP                            ;407
000578  e9dd1015          LDRD     r1,r0,[sp,#0x54]      ;415
00057c  4408              ADD      r0,r0,r1              ;415
00057e  9016              STR      r0,[sp,#0x58]         ;415
000580  9805              LDR      r0,[sp,#0x14]         ;416
000582  4405              ADD      r5,r5,r0              ;416
000584  1c64              ADDS     r4,r4,#1              ;403
                  |L1.1414|
000586  4554              CMP      r4,r10                ;403
000588  dbc9              BLT      |L1.1310|
00058a  bf00              NOP      
00058c  e7bd              B        |L1.1290|
;;;419    
                          ENDP

                  _FillRect PROC
;;;423    */
;;;424    static void _FillRect(int x0, int y0, int x1, int y1) {
00058e  e92d5fff          PUSH     {r0-r12,lr}
000592  4680              MOV      r8,r0
000594  460e              MOV      r6,r1
000596  4693              MOV      r11,r2
000598  4699              MOV      r9,r3
;;;425      GUI_MEMDEV* pDev = GUI_MEMDEV_H2P(GUI_Context.hDevData);
00059a  4999              LDR      r1,|L1.2048|
00059c  f9b1004c          LDRSH    r0,[r1,#0x4c]  ; GUI_Context
0005a0  f7fffffe          BL       GUI_ALLOC_h2p
0005a4  9003              STR      r0,[sp,#0xc]
;;;426      U8* pData;
;;;427      int Bit, Len;
;;;428      int RemPixels;
;;;429      Len = x1 - x0 + 1;
0005a6  ebab0008          SUB      r0,r11,r8
0005aa  1c40              ADDS     r0,r0,#1
0005ac  9001              STR      r0,[sp,#4]
;;;430      /* Mark rectangle as modified */
;;;431      if (pDev->hUsage) {
0005ae  9803              LDR      r0,[sp,#0xc]
0005b0  8b00              LDRH     r0,[r0,#0x18]
0005b2  b178              CBZ      r0,|L1.1492|
;;;432        GUI_USAGE_AddRect(GUI_USAGE_H2P(pDev->hUsage), x0, y0, Len, y1 - y0 + 1);
0005b4  9903              LDR      r1,[sp,#0xc]
0005b6  f9b10018          LDRSH    r0,[r1,#0x18]
0005ba  f7fffffe          BL       GUI_ALLOC_h2p
0005be  4607              MOV      r7,r0
0005c0  eba90006          SUB      r0,r9,r6
0005c4  1c40              ADDS     r0,r0,#1
0005c6  9000              STR      r0,[sp,#0]
0005c8  4632              MOV      r2,r6
0005ca  4641              MOV      r1,r8
0005cc  4638              MOV      r0,r7
0005ce  9b01              LDR      r3,[sp,#4]
0005d0  f7fffffe          BL       GUI_USAGE_AddRect
                  |L1.1492|
;;;433      }
;;;434      /* Do the drawing */
;;;435      for (; y0 <= y1; y0++) {
0005d4  e087              B        |L1.1766|
                  |L1.1494|
;;;436        pData = _XY2PTR_BITOFFSET(x0, y0, &Bit);
0005d6  aa02              ADD      r2,sp,#8
0005d8  4631              MOV      r1,r6
0005da  4640              MOV      r0,r8
0005dc  f7fffffe          BL       _XY2PTR_BITOFFSET
0005e0  4604              MOV      r4,r0
;;;437        RemPixels = Len;
0005e2  9d01              LDR      r5,[sp,#4]
;;;438        if (GUI_Context.DrawMode & LCD_DRAWMODE_XOR) {
0005e4  4886              LDR      r0,|L1.2048|
0005e6  7c00              LDRB     r0,[r0,#0x10]  ; GUI_Context
0005e8  f0000001          AND      r0,r0,#1
0005ec  2800              CMP      r0,#0
0005ee  d032              BEQ      |L1.1622|
;;;439          if (Bit < 7) {
0005f0  9802              LDR      r0,[sp,#8]
0005f2  2807              CMP      r0,#7
0005f4  da10              BGE      |L1.1560|
;;;440            while ((Bit >= 0) && RemPixels--) {
0005f6  e007              B        |L1.1544|
                  |L1.1528|
;;;441              *pData ^= 1 << (Bit--);
0005f8  7820              LDRB     r0,[r4,#0]
0005fa  9a02              LDR      r2,[sp,#8]
0005fc  1e51              SUBS     r1,r2,#1
0005fe  9102              STR      r1,[sp,#8]
000600  2101              MOVS     r1,#1
000602  4091              LSLS     r1,r1,r2
000604  4048              EORS     r0,r0,r1
000606  7020              STRB     r0,[r4,#0]
                  |L1.1544|
000608  9802              LDR      r0,[sp,#8]            ;440
00060a  2800              CMP      r0,#0                 ;440
00060c  db03              BLT      |L1.1558|
00060e  0028              MOVS     r0,r5                 ;440
000610  f1a50501          SUB      r5,r5,#1              ;440
000614  d1f0              BNE      |L1.1528|
                  |L1.1558|
;;;442            }
;;;443            pData++;
000616  1c64              ADDS     r4,r4,#1
                  |L1.1560|
;;;444          }
;;;445          if (RemPixels > 0) {
000618  2d00              CMP      r5,#0
00061a  dd63              BLE      |L1.1764|
;;;446            int NumBytes = RemPixels >> 3;
00061c  10e8              ASRS     r0,r5,#3
;;;447            if (NumBytes > 0) {
00061e  2800              CMP      r0,#0
000620  dd09              BLE      |L1.1590|
;;;448              RemPixels -= NumBytes << 3;
000622  eba505c0          SUB      r5,r5,r0,LSL #3
;;;449              do {
000626  bf00              NOP      
                  |L1.1576|
;;;450                *pData ^= *pData;
000628  7821              LDRB     r1,[r4,#0]
00062a  4049              EORS     r1,r1,r1
00062c  7021              STRB     r1,[r4,#0]
;;;451                pData++;
00062e  1c64              ADDS     r4,r4,#1
;;;452              } while (--NumBytes);
000630  1e41              SUBS     r1,r0,#1
000632  0008              MOVS     r0,r1
000634  d1f8              BNE      |L1.1576|
                  |L1.1590|
;;;453            }
;;;454            Bit = 7;
000636  2107              MOVS     r1,#7
000638  9102              STR      r1,[sp,#8]
;;;455            while (RemPixels--) {
00063a  e007              B        |L1.1612|
                  |L1.1596|
;;;456              *pData ^= 1 << (Bit--);
00063c  7821              LDRB     r1,[r4,#0]
00063e  9b02              LDR      r3,[sp,#8]
000640  1e5a              SUBS     r2,r3,#1
000642  9202              STR      r2,[sp,#8]
000644  2201              MOVS     r2,#1
000646  409a              LSLS     r2,r2,r3
000648  4051              EORS     r1,r1,r2
00064a  7021              STRB     r1,[r4,#0]
                  |L1.1612|
00064c  0029              MOVS     r1,r5                 ;455
00064e  f1a50501          SUB      r5,r5,#1              ;455
000652  d1f3              BNE      |L1.1596|
;;;457            }
;;;458          }
000654  e046              B        |L1.1764|
                  |L1.1622|
;;;459        } else {  /* Fill */
;;;460          int Color, FillByte;
;;;461          Color    = (LCD_COLORINDEX & 1);
000656  486a              LDR      r0,|L1.2048|
000658  7880              LDRB     r0,[r0,#2]  ; GUI_Context
00065a  f0000a01          AND      r10,r0,#1
;;;462          FillByte = (-Color) & 0xFF;
00065e  f1ca0000          RSB      r0,r10,#0
000662  b2c0              UXTB     r0,r0
000664  9000              STR      r0,[sp,#0]
;;;463          if (Bit < 7) {
000666  9802              LDR      r0,[sp,#8]
000668  2807              CMP      r0,#7
00066a  da16              BGE      |L1.1690|
;;;464            while ((Bit >= 0) && RemPixels--) {
00066c  e00d              B        |L1.1674|
                  |L1.1646|
;;;465              *pData &= ~(1 << Bit);
00066e  7820              LDRB     r0,[r4,#0]
000670  2101              MOVS     r1,#1
000672  9a02              LDR      r2,[sp,#8]
000674  4091              LSLS     r1,r1,r2
000676  4388              BICS     r0,r0,r1
000678  7020              STRB     r0,[r4,#0]
;;;466              *pData |= Color << (Bit--);
00067a  7820              LDRB     r0,[r4,#0]
00067c  9a02              LDR      r2,[sp,#8]
00067e  1e51              SUBS     r1,r2,#1
000680  9102              STR      r1,[sp,#8]
000682  fa0af102          LSL      r1,r10,r2
000686  4308              ORRS     r0,r0,r1
000688  7020              STRB     r0,[r4,#0]
                  |L1.1674|
00068a  9802              LDR      r0,[sp,#8]            ;464
00068c  2800              CMP      r0,#0                 ;464
00068e  db03              BLT      |L1.1688|
000690  0028              MOVS     r0,r5                 ;464
000692  f1a50501          SUB      r5,r5,#1              ;464
000696  d1ea              BNE      |L1.1646|
                  |L1.1688|
;;;467            }
;;;468            pData++;
000698  1c64              ADDS     r4,r4,#1
                  |L1.1690|
;;;469          }
;;;470          if (RemPixels > 0) {
00069a  2d00              CMP      r5,#0
00069c  dd21              BLE      |L1.1762|
;;;471            int NumBytes = RemPixels >> 3;
00069e  10ef              ASRS     r7,r5,#3
;;;472            if (NumBytes > 0) {
0006a0  2f00              CMP      r7,#0
0006a2  dd08              BLE      |L1.1718|
;;;473              GUI_MEMSET(pData, FillByte, NumBytes);
0006a4  9800              LDR      r0,[sp,#0]
0006a6  b2c1              UXTB     r1,r0
0006a8  463a              MOV      r2,r7
0006aa  4620              MOV      r0,r4
0006ac  f7fffffe          BL       GUI__memset
;;;474              pData += NumBytes;
0006b0  443c              ADD      r4,r4,r7
;;;475              RemPixels -= NumBytes << 3;
0006b2  eba505c7          SUB      r5,r5,r7,LSL #3
                  |L1.1718|
;;;476            }
;;;477            Bit = 7;
0006b6  2007              MOVS     r0,#7
0006b8  9002              STR      r0,[sp,#8]
;;;478            while (RemPixels--) {
0006ba  e00d              B        |L1.1752|
                  |L1.1724|
;;;479              *pData &= ~(1 << Bit);
0006bc  7820              LDRB     r0,[r4,#0]
0006be  2101              MOVS     r1,#1
0006c0  9a02              LDR      r2,[sp,#8]
0006c2  4091              LSLS     r1,r1,r2
0006c4  4388              BICS     r0,r0,r1
0006c6  7020              STRB     r0,[r4,#0]
;;;480              *pData |= Color << (Bit--);
0006c8  7820              LDRB     r0,[r4,#0]
0006ca  9a02              LDR      r2,[sp,#8]
0006cc  1e51              SUBS     r1,r2,#1
0006ce  9102              STR      r1,[sp,#8]
0006d0  fa0af102          LSL      r1,r10,r2
0006d4  4308              ORRS     r0,r0,r1
0006d6  7020              STRB     r0,[r4,#0]
                  |L1.1752|
0006d8  0028              MOVS     r0,r5                 ;478
0006da  f1a50501          SUB      r5,r5,#1              ;478
0006de  d1ed              BNE      |L1.1724|
;;;481            }
;;;482          }
0006e0  bf00              NOP      
                  |L1.1762|
;;;483        }
0006e2  bf00              NOP      
                  |L1.1764|
0006e4  1c76              ADDS     r6,r6,#1              ;435
                  |L1.1766|
0006e6  454e              CMP      r6,r9                 ;435
0006e8  f77faf75          BLE      |L1.1494|
;;;484      }
;;;485    }
0006ec  e8bd9fff          POP      {r0-r12,pc}
;;;486    
                          ENDP

                  _DrawHLine PROC
;;;490    */
;;;491    static void _DrawHLine(int x0, int y, int x1) {
0006f0  b570              PUSH     {r4-r6,lr}
0006f2  4605              MOV      r5,r0
0006f4  460c              MOV      r4,r1
0006f6  4616              MOV      r6,r2
;;;492      _FillRect(x0, y, x1, y);
0006f8  4623              MOV      r3,r4
0006fa  4632              MOV      r2,r6
0006fc  4621              MOV      r1,r4
0006fe  4628              MOV      r0,r5
000700  f7fffffe          BL       _FillRect
;;;493    }
000704  bd70              POP      {r4-r6,pc}
;;;494    
                          ENDP

                  _DrawVLine PROC
;;;498    */
;;;499    static void _DrawVLine(int x , int y0, int y1) {
000706  e92d5ffc          PUSH     {r2-r12,lr}
00070a  4682              MOV      r10,r0
00070c  460e              MOV      r6,r1
00070e  4617              MOV      r7,r2
;;;500      GUI_MEMDEV* pDev   = GUI_MEMDEV_H2P(GUI_Context.hDevData);
000710  493b              LDR      r1,|L1.2048|
000712  f9b1004c          LDRSH    r0,[r1,#0x4c]  ; GUI_Context
000716  f7fffffe          BL       GUI_ALLOC_h2p
00071a  4680              MOV      r8,r0
;;;501      GUI_USAGE_h hUsage = pDev->hUsage; 
00071c  f9b8b018          LDRSH    r11,[r8,#0x18]
;;;502      GUI_USAGE*  pUsage = hUsage ? GUI_USAGE_H2P(hUsage) : NULL;
000720  f1bb0f00          CMP      r11,#0
000724  d003              BEQ      |L1.1838|
000726  4658              MOV      r0,r11
000728  f7fffffe          BL       GUI_ALLOC_h2p
00072c  e000              B        |L1.1840|
                  |L1.1838|
00072e  2000              MOVS     r0,#0
                  |L1.1840|
000730  4605              MOV      r5,r0
;;;503      U8* pData;
;;;504      int Bit, Mask;
;;;505      pData = _XY2PTR_BITOFFSET(x, y0, &Bit);
000732  aa01              ADD      r2,sp,#4
000734  4631              MOV      r1,r6
000736  4650              MOV      r0,r10
000738  f7fffffe          BL       _XY2PTR_BITOFFSET
00073c  4604              MOV      r4,r0
;;;506      Mask  = (1 << Bit);
00073e  2001              MOVS     r0,#1
000740  9901              LDR      r1,[sp,#4]
000742  fa00f901          LSL      r9,r0,r1
;;;507      if (GUI_Context.DrawMode & LCD_DRAWMODE_XOR) {
000746  482e              LDR      r0,|L1.2048|
000748  7c00              LDRB     r0,[r0,#0x10]  ; GUI_Context
00074a  f0000001          AND      r0,r0,#1
00074e  b198              CBZ      r0,|L1.1912|
;;;508        do {
000750  bf00              NOP      
                  |L1.1874|
;;;509          *pData ^= Mask;
000752  7820              LDRB     r0,[r4,#0]
000754  ea800009          EOR      r0,r0,r9
000758  7020              STRB     r0,[r4,#0]
;;;510          if (pUsage) {
00075a  b12d              CBZ      r5,|L1.1896|
;;;511            GUI_USAGE_AddPixel(pUsage, x, y0);
00075c  68a8              LDR      r0,[r5,#8]
00075e  4632              MOV      r2,r6
000760  4651              MOV      r1,r10
000762  6803              LDR      r3,[r0,#0]
000764  4628              MOV      r0,r5
000766  4798              BLX      r3
                  |L1.1896|
;;;512          }
;;;513          pData += pDev->BytesPerLine;
000768  f8d8000c          LDR      r0,[r8,#0xc]
00076c  4404              ADD      r4,r4,r0
;;;514        } while (++y0 <= y1);
00076e  1c70              ADDS     r0,r6,#1
000770  4606              MOV      r6,r0
000772  42b8              CMP      r0,r7
000774  dded              BLE      |L1.1874|
000776  e01e              B        |L1.1974|
                  |L1.1912|
;;;515      } else {
;;;516        int Pixel;
;;;517        Pixel = (LCD_COLORINDEX & 1) << Bit;
000778  4821              LDR      r0,|L1.2048|
00077a  7880              LDRB     r0,[r0,#2]  ; GUI_Context
00077c  f0000001          AND      r0,r0,#1
000780  9901              LDR      r1,[sp,#4]
000782  4088              LSLS     r0,r0,r1
000784  9000              STR      r0,[sp,#0]
;;;518        do {
000786  bf00              NOP      
                  |L1.1928|
;;;519          *pData &= ~Mask;
000788  7820              LDRB     r0,[r4,#0]
00078a  ea200009          BIC      r0,r0,r9
00078e  7020              STRB     r0,[r4,#0]
;;;520          *pData |= Pixel;
000790  7820              LDRB     r0,[r4,#0]
000792  9900              LDR      r1,[sp,#0]
000794  4308              ORRS     r0,r0,r1
000796  7020              STRB     r0,[r4,#0]
;;;521          if (pUsage) {
000798  b12d              CBZ      r5,|L1.1958|
;;;522            GUI_USAGE_AddPixel(pUsage, x, y0);
00079a  68a8              LDR      r0,[r5,#8]
00079c  4632              MOV      r2,r6
00079e  4651              MOV      r1,r10
0007a0  6803              LDR      r3,[r0,#0]
0007a2  4628              MOV      r0,r5
0007a4  4798              BLX      r3
                  |L1.1958|
;;;523          }
;;;524          pData += pDev->BytesPerLine;
0007a6  f8d8000c          LDR      r0,[r8,#0xc]
0007aa  4404              ADD      r4,r4,r0
;;;525        } while (++y0 <= y1);
0007ac  1c70              ADDS     r0,r6,#1
0007ae  4606              MOV      r6,r0
0007b0  42b8              CMP      r0,r7
0007b2  dde9              BLE      |L1.1928|
;;;526      }
0007b4  bf00              NOP      
                  |L1.1974|
;;;527    }
0007b6  e8bd9ffc          POP      {r2-r12,pc}
;;;528    
                          ENDP

                  _SetPixelIndex PROC
;;;532    */
;;;533    static void _SetPixelIndex(int x, int y, int Index) {
0007ba  e92d4ff8          PUSH     {r3-r11,lr}
0007be  4606              MOV      r6,r0
0007c0  460f              MOV      r7,r1
0007c2  4690              MOV      r8,r2
;;;534      GUI_MEMDEV* pDev = GUI_MEMDEV_H2P(GUI_Context.hDevData);
0007c4  490e              LDR      r1,|L1.2048|
0007c6  f9b1004c          LDRSH    r0,[r1,#0x4c]  ; GUI_Context
0007ca  f7fffffe          BL       GUI_ALLOC_h2p
0007ce  4605              MOV      r5,r0
;;;535      U8* pData;
;;;536      int Bit;
;;;537      pData   = _XY2PTR_BITOFFSET(x, y, &Bit);
0007d0  466a              MOV      r2,sp
0007d2  4639              MOV      r1,r7
0007d4  4630              MOV      r0,r6
0007d6  f7fffffe          BL       _XY2PTR_BITOFFSET
0007da  4604              MOV      r4,r0
;;;538      *pData &= ~(1 << Bit);
0007dc  7820              LDRB     r0,[r4,#0]
0007de  2101              MOVS     r1,#1
0007e0  9a00              LDR      r2,[sp,#0]
0007e2  4091              LSLS     r1,r1,r2
0007e4  4388              BICS     r0,r0,r1
0007e6  7020              STRB     r0,[r4,#0]
;;;539      *pData |= (Index & 1) << Bit;
0007e8  7820              LDRB     r0,[r4,#0]
0007ea  f0080101          AND      r1,r8,#1
0007ee  9a00              LDR      r2,[sp,#0]
0007f0  4091              LSLS     r1,r1,r2
0007f2  4308              ORRS     r0,r0,r1
0007f4  7020              STRB     r0,[r4,#0]
;;;540      if (pDev->hUsage) {
0007f6  8b28              LDRH     r0,[r5,#0x18]
0007f8  b1a0              CBZ      r0,|L1.2084|
;;;541        GUI_USAGE_AddPixel(GUI_USAGE_H2P(pDev->hUsage), x, y);
0007fa  f9b50018          LDRSH    r0,[r5,#0x18]
0007fe  e003              B        |L1.2056|
                  |L1.2048|
                          DCD      GUI_Context
                  |L1.2052|
                          DCD      aID
                  |L1.2056|
000808  f7fffffe          BL       GUI_ALLOC_h2p
00080c  4682              MOV      r10,r0
00080e  f9b50018          LDRSH    r0,[r5,#0x18]
000812  f7fffffe          BL       GUI_ALLOC_h2p
000816  6880              LDR      r0,[r0,#8]
000818  463a              MOV      r2,r7
00081a  4631              MOV      r1,r6
00081c  f8d09000          LDR      r9,[r0,#0]
000820  4650              MOV      r0,r10
000822  47c8              BLX      r9
                  |L1.2084|
;;;542      }
;;;543    }
000824  e8bd8ff8          POP      {r3-r11,pc}
;;;544    
                          ENDP

                  _XorPixel PROC
;;;548    */
;;;549    static void _XorPixel(int x, int y) {
000828  e92d43f8          PUSH     {r3-r9,lr}
00082c  4605              MOV      r5,r0
00082e  460e              MOV      r6,r1
;;;550      GUI_MEMDEV* pDev = GUI_MEMDEV_H2P(GUI_Context.hDevData);
000830  491a              LDR      r1,|L1.2204|
000832  f9b1004c          LDRSH    r0,[r1,#0x4c]  ; GUI_Context
000836  f7fffffe          BL       GUI_ALLOC_h2p
00083a  4604              MOV      r4,r0
;;;551      U8* pData;
;;;552      int Bit;
;;;553      pData   = _XY2PTR_BITOFFSET(x, y, &Bit);
00083c  466a              MOV      r2,sp
00083e  4631              MOV      r1,r6
000840  4628              MOV      r0,r5
000842  f7fffffe          BL       _XY2PTR_BITOFFSET
000846  4607              MOV      r7,r0
;;;554      *pData ^= (1 << Bit);
000848  7838              LDRB     r0,[r7,#0]
00084a  2101              MOVS     r1,#1
00084c  9a00              LDR      r2,[sp,#0]
00084e  4091              LSLS     r1,r1,r2
000850  4048              EORS     r0,r0,r1
000852  7038              STRB     r0,[r7,#0]
;;;555      if (pDev->hUsage) {
000854  8b20              LDRH     r0,[r4,#0x18]
000856  b178              CBZ      r0,|L1.2168|
;;;556        GUI_USAGE_AddPixel(GUI_USAGE_H2P(pDev->hUsage), x, y);
000858  f9b40018          LDRSH    r0,[r4,#0x18]
00085c  f7fffffe          BL       GUI_ALLOC_h2p
000860  4681              MOV      r9,r0
000862  f9b40018          LDRSH    r0,[r4,#0x18]
000866  f7fffffe          BL       GUI_ALLOC_h2p
00086a  6880              LDR      r0,[r0,#8]
00086c  4632              MOV      r2,r6
00086e  4629              MOV      r1,r5
000870  f8d08000          LDR      r8,[r0,#0]
000874  4648              MOV      r0,r9
000876  47c0              BLX      r8
                  |L1.2168|
;;;557      }
;;;558    }
000878  e8bd83f8          POP      {r3-r9,pc}
;;;559    
                          ENDP

                  _GetPixelIndex PROC
;;;563    */
;;;564    static unsigned int _GetPixelIndex(int x, int y) {
00087c  b5f8              PUSH     {r3-r7,lr}
00087e  4604              MOV      r4,r0
000880  460d              MOV      r5,r1
;;;565      U8* pData;
;;;566      int Bit;
;;;567      pData = _XY2PTR_BITOFFSET(x, y, &Bit);
000882  466a              MOV      r2,sp
000884  4629              MOV      r1,r5
000886  4620              MOV      r0,r4
000888  f7fffffe          BL       _XY2PTR_BITOFFSET
00088c  4606              MOV      r6,r0
;;;568      return (*pData >> Bit) & 1;
00088e  7830              LDRB     r0,[r6,#0]
000890  9900              LDR      r1,[sp,#0]
000892  4108              ASRS     r0,r0,r1
000894  f0000001          AND      r0,r0,#1
;;;569    }
000898  bdf8              POP      {r3-r7,pc}
;;;570    
                          ENDP

00089a  0000              DCW      0x0000
                  |L1.2204|
                          DCD      GUI_Context

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  aID
000000  00000001          DCW      0x0000,0x0001
000004  00020003          DCW      0x0002,0x0003
000008  00040005          DCW      0x0004,0x0005
00000c  00060007          DCW      0x0006,0x0007
000010  00080009          DCW      0x0008,0x0009
000014  000a000b          DCW      0x000a,0x000b
000018  000c000d          DCW      0x000c,0x000d
00001c  000e000f          DCW      0x000e,0x000f
                  GUI_MEMDEV__APIList1
                          DCD      GUI_MEMDEV__Color2Index
                          DCD      GUI_MEMDEV__Index2Color
                          DCD      GUI_MEMDEV__GetIndexMask
                          DCD      _DrawBitmap
                          DCD      _DrawHLine
                          DCD      _DrawVLine
                          DCD      _FillRect
                          DCD      _GetPixelIndex
                          DCD      GUI_MEMDEV__GetRect
                          DCD      _SetPixelIndex
                          DCD      _XorPixel
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000001
