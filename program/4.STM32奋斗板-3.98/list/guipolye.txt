; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\guipolye.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\guipolye.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -I.\GUI\AntiAlias -I.\GUI\Config -I.\GUI\ConvertColor -I.\GUI\ConvertMono -I.\GUI\Core -I.\GUI\Font -I.\GUI\GUI_X -I.\GUI\JPEG -I.\GUI\LCDDriver -I.\GUI\MemDev -I.\GUI\MultiLayer -I.\GUI\Widget -I.\GUI\WM -IC:\Users\Administrator\Desktop\gui\STM32·Ü¶·°å-3.98\RTE -Id:\Keil_v5\ARM\PACK\ARM\CMSIS\4.3.0\CMSIS\Include -Id:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.1.0\Device\Include -D__UVISION_VERSION=515 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\guipolye.crf GUI\Core\GUIPolyE.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _fround PROC
;;;44     */
;;;45     static int _fround(float f) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4604              MOV      r4,r0
;;;46       if (f>0)
000006  2100              MOVS     r1,#0
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       __aeabi_cfrcmple
00000e  d20c              BCS      |L1.42|
;;;47         return f+0.5;
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       __aeabi_f2d
000016  4605              MOV      r5,r0
000018  2200              MOVS     r2,#0
00001a  4b7d              LDR      r3,|L1.528|
00001c  f7fffffe          BL       __aeabi_dadd
000020  4607              MOV      r7,r0
000022  f7fffffe          BL       __aeabi_d2iz
                  |L1.38|
;;;48       return f-0.5;
;;;49     }
000026  e8bd81f0          POP      {r4-r8,pc}
                  |L1.42|
00002a  4620              MOV      r0,r4                 ;48
00002c  f7fffffe          BL       __aeabi_f2d
000030  4605              MOV      r5,r0                 ;48
000032  2200              MOVS     r2,#0                 ;48
000034  4b76              LDR      r3,|L1.528|
000036  f7fffffe          BL       __aeabi_dsub
00003a  4607              MOV      r7,r0                 ;48
00003c  f7fffffe          BL       __aeabi_d2iz
000040  e7f1              B        |L1.38|
;;;50     
                          ENDP

                  _Normalize PROC
;;;54     */
;;;55     static void _Normalize(tfPoint* pfPoint) {
000042  e92d5fff          PUSH     {r0-r12,lr}
000046  4604              MOV      r4,r0
;;;56       float fx = pfPoint->x;
000048  6825              LDR      r5,[r4,#0]
;;;57       float fy = pfPoint->y;
00004a  6866              LDR      r6,[r4,#4]
;;;58       float r = sqrt(fx*fx + fy*fy);
00004c  4631              MOV      r1,r6
00004e  4630              MOV      r0,r6
000050  f7fffffe          BL       __aeabi_fmul
000054  4683              MOV      r11,r0
000056  4629              MOV      r1,r5
000058  4628              MOV      r0,r5
00005a  f7fffffe          BL       __aeabi_fmul
00005e  4659              MOV      r1,r11
000060  9001              STR      r0,[sp,#4]
000062  f7fffffe          BL       __aeabi_fadd
000066  4682              MOV      r10,r0
000068  f7fffffe          BL       __aeabi_f2d
00006c  e9cd0102          STRD     r0,r1,[sp,#8]
000070  f7fffffe          BL       sqrt
000074  4607              MOV      r7,r0
000076  f7fffffe          BL       __aeabi_d2f
00007a  4681              MOV      r9,r0
;;;59       if (r > 0) {
00007c  2100              MOVS     r1,#0
00007e  4648              MOV      r0,r9
000080  f7fffffe          BL       __aeabi_cfrcmple
000084  d209              BCS      |L1.154|
;;;60         pfPoint->x = fx/r;
000086  4649              MOV      r1,r9
000088  4628              MOV      r0,r5
00008a  f7fffffe          BL       __aeabi_fdiv
00008e  6020              STR      r0,[r4,#0]
;;;61         pfPoint->y = fy/r;
000090  4649              MOV      r1,r9
000092  4630              MOV      r0,r6
000094  f7fffffe          BL       __aeabi_fdiv
000098  6060              STR      r0,[r4,#4]
                  |L1.154|
;;;62       }
;;;63     }
00009a  e8bd9fff          POP      {r0-r12,pc}
;;;64     
                          ENDP

                  _ReverseLen PROC
;;;68     */
;;;69     static void _ReverseLen(tfPoint* pfPoint) {
00009e  e92d5fff          PUSH     {r0-r12,lr}
0000a2  4604              MOV      r4,r0
;;;70       float fx = pfPoint->x;
0000a4  6825              LDR      r5,[r4,#0]
;;;71       float fy = pfPoint->y;
0000a6  6866              LDR      r6,[r4,#4]
;;;72       float r = sqrt(fx*fx/2 + fy*fy/2);
0000a8  4631              MOV      r1,r6
0000aa  4630              MOV      r0,r6
0000ac  f7fffffe          BL       __aeabi_fmul
0000b0  f04f4180          MOV      r1,#0x40000000
0000b4  9000              STR      r0,[sp,#0]
0000b6  f7fffffe          BL       __aeabi_fdiv
0000ba  4683              MOV      r11,r0
0000bc  4629              MOV      r1,r5
0000be  4628              MOV      r0,r5
0000c0  f7fffffe          BL       __aeabi_fmul
0000c4  f04f4180          MOV      r1,#0x40000000
0000c8  9000              STR      r0,[sp,#0]
0000ca  f7fffffe          BL       __aeabi_fdiv
0000ce  4659              MOV      r1,r11
0000d0  9001              STR      r0,[sp,#4]
0000d2  f7fffffe          BL       __aeabi_fadd
0000d6  4682              MOV      r10,r0
0000d8  f7fffffe          BL       __aeabi_f2d
0000dc  e9cd0102          STRD     r0,r1,[sp,#8]
0000e0  f7fffffe          BL       sqrt
0000e4  4607              MOV      r7,r0
0000e6  f7fffffe          BL       __aeabi_d2f
0000ea  4681              MOV      r9,r0
;;;73       if (r > 0) {
0000ec  2100              MOVS     r1,#0
0000ee  4648              MOV      r0,r9
0000f0  f7fffffe          BL       __aeabi_cfrcmple
0000f4  d211              BCS      |L1.282|
;;;74         pfPoint->x = fx/r/r;
0000f6  4649              MOV      r1,r9
0000f8  4628              MOV      r0,r5
0000fa  f7fffffe          BL       __aeabi_fdiv
0000fe  4607              MOV      r7,r0
000100  4649              MOV      r1,r9
000102  f7fffffe          BL       __aeabi_fdiv
000106  6020              STR      r0,[r4,#0]
;;;75         pfPoint->y = fy/r/r;
000108  4649              MOV      r1,r9
00010a  4630              MOV      r0,r6
00010c  f7fffffe          BL       __aeabi_fdiv
000110  4607              MOV      r7,r0
000112  4649              MOV      r1,r9
000114  f7fffffe          BL       __aeabi_fdiv
000118  6060              STR      r0,[r4,#4]
                  |L1.282|
;;;76       }
;;;77     }
00011a  e8bd9fff          POP      {r0-r12,pc}
;;;78     
                          ENDP

                  _GetVect PROC
;;;82     */
;;;83     static void _GetVect(tfPoint* pfPoint, const GUI_POINT* pSrc, int NumPoints, int Index) {
00011e  e92d47f0          PUSH     {r4-r10,lr}
000122  4606              MOV      r6,r0
000124  460c              MOV      r4,r1
000126  4615              MOV      r5,r2
000128  461f              MOV      r7,r3
;;;84       int Off0 = (Index + NumPoints-1) % NumPoints;
00012a  1978              ADDS     r0,r7,r5
00012c  1e40              SUBS     r0,r0,#1
00012e  fb90f1f5          SDIV     r1,r0,r5
000132  fb050811          MLS      r8,r5,r1,r0
;;;85       int Off1 = Index % NumPoints;
000136  fb97f0f5          SDIV     r0,r7,r5
00013a  fb057910          MLS      r9,r5,r0,r7
;;;86       pfPoint->x = pSrc[Off1].x - pSrc[Off0].x; 
00013e  f9341029          LDRSH    r1,[r4,r9,LSL #2]
000142  f9342028          LDRSH    r2,[r4,r8,LSL #2]
000146  1a88              SUBS     r0,r1,r2
000148  f7fffffe          BL       __aeabi_i2f
00014c  6030              STR      r0,[r6,#0]
;;;87       pfPoint->y = pSrc[Off1].y - pSrc[Off0].y; 
00014e  eb040189          ADD      r1,r4,r9,LSL #2
000152  f9b11002          LDRSH    r1,[r1,#2]
000156  eb040288          ADD      r2,r4,r8,LSL #2
00015a  f9b22002          LDRSH    r2,[r2,#2]
00015e  1a88              SUBS     r0,r1,r2
000160  f7fffffe          BL       __aeabi_i2f
000164  6070              STR      r0,[r6,#4]
;;;88     }
000166  e8bd87f0          POP      {r4-r10,pc}
;;;89     
                          ENDP

                  GUI_EnlargePolygon PROC
;;;126    
;;;127    void GUI_EnlargePolygon(GUI_POINT* pDest, const GUI_POINT* pSrc, int NumPoints, int Len) {
00016a  e92d4ff0          PUSH     {r4-r11,lr}
00016e  b085              SUB      sp,sp,#0x14
000170  4605              MOV      r5,r0
000172  460e              MOV      r6,r1
000174  4617              MOV      r7,r2
000176  4698              MOV      r8,r3
;;;128      int j;
;;;129      /* Calc destination points */
;;;130      for (j=0; j<NumPoints; j++) {
000178  2400              MOVS     r4,#0
00017a  e044              B        |L1.518|
                  |L1.380|
;;;131        int x, y;
;;;132        tfPoint aVect[2];
;;;133        /* Get the vectors */
;;;134        _GetVect(&aVect[0], pSrc, NumPoints, j);
00017c  4623              MOV      r3,r4
00017e  463a              MOV      r2,r7
000180  4631              MOV      r1,r6
000182  a801              ADD      r0,sp,#4
000184  f7fffffe          BL       _GetVect
;;;135        _GetVect(&aVect[1], pSrc, NumPoints, j+1);
000188  1c63              ADDS     r3,r4,#1
00018a  463a              MOV      r2,r7
00018c  4631              MOV      r1,r6
00018e  a803              ADD      r0,sp,#0xc
000190  f7fffffe          BL       _GetVect
;;;136        /* Normalize the vectors and add vectors */
;;;137        _Normalize(&aVect[0]);
000194  a801              ADD      r0,sp,#4
000196  f7fffffe          BL       _Normalize
;;;138        _Normalize(&aVect[1]);
00019a  a803              ADD      r0,sp,#0xc
00019c  f7fffffe          BL       _Normalize
;;;139        aVect[0].x += aVect[1].x;
0001a0  9903              LDR      r1,[sp,#0xc]
0001a2  9801              LDR      r0,[sp,#4]
0001a4  f7fffffe          BL       __aeabi_fadd
0001a8  9001              STR      r0,[sp,#4]
;;;140        aVect[0].y += aVect[1].y;
0001aa  9904              LDR      r1,[sp,#0x10]
0001ac  9802              LDR      r0,[sp,#8]
0001ae  f7fffffe          BL       __aeabi_fadd
0001b2  9002              STR      r0,[sp,#8]
;;;141        /* Resulting vector needs to be normalized again */
;;;142        _ReverseLen(&aVect[0]);
0001b4  a801              ADD      r0,sp,#4
0001b6  f7fffffe          BL       _ReverseLen
;;;143        x =  _fround(aVect[0].y * Len);
0001ba  4640              MOV      r0,r8
0001bc  f7fffffe          BL       __aeabi_i2f
0001c0  9000              STR      r0,[sp,#0]
0001c2  9902              LDR      r1,[sp,#8]
0001c4  f7fffffe          BL       __aeabi_fmul
0001c8  4683              MOV      r11,r0
0001ca  f7fffffe          BL       _fround
0001ce  4681              MOV      r9,r0
;;;144        y = -_fround(aVect[0].x * Len);
0001d0  4640              MOV      r0,r8
0001d2  f7fffffe          BL       __aeabi_i2f
0001d6  9000              STR      r0,[sp,#0]
0001d8  9901              LDR      r1,[sp,#4]
0001da  f7fffffe          BL       __aeabi_fmul
0001de  4683              MOV      r11,r0
0001e0  f7fffffe          BL       _fround
0001e4  f1c00a00          RSB      r10,r0,#0
;;;145        /* Store destination */
;;;146        (pDest+j)->x = (pSrc+j)->x + x;
0001e8  f8360024          LDRH     r0,[r6,r4,LSL #2]
0001ec  4448              ADD      r0,r0,r9
0001ee  b200              SXTH     r0,r0
0001f0  f8250024          STRH     r0,[r5,r4,LSL #2]
;;;147        (pDest+j)->y = (pSrc+j)->y + y;
0001f4  eb060084          ADD      r0,r6,r4,LSL #2
0001f8  8840              LDRH     r0,[r0,#2]
0001fa  4450              ADD      r0,r0,r10
0001fc  b200              SXTH     r0,r0
0001fe  eb050184          ADD      r1,r5,r4,LSL #2
000202  8048              STRH     r0,[r1,#2]
000204  1c64              ADDS     r4,r4,#1              ;130
                  |L1.518|
000206  42bc              CMP      r4,r7                 ;130
000208  dbb8              BLT      |L1.380|
;;;148      }
;;;149    }
00020a  b005              ADD      sp,sp,#0x14
00020c  e8bd8ff0          POP      {r4-r11,pc}
;;;150    #endif
                          ENDP

                  |L1.528|
                          DCD      0x3fe00000
