; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\wm_validate.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\wm_validate.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -I.\GUI\AntiAlias -I.\GUI\Config -I.\GUI\ConvertColor -I.\GUI\ConvertMono -I.\GUI\Core -I.\GUI\Font -I.\GUI\GUI_X -I.\GUI\JPEG -I.\GUI\LCDDriver -I.\GUI\MemDev -I.\GUI\MultiLayer -I.\GUI\Widget -I.\GUI\WM -IC:\Users\Administrator\Desktop\gui\STM32·Ü¶·°å-3.98\RTE -Id:\Keil_v5\ARM\PACK\ARM\CMSIS\4.3.0\CMSIS\Include -Id:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.1.0\Device\Include -D__UVISION_VERSION=515 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\wm_validate.crf GUI\WM\WM_Validate.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _SubRect PROC
;;;49     */
;;;50     static void _SubRect(GUI_RECT* pDest, const GUI_RECT* pr0, const GUI_RECT* pr1) {
000000  b510              PUSH     {r4,lr}
;;;51       if ((pDest == NULL) || (pr0 == NULL))
000002  b100              CBZ      r0,|L1.6|
000004  b901              CBNZ     r1,|L1.8|
                  |L1.6|
;;;52         return;
;;;53       *pDest = *pr0;	 
;;;54       if (pr1 == NULL)
;;;55         return;
;;;56       /* Check left/right sides */
;;;57       if (  (pr1->y0 <= pr0->y0)
;;;58           &&(pr1->y1 >= pr0->y1)) {
;;;59         pDest->x0 = Max(pr0->x0, pr1->x1);
;;;60         pDest->x1 = Min(pr0->x1, pr1->x0);
;;;61       }
;;;62       /* Check top/bottom sides */
;;;63       if (  (pr1->x0 <= pr0->x0)
;;;64           &&(pr1->x1 >= pr0->x1)) {
;;;65         pDest->y0 = Max(pr0->y0, pr1->y1);
;;;66         pDest->y1 = Min(pr0->y1, pr1->y0);
;;;67       }
;;;68     }
000006  bd10              POP      {r4,pc}
                  |L1.8|
000008  680b              LDR      r3,[r1,#0]            ;53
00000a  6003              STR      r3,[r0,#0]            ;53
00000c  684b              LDR      r3,[r1,#4]            ;53
00000e  6043              STR      r3,[r0,#4]            ;53
000010  b902              CBNZ     r2,|L1.20|
000012  e7f8              B        |L1.6|
                  |L1.20|
000014  f9b23002          LDRSH    r3,[r2,#2]            ;57
000018  f9b14002          LDRSH    r4,[r1,#2]            ;57
00001c  42a3              CMP      r3,r4                 ;57
00001e  dc1d              BGT      |L1.92|
000020  f9b23006          LDRSH    r3,[r2,#6]            ;58
000024  f9b14006          LDRSH    r4,[r1,#6]            ;58
000028  42a3              CMP      r3,r4                 ;58
00002a  db17              BLT      |L1.92|
00002c  f9b13000          LDRSH    r3,[r1,#0]            ;59
000030  f9b24004          LDRSH    r4,[r2,#4]            ;59
000034  42a3              CMP      r3,r4                 ;59
000036  dd02              BLE      |L1.62|
000038  f9b13000          LDRSH    r3,[r1,#0]            ;59
00003c  e001              B        |L1.66|
                  |L1.62|
00003e  f9b23004          LDRSH    r3,[r2,#4]            ;59
                  |L1.66|
000042  8003              STRH     r3,[r0,#0]            ;59
000044  f9b13004          LDRSH    r3,[r1,#4]            ;60
000048  f9b24000          LDRSH    r4,[r2,#0]            ;60
00004c  42a3              CMP      r3,r4                 ;60
00004e  dd02              BLE      |L1.86|
000050  f9b23000          LDRSH    r3,[r2,#0]            ;60
000054  e001              B        |L1.90|
                  |L1.86|
000056  f9b13004          LDRSH    r3,[r1,#4]            ;60
                  |L1.90|
00005a  8083              STRH     r3,[r0,#4]            ;60
                  |L1.92|
00005c  f9b23000          LDRSH    r3,[r2,#0]            ;63
000060  f9b14000          LDRSH    r4,[r1,#0]            ;63
000064  42a3              CMP      r3,r4                 ;63
000066  dc1d              BGT      |L1.164|
000068  f9b23004          LDRSH    r3,[r2,#4]            ;64
00006c  f9b14004          LDRSH    r4,[r1,#4]            ;64
000070  42a3              CMP      r3,r4                 ;64
000072  db17              BLT      |L1.164|
000074  f9b13002          LDRSH    r3,[r1,#2]            ;65
000078  f9b24006          LDRSH    r4,[r2,#6]            ;65
00007c  42a3              CMP      r3,r4                 ;65
00007e  dd02              BLE      |L1.134|
000080  f9b13002          LDRSH    r3,[r1,#2]            ;65
000084  e001              B        |L1.138|
                  |L1.134|
000086  f9b23006          LDRSH    r3,[r2,#6]            ;65
                  |L1.138|
00008a  8043              STRH     r3,[r0,#2]            ;65
00008c  f9b13006          LDRSH    r3,[r1,#6]            ;66
000090  f9b24002          LDRSH    r4,[r2,#2]            ;66
000094  42a3              CMP      r3,r4                 ;66
000096  dd02              BLE      |L1.158|
000098  f9b23002          LDRSH    r3,[r2,#2]            ;66
00009c  e001              B        |L1.162|
                  |L1.158|
00009e  f9b13006          LDRSH    r3,[r1,#6]            ;66
                  |L1.162|
0000a2  80c3              STRH     r3,[r0,#6]            ;66
                  |L1.164|
0000a4  bf00              NOP      
0000a6  e7ae              B        |L1.6|
;;;69     
                          ENDP

                  WM_ValidateRect PROC
;;;79     */
;;;80     void WM_ValidateRect(WM_HWIN hWin, const GUI_RECT*pRect) {
0000a8  b570              PUSH     {r4-r6,lr}
0000aa  4606              MOV      r6,r0
0000ac  460d              MOV      r5,r1
;;;81       WM_Obj* pWin;
;;;82       if (hWin) {
0000ae  b1f6              CBZ      r6,|L1.238|
;;;83         WM_LOCK();
;;;84         pWin = WM_HANDLE2PTR(hWin);
0000b0  4630              MOV      r0,r6
0000b2  f7fffffe          BL       GUI_ALLOC_h2p
0000b6  4604              MOV      r4,r0
;;;85         if (pWin->Status & WM_SF_INVALID) {
0000b8  7f20              LDRB     r0,[r4,#0x1c]
0000ba  f0000020          AND      r0,r0,#0x20
0000be  b1a8              CBZ      r0,|L1.236|
;;;86           if (pRect) {
0000c0  b15d              CBZ      r5,|L1.218|
;;;87             _SubRect(&pWin->InvalidRect, &pWin->InvalidRect, pRect);
0000c2  462a              MOV      r2,r5
0000c4  f1040108          ADD      r1,r4,#8
0000c8  4608              MOV      r0,r1
0000ca  f7fffffe          BL       _SubRect
;;;88             if (WM__RectIsNZ(&pWin->InvalidRect))
0000ce  f1040008          ADD      r0,r4,#8
0000d2  f7fffffe          BL       WM__RectIsNZ
0000d6  b100              CBZ      r0,|L1.218|
;;;89               goto Done;
0000d8  e009              B        |L1.238|
                  |L1.218|
;;;90           }
;;;91           pWin->Status &= ~WM_SF_INVALID;
0000da  8ba0              LDRH     r0,[r4,#0x1c]
0000dc  f0200020          BIC      r0,r0,#0x20
0000e0  83a0              STRH     r0,[r4,#0x1c]
;;;92           WM__NumInvalidWindows--;
0000e2  4803              LDR      r0,|L1.240|
0000e4  8800              LDRH     r0,[r0,#0]  ; WM__NumInvalidWindows
0000e6  1e40              SUBS     r0,r0,#1
0000e8  4901              LDR      r1,|L1.240|
0000ea  8008              STRH     r0,[r1,#0]
                  |L1.236|
;;;93         }
;;;94       Done:
0000ec  bf00              NOP      
                  |L1.238|
;;;95         WM_UNLOCK();
;;;96       }
;;;97     }
0000ee  bd70              POP      {r4-r6,pc}
;;;98     
                          ENDP

                  |L1.240|
                          DCD      WM__NumInvalidWindows
