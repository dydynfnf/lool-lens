; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\jdmerge.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\jdmerge.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -I.\GUI\AntiAlias -I.\GUI\Config -I.\GUI\ConvertColor -I.\GUI\ConvertMono -I.\GUI\Core -I.\GUI\Font -I.\GUI\GUI_X -I.\GUI\JPEG -I.\GUI\LCDDriver -I.\GUI\MemDev -I.\GUI\MultiLayer -I.\GUI\Widget -I.\GUI\WM -IC:\Users\Administrator\Desktop\gui\STM32·Ü¶·°å-3.98\RTE -Id:\Keil_v5\ARM\PACK\ARM\CMSIS\4.3.0\CMSIS\Include -Id:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.1.0\Device\Include -D__UVISION_VERSION=515 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\jdmerge.crf GUI\JPEG\jdmerge.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  build_ycc_rgb_table PROC
;;;82     LOCAL(void)
;;;83     build_ycc_rgb_table (j_decompress_ptr cinfo)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;84     {
000004  4605              MOV      r5,r0
;;;85       my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
000006  f8d541c4          LDR      r4,[r5,#0x1c4]
;;;86       int i;
;;;87       INT32 x;
;;;88       SHIFT_TEMPS
;;;89     
;;;90       upsample->Cr_r_tab = (int *)
00000a  6868              LDR      r0,[r5,#4]
00000c  f44f6280          MOV      r2,#0x400
000010  2101              MOVS     r1,#1
000012  6803              LDR      r3,[r0,#0]
000014  4628              MOV      r0,r5
000016  4798              BLX      r3
000018  6120              STR      r0,[r4,#0x10]
;;;91         (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
;;;92     				(MAXJSAMPLE+1) * SIZEOF(int));
;;;93       upsample->Cb_b_tab = (int *)
00001a  6868              LDR      r0,[r5,#4]
00001c  f44f6280          MOV      r2,#0x400
000020  2101              MOVS     r1,#1
000022  6803              LDR      r3,[r0,#0]
000024  4628              MOV      r0,r5
000026  4798              BLX      r3
000028  6160              STR      r0,[r4,#0x14]
;;;94         (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
;;;95     				(MAXJSAMPLE+1) * SIZEOF(int));
;;;96       upsample->Cr_g_tab = (INT32 *)
00002a  6868              LDR      r0,[r5,#4]
00002c  f44f6280          MOV      r2,#0x400
000030  2101              MOVS     r1,#1
000032  6803              LDR      r3,[r0,#0]
000034  4628              MOV      r0,r5
000036  4798              BLX      r3
000038  61a0              STR      r0,[r4,#0x18]
;;;97         (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
;;;98     				(MAXJSAMPLE+1) * SIZEOF(INT32));
;;;99       upsample->Cb_g_tab = (INT32 *)
00003a  6868              LDR      r0,[r5,#4]
00003c  f44f6280          MOV      r2,#0x400
000040  2101              MOVS     r1,#1
000042  6803              LDR      r3,[r0,#0]
000044  4628              MOV      r0,r5
000046  4798              BLX      r3
000048  61e0              STR      r0,[r4,#0x1c]
;;;100        (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
;;;101    				(MAXJSAMPLE+1) * SIZEOF(INT32));
;;;102    
;;;103      for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
00004a  2600              MOVS     r6,#0
00004c  f06f077f          MVN      r7,#0x7f
000050  e020              B        |L1.148|
                  |L1.82|
;;;104        /* i is the actual input pixel value, in the range 0..MAXJSAMPLE */
;;;105        /* The Cb or Cr value we are thinking of is x = i - CENTERJSAMPLE */
;;;106        /* Cr=>R value is nearest int to 1.40200 * x */
;;;107        upsample->Cr_r_tab[i] = (int)
000052  49fe              LDR      r1,|L1.1100|
000054  fb07f001          MUL      r0,r7,r1
000058  f5004000          ADD      r0,r0,#0x8000
00005c  1400              ASRS     r0,r0,#16
00005e  6921              LDR      r1,[r4,#0x10]
000060  f8410026          STR      r0,[r1,r6,LSL #2]
;;;108    		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
;;;109        /* Cb=>B value is nearest int to 1.77200 * x */
;;;110        upsample->Cb_b_tab[i] = (int)
000064  49fa              LDR      r1,|L1.1104|
000066  fb07f001          MUL      r0,r7,r1
00006a  f5004000          ADD      r0,r0,#0x8000
00006e  1400              ASRS     r0,r0,#16
000070  6961              LDR      r1,[r4,#0x14]
000072  f8410026          STR      r0,[r1,r6,LSL #2]
;;;111    		    RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
;;;112        /* Cr=>G value is scaled-up -0.71414 * x */
;;;113        upsample->Cr_g_tab[i] = (- FIX(0.71414)) * x;
000076  48f7              LDR      r0,|L1.1108|
000078  4378              MULS     r0,r7,r0
00007a  69a1              LDR      r1,[r4,#0x18]
00007c  f8410026          STR      r0,[r1,r6,LSL #2]
;;;114        /* Cb=>G value is scaled-up -0.34414 * x */
;;;115        /* We also add in ONE_HALF so that need not do it in inner loop */
;;;116        upsample->Cb_g_tab[i] = (- FIX(0.34414)) * x + ONE_HALF;
000080  49f5              LDR      r1,|L1.1112|
000082  fb07f001          MUL      r0,r7,r1
000086  f5004000          ADD      r0,r0,#0x8000
00008a  69e1              LDR      r1,[r4,#0x1c]
00008c  f8410026          STR      r0,[r1,r6,LSL #2]
000090  1c76              ADDS     r6,r6,#1              ;103
000092  1c7f              ADDS     r7,r7,#1              ;103
                  |L1.148|
000094  2eff              CMP      r6,#0xff              ;103
000096  dddc              BLE      |L1.82|
;;;117      }
;;;118    }
000098  e8bd81f0          POP      {r4-r8,pc}
;;;119    
                          ENDP

                  start_pass_merged_upsample PROC
;;;125    METHODDEF(void)
;;;126    start_pass_merged_upsample (j_decompress_ptr cinfo)
00009c  f8d011c4          LDR      r1,[r0,#0x1c4]
;;;127    {
;;;128      my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
;;;129    
;;;130      /* Mark the spare buffer empty */
;;;131      upsample->spare_full = FALSE;
0000a0  2200              MOVS     r2,#0
0000a2  624a              STR      r2,[r1,#0x24]
;;;132      /* Initialize total-height counter for detecting bottom of image */
;;;133      upsample->rows_to_go = cinfo->output_height;
0000a4  6f42              LDR      r2,[r0,#0x74]
0000a6  62ca              STR      r2,[r1,#0x2c]
;;;134    }
0000a8  4770              BX       lr
;;;135    
                          ENDP

                  merged_2v_upsample PROC
;;;143    METHODDEF(void)
;;;144    merged_2v_upsample (j_decompress_ptr cinfo,
0000aa  e92d4fff          PUSH     {r0-r11,lr}
;;;145    		    JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
;;;146    		    JDIMENSION in_row_groups_avail,
;;;147    		    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
;;;148    		    JDIMENSION out_rows_avail)
;;;149    /* 2:1 vertical sampling case: may need a spare row. */
;;;150    {
0000ae  b085              SUB      sp,sp,#0x14
0000b0  4682              MOV      r10,r0
0000b2  4617              MOV      r7,r2
0000b4  469b              MOV      r11,r3
0000b6  e9dd6913          LDRD     r6,r9,[sp,#0x4c]
0000ba  f8dd8048          LDR      r8,[sp,#0x48]
;;;151      my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
0000be  f8da41c4          LDR      r4,[r10,#0x1c4]
;;;152      JSAMPROW work_ptrs[2];
;;;153      JDIMENSION num_rows;		/* number of rows returned to caller */
;;;154    
;;;155      GUI_USE_PARA(in_row_groups_avail);
0000c2  bf00              NOP      
;;;156      if (upsample->spare_full) {
0000c4  6a60              LDR      r0,[r4,#0x24]
0000c6  b180              CBZ      r0,|L1.234|
;;;157        /* If we have a spare row saved from a previous cycle, just return it. */
;;;158        jcopy_sample_rows(& upsample->spare_row, 0, output_buf + *out_row_ctr, 0,
0000c8  2101              MOVS     r1,#1
0000ca  6aa0              LDR      r0,[r4,#0x28]
0000cc  e9cd1000          STRD     r1,r0,[sp,#0]
0000d0  6830              LDR      r0,[r6,#0]
0000d2  eb080280          ADD      r2,r8,r0,LSL #2
0000d6  2300              MOVS     r3,#0
0000d8  4619              MOV      r1,r3
0000da  f1040020          ADD      r0,r4,#0x20
0000de  f7fffffe          BL       jcopy_sample_rows
;;;159    		      1, upsample->out_row_width);
;;;160        num_rows = 1;
0000e2  2501              MOVS     r5,#1
;;;161        upsample->spare_full = FALSE;
0000e4  2000              MOVS     r0,#0
0000e6  6260              STR      r0,[r4,#0x24]
0000e8  e021              B        |L1.302|
                  |L1.234|
;;;162      } else {
;;;163        /* Figure number of rows to return to caller. */
;;;164        num_rows = 2;
0000ea  2502              MOVS     r5,#2
;;;165        /* Not more than the distance to the end of the image. */
;;;166        if (num_rows > upsample->rows_to_go)
0000ec  6ae0              LDR      r0,[r4,#0x2c]
0000ee  42a8              CMP      r0,r5
0000f0  d200              BCS      |L1.244|
;;;167          num_rows = upsample->rows_to_go;
0000f2  6ae5              LDR      r5,[r4,#0x2c]
                  |L1.244|
;;;168        /* And not more than what the client can accept: */
;;;169        out_rows_avail -= *out_row_ctr;
0000f4  6830              LDR      r0,[r6,#0]
0000f6  eba90900          SUB      r9,r9,r0
;;;170        if (num_rows > out_rows_avail)
0000fa  454d              CMP      r5,r9
0000fc  d900              BLS      |L1.256|
;;;171          num_rows = out_rows_avail;
0000fe  464d              MOV      r5,r9
                  |L1.256|
;;;172        /* Create output pointer array for upsampler. */
;;;173        work_ptrs[0] = output_buf[*out_row_ctr];
000100  6830              LDR      r0,[r6,#0]
000102  f8580020          LDR      r0,[r8,r0,LSL #2]
000106  9003              STR      r0,[sp,#0xc]
;;;174        if (num_rows > 1) {
000108  2d01              CMP      r5,#1
00010a  d905              BLS      |L1.280|
;;;175          work_ptrs[1] = output_buf[*out_row_ctr + 1];
00010c  6830              LDR      r0,[r6,#0]
00010e  1c40              ADDS     r0,r0,#1
000110  f8580020          LDR      r0,[r8,r0,LSL #2]
000114  9004              STR      r0,[sp,#0x10]
000116  e003              B        |L1.288|
                  |L1.280|
;;;176        } else {
;;;177          work_ptrs[1] = upsample->spare_row;
000118  6a20              LDR      r0,[r4,#0x20]
00011a  9004              STR      r0,[sp,#0x10]
;;;178          upsample->spare_full = TRUE;
00011c  2001              MOVS     r0,#1
00011e  6260              STR      r0,[r4,#0x24]
                  |L1.288|
;;;179        }
;;;180        /* Now do the upsampling. */
;;;181        (*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr, work_ptrs);
000120  683a              LDR      r2,[r7,#0]
000122  ab03              ADD      r3,sp,#0xc
000124  f8d4c00c          LDR      r12,[r4,#0xc]
000128  4650              MOV      r0,r10
00012a  9906              LDR      r1,[sp,#0x18]
00012c  47e0              BLX      r12
                  |L1.302|
;;;182      }
;;;183    
;;;184      /* Adjust counts */
;;;185      *out_row_ctr += num_rows;
00012e  6830              LDR      r0,[r6,#0]
000130  4428              ADD      r0,r0,r5
000132  6030              STR      r0,[r6,#0]
;;;186      upsample->rows_to_go -= num_rows;
000134  6ae0              LDR      r0,[r4,#0x2c]
000136  1b40              SUBS     r0,r0,r5
000138  62e0              STR      r0,[r4,#0x2c]
;;;187      /* When the buffer is emptied, declare this input row group consumed */
;;;188      if (! upsample->spare_full)
00013a  6a60              LDR      r0,[r4,#0x24]
00013c  b910              CBNZ     r0,|L1.324|
;;;189        (*in_row_group_ctr)++;
00013e  6838              LDR      r0,[r7,#0]
000140  1c40              ADDS     r0,r0,#1
000142  6038              STR      r0,[r7,#0]
                  |L1.324|
;;;190    }
000144  b009              ADD      sp,sp,#0x24
000146  e8bd8ff0          POP      {r4-r11,pc}
;;;191    
                          ENDP

                  merged_1v_upsample PROC
;;;193    METHODDEF(void)
;;;194    merged_1v_upsample (j_decompress_ptr cinfo,
00014a  e92d5ff0          PUSH     {r4-r12,lr}
;;;195    		    JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
;;;196    		    JDIMENSION in_row_groups_avail,
;;;197    		    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
;;;198    		    JDIMENSION out_rows_avail)
;;;199    /* 1:1 vertical sampling case: much easier, never need a spare row. */
;;;200    {
00014e  4606              MOV      r6,r0
000150  468b              MOV      r11,r1
000152  4614              MOV      r4,r2
000154  461f              MOV      r7,r3
000156  e9dd590b          LDRD     r5,r9,[sp,#0x2c]
00015a  f8dd8028          LDR      r8,[sp,#0x28]
;;;201      my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
00015e  f8d6a1c4          LDR      r10,[r6,#0x1c4]
;;;202    
;;;203      GUI_USE_PARA(out_rows_avail);
000162  bf00              NOP      
;;;204      GUI_USE_PARA(in_row_groups_avail);
000164  bf00              NOP      
;;;205      /* Just do the upsampling. */
;;;206      (*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr,
000166  6828              LDR      r0,[r5,#0]
000168  eb080380          ADD      r3,r8,r0,LSL #2
00016c  6822              LDR      r2,[r4,#0]
00016e  4659              MOV      r1,r11
000170  4630              MOV      r0,r6
000172  f8dac00c          LDR      r12,[r10,#0xc]
000176  47e0              BLX      r12
;;;207    			 output_buf + *out_row_ctr);
;;;208      /* Adjust counts */
;;;209      (*out_row_ctr)++;
000178  6828              LDR      r0,[r5,#0]
00017a  1c40              ADDS     r0,r0,#1
00017c  6028              STR      r0,[r5,#0]
;;;210      (*in_row_group_ctr)++;
00017e  6820              LDR      r0,[r4,#0]
000180  1c40              ADDS     r0,r0,#1
000182  6020              STR      r0,[r4,#0]
;;;211    }
000184  e8bd9ff0          POP      {r4-r12,pc}
;;;212    
                          ENDP

                  h2v1_merged_upsample PROC
;;;228    METHODDEF(void)
;;;229    h2v1_merged_upsample (j_decompress_ptr cinfo,
000188  e92d4fff          PUSH     {r0-r11,lr}
;;;230    		      JSAMPIMAGE input_buf, JDIMENSION in_row_group_ctr,
;;;231    		      JSAMPARRAY output_buf)
;;;232    {
00018c  b087              SUB      sp,sp,#0x1c
00018e  4604              MOV      r4,r0
000190  4617              MOV      r7,r2
;;;233      my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
000192  f8d4c1c4          LDR      r12,[r4,#0x1c4]
;;;234      register int y, cred, cgreen, cblue;
;;;235      int cb, cr;
;;;236      register JSAMPROW outptr;
;;;237      JSAMPROW inptr0, inptr1, inptr2;
;;;238      JDIMENSION col;
;;;239      /* copy these pointers into registers if possible */
;;;240      register JSAMPLE * range_limit = cinfo->sample_range_limit;
000196  f8d42144          LDR      r2,[r4,#0x144]
;;;241      int * Crrtab = upsample->Cr_r_tab;
00019a  f8dcb010          LDR      r11,[r12,#0x10]
00019e  f8cdb00c          STR      r11,[sp,#0xc]
;;;242      int * Cbbtab = upsample->Cb_b_tab;
0001a2  f8dcb014          LDR      r11,[r12,#0x14]
0001a6  f8cdb008          STR      r11,[sp,#8]
;;;243      INT32 * Crgtab = upsample->Cr_g_tab;
0001aa  f8dcb018          LDR      r11,[r12,#0x18]
0001ae  f8cdb004          STR      r11,[sp,#4]
;;;244      INT32 * Cbgtab = upsample->Cb_g_tab;
0001b2  f8dcb01c          LDR      r11,[r12,#0x1c]
0001b6  f8cdb000          STR      r11,[sp,#0]
;;;245      SHIFT_TEMPS
;;;246    
;;;247      inptr0 = input_buf[0][in_row_group_ctr];
0001ba  f8ddb020          LDR      r11,[sp,#0x20]
0001be  f8dbb000          LDR      r11,[r11,#0]
0001c2  f85b6027          LDR      r6,[r11,r7,LSL #2]
;;;248      inptr1 = input_buf[1][in_row_group_ctr];
0001c6  f8ddb020          LDR      r11,[sp,#0x20]
0001ca  f8dbb004          LDR      r11,[r11,#4]
0001ce  f85bb027          LDR      r11,[r11,r7,LSL #2]
0001d2  f8cdb018          STR      r11,[sp,#0x18]
;;;249      inptr2 = input_buf[2][in_row_group_ctr];
0001d6  f8ddb020          LDR      r11,[sp,#0x20]
0001da  f8dbb008          LDR      r11,[r11,#8]
0001de  f85bb027          LDR      r11,[r11,r7,LSL #2]
0001e2  f8cdb014          STR      r11,[sp,#0x14]
;;;250      outptr = output_buf[0];
0001e6  f8ddb028          LDR      r11,[sp,#0x28]
0001ea  f8db0000          LDR      r0,[r11,#0]
;;;251      /* Loop for each pair of output pixels */
;;;252      for (col = cinfo->output_width >> 1; col > 0; col--) {
0001ee  f8d4b070          LDR      r11,[r4,#0x70]
0001f2  ea4f0b5b          LSR      r11,r11,#1
0001f6  f8cdb010          STR      r11,[sp,#0x10]
0001fa  e04e              B        |L1.666|
                  |L1.508|
;;;253        /* Do the chroma part of the calculation */
;;;254        cb = GETJSAMPLE(*inptr1++);
0001fc  f8ddb018          LDR      r11,[sp,#0x18]
000200  f81b3b01          LDRB     r3,[r11],#1
000204  f8cdb018          STR      r11,[sp,#0x18]
;;;255        cr = GETJSAMPLE(*inptr2++);
000208  f8ddb014          LDR      r11,[sp,#0x14]
00020c  f81b5b01          LDRB     r5,[r11],#1
000210  f8cdb014          STR      r11,[sp,#0x14]
;;;256        cred = Crrtab[cr];
000214  f8ddb00c          LDR      r11,[sp,#0xc]
000218  f85b8025          LDR      r8,[r11,r5,LSL #2]
;;;257        cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
00021c  f8ddb000          LDR      r11,[sp,#0]
000220  f85be023          LDR      lr,[r11,r3,LSL #2]
000224  f8ddb004          LDR      r11,[sp,#4]
000228  f85bb025          LDR      r11,[r11,r5,LSL #2]
00022c  44f3              ADD      r11,r11,lr
00022e  ea4f492b          ASR      r9,r11,#16
;;;258        cblue = Cbbtab[cb];
000232  f8ddb008          LDR      r11,[sp,#8]
000236  f85ba023          LDR      r10,[r11,r3,LSL #2]
;;;259        /* Fetch 2 Y values and emit 2 pixels */
;;;260        y  = GETJSAMPLE(*inptr0++);
00023a  f8161b01          LDRB     r1,[r6],#1
;;;261        outptr[RGB_RED] =   range_limit[y + cred];
00023e  eb010b08          ADD      r11,r1,r8
000242  f812b00b          LDRB     r11,[r2,r11]
000246  f880b000          STRB     r11,[r0,#0]
;;;262        outptr[RGB_GREEN] = range_limit[y + cgreen];
00024a  eb010b09          ADD      r11,r1,r9
00024e  f812b00b          LDRB     r11,[r2,r11]
000252  f880b001          STRB     r11,[r0,#1]
;;;263        outptr[RGB_BLUE] =  range_limit[y + cblue];
000256  eb010b0a          ADD      r11,r1,r10
00025a  f812b00b          LDRB     r11,[r2,r11]
00025e  f880b002          STRB     r11,[r0,#2]
;;;264        outptr += RGB_PIXELSIZE;
000262  1cc0              ADDS     r0,r0,#3
;;;265        y  = GETJSAMPLE(*inptr0++);
000264  f8161b01          LDRB     r1,[r6],#1
;;;266        outptr[RGB_RED] =   range_limit[y + cred];
000268  eb010b08          ADD      r11,r1,r8
00026c  f812b00b          LDRB     r11,[r2,r11]
000270  f880b000          STRB     r11,[r0,#0]
;;;267        outptr[RGB_GREEN] = range_limit[y + cgreen];
000274  eb010b09          ADD      r11,r1,r9
000278  f812b00b          LDRB     r11,[r2,r11]
00027c  f880b001          STRB     r11,[r0,#1]
;;;268        outptr[RGB_BLUE] =  range_limit[y + cblue];
000280  eb010b0a          ADD      r11,r1,r10
000284  f812b00b          LDRB     r11,[r2,r11]
000288  f880b002          STRB     r11,[r0,#2]
;;;269        outptr += RGB_PIXELSIZE;
00028c  1cc0              ADDS     r0,r0,#3
00028e  f8ddb010          LDR      r11,[sp,#0x10]        ;252
000292  f1ab0b01          SUB      r11,r11,#1            ;252
000296  f8cdb010          STR      r11,[sp,#0x10]        ;252
                  |L1.666|
00029a  f8ddb010          LDR      r11,[sp,#0x10]        ;252
00029e  f1bb0f00          CMP      r11,#0                ;252
0002a2  d1ab              BNE      |L1.508|
;;;270      }
;;;271      /* If image width is odd, do the last output column separately */
;;;272      if (cinfo->output_width & 1) {
0002a4  f894b070          LDRB     r11,[r4,#0x70]
0002a8  f00b0b01          AND      r11,r11,#1
0002ac  f1bb0f00          CMP      r11,#0
0002b0  d02d              BEQ      |L1.782|
;;;273        cb = GETJSAMPLE(*inptr1);
0002b2  f8ddb018          LDR      r11,[sp,#0x18]
0002b6  f89b3000          LDRB     r3,[r11,#0]
;;;274        cr = GETJSAMPLE(*inptr2);
0002ba  f8ddb014          LDR      r11,[sp,#0x14]
0002be  f89b5000          LDRB     r5,[r11,#0]
;;;275        cred = Crrtab[cr];
0002c2  f8ddb00c          LDR      r11,[sp,#0xc]
0002c6  f85b8025          LDR      r8,[r11,r5,LSL #2]
;;;276        cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
0002ca  f8ddb000          LDR      r11,[sp,#0]
0002ce  f85be023          LDR      lr,[r11,r3,LSL #2]
0002d2  f8ddb004          LDR      r11,[sp,#4]
0002d6  f85bb025          LDR      r11,[r11,r5,LSL #2]
0002da  44f3              ADD      r11,r11,lr
0002dc  ea4f492b          ASR      r9,r11,#16
;;;277        cblue = Cbbtab[cb];
0002e0  f8ddb008          LDR      r11,[sp,#8]
0002e4  f85ba023          LDR      r10,[r11,r3,LSL #2]
;;;278        y  = GETJSAMPLE(*inptr0);
0002e8  7831              LDRB     r1,[r6,#0]
;;;279        outptr[RGB_RED] =   range_limit[y + cred];
0002ea  eb010b08          ADD      r11,r1,r8
0002ee  f812b00b          LDRB     r11,[r2,r11]
0002f2  f880b000          STRB     r11,[r0,#0]
;;;280        outptr[RGB_GREEN] = range_limit[y + cgreen];
0002f6  eb010b09          ADD      r11,r1,r9
0002fa  f812b00b          LDRB     r11,[r2,r11]
0002fe  f880b001          STRB     r11,[r0,#1]
;;;281        outptr[RGB_BLUE] =  range_limit[y + cblue];
000302  eb010b0a          ADD      r11,r1,r10
000306  f812b00b          LDRB     r11,[r2,r11]
00030a  f880b002          STRB     r11,[r0,#2]
                  |L1.782|
;;;282      }
;;;283    }
00030e  b00b              ADD      sp,sp,#0x2c
000310  e8bd8ff0          POP      {r4-r11,pc}
;;;284    
                          ENDP

                  h2v2_merged_upsample PROC
;;;290    METHODDEF(void)
;;;291    h2v2_merged_upsample (j_decompress_ptr cinfo,
000314  e92d4fff          PUSH     {r0-r11,lr}
;;;292    		      JSAMPIMAGE input_buf, JDIMENSION in_row_group_ctr,
;;;293    		      JSAMPARRAY output_buf)
;;;294    {
000318  b088              SUB      sp,sp,#0x20
00031a  4617              MOV      r7,r2
;;;295      my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
00031c  f8ddb020          LDR      r11,[sp,#0x20]
000320  f8dbb1c4          LDR      r11,[r11,#0x1c4]
000324  f8cdb01c          STR      r11,[sp,#0x1c]
;;;296      register int y, cred, cgreen, cblue;
;;;297      int cb, cr;
;;;298      register JSAMPROW outptr0, outptr1;
;;;299      JSAMPROW inptr00, inptr01, inptr1, inptr2;
;;;300      JDIMENSION col;
;;;301      /* copy these pointers into registers if possible */
;;;302      register JSAMPLE * range_limit = cinfo->sample_range_limit;
000328  f8ddb020          LDR      r11,[sp,#0x20]
00032c  f8db1144          LDR      r1,[r11,#0x144]
;;;303      int * Crrtab = upsample->Cr_r_tab;
000330  f8ddb01c          LDR      r11,[sp,#0x1c]
000334  f8dbb010          LDR      r11,[r11,#0x10]
000338  f8cdb00c          STR      r11,[sp,#0xc]
;;;304      int * Cbbtab = upsample->Cb_b_tab;
00033c  f8ddb01c          LDR      r11,[sp,#0x1c]
000340  f8dbb014          LDR      r11,[r11,#0x14]
000344  f8cdb008          STR      r11,[sp,#8]
;;;305      INT32 * Crgtab = upsample->Cr_g_tab;
000348  f8ddb01c          LDR      r11,[sp,#0x1c]
00034c  f8dbb018          LDR      r11,[r11,#0x18]
000350  f8cdb004          STR      r11,[sp,#4]
;;;306      INT32 * Cbgtab = upsample->Cb_g_tab;
000354  f8ddb01c          LDR      r11,[sp,#0x1c]
000358  f8dbb01c          LDR      r11,[r11,#0x1c]
00035c  f8cdb000          STR      r11,[sp,#0]
;;;307      SHIFT_TEMPS
;;;308    
;;;309      inptr00 = input_buf[0][in_row_group_ctr*2];
000360  f8ddb024          LDR      r11,[sp,#0x24]
000364  f8dbb000          LDR      r11,[r11,#0]
000368  ea4f0e47          LSL      lr,r7,#1
00036c  f85b902e          LDR      r9,[r11,lr,LSL #2]
;;;310      inptr01 = input_buf[0][in_row_group_ctr*2 + 1];
000370  f8ddb024          LDR      r11,[sp,#0x24]
000374  f8dbb000          LDR      r11,[r11,#0]
000378  f04f0e01          MOV      lr,#1
00037c  eb0e0e47          ADD      lr,lr,r7,LSL #1
000380  f85ba02e          LDR      r10,[r11,lr,LSL #2]
;;;311      inptr1 = input_buf[1][in_row_group_ctr];
000384  f8ddb024          LDR      r11,[sp,#0x24]
000388  f8dbb004          LDR      r11,[r11,#4]
00038c  f85bb027          LDR      r11,[r11,r7,LSL #2]
000390  f8cdb018          STR      r11,[sp,#0x18]
;;;312      inptr2 = input_buf[2][in_row_group_ctr];
000394  f8ddb024          LDR      r11,[sp,#0x24]
000398  f8dbb008          LDR      r11,[r11,#8]
00039c  f85bb027          LDR      r11,[r11,r7,LSL #2]
0003a0  f8cdb014          STR      r11,[sp,#0x14]
;;;313      outptr0 = output_buf[0];
0003a4  f8ddb02c          LDR      r11,[sp,#0x2c]
0003a8  f8db2000          LDR      r2,[r11,#0]
;;;314      outptr1 = output_buf[1];
0003ac  f8ddb02c          LDR      r11,[sp,#0x2c]
0003b0  f8db3004          LDR      r3,[r11,#4]
;;;315      /* Loop for each group of output pixels */
;;;316      for (col = cinfo->output_width >> 1; col > 0; col--) {
0003b4  f8ddb020          LDR      r11,[sp,#0x20]
0003b8  f8dbb070          LDR      r11,[r11,#0x70]
0003bc  ea4f0b5b          LSR      r11,r11,#1
0003c0  f8cdb010          STR      r11,[sp,#0x10]
0003c4  e081              B        |L1.1226|
                  |L1.966|
;;;317        /* Do the chroma part of the calculation */
;;;318        cb = GETJSAMPLE(*inptr1++);
0003c6  f8ddb018          LDR      r11,[sp,#0x18]
0003ca  f81bcb01          LDRB     r12,[r11],#1
0003ce  f8cdb018          STR      r11,[sp,#0x18]
;;;319        cr = GETJSAMPLE(*inptr2++);
0003d2  f8ddb014          LDR      r11,[sp,#0x14]
0003d6  f81b8b01          LDRB     r8,[r11],#1
0003da  f8cdb014          STR      r11,[sp,#0x14]
;;;320        cred = Crrtab[cr];
0003de  f8ddb00c          LDR      r11,[sp,#0xc]
0003e2  f85b4028          LDR      r4,[r11,r8,LSL #2]
;;;321        cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
0003e6  f8ddb000          LDR      r11,[sp,#0]
0003ea  f85be02c          LDR      lr,[r11,r12,LSL #2]
0003ee  f8ddb004          LDR      r11,[sp,#4]
0003f2  f85bb028          LDR      r11,[r11,r8,LSL #2]
0003f6  44f3              ADD      r11,r11,lr
0003f8  ea4f452b          ASR      r5,r11,#16
;;;322        cblue = Cbbtab[cb];
0003fc  f8ddb008          LDR      r11,[sp,#8]
000400  f85b602c          LDR      r6,[r11,r12,LSL #2]
;;;323        /* Fetch 4 Y values and emit 4 pixels */
;;;324        y  = GETJSAMPLE(*inptr00++);
000404  f8190b01          LDRB     r0,[r9],#1
;;;325        outptr0[RGB_RED] =   range_limit[y + cred];
000408  eb000b04          ADD      r11,r0,r4
00040c  f811b00b          LDRB     r11,[r1,r11]
000410  f882b000          STRB     r11,[r2,#0]
;;;326        outptr0[RGB_GREEN] = range_limit[y + cgreen];
000414  eb000b05          ADD      r11,r0,r5
000418  f811b00b          LDRB     r11,[r1,r11]
00041c  f882b001          STRB     r11,[r2,#1]
;;;327        outptr0[RGB_BLUE] =  range_limit[y + cblue];
000420  eb000b06          ADD      r11,r0,r6
000424  f811b00b          LDRB     r11,[r1,r11]
000428  f882b002          STRB     r11,[r2,#2]
;;;328        outptr0 += RGB_PIXELSIZE;
00042c  1cd2              ADDS     r2,r2,#3
;;;329        y  = GETJSAMPLE(*inptr00++);
00042e  f8190b01          LDRB     r0,[r9],#1
;;;330        outptr0[RGB_RED] =   range_limit[y + cred];
000432  eb000b04          ADD      r11,r0,r4
000436  f811b00b          LDRB     r11,[r1,r11]
00043a  f882b000          STRB     r11,[r2,#0]
;;;331        outptr0[RGB_GREEN] = range_limit[y + cgreen];
00043e  eb000b05          ADD      r11,r0,r5
000442  f811b00b          LDRB     r11,[r1,r11]
000446  f882b001          STRB     r11,[r2,#1]
;;;332        outptr0[RGB_BLUE] =  range_limit[y + cblue];
00044a  e007              B        |L1.1116|
                  |L1.1100|
                          DCD      0x000166e9
                  |L1.1104|
                          DCD      0x0001c5a2
                  |L1.1108|
                          DCD      0xffff492e
                  |L1.1112|
                          DCD      0xffffa7e6
                  |L1.1116|
00045c  eb000b06          ADD      r11,r0,r6
000460  f811b00b          LDRB     r11,[r1,r11]
000464  f882b002          STRB     r11,[r2,#2]
;;;333        outptr0 += RGB_PIXELSIZE;
000468  1cd2              ADDS     r2,r2,#3
;;;334        y  = GETJSAMPLE(*inptr01++);
00046a  f81a0b01          LDRB     r0,[r10],#1
;;;335        outptr1[RGB_RED] =   range_limit[y + cred];
00046e  eb000b04          ADD      r11,r0,r4
000472  f811b00b          LDRB     r11,[r1,r11]
000476  f883b000          STRB     r11,[r3,#0]
;;;336        outptr1[RGB_GREEN] = range_limit[y + cgreen];
00047a  eb000b05          ADD      r11,r0,r5
00047e  f811b00b          LDRB     r11,[r1,r11]
000482  f883b001          STRB     r11,[r3,#1]
;;;337        outptr1[RGB_BLUE] =  range_limit[y + cblue];
000486  eb000b06          ADD      r11,r0,r6
00048a  f811b00b          LDRB     r11,[r1,r11]
00048e  f883b002          STRB     r11,[r3,#2]
;;;338        outptr1 += RGB_PIXELSIZE;
000492  1cdb              ADDS     r3,r3,#3
;;;339        y  = GETJSAMPLE(*inptr01++);
000494  f81a0b01          LDRB     r0,[r10],#1
;;;340        outptr1[RGB_RED] =   range_limit[y + cred];
000498  eb000b04          ADD      r11,r0,r4
00049c  f811b00b          LDRB     r11,[r1,r11]
0004a0  f883b000          STRB     r11,[r3,#0]
;;;341        outptr1[RGB_GREEN] = range_limit[y + cgreen];
0004a4  eb000b05          ADD      r11,r0,r5
0004a8  f811b00b          LDRB     r11,[r1,r11]
0004ac  f883b001          STRB     r11,[r3,#1]
;;;342        outptr1[RGB_BLUE] =  range_limit[y + cblue];
0004b0  eb000b06          ADD      r11,r0,r6
0004b4  f811b00b          LDRB     r11,[r1,r11]
0004b8  f883b002          STRB     r11,[r3,#2]
;;;343        outptr1 += RGB_PIXELSIZE;
0004bc  1cdb              ADDS     r3,r3,#3
0004be  f8ddb010          LDR      r11,[sp,#0x10]        ;316
0004c2  f1ab0b01          SUB      r11,r11,#1            ;316
0004c6  f8cdb010          STR      r11,[sp,#0x10]        ;316
                  |L1.1226|
0004ca  f8ddb010          LDR      r11,[sp,#0x10]        ;316
0004ce  f1bb0f00          CMP      r11,#0                ;316
0004d2  f47faf78          BNE      |L1.966|
;;;344      }
;;;345      /* If image width is odd, do the last output column separately */
;;;346      if (cinfo->output_width & 1) {
0004d6  f8ddb020          LDR      r11,[sp,#0x20]
0004da  f89bb070          LDRB     r11,[r11,#0x70]
0004de  f00b0b01          AND      r11,r11,#1
0004e2  f1bb0f00          CMP      r11,#0
0004e6  d042              BEQ      |L1.1390|
;;;347        cb = GETJSAMPLE(*inptr1);
0004e8  f8ddb018          LDR      r11,[sp,#0x18]
0004ec  f89bc000          LDRB     r12,[r11,#0]
;;;348        cr = GETJSAMPLE(*inptr2);
0004f0  f8ddb014          LDR      r11,[sp,#0x14]
0004f4  f89b8000          LDRB     r8,[r11,#0]
;;;349        cred = Crrtab[cr];
0004f8  f8ddb00c          LDR      r11,[sp,#0xc]
0004fc  f85b4028          LDR      r4,[r11,r8,LSL #2]
;;;350        cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
000500  f8ddb000          LDR      r11,[sp,#0]
000504  f85be02c          LDR      lr,[r11,r12,LSL #2]
000508  f8ddb004          LDR      r11,[sp,#4]
00050c  f85bb028          LDR      r11,[r11,r8,LSL #2]
000510  44f3              ADD      r11,r11,lr
000512  ea4f452b          ASR      r5,r11,#16
;;;351        cblue = Cbbtab[cb];
000516  f8ddb008          LDR      r11,[sp,#8]
00051a  f85b602c          LDR      r6,[r11,r12,LSL #2]
;;;352        y  = GETJSAMPLE(*inptr00);
00051e  f8990000          LDRB     r0,[r9,#0]
;;;353        outptr0[RGB_RED] =   range_limit[y + cred];
000522  eb000b04          ADD      r11,r0,r4
000526  f811b00b          LDRB     r11,[r1,r11]
00052a  f882b000          STRB     r11,[r2,#0]
;;;354        outptr0[RGB_GREEN] = range_limit[y + cgreen];
00052e  eb000b05          ADD      r11,r0,r5
000532  f811b00b          LDRB     r11,[r1,r11]
000536  f882b001          STRB     r11,[r2,#1]
;;;355        outptr0[RGB_BLUE] =  range_limit[y + cblue];
00053a  eb000b06          ADD      r11,r0,r6
00053e  f811b00b          LDRB     r11,[r1,r11]
000542  f882b002          STRB     r11,[r2,#2]
;;;356        y  = GETJSAMPLE(*inptr01);
000546  f89a0000          LDRB     r0,[r10,#0]
;;;357        outptr1[RGB_RED] =   range_limit[y + cred];
00054a  eb000b04          ADD      r11,r0,r4
00054e  f811b00b          LDRB     r11,[r1,r11]
000552  f883b000          STRB     r11,[r3,#0]
;;;358        outptr1[RGB_GREEN] = range_limit[y + cgreen];
000556  eb000b05          ADD      r11,r0,r5
00055a  f811b00b          LDRB     r11,[r1,r11]
00055e  f883b001          STRB     r11,[r3,#1]
;;;359        outptr1[RGB_BLUE] =  range_limit[y + cblue];
000562  eb000b06          ADD      r11,r0,r6
000566  f811b00b          LDRB     r11,[r1,r11]
00056a  f883b002          STRB     r11,[r3,#2]
                  |L1.1390|
;;;360      }
;;;361    }
00056e  b00c              ADD      sp,sp,#0x30
000570  e8bd8ff0          POP      {r4-r11,pc}
;;;362    
                          ENDP

                  jinit_merged_upsampler PROC
;;;372    GLOBAL(void)
;;;373    jinit_merged_upsampler (j_decompress_ptr cinfo)
000574  b570              PUSH     {r4-r6,lr}
;;;374    {
000576  4605              MOV      r5,r0
;;;375      my_upsample_ptr upsample;
;;;376    
;;;377      upsample = (my_upsample_ptr)
000578  6868              LDR      r0,[r5,#4]
00057a  2230              MOVS     r2,#0x30
00057c  2101              MOVS     r1,#1
00057e  6803              LDR      r3,[r0,#0]
000580  4628              MOV      r0,r5
000582  4798              BLX      r3
000584  4604              MOV      r4,r0
;;;378        (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
;;;379    				SIZEOF(my_upsampler));
;;;380      cinfo->upsample = (struct jpeg_upsampler *) upsample;
000586  f8c541c4          STR      r4,[r5,#0x1c4]
;;;381      upsample->pub.start_pass = start_pass_merged_upsample;
00058a  4811              LDR      r0,|L1.1488|
00058c  6020              STR      r0,[r4,#0]
;;;382      upsample->pub.need_context_rows = FALSE;
00058e  2000              MOVS     r0,#0
000590  60a0              STR      r0,[r4,#8]
;;;383    
;;;384      upsample->out_row_width = cinfo->output_width * cinfo->out_color_components;
000592  6fa9              LDR      r1,[r5,#0x78]
000594  6f28              LDR      r0,[r5,#0x70]
000596  4348              MULS     r0,r1,r0
000598  62a0              STR      r0,[r4,#0x28]
;;;385    
;;;386      if (cinfo->max_v_samp_factor == 2) {
00059a  f8d50138          LDR      r0,[r5,#0x138]
00059e  2802              CMP      r0,#2
0005a0  d10b              BNE      |L1.1466|
;;;387        upsample->pub.upsample = merged_2v_upsample;
0005a2  480c              LDR      r0,|L1.1492|
0005a4  6060              STR      r0,[r4,#4]
;;;388        upsample->upmethod = h2v2_merged_upsample;
0005a6  480c              LDR      r0,|L1.1496|
0005a8  60e0              STR      r0,[r4,#0xc]
;;;389        /* Allocate a spare row buffer */
;;;390        upsample->spare_row = (JSAMPROW)
0005aa  6aa2              LDR      r2,[r4,#0x28]
0005ac  6868              LDR      r0,[r5,#4]
0005ae  2101              MOVS     r1,#1
0005b0  6843              LDR      r3,[r0,#4]
0005b2  4628              MOV      r0,r5
0005b4  4798              BLX      r3
0005b6  6220              STR      r0,[r4,#0x20]
0005b8  e005              B        |L1.1478|
                  |L1.1466|
;;;391          (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
;;;392    		(size_t) (upsample->out_row_width * SIZEOF(JSAMPLE)));
;;;393      } else {
;;;394        upsample->pub.upsample = merged_1v_upsample;
0005ba  4808              LDR      r0,|L1.1500|
0005bc  6060              STR      r0,[r4,#4]
;;;395        upsample->upmethod = h2v1_merged_upsample;
0005be  4808              LDR      r0,|L1.1504|
0005c0  60e0              STR      r0,[r4,#0xc]
;;;396        /* No spare row needed */
;;;397        upsample->spare_row = NULL;
0005c2  2000              MOVS     r0,#0
0005c4  6220              STR      r0,[r4,#0x20]
                  |L1.1478|
;;;398      }
;;;399    
;;;400      build_ycc_rgb_table(cinfo);
0005c6  4628              MOV      r0,r5
0005c8  f7fffffe          BL       build_ycc_rgb_table
;;;401    }
0005cc  bd70              POP      {r4-r6,pc}
;;;402    
                          ENDP

0005ce  0000              DCW      0x0000
                  |L1.1488|
                          DCD      start_pass_merged_upsample
                  |L1.1492|
                          DCD      merged_2v_upsample
                  |L1.1496|
                          DCD      h2v2_merged_upsample
                  |L1.1500|
                          DCD      merged_1v_upsample
                  |L1.1504|
                          DCD      h2v1_merged_upsample
