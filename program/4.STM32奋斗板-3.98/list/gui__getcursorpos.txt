; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\gui__getcursorpos.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\gui__getcursorpos.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -I.\GUI\AntiAlias -I.\GUI\Config -I.\GUI\ConvertColor -I.\GUI\ConvertMono -I.\GUI\Core -I.\GUI\Font -I.\GUI\GUI_X -I.\GUI\JPEG -I.\GUI\LCDDriver -I.\GUI\MemDev -I.\GUI\MultiLayer -I.\GUI\Widget -I.\GUI\WM -IC:\Users\Administrator\Desktop\gui\STM32·Ü¶·°å-3.98\RTE -Id:\Keil_v5\ARM\PACK\ARM\CMSIS\4.3.0\CMSIS\Include -Id:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.1.0\Device\Include -D__UVISION_VERSION=515 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\gui__getcursorpos.crf GUI\Core\GUI__GetCursorPos.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=1

                  GUI__GetCursorPosX PROC
;;;39     */
;;;40     int GUI__GetCursorPosX(const char GUI_UNI_PTR * s, int Index, int MaxNumChars) {
000000  b5f7              PUSH     {r0-r2,r4-r7,lr}
000002  460c              MOV      r4,r1
000004  4615              MOV      r5,r2
;;;41       #if GUI_SUPPORT_ARABIC
;;;42         return GUI__GetCursorPosXArabic(s, Index, MaxNumChars);
;;;43       #else
;;;44         int CursorPosX = 0;
000006  2600              MOVS     r6,#0
;;;45         U16 Char;
;;;46         GUI_USE_PARA(MaxNumChars);
000008  bf00              NOP      
;;;47         while (Index--) {
00000a  e007              B        |L1.28|
                  |L1.12|
;;;48           Char        = GUI_UC__GetCharCodeInc(&s);
00000c  4668              MOV      r0,sp
00000e  f7fffffe          BL       GUI_UC__GetCharCodeInc
000012  4607              MOV      r7,r0
;;;49           CursorPosX += GUI_GetCharDistX(Char);
000014  4638              MOV      r0,r7
000016  f7fffffe          BL       GUI_GetCharDistX
00001a  4406              ADD      r6,r6,r0
                  |L1.28|
00001c  0020              MOVS     r0,r4                 ;47
00001e  f1a40401          SUB      r4,r4,#1              ;47
000022  d1f3              BNE      |L1.12|
;;;50         }
;;;51         return CursorPosX;
000024  4630              MOV      r0,r6
;;;52       #endif
;;;53     }
000026  bdfe              POP      {r1-r7,pc}
;;;54     
                          ENDP

                  GUI__GetCursorPosChar PROC
;;;66     */
;;;67     int GUI__GetCursorPosChar(const char GUI_UNI_PTR * s, int x, int MaxNumChars) {
000028  e92d47f0          PUSH     {r4-r10,lr}
00002c  4604              MOV      r4,r0
00002e  460d              MOV      r5,r1
000030  4616              MOV      r6,r2
;;;68       #if GUI_SUPPORT_ARABIC
;;;69         return GUI__GetCursorPosCharArabic(s, x, MaxNumChars);
;;;70       #else
;;;71         int SizeX = 0;
000032  2700              MOVS     r7,#0
;;;72         const char GUI_UNI_PTR * p;
;;;73         p = s;
000034  46a0              MOV      r8,r4
;;;74         while (--MaxNumChars> 0) {
000036  e012              B        |L1.94|
                  |L1.56|
;;;75           U16 Char;
;;;76           Char   = GUI_UC_GetCharCode(s);
000038  4620              MOV      r0,r4
00003a  f7fffffe          BL       GUI_UC_GetCharCode
00003e  4681              MOV      r9,r0
;;;77           SizeX += GUI_GetCharDistX(Char);
000040  4648              MOV      r0,r9
000042  f7fffffe          BL       GUI_GetCharDistX
000046  4407              ADD      r7,r7,r0
;;;78           if (!Char || (SizeX > x)) {
000048  f1b90f00          CMP      r9,#0
00004c  d001              BEQ      |L1.82|
00004e  42af              CMP      r7,r5
000050  dd00              BLE      |L1.84|
                  |L1.82|
;;;79             break;
000052  e007              B        |L1.100|
                  |L1.84|
;;;80           }
;;;81           s += GUI_UC_GetCharSize(s);
000054  4620              MOV      r0,r4
000056  f7fffffe          BL       GUI_UC_GetCharSize
00005a  4404              ADD      r4,r4,r0
;;;82         }
00005c  bf00              NOP      
                  |L1.94|
00005e  1e70              SUBS     r0,r6,#1              ;74
000060  1e06              SUBS     r6,r0,#0              ;74
000062  dce9              BGT      |L1.56|
                  |L1.100|
000064  bf00              NOP                            ;79
;;;83         return GUI_UC__NumBytes2NumChars(p, s - p);
000066  eba40108          SUB      r1,r4,r8
00006a  4640              MOV      r0,r8
00006c  f7fffffe          BL       GUI_UC__NumBytes2NumChars
;;;84       #endif
;;;85     }
000070  e8bd87f0          POP      {r4-r10,pc}
;;;86     
                          ENDP

                  GUI__GetCursorCharacter PROC
;;;90     */
;;;91     U16 GUI__GetCursorCharacter(const char GUI_UNI_PTR * s, int Index, int MaxNumChars, int * pIsRTL) {
000074  e92d41f0          PUSH     {r4-r8,lr}
000078  4605              MOV      r5,r0
00007a  460f              MOV      r7,r1
00007c  4616              MOV      r6,r2
00007e  461c              MOV      r4,r3
;;;92       #if GUI_SUPPORT_ARABIC
;;;93         return GUI__GetCursorCharacterArabic(s, Index, MaxNumChars, pIsRTL);
;;;94       #else
;;;95         GUI_USE_PARA(MaxNumChars);
000080  bf00              NOP      
;;;96         if (pIsRTL) {
000082  b10c              CBZ      r4,|L1.136|
;;;97           *pIsRTL = 0;
000084  2000              MOVS     r0,#0
000086  6020              STR      r0,[r4,#0]
                  |L1.136|
;;;98         }
;;;99         return GUI_UC_GetCharCode(s + Index);
000088  19e8              ADDS     r0,r5,r7
00008a  f7fffffe          BL       GUI_UC_GetCharCode
;;;100      #endif
;;;101    }
00008e  e8bd81f0          POP      {r4-r8,pc}
;;;102    
                          ENDP

