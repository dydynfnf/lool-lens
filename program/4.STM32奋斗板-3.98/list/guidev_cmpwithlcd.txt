; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\guidev_cmpwithlcd.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\guidev_cmpwithlcd.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -I.\GUI\AntiAlias -I.\GUI\Config -I.\GUI\ConvertColor -I.\GUI\ConvertMono -I.\GUI\Core -I.\GUI\Font -I.\GUI\GUI_X -I.\GUI\JPEG -I.\GUI\LCDDriver -I.\GUI\MemDev -I.\GUI\MultiLayer -I.\GUI\Widget -I.\GUI\WM -IC:\Users\Administrator\Desktop\gui\STM32·Ü¶·°å-3.98\RTE -Id:\Keil_v5\ARM\PACK\ARM\CMSIS\4.3.0\CMSIS\Include -Id:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.1.0\Device\Include -D__UVISION_VERSION=515 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\guidev_cmpwithlcd.crf GUI\MemDev\GUIDEV_CmpWithLCD.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  GUI_MEMDEV_CompareWithLCD PROC
;;;44     */
;;;45     int GUI_MEMDEV_CompareWithLCD(GUI_MEMDEV_Handle hMem, int*px, int*py, int *pExp, int*pAct) {
000000  e92d4fff          PUSH     {r0-r11,lr}
000004  b087              SUB      sp,sp,#0x1c
000006  4682              MOV      r10,r0
;;;46       int Ret = 0;
000008  2000              MOVS     r0,#0
00000a  9006              STR      r0,[sp,#0x18]
;;;47       /* Make sure memory handle is valid */
;;;48       if (!hMem) {
00000c  f1ba0f00          CMP      r10,#0
000010  d102              BNE      |L1.24|
;;;49         hMem = GUI_Context.hDevData;
000012  4836              LDR      r0,|L1.236|
000014  f9b0a04c          LDRSH    r10,[r0,#0x4c]  ; GUI_Context
                  |L1.24|
;;;50       }
;;;51       if (!hMem) {
000018  f1ba0f00          CMP      r10,#0
00001c  d103              BNE      |L1.38|
;;;52         return 1;
00001e  2001              MOVS     r0,#1
                  |L1.32|
;;;53       }
;;;54       GUI_LOCK();
;;;55       {
;;;56         GUI_MEMDEV * pDevData = (GUI_MEMDEV*) GUI_ALLOC_h2p(hMem);  /* Convert to pointer */
;;;57         int y    = pDevData->y0;
;;;58         int x0   = pDevData->x0;
;;;59         int XMax = pDevData->XSize + x0;
;;;60         int YMax = pDevData->YSize + y;
;;;61         int Max;
;;;62         int MagX = LCD_GetXMag();
;;;63         int MagY = LCD_GetYMag();
;;;64         /* Calculate limits */
;;;65         if (y < 0) {
;;;66     			y = 0;
;;;67         }
;;;68         if (x0 < 0) {
;;;69     			x0 = 0;
;;;70         }
;;;71         Max = LCD_GET_YSIZE();
;;;72     		if (YMax > Max) {
;;;73     			YMax = Max;
;;;74         }
;;;75         Max = LCD_GET_XSIZE();
;;;76     		if (XMax > Max) {
;;;77     			XMax = Max;
;;;78         }
;;;79         for (; y < YMax; y++) {
;;;80           int x = x0;
;;;81           U8 * pData = (U8 *)GUI_MEMDEV__XY2PTR(x, y);
;;;82           for (x = x0; x < XMax; x++) {
;;;83             int Exp = *pData++;
;;;84             int Act = LCD_L0_GetPixelIndex(x * MagX, y * MagY);
;;;85             #if (GUI_NUM_LAYERS > 1)
;;;86             if (LCD_GetBitsPerPixelEx(GUI_Context.SelLayer) > 8)
;;;87             #else
;;;88             if (LCD_GetBitsPerPixel() > 8)
;;;89             #endif
;;;90             {
;;;91               Exp |= (*pData++) << 8;
;;;92             }
;;;93             if (Act != Exp) {
;;;94               *px    = x;
;;;95               *py    = y;
;;;96               *pAct  = Act;
;;;97               *pExp  = Exp;
;;;98               Ret = 1;
;;;99               goto Skip;
;;;100            }
;;;101          }
;;;102        }
;;;103      }
;;;104    Skip:
;;;105      GUI_UNLOCK();
;;;106      return Ret;
;;;107    }
000020  b00b              ADD      sp,sp,#0x2c
000022  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.38|
000026  4650              MOV      r0,r10                ;56
000028  f7fffffe          BL       GUI_ALLOC_h2p
00002c  4607              MOV      r7,r0                 ;56
00002e  f9b74002          LDRSH    r4,[r7,#2]            ;57
000032  f9b78000          LDRSH    r8,[r7,#0]            ;58
000036  f9b70004          LDRSH    r0,[r7,#4]            ;59
00003a  4440              ADD      r0,r0,r8              ;59
00003c  9005              STR      r0,[sp,#0x14]         ;59
00003e  f9b70006          LDRSH    r0,[r7,#6]            ;60
000042  4420              ADD      r0,r0,r4              ;60
000044  9004              STR      r0,[sp,#0x10]         ;60
000046  f7fffffe          BL       LCD_GetXMag
00004a  9003              STR      r0,[sp,#0xc]          ;62
00004c  f7fffffe          BL       LCD_GetYMag
000050  9002              STR      r0,[sp,#8]            ;63
000052  2c00              CMP      r4,#0                 ;65
000054  da00              BGE      |L1.88|
000056  2400              MOVS     r4,#0                 ;66
                  |L1.88|
000058  f1b80f00          CMP      r8,#0                 ;68
00005c  da01              BGE      |L1.98|
00005e  f04f0800          MOV      r8,#0                 ;69
                  |L1.98|
000062  f7fffffe          BL       LCD_GetYSize
000066  4605              MOV      r5,r0                 ;71
000068  9904              LDR      r1,[sp,#0x10]         ;72
00006a  42a9              CMP      r1,r5                 ;72
00006c  dd00              BLE      |L1.112|
00006e  9504              STR      r5,[sp,#0x10]         ;73
                  |L1.112|
000070  f7fffffe          BL       LCD_GetXSize
000074  4605              MOV      r5,r0                 ;75
000076  9805              LDR      r0,[sp,#0x14]         ;76
000078  42a8              CMP      r0,r5                 ;76
00007a  dd00              BLE      |L1.126|
00007c  9505              STR      r5,[sp,#0x14]         ;77
                  |L1.126|
00007e  e02f              B        |L1.224|
                  |L1.128|
000080  4646              MOV      r6,r8                 ;80
000082  4621              MOV      r1,r4                 ;81
000084  4630              MOV      r0,r6                 ;81
000086  f7fffffe          BL       GUI_MEMDEV__XY2PTR
00008a  4681              MOV      r9,r0                 ;81
00008c  bf00              NOP                            ;82
00008e  e023              B        |L1.216|
                  |L1.144|
000090  f819bb01          LDRB     r11,[r9],#1           ;83
000094  9a02              LDR      r2,[sp,#8]            ;84
000096  fb04f102          MUL      r1,r4,r2              ;84
00009a  9a03              LDR      r2,[sp,#0xc]          ;84
00009c  fb06f002          MUL      r0,r6,r2              ;84
0000a0  f7fffffe          BL       LCD_L0_GetPixelIndex
0000a4  9001              STR      r0,[sp,#4]            ;84
0000a6  f7fffffe          BL       LCD_GetBitsPerPixel
0000aa  2808              CMP      r0,#8                 ;88
0000ac  dd03              BLE      |L1.182|
0000ae  f8191b01          LDRB     r1,[r9],#1            ;91
0000b2  ea4b2b01          ORR      r11,r11,r1,LSL #8     ;91
                  |L1.182|
0000b6  9801              LDR      r0,[sp,#4]            ;93
0000b8  4558              CMP      r0,r11                ;93
0000ba  d00c              BEQ      |L1.214|
0000bc  9808              LDR      r0,[sp,#0x20]         ;94
0000be  6006              STR      r6,[r0,#0]            ;94
0000c0  9809              LDR      r0,[sp,#0x24]         ;95
0000c2  6004              STR      r4,[r0,#0]            ;95
0000c4  9914              LDR      r1,[sp,#0x50]         ;96
0000c6  9801              LDR      r0,[sp,#4]            ;96
0000c8  6008              STR      r0,[r1,#0]            ;96
0000ca  980a              LDR      r0,[sp,#0x28]         ;97
0000cc  f8c0b000          STR      r11,[r0,#0]           ;97
0000d0  2001              MOVS     r0,#1                 ;98
0000d2  9006              STR      r0,[sp,#0x18]         ;98
0000d4  e008              B        |L1.232|
                  |L1.214|
0000d6  1c76              ADDS     r6,r6,#1              ;82
                  |L1.216|
0000d8  9805              LDR      r0,[sp,#0x14]         ;82
0000da  4286              CMP      r6,r0                 ;82
0000dc  dbd8              BLT      |L1.144|
0000de  1c64              ADDS     r4,r4,#1              ;79
                  |L1.224|
0000e0  9804              LDR      r0,[sp,#0x10]         ;79
0000e2  4284              CMP      r4,r0                 ;79
0000e4  dbcc              BLT      |L1.128|
0000e6  bf00              NOP                            ;104
                  |L1.232|
0000e8  9806              LDR      r0,[sp,#0x18]         ;106
0000ea  e799              B        |L1.32|
;;;108    
                          ENDP

                  |L1.236|
                          DCD      GUI_Context
