; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\jdphuff.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\jdphuff.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -I.\GUI\AntiAlias -I.\GUI\Config -I.\GUI\ConvertColor -I.\GUI\ConvertMono -I.\GUI\Core -I.\GUI\Font -I.\GUI\GUI_X -I.\GUI\JPEG -I.\GUI\LCDDriver -I.\GUI\MemDev -I.\GUI\MultiLayer -I.\GUI\Widget -I.\GUI\WM -IC:\Users\Administrator\Desktop\gui\STM32·Ü¶·°å-3.98\RTE -Id:\Keil_v5\ARM\PACK\ARM\CMSIS\4.3.0\CMSIS\Include -Id:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.1.0\Device\Include -D__UVISION_VERSION=515 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\jdphuff.crf GUI\JPEG\jdphuff.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  process_restart PROC
;;;227    LOCAL(boolean)
;;;228    process_restart (j_decompress_ptr cinfo)
000000  b570              PUSH     {r4-r6,lr}
;;;229    {
000002  4604              MOV      r4,r0
;;;230      phuff_entropy_ptr entropy = (phuff_entropy_ptr) cinfo->entropy;
000004  f8d451bc          LDR      r5,[r4,#0x1bc]
;;;231      int ci;
;;;232    
;;;233      /* Throw away any unused bits remaining in bit buffer; */
;;;234      /* include any full bytes in next_marker's count of discarded bytes */
;;;235      cinfo->marker->discarded_bytes += entropy->bitstate.bits_left / 8;
000008  6928              LDR      r0,[r5,#0x10]
00000a  17c1              ASRS     r1,r0,#31
00000c  eb007151          ADD      r1,r0,r1,LSR #29
000010  f8d421b8          LDR      r2,[r4,#0x1b8]
000014  6992              LDR      r2,[r2,#0x18]
000016  eb0201e1          ADD      r1,r2,r1,ASR #3
00001a  f8d421b8          LDR      r2,[r4,#0x1b8]
00001e  6191              STR      r1,[r2,#0x18]
;;;236      entropy->bitstate.bits_left = 0;
000020  2100              MOVS     r1,#0
000022  6129              STR      r1,[r5,#0x10]
;;;237    
;;;238      /* Advance past the RSTn marker */
;;;239      if (! (*cinfo->marker->read_restart_marker) (cinfo))
000024  f8d401b8          LDR      r0,[r4,#0x1b8]
000028  6881              LDR      r1,[r0,#8]
00002a  4620              MOV      r0,r4
00002c  4788              BLX      r1
00002e  b908              CBNZ     r0,|L1.52|
;;;240        return FALSE;
000030  2000              MOVS     r0,#0
                  |L1.50|
;;;241    
;;;242      /* Re-initialize DC predictions to 0 */
;;;243      for (ci = 0; ci < cinfo->comps_in_scan; ci++)
;;;244        entropy->saved.last_dc_val[ci] = 0;
;;;245      /* Re-init EOB run count, too */
;;;246      entropy->saved.EOBRUN = 0;
;;;247    
;;;248      /* Reset restart counter */
;;;249      entropy->restarts_to_go = cinfo->restart_interval;
;;;250    
;;;251      /* Reset out-of-data flag, unless read_restart_marker left us smack up
;;;252       * against a marker.  In that case we will end up treating the next data
;;;253       * segment as empty, and we can avoid producing bogus output pixels by
;;;254       * leaving the flag set.
;;;255       */
;;;256      if (cinfo->unread_marker == 0)
;;;257        entropy->pub.insufficient_data = FALSE;
;;;258    
;;;259      return TRUE;
;;;260    }
000032  bd70              POP      {r4-r6,pc}
                  |L1.52|
000034  2600              MOVS     r6,#0                 ;243
000036  e005              B        |L1.68|
                  |L1.56|
000038  2100              MOVS     r1,#0                 ;244
00003a  f1050018          ADD      r0,r5,#0x18           ;244
00003e  f8401026          STR      r1,[r0,r6,LSL #2]     ;244
000042  1c76              ADDS     r6,r6,#1              ;243
                  |L1.68|
000044  f8d40148          LDR      r0,[r4,#0x148]        ;243
000048  42b0              CMP      r0,r6                 ;243
00004a  dcf5              BGT      |L1.56|
00004c  2000              MOVS     r0,#0                 ;246
00004e  6168              STR      r0,[r5,#0x14]         ;246
000050  f8d40114          LDR      r0,[r4,#0x114]        ;249
000054  62a8              STR      r0,[r5,#0x28]         ;249
000056  f8d401a0          LDR      r0,[r4,#0x1a0]        ;256
00005a  b908              CBNZ     r0,|L1.96|
00005c  2000              MOVS     r0,#0                 ;257
00005e  60a8              STR      r0,[r5,#8]            ;257
                  |L1.96|
000060  2001              MOVS     r0,#1                 ;259
000062  e7e6              B        |L1.50|
;;;261    
                          ENDP

                  decode_mcu_AC_refine PROC
;;;490    METHODDEF(boolean)
;;;491    decode_mcu_AC_refine (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
000064  e92d4ff3          PUSH     {r0,r1,r4-r11,lr}
;;;492    {   
000068  b0cf              SUB      sp,sp,#0x13c
00006a  4606              MOV      r6,r0
;;;493      phuff_entropy_ptr entropy = (phuff_entropy_ptr) cinfo->entropy;
00006c  f8d671bc          LDR      r7,[r6,#0x1bc]
;;;494      int Se = cinfo->Se;
000070  f8d60194          LDR      r0,[r6,#0x194]
000074  904e              STR      r0,[sp,#0x138]
;;;495      int p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
000076  f896119c          LDRB     r1,[r6,#0x19c]
00007a  2001              MOVS     r0,#1
00007c  4088              LSLS     r0,r0,r1
00007e  904d              STR      r0,[sp,#0x134]
;;;496      int m1 = (-1) << cinfo->Al;	/* -1 in the bit position being coded */
000080  f896119c          LDRB     r1,[r6,#0x19c]
000084  f04f30ff          MOV      r0,#0xffffffff
000088  4088              LSLS     r0,r0,r1
00008a  904c              STR      r0,[sp,#0x130]
;;;497      register int s, k, r;
;;;498      unsigned int EOBRUN;
;;;499      JBLOCKROW block;
;;;500      JCOEFPTR thiscoef;
;;;501      BITREAD_STATE_VARS;
;;;502      d_derived_tbl * tbl;
;;;503      int num_newnz;
;;;504      int newnz_pos[DCTSIZE2];
;;;505    
;;;506      /* Process restart marker if needed; may have to suspend */
;;;507      if (cinfo->restart_interval) {
00008c  f8d60114          LDR      r0,[r6,#0x114]
000090  b148              CBZ      r0,|L1.166|
;;;508        if (entropy->restarts_to_go == 0)
000092  6ab8              LDR      r0,[r7,#0x28]
000094  b938              CBNZ     r0,|L1.166|
;;;509          if (! process_restart(cinfo))
000096  4630              MOV      r0,r6
000098  f7fffffe          BL       process_restart
00009c  b918              CBNZ     r0,|L1.166|
;;;510    	return FALSE;
00009e  2000              MOVS     r0,#0
                  |L1.160|
;;;511      }
;;;512    
;;;513      /* If we've run out of data, don't modify the MCU.
;;;514       */
;;;515      if (! entropy->pub.insufficient_data) {
;;;516    
;;;517        /* Load up working state */
;;;518        BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
;;;519        EOBRUN = entropy->saved.EOBRUN; /* only part of saved state we need */
;;;520    
;;;521        /* There is always only one block per MCU */
;;;522        block = MCU_data[0];
;;;523        tbl = entropy->ac_derived_tbl;
;;;524    
;;;525        /* If we are forced to suspend, we must undo the assignments to any newly
;;;526         * nonzero coefficients in the block, because otherwise we'd get confused
;;;527         * next time about which coefficients were already nonzero.
;;;528         * But we need not undo addition of bits to already-nonzero coefficients;
;;;529         * instead, we can test the current bit to see if we already did it.
;;;530         */
;;;531        num_newnz = 0;
;;;532    
;;;533        /* initialize coefficient loop counter to start of band */
;;;534        k = cinfo->Ss;
;;;535    
;;;536        if (EOBRUN == 0) {
;;;537          for (; k <= Se; k++) {
;;;538    	HUFF_DECODE(s, br_state, tbl, goto undoit, label3);
;;;539    	r = s >> 4;
;;;540    	s &= 15;
;;;541    	if (s) {
;;;542    	  if (s != 1)		/* size of new coef should always be 1 */
;;;543    	    WARNMS(cinfo, JWRN_HUFF_BAD_CODE);
;;;544    	  CHECK_BIT_BUFFER(br_state, 1, goto undoit);
;;;545    	  if (GET_BITS(1))
;;;546    	    s = p1;		/* newly nonzero coef is positive */
;;;547    	  else
;;;548    	    s = m1;		/* newly nonzero coef is negative */
;;;549    	} else {
;;;550    	  if (r != 15) {
;;;551    	    EOBRUN = 1 << r;	/* EOBr, run length is 2^r + appended bits */
;;;552    	    if (r) {
;;;553    	      CHECK_BIT_BUFFER(br_state, r, goto undoit);
;;;554    	      r = GET_BITS(r);
;;;555    	      EOBRUN += r;
;;;556    	    }
;;;557    	    break;		/* rest of block is handled by EOB logic */
;;;558    	  }
;;;559    	  /* note s = 0 for processing ZRL */
;;;560    	}
;;;561    	/* Advance over already-nonzero coefs and r still-zero coefs,
;;;562    	 * appending correction bits to the nonzeroes.  A correction bit is 1
;;;563    	 * if the absolute value of the coefficient must be increased.
;;;564    	 */
;;;565    	do {
;;;566    	  thiscoef = *block + jpeg_natural_order[k];
;;;567    	  if (*thiscoef != 0) {
;;;568    	    CHECK_BIT_BUFFER(br_state, 1, goto undoit);
;;;569    	    if (GET_BITS(1)) {
;;;570    	      if ((*thiscoef & p1) == 0) { /* do nothing if already set it */
;;;571    		if (*thiscoef >= 0)
;;;572    		  *thiscoef += p1;
;;;573    		else
;;;574    		  *thiscoef += m1;
;;;575    	      }
;;;576    	    }
;;;577    	  } else {
;;;578    	    if (--r < 0)
;;;579    	      break;		/* reached target zero coefficient */
;;;580    	  }
;;;581    	  k++;
;;;582    	} while (k <= Se);
;;;583    	if (s) {
;;;584    	  int pos = jpeg_natural_order[k];
;;;585    	  /* Output newly nonzero coefficient */
;;;586    	  (*block)[pos] = (JCOEF) s;
;;;587    	  /* Remember its position in case we have to suspend */
;;;588    	  newnz_pos[num_newnz++] = pos;
;;;589    	}
;;;590          }
;;;591        }
;;;592    
;;;593        if (EOBRUN > 0) {
;;;594          /* Scan any remaining coefficient positions after the end-of-band
;;;595           * (the last newly nonzero coefficient, if any).  Append a correction
;;;596           * bit to each already-nonzero coefficient.  A correction bit is 1
;;;597           * if the absolute value of the coefficient must be increased.
;;;598           */
;;;599          for (; k <= Se; k++) {
;;;600    	thiscoef = *block + jpeg_natural_order[k];
;;;601    	if (*thiscoef != 0) {
;;;602    	  CHECK_BIT_BUFFER(br_state, 1, goto undoit);
;;;603    	  if (GET_BITS(1)) {
;;;604    	    if ((*thiscoef & p1) == 0) { /* do nothing if already changed it */
;;;605    	      if (*thiscoef >= 0)
;;;606    		*thiscoef += p1;
;;;607    	      else
;;;608    		*thiscoef += m1;
;;;609    	    }
;;;610    	  }
;;;611    	}
;;;612          }
;;;613          /* Count one block completed in EOB run */
;;;614          EOBRUN--;
;;;615        }
;;;616    
;;;617        /* Completed MCU, so update state */
;;;618        BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
;;;619        entropy->saved.EOBRUN = EOBRUN; /* only part of saved state we need */
;;;620      }
;;;621    
;;;622      /* Account for restart interval (no-op if not using restarts) */
;;;623      entropy->restarts_to_go--;
;;;624    
;;;625      return TRUE;
;;;626    
;;;627    undoit:
;;;628      /* Re-zero any output coefficients that we made newly nonzero */
;;;629      while (num_newnz > 0)
;;;630        (*block)[newnz_pos[--num_newnz]] = 0;
;;;631    
;;;632      return FALSE;
;;;633    }
0000a0  b051              ADD      sp,sp,#0x144
0000a2  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.166|
0000a6  68b8              LDR      r0,[r7,#8]            ;515
0000a8  2800              CMP      r0,#0                 ;515
0000aa  d170              BNE      |L1.398|
0000ac  9649              STR      r6,[sp,#0x124]        ;518
0000ae  69b0              LDR      r0,[r6,#0x18]         ;518
0000b0  6800              LDR      r0,[r0,#0]            ;518
0000b2  9045              STR      r0,[sp,#0x114]        ;518
0000b4  69b0              LDR      r0,[r6,#0x18]         ;518
0000b6  6840              LDR      r0,[r0,#4]            ;518
0000b8  9046              STR      r0,[sp,#0x118]        ;518
0000ba  f8d7a00c          LDR      r10,[r7,#0xc]         ;518
0000be  693d              LDR      r5,[r7,#0x10]         ;518
0000c0  6978              LDR      r0,[r7,#0x14]         ;519
0000c2  904b              STR      r0,[sp,#0x12c]        ;519
0000c4  9850              LDR      r0,[sp,#0x140]        ;522
0000c6  6800              LDR      r0,[r0,#0]            ;522
0000c8  904a              STR      r0,[sp,#0x128]        ;522
0000ca  6bf8              LDR      r0,[r7,#0x3c]         ;523
0000cc  9044              STR      r0,[sp,#0x110]        ;523
0000ce  2000              MOVS     r0,#0                 ;531
0000d0  9043              STR      r0,[sp,#0x10c]        ;531
0000d2  f8d68190          LDR      r8,[r6,#0x190]        ;534
0000d6  984b              LDR      r0,[sp,#0x12c]        ;536
0000d8  2800              CMP      r0,#0                 ;536
0000da  d17d              BNE      |L1.472|
0000dc  e0e1              B        |L1.674|
                  |L1.222|
0000de  2d08              CMP      r5,#8                 ;538
0000e0  da0f              BGE      |L1.258|
0000e2  2300              MOVS     r3,#0                 ;538
0000e4  462a              MOV      r2,r5                 ;538
0000e6  4651              MOV      r1,r10                ;538
0000e8  a845              ADD      r0,sp,#0x114          ;538
0000ea  f7fffffe          BL       jpeg_fill_bit_buffer
0000ee  b900              CBNZ     r0,|L1.242|
0000f0  e127              B        |L1.834|
                  |L1.242|
0000f2  f8dda11c          LDR      r10,[sp,#0x11c]       ;538
0000f6  9d48              LDR      r5,[sp,#0x120]        ;538
0000f8  2d08              CMP      r5,#8                 ;538
0000fa  da02              BGE      |L1.258|
0000fc  2001              MOVS     r0,#1                 ;538
0000fe  9002              STR      r0,[sp,#8]            ;538
000100  e019              B        |L1.310|
                  |L1.258|
000102  f1a50008          SUB      r0,r5,#8              ;538
000106  fa4af000          ASR      r0,r10,r0             ;538
00010a  b2c0              UXTB     r0,r0                 ;538
00010c  9001              STR      r0,[sp,#4]            ;538
00010e  9844              LDR      r0,[sp,#0x110]        ;538
000110  f1000190          ADD      r1,r0,#0x90           ;538
000114  9801              LDR      r0,[sp,#4]            ;538
000116  f8510020          LDR      r0,[r1,r0,LSL #2]     ;538
00011a  9002              STR      r0,[sp,#8]            ;538
00011c  b140              CBZ      r0,|L1.304|
00011e  9802              LDR      r0,[sp,#8]            ;538
000120  1a2d              SUBS     r5,r5,r0              ;538
000122  9844              LDR      r0,[sp,#0x110]        ;538
000124  f5006092          ADD      r0,r0,#0x490          ;538
000128  9901              LDR      r1,[sp,#4]            ;538
00012a  f810b001          LDRB     r11,[r0,r1]           ;538
00012e  e011              B        |L1.340|
                  |L1.304|
000130  2009              MOVS     r0,#9                 ;538
000132  9002              STR      r0,[sp,#8]            ;538
000134  bf00              NOP                            ;538
                  |L1.310|
000136  9802              LDR      r0,[sp,#8]            ;538
000138  9000              STR      r0,[sp,#0]            ;538
00013a  462a              MOV      r2,r5                 ;538
00013c  4651              MOV      r1,r10                ;538
00013e  a845              ADD      r0,sp,#0x114          ;538
000140  9b44              LDR      r3,[sp,#0x110]        ;538
000142  f7fffffe          BL       jpeg_huff_decode
000146  f1b00b00          SUBS     r11,r0,#0             ;538
00014a  da00              BGE      |L1.334|
00014c  e0f9              B        |L1.834|
                  |L1.334|
00014e  f8dda11c          LDR      r10,[sp,#0x11c]       ;538
000152  9d48              LDR      r5,[sp,#0x120]        ;538
                  |L1.340|
000154  ea4f192b          ASR      r9,r11,#4             ;539
000158  f00b0b0f          AND      r11,r11,#0xf          ;540
00015c  f1bb0f00          CMP      r11,#0                ;541
000160  d026              BEQ      |L1.432|
000162  f1bb0f01          CMP      r11,#1                ;542
000166  d008              BEQ      |L1.378|
000168  2076              MOVS     r0,#0x76              ;543
00016a  6831              LDR      r1,[r6,#0]            ;543
00016c  6148              STR      r0,[r1,#0x14]         ;543
00016e  6830              LDR      r0,[r6,#0]            ;543
000170  f04f31ff          MOV      r1,#0xffffffff        ;543
000174  6842              LDR      r2,[r0,#4]            ;543
000176  4630              MOV      r0,r6                 ;543
000178  4790              BLX      r2                    ;543
                  |L1.378|
00017a  2d01              CMP      r5,#1                 ;544
00017c  da0b              BGE      |L1.406|
00017e  2301              MOVS     r3,#1                 ;544
000180  462a              MOV      r2,r5                 ;544
000182  4651              MOV      r1,r10                ;544
000184  a845              ADD      r0,sp,#0x114          ;544
000186  f7fffffe          BL       jpeg_fill_bit_buffer
00018a  b908              CBNZ     r0,|L1.400|
00018c  e0d9              B        |L1.834|
                  |L1.398|
00018e  e0d3              B        |L1.824|
                  |L1.400|
000190  f8dda11c          LDR      r10,[sp,#0x11c]       ;544
000194  9d48              LDR      r5,[sp,#0x120]        ;544
                  |L1.406|
000196  1e68              SUBS     r0,r5,#1              ;545
000198  4605              MOV      r5,r0                 ;545
00019a  fa4af000          ASR      r0,r10,r0             ;545
00019e  f0000001          AND      r0,r0,#1              ;545
0001a2  b110              CBZ      r0,|L1.426|
0001a4  f8ddb134          LDR      r11,[sp,#0x134]       ;546
0001a8  e029              B        |L1.510|
                  |L1.426|
0001aa  f8ddb130          LDR      r11,[sp,#0x130]       ;548
0001ae  e026              B        |L1.510|
                  |L1.432|
0001b0  f1b90f0f          CMP      r9,#0xf               ;550
0001b4  d023              BEQ      |L1.510|
0001b6  2001              MOVS     r0,#1                 ;551
0001b8  fa00f009          LSL      r0,r0,r9              ;551
0001bc  904b              STR      r0,[sp,#0x12c]        ;551
0001be  f1b90f00          CMP      r9,#0                 ;552
0001c2  d01b              BEQ      |L1.508|
0001c4  454d              CMP      r5,r9                 ;553
0001c6  da0b              BGE      |L1.480|
0001c8  464b              MOV      r3,r9                 ;553
0001ca  462a              MOV      r2,r5                 ;553
0001cc  4651              MOV      r1,r10                ;553
0001ce  a845              ADD      r0,sp,#0x114          ;553
0001d0  f7fffffe          BL       jpeg_fill_bit_buffer
0001d4  b908              CBNZ     r0,|L1.474|
0001d6  e0b4              B        |L1.834|
                  |L1.472|
0001d8  e068              B        |L1.684|
                  |L1.474|
0001da  f8dda11c          LDR      r10,[sp,#0x11c]       ;553
0001de  9d48              LDR      r5,[sp,#0x120]        ;553
                  |L1.480|
0001e0  eba50109          SUB      r1,r5,r9              ;554
0001e4  460d              MOV      r5,r1                 ;554
0001e6  fa4af001          ASR      r0,r10,r1             ;554
0001ea  2101              MOVS     r1,#1                 ;554
0001ec  fa01f109          LSL      r1,r1,r9              ;554
0001f0  1e49              SUBS     r1,r1,#1              ;554
0001f2  ea000901          AND      r9,r0,r1              ;554
0001f6  984b              LDR      r0,[sp,#0x12c]        ;555
0001f8  4448              ADD      r0,r0,r9              ;555
0001fa  904b              STR      r0,[sp,#0x12c]        ;555
                  |L1.508|
0001fc  e055              B        |L1.682|
                  |L1.510|
0001fe  bf00              NOP                            ;565
                  |L1.512|
000200  48f7              LDR      r0,|L1.1504|
000202  f8501028          LDR      r1,[r0,r8,LSL #2]     ;566
000206  984a              LDR      r0,[sp,#0x128]        ;566
000208  eb000441          ADD      r4,r0,r1,LSL #1       ;566
00020c  8820              LDRH     r0,[r4,#0]            ;567
00020e  b340              CBZ      r0,|L1.610|
000210  2d01              CMP      r5,#1                 ;568
000212  da0a              BGE      |L1.554|
000214  2301              MOVS     r3,#1                 ;568
000216  462a              MOV      r2,r5                 ;568
000218  4651              MOV      r1,r10                ;568
00021a  a845              ADD      r0,sp,#0x114          ;568
00021c  f7fffffe          BL       jpeg_fill_bit_buffer
000220  b900              CBNZ     r0,|L1.548|
000222  e08e              B        |L1.834|
                  |L1.548|
000224  f8dda11c          LDR      r10,[sp,#0x11c]       ;568
000228  9d48              LDR      r5,[sp,#0x120]        ;568
                  |L1.554|
00022a  1e68              SUBS     r0,r5,#1              ;569
00022c  4605              MOV      r5,r0                 ;569
00022e  fa4af000          ASR      r0,r10,r0             ;569
000232  f0000001          AND      r0,r0,#1              ;569
000236  b1d0              CBZ      r0,|L1.622|
000238  f9b40000          LDRSH    r0,[r4,#0]            ;570
00023c  994d              LDR      r1,[sp,#0x134]        ;570
00023e  4008              ANDS     r0,r0,r1              ;570
000240  b9a8              CBNZ     r0,|L1.622|
000242  f9b40000          LDRSH    r0,[r4,#0]            ;571
000246  2800              CMP      r0,#0                 ;571
000248  db05              BLT      |L1.598|
00024a  8821              LDRH     r1,[r4,#0]            ;572
00024c  984d              LDR      r0,[sp,#0x134]        ;572
00024e  4408              ADD      r0,r0,r1              ;572
000250  b200              SXTH     r0,r0                 ;572
000252  8020              STRH     r0,[r4,#0]            ;572
000254  e00b              B        |L1.622|
                  |L1.598|
000256  8821              LDRH     r1,[r4,#0]            ;574
000258  984c              LDR      r0,[sp,#0x130]        ;574
00025a  4408              ADD      r0,r0,r1              ;574
00025c  b200              SXTH     r0,r0                 ;574
00025e  8020              STRH     r0,[r4,#0]            ;574
000260  e005              B        |L1.622|
                  |L1.610|
000262  f1a90001          SUB      r0,r9,#1              ;578
000266  f1b00900          SUBS     r9,r0,#0              ;578
00026a  da00              BGE      |L1.622|
00026c  e004              B        |L1.632|
                  |L1.622|
00026e  f1080801          ADD      r8,r8,#1              ;581
000272  984e              LDR      r0,[sp,#0x138]        ;582
000274  4580              CMP      r8,r0                 ;582
000276  ddc3              BLE      |L1.512|
                  |L1.632|
000278  bf00              NOP                            ;579
00027a  f1bb0f00          CMP      r11,#0                ;583
00027e  d00e              BEQ      |L1.670|
000280  49d7              LDR      r1,|L1.1504|
000282  f8510028          LDR      r0,[r1,r8,LSL #2]     ;584
000286  fa0ff28b          SXTH     r2,r11                ;586
00028a  994a              LDR      r1,[sp,#0x128]        ;586
00028c  f8212010          STRH     r2,[r1,r0,LSL #1]     ;586
000290  9943              LDR      r1,[sp,#0x10c]        ;588
000292  1c4a              ADDS     r2,r1,#1              ;588
000294  9243              STR      r2,[sp,#0x10c]        ;588
000296  aa03              ADD      r2,sp,#0xc            ;588
000298  f8420021          STR      r0,[r2,r1,LSL #2]     ;588
00029c  bf00              NOP                            ;589
                  |L1.670|
00029e  f1080801          ADD      r8,r8,#1              ;537
                  |L1.674|
0002a2  984e              LDR      r0,[sp,#0x138]        ;537
0002a4  4580              CMP      r8,r0                 ;537
0002a6  f77faf1a          BLE      |L1.222|
                  |L1.682|
0002aa  bf00              NOP                            ;557
                  |L1.684|
0002ac  984b              LDR      r0,[sp,#0x12c]        ;593
0002ae  b3c0              CBZ      r0,|L1.802|
0002b0  e031              B        |L1.790|
                  |L1.690|
0002b2  48cb              LDR      r0,|L1.1504|
0002b4  f8501028          LDR      r1,[r0,r8,LSL #2]     ;600
0002b8  984a              LDR      r0,[sp,#0x128]        ;600
0002ba  eb000441          ADD      r4,r0,r1,LSL #1       ;600
0002be  8820              LDRH     r0,[r4,#0]            ;601
0002c0  b308              CBZ      r0,|L1.774|
0002c2  2d01              CMP      r5,#1                 ;602
0002c4  da0a              BGE      |L1.732|
0002c6  2301              MOVS     r3,#1                 ;602
0002c8  462a              MOV      r2,r5                 ;602
0002ca  4651              MOV      r1,r10                ;602
0002cc  a845              ADD      r0,sp,#0x114          ;602
0002ce  f7fffffe          BL       jpeg_fill_bit_buffer
0002d2  b900              CBNZ     r0,|L1.726|
0002d4  e035              B        |L1.834|
                  |L1.726|
0002d6  f8dda11c          LDR      r10,[sp,#0x11c]       ;602
0002da  9d48              LDR      r5,[sp,#0x120]        ;602
                  |L1.732|
0002dc  1e68              SUBS     r0,r5,#1              ;603
0002de  4605              MOV      r5,r0                 ;603
0002e0  fa4af000          ASR      r0,r10,r0             ;603
0002e4  f0000001          AND      r0,r0,#1              ;603
0002e8  b168              CBZ      r0,|L1.774|
0002ea  f9b40000          LDRSH    r0,[r4,#0]            ;604
0002ee  994d              LDR      r1,[sp,#0x134]        ;604
0002f0  4008              ANDS     r0,r0,r1              ;604
0002f2  b940              CBNZ     r0,|L1.774|
0002f4  f9b40000          LDRSH    r0,[r4,#0]            ;605
0002f8  2800              CMP      r0,#0                 ;605
0002fa  db05              BLT      |L1.776|
0002fc  8821              LDRH     r1,[r4,#0]            ;606
0002fe  984d              LDR      r0,[sp,#0x134]        ;606
000300  4408              ADD      r0,r0,r1              ;606
000302  b200              SXTH     r0,r0                 ;606
000304  8020              STRH     r0,[r4,#0]            ;606
                  |L1.774|
000306  e004              B        |L1.786|
                  |L1.776|
000308  8821              LDRH     r1,[r4,#0]            ;608
00030a  984c              LDR      r0,[sp,#0x130]        ;608
00030c  4408              ADD      r0,r0,r1              ;608
00030e  b200              SXTH     r0,r0                 ;608
000310  8020              STRH     r0,[r4,#0]            ;608
                  |L1.786|
000312  f1080801          ADD      r8,r8,#1              ;599
                  |L1.790|
000316  984e              LDR      r0,[sp,#0x138]        ;599
000318  4580              CMP      r8,r0                 ;599
00031a  ddca              BLE      |L1.690|
00031c  984b              LDR      r0,[sp,#0x12c]        ;614
00031e  1e40              SUBS     r0,r0,#1              ;614
000320  904b              STR      r0,[sp,#0x12c]        ;614
                  |L1.802|
000322  9845              LDR      r0,[sp,#0x114]        ;618
000324  69b1              LDR      r1,[r6,#0x18]         ;618
000326  6008              STR      r0,[r1,#0]            ;618
000328  9846              LDR      r0,[sp,#0x118]        ;618
00032a  69b1              LDR      r1,[r6,#0x18]         ;618
00032c  6048              STR      r0,[r1,#4]            ;618
00032e  f8c7a00c          STR      r10,[r7,#0xc]         ;618
000332  613d              STR      r5,[r7,#0x10]         ;618
000334  984b              LDR      r0,[sp,#0x12c]        ;619
000336  6178              STR      r0,[r7,#0x14]         ;619
                  |L1.824|
000338  6ab8              LDR      r0,[r7,#0x28]         ;623
00033a  1e40              SUBS     r0,r0,#1              ;623
00033c  62b8              STR      r0,[r7,#0x28]         ;623
00033e  2001              MOVS     r0,#1                 ;625
000340  e6ae              B        |L1.160|
                  |L1.834|
000342  e009              B        |L1.856|
                  |L1.836|
000344  2100              MOVS     r1,#0                 ;630
000346  9843              LDR      r0,[sp,#0x10c]        ;630
000348  1e40              SUBS     r0,r0,#1              ;630
00034a  aa03              ADD      r2,sp,#0xc            ;630
00034c  9043              STR      r0,[sp,#0x10c]        ;630
00034e  f8522020          LDR      r2,[r2,r0,LSL #2]     ;630
000352  984a              LDR      r0,[sp,#0x128]        ;630
000354  f8201012          STRH     r1,[r0,r2,LSL #1]     ;630
                  |L1.856|
000358  9843              LDR      r0,[sp,#0x10c]        ;629
00035a  2800              CMP      r0,#0                 ;629
00035c  dcf2              BGT      |L1.836|
00035e  2000              MOVS     r0,#0                 ;632
000360  e69e              B        |L1.160|
;;;634    
                          ENDP

                  decode_mcu_DC_refine PROC
;;;441    METHODDEF(boolean)
;;;442    decode_mcu_DC_refine (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
000362  e92d4ff0          PUSH     {r4-r11,lr}
;;;443    {   
000366  b085              SUB      sp,sp,#0x14
000368  4604              MOV      r4,r0
00036a  468a              MOV      r10,r1
;;;444      phuff_entropy_ptr entropy = (phuff_entropy_ptr) cinfo->entropy;
00036c  f8d451bc          LDR      r5,[r4,#0x1bc]
;;;445      int p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
000370  f894119c          LDRB     r1,[r4,#0x19c]
000374  2001              MOVS     r0,#1
000376  fa00fb01          LSL      r11,r0,r1
;;;446      int blkn;
;;;447      JBLOCKROW block;
;;;448      BITREAD_STATE_VARS;
;;;449    
;;;450      /* Process restart marker if needed; may have to suspend */
;;;451      if (cinfo->restart_interval) {
00037a  f8d40114          LDR      r0,[r4,#0x114]
00037e  b148              CBZ      r0,|L1.916|
;;;452        if (entropy->restarts_to_go == 0)
000380  6aa8              LDR      r0,[r5,#0x28]
000382  b938              CBNZ     r0,|L1.916|
;;;453          if (! process_restart(cinfo))
000384  4620              MOV      r0,r4
000386  f7fffffe          BL       process_restart
00038a  b918              CBNZ     r0,|L1.916|
;;;454    	return FALSE;
00038c  2000              MOVS     r0,#0
                  |L1.910|
;;;455      }
;;;456    
;;;457      /* Not worth the cycles to check insufficient_data here,
;;;458       * since we will not change the data anyway if we read zeroes.
;;;459       */
;;;460    
;;;461      /* Load up working state */
;;;462      BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
;;;463    
;;;464      /* Outer loop handles each block in the MCU */
;;;465    
;;;466      for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
;;;467        block = MCU_data[blkn];
;;;468    
;;;469        /* Encoded data is simply the next bit of the two's-complement DC value */
;;;470        CHECK_BIT_BUFFER(br_state, 1, return FALSE);
;;;471        if (GET_BITS(1))
;;;472          (*block)[0] |= p1;
;;;473        /* Note: since we use |=, repeating the assignment later is safe */
;;;474      }
;;;475    
;;;476      /* Completed MCU, so update state */
;;;477      BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
;;;478    
;;;479      /* Account for restart interval (no-op if not using restarts) */
;;;480      entropy->restarts_to_go--;
;;;481    
;;;482      return TRUE;
;;;483    }
00038e  b005              ADD      sp,sp,#0x14
000390  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.916|
000394  9404              STR      r4,[sp,#0x10]         ;462
000396  69a0              LDR      r0,[r4,#0x18]         ;462
000398  6800              LDR      r0,[r0,#0]            ;462
00039a  9000              STR      r0,[sp,#0]            ;462
00039c  69a0              LDR      r0,[r4,#0x18]         ;462
00039e  6840              LDR      r0,[r0,#4]            ;462
0003a0  9001              STR      r0,[sp,#4]            ;462
0003a2  f8d5800c          LDR      r8,[r5,#0xc]          ;462
0003a6  692e              LDR      r6,[r5,#0x10]         ;462
0003a8  2700              MOVS     r7,#0                 ;466
0003aa  e01e              B        |L1.1002|
                  |L1.940|
0003ac  f85a9027          LDR      r9,[r10,r7,LSL #2]    ;467
0003b0  2e01              CMP      r6,#1                 ;470
0003b2  da0b              BGE      |L1.972|
0003b4  2301              MOVS     r3,#1                 ;470
0003b6  4632              MOV      r2,r6                 ;470
0003b8  4641              MOV      r1,r8                 ;470
0003ba  4668              MOV      r0,sp                 ;470
0003bc  f7fffffe          BL       jpeg_fill_bit_buffer
0003c0  b908              CBNZ     r0,|L1.966|
0003c2  2000              MOVS     r0,#0                 ;470
0003c4  e7e3              B        |L1.910|
                  |L1.966|
0003c6  f8dd8008          LDR      r8,[sp,#8]            ;470
0003ca  9e03              LDR      r6,[sp,#0xc]          ;470
                  |L1.972|
0003cc  1e70              SUBS     r0,r6,#1              ;471
0003ce  4606              MOV      r6,r0                 ;471
0003d0  fa48f000          ASR      r0,r8,r0              ;471
0003d4  f0000001          AND      r0,r0,#1              ;471
0003d8  b130              CBZ      r0,|L1.1000|
0003da  f8b90000          LDRH     r0,[r9,#0]            ;472
0003de  ea40000b          ORR      r0,r0,r11             ;472
0003e2  b200              SXTH     r0,r0                 ;472
0003e4  f8a90000          STRH     r0,[r9,#0]            ;472
                  |L1.1000|
0003e8  1c7f              ADDS     r7,r7,#1              ;466
                  |L1.1002|
0003ea  f8d40164          LDR      r0,[r4,#0x164]        ;466
0003ee  42b8              CMP      r0,r7                 ;466
0003f0  dcdc              BGT      |L1.940|
0003f2  9800              LDR      r0,[sp,#0]            ;477
0003f4  69a1              LDR      r1,[r4,#0x18]         ;477
0003f6  6008              STR      r0,[r1,#0]            ;477
0003f8  9801              LDR      r0,[sp,#4]            ;477
0003fa  69a1              LDR      r1,[r4,#0x18]         ;477
0003fc  6048              STR      r0,[r1,#4]            ;477
0003fe  f8c5800c          STR      r8,[r5,#0xc]          ;477
000402  612e              STR      r6,[r5,#0x10]         ;477
000404  6aa8              LDR      r0,[r5,#0x28]         ;480
000406  1e40              SUBS     r0,r0,#1              ;480
000408  62a8              STR      r0,[r5,#0x28]         ;480
00040a  2001              MOVS     r0,#1                 ;482
00040c  e7bf              B        |L1.910|
;;;484    
                          ENDP

                  decode_mcu_AC_first PROC
;;;356    METHODDEF(boolean)
;;;357    decode_mcu_AC_first (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
00040e  e92d4ff3          PUSH     {r0,r1,r4-r11,lr}
;;;358    {   
000412  b08d              SUB      sp,sp,#0x34
000414  4604              MOV      r4,r0
;;;359      phuff_entropy_ptr entropy = (phuff_entropy_ptr) cinfo->entropy;
000416  f8d451bc          LDR      r5,[r4,#0x1bc]
;;;360      int Se = cinfo->Se;
00041a  f8d40194          LDR      r0,[r4,#0x194]
00041e  900c              STR      r0,[sp,#0x30]
;;;361      int Al = cinfo->Al;
000420  f8d4019c          LDR      r0,[r4,#0x19c]
000424  900b              STR      r0,[sp,#0x2c]
;;;362      register int s, k, r;
;;;363      unsigned int EOBRUN;
;;;364      JBLOCKROW block;
;;;365      BITREAD_STATE_VARS;
;;;366      d_derived_tbl * tbl;
;;;367    
;;;368      /* Process restart marker if needed; may have to suspend */
;;;369      if (cinfo->restart_interval) {
000426  f8d40114          LDR      r0,[r4,#0x114]
00042a  b148              CBZ      r0,|L1.1088|
;;;370        if (entropy->restarts_to_go == 0)
00042c  6aa8              LDR      r0,[r5,#0x28]
00042e  b938              CBNZ     r0,|L1.1088|
;;;371          if (! process_restart(cinfo))
000430  4620              MOV      r0,r4
000432  f7fffffe          BL       process_restart
000436  b918              CBNZ     r0,|L1.1088|
;;;372    	return FALSE;
000438  2000              MOVS     r0,#0
                  |L1.1082|
;;;373      }
;;;374    
;;;375      /* If we've run out of data, just leave the MCU set to zeroes.
;;;376       * This way, we return uniform gray for the remainder of the segment.
;;;377       */
;;;378      if (! entropy->pub.insufficient_data) {
;;;379    
;;;380        /* Load up working state.
;;;381         * We can avoid loading/saving bitread state if in an EOB run.
;;;382         */
;;;383        EOBRUN = entropy->saved.EOBRUN;	/* only part of saved state we need */
;;;384    
;;;385        /* There is always only one block per MCU */
;;;386    
;;;387        if (EOBRUN > 0)		/* if it's a band of zeroes... */
;;;388          EOBRUN--;			/* ...process it now (we do nothing) */
;;;389        else {
;;;390          BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
;;;391          block = MCU_data[0];
;;;392          tbl = entropy->ac_derived_tbl;
;;;393    
;;;394          for (k = cinfo->Ss; k <= Se; k++) {
;;;395    	HUFF_DECODE(s, br_state, tbl, return FALSE, label2);
;;;396    	r = s >> 4;
;;;397    	s &= 15;
;;;398    	if (s) {
;;;399    	  k += r;
;;;400    	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
;;;401    	  r = GET_BITS(s);
;;;402    	  s = HUFF_EXTEND(r, s);
;;;403    	  /* Scale and output coefficient in natural (dezigzagged) order */
;;;404    	  (*block)[jpeg_natural_order[k]] = (JCOEF) (s << Al);
;;;405    	} else {
;;;406    	  if (r == 15) {	/* ZRL */
;;;407    	    k += 15;		/* skip 15 zeroes in band */
;;;408    	  } else {		/* EOBr, run length is 2^r + appended bits */
;;;409    	    EOBRUN = 1 << r;
;;;410    	    if (r) {		/* EOBr, r > 0 */
;;;411    	      CHECK_BIT_BUFFER(br_state, r, return FALSE);
;;;412    	      r = GET_BITS(r);
;;;413    	      EOBRUN += r;
;;;414    	    }
;;;415    	    EOBRUN--;		/* this band is processed at this moment */
;;;416    	    break;		/* force end-of-band */
;;;417    	  }
;;;418    	}
;;;419          }
;;;420    
;;;421          BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
;;;422        }
;;;423    
;;;424        /* Completed MCU, so update state */
;;;425        entropy->saved.EOBRUN = EOBRUN;	/* only part of saved state we need */
;;;426      }
;;;427    
;;;428      /* Account for restart interval (no-op if not using restarts) */
;;;429      entropy->restarts_to_go--;
;;;430    
;;;431      return TRUE;
;;;432    }
00043a  b00f              ADD      sp,sp,#0x3c
00043c  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.1088|
000440  68a8              LDR      r0,[r5,#8]            ;378
000442  2800              CMP      r0,#0                 ;378
000444  d17e              BNE      |L1.1348|
000446  f8d5a014          LDR      r10,[r5,#0x14]        ;383
00044a  f1ba0f00          CMP      r10,#0                ;387
00044e  d002              BEQ      |L1.1110|
000450  f1aa0a01          SUB      r10,r10,#1            ;388
000454  e0bc              B        |L1.1488|
                  |L1.1110|
000456  9409              STR      r4,[sp,#0x24]         ;390
000458  69a0              LDR      r0,[r4,#0x18]         ;390
00045a  6800              LDR      r0,[r0,#0]            ;390
00045c  9005              STR      r0,[sp,#0x14]         ;390
00045e  69a0              LDR      r0,[r4,#0x18]         ;390
000460  6840              LDR      r0,[r0,#4]            ;390
000462  9006              STR      r0,[sp,#0x18]         ;390
000464  f8d5b00c          LDR      r11,[r5,#0xc]         ;390
000468  692f              LDR      r7,[r5,#0x10]         ;390
00046a  980e              LDR      r0,[sp,#0x38]         ;391
00046c  6800              LDR      r0,[r0,#0]            ;391
00046e  900a              STR      r0,[sp,#0x28]         ;391
000470  6be8              LDR      r0,[r5,#0x3c]         ;392
000472  9004              STR      r0,[sp,#0x10]         ;392
000474  f8d49190          LDR      r9,[r4,#0x190]        ;394
000478  e09c              B        |L1.1460|
                  |L1.1146|
00047a  2f08              CMP      r7,#8                 ;395
00047c  da10              BGE      |L1.1184|
00047e  2300              MOVS     r3,#0                 ;395
000480  463a              MOV      r2,r7                 ;395
000482  4659              MOV      r1,r11                ;395
000484  a805              ADD      r0,sp,#0x14           ;395
000486  f7fffffe          BL       jpeg_fill_bit_buffer
00048a  b908              CBNZ     r0,|L1.1168|
00048c  2000              MOVS     r0,#0                 ;395
00048e  e7d4              B        |L1.1082|
                  |L1.1168|
000490  f8ddb01c          LDR      r11,[sp,#0x1c]        ;395
000494  9f08              LDR      r7,[sp,#0x20]         ;395
000496  2f08              CMP      r7,#8                 ;395
000498  da02              BGE      |L1.1184|
00049a  2001              MOVS     r0,#1                 ;395
00049c  9003              STR      r0,[sp,#0xc]          ;395
00049e  e019              B        |L1.1236|
                  |L1.1184|
0004a0  f1a70008          SUB      r0,r7,#8              ;395
0004a4  fa4bf000          ASR      r0,r11,r0             ;395
0004a8  b2c0              UXTB     r0,r0                 ;395
0004aa  9002              STR      r0,[sp,#8]            ;395
0004ac  9804              LDR      r0,[sp,#0x10]         ;395
0004ae  f1000190          ADD      r1,r0,#0x90           ;395
0004b2  9802              LDR      r0,[sp,#8]            ;395
0004b4  f8510020          LDR      r0,[r1,r0,LSL #2]     ;395
0004b8  9003              STR      r0,[sp,#0xc]          ;395
0004ba  b140              CBZ      r0,|L1.1230|
0004bc  9803              LDR      r0,[sp,#0xc]          ;395
0004be  1a3f              SUBS     r7,r7,r0              ;395
0004c0  9804              LDR      r0,[sp,#0x10]         ;395
0004c2  f5006092          ADD      r0,r0,#0x490          ;395
0004c6  9902              LDR      r1,[sp,#8]            ;395
0004c8  f8108001          LDRB     r8,[r0,r1]            ;395
0004cc  e012              B        |L1.1268|
                  |L1.1230|
0004ce  2009              MOVS     r0,#9                 ;395
0004d0  9003              STR      r0,[sp,#0xc]          ;395
0004d2  bf00              NOP                            ;395
                  |L1.1236|
0004d4  9803              LDR      r0,[sp,#0xc]          ;395
0004d6  9000              STR      r0,[sp,#0]            ;395
0004d8  463a              MOV      r2,r7                 ;395
0004da  4659              MOV      r1,r11                ;395
0004dc  a805              ADD      r0,sp,#0x14           ;395
0004de  9b04              LDR      r3,[sp,#0x10]         ;395
0004e0  f7fffffe          BL       jpeg_huff_decode
0004e4  f1b00800          SUBS     r8,r0,#0              ;395
0004e8  da01              BGE      |L1.1262|
0004ea  2000              MOVS     r0,#0                 ;395
0004ec  e7a5              B        |L1.1082|
                  |L1.1262|
0004ee  f8ddb01c          LDR      r11,[sp,#0x1c]        ;395
0004f2  9f08              LDR      r7,[sp,#0x20]         ;395
                  |L1.1268|
0004f4  ea4f1628          ASR      r6,r8,#4              ;396
0004f8  f008080f          AND      r8,r8,#0xf            ;397
0004fc  f1b80f00          CMP      r8,#0                 ;398
000500  d032              BEQ      |L1.1384|
000502  44b1              ADD      r9,r9,r6              ;399
000504  4547              CMP      r7,r8                 ;400
000506  da0b              BGE      |L1.1312|
000508  4643              MOV      r3,r8                 ;400
00050a  463a              MOV      r2,r7                 ;400
00050c  4659              MOV      r1,r11                ;400
00050e  a805              ADD      r0,sp,#0x14           ;400
000510  f7fffffe          BL       jpeg_fill_bit_buffer
000514  b908              CBNZ     r0,|L1.1306|
000516  2000              MOVS     r0,#0                 ;400
000518  e78f              B        |L1.1082|
                  |L1.1306|
00051a  f8ddb01c          LDR      r11,[sp,#0x1c]        ;400
00051e  9f08              LDR      r7,[sp,#0x20]         ;400
                  |L1.1312|
000520  eba70108          SUB      r1,r7,r8              ;401
000524  460f              MOV      r7,r1                 ;401
000526  fa4bf001          ASR      r0,r11,r1             ;401
00052a  2101              MOVS     r1,#1                 ;401
00052c  fa01f108          LSL      r1,r1,r8              ;401
000530  1e49              SUBS     r1,r1,#1              ;401
000532  ea000601          AND      r6,r0,r1              ;401
000536  482b              LDR      r0,|L1.1508|
000538  f8500028          LDR      r0,[r0,r8,LSL #2]     ;402
00053c  42b0              CMP      r0,r6                 ;402
00053e  dd06              BLE      |L1.1358|
000540  4829              LDR      r0,|L1.1512|
000542  e000              B        |L1.1350|
                  |L1.1348|
000544  e046              B        |L1.1492|
                  |L1.1350|
000546  f8500028          LDR      r0,[r0,r8,LSL #2]     ;402
00054a  4430              ADD      r0,r0,r6              ;402
00054c  e000              B        |L1.1360|
                  |L1.1358|
00054e  4630              MOV      r0,r6                 ;402
                  |L1.1360|
000550  4680              MOV      r8,r0                 ;402
000552  980b              LDR      r0,[sp,#0x2c]         ;404
000554  fa08f000          LSL      r0,r8,r0              ;404
000558  b201              SXTH     r1,r0                 ;404
00055a  4821              LDR      r0,|L1.1504|
00055c  f8502029          LDR      r2,[r0,r9,LSL #2]     ;404
000560  980a              LDR      r0,[sp,#0x28]         ;404
000562  f8201012          STRH     r1,[r0,r2,LSL #1]     ;404
000566  e023              B        |L1.1456|
                  |L1.1384|
000568  2e0f              CMP      r6,#0xf               ;406
00056a  d102              BNE      |L1.1394|
00056c  f109090f          ADD      r9,r9,#0xf            ;407
000570  e01e              B        |L1.1456|
                  |L1.1394|
000572  2001              MOVS     r0,#1                 ;409
000574  fa00fa06          LSL      r10,r0,r6             ;409
000578  b1be              CBZ      r6,|L1.1450|
00057a  42b7              CMP      r7,r6                 ;411
00057c  da0b              BGE      |L1.1430|
00057e  4633              MOV      r3,r6                 ;411
000580  463a              MOV      r2,r7                 ;411
000582  4659              MOV      r1,r11                ;411
000584  a805              ADD      r0,sp,#0x14           ;411
000586  f7fffffe          BL       jpeg_fill_bit_buffer
00058a  b908              CBNZ     r0,|L1.1424|
00058c  2000              MOVS     r0,#0                 ;411
00058e  e754              B        |L1.1082|
                  |L1.1424|
000590  f8ddb01c          LDR      r11,[sp,#0x1c]        ;411
000594  9f08              LDR      r7,[sp,#0x20]         ;411
                  |L1.1430|
000596  1bb9              SUBS     r1,r7,r6              ;412
000598  460f              MOV      r7,r1                 ;412
00059a  fa4bf001          ASR      r0,r11,r1             ;412
00059e  2101              MOVS     r1,#1                 ;412
0005a0  40b1              LSLS     r1,r1,r6              ;412
0005a2  1e49              SUBS     r1,r1,#1              ;412
0005a4  ea000601          AND      r6,r0,r1              ;412
0005a8  44b2              ADD      r10,r10,r6            ;413
                  |L1.1450|
0005aa  f1aa0a01          SUB      r10,r10,#1            ;415
0005ae  e005              B        |L1.1468|
                  |L1.1456|
0005b0  f1090901          ADD      r9,r9,#1              ;394
                  |L1.1460|
0005b4  980c              LDR      r0,[sp,#0x30]         ;394
0005b6  4581              CMP      r9,r0                 ;394
0005b8  f77faf5f          BLE      |L1.1146|
                  |L1.1468|
0005bc  bf00              NOP                            ;416
0005be  9805              LDR      r0,[sp,#0x14]         ;421
0005c0  69a1              LDR      r1,[r4,#0x18]         ;421
0005c2  6008              STR      r0,[r1,#0]            ;421
0005c4  9806              LDR      r0,[sp,#0x18]         ;421
0005c6  69a1              LDR      r1,[r4,#0x18]         ;421
0005c8  6048              STR      r0,[r1,#4]            ;421
0005ca  f8c5b00c          STR      r11,[r5,#0xc]         ;421
0005ce  612f              STR      r7,[r5,#0x10]         ;421
                  |L1.1488|
0005d0  f8c5a014          STR      r10,[r5,#0x14]        ;425
                  |L1.1492|
0005d4  6aa8              LDR      r0,[r5,#0x28]         ;429
0005d6  1e40              SUBS     r0,r0,#1              ;429
0005d8  62a8              STR      r0,[r5,#0x28]         ;429
0005da  2001              MOVS     r0,#1                 ;431
0005dc  e72d              B        |L1.1082|
0005de  0000              DCW      0x0000
                  |L1.1504|
                          DCD      jpeg_natural_order
                  |L1.1508|
                          DCD      extend_test
                  |L1.1512|
                          DCD      extend_offset
                          ENDP

                  decode_mcu_DC_first PROC
;;;285    METHODDEF(boolean)
;;;286    decode_mcu_DC_first (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
0005ec  e92d4ff3          PUSH     {r0,r1,r4-r11,lr}
;;;287    {   
0005f0  b091              SUB      sp,sp,#0x44
0005f2  4604              MOV      r4,r0
;;;288      phuff_entropy_ptr entropy = (phuff_entropy_ptr) cinfo->entropy;
0005f4  f8d451bc          LDR      r5,[r4,#0x1bc]
;;;289      int Al = cinfo->Al;
0005f8  f8d4019c          LDR      r0,[r4,#0x19c]
0005fc  9010              STR      r0,[sp,#0x40]
;;;290      register int s, r;
;;;291      int blkn, ci;
;;;292      JBLOCKROW block;
;;;293      BITREAD_STATE_VARS;
;;;294      savable_state state;
;;;295      d_derived_tbl * tbl;
;;;296      jpeg_component_info * compptr;
;;;297    
;;;298      /* Process restart marker if needed; may have to suspend */
;;;299      if (cinfo->restart_interval) {
0005fe  f8d40114          LDR      r0,[r4,#0x114]
000602  b148              CBZ      r0,|L1.1560|
;;;300        if (entropy->restarts_to_go == 0)
000604  6aa8              LDR      r0,[r5,#0x28]
000606  b938              CBNZ     r0,|L1.1560|
;;;301          if (! process_restart(cinfo))
000608  4620              MOV      r0,r4
00060a  f7fffffe          BL       process_restart
00060e  b918              CBNZ     r0,|L1.1560|
;;;302    	return FALSE;
000610  2000              MOVS     r0,#0
                  |L1.1554|
;;;303      }
;;;304    
;;;305      /* If we've run out of data, just leave the MCU set to zeroes.
;;;306       * This way, we return uniform gray for the remainder of the segment.
;;;307       */
;;;308      if (! entropy->pub.insufficient_data) {
;;;309    
;;;310        /* Load up working state */
;;;311        BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
;;;312        ASSIGN_STATE(state, entropy->saved);
;;;313    
;;;314        /* Outer loop handles each block in the MCU */
;;;315    
;;;316        for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
;;;317          block = MCU_data[blkn];
;;;318          ci = cinfo->MCU_membership[blkn];
;;;319          compptr = cinfo->cur_comp_info[ci];
;;;320          tbl = entropy->derived_tbls[compptr->dc_tbl_no];
;;;321    
;;;322          /* Decode a single block's worth of coefficients */
;;;323    
;;;324          /* Section F.2.2.1: decode the DC coefficient difference */
;;;325          HUFF_DECODE(s, br_state, tbl, return FALSE, label1);
;;;326          if (s) {
;;;327    	CHECK_BIT_BUFFER(br_state, s, return FALSE);
;;;328    	r = GET_BITS(s);
;;;329    	s = HUFF_EXTEND(r, s);
;;;330          }
;;;331    
;;;332          /* Convert DC difference to actual value, update last_dc_val */
;;;333          s += state.last_dc_val[ci];
;;;334          state.last_dc_val[ci] = s;
;;;335          /* Scale and output the coefficient (assumes jpeg_natural_order[0]=0) */
;;;336          (*block)[0] = (JCOEF) (s << Al);
;;;337        }
;;;338    
;;;339        /* Completed MCU, so update state */
;;;340        BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
;;;341        ASSIGN_STATE(entropy->saved, state);
;;;342      }
;;;343    
;;;344      /* Account for restart interval (no-op if not using restarts) */
;;;345      entropy->restarts_to_go--;
;;;346    
;;;347      return TRUE;
;;;348    }
000612  b013              ADD      sp,sp,#0x4c
000614  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.1560|
000618  68a8              LDR      r0,[r5,#8]            ;308
00061a  2800              CMP      r0,#0                 ;308
00061c  d17d              BNE      |L1.1818|
00061e  940d              STR      r4,[sp,#0x34]         ;311
000620  69a0              LDR      r0,[r4,#0x18]         ;311
000622  6800              LDR      r0,[r0,#0]            ;311
000624  9009              STR      r0,[sp,#0x24]         ;311
000626  69a0              LDR      r0,[r4,#0x18]         ;311
000628  6840              LDR      r0,[r0,#4]            ;311
00062a  900a              STR      r0,[sp,#0x28]         ;311
00062c  f8d5900c          LDR      r9,[r5,#0xc]          ;311
000630  692f              LDR      r7,[r5,#0x10]         ;311
000632  2214              MOVS     r2,#0x14              ;312
000634  f1050114          ADD      r1,r5,#0x14           ;312
000638  a804              ADD      r0,sp,#0x10           ;312
00063a  f7fffffe          BL       __aeabi_memcpy4
00063e  f04f0800          MOV      r8,#0                 ;316
000642  e081              B        |L1.1864|
                  |L1.1604|
000644  9812              LDR      r0,[sp,#0x48]         ;317
000646  f8500028          LDR      r0,[r0,r8,LSL #2]     ;317
00064a  900e              STR      r0,[sp,#0x38]         ;317
00064c  f50470b4          ADD      r0,r4,#0x168          ;318
000650  f850a028          LDR      r10,[r0,r8,LSL #2]    ;318
000654  381c              SUBS     r0,r0,#0x1c           ;319
000656  f850002a          LDR      r0,[r0,r10,LSL #2]    ;319
00065a  9003              STR      r0,[sp,#0xc]          ;319
00065c  9803              LDR      r0,[sp,#0xc]          ;320
00065e  6941              LDR      r1,[r0,#0x14]         ;320
000660  f105002c          ADD      r0,r5,#0x2c           ;320
000664  f850b021          LDR      r11,[r0,r1,LSL #2]    ;320
000668  2f08              CMP      r7,#8                 ;325
00066a  da10              BGE      |L1.1678|
00066c  2300              MOVS     r3,#0                 ;325
00066e  463a              MOV      r2,r7                 ;325
000670  4649              MOV      r1,r9                 ;325
000672  a809              ADD      r0,sp,#0x24           ;325
000674  f7fffffe          BL       jpeg_fill_bit_buffer
000678  b908              CBNZ     r0,|L1.1662|
00067a  2000              MOVS     r0,#0                 ;325
00067c  e7c9              B        |L1.1554|
                  |L1.1662|
00067e  f8dd902c          LDR      r9,[sp,#0x2c]         ;325
000682  9f0c              LDR      r7,[sp,#0x30]         ;325
000684  2f08              CMP      r7,#8                 ;325
000686  da02              BGE      |L1.1678|
000688  2001              MOVS     r0,#1                 ;325
00068a  9002              STR      r0,[sp,#8]            ;325
00068c  e016              B        |L1.1724|
                  |L1.1678|
00068e  f1a70008          SUB      r0,r7,#8              ;325
000692  fa49f000          ASR      r0,r9,r0              ;325
000696  b2c0              UXTB     r0,r0                 ;325
000698  9001              STR      r0,[sp,#4]            ;325
00069a  f10b0190          ADD      r1,r11,#0x90          ;325
00069e  9801              LDR      r0,[sp,#4]            ;325
0006a0  f8510020          LDR      r0,[r1,r0,LSL #2]     ;325
0006a4  9002              STR      r0,[sp,#8]            ;325
0006a6  b130              CBZ      r0,|L1.1718|
0006a8  9802              LDR      r0,[sp,#8]            ;325
0006aa  1a3f              SUBS     r7,r7,r0              ;325
0006ac  f50b6092          ADD      r0,r11,#0x490         ;325
0006b0  9901              LDR      r1,[sp,#4]            ;325
0006b2  5c46              LDRB     r6,[r0,r1]            ;325
0006b4  e011              B        |L1.1754|
                  |L1.1718|
0006b6  2009              MOVS     r0,#9                 ;325
0006b8  9002              STR      r0,[sp,#8]            ;325
0006ba  bf00              NOP                            ;325
                  |L1.1724|
0006bc  9802              LDR      r0,[sp,#8]            ;325
0006be  465b              MOV      r3,r11                ;325
0006c0  463a              MOV      r2,r7                 ;325
0006c2  4649              MOV      r1,r9                 ;325
0006c4  9000              STR      r0,[sp,#0]            ;325
0006c6  a809              ADD      r0,sp,#0x24           ;325
0006c8  f7fffffe          BL       jpeg_huff_decode
0006cc  1e06              SUBS     r6,r0,#0              ;325
0006ce  da01              BGE      |L1.1748|
0006d0  2000              MOVS     r0,#0                 ;325
0006d2  e79e              B        |L1.1554|
                  |L1.1748|
0006d4  f8dd902c          LDR      r9,[sp,#0x2c]         ;325
0006d8  9f0c              LDR      r7,[sp,#0x30]         ;325
                  |L1.1754|
0006da  b336              CBZ      r6,|L1.1834|
0006dc  42b7              CMP      r7,r6                 ;327
0006de  da0b              BGE      |L1.1784|
0006e0  4633              MOV      r3,r6                 ;327
0006e2  463a              MOV      r2,r7                 ;327
0006e4  4649              MOV      r1,r9                 ;327
0006e6  a809              ADD      r0,sp,#0x24           ;327
0006e8  f7fffffe          BL       jpeg_fill_bit_buffer
0006ec  b908              CBNZ     r0,|L1.1778|
0006ee  2000              MOVS     r0,#0                 ;327
0006f0  e78f              B        |L1.1554|
                  |L1.1778|
0006f2  f8dd902c          LDR      r9,[sp,#0x2c]         ;327
0006f6  9f0c              LDR      r7,[sp,#0x30]         ;327
                  |L1.1784|
0006f8  1bb9              SUBS     r1,r7,r6              ;328
0006fa  460f              MOV      r7,r1                 ;328
0006fc  fa49f001          ASR      r0,r9,r1              ;328
000700  2101              MOVS     r1,#1                 ;328
000702  40b1              LSLS     r1,r1,r6              ;328
000704  1e49              SUBS     r1,r1,#1              ;328
000706  4008              ANDS     r0,r0,r1              ;328
000708  900f              STR      r0,[sp,#0x3c]         ;328
00070a  48af              LDR      r0,|L1.2504|
00070c  f8501026          LDR      r1,[r0,r6,LSL #2]     ;329
000710  980f              LDR      r0,[sp,#0x3c]         ;329
000712  4281              CMP      r1,r0                 ;329
000714  dd07              BLE      |L1.1830|
000716  48ad              LDR      r0,|L1.2508|
000718  e000              B        |L1.1820|
                  |L1.1818|
00071a  e029              B        |L1.1904|
                  |L1.1820|
00071c  f8501026          LDR      r1,[r0,r6,LSL #2]     ;329
000720  980f              LDR      r0,[sp,#0x3c]         ;329
000722  4408              ADD      r0,r0,r1              ;329
000724  e000              B        |L1.1832|
                  |L1.1830|
000726  980f              LDR      r0,[sp,#0x3c]         ;329
                  |L1.1832|
000728  4606              MOV      r6,r0                 ;329
                  |L1.1834|
00072a  a805              ADD      r0,sp,#0x14           ;333
00072c  f850002a          LDR      r0,[r0,r10,LSL #2]    ;333
000730  4406              ADD      r6,r6,r0              ;333
000732  a805              ADD      r0,sp,#0x14           ;334
000734  f840602a          STR      r6,[r0,r10,LSL #2]    ;334
000738  9810              LDR      r0,[sp,#0x40]         ;336
00073a  fa06f000          LSL      r0,r6,r0              ;336
00073e  b201              SXTH     r1,r0                 ;336
000740  980e              LDR      r0,[sp,#0x38]         ;336
000742  8001              STRH     r1,[r0,#0]            ;336
000744  f1080801          ADD      r8,r8,#1              ;316
                  |L1.1864|
000748  f8d40164          LDR      r0,[r4,#0x164]        ;316
00074c  4540              CMP      r0,r8                 ;316
00074e  f73faf79          BGT      |L1.1604|
000752  9809              LDR      r0,[sp,#0x24]         ;340
000754  69a1              LDR      r1,[r4,#0x18]         ;340
000756  6008              STR      r0,[r1,#0]            ;340
000758  980a              LDR      r0,[sp,#0x28]         ;340
00075a  69a1              LDR      r1,[r4,#0x18]         ;340
00075c  6048              STR      r0,[r1,#4]            ;340
00075e  f8c5900c          STR      r9,[r5,#0xc]          ;340
000762  612f              STR      r7,[r5,#0x10]         ;340
000764  2214              MOVS     r2,#0x14              ;341
000766  a904              ADD      r1,sp,#0x10           ;341
000768  f1050014          ADD      r0,r5,#0x14           ;341
00076c  f7fffffe          BL       __aeabi_memcpy4
                  |L1.1904|
000770  6aa8              LDR      r0,[r5,#0x28]         ;345
000772  1e40              SUBS     r0,r0,#1              ;345
000774  62a8              STR      r0,[r5,#0x28]         ;345
000776  2001              MOVS     r0,#1                 ;347
000778  e74b              B        |L1.1554|
;;;349    
                          ENDP

                  start_pass_phuff_decoder PROC
;;;91     METHODDEF(void)
;;;92     start_pass_phuff_decoder (j_decompress_ptr cinfo)
00077a  e92d4ffe          PUSH     {r1-r11,lr}
;;;93     {
00077e  4604              MOV      r4,r0
;;;94       phuff_entropy_ptr entropy = (phuff_entropy_ptr) cinfo->entropy;
000780  f8d451bc          LDR      r5,[r4,#0x1bc]
;;;95       boolean is_DC_band, bad;
;;;96       int ci, coefi, tbl;
;;;97       int *coef_bit_ptr;
;;;98       jpeg_component_info * compptr;
;;;99     
;;;100      is_DC_band = (cinfo->Ss == 0);
000784  f8d40190          LDR      r0,[r4,#0x190]
000788  b908              CBNZ     r0,|L1.1934|
00078a  2001              MOVS     r0,#1
00078c  e000              B        |L1.1936|
                  |L1.1934|
00078e  2000              MOVS     r0,#0
                  |L1.1936|
000790  4680              MOV      r8,r0
;;;101    
;;;102      /* Validate scan parameters */
;;;103      bad = FALSE;
000792  2000              MOVS     r0,#0
000794  9002              STR      r0,[sp,#8]
;;;104      if (is_DC_band) {
000796  f1b80f00          CMP      r8,#0
00079a  d005              BEQ      |L1.1960|
;;;105        if (cinfo->Se != 0)
00079c  f8d40194          LDR      r0,[r4,#0x194]
0007a0  b198              CBZ      r0,|L1.1994|
;;;106          bad = TRUE;
0007a2  2001              MOVS     r0,#1
0007a4  9002              STR      r0,[sp,#8]
0007a6  e010              B        |L1.1994|
                  |L1.1960|
;;;107      } else {
;;;108        /* need not check Ss/Se < 0 since they came from unsigned bytes */
;;;109        if (cinfo->Ss > cinfo->Se || cinfo->Se >= DCTSIZE2)
0007a8  f50470c8          ADD      r0,r4,#0x190
0007ac  c803              LDM      r0,{r0,r1}
0007ae  4288              CMP      r0,r1
0007b0  dc03              BGT      |L1.1978|
0007b2  f8d40194          LDR      r0,[r4,#0x194]
0007b6  2840              CMP      r0,#0x40
0007b8  db01              BLT      |L1.1982|
                  |L1.1978|
;;;110          bad = TRUE;
0007ba  2001              MOVS     r0,#1
0007bc  9002              STR      r0,[sp,#8]
                  |L1.1982|
;;;111        /* AC scans may have only one component */
;;;112        if (cinfo->comps_in_scan != 1)
0007be  f8d40148          LDR      r0,[r4,#0x148]
0007c2  2801              CMP      r0,#1
0007c4  d001              BEQ      |L1.1994|
;;;113          bad = TRUE;
0007c6  2001              MOVS     r0,#1
0007c8  9002              STR      r0,[sp,#8]
                  |L1.1994|
;;;114      }
;;;115      if (cinfo->Ah != 0) {
0007ca  f8d40198          LDR      r0,[r4,#0x198]
0007ce  b138              CBZ      r0,|L1.2016|
;;;116        /* Successive approximation refinement scan: must have Al = Ah-1. */
;;;117        if (cinfo->Al != cinfo->Ah-1)
0007d0  f50470cc          ADD      r0,r4,#0x198
0007d4  c803              LDM      r0,{r0,r1}
0007d6  1e40              SUBS     r0,r0,#1
0007d8  4281              CMP      r1,r0
0007da  d001              BEQ      |L1.2016|
;;;118          bad = TRUE;
0007dc  2001              MOVS     r0,#1
0007de  9002              STR      r0,[sp,#8]
                  |L1.2016|
;;;119      }
;;;120      if (cinfo->Al > 13)		/* need not check for < 0 */
0007e0  f8d4019c          LDR      r0,[r4,#0x19c]
0007e4  280d              CMP      r0,#0xd
0007e6  dd01              BLE      |L1.2028|
;;;121        bad = TRUE;
0007e8  2001              MOVS     r0,#1
0007ea  9002              STR      r0,[sp,#8]
                  |L1.2028|
;;;122      /* Arguably the maximum Al value should be less than 13 for 8-bit precision,
;;;123       * but the spec doesn't say so, and we try to be liberal about what we
;;;124       * accept.  Note: large Al values could result in out-of-range DC
;;;125       * coefficients during early scans, leading to bizarre displays due to
;;;126       * overflows in the IDCT math.  But we won't crash.
;;;127       */
;;;128      if (bad)
0007ec  9802              LDR      r0,[sp,#8]
0007ee  b1b0              CBZ      r0,|L1.2078|
;;;129        ERREXIT4(cinfo, JERR_BAD_PROGRESSION,
0007f0  2010              MOVS     r0,#0x10
0007f2  6821              LDR      r1,[r4,#0]
0007f4  6148              STR      r0,[r1,#0x14]
0007f6  6821              LDR      r1,[r4,#0]
0007f8  f8d40190          LDR      r0,[r4,#0x190]
0007fc  6188              STR      r0,[r1,#0x18]
0007fe  f8d41194          LDR      r1,[r4,#0x194]
000802  6820              LDR      r0,[r4,#0]
000804  61c1              STR      r1,[r0,#0x1c]
000806  f8d41198          LDR      r1,[r4,#0x198]
00080a  6820              LDR      r0,[r4,#0]
00080c  6201              STR      r1,[r0,#0x20]
00080e  f8d4119c          LDR      r1,[r4,#0x19c]
000812  6820              LDR      r0,[r4,#0]
000814  6241              STR      r1,[r0,#0x24]
000816  6820              LDR      r0,[r4,#0]
000818  6801              LDR      r1,[r0,#0]
00081a  4620              MOV      r0,r4
00081c  4788              BLX      r1
                  |L1.2078|
;;;130    	     cinfo->Ss, cinfo->Se, cinfo->Ah, cinfo->Al);
;;;131      /* Update progression status, and verify that scan order is legal.
;;;132       * Note that inter-scan inconsistencies are treated as warnings
;;;133       * not fatal errors ... not clear if this is right way to behave.
;;;134       */
;;;135      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
00081e  2600              MOVS     r6,#0
000820  e048              B        |L1.2228|
                  |L1.2082|
;;;136        int cindex = cinfo->cur_comp_info[ci]->component_index;
000822  f50470a6          ADD      r0,r4,#0x14c
000826  f8500026          LDR      r0,[r0,r6,LSL #2]
00082a  6840              LDR      r0,[r0,#4]
00082c  9001              STR      r0,[sp,#4]
;;;137        coef_bit_ptr = & cinfo->coef_bits[cindex][0];
00082e  f8d410a0          LDR      r1,[r4,#0xa0]
000832  9801              LDR      r0,[sp,#4]
000834  eb012900          ADD      r9,r1,r0,LSL #8
;;;138        if (!is_DC_band && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
000838  f1b80f00          CMP      r8,#0
00083c  d111              BNE      |L1.2146|
00083e  f8d90000          LDR      r0,[r9,#0]
000842  2800              CMP      r0,#0
000844  da0d              BGE      |L1.2146|
;;;139          WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, 0);
000846  2073              MOVS     r0,#0x73
000848  6821              LDR      r1,[r4,#0]
00084a  6148              STR      r0,[r1,#0x14]
00084c  9801              LDR      r0,[sp,#4]
00084e  6821              LDR      r1,[r4,#0]
000850  6188              STR      r0,[r1,#0x18]
000852  2100              MOVS     r1,#0
000854  6820              LDR      r0,[r4,#0]
000856  61c1              STR      r1,[r0,#0x1c]
000858  6820              LDR      r0,[r4,#0]
00085a  1e49              SUBS     r1,r1,#1
00085c  6842              LDR      r2,[r0,#4]
00085e  4620              MOV      r0,r4
000860  4790              BLX      r2
                  |L1.2146|
;;;140        for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
000862  f8d47190          LDR      r7,[r4,#0x190]
000866  e020              B        |L1.2218|
                  |L1.2152|
;;;141          int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
000868  f8590027          LDR      r0,[r9,r7,LSL #2]
00086c  2800              CMP      r0,#0
00086e  da01              BGE      |L1.2164|
000870  2000              MOVS     r0,#0
000872  e001              B        |L1.2168|
                  |L1.2164|
000874  f8590027          LDR      r0,[r9,r7,LSL #2]
                  |L1.2168|
000878  9000              STR      r0,[sp,#0]
;;;142          if (cinfo->Ah != expected)
00087a  f8d41198          LDR      r1,[r4,#0x198]
00087e  9800              LDR      r0,[sp,#0]
000880  4281              CMP      r1,r0
000882  d00d              BEQ      |L1.2208|
;;;143    	WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, coefi);
000884  2073              MOVS     r0,#0x73
000886  6821              LDR      r1,[r4,#0]
000888  6148              STR      r0,[r1,#0x14]
00088a  9801              LDR      r0,[sp,#4]
00088c  6821              LDR      r1,[r4,#0]
00088e  6188              STR      r0,[r1,#0x18]
000890  6820              LDR      r0,[r4,#0]
000892  61c7              STR      r7,[r0,#0x1c]
000894  6820              LDR      r0,[r4,#0]
000896  f04f31ff          MOV      r1,#0xffffffff
00089a  6842              LDR      r2,[r0,#4]
00089c  4620              MOV      r0,r4
00089e  4790              BLX      r2
                  |L1.2208|
;;;144          coef_bit_ptr[coefi] = cinfo->Al;
0008a0  f8d4019c          LDR      r0,[r4,#0x19c]
0008a4  f8490027          STR      r0,[r9,r7,LSL #2]
0008a8  1c7f              ADDS     r7,r7,#1              ;140
                  |L1.2218|
0008aa  f8d40194          LDR      r0,[r4,#0x194]        ;140
0008ae  42b8              CMP      r0,r7                 ;140
0008b0  dada              BGE      |L1.2152|
0008b2  1c76              ADDS     r6,r6,#1              ;135
                  |L1.2228|
0008b4  f8d40148          LDR      r0,[r4,#0x148]        ;135
0008b8  42b0              CMP      r0,r6                 ;135
0008ba  dcb2              BGT      |L1.2082|
;;;145        }
;;;146      }
;;;147    
;;;148      /* Select MCU decoding routine */
;;;149      if (cinfo->Ah == 0) {
0008bc  f8d40198          LDR      r0,[r4,#0x198]
0008c0  b940              CBNZ     r0,|L1.2260|
;;;150        if (is_DC_band)
0008c2  f1b80f00          CMP      r8,#0
0008c6  d002              BEQ      |L1.2254|
;;;151          entropy->pub.decode_mcu = decode_mcu_DC_first;
0008c8  4841              LDR      r0,|L1.2512|
0008ca  6068              STR      r0,[r5,#4]
0008cc  e00a              B        |L1.2276|
                  |L1.2254|
;;;152        else
;;;153          entropy->pub.decode_mcu = decode_mcu_AC_first;
0008ce  4841              LDR      r0,|L1.2516|
0008d0  6068              STR      r0,[r5,#4]
0008d2  e007              B        |L1.2276|
                  |L1.2260|
;;;154      } else {
;;;155        if (is_DC_band)
0008d4  f1b80f00          CMP      r8,#0
0008d8  d002              BEQ      |L1.2272|
;;;156          entropy->pub.decode_mcu = decode_mcu_DC_refine;
0008da  483f              LDR      r0,|L1.2520|
0008dc  6068              STR      r0,[r5,#4]
0008de  e001              B        |L1.2276|
                  |L1.2272|
;;;157        else
;;;158          entropy->pub.decode_mcu = decode_mcu_AC_refine;
0008e0  483e              LDR      r0,|L1.2524|
0008e2  6068              STR      r0,[r5,#4]
                  |L1.2276|
;;;159      }
;;;160    
;;;161      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
0008e4  2600              MOVS     r6,#0
0008e6  e02b              B        |L1.2368|
                  |L1.2280|
;;;162        compptr = cinfo->cur_comp_info[ci];
0008e8  f50470a6          ADD      r0,r4,#0x14c
0008ec  f850b026          LDR      r11,[r0,r6,LSL #2]
;;;163        /* Make sure requested tables are present, and compute derived tables.
;;;164         * We may build same derived table more than once, but it's not expensive.
;;;165         */
;;;166        if (is_DC_band) {
0008f0  f1b80f00          CMP      r8,#0
0008f4  d00e              BEQ      |L1.2324|
;;;167          if (cinfo->Ah == 0) {	/* DC refinement needs no table */
0008f6  f8d40198          LDR      r0,[r4,#0x198]
0008fa  b9d8              CBNZ     r0,|L1.2356|
;;;168    	tbl = compptr->dc_tbl_no;
0008fc  f8dba014          LDR      r10,[r11,#0x14]
;;;169    	jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
000900  f105002c          ADD      r0,r5,#0x2c
000904  eb00038a          ADD      r3,r0,r10,LSL #2
000908  4652              MOV      r2,r10
00090a  2101              MOVS     r1,#1
00090c  4620              MOV      r0,r4
00090e  f7fffffe          BL       jpeg_make_d_derived_tbl
000912  e00f              B        |L1.2356|
                  |L1.2324|
;;;170    				& entropy->derived_tbls[tbl]);
;;;171          }
;;;172        } else {
;;;173          tbl = compptr->ac_tbl_no;
000914  f8dba018          LDR      r10,[r11,#0x18]
;;;174          jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
000918  f105002c          ADD      r0,r5,#0x2c
00091c  eb00038a          ADD      r3,r0,r10,LSL #2
000920  4652              MOV      r2,r10
000922  2100              MOVS     r1,#0
000924  4620              MOV      r0,r4
000926  f7fffffe          BL       jpeg_make_d_derived_tbl
;;;175    			      & entropy->derived_tbls[tbl]);
;;;176          /* remember the single active table */
;;;177          entropy->ac_derived_tbl = entropy->derived_tbls[tbl];
00092a  f105002c          ADD      r0,r5,#0x2c
00092e  f850002a          LDR      r0,[r0,r10,LSL #2]
000932  63e8              STR      r0,[r5,#0x3c]
                  |L1.2356|
;;;178        }
;;;179        /* Initialize DC predictions to 0 */
;;;180        entropy->saved.last_dc_val[ci] = 0;
000934  2100              MOVS     r1,#0
000936  f1050018          ADD      r0,r5,#0x18
00093a  f8401026          STR      r1,[r0,r6,LSL #2]
00093e  1c76              ADDS     r6,r6,#1              ;161
                  |L1.2368|
000940  f8d40148          LDR      r0,[r4,#0x148]        ;161
000944  42b0              CMP      r0,r6                 ;161
000946  dccf              BGT      |L1.2280|
;;;181      }
;;;182    
;;;183      /* Initialize bitread state variables */
;;;184      entropy->bitstate.bits_left = 0;
000948  2100              MOVS     r1,#0
00094a  6129              STR      r1,[r5,#0x10]
;;;185      entropy->bitstate.get_buffer = 0; /* unnecessary, but keeps Purify quiet */
00094c  2000              MOVS     r0,#0
00094e  60e8              STR      r0,[r5,#0xc]
;;;186      entropy->pub.insufficient_data = FALSE;
000950  60a8              STR      r0,[r5,#8]
;;;187    
;;;188      /* Initialize private state variables */
;;;189      entropy->saved.EOBRUN = 0;
000952  6168              STR      r0,[r5,#0x14]
;;;190    
;;;191      /* Initialize restart counter */
;;;192      entropy->restarts_to_go = cinfo->restart_interval;
000954  f8d40114          LDR      r0,[r4,#0x114]
000958  62a8              STR      r0,[r5,#0x28]
;;;193    }
00095a  e8bd8ffe          POP      {r1-r11,pc}
;;;194    
                          ENDP

                  jinit_phuff_decoder PROC
;;;640    GLOBAL(void)
;;;641    jinit_phuff_decoder (j_decompress_ptr cinfo)
00095e  e92d41f0          PUSH     {r4-r8,lr}
;;;642    {
000962  4604              MOV      r4,r0
;;;643      phuff_entropy_ptr entropy;
;;;644      int *coef_bit_ptr;
;;;645      int ci, i;
;;;646    
;;;647      entropy = (phuff_entropy_ptr)
000964  6860              LDR      r0,[r4,#4]
000966  2240              MOVS     r2,#0x40
000968  2101              MOVS     r1,#1
00096a  6803              LDR      r3,[r0,#0]
00096c  4620              MOV      r0,r4
00096e  4798              BLX      r3
000970  4606              MOV      r6,r0
;;;648        (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
;;;649    				SIZEOF(phuff_entropy_decoder));
;;;650      cinfo->entropy = (struct jpeg_entropy_decoder *) entropy;
000972  f8c461bc          STR      r6,[r4,#0x1bc]
;;;651      entropy->pub.start_pass = start_pass_phuff_decoder;
000976  481a              LDR      r0,|L1.2528|
000978  6030              STR      r0,[r6,#0]
;;;652    
;;;653      /* Mark derived tables unallocated */
;;;654      for (i = 0; i < NUM_HUFF_TBLS; i++) {
00097a  2500              MOVS     r5,#0
00097c  e005              B        |L1.2442|
                  |L1.2430|
;;;655        entropy->derived_tbls[i] = NULL;
00097e  2100              MOVS     r1,#0
000980  f106002c          ADD      r0,r6,#0x2c
000984  f8401025          STR      r1,[r0,r5,LSL #2]
000988  1c6d              ADDS     r5,r5,#1              ;654
                  |L1.2442|
00098a  2d04              CMP      r5,#4                 ;654
00098c  dbf7              BLT      |L1.2430|
;;;656      }
;;;657    
;;;658      /* Create progression status table */
;;;659      cinfo->coef_bits = (int (*)[DCTSIZE2])
00098e  6a60              LDR      r0,[r4,#0x24]
000990  0202              LSLS     r2,r0,#8
000992  6860              LDR      r0,[r4,#4]
000994  2101              MOVS     r1,#1
000996  6803              LDR      r3,[r0,#0]
000998  4620              MOV      r0,r4
00099a  4798              BLX      r3
00099c  f8c400a0          STR      r0,[r4,#0xa0]
;;;660        (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
;;;661    				cinfo->num_components*DCTSIZE2*SIZEOF(int));
;;;662      coef_bit_ptr = & cinfo->coef_bits[0][0];
0009a0  f8d470a0          LDR      r7,[r4,#0xa0]
;;;663      for (ci = 0; ci < cinfo->num_components; ci++) 
0009a4  f04f0800          MOV      r8,#0
0009a8  e009              B        |L1.2494|
                  |L1.2474|
;;;664        for (i = 0; i < DCTSIZE2; i++)
0009aa  2500              MOVS     r5,#0
0009ac  e003              B        |L1.2486|
                  |L1.2478|
;;;665          *coef_bit_ptr++ = -1;
0009ae  f04f30ff          MOV      r0,#0xffffffff
0009b2  c701              STM      r7!,{r0}
0009b4  1c6d              ADDS     r5,r5,#1              ;664
                  |L1.2486|
0009b6  2d40              CMP      r5,#0x40              ;664
0009b8  dbf9              BLT      |L1.2478|
0009ba  f1080801          ADD      r8,r8,#1              ;663
                  |L1.2494|
0009be  6a60              LDR      r0,[r4,#0x24]         ;663
0009c0  4540              CMP      r0,r8                 ;663
0009c2  dcf2              BGT      |L1.2474|
;;;666    }
0009c4  e8bd81f0          POP      {r4-r8,pc}
;;;667    
                          ENDP

                  |L1.2504|
                          DCD      extend_test
                  |L1.2508|
                          DCD      extend_offset
                  |L1.2512|
                          DCD      decode_mcu_DC_first
                  |L1.2516|
                          DCD      decode_mcu_AC_first
                  |L1.2520|
                          DCD      decode_mcu_DC_refine
                  |L1.2524|
                          DCD      decode_mcu_AC_refine
                  |L1.2528|
                          DCD      start_pass_phuff_decoder

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  extend_test
                          DCD      0x00000000
                          DCD      0x00000001
                          DCD      0x00000002
                          DCD      0x00000004
                          DCD      0x00000008
                          DCD      0x00000010
                          DCD      0x00000020
                          DCD      0x00000040
                          DCD      0x00000080
                          DCD      0x00000100
                          DCD      0x00000200
                          DCD      0x00000400
                          DCD      0x00000800
                          DCD      0x00001000
                          DCD      0x00002000
                          DCD      0x00004000
                  extend_offset
                          DCD      0x00000000
                          DCD      0xffffffff
                          DCD      0xfffffffd
                          DCD      0xfffffff9
                          DCD      0xfffffff1
                          DCD      0xffffffe1
                          DCD      0xffffffc1
                          DCD      0xffffff81
                          DCD      0xffffff01
                          DCD      0xfffffe01
                          DCD      0xfffffc01
                          DCD      0xfffff801
                          DCD      0xfffff001
                          DCD      0xffffe001
                          DCD      0xffffc001
                          DCD      0xffff8001
