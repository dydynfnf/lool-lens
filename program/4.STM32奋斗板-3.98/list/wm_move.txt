; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\wm_move.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\wm_move.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -I.\GUI\AntiAlias -I.\GUI\Config -I.\GUI\ConvertColor -I.\GUI\ConvertMono -I.\GUI\Core -I.\GUI\Font -I.\GUI\GUI_X -I.\GUI\JPEG -I.\GUI\LCDDriver -I.\GUI\MemDev -I.\GUI\MultiLayer -I.\GUI\Widget -I.\GUI\WM -IC:\Users\Administrator\Desktop\gui\STM32·Ü¶·°å-3.98\RTE -Id:\Keil_v5\ARM\PACK\ARM\CMSIS\4.3.0\CMSIS\Include -Id:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.1.0\Device\Include -D__UVISION_VERSION=515 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\wm_move.crf GUI\WM\WM_Move.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=1

                  _MoveDescendents PROC
;;;43     */
;;;44     static void _MoveDescendents(WM_HWIN hWin, int dx, int dy) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;45       WM_Obj* pWin;
;;;46     
;;;47       for (;hWin; hWin = pWin->hNext) {
00000a  e01a              B        |L1.66|
                  |L1.12|
;;;48         pWin = WM_HANDLE2PTR(hWin);
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       GUI_ALLOC_h2p
000012  4604              MOV      r4,r0
;;;49         GUI_MoveRect(&pWin->Rect, dx, dy);
000014  463a              MOV      r2,r7
000016  4631              MOV      r1,r6
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       GUI_MoveRect
;;;50         GUI_MoveRect(&pWin->InvalidRect, dx, dy);
00001e  463a              MOV      r2,r7
000020  4631              MOV      r1,r6
000022  f1040008          ADD      r0,r4,#8
000026  f7fffffe          BL       GUI_MoveRect
;;;51         _MoveDescendents(pWin->hFirstChild, dx, dy);  /* Children need to be moved along ...*/
00002a  f9b40018          LDRSH    r0,[r4,#0x18]
00002e  463a              MOV      r2,r7
000030  4631              MOV      r1,r6
000032  f7fffffe          BL       _MoveDescendents
;;;52         WM__SendMsgNoData(hWin, WM_MOVE);
000036  2103              MOVS     r1,#3
000038  4628              MOV      r0,r5
00003a  f7fffffe          BL       WM__SendMsgNoData
00003e  f9b4501a          LDRSH    r5,[r4,#0x1a]         ;47
                  |L1.66|
000042  2d00              CMP      r5,#0                 ;47
000044  d1e2              BNE      |L1.12|
;;;53       }
;;;54     }
000046  e8bd81f0          POP      {r4-r8,pc}
;;;55     
                          ENDP

                  WM__MoveWindow PROC
;;;65     */
;;;66     void WM__MoveWindow(WM_HWIN hWin, int dx, int dy) {
00004a  e92d41fc          PUSH     {r2-r8,lr}
00004e  4605              MOV      r5,r0
000050  460e              MOV      r6,r1
000052  4617              MOV      r7,r2
;;;67       GUI_RECT r;
;;;68       WM_Obj* pWin;
;;;69       if ((hWin) && (dx || dy)) {
000054  b385              CBZ      r5,|L1.184|
000056  b906              CBNZ     r6,|L1.90|
000058  b377              CBZ      r7,|L1.184|
                  |L1.90|
;;;70         pWin = WM_HANDLE2PTR(hWin);
00005a  4628              MOV      r0,r5
00005c  f7fffffe          BL       GUI_ALLOC_h2p
000060  4604              MOV      r4,r0
;;;71         r = pWin->Rect;
000062  e9d40100          LDRD     r0,r1,[r4,#0]
000066  e9cd0100          STRD     r0,r1,[sp,#0]
;;;72         GUI_MoveRect(&pWin->Rect, dx, dy);
00006a  463a              MOV      r2,r7
00006c  4631              MOV      r1,r6
00006e  4620              MOV      r0,r4
000070  f7fffffe          BL       GUI_MoveRect
;;;73         GUI_MoveRect(&pWin->InvalidRect, dx, dy);
000074  463a              MOV      r2,r7
000076  4631              MOV      r1,r6
000078  f1040008          ADD      r0,r4,#8
00007c  f7fffffe          BL       GUI_MoveRect
;;;74         _MoveDescendents(pWin->hFirstChild, dx, dy);  /* Children need to be moved along ...*/
000080  f9b40018          LDRSH    r0,[r4,#0x18]
000084  463a              MOV      r2,r7
000086  4631              MOV      r1,r6
000088  f7fffffe          BL       _MoveDescendents
;;;75         /* Invalidate old and new area ... */
;;;76         if (pWin->Status & WM_SF_ISVIS) {
00008c  7f20              LDRB     r0,[r4,#0x1c]
00008e  f0000002          AND      r0,r0,#2
000092  b168              CBZ      r0,|L1.176|
;;;77           WM__InvalidateRectEx(&pWin->Rect, pWin->hParent, pWin->hNext); /* Invalidate new area */
000094  f9b4201a          LDRSH    r2,[r4,#0x1a]
000098  f9b41016          LDRSH    r1,[r4,#0x16]
00009c  4620              MOV      r0,r4
00009e  f7fffffe          BL       WM__InvalidateRectEx
;;;78           WM__InvalidateRectEx(&r,          pWin->hParent, pWin->hNext); /* Invalidate old area */
0000a2  f9b4201a          LDRSH    r2,[r4,#0x1a]
0000a6  f9b41016          LDRSH    r1,[r4,#0x16]
0000aa  4668              MOV      r0,sp
0000ac  f7fffffe          BL       WM__InvalidateRectEx
                  |L1.176|
;;;79         }
;;;80         WM__SendMsgNoData(hWin, WM_MOVE);             /* Notify window it has been moved */
0000b0  2103              MOVS     r1,#3
0000b2  4628              MOV      r0,r5
0000b4  f7fffffe          BL       WM__SendMsgNoData
                  |L1.184|
;;;81       }
;;;82     }
0000b8  e8bd81fc          POP      {r2-r8,pc}
;;;83     
                          ENDP

                  WM__MoveTo PROC
;;;87     */
;;;88     void WM__MoveTo(WM_HWIN hWin, int x, int y) {
0000bc  e92d41f0          PUSH     {r4-r8,lr}
0000c0  4604              MOV      r4,r0
0000c2  460d              MOV      r5,r1
0000c4  4616              MOV      r6,r2
;;;89       if (hWin) {
0000c6  b17c              CBZ      r4,|L1.232|
;;;90         WM_Obj* pWin = WM_HANDLE2PTR(hWin);
0000c8  4620              MOV      r0,r4
0000ca  f7fffffe          BL       GUI_ALLOC_h2p
0000ce  4607              MOV      r7,r0
;;;91         x -= pWin->Rect.x0;
0000d0  f9b70000          LDRSH    r0,[r7,#0]
0000d4  1a2d              SUBS     r5,r5,r0
;;;92         y -= pWin->Rect.y0;
0000d6  f9b70002          LDRSH    r0,[r7,#2]
0000da  1a36              SUBS     r6,r6,r0
;;;93         WM__MoveWindow(hWin, x, y);
0000dc  4632              MOV      r2,r6
0000de  4629              MOV      r1,r5
0000e0  4620              MOV      r0,r4
0000e2  f7fffffe          BL       WM__MoveWindow
;;;94       }
0000e6  bf00              NOP      
                  |L1.232|
;;;95     }
0000e8  e8bd81f0          POP      {r4-r8,pc}
;;;96     
                          ENDP

                  WM_MoveWindow PROC
;;;106    */
;;;107    void WM_MoveWindow(WM_HWIN hWin, int dx, int dy) {
0000ec  b570              PUSH     {r4-r6,lr}
0000ee  4604              MOV      r4,r0
0000f0  460d              MOV      r5,r1
0000f2  4616              MOV      r6,r2
;;;108      WM_LOCK(); {
;;;109        WM__MoveWindow(hWin, dx, dy);
0000f4  4632              MOV      r2,r6
0000f6  4629              MOV      r1,r5
0000f8  4620              MOV      r0,r4
0000fa  f7fffffe          BL       WM__MoveWindow
;;;110      } WM_UNLOCK();
;;;111    }
0000fe  bd70              POP      {r4-r6,pc}
;;;112    
                          ENDP

                  WM_MoveTo PROC
;;;116    */
;;;117    void WM_MoveTo(WM_HWIN hWin, int x, int y) {
000100  b570              PUSH     {r4-r6,lr}
000102  4604              MOV      r4,r0
000104  460d              MOV      r5,r1
000106  4616              MOV      r6,r2
;;;118      WM_LOCK(); {
;;;119        WM__MoveTo(hWin, x, y);
000108  4632              MOV      r2,r6
00010a  4629              MOV      r1,r5
00010c  4620              MOV      r0,r4
00010e  f7fffffe          BL       WM__MoveTo
;;;120      } WM_UNLOCK();
;;;121    }
000112  bd70              POP      {r4-r6,pc}
;;;122    
                          ENDP

