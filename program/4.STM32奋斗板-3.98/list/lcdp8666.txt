; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\lcdp8666.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\lcdp8666.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -I.\GUI\AntiAlias -I.\GUI\Config -I.\GUI\ConvertColor -I.\GUI\ConvertMono -I.\GUI\Core -I.\GUI\Font -I.\GUI\GUI_X -I.\GUI\JPEG -I.\GUI\LCDDriver -I.\GUI\MemDev -I.\GUI\MultiLayer -I.\GUI\Widget -I.\GUI\WM -IC:\Users\Administrator\Desktop\gui\STM32·Ü¶·°å-3.98\RTE -Id:\Keil_v5\ARM\PACK\ARM\CMSIS\4.3.0\CMSIS\Include -Id:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.1.0\Device\Include -D__UVISION_VERSION=515 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\lcdp8666.crf GUI\ConvertColor\LCDP8666.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=1

                  LCD_Color2Index_8666 PROC
;;;56     */
;;;57     unsigned LCD_Color2Index_8666(LCD_COLOR Color) {
000000  b570              PUSH     {r4-r6,lr}
000002  4601              MOV      r1,r0
;;;58       int r,g,b,Index;
;;;59       r = Color&255;
000004  b2ca              UXTB     r2,r1
;;;60       g = (Color>>8)&255;
000006  f3c12307          UBFX     r3,r1,#8,#8
;;;61       b = Color>>16;
00000a  0c0c              LSRS     r4,r1,#16
;;;62     /* Check if image is a gray scale ... */
;;;63     	if ((r==g) && (g==b)) {
00000c  429a              CMP      r2,r3
00000e  d108              BNE      |L1.34|
000010  42a3              CMP      r3,r4
000012  d106              BNE      |L1.34|
;;;64         return 120+ (r+8)/17;  /* Convert into colors from 120 - 135*/
000014  f1020008          ADD      r0,r2,#8
000018  2611              MOVS     r6,#0x11
00001a  fb90f0f6          SDIV     r0,r0,r6
00001e  3078              ADDS     r0,r0,#0x78
                  |L1.32|
;;;65     	}
;;;66     /* Convert into the 6*6*6 colors ... */
;;;67       r = (r*5+127)/255;
;;;68       g = (g*5+127)/255;
;;;69       b = (b*5+127)/255;
;;;70       Index = r+6*g+36*b;
;;;71       return (Index<108) ? Index : Index+40;
;;;72     }
000020  bd70              POP      {r4-r6,pc}
                  |L1.34|
000022  eb020082          ADD      r0,r2,r2,LSL #2       ;67
000026  307f              ADDS     r0,r0,#0x7f           ;67
000028  26ff              MOVS     r6,#0xff              ;67
00002a  fb90f2f6          SDIV     r2,r0,r6              ;67
00002e  eb030083          ADD      r0,r3,r3,LSL #2       ;68
000032  307f              ADDS     r0,r0,#0x7f           ;68
000034  fb90f3f6          SDIV     r3,r0,r6              ;68
000038  eb040084          ADD      r0,r4,r4,LSL #2       ;69
00003c  307f              ADDS     r0,r0,#0x7f           ;69
00003e  fb90f4f6          SDIV     r4,r0,r6              ;69
000042  2006              MOVS     r0,#6                 ;70
000044  fb002003          MLA      r0,r0,r3,r2           ;70
000048  2624              MOVS     r6,#0x24              ;70
00004a  fb060504          MLA      r5,r6,r4,r0           ;70
00004e  2d6c              CMP      r5,#0x6c              ;71
000050  da01              BGE      |L1.86|
000052  4628              MOV      r0,r5                 ;71
000054  e7e4              B        |L1.32|
                  |L1.86|
000056  f1050028          ADD      r0,r5,#0x28           ;71
00005a  e7e1              B        |L1.32|
;;;73     
                          ENDP

                  LCD_Index2Color_8666 PROC
;;;77     */
;;;78     LCD_COLOR LCD_Index2Color_8666(int Index) {
00005c  b570              PUSH     {r4-r6,lr}
00005e  4601              MOV      r1,r0
;;;79       unsigned int r,g;
;;;80       U32 b;
;;;81       /* 16 Gray scale range ? */
;;;82       if ((Index>=120) && (Index<136)) {
000060  2978              CMP      r1,#0x78
000062  db0a              BLT      |L1.122|
000064  2988              CMP      r1,#0x88
000066  da08              BGE      |L1.122|
;;;83         return (U32)0x111111 * (U32)(Index-120);
000068  f1a10078          SUB      r0,r1,#0x78
00006c  eb001500          ADD      r5,r0,r0,LSL #4
000070  eb052000          ADD      r0,r5,r0,LSL #8
000074  eb003000          ADD      r0,r0,r0,LSL #12
                  |L1.120|
;;;84     	}
;;;85       if (Index>=108) {
;;;86         if (Index<148)
;;;87     			return 0;  /* Black for illegal indices */
;;;88     		Index -= 40;
;;;89     	}
;;;90       r = (Index%6)*(255/5);
;;;91       g = ((Index/6)%6)*(255/5);
;;;92       b = (Index/36)*(255/5);
;;;93       return r+(g<<8)+((U32)b<<16);
;;;94     }
000078  bd70              POP      {r4-r6,pc}
                  |L1.122|
00007a  296c              CMP      r1,#0x6c              ;85
00007c  db04              BLT      |L1.136|
00007e  2994              CMP      r1,#0x94              ;86
000080  da01              BGE      |L1.134|
000082  2000              MOVS     r0,#0                 ;87
000084  e7f8              B        |L1.120|
                  |L1.134|
000086  3928              SUBS     r1,r1,#0x28           ;88
                  |L1.136|
000088  2006              MOVS     r0,#6                 ;90
00008a  fb91f5f0          SDIV     r5,r1,r0              ;90
00008e  fb001015          MLS      r0,r0,r5,r1           ;90
000092  eb001000          ADD      r0,r0,r0,LSL #4       ;90
000096  eb000240          ADD      r2,r0,r0,LSL #1       ;90
00009a  2006              MOVS     r0,#6                 ;91
00009c  fb91f0f0          SDIV     r0,r1,r0              ;91
0000a0  2506              MOVS     r5,#6                 ;91
0000a2  fb90f6f5          SDIV     r6,r0,r5              ;91
0000a6  fb050016          MLS      r0,r5,r6,r0           ;91
0000aa  eb001000          ADD      r0,r0,r0,LSL #4       ;91
0000ae  eb000340          ADD      r3,r0,r0,LSL #1       ;91
0000b2  2024              MOVS     r0,#0x24              ;92
0000b4  fb91f0f0          SDIV     r0,r1,r0              ;92
0000b8  eb001000          ADD      r0,r0,r0,LSL #4       ;92
0000bc  eb000440          ADD      r4,r0,r0,LSL #1       ;92
0000c0  eb022003          ADD      r0,r2,r3,LSL #8       ;93
0000c4  eb004004          ADD      r0,r0,r4,LSL #16      ;93
0000c8  e7d6              B        |L1.120|
;;;95     
                          ENDP

                  LCD_GetIndexMask_8666 PROC
;;;99     */
;;;100    unsigned LCD_GetIndexMask_8666(void) {
0000ca  20ff              MOVS     r0,#0xff
;;;101      return 0xff;
;;;102    }
0000cc  4770              BX       lr
;;;103    
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  LCD_API_ColorConv_8666
                          DCD      LCD_Color2Index_8666
                          DCD      LCD_Index2Color_8666
                          DCD      LCD_GetIndexMask_8666
