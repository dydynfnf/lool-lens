; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\guiaalib.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\guiaalib.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -I.\GUI\AntiAlias -I.\GUI\Config -I.\GUI\ConvertColor -I.\GUI\ConvertMono -I.\GUI\Core -I.\GUI\Font -I.\GUI\GUI_X -I.\GUI\JPEG -I.\GUI\LCDDriver -I.\GUI\MemDev -I.\GUI\MultiLayer -I.\GUI\Widget -I.\GUI\WM -IC:\Users\Administrator\Desktop\gui\STM32·Ü¶·°å-3.98\RTE -Id:\Keil_v5\ARM\PACK\ARM\CMSIS\4.3.0\CMSIS\Include -Id:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.1.0\Device\Include -D__UVISION_VERSION=515 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\guiaalib.crf GUI\AntiAlias\GUIAALib.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _CleanLine PROC
;;;63     */
;;;64     static void _CleanLine(void) {
000000  b510              PUSH     {r4,lr}
;;;65       GUI_MEMSET(pabAABuffer,0, _x1 - _x0+1);
000002  48dd              LDR      r0,|L1.888|
000004  6800              LDR      r0,[r0,#0]  ; _x1
000006  49dd              LDR      r1,|L1.892|
000008  6809              LDR      r1,[r1,#0]  ; _x0
00000a  1a40              SUBS     r0,r0,r1
00000c  1c42              ADDS     r2,r0,#1
00000e  2100              MOVS     r1,#0
000010  48db              LDR      r0,|L1.896|
000012  6800              LDR      r0,[r0,#0]  ; pabAABuffer
000014  f7fffffe          BL       GUI__memset
;;;66       _y = -16383;  /* Invalidate */  
000018  48da              LDR      r0,|L1.900|
00001a  49db              LDR      r1,|L1.904|
00001c  6008              STR      r0,[r1,#0]  ; _y
;;;67       _x0_InUse =  16383;
00001e  0c80              LSRS     r0,r0,#18
000020  49da              LDR      r1,|L1.908|
000022  6008              STR      r0,[r1,#0]  ; _x0_InUse
;;;68       _x1_InUse = -16383;
000024  4240              RSBS     r0,r0,#0
000026  49da              LDR      r1,|L1.912|
000028  6008              STR      r0,[r1,#0]  ; _x1_InUse
;;;69     }
00002a  bd10              POP      {r4,pc}
;;;70     
                          ENDP

                  _FlushLine PROC
;;;74     */
;;;75     static void _FlushLine(void) {
00002c  e92d47f0          PUSH     {r4-r10,lr}
;;;76       int i;
;;;77       int iEnd = _x1_InUse-_x0;
000030  48d7              LDR      r0,|L1.912|
000032  6800              LDR      r0,[r0,#0]  ; _x1_InUse
000034  49d1              LDR      r1,|L1.892|
000036  6809              LDR      r1,[r1,#0]  ; _x0
000038  eba00801          SUB      r8,r0,r1
;;;78       int IMax = GUI_Context.AA_Factor * GUI_Context.AA_Factor;
00003c  48d5              LDR      r0,|L1.916|
00003e  f890005c          LDRB     r0,[r0,#0x5c]  ; GUI_Context
000042  fb00f600          MUL      r6,r0,r0
;;;79       for (i =_x0_InUse-_x0; i<=iEnd; i++) {
000046  48d1              LDR      r0,|L1.908|
000048  6800              LDR      r0,[r0,#0]  ; _x0_InUse
00004a  49cc              LDR      r1,|L1.892|
00004c  6809              LDR      r1,[r1,#0]  ; _x0
00004e  1a44              SUBS     r4,r0,r1
000050  e041              B        |L1.214|
                  |L1.82|
;;;80         int Intens = *(pabAABuffer+i);
000052  48cb              LDR      r0,|L1.896|
000054  6800              LDR      r0,[r0,#0]  ; pabAABuffer
000056  5d07              LDRB     r7,[r0,r4]
;;;81         if (Intens) {
000058  2f00              CMP      r7,#0
00005a  d03b              BEQ      |L1.212|
;;;82           /* Check we can use line draw */
;;;83           if (Intens == IMax) {
00005c  42b7              CMP      r7,r6
00005e  d126              BNE      |L1.174|
;;;84             int j;
;;;85             for (j=i; j<iEnd; ) {
000060  4625              MOV      r5,r4
000062  e007              B        |L1.116|
                  |L1.100|
;;;86               if (*(pabAABuffer+j+1) != IMax) {
000064  48c6              LDR      r0,|L1.896|
000066  6800              LDR      r0,[r0,#0]  ; pabAABuffer
000068  4428              ADD      r0,r0,r5
00006a  7840              LDRB     r0,[r0,#1]
00006c  42b0              CMP      r0,r6
00006e  d000              BEQ      |L1.114|
;;;87                 break;
000070  e002              B        |L1.120|
                  |L1.114|
;;;88               }
;;;89               j++;
000072  1c6d              ADDS     r5,r5,#1
                  |L1.116|
000074  4545              CMP      r5,r8                 ;85
000076  dbf5              BLT      |L1.100|
                  |L1.120|
000078  bf00              NOP                            ;87
;;;90             }
;;;91             /* Draw the full pixel(s) */
;;;92             if (j!=i) {
00007a  42a5              CMP      r5,r4
00007c  d00d              BEQ      |L1.154|
;;;93               pLCD_HLPrev->pfDrawHLine(_x0+i, _y, _x0+j);
00007e  49bf              LDR      r1,|L1.892|
000080  6809              LDR      r1,[r1,#0]  ; _x0
000082  194a              ADDS     r2,r1,r5
000084  49bd              LDR      r1,|L1.892|
000086  6809              LDR      r1,[r1,#0]  ; _x0
000088  1908              ADDS     r0,r1,r4
00008a  49c3              LDR      r1,|L1.920|
00008c  6809              LDR      r1,[r1,#0]  ; pLCD_HLPrev
00008e  680b              LDR      r3,[r1,#0]
000090  49bd              LDR      r1,|L1.904|
000092  6809              LDR      r1,[r1,#0]  ; _y
000094  4798              BLX      r3
;;;94               i = j;  /*xxx*/
000096  462c              MOV      r4,r5
000098  e008              B        |L1.172|
                  |L1.154|
;;;95             } else {
;;;96               LCD_HL_DrawPixel (_x0+i,_y);
00009a  49b8              LDR      r1,|L1.892|
00009c  6809              LDR      r1,[r1,#0]  ; _x0
00009e  1908              ADDS     r0,r1,r4
0000a0  49bc              LDR      r1,|L1.916|
0000a2  6d89              LDR      r1,[r1,#0x58]  ; GUI_Context
0000a4  684a              LDR      r2,[r1,#4]
0000a6  49b8              LDR      r1,|L1.904|
0000a8  6809              LDR      r1,[r1,#0]  ; _y
0000aa  4790              BLX      r2
                  |L1.172|
;;;97             }
;;;98           } else {
0000ac  e012              B        |L1.212|
                  |L1.174|
;;;99             LCD_SetPixelAA(_x0+i,_y, (15*Intens+IMax/2)/IMax);
0000ae  4635              MOV      r5,r6
0000b0  eb0670d5          ADD      r0,r6,r5,LSR #31
0000b4  1040              ASRS     r0,r0,#1
0000b6  210f              MOVS     r1,#0xf
0000b8  fb010007          MLA      r0,r1,r7,r0
0000bc  fb90f0f6          SDIV     r0,r0,r6
0000c0  f00009ff          AND      r9,r0,#0xff
0000c4  49ad              LDR      r1,|L1.892|
0000c6  6809              LDR      r1,[r1,#0]  ; _x0
0000c8  1908              ADDS     r0,r1,r4
0000ca  464a              MOV      r2,r9
0000cc  49ae              LDR      r1,|L1.904|
0000ce  6809              LDR      r1,[r1,#0]  ; _y
0000d0  f7fffffe          BL       LCD_SetPixelAA
                  |L1.212|
0000d4  1c64              ADDS     r4,r4,#1              ;79
                  |L1.214|
0000d6  4544              CMP      r4,r8                 ;79
0000d8  ddbb              BLE      |L1.82|
;;;100          }
;;;101        }    
;;;102      }
;;;103      _CleanLine();
0000da  f7fffffe          BL       _CleanLine
;;;104    }
0000de  e8bd87f0          POP      {r4-r10,pc}
;;;105    
                          ENDP

                  _DrawHLine PROC
;;;114    */
;;;115    static void _DrawHLine  (int x0, int y,  int x1) {
0000e2  e92d47f0          PUSH     {r4-r10,lr}
0000e6  4604              MOV      r4,r0
0000e8  4688              MOV      r8,r1
0000ea  4615              MOV      r5,r2
;;;116      int x0Real, x1Real;
;;;117    /* Make sure there is something to do */
;;;118      if (x1<x0)
0000ec  42a5              CMP      r5,r4
0000ee  da01              BGE      |L1.244|
                  |L1.240|
;;;119        return;
;;;120    /* Flush line if we are in an other pixel (real) line */
;;;121      if (y/GUI_Context.AA_Factor != _y) {
;;;122        _FlushLine();
;;;123        _y = y/GUI_Context.AA_Factor;
;;;124      }
;;;125      x0Real = x0/GUI_Context.AA_Factor;
;;;126      x1Real = x1/GUI_Context.AA_Factor;
;;;127    /* Handle used area (speed optimization for drawing) */
;;;128      if (x0Real < _x0_InUse)
;;;129        _x0_InUse = x0Real;
;;;130      if (x1Real > _x1_InUse)
;;;131        _x1_InUse = x1Real;
;;;132    /* Clip (should not be necessary ... Just to be on the safe side ! */
;;;133      if (x0Real < _x0) {
;;;134        x0 = _x0 * GUI_Context.AA_Factor;
;;;135      }
;;;136      if (x1Real > _x1) {
;;;137        x1 = (_x1+1)*GUI_Context.AA_Factor-1;
;;;138      }
;;;139    /* Make sure there is still something to do (after clipping) */
;;;140      if (x1<x0)
;;;141        return;
;;;142    /* Inc. hit counters in buffer */
;;;143      {
;;;144        int x0_Off = x0/GUI_Context.AA_Factor-_x0;
;;;145        int x1_Off = x1/GUI_Context.AA_Factor-_x0;
;;;146        int iRem = x1_Off-x0_Off+1;
;;;147        U8 *pDest = pabAABuffer+x0_Off;
;;;148        if (iRem ==1) {
;;;149          *(pDest) += x1-x0+1;
;;;150        } else {
;;;151          /* First Pixel */
;;;152          *pDest++ += ((x0_Off+_x0+1)*GUI_Context.AA_Factor-x0);
;;;153          /* Middle Pixels */
;;;154          for (;--iRem>1; ) {
;;;155            *pDest++ +=GUI_Context.AA_Factor;
;;;156          }
;;;157          /* Last Pixel */
;;;158          *pDest += (1+x1- (x1_Off+_x0) *GUI_Context.AA_Factor);
;;;159        }
;;;160      }
;;;161    }
0000f0  e8bd87f0          POP      {r4-r10,pc}
                  |L1.244|
0000f4  48a7              LDR      r0,|L1.916|
0000f6  f890005c          LDRB     r0,[r0,#0x5c]         ;121  ; GUI_Context
0000fa  fb98f0f0          SDIV     r0,r8,r0              ;121
0000fe  49a2              LDR      r1,|L1.904|
000100  6809              LDR      r1,[r1,#0]            ;121  ; _y
000102  4288              CMP      r0,r1                 ;121
000104  d008              BEQ      |L1.280|
000106  f7fffffe          BL       _FlushLine
00010a  48a2              LDR      r0,|L1.916|
00010c  f890005c          LDRB     r0,[r0,#0x5c]         ;123  ; GUI_Context
000110  fb98f0f0          SDIV     r0,r8,r0              ;123
000114  499c              LDR      r1,|L1.904|
000116  6008              STR      r0,[r1,#0]            ;123  ; _y
                  |L1.280|
000118  489e              LDR      r0,|L1.916|
00011a  f890005c          LDRB     r0,[r0,#0x5c]         ;125  ; GUI_Context
00011e  fb94f6f0          SDIV     r6,r4,r0              ;125
000122  489c              LDR      r0,|L1.916|
000124  f890005c          LDRB     r0,[r0,#0x5c]         ;126  ; GUI_Context
000128  fb95f7f0          SDIV     r7,r5,r0              ;126
00012c  4897              LDR      r0,|L1.908|
00012e  6800              LDR      r0,[r0,#0]            ;128  ; _x0_InUse
000130  4286              CMP      r6,r0                 ;128
000132  da01              BGE      |L1.312|
000134  4895              LDR      r0,|L1.908|
000136  6006              STR      r6,[r0,#0]            ;129  ; _x0_InUse
                  |L1.312|
000138  4895              LDR      r0,|L1.912|
00013a  6800              LDR      r0,[r0,#0]            ;130  ; _x1_InUse
00013c  4287              CMP      r7,r0                 ;130
00013e  dd01              BLE      |L1.324|
000140  4893              LDR      r0,|L1.912|
000142  6007              STR      r7,[r0,#0]            ;131  ; _x1_InUse
                  |L1.324|
000144  488d              LDR      r0,|L1.892|
000146  6800              LDR      r0,[r0,#0]            ;133  ; _x0
000148  4286              CMP      r6,r0                 ;133
00014a  da06              BGE      |L1.346|
00014c  4891              LDR      r0,|L1.916|
00014e  f890005c          LDRB     r0,[r0,#0x5c]         ;134  ; GUI_Context
000152  498a              LDR      r1,|L1.892|
000154  6809              LDR      r1,[r1,#0]            ;134  ; _x0
000156  fb00f401          MUL      r4,r0,r1              ;134
                  |L1.346|
00015a  4887              LDR      r0,|L1.888|
00015c  6800              LDR      r0,[r0,#0]            ;136  ; _x1
00015e  4287              CMP      r7,r0                 ;136
000160  dd07              BLE      |L1.370|
000162  488c              LDR      r0,|L1.916|
000164  f890005c          LDRB     r0,[r0,#0x5c]         ;137  ; GUI_Context
000168  4983              LDR      r1,|L1.888|
00016a  6809              LDR      r1,[r1,#0]            ;137  ; _x1
00016c  1c49              ADDS     r1,r1,#1              ;137
00016e  4348              MULS     r0,r1,r0              ;137
000170  1e45              SUBS     r5,r0,#1              ;137
                  |L1.370|
000172  42a5              CMP      r5,r4                 ;140
000174  da00              BGE      |L1.376|
000176  e7bb              B        |L1.240|
                  |L1.376|
000178  f8dfc218          LDR      r12,|L1.916|
00017c  f89cc05c          LDRB     r12,[r12,#0x5c]       ;144  ; GUI_Context
000180  fb94fcfc          SDIV     r12,r4,r12            ;144
000184  f8df91f4          LDR      r9,|L1.892|
000188  f8d99000          LDR      r9,[r9,#0]            ;144  ; _x0
00018c  ebac0109          SUB      r1,r12,r9             ;144
000190  f8dfc200          LDR      r12,|L1.916|
000194  f89cc05c          LDRB     r12,[r12,#0x5c]       ;145  ; GUI_Context
000198  fb95fcfc          SDIV     r12,r5,r12            ;145
00019c  f8df91dc          LDR      r9,|L1.892|
0001a0  f8d99000          LDR      r9,[r9,#0]            ;145  ; _x0
0001a4  ebac0209          SUB      r2,r12,r9             ;145
0001a8  eba20c01          SUB      r12,r2,r1             ;146
0001ac  f10c0301          ADD      r3,r12,#1             ;146
0001b0  f8dfc1cc          LDR      r12,|L1.896|
0001b4  f8dcc000          LDR      r12,[r12,#0]          ;147  ; pabAABuffer
0001b8  eb0c0001          ADD      r0,r12,r1             ;147
0001bc  2b01              CMP      r3,#1                 ;148
0001be  d109              BNE      |L1.468|
0001c0  f8909000          LDRB     r9,[r0,#0]            ;149
0001c4  eba50c04          SUB      r12,r5,r4             ;149
0001c8  f10c0c01          ADD      r12,r12,#1            ;149
0001cc  44cc              ADD      r12,r12,r9            ;149
0001ce  f880c000          STRB     r12,[r0,#0]           ;149
0001d2  e035              B        |L1.576|
                  |L1.468|
0001d4  f8dfc1a4          LDR      r12,|L1.892|
0001d8  f89cc000          LDRB     r12,[r12,#0]          ;152  ; _x0
0001dc  448c              ADD      r12,r12,r1            ;152
0001de  f10c0c01          ADD      r12,r12,#1            ;152
0001e2  f8df91b0          LDR      r9,|L1.916|
0001e6  f899905c          LDRB     r9,[r9,#0x5c]         ;152  ; GUI_Context
0001ea  fb0cfc09          MUL      r12,r12,r9            ;152
0001ee  ebac0c04          SUB      r12,r12,r4            ;152
0001f2  f8909000          LDRB     r9,[r0,#0]            ;152
0001f6  44cc              ADD      r12,r12,r9            ;152
0001f8  f800cb01          STRB     r12,[r0],#1           ;152
0001fc  e008              B        |L1.528|
                  |L1.510|
0001fe  f890c000          LDRB     r12,[r0,#0]           ;155
000202  f8df9190          LDR      r9,|L1.916|
000206  f899905c          LDRB     r9,[r9,#0x5c]         ;155  ; GUI_Context
00020a  44cc              ADD      r12,r12,r9            ;155
00020c  f800cb01          STRB     r12,[r0],#1           ;155
                  |L1.528|
000210  f1a30c01          SUB      r12,r3,#1             ;154
000214  4663              MOV      r3,r12                ;154
000216  f1bc0f01          CMP      r12,#1                ;154
00021a  dcf0              BGT      |L1.510|
00021c  f1050c01          ADD      r12,r5,#1             ;158
000220  f8df9158          LDR      r9,|L1.892|
000224  f8d99000          LDR      r9,[r9,#0]            ;158  ; _x0
000228  4491              ADD      r9,r9,r2              ;158
00022a  f8dfa168          LDR      r10,|L1.916|
00022e  f89aa05c          LDRB     r10,[r10,#0x5c]       ;158  ; GUI_Context
000232  fb09cc1a          MLS      r12,r9,r10,r12        ;158
000236  f8909000          LDRB     r9,[r0,#0]            ;158
00023a  44cc              ADD      r12,r12,r9            ;158
00023c  f880c000          STRB     r12,[r0,#0]           ;158
                  |L1.576|
000240  bf00              NOP      
000242  e755              B        |L1.240|
;;;162    
                          ENDP

                  CalcClipRectHL PROC
;;;166    */
;;;167    static void CalcClipRectHL(void) {
000244  4853              LDR      r0,|L1.916|
;;;168      ClipRect_HL.x0 =  GUI_Context.ClipRect.x0    * GUI_Context.AA_Factor;
000246  8900              LDRH     r0,[r0,#8]  ; GUI_Context
000248  4952              LDR      r1,|L1.916|
00024a  f891105c          LDRB     r1,[r1,#0x5c]  ; GUI_Context
00024e  4348              MULS     r0,r1,r0
000250  b200              SXTH     r0,r0
000252  4952              LDR      r1,|L1.924|
000254  8008              STRH     r0,[r1,#0]
;;;169      ClipRect_HL.y0 =  GUI_Context.ClipRect.y0    * GUI_Context.AA_Factor;
000256  484f              LDR      r0,|L1.916|
000258  8940              LDRH     r0,[r0,#0xa]
00025a  494e              LDR      r1,|L1.916|
00025c  f891105c          LDRB     r1,[r1,#0x5c]  ; GUI_Context
000260  4348              MULS     r0,r1,r0
000262  b200              SXTH     r0,r0
000264  494d              LDR      r1,|L1.924|
000266  8048              STRH     r0,[r1,#2]
;;;170      ClipRect_HL.x1 = (GUI_Context.ClipRect.x1+1) * GUI_Context.AA_Factor -1;
000268  484a              LDR      r0,|L1.916|
00026a  8980              LDRH     r0,[r0,#0xc]
00026c  1c40              ADDS     r0,r0,#1
00026e  4949              LDR      r1,|L1.916|
000270  f891105c          LDRB     r1,[r1,#0x5c]  ; GUI_Context
000274  4348              MULS     r0,r1,r0
000276  1e40              SUBS     r0,r0,#1
000278  b200              SXTH     r0,r0
00027a  4948              LDR      r1,|L1.924|
00027c  8088              STRH     r0,[r1,#4]
;;;171      ClipRect_HL.y1 = (GUI_Context.ClipRect.y1+1) * GUI_Context.AA_Factor -1;
00027e  4845              LDR      r0,|L1.916|
000280  89c0              LDRH     r0,[r0,#0xe]
000282  1c40              ADDS     r0,r0,#1
000284  4943              LDR      r1,|L1.916|
000286  f891105c          LDRB     r1,[r1,#0x5c]  ; GUI_Context
00028a  4348              MULS     r0,r1,r0
00028c  1e40              SUBS     r0,r0,#1
00028e  b200              SXTH     r0,r0
000290  4942              LDR      r1,|L1.924|
000292  80c8              STRH     r0,[r1,#6]
;;;172    }
000294  4770              BX       lr
;;;173    
                          ENDP

                  GUI_AA_Init PROC
;;;183    */
;;;184    int GUI_AA_Init(int x0, int x1) {
000296  b570              PUSH     {r4-r6,lr}
000298  4604              MOV      r4,r0
00029a  460d              MOV      r5,r1
;;;185      int r =0;
00029c  2600              MOVS     r6,#0
;;;186      /* Bounds checking:
;;;187         Make sure x0, x1 are in legal range ...
;;;188         (The important point is that they span no more than configured as
;;;189          buffer size)
;;;190      */
;;;191      if (x0<0)
00029e  2c00              CMP      r4,#0
0002a0  da00              BGE      |L1.676|
;;;192        x0 =0;
0002a2  2400              MOVS     r4,#0
                  |L1.676|
;;;193      if (x1-x0 > GUI_AA_LINEBUFFER_SIZE-1)
0002a4  1b28              SUBS     r0,r5,r4
0002a6  f5b07fa0          CMP      r0,#0x140
0002aa  db01              BLT      |L1.688|
;;;194        x1 = x0+GUI_AA_LINEBUFFER_SIZE-1;
0002ac  f204153f          ADD      r5,r4,#0x13f
                  |L1.688|
;;;195      /* Is there anything to do at all ??? */
;;;196      if (x1 < x0) {
0002b0  42a5              CMP      r5,r4
0002b2  da01              BGE      |L1.696|
;;;197        x1 = x0;   /* Not really ... */
0002b4  4625              MOV      r5,r4
;;;198        r =1;
0002b6  2601              MOVS     r6,#1
                  |L1.696|
;;;199      }
;;;200      DrawAPICopy = *GUI_Context.pLCD_HL; /* Copy API table */
0002b8  4836              LDR      r0,|L1.916|
0002ba  6d82              LDR      r2,[r0,#0x58]  ; GUI_Context
0002bc  4838              LDR      r0,|L1.928|
0002be  ca06              LDM      r2,{r1,r2}
0002c0  c006              STM      r0!,{r1,r2}
;;;201      pLCD_HLPrev = GUI_Context.pLCD_HL; /* Remember list ptr (for restore) */
0002c2  4834              LDR      r0,|L1.916|
0002c4  6d80              LDR      r0,[r0,#0x58]  ; GUI_Context
0002c6  4934              LDR      r1,|L1.920|
0002c8  6008              STR      r0,[r1,#0]  ; pLCD_HLPrev
;;;202      DrawAPICopy.pfDrawHLine = _DrawHLine;  /* modify function ptr. for hline */
0002ca  4836              LDR      r0,|L1.932|
0002cc  4934              LDR      r1,|L1.928|
0002ce  6008              STR      r0,[r1,#0]  ; DrawAPICopy
;;;203      GUI_Context.pLCD_HL = &DrawAPICopy;      /* Use copy of fp-list */
0002d0  4608              MOV      r0,r1
0002d2  4930              LDR      r1,|L1.916|
0002d4  6588              STR      r0,[r1,#0x58]  ; GUI_Context
;;;204      pabAABuffer = abAABuffer;
0002d6  4834              LDR      r0,|L1.936|
0002d8  4929              LDR      r1,|L1.896|
0002da  6008              STR      r0,[r1,#0]  ; pabAABuffer
;;;205      _x0 = x0;
0002dc  4827              LDR      r0,|L1.892|
0002de  6004              STR      r4,[r0,#0]  ; _x0
;;;206      _x1 = x1;
0002e0  4825              LDR      r0,|L1.888|
0002e2  6005              STR      r5,[r0,#0]  ; _x1
;;;207      _CleanLine();
0002e4  f7fffffe          BL       _CleanLine
;;;208      CalcClipRectHL();
0002e8  f7fffffe          BL       CalcClipRectHL
;;;209      GUI_Context.pClipRect_HL = &ClipRect_HL;
0002ec  482b              LDR      r0,|L1.924|
0002ee  4929              LDR      r1,|L1.916|
0002f0  6148              STR      r0,[r1,#0x14]  ; GUI_Context
;;;210      return r;
0002f2  4630              MOV      r0,r6
;;;211    }
0002f4  bd70              POP      {r4-r6,pc}
;;;212    
                          ENDP

                  GUI_AA_Init_HiRes PROC
;;;216    */
;;;217    int GUI_AA_Init_HiRes(int x0, int x1) {
0002f6  b570              PUSH     {r4-r6,lr}
0002f8  4604              MOV      r4,r0
0002fa  460d              MOV      r5,r1
;;;218      x0 /= GUI_Context.AA_Factor;
0002fc  4825              LDR      r0,|L1.916|
0002fe  f890005c          LDRB     r0,[r0,#0x5c]  ; GUI_Context
000302  fb94f4f0          SDIV     r4,r4,r0
;;;219      x1 /= GUI_Context.AA_Factor;
000306  4823              LDR      r0,|L1.916|
000308  f890005c          LDRB     r0,[r0,#0x5c]  ; GUI_Context
00030c  fb95f5f0          SDIV     r5,r5,r0
;;;220      return GUI_AA_Init(x0, x1);
000310  4629              MOV      r1,r5
000312  4620              MOV      r0,r4
000314  f7fffffe          BL       GUI_AA_Init
;;;221    }
000318  bd70              POP      {r4-r6,pc}
;;;222    
                          ENDP

                  GUI_AA_SetFactor PROC
;;;226    */
;;;227    void GUI_AA_SetFactor(int Factor) {
00031a  b510              PUSH     {r4,lr}
00031c  4604              MOV      r4,r0
;;;228      GUI_Context.AA_Factor = Factor;
00031e  491d              LDR      r1,|L1.916|
000320  f881405c          STRB     r4,[r1,#0x5c]
;;;229      CalcClipRectHL();      /* High level clipping depends on quality factor */
000324  f7fffffe          BL       CalcClipRectHL
;;;230    }
000328  bd10              POP      {r4,pc}
;;;231    
                          ENDP

                  GUI_AA_GetFactor PROC
;;;235    */
;;;236    int GUI_AA_GetFactor(void) {
00032a  481a              LDR      r0,|L1.916|
;;;237      return GUI_Context.AA_Factor;
00032c  f890005c          LDRB     r0,[r0,#0x5c]  ; GUI_Context
;;;238    }
000330  4770              BX       lr
;;;239    
                          ENDP

                  GUI_AA_DisableHiRes PROC
;;;243    */
;;;244    void GUI_AA_DisableHiRes(void) {
000332  2000              MOVS     r0,#0
;;;245      GUI_Context.AA_HiResEnable = 0;
000334  4917              LDR      r1,|L1.916|
000336  f881005d          STRB     r0,[r1,#0x5d]
;;;246    }
00033a  4770              BX       lr
;;;247    
                          ENDP

                  GUI_AA_EnableHiRes PROC
;;;251    */
;;;252    void GUI_AA_EnableHiRes(void) {
00033c  2001              MOVS     r0,#1
;;;253      GUI_Context.AA_HiResEnable =1;
00033e  4915              LDR      r1,|L1.916|
000340  f881005d          STRB     r0,[r1,#0x5d]
;;;254    }
000344  4770              BX       lr
;;;255    
                          ENDP

                  GUI_AA_HiRes2Pixel PROC
;;;259    */
;;;260    I16 GUI_AA_HiRes2Pixel(int HiRes) {
000346  4601              MOV      r1,r0
;;;261      return GUI_Context.AA_Factor ? (HiRes / GUI_Context.AA_Factor) : HiRes;
000348  4812              LDR      r0,|L1.916|
00034a  f890005c          LDRB     r0,[r0,#0x5c]  ; GUI_Context
00034e  b128              CBZ      r0,|L1.860|
000350  4810              LDR      r0,|L1.916|
000352  f890005c          LDRB     r0,[r0,#0x5c]  ; GUI_Context
000356  fb91f0f0          SDIV     r0,r1,r0
00035a  e000              B        |L1.862|
                  |L1.860|
00035c  4608              MOV      r0,r1
                  |L1.862|
00035e  b200              SXTH     r0,r0
;;;262    }
000360  4770              BX       lr
;;;263    
                          ENDP

                  GUI_AA_Exit PROC
;;;267    */
;;;268    void GUI_AA_Exit(void) {
000362  b510              PUSH     {r4,lr}
;;;269      _FlushLine();
000364  f7fffffe          BL       _FlushLine
;;;270      /* restore previous settings */
;;;271      GUI_Context.pLCD_HL = pLCD_HLPrev;
000368  480b              LDR      r0,|L1.920|
00036a  6800              LDR      r0,[r0,#0]  ; pLCD_HLPrev
00036c  4909              LDR      r1,|L1.916|
00036e  6588              STR      r0,[r1,#0x58]  ; GUI_Context
;;;272      GUI_Context.pClipRect_HL = &GUI_Context.ClipRect;
000370  f1010008          ADD      r0,r1,#8
000374  6148              STR      r0,[r1,#0x14]  ; GUI_Context
;;;273    }
000376  bd10              POP      {r4,pc}
;;;274    
                          ENDP

                  |L1.888|
                          DCD      _x1
                  |L1.892|
                          DCD      _x0
                  |L1.896|
                          DCD      pabAABuffer
                  |L1.900|
                          DCD      0xffffc001
                  |L1.904|
                          DCD      ||_y||
                  |L1.908|
                          DCD      _x0_InUse
                  |L1.912|
                          DCD      _x1_InUse
                  |L1.916|
                          DCD      GUI_Context
                  |L1.920|
                          DCD      pLCD_HLPrev
                  |L1.924|
                          DCD      ClipRect_HL
                  |L1.928|
                          DCD      DrawAPICopy
                  |L1.932|
                          DCD      _DrawHLine
                  |L1.936|
                          DCD      abAABuffer

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  abAABuffer
                          %        320

                          AREA ||.data||, DATA, ALIGN=2

                  pabAABuffer
                          DCD      0x00000000
                  _x0
                          DCD      0x00000000
                  _x1
                          DCD      0x00000000
                  ||_y||
                          DCD      0x00000000
                  _x0_InUse
                          DCD      0x00000000
                  _x1_InUse
                          DCD      0x00000000
                  ClipRect_HL
                          %        8
                  DrawAPICopy
                          %        8
                  pLCD_HLPrev
                          DCD      0x00000000
