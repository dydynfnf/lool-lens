; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\editulong.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\editulong.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -I.\GUI\AntiAlias -I.\GUI\Config -I.\GUI\ConvertColor -I.\GUI\ConvertMono -I.\GUI\Core -I.\GUI\Font -I.\GUI\GUI_X -I.\GUI\JPEG -I.\GUI\LCDDriver -I.\GUI\MemDev -I.\GUI\MultiLayer -I.\GUI\Widget -I.\GUI\WM -IC:\Users\Administrator\Desktop\gui\STM32·Ü¶·°å-3.98\RTE -Id:\Keil_v5\ARM\PACK\ARM\CMSIS\4.3.0\CMSIS\Include -Id:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.1.0\Device\Include -D__UVISION_VERSION=515 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\editulong.crf GUI\Widget\EDITUlong.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _IncrementCursor PROC
;;;36     */
;;;37     static void _IncrementCursor(EDIT_Obj* pObj) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;38       EDIT__SetCursorPos(pObj, pObj->CursorPos + 1);
000004  6c20              LDR      r0,[r4,#0x40]
000006  1c41              ADDS     r1,r0,#1
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       EDIT__SetCursorPos
;;;39     }
00000e  bd10              POP      {r4,pc}
;;;40     
                          ENDP

                  _DecChar2Int PROC
;;;44     */
;;;45     static int _DecChar2Int(int Char) {
000010  4601              MOV      r1,r0
;;;46       if ((Char >= '0') && (Char <= '9')) {
000012  2930              CMP      r1,#0x30
000014  db04              BLT      |L1.32|
000016  2939              CMP      r1,#0x39
000018  dc02              BGT      |L1.32|
;;;47         return Char - '0';
00001a  f1a10030          SUB      r0,r1,#0x30
                  |L1.30|
;;;48       }
;;;49       return -1;
;;;50     }
00001e  4770              BX       lr
                  |L1.32|
000020  f04f30ff          MOV      r0,#0xffffffff        ;49
000024  e7fb              B        |L1.30|
;;;51     
                          ENDP

                  _UpdateBuffer PROC
;;;55     */
;;;56     static void _UpdateBuffer(EDIT_Handle hObj) {
000026  e92d43fe          PUSH     {r1-r9,lr}
00002a  4680              MOV      r8,r0
;;;57       char acValue[10] = {0};
00002c  2000              MOVS     r0,#0
00002e  9000              STR      r0,[sp,#0]
000030  9001              STR      r0,[sp,#4]
000032  9002              STR      r0,[sp,#8]
;;;58       int NumDigits = 0;
000034  2400              MOVS     r4,#0
;;;59       U32 Value;
;;;60       char * s;
;;;61       EDIT_Obj * pObj;
;;;62       pObj = EDIT_H2P(hObj); /* The GUI needs not to be locked here. This function is called only from EDIT_AddKey which has already locked the GUI */
000036  4640              MOV      r0,r8
000038  f7fffffe          BL       GUI_ALLOC_h2p
00003c  4606              MOV      r6,r0
;;;63       s = (char*) GUI_ALLOC_h2p(pObj->hpText);
00003e  f9b60028          LDRSH    r0,[r6,#0x28]
000042  f7fffffe          BL       GUI_ALLOC_h2p
000046  4607              MOV      r7,r0
;;;64       /* Convert an unsigned long value into text */
;;;65       Value = pObj->CurrentValue;
000048  6bf5              LDR      r5,[r6,#0x3c]
;;;66       /* Fill the buffer with the digits (reverse order) */
;;;67       while (Value) {
00004a  e00f              B        |L1.108|
                  |L1.76|
;;;68         U8 c = Value % 10;
00004c  210a              MOVS     r1,#0xa
00004e  fbb5f2f1          UDIV     r2,r5,r1
000052  fb015012          MLS      r0,r1,r2,r5
;;;69         acValue[NumDigits++] = '0' + c;
000056  f1000130          ADD      r1,r0,#0x30
00005a  b2cb              UXTB     r3,r1
00005c  4621              MOV      r1,r4
00005e  1c64              ADDS     r4,r4,#1
000060  f80d3001          STRB     r3,[sp,r1]
;;;70         Value /= 10;
000064  210a              MOVS     r1,#0xa
000066  fbb5f5f1          UDIV     r5,r5,r1
;;;71       }
00006a  bf00              NOP      
                  |L1.108|
00006c  2d00              CMP      r5,#0                 ;67
00006e  d1ed              BNE      |L1.76|
;;;72       /* Fill with leading spaces */
;;;73       while (NumDigits < pObj->MaxLen) {
000070  e004              B        |L1.124|
                  |L1.114|
;;;74         acValue[NumDigits++] = '0';
000072  2230              MOVS     r2,#0x30
000074  4620              MOV      r0,r4
000076  1c64              ADDS     r4,r4,#1
000078  f80d2000          STRB     r2,[sp,r0]
                  |L1.124|
00007c  f9b6002a          LDRSH    r0,[r6,#0x2a]         ;73
000080  42a0              CMP      r0,r4                 ;73
000082  dcf6              BGT      |L1.114|
;;;75       }
;;;76       /* Reverse order */
;;;77       while (NumDigits) {
000084  e005              B        |L1.146|
                  |L1.134|
;;;78         *(s++) = acValue[--NumDigits];
000086  1e60              SUBS     r0,r4,#1
000088  4604              MOV      r4,r0
00008a  f81d0000          LDRB     r0,[sp,r0]
00008e  f8070b01          STRB     r0,[r7],#1
                  |L1.146|
000092  2c00              CMP      r4,#0                 ;77
000094  d1f7              BNE      |L1.134|
;;;79       }
;;;80     }
000096  e8bd83fe          POP      {r1-r9,pc}
;;;81     
                          ENDP

                  _EditULong PROC
;;;85     */
;;;86     static void _EditULong(int Digit, EDIT_Obj* pObj, EDIT_Handle hObj) {
00009a  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
00009e  b084              SUB      sp,sp,#0x10
0000a0  4607              MOV      r7,r0
0000a2  460c              MOV      r4,r1
;;;87       U32 Result = 0;
0000a4  2500              MOVS     r5,#0
;;;88       int i, j, Pos = 0;
0000a6  2600              MOVS     r6,#0
;;;89       char * s = (char*) GUI_ALLOC_h2p(pObj->hpText);
0000a8  f9b40028          LDRSH    r0,[r4,#0x28]
0000ac  f7fffffe          BL       GUI_ALLOC_h2p
0000b0  9002              STR      r0,[sp,#8]
;;;90       for (i = 0; i < pObj->MaxLen; i++) {
0000b2  46a8              MOV      r8,r5
0000b4  e04e              B        |L1.340|
                  |L1.182|
;;;91         int Index = pObj->MaxLen - i - 1;
0000b6  f9b4002a          LDRSH    r0,[r4,#0x2a]
0000ba  eba00008          SUB      r0,r0,r8
0000be  f1a00901          SUB      r9,r0,#1
;;;92         if (Index == pObj->CursorPos) {
0000c2  6c20              LDR      r0,[r4,#0x40]
0000c4  4548              CMP      r0,r9
0000c6  d12b              BNE      |L1.288|
;;;93           /* In this case we need to check if an overflow occures */
;;;94           char c;
;;;95           int Value;
;;;96           U32 OldResult;
;;;97           /* Calculate old value (until cursor position) */
;;;98           c         = *(s + Index);
0000c8  9802              LDR      r0,[sp,#8]
0000ca  f8100009          LDRB     r0,[r0,r9]
0000ce  9001              STR      r0,[sp,#4]
;;;99           Value     = _DecChar2Int(c);
0000d0  9801              LDR      r0,[sp,#4]
0000d2  f7fffffe          BL       _DecChar2Int
0000d6  4682              MOV      r10,r0
;;;100          OldResult = Result;
0000d8  46ab              MOV      r11,r5
;;;101          if (Value >= 0) {
0000da  f1ba0f00          CMP      r10,#0
0000de  db04              BLT      |L1.234|
;;;102            OldResult += GUI_Pow10[Pos] * Value;
0000e0  4871              LDR      r0,|L1.680|
0000e2  f8500026          LDR      r0,[r0,r6,LSL #2]
0000e6  fb00bb0a          MLA      r11,r0,r10,r11
                  |L1.234|
;;;103          }
;;;104          /* Calculate new value (until cursor position).
;;;105           * A multiplication like Result += GUI_Pow10[Pos++] * Digit
;;;106           * does not work, because in this case we have no chance to
;;;107           * notice an overflow.
;;;108           */
;;;109          for (j = 0; j < Digit; j++) {
0000ea  2000              MOVS     r0,#0
0000ec  9003              STR      r0,[sp,#0xc]
0000ee  e00b              B        |L1.264|
                  |L1.240|
;;;110            U32 NewResult;
;;;111            NewResult = Result + GUI_Pow10[Pos];
0000f0  496d              LDR      r1,|L1.680|
0000f2  f8511026          LDR      r1,[r1,r6,LSL #2]
0000f6  1948              ADDS     r0,r1,r5
;;;112            /* Check if we have an overflow */
;;;113            if (NewResult < Result) {
0000f8  42a8              CMP      r0,r5
0000fa  d201              BCS      |L1.256|
;;;114              Result = pObj->Max;
0000fc  6b65              LDR      r5,[r4,#0x34]
;;;115              break;
0000fe  e006              B        |L1.270|
                  |L1.256|
;;;116            }
;;;117            Result = NewResult;
000100  4605              MOV      r5,r0
000102  9803              LDR      r0,[sp,#0xc]          ;109
000104  1c40              ADDS     r0,r0,#1              ;109
000106  9003              STR      r0,[sp,#0xc]          ;109
                  |L1.264|
000108  9803              LDR      r0,[sp,#0xc]          ;109
00010a  42b8              CMP      r0,r7                 ;109
00010c  dbf0              BLT      |L1.240|
                  |L1.270|
00010e  bf00              NOP                            ;115
;;;118          }
;;;119          /* Check if we have an overflow */
;;;120          if (Digit > Value) {
000110  4557              CMP      r7,r10
000112  dd03              BLE      |L1.284|
;;;121            if (Result < OldResult) {
000114  455d              CMP      r5,r11
000116  d201              BCS      |L1.284|
;;;122              Result = pObj->Max;
000118  6b65              LDR      r5,[r4,#0x34]
;;;123              break;
00011a  e01f              B        |L1.348|
                  |L1.284|
;;;124            }
;;;125          }
;;;126          Pos++;
00011c  1c76              ADDS     r6,r6,#1
;;;127        } else {
00011e  e017              B        |L1.336|
                  |L1.288|
;;;128          /* If current index is not the cursor position */
;;;129          char c = *(s + Index);
000120  9802              LDR      r0,[sp,#8]
000122  f810b009          LDRB     r11,[r0,r9]
;;;130          int Value = _DecChar2Int(c);
000126  4658              MOV      r0,r11
000128  f7fffffe          BL       _DecChar2Int
00012c  4682              MOV      r10,r0
;;;131          if (Value >= 0) {
00012e  f1ba0f00          CMP      r10,#0
000132  db0c              BLT      |L1.334|
;;;132            U32 OldResult;
;;;133            OldResult = Result;
000134  4628              MOV      r0,r5
;;;134            Result += GUI_Pow10[Pos++] * Value;
000136  4631              MOV      r1,r6
000138  1c76              ADDS     r6,r6,#1
00013a  4a5b              LDR      r2,|L1.680|
00013c  f8521021          LDR      r1,[r2,r1,LSL #2]
000140  fb01550a          MLA      r5,r1,r10,r5
;;;135            /* Check if we have an overflow */
;;;136            if (Result < OldResult) {
000144  4285              CMP      r5,r0
000146  d201              BCS      |L1.332|
;;;137              Result = pObj->Max;
000148  6b65              LDR      r5,[r4,#0x34]
;;;138              break;
00014a  e007              B        |L1.348|
                  |L1.332|
;;;139            }
;;;140          }
00014c  bf00              NOP      
                  |L1.334|
;;;141        }
00014e  bf00              NOP      
                  |L1.336|
000150  f1080801          ADD      r8,r8,#1              ;90
                  |L1.340|
000154  f9b4002a          LDRSH    r0,[r4,#0x2a]         ;90
000158  4540              CMP      r0,r8                 ;90
00015a  dcac              BGT      |L1.182|
                  |L1.348|
00015c  bf00              NOP                            ;123
;;;142      }
;;;143      EDIT__SetValueUnsigned(hObj, Result);
00015e  4629              MOV      r1,r5
000160  9806              LDR      r0,[sp,#0x18]
000162  f7fffffe          BL       EDIT__SetValueUnsigned
;;;144    }
000166  b007              ADD      sp,sp,#0x1c
000168  e8bd8ff0          POP      {r4-r11,pc}
;;;145    
                          ENDP

                  _AddPosition PROC
;;;149    */
;;;150    static void _AddPosition(EDIT_Obj* pObj, EDIT_Handle hObj, int Sign) {
00016c  e92d47f0          PUSH     {r4-r10,lr}
000170  4604              MOV      r4,r0
000172  460f              MOV      r7,r1
000174  4690              MOV      r8,r2
;;;151      int Pos;
;;;152      I32 v, NewValue;
;;;153      v = Sign;
000176  4645              MOV      r5,r8
;;;154      Pos = pObj->MaxLen - pObj->CursorPos-1;
000178  f9b4002a          LDRSH    r0,[r4,#0x2a]
00017c  6c21              LDR      r1,[r4,#0x40]
00017e  1a40              SUBS     r0,r0,r1
000180  1e46              SUBS     r6,r0,#1
;;;155      if (pObj->NumDecs && (Pos > pObj->NumDecs)) {
000182  f8940038          LDRB     r0,[r4,#0x38]
000186  b120              CBZ      r0,|L1.402|
000188  f8940038          LDRB     r0,[r4,#0x38]
00018c  42b0              CMP      r0,r6
00018e  da00              BGE      |L1.402|
;;;156        Pos--;
000190  1e76              SUBS     r6,r6,#1
                  |L1.402|
;;;157      }
;;;158      while (Pos--) {
000192  e002              B        |L1.410|
                  |L1.404|
;;;159        v *= 10;
000194  eb050085          ADD      r0,r5,r5,LSL #2
000198  0045              LSLS     r5,r0,#1
                  |L1.410|
00019a  0030              MOVS     r0,r6                 ;158
00019c  f1a60601          SUB      r6,r6,#1              ;158
0001a0  d1f8              BNE      |L1.404|
;;;160      }
;;;161      NewValue = pObj->CurrentValue + v;
0001a2  6be0              LDR      r0,[r4,#0x3c]
0001a4  eb000905          ADD      r9,r0,r5
;;;162      /*
;;;163       * Check if overflow occurs
;;;164       */
;;;165      if (v > 0) {
0001a8  2d00              CMP      r5,#0
0001aa  dd07              BLE      |L1.444|
;;;166        /* If result of addition is less than previous value he have an overflow */
;;;167        if (((U32)pObj->CurrentValue + v) < (U32)pObj->CurrentValue) {
0001ac  6be0              LDR      r0,[r4,#0x3c]
0001ae  4428              ADD      r0,r0,r5
0001b0  6be1              LDR      r1,[r4,#0x3c]
0001b2  4288              CMP      r0,r1
0001b4  d20b              BCS      |L1.462|
;;;168          NewValue = pObj->Max; /* Set maximum value */
0001b6  f8d49034          LDR      r9,[r4,#0x34]
0001ba  e008              B        |L1.462|
                  |L1.444|
;;;169        }
;;;170      } else if (v < 0) {
0001bc  2d00              CMP      r5,#0
0001be  da06              BGE      |L1.462|
;;;171        /* If result of addition is more than previous value he have an overflow */
;;;172        if (((U32)pObj->CurrentValue + v) > (U32)pObj->CurrentValue) {
0001c0  6be0              LDR      r0,[r4,#0x3c]
0001c2  4428              ADD      r0,r0,r5
0001c4  6be1              LDR      r1,[r4,#0x3c]
0001c6  4288              CMP      r0,r1
0001c8  d901              BLS      |L1.462|
;;;173          NewValue = pObj->Min; /* Set minimum value */
0001ca  f8d49030          LDR      r9,[r4,#0x30]
                  |L1.462|
;;;174        }
;;;175      }
;;;176      EDIT__SetValueUnsigned(hObj, NewValue);
0001ce  4649              MOV      r1,r9
0001d0  4638              MOV      r0,r7
0001d2  f7fffffe          BL       EDIT__SetValueUnsigned
;;;177    }
0001d6  e8bd87f0          POP      {r4-r10,pc}
;;;178    
                          ENDP

                  _AddKey PROC
;;;182    */
;;;183    static void _AddKey(EDIT_Handle hObj, int Key) {
0001da  e92d41f0          PUSH     {r4-r8,lr}
0001de  4605              MOV      r5,r0
0001e0  460e              MOV      r6,r1
;;;184      EDIT_Obj * pObj;
;;;185      pObj = EDIT_H2P(hObj); /* The GUI needs not to be locked here. This function is called only from EDIT_AddKey which has already locked the GUI */
0001e2  4628              MOV      r0,r5
0001e4  f7fffffe          BL       GUI_ALLOC_h2p
0001e8  4604              MOV      r4,r0
;;;186      if (pObj) {
0001ea  b37c              CBZ      r4,|L1.588|
;;;187        switch (Key) {
0001ec  2e10              CMP      r6,#0x10
0001ee  d017              BEQ      |L1.544|
0001f0  2e11              CMP      r6,#0x11
0001f2  d004              BEQ      |L1.510|
0001f4  2e12              CMP      r6,#0x12
0001f6  d00f              BEQ      |L1.536|
0001f8  2e13              CMP      r6,#0x13
0001fa  d117              BNE      |L1.556|
0001fc  e005              B        |L1.522|
                  |L1.510|
;;;188        case GUI_KEY_UP:
;;;189          _AddPosition(pObj, hObj, 1);
0001fe  2201              MOVS     r2,#1
000200  4629              MOV      r1,r5
000202  4620              MOV      r0,r4
000204  f7fffffe          BL       _AddPosition
;;;190          break;
000208  e01f              B        |L1.586|
                  |L1.522|
;;;191        case GUI_KEY_DOWN:
;;;192          _AddPosition(pObj, hObj, -1);
00020a  f04f32ff          MOV      r2,#0xffffffff
00020e  4629              MOV      r1,r5
000210  4620              MOV      r0,r4
000212  f7fffffe          BL       _AddPosition
;;;193          break;
000216  e018              B        |L1.586|
                  |L1.536|
;;;194        case GUI_KEY_RIGHT:
;;;195          _IncrementCursor(pObj);
000218  4620              MOV      r0,r4
00021a  f7fffffe          BL       _IncrementCursor
;;;196          break;
00021e  e014              B        |L1.586|
                  |L1.544|
;;;197        case GUI_KEY_LEFT:
;;;198          EDIT__SetCursorPos(pObj, pObj->CursorPos - 1);
000220  6c20              LDR      r0,[r4,#0x40]
000222  1e41              SUBS     r1,r0,#1
000224  4620              MOV      r0,r4
000226  f7fffffe          BL       EDIT__SetCursorPos
;;;199          break;
00022a  e00e              B        |L1.586|
                  |L1.556|
;;;200        default:
;;;201          {
;;;202            int Digit = _DecChar2Int(Key);
00022c  4630              MOV      r0,r6
00022e  f7fffffe          BL       _DecChar2Int
000232  4607              MOV      r7,r0
;;;203            if (Digit >= 0) {
000234  2f00              CMP      r7,#0
000236  db07              BLT      |L1.584|
;;;204              _EditULong(Digit, pObj, hObj);
000238  462a              MOV      r2,r5
00023a  4621              MOV      r1,r4
00023c  4638              MOV      r0,r7
00023e  f7fffffe          BL       _EditULong
;;;205              _IncrementCursor(pObj);
000242  4620              MOV      r0,r4
000244  f7fffffe          BL       _IncrementCursor
                  |L1.584|
;;;206            }
;;;207          }
;;;208          break;
000248  bf00              NOP      
                  |L1.586|
00024a  bf00              NOP                            ;190
                  |L1.588|
;;;209        }
;;;210      }
;;;211      _UpdateBuffer(hObj);
00024c  4628              MOV      r0,r5
00024e  f7fffffe          BL       _UpdateBuffer
;;;212    }
000252  e8bd81f0          POP      {r4-r8,pc}
;;;213    
                          ENDP

                  EDIT_SetUlongMode PROC
;;;223    */
;;;224    void EDIT_SetUlongMode(EDIT_Handle hEdit, U32 Value, U32 Min, U32 Max) {
000256  e92d41f0          PUSH     {r4-r8,lr}
00025a  4680              MOV      r8,r0
00025c  460d              MOV      r5,r1
00025e  4616              MOV      r6,r2
000260  461f              MOV      r7,r3
;;;225      EDIT_Obj* pObj;
;;;226      WM_LOCK();
;;;227      if (hEdit) {
000262  f1b80f00          CMP      r8,#0
000266  d01c              BEQ      |L1.674|
;;;228        pObj = EDIT_H2P(hEdit);
000268  4640              MOV      r0,r8
00026a  f7fffffe          BL       GUI_ALLOC_h2p
00026e  4604              MOV      r4,r0
;;;229        if (Value > Max) {
000270  42bd              CMP      r5,r7
000272  d901              BLS      |L1.632|
;;;230          Value = Max;
000274  463d              MOV      r5,r7
000276  e002              B        |L1.638|
                  |L1.632|
;;;231        } else if (Value < Min) {
000278  42b5              CMP      r5,r6
00027a  d200              BCS      |L1.638|
;;;232          Value = Min;
00027c  4635              MOV      r5,r6
                  |L1.638|
;;;233        }
;;;234        pObj->pfAddKeyEx    = _AddKey;
00027e  480b              LDR      r0,|L1.684|
000280  64e0              STR      r0,[r4,#0x4c]
;;;235        pObj->pfUpdateBuffer= _UpdateBuffer;
000282  480b              LDR      r0,|L1.688|
000284  6520              STR      r0,[r4,#0x50]
;;;236        pObj->CurrentValue  = Value;
000286  63e5              STR      r5,[r4,#0x3c]
;;;237        pObj->CursorPos     = 0;
000288  2000              MOVS     r0,#0
00028a  6420              STR      r0,[r4,#0x40]
;;;238        pObj->Min           = Min;
00028c  6326              STR      r6,[r4,#0x30]
;;;239        pObj->Max           = Max;
00028e  6367              STR      r7,[r4,#0x34]
;;;240        pObj->EditMode      = GUI_EDIT_MODE_OVERWRITE;
000290  2001              MOVS     r0,#1
000292  f8840048          STRB     r0,[r4,#0x48]
;;;241        _UpdateBuffer(hEdit);
000296  4640              MOV      r0,r8
000298  f7fffffe          BL       _UpdateBuffer
;;;242        WM_Invalidate(hEdit);
00029c  4640              MOV      r0,r8
00029e  f7fffffe          BL       WM_InvalidateWindow
                  |L1.674|
;;;243      }
;;;244      WM_UNLOCK();
;;;245    }
0002a2  e8bd81f0          POP      {r4-r8,pc}
;;;246    
                          ENDP

0002a6  0000              DCW      0x0000
                  |L1.680|
                          DCD      GUI_Pow10
                  |L1.684|
                          DCD      _AddKey
                  |L1.688|
                          DCD      _UpdateBuffer
