; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\guidev_writeex.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\guidev_writeex.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -I.\GUI\AntiAlias -I.\GUI\Config -I.\GUI\ConvertColor -I.\GUI\ConvertMono -I.\GUI\Core -I.\GUI\Font -I.\GUI\GUI_X -I.\GUI\JPEG -I.\GUI\LCDDriver -I.\GUI\MemDev -I.\GUI\MultiLayer -I.\GUI\Widget -I.\GUI\WM -IC:\Users\Administrator\Desktop\gui\STM32·Ü¶·°å-3.98\RTE -Id:\Keil_v5\ARM\PACK\ARM\CMSIS\4.3.0\CMSIS\Include -Id:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.1.0\Device\Include -D__UVISION_VERSION=515 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\guidev_writeex.crf GUI\MemDev\GUIDEV_WriteEx.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _GetPixelIndex PROC
;;;41     */
;;;42     static int _GetPixelIndex(const U8* pData, int x, int y, int bpp, int BytesPerLine) {
000000  b530              PUSH     {r4,r5,lr}
000002  4604              MOV      r4,r0
000004  9d03              LDR      r5,[sp,#0xc]
;;;43       if (bpp == 8) {
000006  2b08              CMP      r3,#8
000008  d103              BNE      |L1.18|
;;;44         return (int)(*(pData + (y * BytesPerLine) + x));
00000a  fb024005          MLA      r0,r2,r5,r4
00000e  5c40              LDRB     r0,[r0,r1]
                  |L1.16|
;;;45       } else {
;;;46         return (int)(*(const U16*)(pData + (y * BytesPerLine) + (x << 1)));
;;;47       }
;;;48     }
000010  bd30              POP      {r4,r5,pc}
                  |L1.18|
000012  fb024005          MLA      r0,r2,r5,r4           ;46
000016  f8300011          LDRH     r0,[r0,r1,LSL #1]     ;46
00001a  e7f9              B        |L1.16|
;;;49     
                          ENDP

                  _DrawHLineAlpha PROC
;;;53     */
;;;54     static void _DrawHLineAlpha(int x0, int y, int x1, int Intens) {
00001c  e92d4ffe          PUSH     {r1-r11,lr}
000020  4604              MOV      r4,r0
000022  460f              MOV      r7,r1
000024  4690              MOV      r8,r2
000026  4699              MOV      r9,r3
;;;55       GUI_MEMDEV* pDev   = GUI_MEMDEV_H2P(GUI_Context.hDevData);
000028  49f8              LDR      r1,|L1.1036|
00002a  f9b1004c          LDRSH    r0,[r1,#0x4c]  ; GUI_Context
00002e  f7fffffe          BL       GUI_ALLOC_h2p
000032  4682              MOV      r10,r0
;;;56       GUI_USAGE_h hUsage = pDev->hUsage; 
000034  f9bab018          LDRSH    r11,[r10,#0x18]
;;;57       LCD_COLOR Color1, Color2;
;;;58       int Len = x1 - x0 + 1;
000038  eba80004          SUB      r0,r8,r4
00003c  1c45              ADDS     r5,r0,#1
;;;59       if (hUsage) {
00003e  f1bb0f00          CMP      r11,#0
000042  d00d              BEQ      |L1.96|
;;;60         GUI_USAGE_AddHLine(GUI_USAGE_H2P(hUsage), x0, y, Len);
000044  4658              MOV      r0,r11
000046  f7fffffe          BL       GUI_ALLOC_h2p
00004a  9000              STR      r0,[sp,#0]
00004c  4658              MOV      r0,r11
00004e  f7fffffe          BL       GUI_ALLOC_h2p
000052  6880              LDR      r0,[r0,#8]
000054  462b              MOV      r3,r5
000056  463a              MOV      r2,r7
000058  4621              MOV      r1,r4
00005a  6846              LDR      r6,[r0,#4]
00005c  9800              LDR      r0,[sp,#0]
00005e  47b0              BLX      r6
                  |L1.96|
;;;61       }
;;;62       Color1 = LCD_Index2Color(LCD_COLORINDEX);
000060  49ea              LDR      r1,|L1.1036|
000062  8848              LDRH     r0,[r1,#2]  ; GUI_Context
000064  f7fffffe          BL       LCD_Index2Color
000068  9002              STR      r0,[sp,#8]
;;;63       if (pDev->BitsPerPixel == 8) {
00006a  f8da0010          LDR      r0,[r10,#0x10]
00006e  2808              CMP      r0,#8
000070  d119              BNE      |L1.166|
;;;64         U8* pData;
;;;65         pData  = (U8*) GUI_MEMDEV__XY2PTR(x0, y);
000072  4639              MOV      r1,r7
000074  4620              MOV      r0,r4
000076  f7fffffe          BL       GUI_MEMDEV__XY2PTR
00007a  4606              MOV      r6,r0
;;;66         while (Len--) {
00007c  e00e              B        |L1.156|
                  |L1.126|
;;;67           Color2 = LCD_Index2Color(*(pData));
00007e  7830              LDRB     r0,[r6,#0]
000080  f7fffffe          BL       LCD_Index2Color
000084  9001              STR      r0,[sp,#4]
;;;68           Color2 = LCD_MixColors256(Color1, Color2, Intens);
000086  464a              MOV      r2,r9
000088  e9dd1001          LDRD     r1,r0,[sp,#4]
00008c  f7fffffe          BL       LCD_MixColors256
000090  9001              STR      r0,[sp,#4]
;;;69           *(pData++) = LCD_Color2Index(Color2);
000092  9801              LDR      r0,[sp,#4]
000094  f7fffffe          BL       LCD_Color2Index
000098  f8060b01          STRB     r0,[r6],#1
                  |L1.156|
00009c  0028              MOVS     r0,r5                 ;66
00009e  f1a50501          SUB      r5,r5,#1              ;66
0000a2  d1ec              BNE      |L1.126|
;;;70         }
;;;71       } else {
0000a4  e019              B        |L1.218|
                  |L1.166|
;;;72         U16* pData;
;;;73         pData  = (U16*) GUI_MEMDEV__XY2PTR(x0, y);
0000a6  4639              MOV      r1,r7
0000a8  4620              MOV      r0,r4
0000aa  f7fffffe          BL       GUI_MEMDEV__XY2PTR
0000ae  4606              MOV      r6,r0
;;;74         while (Len--) {
0000b0  e00e              B        |L1.208|
                  |L1.178|
;;;75           Color2 = LCD_Index2Color(*(pData));
0000b2  8830              LDRH     r0,[r6,#0]
0000b4  f7fffffe          BL       LCD_Index2Color
0000b8  9001              STR      r0,[sp,#4]
;;;76           Color2 = LCD_MixColors256(Color1, Color2, Intens);
0000ba  464a              MOV      r2,r9
0000bc  e9dd1001          LDRD     r1,r0,[sp,#4]
0000c0  f7fffffe          BL       LCD_MixColors256
0000c4  9001              STR      r0,[sp,#4]
;;;77           *(pData++) = LCD_Color2Index(Color2);
0000c6  9801              LDR      r0,[sp,#4]
0000c8  f7fffffe          BL       LCD_Color2Index
0000cc  f8260b02          STRH     r0,[r6],#2
                  |L1.208|
0000d0  0028              MOVS     r0,r5                 ;74
0000d2  f1a50501          SUB      r5,r5,#1              ;74
0000d6  d1ec              BNE      |L1.178|
;;;78         }
;;;79       }
0000d8  bf00              NOP      
                  |L1.218|
;;;80     }
0000da  e8bd8ffe          POP      {r1-r11,pc}
;;;81     
                          ENDP

                  _DrawBitmapLineEx PROC
;;;85     */
;;;86     static void _DrawBitmapLineEx(int x0, int y0, int xOff, int yOff, int xSize, int xMag, int Alpha,
0000de  e92d4fff          PUSH     {r0-r11,lr}
;;;87                                   int bpp, int BytesPerLine, const U8* pData) {
0000e2  b087              SUB      sp,sp,#0x1c
0000e4  4604              MOV      r4,r0
0000e6  4691              MOV      r9,r2
0000e8  f8ddb054          LDR      r11,[sp,#0x54]
;;;88       int x, xi, xAct, xStart, xMagAbs, xiMag, xMin, xMax, Cached;
;;;89       LCD_PIXELINDEX Index = 0, IndexPrev = 0;
0000ec  2000              MOVS     r0,#0
0000ee  9002              STR      r0,[sp,#8]
0000f0  9001              STR      r0,[sp,#4]
;;;90       /* Use clipping rect */
;;;91       xMin = GUI_Context.ClipRect.x0 - x0;
0000f2  48c6              LDR      r0,|L1.1036|
0000f4  f9b00008          LDRSH    r0,[r0,#8]  ; GUI_Context
0000f8  1b07              SUBS     r7,r0,r4
;;;92       xMax = GUI_Context.ClipRect.x1 - x0;
0000fa  48c4              LDR      r0,|L1.1036|
0000fc  f9b0000c          LDRSH    r0,[r0,#0xc]
000100  1b00              SUBS     r0,r0,r4
000102  9004              STR      r0,[sp,#0x10]
;;;93       /* Init some values */
;;;94       xMagAbs =  (xMag > 0) ? xMag : -xMag;
000104  f1bb0f00          CMP      r11,#0
000108  dd01              BLE      |L1.270|
00010a  4658              MOV      r0,r11
00010c  e001              B        |L1.274|
                  |L1.270|
00010e  f1cb0000          RSB      r0,r11,#0
                  |L1.274|
000112  9005              STR      r0,[sp,#0x14]
;;;95       x       =  (xOff * xMagAbs) / 1000;
000114  9805              LDR      r0,[sp,#0x14]
000116  fb09f000          MUL      r0,r9,r0
00011a  f44f717a          MOV      r1,#0x3e8
00011e  fb90f5f1          SDIV     r5,r0,r1
;;;96       xiMag   =  (xOff * xMagAbs) % 1000;
000122  9805              LDR      r0,[sp,#0x14]
000124  fb09f000          MUL      r0,r9,r0
000128  fb90f2f1          SDIV     r2,r0,r1
00012c  fb010812          MLS      r8,r1,r2,r0
;;;97       xStart  = -1;
000130  f04f36ff          MOV      r6,#0xffffffff
;;;98       Cached  =  0;
000134  2000              MOVS     r0,#0
000136  9003              STR      r0,[sp,#0xc]
;;;99       for (xi = 0; xi < xSize; xi++) {
000138  4682              MOV      r10,r0
00013a  e057              B        |L1.492|
                  |L1.316|
;;;100        xiMag += xMagAbs;
00013c  9805              LDR      r0,[sp,#0x14]
00013e  4480              ADD      r8,r8,r0
;;;101        if (xiMag >= 1000) {  
000140  f5b87f7a          CMP      r8,#0x3e8
000144  db50              BLT      |L1.488|
;;;102          if (x <= xMax) {
000146  9804              LDR      r0,[sp,#0x10]
000148  4285              CMP      r5,r0
00014a  dc4a              BGT      |L1.482|
;;;103            xAct  = (xMag > 0) ? xi : xSize - xi - 1;
00014c  f1bb0f00          CMP      r11,#0
000150  dd01              BLE      |L1.342|
000152  4650              MOV      r0,r10
000154  e003              B        |L1.350|
                  |L1.342|
000156  9814              LDR      r0,[sp,#0x50]
000158  eba0000a          SUB      r0,r0,r10
00015c  1e40              SUBS     r0,r0,#1
                  |L1.350|
00015e  9006              STR      r0,[sp,#0x18]
;;;104            Index = _GetPixelIndex(pData, xOff + xAct, yOff, bpp, BytesPerLine);
000160  9818              LDR      r0,[sp,#0x60]
000162  9000              STR      r0,[sp,#0]
000164  9806              LDR      r0,[sp,#0x18]
000166  eb090100          ADD      r1,r9,r0
00016a  9b17              LDR      r3,[sp,#0x5c]
00016c  9a0a              LDR      r2,[sp,#0x28]
00016e  9819              LDR      r0,[sp,#0x64]
000170  f7fffffe          BL       _GetPixelIndex
000174  b280              UXTH     r0,r0
000176  9002              STR      r0,[sp,#8]
;;;105            if ((Index != IndexPrev) || (xStart == -1)) {
000178  e9dd1001          LDRD     r1,r0,[sp,#4]
00017c  4288              CMP      r0,r1
00017e  d101              BNE      |L1.388|
000180  1c70              ADDS     r0,r6,#1
000182  bb30              CBNZ     r0,|L1.466|
                  |L1.388|
;;;106              if ((xStart != -1) && (x > xMin)) {
000184  1c70              ADDS     r0,r6,#1
000186  b1f8              CBZ      r0,|L1.456|
000188  42bd              CMP      r5,r7
00018a  dd1d              BLE      |L1.456|
;;;107                /* Clear cache */
;;;108                if (xStart < xMin) {
00018c  42be              CMP      r6,r7
00018e  da00              BGE      |L1.402|
;;;109                  xStart = xMin;
000190  463e              MOV      r6,r7
                  |L1.402|
;;;110                }
;;;111                LCD_SetColorIndex(IndexPrev);
000192  9801              LDR      r0,[sp,#4]
000194  f7fffffe          BL       LCD_SetColorIndex
;;;112                if (Alpha == 256 || !GUI_Context.hDevData) {
000198  9816              LDR      r0,[sp,#0x58]
00019a  f5b07f80          CMP      r0,#0x100
00019e  d003              BEQ      |L1.424|
0001a0  489a              LDR      r0,|L1.1036|
0001a2  f8b0004c          LDRH     r0,[r0,#0x4c]  ; GUI_Context
0001a6  b940              CBNZ     r0,|L1.442|
                  |L1.424|
;;;113                  LCDDEV_L0_DrawHLine(x0 + xStart, y0, x0 + x - 1);
0001a8  1961              ADDS     r1,r4,r5
0001aa  1e4a              SUBS     r2,r1,#1
0001ac  19a0              ADDS     r0,r4,r6
0001ae  4997              LDR      r1,|L1.1036|
0001b0  6c89              LDR      r1,[r1,#0x48]  ; GUI_Context
0001b2  690b              LDR      r3,[r1,#0x10]
0001b4  9908              LDR      r1,[sp,#0x20]
0001b6  4798              BLX      r3
0001b8  e006              B        |L1.456|
                  |L1.442|
;;;114                } else {
;;;115                  _DrawHLineAlpha(x0 + xStart, y0, x0 + x - 1, Alpha);
0001ba  1961              ADDS     r1,r4,r5
0001bc  1e4a              SUBS     r2,r1,#1
0001be  19a0              ADDS     r0,r4,r6
0001c0  9b16              LDR      r3,[sp,#0x58]
0001c2  9908              LDR      r1,[sp,#0x20]
0001c4  f7fffffe          BL       _DrawHLineAlpha
                  |L1.456|
;;;116                }
;;;117              }
;;;118              IndexPrev = Index;
0001c8  9802              LDR      r0,[sp,#8]
0001ca  9001              STR      r0,[sp,#4]
;;;119              xStart    = x;
0001cc  462e              MOV      r6,r5
;;;120              Cached    = 1;
0001ce  2001              MOVS     r0,#1
0001d0  9003              STR      r0,[sp,#0xc]
                  |L1.466|
;;;121            }
;;;122            do {
0001d2  bf00              NOP      
                  |L1.468|
;;;123              x++;
0001d4  1c6d              ADDS     r5,r5,#1
;;;124              xiMag -= 1000;
0001d6  f5a8787a          SUB      r8,r8,#0x3e8
;;;125            } while (xiMag >= 1000);
0001da  f5b87f7a          CMP      r8,#0x3e8
0001de  daf9              BGE      |L1.468|
0001e0  e002              B        |L1.488|
                  |L1.482|
;;;126          } else {
;;;127            x = xMax + 1;
0001e2  9804              LDR      r0,[sp,#0x10]
0001e4  1c45              ADDS     r5,r0,#1
;;;128            break;
0001e6  e004              B        |L1.498|
                  |L1.488|
0001e8  f10a0a01          ADD      r10,r10,#1            ;99
                  |L1.492|
0001ec  9814              LDR      r0,[sp,#0x50]         ;99
0001ee  4582              CMP      r10,r0                ;99
0001f0  dba4              BLT      |L1.316|
                  |L1.498|
0001f2  bf00              NOP      
;;;129          }
;;;130        }
;;;131      }
;;;132      if (Cached && (x > xMin)) {
0001f4  9803              LDR      r0,[sp,#0xc]
0001f6  b1f8              CBZ      r0,|L1.568|
0001f8  42bd              CMP      r5,r7
0001fa  dd1d              BLE      |L1.568|
;;;133        /* Clear cache */
;;;134        if (xStart < xMin) {
0001fc  42be              CMP      r6,r7
0001fe  da00              BGE      |L1.514|
;;;135          xStart = xMin;
000200  463e              MOV      r6,r7
                  |L1.514|
;;;136        }
;;;137        LCD_SetColorIndex(Index);
000202  9802              LDR      r0,[sp,#8]
000204  f7fffffe          BL       LCD_SetColorIndex
;;;138        if (Alpha == 256 || !GUI_Context.hDevData) {
000208  9816              LDR      r0,[sp,#0x58]
00020a  f5b07f80          CMP      r0,#0x100
00020e  d003              BEQ      |L1.536|
000210  487e              LDR      r0,|L1.1036|
000212  f8b0004c          LDRH     r0,[r0,#0x4c]  ; GUI_Context
000216  b940              CBNZ     r0,|L1.554|
                  |L1.536|
;;;139          LCDDEV_L0_DrawHLine(x0 + xStart, y0, x0 + x - 1);
000218  1961              ADDS     r1,r4,r5
00021a  1e4a              SUBS     r2,r1,#1
00021c  19a0              ADDS     r0,r4,r6
00021e  497b              LDR      r1,|L1.1036|
000220  6c89              LDR      r1,[r1,#0x48]  ; GUI_Context
000222  690b              LDR      r3,[r1,#0x10]
000224  9908              LDR      r1,[sp,#0x20]
000226  4798              BLX      r3
000228  e006              B        |L1.568|
                  |L1.554|
;;;140        } else {
;;;141          _DrawHLineAlpha(x0 + xStart, y0, x0 + x - 1, Alpha);
00022a  1961              ADDS     r1,r4,r5
00022c  1e4a              SUBS     r2,r1,#1
00022e  19a0              ADDS     r0,r4,r6
000230  9b16              LDR      r3,[sp,#0x58]
000232  9908              LDR      r1,[sp,#0x20]
000234  f7fffffe          BL       _DrawHLineAlpha
                  |L1.568|
;;;142        }
;;;143      }
;;;144    }
000238  b00b              ADD      sp,sp,#0x2c
00023a  e8bd8ff0          POP      {r4-r11,pc}
;;;145    
                          ENDP

                  _DrawBitmapEx PROC
;;;149    */
;;;150    static void _DrawBitmapEx(int x0, int y0, int xOff, int yOff, int xSize, int ySize, int xMag, int yMag,
00023e  e92d4fff          PUSH     {r0-r11,lr}
;;;151                              int Alpha, int BmpSizeX, int BmpSizeY, int bpp, int BytesPerLine, const U8* pData) {
000242  b089              SUB      sp,sp,#0x24
000244  4683              MOV      r11,r0
000246  4688              MOV      r8,r1
000248  4699              MOV      r9,r3
00024a  e9dda618          LDRD     r10,r6,[sp,#0x60]
;;;152      int y, yi, yMin, yMax, yEnd, yPrev;
;;;153      yMin = GUI_Context.ClipRect.y0;
00024e  486f              LDR      r0,|L1.1036|
000250  f9b0000a          LDRSH    r0,[r0,#0xa]
000254  9008              STR      r0,[sp,#0x20]
;;;154      yMax = GUI_Context.ClipRect.y1;
000256  486d              LDR      r0,|L1.1036|
000258  f9b0000e          LDRSH    r0,[r0,#0xe]
00025c  9007              STR      r0,[sp,#0x1c]
;;;155      if (xMag < 0) {
00025e  f1ba0f00          CMP      r10,#0
000262  da0d              BGE      |L1.640|
;;;156        x0 -= (BmpSizeX - (xOff << 1) - xSize) * xMag / 1000;
000264  990b              LDR      r1,[sp,#0x2c]
000266  981b              LDR      r0,[sp,#0x6c]
000268  eba00141          SUB      r1,r0,r1,LSL #1
00026c  9816              LDR      r0,[sp,#0x58]
00026e  1a08              SUBS     r0,r1,r0
000270  fb00f00a          MUL      r0,r0,r10
000274  f44f717a          MOV      r1,#0x3e8
000278  fb90f0f1          SDIV     r0,r0,r1
00027c  ebab0b00          SUB      r11,r11,r0
                  |L1.640|
;;;157      }
;;;158      if (yMag < 0) {
000280  2e00              CMP      r6,#0
000282  da08              BGE      |L1.662|
;;;159        y0 -= (BmpSizeY - 1) * yMag / 1000;
000284  981c              LDR      r0,[sp,#0x70]
000286  1e40              SUBS     r0,r0,#1
000288  4370              MULS     r0,r6,r0
00028a  f44f717a          MOV      r1,#0x3e8
00028e  fb90f0f1          SDIV     r0,r0,r1
000292  eba80800          SUB      r8,r8,r0
                  |L1.662|
;;;160      }
;;;161      yEnd  = y0 + GUI__DivideRound32(((I32)(yOff) * yMag), 1000);
000296  fb09f006          MUL      r0,r9,r6
00029a  f44f717a          MOV      r1,#0x3e8
00029e  f7fffffe          BL       GUI__DivideRound32
0002a2  eb000708          ADD      r7,r0,r8
;;;162      yPrev = yEnd + 1;
0002a6  1c78              ADDS     r0,r7,#1
0002a8  9006              STR      r0,[sp,#0x18]
;;;163      for (yi = yOff; yi < (yOff + ySize); yi++) {
0002aa  464d              MOV      r5,r9
0002ac  e039              B        |L1.802|
                  |L1.686|
;;;164        y = yEnd;
0002ae  463c              MOV      r4,r7
;;;165        yEnd = y0 + GUI__DivideRound32(((I32)(yi + 1) * yMag), 1000);
0002b0  1c69              ADDS     r1,r5,#1
0002b2  fb01f006          MUL      r0,r1,r6
0002b6  f44f717a          MOV      r1,#0x3e8
0002ba  f7fffffe          BL       GUI__DivideRound32
0002be  eb000708          ADD      r7,r0,r8
;;;166        if (y != yPrev) {
0002c2  9806              LDR      r0,[sp,#0x18]
0002c4  4284              CMP      r4,r0
0002c6  d02b              BEQ      |L1.800|
;;;167          yPrev = y;
0002c8  9406              STR      r4,[sp,#0x18]
;;;168          do {
0002ca  bf00              NOP      
                  |L1.716|
;;;169            if ((y >= yMin) && (y <= yMax)) {
0002cc  9808              LDR      r0,[sp,#0x20]
0002ce  4284              CMP      r4,r0
0002d0  db13              BLT      |L1.762|
0002d2  9807              LDR      r0,[sp,#0x1c]
0002d4  4284              CMP      r4,r0
0002d6  dc10              BGT      |L1.762|
;;;170              _DrawBitmapLineEx(x0, y, xOff, yi, xSize, xMag, Alpha, bpp, BytesPerLine, pData);
0002d8  e9dd311d          LDRD     r3,r1,[sp,#0x74]
0002dc  9a1a              LDR      r2,[sp,#0x68]
0002de  981f              LDR      r0,[sp,#0x7c]
0002e0  e9cd2302          STRD     r2,r3,[sp,#8]
0002e4  e9cd1004          STRD     r1,r0,[sp,#0x10]
0002e8  9816              LDR      r0,[sp,#0x58]
0002ea  462b              MOV      r3,r5
0002ec  e9cd0a00          STRD     r0,r10,[sp,#0]
0002f0  4621              MOV      r1,r4
0002f2  4658              MOV      r0,r11
0002f4  9a0b              LDR      r2,[sp,#0x2c]
0002f6  f7fffffe          BL       _DrawBitmapLineEx
                  |L1.762|
;;;171            }
;;;172          } while ((yMag < 0) ? (--y > yEnd) : (++y < yEnd));
0002fa  2e00              CMP      r6,#0
0002fc  da07              BGE      |L1.782|
0002fe  1e60              SUBS     r0,r4,#1
000300  4604              MOV      r4,r0
000302  42b8              CMP      r0,r7
000304  dd01              BLE      |L1.778|
000306  2001              MOVS     r0,#1
000308  e008              B        |L1.796|
                  |L1.778|
00030a  2000              MOVS     r0,#0
00030c  e006              B        |L1.796|
                  |L1.782|
00030e  1c60              ADDS     r0,r4,#1
000310  4604              MOV      r4,r0
000312  42b8              CMP      r0,r7
000314  da01              BGE      |L1.794|
000316  2001              MOVS     r0,#1
000318  e000              B        |L1.796|
                  |L1.794|
00031a  2000              MOVS     r0,#0
                  |L1.796|
00031c  2800              CMP      r0,#0
00031e  d1d5              BNE      |L1.716|
                  |L1.800|
000320  1c6d              ADDS     r5,r5,#1              ;163
                  |L1.802|
000322  9817              LDR      r0,[sp,#0x5c]         ;163
000324  4448              ADD      r0,r0,r9              ;163
000326  42a8              CMP      r0,r5                 ;163
000328  dcc1              BGT      |L1.686|
;;;173        }
;;;174      }
;;;175    }
00032a  b00d              ADD      sp,sp,#0x34
00032c  e8bd8ff0          POP      {r4-r11,pc}
;;;176    
                          ENDP

                  _WriteExToActiveAt PROC
;;;180    */
;;;181    static void _WriteExToActiveAt(GUI_MEMDEV_Handle hMem, int x, int y, int xMag, int yMag, int Alpha) {
000330  e92d4fff          PUSH     {r0-r11,lr}
000334  b093              SUB      sp,sp,#0x4c
000336  4616              MOV      r6,r2
000338  469a              MOV      r10,r3
00033a  9f20              LDR      r7,[sp,#0x80]
;;;182      GUI_MEMDEV* pDev;
;;;183      GUI_USAGE_h hUsage; 
;;;184      GUI_USAGE*  pUsage;
;;;185      U8* pData;
;;;186      int yAct, yPrev, ySize, yi;
;;;187      int BytesPerLine, bpp;
;;;188      pDev         = GUI_MEMDEV_H2P(hMem);
00033c  9813              LDR      r0,[sp,#0x4c]
00033e  f7fffffe          BL       GUI_ALLOC_h2p
000342  4604              MOV      r4,r0
;;;189      hUsage       = pDev->hUsage;
000344  f9b40018          LDRSH    r0,[r4,#0x18]
000348  9012              STR      r0,[sp,#0x48]
;;;190      ySize        = pDev->YSize;
00034a  f9b40006          LDRSH    r0,[r4,#6]
00034e  900e              STR      r0,[sp,#0x38]
;;;191      BytesPerLine = pDev->BytesPerLine;
000350  68e0              LDR      r0,[r4,#0xc]
000352  900d              STR      r0,[sp,#0x34]
;;;192      pData        = (U8*)(pDev + 1);
000354  f104002c          ADD      r0,r4,#0x2c
000358  9011              STR      r0,[sp,#0x44]
;;;193      bpp          = pDev->BitsPerPixel;
00035a  6920              LDR      r0,[r4,#0x10]
00035c  900c              STR      r0,[sp,#0x30]
;;;194      yPrev = y + 1;
00035e  1c70              ADDS     r0,r6,#1
000360  900f              STR      r0,[sp,#0x3c]
;;;195      if (hUsage) {
000362  9812              LDR      r0,[sp,#0x48]
000364  2800              CMP      r0,#0
000366  d07d              BEQ      |L1.1124|
;;;196        int xOff, xSize, y0;
;;;197        pUsage = GUI_USAGE_H2P(hUsage);
000368  9812              LDR      r0,[sp,#0x48]
00036a  f7fffffe          BL       GUI_ALLOC_h2p
00036e  4680              MOV      r8,r0
;;;198        for (yi = 0; yi < ySize; yi++) {
000370  2500              MOVS     r5,#0
000372  e07a              B        |L1.1130|
                  |L1.884|
;;;199          yAct = y + GUI__DivideRound32(((I32)(yi) * yMag), 1000);
000374  fb05f007          MUL      r0,r5,r7
000378  f44f717a          MOV      r1,#0x3e8
00037c  f7fffffe          BL       GUI__DivideRound32
000380  4430              ADD      r0,r0,r6
000382  9010              STR      r0,[sp,#0x40]
;;;200          if (yAct != yPrev) {
000384  e9dd100f          LDRD     r1,r0,[sp,#0x3c]
000388  4288              CMP      r0,r1
00038a  d06d              BEQ      |L1.1128|
;;;201            xOff  = 0;
00038c  2000              MOVS     r0,#0
00038e  900b              STR      r0,[sp,#0x2c]
;;;202            xSize = GUI_USAGE_GetNextDirty(pUsage, &xOff, yi);
000390  f8d80008          LDR      r0,[r8,#8]
000394  462a              MOV      r2,r5
000396  a90b              ADD      r1,sp,#0x2c
000398  6943              LDR      r3,[r0,#0x14]
00039a  4640              MOV      r0,r8
00039c  4798              BLX      r3
00039e  4681              MOV      r9,r0
;;;203            if (xSize == pDev->XSize) {
0003a0  f9b40004          LDRSH    r0,[r4,#4]
0003a4  4548              CMP      r0,r9
0003a6  d133              BNE      |L1.1040|
;;;204              /* If the entire line is affected, calculate the number of entire lines */
;;;205              y0 = yi;
0003a8  46ab              MOV      r11,r5
;;;206              while (GUI_USAGE_GetNextDirty(pUsage, &xOff, yi + 1) == xSize) {
0003aa  e000              B        |L1.942|
                  |L1.940|
;;;207                yi++;
0003ac  1c6d              ADDS     r5,r5,#1
                  |L1.942|
0003ae  f8d80008          LDR      r0,[r8,#8]            ;206
0003b2  1c6a              ADDS     r2,r5,#1              ;206
0003b4  a90b              ADD      r1,sp,#0x2c           ;206
0003b6  6943              LDR      r3,[r0,#0x14]         ;206
0003b8  4640              MOV      r0,r8                 ;206
0003ba  4798              BLX      r3                    ;206
0003bc  4548              CMP      r0,r9                 ;206
0003be  d0f5              BEQ      |L1.940|
;;;208              }
;;;209              _DrawBitmapEx(x, y, 0, y0, pDev->XSize, yi - y0 + 1, xMag, yMag, Alpha,
0003c0  f9b43006          LDRSH    r3,[r4,#6]
0003c4  e9dd210c          LDRD     r2,r1,[sp,#0x30]
0003c8  9811              LDR      r0,[sp,#0x44]
0003ca  e9cd3206          STRD     r3,r2,[sp,#0x18]
0003ce  e9cd1008          STRD     r1,r0,[sp,#0x20]
0003d2  f9b40004          LDRSH    r0,[r4,#4]
0003d6  9921              LDR      r1,[sp,#0x84]
0003d8  e9cda702          STRD     r10,r7,[sp,#8]
0003dc  e9cd1004          STRD     r1,r0,[sp,#0x10]
0003e0  eba5000b          SUB      r0,r5,r11
0003e4  1c40              ADDS     r0,r0,#1
0003e6  f9b41004          LDRSH    r1,[r4,#4]
0003ea  465b              MOV      r3,r11
0003ec  2200              MOVS     r2,#0
0003ee  e9cd1000          STRD     r1,r0,[sp,#0]
0003f2  4631              MOV      r1,r6
0003f4  9814              LDR      r0,[sp,#0x50]
0003f6  f7fffffe          BL       _DrawBitmapEx
;;;210                            pDev->XSize, pDev->YSize, bpp, BytesPerLine, pData);
;;;211              yPrev = y + GUI__DivideRound32(((I32)(yi) * yMag), 1000);
0003fa  fb05f007          MUL      r0,r5,r7
0003fe  f44f717a          MOV      r1,#0x3e8
000402  f7fffffe          BL       GUI__DivideRound32
000406  4430              ADD      r0,r0,r6
000408  900f              STR      r0,[sp,#0x3c]
00040a  e02d              B        |L1.1128|
                  |L1.1036|
                          DCD      GUI_Context
                  |L1.1040|
;;;212            } else {
;;;213              /* Draw the partial line which needs to be drawn */
;;;214              while (xSize) {
000410  e023              B        |L1.1114|
                  |L1.1042|
;;;215                _DrawBitmapEx(x, y, xOff, yi, xSize, 1, xMag, yMag, Alpha,
000412  f9b43006          LDRSH    r3,[r4,#6]
000416  e9dd120c          LDRD     r1,r2,[sp,#0x30]
00041a  9811              LDR      r0,[sp,#0x44]
00041c  e9cd3106          STRD     r3,r1,[sp,#0x18]
000420  e9cd2008          STRD     r2,r0,[sp,#0x20]
000424  f9b41004          LDRSH    r1,[r4,#4]
000428  9821              LDR      r0,[sp,#0x84]
00042a  e9cda702          STRD     r10,r7,[sp,#8]
00042e  e9cd0104          STRD     r0,r1,[sp,#0x10]
000432  2001              MOVS     r0,#1
000434  462b              MOV      r3,r5
000436  e9cd9000          STRD     r9,r0,[sp,#0]
00043a  4631              MOV      r1,r6
00043c  9a0b              LDR      r2,[sp,#0x2c]
00043e  9814              LDR      r0,[sp,#0x50]
000440  f7fffffe          BL       _DrawBitmapEx
;;;216                              pDev->XSize, pDev->YSize, bpp, BytesPerLine, pData);
;;;217                xOff += xSize;
000444  980b              LDR      r0,[sp,#0x2c]
000446  4448              ADD      r0,r0,r9
000448  900b              STR      r0,[sp,#0x2c]
;;;218                xSize = GUI_USAGE_GetNextDirty(pUsage, &xOff, yi);
00044a  f8d80008          LDR      r0,[r8,#8]
00044e  462a              MOV      r2,r5
000450  a90b              ADD      r1,sp,#0x2c
000452  6943              LDR      r3,[r0,#0x14]
000454  4640              MOV      r0,r8
000456  4798              BLX      r3
000458  4681              MOV      r9,r0
                  |L1.1114|
00045a  f1b90f00          CMP      r9,#0                 ;214
00045e  d1d8              BNE      |L1.1042|
;;;219              }
;;;220              yPrev = yAct;
000460  9810              LDR      r0,[sp,#0x40]
000462  e000              B        |L1.1126|
                  |L1.1124|
000464  e005              B        |L1.1138|
                  |L1.1126|
000466  900f              STR      r0,[sp,#0x3c]
                  |L1.1128|
000468  1c6d              ADDS     r5,r5,#1              ;198
                  |L1.1130|
00046a  980e              LDR      r0,[sp,#0x38]         ;198
00046c  4285              CMP      r5,r0                 ;198
00046e  db81              BLT      |L1.884|
;;;221            }
;;;222          }
;;;223        }
;;;224      } else {
000470  e01a              B        |L1.1192|
                  |L1.1138|
;;;225        _DrawBitmapEx(x, y, 0, 0, pDev->XSize, ySize, xMag, yMag, Alpha,
000472  f9b43006          LDRSH    r3,[r4,#6]
000476  9a11              LDR      r2,[sp,#0x44]
000478  e9dd010c          LDRD     r0,r1,[sp,#0x30]
00047c  e9cd3006          STRD     r3,r0,[sp,#0x18]
000480  e9cd1208          STRD     r1,r2,[sp,#0x20]
000484  f9b40004          LDRSH    r0,[r4,#4]
000488  9921              LDR      r1,[sp,#0x84]
00048a  e9cda702          STRD     r10,r7,[sp,#8]
00048e  e9cd1004          STRD     r1,r0,[sp,#0x10]
000492  f9b41004          LDRSH    r1,[r4,#4]
000496  980e              LDR      r0,[sp,#0x38]
000498  2300              MOVS     r3,#0
00049a  461a              MOV      r2,r3
00049c  e9cd1000          STRD     r1,r0,[sp,#0]
0004a0  4631              MOV      r1,r6
0004a2  9814              LDR      r0,[sp,#0x50]
0004a4  f7fffffe          BL       _DrawBitmapEx
                  |L1.1192|
;;;226                      pDev->XSize, pDev->YSize, bpp, BytesPerLine, pData);
;;;227      }
;;;228    }
0004a8  b017              ADD      sp,sp,#0x5c
0004aa  e8bd8ff0          POP      {r4-r11,pc}
;;;229    
                          ENDP

                  GUI_MEMDEV_WriteExAt PROC
;;;239    */
;;;240    void GUI_MEMDEV_WriteExAt(GUI_MEMDEV_Handle hMem, int x, int y, int xMag, int yMag, int Alpha) {
0004ae  e92d47ff          PUSH     {r0-r10,lr}
0004b2  4604              MOV      r4,r0
0004b4  460d              MOV      r5,r1
0004b6  4617              MOV      r7,r2
0004b8  4698              MOV      r8,r3
0004ba  e9dd9a0c          LDRD     r9,r10,[sp,#0x30]
;;;241      if (hMem) {
0004be  b1fc              CBZ      r4,|L1.1280|
;;;242        GUI_MEMDEV* pDevData;
;;;243        GUI_RECT ClipRectPrev;
;;;244        GUI_LOCK();
;;;245        pDevData = (GUI_MEMDEV*) GUI_ALLOC_h2p(hMem);
0004c0  4620              MOV      r0,r4
0004c2  f7fffffe          BL       GUI_ALLOC_h2p
0004c6  4606              MOV      r6,r0
;;;246        if (x == GUI_POS_AUTO) {
0004c8  4816              LDR      r0,|L1.1316|
0004ca  4285              CMP      r5,r0
0004cc  d103              BNE      |L1.1238|
;;;247          x = pDevData->x0;
0004ce  f9b65000          LDRSH    r5,[r6,#0]
;;;248          y = pDevData->y0;
0004d2  f9b67002          LDRSH    r7,[r6,#2]
                  |L1.1238|
;;;249        }
;;;250        ClipRectPrev = GUI_Context.ClipRect;
0004d6  4914              LDR      r1,|L1.1320|
0004d8  e9d10102          LDRD     r0,r1,[r1,#8]
0004dc  e9cd0102          STRD     r0,r1,[sp,#8]
;;;251        LCD_SetClipRectMax();
0004e0  f7fffffe          BL       LCD_SetClipRectMax
;;;252        _WriteExToActiveAt(hMem, x, y, xMag, yMag, Alpha);
0004e4  4643              MOV      r3,r8
0004e6  463a              MOV      r2,r7
0004e8  4629              MOV      r1,r5
0004ea  4620              MOV      r0,r4
0004ec  e9cd9a00          STRD     r9,r10,[sp,#0]
0004f0  f7fffffe          BL       _WriteExToActiveAt
;;;253        GUI_Context.ClipRect = ClipRectPrev;
0004f4  480c              LDR      r0,|L1.1320|
0004f6  e9dd1202          LDRD     r1,r2,[sp,#8]
0004fa  e9c01202          STRD     r1,r2,[r0,#8]
;;;254        GUI_UNLOCK();
;;;255      }
0004fe  bf00              NOP      
                  |L1.1280|
;;;256    }
000500  e8bd87ff          POP      {r0-r10,pc}
;;;257    
                          ENDP

                  GUI_MEMDEV_WriteEx PROC
;;;261    */
;;;262    void GUI_MEMDEV_WriteEx(GUI_MEMDEV_Handle hMem, int xMag, int yMag, int Alpha) {
000504  e92d41fc          PUSH     {r2-r8,lr}
000508  4607              MOV      r7,r0
00050a  460c              MOV      r4,r1
00050c  4615              MOV      r5,r2
00050e  461e              MOV      r6,r3
;;;263      GUI_MEMDEV_WriteExAt(hMem, GUI_POS_AUTO, GUI_POS_AUTO, xMag, yMag, Alpha);
000510  4623              MOV      r3,r4
000512  4a04              LDR      r2,|L1.1316|
000514  4611              MOV      r1,r2
000516  4638              MOV      r0,r7
000518  e9cd5600          STRD     r5,r6,[sp,#0]
00051c  f7fffffe          BL       GUI_MEMDEV_WriteExAt
;;;264    }
000520  e8bd81fc          POP      {r2-r8,pc}
;;;265    
                          ENDP

                  |L1.1316|
                          DCD      0xfffff001
                  |L1.1320|
                          DCD      GUI_Context
