; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\guicirc.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\guicirc.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -I.\GUI\AntiAlias -I.\GUI\Config -I.\GUI\ConvertColor -I.\GUI\ConvertMono -I.\GUI\Core -I.\GUI\Font -I.\GUI\GUI_X -I.\GUI\JPEG -I.\GUI\LCDDriver -I.\GUI\MemDev -I.\GUI\MultiLayer -I.\GUI\Widget -I.\GUI\WM -IC:\Users\Administrator\Desktop\gui\STM32·Ü¶·°å-3.98\RTE -Id:\Keil_v5\ARM\PACK\ARM\CMSIS\4.3.0\CMSIS\Include -Id:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.1.0\Device\Include -D__UVISION_VERSION=515 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\guicirc.crf GUI\Core\GUICirc.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  Draw8Point PROC
;;;46     */
;;;47     static void Draw8Point(int x0,int y0, int xoff, int yoff) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
00000a  461c              MOV      r4,r3
;;;48       LCD_HL_DrawPixel(x0+xoff,y0+yoff);
00000c  1931              ADDS     r1,r6,r4
00000e  19e8              ADDS     r0,r5,r7
000010  4bfb              LDR      r3,|L1.1024|
000012  6d9b              LDR      r3,[r3,#0x58]  ; GUI_Context
000014  685a              LDR      r2,[r3,#4]
000016  4790              BLX      r2
;;;49       LCD_HL_DrawPixel(x0-xoff,y0+yoff);
000018  1931              ADDS     r1,r6,r4
00001a  1be8              SUBS     r0,r5,r7
00001c  4bf8              LDR      r3,|L1.1024|
00001e  6d9b              LDR      r3,[r3,#0x58]  ; GUI_Context
000020  685a              LDR      r2,[r3,#4]
000022  4790              BLX      r2
;;;50       LCD_HL_DrawPixel(x0+yoff,y0+xoff);
000024  19f1              ADDS     r1,r6,r7
000026  1928              ADDS     r0,r5,r4
000028  4bf5              LDR      r3,|L1.1024|
00002a  6d9b              LDR      r3,[r3,#0x58]  ; GUI_Context
00002c  685a              LDR      r2,[r3,#4]
00002e  4790              BLX      r2
;;;51       LCD_HL_DrawPixel(x0+yoff,y0-xoff);
000030  1bf1              SUBS     r1,r6,r7
000032  1928              ADDS     r0,r5,r4
000034  4bf2              LDR      r3,|L1.1024|
000036  6d9b              LDR      r3,[r3,#0x58]  ; GUI_Context
000038  685a              LDR      r2,[r3,#4]
00003a  4790              BLX      r2
;;;52       if (yoff) {
00003c  b1bc              CBZ      r4,|L1.110|
;;;53         LCD_HL_DrawPixel(x0+xoff,y0-yoff);
00003e  1b31              SUBS     r1,r6,r4
000040  19e8              ADDS     r0,r5,r7
000042  4bef              LDR      r3,|L1.1024|
000044  6d9b              LDR      r3,[r3,#0x58]  ; GUI_Context
000046  685a              LDR      r2,[r3,#4]
000048  4790              BLX      r2
;;;54         LCD_HL_DrawPixel(x0-xoff,y0-yoff);
00004a  1b31              SUBS     r1,r6,r4
00004c  1be8              SUBS     r0,r5,r7
00004e  4bec              LDR      r3,|L1.1024|
000050  6d9b              LDR      r3,[r3,#0x58]  ; GUI_Context
000052  685a              LDR      r2,[r3,#4]
000054  4790              BLX      r2
;;;55         LCD_HL_DrawPixel(x0-yoff,y0+xoff);
000056  19f1              ADDS     r1,r6,r7
000058  1b28              SUBS     r0,r5,r4
00005a  4be9              LDR      r3,|L1.1024|
00005c  6d9b              LDR      r3,[r3,#0x58]  ; GUI_Context
00005e  685a              LDR      r2,[r3,#4]
000060  4790              BLX      r2
;;;56         LCD_HL_DrawPixel(x0-yoff,y0-xoff);
000062  1bf1              SUBS     r1,r6,r7
000064  1b28              SUBS     r0,r5,r4
000066  4be6              LDR      r3,|L1.1024|
000068  6d9b              LDR      r3,[r3,#0x58]  ; GUI_Context
00006a  685a              LDR      r2,[r3,#4]
00006c  4790              BLX      r2
                  |L1.110|
;;;57       }
;;;58     }
00006e  e8bd81f0          POP      {r4-r8,pc}
;;;59     
                          ENDP

                  GL_DrawCircle PROC
;;;69     */
;;;70     void GL_DrawCircle(int x0, int y0, int r) {
000072  e92d47f0          PUSH     {r4-r10,lr}
000076  4607              MOV      r7,r0
000078  4688              MOV      r8,r1
00007a  4614              MOV      r4,r2
;;;71       I32 i;
;;;72       int imax = ((I32)((I32)r*707))/1000+1;
00007c  f24020c3          MOV      r0,#0x2c3
000080  4360              MULS     r0,r4,r0
000082  f44f717a          MOV      r1,#0x3e8
000086  fb90f0f1          SDIV     r0,r0,r1
00008a  f1000901          ADD      r9,r0,#1
;;;73       I32 sqmax = (I32)r*(I32)r+(I32)r/2;
00008e  eb0471d4          ADD      r1,r4,r4,LSR #31
000092  1049              ASRS     r1,r1,#1
000094  fb041a04          MLA      r10,r4,r4,r1
;;;74       I32 y=r;
000098  4626              MOV      r6,r4
;;;75       Draw8Point(x0,y0,r,0);
00009a  2300              MOVS     r3,#0
00009c  4622              MOV      r2,r4
00009e  4641              MOV      r1,r8
0000a0  4638              MOV      r0,r7
0000a2  f7fffffe          BL       Draw8Point
;;;76       for (i=1; i<= imax; i++) {
0000a6  2501              MOVS     r5,#1
0000a8  e013              B        |L1.210|
                  |L1.170|
;;;77         if ((i*i+y*y) >sqmax) {
0000aa  fb05f005          MUL      r0,r5,r5
0000ae  fb060006          MLA      r0,r6,r6,r0
0000b2  4550              CMP      r0,r10
0000b4  dd06              BLE      |L1.196|
;;;78           Draw8Point(x0,y0,i,y);
0000b6  4633              MOV      r3,r6
0000b8  462a              MOV      r2,r5
0000ba  4641              MOV      r1,r8
0000bc  4638              MOV      r0,r7
0000be  f7fffffe          BL       Draw8Point
;;;79           y--;
0000c2  1e76              SUBS     r6,r6,#1
                  |L1.196|
;;;80         }
;;;81         Draw8Point(x0,y0,i,y);
0000c4  4633              MOV      r3,r6
0000c6  462a              MOV      r2,r5
0000c8  4641              MOV      r1,r8
0000ca  4638              MOV      r0,r7
0000cc  f7fffffe          BL       Draw8Point
0000d0  1c6d              ADDS     r5,r5,#1              ;76
                  |L1.210|
0000d2  454d              CMP      r5,r9                 ;76
0000d4  dde9              BLE      |L1.170|
;;;82       }
;;;83     }
0000d6  e8bd87f0          POP      {r4-r10,pc}
;;;84     
                          ENDP

                  GUI_DrawCircle PROC
;;;88     */
;;;89     void GUI_DrawCircle(int x0, int y0, int r) {
0000da  b57c              PUSH     {r2-r6,lr}
0000dc  4606              MOV      r6,r0
0000de  460d              MOV      r5,r1
0000e0  4614              MOV      r4,r2
;;;90       #if (GUI_WINSUPPORT)
;;;91         GUI_RECT Rect;
;;;92       #endif
;;;93       GUI_LOCK();
;;;94       #if (GUI_WINSUPPORT)
;;;95         WM_ADDORG(x0,y0);
0000e2  48c7              LDR      r0,|L1.1024|
0000e4  6c00              LDR      r0,[r0,#0x40]  ; GUI_Context
0000e6  4406              ADD      r6,r6,r0
0000e8  48c5              LDR      r0,|L1.1024|
0000ea  6c40              LDR      r0,[r0,#0x44]  ; GUI_Context
0000ec  4405              ADD      r5,r5,r0
;;;96         Rect.x0 = x0-r;
0000ee  1b30              SUBS     r0,r6,r4
0000f0  b200              SXTH     r0,r0
0000f2  f8ad0000          STRH     r0,[sp,#0]
;;;97         Rect.x1 = x0+r;
0000f6  1930              ADDS     r0,r6,r4
0000f8  b200              SXTH     r0,r0
0000fa  f8ad0004          STRH     r0,[sp,#4]
;;;98         Rect.y0 = y0-r;
0000fe  1b28              SUBS     r0,r5,r4
000100  b200              SXTH     r0,r0
000102  f8ad0002          STRH     r0,[sp,#2]
;;;99         Rect.y1 = y0+r;
000106  1928              ADDS     r0,r5,r4
000108  b200              SXTH     r0,r0
00010a  f8ad0006          STRH     r0,[sp,#6]
;;;100        WM_ITERATE_START(&Rect); {
00010e  4668              MOV      r0,sp
000110  f7fffffe          BL       WM__InitIVRSearch
000114  b148              CBZ      r0,|L1.298|
000116  bf00              NOP      
                  |L1.280|
;;;101      #endif
;;;102        GL_DrawCircle( x0, y0, r);
000118  4622              MOV      r2,r4
00011a  4629              MOV      r1,r5
00011c  4630              MOV      r0,r6
00011e  f7fffffe          BL       GL_DrawCircle
;;;103      #if (GUI_WINSUPPORT)
;;;104        } WM_ITERATE_END();
000122  f7fffffe          BL       WM__GetNextIVR
000126  2800              CMP      r0,#0
000128  d1f6              BNE      |L1.280|
                  |L1.298|
;;;105      #endif
;;;106      GUI_UNLOCK();
;;;107    }
00012a  bd7c              POP      {r2-r6,pc}
;;;108    
                          ENDP

                  GL_FillCircle PROC
;;;112    */
;;;113    void GL_FillCircle(int x0, int y0, int r) {
00012c  e92d47f0          PUSH     {r4-r10,lr}
000130  4605              MOV      r5,r0
000132  4688              MOV      r8,r1
000134  4616              MOV      r6,r2
;;;114      I32 i;
;;;115      int imax = ((I32)((I32)r*707))/1000+1;
000136  f24020c3          MOV      r0,#0x2c3
00013a  4370              MULS     r0,r6,r0
00013c  f44f717a          MOV      r1,#0x3e8
000140  fb90f0f1          SDIV     r0,r0,r1
000144  f1000901          ADD      r9,r0,#1
;;;116      I32 sqmax = (I32)r*(I32)r+(I32)r/2;
000148  eb0671d6          ADD      r1,r6,r6,LSR #31
00014c  1049              ASRS     r1,r1,#1
00014e  fb061a06          MLA      r10,r6,r6,r1
;;;117      I32 x=r;
000152  4634              MOV      r4,r6
;;;118      LCD_HL_DrawHLine(x0-r,y0,x0+r);
000154  19aa              ADDS     r2,r5,r6
000156  1ba8              SUBS     r0,r5,r6
000158  49a9              LDR      r1,|L1.1024|
00015a  6d89              LDR      r1,[r1,#0x58]  ; GUI_Context
00015c  680b              LDR      r3,[r1,#0]
00015e  4641              MOV      r1,r8
000160  4798              BLX      r3
;;;119      for (i=1; i<= imax; i++) {
000162  2701              MOVS     r7,#1
000164  e041              B        |L1.490|
                  |L1.358|
;;;120        if ((i*i+x*x) >sqmax) {
000166  fb07f007          MUL      r0,r7,r7
00016a  fb040004          MLA      r0,r4,r4,r0
00016e  4550              CMP      r0,r10
000170  dd24              BLE      |L1.444|
;;;121          /* draw lines from outside */
;;;122          if (x>imax) {
000172  454c              CMP      r4,r9
000174  dd21              BLE      |L1.442|
;;;123            LCD_HL_DrawHLine (x0-i+1,y0+x, x0+i-1);
000176  eb050c07          ADD      r12,r5,r7
00017a  f1ac0201          SUB      r2,r12,#1
00017e  eb080104          ADD      r1,r8,r4
000182  eba50c07          SUB      r12,r5,r7
000186  f10c0001          ADD      r0,r12,#1
00018a  f8dfc274          LDR      r12,|L1.1024|
00018e  f8dcc058          LDR      r12,[r12,#0x58]  ; GUI_Context
000192  f8dc3000          LDR      r3,[r12,#0]
000196  4798              BLX      r3
;;;124            LCD_HL_DrawHLine (x0-i+1,y0-x, x0+i-1);
000198  eb050c07          ADD      r12,r5,r7
00019c  f1ac0201          SUB      r2,r12,#1
0001a0  eba80104          SUB      r1,r8,r4
0001a4  eba50c07          SUB      r12,r5,r7
0001a8  f10c0001          ADD      r0,r12,#1
0001ac  f8dfc250          LDR      r12,|L1.1024|
0001b0  f8dcc058          LDR      r12,[r12,#0x58]  ; GUI_Context
0001b4  f8dc3000          LDR      r3,[r12,#0]
0001b8  4798              BLX      r3
                  |L1.442|
;;;125          }
;;;126          x--;
0001ba  1e64              SUBS     r4,r4,#1
                  |L1.444|
;;;127        }
;;;128        /* draw lines from inside (center) */
;;;129        LCD_HL_DrawHLine(x0-x,y0+i, x0+x);
0001bc  192a              ADDS     r2,r5,r4
0001be  eb080107          ADD      r1,r8,r7
0001c2  1b28              SUBS     r0,r5,r4
0001c4  f8dfc238          LDR      r12,|L1.1024|
0001c8  f8dcc058          LDR      r12,[r12,#0x58]  ; GUI_Context
0001cc  f8dc3000          LDR      r3,[r12,#0]
0001d0  4798              BLX      r3
;;;130        LCD_HL_DrawHLine(x0-x,y0-i, x0+x);
0001d2  192a              ADDS     r2,r5,r4
0001d4  eba80107          SUB      r1,r8,r7
0001d8  1b28              SUBS     r0,r5,r4
0001da  f8dfc224          LDR      r12,|L1.1024|
0001de  f8dcc058          LDR      r12,[r12,#0x58]  ; GUI_Context
0001e2  f8dc3000          LDR      r3,[r12,#0]
0001e6  4798              BLX      r3
0001e8  1c7f              ADDS     r7,r7,#1              ;119
                  |L1.490|
0001ea  454f              CMP      r7,r9                 ;119
0001ec  ddbb              BLE      |L1.358|
;;;131      }
;;;132    }
0001ee  e8bd87f0          POP      {r4-r10,pc}
;;;133    
                          ENDP

                  GUI_FillCircle PROC
;;;137    */
;;;138    void GUI_FillCircle(int x0, int y0, int r) {
0001f2  b570              PUSH     {r4-r6,lr}
0001f4  4604              MOV      r4,r0
0001f6  460d              MOV      r5,r1
0001f8  4616              MOV      r6,r2
;;;139      GUI_LOCK();
;;;140      #if (GUI_WINSUPPORT)
;;;141        WM_ADDORG(x0,y0);
0001fa  4881              LDR      r0,|L1.1024|
0001fc  6c00              LDR      r0,[r0,#0x40]  ; GUI_Context
0001fe  4404              ADD      r4,r4,r0
000200  487f              LDR      r0,|L1.1024|
000202  6c40              LDR      r0,[r0,#0x44]  ; GUI_Context
000204  4405              ADD      r5,r5,r0
;;;142        WM_ITERATE_START(NULL); {
000206  2000              MOVS     r0,#0
000208  f7fffffe          BL       WM__InitIVRSearch
00020c  b148              CBZ      r0,|L1.546|
00020e  bf00              NOP      
                  |L1.528|
;;;143      #endif
;;;144      GL_FillCircle(x0,y0,r);
000210  4632              MOV      r2,r6
000212  4629              MOV      r1,r5
000214  4620              MOV      r0,r4
000216  f7fffffe          BL       GL_FillCircle
;;;145      #if (GUI_WINSUPPORT)
;;;146        } WM_ITERATE_END();
00021a  f7fffffe          BL       WM__GetNextIVR
00021e  2800              CMP      r0,#0
000220  d1f6              BNE      |L1.528|
                  |L1.546|
;;;147      #endif
;;;148      GUI_UNLOCK();
;;;149    }
000222  bd70              POP      {r4-r6,pc}
;;;150    
                          ENDP

                  GL_FillEllipse PROC
;;;171    */
;;;172    void GL_FillEllipse(int x0, int y0, int rx, int ry) {
000224  e92d4ffe          PUSH     {r1-r11,lr}
000228  4680              MOV      r8,r0
00022a  4689              MOV      r9,r1
00022c  4616              MOV      r6,r2
00022e  461c              MOV      r4,r3
;;;173      I32 OutConst, Sum, SumY;
;;;174      int x,y;
;;;175      U32 _rx = rx;
000230  46b2              MOV      r10,r6
;;;176      U32 _ry = ry;
000232  46a3              MOV      r11,r4
;;;177      OutConst = _rx*_rx*_ry*_ry  /* Constant as explaint above */
000234  fb0af00a          MUL      r0,r10,r10
000238  fb00f00b          MUL      r0,r0,r11
00023c  fb00f10b          MUL      r1,r0,r11
000240  fb0af00a          MUL      r0,r10,r10
000244  fb00f00b          MUL      r0,r0,r11
000248  eb010050          ADD      r0,r1,r0,LSR #1
00024c  9002              STR      r0,[sp,#8]
;;;178                +(_rx*_rx*_ry>>1); /* To compensate for rounding */
;;;179      x = rx;
00024e  4635              MOV      r5,r6
;;;180      for (y=0; y<=ry; y++) {
000250  2700              MOVS     r7,#0
000252  e036              B        |L1.706|
                  |L1.596|
;;;181        SumY =((I32)(rx*rx))*((I32)(y*y)); /* Does not change in loop */
000254  fb06f006          MUL      r0,r6,r6
000258  fb07f107          MUL      r1,r7,r7
00025c  4348              MULS     r0,r1,r0
00025e  9000              STR      r0,[sp,#0]
;;;182        while (Sum = SumY + ((I32)(ry*ry))*((I32)(x*x)),
000260  e000              B        |L1.612|
                  |L1.610|
;;;183               (x>0) && (Sum>OutConst))
;;;184        {
;;;185          x--;
000262  1e6d              SUBS     r5,r5,#1
                  |L1.612|
000264  fb04f004          MUL      r0,r4,r4              ;182
000268  fb05f105          MUL      r1,r5,r5              ;182
00026c  9a00              LDR      r2,[sp,#0]            ;182
00026e  fb002001          MLA      r0,r0,r1,r2           ;182
000272  9001              STR      r0,[sp,#4]            ;182
000274  2d00              CMP      r5,#0                 ;183
000276  dd05              BLE      |L1.644|
000278  e9dd0101          LDRD     r0,r1,[sp,#4]         ;183
00027c  4288              CMP      r0,r1                 ;183
00027e  dd01              BLE      |L1.644|
000280  2001              MOVS     r0,#1                 ;183
000282  e000              B        |L1.646|
                  |L1.644|
000284  2000              MOVS     r0,#0                 ;183
                  |L1.646|
000286  2800              CMP      r0,#0                 ;183
000288  d1eb              BNE      |L1.610|
;;;186        }
;;;187        LCD_HL_DrawHLine(x0-x, y0+y, x0+x);
00028a  eb080205          ADD      r2,r8,r5
00028e  eb090107          ADD      r1,r9,r7
000292  eba80005          SUB      r0,r8,r5
000296  f8dfc168          LDR      r12,|L1.1024|
00029a  f8dcc058          LDR      r12,[r12,#0x58]  ; GUI_Context
00029e  f8dc3000          LDR      r3,[r12,#0]
0002a2  4798              BLX      r3
;;;188        if (y)
0002a4  b167              CBZ      r7,|L1.704|
;;;189          LCD_HL_DrawHLine(x0-x, y0-y, x0+x);
0002a6  eb080205          ADD      r2,r8,r5
0002aa  eba90107          SUB      r1,r9,r7
0002ae  eba80005          SUB      r0,r8,r5
0002b2  f8dfc14c          LDR      r12,|L1.1024|
0002b6  f8dcc058          LDR      r12,[r12,#0x58]  ; GUI_Context
0002ba  f8dc3000          LDR      r3,[r12,#0]
0002be  4798              BLX      r3
                  |L1.704|
0002c0  1c7f              ADDS     r7,r7,#1              ;180
                  |L1.706|
0002c2  42a7              CMP      r7,r4                 ;180
0002c4  ddc6              BLE      |L1.596|
;;;190      }
;;;191    }
0002c6  e8bd8ffe          POP      {r1-r11,pc}
;;;192    
                          ENDP

                  GUI_FillEllipse PROC
;;;196    */
;;;197    void GUI_FillEllipse(int x0, int y0, int rx, int ry) {
0002ca  e92d41fc          PUSH     {r2-r8,lr}
0002ce  4604              MOV      r4,r0
0002d0  460d              MOV      r5,r1
0002d2  4616              MOV      r6,r2
0002d4  461f              MOV      r7,r3
;;;198      #if (GUI_WINSUPPORT)
;;;199        GUI_RECT r;
;;;200      #endif
;;;201      GUI_LOCK();
;;;202      #if (GUI_WINSUPPORT)
;;;203        WM_ADDORG(x0,y0);
0002d6  484a              LDR      r0,|L1.1024|
0002d8  6c00              LDR      r0,[r0,#0x40]  ; GUI_Context
0002da  4404              ADD      r4,r4,r0
0002dc  4848              LDR      r0,|L1.1024|
0002de  6c40              LDR      r0,[r0,#0x44]  ; GUI_Context
0002e0  4405              ADD      r5,r5,r0
;;;204        /* Calc rectangle in order to avoid unnecessary drawing ops. */
;;;205        r.x0 = x0-rx; r.x1 = x0+rx; r.y0 = y0-ry; r.y1 = y0+ry;
0002e2  1ba0              SUBS     r0,r4,r6
0002e4  b200              SXTH     r0,r0
0002e6  f8ad0000          STRH     r0,[sp,#0]
0002ea  19a0              ADDS     r0,r4,r6
0002ec  b200              SXTH     r0,r0
0002ee  f8ad0004          STRH     r0,[sp,#4]
0002f2  1be8              SUBS     r0,r5,r7
0002f4  b200              SXTH     r0,r0
0002f6  f8ad0002          STRH     r0,[sp,#2]
0002fa  19e8              ADDS     r0,r5,r7
0002fc  b200              SXTH     r0,r0
0002fe  f8ad0006          STRH     r0,[sp,#6]
;;;206        WM_ITERATE_START(&r); {
000302  4668              MOV      r0,sp
000304  f7fffffe          BL       WM__InitIVRSearch
000308  b150              CBZ      r0,|L1.800|
00030a  bf00              NOP      
                  |L1.780|
;;;207      #endif
;;;208      GL_FillEllipse (x0,y0, rx, ry);
00030c  463b              MOV      r3,r7
00030e  4632              MOV      r2,r6
000310  4629              MOV      r1,r5
000312  4620              MOV      r0,r4
000314  f7fffffe          BL       GL_FillEllipse
;;;209      #if (GUI_WINSUPPORT)
;;;210        } WM_ITERATE_END();
000318  f7fffffe          BL       WM__GetNextIVR
00031c  2800              CMP      r0,#0
00031e  d1f5              BNE      |L1.780|
                  |L1.800|
;;;211      #endif
;;;212      GUI_UNLOCK();
;;;213    }
000320  e8bd81fc          POP      {r2-r8,pc}
;;;214    
                          ENDP

                  GL_DrawEllipse PROC
;;;218    */
;;;219    void GL_DrawEllipse(int x0, int y0, int rx, int ry) {
000324  e92d5fff          PUSH     {r0-r12,lr}
000328  4605              MOV      r5,r0
00032a  460e              MOV      r6,r1
00032c  4691              MOV      r9,r2
00032e  461f              MOV      r7,r3
;;;220      I32 OutConst, Sum, SumY;
;;;221      int x,y;
;;;222      int xOld;
;;;223      U32 _rx = rx;
000330  46cb              MOV      r11,r9
;;;224      U32 _ry = ry;
000332  9700              STR      r7,[sp,#0]
;;;225      OutConst = _rx*_rx*_ry*_ry  /* Constant as explaint above */
000334  fb0bf00b          MUL      r0,r11,r11
000338  9f00              LDR      r7,[sp,#0]
00033a  4378              MULS     r0,r7,r0
00033c  fb00f107          MUL      r1,r0,r7
000340  fb0bf00b          MUL      r0,r11,r11
000344  4378              MULS     r0,r7,r0
000346  eb010050          ADD      r0,r1,r0,LSR #1
00034a  9003              STR      r0,[sp,#0xc]
;;;226                +(_rx*_rx*_ry>>1); /* To compensate for rounding */
;;;227      xOld = x = rx;
00034c  46c8              MOV      r8,r9
00034e  46ca              MOV      r10,r9
;;;228      for (y=0; y<=ry; y++) {
000350  2400              MOVS     r4,#0
000352  e050              B        |L1.1014|
                  |L1.852|
;;;229        if (y==ry) {
000354  42bc              CMP      r4,r7
000356  d102              BNE      |L1.862|
;;;230          x=0;
000358  f04f0800          MOV      r8,#0
00035c  e01c              B        |L1.920|
                  |L1.862|
;;;231        } else {
;;;232          SumY =((I32)(rx*rx))*((I32)(y*y)); /* Does not change in loop */
00035e  fb09f009          MUL      r0,r9,r9
000362  fb04f104          MUL      r1,r4,r4
000366  4348              MULS     r0,r1,r0
000368  9001              STR      r0,[sp,#4]
;;;233          while (Sum = SumY + ((I32)(ry*ry))*((I32)(x*x)),
00036a  e001              B        |L1.880|
                  |L1.876|
;;;234                 (x>0) && (Sum>OutConst)) x--;
00036c  f1a80801          SUB      r8,r8,#1
                  |L1.880|
000370  fb07f007          MUL      r0,r7,r7              ;233
000374  fb08f108          MUL      r1,r8,r8              ;233
000378  9a01              LDR      r2,[sp,#4]            ;233
00037a  fb002001          MLA      r0,r0,r1,r2           ;233
00037e  9002              STR      r0,[sp,#8]            ;233
000380  f1b80f00          CMP      r8,#0
000384  dd05              BLE      |L1.914|
000386  e9dd0102          LDRD     r0,r1,[sp,#8]
00038a  4288              CMP      r0,r1
00038c  dd01              BLE      |L1.914|
00038e  2001              MOVS     r0,#1
000390  e000              B        |L1.916|
                  |L1.914|
000392  2000              MOVS     r0,#0
                  |L1.916|
000394  2800              CMP      r0,#0
000396  d1e9              BNE      |L1.876|
                  |L1.920|
;;;235        }
;;;236        /* Since we draw lines, we can not draw on the first
;;;237            iteration
;;;238        */
;;;239        if (y) {
000398  b35c              CBZ      r4,|L1.1010|
;;;240          GL_DrawLine1(x0-xOld,y0-y+1,x0-x,y0-y);
00039a  1b33              SUBS     r3,r6,r4
00039c  eba50208          SUB      r2,r5,r8
0003a0  eba60c04          SUB      r12,r6,r4
0003a4  f10c0101          ADD      r1,r12,#1
0003a8  eba5000a          SUB      r0,r5,r10
0003ac  f7fffffe          BL       GL_DrawLine1
;;;241          GL_DrawLine1(x0-xOld,y0+y-1,x0-x,y0+y);
0003b0  1933              ADDS     r3,r6,r4
0003b2  eba50208          SUB      r2,r5,r8
0003b6  eb060c04          ADD      r12,r6,r4
0003ba  f1ac0101          SUB      r1,r12,#1
0003be  eba5000a          SUB      r0,r5,r10
0003c2  f7fffffe          BL       GL_DrawLine1
;;;242          GL_DrawLine1(x0+xOld,y0-y+1,x0+x,y0-y);
0003c6  1b33              SUBS     r3,r6,r4
0003c8  eb050208          ADD      r2,r5,r8
0003cc  eba60c04          SUB      r12,r6,r4
0003d0  f10c0101          ADD      r1,r12,#1
0003d4  eb05000a          ADD      r0,r5,r10
0003d8  f7fffffe          BL       GL_DrawLine1
;;;243          GL_DrawLine1(x0+xOld,y0+y-1,x0+x,y0+y);
0003dc  1933              ADDS     r3,r6,r4
0003de  eb050208          ADD      r2,r5,r8
0003e2  eb060c04          ADD      r12,r6,r4
0003e6  f1ac0101          SUB      r1,r12,#1
0003ea  eb05000a          ADD      r0,r5,r10
0003ee  f7fffffe          BL       GL_DrawLine1
                  |L1.1010|
;;;244        }
;;;245        xOld = x;
0003f2  46c2              MOV      r10,r8
0003f4  1c64              ADDS     r4,r4,#1              ;228
                  |L1.1014|
0003f6  42bc              CMP      r4,r7                 ;228
0003f8  ddac              BLE      |L1.852|
;;;246      }
;;;247    }
0003fa  e8bd9fff          POP      {r0-r12,pc}
0003fe  0000              DCW      0x0000
                  |L1.1024|
                          DCD      GUI_Context
                          ENDP

                  GUI_DrawEllipse PROC
;;;252    */
;;;253    void GUI_DrawEllipse(int x0, int y0, int rx, int ry) {
000404  e92d41fc          PUSH     {r2-r8,lr}
000408  4604              MOV      r4,r0
00040a  460d              MOV      r5,r1
00040c  4616              MOV      r6,r2
00040e  461f              MOV      r7,r3
;;;254      #if (GUI_WINSUPPORT)
;;;255        GUI_RECT r;
;;;256      #endif
;;;257      GUI_LOCK();
;;;258      #if (GUI_WINSUPPORT)
;;;259        WM_ADDORG(x0,y0);
000410  4813              LDR      r0,|L1.1120|
000412  6c00              LDR      r0,[r0,#0x40]  ; GUI_Context
000414  4404              ADD      r4,r4,r0
000416  4812              LDR      r0,|L1.1120|
000418  6c40              LDR      r0,[r0,#0x44]  ; GUI_Context
00041a  4405              ADD      r5,r5,r0
;;;260      /* Calc rectangle in order to avoid unnecessary drawing ops. */
;;;261        r.x0 = x0-rx; r.x1 = x0+rx; r.y0 = y0-ry; r.y1 = y0+ry;
00041c  1ba0              SUBS     r0,r4,r6
00041e  b200              SXTH     r0,r0
000420  f8ad0000          STRH     r0,[sp,#0]
000424  19a0              ADDS     r0,r4,r6
000426  b200              SXTH     r0,r0
000428  f8ad0004          STRH     r0,[sp,#4]
00042c  1be8              SUBS     r0,r5,r7
00042e  b200              SXTH     r0,r0
000430  f8ad0002          STRH     r0,[sp,#2]
000434  19e8              ADDS     r0,r5,r7
000436  b200              SXTH     r0,r0
000438  f8ad0006          STRH     r0,[sp,#6]
;;;262        WM_ITERATE_START(&r); {
00043c  4668              MOV      r0,sp
00043e  f7fffffe          BL       WM__InitIVRSearch
000442  b150              CBZ      r0,|L1.1114|
000444  bf00              NOP      
                  |L1.1094|
;;;263      #endif
;;;264      GL_DrawEllipse(x0, y0, rx, ry);
000446  463b              MOV      r3,r7
000448  4632              MOV      r2,r6
00044a  4629              MOV      r1,r5
00044c  4620              MOV      r0,r4
00044e  f7fffffe          BL       GL_DrawEllipse
;;;265      #if (GUI_WINSUPPORT)
;;;266        } WM_ITERATE_END();
000452  f7fffffe          BL       WM__GetNextIVR
000456  2800              CMP      r0,#0
000458  d1f5              BNE      |L1.1094|
                  |L1.1114|
;;;267      #endif
;;;268      GUI_UNLOCK();
;;;269    }
00045a  e8bd81fc          POP      {r2-r8,pc}
;;;270    
                          ENDP

00045e  0000              DCW      0x0000
                  |L1.1120|
                          DCD      GUI_Context
