; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\jfdctfst.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\jfdctfst.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -I.\GUI\AntiAlias -I.\GUI\Config -I.\GUI\ConvertColor -I.\GUI\ConvertMono -I.\GUI\Core -I.\GUI\Font -I.\GUI\GUI_X -I.\GUI\JPEG -I.\GUI\LCDDriver -I.\GUI\MemDev -I.\GUI\MultiLayer -I.\GUI\Widget -I.\GUI\WM -IC:\Users\Administrator\Desktop\gui\STM32·Ü¶·°å-3.98\RTE -Id:\Keil_v5\ARM\PACK\ARM\CMSIS\4.3.0\CMSIS\Include -Id:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.1.0\Device\Include -D__UVISION_VERSION=515 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\jfdctfst.crf GUI\JPEG\jfdctfst.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=1

                  jpeg_fdct_ifast PROC
;;;113    GLOBAL(void)
;;;114    jpeg_fdct_ifast (DCTELEM * data)
000000  e92d4ff1          PUSH     {r0,r4-r11,lr}
;;;115    {
000004  b089              SUB      sp,sp,#0x24
;;;116      DCTELEM tmp0, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7;
;;;117      DCTELEM tmp10, tmp11, tmp12, tmp13;
;;;118      DCTELEM z1, z2, z3, z4, z5, z11, z13;
;;;119      DCTELEM *dataptr;
;;;120      int ctr;
;;;121      SHIFT_TEMPS
;;;122    
;;;123      /* Pass 1: process rows. */
;;;124    
;;;125      dataptr = data;
000006  9809              LDR      r0,[sp,#0x24]
;;;126      for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
000008  f04f0b07          MOV      r11,#7
00000c  f8cdb000          STR      r11,[sp,#0]
000010  e0ae              B        |L1.368|
                  |L1.18|
;;;127        tmp0 = dataptr[0] + dataptr[7];
000012  f8d0e01c          LDR      lr,[r0,#0x1c]
000016  f8d0b000          LDR      r11,[r0,#0]
00001a  eb0b040e          ADD      r4,r11,lr
;;;128        tmp7 = dataptr[0] - dataptr[7];
00001e  f8d0e01c          LDR      lr,[r0,#0x1c]
000022  f8d0b000          LDR      r11,[r0,#0]
000026  ebab010e          SUB      r1,r11,lr
;;;129        tmp1 = dataptr[1] + dataptr[6];
00002a  f8d0e018          LDR      lr,[r0,#0x18]
00002e  f8d0b004          LDR      r11,[r0,#4]
000032  eb0b050e          ADD      r5,r11,lr
;;;130        tmp6 = dataptr[1] - dataptr[6];
000036  f8d0e018          LDR      lr,[r0,#0x18]
00003a  f8d0b004          LDR      r11,[r0,#4]
00003e  ebab080e          SUB      r8,r11,lr
;;;131        tmp2 = dataptr[2] + dataptr[5];
000042  f8d0e014          LDR      lr,[r0,#0x14]
000046  f8d0b008          LDR      r11,[r0,#8]
00004a  eb0b060e          ADD      r6,r11,lr
;;;132        tmp5 = dataptr[2] - dataptr[5];
00004e  f8d0e014          LDR      lr,[r0,#0x14]
000052  f8d0b008          LDR      r11,[r0,#8]
000056  ebab0c0e          SUB      r12,r11,lr
;;;133        tmp3 = dataptr[3] + dataptr[4];
00005a  e9d0be03          LDRD     r11,lr,[r0,#0xc]
00005e  eb0b070e          ADD      r7,r11,lr
;;;134        tmp4 = dataptr[3] - dataptr[4];
000062  e9d0be03          LDRD     r11,lr,[r0,#0xc]
000066  ebab0b0e          SUB      r11,r11,lr
00006a  f8cdb020          STR      r11,[sp,#0x20]
;;;135        
;;;136        /* Even part */
;;;137        
;;;138        tmp10 = tmp0 + tmp3;	/* phase 2 */
00006e  19e2              ADDS     r2,r4,r7
;;;139        tmp13 = tmp0 - tmp3;
000070  1be3              SUBS     r3,r4,r7
;;;140        tmp11 = tmp1 + tmp2;
000072  eb050906          ADD      r9,r5,r6
;;;141        tmp12 = tmp1 - tmp2;
000076  eba50a06          SUB      r10,r5,r6
;;;142        
;;;143        dataptr[0] = tmp10 + tmp11; /* phase 3 */
00007a  eb020b09          ADD      r11,r2,r9
00007e  f8c0b000          STR      r11,[r0,#0]
;;;144        dataptr[4] = tmp10 - tmp11;
000082  eba20b09          SUB      r11,r2,r9
000086  f8c0b010          STR      r11,[r0,#0x10]
;;;145        
;;;146        z1 = MULTIPLY(tmp12 + tmp13, FIX_0_707106781); /* c4 */
00008a  eb0a0b03          ADD      r11,r10,r3
00008e  f04f0eb5          MOV      lr,#0xb5
000092  fb0bfb0e          MUL      r11,r11,lr
000096  ea4f2b2b          ASR      r11,r11,#8
00009a  f8cdb01c          STR      r11,[sp,#0x1c]
;;;147        dataptr[2] = tmp13 + z1;	/* phase 5 */
00009e  f8ddb01c          LDR      r11,[sp,#0x1c]
0000a2  449b              ADD      r11,r11,r3
0000a4  f8c0b008          STR      r11,[r0,#8]
;;;148        dataptr[6] = tmp13 - z1;
0000a8  f8ddb01c          LDR      r11,[sp,#0x1c]
0000ac  eba30b0b          SUB      r11,r3,r11
0000b0  f8c0b018          STR      r11,[r0,#0x18]
;;;149        
;;;150        /* Odd part */
;;;151    
;;;152        tmp10 = tmp4 + tmp5;	/* phase 2 */
0000b4  f8ddb020          LDR      r11,[sp,#0x20]
0000b8  eb0b020c          ADD      r2,r11,r12
;;;153        tmp11 = tmp5 + tmp6;
0000bc  eb0c0908          ADD      r9,r12,r8
;;;154        tmp12 = tmp6 + tmp7;
0000c0  eb080a01          ADD      r10,r8,r1
;;;155    
;;;156        /* The rotator is modified from fig 4-8 to avoid extra negations. */
;;;157        z5 = MULTIPLY(tmp10 - tmp12, FIX_0_382683433); /* c6 */
0000c4  eba20b0a          SUB      r11,r2,r10
0000c8  f04f0e62          MOV      lr,#0x62
0000cc  fb0bfb0e          MUL      r11,r11,lr
0000d0  ea4f2b2b          ASR      r11,r11,#8
0000d4  f8cdb00c          STR      r11,[sp,#0xc]
;;;158        z2 = MULTIPLY(tmp10, FIX_0_541196100) + z5; /* c2-c6 */
0000d8  f04f0b8b          MOV      r11,#0x8b
0000dc  fb02fe0b          MUL      lr,r2,r11
0000e0  f8ddb00c          LDR      r11,[sp,#0xc]
0000e4  eb0b2b2e          ADD      r11,r11,lr,ASR #8
0000e8  f8cdb018          STR      r11,[sp,#0x18]
;;;159        z4 = MULTIPLY(tmp12, FIX_1_306562965) + z5; /* c2+c6 */
0000ec  f44f7ba7          MOV      r11,#0x14e
0000f0  fb0afe0b          MUL      lr,r10,r11
0000f4  f8ddb00c          LDR      r11,[sp,#0xc]
0000f8  eb0b2b2e          ADD      r11,r11,lr,ASR #8
0000fc  f8cdb010          STR      r11,[sp,#0x10]
;;;160        z3 = MULTIPLY(tmp11, FIX_0_707106781); /* c4 */
000100  f04f0bb5          MOV      r11,#0xb5
000104  fb09fb0b          MUL      r11,r9,r11
000108  ea4f2b2b          ASR      r11,r11,#8
00010c  f8cdb014          STR      r11,[sp,#0x14]
;;;161    
;;;162        z11 = tmp7 + z3;		/* phase 5 */
000110  f8ddb014          LDR      r11,[sp,#0x14]
000114  448b              ADD      r11,r11,r1
000116  f8cdb008          STR      r11,[sp,#8]
;;;163        z13 = tmp7 - z3;
00011a  f8ddb014          LDR      r11,[sp,#0x14]
00011e  eba10b0b          SUB      r11,r1,r11
000122  f8cdb004          STR      r11,[sp,#4]
;;;164    
;;;165        dataptr[5] = z13 + z2;	/* phase 6 */
000126  f8dde018          LDR      lr,[sp,#0x18]
00012a  f8ddb004          LDR      r11,[sp,#4]
00012e  44f3              ADD      r11,r11,lr
000130  f8c0b014          STR      r11,[r0,#0x14]
;;;166        dataptr[3] = z13 - z2;
000134  f8dde018          LDR      lr,[sp,#0x18]
000138  f8ddb004          LDR      r11,[sp,#4]
00013c  ebab0b0e          SUB      r11,r11,lr
000140  f8c0b00c          STR      r11,[r0,#0xc]
;;;167        dataptr[1] = z11 + z4;
000144  f8dde010          LDR      lr,[sp,#0x10]
000148  f8ddb008          LDR      r11,[sp,#8]
00014c  44f3              ADD      r11,r11,lr
00014e  f8c0b004          STR      r11,[r0,#4]
;;;168        dataptr[7] = z11 - z4;
000152  f8dde010          LDR      lr,[sp,#0x10]
000156  f8ddb008          LDR      r11,[sp,#8]
00015a  ebab0b0e          SUB      r11,r11,lr
00015e  f8c0b01c          STR      r11,[r0,#0x1c]
;;;169    
;;;170        dataptr += DCTSIZE;		/* advance pointer to next row */
000162  3020              ADDS     r0,r0,#0x20
000164  f8ddb000          LDR      r11,[sp,#0]           ;126
000168  f1ab0b01          SUB      r11,r11,#1            ;126
00016c  f8cdb000          STR      r11,[sp,#0]           ;126
                  |L1.368|
000170  f8ddb000          LDR      r11,[sp,#0]           ;126
000174  f1bb0f00          CMP      r11,#0                ;126
000178  f6bfaf4b          BGE      |L1.18|
;;;171      }
;;;172    
;;;173      /* Pass 2: process columns. */
;;;174    
;;;175      dataptr = data;
00017c  9809              LDR      r0,[sp,#0x24]
;;;176      for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
00017e  f04f0b07          MOV      r11,#7
000182  f8cdb000          STR      r11,[sp,#0]
000186  e0b2              B        |L1.750|
                  |L1.392|
;;;177        tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*7];
000188  f8d0e0e0          LDR      lr,[r0,#0xe0]
00018c  f8d0b000          LDR      r11,[r0,#0]
000190  eb0b040e          ADD      r4,r11,lr
;;;178        tmp7 = dataptr[DCTSIZE*0] - dataptr[DCTSIZE*7];
000194  f8d0e0e0          LDR      lr,[r0,#0xe0]
000198  f8d0b000          LDR      r11,[r0,#0]
00019c  ebab010e          SUB      r1,r11,lr
;;;179        tmp1 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*6];
0001a0  f8d0e0c0          LDR      lr,[r0,#0xc0]
0001a4  f8d0b020          LDR      r11,[r0,#0x20]
0001a8  eb0b050e          ADD      r5,r11,lr
;;;180        tmp6 = dataptr[DCTSIZE*1] - dataptr[DCTSIZE*6];
0001ac  f8d0e0c0          LDR      lr,[r0,#0xc0]
0001b0  f8d0b020          LDR      r11,[r0,#0x20]
0001b4  ebab080e          SUB      r8,r11,lr
;;;181        tmp2 = dataptr[DCTSIZE*2] + dataptr[DCTSIZE*5];
0001b8  f8d0e0a0          LDR      lr,[r0,#0xa0]
0001bc  f8d0b040          LDR      r11,[r0,#0x40]
0001c0  eb0b060e          ADD      r6,r11,lr
;;;182        tmp5 = dataptr[DCTSIZE*2] - dataptr[DCTSIZE*5];
0001c4  f8d0e0a0          LDR      lr,[r0,#0xa0]
0001c8  f8d0b040          LDR      r11,[r0,#0x40]
0001cc  ebab0c0e          SUB      r12,r11,lr
;;;183        tmp3 = dataptr[DCTSIZE*3] + dataptr[DCTSIZE*4];
0001d0  f8d0e080          LDR      lr,[r0,#0x80]
0001d4  f8d0b060          LDR      r11,[r0,#0x60]
0001d8  eb0b070e          ADD      r7,r11,lr
;;;184        tmp4 = dataptr[DCTSIZE*3] - dataptr[DCTSIZE*4];
0001dc  f8d0e080          LDR      lr,[r0,#0x80]
0001e0  f8d0b060          LDR      r11,[r0,#0x60]
0001e4  ebab0b0e          SUB      r11,r11,lr
0001e8  f8cdb020          STR      r11,[sp,#0x20]
;;;185        
;;;186        /* Even part */
;;;187        
;;;188        tmp10 = tmp0 + tmp3;	/* phase 2 */
0001ec  19e2              ADDS     r2,r4,r7
;;;189        tmp13 = tmp0 - tmp3;
0001ee  1be3              SUBS     r3,r4,r7
;;;190        tmp11 = tmp1 + tmp2;
0001f0  eb050906          ADD      r9,r5,r6
;;;191        tmp12 = tmp1 - tmp2;
0001f4  eba50a06          SUB      r10,r5,r6
;;;192        
;;;193        dataptr[DCTSIZE*0] = tmp10 + tmp11; /* phase 3 */
0001f8  eb020b09          ADD      r11,r2,r9
0001fc  f8c0b000          STR      r11,[r0,#0]
;;;194        dataptr[DCTSIZE*4] = tmp10 - tmp11;
000200  eba20b09          SUB      r11,r2,r9
000204  f8c0b080          STR      r11,[r0,#0x80]
;;;195        
;;;196        z1 = MULTIPLY(tmp12 + tmp13, FIX_0_707106781); /* c4 */
000208  eb0a0b03          ADD      r11,r10,r3
00020c  f04f0eb5          MOV      lr,#0xb5
000210  fb0bfb0e          MUL      r11,r11,lr
000214  ea4f2b2b          ASR      r11,r11,#8
000218  f8cdb01c          STR      r11,[sp,#0x1c]
;;;197        dataptr[DCTSIZE*2] = tmp13 + z1; /* phase 5 */
00021c  f8ddb01c          LDR      r11,[sp,#0x1c]
000220  449b              ADD      r11,r11,r3
000222  f8c0b040          STR      r11,[r0,#0x40]
;;;198        dataptr[DCTSIZE*6] = tmp13 - z1;
000226  f8ddb01c          LDR      r11,[sp,#0x1c]
00022a  eba30b0b          SUB      r11,r3,r11
00022e  f8c0b0c0          STR      r11,[r0,#0xc0]
;;;199        
;;;200        /* Odd part */
;;;201    
;;;202        tmp10 = tmp4 + tmp5;	/* phase 2 */
000232  f8ddb020          LDR      r11,[sp,#0x20]
000236  eb0b020c          ADD      r2,r11,r12
;;;203        tmp11 = tmp5 + tmp6;
00023a  eb0c0908          ADD      r9,r12,r8
;;;204        tmp12 = tmp6 + tmp7;
00023e  eb080a01          ADD      r10,r8,r1
;;;205    
;;;206        /* The rotator is modified from fig 4-8 to avoid extra negations. */
;;;207        z5 = MULTIPLY(tmp10 - tmp12, FIX_0_382683433); /* c6 */
000242  eba20b0a          SUB      r11,r2,r10
000246  f04f0e62          MOV      lr,#0x62
00024a  fb0bfb0e          MUL      r11,r11,lr
00024e  ea4f2b2b          ASR      r11,r11,#8
000252  f8cdb00c          STR      r11,[sp,#0xc]
;;;208        z2 = MULTIPLY(tmp10, FIX_0_541196100) + z5; /* c2-c6 */
000256  f04f0b8b          MOV      r11,#0x8b
00025a  fb02fe0b          MUL      lr,r2,r11
00025e  f8ddb00c          LDR      r11,[sp,#0xc]
000262  eb0b2b2e          ADD      r11,r11,lr,ASR #8
000266  f8cdb018          STR      r11,[sp,#0x18]
;;;209        z4 = MULTIPLY(tmp12, FIX_1_306562965) + z5; /* c2+c6 */
00026a  f44f7ba7          MOV      r11,#0x14e
00026e  fb0afe0b          MUL      lr,r10,r11
000272  f8ddb00c          LDR      r11,[sp,#0xc]
000276  eb0b2b2e          ADD      r11,r11,lr,ASR #8
00027a  f8cdb010          STR      r11,[sp,#0x10]
;;;210        z3 = MULTIPLY(tmp11, FIX_0_707106781); /* c4 */
00027e  f04f0bb5          MOV      r11,#0xb5
000282  fb09fb0b          MUL      r11,r9,r11
000286  ea4f2b2b          ASR      r11,r11,#8
00028a  f8cdb014          STR      r11,[sp,#0x14]
;;;211    
;;;212        z11 = tmp7 + z3;		/* phase 5 */
00028e  f8ddb014          LDR      r11,[sp,#0x14]
000292  448b              ADD      r11,r11,r1
000294  f8cdb008          STR      r11,[sp,#8]
;;;213        z13 = tmp7 - z3;
000298  f8ddb014          LDR      r11,[sp,#0x14]
00029c  eba10b0b          SUB      r11,r1,r11
0002a0  f8cdb004          STR      r11,[sp,#4]
;;;214    
;;;215        dataptr[DCTSIZE*5] = z13 + z2; /* phase 6 */
0002a4  f8dde018          LDR      lr,[sp,#0x18]
0002a8  f8ddb004          LDR      r11,[sp,#4]
0002ac  44f3              ADD      r11,r11,lr
0002ae  f8c0b0a0          STR      r11,[r0,#0xa0]
;;;216        dataptr[DCTSIZE*3] = z13 - z2;
0002b2  f8dde018          LDR      lr,[sp,#0x18]
0002b6  f8ddb004          LDR      r11,[sp,#4]
0002ba  ebab0b0e          SUB      r11,r11,lr
0002be  f8c0b060          STR      r11,[r0,#0x60]
;;;217        dataptr[DCTSIZE*1] = z11 + z4;
0002c2  f8dde010          LDR      lr,[sp,#0x10]
0002c6  f8ddb008          LDR      r11,[sp,#8]
0002ca  44f3              ADD      r11,r11,lr
0002cc  f8c0b020          STR      r11,[r0,#0x20]
;;;218        dataptr[DCTSIZE*7] = z11 - z4;
0002d0  f8dde010          LDR      lr,[sp,#0x10]
0002d4  f8ddb008          LDR      r11,[sp,#8]
0002d8  ebab0b0e          SUB      r11,r11,lr
0002dc  f8c0b0e0          STR      r11,[r0,#0xe0]
;;;219    
;;;220        dataptr++;			/* advance pointer to next column */
0002e0  1d00              ADDS     r0,r0,#4
0002e2  f8ddb000          LDR      r11,[sp,#0]           ;176
0002e6  f1ab0b01          SUB      r11,r11,#1            ;176
0002ea  f8cdb000          STR      r11,[sp,#0]           ;176
                  |L1.750|
0002ee  f8ddb000          LDR      r11,[sp,#0]           ;176
0002f2  f1bb0f00          CMP      r11,#0                ;176
0002f6  f6bfaf47          BGE      |L1.392|
;;;221      }
;;;222    }
0002fa  b00a              ADD      sp,sp,#0x28
0002fc  e8bd8ff0          POP      {r4-r11,pc}
;;;223    
                          ENDP

