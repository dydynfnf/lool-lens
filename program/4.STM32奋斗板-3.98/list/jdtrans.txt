; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\jdtrans.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\jdtrans.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -I.\GUI\AntiAlias -I.\GUI\Config -I.\GUI\ConvertColor -I.\GUI\ConvertMono -I.\GUI\Core -I.\GUI\Font -I.\GUI\GUI_X -I.\GUI\JPEG -I.\GUI\LCDDriver -I.\GUI\MemDev -I.\GUI\MultiLayer -I.\GUI\Widget -I.\GUI\WM -IC:\Users\Administrator\Desktop\gui\STM32·Ü¶·°å-3.98\RTE -Id:\Keil_v5\ARM\PACK\ARM\CMSIS\4.3.0\CMSIS\Include -Id:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.1.0\Device\Include -D__UVISION_VERSION=515 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\jdtrans.crf GUI\JPEG\jdtrans.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=1

                  transdecode_master_selection PROC
;;;96     LOCAL(void)
;;;97     transdecode_master_selection (j_decompress_ptr cinfo)
000000  b510              PUSH     {r4,lr}
;;;98     {
000002  4604              MOV      r4,r0
;;;99       /* This is effectively a buffered-image operation. */
;;;100      cinfo->buffered_image = TRUE;
000004  2001              MOVS     r0,#1
000006  6420              STR      r0,[r4,#0x40]
;;;101    
;;;102      /* Entropy decoding: either Huffman or arithmetic coding. */
;;;103      if (cinfo->arith_code) {
000008  f8d400e0          LDR      r0,[r4,#0xe0]
00000c  b138              CBZ      r0,|L1.30|
;;;104        ERREXIT(cinfo, JERR_ARITH_NOTIMPL);
00000e  2001              MOVS     r0,#1
000010  6821              LDR      r1,[r4,#0]
000012  6148              STR      r0,[r1,#0x14]
000014  6820              LDR      r0,[r4,#0]
000016  6801              LDR      r1,[r0,#0]
000018  4620              MOV      r0,r4
00001a  4788              BLX      r1
00001c  e009              B        |L1.50|
                  |L1.30|
;;;105      } else {
;;;106        if (cinfo->progressive_mode) {
00001e  f8d400dc          LDR      r0,[r4,#0xdc]
000022  b118              CBZ      r0,|L1.44|
;;;107    #ifdef D_PROGRESSIVE_SUPPORTED
;;;108          jinit_phuff_decoder(cinfo);
000024  4620              MOV      r0,r4
000026  f7fffffe          BL       jinit_phuff_decoder
00002a  e002              B        |L1.50|
                  |L1.44|
;;;109    #else
;;;110          ERREXIT(cinfo, JERR_NOT_COMPILED);
;;;111    #endif
;;;112        } else
;;;113          jinit_huff_decoder(cinfo);
00002c  4620              MOV      r0,r4
00002e  f7fffffe          BL       jinit_huff_decoder
                  |L1.50|
;;;114      }
;;;115    
;;;116      /* Always get a full-image coefficient buffer. */
;;;117      jinit_d_coef_controller(cinfo, TRUE);
000032  2101              MOVS     r1,#1
000034  4620              MOV      r0,r4
000036  f7fffffe          BL       jinit_d_coef_controller
;;;118    
;;;119      /* We can now tell the memory manager to allocate virtual arrays. */
;;;120      (*cinfo->mem->realize_virt_arrays) ((j_common_ptr) cinfo);
00003a  6860              LDR      r0,[r4,#4]
00003c  6981              LDR      r1,[r0,#0x18]
00003e  4620              MOV      r0,r4
000040  4788              BLX      r1
;;;121    
;;;122      /* Initialize input side of decompressor to consume first scan. */
;;;123      (*cinfo->inputctl->start_input_pass) (cinfo);
000042  f8d401b4          LDR      r0,[r4,#0x1b4]
000046  6881              LDR      r1,[r0,#8]
000048  4620              MOV      r0,r4
00004a  4788              BLX      r1
;;;124    
;;;125      /* Initialize progress monitoring. */
;;;126      if (cinfo->progress != NULL) {
00004c  68a0              LDR      r0,[r4,#8]
00004e  b1e8              CBZ      r0,|L1.140|
;;;127        int nscans;
;;;128        /* Estimate number of scans to set pass_limit. */
;;;129        if (cinfo->progressive_mode) {
000050  f8d410dc          LDR      r1,[r4,#0xdc]
000054  b121              CBZ      r1,|L1.96|
;;;130          /* Arbitrarily estimate 2 interleaved DC scans + 3 AC scans/component. */
;;;131          nscans = 2 + 3 * cinfo->num_components;
000056  6a61              LDR      r1,[r4,#0x24]
000058  eb010141          ADD      r1,r1,r1,LSL #1
00005c  1c88              ADDS     r0,r1,#2
00005e  e006              B        |L1.110|
                  |L1.96|
;;;132        } else if (cinfo->inputctl->has_multiple_scans) {
000060  f8d411b4          LDR      r1,[r4,#0x1b4]
000064  6909              LDR      r1,[r1,#0x10]
000066  b109              CBZ      r1,|L1.108|
;;;133          /* For a nonprogressive multiscan file, estimate 1 scan per component. */
;;;134          nscans = cinfo->num_components;
000068  6a60              LDR      r0,[r4,#0x24]
00006a  e000              B        |L1.110|
                  |L1.108|
;;;135        } else {
;;;136          nscans = 1;
00006c  2001              MOVS     r0,#1
                  |L1.110|
;;;137        }
;;;138        cinfo->progress->pass_counter = 0L;
00006e  2100              MOVS     r1,#0
000070  68a2              LDR      r2,[r4,#8]
000072  6051              STR      r1,[r2,#4]
;;;139        cinfo->progress->pass_limit = (long) cinfo->total_iMCU_rows * nscans;
000074  f8d41140          LDR      r1,[r4,#0x140]
000078  4341              MULS     r1,r0,r1
00007a  68a2              LDR      r2,[r4,#8]
00007c  6091              STR      r1,[r2,#8]
;;;140        cinfo->progress->completed_passes = 0;
00007e  2100              MOVS     r1,#0
000080  68a2              LDR      r2,[r4,#8]
000082  60d1              STR      r1,[r2,#0xc]
;;;141        cinfo->progress->total_passes = 1;
000084  2101              MOVS     r1,#1
000086  68a2              LDR      r2,[r4,#8]
000088  6111              STR      r1,[r2,#0x10]
;;;142      }
00008a  bf00              NOP      
                  |L1.140|
;;;143    }
00008c  bd10              POP      {r4,pc}
                          ENDP

                  jpeg_read_coefficients PROC
;;;44     GLOBAL(jvirt_barray_ptr *)
;;;45     jpeg_read_coefficients (j_decompress_ptr cinfo)
00008e  b570              PUSH     {r4-r6,lr}
;;;46     {
000090  4604              MOV      r4,r0
;;;47       if (cinfo->global_state == DSTATE_READY) {
000092  6960              LDR      r0,[r4,#0x14]
000094  28ca              CMP      r0,#0xca
000096  d104              BNE      |L1.162|
;;;48         /* First call: initialize active modules */
;;;49         transdecode_master_selection(cinfo);
000098  4620              MOV      r0,r4
00009a  f7fffffe          BL       transdecode_master_selection
;;;50         cinfo->global_state = DSTATE_RDCOEFS;
00009e  20d1              MOVS     r0,#0xd1
0000a0  6160              STR      r0,[r4,#0x14]
                  |L1.162|
;;;51       }
;;;52       if (cinfo->global_state == DSTATE_RDCOEFS) {
0000a2  6960              LDR      r0,[r4,#0x14]
0000a4  28d1              CMP      r0,#0xd1
0000a6  d12d              BNE      |L1.260|
;;;53         /* Absorb whole file into the coef buffer */
;;;54         while(1) {
0000a8  e028              B        |L1.252|
                  |L1.170|
;;;55           int retcode;
;;;56           /* Call progress monitor hook if present */
;;;57           if (cinfo->progress != NULL)
0000aa  68a0              LDR      r0,[r4,#8]
0000ac  b118              CBZ      r0,|L1.182|
;;;58     	(*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
0000ae  68a0              LDR      r0,[r4,#8]
0000b0  6801              LDR      r1,[r0,#0]
0000b2  4620              MOV      r0,r4
0000b4  4788              BLX      r1
                  |L1.182|
;;;59           /* Absorb some more input */
;;;60           retcode = (*cinfo->inputctl->consume_input) (cinfo);
0000b6  f8d401b4          LDR      r0,[r4,#0x1b4]
0000ba  6801              LDR      r1,[r0,#0]
0000bc  4620              MOV      r0,r4
0000be  4788              BLX      r1
0000c0  4605              MOV      r5,r0
;;;61           if (retcode == JPEG_SUSPENDED)
0000c2  b90d              CBNZ     r5,|L1.200|
;;;62     	return NULL;
0000c4  2000              MOVS     r0,#0
                  |L1.198|
;;;63           if (retcode == JPEG_REACHED_EOI)
;;;64     	break;
;;;65           /* Advance progress counter if appropriate */
;;;66           if (cinfo->progress != NULL &&
;;;67     	  (retcode == JPEG_ROW_COMPLETED || retcode == JPEG_REACHED_SOS)) {
;;;68     	if (++cinfo->progress->pass_counter >= cinfo->progress->pass_limit) {
;;;69     	  /* startup underestimated number of scans; ratchet up one scan */
;;;70     	  cinfo->progress->pass_limit += (long) cinfo->total_iMCU_rows;
;;;71     	}
;;;72           }
;;;73         }
;;;74         /* Set state so that jpeg_finish_decompress does the right thing */
;;;75         cinfo->global_state = DSTATE_STOPPING;
;;;76       }
;;;77       /* At this point we should be in state DSTATE_STOPPING if being used
;;;78        * standalone, or in state DSTATE_BUFIMAGE if being invoked to get access
;;;79        * to the coefficients during a full buffered-image-mode decompression.
;;;80        */
;;;81       if ((cinfo->global_state == DSTATE_STOPPING ||
;;;82            cinfo->global_state == DSTATE_BUFIMAGE) && cinfo->buffered_image) {
;;;83         return cinfo->coef->coef_arrays;
;;;84       }
;;;85       /* Oops, improper usage */
;;;86       ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
;;;87       return NULL;			/* keep compiler happy */
;;;88     }
0000c6  bd70              POP      {r4-r6,pc}
                  |L1.200|
0000c8  2d02              CMP      r5,#2                 ;63
0000ca  d100              BNE      |L1.206|
0000cc  e017              B        |L1.254|
                  |L1.206|
0000ce  68a0              LDR      r0,[r4,#8]            ;66
0000d0  b198              CBZ      r0,|L1.250|
0000d2  2d03              CMP      r5,#3                 ;67
0000d4  d001              BEQ      |L1.218|
0000d6  2d01              CMP      r5,#1                 ;67
0000d8  d10f              BNE      |L1.250|
                  |L1.218|
0000da  68a0              LDR      r0,[r4,#8]            ;68
0000dc  6840              LDR      r0,[r0,#4]            ;68
0000de  1c40              ADDS     r0,r0,#1              ;68
0000e0  68a1              LDR      r1,[r4,#8]            ;68
0000e2  6048              STR      r0,[r1,#4]            ;68
0000e4  68a1              LDR      r1,[r4,#8]            ;68
0000e6  6889              LDR      r1,[r1,#8]            ;68
0000e8  4288              CMP      r0,r1                 ;68
0000ea  db06              BLT      |L1.250|
0000ec  68a0              LDR      r0,[r4,#8]            ;70
0000ee  6880              LDR      r0,[r0,#8]            ;70
0000f0  f8d41140          LDR      r1,[r4,#0x140]        ;70
0000f4  4408              ADD      r0,r0,r1              ;70
0000f6  68a1              LDR      r1,[r4,#8]            ;70
0000f8  6088              STR      r0,[r1,#8]            ;70
                  |L1.250|
0000fa  bf00              NOP                            ;73
                  |L1.252|
0000fc  e7d5              B        |L1.170|
                  |L1.254|
0000fe  bf00              NOP                            ;64
000100  20d2              MOVS     r0,#0xd2              ;75
000102  6160              STR      r0,[r4,#0x14]         ;75
                  |L1.260|
000104  6960              LDR      r0,[r4,#0x14]         ;81
000106  28d2              CMP      r0,#0xd2              ;81
000108  d002              BEQ      |L1.272|
00010a  6960              LDR      r0,[r4,#0x14]         ;82
00010c  28cf              CMP      r0,#0xcf              ;82
00010e  d105              BNE      |L1.284|
                  |L1.272|
000110  6c20              LDR      r0,[r4,#0x40]         ;82
000112  b118              CBZ      r0,|L1.284|
000114  f8d401ac          LDR      r0,[r4,#0x1ac]        ;83
000118  6900              LDR      r0,[r0,#0x10]         ;83
00011a  e7d4              B        |L1.198|
                  |L1.284|
00011c  2014              MOVS     r0,#0x14              ;86
00011e  6821              LDR      r1,[r4,#0]            ;86
000120  6148              STR      r0,[r1,#0x14]         ;86
000122  6821              LDR      r1,[r4,#0]            ;86
000124  6960              LDR      r0,[r4,#0x14]         ;86
000126  6188              STR      r0,[r1,#0x18]         ;86
000128  6820              LDR      r0,[r4,#0]            ;86
00012a  6801              LDR      r1,[r0,#0]            ;86
00012c  4620              MOV      r0,r4                 ;86
00012e  4788              BLX      r1                    ;86
000130  2000              MOVS     r0,#0                 ;87
000132  e7c8              B        |L1.198|
;;;89     
                          ENDP

