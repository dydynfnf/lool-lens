; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\guidev_16.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\guidev_16.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -I.\GUI\AntiAlias -I.\GUI\Config -I.\GUI\ConvertColor -I.\GUI\ConvertMono -I.\GUI\Core -I.\GUI\Font -I.\GUI\GUI_X -I.\GUI\JPEG -I.\GUI\LCDDriver -I.\GUI\MemDev -I.\GUI\MultiLayer -I.\GUI\Widget -I.\GUI\WM -IC:\Users\Administrator\Desktop\gui\STM32·Ü¶·°å-3.98\RTE -Id:\Keil_v5\ARM\PACK\ARM\CMSIS\4.3.0\CMSIS\Include -Id:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.1.0\Device\Include -D__UVISION_VERSION=515 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\guidev_16.crf GUI\MemDev\GUIDEV_16.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _DrawBitLine16BPP_DDB PROC
;;;48     */
;;;49     static void _DrawBitLine16BPP_DDB(GUI_USAGE* pUsage, int x, int y, const U16 *pSrc, int xsize, PIXELINDEX* pDest) {
000000  e92d47f0          PUSH     {r4-r10,lr}
000004  4605              MOV      r5,r0
000006  460f              MOV      r7,r1
000008  4691              MOV      r9,r2
00000a  461c              MOV      r4,r3
00000c  e9dd8608          LDRD     r8,r6,[sp,#0x20]
;;;50       switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
000010  48fc              LDR      r0,|L1.1028|
000012  7c00              LDRB     r0,[r0,#0x10]  ; GUI_Context
000014  f0000003          AND      r0,r0,#3
000018  b110              CBZ      r0,|L1.32|
00001a  2802              CMP      r0,#2
00001c  d11c              BNE      |L1.88|
00001e  e006              B        |L1.46|
                  |L1.32|
;;;51       case 0:    /* Write mode */
;;;52         memcpy(pDest, pSrc, xsize * 2);
000020  ea4f0248          LSL      r2,r8,#1
000024  4621              MOV      r1,r4
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       __aeabi_memcpy
;;;53         break;
00002c  e014              B        |L1.88|
                  |L1.46|
;;;54       case LCD_DRAWMODE_TRANS:
;;;55         do {
00002e  bf00              NOP      
                  |L1.48|
;;;56           if (*pSrc) {
000030  8820              LDRH     r0,[r4,#0]
000032  b140              CBZ      r0,|L1.70|
;;;57             *pDest = *pSrc;
000034  8820              LDRH     r0,[r4,#0]
000036  8030              STRH     r0,[r6,#0]
;;;58             if (pUsage) {
000038  b12d              CBZ      r5,|L1.70|
;;;59               GUI_USAGE_AddPixel(pUsage, x, y);
00003a  68a8              LDR      r0,[r5,#8]
00003c  464a              MOV      r2,r9
00003e  4639              MOV      r1,r7
000040  6803              LDR      r3,[r0,#0]
000042  4628              MOV      r0,r5
000044  4798              BLX      r3
                  |L1.70|
;;;60             }
;;;61           }
;;;62           x++;
000046  1c7f              ADDS     r7,r7,#1
;;;63           pDest++;
000048  1cb6              ADDS     r6,r6,#2
;;;64           pSrc++;
00004a  1ca4              ADDS     r4,r4,#2
;;;65         } while (--xsize);
00004c  f1a80001          SUB      r0,r8,#1
000050  ea5f0800          MOVS     r8,r0
000054  d1ec              BNE      |L1.48|
;;;66         break;
000056  bf00              NOP      
                  |L1.88|
000058  bf00              NOP                            ;53
;;;67       }
;;;68     }
00005a  e8bd87f0          POP      {r4-r10,pc}
;;;69     
                          ENDP

                  _XY2PTR PROC
;;;73     */
;;;74     static PIXELINDEX* _XY2PTR(int x, int y) {
00005e  e92d41f0          PUSH     {r4-r8,lr}
000062  4605              MOV      r5,r0
000064  460e              MOV      r6,r1
;;;75       GUI_MEMDEV* pDev = GUI_MEMDEV_H2P(GUI_Context.hDevData);
000066  49e7              LDR      r1,|L1.1028|
000068  f9b1004c          LDRSH    r0,[r1,#0x4c]  ; GUI_Context
00006c  f7fffffe          BL       GUI_ALLOC_h2p
000070  4604              MOV      r4,r0
;;;76       U8 *pData = (U8*)(pDev + 1);
000072  f104072c          ADD      r7,r4,#0x2c
;;;77       #if GUI_DEBUG_LEVEL >= GUI_DEBUG_LEVEL_CHECK_ALL
;;;78         if ((x >= pDev->x0+pDev->XSize) | (x<pDev->x0) | (y >= pDev->y0+pDev->YSize) | (y<pDev->y0)) {
;;;79           GUI_DEBUG_ERROROUT2("_XY2PTR: parameters out of bounds",x,y);
;;;80         }
;;;81       #endif
;;;82       pData += (GUI_ALLOC_DATATYPE_U)(y - pDev->y0) * (GUI_ALLOC_DATATYPE_U)pDev->BytesPerLine;
000076  8860              LDRH     r0,[r4,#2]
000078  1a30              SUBS     r0,r6,r0
00007a  b280              UXTH     r0,r0
00007c  89a1              LDRH     r1,[r4,#0xc]
00007e  b289              UXTH     r1,r1
000080  fb007701          MLA      r7,r0,r1,r7
;;;83       return ((PIXELINDEX*)pData) + x - pDev->x0;
000084  eb070045          ADD      r0,r7,r5,LSL #1
000088  f9b41000          LDRSH    r1,[r4,#0]
00008c  eba00041          SUB      r0,r0,r1,LSL #1
;;;84     }
000090  e8bd81f0          POP      {r4-r8,pc}
;;;85     
                          ENDP

                  _DrawBitLine1BPP PROC
;;;89     */
;;;90     static void _DrawBitLine1BPP(GUI_USAGE* pUsage, int x, int y, const U8 GUI_UNI_PTR * p, int Diff, unsigned int xsize,
000094  e92d4fff          PUSH     {r0-r11,lr}
;;;91                                  const LCD_PIXELINDEX* pTrans, GUI_MEMDEV* pDev, PIXELINDEX* pDest)
;;;92     {
000098  b081              SUB      sp,sp,#4
00009a  4681              MOV      r9,r0
00009c  468a              MOV      r10,r1
00009e  4698              MOV      r8,r3
0000a0  9e12              LDR      r6,[sp,#0x48]
0000a2  9d0f              LDR      r5,[sp,#0x3c]
;;;93       PIXELINDEX Index1;
;;;94       PIXELINDEX IndexMask;
;;;95       unsigned pixels;
;;;96       unsigned PixelCnt;
;;;97       PixelCnt = 8 - Diff;
0000a4  980e              LDR      r0,[sp,#0x38]
0000a6  f1c00408          RSB      r4,r0,#8
;;;98       pixels = LCD_aMirror[*p] >> Diff;
0000aa  f8980000          LDRB     r0,[r8,#0]
0000ae  49d6              LDR      r1,|L1.1032|
0000b0  5c08              LDRB     r0,[r1,r0]
0000b2  990e              LDR      r1,[sp,#0x38]
0000b4  fa40f701          ASR      r7,r0,r1
;;;99     
;;;100      GUI_DEBUG_ERROROUT3_IF( x < pDev->x0, "GUIDEV.c: DrawBitLine1BPP, Act= %d, Border= %d, Clip= %d", x,pDev->x0, GUI_Context.ClipRect.x0);
;;;101    
;;;102      switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
0000b8  48d2              LDR      r0,|L1.1028|
0000ba  7c00              LDRB     r0,[r0,#0x10]  ; GUI_Context
0000bc  f0000003          AND      r0,r0,#3
0000c0  b120              CBZ      r0,|L1.204|
0000c2  2801              CMP      r0,#1
0000c4  d062              BEQ      |L1.396|
0000c6  2802              CMP      r0,#2
0000c8  d179              BNE      |L1.446|
0000ca  e01c              B        |L1.262|
                  |L1.204|
;;;103      case 0:    /* Write mode */
;;;104        do {
0000cc  bf00              NOP      
                  |L1.206|
;;;105          /* Prepare loop */
;;;106          if (PixelCnt > xsize) {
0000ce  42ac              CMP      r4,r5
0000d0  d900              BLS      |L1.212|
;;;107            PixelCnt = xsize;
0000d2  462c              MOV      r4,r5
                  |L1.212|
;;;108          }
;;;109          xsize -= PixelCnt;
0000d4  1b2d              SUBS     r5,r5,r4
;;;110          /* Write as many pixels as we are allowed to and have loaded in this inner loop */
;;;111          do {
0000d6  bf00              NOP      
                  |L1.216|
;;;112            *pDest++ = *(pTrans + (pixels & 1));
0000d8  f0070101          AND      r1,r7,#1
0000dc  9810              LDR      r0,[sp,#0x40]
0000de  f8300011          LDRH     r0,[r0,r1,LSL #1]
0000e2  f8260b02          STRH     r0,[r6],#2
;;;113            pixels >>= 1;
0000e6  087f              LSRS     r7,r7,#1
;;;114          } while (--PixelCnt);
0000e8  1e60              SUBS     r0,r4,#1
0000ea  0004              MOVS     r4,r0
0000ec  d1f4              BNE      |L1.216|
;;;115          /* Check if an other Source byte needs to be loaded */
;;;116          if (xsize == 0) {
0000ee  b915              CBNZ     r5,|L1.246|
                  |L1.240|
;;;117            return;
;;;118          }
;;;119          PixelCnt = 8;
;;;120          pixels = LCD_aMirror[*++p];
;;;121        } while (1);
;;;122      case LCD_DRAWMODE_TRANS:
;;;123        Index1 = *(pTrans + 1);
;;;124        do {
;;;125          /* Prepare loop */
;;;126          if (PixelCnt > xsize) {
;;;127            PixelCnt = xsize;
;;;128          }
;;;129          xsize -= PixelCnt;
;;;130          if (pUsage) {
;;;131            do {
;;;132              if (pixels == 0) {      /* Early out optimization; not required */
;;;133                pDest += PixelCnt;
;;;134                x     += PixelCnt;
;;;135                break;
;;;136              }
;;;137              if ((pixels & 1)) {
;;;138                GUI_USAGE_AddPixel(pUsage, x, y);
;;;139                *pDest = Index1;
;;;140              }
;;;141              x++;
;;;142              pDest++;
;;;143              if (--PixelCnt == 0) {
;;;144                break;
;;;145              }
;;;146              pixels >>= 1;
;;;147            } while (1);
;;;148          } else {
;;;149            do {
;;;150              if (pixels == 0) {      /* Early out optimization; not required */
;;;151                pDest += PixelCnt;
;;;152                break;
;;;153              }
;;;154              if ((pixels & 1)) {
;;;155                *pDest = Index1;
;;;156              }
;;;157              pDest++;
;;;158              if (--PixelCnt == 0) {
;;;159                break;
;;;160              }
;;;161              pixels >>= 1;
;;;162            } while (1);
;;;163          }
;;;164          /* Check if an other Source byte needs to be loaded */
;;;165          if (xsize == 0) {
;;;166            return;
;;;167          }
;;;168          PixelCnt = 8;
;;;169          pixels = LCD_aMirror[*(++p)];
;;;170        } while (1);
;;;171      case LCD_DRAWMODE_XOR:
;;;172        IndexMask = pDev->pfGetIndexMask();
;;;173        do {
;;;174          /* Prepare loop */
;;;175          if (PixelCnt > xsize) {
;;;176            PixelCnt = xsize;
;;;177          }
;;;178          xsize -= PixelCnt;
;;;179          /* Write as many pixels as we are allowed to and have loaded in this inner loop */
;;;180          do {
;;;181            if ((pixels & 1)) {
;;;182              *pDest ^= IndexMask;
;;;183            }
;;;184            *pDest++;
;;;185            pixels >>= 1;
;;;186          } while (--PixelCnt);
;;;187          /* Check if an other Source byte needs to be loaded */
;;;188          if (xsize == 0) {
;;;189            return;
;;;190          }
;;;191          PixelCnt = 8;
;;;192          pixels = LCD_aMirror[*(++p)];
;;;193        } while (1);
;;;194      }
;;;195    }
0000f0  b005              ADD      sp,sp,#0x14
0000f2  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.246|
0000f6  2408              MOVS     r4,#8                 ;119
0000f8  f1080001          ADD      r0,r8,#1              ;120
0000fc  4680              MOV      r8,r0                 ;120
0000fe  7800              LDRB     r0,[r0,#0]            ;120
000100  49c1              LDR      r1,|L1.1032|
000102  5c0f              LDRB     r7,[r1,r0]            ;120
000104  e7e3              B        |L1.206|
                  |L1.262|
000106  9810              LDR      r0,[sp,#0x40]         ;123
000108  f8b0b002          LDRH     r11,[r0,#2]           ;123
00010c  bf00              NOP                            ;124
                  |L1.270|
00010e  42ac              CMP      r4,r5                 ;126
000110  d900              BLS      |L1.276|
000112  462c              MOV      r4,r5                 ;127
                  |L1.276|
000114  1b2d              SUBS     r5,r5,r4              ;129
000116  f1b90f00          CMP      r9,#0                 ;130
00011a  d01b              BEQ      |L1.340|
00011c  bf00              NOP                            ;131
                  |L1.286|
00011e  b91f              CBNZ     r7,|L1.296|
000120  eb060644          ADD      r6,r6,r4,LSL #1       ;133
000124  44a2              ADD      r10,r10,r4            ;134
000126  e014              B        |L1.338|
                  |L1.296|
000128  f0070001          AND      r0,r7,#1              ;137
00012c  b140              CBZ      r0,|L1.320|
00012e  f8d90008          LDR      r0,[r9,#8]            ;138
000132  6803              LDR      r3,[r0,#0]            ;138
000134  4651              MOV      r1,r10                ;138
000136  4648              MOV      r0,r9                 ;138
000138  9a03              LDR      r2,[sp,#0xc]          ;138
00013a  4798              BLX      r3                    ;138
00013c  f8a6b000          STRH     r11,[r6,#0]           ;139
                  |L1.320|
000140  f10a0a01          ADD      r10,r10,#1            ;141
000144  1cb6              ADDS     r6,r6,#2              ;142
000146  1e60              SUBS     r0,r4,#1              ;143
000148  0004              MOVS     r4,r0                 ;143
00014a  d100              BNE      |L1.334|
00014c  e001              B        |L1.338|
                  |L1.334|
00014e  087f              LSRS     r7,r7,#1              ;146
000150  e7e5              B        |L1.286|
                  |L1.338|
000152  e011              B        |L1.376|
                  |L1.340|
000154  bf00              NOP                            ;149
                  |L1.342|
000156  b917              CBNZ     r7,|L1.350|
000158  eb060644          ADD      r6,r6,r4,LSL #1       ;151
00015c  e00b              B        |L1.374|
                  |L1.350|
00015e  f0070001          AND      r0,r7,#1              ;154
000162  b108              CBZ      r0,|L1.360|
000164  f8a6b000          STRH     r11,[r6,#0]           ;155
                  |L1.360|
000168  1cb6              ADDS     r6,r6,#2              ;157
00016a  1e60              SUBS     r0,r4,#1              ;158
00016c  0004              MOVS     r4,r0                 ;158
00016e  d100              BNE      |L1.370|
000170  e001              B        |L1.374|
                  |L1.370|
000172  087f              LSRS     r7,r7,#1              ;161
000174  e7ef              B        |L1.342|
                  |L1.374|
000176  bf00              NOP                            ;152
                  |L1.376|
000178  b905              CBNZ     r5,|L1.380|
00017a  e7b9              B        |L1.240|
                  |L1.380|
00017c  2408              MOVS     r4,#8                 ;168
00017e  f1080001          ADD      r0,r8,#1              ;169
000182  4680              MOV      r8,r0                 ;169
000184  7800              LDRB     r0,[r0,#0]            ;169
000186  49a0              LDR      r1,|L1.1032|
000188  5c0f              LDRB     r7,[r1,r0]            ;169
00018a  e7c0              B        |L1.270|
                  |L1.396|
00018c  9911              LDR      r1,[sp,#0x44]         ;172
00018e  6a48              LDR      r0,[r1,#0x24]         ;172
000190  4780              BLX      r0                    ;172
000192  b280              UXTH     r0,r0                 ;172
000194  9000              STR      r0,[sp,#0]            ;172
000196  bf00              NOP                            ;173
                  |L1.408|
000198  42ac              CMP      r4,r5                 ;175
00019a  d900              BLS      |L1.414|
00019c  462c              MOV      r4,r5                 ;176
                  |L1.414|
00019e  1b2d              SUBS     r5,r5,r4              ;178
0001a0  bf00              NOP                            ;180
                  |L1.418|
0001a2  f0070001          AND      r0,r7,#1              ;181
0001a6  b118              CBZ      r0,|L1.432|
0001a8  8830              LDRH     r0,[r6,#0]            ;182
0001aa  9900              LDR      r1,[sp,#0]            ;182
0001ac  4048              EORS     r0,r0,r1              ;182
0001ae  8030              STRH     r0,[r6,#0]            ;182
                  |L1.432|
0001b0  1cb6              ADDS     r6,r6,#2              ;184
0001b2  087f              LSRS     r7,r7,#1              ;185
0001b4  1e60              SUBS     r0,r4,#1              ;186
0001b6  0004              MOVS     r4,r0                 ;186
0001b8  d1f3              BNE      |L1.418|
0001ba  b90d              CBNZ     r5,|L1.448|
0001bc  e798              B        |L1.240|
                  |L1.446|
0001be  e007              B        |L1.464|
                  |L1.448|
0001c0  2408              MOVS     r4,#8                 ;191
0001c2  f1080001          ADD      r0,r8,#1              ;192
0001c6  4680              MOV      r8,r0                 ;192
0001c8  7800              LDRB     r0,[r0,#0]            ;192
0001ca  498f              LDR      r1,|L1.1032|
0001cc  5c0f              LDRB     r7,[r1,r0]            ;192
0001ce  e7e3              B        |L1.408|
                  |L1.464|
0001d0  bf00              NOP                            ;102
0001d2  bf00              NOP      
0001d4  e78c              B        |L1.240|
;;;196    
                          ENDP

                  _DrawBitLine2BPP PROC
;;;200    */
;;;201    static void _DrawBitLine2BPP(GUI_USAGE* pUsage, int x, int y, const U8 GUI_UNI_PTR * p, int Diff, int xsize,
0001d6  e92d5fff          PUSH     {r0-r12,lr}
;;;202                                 const LCD_PIXELINDEX* pTrans, PIXELINDEX* pDest)
;;;203    {
0001da  4681              MOV      r9,r0
0001dc  468a              MOV      r10,r1
0001de  4698              MOV      r8,r3
0001e0  e9ddb610          LDRD     r11,r6,[sp,#0x40]
0001e4  9c0f              LDR      r4,[sp,#0x3c]
;;;204      U8 pixels;
;;;205      U8  PixelCnt;
;;;206      PixelCnt = 4 - Diff;
0001e6  980e              LDR      r0,[sp,#0x38]
0001e8  f1c00004          RSB      r0,r0,#4
0001ec  b2c5              UXTB     r5,r0
;;;207      pixels = (*p) << (Diff << 1);
0001ee  f8980000          LDRB     r0,[r8,#0]
0001f2  990e              LDR      r1,[sp,#0x38]
0001f4  0049              LSLS     r1,r1,#1
0001f6  4088              LSLS     r0,r0,r1
0001f8  b2c7              UXTB     r7,r0
;;;208      switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
0001fa  4882              LDR      r0,|L1.1028|
0001fc  7c00              LDRB     r0,[r0,#0x10]  ; GUI_Context
0001fe  f0000003          AND      r0,r0,#3
000202  b120              CBZ      r0,|L1.526|
000204  2801              CMP      r0,#1
000206  d043              BEQ      |L1.656|
000208  2802              CMP      r0,#2
00020a  d15d              BNE      |L1.712|
00020c  e018              B        |L1.576|
                  |L1.526|
;;;209      case 0:    /* Write mode */
;;;210      PixelLoopWrite:
00020e  bf00              NOP      
                  |L1.528|
;;;211        if (PixelCnt > xsize) {
000210  42a5              CMP      r5,r4
000212  dd00              BLE      |L1.534|
;;;212          PixelCnt = xsize;
000214  b2e5              UXTB     r5,r4
                  |L1.534|
;;;213        }
;;;214        xsize -= PixelCnt;
000216  1b64              SUBS     r4,r4,r5
;;;215        do {
000218  bf00              NOP      
                  |L1.538|
;;;216          *pDest++ = *(pTrans + (pixels >> 6));
00021a  11b8              ASRS     r0,r7,#6
00021c  f83b0010          LDRH     r0,[r11,r0,LSL #1]
000220  f8260b02          STRH     r0,[r6],#2
;;;217          pixels <<= 2;
000224  06b8              LSLS     r0,r7,#26
000226  0e07              LSRS     r7,r0,#24
;;;218        } while (--PixelCnt);
000228  1e68              SUBS     r0,r5,#1
00022a  b2c0              UXTB     r0,r0
00022c  0005              MOVS     r5,r0
00022e  d1f4              BNE      |L1.538|
;;;219        if (xsize) {
000230  b12c              CBZ      r4,|L1.574|
;;;220          PixelCnt = 4;
000232  2504              MOVS     r5,#4
;;;221          pixels = *(++p);
000234  f1080001          ADD      r0,r8,#1
000238  4680              MOV      r8,r0
00023a  7807              LDRB     r7,[r0,#0]
;;;222          goto PixelLoopWrite;
00023c  e7e8              B        |L1.528|
                  |L1.574|
;;;223        }
;;;224        break;
00023e  e043              B        |L1.712|
                  |L1.576|
;;;225      case LCD_DRAWMODE_TRANS:
;;;226      PixelLoopTrans:
000240  bf00              NOP      
                  |L1.578|
;;;227        if (PixelCnt > xsize)
000242  42a5              CMP      r5,r4
000244  dd00              BLE      |L1.584|
;;;228          PixelCnt = xsize;
000246  b2e5              UXTB     r5,r4
                  |L1.584|
;;;229        xsize -= PixelCnt;
000248  1b64              SUBS     r4,r4,r5
;;;230        do {
00024a  bf00              NOP      
                  |L1.588|
;;;231          if (pixels & 0xc0) {
00024c  f00700c0          AND      r0,r7,#0xc0
000250  b168              CBZ      r0,|L1.622|
;;;232            *pDest = *(pTrans + (pixels >> 6));
000252  11b8              ASRS     r0,r7,#6
000254  f83b0010          LDRH     r0,[r11,r0,LSL #1]
000258  8030              STRH     r0,[r6,#0]
;;;233            if (pUsage) {
00025a  f1b90f00          CMP      r9,#0
00025e  d006              BEQ      |L1.622|
;;;234              GUI_USAGE_AddPixel(pUsage, x, y);
000260  f8d90008          LDR      r0,[r9,#8]
000264  6803              LDR      r3,[r0,#0]
000266  4651              MOV      r1,r10
000268  4648              MOV      r0,r9
00026a  9a02              LDR      r2,[sp,#8]
00026c  4798              BLX      r3
                  |L1.622|
;;;235            }
;;;236          }
;;;237          pDest++;
00026e  1cb6              ADDS     r6,r6,#2
;;;238          x++;
000270  f10a0a01          ADD      r10,r10,#1
;;;239          pixels <<= 2;
000274  06b8              LSLS     r0,r7,#26
000276  0e07              LSRS     r7,r0,#24
;;;240        } while (--PixelCnt);
000278  1e68              SUBS     r0,r5,#1
00027a  b2c0              UXTB     r0,r0
00027c  0005              MOVS     r5,r0
00027e  d1e5              BNE      |L1.588|
;;;241        if (xsize) {
000280  b12c              CBZ      r4,|L1.654|
;;;242          PixelCnt = 4;
000282  2504              MOVS     r5,#4
;;;243          pixels = *(++p);
000284  f1080001          ADD      r0,r8,#1
000288  4680              MOV      r8,r0
00028a  7807              LDRB     r7,[r0,#0]
;;;244          goto PixelLoopTrans;
00028c  e7d9              B        |L1.578|
                  |L1.654|
;;;245        }
;;;246        break;
00028e  e01b              B        |L1.712|
                  |L1.656|
;;;247      case LCD_DRAWMODE_XOR:;
;;;248      PixelLoopXor:
000290  bf00              NOP      
                  |L1.658|
;;;249        if (PixelCnt > xsize)
000292  42a5              CMP      r5,r4
000294  dd00              BLE      |L1.664|
;;;250          PixelCnt = xsize;
000296  b2e5              UXTB     r5,r4
                  |L1.664|
;;;251        xsize -= PixelCnt;
000298  1b64              SUBS     r4,r4,r5
;;;252        do {
00029a  bf00              NOP      
                  |L1.668|
;;;253          if ((pixels & 0xc0))
00029c  f00700c0          AND      r0,r7,#0xc0
0002a0  b118              CBZ      r0,|L1.682|
;;;254            *pDest ^= 255;
0002a2  8830              LDRH     r0,[r6,#0]
0002a4  f08000ff          EOR      r0,r0,#0xff
0002a8  8030              STRH     r0,[r6,#0]
                  |L1.682|
;;;255          pDest++;
0002aa  1cb6              ADDS     r6,r6,#2
;;;256          pixels <<= 2;
0002ac  06b8              LSLS     r0,r7,#26
0002ae  0e07              LSRS     r7,r0,#24
;;;257        } while (--PixelCnt);
0002b0  1e68              SUBS     r0,r5,#1
0002b2  b2c0              UXTB     r0,r0
0002b4  0005              MOVS     r5,r0
0002b6  d1f1              BNE      |L1.668|
;;;258        if (xsize) {
0002b8  b12c              CBZ      r4,|L1.710|
;;;259          PixelCnt = 4;
0002ba  2504              MOVS     r5,#4
;;;260          pixels = *(++p);
0002bc  f1080001          ADD      r0,r8,#1
0002c0  4680              MOV      r8,r0
0002c2  7807              LDRB     r7,[r0,#0]
;;;261          goto PixelLoopXor;
0002c4  e7e5              B        |L1.658|
                  |L1.710|
;;;262        }
;;;263        break;
0002c6  bf00              NOP      
                  |L1.712|
0002c8  bf00              NOP                            ;224
;;;264      }
;;;265    }
0002ca  e8bd9fff          POP      {r0-r12,pc}
;;;266    
                          ENDP

                  _DrawBitLine4BPP PROC
;;;270    */
;;;271    static void _DrawBitLine4BPP(GUI_USAGE* pUsage, int x, int y, const U8 GUI_UNI_PTR * p, int Diff, int xsize,
0002ce  e92d4fff          PUSH     {r0-r11,lr}
;;;272                                 const LCD_PIXELINDEX* pTrans, PIXELINDEX* pDest)
;;;273    {
0002d2  b081              SUB      sp,sp,#4
0002d4  4607              MOV      r7,r0
0002d6  468a              MOV      r10,r1
0002d8  4699              MOV      r9,r3
0002da  e9ddb60e          LDRD     r11,r6,[sp,#0x38]
0002de  e9dd8410          LDRD     r8,r4,[sp,#0x40]
;;;274      U8 pixels;
;;;275      U8 PixelCnt;
;;;276      PixelCnt = 2 - Diff;
0002e2  f1cb0002          RSB      r0,r11,#2
0002e6  b2c0              UXTB     r0,r0
0002e8  9000              STR      r0,[sp,#0]
;;;277      pixels = (*p) << (Diff << 2);
0002ea  f8990000          LDRB     r0,[r9,#0]
0002ee  ea4f018b          LSL      r1,r11,#2
0002f2  4088              LSLS     r0,r0,r1
0002f4  b2c5              UXTB     r5,r0
;;;278      switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
0002f6  4843              LDR      r0,|L1.1028|
0002f8  7c00              LDRB     r0,[r0,#0x10]  ; GUI_Context
0002fa  f0000003          AND      r0,r0,#3
0002fe  b120              CBZ      r0,|L1.778|
000300  2801              CMP      r0,#1
000302  d07d              BEQ      |L1.1024|
000304  2802              CMP      r0,#2
000306  d12a              BNE      |L1.862|
000308  e02a              B        |L1.864|
                  |L1.778|
;;;279    /*
;;;280              * Write mode *
;;;281    */
;;;282      case 0:
;;;283        /* Draw incomplete bytes to the left of center area */
;;;284        if (Diff) {
00030a  f1bb0f00          CMP      r11,#0
00030e  d009              BEQ      |L1.804|
;;;285          *pDest = *(pTrans + (pixels >> 4));
000310  1128              ASRS     r0,r5,#4
000312  f8380010          LDRH     r0,[r8,r0,LSL #1]
000316  8020              STRH     r0,[r4,#0]
;;;286          pDest++;
000318  1ca4              ADDS     r4,r4,#2
;;;287          xsize--;
00031a  1e76              SUBS     r6,r6,#1
;;;288          pixels = *++p;
00031c  f1090001          ADD      r0,r9,#1
000320  4681              MOV      r9,r0
000322  7805              LDRB     r5,[r0,#0]
                  |L1.804|
;;;289        }
;;;290        /* Draw center area (2 pixels in one byte) */
;;;291        if (xsize >= 2) {
000324  2e02              CMP      r6,#2
000326  db15              BLT      |L1.852|
;;;292          int i = xsize >> 1;
000328  1070              ASRS     r0,r6,#1
;;;293          xsize &= 1;
00032a  f0060601          AND      r6,r6,#1
;;;294          do {
00032e  bf00              NOP      
                  |L1.816|
;;;295            *pDest     = *(pTrans + (pixels >> 4));   /* Draw 1. (left) pixel */
000330  1129              ASRS     r1,r5,#4
000332  f8381011          LDRH     r1,[r8,r1,LSL #1]
000336  8021              STRH     r1,[r4,#0]
;;;296            *(pDest+1) = *(pTrans + (pixels & 15));   /* Draw 2. (right) pixel */
000338  f005010f          AND      r1,r5,#0xf
00033c  f8381011          LDRH     r1,[r8,r1,LSL #1]
000340  8061              STRH     r1,[r4,#2]
;;;297            pDest += 2;
000342  1d24              ADDS     r4,r4,#4
;;;298            pixels = *++p;
000344  f1090101          ADD      r1,r9,#1
000348  4689              MOV      r9,r1
00034a  780d              LDRB     r5,[r1,#0]
;;;299          } while (--i);
00034c  1e41              SUBS     r1,r0,#1
00034e  0008              MOVS     r0,r1
000350  d1ee              BNE      |L1.816|
;;;300        }
000352  bf00              NOP      
                  |L1.852|
;;;301        /* Draw incomplete bytes to the right of center area */
;;;302        if (xsize) {
000354  b11e              CBZ      r6,|L1.862|
;;;303          *pDest = * (pTrans + (pixels >> 4));
000356  1128              ASRS     r0,r5,#4
000358  f8380010          LDRH     r0,[r8,r0,LSL #1]
00035c  8020              STRH     r0,[r4,#0]
                  |L1.862|
;;;304        }
;;;305        break;
00035e  e077              B        |L1.1104|
                  |L1.864|
;;;306    /*
;;;307              * Transparent draw mode *
;;;308    */
;;;309      case LCD_DRAWMODE_TRANS:
;;;310        /* Draw incomplete bytes to the left of center area */
;;;311        if (Diff) {
000360  f1bb0f00          CMP      r11,#0
000364  d015              BEQ      |L1.914|
;;;312          if (pixels & 0xF0) {
000366  f00500f0          AND      r0,r5,#0xf0
00036a  b150              CBZ      r0,|L1.898|
;;;313            *pDest = *(pTrans + (pixels >> 4));
00036c  1128              ASRS     r0,r5,#4
00036e  f8380010          LDRH     r0,[r8,r0,LSL #1]
000372  8020              STRH     r0,[r4,#0]
;;;314            if (pUsage) {
000374  b12f              CBZ      r7,|L1.898|
;;;315              GUI_USAGE_AddPixel(pUsage, x, y);
000376  68b8              LDR      r0,[r7,#8]
000378  6803              LDR      r3,[r0,#0]
00037a  4651              MOV      r1,r10
00037c  4638              MOV      r0,r7
00037e  9a03              LDR      r2,[sp,#0xc]
000380  4798              BLX      r3
                  |L1.898|
;;;316            }
;;;317          }
;;;318          pDest++;
000382  1ca4              ADDS     r4,r4,#2
;;;319          x++;
000384  f10a0a01          ADD      r10,r10,#1
;;;320          xsize--;
000388  1e76              SUBS     r6,r6,#1
;;;321          pixels = *++p;
00038a  f1090001          ADD      r0,r9,#1
00038e  4681              MOV      r9,r0
000390  7805              LDRB     r5,[r0,#0]
                  |L1.914|
;;;322        }
;;;323        /* Draw center area (2 pixels in one byte) */
;;;324        while (xsize >= 2) {
000392  e024              B        |L1.990|
                  |L1.916|
;;;325          /* Draw 1. (left) pixel */
;;;326          if (pixels & 0xF0) {
000394  f00500f0          AND      r0,r5,#0xf0
000398  b150              CBZ      r0,|L1.944|
;;;327            *pDest = *(pTrans + (pixels >> 4));
00039a  1128              ASRS     r0,r5,#4
00039c  f8380010          LDRH     r0,[r8,r0,LSL #1]
0003a0  8020              STRH     r0,[r4,#0]
;;;328            if (pUsage) {
0003a2  b12f              CBZ      r7,|L1.944|
;;;329              GUI_USAGE_AddPixel(pUsage, x, y);
0003a4  68b8              LDR      r0,[r7,#8]
0003a6  6803              LDR      r3,[r0,#0]
0003a8  4651              MOV      r1,r10
0003aa  4638              MOV      r0,r7
0003ac  9a03              LDR      r2,[sp,#0xc]
0003ae  4798              BLX      r3
                  |L1.944|
;;;330            }
;;;331          }
;;;332          /* Draw 2. (right) pixel */
;;;333          if (pixels &= 15) {
0003b0  f005000f          AND      r0,r5,#0xf
0003b4  0005              MOVS     r5,r0
0003b6  d00a              BEQ      |L1.974|
;;;334            *(pDest + 1) = *(pTrans + pixels);
0003b8  f8380015          LDRH     r0,[r8,r5,LSL #1]
0003bc  8060              STRH     r0,[r4,#2]
;;;335            if (pUsage) {
0003be  b137              CBZ      r7,|L1.974|
;;;336              GUI_USAGE_AddPixel(pUsage, x + 1, y);
0003c0  68b8              LDR      r0,[r7,#8]
0003c2  6803              LDR      r3,[r0,#0]
0003c4  f10a0101          ADD      r1,r10,#1
0003c8  4638              MOV      r0,r7
0003ca  9a03              LDR      r2,[sp,#0xc]
0003cc  4798              BLX      r3
                  |L1.974|
;;;337            }
;;;338          }
;;;339          pDest += 2;
0003ce  1d24              ADDS     r4,r4,#4
;;;340          x += 2;
0003d0  f10a0a02          ADD      r10,r10,#2
;;;341          xsize -= 2;
0003d4  1eb6              SUBS     r6,r6,#2
;;;342          pixels = *++p;
0003d6  f1090001          ADD      r0,r9,#1
0003da  4681              MOV      r9,r0
0003dc  7805              LDRB     r5,[r0,#0]
                  |L1.990|
0003de  2e02              CMP      r6,#2                 ;324
0003e0  dad8              BGE      |L1.916|
;;;343        }
;;;344        /* Draw incomplete bytes to the right of center area */
;;;345        if (xsize) {
0003e2  b166              CBZ      r6,|L1.1022|
;;;346          if (pixels >>= 4) {
0003e4  1128              ASRS     r0,r5,#4
0003e6  0005              MOVS     r5,r0
0003e8  d009              BEQ      |L1.1022|
;;;347            *pDest = *(pTrans + pixels);
0003ea  f8380015          LDRH     r0,[r8,r5,LSL #1]
0003ee  8020              STRH     r0,[r4,#0]
;;;348            if (pUsage) {
0003f0  b12f              CBZ      r7,|L1.1022|
;;;349              GUI_USAGE_AddPixel(pUsage, x, y);
0003f2  68b8              LDR      r0,[r7,#8]
0003f4  6803              LDR      r3,[r0,#0]
0003f6  4651              MOV      r1,r10
0003f8  4638              MOV      r0,r7
0003fa  9a03              LDR      r2,[sp,#0xc]
0003fc  4798              BLX      r3
                  |L1.1022|
;;;350            }
;;;351          }
;;;352        }
;;;353        break;
0003fe  e027              B        |L1.1104|
                  |L1.1024|
000400  e004              B        |L1.1036|
000402  0000              DCW      0x0000
                  |L1.1028|
                          DCD      GUI_Context
                  |L1.1032|
                          DCD      LCD_aMirror
                  |L1.1036|
;;;354      case LCD_DRAWMODE_XOR:;
;;;355      PixelLoopXor:
00040c  bf00              NOP      
                  |L1.1038|
;;;356        if (PixelCnt > xsize)
00040e  9800              LDR      r0,[sp,#0]
000410  42b0              CMP      r0,r6
000412  dd01              BLE      |L1.1048|
;;;357          PixelCnt = xsize;
000414  b2f0              UXTB     r0,r6
000416  9000              STR      r0,[sp,#0]
                  |L1.1048|
;;;358        xsize -= PixelCnt;
000418  9800              LDR      r0,[sp,#0]
00041a  1a36              SUBS     r6,r6,r0
;;;359        do {
00041c  bf00              NOP      
                  |L1.1054|
;;;360          if ((pixels & 0xc0)) {
00041e  f00500c0          AND      r0,r5,#0xc0
000422  b118              CBZ      r0,|L1.1068|
;;;361            *pDest ^= 255;
000424  8820              LDRH     r0,[r4,#0]
000426  f08000ff          EOR      r0,r0,#0xff
00042a  8020              STRH     r0,[r4,#0]
                  |L1.1068|
;;;362          }
;;;363          pDest++;
00042c  1ca4              ADDS     r4,r4,#2
;;;364          pixels <<= 4;
00042e  0728              LSLS     r0,r5,#28
000430  0e05              LSRS     r5,r0,#24
;;;365        } while (--PixelCnt);
000432  9800              LDR      r0,[sp,#0]
000434  1e40              SUBS     r0,r0,#1
000436  b2c0              UXTB     r0,r0
000438  9000              STR      r0,[sp,#0]
00043a  2800              CMP      r0,#0
00043c  d1ef              BNE      |L1.1054|
;;;366        if (xsize) {
00043e  b136              CBZ      r6,|L1.1102|
;;;367          PixelCnt = 2;
000440  2002              MOVS     r0,#2
000442  9000              STR      r0,[sp,#0]
;;;368          pixels = *(++p);
000444  f1090001          ADD      r0,r9,#1
000448  4681              MOV      r9,r0
00044a  7805              LDRB     r5,[r0,#0]
;;;369          goto PixelLoopXor;
00044c  e7df              B        |L1.1038|
                  |L1.1102|
;;;370        }
;;;371        break;
00044e  bf00              NOP      
                  |L1.1104|
000450  bf00              NOP                            ;305
;;;372      }
;;;373    }
000452  b005              ADD      sp,sp,#0x14
000454  e8bd8ff0          POP      {r4-r11,pc}
;;;374    
                          ENDP

                  _DrawBitLine8BPP PROC
;;;378    */
;;;379    static void _DrawBitLine8BPP(GUI_USAGE* pUsage, int x, int y, const U8 GUI_UNI_PTR * pSrc, int xsize,
000458  e92d47f0          PUSH     {r4-r10,lr}
;;;380                                 const LCD_PIXELINDEX* pTrans, PIXELINDEX* pDest) {
00045c  4606              MOV      r6,r0
00045e  460f              MOV      r7,r1
000460  4692              MOV      r10,r2
000462  461c              MOV      r4,r3
000464  e9dd8908          LDRD     r8,r9,[sp,#0x20]
000468  9d0a              LDR      r5,[sp,#0x28]
;;;381      switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
00046a  48fe              LDR      r0,|L1.2148|
00046c  7c00              LDRB     r0,[r0,#0x10]  ; GUI_Context
00046e  f0000003          AND      r0,r0,#3
000472  b110              CBZ      r0,|L1.1146|
000474  2802              CMP      r0,#2
000476  d124              BNE      |L1.1218|
000478  e00c              B        |L1.1172|
                  |L1.1146|
;;;382      case 0:    /* Write mode */
;;;383        do {
00047a  bf00              NOP      
                  |L1.1148|
;;;384          *pDest = *(pTrans + *pSrc);
00047c  7820              LDRB     r0,[r4,#0]
00047e  f8390010          LDRH     r0,[r9,r0,LSL #1]
000482  8028              STRH     r0,[r5,#0]
;;;385          pDest++;
000484  1cad              ADDS     r5,r5,#2
;;;386          pSrc++;
000486  1c64              ADDS     r4,r4,#1
;;;387        } while (--xsize);
000488  f1a80001          SUB      r0,r8,#1
00048c  ea5f0800          MOVS     r8,r0
000490  d1f4              BNE      |L1.1148|
;;;388        break;
000492  e016              B        |L1.1218|
                  |L1.1172|
;;;389      case LCD_DRAWMODE_TRANS:
;;;390        do {
000494  bf00              NOP      
                  |L1.1174|
;;;391          if (*pSrc) {
000496  7820              LDRB     r0,[r4,#0]
000498  b150              CBZ      r0,|L1.1200|
;;;392            *pDest = *(pTrans + *pSrc);
00049a  7820              LDRB     r0,[r4,#0]
00049c  f8390010          LDRH     r0,[r9,r0,LSL #1]
0004a0  8028              STRH     r0,[r5,#0]
;;;393            if (pUsage) {
0004a2  b12e              CBZ      r6,|L1.1200|
;;;394              GUI_USAGE_AddPixel(pUsage, x, y);
0004a4  68b0              LDR      r0,[r6,#8]
0004a6  4652              MOV      r2,r10
0004a8  4639              MOV      r1,r7
0004aa  6803              LDR      r3,[r0,#0]
0004ac  4630              MOV      r0,r6
0004ae  4798              BLX      r3
                  |L1.1200|
;;;395            }
;;;396          }
;;;397          x++;
0004b0  1c7f              ADDS     r7,r7,#1
;;;398          pDest++;
0004b2  1cad              ADDS     r5,r5,#2
;;;399          pSrc++;
0004b4  1c64              ADDS     r4,r4,#1
;;;400        } while (--xsize);
0004b6  f1a80001          SUB      r0,r8,#1
0004ba  ea5f0800          MOVS     r8,r0
0004be  d1ea              BNE      |L1.1174|
;;;401        break;
0004c0  bf00              NOP      
                  |L1.1218|
0004c2  bf00              NOP                            ;388
;;;402      }
;;;403    }
0004c4  e8bd87f0          POP      {r4-r10,pc}
;;;404    
                          ENDP

                  _DrawBitLine8BPP_DDB PROC
;;;420    */
;;;421    static void _DrawBitLine8BPP_DDB(GUI_USAGE* pUsage, int x, int y, const U8 GUI_UNI_PTR * pSrc, int xsize, PIXELINDEX* pDest) {
0004c8  e92d47f0          PUSH     {r4-r10,lr}
0004cc  4605              MOV      r5,r0
0004ce  460f              MOV      r7,r1
0004d0  4691              MOV      r9,r2
0004d2  461c              MOV      r4,r3
0004d4  e9dd8608          LDRD     r8,r6,[sp,#0x20]
;;;422      switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
0004d8  48e2              LDR      r0,|L1.2148|
0004da  7c00              LDRB     r0,[r0,#0x10]  ; GUI_Context
0004dc  f0000003          AND      r0,r0,#3
0004e0  b110              CBZ      r0,|L1.1256|
0004e2  2802              CMP      r0,#2
0004e4  d11b              BNE      |L1.1310|
0004e6  e005              B        |L1.1268|
                  |L1.1256|
;;;423      case 0:    /* Write mode */
;;;424        #if GUI_UNI_PTR_USED
;;;425          _Memcopy(pDest, pSrc, xsize);
;;;426        #else
;;;427          memcpy(pDest, pSrc, xsize);
0004e8  4642              MOV      r2,r8
0004ea  4621              MOV      r1,r4
0004ec  4630              MOV      r0,r6
0004ee  f7fffffe          BL       __aeabi_memcpy
;;;428        #endif
;;;429        break;
0004f2  e014              B        |L1.1310|
                  |L1.1268|
;;;430      case LCD_DRAWMODE_TRANS:
;;;431        do {
0004f4  bf00              NOP      
                  |L1.1270|
;;;432          if (*pSrc) {
0004f6  7820              LDRB     r0,[r4,#0]
0004f8  b140              CBZ      r0,|L1.1292|
;;;433            *pDest = *pSrc;
0004fa  7820              LDRB     r0,[r4,#0]
0004fc  8030              STRH     r0,[r6,#0]
;;;434            if (pUsage) {
0004fe  b12d              CBZ      r5,|L1.1292|
;;;435              GUI_USAGE_AddPixel(pUsage, x, y);
000500  68a8              LDR      r0,[r5,#8]
000502  464a              MOV      r2,r9
000504  4639              MOV      r1,r7
000506  6803              LDR      r3,[r0,#0]
000508  4628              MOV      r0,r5
00050a  4798              BLX      r3
                  |L1.1292|
;;;436            }
;;;437          }
;;;438          x++;
00050c  1c7f              ADDS     r7,r7,#1
;;;439          pDest++;
00050e  1cb6              ADDS     r6,r6,#2
;;;440          pSrc++;
000510  1c64              ADDS     r4,r4,#1
;;;441        } while (--xsize);
000512  f1a80001          SUB      r0,r8,#1
000516  ea5f0800          MOVS     r8,r0
00051a  d1ec              BNE      |L1.1270|
;;;442        break;
00051c  bf00              NOP      
                  |L1.1310|
00051e  bf00              NOP                            ;429
;;;443      }
;;;444    }
000520  e8bd87f0          POP      {r4-r10,pc}
;;;445    
                          ENDP

                  _DrawBitmap PROC
;;;449    */
;;;450    static void _DrawBitmap(int x0, int y0, int xsize, int ysize,
000524  e92d4fff          PUSH     {r0-r11,lr}
;;;451                            int BitsPerPixel, int BytesPerLine,
;;;452                            const U8 GUI_UNI_PTR * pData, int Diff, const LCD_PIXELINDEX* pTrans)
;;;453    {
000528  b089              SUB      sp,sp,#0x24
00052a  460e              MOV      r6,r1
00052c  4617              MOV      r7,r2
00052e  4699              MOV      r9,r3
000530  e9ddab18          LDRD     r10,r11,[sp,#0x60]
000534  f8dd8068          LDR      r8,[sp,#0x68]
;;;454      int i;
;;;455      GUI_MEMDEV* pDev   = GUI_MEMDEV_H2P(GUI_Context.hDevData);
000538  49ca              LDR      r1,|L1.2148|
00053a  f9b1004c          LDRSH    r0,[r1,#0x4c]  ; GUI_Context
00053e  f7fffffe          BL       GUI_ALLOC_h2p
000542  9008              STR      r0,[sp,#0x20]
;;;456      GUI_USAGE*  pUsage = (pDev->hUsage) ? GUI_USAGE_H2P(pDev->hUsage) : 0;
000544  9808              LDR      r0,[sp,#0x20]
000546  8b00              LDRH     r0,[r0,#0x18]
000548  b128              CBZ      r0,|L1.1366|
00054a  9908              LDR      r1,[sp,#0x20]
00054c  f9b10018          LDRSH    r0,[r1,#0x18]
000550  f7fffffe          BL       GUI_ALLOC_h2p
000554  e000              B        |L1.1368|
                  |L1.1366|
000556  2000              MOVS     r0,#0
                  |L1.1368|
000558  9007              STR      r0,[sp,#0x1c]
;;;457      unsigned    BytesPerLineDest;
;;;458      PIXELINDEX* pDest;
;;;459      BytesPerLineDest = pDev->BytesPerLine;
00055a  9808              LDR      r0,[sp,#0x20]
00055c  68c0              LDR      r0,[r0,#0xc]
00055e  9006              STR      r0,[sp,#0x18]
;;;460      x0 += Diff;
000560  9809              LDR      r0,[sp,#0x24]
000562  4458              ADD      r0,r0,r11
000564  9009              STR      r0,[sp,#0x24]
;;;461      /* Mark all affected pixels dirty unless transparency is set */
;;;462      if (pUsage) {
000566  9807              LDR      r0,[sp,#0x1c]
000568  b160              CBZ      r0,|L1.1412|
;;;463        if ((GUI_Context.DrawMode & LCD_DRAWMODE_TRANS) == 0) {
00056a  48be              LDR      r0,|L1.2148|
00056c  7c00              LDRB     r0,[r0,#0x10]  ; GUI_Context
00056e  f0000002          AND      r0,r0,#2
000572  b938              CBNZ     r0,|L1.1412|
;;;464          GUI_USAGE_AddRect(pUsage, x0, y0 , xsize, ysize);
000574  463b              MOV      r3,r7
000576  4632              MOV      r2,r6
000578  f8cd9000          STR      r9,[sp,#0]
00057c  9909              LDR      r1,[sp,#0x24]
00057e  9807              LDR      r0,[sp,#0x1c]
000580  f7fffffe          BL       GUI_USAGE_AddRect
                  |L1.1412|
;;;465        }
;;;466      }
;;;467      pDest = _XY2PTR(x0, y0);
000584  4631              MOV      r1,r6
000586  9809              LDR      r0,[sp,#0x24]
000588  f7fffffe          BL       _XY2PTR
00058c  4605              MOV      r5,r0
;;;468    #if BITSPERPIXEL == 16
;;;469      /* handle 16 bpp bitmaps in high color modes, but only without palette */
;;;470      if (BitsPerPixel == 16) {
00058e  9816              LDR      r0,[sp,#0x58]
000590  2810              CMP      r0,#0x10
000592  d113              BNE      |L1.1468|
;;;471        for (i = 0; i < ysize; i++) {
000594  2400              MOVS     r4,#0
000596  e00c              B        |L1.1458|
                  |L1.1432|
;;;472          _DrawBitLine16BPP_DDB(pUsage, x0, i + y0, (const U16*)pData, xsize, pDest);
000598  19a2              ADDS     r2,r4,r6
00059a  4653              MOV      r3,r10
00059c  e9cd7500          STRD     r7,r5,[sp,#0]
0005a0  9909              LDR      r1,[sp,#0x24]
0005a2  9807              LDR      r0,[sp,#0x1c]
0005a4  f7fffffe          BL       _DrawBitLine16BPP_DDB
;;;473          pData += BytesPerLine;
0005a8  9817              LDR      r0,[sp,#0x5c]
0005aa  4482              ADD      r10,r10,r0
;;;474          pDest = (PIXELINDEX*)((U8*)pDest + BytesPerLineDest); 
0005ac  9806              LDR      r0,[sp,#0x18]
0005ae  4405              ADD      r5,r5,r0
0005b0  1c64              ADDS     r4,r4,#1              ;471
                  |L1.1458|
0005b2  454c              CMP      r4,r9                 ;471
0005b4  dbf0              BLT      |L1.1432|
                  |L1.1462|
;;;475        }
;;;476        return;
;;;477      }
;;;478    #endif
;;;479      /* Handle 8 bpp bitmaps seperately as we have different routine bitmaps with or without palette */
;;;480      if (BitsPerPixel == 8) {
;;;481        for (i = 0; i < ysize; i++) {
;;;482          if (pTrans) {
;;;483            _DrawBitLine8BPP(pUsage, x0, i + y0, pData, xsize, pTrans, pDest);
;;;484          } else {
;;;485            _DrawBitLine8BPP_DDB(pUsage, x0, i + y0, pData, xsize, pDest);
;;;486          }
;;;487          pData += BytesPerLine;
;;;488          pDest = (PIXELINDEX*)((U8*)pDest + BytesPerLineDest); 
;;;489        }
;;;490        return;
;;;491      }
;;;492      /* Use aID for bitmaps without palette */
;;;493      if (!pTrans) {
;;;494        pTrans = aID;
;;;495      }
;;;496      for (i = 0; i < ysize; i++) {
;;;497        switch (BitsPerPixel) {
;;;498        case 1:
;;;499          _DrawBitLine1BPP(pUsage, x0, i + y0, pData, Diff, xsize, pTrans, pDev, pDest);
;;;500          break;
;;;501        case 2:
;;;502          _DrawBitLine2BPP(pUsage, x0, i + y0, pData, Diff, xsize, pTrans, pDest);
;;;503          break;
;;;504        case 4:
;;;505          _DrawBitLine4BPP(pUsage, x0, i + y0, pData, Diff, xsize, pTrans, pDest);
;;;506          break;
;;;507        }
;;;508        pData += BytesPerLine;
;;;509        pDest = (PIXELINDEX*)((U8*)pDest + BytesPerLineDest); 
;;;510      }
;;;511    }
0005b6  b00d              ADD      sp,sp,#0x34
0005b8  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.1468|
0005bc  9816              LDR      r0,[sp,#0x58]         ;480
0005be  2808              CMP      r0,#8                 ;480
0005c0  d11e              BNE      |L1.1536|
0005c2  2400              MOVS     r4,#0                 ;481
0005c4  e019              B        |L1.1530|
                  |L1.1478|
0005c6  f1b80f00          CMP      r8,#0                 ;482
0005ca  d009              BEQ      |L1.1504|
0005cc  19a2              ADDS     r2,r4,r6              ;483
0005ce  4653              MOV      r3,r10                ;483
0005d0  e9cd7800          STRD     r7,r8,[sp,#0]         ;483
0005d4  9502              STR      r5,[sp,#8]            ;483
0005d6  9909              LDR      r1,[sp,#0x24]         ;483
0005d8  9807              LDR      r0,[sp,#0x1c]         ;483
0005da  f7fffffe          BL       _DrawBitLine8BPP
0005de  e007              B        |L1.1520|
                  |L1.1504|
0005e0  19a2              ADDS     r2,r4,r6              ;485
0005e2  4653              MOV      r3,r10                ;485
0005e4  e9cd7500          STRD     r7,r5,[sp,#0]         ;485
0005e8  9909              LDR      r1,[sp,#0x24]         ;485
0005ea  9807              LDR      r0,[sp,#0x1c]         ;485
0005ec  f7fffffe          BL       _DrawBitLine8BPP_DDB
                  |L1.1520|
0005f0  9817              LDR      r0,[sp,#0x5c]         ;487
0005f2  4482              ADD      r10,r10,r0            ;487
0005f4  9806              LDR      r0,[sp,#0x18]         ;488
0005f6  4405              ADD      r5,r5,r0              ;488
0005f8  1c64              ADDS     r4,r4,#1              ;481
                  |L1.1530|
0005fa  454c              CMP      r4,r9                 ;481
0005fc  dbe3              BLT      |L1.1478|
0005fe  e7da              B        |L1.1462|
                  |L1.1536|
000600  f1b80f00          CMP      r8,#0                 ;493
000604  d101              BNE      |L1.1546|
000606  f8df8260          LDR      r8,|L1.2152|
                  |L1.1546|
00060a  2400              MOVS     r4,#0                 ;496
00060c  e030              B        |L1.1648|
                  |L1.1550|
00060e  9816              LDR      r0,[sp,#0x58]         ;497
000610  2801              CMP      r0,#1                 ;497
000612  d004              BEQ      |L1.1566|
000614  2802              CMP      r0,#2                 ;497
000616  d00f              BEQ      |L1.1592|
000618  2804              CMP      r0,#4                 ;497
00061a  d123              BNE      |L1.1636|
00061c  e017              B        |L1.1614|
                  |L1.1566|
00061e  9808              LDR      r0,[sp,#0x20]         ;499
000620  19a2              ADDS     r2,r4,r6              ;499
000622  4653              MOV      r3,r10                ;499
000624  e9cdb700          STRD     r11,r7,[sp,#0]        ;499
000628  e9cd8002          STRD     r8,r0,[sp,#8]         ;499
00062c  9504              STR      r5,[sp,#0x10]         ;499
00062e  9909              LDR      r1,[sp,#0x24]         ;499
000630  9807              LDR      r0,[sp,#0x1c]         ;499
000632  f7fffffe          BL       _DrawBitLine1BPP
000636  e015              B        |L1.1636|
                  |L1.1592|
000638  19a2              ADDS     r2,r4,r6              ;502
00063a  4653              MOV      r3,r10                ;502
00063c  e9cdb700          STRD     r11,r7,[sp,#0]        ;502
000640  e9cd8502          STRD     r8,r5,[sp,#8]         ;502
000644  9909              LDR      r1,[sp,#0x24]         ;502
000646  9807              LDR      r0,[sp,#0x1c]         ;502
000648  f7fffffe          BL       _DrawBitLine2BPP
00064c  e00a              B        |L1.1636|
                  |L1.1614|
00064e  19a2              ADDS     r2,r4,r6              ;505
000650  4653              MOV      r3,r10                ;505
000652  e9cdb700          STRD     r11,r7,[sp,#0]        ;505
000656  e9cd8502          STRD     r8,r5,[sp,#8]         ;505
00065a  9909              LDR      r1,[sp,#0x24]         ;505
00065c  9807              LDR      r0,[sp,#0x1c]         ;505
00065e  f7fffffe          BL       _DrawBitLine4BPP
000662  bf00              NOP                            ;506
                  |L1.1636|
000664  bf00              NOP                            ;500
000666  9817              LDR      r0,[sp,#0x5c]         ;508
000668  4482              ADD      r10,r10,r0            ;508
00066a  9806              LDR      r0,[sp,#0x18]         ;509
00066c  4405              ADD      r5,r5,r0              ;509
00066e  1c64              ADDS     r4,r4,#1              ;496
                  |L1.1648|
000670  454c              CMP      r4,r9                 ;496
000672  dbcc              BLT      |L1.1550|
000674  bf00              NOP      
000676  e79e              B        |L1.1462|
;;;512    
                          ENDP

                  _FillRect PROC
;;;516    */
;;;517    static void _FillRect(int x0, int y0, int x1, int y1) {
000678  e92d4ffe          PUSH     {r1-r11,lr}
00067c  4606              MOV      r6,r0
00067e  460c              MOV      r4,r1
000680  4693              MOV      r11,r2
000682  461f              MOV      r7,r3
;;;518      unsigned BytesPerLine;
;;;519      int Len;
;;;520      GUI_MEMDEV* pDev   = GUI_MEMDEV_H2P(GUI_Context.hDevData);
000684  4977              LDR      r1,|L1.2148|
000686  f9b1004c          LDRSH    r0,[r1,#0x4c]  ; GUI_Context
00068a  f7fffffe          BL       GUI_ALLOC_h2p
00068e  4605              MOV      r5,r0
;;;521      PIXELINDEX* pData  = _XY2PTR(x0, y0);
000690  4621              MOV      r1,r4
000692  4630              MOV      r0,r6
000694  f7fffffe          BL       _XY2PTR
000698  4681              MOV      r9,r0
;;;522      BytesPerLine = pDev->BytesPerLine;
00069a  68e8              LDR      r0,[r5,#0xc]
00069c  9002              STR      r0,[sp,#8]
;;;523      Len = x1 - x0 + 1;
00069e  ebab0006          SUB      r0,r11,r6
0006a2  f1000801          ADD      r8,r0,#1
;;;524      /* Mark rectangle as modified */
;;;525      if (pDev->hUsage) {
0006a6  8b28              LDRH     r0,[r5,#0x18]
0006a8  b168              CBZ      r0,|L1.1734|
;;;526        GUI_USAGE_AddRect(GUI_USAGE_H2P(pDev->hUsage), x0, y0, Len, y1 - y0 + 1);
0006aa  f9b50018          LDRSH    r0,[r5,#0x18]
0006ae  f7fffffe          BL       GUI_ALLOC_h2p
0006b2  4682              MOV      r10,r0
0006b4  1b38              SUBS     r0,r7,r4
0006b6  1c40              ADDS     r0,r0,#1
0006b8  4643              MOV      r3,r8
0006ba  4622              MOV      r2,r4
0006bc  4631              MOV      r1,r6
0006be  9000              STR      r0,[sp,#0]
0006c0  4650              MOV      r0,r10
0006c2  f7fffffe          BL       GUI_USAGE_AddRect
                  |L1.1734|
;;;527      }
;;;528      /* Do the drawing */
;;;529      for (; y0 <= y1; y0++) {
0006c6  e023              B        |L1.1808|
                  |L1.1736|
;;;530        if (GUI_Context.DrawMode & LCD_DRAWMODE_XOR) {
0006c8  4866              LDR      r0,|L1.2148|
0006ca  7c00              LDRB     r0,[r0,#0x10]  ; GUI_Context
0006cc  f0000001          AND      r0,r0,#1
0006d0  b1a8              CBZ      r0,|L1.1790|
;;;531          int RemPixels;
;;;532          PIXELINDEX* pDest;
;;;533          PIXELINDEX IndexMask;
;;;534          RemPixels = Len;
0006d2  f8cd8004          STR      r8,[sp,#4]
;;;535          pDest  = pData;
0006d6  46ca              MOV      r10,r9
;;;536          IndexMask = pDev->pfGetIndexMask();
0006d8  6a68              LDR      r0,[r5,#0x24]
0006da  4780              BLX      r0
0006dc  b280              UXTH     r0,r0
0006de  9000              STR      r0,[sp,#0]
;;;537          do {
0006e0  bf00              NOP      
                  |L1.1762|
;;;538            *pDest = *pDest ^ IndexMask;
0006e2  f8ba0000          LDRH     r0,[r10,#0]
0006e6  9900              LDR      r1,[sp,#0]
0006e8  4048              EORS     r0,r0,r1
0006ea  f8aa0000          STRH     r0,[r10,#0]
;;;539            pDest++;
0006ee  f10a0a02          ADD      r10,r10,#2
;;;540          } while (--RemPixels);
0006f2  9801              LDR      r0,[sp,#4]
0006f4  1e40              SUBS     r0,r0,#1
0006f6  9001              STR      r0,[sp,#4]
0006f8  2800              CMP      r0,#0
0006fa  d1f2              BNE      |L1.1762|
;;;541        } else {  /* Fill */
0006fc  e005              B        |L1.1802|
                  |L1.1790|
;;;542          #if BITSPERPIXEL == 8
;;;543            GUI_MEMSET(pData, LCD_COLORINDEX, Len);
;;;544          #elif BITSPERPIXEL == 16
;;;545            GUI__memset16(pData, LCD_COLORINDEX, Len);
0006fe  4859              LDR      r0,|L1.2148|
000700  8841              LDRH     r1,[r0,#2]  ; GUI_Context
000702  4642              MOV      r2,r8
000704  4648              MOV      r0,r9
000706  f7fffffe          BL       GUI__memset16
                  |L1.1802|
;;;546          #else
;;;547            #error Unsupported
;;;548          #endif
;;;549        }
;;;550        pData = (PIXELINDEX*)((U8*)pData + BytesPerLine); 
00070a  9802              LDR      r0,[sp,#8]
00070c  4481              ADD      r9,r9,r0
00070e  1c64              ADDS     r4,r4,#1              ;529
                  |L1.1808|
000710  42bc              CMP      r4,r7                 ;529
000712  ddd9              BLE      |L1.1736|
;;;551      }
;;;552    }
000714  e8bd8ffe          POP      {r1-r11,pc}
;;;553    
                          ENDP

                  _DrawHLine PROC
;;;557    */
;;;558    static void _DrawHLine(int x0, int y, int x1) {
000718  b570              PUSH     {r4-r6,lr}
00071a  4605              MOV      r5,r0
00071c  460c              MOV      r4,r1
00071e  4616              MOV      r6,r2
;;;559      _FillRect(x0, y, x1, y);
000720  4623              MOV      r3,r4
000722  4632              MOV      r2,r6
000724  4621              MOV      r1,r4
000726  4628              MOV      r0,r5
000728  f7fffffe          BL       _FillRect
;;;560    }
00072c  bd70              POP      {r4-r6,pc}
;;;561    
                          ENDP

                  _DrawVLine PROC
;;;565    */
;;;566    static void _DrawVLine(int x , int y0, int y1) {
00072e  e92d4ff8          PUSH     {r3-r11,lr}
000732  4683              MOV      r11,r0
000734  460d              MOV      r5,r1
000736  4616              MOV      r6,r2
;;;567      GUI_MEMDEV* pDev   = GUI_MEMDEV_H2P(GUI_Context.hDevData);
000738  494a              LDR      r1,|L1.2148|
00073a  f9b1004c          LDRSH    r0,[r1,#0x4c]  ; GUI_Context
00073e  f7fffffe          BL       GUI_ALLOC_h2p
000742  4607              MOV      r7,r0
;;;568      GUI_USAGE_h hUsage = pDev->hUsage; 
000744  f9b78018          LDRSH    r8,[r7,#0x18]
;;;569      GUI_USAGE*  pUsage = hUsage ? GUI_USAGE_H2P(hUsage) : NULL;
000748  f1b80f00          CMP      r8,#0
00074c  d003              BEQ      |L1.1878|
00074e  4640              MOV      r0,r8
000750  f7fffffe          BL       GUI_ALLOC_h2p
000754  e000              B        |L1.1880|
                  |L1.1878|
000756  2000              MOVS     r0,#0
                  |L1.1880|
000758  4681              MOV      r9,r0
;;;570      PIXELINDEX* pData  = _XY2PTR(x, y0);
00075a  4629              MOV      r1,r5
00075c  4658              MOV      r0,r11
00075e  f7fffffe          BL       _XY2PTR
000762  4604              MOV      r4,r0
;;;571      unsigned BytesPerLine = pDev->BytesPerLine;
000764  f8d7a00c          LDR      r10,[r7,#0xc]
;;;572    
;;;573      if (GUI_Context.DrawMode & LCD_DRAWMODE_XOR) {
000768  483e              LDR      r0,|L1.2148|
00076a  7c00              LDRB     r0,[r0,#0x10]  ; GUI_Context
00076c  f0000001          AND      r0,r0,#1
000770  b1c8              CBZ      r0,|L1.1958|
;;;574        PIXELINDEX IndexMask;
;;;575        IndexMask = pDev->pfGetIndexMask();
000772  6a78              LDR      r0,[r7,#0x24]
000774  4780              BLX      r0
000776  b280              UXTH     r0,r0
000778  9000              STR      r0,[sp,#0]
;;;576        do {
00077a  bf00              NOP      
                  |L1.1916|
;;;577          if (hUsage) {
00077c  f1b80f00          CMP      r8,#0
000780  d006              BEQ      |L1.1936|
;;;578            GUI_USAGE_AddPixel(pUsage, x, y0);
000782  f8d90008          LDR      r0,[r9,#8]
000786  462a              MOV      r2,r5
000788  4659              MOV      r1,r11
00078a  6803              LDR      r3,[r0,#0]
00078c  4648              MOV      r0,r9
00078e  4798              BLX      r3
                  |L1.1936|
;;;579          }
;;;580          *pData = *pData ^ IndexMask;
000790  8820              LDRH     r0,[r4,#0]
000792  9900              LDR      r1,[sp,#0]
000794  4048              EORS     r0,r0,r1
000796  8020              STRH     r0,[r4,#0]
;;;581          pData = (PIXELINDEX*)((U8*)pData + pDev->BytesPerLine); /* Same as "pData += pDev->BytesPerLine >> 1;", Just more efficient */
000798  68f8              LDR      r0,[r7,#0xc]
00079a  4404              ADD      r4,r4,r0
;;;582        } while (++y0 <= y1);
00079c  1c68              ADDS     r0,r5,#1
00079e  4605              MOV      r5,r0
0007a0  42b0              CMP      r0,r6
0007a2  ddeb              BLE      |L1.1916|
;;;583      } else {
0007a4  e01e              B        |L1.2020|
                  |L1.1958|
;;;584        if (hUsage) {
0007a6  f1b80f00          CMP      r8,#0
0007aa  d010              BEQ      |L1.1998|
;;;585          do {
0007ac  bf00              NOP      
                  |L1.1966|
;;;586            GUI_USAGE_AddPixel(pUsage, x, y0);
0007ae  f8d90008          LDR      r0,[r9,#8]
0007b2  462a              MOV      r2,r5
0007b4  4659              MOV      r1,r11
0007b6  6803              LDR      r3,[r0,#0]
0007b8  4648              MOV      r0,r9
0007ba  4798              BLX      r3
;;;587            *pData = LCD_COLORINDEX;
0007bc  4829              LDR      r0,|L1.2148|
0007be  8840              LDRH     r0,[r0,#2]  ; GUI_Context
0007c0  8020              STRH     r0,[r4,#0]
;;;588            pData = (PIXELINDEX*)((U8*)pData + BytesPerLine); /* Same as "pData += pDev->BytesPerLine >> 1;", Just more efficient */
0007c2  4454              ADD      r4,r4,r10
;;;589          } while (++y0 <= y1);
0007c4  1c68              ADDS     r0,r5,#1
0007c6  4605              MOV      r5,r0
0007c8  42b0              CMP      r0,r6
0007ca  ddf0              BLE      |L1.1966|
0007cc  e00a              B        |L1.2020|
                  |L1.1998|
;;;590        } else {
;;;591          unsigned NumPixels;
;;;592          NumPixels = y1 - y0 + 1;
0007ce  1b71              SUBS     r1,r6,r5
0007d0  1c48              ADDS     r0,r1,#1
;;;593          do {
0007d2  bf00              NOP      
                  |L1.2004|
;;;594            *pData = LCD_COLORINDEX;
0007d4  4923              LDR      r1,|L1.2148|
0007d6  8849              LDRH     r1,[r1,#2]  ; GUI_Context
0007d8  8021              STRH     r1,[r4,#0]
;;;595            pData = (PIXELINDEX*)((U8*)pData + BytesPerLine); /* Same as "pData += pDev->BytesPerLine >> 1;", Just more efficient */
0007da  4454              ADD      r4,r4,r10
;;;596          } while (--NumPixels);
0007dc  1e41              SUBS     r1,r0,#1
0007de  0008              MOVS     r0,r1
0007e0  d1f8              BNE      |L1.2004|
;;;597        }
0007e2  bf00              NOP      
                  |L1.2020|
;;;598      }
;;;599    }
0007e4  e8bd8ff8          POP      {r3-r11,pc}
;;;600    
                          ENDP

                  _SetPixelIndex PROC
;;;604    */
;;;605    static void _SetPixelIndex(int x, int y, int Index) {
0007e8  e92d5ff0          PUSH     {r4-r12,lr}
0007ec  4604              MOV      r4,r0
0007ee  460d              MOV      r5,r1
0007f0  4616              MOV      r6,r2
;;;606      GUI_MEMDEV* pDev = GUI_MEMDEV_H2P(GUI_Context.hDevData);
0007f2  491c              LDR      r1,|L1.2148|
0007f4  f9b1004c          LDRSH    r0,[r1,#0x4c]  ; GUI_Context
0007f8  f7fffffe          BL       GUI_ALLOC_h2p
0007fc  4680              MOV      r8,r0
;;;607      GUI_USAGE_h hUsage = pDev->hUsage; 
0007fe  f9b87018          LDRSH    r7,[r8,#0x18]
;;;608      PIXELINDEX* pData = _XY2PTR(x, y);
000802  4629              MOV      r1,r5
000804  4620              MOV      r0,r4
000806  f7fffffe          BL       _XY2PTR
00080a  4681              MOV      r9,r0
;;;609      *pData = Index;
00080c  f8a96000          STRH     r6,[r9,#0]
;;;610      if (hUsage) {
000810  b16f              CBZ      r7,|L1.2094|
;;;611        GUI_USAGE_AddPixel(GUI_USAGE_H2P(hUsage), x, y);
000812  4638              MOV      r0,r7
000814  f7fffffe          BL       GUI_ALLOC_h2p
000818  4683              MOV      r11,r0
00081a  4638              MOV      r0,r7
00081c  f7fffffe          BL       GUI_ALLOC_h2p
000820  6880              LDR      r0,[r0,#8]
000822  462a              MOV      r2,r5
000824  4621              MOV      r1,r4
000826  f8d0a000          LDR      r10,[r0,#0]
00082a  4658              MOV      r0,r11
00082c  47d0              BLX      r10
                  |L1.2094|
;;;612      }
;;;613    }
00082e  e8bd9ff0          POP      {r4-r12,pc}
;;;614    
                          ENDP

                  _XorPixel PROC
;;;618    */
;;;619    static void _XorPixel(int x, int y) {
000832  e92d5ff0          PUSH     {r4-r12,lr}
000836  4604              MOV      r4,r0
000838  460d              MOV      r5,r1
;;;620      PIXELINDEX IndexMask;
;;;621      GUI_MEMDEV* pDev = GUI_MEMDEV_H2P(GUI_Context.hDevData);
00083a  490a              LDR      r1,|L1.2148|
00083c  f9b1004c          LDRSH    r0,[r1,#0x4c]  ; GUI_Context
000840  f7fffffe          BL       GUI_ALLOC_h2p
000844  4606              MOV      r6,r0
;;;622      GUI_USAGE_h hUsage = pDev->hUsage; 
000846  f9b67018          LDRSH    r7,[r6,#0x18]
;;;623      PIXELINDEX* pData = _XY2PTR(x, y);
00084a  4629              MOV      r1,r5
00084c  4620              MOV      r0,r4
00084e  f7fffffe          BL       _XY2PTR
000852  4680              MOV      r8,r0
;;;624      IndexMask = pDev->pfGetIndexMask();
000854  6a70              LDR      r0,[r6,#0x24]
000856  4780              BLX      r0
000858  fa1ff980          UXTH     r9,r0
;;;625      *pData = *pData ^ IndexMask;
00085c  f8b80000          LDRH     r0,[r8,#0]
000860  e004              B        |L1.2156|
000862  0000              DCW      0x0000
                  |L1.2148|
                          DCD      GUI_Context
                  |L1.2152|
                          DCD      aID
                  |L1.2156|
00086c  ea800009          EOR      r0,r0,r9
000870  f8a80000          STRH     r0,[r8,#0]
;;;626      if (hUsage) {
000874  b16f              CBZ      r7,|L1.2194|
;;;627        GUI_USAGE_AddPixel(GUI_USAGE_H2P(hUsage), x, y);
000876  4638              MOV      r0,r7
000878  f7fffffe          BL       GUI_ALLOC_h2p
00087c  4683              MOV      r11,r0
00087e  4638              MOV      r0,r7
000880  f7fffffe          BL       GUI_ALLOC_h2p
000884  6880              LDR      r0,[r0,#8]
000886  462a              MOV      r2,r5
000888  4621              MOV      r1,r4
00088a  f8d0a000          LDR      r10,[r0,#0]
00088e  4658              MOV      r0,r11
000890  47d0              BLX      r10
                  |L1.2194|
;;;628      }
;;;629    }
000892  e8bd9ff0          POP      {r4-r12,pc}
;;;630    
                          ENDP

                  _GetPixelIndex PROC
;;;634    */
;;;635    static unsigned int _GetPixelIndex(int x, int y) {
000896  b570              PUSH     {r4-r6,lr}
000898  4604              MOV      r4,r0
00089a  460d              MOV      r5,r1
;;;636      PIXELINDEX* pData = _XY2PTR(x, y);
00089c  4629              MOV      r1,r5
00089e  4620              MOV      r0,r4
0008a0  f7fffffe          BL       _XY2PTR
0008a4  4606              MOV      r6,r0
;;;637      return *pData;
0008a6  8830              LDRH     r0,[r6,#0]
;;;638    }
0008a8  bd70              POP      {r4-r6,pc}
;;;639    
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  aID
000000  00000001          DCW      0x0000,0x0001
000004  00020003          DCW      0x0002,0x0003
000008  00040005          DCW      0x0004,0x0005
00000c  00060007          DCW      0x0006,0x0007
000010  00080009          DCW      0x0008,0x0009
000014  000a000b          DCW      0x000a,0x000b
000018  000c000d          DCW      0x000c,0x000d
00001c  000e000f          DCW      0x000e,0x000f
                  GUI_MEMDEV__APIList16
                          DCD      GUI_MEMDEV__Color2Index
                          DCD      GUI_MEMDEV__Index2Color
                          DCD      GUI_MEMDEV__GetIndexMask
                          DCD      _DrawBitmap
                          DCD      _DrawHLine
                          DCD      _DrawVLine
                          DCD      _FillRect
                          DCD      _GetPixelIndex
                          DCD      GUI_MEMDEV__GetRect
                          DCD      _SetPixelIndex
                          DCD      _XorPixel
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000010
