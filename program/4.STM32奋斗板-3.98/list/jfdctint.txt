; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\jfdctint.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\jfdctint.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -I.\GUI\AntiAlias -I.\GUI\Config -I.\GUI\ConvertColor -I.\GUI\ConvertMono -I.\GUI\Core -I.\GUI\Font -I.\GUI\GUI_X -I.\GUI\JPEG -I.\GUI\LCDDriver -I.\GUI\MemDev -I.\GUI\MultiLayer -I.\GUI\Widget -I.\GUI\WM -IC:\Users\Administrator\Desktop\gui\STM32·Ü¶·°å-3.98\RTE -Id:\Keil_v5\ARM\PACK\ARM\CMSIS\4.3.0\CMSIS\Include -Id:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.1.0\Device\Include -D__UVISION_VERSION=515 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\jfdctint.crf GUI\JPEG\jfdctint.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  jpeg_fdct_islow PROC
;;;139    GLOBAL(void)
;;;140    jpeg_fdct_islow (DCTELEM * data)
000000  e92d4ff1          PUSH     {r0,r4-r11,lr}
;;;141    {
000004  b087              SUB      sp,sp,#0x1c
;;;142      INT32 tmp0, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7;
;;;143      INT32 tmp10, tmp11, tmp12, tmp13;
;;;144      INT32 z1, z2, z3, z4, z5;
;;;145      DCTELEM *dataptr;
;;;146      int ctr;
;;;147      SHIFT_TEMPS
;;;148    
;;;149      /* Pass 1: process rows. */
;;;150      /* Note results are scaled up by sqrt(8) compared to a true DCT; */
;;;151      /* furthermore, we scale the results by 2**PASS1_BITS. */
;;;152    
;;;153      dataptr = data;
000006  9807              LDR      r0,[sp,#0x1c]
;;;154      for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
000008  f04f0b07          MOV      r11,#7
00000c  f8cdb000          STR      r11,[sp,#0]
000010  e0d3              B        |L1.442|
                  |L1.18|
;;;155        tmp0 = dataptr[0] + dataptr[7];
000012  f8d0e01c          LDR      lr,[r0,#0x1c]
000016  f8d0b000          LDR      r11,[r0,#0]
00001a  eb0b0c0e          ADD      r12,r11,lr
;;;156        tmp7 = dataptr[0] - dataptr[7];
00001e  f8d0e01c          LDR      lr,[r0,#0x1c]
000022  f8d0b000          LDR      r11,[r0,#0]
000026  ebab070e          SUB      r7,r11,lr
;;;157        tmp1 = dataptr[1] + dataptr[6];
00002a  f8d0e018          LDR      lr,[r0,#0x18]
00002e  f8d0b004          LDR      r11,[r0,#4]
000032  eb0b080e          ADD      r8,r11,lr
;;;158        tmp6 = dataptr[1] - dataptr[6];
000036  f8d0e018          LDR      lr,[r0,#0x18]
00003a  f8d0b004          LDR      r11,[r0,#4]
00003e  ebab060e          SUB      r6,r11,lr
;;;159        tmp2 = dataptr[2] + dataptr[5];
000042  f8d0e014          LDR      lr,[r0,#0x14]
000046  f8d0b008          LDR      r11,[r0,#8]
00004a  eb0b090e          ADD      r9,r11,lr
;;;160        tmp5 = dataptr[2] - dataptr[5];
00004e  f8d0e014          LDR      lr,[r0,#0x14]
000052  f8d0b008          LDR      r11,[r0,#8]
000056  ebab050e          SUB      r5,r11,lr
;;;161        tmp3 = dataptr[3] + dataptr[4];
00005a  e9d0be03          LDRD     r11,lr,[r0,#0xc]
00005e  eb0b0a0e          ADD      r10,r11,lr
;;;162        tmp4 = dataptr[3] - dataptr[4];
000062  e9d0be03          LDRD     r11,lr,[r0,#0xc]
000066  ebab040e          SUB      r4,r11,lr
;;;163        
;;;164        /* Even part per LL&M figure 1 --- note that published figure is faulty;
;;;165         * rotator "sqrt(2)*c1" should be "sqrt(2)*c6".
;;;166         */
;;;167        
;;;168        tmp10 = tmp0 + tmp3;
00006a  eb0c0b0a          ADD      r11,r12,r10
00006e  f8cdb018          STR      r11,[sp,#0x18]
;;;169        tmp13 = tmp0 - tmp3;
000072  ebac0b0a          SUB      r11,r12,r10
000076  f8cdb00c          STR      r11,[sp,#0xc]
;;;170        tmp11 = tmp1 + tmp2;
00007a  eb080b09          ADD      r11,r8,r9
00007e  f8cdb014          STR      r11,[sp,#0x14]
;;;171        tmp12 = tmp1 - tmp2;
000082  eba80b09          SUB      r11,r8,r9
000086  f8cdb010          STR      r11,[sp,#0x10]
;;;172        
;;;173        dataptr[0] = (DCTELEM) ((tmp10 + tmp11) << PASS1_BITS);
00008a  e9ddeb05          LDRD     lr,r11,[sp,#0x14]
00008e  44f3              ADD      r11,r11,lr
000090  ea4f0b8b          LSL      r11,r11,#2
000094  f8c0b000          STR      r11,[r0,#0]
;;;174        dataptr[4] = (DCTELEM) ((tmp10 - tmp11) << PASS1_BITS);
000098  e9ddeb05          LDRD     lr,r11,[sp,#0x14]
00009c  ebab0b0e          SUB      r11,r11,lr
0000a0  ea4f0b8b          LSL      r11,r11,#2
0000a4  f8c0b010          STR      r11,[r0,#0x10]
;;;175        
;;;176        z1 = MULTIPLY(tmp12 + tmp13, FIX_0_541196100);
0000a8  e9ddeb03          LDRD     lr,r11,[sp,#0xc]
0000ac  44f3              ADD      r11,r11,lr
0000ae  f2411e51          MOV      lr,#0x1151
0000b2  fb0bf10e          MUL      r1,r11,lr
;;;177        dataptr[2] = (DCTELEM) DESCALE(z1 + MULTIPLY(tmp13, FIX_0_765366865),
0000b6  f6404e3f          MOV      lr,#0xc3f
0000ba  f8ddb00c          LDR      r11,[sp,#0xc]
0000be  fb0bfb0e          MUL      r11,r11,lr
0000c2  eb010b4b          ADD      r11,r1,r11,LSL #1
0000c6  f50b6b80          ADD      r11,r11,#0x400
0000ca  ea4f2beb          ASR      r11,r11,#11
0000ce  f8c0b008          STR      r11,[r0,#8]
;;;178    				   CONST_BITS-PASS1_BITS);
;;;179        dataptr[6] = (DCTELEM) DESCALE(z1 + MULTIPLY(tmp12, - FIX_1_847759065),
0000d2  f8dfe2c8          LDR      lr,|L1.924|
0000d6  f8ddb010          LDR      r11,[sp,#0x10]
0000da  fb0b1b0e          MLA      r11,r11,lr,r1
0000de  f50b6b80          ADD      r11,r11,#0x400
0000e2  ea4f2beb          ASR      r11,r11,#11
0000e6  f8c0b018          STR      r11,[r0,#0x18]
;;;180    				   CONST_BITS-PASS1_BITS);
;;;181        
;;;182        /* Odd part per figure 8 --- note paper omits factor of sqrt(2).
;;;183         * cK represents cos(K*pi/16).
;;;184         * i0..i3 in the paper are tmp4..tmp7 here.
;;;185         */
;;;186        
;;;187        z1 = tmp4 + tmp7;
0000ea  19e1              ADDS     r1,r4,r7
;;;188        z2 = tmp5 + tmp6;
0000ec  eb050b06          ADD      r11,r5,r6
0000f0  f8cdb008          STR      r11,[sp,#8]
;;;189        z3 = tmp4 + tmp6;
0000f4  19a2              ADDS     r2,r4,r6
;;;190        z4 = tmp5 + tmp7;
0000f6  19eb              ADDS     r3,r5,r7
;;;191        z5 = MULTIPLY(z3 + z4, FIX_1_175875602); /* sqrt(2) * c3 */
0000f8  eb020b03          ADD      r11,r2,r3
0000fc  f2425ea1          MOV      lr,#0x25a1
000100  fb0bfb0e          MUL      r11,r11,lr
000104  f8cdb004          STR      r11,[sp,#4]
;;;192        
;;;193        tmp4 = MULTIPLY(tmp4, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
000108  f6401b8e          MOV      r11,#0x98e
00010c  fb04f40b          MUL      r4,r4,r11
;;;194        tmp5 = MULTIPLY(tmp5, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
000110  f2441bb3          MOV      r11,#0x41b3
000114  fb05f50b          MUL      r5,r5,r11
;;;195        tmp6 = MULTIPLY(tmp6, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
000118  f2462b54          MOV      r11,#0x6254
00011c  fb06f60b          MUL      r6,r6,r11
;;;196        tmp7 = MULTIPLY(tmp7, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
000120  f2430b0b          MOV      r11,#0x300b
000124  fb07f70b          MUL      r7,r7,r11
;;;197        z1 = MULTIPLY(z1, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
000128  f8dfb274          LDR      r11,|L1.928|
00012c  fb01f10b          MUL      r1,r1,r11
;;;198        z2 = MULTIPLY(z2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
000130  f8dfe270          LDR      lr,|L1.932|
000134  f8ddb008          LDR      r11,[sp,#8]
000138  fb0bfb0e          MUL      r11,r11,lr
00013c  f8cdb008          STR      r11,[sp,#8]
;;;199        z3 = MULTIPLY(z3, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
000140  eba22b02          SUB      r11,r2,r2,LSL #8
000144  ebcb1b8b          RSB      r11,r11,r11,LSL #6
000148  ebab0282          SUB      r2,r11,r2,LSL #2
;;;200        z4 = MULTIPLY(z4, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
00014c  f8dfb258          LDR      r11,|L1.936|
000150  fb03f30b          MUL      r3,r3,r11
;;;201        
;;;202        z3 += z5;
000154  f8ddb004          LDR      r11,[sp,#4]
000158  445a              ADD      r2,r2,r11
;;;203        z4 += z5;
00015a  f8ddb004          LDR      r11,[sp,#4]
00015e  445b              ADD      r3,r3,r11
;;;204        
;;;205        dataptr[7] = (DCTELEM) DESCALE(tmp4 + z1 + z3, CONST_BITS-PASS1_BITS);
000160  eb040b01          ADD      r11,r4,r1
000164  4493              ADD      r11,r11,r2
000166  f50b6b80          ADD      r11,r11,#0x400
00016a  ea4f2beb          ASR      r11,r11,#11
00016e  f8c0b01c          STR      r11,[r0,#0x1c]
;;;206        dataptr[5] = (DCTELEM) DESCALE(tmp5 + z2 + z4, CONST_BITS-PASS1_BITS);
000172  f8ddb008          LDR      r11,[sp,#8]
000176  44ab              ADD      r11,r11,r5
000178  449b              ADD      r11,r11,r3
00017a  f50b6b80          ADD      r11,r11,#0x400
00017e  ea4f2beb          ASR      r11,r11,#11
000182  f8c0b014          STR      r11,[r0,#0x14]
;;;207        dataptr[3] = (DCTELEM) DESCALE(tmp6 + z2 + z3, CONST_BITS-PASS1_BITS);
000186  f8ddb008          LDR      r11,[sp,#8]
00018a  44b3              ADD      r11,r11,r6
00018c  4493              ADD      r11,r11,r2
00018e  f50b6b80          ADD      r11,r11,#0x400
000192  ea4f2beb          ASR      r11,r11,#11
000196  f8c0b00c          STR      r11,[r0,#0xc]
;;;208        dataptr[1] = (DCTELEM) DESCALE(tmp7 + z1 + z4, CONST_BITS-PASS1_BITS);
00019a  eb070b01          ADD      r11,r7,r1
00019e  449b              ADD      r11,r11,r3
0001a0  f50b6b80          ADD      r11,r11,#0x400
0001a4  ea4f2beb          ASR      r11,r11,#11
0001a8  f8c0b004          STR      r11,[r0,#4]
;;;209        
;;;210        dataptr += DCTSIZE;		/* advance pointer to next row */
0001ac  3020              ADDS     r0,r0,#0x20
0001ae  f8ddb000          LDR      r11,[sp,#0]           ;154
0001b2  f1ab0b01          SUB      r11,r11,#1            ;154
0001b6  f8cdb000          STR      r11,[sp,#0]           ;154
                  |L1.442|
0001ba  f8ddb000          LDR      r11,[sp,#0]           ;154
0001be  f1bb0f00          CMP      r11,#0                ;154
0001c2  f6bfaf26          BGE      |L1.18|
;;;211      }
;;;212    
;;;213      /* Pass 2: process columns.
;;;214       * We remove the PASS1_BITS scaling, but leave the results scaled up
;;;215       * by an overall factor of 8.
;;;216       */
;;;217    
;;;218      dataptr = data;
0001c6  9807              LDR      r0,[sp,#0x1c]
;;;219      for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
0001c8  f04f0b07          MOV      r11,#7
0001cc  f8cdb000          STR      r11,[sp,#0]
0001d0  e0db              B        |L1.906|
                  |L1.466|
;;;220        tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*7];
0001d2  f8d0e0e0          LDR      lr,[r0,#0xe0]
0001d6  f8d0b000          LDR      r11,[r0,#0]
0001da  eb0b0c0e          ADD      r12,r11,lr
;;;221        tmp7 = dataptr[DCTSIZE*0] - dataptr[DCTSIZE*7];
0001de  f8d0e0e0          LDR      lr,[r0,#0xe0]
0001e2  f8d0b000          LDR      r11,[r0,#0]
0001e6  ebab070e          SUB      r7,r11,lr
;;;222        tmp1 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*6];
0001ea  f8d0e0c0          LDR      lr,[r0,#0xc0]
0001ee  f8d0b020          LDR      r11,[r0,#0x20]
0001f2  eb0b080e          ADD      r8,r11,lr
;;;223        tmp6 = dataptr[DCTSIZE*1] - dataptr[DCTSIZE*6];
0001f6  f8d0e0c0          LDR      lr,[r0,#0xc0]
0001fa  f8d0b020          LDR      r11,[r0,#0x20]
0001fe  ebab060e          SUB      r6,r11,lr
;;;224        tmp2 = dataptr[DCTSIZE*2] + dataptr[DCTSIZE*5];
000202  f8d0e0a0          LDR      lr,[r0,#0xa0]
000206  f8d0b040          LDR      r11,[r0,#0x40]
00020a  eb0b090e          ADD      r9,r11,lr
;;;225        tmp5 = dataptr[DCTSIZE*2] - dataptr[DCTSIZE*5];
00020e  f8d0e0a0          LDR      lr,[r0,#0xa0]
000212  f8d0b040          LDR      r11,[r0,#0x40]
000216  ebab050e          SUB      r5,r11,lr
;;;226        tmp3 = dataptr[DCTSIZE*3] + dataptr[DCTSIZE*4];
00021a  f8d0e080          LDR      lr,[r0,#0x80]
00021e  f8d0b060          LDR      r11,[r0,#0x60]
000222  eb0b0a0e          ADD      r10,r11,lr
;;;227        tmp4 = dataptr[DCTSIZE*3] - dataptr[DCTSIZE*4];
000226  f8d0e080          LDR      lr,[r0,#0x80]
00022a  f8d0b060          LDR      r11,[r0,#0x60]
00022e  ebab040e          SUB      r4,r11,lr
;;;228        
;;;229        /* Even part per LL&M figure 1 --- note that published figure is faulty;
;;;230         * rotator "sqrt(2)*c1" should be "sqrt(2)*c6".
;;;231         */
;;;232        
;;;233        tmp10 = tmp0 + tmp3;
000232  eb0c0b0a          ADD      r11,r12,r10
000236  f8cdb018          STR      r11,[sp,#0x18]
;;;234        tmp13 = tmp0 - tmp3;
00023a  ebac0b0a          SUB      r11,r12,r10
00023e  f8cdb00c          STR      r11,[sp,#0xc]
;;;235        tmp11 = tmp1 + tmp2;
000242  eb080b09          ADD      r11,r8,r9
000246  f8cdb014          STR      r11,[sp,#0x14]
;;;236        tmp12 = tmp1 - tmp2;
00024a  eba80b09          SUB      r11,r8,r9
00024e  f8cdb010          STR      r11,[sp,#0x10]
;;;237        
;;;238        dataptr[DCTSIZE*0] = (DCTELEM) DESCALE(tmp10 + tmp11, PASS1_BITS);
000252  e9ddeb05          LDRD     lr,r11,[sp,#0x14]
000256  44f3              ADD      r11,r11,lr
000258  f10b0b02          ADD      r11,r11,#2
00025c  ea4f0bab          ASR      r11,r11,#2
000260  f8c0b000          STR      r11,[r0,#0]
;;;239        dataptr[DCTSIZE*4] = (DCTELEM) DESCALE(tmp10 - tmp11, PASS1_BITS);
000264  e9ddeb05          LDRD     lr,r11,[sp,#0x14]
000268  ebab0b0e          SUB      r11,r11,lr
00026c  f10b0b02          ADD      r11,r11,#2
000270  ea4f0bab          ASR      r11,r11,#2
000274  f8c0b080          STR      r11,[r0,#0x80]
;;;240        
;;;241        z1 = MULTIPLY(tmp12 + tmp13, FIX_0_541196100);
000278  e9ddeb03          LDRD     lr,r11,[sp,#0xc]
00027c  44f3              ADD      r11,r11,lr
00027e  f2411e51          MOV      lr,#0x1151
000282  fb0bf10e          MUL      r1,r11,lr
;;;242        dataptr[DCTSIZE*2] = (DCTELEM) DESCALE(z1 + MULTIPLY(tmp13, FIX_0_765366865),
000286  f6404e3f          MOV      lr,#0xc3f
00028a  f8ddb00c          LDR      r11,[sp,#0xc]
00028e  fb0bfb0e          MUL      r11,r11,lr
000292  eb010b4b          ADD      r11,r1,r11,LSL #1
000296  f50b4b80          ADD      r11,r11,#0x4000
00029a  ea4f3beb          ASR      r11,r11,#15
00029e  f8c0b040          STR      r11,[r0,#0x40]
;;;243    					   CONST_BITS+PASS1_BITS);
;;;244        dataptr[DCTSIZE*6] = (DCTELEM) DESCALE(z1 + MULTIPLY(tmp12, - FIX_1_847759065),
0002a2  f8dfe0f8          LDR      lr,|L1.924|
0002a6  f8ddb010          LDR      r11,[sp,#0x10]
0002aa  fb0b1b0e          MLA      r11,r11,lr,r1
0002ae  f50b4b80          ADD      r11,r11,#0x4000
0002b2  ea4f3beb          ASR      r11,r11,#15
0002b6  f8c0b0c0          STR      r11,[r0,#0xc0]
;;;245    					   CONST_BITS+PASS1_BITS);
;;;246        
;;;247        /* Odd part per figure 8 --- note paper omits factor of sqrt(2).
;;;248         * cK represents cos(K*pi/16).
;;;249         * i0..i3 in the paper are tmp4..tmp7 here.
;;;250         */
;;;251        
;;;252        z1 = tmp4 + tmp7;
0002ba  19e1              ADDS     r1,r4,r7
;;;253        z2 = tmp5 + tmp6;
0002bc  eb050b06          ADD      r11,r5,r6
0002c0  f8cdb008          STR      r11,[sp,#8]
;;;254        z3 = tmp4 + tmp6;
0002c4  19a2              ADDS     r2,r4,r6
;;;255        z4 = tmp5 + tmp7;
0002c6  19eb              ADDS     r3,r5,r7
;;;256        z5 = MULTIPLY(z3 + z4, FIX_1_175875602); /* sqrt(2) * c3 */
0002c8  eb020b03          ADD      r11,r2,r3
0002cc  f2425ea1          MOV      lr,#0x25a1
0002d0  fb0bfb0e          MUL      r11,r11,lr
0002d4  f8cdb004          STR      r11,[sp,#4]
;;;257        
;;;258        tmp4 = MULTIPLY(tmp4, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
0002d8  f6401b8e          MOV      r11,#0x98e
0002dc  fb04f40b          MUL      r4,r4,r11
;;;259        tmp5 = MULTIPLY(tmp5, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
0002e0  f2441bb3          MOV      r11,#0x41b3
0002e4  fb05f50b          MUL      r5,r5,r11
;;;260        tmp6 = MULTIPLY(tmp6, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
0002e8  f2462b54          MOV      r11,#0x6254
0002ec  fb06f60b          MUL      r6,r6,r11
;;;261        tmp7 = MULTIPLY(tmp7, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
0002f0  f2430b0b          MOV      r11,#0x300b
0002f4  fb07f70b          MUL      r7,r7,r11
;;;262        z1 = MULTIPLY(z1, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
0002f8  f8dfb0a4          LDR      r11,|L1.928|
0002fc  fb01f10b          MUL      r1,r1,r11
;;;263        z2 = MULTIPLY(z2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
000300  f8dfe0a0          LDR      lr,|L1.932|
000304  f8ddb008          LDR      r11,[sp,#8]
000308  fb0bfb0e          MUL      r11,r11,lr
00030c  f8cdb008          STR      r11,[sp,#8]
;;;264        z3 = MULTIPLY(z3, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
000310  eba22b02          SUB      r11,r2,r2,LSL #8
000314  ebcb1b8b          RSB      r11,r11,r11,LSL #6
000318  ebab0282          SUB      r2,r11,r2,LSL #2
;;;265        z4 = MULTIPLY(z4, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
00031c  f8dfb088          LDR      r11,|L1.936|
000320  fb03f30b          MUL      r3,r3,r11
;;;266        
;;;267        z3 += z5;
000324  f8ddb004          LDR      r11,[sp,#4]
000328  445a              ADD      r2,r2,r11
;;;268        z4 += z5;
00032a  f8ddb004          LDR      r11,[sp,#4]
00032e  445b              ADD      r3,r3,r11
;;;269        
;;;270        dataptr[DCTSIZE*7] = (DCTELEM) DESCALE(tmp4 + z1 + z3,
000330  eb040b01          ADD      r11,r4,r1
000334  4493              ADD      r11,r11,r2
000336  f50b4b80          ADD      r11,r11,#0x4000
00033a  ea4f3beb          ASR      r11,r11,#15
00033e  f8c0b0e0          STR      r11,[r0,#0xe0]
;;;271    					   CONST_BITS+PASS1_BITS);
;;;272        dataptr[DCTSIZE*5] = (DCTELEM) DESCALE(tmp5 + z2 + z4,
000342  f8ddb008          LDR      r11,[sp,#8]
000346  44ab              ADD      r11,r11,r5
000348  449b              ADD      r11,r11,r3
00034a  f50b4b80          ADD      r11,r11,#0x4000
00034e  ea4f3beb          ASR      r11,r11,#15
000352  f8c0b0a0          STR      r11,[r0,#0xa0]
;;;273    					   CONST_BITS+PASS1_BITS);
;;;274        dataptr[DCTSIZE*3] = (DCTELEM) DESCALE(tmp6 + z2 + z3,
000356  f8ddb008          LDR      r11,[sp,#8]
00035a  44b3              ADD      r11,r11,r6
00035c  4493              ADD      r11,r11,r2
00035e  f50b4b80          ADD      r11,r11,#0x4000
000362  ea4f3beb          ASR      r11,r11,#15
000366  f8c0b060          STR      r11,[r0,#0x60]
;;;275    					   CONST_BITS+PASS1_BITS);
;;;276        dataptr[DCTSIZE*1] = (DCTELEM) DESCALE(tmp7 + z1 + z4,
00036a  eb070b01          ADD      r11,r7,r1
00036e  449b              ADD      r11,r11,r3
000370  f50b4b80          ADD      r11,r11,#0x4000
000374  ea4f3beb          ASR      r11,r11,#15
000378  f8c0b020          STR      r11,[r0,#0x20]
;;;277    					   CONST_BITS+PASS1_BITS);
;;;278        
;;;279        dataptr++;			/* advance pointer to next column */
00037c  1d00              ADDS     r0,r0,#4
00037e  f8ddb000          LDR      r11,[sp,#0]           ;219
000382  f1ab0b01          SUB      r11,r11,#1            ;219
000386  f8cdb000          STR      r11,[sp,#0]           ;219
                  |L1.906|
00038a  f8ddb000          LDR      r11,[sp,#0]           ;219
00038e  f1bb0f00          CMP      r11,#0                ;219
000392  f6bfaf1e          BGE      |L1.466|
;;;280      }
;;;281    }
000396  b008              ADD      sp,sp,#0x20
000398  e8bd8ff0          POP      {r4-r11,pc}
;;;282    
                          ENDP

                  |L1.924|
                          DCD      0xffffc4df
                  |L1.928|
                          DCD      0xffffe333
                  |L1.932|
                          DCD      0xffffadfd
                  |L1.936|
                          DCD      0xfffff384
