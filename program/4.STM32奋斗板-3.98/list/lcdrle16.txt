; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\lcdrle16.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\lcdrle16.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -I.\GUI\AntiAlias -I.\GUI\Config -I.\GUI\ConvertColor -I.\GUI\ConvertMono -I.\GUI\Core -I.\GUI\Font -I.\GUI\GUI_X -I.\GUI\JPEG -I.\GUI\LCDDriver -I.\GUI\MemDev -I.\GUI\MultiLayer -I.\GUI\Widget -I.\GUI\WM -IC:\Users\Administrator\Desktop\gui\STM32·Ü¶·°å-3.98\RTE -Id:\Keil_v5\ARM\PACK\ARM\CMSIS\4.3.0\CMSIS\Include -Id:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.1.0\Device\Include -D__UVISION_VERSION=515 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\lcdrle16.crf GUI\Core\LCDRLE16.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _Read16 PROC
;;;51     */
;;;52     static U16 _Read16(const U8 GUI_UNI_PTR ** ppData) {
000000  4602              MOV      r2,r0
;;;53       const U8 GUI_UNI_PTR * pData;
;;;54       U16  Value;
;;;55       pData = *ppData;
000002  6811              LDR      r1,[r2,#0]
;;;56       Value = *pData;
000004  7808              LDRB     r0,[r1,#0]
;;;57       Value |= (U16)(*(pData + 1) << 8);
000006  784b              LDRB     r3,[r1,#1]
000008  ea402003          ORR      r0,r0,r3,LSL #8
;;;58       pData += 2;
00000c  1c89              ADDS     r1,r1,#2
;;;59       *ppData = pData;
00000e  6011              STR      r1,[r2,#0]
;;;60       return Value;
;;;61     }
000010  4770              BX       lr
;;;62     
                          ENDP

                  _GetPixelIndex PROC
;;;66     */
;;;67     static LCD_PIXELINDEX _GetPixelIndex(const U8 GUI_UNI_PTR ** ppPixel) {
000012  b570              PUSH     {r4-r6,lr}
000014  4604              MOV      r4,r0
;;;68       U16 Data = _Read16(ppPixel);
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       _Read16
00001c  4605              MOV      r5,r0
;;;69       if ((_DisplayMode == 565) && (_DisplaySwapRB == _BitmapSwapRB)) {
00001e  48a9              LDR      r0,|L1.708|
000020  6800              LDR      r0,[r0,#0]  ; _DisplayMode
000022  f2402135          MOV      r1,#0x235
000026  4288              CMP      r0,r1
000028  d107              BNE      |L1.58|
00002a  48a7              LDR      r0,|L1.712|
00002c  7800              LDRB     r0,[r0,#0]  ; _DisplaySwapRB
00002e  49a7              LDR      r1,|L1.716|
000030  7809              LDRB     r1,[r1,#0]  ; _BitmapSwapRB
000032  4288              CMP      r0,r1
000034  d101              BNE      |L1.58|
;;;70         return (LCD_PIXELINDEX)Data;
000036  4628              MOV      r0,r5
                  |L1.56|
;;;71       }
;;;72       if (_BitmapSwapRB) {
;;;73         return LCD_Color2Index(LCD_Index2Color_M565(Data));
;;;74       }
;;;75       return LCD_Color2Index(LCD_Index2Color_565(Data));
;;;76     }
000038  bd70              POP      {r4-r6,pc}
                  |L1.58|
00003a  48a4              LDR      r0,|L1.716|
00003c  7800              LDRB     r0,[r0,#0]            ;72  ; _BitmapSwapRB
00003e  b138              CBZ      r0,|L1.80|
000040  4628              MOV      r0,r5                 ;73
000042  f7fffffe          BL       LCD_Index2Color_M565
000046  4606              MOV      r6,r0                 ;73
000048  f7fffffe          BL       LCD_Color2Index
00004c  b280              UXTH     r0,r0                 ;73
00004e  e7f3              B        |L1.56|
                  |L1.80|
000050  4628              MOV      r0,r5                 ;75
000052  f7fffffe          BL       LCD_Index2Color_565
000056  4606              MOV      r6,r0                 ;75
000058  f7fffffe          BL       LCD_Color2Index
00005c  b280              UXTH     r0,r0                 ;75
00005e  e7eb              B        |L1.56|
;;;77     
                          ENDP

                  _DrawBitmap_RLE PROC
;;;81     */
;;;82     static void _DrawBitmap_RLE(int x0, int y0, int xsize, int ysize, const U8 GUI_UNI_PTR * pPixel, int xMag, int yMag) {
000060  e92d4fff          PUSH     {r0-r11,lr}
000064  b089              SUB      sp,sp,#0x24
000066  4607              MOV      r7,r0
000068  460e              MOV      r6,r1
00006a  4692              MOV      r10,r2
00006c  e9ddb817          LDRD     r11,r8,[sp,#0x5c]
;;;83       LCD_PIXELINDEX OldColorIndex, PixelIndex;
;;;84       int xi, y, xL, yL;
;;;85       const U8 GUI_UNI_PTR * pPixelOrg;
;;;86       char NoTrans, IsMagnified;
;;;87       pPixelOrg     = pPixel;
000070  9816              LDR      r0,[sp,#0x58]
000072  9004              STR      r0,[sp,#0x10]
;;;88       NoTrans       = !(GUI_Context.DrawMode & LCD_DRAWMODE_TRANS);
000074  4896              LDR      r0,|L1.720|
000076  7c00              LDRB     r0,[r0,#0x10]  ; GUI_Context
000078  2101              MOVS     r1,#1
00007a  ea210050          BIC      r0,r1,r0,LSR #1
00007e  9003              STR      r0,[sp,#0xc]
;;;89       IsMagnified   = ((yMag | xMag) != 1);
000080  ea48000b          ORR      r0,r8,r11
000084  2801              CMP      r0,#1
000086  d001              BEQ      |L1.140|
000088  2001              MOVS     r0,#1
00008a  e000              B        |L1.142|
                  |L1.140|
00008c  2000              MOVS     r0,#0
                  |L1.142|
00008e  9002              STR      r0,[sp,#8]
;;;90       OldColorIndex = LCD_ACOLORINDEX[1];
000090  488f              LDR      r0,|L1.720|
000092  8840              LDRH     r0,[r0,#2]  ; GUI_Context
000094  9008              STR      r0,[sp,#0x20]
;;;91       _DisplayMode   = LCD_GetFixedPaletteEx(GUI_Context.SelLayer);
000096  498e              LDR      r1,|L1.720|
000098  7c48              LDRB     r0,[r1,#0x11]  ; GUI_Context
00009a  f7fffffe          BL       LCD_GetFixedPaletteEx
00009e  4989              LDR      r1,|L1.708|
0000a0  6008              STR      r0,[r1,#0]  ; _DisplayMode
;;;92       _DisplaySwapRB = LCD_GetSwapRBEx(GUI_Context.SelLayer);
0000a2  498b              LDR      r1,|L1.720|
0000a4  7c48              LDRB     r0,[r1,#0x11]  ; GUI_Context
0000a6  f7fffffe          BL       LCD_GetSwapRBEx
0000aa  4987              LDR      r1,|L1.712|
0000ac  7008              STRB     r0,[r1,#0]
;;;93      /* Check if we can limit the number of lines due to clipping) */
;;;94       if (yMag == 1) {
0000ae  f1b80f01          CMP      r8,#1
0000b2  d10d              BNE      |L1.208|
;;;95         if (ysize > GUI_Context.ClipRect.y1 - y0 + 1) {
0000b4  4886              LDR      r0,|L1.720|
0000b6  f9b0000e          LDRSH    r0,[r0,#0xe]
0000ba  1b80              SUBS     r0,r0,r6
0000bc  1c40              ADDS     r0,r0,#1
0000be  990c              LDR      r1,[sp,#0x30]
0000c0  4288              CMP      r0,r1
0000c2  da05              BGE      |L1.208|
;;;96           ysize = GUI_Context.ClipRect.y1 - y0 + 1;
0000c4  4882              LDR      r0,|L1.720|
0000c6  f9b0000e          LDRSH    r0,[r0,#0xe]
0000ca  1b80              SUBS     r0,r0,r6
0000cc  1c40              ADDS     r0,r0,#1
0000ce  900c              STR      r0,[sp,#0x30]
                  |L1.208|
;;;97         }
;;;98       }
;;;99       /* Init variables for looping */
;;;100      xi = y = 0;
0000d0  2400              MOVS     r4,#0
0000d2  4625              MOV      r5,r4
;;;101      /* Check if we can use the cache to save some unnecessary iterations */
;;;102      if (!IsMagnified) {
0000d4  9802              LDR      r0,[sp,#8]
0000d6  b990              CBNZ     r0,|L1.254|
;;;103        int yDiff = GUI_Context.ClipRect.y0 - y0;
0000d8  497d              LDR      r1,|L1.720|
0000da  f9b1100a          LDRSH    r1,[r1,#0xa]
0000de  1b88              SUBS     r0,r1,r6
;;;104        if ((_Cache.pPixelStart == pPixel) && (yDiff > _Cache.y)) {
0000e0  497c              LDR      r1,|L1.724|
0000e2  68c9              LDR      r1,[r1,#0xc]  ; _Cache
0000e4  9a16              LDR      r2,[sp,#0x58]
0000e6  4291              CMP      r1,r2
0000e8  d108              BNE      |L1.252|
0000ea  497a              LDR      r1,|L1.724|
0000ec  6849              LDR      r1,[r1,#4]  ; _Cache
0000ee  4281              CMP      r1,r0
0000f0  da04              BGE      |L1.252|
;;;105          /* Accept cache values */
;;;106          y      = _Cache.y;
0000f2  4978              LDR      r1,|L1.724|
0000f4  684d              LDR      r5,[r1,#4]  ; _Cache
;;;107          xi     = _Cache.x;
0000f6  680c              LDR      r4,[r1,#0]  ; _Cache
;;;108          pPixel = _Cache.pPixel;
0000f8  6889              LDR      r1,[r1,#8]  ; _Cache
0000fa  9116              STR      r1,[sp,#0x58]
                  |L1.252|
;;;109        }
;;;110      }
0000fc  bf00              NOP      
                  |L1.254|
;;;111      /* Init values for caching */
;;;112      _Cache.pPixel = _Cache.pPixelStart = pPixelOrg;
0000fe  4975              LDR      r1,|L1.724|
000100  9804              LDR      r0,[sp,#0x10]
000102  60c8              STR      r0,[r1,#0xc]  ; _Cache
000104  6088              STR      r0,[r1,#8]  ; _Cache
;;;113      _Cache.x = _Cache.y = 0;
000106  2000              MOVS     r0,#0
000108  6048              STR      r0,[r1,#4]  ; _Cache
00010a  6008              STR      r0,[r1,#0]  ; _Cache
;;;114      /* Repeat until we have reached bottom */
;;;115      for (; y < ysize; ) {
00010c  e0a0              B        |L1.592|
                  |L1.270|
;;;116        U8 NumCompressedPixels = *pPixel++;
00010e  9816              LDR      r0,[sp,#0x58]
000110  7800              LDRB     r0,[r0,#0]
000112  9001              STR      r0,[sp,#4]
000114  9816              LDR      r0,[sp,#0x58]
000116  1c40              ADDS     r0,r0,#1
000118  9016              STR      r0,[sp,#0x58]
;;;117        if (NumCompressedPixels) {
00011a  9801              LDR      r0,[sp,#4]
00011c  2800              CMP      r0,#0
00011e  d045              BEQ      |L1.428|
;;;118          PixelIndex = _GetPixelIndex(&pPixel);
000120  a816              ADD      r0,sp,#0x58
000122  f7fffffe          BL       _GetPixelIndex
000126  9007              STR      r0,[sp,#0x1c]
;;;119          /* Save cache info */
;;;120          _Cache.pPixel = pPixel - 3;
000128  9816              LDR      r0,[sp,#0x58]
00012a  1ec0              SUBS     r0,r0,#3
00012c  4969              LDR      r1,|L1.724|
00012e  6088              STR      r0,[r1,#8]  ; _Cache
;;;121          _Cache.x      = xi;
000130  4608              MOV      r0,r1
000132  6004              STR      r4,[r0,#0]  ; _Cache
;;;122          _Cache.y      = y;
000134  6045              STR      r5,[r0,#4]  ; _Cache
;;;123          LCD_ACOLORINDEX[1] = PixelIndex;
000136  4966              LDR      r1,|L1.720|
000138  9807              LDR      r0,[sp,#0x1c]
00013a  8048              STRH     r0,[r1,#2]
;;;124          while (NumCompressedPixels) {
00013c  e032              B        |L1.420|
                  |L1.318|
;;;125            int xi1 = xi + NumCompressedPixels;
00013e  9801              LDR      r0,[sp,#4]
000140  eb040900          ADD      r9,r4,r0
;;;126            if (xi1 >= xsize) {
000144  45d1              CMP      r9,r10
000146  db00              BLT      |L1.330|
;;;127              xi1 = xsize;
000148  46d1              MOV      r9,r10
                  |L1.330|
;;;128            }
;;;129            NumCompressedPixels -= (xi1 - xi);
00014a  eba90104          SUB      r1,r9,r4
00014e  9801              LDR      r0,[sp,#4]
000150  1a40              SUBS     r0,r0,r1
000152  b2c0              UXTB     r0,r0
000154  9001              STR      r0,[sp,#4]
;;;130            if (PixelIndex || NoTrans) {  /* Skip transparent pixels */
000156  9807              LDR      r0,[sp,#0x1c]
000158  b908              CBNZ     r0,|L1.350|
00015a  9803              LDR      r0,[sp,#0xc]
00015c  b1e0              CBZ      r0,|L1.408|
                  |L1.350|
;;;131              if (IsMagnified) {
00015e  9802              LDR      r0,[sp,#8]
000160  b198              CBZ      r0,|L1.394|
;;;132                xL = xMag * xi + x0;
000162  fb0b7004          MLA      r0,r11,r4,r7
000166  9006              STR      r0,[sp,#0x18]
;;;133                yL = yMag * y + y0;
000168  fb086005          MLA      r0,r8,r5,r6
00016c  9005              STR      r0,[sp,#0x14]
;;;134                LCD_FillRect(xL, yL, xL + xMag * (xi1 - xi) -1 , yL + yMag - 1);
00016e  9805              LDR      r0,[sp,#0x14]
000170  4440              ADD      r0,r0,r8
000172  1e43              SUBS     r3,r0,#1
000174  eba90104          SUB      r1,r9,r4
000178  9806              LDR      r0,[sp,#0x18]
00017a  fb0b0001          MLA      r0,r11,r1,r0
00017e  1e42              SUBS     r2,r0,#1
000180  e9dd1005          LDRD     r1,r0,[sp,#0x14]
000184  f7fffffe          BL       LCD_FillRect
000188  e006              B        |L1.408|
                  |L1.394|
;;;135              } else {
;;;136                LCD_DrawHLine(x0 + xi, y + y0, xi1 + x0 - 1);
00018a  eb090307          ADD      r3,r9,r7
00018e  1e5a              SUBS     r2,r3,#1
000190  19a9              ADDS     r1,r5,r6
000192  1938              ADDS     r0,r7,r4
000194  f7fffffe          BL       LCD_DrawHLine
                  |L1.408|
;;;137              }
;;;138            }
;;;139            xi = xi1;
000198  464c              MOV      r4,r9
;;;140            if (xi1 == xsize) {
00019a  45d1              CMP      r9,r10
00019c  d101              BNE      |L1.418|
;;;141              y++;
00019e  1c6d              ADDS     r5,r5,#1
;;;142              xi = 0;
0001a0  2400              MOVS     r4,#0
                  |L1.418|
;;;143            }
;;;144          }
0001a2  bf00              NOP      
                  |L1.420|
0001a4  9801              LDR      r0,[sp,#4]            ;124
0001a6  2800              CMP      r0,#0                 ;124
0001a8  d1c9              BNE      |L1.318|
0001aa  e050              B        |L1.590|
                  |L1.428|
;;;145        } else {
;;;146          U8 NumPixels = *pPixel++;
0001ac  9816              LDR      r0,[sp,#0x58]
0001ae  7800              LDRB     r0,[r0,#0]
0001b0  9000              STR      r0,[sp,#0]
0001b2  9816              LDR      r0,[sp,#0x58]
0001b4  1c40              ADDS     r0,r0,#1
0001b6  9016              STR      r0,[sp,#0x58]
;;;147          do {
0001b8  bf00              NOP      
                  |L1.442|
;;;148            PixelIndex = _GetPixelIndex(&pPixel);
0001ba  a816              ADD      r0,sp,#0x58
0001bc  f7fffffe          BL       _GetPixelIndex
0001c0  9007              STR      r0,[sp,#0x1c]
;;;149            if (PixelIndex || NoTrans) {  /* Skip transparent pixels */
0001c2  9807              LDR      r0,[sp,#0x1c]
0001c4  b908              CBNZ     r0,|L1.458|
0001c6  9803              LDR      r0,[sp,#0xc]
0001c8  b378              CBZ      r0,|L1.554|
                  |L1.458|
;;;150              int x = x0 + xi;
0001ca  eb070904          ADD      r9,r7,r4
;;;151              if (IsMagnified) {
0001ce  9802              LDR      r0,[sp,#8]
0001d0  b198              CBZ      r0,|L1.506|
;;;152                LCD_SetColorIndex(PixelIndex);
0001d2  9807              LDR      r0,[sp,#0x1c]
0001d4  f7fffffe          BL       LCD_SetColorIndex
;;;153                xL = xMag * xi + x0;
0001d8  fb0b7004          MLA      r0,r11,r4,r7
0001dc  9006              STR      r0,[sp,#0x18]
;;;154                yL = yMag * y + y0;
0001de  fb086005          MLA      r0,r8,r5,r6
0001e2  9005              STR      r0,[sp,#0x14]
;;;155                LCD_FillRect(xL, yL, xL + xMag - 1 , yL + yMag - 1);
0001e4  9805              LDR      r0,[sp,#0x14]
0001e6  4440              ADD      r0,r0,r8
0001e8  1e43              SUBS     r3,r0,#1
0001ea  9806              LDR      r0,[sp,#0x18]
0001ec  4458              ADD      r0,r0,r11
0001ee  1e42              SUBS     r2,r0,#1
0001f0  e9dd1005          LDRD     r1,r0,[sp,#0x14]
0001f4  f7fffffe          BL       LCD_FillRect
0001f8  e016              B        |L1.552|
                  |L1.506|
;;;156              } else {
;;;157                if ((y + y0) >= GUI_Context.ClipRect.y0) {
0001fa  19a9              ADDS     r1,r5,r6
0001fc  4834              LDR      r0,|L1.720|
0001fe  f9b0000a          LDRSH    r0,[r0,#0xa]
000202  4281              CMP      r1,r0
000204  db10              BLT      |L1.552|
;;;158                  if (x >= GUI_Context.ClipRect.x0) {
000206  4832              LDR      r0,|L1.720|
000208  f9b00008          LDRSH    r0,[r0,#8]  ; GUI_Context
00020c  4548              CMP      r0,r9
00020e  dc0b              BGT      |L1.552|
;;;159                    if (x <= GUI_Context.ClipRect.x1) {
000210  482f              LDR      r0,|L1.720|
000212  f9b0000c          LDRSH    r0,[r0,#0xc]
000216  4548              CMP      r0,r9
000218  db06              BLT      |L1.552|
;;;160                      LCDDEV_L0_SetPixelIndex(x, y + y0, PixelIndex);
00021a  19a9              ADDS     r1,r5,r6
00021c  482c              LDR      r0,|L1.720|
00021e  6c80              LDR      r0,[r0,#0x48]  ; GUI_Context
000220  6a43              LDR      r3,[r0,#0x24]
000222  4648              MOV      r0,r9
000224  9a07              LDR      r2,[sp,#0x1c]
000226  4798              BLX      r3
                  |L1.552|
;;;161                    }
;;;162                  }
;;;163                }
;;;164              }
;;;165            }
000228  bf00              NOP      
                  |L1.554|
;;;166            if (++xi >= xsize) {
00022a  1c60              ADDS     r0,r4,#1
00022c  4604              MOV      r4,r0
00022e  4550              CMP      r0,r10
000230  db05              BLT      |L1.574|
;;;167              y++;
000232  1c6d              ADDS     r5,r5,#1
;;;168              xi = 0;
000234  2400              MOVS     r4,#0
;;;169              if (y >= ysize) {
000236  980c              LDR      r0,[sp,#0x30]
000238  4285              CMP      r5,r0
00023a  db00              BLT      |L1.574|
;;;170                break;
00023c  e005              B        |L1.586|
                  |L1.574|
;;;171              }
;;;172            }
;;;173          } while (--NumPixels);
00023e  9800              LDR      r0,[sp,#0]
000240  1e40              SUBS     r0,r0,#1
000242  b2c0              UXTB     r0,r0
000244  9000              STR      r0,[sp,#0]
000246  2800              CMP      r0,#0
000248  d1b7              BNE      |L1.442|
                  |L1.586|
00024a  bf00              NOP                            ;170
;;;174        }
00024c  bf00              NOP      
                  |L1.590|
;;;175      }
00024e  bf00              NOP      
                  |L1.592|
000250  980c              LDR      r0,[sp,#0x30]         ;115
000252  4285              CMP      r5,r0                 ;115
000254  f6ffaf5b          BLT      |L1.270|
;;;176      LCD_ACOLORINDEX[1] = OldColorIndex;
000258  491d              LDR      r1,|L1.720|
00025a  9808              LDR      r0,[sp,#0x20]
00025c  8048              STRH     r0,[r1,#2]
;;;177    }
00025e  b00d              ADD      sp,sp,#0x34
000260  e8bd8ff0          POP      {r4-r11,pc}
;;;178    
                          ENDP

                  _DrawBitmap_RLE16 PROC
;;;182    */
;;;183    static void _DrawBitmap_RLE16(int x0, int y0, int xsize, int ysize, const U8 GUI_UNI_PTR * pPixel, const LCD_LOGPALETTE GUI_UNI_PTR * pLogPal, int xMag, int yMag) {
000264  e92d4ffe          PUSH     {r1-r11,lr}
000268  4604              MOV      r4,r0
00026a  460d              MOV      r5,r1
00026c  4616              MOV      r6,r2
00026e  461f              MOV      r7,r3
000270  e9ddab0e          LDRD     r10,r11,[sp,#0x38]
000274  e9dd890c          LDRD     r8,r9,[sp,#0x30]
;;;184      GUI_USE_PARA(pLogPal);
000278  bf00              NOP      
;;;185      _BitmapSwapRB = 0;
00027a  2000              MOVS     r0,#0
00027c  4913              LDR      r1,|L1.716|
00027e  7008              STRB     r0,[r1,#0]
;;;186      _DrawBitmap_RLE(x0, y0, xsize, ysize, pPixel, xMag, yMag);
000280  463b              MOV      r3,r7
000282  4632              MOV      r2,r6
000284  4629              MOV      r1,r5
000286  4620              MOV      r0,r4
000288  e88d0d00          STM      sp,{r8,r10,r11}
00028c  f7fffffe          BL       _DrawBitmap_RLE
;;;187    }
000290  e8bd8ffe          POP      {r1-r11,pc}
;;;188    
                          ENDP

                  _DrawBitmap_RLEM16 PROC
;;;192    */
;;;193    static void _DrawBitmap_RLEM16(int x0, int y0, int xsize, int ysize, const U8 GUI_UNI_PTR * pPixel, const LCD_LOGPALETTE GUI_UNI_PTR * pLogPal, int xMag, int yMag) {
000294  e92d4ffe          PUSH     {r1-r11,lr}
000298  4604              MOV      r4,r0
00029a  460d              MOV      r5,r1
00029c  4616              MOV      r6,r2
00029e  461f              MOV      r7,r3
0002a0  e9ddab0e          LDRD     r10,r11,[sp,#0x38]
0002a4  e9dd890c          LDRD     r8,r9,[sp,#0x30]
;;;194      GUI_USE_PARA(pLogPal);
0002a8  bf00              NOP      
;;;195      _BitmapSwapRB = 1;
0002aa  2001              MOVS     r0,#1
0002ac  4907              LDR      r1,|L1.716|
0002ae  7008              STRB     r0,[r1,#0]
;;;196      _DrawBitmap_RLE(x0, y0, xsize, ysize, pPixel, xMag, yMag);
0002b0  463b              MOV      r3,r7
0002b2  4632              MOV      r2,r6
0002b4  4629              MOV      r1,r5
0002b6  4620              MOV      r0,r4
0002b8  e88d0d00          STM      sp,{r8,r10,r11}
0002bc  f7fffffe          BL       _DrawBitmap_RLE
;;;197    }
0002c0  e8bd8ffe          POP      {r1-r11,pc}
;;;198    
                          ENDP

                  |L1.708|
                          DCD      _DisplayMode
                  |L1.712|
                          DCD      _DisplaySwapRB
                  |L1.716|
                          DCD      _BitmapSwapRB
                  |L1.720|
                          DCD      GUI_Context
                  |L1.724|
                          DCD      _Cache

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  _Cache
                          %        16

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  GUI_BitmapMethodsRLE16
                          DCD      _DrawBitmap_RLE16
                          DCD      0x00000000
                  GUI_BitmapMethodsRLEM16
                          DCD      _DrawBitmap_RLEM16
                          DCD      0x00000000

                          AREA ||.data||, DATA, ALIGN=2

                  _DisplayMode
                          DCD      0x00000000
                  _DisplaySwapRB
000004  00                DCB      0x00
                  _BitmapSwapRB
000005  00                DCB      0x00
