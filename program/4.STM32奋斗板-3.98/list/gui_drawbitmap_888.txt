; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\gui_drawbitmap_888.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\gui_drawbitmap_888.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -I.\GUI\AntiAlias -I.\GUI\Config -I.\GUI\ConvertColor -I.\GUI\ConvertMono -I.\GUI\Core -I.\GUI\Font -I.\GUI\GUI_X -I.\GUI\JPEG -I.\GUI\LCDDriver -I.\GUI\MemDev -I.\GUI\MultiLayer -I.\GUI\Widget -I.\GUI\WM -IC:\Users\Administrator\Desktop\gui\STM32·Ü¶·°å-3.98\RTE -Id:\Keil_v5\ARM\PACK\ARM\CMSIS\4.3.0\CMSIS\Include -Id:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.1.0\Device\Include -D__UVISION_VERSION=515 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\gui_drawbitmap_888.crf GUI\Core\GUI_DrawBitmap_888.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _DrawBitmap PROC
;;;33     */
;;;34     static void _DrawBitmap(int x0, int y0, int xsize, int ysize, const U8 GUI_UNI_PTR * pPixel, const LCD_LOGPALETTE GUI_UNI_PTR * pLogPal, int xMag, int yMag, tLCDDEV_Index2Color * pfIndex2Color) {
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  b08b              SUB      sp,sp,#0x2c
000006  4607              MOV      r7,r0
000008  4689              MOV      r9,r1
00000a  4616              MOV      r6,r2
00000c  4698              MOV      r8,r3
;;;35       const U32 * pData;
;;;36       int y, OldIndex, Mag, BytesPerLine, UseDrawBitmap = 0;
00000e  2000              MOVS     r0,#0
000010  9008              STR      r0,[sp,#0x20]
;;;37       U32 PrevColor;
;;;38       GUI_USE_PARA(pLogPal);
000012  9815              LDR      r0,[sp,#0x54]
000014  9015              STR      r0,[sp,#0x54]
;;;39       OldIndex = LCD_GetColorIndex();
000016  f7fffffe          BL       LCD_GetColorIndex
00001a  900a              STR      r0,[sp,#0x28]
;;;40       PrevColor = GUI_INVALID_COLOR;
00001c  f06f4070          MVN      r0,#0xf0000000
000020  9007              STR      r0,[sp,#0x1c]
;;;41       pData = (const U32 *)pPixel;
000022  f8dda050          LDR      r10,[sp,#0x50]
;;;42       Mag = (xMag | yMag);
000026  e9dd0116          LDRD     r0,r1,[sp,#0x58]
00002a  4308              ORRS     r0,r0,r1
00002c  9009              STR      r0,[sp,#0x24]
;;;43       BytesPerLine = xsize * 4;
00002e  00b5              LSLS     r5,r6,#2
;;;44       /* Check if bitmaps color format fits to the current color conversion */
;;;45       if (Mag == 1) {
000030  9809              LDR      r0,[sp,#0x24]
000032  2801              CMP      r0,#1
000034  d10c              BNE      |L1.80|
;;;46         #if GUI_SUPPORT_MEMDEV
;;;47         if (!GUI_Context.hDevData) {
000036  4896              LDR      r0,|L1.656|
000038  f8b0004c          LDRH     r0,[r0,#0x4c]  ; GUI_Context
00003c  b940              CBNZ     r0,|L1.80|
;;;48         #else
;;;49         {
;;;50         #endif
;;;51           if (LCD_GetpfIndex2ColorEx(GUI_Context.SelLayer) == pfIndex2Color) {
00003e  4994              LDR      r1,|L1.656|
000040  7c48              LDRB     r0,[r1,#0x11]  ; GUI_Context
000042  f7fffffe          BL       LCD_GetpfIndex2ColorEx
000046  9918              LDR      r1,[sp,#0x60]
000048  4288              CMP      r0,r1
00004a  d101              BNE      |L1.80|
;;;52             UseDrawBitmap = 1;
00004c  2001              MOVS     r0,#1
00004e  9008              STR      r0,[sp,#0x20]
                  |L1.80|
;;;53           }
;;;54         }
;;;55       }
;;;56       if (UseDrawBitmap) {
000050  9808              LDR      r0,[sp,#0x20]
000052  b180              CBZ      r0,|L1.118|
;;;57         LCD_DrawBitmap(x0, y0, xsize, ysize, 1, 1, 24, BytesPerLine, pPixel, 0);
000054  2100              MOVS     r1,#0
000056  2218              MOVS     r2,#0x18
000058  9814              LDR      r0,[sp,#0x50]
00005a  e9cd2502          STRD     r2,r5,[sp,#8]
00005e  e9cd0104          STRD     r0,r1,[sp,#0x10]
000062  2001              MOVS     r0,#1
000064  9000              STR      r0,[sp,#0]
000066  4643              MOV      r3,r8
000068  4632              MOV      r2,r6
00006a  4649              MOV      r1,r9
00006c  9001              STR      r0,[sp,#4]
00006e  4638              MOV      r0,r7
000070  f7fffffe          BL       LCD_DrawBitmap
000074  e0d8              B        |L1.552|
                  |L1.118|
;;;58       } else {
;;;59         if (Mag == 1) {
000076  9809              LDR      r0,[sp,#0x24]
000078  2801              CMP      r0,#1
00007a  d17d              BNE      |L1.376|
;;;60           /* Perform clipping */
;;;61           int x1, y1, Diff;
;;;62           y1 = y0 + ysize - 1;
00007c  eb090008          ADD      r0,r9,r8
000080  1e40              SUBS     r0,r0,#1
000082  9005              STR      r0,[sp,#0x14]
;;;63           x1 = x0 + xsize - 1;
000084  19b8              ADDS     r0,r7,r6
000086  1e40              SUBS     r0,r0,#1
000088  9006              STR      r0,[sp,#0x18]
;;;64           /* Clip Y */
;;;65           if (y0 < GUI_Context.ClipRect.y0) {
00008a  4881              LDR      r0,|L1.656|
00008c  f9b0000a          LDRSH    r0,[r0,#0xa]
000090  4548              CMP      r0,r9
000092  dd0e              BLE      |L1.178|
;;;66             Diff = GUI_Context.ClipRect.y0 - y0;
000094  487e              LDR      r0,|L1.656|
000096  f9b0000a          LDRSH    r0,[r0,#0xa]
00009a  eba00409          SUB      r4,r0,r9
;;;67             y0   = GUI_Context.ClipRect.y0;
00009e  487c              LDR      r0,|L1.656|
0000a0  f9b0900a          LDRSH    r9,[r0,#0xa]
;;;68             #if GUI_SUPPORT_LARGE_BITMAPS                       /* Required only for 16 bit CPUs if some bitmaps are >64kByte */
;;;69               pData += (U32)Diff * (U32)BytesPerLine / 4;
;;;70             #else
;;;71               pData += (unsigned)Diff * (unsigned)BytesPerLine / 4;
0000a4  fb04f005          MUL      r0,r4,r5
0000a8  0880              LSRS     r0,r0,#2
0000aa  eb0a0a80          ADD      r10,r10,r0,LSL #2
;;;72             #endif
;;;73             ysize -= Diff;
0000ae  eba80804          SUB      r8,r8,r4
                  |L1.178|
;;;74           }
;;;75           Diff = y1 - GUI_Context.ClipRect.y1;
0000b2  4877              LDR      r0,|L1.656|
0000b4  f9b0100e          LDRSH    r1,[r0,#0xe]
0000b8  9805              LDR      r0,[sp,#0x14]
0000ba  1a44              SUBS     r4,r0,r1
;;;76           if (Diff > 0) {
0000bc  2c00              CMP      r4,#0
0000be  dd01              BLE      |L1.196|
;;;77             ysize -= Diff;
0000c0  eba80804          SUB      r8,r8,r4
                  |L1.196|
;;;78           }
;;;79           if (ysize <=0) {
0000c4  f1b80f00          CMP      r8,#0
0000c8  dc02              BGT      |L1.208|
                  |L1.202|
;;;80     		    return;
;;;81           }
;;;82           /* Clip right side */
;;;83           Diff = x1 - GUI_Context.ClipRect.x1;
;;;84           if (Diff > 0) {
;;;85             xsize -= Diff;
;;;86           }
;;;87           /* Clip left side */
;;;88           if (x0 < GUI_Context.ClipRect.x0) {
;;;89             Diff = GUI_Context.ClipRect.x0 - x0;
;;;90     			  xsize -= Diff;
;;;91             pData += Diff; 
;;;92             x0 += Diff; 
;;;93           }
;;;94           if (xsize <=0) {
;;;95     		    return;
;;;96           }
;;;97           /* Simple, unmagnified output using LCD_L0_SetPixel() */
;;;98           for (y = 0; y < ysize; y++) {
;;;99             int x;
;;;100            const U32 * p = pData;
;;;101            for (x = 0; x < xsize; x++) {
;;;102              U32 Color;
;;;103              Color = *p++;
;;;104              if (Color != PrevColor) {
;;;105                LCD_SetColor(pfIndex2Color(Color));
;;;106                PrevColor = Color;
;;;107              }
;;;108              LCDDEV_L0_SetPixelIndex(x + x0, y + y0, LCD_COLORINDEX);
;;;109            }
;;;110            pData += BytesPerLine / 4;
;;;111          }
;;;112        } else {
;;;113          /* Magnified output using LCD_FillRect() */
;;;114          int x,y;
;;;115          int yi;
;;;116          for (y = y0, yi = 0; yi < ysize; yi++, y += yMag, pPixel += BytesPerLine) {
;;;117            int yMax;
;;;118            yMax = y + yMag - 1;
;;;119            /* Draw if within clip area */
;;;120            if ((yMax >= GUI_Context.ClipRect.y0) && (y <= GUI_Context.ClipRect.y1)) {
;;;121              int xi;
;;;122              const U32 GUI_UNI_PTR * p = pData;
;;;123              for (x = x0, xi = 0; xi < xsize; xi++, x += xMag) {
;;;124                U32 Color;
;;;125                Color = *p++;
;;;126                if (Color != PrevColor) {
;;;127                  LCD_SetColor(pfIndex2Color(Color));
;;;128                  PrevColor = Color;
;;;129                }
;;;130                LCD_FillRect(x, y, x + xMag - 1, yMax);
;;;131              }
;;;132            }
;;;133            pData += BytesPerLine / 4;
;;;134          }
;;;135        }
;;;136        GUI_SetColorIndex(OldIndex);
;;;137      }
;;;138    }
0000ca  b00b              ADD      sp,sp,#0x2c
0000cc  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.208|
0000d0  486f              LDR      r0,|L1.656|
0000d2  f9b0100c          LDRSH    r1,[r0,#0xc]          ;83
0000d6  9806              LDR      r0,[sp,#0x18]         ;83
0000d8  1a44              SUBS     r4,r0,r1              ;83
0000da  2c00              CMP      r4,#0                 ;84
0000dc  dd00              BLE      |L1.224|
0000de  1b36              SUBS     r6,r6,r4              ;85
                  |L1.224|
0000e0  486b              LDR      r0,|L1.656|
0000e2  f9b00008          LDRSH    r0,[r0,#8]            ;88  ; GUI_Context
0000e6  42b8              CMP      r0,r7                 ;88
0000e8  dd07              BLE      |L1.250|
0000ea  4869              LDR      r0,|L1.656|
0000ec  f9b00008          LDRSH    r0,[r0,#8]            ;89  ; GUI_Context
0000f0  1bc4              SUBS     r4,r0,r7              ;89
0000f2  1b36              SUBS     r6,r6,r4              ;90
0000f4  eb0a0a84          ADD      r10,r10,r4,LSL #2     ;91
0000f8  4427              ADD      r7,r7,r4              ;92
                  |L1.250|
0000fa  2e00              CMP      r6,#0                 ;94
0000fc  dc00              BGT      |L1.256|
0000fe  e7e4              B        |L1.202|
                  |L1.256|
000100  f04f0b00          MOV      r11,#0                ;98
000104  e036              B        |L1.372|
                  |L1.262|
000106  f8cda00c          STR      r10,[sp,#0xc]         ;100
00010a  2000              MOVS     r0,#0                 ;101
00010c  9004              STR      r0,[sp,#0x10]         ;101
00010e  e025              B        |L1.348|
                  |L1.272|
000110  9803              LDR      r0,[sp,#0xc]          ;103
000112  6800              LDR      r0,[r0,#0]            ;103
000114  9002              STR      r0,[sp,#8]            ;103
000116  9803              LDR      r0,[sp,#0xc]          ;103
000118  1d00              ADDS     r0,r0,#4              ;103
00011a  9003              STR      r0,[sp,#0xc]          ;103
00011c  9907              LDR      r1,[sp,#0x1c]         ;104
00011e  9802              LDR      r0,[sp,#8]            ;104
000120  4288              CMP      r0,r1                 ;104
000122  d007              BEQ      |L1.308|
000124  9918              LDR      r1,[sp,#0x60]         ;105
000126  9802              LDR      r0,[sp,#8]            ;105
000128  4788              BLX      r1                    ;105
00012a  9001              STR      r0,[sp,#4]            ;105
00012c  f7fffffe          BL       LCD_SetColor
000130  9802              LDR      r0,[sp,#8]            ;106
000132  9007              STR      r0,[sp,#0x1c]         ;106
                  |L1.308|
000134  f8dfc158          LDR      r12,|L1.656|
000138  f8bc2002          LDRH     r2,[r12,#2]           ;108  ; GUI_Context
00013c  eb0b0109          ADD      r1,r11,r9             ;108
000140  f8ddc010          LDR      r12,[sp,#0x10]        ;108
000144  eb0c0007          ADD      r0,r12,r7             ;108
000148  f8dfc144          LDR      r12,|L1.656|
00014c  f8dcc048          LDR      r12,[r12,#0x48]       ;108  ; GUI_Context
000150  f8dc3024          LDR      r3,[r12,#0x24]        ;108
000154  4798              BLX      r3                    ;108
000156  9804              LDR      r0,[sp,#0x10]         ;101
000158  1c40              ADDS     r0,r0,#1              ;101
00015a  9004              STR      r0,[sp,#0x10]         ;101
                  |L1.348|
00015c  9804              LDR      r0,[sp,#0x10]         ;101
00015e  42b0              CMP      r0,r6                 ;101
000160  dbd6              BLT      |L1.272|
000162  4628              MOV      r0,r5                 ;110
000164  17e9              ASRS     r1,r5,#31             ;110
000166  eb057191          ADD      r1,r5,r1,LSR #30      ;110
00016a  1089              ASRS     r1,r1,#2              ;110
00016c  eb0a0a81          ADD      r10,r10,r1,LSL #2     ;110
000170  f10b0b01          ADD      r11,r11,#1            ;98
                  |L1.372|
000174  45c3              CMP      r11,r8                ;98
000176  e000              B        |L1.378|
                  |L1.376|
000178  e001              B        |L1.382|
                  |L1.378|
00017a  dbc4              BLT      |L1.262|
00017c  e051              B        |L1.546|
                  |L1.382|
00017e  464c              MOV      r4,r9                 ;116
000180  2000              MOVS     r0,#0                 ;116
000182  9005              STR      r0,[sp,#0x14]         ;116
000184  e049              B        |L1.538|
                  |L1.390|
000186  9817              LDR      r0,[sp,#0x5c]         ;118
000188  4420              ADD      r0,r0,r4              ;118
00018a  1e40              SUBS     r0,r0,#1              ;118
00018c  9004              STR      r0,[sp,#0x10]         ;118
00018e  4840              LDR      r0,|L1.656|
000190  f9b0100a          LDRSH    r1,[r0,#0xa]          ;120
000194  9804              LDR      r0,[sp,#0x10]         ;120
000196  4281              CMP      r1,r0                 ;120
000198  dc30              BGT      |L1.508|
00019a  483d              LDR      r0,|L1.656|
00019c  f9b0000e          LDRSH    r0,[r0,#0xe]          ;120
0001a0  42a0              CMP      r0,r4                 ;120
0001a2  db2b              BLT      |L1.508|
0001a4  f8cda008          STR      r10,[sp,#8]           ;122
0001a8  9706              STR      r7,[sp,#0x18]         ;123
0001aa  2000              MOVS     r0,#0                 ;123
0001ac  9003              STR      r0,[sp,#0xc]          ;123
0001ae  e021              B        |L1.500|
                  |L1.432|
0001b0  9802              LDR      r0,[sp,#8]            ;125
0001b2  6800              LDR      r0,[r0,#0]            ;125
0001b4  9001              STR      r0,[sp,#4]            ;125
0001b6  9802              LDR      r0,[sp,#8]            ;125
0001b8  1d00              ADDS     r0,r0,#4              ;125
0001ba  9002              STR      r0,[sp,#8]            ;125
0001bc  9907              LDR      r1,[sp,#0x1c]         ;126
0001be  9801              LDR      r0,[sp,#4]            ;126
0001c0  4288              CMP      r0,r1                 ;126
0001c2  d007              BEQ      |L1.468|
0001c4  9918              LDR      r1,[sp,#0x60]         ;127
0001c6  9801              LDR      r0,[sp,#4]            ;127
0001c8  4788              BLX      r1                    ;127
0001ca  9000              STR      r0,[sp,#0]            ;127
0001cc  f7fffffe          BL       LCD_SetColor
0001d0  9801              LDR      r0,[sp,#4]            ;128
0001d2  9007              STR      r0,[sp,#0x1c]         ;128
                  |L1.468|
0001d4  9916              LDR      r1,[sp,#0x58]         ;130
0001d6  9806              LDR      r0,[sp,#0x18]         ;130
0001d8  4408              ADD      r0,r0,r1              ;130
0001da  1e42              SUBS     r2,r0,#1              ;130
0001dc  4621              MOV      r1,r4                 ;130
0001de  9b04              LDR      r3,[sp,#0x10]         ;130
0001e0  9806              LDR      r0,[sp,#0x18]         ;130
0001e2  f7fffffe          BL       LCD_FillRect
0001e6  9803              LDR      r0,[sp,#0xc]          ;123
0001e8  1c40              ADDS     r0,r0,#1              ;123
0001ea  9003              STR      r0,[sp,#0xc]          ;123
0001ec  9916              LDR      r1,[sp,#0x58]         ;123
0001ee  9806              LDR      r0,[sp,#0x18]         ;123
0001f0  4408              ADD      r0,r0,r1              ;123
0001f2  9006              STR      r0,[sp,#0x18]         ;123
                  |L1.500|
0001f4  9803              LDR      r0,[sp,#0xc]          ;123
0001f6  42b0              CMP      r0,r6                 ;123
0001f8  dbda              BLT      |L1.432|
0001fa  bf00              NOP                            ;132
                  |L1.508|
0001fc  4628              MOV      r0,r5                 ;133
0001fe  17e9              ASRS     r1,r5,#31             ;133
000200  eb057191          ADD      r1,r5,r1,LSR #30      ;133
000204  1089              ASRS     r1,r1,#2              ;133
000206  eb0a0a81          ADD      r10,r10,r1,LSL #2     ;133
00020a  9805              LDR      r0,[sp,#0x14]         ;116
00020c  1c40              ADDS     r0,r0,#1              ;116
00020e  9005              STR      r0,[sp,#0x14]         ;116
000210  9817              LDR      r0,[sp,#0x5c]         ;116
000212  4404              ADD      r4,r4,r0              ;116
000214  9814              LDR      r0,[sp,#0x50]         ;116
000216  4428              ADD      r0,r0,r5              ;116
000218  9014              STR      r0,[sp,#0x50]         ;116
                  |L1.538|
00021a  9805              LDR      r0,[sp,#0x14]         ;116
00021c  4540              CMP      r0,r8                 ;116
00021e  dbb2              BLT      |L1.390|
000220  bf00              NOP                            ;135
                  |L1.546|
000222  980a              LDR      r0,[sp,#0x28]         ;136
000224  f7fffffe          BL       GUI_SetColorIndex
                  |L1.552|
000228  bf00              NOP      
00022a  e74e              B        |L1.202|
;;;139    
                          ENDP

                  _DrawBitmap_888 PROC
;;;143    */
;;;144    static void _DrawBitmap_888(int x0, int y0, int xsize, int ysize, const U8 GUI_UNI_PTR * pPixel, const LCD_LOGPALETTE GUI_UNI_PTR * pLogPal, int xMag, int yMag) {
00022c  e92d4ff0          PUSH     {r4-r11,lr}
000230  b085              SUB      sp,sp,#0x14
000232  4604              MOV      r4,r0
000234  460d              MOV      r5,r1
000236  4616              MOV      r6,r2
000238  461f              MOV      r7,r3
00023a  e9ddab10          LDRD     r10,r11,[sp,#0x40]
00023e  e9dd890e          LDRD     r8,r9,[sp,#0x38]
;;;145      _DrawBitmap(x0, y0, xsize, ysize, pPixel, pLogPal, xMag, yMag, GUI_BitmapMethods888.pfIndex2Color);
000242  4814              LDR      r0,|L1.660|
000244  6840              LDR      r0,[r0,#4]  ; GUI_BitmapMethods888
000246  463b              MOV      r3,r7
000248  4632              MOV      r2,r6
00024a  4629              MOV      r1,r5
00024c  e88d0f00          STM      sp,{r8-r11}
000250  9004              STR      r0,[sp,#0x10]
000252  4620              MOV      r0,r4
000254  f7fffffe          BL       _DrawBitmap
;;;146    }
000258  b005              ADD      sp,sp,#0x14
00025a  e8bd8ff0          POP      {r4-r11,pc}
;;;147    
                          ENDP

                  _DrawBitmap_M888 PROC
;;;151    */
;;;152    static void _DrawBitmap_M888(int x0, int y0, int xsize, int ysize, const U8 GUI_UNI_PTR * pPixel, const LCD_LOGPALETTE GUI_UNI_PTR * pLogPal, int xMag, int yMag) {
00025e  e92d4ff0          PUSH     {r4-r11,lr}
000262  b085              SUB      sp,sp,#0x14
000264  4604              MOV      r4,r0
000266  460d              MOV      r5,r1
000268  4616              MOV      r6,r2
00026a  461f              MOV      r7,r3
00026c  e9ddab10          LDRD     r10,r11,[sp,#0x40]
000270  e9dd890e          LDRD     r8,r9,[sp,#0x38]
;;;153      _DrawBitmap(x0, y0, xsize, ysize, pPixel, pLogPal, xMag, yMag, GUI_BitmapMethodsM888.pfIndex2Color);
000274  4808              LDR      r0,|L1.664|
000276  6840              LDR      r0,[r0,#4]  ; GUI_BitmapMethodsM888
000278  463b              MOV      r3,r7
00027a  4632              MOV      r2,r6
00027c  4629              MOV      r1,r5
00027e  e88d0f00          STM      sp,{r8-r11}
000282  9004              STR      r0,[sp,#0x10]
000284  4620              MOV      r0,r4
000286  f7fffffe          BL       _DrawBitmap
;;;154    }
00028a  b005              ADD      sp,sp,#0x14
00028c  e8bd8ff0          POP      {r4-r11,pc}
;;;155    
                          ENDP

                  |L1.656|
                          DCD      GUI_Context
                  |L1.660|
                          DCD      GUI_BitmapMethods888
                  |L1.664|
                          DCD      GUI_BitmapMethodsM888

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  GUI_BitmapMethods888
                          DCD      _DrawBitmap_888
                          DCD      LCD_Index2Color_888
                  GUI_BitmapMethodsM888
                          DCD      _DrawBitmap_M888
                          DCD      LCD_Index2Color_M888
