; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\lcdp8666_1.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\lcdp8666_1.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -I.\GUI\AntiAlias -I.\GUI\Config -I.\GUI\ConvertColor -I.\GUI\ConvertMono -I.\GUI\Core -I.\GUI\Font -I.\GUI\GUI_X -I.\GUI\JPEG -I.\GUI\LCDDriver -I.\GUI\MemDev -I.\GUI\MultiLayer -I.\GUI\Widget -I.\GUI\WM -IC:\Users\Administrator\Desktop\gui\STM32·Ü¶·°å-3.98\RTE -Id:\Keil_v5\ARM\PACK\ARM\CMSIS\4.3.0\CMSIS\Include -Id:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.1.0\Device\Include -D__UVISION_VERSION=515 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\lcdp8666_1.crf GUI\ConvertColor\LCDP8666_1.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=1

                  LCD_Color2Index_8666_1 PROC
;;;31     */
;;;32     unsigned LCD_Color2Index_8666_1(LCD_COLOR Color) {
000000  b570              PUSH     {r4-r6,lr}
000002  4601              MOV      r1,r0
;;;33       int r, g, b, Index;
;;;34       r = Color & 255;
000004  b2ca              UXTB     r2,r1
;;;35       g = (Color >> 8) & 255;
000006  f3c12307          UBFX     r3,r1,#8,#8
;;;36       b = Color >> 16;
00000a  0c0d              LSRS     r5,r1,#16
;;;37     /* Check if image is a gray scale ... */
;;;38     	if ((r == g) && (g == b)) {
00000c  429a              CMP      r2,r3
00000e  d108              BNE      |L1.34|
000010  42ab              CMP      r3,r5
000012  d106              BNE      |L1.34|
;;;39         return 120 + (r + 8) / 17;  /* Convert into colors from 120 - 135 */
000014  f1020008          ADD      r0,r2,#8
000018  2611              MOVS     r6,#0x11
00001a  fb90f0f6          SDIV     r0,r0,r6
00001e  3078              ADDS     r0,r0,#0x78
                  |L1.32|
;;;40     	}
;;;41     /* Convert into the 6*6*6 colors ... */
;;;42       r = (r * 5 + 127) / 255;
;;;43       g = (g * 5 + 127) / 255;
;;;44       b = (b * 5 + 127) / 255;
;;;45       Index = r + 6 * g + 36 * b;
;;;46       return (Index < 108) ? Index + 12 : Index + 28;
;;;47     }
000020  bd70              POP      {r4-r6,pc}
                  |L1.34|
000022  eb020082          ADD      r0,r2,r2,LSL #2       ;42
000026  307f              ADDS     r0,r0,#0x7f           ;42
000028  26ff              MOVS     r6,#0xff              ;42
00002a  fb90f2f6          SDIV     r2,r0,r6              ;42
00002e  eb030083          ADD      r0,r3,r3,LSL #2       ;43
000032  307f              ADDS     r0,r0,#0x7f           ;43
000034  fb90f3f6          SDIV     r3,r0,r6              ;43
000038  eb050085          ADD      r0,r5,r5,LSL #2       ;44
00003c  307f              ADDS     r0,r0,#0x7f           ;44
00003e  fb90f5f6          SDIV     r5,r0,r6              ;44
000042  2006              MOVS     r0,#6                 ;45
000044  fb002003          MLA      r0,r0,r3,r2           ;45
000048  2624              MOVS     r6,#0x24              ;45
00004a  fb060405          MLA      r4,r6,r5,r0           ;45
00004e  2c6c              CMP      r4,#0x6c              ;46
000050  da02              BGE      |L1.88|
000052  f104000c          ADD      r0,r4,#0xc            ;46
000056  e7e3              B        |L1.32|
                  |L1.88|
000058  f104001c          ADD      r0,r4,#0x1c           ;46
00005c  e7e0              B        |L1.32|
;;;48     
                          ENDP

                  LCD_Index2Color_8666_1 PROC
;;;52     */
;;;53     LCD_COLOR LCD_Index2Color_8666_1(int Index) {
00005e  b570              PUSH     {r4-r6,lr}
000060  4601              MOV      r1,r0
;;;54       unsigned int r,g;
;;;55       U32 b;
;;;56       /* 16 Gray scale range ? */
;;;57       if ((Index >= 120) && (Index < 136)) {
000062  2978              CMP      r1,#0x78
000064  db0a              BLT      |L1.124|
000066  2988              CMP      r1,#0x88
000068  da08              BGE      |L1.124|
;;;58         return (U32)0x111111 * (U32)(Index - 120);
00006a  f1a10078          SUB      r0,r1,#0x78
00006e  eb001500          ADD      r5,r0,r0,LSL #4
000072  eb052000          ADD      r0,r5,r0,LSL #8
000076  eb003000          ADD      r0,r0,r0,LSL #12
                  |L1.122|
;;;59     	}
;;;60       if ((Index < 12) || (Index > 243)) {
;;;61         return 0;  /* Black for illegal indices */
;;;62       }
;;;63       if (Index >= 120) {
;;;64         Index -= 28;
;;;65       } else {
;;;66         Index -= 12;
;;;67       }
;;;68       r = (Index % 6) * (255 / 5);
;;;69       g = ((Index / 6) % 6) * (255 / 5);
;;;70       b = (Index / 36) * (255 / 5);
;;;71       return r + (g << 8) + ((U32)b << 16);
;;;72     }
00007a  bd70              POP      {r4-r6,pc}
                  |L1.124|
00007c  290c              CMP      r1,#0xc               ;60
00007e  db01              BLT      |L1.132|
000080  29f3              CMP      r1,#0xf3              ;60
000082  dd01              BLE      |L1.136|
                  |L1.132|
000084  2000              MOVS     r0,#0                 ;61
000086  e7f8              B        |L1.122|
                  |L1.136|
000088  2978              CMP      r1,#0x78              ;63
00008a  db01              BLT      |L1.144|
00008c  391c              SUBS     r1,r1,#0x1c           ;64
00008e  e000              B        |L1.146|
                  |L1.144|
000090  390c              SUBS     r1,r1,#0xc            ;66
                  |L1.146|
000092  2006              MOVS     r0,#6                 ;68
000094  fb91f5f0          SDIV     r5,r1,r0              ;68
000098  fb001015          MLS      r0,r0,r5,r1           ;68
00009c  eb001000          ADD      r0,r0,r0,LSL #4       ;68
0000a0  eb000440          ADD      r4,r0,r0,LSL #1       ;68
0000a4  2006              MOVS     r0,#6                 ;69
0000a6  fb91f0f0          SDIV     r0,r1,r0              ;69
0000aa  2506              MOVS     r5,#6                 ;69
0000ac  fb90f6f5          SDIV     r6,r0,r5              ;69
0000b0  fb050016          MLS      r0,r5,r6,r0           ;69
0000b4  eb001000          ADD      r0,r0,r0,LSL #4       ;69
0000b8  eb000240          ADD      r2,r0,r0,LSL #1       ;69
0000bc  2024              MOVS     r0,#0x24              ;70
0000be  fb91f0f0          SDIV     r0,r1,r0              ;70
0000c2  eb001000          ADD      r0,r0,r0,LSL #4       ;70
0000c6  eb000340          ADD      r3,r0,r0,LSL #1       ;70
0000ca  eb042002          ADD      r0,r4,r2,LSL #8       ;71
0000ce  eb004003          ADD      r0,r0,r3,LSL #16      ;71
0000d2  e7d2              B        |L1.122|
;;;73     
                          ENDP

                  LCD_GetIndexMask_8666_1 PROC
;;;77     */
;;;78     unsigned LCD_GetIndexMask_8666_1(void) {
0000d4  20ff              MOVS     r0,#0xff
;;;79       return 0xff;
;;;80     }
0000d6  4770              BX       lr
;;;81     
                          ENDP

