; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\jdsample.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\jdsample.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -I.\GUI\AntiAlias -I.\GUI\Config -I.\GUI\ConvertColor -I.\GUI\ConvertMono -I.\GUI\Core -I.\GUI\Font -I.\GUI\GUI_X -I.\GUI\JPEG -I.\GUI\LCDDriver -I.\GUI\MemDev -I.\GUI\MultiLayer -I.\GUI\Widget -I.\GUI\WM -IC:\Users\Administrator\Desktop\gui\STM32·Ü¶·°å-3.98\RTE -Id:\Keil_v5\ARM\PACK\ARM\CMSIS\4.3.0\CMSIS\Include -Id:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.1.0\Device\Include -D__UVISION_VERSION=515 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\jdsample.crf GUI\JPEG\jdsample.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  start_pass_upsample PROC
;;;68     METHODDEF(void)
;;;69     start_pass_upsample (j_decompress_ptr cinfo)
000000  f8d011c4          LDR      r1,[r0,#0x1c4]
;;;70     {
;;;71       my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
;;;72     
;;;73       /* Mark the conversion buffer empty */
;;;74       upsample->next_row_out = cinfo->max_v_samp_factor;
000004  f8d02138          LDR      r2,[r0,#0x138]
000008  62ca              STR      r2,[r1,#0x2c]
;;;75       /* Initialize total-height counter for detecting bottom of image */
;;;76       upsample->rows_to_go = cinfo->output_height;
00000a  6f42              LDR      r2,[r0,#0x74]
00000c  630a              STR      r2,[r1,#0x30]
;;;77     }
00000e  4770              BX       lr
;;;78     
                          ENDP

                  sep_upsample PROC
;;;88     METHODDEF(void)
;;;89     sep_upsample (j_decompress_ptr cinfo,
000010  e92d4fff          PUSH     {r0-r11,lr}
;;;90     	      JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
;;;91     	      JDIMENSION in_row_groups_avail,
;;;92     	      JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
;;;93     	      JDIMENSION out_rows_avail)
;;;94     {
000014  b081              SUB      sp,sp,#4
000016  4605              MOV      r5,r0
000018  4690              MOV      r8,r2
00001a  e9dd9a0f          LDRD     r9,r10,[sp,#0x3c]
;;;95       my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
00001e  f8d541c4          LDR      r4,[r5,#0x1c4]
;;;96       int ci;
;;;97       jpeg_component_info * compptr;
;;;98       JDIMENSION num_rows;
;;;99     
;;;100      GUI_USE_PARA(in_row_groups_avail);
000022  9804              LDR      r0,[sp,#0x10]
000024  9004              STR      r0,[sp,#0x10]
;;;101      /* Fill the conversion buffer, if it's empty */
;;;102      if (upsample->next_row_out >= cinfo->max_v_samp_factor) {
000026  6ae0              LDR      r0,[r4,#0x2c]
000028  f8d51138          LDR      r1,[r5,#0x138]
00002c  4288              CMP      r0,r1
00002e  db21              BLT      |L1.116|
;;;103        for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
000030  2600              MOVS     r6,#0
000032  f8d5b0d8          LDR      r11,[r5,#0xd8]
000036  e018              B        |L1.106|
                  |L1.56|
;;;104    	 ci++, compptr++) {
;;;105          /* Invoke per-component upsample method.  Notice we pass a POINTER
;;;106           * to color_buf[ci], so that fullsize_upsample can change it.
;;;107           */
;;;108          (*upsample->methods[ci]) (cinfo, compptr,
000038  f1040134          ADD      r1,r4,#0x34
00003c  f8511026          LDR      r1,[r1,r6,LSL #2]
000040  f8d80000          LDR      r0,[r8,#0]
000044  4348              MULS     r0,r1,r0
000046  9902              LDR      r1,[sp,#8]
000048  f8511026          LDR      r1,[r1,r6,LSL #2]
00004c  eb010280          ADD      r2,r1,r0,LSL #2
000050  f104000c          ADD      r0,r4,#0xc
000054  eb000386          ADD      r3,r0,r6,LSL #2
000058  3010              ADDS     r0,r0,#0x10
00005a  f850c026          LDR      r12,[r0,r6,LSL #2]
00005e  4659              MOV      r1,r11
000060  4628              MOV      r0,r5
000062  47e0              BLX      r12
000064  1c76              ADDS     r6,r6,#1              ;104
000066  f10b0b54          ADD      r11,r11,#0x54         ;104
                  |L1.106|
00006a  6a68              LDR      r0,[r5,#0x24]         ;103
00006c  42b0              CMP      r0,r6                 ;103
00006e  dce3              BGT      |L1.56|
;;;109    	input_buf[ci] + (*in_row_group_ctr * upsample->rowgroup_height[ci]),
;;;110    	upsample->color_buf + ci);
;;;111        }
;;;112        upsample->next_row_out = 0;
000070  2000              MOVS     r0,#0
000072  62e0              STR      r0,[r4,#0x2c]
                  |L1.116|
;;;113      }
;;;114    
;;;115      /* Color-convert and emit rows */
;;;116    
;;;117      /* How many we have in the buffer: */
;;;118      num_rows = (JDIMENSION) (cinfo->max_v_samp_factor - upsample->next_row_out);
000074  f8d50138          LDR      r0,[r5,#0x138]
000078  6ae1              LDR      r1,[r4,#0x2c]
00007a  1a47              SUBS     r7,r0,r1
;;;119      /* Not more than the distance to the end of the image.  Need this test
;;;120       * in case the image height is not a multiple of max_v_samp_factor:
;;;121       */
;;;122      if (num_rows > upsample->rows_to_go) 
00007c  6b20              LDR      r0,[r4,#0x30]
00007e  42b8              CMP      r0,r7
000080  d200              BCS      |L1.132|
;;;123        num_rows = upsample->rows_to_go;
000082  6b27              LDR      r7,[r4,#0x30]
                  |L1.132|
;;;124      /* And not more than what the client can accept: */
;;;125      out_rows_avail -= *out_row_ctr;
000084  f8d90000          LDR      r0,[r9,#0]
000088  ebaa0a00          SUB      r10,r10,r0
;;;126      if (num_rows > out_rows_avail)
00008c  4557              CMP      r7,r10
00008e  d900              BLS      |L1.146|
;;;127        num_rows = out_rows_avail;
000090  4657              MOV      r7,r10
                  |L1.146|
;;;128    
;;;129      (*cinfo->cconvert->color_convert) (cinfo, upsample->color_buf,
000092  9700              STR      r7,[sp,#0]
000094  f8d91000          LDR      r1,[r9,#0]
000098  980e              LDR      r0,[sp,#0x38]
00009a  eb000381          ADD      r3,r0,r1,LSL #2
00009e  6ae2              LDR      r2,[r4,#0x2c]
0000a0  f8d501c8          LDR      r0,[r5,#0x1c8]
0000a4  f104010c          ADD      r1,r4,#0xc
0000a8  f8d0c004          LDR      r12,[r0,#4]
0000ac  4628              MOV      r0,r5
0000ae  47e0              BLX      r12
;;;130    				     (JDIMENSION) upsample->next_row_out,
;;;131    				     output_buf + *out_row_ctr,
;;;132    				     (int) num_rows);
;;;133    
;;;134      /* Adjust counts */
;;;135      *out_row_ctr += num_rows;
0000b0  f8d90000          LDR      r0,[r9,#0]
0000b4  4438              ADD      r0,r0,r7
0000b6  f8c90000          STR      r0,[r9,#0]
;;;136      upsample->rows_to_go -= num_rows;
0000ba  6b20              LDR      r0,[r4,#0x30]
0000bc  1bc0              SUBS     r0,r0,r7
0000be  6320              STR      r0,[r4,#0x30]
;;;137      upsample->next_row_out += num_rows;
0000c0  6ae0              LDR      r0,[r4,#0x2c]
0000c2  4438              ADD      r0,r0,r7
0000c4  62e0              STR      r0,[r4,#0x2c]
;;;138      /* When the buffer is emptied, declare this input row group consumed */
;;;139      if (upsample->next_row_out >= cinfo->max_v_samp_factor)
0000c6  6ae0              LDR      r0,[r4,#0x2c]
0000c8  f8d51138          LDR      r1,[r5,#0x138]
0000cc  4288              CMP      r0,r1
0000ce  db04              BLT      |L1.218|
;;;140        (*in_row_group_ctr)++;
0000d0  f8d80000          LDR      r0,[r8,#0]
0000d4  1c40              ADDS     r0,r0,#1
0000d6  f8c80000          STR      r0,[r8,#0]
                  |L1.218|
;;;141    }
0000da  b005              ADD      sp,sp,#0x14
0000dc  e8bd8ff0          POP      {r4-r11,pc}
;;;142    
                          ENDP

                  fullsize_upsample PROC
;;;157    METHODDEF(void)
;;;158    fullsize_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
0000e0  bf00              NOP      
;;;159    		   JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
;;;160    {
;;;161      GUI_USE_PARA(compptr);
;;;162      GUI_USE_PARA(cinfo);
0000e2  bf00              NOP      
;;;163      *output_data_ptr = input_data;
0000e4  601a              STR      r2,[r3,#0]
;;;164    }
0000e6  4770              BX       lr
;;;165    
                          ENDP

                  noop_upsample PROC
;;;172    METHODDEF(void)
;;;173    noop_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
0000e8  b510              PUSH     {r4,lr}
;;;174    	       JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
;;;175    {
;;;176      GUI_USE_PARA(cinfo);
0000ea  bf00              NOP      
;;;177      GUI_USE_PARA(compptr);
0000ec  bf00              NOP      
;;;178      GUI_USE_PARA(input_data);
0000ee  bf00              NOP      
;;;179      *output_data_ptr = NULL;	/* safety check */
0000f0  2400              MOVS     r4,#0
0000f2  601c              STR      r4,[r3,#0]
;;;180    }
0000f4  bd10              POP      {r4,pc}
;;;181    
                          ENDP

                  int_upsample PROC
;;;194    METHODDEF(void)
;;;195    int_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
0000f6  e92d4fff          PUSH     {r0-r11,lr}
;;;196    	      JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
;;;197    {
0000fa  b087              SUB      sp,sp,#0x1c
0000fc  4604              MOV      r4,r0
0000fe  460f              MOV      r7,r1
;;;198      my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
000100  f8d4a1c4          LDR      r10,[r4,#0x1c4]
;;;199      JSAMPARRAY output_data = *output_data_ptr;
000104  980a              LDR      r0,[sp,#0x28]
000106  f8d08000          LDR      r8,[r0,#0]
;;;200      register JSAMPROW inptr, outptr;
;;;201      register JSAMPLE invalue;
;;;202      register int h;
;;;203      JSAMPROW outend;
;;;204      int h_expand, v_expand;
;;;205      int inrow, outrow;
;;;206    
;;;207      h_expand = upsample->h_expand[compptr->component_index];
00010a  f10a0044          ADD      r0,r10,#0x44
00010e  6879              LDR      r1,[r7,#4]
000110  5c40              LDRB     r0,[r0,r1]
000112  9003              STR      r0,[sp,#0xc]
;;;208      v_expand = upsample->v_expand[compptr->component_index];
000114  f10a0048          ADD      r0,r10,#0x48
000118  6879              LDR      r1,[r7,#4]
00011a  f8109001          LDRB     r9,[r0,r1]
;;;209    
;;;210      inrow = outrow = 0;
00011e  2000              MOVS     r0,#0
000120  4605              MOV      r5,r0
000122  9002              STR      r0,[sp,#8]
;;;211      while (outrow < cinfo->max_v_samp_factor) {
000124  e02e              B        |L1.388|
                  |L1.294|
;;;212        /* Generate one output row with proper horizontal expansion */
;;;213        inptr = input_data[inrow];
000126  9902              LDR      r1,[sp,#8]
000128  9809              LDR      r0,[sp,#0x24]
00012a  f8500021          LDR      r0,[r0,r1,LSL #2]
00012e  9006              STR      r0,[sp,#0x18]
;;;214        outptr = output_data[outrow];
000130  f8586025          LDR      r6,[r8,r5,LSL #2]
;;;215        outend = outptr + cinfo->output_width;
000134  6f20              LDR      r0,[r4,#0x70]
000136  4430              ADD      r0,r0,r6
000138  9004              STR      r0,[sp,#0x10]
;;;216        while (outptr < outend) {
00013a  e00e              B        |L1.346|
                  |L1.316|
;;;217          invalue = *inptr++;	/* don't need GETJSAMPLE() here */
00013c  9806              LDR      r0,[sp,#0x18]
00013e  f810bb01          LDRB     r11,[r0],#1
000142  9006              STR      r0,[sp,#0x18]
;;;218          for (h = h_expand; h > 0; h--) {
000144  9803              LDR      r0,[sp,#0xc]
000146  9005              STR      r0,[sp,#0x14]
000148  e004              B        |L1.340|
                  |L1.330|
;;;219    	*outptr++ = invalue;
00014a  f806bb01          STRB     r11,[r6],#1
00014e  9805              LDR      r0,[sp,#0x14]         ;218
000150  1e40              SUBS     r0,r0,#1              ;218
000152  9005              STR      r0,[sp,#0x14]         ;218
                  |L1.340|
000154  9805              LDR      r0,[sp,#0x14]         ;218
000156  2800              CMP      r0,#0                 ;218
000158  dcf7              BGT      |L1.330|
                  |L1.346|
00015a  9804              LDR      r0,[sp,#0x10]         ;216
00015c  4286              CMP      r6,r0                 ;216
00015e  d3ed              BCC      |L1.316|
;;;220          }
;;;221        }
;;;222        /* Generate any additional output rows by duplicating the first one */
;;;223        if (v_expand > 1) {
000160  f1b90f01          CMP      r9,#1
000164  dd0a              BLE      |L1.380|
;;;224          jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
000166  f1a90001          SUB      r0,r9,#1
00016a  6f21              LDR      r1,[r4,#0x70]
00016c  1c6b              ADDS     r3,r5,#1
00016e  4642              MOV      r2,r8
000170  e9cd0100          STRD     r0,r1,[sp,#0]
000174  4629              MOV      r1,r5
000176  4640              MOV      r0,r8
000178  f7fffffe          BL       jcopy_sample_rows
                  |L1.380|
;;;225    			v_expand-1, cinfo->output_width);
;;;226        }
;;;227        inrow++;
00017c  9802              LDR      r0,[sp,#8]
00017e  1c40              ADDS     r0,r0,#1
000180  9002              STR      r0,[sp,#8]
;;;228        outrow += v_expand;
000182  444d              ADD      r5,r5,r9
                  |L1.388|
000184  f8d40138          LDR      r0,[r4,#0x138]        ;211
000188  42a8              CMP      r0,r5                 ;211
00018a  dccc              BGT      |L1.294|
;;;229      }
;;;230    }
00018c  b00b              ADD      sp,sp,#0x2c
00018e  e8bd8ff0          POP      {r4-r11,pc}
;;;231    
                          ENDP

                  h2v1_upsample PROC
;;;238    METHODDEF(void)
;;;239    h2v1_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
000192  e92d43f0          PUSH     {r4-r9,lr}
;;;240    	       JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
;;;241    {
000196  4604              MOV      r4,r0
000198  460d              MOV      r5,r1
00019a  4616              MOV      r6,r2
;;;242      JSAMPARRAY output_data = *output_data_ptr;
00019c  f8d38000          LDR      r8,[r3,#0]
;;;243      register JSAMPROW inptr, outptr;
;;;244      register JSAMPLE invalue;
;;;245      JSAMPROW outend;
;;;246      int inrow;
;;;247    
;;;248      GUI_USE_PARA(compptr);
0001a0  bf00              NOP      
;;;249      for (inrow = 0; inrow < cinfo->max_v_samp_factor; inrow++) {
0001a2  2100              MOVS     r1,#0
0001a4  e011              B        |L1.458|
                  |L1.422|
;;;250        inptr = input_data[inrow];
0001a6  f8567021          LDR      r7,[r6,r1,LSL #2]
;;;251        outptr = output_data[inrow];
0001aa  f8580021          LDR      r0,[r8,r1,LSL #2]
;;;252        outend = outptr + cinfo->output_width;
0001ae  f8d49070          LDR      r9,[r4,#0x70]
0001b2  eb090c00          ADD      r12,r9,r0
;;;253        while (outptr < outend) {
0001b6  e005              B        |L1.452|
                  |L1.440|
;;;254          invalue = *inptr++;	/* don't need GETJSAMPLE() here */
0001b8  f8172b01          LDRB     r2,[r7],#1
;;;255          *outptr++ = invalue;
0001bc  f8002b01          STRB     r2,[r0],#1
;;;256          *outptr++ = invalue;
0001c0  f8002b01          STRB     r2,[r0],#1
                  |L1.452|
0001c4  4560              CMP      r0,r12                ;253
0001c6  d3f7              BCC      |L1.440|
0001c8  1c49              ADDS     r1,r1,#1              ;249
                  |L1.458|
0001ca  f8d49138          LDR      r9,[r4,#0x138]        ;249
0001ce  4589              CMP      r9,r1                 ;249
0001d0  dce9              BGT      |L1.422|
;;;257        }
;;;258      }
;;;259    }
0001d2  e8bd83f0          POP      {r4-r9,pc}
;;;260    
                          ENDP

                  h2v2_upsample PROC
;;;267    METHODDEF(void)
;;;268    h2v2_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
0001d6  e92d4fff          PUSH     {r0-r11,lr}
;;;269    	       JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
;;;270    {
0001da  b083              SUB      sp,sp,#0xc
0001dc  4606              MOV      r6,r0
0001de  4689              MOV      r9,r1
;;;271      JSAMPARRAY output_data = *output_data_ptr;
0001e0  9806              LDR      r0,[sp,#0x18]
0001e2  6807              LDR      r7,[r0,#0]
;;;272      register JSAMPROW inptr, outptr;
;;;273      register JSAMPLE invalue;
;;;274      JSAMPROW outend;
;;;275      int inrow, outrow;
;;;276    
;;;277      GUI_USE_PARA(compptr);
0001e4  bf00              NOP      
;;;278      inrow = outrow = 0;
0001e6  2000              MOVS     r0,#0
0001e8  4605              MOV      r5,r0
0001ea  9002              STR      r0,[sp,#8]
;;;279      while (outrow < cinfo->max_v_samp_factor) {
0001ec  e01f              B        |L1.558|
                  |L1.494|
;;;280        inptr = input_data[inrow];
0001ee  9902              LDR      r1,[sp,#8]
0001f0  9805              LDR      r0,[sp,#0x14]
0001f2  f850a021          LDR      r10,[r0,r1,LSL #2]
;;;281        outptr = output_data[outrow];
0001f6  f8574025          LDR      r4,[r7,r5,LSL #2]
;;;282        outend = outptr + cinfo->output_width;
0001fa  6f30              LDR      r0,[r6,#0x70]
0001fc  eb000b04          ADD      r11,r0,r4
;;;283        while (outptr < outend) {
000200  e005              B        |L1.526|
                  |L1.514|
;;;284          invalue = *inptr++;	/* don't need GETJSAMPLE() here */
000202  f81a8b01          LDRB     r8,[r10],#1
;;;285          *outptr++ = invalue;
000206  f8048b01          STRB     r8,[r4],#1
;;;286          *outptr++ = invalue;
00020a  f8048b01          STRB     r8,[r4],#1
                  |L1.526|
00020e  455c              CMP      r4,r11                ;283
000210  d3f7              BCC      |L1.514|
;;;287        }
;;;288        jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
000212  2101              MOVS     r1,#1
000214  6f30              LDR      r0,[r6,#0x70]
000216  1c6b              ADDS     r3,r5,#1
000218  463a              MOV      r2,r7
00021a  e9cd1000          STRD     r1,r0,[sp,#0]
00021e  4629              MOV      r1,r5
000220  4638              MOV      r0,r7
000222  f7fffffe          BL       jcopy_sample_rows
;;;289    		      1, cinfo->output_width);
;;;290        inrow++;
000226  9802              LDR      r0,[sp,#8]
000228  1c40              ADDS     r0,r0,#1
00022a  9002              STR      r0,[sp,#8]
;;;291        outrow += 2;
00022c  1cad              ADDS     r5,r5,#2
                  |L1.558|
00022e  f8d60138          LDR      r0,[r6,#0x138]        ;279
000232  42a8              CMP      r0,r5                 ;279
000234  dcdb              BGT      |L1.494|
;;;292      }
;;;293    }
000236  b007              ADD      sp,sp,#0x1c
000238  e8bd8ff0          POP      {r4-r11,pc}
;;;294    
                          ENDP

                  h2v1_fancy_upsample PROC
;;;311    METHODDEF(void)
;;;312    h2v1_fancy_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
00023c  e92d47f0          PUSH     {r4-r10,lr}
;;;313    		     JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
;;;314    {
000240  4604              MOV      r4,r0
000242  460d              MOV      r5,r1
000244  4616              MOV      r6,r2
000246  461f              MOV      r7,r3
;;;315      JSAMPARRAY output_data = *output_data_ptr;
000248  f8d78000          LDR      r8,[r7,#0]
;;;316      register JSAMPROW inptr, outptr;
;;;317      register int invalue;
;;;318      register JDIMENSION colctr;
;;;319      int inrow;
;;;320    
;;;321      for (inrow = 0; inrow < cinfo->max_v_samp_factor; inrow++) {
00024c  2300              MOVS     r3,#0
00024e  e040              B        |L1.722|
                  |L1.592|
;;;322        inptr = input_data[inrow];
000250  f8561023          LDR      r1,[r6,r3,LSL #2]
;;;323        outptr = output_data[inrow];
000254  f8580023          LDR      r0,[r8,r3,LSL #2]
;;;324        /* Special case for first column */
;;;325        invalue = GETJSAMPLE(*inptr++);
000258  f8112b01          LDRB     r2,[r1],#1
;;;326        *outptr++ = (JSAMPLE) invalue;
00025c  f8002b01          STRB     r2,[r0],#1
;;;327        *outptr++ = (JSAMPLE) ((invalue * 3 + GETJSAMPLE(*inptr) + 2) >> 2);
000260  eb020942          ADD      r9,r2,r2,LSL #1
000264  f891a000          LDRB     r10,[r1,#0]
000268  44d1              ADD      r9,r9,r10
00026a  f1090902          ADD      r9,r9,#2
00026e  f3c90987          UBFX     r9,r9,#2,#8
000272  f8009b01          STRB     r9,[r0],#1
;;;328    
;;;329        for (colctr = compptr->downsampled_width - 2; colctr > 0; colctr--) {
000276  f8d59028          LDR      r9,[r5,#0x28]
00027a  f1a90c02          SUB      r12,r9,#2
00027e  e017              B        |L1.688|
                  |L1.640|
;;;330          /* General case: 3/4 * nearer pixel + 1/4 * further pixel */
;;;331          invalue = GETJSAMPLE(*inptr++) * 3;
000280  f811ab01          LDRB     r10,[r1],#1
000284  eb0a024a          ADD      r2,r10,r10,LSL #1
;;;332          *outptr++ = (JSAMPLE) ((invalue + GETJSAMPLE(inptr[-2]) + 1) >> 2);
000288  f8119c02          LDRB     r9,[r1,#-2]
00028c  4491              ADD      r9,r9,r2
00028e  f1090901          ADD      r9,r9,#1
000292  f3c90987          UBFX     r9,r9,#2,#8
000296  f8009b01          STRB     r9,[r0],#1
;;;333          *outptr++ = (JSAMPLE) ((invalue + GETJSAMPLE(*inptr) + 2) >> 2);
00029a  f8919000          LDRB     r9,[r1,#0]
00029e  4491              ADD      r9,r9,r2
0002a0  f1090902          ADD      r9,r9,#2
0002a4  f3c90987          UBFX     r9,r9,#2,#8
0002a8  f8009b01          STRB     r9,[r0],#1
0002ac  f1ac0c01          SUB      r12,r12,#1            ;329
                  |L1.688|
0002b0  f1bc0f00          CMP      r12,#0                ;329
0002b4  d1e4              BNE      |L1.640|
;;;334        }
;;;335    
;;;336        /* Special case for last column */
;;;337        invalue = GETJSAMPLE(*inptr);
0002b6  780a              LDRB     r2,[r1,#0]
;;;338        *outptr++ = (JSAMPLE) ((invalue * 3 + GETJSAMPLE(inptr[-1]) + 1) >> 2);
0002b8  eb020942          ADD      r9,r2,r2,LSL #1
0002bc  f811ac01          LDRB     r10,[r1,#-1]
0002c0  44d1              ADD      r9,r9,r10
0002c2  f1090901          ADD      r9,r9,#1
0002c6  f3c90987          UBFX     r9,r9,#2,#8
0002ca  f8009b01          STRB     r9,[r0],#1
;;;339        *outptr   = (JSAMPLE) invalue;
0002ce  7002              STRB     r2,[r0,#0]
0002d0  1c5b              ADDS     r3,r3,#1              ;321
                  |L1.722|
0002d2  f8d49138          LDR      r9,[r4,#0x138]        ;321
0002d6  4599              CMP      r9,r3                 ;321
0002d8  dcba              BGT      |L1.592|
;;;340      }
;;;341    }
0002da  e8bd87f0          POP      {r4-r10,pc}
;;;342    
                          ENDP

                  h2v2_fancy_upsample PROC
;;;352    METHODDEF(void)
;;;353    h2v2_fancy_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
0002de  e92d4fff          PUSH     {r0-r11,lr}
;;;354    		     JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
;;;355    {
0002e2  b081              SUB      sp,sp,#4
0002e4  4614              MOV      r4,r2
;;;356      JSAMPARRAY output_data = *output_data_ptr;
0002e6  f8dda010          LDR      r10,[sp,#0x10]
0002ea  f8daa000          LDR      r10,[r10,#0]
0002ee  f8cda000          STR      r10,[sp,#0]
;;;357      register JSAMPROW inptr0, inptr1, outptr;
;;;358    #if BITS_IN_JSAMPLE == 8
;;;359      register int thiscolsum, lastcolsum, nextcolsum;
;;;360    #else
;;;361      register INT32 thiscolsum, lastcolsum, nextcolsum;
;;;362    #endif
;;;363      register JDIMENSION colctr;
;;;364      int inrow, outrow, v;
;;;365    
;;;366      inrow = outrow = 0;
0002f2  f04f0a00          MOV      r10,#0
0002f6  46d1              MOV      r9,r10
0002f8  4656              MOV      r6,r10
;;;367      while (outrow < cinfo->max_v_samp_factor) {
0002fa  e074              B        |L1.998|
                  |L1.764|
;;;368        for (v = 0; v < 2; v++) {
0002fc  2700              MOVS     r7,#0
0002fe  e06f              B        |L1.992|
                  |L1.768|
;;;369          /* inptr0 points to nearest input row, inptr1 points to next nearest */
;;;370          inptr0 = input_data[inrow];
000300  f8542026          LDR      r2,[r4,r6,LSL #2]
;;;371          if (v == 0)		/* next nearest is row above */
000304  b927              CBNZ     r7,|L1.784|
;;;372    	inptr1 = input_data[inrow-1];
000306  f1a60a01          SUB      r10,r6,#1
00030a  f854302a          LDR      r3,[r4,r10,LSL #2]
00030e  e003              B        |L1.792|
                  |L1.784|
;;;373          else			/* next nearest is row below */
;;;374    	inptr1 = input_data[inrow+1];
000310  f1060a01          ADD      r10,r6,#1
000314  f854302a          LDR      r3,[r4,r10,LSL #2]
                  |L1.792|
;;;375          outptr = output_data[outrow++];
000318  46ca              MOV      r10,r9
00031a  f1090901          ADD      r9,r9,#1
00031e  f8ddb000          LDR      r11,[sp,#0]
000322  f85b002a          LDR      r0,[r11,r10,LSL #2]
;;;376    
;;;377          /* Special case for first column */
;;;378          thiscolsum = GETJSAMPLE(*inptr0++) * 3 + GETJSAMPLE(*inptr1++);
000326  f812bb01          LDRB     r11,[r2],#1
00032a  eb0b0a4b          ADD      r10,r11,r11,LSL #1
00032e  f813bb01          LDRB     r11,[r3],#1
000332  eb0a010b          ADD      r1,r10,r11
;;;379          nextcolsum = GETJSAMPLE(*inptr0++) * 3 + GETJSAMPLE(*inptr1++);
000336  f812bb01          LDRB     r11,[r2],#1
00033a  eb0b0a4b          ADD      r10,r11,r11,LSL #1
00033e  f813bb01          LDRB     r11,[r3],#1
000342  eb0a050b          ADD      r5,r10,r11
;;;380          *outptr++ = (JSAMPLE) ((thiscolsum * 4 + 8) >> 4);
000346  f04f0a08          MOV      r10,#8
00034a  eb0a0a81          ADD      r10,r10,r1,LSL #2
00034e  f3ca1a07          UBFX     r10,r10,#4,#8
000352  f800ab01          STRB     r10,[r0],#1
;;;381          *outptr++ = (JSAMPLE) ((thiscolsum * 3 + nextcolsum + 7) >> 4);
000356  eb010a41          ADD      r10,r1,r1,LSL #1
00035a  44aa              ADD      r10,r10,r5
00035c  f10a0a07          ADD      r10,r10,#7
000360  f3ca1a07          UBFX     r10,r10,#4,#8
000364  f800ab01          STRB     r10,[r0],#1
;;;382          lastcolsum = thiscolsum; thiscolsum = nextcolsum;
000368  468c              MOV      r12,r1
00036a  4629              MOV      r1,r5
;;;383    
;;;384          for (colctr = compptr->downsampled_width - 2; colctr > 0; colctr--) {
00036c  f8dda008          LDR      r10,[sp,#8]
000370  f8daa028          LDR      r10,[r10,#0x28]
000374  f1aa0802          SUB      r8,r10,#2
000378  e01d              B        |L1.950|
                  |L1.890|
;;;385    	/* General case: 3/4 * nearer pixel + 1/4 * further pixel in each */
;;;386    	/* dimension, thus 9/16, 3/16, 3/16, 1/16 overall */
;;;387    	nextcolsum = GETJSAMPLE(*inptr0++) * 3 + GETJSAMPLE(*inptr1++);
00037a  f812bb01          LDRB     r11,[r2],#1
00037e  eb0b0a4b          ADD      r10,r11,r11,LSL #1
000382  f813bb01          LDRB     r11,[r3],#1
000386  eb0a050b          ADD      r5,r10,r11
;;;388    	*outptr++ = (JSAMPLE) ((thiscolsum * 3 + lastcolsum + 8) >> 4);
00038a  eb010a41          ADD      r10,r1,r1,LSL #1
00038e  44e2              ADD      r10,r10,r12
000390  f10a0a08          ADD      r10,r10,#8
000394  f3ca1a07          UBFX     r10,r10,#4,#8
000398  f800ab01          STRB     r10,[r0],#1
;;;389    	*outptr++ = (JSAMPLE) ((thiscolsum * 3 + nextcolsum + 7) >> 4);
00039c  eb010a41          ADD      r10,r1,r1,LSL #1
0003a0  44aa              ADD      r10,r10,r5
0003a2  f10a0a07          ADD      r10,r10,#7
0003a6  f3ca1a07          UBFX     r10,r10,#4,#8
0003aa  f800ab01          STRB     r10,[r0],#1
;;;390    	lastcolsum = thiscolsum; thiscolsum = nextcolsum;
0003ae  468c              MOV      r12,r1
0003b0  4629              MOV      r1,r5
0003b2  f1a80801          SUB      r8,r8,#1              ;384
                  |L1.950|
0003b6  f1b80f00          CMP      r8,#0                 ;384
0003ba  d1de              BNE      |L1.890|
;;;391          }
;;;392    
;;;393          /* Special case for last column */
;;;394          *outptr++ = (JSAMPLE) ((thiscolsum * 3 + lastcolsum + 8) >> 4);
0003bc  eb010a41          ADD      r10,r1,r1,LSL #1
0003c0  44e2              ADD      r10,r10,r12
0003c2  f10a0a08          ADD      r10,r10,#8
0003c6  f3ca1a07          UBFX     r10,r10,#4,#8
0003ca  f800ab01          STRB     r10,[r0],#1
;;;395          *outptr   = (JSAMPLE) ((thiscolsum * 4 + 7) >> 4);
0003ce  f04f0a07          MOV      r10,#7
0003d2  eb0a0a81          ADD      r10,r10,r1,LSL #2
0003d6  f3ca1a07          UBFX     r10,r10,#4,#8
0003da  f880a000          STRB     r10,[r0,#0]
0003de  1c7f              ADDS     r7,r7,#1              ;368
                  |L1.992|
0003e0  2f02              CMP      r7,#2                 ;368
0003e2  db8d              BLT      |L1.768|
;;;396        }
;;;397        inrow++;
0003e4  1c76              ADDS     r6,r6,#1
                  |L1.998|
0003e6  f8dda004          LDR      r10,[sp,#4]           ;367
0003ea  f8daa138          LDR      r10,[r10,#0x138]      ;367
0003ee  45ca              CMP      r10,r9                ;367
0003f0  dc84              BGT      |L1.764|
;;;398      }
;;;399    }
0003f2  b005              ADD      sp,sp,#0x14
0003f4  e8bd8ff0          POP      {r4-r11,pc}
;;;400    
                          ENDP

                  jinit_upsampler PROC
;;;406    GLOBAL(void)
;;;407    jinit_upsampler (j_decompress_ptr cinfo)
0003f8  e92d4ffe          PUSH     {r1-r11,lr}
;;;408    {
0003fc  4604              MOV      r4,r0
;;;409      my_upsample_ptr upsample;
;;;410      int ci;
;;;411      jpeg_component_info * compptr;
;;;412      boolean need_buffer, do_fancy;
;;;413      int h_in_group, v_in_group, h_out_group, v_out_group;
;;;414    
;;;415      upsample = (my_upsample_ptr)
0003fe  6860              LDR      r0,[r4,#4]
000400  224c              MOVS     r2,#0x4c
000402  2101              MOVS     r1,#1
000404  6803              LDR      r3,[r0,#0]
000406  4620              MOV      r0,r4
000408  4798              BLX      r3
00040a  4605              MOV      r5,r0
;;;416        (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
;;;417    				SIZEOF(my_upsampler));
;;;418      cinfo->upsample = (struct jpeg_upsampler *) upsample;
00040c  f8c451c4          STR      r5,[r4,#0x1c4]
;;;419      upsample->pub.start_pass = start_pass_upsample;
000410  485d              LDR      r0,|L1.1416|
000412  6028              STR      r0,[r5,#0]
;;;420      upsample->pub.upsample = sep_upsample;
000414  485d              LDR      r0,|L1.1420|
000416  6068              STR      r0,[r5,#4]
;;;421      upsample->pub.need_context_rows = FALSE; /* until we find out differently */
000418  2000              MOVS     r0,#0
00041a  60a8              STR      r0,[r5,#8]
;;;422    
;;;423      if (cinfo->CCIR601_sampling)	/* this isn't supported */
00041c  f8d4012c          LDR      r0,[r4,#0x12c]
000420  b130              CBZ      r0,|L1.1072|
;;;424        ERREXIT(cinfo, JERR_CCIR601_NOTIMPL);
000422  2019              MOVS     r0,#0x19
000424  6821              LDR      r1,[r4,#0]
000426  6148              STR      r0,[r1,#0x14]
000428  6820              LDR      r0,[r4,#0]
00042a  6801              LDR      r1,[r0,#0]
00042c  4620              MOV      r0,r4
00042e  4788              BLX      r1
                  |L1.1072|
;;;425    
;;;426      /* jdmainct.c doesn't support context rows when min_DCT_scaled_size = 1,
;;;427       * so don't ask for it.
;;;428       */
;;;429      do_fancy = cinfo->do_fancy_upsampling && cinfo->min_DCT_scaled_size > 1;
000430  6ce0              LDR      r0,[r4,#0x4c]
000432  b128              CBZ      r0,|L1.1088|
000434  f8d4013c          LDR      r0,[r4,#0x13c]
000438  2801              CMP      r0,#1
00043a  dd01              BLE      |L1.1088|
00043c  2001              MOVS     r0,#1
00043e  e000              B        |L1.1090|
                  |L1.1088|
000440  2000              MOVS     r0,#0
                  |L1.1090|
000442  9001              STR      r0,[sp,#4]
;;;430    
;;;431      /* Verify we can handle the sampling factors, select per-component methods,
;;;432       * and create storage as needed.
;;;433       */
;;;434      for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
000444  2600              MOVS     r6,#0
000446  f8d470d8          LDR      r7,[r4,#0xd8]
00044a  e096              B        |L1.1402|
                  |L1.1100|
;;;435           ci++, compptr++) {
;;;436        /* Compute size of an "input group" after IDCT scaling.  This many samples
;;;437         * are to be converted to max_h_samp_factor * max_v_samp_factor pixels.
;;;438         */
;;;439        h_in_group = (compptr->h_samp_factor * compptr->DCT_scaled_size) /
00044c  6a79              LDR      r1,[r7,#0x24]
00044e  68b8              LDR      r0,[r7,#8]
000450  4348              MULS     r0,r1,r0
000452  f8d4113c          LDR      r1,[r4,#0x13c]
000456  fb90f8f1          SDIV     r8,r0,r1
;;;440    		 cinfo->min_DCT_scaled_size;
;;;441        v_in_group = (compptr->v_samp_factor * compptr->DCT_scaled_size) /
00045a  6a79              LDR      r1,[r7,#0x24]
00045c  68f8              LDR      r0,[r7,#0xc]
00045e  4348              MULS     r0,r1,r0
000460  f8d4113c          LDR      r1,[r4,#0x13c]
000464  fb90f9f1          SDIV     r9,r0,r1
;;;442    		 cinfo->min_DCT_scaled_size;
;;;443        h_out_group = cinfo->max_h_samp_factor;
000468  f8d4a134          LDR      r10,[r4,#0x134]
;;;444        v_out_group = cinfo->max_v_samp_factor;
00046c  f8d4b138          LDR      r11,[r4,#0x138]
;;;445        upsample->rowgroup_height[ci] = v_in_group; /* save for use later */
000470  f1050034          ADD      r0,r5,#0x34
000474  f8409026          STR      r9,[r0,r6,LSL #2]
;;;446        need_buffer = TRUE;
000478  2001              MOVS     r0,#1
00047a  9002              STR      r0,[sp,#8]
;;;447        if (! compptr->component_needed) {
00047c  6b38              LDR      r0,[r7,#0x30]
00047e  b938              CBNZ     r0,|L1.1168|
;;;448          /* Don't bother to upsample an uninteresting component. */
;;;449          upsample->methods[ci] = noop_upsample;
000480  4943              LDR      r1,|L1.1424|
000482  f105001c          ADD      r0,r5,#0x1c
000486  f8401026          STR      r1,[r0,r6,LSL #2]
;;;450          need_buffer = FALSE;
00048a  2000              MOVS     r0,#0
00048c  9002              STR      r0,[sp,#8]
00048e  e05d              B        |L1.1356|
                  |L1.1168|
;;;451        } else if (h_in_group == h_out_group && v_in_group == v_out_group) {
000490  45d0              CMP      r8,r10
000492  d109              BNE      |L1.1192|
000494  45d9              CMP      r9,r11
000496  d107              BNE      |L1.1192|
;;;452          /* Fullsize components can be processed without any work. */
;;;453          upsample->methods[ci] = fullsize_upsample;
000498  493e              LDR      r1,|L1.1428|
00049a  f105001c          ADD      r0,r5,#0x1c
00049e  f8401026          STR      r1,[r0,r6,LSL #2]
;;;454          need_buffer = FALSE;
0004a2  2000              MOVS     r0,#0
0004a4  9002              STR      r0,[sp,#8]
0004a6  e051              B        |L1.1356|
                  |L1.1192|
;;;455        } else if (h_in_group * 2 == h_out_group &&
0004a8  ebba0f48          CMP      r10,r8,LSL #1
0004ac  d112              BNE      |L1.1236|
;;;456    	       v_in_group == v_out_group) {
0004ae  45d9              CMP      r9,r11
0004b0  d110              BNE      |L1.1236|
;;;457          /* Special cases for 2h1v upsampling */
;;;458          if (do_fancy && compptr->downsampled_width > 2)
0004b2  9801              LDR      r0,[sp,#4]
0004b4  b140              CBZ      r0,|L1.1224|
0004b6  6ab8              LDR      r0,[r7,#0x28]
0004b8  2802              CMP      r0,#2
0004ba  d905              BLS      |L1.1224|
;;;459    	upsample->methods[ci] = h2v1_fancy_upsample;
0004bc  4936              LDR      r1,|L1.1432|
0004be  f105001c          ADD      r0,r5,#0x1c
0004c2  f8401026          STR      r1,[r0,r6,LSL #2]
0004c6  e041              B        |L1.1356|
                  |L1.1224|
;;;460          else
;;;461    	upsample->methods[ci] = h2v1_upsample;
0004c8  4934              LDR      r1,|L1.1436|
0004ca  f105001c          ADD      r0,r5,#0x1c
0004ce  f8401026          STR      r1,[r0,r6,LSL #2]
0004d2  e03b              B        |L1.1356|
                  |L1.1236|
;;;462        } else if (h_in_group * 2 == h_out_group &&
0004d4  ebba0f48          CMP      r10,r8,LSL #1
0004d8  d115              BNE      |L1.1286|
;;;463    	       v_in_group * 2 == v_out_group) {
0004da  ebbb0f49          CMP      r11,r9,LSL #1
0004de  d112              BNE      |L1.1286|
;;;464          /* Special cases for 2h2v upsampling */
;;;465          if (do_fancy && compptr->downsampled_width > 2) {
0004e0  9801              LDR      r0,[sp,#4]
0004e2  b150              CBZ      r0,|L1.1274|
0004e4  6ab8              LDR      r0,[r7,#0x28]
0004e6  2802              CMP      r0,#2
0004e8  d907              BLS      |L1.1274|
;;;466    	upsample->methods[ci] = h2v2_fancy_upsample;
0004ea  492d              LDR      r1,|L1.1440|
0004ec  f105001c          ADD      r0,r5,#0x1c
0004f0  f8401026          STR      r1,[r0,r6,LSL #2]
;;;467    	upsample->pub.need_context_rows = TRUE;
0004f4  2001              MOVS     r0,#1
0004f6  60a8              STR      r0,[r5,#8]
0004f8  e028              B        |L1.1356|
                  |L1.1274|
;;;468          } else
;;;469    	upsample->methods[ci] = h2v2_upsample;
0004fa  492a              LDR      r1,|L1.1444|
0004fc  f105001c          ADD      r0,r5,#0x1c
000500  f8401026          STR      r1,[r0,r6,LSL #2]
000504  e022              B        |L1.1356|
                  |L1.1286|
;;;470        } else if ((h_out_group % h_in_group) == 0 &&
000506  fb9af0f8          SDIV     r0,r10,r8
00050a  fb08a010          MLS      r0,r8,r0,r10
00050e  b9b0              CBNZ     r0,|L1.1342|
;;;471    	       (v_out_group % v_in_group) == 0) {
000510  fb9bf0f9          SDIV     r0,r11,r9
000514  fb09b010          MLS      r0,r9,r0,r11
000518  b988              CBNZ     r0,|L1.1342|
;;;472          /* Generic integral-factors upsampling method */
;;;473          upsample->methods[ci] = int_upsample;
00051a  4923              LDR      r1,|L1.1448|
00051c  f105001c          ADD      r0,r5,#0x1c
000520  f8401026          STR      r1,[r0,r6,LSL #2]
;;;474          upsample->h_expand[ci] = (UINT8) (h_out_group / h_in_group);
000524  fb9af0f8          SDIV     r0,r10,r8
000528  b2c1              UXTB     r1,r0
00052a  f1050044          ADD      r0,r5,#0x44
00052e  5581              STRB     r1,[r0,r6]
;;;475          upsample->v_expand[ci] = (UINT8) (v_out_group / v_in_group);
000530  fb9bf0f9          SDIV     r0,r11,r9
000534  b2c1              UXTB     r1,r0
000536  f1050048          ADD      r0,r5,#0x48
00053a  5581              STRB     r1,[r0,r6]
00053c  e006              B        |L1.1356|
                  |L1.1342|
;;;476        } else
;;;477          ERREXIT(cinfo, JERR_FRACT_SAMPLE_NOTIMPL);
00053e  2026              MOVS     r0,#0x26
000540  6821              LDR      r1,[r4,#0]
000542  6148              STR      r0,[r1,#0x14]
000544  6820              LDR      r0,[r4,#0]
000546  6801              LDR      r1,[r0,#0]
000548  4620              MOV      r0,r4
00054a  4788              BLX      r1
                  |L1.1356|
;;;478        if (need_buffer) {
00054c  9802              LDR      r0,[sp,#8]
00054e  b190              CBZ      r0,|L1.1398|
;;;479          upsample->color_buf[ci] = (*cinfo->mem->alloc_sarray)
000550  f8d41134          LDR      r1,[r4,#0x134]
000554  6f20              LDR      r0,[r4,#0x70]
000556  f7fffffe          BL       jround_up
00055a  9000              STR      r0,[sp,#0]
00055c  f8d43138          LDR      r3,[r4,#0x138]
000560  6860              LDR      r0,[r4,#4]
000562  f8d0c008          LDR      r12,[r0,#8]
000566  2101              MOVS     r1,#1
000568  4620              MOV      r0,r4
00056a  9a00              LDR      r2,[sp,#0]
00056c  47e0              BLX      r12
00056e  f105010c          ADD      r1,r5,#0xc
000572  f8410026          STR      r0,[r1,r6,LSL #2]
                  |L1.1398|
000576  1c76              ADDS     r6,r6,#1              ;435
000578  3754              ADDS     r7,r7,#0x54           ;435
                  |L1.1402|
00057a  6a60              LDR      r0,[r4,#0x24]         ;434
00057c  42b0              CMP      r0,r6                 ;434
00057e  f73faf65          BGT      |L1.1100|
;;;480    	((j_common_ptr) cinfo, JPOOL_IMAGE,
;;;481    	 (JDIMENSION) jround_up((long) cinfo->output_width,
;;;482    				(long) cinfo->max_h_samp_factor),
;;;483    	 (JDIMENSION) cinfo->max_v_samp_factor);
;;;484        }
;;;485      }
;;;486    }
000582  e8bd8ffe          POP      {r1-r11,pc}
                          ENDP

000586  0000              DCW      0x0000
                  |L1.1416|
                          DCD      start_pass_upsample
                  |L1.1420|
                          DCD      sep_upsample
                  |L1.1424|
                          DCD      noop_upsample
                  |L1.1428|
                          DCD      fullsize_upsample
                  |L1.1432|
                          DCD      h2v1_fancy_upsample
                  |L1.1436|
                          DCD      h2v1_upsample
                  |L1.1440|
                          DCD      h2v2_fancy_upsample
                  |L1.1444|
                          DCD      h2v2_upsample
                  |L1.1448|
                          DCD      int_upsample
