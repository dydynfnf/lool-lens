; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\lcd_rotateccw.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\lcd_rotateccw.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -I.\GUI\AntiAlias -I.\GUI\Config -I.\GUI\ConvertColor -I.\GUI\ConvertMono -I.\GUI\Core -I.\GUI\Font -I.\GUI\GUI_X -I.\GUI\JPEG -I.\GUI\LCDDriver -I.\GUI\MemDev -I.\GUI\MultiLayer -I.\GUI\Widget -I.\GUI\WM -IC:\Users\Administrator\Desktop\gui\STM32·Ü¶·°å-3.98\RTE -Id:\Keil_v5\ARM\PACK\ARM\CMSIS\4.3.0\CMSIS\Include -Id:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.1.0\Device\Include -D__UVISION_VERSION=515 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\lcd_rotateccw.crf GUI\Core\LCD_RotateCCW.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _DrawBitLine1BPP PROC
;;;37     */
;;;38     static void  _DrawBitLine1BPP(int x, int y, U8 const GUI_UNI_PTR *p, int Diff, int xsize, const LCD_PIXELINDEX*pTrans) {
000000  e92d4ff8          PUSH     {r3-r11,lr}
000004  4681              MOV      r9,r0
000006  460e              MOV      r6,r1
000008  4615              MOV      r5,r2
00000a  461c              MOV      r4,r3
00000c  e9dd780a          LDRD     r7,r8,[sp,#0x28]
;;;39       LCD_PIXELINDEX Index0 = *(pTrans+0);
000010  f8b80000          LDRH     r0,[r8,#0]
000014  9000              STR      r0,[sp,#0]
;;;40       LCD_PIXELINDEX Index1 = *(pTrans+1);
000016  f8b8a002          LDRH     r10,[r8,#2]
;;;41       y -= Diff;
00001a  1b36              SUBS     r6,r6,r4
;;;42       switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
00001c  48e4              LDR      r0,|L1.944|
00001e  7c00              LDRB     r0,[r0,#0x10]  ; GUI_Context
000020  f0000003          AND      r0,r0,#3
000024  b120              CBZ      r0,|L1.48|
000026  2801              CMP      r0,#1
000028  d035              BEQ      |L1.150|
00002a  2802              CMP      r0,#2
00002c  d154              BNE      |L1.216|
00002e  e01a              B        |L1.102|
                  |L1.48|
;;;43       case 0:
;;;44         do {
000030  bf00              NOP      
                  |L1.50|
;;;45           LCDDEV_L0_SetPixelIndex(x, y, (*p & (0x80 >> Diff)) ? Index1 : Index0);
000032  7828              LDRB     r0,[r5,#0]
000034  2180              MOVS     r1,#0x80
000036  4121              ASRS     r1,r1,r4
000038  4008              ANDS     r0,r0,r1
00003a  b108              CBZ      r0,|L1.64|
00003c  4650              MOV      r0,r10
00003e  e000              B        |L1.66|
                  |L1.64|
000040  9800              LDR      r0,[sp,#0]
                  |L1.66|
000042  4602              MOV      r2,r0
000044  48da              LDR      r0,|L1.944|
000046  6c80              LDR      r0,[r0,#0x48]  ; GUI_Context
000048  4631              MOV      r1,r6
00004a  6a43              LDR      r3,[r0,#0x24]
00004c  4648              MOV      r0,r9
00004e  4798              BLX      r3
;;;46           y--;
000050  1e76              SUBS     r6,r6,#1
;;;47     			if (++Diff == 8) {
000052  1c60              ADDS     r0,r4,#1
000054  4604              MOV      r4,r0
000056  2808              CMP      r0,#8
000058  d101              BNE      |L1.94|
;;;48             Diff = 0;
00005a  2400              MOVS     r4,#0
;;;49     				p++;
00005c  1c6d              ADDS     r5,r5,#1
                  |L1.94|
;;;50     			}
;;;51     		} while (--xsize);
00005e  1e78              SUBS     r0,r7,#1
000060  0007              MOVS     r7,r0
000062  d1e6              BNE      |L1.50|
;;;52         break;
000064  e038              B        |L1.216|
                  |L1.102|
;;;53       case LCD_DRAWMODE_TRANS:
;;;54         do {
000066  bf00              NOP      
                  |L1.104|
;;;55       		if (*p & (0x80 >> Diff))
000068  7829              LDRB     r1,[r5,#0]
00006a  2080              MOVS     r0,#0x80
00006c  4120              ASRS     r0,r0,r4
00006e  4001              ANDS     r1,r1,r0
000070  b131              CBZ      r1,|L1.128|
;;;56             LCDDEV_L0_SetPixelIndex(x, y, Index1);
000072  48cf              LDR      r0,|L1.944|
000074  6c80              LDR      r0,[r0,#0x48]  ; GUI_Context
000076  4652              MOV      r2,r10
000078  4631              MOV      r1,r6
00007a  6a43              LDR      r3,[r0,#0x24]
00007c  4648              MOV      r0,r9
00007e  4798              BLX      r3
                  |L1.128|
;;;57           y--;
000080  1e76              SUBS     r6,r6,#1
;;;58     			if (++Diff == 8) {
000082  1c60              ADDS     r0,r4,#1
000084  4604              MOV      r4,r0
000086  2808              CMP      r0,#8
000088  d101              BNE      |L1.142|
;;;59             Diff = 0;
00008a  2400              MOVS     r4,#0
;;;60     				p++;
00008c  1c6d              ADDS     r5,r5,#1
                  |L1.142|
;;;61     			}
;;;62     		} while (--xsize);
00008e  1e78              SUBS     r0,r7,#1
000090  0007              MOVS     r7,r0
000092  d1e9              BNE      |L1.104|
;;;63         break;
000094  e020              B        |L1.216|
                  |L1.150|
;;;64       case LCD_DRAWMODE_XOR:;
;;;65         do {
000096  bf00              NOP      
                  |L1.152|
;;;66       		if (*p & (0x80 >> Diff)) {
000098  7828              LDRB     r0,[r5,#0]
00009a  2180              MOVS     r1,#0x80
00009c  4121              ASRS     r1,r1,r4
00009e  4008              ANDS     r0,r0,r1
0000a0  b178              CBZ      r0,|L1.194|
;;;67             int Pixel = LCD_L0_GetPixelIndex(x, y);
0000a2  4631              MOV      r1,r6
0000a4  4648              MOV      r0,r9
0000a6  f7fffffe          BL       LCD_L0_GetPixelIndex
0000aa  4683              MOV      r11,r0
;;;68             LCDDEV_L0_SetPixelIndex(x, y, LCD_NUM_COLORS - 1 - Pixel);
0000ac  f64f70ff          MOV      r0,#0xffff
0000b0  eba0020b          SUB      r2,r0,r11
0000b4  48be              LDR      r0,|L1.944|
0000b6  6c80              LDR      r0,[r0,#0x48]  ; GUI_Context
0000b8  4631              MOV      r1,r6
0000ba  6a43              LDR      r3,[r0,#0x24]
0000bc  4648              MOV      r0,r9
0000be  4798              BLX      r3
;;;69           }
0000c0  bf00              NOP      
                  |L1.194|
;;;70           y--;
0000c2  1e76              SUBS     r6,r6,#1
;;;71     			if (++Diff == 8) {
0000c4  1c60              ADDS     r0,r4,#1
0000c6  4604              MOV      r4,r0
0000c8  2808              CMP      r0,#8
0000ca  d101              BNE      |L1.208|
;;;72             Diff = 0;
0000cc  2400              MOVS     r4,#0
;;;73     				p++;
0000ce  1c6d              ADDS     r5,r5,#1
                  |L1.208|
;;;74     			}
;;;75     		} while (--xsize);
0000d0  1e78              SUBS     r0,r7,#1
0000d2  0007              MOVS     r7,r0
0000d4  d1e0              BNE      |L1.152|
;;;76         break;
0000d6  bf00              NOP      
                  |L1.216|
0000d8  bf00              NOP                            ;52
;;;77     	}
;;;78     }
0000da  e8bd8ff8          POP      {r3-r11,pc}
;;;79     
                          ENDP

                  _DrawBitmap PROC
;;;86     */
;;;87     static void _DrawBitmap(int x0, int y0,
0000de  e92d5ffc          PUSH     {r2-r12,lr}
;;;88                            int xsize, int ysize,
;;;89                            int BitsPerPixel, 
;;;90                            int BytesPerLine,
;;;91                            const U8 GUI_UNI_PTR * pData, int Diff,
;;;92                            const LCD_PIXELINDEX* pTrans)
;;;93     {
0000e2  4605              MOV      r5,r0
0000e4  4689              MOV      r9,r1
0000e6  4616              MOV      r6,r2
0000e8  461f              MOV      r7,r3
0000ea  f8ddb040          LDR      r11,[sp,#0x40]
0000ee  f8dda030          LDR      r10,[sp,#0x30]
0000f2  f8dd8038          LDR      r8,[sp,#0x38]
;;;94       int i;
;;;95       /* Use _DrawBitLineXBPP */
;;;96       for (i=0; i<ysize; i++) {
0000f6  2400              MOVS     r4,#0
0000f8  e00f              B        |L1.282|
                  |L1.250|
;;;97         switch (BitsPerPixel) {
0000fa  f1ba0f01          CMP      r10,#1
0000fe  d108              BNE      |L1.274|
;;;98         case 1:
;;;99           _DrawBitLine1BPP(x0 + i, y0, pData, Diff, xsize, pTrans);
000100  1928              ADDS     r0,r5,r4
000102  e9cd6b00          STRD     r6,r11,[sp,#0]
000106  4642              MOV      r2,r8
000108  4649              MOV      r1,r9
00010a  9b0f              LDR      r3,[sp,#0x3c]
00010c  f7fffffe          BL       _DrawBitLine1BPP
;;;100          break;
000110  bf00              NOP      
                  |L1.274|
000112  bf00              NOP      
;;;101        }
;;;102        pData += BytesPerLine;
000114  980d              LDR      r0,[sp,#0x34]
000116  4480              ADD      r8,r8,r0
000118  1c64              ADDS     r4,r4,#1              ;96
                  |L1.282|
00011a  42bc              CMP      r4,r7                 ;96
00011c  dbed              BLT      |L1.250|
;;;103      }
;;;104    }
00011e  e8bd9ffc          POP      {r2-r12,pc}
;;;105    
                          ENDP

                  _Rect2TextRect PROC
;;;113    */
;;;114    static void _Rect2TextRect(GUI_RECT * pRect) {
000122  b510              PUSH     {r4,lr}
;;;115      int x1, y1;
;;;116      x1 = pRect->x1;
000124  f9b01004          LDRSH    r1,[r0,#4]
;;;117      y1 = pRect->y1;
000128  f9b02006          LDRSH    r2,[r0,#6]
;;;118      pRect->x1 = pRect->x0 + (y1 - pRect->y0);
00012c  8803              LDRH     r3,[r0,#0]
00012e  8844              LDRH     r4,[r0,#2]
000130  1b14              SUBS     r4,r2,r4
000132  4423              ADD      r3,r3,r4
000134  b21b              SXTH     r3,r3
000136  8083              STRH     r3,[r0,#4]
;;;119      pRect->y1 = pRect->y0 + (x1 - pRect->x0);
000138  8843              LDRH     r3,[r0,#2]
00013a  8804              LDRH     r4,[r0,#0]
00013c  1b0c              SUBS     r4,r1,r4
00013e  4423              ADD      r3,r3,r4
000140  b21b              SXTH     r3,r3
000142  80c3              STRH     r3,[r0,#6]
;;;120    }
000144  bd10              POP      {r4,pc}
;;;121    
                          ENDP

                  _TransformPointCCW PROC
;;;130    */
;;;131    static void _TransformPointCCW(int * pXPos, int * pYPos) {
000146  e92d47fc          PUSH     {r2-r10,lr}
00014a  4604              MOV      r4,r0
00014c  460d              MOV      r5,r1
;;;132      GUI_RECT ClientRect = {0};
00014e  2000              MOVS     r0,#0
000150  9000              STR      r0,[sp,#0]
000152  9001              STR      r0,[sp,#4]
;;;133      int xPos, yPos, xNumPixel, yNumPixel;
;;;134      /* Get the client rectangle */
;;;135      #if GUI_WINSUPPORT
;;;136        WM_GetWindowRect(&ClientRect);
000154  4668              MOV      r0,sp
000156  f7fffffe          BL       WM_GetWindowRect
;;;137      #else
;;;138        GUI_GetClientRect(&ClientRect);
;;;139      #endif
;;;140      xNumPixel = LCD_GetXSize() - 1;
00015a  f7fffffe          BL       LCD_GetXSize
00015e  f1a00801          SUB      r8,r0,#1
;;;141      yNumPixel = LCD_GetYSize() - 1;
000162  f7fffffe          BL       LCD_GetYSize
000166  f1a00901          SUB      r9,r0,#1
;;;142      if (ClientRect.x1 > xNumPixel) {
00016a  f9bd0004          LDRSH    r0,[sp,#4]
00016e  4540              CMP      r0,r8
000170  dd03              BLE      |L1.378|
;;;143        ClientRect.x1 = xNumPixel;
000172  fa0ff088          SXTH     r0,r8
000176  f8ad0004          STRH     r0,[sp,#4]
                  |L1.378|
;;;144      }
;;;145      if (ClientRect.y1 > yNumPixel) {
00017a  f9bd0006          LDRSH    r0,[sp,#6]
00017e  4548              CMP      r0,r9
000180  dd03              BLE      |L1.394|
;;;146        ClientRect.y1 = yNumPixel;
000182  fa0ff089          SXTH     r0,r9
000186  f8ad0006          STRH     r0,[sp,#6]
                  |L1.394|
;;;147      }
;;;148      /* Save old positions */
;;;149      xPos = *pXPos;
00018a  6826              LDR      r6,[r4,#0]
;;;150      yPos = *pYPos;
00018c  682f              LDR      r7,[r5,#0]
;;;151      /* Rotate and add window origin */
;;;152      *pXPos = ClientRect.x0 + yPos;
00018e  f9bd0000          LDRSH    r0,[sp,#0]
000192  4438              ADD      r0,r0,r7
000194  6020              STR      r0,[r4,#0]
;;;153      *pYPos = ClientRect.y1 - xPos;
000196  f9bd0006          LDRSH    r0,[sp,#6]
00019a  1b80              SUBS     r0,r0,r6
00019c  6028              STR      r0,[r5,#0]
;;;154      /* Handle rotation of text rectangle */
;;;155      *pXPos = *pXPos + GUI_RectDispString.x0 - GUI_RectDispString.y0;
00019e  4985              LDR      r1,|L1.948|
0001a0  f9b11000          LDRSH    r1,[r1,#0]  ; GUI_RectDispString
0001a4  6820              LDR      r0,[r4,#0]
0001a6  4408              ADD      r0,r0,r1
0001a8  4982              LDR      r1,|L1.948|
0001aa  f9b11002          LDRSH    r1,[r1,#2]  ; GUI_RectDispString
0001ae  1a40              SUBS     r0,r0,r1
0001b0  6020              STR      r0,[r4,#0]
;;;156      *pYPos = *pYPos + GUI_RectDispString.y1 - (ClientRect.y1 - ClientRect.y0) + GUI_RectDispString.x0;
0001b2  4980              LDR      r1,|L1.948|
0001b4  f9b11006          LDRSH    r1,[r1,#6]  ; GUI_RectDispString
0001b8  6828              LDR      r0,[r5,#0]
0001ba  4408              ADD      r0,r0,r1
0001bc  f9bd1006          LDRSH    r1,[sp,#6]
0001c0  f9bd2002          LDRSH    r2,[sp,#2]
0001c4  1a89              SUBS     r1,r1,r2
0001c6  1a40              SUBS     r0,r0,r1
0001c8  497a              LDR      r1,|L1.948|
0001ca  f9b11000          LDRSH    r1,[r1,#0]  ; GUI_RectDispString
0001ce  4408              ADD      r0,r0,r1
0001d0  6028              STR      r0,[r5,#0]
;;;157    }
0001d2  e8bd87fc          POP      {r2-r10,pc}
;;;158    
                          ENDP

                  _DrawBitmapCCW PROC
;;;162    */
;;;163    static void _DrawBitmapCCW(int x0, int y0, int xsize, int ysize, int xMul, int yMul,
0001d6  e92d4fff          PUSH     {r0-r11,lr}
;;;164                               int BitsPerPixel, int BytesPerLine,
;;;165                               const U8 GUI_UNI_PTR * pPixel, const LCD_PIXELINDEX* pTrans)
;;;166    {
0001da  b08b              SUB      sp,sp,#0x2c
0001dc  4614              MOV      r4,r2
0001de  461d              MOV      r5,r3
0001e0  f8dda060          LDR      r10,[sp,#0x60]
0001e4  9f1c              LDR      r7,[sp,#0x70]
0001e6  9e1a              LDR      r6,[sp,#0x68]
;;;167      U8  Data = 0;
0001e8  2000              MOVS     r0,#0
0001ea  900a              STR      r0,[sp,#0x28]
;;;168      int x1, y1;
;;;169      /* Handle the optional Y-magnification */
;;;170      y1 = y0 + ysize - 1;
0001ec  980c              LDR      r0,[sp,#0x30]
0001ee  4428              ADD      r0,r0,r5
0001f0  1e40              SUBS     r0,r0,#1
0001f2  9008              STR      r0,[sp,#0x20]
;;;171      x1 = x0 + xsize - 1;
0001f4  980b              LDR      r0,[sp,#0x2c]
0001f6  4420              ADD      r0,r0,r4
0001f8  1e40              SUBS     r0,r0,#1
0001fa  9009              STR      r0,[sp,#0x24]
;;;172      /* Rotate positions */
;;;173      _TransformPointCCW(&x0, &y0);
0001fc  a90c              ADD      r1,sp,#0x30
0001fe  a80b              ADD      r0,sp,#0x2c
000200  f7fffffe          BL       _TransformPointCCW
;;;174      _TransformPointCCW(&x1, &y1);
000204  a908              ADD      r1,sp,#0x20
000206  a809              ADD      r0,sp,#0x24
000208  f7fffffe          BL       _TransformPointCCW
;;;175      /*  Handle BITMAP without magnification */
;;;176      if ((xMul == 1) && (yMul == 1)) {
00020c  f1ba0f01          CMP      r10,#1
000210  d163              BNE      |L1.730|
000212  9819              LDR      r0,[sp,#0x64]
000214  2801              CMP      r0,#1
000216  d160              BNE      |L1.730|
;;;177        int Diff = 0;
000218  f04f0800          MOV      r8,#0
;;;178        /* Clip top */
;;;179        if (y1 < GUI_Context.ClipRect.y0) {
00021c  4864              LDR      r0,|L1.944|
00021e  f9b0000a          LDRSH    r0,[r0,#0xa]
000222  9908              LDR      r1,[sp,#0x20]
000224  4288              CMP      r0,r1
000226  dd06              BLE      |L1.566|
;;;180          int Diff = GUI_Context.ClipRect.y0 - y1;
000228  4961              LDR      r1,|L1.944|
00022a  f9b1100a          LDRSH    r1,[r1,#0xa]
00022e  9a08              LDR      r2,[sp,#0x20]
000230  1a88              SUBS     r0,r1,r2
;;;181          xsize -= Diff;
000232  1a24              SUBS     r4,r4,r0
;;;182        }
000234  bf00              NOP      
                  |L1.566|
;;;183        /* Clip bottom */
;;;184        if (y0 > GUI_Context.ClipRect.y1) {
000236  485e              LDR      r0,|L1.944|
000238  f9b0000e          LDRSH    r0,[r0,#0xe]
00023c  990c              LDR      r1,[sp,#0x30]
00023e  4288              CMP      r0,r1
000240  da15              BGE      |L1.622|
;;;185          Diff = y0 - GUI_Context.ClipRect.y1;
000242  485b              LDR      r0,|L1.944|
000244  f9b0000e          LDRSH    r0,[r0,#0xe]
000248  990c              LDR      r1,[sp,#0x30]
00024a  eba10800          SUB      r8,r1,r0
;;;186    			xsize -= Diff;
00024e  eba40408          SUB      r4,r4,r8
;;;187    			switch (BitsPerPixel) {
000252  2e01              CMP      r6,#1
000254  d10a              BNE      |L1.620|
;;;188    			case 1:
;;;189      			pPixel += (Diff >> 3); y0 -= (Diff >> 3) << 3; Diff &= 7;
000256  eb0707e8          ADD      r7,r7,r8,ASR #3
00025a  ea4f00e8          ASR      r0,r8,#3
00025e  990c              LDR      r1,[sp,#0x30]
000260  eba100c0          SUB      r0,r1,r0,LSL #3
000264  900c              STR      r0,[sp,#0x30]
000266  f0080807          AND      r8,r8,#7
;;;190    				break;
00026a  bf00              NOP      
                  |L1.620|
00026c  bf00              NOP      
                  |L1.622|
;;;191    			}
;;;192        }
;;;193        if (ysize <= 0) {
00026e  2d00              CMP      r5,#0
000270  dc02              BGT      |L1.632|
                  |L1.626|
;;;194    		  return;
;;;195        }
;;;196        /* Clip right side */
;;;197        if (x1 > GUI_Context.ClipRect.x1) {
;;;198          int Diff = x1 - GUI_Context.ClipRect.x1;
;;;199          ysize -= Diff;
;;;200        }
;;;201        /* Clip left side */
;;;202        if (x0 < GUI_Context.ClipRect.x0) {
;;;203          int Diff = GUI_Context.ClipRect.x0 - x0;
;;;204          pPixel += Diff * BytesPerLine;
;;;205          x0 += Diff;
;;;206          ysize -= Diff;
;;;207        }
;;;208        if (xsize <= 0) {
;;;209    		  return;
;;;210        }
;;;211        _DrawBitmap(x0, y0, xsize, ysize, BitsPerPixel, BytesPerLine, pPixel, Diff, pTrans);
;;;212      } else {
;;;213        /* Handle BITMAP with magnification */
;;;214        int x, y, xi, yi;
;;;215        int Shift = 8 - BitsPerPixel;
;;;216        for (x = x0, xi = 0; xi < ysize; xi++, x += yMul, pPixel += BytesPerLine) {
;;;217          int xMax = x + yMul - 1;
;;;218          if ((xMax >= GUI_Context.ClipRect.x0) && (x <= GUI_Context.ClipRect.x1)) {
;;;219            int BitsLeft = 0;
;;;220            const U8 GUI_UNI_PTR * pDataLine = pPixel;
;;;221            for (y = y0, yi = 0; yi < xsize; yi++, y -= xMul) {
;;;222              U8  Index;
;;;223              if (!BitsLeft) {
;;;224                Data = *pDataLine++;
;;;225                BitsLeft =8;
;;;226              }
;;;227              Index = Data >> Shift;
;;;228              Data    <<= BitsPerPixel;
;;;229              BitsLeft -= BitsPerPixel;
;;;230              if (Index || ((GUI_Context.DrawMode & LCD_DRAWMODE_TRANS) == 0)) {
;;;231                LCD_PIXELINDEX OldColor = LCD_COLORINDEX;
;;;232                if (pTrans) {
;;;233                  LCD_COLORINDEX = *(pTrans + Index);
;;;234                } else {
;;;235                  LCD_COLORINDEX = Index;
;;;236                }
;;;237                LCD_FillRect(x, y - xMul + 1, xMax, y);
;;;238                LCD_COLORINDEX = OldColor;
;;;239              }
;;;240            }
;;;241          }
;;;242        }
;;;243      }
;;;244    }
000272  b00f              ADD      sp,sp,#0x3c
000274  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.632|
000278  484d              LDR      r0,|L1.944|
00027a  f9b0000c          LDRSH    r0,[r0,#0xc]          ;197
00027e  9909              LDR      r1,[sp,#0x24]         ;197
000280  4288              CMP      r0,r1                 ;197
000282  da06              BGE      |L1.658|
000284  494a              LDR      r1,|L1.944|
000286  f9b1100c          LDRSH    r1,[r1,#0xc]          ;198
00028a  9a09              LDR      r2,[sp,#0x24]         ;198
00028c  1a50              SUBS     r0,r2,r1              ;198
00028e  1a2d              SUBS     r5,r5,r0              ;199
000290  bf00              NOP                            ;200
                  |L1.658|
000292  4847              LDR      r0,|L1.944|
000294  f9b00008          LDRSH    r0,[r0,#8]            ;202  ; GUI_Context
000298  990b              LDR      r1,[sp,#0x2c]         ;202
00029a  4288              CMP      r0,r1                 ;202
00029c  dd0c              BLE      |L1.696|
00029e  4944              LDR      r1,|L1.944|
0002a0  f9b11008          LDRSH    r1,[r1,#8]            ;203  ; GUI_Context
0002a4  9a0b              LDR      r2,[sp,#0x2c]         ;203
0002a6  1a88              SUBS     r0,r1,r2              ;203
0002a8  991b              LDR      r1,[sp,#0x6c]         ;204
0002aa  fb007701          MLA      r7,r0,r1,r7           ;204
0002ae  990b              LDR      r1,[sp,#0x2c]         ;205
0002b0  4401              ADD      r1,r1,r0              ;205
0002b2  910b              STR      r1,[sp,#0x2c]         ;205
0002b4  1a2d              SUBS     r5,r5,r0              ;206
0002b6  bf00              NOP                            ;207
                  |L1.696|
0002b8  2c00              CMP      r4,#0                 ;208
0002ba  dc00              BGT      |L1.702|
0002bc  e7d9              B        |L1.626|
                  |L1.702|
0002be  991d              LDR      r1,[sp,#0x74]         ;211
0002c0  981b              LDR      r0,[sp,#0x6c]         ;211
0002c2  462b              MOV      r3,r5                 ;211
0002c4  4622              MOV      r2,r4                 ;211
0002c6  e9cd7802          STRD     r7,r8,[sp,#8]         ;211
0002ca  e9cd6000          STRD     r6,r0,[sp,#0]         ;211
0002ce  9104              STR      r1,[sp,#0x10]         ;211
0002d0  e9dd010b          LDRD     r0,r1,[sp,#0x2c]      ;211
0002d4  f7fffffe          BL       _DrawBitmap
0002d8  e068              B        |L1.940|
                  |L1.730|
0002da  f1c60008          RSB      r0,r6,#8              ;215
0002de  9005              STR      r0,[sp,#0x14]         ;215
0002e0  f8dd802c          LDR      r8,[sp,#0x2c]         ;216
0002e4  2000              MOVS     r0,#0                 ;216
0002e6  9007              STR      r0,[sp,#0x1c]         ;216
0002e8  e05c              B        |L1.932|
                  |L1.746|
0002ea  9819              LDR      r0,[sp,#0x64]         ;217
0002ec  4440              ADD      r0,r0,r8              ;217
0002ee  1e40              SUBS     r0,r0,#1              ;217
0002f0  9004              STR      r0,[sp,#0x10]         ;217
0002f2  482f              LDR      r0,|L1.944|
0002f4  f9b01008          LDRSH    r1,[r0,#8]            ;218  ; GUI_Context
0002f8  9804              LDR      r0,[sp,#0x10]         ;218
0002fa  4281              CMP      r1,r0                 ;218
0002fc  dc4b              BGT      |L1.918|
0002fe  482c              LDR      r0,|L1.944|
000300  f9b0000c          LDRSH    r0,[r0,#0xc]          ;218
000304  4540              CMP      r0,r8                 ;218
000306  db46              BLT      |L1.918|
000308  2000              MOVS     r0,#0                 ;219
00030a  9003              STR      r0,[sp,#0xc]          ;219
00030c  9702              STR      r7,[sp,#8]            ;220
00030e  f8ddb030          LDR      r11,[sp,#0x30]        ;221
000312  9006              STR      r0,[sp,#0x18]         ;221
000314  e03b              B        |L1.910|
                  |L1.790|
000316  9803              LDR      r0,[sp,#0xc]          ;223
000318  b938              CBNZ     r0,|L1.810|
00031a  9802              LDR      r0,[sp,#8]            ;224
00031c  7800              LDRB     r0,[r0,#0]            ;224
00031e  900a              STR      r0,[sp,#0x28]         ;224
000320  9802              LDR      r0,[sp,#8]            ;224
000322  1c40              ADDS     r0,r0,#1              ;224
000324  9002              STR      r0,[sp,#8]            ;224
000326  2008              MOVS     r0,#8                 ;225
000328  9003              STR      r0,[sp,#0xc]          ;225
                  |L1.810|
00032a  9905              LDR      r1,[sp,#0x14]         ;227
00032c  980a              LDR      r0,[sp,#0x28]         ;227
00032e  fa40f901          ASR      r9,r0,r1              ;227
000332  980a              LDR      r0,[sp,#0x28]         ;228
000334  40b0              LSLS     r0,r0,r6              ;228
000336  b2c0              UXTB     r0,r0                 ;228
000338  900a              STR      r0,[sp,#0x28]         ;228
00033a  9803              LDR      r0,[sp,#0xc]          ;229
00033c  1b80              SUBS     r0,r0,r6              ;229
00033e  9003              STR      r0,[sp,#0xc]          ;229
000340  f1b90f00          CMP      r9,#0                 ;230
000344  d104              BNE      |L1.848|
000346  481a              LDR      r0,|L1.944|
000348  7c00              LDRB     r0,[r0,#0x10]         ;230  ; GUI_Context
00034a  f0000002          AND      r0,r0,#2              ;230
00034e  b9c8              CBNZ     r0,|L1.900|
                  |L1.848|
000350  4817              LDR      r0,|L1.944|
000352  8840              LDRH     r0,[r0,#2]            ;231  ; GUI_Context
000354  9001              STR      r0,[sp,#4]            ;231
000356  981d              LDR      r0,[sp,#0x74]         ;232
000358  b128              CBZ      r0,|L1.870|
00035a  981d              LDR      r0,[sp,#0x74]         ;233
00035c  f8300019          LDRH     r0,[r0,r9,LSL #1]     ;233
000360  4913              LDR      r1,|L1.944|
000362  8048              STRH     r0,[r1,#2]            ;233
000364  e002              B        |L1.876|
                  |L1.870|
000366  4812              LDR      r0,|L1.944|
000368  f8a09002          STRH     r9,[r0,#2]            ;235
                  |L1.876|
00036c  ebab000a          SUB      r0,r11,r10            ;237
000370  1c41              ADDS     r1,r0,#1              ;237
000372  465b              MOV      r3,r11                ;237
000374  4640              MOV      r0,r8                 ;237
000376  9a04              LDR      r2,[sp,#0x10]         ;237
000378  f7fffffe          BL       LCD_FillRect
00037c  490c              LDR      r1,|L1.944|
00037e  9801              LDR      r0,[sp,#4]            ;238
000380  8048              STRH     r0,[r1,#2]            ;238
000382  bf00              NOP                            ;239
                  |L1.900|
000384  9806              LDR      r0,[sp,#0x18]         ;221
000386  1c40              ADDS     r0,r0,#1              ;221
000388  9006              STR      r0,[sp,#0x18]         ;221
00038a  ebab0b0a          SUB      r11,r11,r10           ;221
                  |L1.910|
00038e  9806              LDR      r0,[sp,#0x18]         ;221
000390  42a0              CMP      r0,r4                 ;221
000392  dbc0              BLT      |L1.790|
000394  bf00              NOP                            ;241
                  |L1.918|
000396  9807              LDR      r0,[sp,#0x1c]         ;216
000398  1c40              ADDS     r0,r0,#1              ;216
00039a  9007              STR      r0,[sp,#0x1c]         ;216
00039c  9819              LDR      r0,[sp,#0x64]         ;216
00039e  4480              ADD      r8,r8,r0              ;216
0003a0  981b              LDR      r0,[sp,#0x6c]         ;216
0003a2  4407              ADD      r7,r7,r0              ;216
                  |L1.932|
0003a4  9807              LDR      r0,[sp,#0x1c]         ;216
0003a6  42a8              CMP      r0,r5                 ;216
0003a8  db9f              BLT      |L1.746|
0003aa  bf00              NOP                            ;243
                  |L1.940|
0003ac  bf00              NOP      
0003ae  e760              B        |L1.626|
;;;245    
                          ENDP

                  |L1.944|
                          DCD      GUI_Context
                  |L1.948|
                          DCD      GUI_RectDispString

                          AREA ||.data||, DATA, ALIGN=2

                  LCD_APIListCCW
                          DCD      _DrawBitmapCCW
                          DCD      _Rect2TextRect
