; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\guidev_8.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\guidev_8.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -I.\GUI\AntiAlias -I.\GUI\Config -I.\GUI\ConvertColor -I.\GUI\ConvertMono -I.\GUI\Core -I.\GUI\Font -I.\GUI\GUI_X -I.\GUI\JPEG -I.\GUI\LCDDriver -I.\GUI\MemDev -I.\GUI\MultiLayer -I.\GUI\Widget -I.\GUI\WM -IC:\Users\Administrator\Desktop\gui\STM32·Ü¶·°å-3.98\RTE -Id:\Keil_v5\ARM\PACK\ARM\CMSIS\4.3.0\CMSIS\Include -Id:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.1.0\Device\Include -D__UVISION_VERSION=515 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\guidev_8.crf GUI\MemDev\GUIDEV_8.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _XY2PTR PROC
;;;73     */
;;;74     static PIXELINDEX* _XY2PTR(int x, int y) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
;;;75       GUI_MEMDEV* pDev = GUI_MEMDEV_H2P(GUI_Context.hDevData);
000008  49f7              LDR      r1,|L1.1000|
00000a  f9b1004c          LDRSH    r0,[r1,#0x4c]  ; GUI_Context
00000e  f7fffffe          BL       GUI_ALLOC_h2p
000012  4604              MOV      r4,r0
;;;76       U8 *pData = (U8*)(pDev + 1);
000014  f104072c          ADD      r7,r4,#0x2c
;;;77       #if GUI_DEBUG_LEVEL >= GUI_DEBUG_LEVEL_CHECK_ALL
;;;78         if ((x >= pDev->x0+pDev->XSize) | (x<pDev->x0) | (y >= pDev->y0+pDev->YSize) | (y<pDev->y0)) {
;;;79           GUI_DEBUG_ERROROUT2("_XY2PTR: parameters out of bounds",x,y);
;;;80         }
;;;81       #endif
;;;82       pData += (GUI_ALLOC_DATATYPE_U)(y - pDev->y0) * (GUI_ALLOC_DATATYPE_U)pDev->BytesPerLine;
000018  8860              LDRH     r0,[r4,#2]
00001a  1a30              SUBS     r0,r6,r0
00001c  b280              UXTH     r0,r0
00001e  89a1              LDRH     r1,[r4,#0xc]
000020  b289              UXTH     r1,r1
000022  fb007701          MLA      r7,r0,r1,r7
;;;83       return ((PIXELINDEX*)pData) + x - pDev->x0;
000026  1978              ADDS     r0,r7,r5
000028  f9b41000          LDRSH    r1,[r4,#0]
00002c  1a40              SUBS     r0,r0,r1
;;;84     }
00002e  e8bd81f0          POP      {r4-r8,pc}
;;;85     
                          ENDP

                  _DrawBitLine1BPP PROC
;;;89     */
;;;90     static void _DrawBitLine1BPP(GUI_USAGE* pUsage, int x, int y, const U8 GUI_UNI_PTR * p, int Diff, unsigned int xsize,
000032  e92d4fff          PUSH     {r0-r11,lr}
;;;91                                  const LCD_PIXELINDEX* pTrans, GUI_MEMDEV* pDev, PIXELINDEX* pDest)
;;;92     {
000036  b081              SUB      sp,sp,#4
000038  4681              MOV      r9,r0
00003a  468a              MOV      r10,r1
00003c  4698              MOV      r8,r3
00003e  9e12              LDR      r6,[sp,#0x48]
000040  9d0f              LDR      r5,[sp,#0x3c]
;;;93       PIXELINDEX Index1;
;;;94       PIXELINDEX IndexMask;
;;;95       unsigned pixels;
;;;96       unsigned PixelCnt;
;;;97       PixelCnt = 8 - Diff;
000042  980e              LDR      r0,[sp,#0x38]
000044  f1c00408          RSB      r4,r0,#8
;;;98       pixels = LCD_aMirror[*p] >> Diff;
000048  f8980000          LDRB     r0,[r8,#0]
00004c  49e7              LDR      r1,|L1.1004|
00004e  5c08              LDRB     r0,[r1,r0]
000050  990e              LDR      r1,[sp,#0x38]
000052  fa40f701          ASR      r7,r0,r1
;;;99     
;;;100      GUI_DEBUG_ERROROUT3_IF( x < pDev->x0, "GUIDEV.c: DrawBitLine1BPP, Act= %d, Border= %d, Clip= %d", x,pDev->x0, GUI_Context.ClipRect.x0);
;;;101    
;;;102      switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
000056  48e4              LDR      r0,|L1.1000|
000058  7c00              LDRB     r0,[r0,#0x10]  ; GUI_Context
00005a  f0000003          AND      r0,r0,#3
00005e  b120              CBZ      r0,|L1.106|
000060  2801              CMP      r0,#1
000062  d060              BEQ      |L1.294|
000064  2802              CMP      r0,#2
000066  d177              BNE      |L1.344|
000068  e01c              B        |L1.164|
                  |L1.106|
;;;103      case 0:    /* Write mode */
;;;104        do {
00006a  bf00              NOP      
                  |L1.108|
;;;105          /* Prepare loop */
;;;106          if (PixelCnt > xsize) {
00006c  42ac              CMP      r4,r5
00006e  d900              BLS      |L1.114|
;;;107            PixelCnt = xsize;
000070  462c              MOV      r4,r5
                  |L1.114|
;;;108          }
;;;109          xsize -= PixelCnt;
000072  1b2d              SUBS     r5,r5,r4
;;;110          /* Write as many pixels as we are allowed to and have loaded in this inner loop */
;;;111          do {
000074  bf00              NOP      
                  |L1.118|
;;;112            *pDest++ = *(pTrans + (pixels & 1));
000076  f0070101          AND      r1,r7,#1
00007a  9810              LDR      r0,[sp,#0x40]
00007c  f8100011          LDRB     r0,[r0,r1,LSL #1]
000080  f8060b01          STRB     r0,[r6],#1
;;;113            pixels >>= 1;
000084  087f              LSRS     r7,r7,#1
;;;114          } while (--PixelCnt);
000086  1e60              SUBS     r0,r4,#1
000088  0004              MOVS     r4,r0
00008a  d1f4              BNE      |L1.118|
;;;115          /* Check if an other Source byte needs to be loaded */
;;;116          if (xsize == 0) {
00008c  b915              CBNZ     r5,|L1.148|
                  |L1.142|
;;;117            return;
;;;118          }
;;;119          PixelCnt = 8;
;;;120          pixels = LCD_aMirror[*++p];
;;;121        } while (1);
;;;122      case LCD_DRAWMODE_TRANS:
;;;123        Index1 = *(pTrans + 1);
;;;124        do {
;;;125          /* Prepare loop */
;;;126          if (PixelCnt > xsize) {
;;;127            PixelCnt = xsize;
;;;128          }
;;;129          xsize -= PixelCnt;
;;;130          if (pUsage) {
;;;131            do {
;;;132              if (pixels == 0) {      /* Early out optimization; not required */
;;;133                pDest += PixelCnt;
;;;134                x     += PixelCnt;
;;;135                break;
;;;136              }
;;;137              if ((pixels & 1)) {
;;;138                GUI_USAGE_AddPixel(pUsage, x, y);
;;;139                *pDest = Index1;
;;;140              }
;;;141              x++;
;;;142              pDest++;
;;;143              if (--PixelCnt == 0) {
;;;144                break;
;;;145              }
;;;146              pixels >>= 1;
;;;147            } while (1);
;;;148          } else {
;;;149            do {
;;;150              if (pixels == 0) {      /* Early out optimization; not required */
;;;151                pDest += PixelCnt;
;;;152                break;
;;;153              }
;;;154              if ((pixels & 1)) {
;;;155                *pDest = Index1;
;;;156              }
;;;157              pDest++;
;;;158              if (--PixelCnt == 0) {
;;;159                break;
;;;160              }
;;;161              pixels >>= 1;
;;;162            } while (1);
;;;163          }
;;;164          /* Check if an other Source byte needs to be loaded */
;;;165          if (xsize == 0) {
;;;166            return;
;;;167          }
;;;168          PixelCnt = 8;
;;;169          pixels = LCD_aMirror[*(++p)];
;;;170        } while (1);
;;;171      case LCD_DRAWMODE_XOR:
;;;172        IndexMask = pDev->pfGetIndexMask();
;;;173        do {
;;;174          /* Prepare loop */
;;;175          if (PixelCnt > xsize) {
;;;176            PixelCnt = xsize;
;;;177          }
;;;178          xsize -= PixelCnt;
;;;179          /* Write as many pixels as we are allowed to and have loaded in this inner loop */
;;;180          do {
;;;181            if ((pixels & 1)) {
;;;182              *pDest ^= IndexMask;
;;;183            }
;;;184            *pDest++;
;;;185            pixels >>= 1;
;;;186          } while (--PixelCnt);
;;;187          /* Check if an other Source byte needs to be loaded */
;;;188          if (xsize == 0) {
;;;189            return;
;;;190          }
;;;191          PixelCnt = 8;
;;;192          pixels = LCD_aMirror[*(++p)];
;;;193        } while (1);
;;;194      }
;;;195    }
00008e  b005              ADD      sp,sp,#0x14
000090  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.148|
000094  2408              MOVS     r4,#8                 ;119
000096  f1080001          ADD      r0,r8,#1              ;120
00009a  4680              MOV      r8,r0                 ;120
00009c  7800              LDRB     r0,[r0,#0]            ;120
00009e  49d3              LDR      r1,|L1.1004|
0000a0  5c0f              LDRB     r7,[r1,r0]            ;120
0000a2  e7e3              B        |L1.108|
                  |L1.164|
0000a4  9810              LDR      r0,[sp,#0x40]         ;123
0000a6  f890b002          LDRB     r11,[r0,#2]           ;123
0000aa  bf00              NOP                            ;124
                  |L1.172|
0000ac  42ac              CMP      r4,r5                 ;126
0000ae  d900              BLS      |L1.178|
0000b0  462c              MOV      r4,r5                 ;127
                  |L1.178|
0000b2  1b2d              SUBS     r5,r5,r4              ;129
0000b4  f1b90f00          CMP      r9,#0                 ;130
0000b8  d01a              BEQ      |L1.240|
0000ba  bf00              NOP                            ;131
                  |L1.188|
0000bc  b917              CBNZ     r7,|L1.196|
0000be  4426              ADD      r6,r6,r4              ;133
0000c0  44a2              ADD      r10,r10,r4            ;134
0000c2  e014              B        |L1.238|
                  |L1.196|
0000c4  f0070001          AND      r0,r7,#1              ;137
0000c8  b140              CBZ      r0,|L1.220|
0000ca  f8d90008          LDR      r0,[r9,#8]            ;138
0000ce  6803              LDR      r3,[r0,#0]            ;138
0000d0  4651              MOV      r1,r10                ;138
0000d2  4648              MOV      r0,r9                 ;138
0000d4  9a03              LDR      r2,[sp,#0xc]          ;138
0000d6  4798              BLX      r3                    ;138
0000d8  f886b000          STRB     r11,[r6,#0]           ;139
                  |L1.220|
0000dc  f10a0a01          ADD      r10,r10,#1            ;141
0000e0  1c76              ADDS     r6,r6,#1              ;142
0000e2  1e60              SUBS     r0,r4,#1              ;143
0000e4  0004              MOVS     r4,r0                 ;143
0000e6  d100              BNE      |L1.234|
0000e8  e001              B        |L1.238|
                  |L1.234|
0000ea  087f              LSRS     r7,r7,#1              ;146
0000ec  e7e6              B        |L1.188|
                  |L1.238|
0000ee  e010              B        |L1.274|
                  |L1.240|
0000f0  bf00              NOP                            ;149
                  |L1.242|
0000f2  b90f              CBNZ     r7,|L1.248|
0000f4  4426              ADD      r6,r6,r4              ;151
0000f6  e00b              B        |L1.272|
                  |L1.248|
0000f8  f0070001          AND      r0,r7,#1              ;154
0000fc  b108              CBZ      r0,|L1.258|
0000fe  f886b000          STRB     r11,[r6,#0]           ;155
                  |L1.258|
000102  1c76              ADDS     r6,r6,#1              ;157
000104  1e60              SUBS     r0,r4,#1              ;158
000106  0004              MOVS     r4,r0                 ;158
000108  d100              BNE      |L1.268|
00010a  e001              B        |L1.272|
                  |L1.268|
00010c  087f              LSRS     r7,r7,#1              ;161
00010e  e7f0              B        |L1.242|
                  |L1.272|
000110  bf00              NOP                            ;152
                  |L1.274|
000112  b905              CBNZ     r5,|L1.278|
000114  e7bb              B        |L1.142|
                  |L1.278|
000116  2408              MOVS     r4,#8                 ;168
000118  f1080001          ADD      r0,r8,#1              ;169
00011c  4680              MOV      r8,r0                 ;169
00011e  7800              LDRB     r0,[r0,#0]            ;169
000120  49b2              LDR      r1,|L1.1004|
000122  5c0f              LDRB     r7,[r1,r0]            ;169
000124  e7c2              B        |L1.172|
                  |L1.294|
000126  9911              LDR      r1,[sp,#0x44]         ;172
000128  6a48              LDR      r0,[r1,#0x24]         ;172
00012a  4780              BLX      r0                    ;172
00012c  b2c0              UXTB     r0,r0                 ;172
00012e  9000              STR      r0,[sp,#0]            ;172
000130  bf00              NOP                            ;173
                  |L1.306|
000132  42ac              CMP      r4,r5                 ;175
000134  d900              BLS      |L1.312|
000136  462c              MOV      r4,r5                 ;176
                  |L1.312|
000138  1b2d              SUBS     r5,r5,r4              ;178
00013a  bf00              NOP                            ;180
                  |L1.316|
00013c  f0070001          AND      r0,r7,#1              ;181
000140  b118              CBZ      r0,|L1.330|
000142  7830              LDRB     r0,[r6,#0]            ;182
000144  9900              LDR      r1,[sp,#0]            ;182
000146  4048              EORS     r0,r0,r1              ;182
000148  7030              STRB     r0,[r6,#0]            ;182
                  |L1.330|
00014a  1c76              ADDS     r6,r6,#1              ;184
00014c  087f              LSRS     r7,r7,#1              ;185
00014e  1e60              SUBS     r0,r4,#1              ;186
000150  0004              MOVS     r4,r0                 ;186
000152  d1f3              BNE      |L1.316|
000154  b90d              CBNZ     r5,|L1.346|
000156  e79a              B        |L1.142|
                  |L1.344|
000158  e007              B        |L1.362|
                  |L1.346|
00015a  2408              MOVS     r4,#8                 ;191
00015c  f1080001          ADD      r0,r8,#1              ;192
000160  4680              MOV      r8,r0                 ;192
000162  7800              LDRB     r0,[r0,#0]            ;192
000164  49a1              LDR      r1,|L1.1004|
000166  5c0f              LDRB     r7,[r1,r0]            ;192
000168  e7e3              B        |L1.306|
                  |L1.362|
00016a  bf00              NOP                            ;102
00016c  bf00              NOP      
00016e  e78e              B        |L1.142|
;;;196    
                          ENDP

                  _DrawBitLine2BPP PROC
;;;200    */
;;;201    static void _DrawBitLine2BPP(GUI_USAGE* pUsage, int x, int y, const U8 GUI_UNI_PTR * p, int Diff, int xsize,
000170  e92d5fff          PUSH     {r0-r12,lr}
;;;202                                 const LCD_PIXELINDEX* pTrans, PIXELINDEX* pDest)
;;;203    {
000174  4681              MOV      r9,r0
000176  468a              MOV      r10,r1
000178  4698              MOV      r8,r3
00017a  e9ddb610          LDRD     r11,r6,[sp,#0x40]
00017e  9c0f              LDR      r4,[sp,#0x3c]
;;;204      U8 pixels;
;;;205      U8  PixelCnt;
;;;206      PixelCnt = 4 - Diff;
000180  980e              LDR      r0,[sp,#0x38]
000182  f1c00004          RSB      r0,r0,#4
000186  b2c5              UXTB     r5,r0
;;;207      pixels = (*p) << (Diff << 1);
000188  f8980000          LDRB     r0,[r8,#0]
00018c  990e              LDR      r1,[sp,#0x38]
00018e  0049              LSLS     r1,r1,#1
000190  4088              LSLS     r0,r0,r1
000192  b2c7              UXTB     r7,r0
;;;208      switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
000194  4894              LDR      r0,|L1.1000|
000196  7c00              LDRB     r0,[r0,#0x10]  ; GUI_Context
000198  f0000003          AND      r0,r0,#3
00019c  b120              CBZ      r0,|L1.424|
00019e  2801              CMP      r0,#1
0001a0  d043              BEQ      |L1.554|
0001a2  2802              CMP      r0,#2
0001a4  d15d              BNE      |L1.610|
0001a6  e018              B        |L1.474|
                  |L1.424|
;;;209      case 0:    /* Write mode */
;;;210      PixelLoopWrite:
0001a8  bf00              NOP      
                  |L1.426|
;;;211        if (PixelCnt > xsize) {
0001aa  42a5              CMP      r5,r4
0001ac  dd00              BLE      |L1.432|
;;;212          PixelCnt = xsize;
0001ae  b2e5              UXTB     r5,r4
                  |L1.432|
;;;213        }
;;;214        xsize -= PixelCnt;
0001b0  1b64              SUBS     r4,r4,r5
;;;215        do {
0001b2  bf00              NOP      
                  |L1.436|
;;;216          *pDest++ = *(pTrans + (pixels >> 6));
0001b4  11b8              ASRS     r0,r7,#6
0001b6  f81b0010          LDRB     r0,[r11,r0,LSL #1]
0001ba  f8060b01          STRB     r0,[r6],#1
;;;217          pixels <<= 2;
0001be  06b8              LSLS     r0,r7,#26
0001c0  0e07              LSRS     r7,r0,#24
;;;218        } while (--PixelCnt);
0001c2  1e68              SUBS     r0,r5,#1
0001c4  b2c0              UXTB     r0,r0
0001c6  0005              MOVS     r5,r0
0001c8  d1f4              BNE      |L1.436|
;;;219        if (xsize) {
0001ca  b12c              CBZ      r4,|L1.472|
;;;220          PixelCnt = 4;
0001cc  2504              MOVS     r5,#4
;;;221          pixels = *(++p);
0001ce  f1080001          ADD      r0,r8,#1
0001d2  4680              MOV      r8,r0
0001d4  7807              LDRB     r7,[r0,#0]
;;;222          goto PixelLoopWrite;
0001d6  e7e8              B        |L1.426|
                  |L1.472|
;;;223        }
;;;224        break;
0001d8  e043              B        |L1.610|
                  |L1.474|
;;;225      case LCD_DRAWMODE_TRANS:
;;;226      PixelLoopTrans:
0001da  bf00              NOP      
                  |L1.476|
;;;227        if (PixelCnt > xsize)
0001dc  42a5              CMP      r5,r4
0001de  dd00              BLE      |L1.482|
;;;228          PixelCnt = xsize;
0001e0  b2e5              UXTB     r5,r4
                  |L1.482|
;;;229        xsize -= PixelCnt;
0001e2  1b64              SUBS     r4,r4,r5
;;;230        do {
0001e4  bf00              NOP      
                  |L1.486|
;;;231          if (pixels & 0xc0) {
0001e6  f00700c0          AND      r0,r7,#0xc0
0001ea  b168              CBZ      r0,|L1.520|
;;;232            *pDest = *(pTrans + (pixels >> 6));
0001ec  11b8              ASRS     r0,r7,#6
0001ee  f81b0010          LDRB     r0,[r11,r0,LSL #1]
0001f2  7030              STRB     r0,[r6,#0]
;;;233            if (pUsage) {
0001f4  f1b90f00          CMP      r9,#0
0001f8  d006              BEQ      |L1.520|
;;;234              GUI_USAGE_AddPixel(pUsage, x, y);
0001fa  f8d90008          LDR      r0,[r9,#8]
0001fe  6803              LDR      r3,[r0,#0]
000200  4651              MOV      r1,r10
000202  4648              MOV      r0,r9
000204  9a02              LDR      r2,[sp,#8]
000206  4798              BLX      r3
                  |L1.520|
;;;235            }
;;;236          }
;;;237          pDest++;
000208  1c76              ADDS     r6,r6,#1
;;;238          x++;
00020a  f10a0a01          ADD      r10,r10,#1
;;;239          pixels <<= 2;
00020e  06b8              LSLS     r0,r7,#26
000210  0e07              LSRS     r7,r0,#24
;;;240        } while (--PixelCnt);
000212  1e68              SUBS     r0,r5,#1
000214  b2c0              UXTB     r0,r0
000216  0005              MOVS     r5,r0
000218  d1e5              BNE      |L1.486|
;;;241        if (xsize) {
00021a  b12c              CBZ      r4,|L1.552|
;;;242          PixelCnt = 4;
00021c  2504              MOVS     r5,#4
;;;243          pixels = *(++p);
00021e  f1080001          ADD      r0,r8,#1
000222  4680              MOV      r8,r0
000224  7807              LDRB     r7,[r0,#0]
;;;244          goto PixelLoopTrans;
000226  e7d9              B        |L1.476|
                  |L1.552|
;;;245        }
;;;246        break;
000228  e01b              B        |L1.610|
                  |L1.554|
;;;247      case LCD_DRAWMODE_XOR:;
;;;248      PixelLoopXor:
00022a  bf00              NOP      
                  |L1.556|
;;;249        if (PixelCnt > xsize)
00022c  42a5              CMP      r5,r4
00022e  dd00              BLE      |L1.562|
;;;250          PixelCnt = xsize;
000230  b2e5              UXTB     r5,r4
                  |L1.562|
;;;251        xsize -= PixelCnt;
000232  1b64              SUBS     r4,r4,r5
;;;252        do {
000234  bf00              NOP      
                  |L1.566|
;;;253          if ((pixels & 0xc0))
000236  f00700c0          AND      r0,r7,#0xc0
00023a  b118              CBZ      r0,|L1.580|
;;;254            *pDest ^= 255;
00023c  7830              LDRB     r0,[r6,#0]
00023e  f08000ff          EOR      r0,r0,#0xff
000242  7030              STRB     r0,[r6,#0]
                  |L1.580|
;;;255          pDest++;
000244  1c76              ADDS     r6,r6,#1
;;;256          pixels <<= 2;
000246  06b8              LSLS     r0,r7,#26
000248  0e07              LSRS     r7,r0,#24
;;;257        } while (--PixelCnt);
00024a  1e68              SUBS     r0,r5,#1
00024c  b2c0              UXTB     r0,r0
00024e  0005              MOVS     r5,r0
000250  d1f1              BNE      |L1.566|
;;;258        if (xsize) {
000252  b12c              CBZ      r4,|L1.608|
;;;259          PixelCnt = 4;
000254  2504              MOVS     r5,#4
;;;260          pixels = *(++p);
000256  f1080001          ADD      r0,r8,#1
00025a  4680              MOV      r8,r0
00025c  7807              LDRB     r7,[r0,#0]
;;;261          goto PixelLoopXor;
00025e  e7e5              B        |L1.556|
                  |L1.608|
;;;262        }
;;;263        break;
000260  bf00              NOP      
                  |L1.610|
000262  bf00              NOP                            ;224
;;;264      }
;;;265    }
000264  e8bd9fff          POP      {r0-r12,pc}
;;;266    
                          ENDP

                  _DrawBitLine4BPP PROC
;;;270    */
;;;271    static void _DrawBitLine4BPP(GUI_USAGE* pUsage, int x, int y, const U8 GUI_UNI_PTR * p, int Diff, int xsize,
000268  e92d4fff          PUSH     {r0-r11,lr}
;;;272                                 const LCD_PIXELINDEX* pTrans, PIXELINDEX* pDest)
;;;273    {
00026c  b081              SUB      sp,sp,#4
00026e  4607              MOV      r7,r0
000270  468a              MOV      r10,r1
000272  4699              MOV      r9,r3
000274  e9ddb60e          LDRD     r11,r6,[sp,#0x38]
000278  e9dd8410          LDRD     r8,r4,[sp,#0x40]
;;;274      U8 pixels;
;;;275      U8 PixelCnt;
;;;276      PixelCnt = 2 - Diff;
00027c  f1cb0002          RSB      r0,r11,#2
000280  b2c0              UXTB     r0,r0
000282  9000              STR      r0,[sp,#0]
;;;277      pixels = (*p) << (Diff << 2);
000284  f8990000          LDRB     r0,[r9,#0]
000288  ea4f018b          LSL      r1,r11,#2
00028c  4088              LSLS     r0,r0,r1
00028e  b2c5              UXTB     r5,r0
;;;278      switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
000290  4855              LDR      r0,|L1.1000|
000292  7c00              LDRB     r0,[r0,#0x10]  ; GUI_Context
000294  f0000003          AND      r0,r0,#3
000298  b120              CBZ      r0,|L1.676|
00029a  2801              CMP      r0,#1
00029c  d07e              BEQ      |L1.924|
00029e  2802              CMP      r0,#2
0002a0  d12a              BNE      |L1.760|
0002a2  e02a              B        |L1.762|
                  |L1.676|
;;;279    /*
;;;280              * Write mode *
;;;281    */
;;;282      case 0:
;;;283        /* Draw incomplete bytes to the left of center area */
;;;284        if (Diff) {
0002a4  f1bb0f00          CMP      r11,#0
0002a8  d009              BEQ      |L1.702|
;;;285          *pDest = *(pTrans + (pixels >> 4));
0002aa  1128              ASRS     r0,r5,#4
0002ac  f8180010          LDRB     r0,[r8,r0,LSL #1]
0002b0  7020              STRB     r0,[r4,#0]
;;;286          pDest++;
0002b2  1c64              ADDS     r4,r4,#1
;;;287          xsize--;
0002b4  1e76              SUBS     r6,r6,#1
;;;288          pixels = *++p;
0002b6  f1090001          ADD      r0,r9,#1
0002ba  4681              MOV      r9,r0
0002bc  7805              LDRB     r5,[r0,#0]
                  |L1.702|
;;;289        }
;;;290        /* Draw center area (2 pixels in one byte) */
;;;291        if (xsize >= 2) {
0002be  2e02              CMP      r6,#2
0002c0  db15              BLT      |L1.750|
;;;292          int i = xsize >> 1;
0002c2  1070              ASRS     r0,r6,#1
;;;293          xsize &= 1;
0002c4  f0060601          AND      r6,r6,#1
;;;294          do {
0002c8  bf00              NOP      
                  |L1.714|
;;;295            *pDest     = *(pTrans + (pixels >> 4));   /* Draw 1. (left) pixel */
0002ca  1129              ASRS     r1,r5,#4
0002cc  f8181011          LDRB     r1,[r8,r1,LSL #1]
0002d0  7021              STRB     r1,[r4,#0]
;;;296            *(pDest+1) = *(pTrans + (pixels & 15));   /* Draw 2. (right) pixel */
0002d2  f005010f          AND      r1,r5,#0xf
0002d6  f8181011          LDRB     r1,[r8,r1,LSL #1]
0002da  7061              STRB     r1,[r4,#1]
;;;297            pDest += 2;
0002dc  1ca4              ADDS     r4,r4,#2
;;;298            pixels = *++p;
0002de  f1090101          ADD      r1,r9,#1
0002e2  4689              MOV      r9,r1
0002e4  780d              LDRB     r5,[r1,#0]
;;;299          } while (--i);
0002e6  1e41              SUBS     r1,r0,#1
0002e8  0008              MOVS     r0,r1
0002ea  d1ee              BNE      |L1.714|
;;;300        }
0002ec  bf00              NOP      
                  |L1.750|
;;;301        /* Draw incomplete bytes to the right of center area */
;;;302        if (xsize) {
0002ee  b11e              CBZ      r6,|L1.760|
;;;303          *pDest = * (pTrans + (pixels >> 4));
0002f0  1128              ASRS     r0,r5,#4
0002f2  f8180010          LDRB     r0,[r8,r0,LSL #1]
0002f6  7020              STRB     r0,[r4,#0]
                  |L1.760|
;;;304        }
;;;305        break;
0002f8  e072              B        |L1.992|
                  |L1.762|
;;;306    /*
;;;307              * Transparent draw mode *
;;;308    */
;;;309      case LCD_DRAWMODE_TRANS:
;;;310        /* Draw incomplete bytes to the left of center area */
;;;311        if (Diff) {
0002fa  f1bb0f00          CMP      r11,#0
0002fe  d015              BEQ      |L1.812|
;;;312          if (pixels & 0xF0) {
000300  f00500f0          AND      r0,r5,#0xf0
000304  b150              CBZ      r0,|L1.796|
;;;313            *pDest = *(pTrans + (pixels >> 4));
000306  1128              ASRS     r0,r5,#4
000308  f8180010          LDRB     r0,[r8,r0,LSL #1]
00030c  7020              STRB     r0,[r4,#0]
;;;314            if (pUsage) {
00030e  b12f              CBZ      r7,|L1.796|
;;;315              GUI_USAGE_AddPixel(pUsage, x, y);
000310  68b8              LDR      r0,[r7,#8]
000312  6803              LDR      r3,[r0,#0]
000314  4651              MOV      r1,r10
000316  4638              MOV      r0,r7
000318  9a03              LDR      r2,[sp,#0xc]
00031a  4798              BLX      r3
                  |L1.796|
;;;316            }
;;;317          }
;;;318          pDest++;
00031c  1c64              ADDS     r4,r4,#1
;;;319          x++;
00031e  f10a0a01          ADD      r10,r10,#1
;;;320          xsize--;
000322  1e76              SUBS     r6,r6,#1
;;;321          pixels = *++p;
000324  f1090001          ADD      r0,r9,#1
000328  4681              MOV      r9,r0
00032a  7805              LDRB     r5,[r0,#0]
                  |L1.812|
;;;322        }
;;;323        /* Draw center area (2 pixels in one byte) */
;;;324        while (xsize >= 2) {
00032c  e024              B        |L1.888|
                  |L1.814|
;;;325          /* Draw 1. (left) pixel */
;;;326          if (pixels & 0xF0) {
00032e  f00500f0          AND      r0,r5,#0xf0
000332  b150              CBZ      r0,|L1.842|
;;;327            *pDest = *(pTrans + (pixels >> 4));
000334  1128              ASRS     r0,r5,#4
000336  f8180010          LDRB     r0,[r8,r0,LSL #1]
00033a  7020              STRB     r0,[r4,#0]
;;;328            if (pUsage) {
00033c  b12f              CBZ      r7,|L1.842|
;;;329              GUI_USAGE_AddPixel(pUsage, x, y);
00033e  68b8              LDR      r0,[r7,#8]
000340  6803              LDR      r3,[r0,#0]
000342  4651              MOV      r1,r10
000344  4638              MOV      r0,r7
000346  9a03              LDR      r2,[sp,#0xc]
000348  4798              BLX      r3
                  |L1.842|
;;;330            }
;;;331          }
;;;332          /* Draw 2. (right) pixel */
;;;333          if (pixels &= 15) {
00034a  f005000f          AND      r0,r5,#0xf
00034e  0005              MOVS     r5,r0
000350  d00a              BEQ      |L1.872|
;;;334            *(pDest + 1) = *(pTrans + pixels);
000352  f8180015          LDRB     r0,[r8,r5,LSL #1]
000356  7060              STRB     r0,[r4,#1]
;;;335            if (pUsage) {
000358  b137              CBZ      r7,|L1.872|
;;;336              GUI_USAGE_AddPixel(pUsage, x + 1, y);
00035a  68b8              LDR      r0,[r7,#8]
00035c  6803              LDR      r3,[r0,#0]
00035e  f10a0101          ADD      r1,r10,#1
000362  4638              MOV      r0,r7
000364  9a03              LDR      r2,[sp,#0xc]
000366  4798              BLX      r3
                  |L1.872|
;;;337            }
;;;338          }
;;;339          pDest += 2;
000368  1ca4              ADDS     r4,r4,#2
;;;340          x += 2;
00036a  f10a0a02          ADD      r10,r10,#2
;;;341          xsize -= 2;
00036e  1eb6              SUBS     r6,r6,#2
;;;342          pixels = *++p;
000370  f1090001          ADD      r0,r9,#1
000374  4681              MOV      r9,r0
000376  7805              LDRB     r5,[r0,#0]
                  |L1.888|
000378  2e02              CMP      r6,#2                 ;324
00037a  dad8              BGE      |L1.814|
;;;343        }
;;;344        /* Draw incomplete bytes to the right of center area */
;;;345        if (xsize) {
00037c  b166              CBZ      r6,|L1.920|
;;;346          if (pixels >>= 4) {
00037e  1128              ASRS     r0,r5,#4
000380  0005              MOVS     r5,r0
000382  d009              BEQ      |L1.920|
;;;347            *pDest = *(pTrans + pixels);
000384  f8180015          LDRB     r0,[r8,r5,LSL #1]
000388  7020              STRB     r0,[r4,#0]
;;;348            if (pUsage) {
00038a  b12f              CBZ      r7,|L1.920|
;;;349              GUI_USAGE_AddPixel(pUsage, x, y);
00038c  68b8              LDR      r0,[r7,#8]
00038e  6803              LDR      r3,[r0,#0]
000390  4651              MOV      r1,r10
000392  4638              MOV      r0,r7
000394  9a03              LDR      r2,[sp,#0xc]
000396  4798              BLX      r3
                  |L1.920|
;;;350            }
;;;351          }
;;;352        }
;;;353        break;
000398  e022              B        |L1.992|
00039a  e7ff              B        |L1.924|
                  |L1.924|
;;;354      case LCD_DRAWMODE_XOR:;
;;;355      PixelLoopXor:
00039c  bf00              NOP      
                  |L1.926|
;;;356        if (PixelCnt > xsize)
00039e  9800              LDR      r0,[sp,#0]
0003a0  42b0              CMP      r0,r6
0003a2  dd01              BLE      |L1.936|
;;;357          PixelCnt = xsize;
0003a4  b2f0              UXTB     r0,r6
0003a6  9000              STR      r0,[sp,#0]
                  |L1.936|
;;;358        xsize -= PixelCnt;
0003a8  9800              LDR      r0,[sp,#0]
0003aa  1a36              SUBS     r6,r6,r0
;;;359        do {
0003ac  bf00              NOP      
                  |L1.942|
;;;360          if ((pixels & 0xc0)) {
0003ae  f00500c0          AND      r0,r5,#0xc0
0003b2  b118              CBZ      r0,|L1.956|
;;;361            *pDest ^= 255;
0003b4  7820              LDRB     r0,[r4,#0]
0003b6  f08000ff          EOR      r0,r0,#0xff
0003ba  7020              STRB     r0,[r4,#0]
                  |L1.956|
;;;362          }
;;;363          pDest++;
0003bc  1c64              ADDS     r4,r4,#1
;;;364          pixels <<= 4;
0003be  0728              LSLS     r0,r5,#28
0003c0  0e05              LSRS     r5,r0,#24
;;;365        } while (--PixelCnt);
0003c2  9800              LDR      r0,[sp,#0]
0003c4  1e40              SUBS     r0,r0,#1
0003c6  b2c0              UXTB     r0,r0
0003c8  9000              STR      r0,[sp,#0]
0003ca  2800              CMP      r0,#0
0003cc  d1ef              BNE      |L1.942|
;;;366        if (xsize) {
0003ce  b136              CBZ      r6,|L1.990|
;;;367          PixelCnt = 2;
0003d0  2002              MOVS     r0,#2
0003d2  9000              STR      r0,[sp,#0]
;;;368          pixels = *(++p);
0003d4  f1090001          ADD      r0,r9,#1
0003d8  4681              MOV      r9,r0
0003da  7805              LDRB     r5,[r0,#0]
;;;369          goto PixelLoopXor;
0003dc  e7df              B        |L1.926|
                  |L1.990|
;;;370        }
;;;371        break;
0003de  bf00              NOP      
                  |L1.992|
0003e0  bf00              NOP                            ;305
;;;372      }
;;;373    }
0003e2  b005              ADD      sp,sp,#0x14
0003e4  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.1000|
                          DCD      GUI_Context
                  |L1.1004|
                          DCD      LCD_aMirror
                          ENDP

                  _DrawBitLine8BPP PROC
;;;378    */
;;;379    static void _DrawBitLine8BPP(GUI_USAGE* pUsage, int x, int y, const U8 GUI_UNI_PTR * pSrc, int xsize,
0003f0  e92d47f0          PUSH     {r4-r10,lr}
;;;380                                 const LCD_PIXELINDEX* pTrans, PIXELINDEX* pDest) {
0003f4  4606              MOV      r6,r0
0003f6  460f              MOV      r7,r1
0003f8  4692              MOV      r10,r2
0003fa  461c              MOV      r4,r3
0003fc  e9dd8908          LDRD     r8,r9,[sp,#0x20]
000400  9d0a              LDR      r5,[sp,#0x28]
;;;381      switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
000402  48fd              LDR      r0,|L1.2040|
000404  7c00              LDRB     r0,[r0,#0x10]  ; GUI_Context
000406  f0000003          AND      r0,r0,#3
00040a  b110              CBZ      r0,|L1.1042|
00040c  2802              CMP      r0,#2
00040e  d124              BNE      |L1.1114|
000410  e00c              B        |L1.1068|
                  |L1.1042|
;;;382      case 0:    /* Write mode */
;;;383        do {
000412  bf00              NOP      
                  |L1.1044|
;;;384          *pDest = *(pTrans + *pSrc);
000414  7820              LDRB     r0,[r4,#0]
000416  f8190010          LDRB     r0,[r9,r0,LSL #1]
00041a  7028              STRB     r0,[r5,#0]
;;;385          pDest++;
00041c  1c6d              ADDS     r5,r5,#1
;;;386          pSrc++;
00041e  1c64              ADDS     r4,r4,#1
;;;387        } while (--xsize);
000420  f1a80001          SUB      r0,r8,#1
000424  ea5f0800          MOVS     r8,r0
000428  d1f4              BNE      |L1.1044|
;;;388        break;
00042a  e016              B        |L1.1114|
                  |L1.1068|
;;;389      case LCD_DRAWMODE_TRANS:
;;;390        do {
00042c  bf00              NOP      
                  |L1.1070|
;;;391          if (*pSrc) {
00042e  7820              LDRB     r0,[r4,#0]
000430  b150              CBZ      r0,|L1.1096|
;;;392            *pDest = *(pTrans + *pSrc);
000432  7820              LDRB     r0,[r4,#0]
000434  f8190010          LDRB     r0,[r9,r0,LSL #1]
000438  7028              STRB     r0,[r5,#0]
;;;393            if (pUsage) {
00043a  b12e              CBZ      r6,|L1.1096|
;;;394              GUI_USAGE_AddPixel(pUsage, x, y);
00043c  68b0              LDR      r0,[r6,#8]
00043e  4652              MOV      r2,r10
000440  4639              MOV      r1,r7
000442  6803              LDR      r3,[r0,#0]
000444  4630              MOV      r0,r6
000446  4798              BLX      r3
                  |L1.1096|
;;;395            }
;;;396          }
;;;397          x++;
000448  1c7f              ADDS     r7,r7,#1
;;;398          pDest++;
00044a  1c6d              ADDS     r5,r5,#1
;;;399          pSrc++;
00044c  1c64              ADDS     r4,r4,#1
;;;400        } while (--xsize);
00044e  f1a80001          SUB      r0,r8,#1
000452  ea5f0800          MOVS     r8,r0
000456  d1ea              BNE      |L1.1070|
;;;401        break;
000458  bf00              NOP      
                  |L1.1114|
00045a  bf00              NOP                            ;388
;;;402      }
;;;403    }
00045c  e8bd87f0          POP      {r4-r10,pc}
;;;404    
                          ENDP

                  _DrawBitLine8BPP_DDB PROC
;;;420    */
;;;421    static void _DrawBitLine8BPP_DDB(GUI_USAGE* pUsage, int x, int y, const U8 GUI_UNI_PTR * pSrc, int xsize, PIXELINDEX* pDest) {
000460  e92d47f0          PUSH     {r4-r10,lr}
000464  4605              MOV      r5,r0
000466  460f              MOV      r7,r1
000468  4691              MOV      r9,r2
00046a  461c              MOV      r4,r3
00046c  e9dd8608          LDRD     r8,r6,[sp,#0x20]
;;;422      switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
000470  48e1              LDR      r0,|L1.2040|
000472  7c00              LDRB     r0,[r0,#0x10]  ; GUI_Context
000474  f0000003          AND      r0,r0,#3
000478  b110              CBZ      r0,|L1.1152|
00047a  2802              CMP      r0,#2
00047c  d11b              BNE      |L1.1206|
00047e  e005              B        |L1.1164|
                  |L1.1152|
;;;423      case 0:    /* Write mode */
;;;424        #if GUI_UNI_PTR_USED
;;;425          _Memcopy(pDest, pSrc, xsize);
;;;426        #else
;;;427          memcpy(pDest, pSrc, xsize);
000480  4642              MOV      r2,r8
000482  4621              MOV      r1,r4
000484  4630              MOV      r0,r6
000486  f7fffffe          BL       __aeabi_memcpy
;;;428        #endif
;;;429        break;
00048a  e014              B        |L1.1206|
                  |L1.1164|
;;;430      case LCD_DRAWMODE_TRANS:
;;;431        do {
00048c  bf00              NOP      
                  |L1.1166|
;;;432          if (*pSrc) {
00048e  7820              LDRB     r0,[r4,#0]
000490  b140              CBZ      r0,|L1.1188|
;;;433            *pDest = *pSrc;
000492  7820              LDRB     r0,[r4,#0]
000494  7030              STRB     r0,[r6,#0]
;;;434            if (pUsage) {
000496  b12d              CBZ      r5,|L1.1188|
;;;435              GUI_USAGE_AddPixel(pUsage, x, y);
000498  68a8              LDR      r0,[r5,#8]
00049a  464a              MOV      r2,r9
00049c  4639              MOV      r1,r7
00049e  6803              LDR      r3,[r0,#0]
0004a0  4628              MOV      r0,r5
0004a2  4798              BLX      r3
                  |L1.1188|
;;;436            }
;;;437          }
;;;438          x++;
0004a4  1c7f              ADDS     r7,r7,#1
;;;439          pDest++;
0004a6  1c76              ADDS     r6,r6,#1
;;;440          pSrc++;
0004a8  1c64              ADDS     r4,r4,#1
;;;441        } while (--xsize);
0004aa  f1a80001          SUB      r0,r8,#1
0004ae  ea5f0800          MOVS     r8,r0
0004b2  d1ec              BNE      |L1.1166|
;;;442        break;
0004b4  bf00              NOP      
                  |L1.1206|
0004b6  bf00              NOP                            ;429
;;;443      }
;;;444    }
0004b8  e8bd87f0          POP      {r4-r10,pc}
;;;445    
                          ENDP

                  _DrawBitmap PROC
;;;449    */
;;;450    static void _DrawBitmap(int x0, int y0, int xsize, int ysize,
0004bc  e92d4fff          PUSH     {r0-r11,lr}
;;;451                            int BitsPerPixel, int BytesPerLine,
;;;452                            const U8 GUI_UNI_PTR * pData, int Diff, const LCD_PIXELINDEX* pTrans)
;;;453    {
0004c0  b087              SUB      sp,sp,#0x1c
0004c2  460e              MOV      r6,r1
0004c4  4617              MOV      r7,r2
0004c6  4699              MOV      r9,r3
0004c8  e9dda817          LDRD     r10,r8,[sp,#0x5c]
;;;454      int i;
;;;455      GUI_MEMDEV* pDev   = GUI_MEMDEV_H2P(GUI_Context.hDevData);
0004cc  49ca              LDR      r1,|L1.2040|
0004ce  f9b1004c          LDRSH    r0,[r1,#0x4c]  ; GUI_Context
0004d2  f7fffffe          BL       GUI_ALLOC_h2p
0004d6  4683              MOV      r11,r0
;;;456      GUI_USAGE*  pUsage = (pDev->hUsage) ? GUI_USAGE_H2P(pDev->hUsage) : 0;
0004d8  f8bb0018          LDRH     r0,[r11,#0x18]
0004dc  b120              CBZ      r0,|L1.1256|
0004de  f9bb0018          LDRSH    r0,[r11,#0x18]
0004e2  f7fffffe          BL       GUI_ALLOC_h2p
0004e6  e000              B        |L1.1258|
                  |L1.1256|
0004e8  2000              MOVS     r0,#0
                  |L1.1258|
0004ea  9006              STR      r0,[sp,#0x18]
;;;457      unsigned    BytesPerLineDest;
;;;458      PIXELINDEX* pDest;
;;;459      BytesPerLineDest = pDev->BytesPerLine;
0004ec  f8db000c          LDR      r0,[r11,#0xc]
0004f0  9005              STR      r0,[sp,#0x14]
;;;460      x0 += Diff;
0004f2  9807              LDR      r0,[sp,#0x1c]
0004f4  4450              ADD      r0,r0,r10
0004f6  9007              STR      r0,[sp,#0x1c]
;;;461      /* Mark all affected pixels dirty unless transparency is set */
;;;462      if (pUsage) {
0004f8  9806              LDR      r0,[sp,#0x18]
0004fa  b160              CBZ      r0,|L1.1302|
;;;463        if ((GUI_Context.DrawMode & LCD_DRAWMODE_TRANS) == 0) {
0004fc  48be              LDR      r0,|L1.2040|
0004fe  7c00              LDRB     r0,[r0,#0x10]  ; GUI_Context
000500  f0000002          AND      r0,r0,#2
000504  b938              CBNZ     r0,|L1.1302|
;;;464          GUI_USAGE_AddRect(pUsage, x0, y0 , xsize, ysize);
000506  463b              MOV      r3,r7
000508  4632              MOV      r2,r6
00050a  f8cd9000          STR      r9,[sp,#0]
00050e  e9dd0106          LDRD     r0,r1,[sp,#0x18]
000512  f7fffffe          BL       GUI_USAGE_AddRect
                  |L1.1302|
;;;465        }
;;;466      }
;;;467      pDest = _XY2PTR(x0, y0);
000516  4631              MOV      r1,r6
000518  9807              LDR      r0,[sp,#0x1c]
00051a  f7fffffe          BL       _XY2PTR
00051e  4605              MOV      r5,r0
;;;468    #if BITSPERPIXEL == 16
;;;469      /* handle 16 bpp bitmaps in high color modes, but only without palette */
;;;470      if (BitsPerPixel == 16) {
;;;471        for (i = 0; i < ysize; i++) {
;;;472          _DrawBitLine16BPP_DDB(pUsage, x0, i + y0, (const U16*)pData, xsize, pDest);
;;;473          pData += BytesPerLine;
;;;474          pDest = (PIXELINDEX*)((U8*)pDest + BytesPerLineDest); 
;;;475        }
;;;476        return;
;;;477      }
;;;478    #endif
;;;479      /* Handle 8 bpp bitmaps seperately as we have different routine bitmaps with or without palette */
;;;480      if (BitsPerPixel == 8) {
000520  9814              LDR      r0,[sp,#0x50]
000522  2808              CMP      r0,#8
000524  d122              BNE      |L1.1388|
;;;481        for (i = 0; i < ysize; i++) {
000526  2400              MOVS     r4,#0
000528  e01b              B        |L1.1378|
                  |L1.1322|
;;;482          if (pTrans) {
00052a  f1b80f00          CMP      r8,#0
00052e  d009              BEQ      |L1.1348|
;;;483            _DrawBitLine8BPP(pUsage, x0, i + y0, pData, xsize, pTrans, pDest);
000530  19a2              ADDS     r2,r4,r6
000532  e9cd7800          STRD     r7,r8,[sp,#0]
000536  9502              STR      r5,[sp,#8]
000538  9b16              LDR      r3,[sp,#0x58]
00053a  e9dd0106          LDRD     r0,r1,[sp,#0x18]
00053e  f7fffffe          BL       _DrawBitLine8BPP
000542  e007              B        |L1.1364|
                  |L1.1348|
;;;484          } else {
;;;485            _DrawBitLine8BPP_DDB(pUsage, x0, i + y0, pData, xsize, pDest);
000544  19a2              ADDS     r2,r4,r6
000546  e9cd7500          STRD     r7,r5,[sp,#0]
00054a  9b16              LDR      r3,[sp,#0x58]
00054c  e9dd0106          LDRD     r0,r1,[sp,#0x18]
000550  f7fffffe          BL       _DrawBitLine8BPP_DDB
                  |L1.1364|
;;;486          }
;;;487          pData += BytesPerLine;
000554  e9dd1015          LDRD     r1,r0,[sp,#0x54]
000558  4408              ADD      r0,r0,r1
00055a  9016              STR      r0,[sp,#0x58]
;;;488          pDest = (PIXELINDEX*)((U8*)pDest + BytesPerLineDest); 
00055c  9805              LDR      r0,[sp,#0x14]
00055e  4405              ADD      r5,r5,r0
000560  1c64              ADDS     r4,r4,#1              ;481
                  |L1.1378|
000562  454c              CMP      r4,r9                 ;481
000564  dbe1              BLT      |L1.1322|
                  |L1.1382|
;;;489        }
;;;490        return;
;;;491      }
;;;492      /* Use aID for bitmaps without palette */
;;;493      if (!pTrans) {
;;;494        pTrans = aID;
;;;495      }
;;;496      for (i = 0; i < ysize; i++) {
;;;497        switch (BitsPerPixel) {
;;;498        case 1:
;;;499          _DrawBitLine1BPP(pUsage, x0, i + y0, pData, Diff, xsize, pTrans, pDev, pDest);
;;;500          break;
;;;501        case 2:
;;;502          _DrawBitLine2BPP(pUsage, x0, i + y0, pData, Diff, xsize, pTrans, pDest);
;;;503          break;
;;;504        case 4:
;;;505          _DrawBitLine4BPP(pUsage, x0, i + y0, pData, Diff, xsize, pTrans, pDest);
;;;506          break;
;;;507        }
;;;508        pData += BytesPerLine;
;;;509        pDest = (PIXELINDEX*)((U8*)pDest + BytesPerLineDest); 
;;;510      }
;;;511    }
000566  b00b              ADD      sp,sp,#0x2c
000568  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.1388|
00056c  f1b80f00          CMP      r8,#0                 ;493
000570  d101              BNE      |L1.1398|
000572  f8df8288          LDR      r8,|L1.2044|
                  |L1.1398|
000576  2400              MOVS     r4,#0                 ;496
000578  e031              B        |L1.1502|
                  |L1.1402|
00057a  9814              LDR      r0,[sp,#0x50]         ;497
00057c  2801              CMP      r0,#1                 ;497
00057e  d004              BEQ      |L1.1418|
000580  2802              CMP      r0,#2                 ;497
000582  d00e              BEQ      |L1.1442|
000584  2804              CMP      r0,#4                 ;497
000586  d122              BNE      |L1.1486|
000588  e016              B        |L1.1464|
                  |L1.1418|
00058a  19a2              ADDS     r2,r4,r6              ;499
00058c  e9cd8b02          STRD     r8,r11,[sp,#8]        ;499
000590  e9cda700          STRD     r10,r7,[sp,#0]        ;499
000594  9504              STR      r5,[sp,#0x10]         ;499
000596  9b16              LDR      r3,[sp,#0x58]         ;499
000598  e9dd0106          LDRD     r0,r1,[sp,#0x18]      ;499
00059c  f7fffffe          BL       _DrawBitLine1BPP
0005a0  e015              B        |L1.1486|
                  |L1.1442|
0005a2  19a2              ADDS     r2,r4,r6              ;502
0005a4  e9cda700          STRD     r10,r7,[sp,#0]        ;502
0005a8  e9cd8502          STRD     r8,r5,[sp,#8]         ;502
0005ac  9b16              LDR      r3,[sp,#0x58]         ;502
0005ae  e9dd0106          LDRD     r0,r1,[sp,#0x18]      ;502
0005b2  f7fffffe          BL       _DrawBitLine2BPP
0005b6  e00a              B        |L1.1486|
                  |L1.1464|
0005b8  19a2              ADDS     r2,r4,r6              ;505
0005ba  e9cda700          STRD     r10,r7,[sp,#0]        ;505
0005be  e9cd8502          STRD     r8,r5,[sp,#8]         ;505
0005c2  9b16              LDR      r3,[sp,#0x58]         ;505
0005c4  e9dd0106          LDRD     r0,r1,[sp,#0x18]      ;505
0005c8  f7fffffe          BL       _DrawBitLine4BPP
0005cc  bf00              NOP                            ;506
                  |L1.1486|
0005ce  bf00              NOP                            ;500
0005d0  e9dd1015          LDRD     r1,r0,[sp,#0x54]      ;508
0005d4  4408              ADD      r0,r0,r1              ;508
0005d6  9016              STR      r0,[sp,#0x58]         ;508
0005d8  9805              LDR      r0,[sp,#0x14]         ;509
0005da  4405              ADD      r5,r5,r0              ;509
0005dc  1c64              ADDS     r4,r4,#1              ;496
                  |L1.1502|
0005de  454c              CMP      r4,r9                 ;496
0005e0  dbcb              BLT      |L1.1402|
0005e2  bf00              NOP      
0005e4  e7bf              B        |L1.1382|
;;;512    
                          ENDP

                  _FillRect PROC
;;;516    */
;;;517    static void _FillRect(int x0, int y0, int x1, int y1) {
0005e6  e92d4ffe          PUSH     {r1-r11,lr}
0005ea  4606              MOV      r6,r0
0005ec  460c              MOV      r4,r1
0005ee  4693              MOV      r11,r2
0005f0  461f              MOV      r7,r3
;;;518      unsigned BytesPerLine;
;;;519      int Len;
;;;520      GUI_MEMDEV* pDev   = GUI_MEMDEV_H2P(GUI_Context.hDevData);
0005f2  4981              LDR      r1,|L1.2040|
0005f4  f9b1004c          LDRSH    r0,[r1,#0x4c]  ; GUI_Context
0005f8  f7fffffe          BL       GUI_ALLOC_h2p
0005fc  4605              MOV      r5,r0
;;;521      PIXELINDEX* pData  = _XY2PTR(x0, y0);
0005fe  4621              MOV      r1,r4
000600  4630              MOV      r0,r6
000602  f7fffffe          BL       _XY2PTR
000606  4681              MOV      r9,r0
;;;522      BytesPerLine = pDev->BytesPerLine;
000608  68e8              LDR      r0,[r5,#0xc]
00060a  9002              STR      r0,[sp,#8]
;;;523      Len = x1 - x0 + 1;
00060c  ebab0006          SUB      r0,r11,r6
000610  f1000801          ADD      r8,r0,#1
;;;524      /* Mark rectangle as modified */
;;;525      if (pDev->hUsage) {
000614  8b28              LDRH     r0,[r5,#0x18]
000616  b168              CBZ      r0,|L1.1588|
;;;526        GUI_USAGE_AddRect(GUI_USAGE_H2P(pDev->hUsage), x0, y0, Len, y1 - y0 + 1);
000618  f9b50018          LDRSH    r0,[r5,#0x18]
00061c  f7fffffe          BL       GUI_ALLOC_h2p
000620  4682              MOV      r10,r0
000622  1b38              SUBS     r0,r7,r4
000624  1c40              ADDS     r0,r0,#1
000626  4643              MOV      r3,r8
000628  4622              MOV      r2,r4
00062a  4631              MOV      r1,r6
00062c  9000              STR      r0,[sp,#0]
00062e  4650              MOV      r0,r10
000630  f7fffffe          BL       GUI_USAGE_AddRect
                  |L1.1588|
;;;527      }
;;;528      /* Do the drawing */
;;;529      for (; y0 <= y1; y0++) {
000634  e023              B        |L1.1662|
                  |L1.1590|
;;;530        if (GUI_Context.DrawMode & LCD_DRAWMODE_XOR) {
000636  4870              LDR      r0,|L1.2040|
000638  7c00              LDRB     r0,[r0,#0x10]  ; GUI_Context
00063a  f0000001          AND      r0,r0,#1
00063e  b1a8              CBZ      r0,|L1.1644|
;;;531          int RemPixels;
;;;532          PIXELINDEX* pDest;
;;;533          PIXELINDEX IndexMask;
;;;534          RemPixels = Len;
000640  f8cd8004          STR      r8,[sp,#4]
;;;535          pDest  = pData;
000644  46ca              MOV      r10,r9
;;;536          IndexMask = pDev->pfGetIndexMask();
000646  6a68              LDR      r0,[r5,#0x24]
000648  4780              BLX      r0
00064a  b2c0              UXTB     r0,r0
00064c  9000              STR      r0,[sp,#0]
;;;537          do {
00064e  bf00              NOP      
                  |L1.1616|
;;;538            *pDest = *pDest ^ IndexMask;
000650  f89a0000          LDRB     r0,[r10,#0]
000654  9900              LDR      r1,[sp,#0]
000656  4048              EORS     r0,r0,r1
000658  f88a0000          STRB     r0,[r10,#0]
;;;539            pDest++;
00065c  f10a0a01          ADD      r10,r10,#1
;;;540          } while (--RemPixels);
000660  9801              LDR      r0,[sp,#4]
000662  1e40              SUBS     r0,r0,#1
000664  9001              STR      r0,[sp,#4]
000666  2800              CMP      r0,#0
000668  d1f2              BNE      |L1.1616|
;;;541        } else {  /* Fill */
00066a  e005              B        |L1.1656|
                  |L1.1644|
;;;542          #if BITSPERPIXEL == 8
;;;543            GUI_MEMSET(pData, LCD_COLORINDEX, Len);
00066c  4862              LDR      r0,|L1.2040|
00066e  7881              LDRB     r1,[r0,#2]  ; GUI_Context
000670  4642              MOV      r2,r8
000672  4648              MOV      r0,r9
000674  f7fffffe          BL       GUI__memset
                  |L1.1656|
;;;544          #elif BITSPERPIXEL == 16
;;;545            GUI__memset16(pData, LCD_COLORINDEX, Len);
;;;546          #else
;;;547            #error Unsupported
;;;548          #endif
;;;549        }
;;;550        pData = (PIXELINDEX*)((U8*)pData + BytesPerLine); 
000678  9802              LDR      r0,[sp,#8]
00067a  4481              ADD      r9,r9,r0
00067c  1c64              ADDS     r4,r4,#1              ;529
                  |L1.1662|
00067e  42bc              CMP      r4,r7                 ;529
000680  ddd9              BLE      |L1.1590|
;;;551      }
;;;552    }
000682  e8bd8ffe          POP      {r1-r11,pc}
;;;553    
                          ENDP

                  _DrawHLine PROC
;;;557    */
;;;558    static void _DrawHLine(int x0, int y, int x1) {
000686  b570              PUSH     {r4-r6,lr}
000688  4605              MOV      r5,r0
00068a  460c              MOV      r4,r1
00068c  4616              MOV      r6,r2
;;;559      _FillRect(x0, y, x1, y);
00068e  4623              MOV      r3,r4
000690  4632              MOV      r2,r6
000692  4621              MOV      r1,r4
000694  4628              MOV      r0,r5
000696  f7fffffe          BL       _FillRect
;;;560    }
00069a  bd70              POP      {r4-r6,pc}
;;;561    
                          ENDP

                  _DrawVLine PROC
;;;565    */
;;;566    static void _DrawVLine(int x , int y0, int y1) {
00069c  e92d4ff8          PUSH     {r3-r11,lr}
0006a0  4683              MOV      r11,r0
0006a2  460d              MOV      r5,r1
0006a4  4616              MOV      r6,r2
;;;567      GUI_MEMDEV* pDev   = GUI_MEMDEV_H2P(GUI_Context.hDevData);
0006a6  4954              LDR      r1,|L1.2040|
0006a8  f9b1004c          LDRSH    r0,[r1,#0x4c]  ; GUI_Context
0006ac  f7fffffe          BL       GUI_ALLOC_h2p
0006b0  4607              MOV      r7,r0
;;;568      GUI_USAGE_h hUsage = pDev->hUsage; 
0006b2  f9b78018          LDRSH    r8,[r7,#0x18]
;;;569      GUI_USAGE*  pUsage = hUsage ? GUI_USAGE_H2P(hUsage) : NULL;
0006b6  f1b80f00          CMP      r8,#0
0006ba  d003              BEQ      |L1.1732|
0006bc  4640              MOV      r0,r8
0006be  f7fffffe          BL       GUI_ALLOC_h2p
0006c2  e000              B        |L1.1734|
                  |L1.1732|
0006c4  2000              MOVS     r0,#0
                  |L1.1734|
0006c6  4681              MOV      r9,r0
;;;570      PIXELINDEX* pData  = _XY2PTR(x, y0);
0006c8  4629              MOV      r1,r5
0006ca  4658              MOV      r0,r11
0006cc  f7fffffe          BL       _XY2PTR
0006d0  4604              MOV      r4,r0
;;;571      unsigned BytesPerLine = pDev->BytesPerLine;
0006d2  f8d7a00c          LDR      r10,[r7,#0xc]
;;;572    
;;;573      if (GUI_Context.DrawMode & LCD_DRAWMODE_XOR) {
0006d6  4848              LDR      r0,|L1.2040|
0006d8  7c00              LDRB     r0,[r0,#0x10]  ; GUI_Context
0006da  f0000001          AND      r0,r0,#1
0006de  b1c8              CBZ      r0,|L1.1812|
;;;574        PIXELINDEX IndexMask;
;;;575        IndexMask = pDev->pfGetIndexMask();
0006e0  6a78              LDR      r0,[r7,#0x24]
0006e2  4780              BLX      r0
0006e4  b2c0              UXTB     r0,r0
0006e6  9000              STR      r0,[sp,#0]
;;;576        do {
0006e8  bf00              NOP      
                  |L1.1770|
;;;577          if (hUsage) {
0006ea  f1b80f00          CMP      r8,#0
0006ee  d006              BEQ      |L1.1790|
;;;578            GUI_USAGE_AddPixel(pUsage, x, y0);
0006f0  f8d90008          LDR      r0,[r9,#8]
0006f4  462a              MOV      r2,r5
0006f6  4659              MOV      r1,r11
0006f8  6803              LDR      r3,[r0,#0]
0006fa  4648              MOV      r0,r9
0006fc  4798              BLX      r3
                  |L1.1790|
;;;579          }
;;;580          *pData = *pData ^ IndexMask;
0006fe  7820              LDRB     r0,[r4,#0]
000700  9900              LDR      r1,[sp,#0]
000702  4048              EORS     r0,r0,r1
000704  7020              STRB     r0,[r4,#0]
;;;581          pData = (PIXELINDEX*)((U8*)pData + pDev->BytesPerLine); /* Same as "pData += pDev->BytesPerLine >> 1;", Just more efficient */
000706  68f8              LDR      r0,[r7,#0xc]
000708  4404              ADD      r4,r4,r0
;;;582        } while (++y0 <= y1);
00070a  1c68              ADDS     r0,r5,#1
00070c  4605              MOV      r5,r0
00070e  42b0              CMP      r0,r6
000710  ddeb              BLE      |L1.1770|
;;;583      } else {
000712  e01e              B        |L1.1874|
                  |L1.1812|
;;;584        if (hUsage) {
000714  f1b80f00          CMP      r8,#0
000718  d010              BEQ      |L1.1852|
;;;585          do {
00071a  bf00              NOP      
                  |L1.1820|
;;;586            GUI_USAGE_AddPixel(pUsage, x, y0);
00071c  f8d90008          LDR      r0,[r9,#8]
000720  462a              MOV      r2,r5
000722  4659              MOV      r1,r11
000724  6803              LDR      r3,[r0,#0]
000726  4648              MOV      r0,r9
000728  4798              BLX      r3
;;;587            *pData = LCD_COLORINDEX;
00072a  4833              LDR      r0,|L1.2040|
00072c  7880              LDRB     r0,[r0,#2]  ; GUI_Context
00072e  7020              STRB     r0,[r4,#0]
;;;588            pData = (PIXELINDEX*)((U8*)pData + BytesPerLine); /* Same as "pData += pDev->BytesPerLine >> 1;", Just more efficient */
000730  4454              ADD      r4,r4,r10
;;;589          } while (++y0 <= y1);
000732  1c68              ADDS     r0,r5,#1
000734  4605              MOV      r5,r0
000736  42b0              CMP      r0,r6
000738  ddf0              BLE      |L1.1820|
00073a  e00a              B        |L1.1874|
                  |L1.1852|
;;;590        } else {
;;;591          unsigned NumPixels;
;;;592          NumPixels = y1 - y0 + 1;
00073c  1b71              SUBS     r1,r6,r5
00073e  1c48              ADDS     r0,r1,#1
;;;593          do {
000740  bf00              NOP      
                  |L1.1858|
;;;594            *pData = LCD_COLORINDEX;
000742  492d              LDR      r1,|L1.2040|
000744  7889              LDRB     r1,[r1,#2]  ; GUI_Context
000746  7021              STRB     r1,[r4,#0]
;;;595            pData = (PIXELINDEX*)((U8*)pData + BytesPerLine); /* Same as "pData += pDev->BytesPerLine >> 1;", Just more efficient */
000748  4454              ADD      r4,r4,r10
;;;596          } while (--NumPixels);
00074a  1e41              SUBS     r1,r0,#1
00074c  0008              MOVS     r0,r1
00074e  d1f8              BNE      |L1.1858|
;;;597        }
000750  bf00              NOP      
                  |L1.1874|
;;;598      }
;;;599    }
000752  e8bd8ff8          POP      {r3-r11,pc}
;;;600    
                          ENDP

                  _SetPixelIndex PROC
;;;604    */
;;;605    static void _SetPixelIndex(int x, int y, int Index) {
000756  e92d5ff0          PUSH     {r4-r12,lr}
00075a  4604              MOV      r4,r0
00075c  460d              MOV      r5,r1
00075e  4616              MOV      r6,r2
;;;606      GUI_MEMDEV* pDev = GUI_MEMDEV_H2P(GUI_Context.hDevData);
000760  4925              LDR      r1,|L1.2040|
000762  f9b1004c          LDRSH    r0,[r1,#0x4c]  ; GUI_Context
000766  f7fffffe          BL       GUI_ALLOC_h2p
00076a  4680              MOV      r8,r0
;;;607      GUI_USAGE_h hUsage = pDev->hUsage; 
00076c  f9b87018          LDRSH    r7,[r8,#0x18]
;;;608      PIXELINDEX* pData = _XY2PTR(x, y);
000770  4629              MOV      r1,r5
000772  4620              MOV      r0,r4
000774  f7fffffe          BL       _XY2PTR
000778  4681              MOV      r9,r0
;;;609      *pData = Index;
00077a  f8896000          STRB     r6,[r9,#0]
;;;610      if (hUsage) {
00077e  b16f              CBZ      r7,|L1.1948|
;;;611        GUI_USAGE_AddPixel(GUI_USAGE_H2P(hUsage), x, y);
000780  4638              MOV      r0,r7
000782  f7fffffe          BL       GUI_ALLOC_h2p
000786  4683              MOV      r11,r0
000788  4638              MOV      r0,r7
00078a  f7fffffe          BL       GUI_ALLOC_h2p
00078e  6880              LDR      r0,[r0,#8]
000790  462a              MOV      r2,r5
000792  4621              MOV      r1,r4
000794  f8d0a000          LDR      r10,[r0,#0]
000798  4658              MOV      r0,r11
00079a  47d0              BLX      r10
                  |L1.1948|
;;;612      }
;;;613    }
00079c  e8bd9ff0          POP      {r4-r12,pc}
;;;614    
                          ENDP

                  _XorPixel PROC
;;;618    */
;;;619    static void _XorPixel(int x, int y) {
0007a0  e92d5ff0          PUSH     {r4-r12,lr}
0007a4  4604              MOV      r4,r0
0007a6  460d              MOV      r5,r1
;;;620      PIXELINDEX IndexMask;
;;;621      GUI_MEMDEV* pDev = GUI_MEMDEV_H2P(GUI_Context.hDevData);
0007a8  4913              LDR      r1,|L1.2040|
0007aa  f9b1004c          LDRSH    r0,[r1,#0x4c]  ; GUI_Context
0007ae  f7fffffe          BL       GUI_ALLOC_h2p
0007b2  4606              MOV      r6,r0
;;;622      GUI_USAGE_h hUsage = pDev->hUsage; 
0007b4  f9b67018          LDRSH    r7,[r6,#0x18]
;;;623      PIXELINDEX* pData = _XY2PTR(x, y);
0007b8  4629              MOV      r1,r5
0007ba  4620              MOV      r0,r4
0007bc  f7fffffe          BL       _XY2PTR
0007c0  4680              MOV      r8,r0
;;;624      IndexMask = pDev->pfGetIndexMask();
0007c2  6a70              LDR      r0,[r6,#0x24]
0007c4  4780              BLX      r0
0007c6  f00009ff          AND      r9,r0,#0xff
;;;625      *pData = *pData ^ IndexMask;
0007ca  f8980000          LDRB     r0,[r8,#0]
0007ce  ea800009          EOR      r0,r0,r9
0007d2  f8880000          STRB     r0,[r8,#0]
;;;626      if (hUsage) {
0007d6  b16f              CBZ      r7,|L1.2036|
;;;627        GUI_USAGE_AddPixel(GUI_USAGE_H2P(hUsage), x, y);
0007d8  4638              MOV      r0,r7
0007da  f7fffffe          BL       GUI_ALLOC_h2p
0007de  4683              MOV      r11,r0
0007e0  4638              MOV      r0,r7
0007e2  f7fffffe          BL       GUI_ALLOC_h2p
0007e6  6880              LDR      r0,[r0,#8]
0007e8  462a              MOV      r2,r5
0007ea  4621              MOV      r1,r4
0007ec  f8d0a000          LDR      r10,[r0,#0]
0007f0  4658              MOV      r0,r11
0007f2  47d0              BLX      r10
                  |L1.2036|
;;;628      }
;;;629    }
0007f4  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.2040|
                          DCD      GUI_Context
                  |L1.2044|
                          DCD      aID
                          ENDP

                  _GetPixelIndex PROC
;;;634    */
;;;635    static unsigned int _GetPixelIndex(int x, int y) {
000800  b570              PUSH     {r4-r6,lr}
000802  4604              MOV      r4,r0
000804  460d              MOV      r5,r1
;;;636      PIXELINDEX* pData = _XY2PTR(x, y);
000806  4629              MOV      r1,r5
000808  4620              MOV      r0,r4
00080a  f7fffffe          BL       _XY2PTR
00080e  4606              MOV      r6,r0
;;;637      return *pData;
000810  7830              LDRB     r0,[r6,#0]
;;;638    }
000812  bd70              POP      {r4-r6,pc}
;;;639    
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  aID
000000  00000001          DCW      0x0000,0x0001
000004  00020003          DCW      0x0002,0x0003
000008  00040005          DCW      0x0004,0x0005
00000c  00060007          DCW      0x0006,0x0007
000010  00080009          DCW      0x0008,0x0009
000014  000a000b          DCW      0x000a,0x000b
000018  000c000d          DCW      0x000c,0x000d
00001c  000e000f          DCW      0x000e,0x000f
                  GUI_MEMDEV__APIList8
                          DCD      GUI_MEMDEV__Color2Index
                          DCD      GUI_MEMDEV__Index2Color
                          DCD      GUI_MEMDEV__GetIndexMask
                          DCD      _DrawBitmap
                          DCD      _DrawHLine
                          DCD      _DrawVLine
                          DCD      _FillRect
                          DCD      _GetPixelIndex
                          DCD      GUI_MEMDEV__GetRect
                          DCD      _SetPixelIndex
                          DCD      _XorPixel
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000008
