; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\gui__drawbitmap16bpp.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\gui__drawbitmap16bpp.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -I.\GUI\AntiAlias -I.\GUI\Config -I.\GUI\ConvertColor -I.\GUI\ConvertMono -I.\GUI\Core -I.\GUI\Font -I.\GUI\GUI_X -I.\GUI\JPEG -I.\GUI\LCDDriver -I.\GUI\MemDev -I.\GUI\MultiLayer -I.\GUI\Widget -I.\GUI\WM -IC:\Users\Administrator\Desktop\gui\STM32·Ü¶·°å-3.98\RTE -Id:\Keil_v5\ARM\PACK\ARM\CMSIS\4.3.0\CMSIS\Include -Id:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.1.0\Device\Include -D__UVISION_VERSION=515 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\gui__drawbitmap16bpp.crf GUI\Core\GUI__DrawBitmap16bpp.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  GUI__DrawBitmap16bpp PROC
;;;32     */
;;;33     void GUI__DrawBitmap16bpp(int x0, int y0, int xsize, int ysize, const U8 GUI_UNI_PTR * pPixel, const LCD_LOGPALETTE GUI_UNI_PTR * pLogPal, int xMag, int yMag, tLCDDEV_Index2Color * pfIndex2Color) {
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  b08b              SUB      sp,sp,#0x2c
000006  4606              MOV      r6,r0
000008  4689              MOV      r9,r1
00000a  4615              MOV      r5,r2
00000c  461f              MOV      r7,r3
;;;34       const U16 * pData;
;;;35       int y, OldIndex, PrevIndex, Mag, BytesPerLine, UseDrawBitmap = 0;
00000e  2000              MOVS     r0,#0
000010  9007              STR      r0,[sp,#0x1c]
;;;36       GUI_USE_PARA(pLogPal);
000012  9815              LDR      r0,[sp,#0x54]
000014  9015              STR      r0,[sp,#0x54]
;;;37       OldIndex = LCD_GetColorIndex();
000016  f7fffffe          BL       LCD_GetColorIndex
00001a  900a              STR      r0,[sp,#0x28]
;;;38       PrevIndex = OldIndex;
00001c  980a              LDR      r0,[sp,#0x28]
00001e  9009              STR      r0,[sp,#0x24]
;;;39       pData = (const U16 *)pPixel;
000020  f8dda050          LDR      r10,[sp,#0x50]
;;;40       Mag = (xMag | yMag);
000024  e9dd0116          LDRD     r0,r1,[sp,#0x58]
000028  4308              ORRS     r0,r0,r1
00002a  9008              STR      r0,[sp,#0x20]
;;;41       BytesPerLine = xsize * 2;
00002c  ea4f0845          LSL      r8,r5,#1
;;;42       /* Check if bitmaps color format fits to the current color conversion */
;;;43       if (Mag == 1) {
000030  9808              LDR      r0,[sp,#0x20]
000032  2801              CMP      r0,#1
000034  d11a              BNE      |L1.108|
;;;44         tLCDDEV_Index2Color * pfIndex2ColorCompare = NULL;
000036  2000              MOVS     r0,#0
000038  9006              STR      r0,[sp,#0x18]
;;;45         #if GUI_SUPPORT_MEMDEV
;;;46         if (GUI_Context.hDevData) {
00003a  4880              LDR      r0,|L1.572|
00003c  f8b0004c          LDRH     r0,[r0,#0x4c]  ; GUI_Context
000040  b140              CBZ      r0,|L1.84|
;;;47           /* If a memory device is selected, use the color conversion routine of the memory device */
;;;48           GUI_MEMDEV * pDevData;
;;;49           pDevData = GUI_MEMDEV_H2P(GUI_Context.hDevData);
000042  497e              LDR      r1,|L1.572|
000044  f9b1004c          LDRSH    r0,[r1,#0x4c]  ; GUI_Context
000048  f7fffffe          BL       GUI_ALLOC_h2p
00004c  4604              MOV      r4,r0
;;;50           pfIndex2ColorCompare = pDevData->pfIndex2Color;
00004e  6a20              LDR      r0,[r4,#0x20]
000050  9006              STR      r0,[sp,#0x18]
;;;51         } else {
000052  e004              B        |L1.94|
                  |L1.84|
;;;52         #else
;;;53         {
;;;54         #endif
;;;55           /* If no memory device is selected, use the color conversion routine of the current layer */
;;;56           pfIndex2ColorCompare = LCD_GetpfIndex2ColorEx(GUI_Context.SelLayer);
000054  4979              LDR      r1,|L1.572|
000056  7c48              LDRB     r0,[r1,#0x11]  ; GUI_Context
000058  f7fffffe          BL       LCD_GetpfIndex2ColorEx
00005c  9006              STR      r0,[sp,#0x18]
                  |L1.94|
;;;57         }
;;;58         /* Check if color conversion routine fits  */
;;;59         if (pfIndex2ColorCompare == pfIndex2Color) {
00005e  9918              LDR      r1,[sp,#0x60]
000060  9806              LDR      r0,[sp,#0x18]
000062  4288              CMP      r0,r1
000064  d101              BNE      |L1.106|
;;;60           UseDrawBitmap = 1;
000066  2001              MOVS     r0,#1
000068  9007              STR      r0,[sp,#0x1c]
                  |L1.106|
;;;61         }
;;;62       }
00006a  bf00              NOP      
                  |L1.108|
;;;63       if (UseDrawBitmap) {
00006c  9807              LDR      r0,[sp,#0x1c]
00006e  b180              CBZ      r0,|L1.146|
;;;64         LCD_DrawBitmap(x0, y0, xsize, ysize, 1, 1, 16, BytesPerLine, pPixel, 0);
000070  2100              MOVS     r1,#0
000072  2210              MOVS     r2,#0x10
000074  9814              LDR      r0,[sp,#0x50]
000076  e9cd2802          STRD     r2,r8,[sp,#8]
00007a  e9cd0104          STRD     r0,r1,[sp,#0x10]
00007e  2001              MOVS     r0,#1
000080  9000              STR      r0,[sp,#0]
000082  463b              MOV      r3,r7
000084  462a              MOV      r2,r5
000086  4649              MOV      r1,r9
000088  9001              STR      r0,[sp,#4]
00008a  4630              MOV      r0,r6
00008c  f7fffffe          BL       LCD_DrawBitmap
000090  e0d2              B        |L1.568|
                  |L1.146|
;;;65       } else {
;;;66         if (Mag == 1) {
000092  9808              LDR      r0,[sp,#0x20]
000094  2801              CMP      r0,#1
000096  d17b              BNE      |L1.400|
;;;67           /* Perform clipping */
;;;68           int x1, y1, Diff;
;;;69           y1 = y0 + ysize - 1;
000098  eb090007          ADD      r0,r9,r7
00009c  1e40              SUBS     r0,r0,#1
00009e  9005              STR      r0,[sp,#0x14]
;;;70           x1 = x0 + xsize - 1;
0000a0  1970              ADDS     r0,r6,r5
0000a2  1e40              SUBS     r0,r0,#1
0000a4  9006              STR      r0,[sp,#0x18]
;;;71           /* Clip Y */
;;;72           if (y0 < GUI_Context.ClipRect.y0) {
0000a6  4865              LDR      r0,|L1.572|
0000a8  f9b0000a          LDRSH    r0,[r0,#0xa]
0000ac  4548              CMP      r0,r9
0000ae  dd0d              BLE      |L1.204|
;;;73             Diff = GUI_Context.ClipRect.y0 -y0;
0000b0  4862              LDR      r0,|L1.572|
0000b2  f9b0000a          LDRSH    r0,[r0,#0xa]
0000b6  eba00409          SUB      r4,r0,r9
;;;74             y0   = GUI_Context.ClipRect.y0;
0000ba  4860              LDR      r0,|L1.572|
0000bc  f9b0900a          LDRSH    r9,[r0,#0xa]
;;;75             #if GUI_SUPPORT_LARGE_BITMAPS                       /* Required only for 16 bit CPUs if some bitmaps are >64kByte */
;;;76               pData += (U32)Diff * (U32)BytesPerLine / 2;
;;;77             #else
;;;78               pData += (unsigned)Diff * (unsigned)BytesPerLine / 2;
0000c0  fb04f008          MUL      r0,r4,r8
0000c4  0840              LSRS     r0,r0,#1
0000c6  eb0a0a40          ADD      r10,r10,r0,LSL #1
;;;79             #endif
;;;80             ysize -= Diff;
0000ca  1b3f              SUBS     r7,r7,r4
                  |L1.204|
;;;81           }
;;;82           Diff = y1 - GUI_Context.ClipRect.y1;
0000cc  485b              LDR      r0,|L1.572|
0000ce  f9b0100e          LDRSH    r1,[r0,#0xe]
0000d2  9805              LDR      r0,[sp,#0x14]
0000d4  1a44              SUBS     r4,r0,r1
;;;83           if (Diff > 0) {
0000d6  2c00              CMP      r4,#0
0000d8  dd00              BLE      |L1.220|
;;;84             ysize -= Diff;
0000da  1b3f              SUBS     r7,r7,r4
                  |L1.220|
;;;85           }
;;;86           if (ysize <=0) {
0000dc  2f00              CMP      r7,#0
0000de  dc02              BGT      |L1.230|
                  |L1.224|
;;;87     		    return;
;;;88           }
;;;89           /* Clip right side */
;;;90           Diff = x1 - GUI_Context.ClipRect.x1;
;;;91           if (Diff > 0) {
;;;92             xsize -= Diff;
;;;93           }
;;;94           /* Clip left side */
;;;95           if (x0 < GUI_Context.ClipRect.x0) {
;;;96             Diff = GUI_Context.ClipRect.x0-x0;
;;;97     			  xsize -= Diff;
;;;98             pData += Diff; 
;;;99             x0 += Diff; 
;;;100          }
;;;101          if (xsize <=0) {
;;;102    		    return;
;;;103          }
;;;104          /* Simple, unmagnified output using LCD_L0_SetPixel() */
;;;105          for (y = 0; y < ysize; y++) {
;;;106            int x;
;;;107            const U16 * p = pData;
;;;108            for (x = 0; x < xsize; x++) {
;;;109              U16 Index;
;;;110              Index = *p++;
;;;111              if (Index != PrevIndex) {
;;;112                LCD_SetColor(pfIndex2Color(Index));
;;;113                PrevIndex = Index;
;;;114              }
;;;115              LCDDEV_L0_SetPixelIndex(x + x0, y + y0, LCD_COLORINDEX);
;;;116            }
;;;117            pData += BytesPerLine / 2;
;;;118          }
;;;119        } else {
;;;120          /* Magnified output using LCD_FillRect() */
;;;121          int x,y;
;;;122          int yi;
;;;123          for (y = y0, yi = 0; yi < ysize; yi++, y += yMag, pPixel += BytesPerLine) {
;;;124            int yMax;
;;;125            yMax = y + yMag - 1;
;;;126            /* Draw if within clip area */
;;;127            if ((yMax >= GUI_Context.ClipRect.y0) && (y <= GUI_Context.ClipRect.y1)) {
;;;128              int xi;
;;;129              const U16 GUI_UNI_PTR * p = pData;
;;;130              for (x = x0, xi = 0; xi < xsize; xi++, x += xMag) {
;;;131                U16 Index;
;;;132                Index = *p++;
;;;133                if (Index != PrevIndex) {
;;;134                  LCD_SetColor(pfIndex2Color(Index));
;;;135                  PrevIndex = Index;
;;;136                }
;;;137                LCD_FillRect(x, y, x + xMag - 1, yMax);
;;;138              }
;;;139            }
;;;140            pData += BytesPerLine / 2;
;;;141          }
;;;142        }
;;;143        GUI_SetColorIndex(OldIndex);
;;;144      }
;;;145    }
0000e0  b00b              ADD      sp,sp,#0x2c
0000e2  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.230|
0000e6  4855              LDR      r0,|L1.572|
0000e8  f9b0100c          LDRSH    r1,[r0,#0xc]          ;90
0000ec  9806              LDR      r0,[sp,#0x18]         ;90
0000ee  1a44              SUBS     r4,r0,r1              ;90
0000f0  2c00              CMP      r4,#0                 ;91
0000f2  dd00              BLE      |L1.246|
0000f4  1b2d              SUBS     r5,r5,r4              ;92
                  |L1.246|
0000f6  4851              LDR      r0,|L1.572|
0000f8  f9b00008          LDRSH    r0,[r0,#8]            ;95  ; GUI_Context
0000fc  42b0              CMP      r0,r6                 ;95
0000fe  dd07              BLE      |L1.272|
000100  484e              LDR      r0,|L1.572|
000102  f9b00008          LDRSH    r0,[r0,#8]            ;96  ; GUI_Context
000106  1b84              SUBS     r4,r0,r6              ;96
000108  1b2d              SUBS     r5,r5,r4              ;97
00010a  eb0a0a44          ADD      r10,r10,r4,LSL #1     ;98
00010e  4426              ADD      r6,r6,r4              ;99
                  |L1.272|
000110  2d00              CMP      r5,#0                 ;101
000112  dc00              BGT      |L1.278|
000114  e7e4              B        |L1.224|
                  |L1.278|
000116  f04f0b00          MOV      r11,#0                ;105
00011a  e035              B        |L1.392|
                  |L1.284|
00011c  f8cda00c          STR      r10,[sp,#0xc]         ;107
000120  2000              MOVS     r0,#0                 ;108
000122  9004              STR      r0,[sp,#0x10]         ;108
000124  e025              B        |L1.370|
                  |L1.294|
000126  9803              LDR      r0,[sp,#0xc]          ;110
000128  8800              LDRH     r0,[r0,#0]            ;110
00012a  9002              STR      r0,[sp,#8]            ;110
00012c  9803              LDR      r0,[sp,#0xc]          ;110
00012e  1c80              ADDS     r0,r0,#2              ;110
000130  9003              STR      r0,[sp,#0xc]          ;110
000132  9909              LDR      r1,[sp,#0x24]         ;111
000134  9802              LDR      r0,[sp,#8]            ;111
000136  4288              CMP      r0,r1                 ;111
000138  d007              BEQ      |L1.330|
00013a  9918              LDR      r1,[sp,#0x60]         ;112
00013c  9802              LDR      r0,[sp,#8]            ;112
00013e  4788              BLX      r1                    ;112
000140  9001              STR      r0,[sp,#4]            ;112
000142  f7fffffe          BL       LCD_SetColor
000146  9802              LDR      r0,[sp,#8]            ;113
000148  9009              STR      r0,[sp,#0x24]         ;113
                  |L1.330|
00014a  f8dfc0f0          LDR      r12,|L1.572|
00014e  f8bc2002          LDRH     r2,[r12,#2]           ;115  ; GUI_Context
000152  eb0b0109          ADD      r1,r11,r9             ;115
000156  f8ddc010          LDR      r12,[sp,#0x10]        ;115
00015a  eb0c0006          ADD      r0,r12,r6             ;115
00015e  f8dfc0dc          LDR      r12,|L1.572|
000162  f8dcc048          LDR      r12,[r12,#0x48]       ;115  ; GUI_Context
000166  f8dc3024          LDR      r3,[r12,#0x24]        ;115
00016a  4798              BLX      r3                    ;115
00016c  9804              LDR      r0,[sp,#0x10]         ;108
00016e  1c40              ADDS     r0,r0,#1              ;108
000170  9004              STR      r0,[sp,#0x10]         ;108
                  |L1.370|
000172  9804              LDR      r0,[sp,#0x10]         ;108
000174  42a8              CMP      r0,r5                 ;108
000176  dbd6              BLT      |L1.294|
000178  4640              MOV      r0,r8                 ;117
00017a  eb0871d0          ADD      r1,r8,r0,LSR #31      ;117
00017e  1049              ASRS     r1,r1,#1              ;117
000180  eb0a0a41          ADD      r10,r10,r1,LSL #1     ;117
000184  f10b0b01          ADD      r11,r11,#1            ;105
                  |L1.392|
000188  45bb              CMP      r11,r7                ;105
00018a  dbc7              BLT      |L1.284|
00018c  e051              B        |L1.562|
00018e  e7ff              B        |L1.400|
                  |L1.400|
000190  464c              MOV      r4,r9                 ;123
000192  2000              MOVS     r0,#0                 ;123
000194  9005              STR      r0,[sp,#0x14]         ;123
000196  e048              B        |L1.554|
                  |L1.408|
000198  9817              LDR      r0,[sp,#0x5c]         ;125
00019a  4420              ADD      r0,r0,r4              ;125
00019c  1e40              SUBS     r0,r0,#1              ;125
00019e  9004              STR      r0,[sp,#0x10]         ;125
0001a0  4826              LDR      r0,|L1.572|
0001a2  f9b0100a          LDRSH    r1,[r0,#0xa]          ;127
0001a6  9804              LDR      r0,[sp,#0x10]         ;127
0001a8  4281              CMP      r1,r0                 ;127
0001aa  dc30              BGT      |L1.526|
0001ac  4823              LDR      r0,|L1.572|
0001ae  f9b0000e          LDRSH    r0,[r0,#0xe]          ;127
0001b2  42a0              CMP      r0,r4                 ;127
0001b4  db2b              BLT      |L1.526|
0001b6  f8cda008          STR      r10,[sp,#8]           ;129
0001ba  9606              STR      r6,[sp,#0x18]         ;130
0001bc  2000              MOVS     r0,#0                 ;130
0001be  9003              STR      r0,[sp,#0xc]          ;130
0001c0  e021              B        |L1.518|
                  |L1.450|
0001c2  9802              LDR      r0,[sp,#8]            ;132
0001c4  8800              LDRH     r0,[r0,#0]            ;132
0001c6  9001              STR      r0,[sp,#4]            ;132
0001c8  9802              LDR      r0,[sp,#8]            ;132
0001ca  1c80              ADDS     r0,r0,#2              ;132
0001cc  9002              STR      r0,[sp,#8]            ;132
0001ce  9909              LDR      r1,[sp,#0x24]         ;133
0001d0  9801              LDR      r0,[sp,#4]            ;133
0001d2  4288              CMP      r0,r1                 ;133
0001d4  d007              BEQ      |L1.486|
0001d6  9918              LDR      r1,[sp,#0x60]         ;134
0001d8  9801              LDR      r0,[sp,#4]            ;134
0001da  4788              BLX      r1                    ;134
0001dc  9000              STR      r0,[sp,#0]            ;134
0001de  f7fffffe          BL       LCD_SetColor
0001e2  9801              LDR      r0,[sp,#4]            ;135
0001e4  9009              STR      r0,[sp,#0x24]         ;135
                  |L1.486|
0001e6  9916              LDR      r1,[sp,#0x58]         ;137
0001e8  9806              LDR      r0,[sp,#0x18]         ;137
0001ea  4408              ADD      r0,r0,r1              ;137
0001ec  1e42              SUBS     r2,r0,#1              ;137
0001ee  4621              MOV      r1,r4                 ;137
0001f0  9b04              LDR      r3,[sp,#0x10]         ;137
0001f2  9806              LDR      r0,[sp,#0x18]         ;137
0001f4  f7fffffe          BL       LCD_FillRect
0001f8  9803              LDR      r0,[sp,#0xc]          ;130
0001fa  1c40              ADDS     r0,r0,#1              ;130
0001fc  9003              STR      r0,[sp,#0xc]          ;130
0001fe  9916              LDR      r1,[sp,#0x58]         ;130
000200  9806              LDR      r0,[sp,#0x18]         ;130
000202  4408              ADD      r0,r0,r1              ;130
000204  9006              STR      r0,[sp,#0x18]         ;130
                  |L1.518|
000206  9803              LDR      r0,[sp,#0xc]          ;130
000208  42a8              CMP      r0,r5                 ;130
00020a  dbda              BLT      |L1.450|
00020c  bf00              NOP                            ;139
                  |L1.526|
00020e  4640              MOV      r0,r8                 ;140
000210  eb0871d0          ADD      r1,r8,r0,LSR #31      ;140
000214  1049              ASRS     r1,r1,#1              ;140
000216  eb0a0a41          ADD      r10,r10,r1,LSL #1     ;140
00021a  9805              LDR      r0,[sp,#0x14]         ;123
00021c  1c40              ADDS     r0,r0,#1              ;123
00021e  9005              STR      r0,[sp,#0x14]         ;123
000220  9817              LDR      r0,[sp,#0x5c]         ;123
000222  4404              ADD      r4,r4,r0              ;123
000224  9814              LDR      r0,[sp,#0x50]         ;123
000226  4440              ADD      r0,r0,r8              ;123
000228  9014              STR      r0,[sp,#0x50]         ;123
                  |L1.554|
00022a  9805              LDR      r0,[sp,#0x14]         ;123
00022c  42b8              CMP      r0,r7                 ;123
00022e  dbb3              BLT      |L1.408|
000230  bf00              NOP                            ;142
                  |L1.562|
000232  980a              LDR      r0,[sp,#0x28]         ;143
000234  f7fffffe          BL       GUI_SetColorIndex
                  |L1.568|
000238  bf00              NOP      
00023a  e751              B        |L1.224|
;;;146    
                          ENDP

                  |L1.572|
                          DCD      GUI_Context
