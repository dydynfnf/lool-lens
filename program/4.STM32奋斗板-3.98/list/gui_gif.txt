; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\gui_gif.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\gui_gif.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -I.\GUI\AntiAlias -I.\GUI\Config -I.\GUI\ConvertColor -I.\GUI\ConvertMono -I.\GUI\Core -I.\GUI\Font -I.\GUI\GUI_X -I.\GUI\JPEG -I.\GUI\LCDDriver -I.\GUI\MemDev -I.\GUI\MultiLayer -I.\GUI\Widget -I.\GUI\WM -IC:\Users\Administrator\Desktop\gui\STM32·Ü¶·°å-3.98\RTE -Id:\Keil_v5\ARM\PACK\ARM\CMSIS\4.3.0\CMSIS\Include -Id:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.1.0\Device\Include -D__UVISION_VERSION=515 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\gui_gif.crf GUI\Core\GUI_GIF.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _ReadU8 PROC
;;;122    */
;;;123    static U8 _ReadU8(void) {
000000  48fe              LDR      r0,|L1.1020|
;;;124      U8 Value;
;;;125      _Source.RemBytes -= 1;
000002  6840              LDR      r0,[r0,#4]  ; _Source
000004  1e40              SUBS     r0,r0,#1
000006  4afd              LDR      r2,|L1.1020|
000008  6050              STR      r0,[r2,#4]  ; _Source
;;;126      if (_Source.RemBytes < 0) {
00000a  4610              MOV      r0,r2
00000c  6840              LDR      r0,[r0,#4]  ; _Source
00000e  2800              CMP      r0,#0
000010  da01              BGE      |L1.22|
;;;127        return 0;
000012  2000              MOVS     r0,#0
                  |L1.20|
;;;128      }
;;;129      Value = *(_Source.pSrc++);
;;;130      return Value;
;;;131    }
000014  4770              BX       lr
                  |L1.22|
000016  48f9              LDR      r0,|L1.1020|
000018  6800              LDR      r0,[r0,#0]            ;129  ; _Source
00001a  7801              LDRB     r1,[r0,#0]            ;129
00001c  48f7              LDR      r0,|L1.1020|
00001e  6800              LDR      r0,[r0,#0]            ;129  ; _Source
000020  1c40              ADDS     r0,r0,#1              ;129
000022  4af6              LDR      r2,|L1.1020|
000024  6010              STR      r0,[r2,#0]            ;129  ; _Source
000026  4608              MOV      r0,r1                 ;130
000028  e7f4              B        |L1.20|
;;;132    
                          ENDP

                  _ReadU16 PROC
;;;139    */
;;;140    static U16 _ReadU16(void) {
00002a  b570              PUSH     {r4-r6,lr}
;;;141      U16 Value;
;;;142      U8 Byte0, Byte1;
;;;143      Byte0 = _ReadU8();
00002c  f7fffffe          BL       _ReadU8
000030  4605              MOV      r5,r0
;;;144      Byte1 = _ReadU8();
000032  f7fffffe          BL       _ReadU8
000036  4606              MOV      r6,r0
;;;145      Value = (Byte1 << 8) | Byte0;
000038  ea452406          ORR      r4,r5,r6,LSL #8
;;;146      return Value;
00003c  4620              MOV      r0,r4
;;;147    }
00003e  bd70              POP      {r4-r6,pc}
;;;148    
                          ENDP

                  _ReadBytes PROC
;;;155    */
;;;156    static void _ReadBytes(U8 * pBuffer, int Len) {
000040  b570              PUSH     {r4-r6,lr}
000042  4605              MOV      r5,r0
000044  460c              MOV      r4,r1
;;;157      if (_Source.RemBytes < 0) {
000046  48ed              LDR      r0,|L1.1020|
000048  6840              LDR      r0,[r0,#4]  ; _Source
00004a  2800              CMP      r0,#0
00004c  da00              BGE      |L1.80|
                  |L1.78|
;;;158        return;
;;;159      }
;;;160      if (_Source.RemBytes < Len) {
;;;161        Len = _Source.RemBytes;
;;;162        return;
;;;163      }
;;;164      _Source.RemBytes -= Len;
;;;165      memcpy(pBuffer, _Source.pSrc, Len);
;;;166      _Source.pSrc += Len;
;;;167    }
00004e  bd70              POP      {r4-r6,pc}
                  |L1.80|
000050  48ea              LDR      r0,|L1.1020|
000052  6840              LDR      r0,[r0,#4]            ;160  ; _Source
000054  42a0              CMP      r0,r4                 ;160
000056  da02              BGE      |L1.94|
000058  48e8              LDR      r0,|L1.1020|
00005a  6844              LDR      r4,[r0,#4]            ;161  ; _Source
00005c  e7f7              B        |L1.78|
                  |L1.94|
00005e  48e7              LDR      r0,|L1.1020|
000060  6840              LDR      r0,[r0,#4]            ;164  ; _Source
000062  1b00              SUBS     r0,r0,r4              ;164
000064  49e5              LDR      r1,|L1.1020|
000066  6048              STR      r0,[r1,#4]            ;164  ; _Source
000068  4608              MOV      r0,r1                 ;165
00006a  4622              MOV      r2,r4                 ;165
00006c  6801              LDR      r1,[r0,#0]            ;165  ; _Source
00006e  4628              MOV      r0,r5                 ;165
000070  f7fffffe          BL       __aeabi_memcpy
000074  48e1              LDR      r0,|L1.1020|
000076  6800              LDR      r0,[r0,#0]            ;166  ; _Source
000078  4420              ADD      r0,r0,r4              ;166
00007a  49e0              LDR      r1,|L1.1020|
00007c  6008              STR      r0,[r1,#0]            ;166  ; _Source
00007e  bf00              NOP      
000080  e7e5              B        |L1.78|
;;;168    
                          ENDP

                  _SkipBytes PROC
;;;175    */
;;;176    static void _SkipBytes(int Len) {
000082  49de              LDR      r1,|L1.1020|
;;;177      if (_Source.RemBytes < 0) {
000084  6849              LDR      r1,[r1,#4]  ; _Source
000086  2900              CMP      r1,#0
000088  da00              BGE      |L1.140|
                  |L1.138|
;;;178        return;
;;;179      }
;;;180      if (_Source.RemBytes < Len) {
;;;181        Len = _Source.RemBytes;
;;;182        return;
;;;183      }
;;;184      _Source.RemBytes -= Len;
;;;185      _Source.pSrc += Len;
;;;186    }
00008a  4770              BX       lr
                  |L1.140|
00008c  49db              LDR      r1,|L1.1020|
00008e  6849              LDR      r1,[r1,#4]            ;180  ; _Source
000090  4281              CMP      r1,r0                 ;180
000092  da02              BGE      |L1.154|
000094  49d9              LDR      r1,|L1.1020|
000096  6848              LDR      r0,[r1,#4]            ;181  ; _Source
000098  e7f7              B        |L1.138|
                  |L1.154|
00009a  49d8              LDR      r1,|L1.1020|
00009c  6849              LDR      r1,[r1,#4]            ;184  ; _Source
00009e  1a09              SUBS     r1,r1,r0              ;184
0000a0  4ad6              LDR      r2,|L1.1020|
0000a2  6051              STR      r1,[r2,#4]            ;184  ; _Source
0000a4  4611              MOV      r1,r2                 ;185
0000a6  6809              LDR      r1,[r1,#0]            ;185  ; _Source
0000a8  4401              ADD      r1,r1,r0              ;185
0000aa  6011              STR      r1,[r2,#0]            ;185  ; _Source
0000ac  bf00              NOP      
0000ae  e7ec              B        |L1.138|
;;;187    
                          ENDP

                  _InitLZW PROC
;;;194    */
;;;195    static void _InitLZW(int InputCodeSize) {
0000b0  b510              PUSH     {r4,lr}
0000b2  4604              MOV      r4,r0
;;;196      GUI__memset((U8 *)&_LZWContext, 0, sizeof(LZW_CONTEXT));
0000b4  f64342f4          MOV      r2,#0x3cf4
0000b8  2100              MOVS     r1,#0
0000ba  48d1              LDR      r0,|L1.1024|
0000bc  f7fffffe          BL       GUI__memset
;;;197      _LZWContext.SetCodeSize  = InputCodeSize;
0000c0  48d0              LDR      r0,|L1.1028|
0000c2  f8c04cd8          STR      r4,[r0,#0xcd8]  ; _LZWContext
;;;198      _LZWContext.CodeSize     = InputCodeSize + 1;
0000c6  1c60              ADDS     r0,r4,#1
0000c8  49ce              LDR      r1,|L1.1028|
0000ca  f8c10cd4          STR      r0,[r1,#0xcd4]  ; _LZWContext
;;;199      _LZWContext.ClearCode    = (1 << InputCodeSize);
0000ce  2001              MOVS     r0,#1
0000d0  40a0              LSLS     r0,r0,r4
0000d2  f8c10ce4          STR      r0,[r1,#0xce4]  ; _LZWContext
;;;200      _LZWContext.EndCode      = (1 << InputCodeSize) + 1;
0000d6  2001              MOVS     r0,#1
0000d8  40a0              LSLS     r0,r0,r4
0000da  1c40              ADDS     r0,r0,#1
0000dc  f8c10ce8          STR      r0,[r1,#0xce8]  ; _LZWContext
;;;201      _LZWContext.MaxCode      = (1 << InputCodeSize) + 2;
0000e0  2001              MOVS     r0,#1
0000e2  40a0              LSLS     r0,r0,r4
0000e4  1c80              ADDS     r0,r0,#2
0000e6  f8c10cdc          STR      r0,[r1,#0xcdc]  ; _LZWContext
;;;202      _LZWContext.MaxCodeSize  = (1 << InputCodeSize) << 1;
0000ea  2001              MOVS     r0,#1
0000ec  40a0              LSLS     r0,r0,r4
0000ee  0041              LSLS     r1,r0,#1
0000f0  48c4              LDR      r0,|L1.1028|
0000f2  f8c01ce0          STR      r1,[r0,#0xce0]  ; _LZWContext
;;;203      _LZWContext.ReturnClear  = 1;
0000f6  2101              MOVS     r1,#1
0000f8  f8c01cd0          STR      r1,[r0,#0xcd0]  ; _LZWContext
;;;204      _LZWContext.LastByte     = 2;
0000fc  2102              MOVS     r1,#2
0000fe  f8c01ccc          STR      r1,[r0,#0xccc]  ; _LZWContext
;;;205      _LZWContext.sp           = _LZWContext.aDecompBuffer;
000102  f5007181          ADD      r1,r0,#0x102
000106  f8c01cbc          STR      r1,[r0,#0xcbc]  ; _LZWContext
;;;206    }
00010a  bd10              POP      {r4,pc}
;;;207    
                          ENDP

                  _GetDataBlock PROC
;;;218    */
;;;219    static int _GetDataBlock(U8 * pBuffer) {
00010c  b570              PUSH     {r4-r6,lr}
00010e  4605              MOV      r5,r0
;;;220      U8 Count;
;;;221      Count = _ReadU8(); /* Read the length of the data block */
000110  f7fffffe          BL       _ReadU8
000114  4604              MOV      r4,r0
;;;222      if (Count) {
000116  b154              CBZ      r4,|L1.302|
;;;223        if (pBuffer) {
000118  b125              CBZ      r5,|L1.292|
;;;224          _ReadBytes(pBuffer, Count);
00011a  4621              MOV      r1,r4
00011c  4628              MOV      r0,r5
00011e  f7fffffe          BL       _ReadBytes
000122  e004              B        |L1.302|
                  |L1.292|
;;;225        } else {
;;;226          _Source.pSrc += Count;
000124  48b5              LDR      r0,|L1.1020|
000126  6800              LDR      r0,[r0,#0]  ; _Source
000128  4420              ADD      r0,r0,r4
00012a  49b4              LDR      r1,|L1.1020|
00012c  6008              STR      r0,[r1,#0]  ; _Source
                  |L1.302|
;;;227        }
;;;228      }
;;;229      return((int)Count);
00012e  4620              MOV      r0,r4
;;;230    }
000130  bd70              POP      {r4-r6,pc}
;;;231    
                          ENDP

                  _GetNextCode PROC
;;;242    */
;;;243    static int _GetNextCode(void) {
000132  e92d41f0          PUSH     {r4-r8,lr}
;;;244      int i, j, End;
;;;245      long Result;
;;;246      if (_LZWContext.ReturnClear) {
000136  48b3              LDR      r0,|L1.1028|
000138  f8d00cd0          LDR      r0,[r0,#0xcd0]  ; _LZWContext
00013c  b138              CBZ      r0,|L1.334|
;;;247        /* The first code should be a clear code. */
;;;248        _LZWContext.ReturnClear = 0;
00013e  2100              MOVS     r1,#0
000140  48b0              LDR      r0,|L1.1028|
000142  f8c01cd0          STR      r1,[r0,#0xcd0]  ; _LZWContext
;;;249        return _LZWContext.ClearCode;
000146  f8d00ce4          LDR      r0,[r0,#0xce4]  ; _LZWContext
                  |L1.330|
;;;250      }
;;;251      End = _LZWContext.CurBit + _LZWContext.CodeSize;
;;;252      if (End >= _LZWContext.LastBit) {
;;;253        int Count;
;;;254        if (_LZWContext.GetDone) {
;;;255          return -1; /* Error */
;;;256        }
;;;257        _LZWContext.aBuffer[0] = _LZWContext.aBuffer[_LZWContext.LastByte - 2];
;;;258        _LZWContext.aBuffer[1] = _LZWContext.aBuffer[_LZWContext.LastByte - 1];
;;;259        if ((Count = _GetDataBlock(&_LZWContext.aBuffer[2])) == 0) {
;;;260          _LZWContext.GetDone = 1;
;;;261        }
;;;262        if (Count < 0) {
;;;263          return -1; /* Error */
;;;264        }
;;;265        _LZWContext.LastByte = 2 + Count;
;;;266        _LZWContext.CurBit   = (_LZWContext.CurBit - _LZWContext.LastBit) + 16;
;;;267        _LZWContext.LastBit  = (2 + Count) * 8 ;
;;;268        End                  = _LZWContext.CurBit + _LZWContext.CodeSize;
;;;269      }
;;;270      j = End >> 3;
;;;271      i = _LZWContext.CurBit >> 3;
;;;272      if (i == j) {
;;;273        Result = (long)_LZWContext.aBuffer[i];
;;;274      } else if (i + 1 == j) {
;;;275        Result = (long)_LZWContext.aBuffer[i] | ((long)_LZWContext.aBuffer[i + 1] << 8);
;;;276      }  else {
;;;277        Result = (long)_LZWContext.aBuffer[i] | ((long)_LZWContext.aBuffer[i + 1] << 8) | ((long)_LZWContext.aBuffer[i + 2] << 16);
;;;278      }
;;;279      Result = (Result >> (_LZWContext.CurBit & 0x7)) & _aMaskTbl[_LZWContext.CodeSize];
;;;280      _LZWContext.CurBit += _LZWContext.CodeSize;
;;;281      return (int)Result;
;;;282    }
00014a  e8bd81f0          POP      {r4-r8,pc}
                  |L1.334|
00014e  48ad              LDR      r0,|L1.1028|
000150  f8d01cc0          LDR      r1,[r0,#0xcc0]        ;251  ; _LZWContext
000154  f8d00cd4          LDR      r0,[r0,#0xcd4]        ;251  ; _LZWContext
000158  eb010800          ADD      r8,r1,r0              ;251
00015c  48a9              LDR      r0,|L1.1028|
00015e  f8d00cc4          LDR      r0,[r0,#0xcc4]        ;252  ; _LZWContext
000162  4540              CMP      r0,r8                 ;252
000164  dc3b              BGT      |L1.478|
000166  48a7              LDR      r0,|L1.1028|
000168  f8d00cc8          LDR      r0,[r0,#0xcc8]        ;254  ; _LZWContext
00016c  b110              CBZ      r0,|L1.372|
00016e  f04f30ff          MOV      r0,#0xffffffff        ;255
000172  e7ea              B        |L1.330|
                  |L1.372|
000174  48a3              LDR      r0,|L1.1028|
000176  f8d00ccc          LDR      r0,[r0,#0xccc]        ;257  ; _LZWContext
00017a  1e80              SUBS     r0,r0,#2              ;257
00017c  49a0              LDR      r1,|L1.1024|
00017e  5c08              LDRB     r0,[r1,r0]            ;257
000180  7008              STRB     r0,[r1,#0]            ;257
000182  48a0              LDR      r0,|L1.1028|
000184  f8d00ccc          LDR      r0,[r0,#0xccc]        ;258  ; _LZWContext
000188  1e40              SUBS     r0,r0,#1              ;258
00018a  5c08              LDRB     r0,[r1,r0]            ;258
00018c  7048              STRB     r0,[r1,#1]            ;258
00018e  1c88              ADDS     r0,r1,#2              ;259
000190  f7fffffe          BL       _GetDataBlock
000194  0006              MOVS     r6,r0                 ;259
000196  d103              BNE      |L1.416|
000198  2101              MOVS     r1,#1                 ;260
00019a  489a              LDR      r0,|L1.1028|
00019c  f8c01cc8          STR      r1,[r0,#0xcc8]        ;260  ; _LZWContext
                  |L1.416|
0001a0  2e00              CMP      r6,#0                 ;262
0001a2  da02              BGE      |L1.426|
0001a4  f04f30ff          MOV      r0,#0xffffffff        ;263
0001a8  e7cf              B        |L1.330|
                  |L1.426|
0001aa  1cb0              ADDS     r0,r6,#2              ;265
0001ac  4995              LDR      r1,|L1.1028|
0001ae  f8c10ccc          STR      r0,[r1,#0xccc]        ;265  ; _LZWContext
0001b2  4608              MOV      r0,r1                 ;266
0001b4  f8d01cc0          LDR      r1,[r0,#0xcc0]        ;266  ; _LZWContext
0001b8  f8d00cc4          LDR      r0,[r0,#0xcc4]        ;266  ; _LZWContext
0001bc  1a08              SUBS     r0,r1,r0              ;266
0001be  3010              ADDS     r0,r0,#0x10           ;266
0001c0  4990              LDR      r1,|L1.1028|
0001c2  f8c10cc0          STR      r0,[r1,#0xcc0]        ;266  ; _LZWContext
0001c6  1cb0              ADDS     r0,r6,#2              ;267
0001c8  00c1              LSLS     r1,r0,#3              ;267
0001ca  488e              LDR      r0,|L1.1028|
0001cc  f8c01cc4          STR      r1,[r0,#0xcc4]        ;267  ; _LZWContext
0001d0  f8d01cc0          LDR      r1,[r0,#0xcc0]        ;268  ; _LZWContext
0001d4  f8d00cd4          LDR      r0,[r0,#0xcd4]        ;268  ; _LZWContext
0001d8  eb010800          ADD      r8,r1,r0              ;268
0001dc  bf00              NOP                            ;269
                  |L1.478|
0001de  ea4f07e8          ASR      r7,r8,#3              ;270
0001e2  4888              LDR      r0,|L1.1028|
0001e4  f8d00cc0          LDR      r0,[r0,#0xcc0]        ;271  ; _LZWContext
0001e8  10c4              ASRS     r4,r0,#3              ;271
0001ea  42bc              CMP      r4,r7                 ;272
0001ec  d102              BNE      |L1.500|
0001ee  4884              LDR      r0,|L1.1024|
0001f0  5d05              LDRB     r5,[r0,r4]            ;273
0001f2  e015              B        |L1.544|
                  |L1.500|
0001f4  1c60              ADDS     r0,r4,#1              ;274
0001f6  42b8              CMP      r0,r7                 ;274
0001f8  d107              BNE      |L1.522|
0001fa  4881              LDR      r0,|L1.1024|
0001fc  5d01              LDRB     r1,[r0,r4]            ;275
0001fe  4602              MOV      r2,r0                 ;275
000200  1c60              ADDS     r0,r4,#1              ;275
000202  5c10              LDRB     r0,[r2,r0]            ;275
000204  ea412500          ORR      r5,r1,r0,LSL #8       ;275
000208  e00a              B        |L1.544|
                  |L1.522|
00020a  487d              LDR      r0,|L1.1024|
00020c  5d01              LDRB     r1,[r0,r4]            ;277
00020e  4602              MOV      r2,r0                 ;277
000210  1c60              ADDS     r0,r4,#1              ;277
000212  5c10              LDRB     r0,[r2,r0]            ;277
000214  ea412100          ORR      r1,r1,r0,LSL #8       ;277
000218  1ca0              ADDS     r0,r4,#2              ;277
00021a  5c10              LDRB     r0,[r2,r0]            ;277
00021c  ea414500          ORR      r5,r1,r0,LSL #16      ;277
                  |L1.544|
000220  4878              LDR      r0,|L1.1028|
000222  f8900cc0          LDRB     r0,[r0,#0xcc0]        ;279  ; _LZWContext
000226  f0000107          AND      r1,r0,#7              ;279
00022a  fa45f001          ASR      r0,r5,r1              ;279
00022e  4975              LDR      r1,|L1.1028|
000230  f8d11cd4          LDR      r1,[r1,#0xcd4]        ;279  ; _LZWContext
000234  4a74              LDR      r2,|L1.1032|
000236  f8521021          LDR      r1,[r2,r1,LSL #2]     ;279
00023a  ea000501          AND      r5,r0,r1              ;279
00023e  4871              LDR      r0,|L1.1028|
000240  f8d01cc0          LDR      r1,[r0,#0xcc0]        ;280  ; _LZWContext
000244  f8d00cd4          LDR      r0,[r0,#0xcd4]        ;280  ; _LZWContext
000248  4401              ADD      r1,r1,r0              ;280
00024a  486e              LDR      r0,|L1.1028|
00024c  f8c01cc0          STR      r1,[r0,#0xcc0]        ;280  ; _LZWContext
000250  4628              MOV      r0,r5                 ;281
000252  e77a              B        |L1.330|
;;;283    
                          ENDP

                  _GetNextByte PROC
;;;295    */
;;;296    static int _GetNextByte(void) {
000254  b570              PUSH     {r4-r6,lr}
;;;297      int i, Code, Incode;
;;;298      while ((Code = _GetNextCode()) >= 0) {
000256  e0f4              B        |L1.1090|
                  |L1.600|
;;;299        if (Code == _LZWContext.ClearCode) {
000258  486a              LDR      r0,|L1.1028|
00025a  f8d00ce4          LDR      r0,[r0,#0xce4]  ; _LZWContext
00025e  42a0              CMP      r0,r4
000260  d146              BNE      |L1.752|
;;;300          /* Corrupt GIFs can make this happen */
;;;301          if (_LZWContext.ClearCode >= (1 << MAX_NUM_LWZ_BITS)) {
000262  4868              LDR      r0,|L1.1028|
000264  f8d00ce4          LDR      r0,[r0,#0xce4]  ; _LZWContext
000268  f5b05f80          CMP      r0,#0x1000
00026c  db02              BLT      |L1.628|
;;;302            return -1; /* Error */
00026e  f04f30ff          MOV      r0,#0xffffffff
                  |L1.626|
;;;303          }
;;;304          /* Clear the tables */
;;;305          GUI__memset((U8 *)_LZWContext.aCode, 0, sizeof(_LZWContext.aCode));
;;;306          for (i = 0; i < _LZWContext.ClearCode; ++i) {
;;;307            _LZWContext.aPrefix[i] = i;
;;;308          }
;;;309          /* Calculate the 'special codes' in dependence of the initial code size
;;;310             and initialize the stack pointer */
;;;311          _LZWContext.CodeSize    = _LZWContext.SetCodeSize + 1;
;;;312          _LZWContext.MaxCodeSize = _LZWContext.ClearCode << 1;
;;;313          _LZWContext.MaxCode     = _LZWContext.ClearCode + 2;
;;;314          _LZWContext.sp          = _LZWContext.aDecompBuffer;
;;;315          /* Read the first code from the stack after clearing and initializing */
;;;316          do {
;;;317            _LZWContext.FirstCode = _GetNextCode();
;;;318          } while (_LZWContext.FirstCode == _LZWContext.ClearCode);
;;;319          _LZWContext.OldCode = _LZWContext.FirstCode;
;;;320          return _LZWContext.FirstCode;
;;;321        }
;;;322        if (Code == _LZWContext.EndCode) {
;;;323          return -2; /* End code */
;;;324        }
;;;325        Incode = Code;
;;;326        if (Code >= _LZWContext.MaxCode) {
;;;327          *(_LZWContext.sp)++ = _LZWContext.FirstCode;
;;;328          Code = _LZWContext.OldCode;
;;;329        }
;;;330        while (Code >= _LZWContext.ClearCode) {
;;;331          *(_LZWContext.sp)++ = _LZWContext.aPrefix[Code];
;;;332          if (Code == _LZWContext.aCode[Code]) {
;;;333            return Code;
;;;334          }
;;;335          if ((_LZWContext.sp - _LZWContext.aDecompBuffer) >= sizeof(_LZWContext.aDecompBuffer)) {
;;;336            return Code;
;;;337          }
;;;338          Code = _LZWContext.aCode[Code];
;;;339        }
;;;340        *(_LZWContext.sp)++ = _LZWContext.FirstCode = _LZWContext.aPrefix[Code];
;;;341        if ((Code = _LZWContext.MaxCode) < (1 << MAX_NUM_LWZ_BITS)) {
;;;342          _LZWContext.aCode  [Code] = _LZWContext.OldCode;
;;;343          _LZWContext.aPrefix[Code] = _LZWContext.FirstCode;
;;;344          ++_LZWContext.MaxCode;
;;;345          if ((_LZWContext.MaxCode >= _LZWContext.MaxCodeSize) && (_LZWContext.MaxCodeSize < (1 << MAX_NUM_LWZ_BITS))) {
;;;346            _LZWContext.MaxCodeSize <<= 1;
;;;347            ++_LZWContext.CodeSize;
;;;348          }
;;;349        }
;;;350        _LZWContext.OldCode = Incode;
;;;351        if (_LZWContext.sp > _LZWContext.aDecompBuffer) {
;;;352          return *--(_LZWContext.sp);
;;;353        }
;;;354      }
;;;355      return Code;
;;;356    }
000272  bd70              POP      {r4-r6,pc}
                  |L1.628|
000274  f44f5200          MOV      r2,#0x2000            ;305
000278  2100              MOVS     r1,#0                 ;305
00027a  4864              LDR      r0,|L1.1036|
00027c  f7fffffe          BL       GUI__memset
000280  2500              MOVS     r5,#0                 ;306
000282  e002              B        |L1.650|
                  |L1.644|
000284  4962              LDR      r1,|L1.1040|
000286  554d              STRB     r5,[r1,r5]            ;307
000288  1c6d              ADDS     r5,r5,#1              ;306
                  |L1.650|
00028a  485e              LDR      r0,|L1.1028|
00028c  f8d00ce4          LDR      r0,[r0,#0xce4]        ;306  ; _LZWContext
000290  42a8              CMP      r0,r5                 ;306
000292  dcf7              BGT      |L1.644|
000294  485b              LDR      r0,|L1.1028|
000296  f8d00cd8          LDR      r0,[r0,#0xcd8]        ;311  ; _LZWContext
00029a  1c40              ADDS     r0,r0,#1              ;311
00029c  4959              LDR      r1,|L1.1028|
00029e  f8c10cd4          STR      r0,[r1,#0xcd4]        ;311  ; _LZWContext
0002a2  4608              MOV      r0,r1                 ;312
0002a4  f8d00ce4          LDR      r0,[r0,#0xce4]        ;312  ; _LZWContext
0002a8  0041              LSLS     r1,r0,#1              ;312
0002aa  4856              LDR      r0,|L1.1028|
0002ac  f8c01ce0          STR      r1,[r0,#0xce0]        ;312  ; _LZWContext
0002b0  f8d00ce4          LDR      r0,[r0,#0xce4]        ;313  ; _LZWContext
0002b4  1c80              ADDS     r0,r0,#2              ;313
0002b6  4953              LDR      r1,|L1.1028|
0002b8  f8c10cdc          STR      r0,[r1,#0xcdc]        ;313  ; _LZWContext
0002bc  f5017181          ADD      r1,r1,#0x102          ;314
0002c0  4850              LDR      r0,|L1.1028|
0002c2  f8c01cbc          STR      r1,[r0,#0xcbc]        ;314  ; _LZWContext
0002c6  bf00              NOP                            ;316
                  |L1.712|
0002c8  f7fffffe          BL       _GetNextCode
0002cc  494d              LDR      r1,|L1.1028|
0002ce  f8c10cec          STR      r0,[r1,#0xcec]        ;317  ; _LZWContext
0002d2  4608              MOV      r0,r1                 ;318
0002d4  f8d01cec          LDR      r1,[r0,#0xcec]        ;318  ; _LZWContext
0002d8  f8d00ce4          LDR      r0,[r0,#0xce4]        ;318  ; _LZWContext
0002dc  4281              CMP      r1,r0                 ;318
0002de  d0f3              BEQ      |L1.712|
0002e0  4848              LDR      r0,|L1.1028|
0002e2  f8d01cec          LDR      r1,[r0,#0xcec]        ;319  ; _LZWContext
0002e6  f8c01cf0          STR      r1,[r0,#0xcf0]        ;319  ; _LZWContext
0002ea  f8d00cec          LDR      r0,[r0,#0xcec]        ;320  ; _LZWContext
0002ee  e7c0              B        |L1.626|
                  |L1.752|
0002f0  4844              LDR      r0,|L1.1028|
0002f2  f8d00ce8          LDR      r0,[r0,#0xce8]        ;322  ; _LZWContext
0002f6  42a0              CMP      r0,r4                 ;322
0002f8  d102              BNE      |L1.768|
0002fa  f06f0001          MVN      r0,#1                 ;323
0002fe  e7b8              B        |L1.626|
                  |L1.768|
000300  4626              MOV      r6,r4                 ;325
000302  4840              LDR      r0,|L1.1028|
000304  f8d00cdc          LDR      r0,[r0,#0xcdc]        ;326  ; _LZWContext
000308  42a0              CMP      r0,r4                 ;326
00030a  dc0f              BGT      |L1.812|
00030c  483d              LDR      r0,|L1.1028|
00030e  f8901cec          LDRB     r1,[r0,#0xcec]        ;327  ; _LZWContext
000312  f8d00cbc          LDR      r0,[r0,#0xcbc]        ;327  ; _LZWContext
000316  7001              STRB     r1,[r0,#0]            ;327
000318  483a              LDR      r0,|L1.1028|
00031a  f8d00cbc          LDR      r0,[r0,#0xcbc]        ;327  ; _LZWContext
00031e  1c40              ADDS     r0,r0,#1              ;327
000320  4938              LDR      r1,|L1.1028|
000322  f8c10cbc          STR      r0,[r1,#0xcbc]        ;327  ; _LZWContext
000326  4608              MOV      r0,r1                 ;328
000328  f8d04cf0          LDR      r4,[r0,#0xcf0]        ;328  ; _LZWContext
                  |L1.812|
00032c  e021              B        |L1.882|
                  |L1.814|
00032e  4838              LDR      r0,|L1.1040|
000330  5d01              LDRB     r1,[r0,r4]            ;331
000332  4834              LDR      r0,|L1.1028|
000334  f8d00cbc          LDR      r0,[r0,#0xcbc]        ;331  ; _LZWContext
000338  7001              STRB     r1,[r0,#0]            ;331
00033a  4832              LDR      r0,|L1.1028|
00033c  f8d00cbc          LDR      r0,[r0,#0xcbc]        ;331  ; _LZWContext
000340  1c40              ADDS     r0,r0,#1              ;331
000342  4930              LDR      r1,|L1.1028|
000344  f8c10cbc          STR      r0,[r1,#0xcbc]        ;331  ; _LZWContext
000348  4830              LDR      r0,|L1.1036|
00034a  f9300014          LDRSH    r0,[r0,r4,LSL #1]     ;332
00034e  42a0              CMP      r0,r4                 ;332
000350  d101              BNE      |L1.854|
000352  4620              MOV      r0,r4                 ;333
000354  e78d              B        |L1.626|
                  |L1.854|
000356  482b              LDR      r0,|L1.1028|
000358  f8d00cbc          LDR      r0,[r0,#0xcbc]        ;335  ; _LZWContext
00035c  492d              LDR      r1,|L1.1044|
00035e  1a40              SUBS     r0,r0,r1              ;335
000360  f64031b8          MOV      r1,#0xbb8             ;335
000364  4288              CMP      r0,r1                 ;335
000366  d301              BCC      |L1.876|
000368  4620              MOV      r0,r4                 ;336
00036a  e782              B        |L1.626|
                  |L1.876|
00036c  4827              LDR      r0,|L1.1036|
00036e  f9304014          LDRSH    r4,[r0,r4,LSL #1]     ;338
                  |L1.882|
000372  4824              LDR      r0,|L1.1028|
000374  f8d00ce4          LDR      r0,[r0,#0xce4]        ;330  ; _LZWContext
000378  42a0              CMP      r0,r4                 ;330
00037a  ddd8              BLE      |L1.814|
00037c  4824              LDR      r0,|L1.1040|
00037e  5d01              LDRB     r1,[r0,r4]            ;340
000380  4820              LDR      r0,|L1.1028|
000382  f8c01cec          STR      r1,[r0,#0xcec]        ;340  ; _LZWContext
000386  f8d00cbc          LDR      r0,[r0,#0xcbc]        ;340  ; _LZWContext
00038a  7001              STRB     r1,[r0,#0]            ;340
00038c  481d              LDR      r0,|L1.1028|
00038e  f8d00cbc          LDR      r0,[r0,#0xcbc]        ;340  ; _LZWContext
000392  1c40              ADDS     r0,r0,#1              ;340
000394  491b              LDR      r1,|L1.1028|
000396  f8c10cbc          STR      r0,[r1,#0xcbc]        ;340  ; _LZWContext
00039a  4608              MOV      r0,r1                 ;341
00039c  f8d00cdc          LDR      r0,[r0,#0xcdc]        ;341  ; _LZWContext
0003a0  4604              MOV      r4,r0                 ;341
0003a2  f5b05f80          CMP      r0,#0x1000            ;341
0003a6  da3b              BGE      |L1.1056|
0003a8  4608              MOV      r0,r1                 ;342
0003aa  f8b00cf0          LDRH     r0,[r0,#0xcf0]        ;342  ; _LZWContext
0003ae  b201              SXTH     r1,r0                 ;342
0003b0  4816              LDR      r0,|L1.1036|
0003b2  f8201014          STRH     r1,[r0,r4,LSL #1]     ;342
0003b6  4813              LDR      r0,|L1.1028|
0003b8  f8900cec          LDRB     r0,[r0,#0xcec]        ;343  ; _LZWContext
0003bc  4914              LDR      r1,|L1.1040|
0003be  5508              STRB     r0,[r1,r4]            ;343
0003c0  4810              LDR      r0,|L1.1028|
0003c2  f8d00cdc          LDR      r0,[r0,#0xcdc]        ;344  ; _LZWContext
0003c6  1c40              ADDS     r0,r0,#1              ;344
0003c8  490e              LDR      r1,|L1.1028|
0003ca  f8c10cdc          STR      r0,[r1,#0xcdc]        ;344  ; _LZWContext
0003ce  4608              MOV      r0,r1                 ;345
0003d0  f8d01cdc          LDR      r1,[r0,#0xcdc]        ;345  ; _LZWContext
0003d4  f8d00ce0          LDR      r0,[r0,#0xce0]        ;345  ; _LZWContext
0003d8  4281              CMP      r1,r0                 ;345
0003da  db21              BLT      |L1.1056|
0003dc  4809              LDR      r0,|L1.1028|
0003de  f8d00ce0          LDR      r0,[r0,#0xce0]        ;345  ; _LZWContext
0003e2  f5b05f80          CMP      r0,#0x1000            ;345
0003e6  da1b              BGE      |L1.1056|
0003e8  4806              LDR      r0,|L1.1028|
0003ea  f8d00ce0          LDR      r0,[r0,#0xce0]        ;346  ; _LZWContext
0003ee  0041              LSLS     r1,r0,#1              ;346
0003f0  4804              LDR      r0,|L1.1028|
0003f2  f8c01ce0          STR      r1,[r0,#0xce0]        ;346  ; _LZWContext
0003f6  f8d00cd4          LDR      r0,[r0,#0xcd4]        ;347  ; _LZWContext
0003fa  e00d              B        |L1.1048|
                  |L1.1020|
                          DCD      _Source
                  |L1.1024|
                          DCD      _LZWContext
                  |L1.1028|
                          DCD      _LZWContext+0x3000
                  |L1.1032|
                          DCD      _aMaskTbl
                  |L1.1036|
                          DCD      _LZWContext+0x102
                  |L1.1040|
                          DCD      _LZWContext+0x2102
                  |L1.1044|
                          DCD      _LZWContext+0x3102
                  |L1.1048|
000418  1c40              ADDS     r0,r0,#1              ;347
00041a  49fd              LDR      r1,|L1.2064|
00041c  f8c10cd4          STR      r0,[r1,#0xcd4]        ;347  ; _LZWContext
                  |L1.1056|
000420  48fb              LDR      r0,|L1.2064|
000422  f8c06cf0          STR      r6,[r0,#0xcf0]        ;350  ; _LZWContext
000426  f8d00cbc          LDR      r0,[r0,#0xcbc]        ;351  ; _LZWContext
00042a  49fa              LDR      r1,|L1.2068|
00042c  4288              CMP      r0,r1                 ;351
00042e  d908              BLS      |L1.1090|
000430  48f7              LDR      r0,|L1.2064|
000432  f8d00cbc          LDR      r0,[r0,#0xcbc]        ;352  ; _LZWContext
000436  1e40              SUBS     r0,r0,#1              ;352
000438  49f5              LDR      r1,|L1.2064|
00043a  f8c10cbc          STR      r0,[r1,#0xcbc]        ;352  ; _LZWContext
00043e  7800              LDRB     r0,[r0,#0]            ;352
000440  e717              B        |L1.626|
                  |L1.1090|
000442  f7fffffe          BL       _GetNextCode
000446  1e04              SUBS     r4,r0,#0              ;298
000448  f6bfaf06          BGE      |L1.600|
00044c  4620              MOV      r0,r4                 ;355
00044e  e710              B        |L1.626|
;;;357    
                          ENDP

                  _ReadExtension PROC
;;;365    */
;;;366    static int _ReadExtension(int * pTransIndex, GUI_GIF_IMAGE_INFO * pInfo, U8 * pDisposal) {
000450  e92d41f0          PUSH     {r4-r8,lr}
000454  4604              MOV      r4,r0
000456  460d              MOV      r5,r1
000458  4616              MOV      r6,r2
;;;367      U8 Label;
;;;368      Label = _ReadU8();
00045a  f7fffffe          BL       _ReadU8
00045e  4607              MOV      r7,r0
;;;369      switch (Label) {
000460  2f01              CMP      r7,#1
000462  d006              BEQ      |L1.1138|
000464  2ff9              CMP      r7,#0xf9
000466  d00f              BEQ      |L1.1160|
000468  2ffe              CMP      r7,#0xfe
00046a  d004              BEQ      |L1.1142|
00046c  2fff              CMP      r7,#0xff
00046e  d130              BNE      |L1.1234|
000470  e000              B        |L1.1140|
                  |L1.1138|
;;;370      case GIF_PLAINTEXT:
;;;371      case GIF_APPLICATION:
000472  bf00              NOP      
                  |L1.1140|
;;;372      case GIF_COMMENT:
000474  bf00              NOP      
                  |L1.1142|
;;;373        while (_GetDataBlock(_aBuffer) > 0);
000476  bf00              NOP      
                  |L1.1144|
000478  48e7              LDR      r0,|L1.2072|
00047a  f7fffffe          BL       _GetDataBlock
00047e  2800              CMP      r0,#0
000480  dcfa              BGT      |L1.1144|
;;;374        return 0;
000482  2000              MOVS     r0,#0
                  |L1.1156|
;;;375      case GIF_GRAPHICCTL:
;;;376        if (_GetDataBlock(_aBuffer) != 4) { /* Length of a graphic control block must be 4 */
;;;377          return 1;
;;;378        }
;;;379        if (pInfo) {
;;;380          pInfo->Delay    = (_aBuffer[2] << 8) | _aBuffer[1];
;;;381        }
;;;382        if (pDisposal) {
;;;383          *pDisposal = (_aBuffer[0] >> 2) & 0x7;
;;;384        }
;;;385        if (pTransIndex) {
;;;386          if ((_aBuffer[0] & 0x1) != 0) {
;;;387            *pTransIndex = _aBuffer[3];
;;;388          }
;;;389        }
;;;390        if (_ReadU8() != 0) { /* Read block terminator */
;;;391          return 1;
;;;392        }
;;;393        return 0;
;;;394      }
;;;395      return 1; /* Error */
;;;396    }
000484  e8bd81f0          POP      {r4-r8,pc}
                  |L1.1160|
000488  48e3              LDR      r0,|L1.2072|
00048a  f7fffffe          BL       _GetDataBlock
00048e  2804              CMP      r0,#4                 ;376
000490  d001              BEQ      |L1.1174|
000492  2001              MOVS     r0,#1                 ;377
000494  e7f6              B        |L1.1156|
                  |L1.1174|
000496  b135              CBZ      r5,|L1.1190|
000498  48df              LDR      r0,|L1.2072|
00049a  7840              LDRB     r0,[r0,#1]            ;380  ; _aBuffer
00049c  49de              LDR      r1,|L1.2072|
00049e  7889              LDRB     r1,[r1,#2]            ;380  ; _aBuffer
0004a0  ea402001          ORR      r0,r0,r1,LSL #8       ;380
0004a4  6128              STR      r0,[r5,#0x10]         ;380
                  |L1.1190|
0004a6  b126              CBZ      r6,|L1.1202|
0004a8  48db              LDR      r0,|L1.2072|
0004aa  7800              LDRB     r0,[r0,#0]            ;383  ; _aBuffer
0004ac  f3c00082          UBFX     r0,r0,#2,#3           ;383
0004b0  7030              STRB     r0,[r6,#0]            ;383
                  |L1.1202|
0004b2  b13c              CBZ      r4,|L1.1220|
0004b4  48d8              LDR      r0,|L1.2072|
0004b6  7800              LDRB     r0,[r0,#0]            ;386  ; _aBuffer
0004b8  f0000001          AND      r0,r0,#1              ;386
0004bc  b110              CBZ      r0,|L1.1220|
0004be  48d6              LDR      r0,|L1.2072|
0004c0  78c0              LDRB     r0,[r0,#3]            ;387  ; _aBuffer
0004c2  6020              STR      r0,[r4,#0]            ;387
                  |L1.1220|
0004c4  f7fffffe          BL       _ReadU8
0004c8  b108              CBZ      r0,|L1.1230|
0004ca  2001              MOVS     r0,#1                 ;391
0004cc  e7da              B        |L1.1156|
                  |L1.1230|
0004ce  2000              MOVS     r0,#0                 ;393
0004d0  e7d8              B        |L1.1156|
                  |L1.1234|
0004d2  2001              MOVS     r0,#1                 ;395
0004d4  e7d6              B        |L1.1156|
;;;397    
                          ENDP

                  _ReadComment PROC
;;;405    */
;;;406    static int _ReadComment(U8 * pBuffer, int MaxSize, int * pSize) {
0004d6  e92d41f0          PUSH     {r4-r8,lr}
0004da  4606              MOV      r6,r0
0004dc  460d              MOV      r5,r1
0004de  4617              MOV      r7,r2
;;;407      U8 Label;
;;;408      int Size;
;;;409      Label = _ReadU8();
0004e0  f7fffffe          BL       _ReadU8
0004e4  4680              MOV      r8,r0
;;;410      switch (Label) {
0004e6  f1b80f01          CMP      r8,#1
0004ea  d009              BEQ      |L1.1280|
0004ec  f1b80ff9          CMP      r8,#0xf9
0004f0  d020              BEQ      |L1.1332|
0004f2  f1b80ffe          CMP      r8,#0xfe
0004f6  d00d              BEQ      |L1.1300|
0004f8  f1b80fff          CMP      r8,#0xff
0004fc  d128              BNE      |L1.1360|
0004fe  e000              B        |L1.1282|
                  |L1.1280|
;;;411      case GIF_PLAINTEXT:
;;;412      case GIF_APPLICATION:
000500  bf00              NOP      
                  |L1.1282|
;;;413        while (_GetDataBlock(_aBuffer) > 0);
000502  bf00              NOP      
                  |L1.1284|
000504  48c4              LDR      r0,|L1.2072|
000506  f7fffffe          BL       _GetDataBlock
00050a  2800              CMP      r0,#0
00050c  dcfa              BGT      |L1.1284|
;;;414        return 0;
00050e  2000              MOVS     r0,#0
                  |L1.1296|
;;;415      case GIF_COMMENT:
;;;416        Size = _GetDataBlock(_aBuffer);
;;;417        if (Size > MaxSize) {
;;;418          Size = MaxSize;
;;;419        }
;;;420        if (pBuffer) {
;;;421          *pSize = Size;
;;;422          memcpy(pBuffer, _aBuffer, Size);
;;;423        }
;;;424        return 0;
;;;425      case GIF_GRAPHICCTL:
;;;426        if (_GetDataBlock(_aBuffer) != 4) { /* Length of a graphic control block must be 4 */
;;;427          return 1;
;;;428        }
;;;429        if (_ReadU8() != 0) { /* Read block terminator, must be 0 */
;;;430          return 1;
;;;431        }
;;;432        return 0;
;;;433      }
;;;434      return 1; /* Error */
;;;435    }
000510  e8bd81f0          POP      {r4-r8,pc}
                  |L1.1300|
000514  48c0              LDR      r0,|L1.2072|
000516  f7fffffe          BL       _GetDataBlock
00051a  4604              MOV      r4,r0                 ;416
00051c  42ac              CMP      r4,r5                 ;417
00051e  dd00              BLE      |L1.1314|
000520  462c              MOV      r4,r5                 ;418
                  |L1.1314|
000522  b12e              CBZ      r6,|L1.1328|
000524  603c              STR      r4,[r7,#0]            ;421
000526  4622              MOV      r2,r4                 ;422
000528  49bb              LDR      r1,|L1.2072|
00052a  4630              MOV      r0,r6                 ;422
00052c  f7fffffe          BL       __aeabi_memcpy
                  |L1.1328|
000530  2000              MOVS     r0,#0                 ;424
000532  e7ed              B        |L1.1296|
                  |L1.1332|
000534  48b8              LDR      r0,|L1.2072|
000536  f7fffffe          BL       _GetDataBlock
00053a  2804              CMP      r0,#4                 ;426
00053c  d001              BEQ      |L1.1346|
00053e  2001              MOVS     r0,#1                 ;427
000540  e7e6              B        |L1.1296|
                  |L1.1346|
000542  f7fffffe          BL       _ReadU8
000546  b108              CBZ      r0,|L1.1356|
000548  2001              MOVS     r0,#1                 ;430
00054a  e7e1              B        |L1.1296|
                  |L1.1356|
00054c  2000              MOVS     r0,#0                 ;432
00054e  e7df              B        |L1.1296|
                  |L1.1360|
000550  2001              MOVS     r0,#1                 ;434
000552  e7dd              B        |L1.1296|
;;;436    
                          ENDP

                  _DispGIFImage PROC
;;;455    */
;;;456    static int _DispGIFImage(IMAGE_DESCRIPTOR * pDescriptor, int x0, int y0, int Transparency, int Disposal) {
000554  e92d4fff          PUSH     {r0-r11,lr}
000558  b08f              SUB      sp,sp,#0x3c
00055a  4607              MOV      r7,r0
00055c  4693              MOV      r11,r2
00055e  4698              MOV      r8,r3
;;;457      int Codesize, Index, OldIndex, XPos, YPos, YCnt, Pass, Interlace, XEnd;
;;;458      int Width, Height, NumColors, Cnt, BkColorIndex, ColorIndex;
;;;459      LCD_LOGPALETTE LogPalette;
;;;460      const LCD_PIXELINDEX * pTrans;
;;;461      Width     = pDescriptor->XSize;
000560  68b8              LDR      r0,[r7,#8]
000562  9009              STR      r0,[sp,#0x24]
;;;462      Height    = pDescriptor->YSize;
000564  68f8              LDR      r0,[r7,#0xc]
000566  9008              STR      r0,[sp,#0x20]
;;;463      NumColors = pDescriptor->NumColors;
000568  6978              LDR      r0,[r7,#0x14]
00056a  9007              STR      r0,[sp,#0x1c]
;;;464      XEnd      = Width + x0 - 1;
00056c  9910              LDR      r1,[sp,#0x40]
00056e  9809              LDR      r0,[sp,#0x24]
000570  4408              ADD      r0,r0,r1
000572  1e40              SUBS     r0,r0,#1
000574  900a              STR      r0,[sp,#0x28]
;;;465      BkColorIndex = LCD_GetBkColorIndex();
000576  f7fffffe          BL       LCD_GetBkColorIndex
00057a  9006              STR      r0,[sp,#0x18]
;;;466      /* Get color translation table  */
;;;467      LogPalette.NumEntries  = NumColors;
00057c  9807              LDR      r0,[sp,#0x1c]
00057e  9002              STR      r0,[sp,#8]
;;;468      LogPalette.HasTrans    = 0;
000580  2000              MOVS     r0,#0
000582  f88d000c          STRB     r0,[sp,#0xc]
;;;469      LogPalette.pPalEntries = _aColorTable;
000586  48a5              LDR      r0,|L1.2076|
000588  9004              STR      r0,[sp,#0x10]
;;;470      if ((pTrans = LCD_GetpPalConvTable((const LCD_LOGPALETTE *)&LogPalette)) == NULL) {
00058a  a802              ADD      r0,sp,#8
00058c  f7fffffe          BL       LCD_GetpPalConvTable
000590  9001              STR      r0,[sp,#4]
000592  b918              CBNZ     r0,|L1.1436|
;;;471        return 1; /* Error */
000594  2001              MOVS     r0,#1
                  |L1.1430|
;;;472      }
;;;473      Codesize  = _ReadU8();                 /* Read the LZW codesize */
;;;474      _InitLZW(Codesize);                    /* Initialize the LZW stack with the LZW codesize */
;;;475      Interlace = pDescriptor->Flags & 0x40; /* Evaluate if image is interlaced */
;;;476      for (YCnt = 0, YPos = y0, Pass = 0; YCnt < Height; YCnt++) {
;;;477        Cnt      = 0;
;;;478        OldIndex = -1;    
;;;479        for (XPos = x0; XPos <= XEnd; XPos++) {
;;;480          if (_LZWContext.sp > _LZWContext.aDecompBuffer) {
;;;481            Index = *--(_LZWContext.sp);
;;;482          } else {
;;;483            Index = _GetNextByte();
;;;484          }
;;;485          if (Index == -2) {
;;;486            return 0; /* End code */
;;;487          }
;;;488          if ((Index < 0) || (Index >= NumColors)) {
;;;489            /* If Index out of legal range stop decompressing */
;;;490            return 1; /* Error */
;;;491          }
;;;492          /* If current index equals old index increment counter */
;;;493          if ((Index == OldIndex) && (XPos <= XEnd)) {
;;;494            Cnt++;
;;;495          } else {
;;;496            if (Cnt) {
;;;497              if (OldIndex != Transparency) {
;;;498                LCD_SetColorIndex(*(pTrans + OldIndex));
;;;499                LCD_DrawHLine(XPos - Cnt - 1, YPos, XPos - 1);
;;;500              } else if (Disposal == 2) {
;;;501                LCD_SetColorIndex(BkColorIndex);
;;;502                LCD_DrawHLine(XPos - Cnt - 1, YPos, XPos - 1);
;;;503              }
;;;504              Cnt = 0;
;;;505            } else {
;;;506              if (OldIndex >= 0) {
;;;507                if (OldIndex != Transparency) {
;;;508                  LCD_SetPixelIndex(XPos - 1, YPos, *(pTrans + OldIndex));
;;;509                } else if (Disposal == 2) {
;;;510                  LCD_SetPixelIndex(XPos - 1, YPos, BkColorIndex);
;;;511                }
;;;512              }
;;;513            }
;;;514          }
;;;515          OldIndex = Index;
;;;516        }
;;;517        if ((OldIndex != Transparency) || (Disposal == 2)) {
;;;518          if (OldIndex != Transparency) {
;;;519            ColorIndex = *(pTrans + OldIndex);
;;;520          } else {
;;;521            ColorIndex = BkColorIndex;
;;;522          }
;;;523          if (Cnt) {
;;;524            LCD_SetColorIndex(ColorIndex);
;;;525            LCD_DrawHLine(XPos - Cnt - 1, YPos, XPos - 1);
;;;526          } else {
;;;527            LCD_SetPixelIndex(XEnd, YPos, ColorIndex);
;;;528          }
;;;529        }
;;;530        /* Adjust YPos if image is interlaced */
;;;531        if (Interlace) {
;;;532          YPos += _aInterlaceOffset[Pass];
;;;533          if ((YPos - y0) >= Height) {
;;;534            ++Pass;
;;;535            YPos = _aInterlaceYPos[Pass] + y0;
;;;536          }
;;;537        } else {
;;;538          YPos++;
;;;539        }
;;;540      }
;;;541      return 0;
;;;542    }
000596  b013              ADD      sp,sp,#0x4c
000598  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.1436|
00059c  f7fffffe          BL       _ReadU8
0005a0  900e              STR      r0,[sp,#0x38]         ;473
0005a2  980e              LDR      r0,[sp,#0x38]         ;474
0005a4  f7fffffe          BL       _InitLZW
0005a8  7c38              LDRB     r0,[r7,#0x10]         ;475
0005aa  f0000040          AND      r0,r0,#0x40           ;475
0005ae  900b              STR      r0,[sp,#0x2c]         ;475
0005b0  2000              MOVS     r0,#0                 ;476
0005b2  900d              STR      r0,[sp,#0x34]         ;476
0005b4  46da              MOV      r10,r11               ;476
0005b6  900c              STR      r0,[sp,#0x30]         ;476
0005b8  e099              B        |L1.1774|
                  |L1.1466|
0005ba  2600              MOVS     r6,#0                 ;477
0005bc  1e75              SUBS     r5,r6,#1              ;478
0005be  9c10              LDR      r4,[sp,#0x40]         ;479
0005c0  e059              B        |L1.1654|
                  |L1.1474|
0005c2  4893              LDR      r0,|L1.2064|
0005c4  f8d00cbc          LDR      r0,[r0,#0xcbc]        ;480  ; _LZWContext
0005c8  4992              LDR      r1,|L1.2068|
0005ca  4288              CMP      r0,r1                 ;480
0005cc  d909              BLS      |L1.1506|
0005ce  4890              LDR      r0,|L1.2064|
0005d0  f8d00cbc          LDR      r0,[r0,#0xcbc]        ;481  ; _LZWContext
0005d4  1e40              SUBS     r0,r0,#1              ;481
0005d6  498e              LDR      r1,|L1.2064|
0005d8  f8c10cbc          STR      r0,[r1,#0xcbc]        ;481  ; _LZWContext
0005dc  f8909000          LDRB     r9,[r0,#0]            ;481
0005e0  e002              B        |L1.1512|
                  |L1.1506|
0005e2  f7fffffe          BL       _GetNextByte
0005e6  4681              MOV      r9,r0                 ;483
                  |L1.1512|
0005e8  f1090002          ADD      r0,r9,#2              ;485
0005ec  b908              CBNZ     r0,|L1.1522|
0005ee  2000              MOVS     r0,#0                 ;486
0005f0  e7d1              B        |L1.1430|
                  |L1.1522|
0005f2  f1b90f00          CMP      r9,#0                 ;488
0005f6  db02              BLT      |L1.1534|
0005f8  9807              LDR      r0,[sp,#0x1c]         ;488
0005fa  4581              CMP      r9,r0                 ;488
0005fc  db01              BLT      |L1.1538|
                  |L1.1534|
0005fe  2001              MOVS     r0,#1                 ;490
000600  e7c9              B        |L1.1430|
                  |L1.1538|
000602  45a9              CMP      r9,r5                 ;493
000604  d104              BNE      |L1.1552|
000606  980a              LDR      r0,[sp,#0x28]         ;493
000608  4284              CMP      r4,r0                 ;493
00060a  dc01              BGT      |L1.1552|
00060c  1c76              ADDS     r6,r6,#1              ;494
00060e  e030              B        |L1.1650|
                  |L1.1552|
000610  b1de              CBZ      r6,|L1.1610|
000612  4545              CMP      r5,r8                 ;497
000614  d00b              BEQ      |L1.1582|
000616  9901              LDR      r1,[sp,#4]            ;498
000618  f8310015          LDRH     r0,[r1,r5,LSL #1]     ;498
00061c  f7fffffe          BL       LCD_SetColorIndex
000620  1e62              SUBS     r2,r4,#1              ;499
000622  1ba1              SUBS     r1,r4,r6              ;499
000624  1e48              SUBS     r0,r1,#1              ;499
000626  4651              MOV      r1,r10                ;499
000628  f7fffffe          BL       LCD_DrawHLine
00062c  e00b              B        |L1.1606|
                  |L1.1582|
00062e  981c              LDR      r0,[sp,#0x70]         ;500
000630  2802              CMP      r0,#2                 ;500
000632  d108              BNE      |L1.1606|
000634  9806              LDR      r0,[sp,#0x18]         ;501
000636  f7fffffe          BL       LCD_SetColorIndex
00063a  1e62              SUBS     r2,r4,#1              ;502
00063c  1ba1              SUBS     r1,r4,r6              ;502
00063e  1e48              SUBS     r0,r1,#1              ;502
000640  4651              MOV      r1,r10                ;502
000642  f7fffffe          BL       LCD_DrawHLine
                  |L1.1606|
000646  2600              MOVS     r6,#0                 ;504
000648  e013              B        |L1.1650|
                  |L1.1610|
00064a  2d00              CMP      r5,#0                 ;506
00064c  db11              BLT      |L1.1650|
00064e  4545              CMP      r5,r8                 ;507
000650  d007              BEQ      |L1.1634|
000652  9901              LDR      r1,[sp,#4]            ;508
000654  f8312015          LDRH     r2,[r1,r5,LSL #1]     ;508
000658  1e60              SUBS     r0,r4,#1              ;508
00065a  4651              MOV      r1,r10                ;508
00065c  f7fffffe          BL       LCD_SetPixelIndex
000660  e007              B        |L1.1650|
                  |L1.1634|
000662  981c              LDR      r0,[sp,#0x70]         ;509
000664  2802              CMP      r0,#2                 ;509
000666  d104              BNE      |L1.1650|
000668  1e60              SUBS     r0,r4,#1              ;510
00066a  4651              MOV      r1,r10                ;510
00066c  9a06              LDR      r2,[sp,#0x18]         ;510
00066e  f7fffffe          BL       LCD_SetPixelIndex
                  |L1.1650|
000672  464d              MOV      r5,r9                 ;515
000674  1c64              ADDS     r4,r4,#1              ;479
                  |L1.1654|
000676  980a              LDR      r0,[sp,#0x28]         ;479
000678  4284              CMP      r4,r0                 ;479
00067a  dda2              BLE      |L1.1474|
00067c  4545              CMP      r5,r8                 ;517
00067e  d102              BNE      |L1.1670|
000680  981c              LDR      r0,[sp,#0x70]         ;517
000682  2802              CMP      r0,#2                 ;517
000684  d118              BNE      |L1.1720|
                  |L1.1670|
000686  4545              CMP      r5,r8                 ;518
000688  d004              BEQ      |L1.1684|
00068a  9801              LDR      r0,[sp,#4]            ;519
00068c  f8300015          LDRH     r0,[r0,r5,LSL #1]     ;519
000690  9005              STR      r0,[sp,#0x14]         ;519
000692  e001              B        |L1.1688|
                  |L1.1684|
000694  9806              LDR      r0,[sp,#0x18]         ;521
000696  9005              STR      r0,[sp,#0x14]         ;521
                  |L1.1688|
000698  b14e              CBZ      r6,|L1.1710|
00069a  9805              LDR      r0,[sp,#0x14]         ;524
00069c  f7fffffe          BL       LCD_SetColorIndex
0006a0  1e62              SUBS     r2,r4,#1              ;525
0006a2  1ba1              SUBS     r1,r4,r6              ;525
0006a4  1e48              SUBS     r0,r1,#1              ;525
0006a6  4651              MOV      r1,r10                ;525
0006a8  f7fffffe          BL       LCD_DrawHLine
0006ac  e004              B        |L1.1720|
                  |L1.1710|
0006ae  4651              MOV      r1,r10                ;527
0006b0  9a05              LDR      r2,[sp,#0x14]         ;527
0006b2  980a              LDR      r0,[sp,#0x28]         ;527
0006b4  f7fffffe          BL       LCD_SetPixelIndex
                  |L1.1720|
0006b8  980b              LDR      r0,[sp,#0x2c]         ;531
0006ba  b198              CBZ      r0,|L1.1764|
0006bc  4958              LDR      r1,|L1.2080|
0006be  980c              LDR      r0,[sp,#0x30]         ;532
0006c0  f8510020          LDR      r0,[r1,r0,LSL #2]     ;532
0006c4  4482              ADD      r10,r10,r0            ;532
0006c6  ebaa010b          SUB      r1,r10,r11            ;533
0006ca  9808              LDR      r0,[sp,#0x20]         ;533
0006cc  4281              CMP      r1,r0                 ;533
0006ce  db0b              BLT      |L1.1768|
0006d0  980c              LDR      r0,[sp,#0x30]         ;534
0006d2  1c40              ADDS     r0,r0,#1              ;534
0006d4  900c              STR      r0,[sp,#0x30]         ;534
0006d6  4953              LDR      r1,|L1.2084|
0006d8  980c              LDR      r0,[sp,#0x30]         ;535
0006da  f8510020          LDR      r0,[r1,r0,LSL #2]     ;535
0006de  eb000a0b          ADD      r10,r0,r11            ;535
0006e2  e001              B        |L1.1768|
                  |L1.1764|
0006e4  f10a0a01          ADD      r10,r10,#1            ;538
                  |L1.1768|
0006e8  980d              LDR      r0,[sp,#0x34]         ;476
0006ea  1c40              ADDS     r0,r0,#1              ;476
0006ec  900d              STR      r0,[sp,#0x34]         ;476
                  |L1.1774|
0006ee  9908              LDR      r1,[sp,#0x20]         ;476
0006f0  980d              LDR      r0,[sp,#0x34]         ;476
0006f2  4288              CMP      r0,r1                 ;476
0006f4  f6ffaf61          BLT      |L1.1466|
0006f8  2000              MOVS     r0,#0                 ;541
0006fa  e74c              B        |L1.1430|
;;;543    
                          ENDP

                  _ReadColorMap PROC
;;;547    */
;;;548    static int _ReadColorMap(int NumColors) {
0006fc  e92d41f0          PUSH     {r4-r8,lr}
000700  4605              MOV      r5,r0
;;;549      int i;
;;;550      for (i = 0; i < NumColors; i++) {
000702  2400              MOVS     r4,#0
000704  e017              B        |L1.1846|
                  |L1.1798|
;;;551        U8 r, g, b;
;;;552        r = _ReadU8 ();
000706  f7fffffe          BL       _ReadU8
00070a  4606              MOV      r6,r0
;;;553        g = _ReadU8 ();
00070c  f7fffffe          BL       _ReadU8
000710  4607              MOV      r7,r0
;;;554        b = _ReadU8 ();
000712  f7fffffe          BL       _ReadU8
000716  4680              MOV      r8,r0
;;;555        if (_Source.RemBytes < 0) {
000718  4843              LDR      r0,|L1.2088|
00071a  6840              LDR      r0,[r0,#4]  ; _Source
00071c  2800              CMP      r0,#0
00071e  da02              BGE      |L1.1830|
;;;556          return 1; /* Error */
000720  2001              MOVS     r0,#1
                  |L1.1826|
;;;557        }
;;;558        _aColorTable[i] = r | ((U16)g << 8) | ((U32)b << 16);
;;;559      }
;;;560      return 0;
;;;561    }
000722  e8bd81f0          POP      {r4-r8,pc}
                  |L1.1830|
000726  ea462007          ORR      r0,r6,r7,LSL #8       ;558
00072a  ea404008          ORR      r0,r0,r8,LSL #16      ;558
00072e  493b              LDR      r1,|L1.2076|
000730  f8410024          STR      r0,[r1,r4,LSL #2]     ;558
000734  1c64              ADDS     r4,r4,#1              ;550
                  |L1.1846|
000736  42ac              CMP      r4,r5                 ;550
000738  dbe5              BLT      |L1.1798|
00073a  2000              MOVS     r0,#0                 ;560
00073c  e7f1              B        |L1.1826|
;;;562    
                          ENDP

                  _InitGIFDecoding PROC
;;;573    */
;;;574    static int _InitGIFDecoding(const U8 * pData, U32 NumBytes) {
00073e  b57c              PUSH     {r2-r6,lr}
000740  4605              MOV      r5,r0
000742  460c              MOV      r4,r1
;;;575      U8 acVersion[7] = {0};
000744  2000              MOVS     r0,#0
000746  9000              STR      r0,[sp,#0]
000748  9001              STR      r0,[sp,#4]
;;;576      _Source.pSrc     = pData;
00074a  4837              LDR      r0,|L1.2088|
00074c  6005              STR      r5,[r0,#0]  ; _Source
;;;577      _Source.RemBytes = NumBytes;
00074e  6044              STR      r4,[r0,#4]  ; _Source
;;;578      /* Check if the file is a legal GIF file by checking the 6 byte file header */
;;;579      _ReadBytes(acVersion, 6); if (!_Source.RemBytes) { return 0; }
000750  2106              MOVS     r1,#6
000752  4668              MOV      r0,sp
000754  f7fffffe          BL       _ReadBytes
000758  4833              LDR      r0,|L1.2088|
00075a  6840              LDR      r0,[r0,#4]  ; _Source
00075c  b908              CBNZ     r0,|L1.1890|
00075e  2000              MOVS     r0,#0
                  |L1.1888|
;;;580      if ( (acVersion[0] != 'G') || 
;;;581           (acVersion[1] != 'I') || 
;;;582           (acVersion[2] != 'F') || 
;;;583           (acVersion[3] != '8') ||
;;;584          ((acVersion[4] != '7') && (acVersion[4] != '9')) ||
;;;585           (acVersion[5] != 'a')) {
;;;586        return 1;
;;;587      }
;;;588      return 0;
;;;589    }
000760  bd7c              POP      {r2-r6,pc}
                  |L1.1890|
000762  f89d0000          LDRB     r0,[sp,#0]            ;580
000766  2847              CMP      r0,#0x47              ;580
000768  d117              BNE      |L1.1946|
00076a  f89d0001          LDRB     r0,[sp,#1]            ;581
00076e  2849              CMP      r0,#0x49              ;581
000770  d113              BNE      |L1.1946|
000772  f89d0002          LDRB     r0,[sp,#2]            ;582
000776  2846              CMP      r0,#0x46              ;582
000778  d10f              BNE      |L1.1946|
00077a  f89d0003          LDRB     r0,[sp,#3]            ;583
00077e  2838              CMP      r0,#0x38              ;583
000780  d10b              BNE      |L1.1946|
000782  f89d0004          LDRB     r0,[sp,#4]            ;584
000786  2837              CMP      r0,#0x37              ;584
000788  d003              BEQ      |L1.1938|
00078a  f89d0004          LDRB     r0,[sp,#4]            ;584
00078e  2839              CMP      r0,#0x39              ;584
000790  d103              BNE      |L1.1946|
                  |L1.1938|
000792  f89d0005          LDRB     r0,[sp,#5]            ;585
000796  2861              CMP      r0,#0x61              ;585
000798  d001              BEQ      |L1.1950|
                  |L1.1946|
00079a  2001              MOVS     r0,#1                 ;586
00079c  e7e0              B        |L1.1888|
                  |L1.1950|
00079e  2000              MOVS     r0,#0                 ;588
0007a0  e7de              B        |L1.1888|
;;;590    
                          ENDP

                  _GetImageDimension PROC
;;;600    */
;;;601    static int _GetImageDimension(int * pxSize, int * pySize) {
0007a2  e92d41f0          PUSH     {r4-r8,lr}
0007a6  4604              MOV      r4,r0
0007a8  460d              MOV      r5,r1
;;;602      int XSize, YSize;
;;;603      /* Read image size */
;;;604      XSize = _ReadU16();
0007aa  f7fffffe          BL       _ReadU16
0007ae  4606              MOV      r6,r0
;;;605      YSize = _ReadU16();
0007b0  f7fffffe          BL       _ReadU16
0007b4  4607              MOV      r7,r0
;;;606      if ((XSize > 2000) || (YSize > 2000)) {
0007b6  f5b66ffa          CMP      r6,#0x7d0
0007ba  dc02              BGT      |L1.1986|
0007bc  f5b76ffa          CMP      r7,#0x7d0
0007c0  dd02              BLE      |L1.1992|
                  |L1.1986|
;;;607        return 1; /* Error if image is too large */
0007c2  2001              MOVS     r0,#1
                  |L1.1988|
;;;608      }
;;;609      if (pxSize) {
;;;610        *pxSize = XSize;
;;;611      }
;;;612      if (pySize) {
;;;613        *pySize = YSize;
;;;614      }
;;;615      return 0;
;;;616    }
0007c4  e8bd81f0          POP      {r4-r8,pc}
                  |L1.1992|
0007c8  b104              CBZ      r4,|L1.1996|
0007ca  6026              STR      r6,[r4,#0]            ;610
                  |L1.1996|
0007cc  b105              CBZ      r5,|L1.2000|
0007ce  602f              STR      r7,[r5,#0]            ;613
                  |L1.2000|
0007d0  2000              MOVS     r0,#0                 ;615
0007d2  e7f7              B        |L1.1988|
;;;617    
                          ENDP

                  _GetGlobalColorTable PROC
;;;628    */
;;;629    static int _GetGlobalColorTable(int * pNumColors) {
0007d4  b570              PUSH     {r4-r6,lr}
0007d6  4604              MOV      r4,r0
;;;630      U8 Flags;
;;;631      int NumColors;
;;;632      /* Read flags from logical screen descriptor */
;;;633      Flags = _ReadU8 ();
0007d8  f7fffffe          BL       _ReadU8
0007dc  4606              MOV      r6,r0
;;;634      _ReadU8 ();
0007de  f7fffffe          BL       _ReadU8
;;;635      _ReadU8 ();
0007e2  f7fffffe          BL       _ReadU8
;;;636      if (_Source.RemBytes < 0) {
0007e6  4810              LDR      r0,|L1.2088|
0007e8  6840              LDR      r0,[r0,#4]  ; _Source
0007ea  2800              CMP      r0,#0
0007ec  da01              BGE      |L1.2034|
;;;637        return 1; /* Error */
0007ee  2001              MOVS     r0,#1
                  |L1.2032|
;;;638      }
;;;639      NumColors = 2 << (Flags & 0x7);
;;;640      if (Flags & 0x80) {
;;;641        /* Read global color table */
;;;642        if (_ReadColorMap(NumColors)) {
;;;643          return 1; /* Error */
;;;644        }
;;;645      }
;;;646      if (pNumColors) {
;;;647        *pNumColors = NumColors;
;;;648      }
;;;649      return 0;
;;;650    }
0007f0  bd70              POP      {r4-r6,pc}
                  |L1.2034|
0007f2  f0060107          AND      r1,r6,#7              ;639
0007f6  2002              MOVS     r0,#2                 ;639
0007f8  fa00f501          LSL      r5,r0,r1              ;639
0007fc  f0060080          AND      r0,r6,#0x80           ;640
000800  b1a0              CBZ      r0,|L1.2092|
000802  4628              MOV      r0,r5                 ;642
000804  f7fffffe          BL       _ReadColorMap
000808  b180              CBZ      r0,|L1.2092|
00080a  2001              MOVS     r0,#1                 ;643
00080c  e7f0              B        |L1.2032|
00080e  0000              DCW      0x0000
                  |L1.2064|
                          DCD      _LZWContext+0x3000
                  |L1.2068|
                          DCD      _LZWContext+0x3102
                  |L1.2072|
                          DCD      _aBuffer
                  |L1.2076|
                          DCD      _aColorTable
                  |L1.2080|
                          DCD      _aInterlaceOffset
                  |L1.2084|
                          DCD      _aInterlaceYPos
                  |L1.2088|
                          DCD      _Source
                  |L1.2092|
00082c  b104              CBZ      r4,|L1.2096|
00082e  6025              STR      r5,[r4,#0]            ;647
                  |L1.2096|
000830  2000              MOVS     r0,#0                 ;649
000832  e7dd              B        |L1.2032|
;;;651    
                          ENDP

                  _GetSizeAndColorTable PROC
;;;655    */
;;;656    static int _GetSizeAndColorTable(const U8 * pData, U32 NumBytes, int * pxSize, int * pySize, int * pNumColors) {
000834  e92d41f0          PUSH     {r4-r8,lr}
000838  4606              MOV      r6,r0
00083a  460f              MOV      r7,r1
00083c  4614              MOV      r4,r2
00083e  461d              MOV      r5,r3
000840  f8dd8018          LDR      r8,[sp,#0x18]
;;;657      /* Initialize decoding */
;;;658      if (_InitGIFDecoding(pData, NumBytes)) {
000844  4639              MOV      r1,r7
000846  4630              MOV      r0,r6
000848  f7fffffe          BL       _InitGIFDecoding
00084c  b110              CBZ      r0,|L1.2132|
;;;659        return 1; /* Error */
00084e  2001              MOVS     r0,#1
                  |L1.2128|
;;;660      }
;;;661      /* Get image size */
;;;662      if (_GetImageDimension(pxSize, pySize)) {
;;;663        return 1; /* Error */
;;;664      }
;;;665      /* Get global color table (if available) */
;;;666      if (_GetGlobalColorTable(pNumColors)) {
;;;667        return 1; /* Error */
;;;668      }
;;;669      return 0;
;;;670    }
000850  e8bd81f0          POP      {r4-r8,pc}
                  |L1.2132|
000854  4629              MOV      r1,r5                 ;662
000856  4620              MOV      r0,r4                 ;662
000858  f7fffffe          BL       _GetImageDimension
00085c  b108              CBZ      r0,|L1.2146|
00085e  2001              MOVS     r0,#1                 ;663
000860  e7f6              B        |L1.2128|
                  |L1.2146|
000862  4640              MOV      r0,r8                 ;666
000864  f7fffffe          BL       _GetGlobalColorTable
000868  b108              CBZ      r0,|L1.2158|
00086a  2001              MOVS     r0,#1                 ;667
00086c  e7f0              B        |L1.2128|
                  |L1.2158|
00086e  2000              MOVS     r0,#0                 ;669
000870  e7ee              B        |L1.2128|
;;;671    
                          ENDP

                  _GetGIFInfo PROC
;;;675    */
;;;676    static int _GetGIFInfo(const U8 * pData, U32 NumBytes, GUI_GIF_INFO * pInfo) {
000872  e92d47fc          PUSH     {r2-r10,lr}
000876  4680              MOV      r8,r0
000878  4689              MOV      r9,r1
00087a  4615              MOV      r5,r2
;;;677      U8 Flags, Introducer;
;;;678      int NumColors, ImageCnt;
;;;679      /* Initialize decoding and get size and global color table */
;;;680      if (_GetSizeAndColorTable(pData, NumBytes, &pInfo->xSize, &pInfo->ySize, &NumColors)) {
00087c  a801              ADD      r0,sp,#4
00087e  1d2b              ADDS     r3,r5,#4
000880  462a              MOV      r2,r5
000882  4649              MOV      r1,r9
000884  9000              STR      r0,[sp,#0]
000886  4640              MOV      r0,r8
000888  f7fffffe          BL       _GetSizeAndColorTable
00088c  b110              CBZ      r0,|L1.2196|
;;;681        return 1; /* Error */
00088e  2001              MOVS     r0,#1
                  |L1.2192|
;;;682      }
;;;683      ImageCnt = 0;
;;;684      /* Iterate over the blocks */
;;;685      do {
;;;686        Introducer = _ReadU8();
;;;687        switch (Introducer) {
;;;688        case GIF_INTRO_IMAGE:
;;;689          _SkipBytes(8);                /* Skip the first 8 bytes of the image descriptor */
;;;690          Flags = _ReadU8();            /* Only 'Flags' are intresting */
;;;691          if (Flags & 0x80) {
;;;692            _SkipBytes(NumColors * 3);  /* Skip local color table */
;;;693          }
;;;694          _SkipBytes(1);                /* Skip codesize */
;;;695          while (_GetDataBlock(0) > 0); /* Skip data blocks */
;;;696          ImageCnt++;
;;;697          break;
;;;698        case GIF_INTRO_TERMINATOR:
;;;699          break;
;;;700        case GIF_INTRO_EXTENSION:
;;;701          if (_ReadExtension(NULL, NULL, NULL)) { /* Skip image extension */
;;;702            return 1;
;;;703          }
;;;704          break;
;;;705        default:
;;;706          return 1;
;;;707        }
;;;708      } while (Introducer != GIF_INTRO_TERMINATOR); /* We do not support more than one image, so stop when the first terminator has been read */
;;;709      pInfo->NumImages = ImageCnt;
;;;710      return 0;
;;;711    }
000890  e8bd87fc          POP      {r2-r10,pc}
                  |L1.2196|
000894  2700              MOVS     r7,#0                 ;683
000896  bf00              NOP                            ;685
                  |L1.2200|
000898  f7fffffe          BL       _ReadU8
00089c  4604              MOV      r4,r0                 ;686
00089e  2c21              CMP      r4,#0x21              ;687
0008a0  d01e              BEQ      |L1.2272|
0008a2  2c2c              CMP      r4,#0x2c              ;687
0008a4  d002              BEQ      |L1.2220|
0008a6  2c3b              CMP      r4,#0x3b              ;687
0008a8  d123              BNE      |L1.2290|
0008aa  e018              B        |L1.2270|
                  |L1.2220|
0008ac  2008              MOVS     r0,#8                 ;689
0008ae  f7fffffe          BL       _SkipBytes
0008b2  f7fffffe          BL       _ReadU8
0008b6  4606              MOV      r6,r0                 ;690
0008b8  f0060080          AND      r0,r6,#0x80           ;691
0008bc  b120              CBZ      r0,|L1.2248|
0008be  9901              LDR      r1,[sp,#4]            ;692
0008c0  eb010041          ADD      r0,r1,r1,LSL #1       ;692
0008c4  f7fffffe          BL       _SkipBytes
                  |L1.2248|
0008c8  2001              MOVS     r0,#1                 ;694
0008ca  f7fffffe          BL       _SkipBytes
0008ce  bf00              NOP                            ;695
                  |L1.2256|
0008d0  2000              MOVS     r0,#0                 ;695
0008d2  f7fffffe          BL       _GetDataBlock
0008d6  2800              CMP      r0,#0                 ;695
0008d8  dcfa              BGT      |L1.2256|
0008da  1c7f              ADDS     r7,r7,#1              ;696
0008dc  e00b              B        |L1.2294|
                  |L1.2270|
0008de  e00a              B        |L1.2294|
                  |L1.2272|
0008e0  2200              MOVS     r2,#0                 ;701
0008e2  4611              MOV      r1,r2                 ;701
0008e4  4610              MOV      r0,r2                 ;701
0008e6  f7fffffe          BL       _ReadExtension
0008ea  b108              CBZ      r0,|L1.2288|
0008ec  2001              MOVS     r0,#1                 ;702
0008ee  e7cf              B        |L1.2192|
                  |L1.2288|
0008f0  e001              B        |L1.2294|
                  |L1.2290|
0008f2  2001              MOVS     r0,#1                 ;706
0008f4  e7cc              B        |L1.2192|
                  |L1.2294|
0008f6  bf00              NOP                            ;697
0008f8  2c3b              CMP      r4,#0x3b              ;708
0008fa  d1cd              BNE      |L1.2200|
0008fc  60af              STR      r7,[r5,#8]            ;709
0008fe  2000              MOVS     r0,#0                 ;710
000900  e7c6              B        |L1.2192|
;;;712    
                          ENDP

                  _GetImageInfo PROC
;;;716    */
;;;717    static int _GetImageInfo(const U8 * pData, U32 NumBytes, GUI_GIF_IMAGE_INFO * pInfo, int Index) {
000902  e92d47fc          PUSH     {r2-r10,lr}
000906  4681              MOV      r9,r0
000908  468a              MOV      r10,r1
00090a  4614              MOV      r4,r2
00090c  461f              MOV      r7,r3
;;;718      U8 Flags, Introducer;
;;;719      int NumColors, ImageCnt;
;;;720      /* Initialize decoding and get size and global color table */
;;;721      if (_GetSizeAndColorTable(pData, NumBytes, NULL, NULL, &NumColors)) {
00090e  a801              ADD      r0,sp,#4
000910  2300              MOVS     r3,#0
000912  461a              MOV      r2,r3
000914  4651              MOV      r1,r10
000916  9000              STR      r0,[sp,#0]
000918  4648              MOV      r0,r9
00091a  f7fffffe          BL       _GetSizeAndColorTable
00091e  b110              CBZ      r0,|L1.2342|
;;;722        return 1; /* Error */
000920  2001              MOVS     r0,#1
                  |L1.2338|
;;;723      }
;;;724      ImageCnt = 0;
;;;725      /* Iterate over the blocks */
;;;726      do {
;;;727        Introducer = _ReadU8();
;;;728        switch (Introducer) {
;;;729        case GIF_INTRO_IMAGE:
;;;730          if (Index == ImageCnt) {
;;;731            pInfo->xPos  = _ReadU16();
;;;732            pInfo->xPos  = _ReadU16();
;;;733            pInfo->xSize = _ReadU16();
;;;734            pInfo->ySize = _ReadU16();
;;;735            return 0;
;;;736          }
;;;737          _SkipBytes(8);                /* Skip the first 8 bytes of the image descriptor */
;;;738          Flags = _ReadU8();            /* Only 'Flags' are intresting */
;;;739          if (Flags & 0x80) {
;;;740            _SkipBytes(NumColors * 3);  /* Skip local color table */
;;;741          }
;;;742          _SkipBytes(1);                /* Skip codesize */
;;;743          while (_GetDataBlock(0) > 0); /* Skip data blocks */
;;;744          ImageCnt++;
;;;745          break;
;;;746        case GIF_INTRO_TERMINATOR:
;;;747          break;
;;;748        case GIF_INTRO_EXTENSION:
;;;749          if (_ReadExtension(NULL, (Index == ImageCnt) ? pInfo : NULL, NULL)) {
;;;750            return 1;
;;;751          }
;;;752          break;
;;;753        default:
;;;754          return 1;
;;;755        }
;;;756      } while (Introducer != GIF_INTRO_TERMINATOR); /* We do not support more than one image, so stop when the first terminator has been read */
;;;757      return 0;
;;;758    }
000922  e8bd87fc          POP      {r2-r10,pc}
                  |L1.2342|
000926  2600              MOVS     r6,#0                 ;724
000928  bf00              NOP                            ;726
                  |L1.2346|
00092a  f7fffffe          BL       _ReadU8
00092e  4605              MOV      r5,r0                 ;727
000930  4628              MOV      r0,r5                 ;728
000932  2d21              CMP      r5,#0x21              ;728
000934  d02e              BEQ      |L1.2452|
000936  282c              CMP      r0,#0x2c              ;728
000938  d002              BEQ      |L1.2368|
00093a  283b              CMP      r0,#0x3b              ;728
00093c  d138              BNE      |L1.2480|
00093e  e028              B        |L1.2450|
                  |L1.2368|
000940  42b7              CMP      r7,r6                 ;730
000942  d10d              BNE      |L1.2400|
000944  f7fffffe          BL       _ReadU16
000948  6020              STR      r0,[r4,#0]            ;731
00094a  f7fffffe          BL       _ReadU16
00094e  6020              STR      r0,[r4,#0]            ;732
000950  f7fffffe          BL       _ReadU16
000954  60a0              STR      r0,[r4,#8]            ;733
000956  f7fffffe          BL       _ReadU16
00095a  60e0              STR      r0,[r4,#0xc]          ;734
00095c  2000              MOVS     r0,#0                 ;735
00095e  e7e0              B        |L1.2338|
                  |L1.2400|
000960  2008              MOVS     r0,#8                 ;737
000962  f7fffffe          BL       _SkipBytes
000966  f7fffffe          BL       _ReadU8
00096a  4680              MOV      r8,r0                 ;738
00096c  f0080080          AND      r0,r8,#0x80           ;739
000970  b120              CBZ      r0,|L1.2428|
000972  9901              LDR      r1,[sp,#4]            ;740
000974  eb010041          ADD      r0,r1,r1,LSL #1       ;740
000978  f7fffffe          BL       _SkipBytes
                  |L1.2428|
00097c  2001              MOVS     r0,#1                 ;742
00097e  f7fffffe          BL       _SkipBytes
000982  bf00              NOP                            ;743
                  |L1.2436|
000984  2000              MOVS     r0,#0                 ;743
000986  f7fffffe          BL       _GetDataBlock
00098a  2800              CMP      r0,#0                 ;743
00098c  dcfa              BGT      |L1.2436|
00098e  1c76              ADDS     r6,r6,#1              ;744
000990  e010              B        |L1.2484|
                  |L1.2450|
000992  e00f              B        |L1.2484|
                  |L1.2452|
000994  42b7              CMP      r7,r6                 ;749
000996  d101              BNE      |L1.2460|
000998  4620              MOV      r0,r4                 ;749
00099a  e000              B        |L1.2462|
                  |L1.2460|
00099c  2000              MOVS     r0,#0                 ;749
                  |L1.2462|
00099e  4601              MOV      r1,r0                 ;749
0009a0  2200              MOVS     r2,#0                 ;749
0009a2  4610              MOV      r0,r2                 ;749
0009a4  f7fffffe          BL       _ReadExtension
0009a8  b108              CBZ      r0,|L1.2478|
0009aa  2001              MOVS     r0,#1                 ;750
0009ac  e7b9              B        |L1.2338|
                  |L1.2478|
0009ae  e001              B        |L1.2484|
                  |L1.2480|
0009b0  2001              MOVS     r0,#1                 ;754
0009b2  e7b6              B        |L1.2338|
                  |L1.2484|
0009b4  bf00              NOP                            ;745
0009b6  2d3b              CMP      r5,#0x3b              ;756
0009b8  d1b7              BNE      |L1.2346|
0009ba  2000              MOVS     r0,#0                 ;757
0009bc  e7b1              B        |L1.2338|
;;;759    
                          ENDP

                  _GetGIFComment PROC
;;;776    */
;;;777    static int _GetGIFComment(const U8 * pData, U32 NumBytes, U8 * pBuffer, int MaxSize, int Index) {
0009be  e92d4ffe          PUSH     {r1-r11,lr}
0009c2  4681              MOV      r9,r0
0009c4  468a              MOV      r10,r1
0009c6  4693              MOV      r11,r2
0009c8  461f              MOV      r7,r3
0009ca  f8dd8030          LDR      r8,[sp,#0x30]
;;;778      U8 Flags, Introducer;
;;;779      int NumColors, CommentCnt, Size;
;;;780      /* Initialize decoding and skip size and global color table */
;;;781      if (_GetSizeAndColorTable(pData, NumBytes, NULL, NULL, &NumColors)) {
0009ce  a802              ADD      r0,sp,#8
0009d0  2300              MOVS     r3,#0
0009d2  461a              MOV      r2,r3
0009d4  4651              MOV      r1,r10
0009d6  9000              STR      r0,[sp,#0]
0009d8  4648              MOV      r0,r9
0009da  f7fffffe          BL       _GetSizeAndColorTable
0009de  b110              CBZ      r0,|L1.2534|
;;;782        return 1; /* Error */
0009e0  2001              MOVS     r0,#1
                  |L1.2530|
;;;783      }
;;;784      CommentCnt = Size = 0;
;;;785      /* Iterate over the blocks */
;;;786      do {
;;;787        Introducer = _ReadU8();
;;;788        switch (Introducer) {
;;;789        case GIF_INTRO_IMAGE:
;;;790          _SkipBytes(8);                /* Skip the first 8 bytes of the image descriptor */
;;;791          Flags = _ReadU8();            /* Only 'Flags' are intresting */
;;;792          if (Flags & 0x80) {
;;;793            _SkipBytes(NumColors * 3);  /* Skip local color table */
;;;794          }
;;;795          _SkipBytes(1);                /* Skip codesize */
;;;796          while (_GetDataBlock(0) > 0); /* Skip data blocks */
;;;797          break;
;;;798        case GIF_INTRO_TERMINATOR:
;;;799          break;
;;;800        case GIF_INTRO_EXTENSION:
;;;801          _ReadComment((Index == CommentCnt) ? pBuffer : NULL, MaxSize, &Size);
;;;802          if ((Size) && (Index == CommentCnt)) {
;;;803            return 0;
;;;804          }
;;;805          break;
;;;806        default:
;;;807          return 1;
;;;808        }
;;;809      } while (Introducer != GIF_INTRO_TERMINATOR); /* We do not support more than one image, so stop when the first terminator has been read */
;;;810      return 1;
;;;811    }
0009e2  e8bd8ffe          POP      {r1-r11,pc}
                  |L1.2534|
0009e6  2600              MOVS     r6,#0                 ;784
0009e8  9601              STR      r6,[sp,#4]            ;784
0009ea  bf00              NOP                            ;786
                  |L1.2540|
0009ec  f7fffffe          BL       _ReadU8
0009f0  4604              MOV      r4,r0                 ;787
0009f2  4620              MOV      r0,r4                 ;788
0009f4  2c21              CMP      r4,#0x21              ;788
0009f6  d01d              BEQ      |L1.2612|
0009f8  282c              CMP      r0,#0x2c              ;788
0009fa  d002              BEQ      |L1.2562|
0009fc  283b              CMP      r0,#0x3b              ;788
0009fe  d12a              BNE      |L1.2646|
000a00  e017              B        |L1.2610|
                  |L1.2562|
000a02  2008              MOVS     r0,#8                 ;790
000a04  f7fffffe          BL       _SkipBytes
000a08  f7fffffe          BL       _ReadU8
000a0c  4605              MOV      r5,r0                 ;791
000a0e  f0050080          AND      r0,r5,#0x80           ;792
000a12  b120              CBZ      r0,|L1.2590|
000a14  9902              LDR      r1,[sp,#8]            ;793
000a16  eb010041          ADD      r0,r1,r1,LSL #1       ;793
000a1a  f7fffffe          BL       _SkipBytes
                  |L1.2590|
000a1e  2001              MOVS     r0,#1                 ;795
000a20  f7fffffe          BL       _SkipBytes
000a24  bf00              NOP                            ;796
                  |L1.2598|
000a26  2000              MOVS     r0,#0                 ;796
000a28  f7fffffe          BL       _GetDataBlock
000a2c  2800              CMP      r0,#0                 ;796
000a2e  dcfa              BGT      |L1.2598|
000a30  e013              B        |L1.2650|
                  |L1.2610|
000a32  e012              B        |L1.2650|
                  |L1.2612|
000a34  45b0              CMP      r8,r6                 ;801
000a36  d101              BNE      |L1.2620|
000a38  4659              MOV      r1,r11                ;801
000a3a  e000              B        |L1.2622|
                  |L1.2620|
000a3c  2100              MOVS     r1,#0                 ;801
                  |L1.2622|
000a3e  4608              MOV      r0,r1                 ;801
000a40  aa01              ADD      r2,sp,#4              ;801
000a42  4639              MOV      r1,r7                 ;801
000a44  f7fffffe          BL       _ReadComment
000a48  9801              LDR      r0,[sp,#4]            ;802
000a4a  b118              CBZ      r0,|L1.2644|
000a4c  45b0              CMP      r8,r6                 ;802
000a4e  d101              BNE      |L1.2644|
000a50  2000              MOVS     r0,#0                 ;803
000a52  e7c6              B        |L1.2530|
                  |L1.2644|
000a54  e001              B        |L1.2650|
                  |L1.2646|
000a56  2001              MOVS     r0,#1                 ;807
000a58  e7c3              B        |L1.2530|
                  |L1.2650|
000a5a  bf00              NOP                            ;797
000a5c  2c3b              CMP      r4,#0x3b              ;809
000a5e  d1c5              BNE      |L1.2540|
000a60  2001              MOVS     r0,#1                 ;810
000a62  e7be              B        |L1.2530|
;;;812    
                          ENDP

                  _ClearUnusedPixels PROC
;;;820    */
;;;821    static void _ClearUnusedPixels(int x0, int y0, IMAGE_DESCRIPTOR * pDescriptor, GUI_GIF_IMAGE_INFO * pInfo) {
000a64  e92d41f0          PUSH     {r4-r8,lr}
000a68  4606              MOV      r6,r0
000a6a  460f              MOV      r7,r1
000a6c  4615              MOV      r5,r2
000a6e  461c              MOV      r4,r3
;;;822      LCD_SetColorIndex(LCD_GetBkColorIndex());
000a70  f7fffffe          BL       LCD_GetBkColorIndex
000a74  4680              MOV      r8,r0
000a76  f7fffffe          BL       LCD_SetColorIndex
;;;823      if (pDescriptor->YPos > pInfo->yPos) {
000a7a  6868              LDR      r0,[r5,#4]
000a7c  6861              LDR      r1,[r4,#4]
000a7e  4288              CMP      r0,r1
000a80  dd16              BLE      |L1.2736|
;;;824        LCD_FillRect(x0 + pInfo->xPos,
000a82  f8d4c000          LDR      r12,[r4,#0]
000a86  44b4              ADD      r12,r12,r6
000a88  f8d48008          LDR      r8,[r4,#8]
000a8c  44c4              ADD      r12,r12,r8
000a8e  f1ac0201          SUB      r2,r12,#1
000a92  f8d5c004          LDR      r12,[r5,#4]
000a96  44bc              ADD      r12,r12,r7
000a98  f1ac0301          SUB      r3,r12,#1
000a9c  f8d4c004          LDR      r12,[r4,#4]
000aa0  eb0c0107          ADD      r1,r12,r7
000aa4  f8d4c000          LDR      r12,[r4,#0]
000aa8  eb0c0006          ADD      r0,r12,r6
000aac  f7fffffe          BL       LCD_FillRect
                  |L1.2736|
;;;825                     y0 + pInfo->yPos,
;;;826                     x0 + pInfo->xPos + pInfo->xSize - 1,
;;;827                     y0 + pDescriptor->YPos - 1);
;;;828      }
;;;829      if (pDescriptor->XPos > pInfo->xPos) {
000ab0  6828              LDR      r0,[r5,#0]
000ab2  6821              LDR      r1,[r4,#0]
000ab4  4288              CMP      r0,r1
000ab6  dd16              BLE      |L1.2790|
;;;830        LCD_FillRect(x0 + pInfo->xPos,
000ab8  f8d4c004          LDR      r12,[r4,#4]
000abc  44bc              ADD      r12,r12,r7
000abe  f8d4800c          LDR      r8,[r4,#0xc]
000ac2  44c4              ADD      r12,r12,r8
000ac4  f1ac0301          SUB      r3,r12,#1
000ac8  f8d5c000          LDR      r12,[r5,#0]
000acc  44b4              ADD      r12,r12,r6
000ace  f1ac0201          SUB      r2,r12,#1
000ad2  f8d4c004          LDR      r12,[r4,#4]
000ad6  eb0c0107          ADD      r1,r12,r7
000ada  f8d4c000          LDR      r12,[r4,#0]
000ade  eb0c0006          ADD      r0,r12,r6
000ae2  f7fffffe          BL       LCD_FillRect
                  |L1.2790|
;;;831                     y0 + pInfo->yPos,
;;;832                     x0 + pDescriptor->XPos - 1,
;;;833                     y0 + pInfo->yPos + pInfo->ySize - 1);
;;;834      }
;;;835      if ((pDescriptor->YPos + pDescriptor->YSize) < (pInfo->yPos + pInfo->ySize)) {
000ae6  68e9              LDR      r1,[r5,#0xc]
000ae8  6868              LDR      r0,[r5,#4]
000aea  4408              ADD      r0,r0,r1
000aec  68e2              LDR      r2,[r4,#0xc]
000aee  6861              LDR      r1,[r4,#4]
000af0  4411              ADD      r1,r1,r2
000af2  4288              CMP      r0,r1
000af4  da1d              BGE      |L1.2866|
;;;836        LCD_FillRect(x0 + pInfo->xPos,
000af6  f8d4c004          LDR      r12,[r4,#4]
000afa  44bc              ADD      r12,r12,r7
000afc  f8d4800c          LDR      r8,[r4,#0xc]
000b00  44c4              ADD      r12,r12,r8
000b02  f1ac0301          SUB      r3,r12,#1
000b06  f8d4c000          LDR      r12,[r4,#0]
000b0a  44b4              ADD      r12,r12,r6
000b0c  f8d48008          LDR      r8,[r4,#8]
000b10  44c4              ADD      r12,r12,r8
000b12  f1ac0201          SUB      r2,r12,#1
000b16  f8d5c004          LDR      r12,[r5,#4]
000b1a  44bc              ADD      r12,r12,r7
000b1c  f8d5800c          LDR      r8,[r5,#0xc]
000b20  44c4              ADD      r12,r12,r8
000b22  f1ac0101          SUB      r1,r12,#1
000b26  f8d4c000          LDR      r12,[r4,#0]
000b2a  eb0c0006          ADD      r0,r12,r6
000b2e  f7fffffe          BL       LCD_FillRect
                  |L1.2866|
;;;837                     y0 + pDescriptor->YPos + pDescriptor->YSize - 1,
;;;838                     x0 + pInfo->xPos + pInfo->xSize - 1,
;;;839                     y0 + pInfo->yPos + pInfo->ySize - 1);
;;;840      }
;;;841      if ((pDescriptor->XPos + pDescriptor->XSize) < (pInfo->xPos + pInfo->xSize)) {
000b32  68a9              LDR      r1,[r5,#8]
000b34  6828              LDR      r0,[r5,#0]
000b36  4408              ADD      r0,r0,r1
000b38  68a2              LDR      r2,[r4,#8]
000b3a  6821              LDR      r1,[r4,#0]
000b3c  4411              ADD      r1,r1,r2
000b3e  4288              CMP      r0,r1
000b40  da1d              BGE      |L1.2942|
;;;842        LCD_FillRect(x0 + pDescriptor->XPos + pDescriptor->XSize - 1,
000b42  f8d4c004          LDR      r12,[r4,#4]
000b46  44bc              ADD      r12,r12,r7
000b48  f8d4800c          LDR      r8,[r4,#0xc]
000b4c  44c4              ADD      r12,r12,r8
000b4e  f1ac0301          SUB      r3,r12,#1
000b52  f8d4c000          LDR      r12,[r4,#0]
000b56  44b4              ADD      r12,r12,r6
000b58  f8d48008          LDR      r8,[r4,#8]
000b5c  44c4              ADD      r12,r12,r8
000b5e  f1ac0201          SUB      r2,r12,#1
000b62  f8d5c000          LDR      r12,[r5,#0]
000b66  44b4              ADD      r12,r12,r6
000b68  f8d58008          LDR      r8,[r5,#8]
000b6c  44c4              ADD      r12,r12,r8
000b6e  f1ac0001          SUB      r0,r12,#1
000b72  f8d4c004          LDR      r12,[r4,#4]
000b76  eb0c0107          ADD      r1,r12,r7
000b7a  f7fffffe          BL       LCD_FillRect
                  |L1.2942|
;;;843                     y0 + pInfo->yPos,
;;;844                     x0 + pInfo->xPos + pInfo->xSize - 1,
;;;845                     y0 + pInfo->yPos + pInfo->ySize - 1);
;;;846      }
;;;847    }
000b7e  e8bd81f0          POP      {r4-r8,pc}
;;;848    
                          ENDP

                  _DrawGIFImage PROC
;;;865    */
;;;866    static int _DrawGIFImage(const U8 * pData, U32 NumBytes, int x0, int y0, int Index) {
000b82  e92d47f0          PUSH     {r4-r10,lr}
000b86  b090              SUB      sp,sp,#0x40
000b88  4681              MOV      r9,r0
000b8a  468a              MOV      r10,r1
000b8c  4617              MOV      r7,r2
000b8e  4698              MOV      r8,r3
000b90  9d18              LDR      r5,[sp,#0x60]
;;;867      U8 Disposal;
;;;868      int XSize, YSize, TransIndex, ImageCnt;
;;;869      IMAGE_DESCRIPTOR Descriptor = {0};
000b92  2118              MOVS     r1,#0x18
000b94  a806              ADD      r0,sp,#0x18
000b96  f7fffffe          BL       __aeabi_memclr4
;;;870      GUI_GIF_IMAGE_INFO Info = {0};
000b9a  2114              MOVS     r1,#0x14
000b9c  a801              ADD      r0,sp,#4
000b9e  f7fffffe          BL       __aeabi_memclr4
;;;871      U8 Introducer;
;;;872      ImageCnt   =  0;
000ba2  2400              MOVS     r4,#0
;;;873      TransIndex = -1;
000ba4  1e60              SUBS     r0,r4,#1
000ba6  900c              STR      r0,[sp,#0x30]
;;;874      /* Initialize decoding and get size and global color table */
;;;875      if (_GetSizeAndColorTable(pData, NumBytes, &XSize, &YSize, &Descriptor.NumColors)) {
000ba8  a80b              ADD      r0,sp,#0x2c
000baa  ab0d              ADD      r3,sp,#0x34
000bac  aa0e              ADD      r2,sp,#0x38
000bae  4651              MOV      r1,r10
000bb0  9000              STR      r0,[sp,#0]
000bb2  4648              MOV      r0,r9
000bb4  f7fffffe          BL       _GetSizeAndColorTable
000bb8  b118              CBZ      r0,|L1.3010|
;;;876        return 1; /* Error */
000bba  2001              MOVS     r0,#1
                  |L1.3004|
;;;877      }
;;;878      /* Iterate over the blocks */
;;;879      do {
;;;880        Introducer = _ReadU8();
;;;881        switch (Introducer) {
;;;882        case GIF_INTRO_IMAGE:
;;;883          /* Read image descriptor */
;;;884          Descriptor.XPos  = _ReadU16();
;;;885          Descriptor.YPos  = _ReadU16();
;;;886          Descriptor.XSize = _ReadU16();
;;;887          Descriptor.YSize = _ReadU16();
;;;888          Descriptor.Flags = _ReadU8 ();
;;;889          if (_Source.RemBytes < 0) {
;;;890            return 1; /* Error */
;;;891          }
;;;892          if (Descriptor.Flags & 0x80) {
;;;893            /* Read local color table */
;;;894            if (_ReadColorMap(Descriptor.NumColors)) {
;;;895              return 1; /* Error */
;;;896            }
;;;897          }
;;;898          if (ImageCnt == Index - 1) {
;;;899            Info.xPos  = Descriptor.XPos;
;;;900            Info.yPos  = Descriptor.YPos;
;;;901            Info.xSize = Descriptor.XSize;
;;;902            Info.ySize = Descriptor.YSize;
;;;903          }
;;;904          if (Index == ImageCnt) {
;;;905            if (Disposal == 2) {
;;;906              _ClearUnusedPixels(x0, y0, &Descriptor, &Info);
;;;907            }
;;;908            if (_DispGIFImage(&Descriptor, x0 + Descriptor.XPos, y0 + Descriptor.YPos, TransIndex, Disposal)) {
;;;909              return 1; /* Error */
;;;910            }
;;;911            if (_ReadU8() != 0) {
;;;912              return 1; /* Error */
;;;913            }
;;;914            return 0;
;;;915          } else {
;;;916            _ReadU8();                    /* Skip codesize */
;;;917            while (_GetDataBlock(0) > 0); /* Skip data blocks */
;;;918          }
;;;919          ImageCnt++;
;;;920          break;
;;;921        case GIF_INTRO_TERMINATOR:
;;;922          break;
;;;923        case GIF_INTRO_EXTENSION:
;;;924          /* Read image extension */
;;;925          if (_ReadExtension(&TransIndex, (Index == ImageCnt) ? &Info : NULL, (Index == ImageCnt) ? &Disposal : NULL)) {
;;;926            return 1;
;;;927          }
;;;928          break;
;;;929        default:
;;;930          return 1;
;;;931        }
;;;932      } while (Introducer != GIF_INTRO_TERMINATOR); /* We do not support more than one image, so stop when the first terminator has been read */
;;;933      return 0;
;;;934    }
000bbc  b010              ADD      sp,sp,#0x40
000bbe  e8bd87f0          POP      {r4-r10,pc}
                  |L1.3010|
000bc2  bf00              NOP                            ;879
                  |L1.3012|
000bc4  f7fffffe          BL       _ReadU8
000bc8  4606              MOV      r6,r0                 ;880
000bca  4630              MOV      r0,r6                 ;881
000bcc  2e21              CMP      r6,#0x21              ;881
000bce  d05b              BEQ      |L1.3208|
000bd0  282c              CMP      r0,#0x2c              ;881
000bd2  d002              BEQ      |L1.3034|
000bd4  283b              CMP      r0,#0x3b              ;881
000bd6  d16a              BNE      |L1.3246|
000bd8  e055              B        |L1.3206|
                  |L1.3034|
000bda  f7fffffe          BL       _ReadU16
000bde  9006              STR      r0,[sp,#0x18]         ;884
000be0  f7fffffe          BL       _ReadU16
000be4  9007              STR      r0,[sp,#0x1c]         ;885
000be6  f7fffffe          BL       _ReadU16
000bea  9008              STR      r0,[sp,#0x20]         ;886
000bec  f7fffffe          BL       _ReadU16
000bf0  9009              STR      r0,[sp,#0x24]         ;887
000bf2  f7fffffe          BL       _ReadU8
000bf6  900a              STR      r0,[sp,#0x28]         ;888
000bf8  4882              LDR      r0,|L1.3588|
000bfa  6840              LDR      r0,[r0,#4]            ;889  ; _Source
000bfc  2800              CMP      r0,#0                 ;889
000bfe  da01              BGE      |L1.3076|
000c00  2001              MOVS     r0,#1                 ;890
000c02  e7db              B        |L1.3004|
                  |L1.3076|
000c04  980a              LDR      r0,[sp,#0x28]         ;892
000c06  f0000080          AND      r0,r0,#0x80           ;892
000c0a  b128              CBZ      r0,|L1.3096|
000c0c  980b              LDR      r0,[sp,#0x2c]         ;894
000c0e  f7fffffe          BL       _ReadColorMap
000c12  b108              CBZ      r0,|L1.3096|
000c14  2001              MOVS     r0,#1                 ;895
000c16  e7d1              B        |L1.3004|
                  |L1.3096|
000c18  1e68              SUBS     r0,r5,#1              ;898
000c1a  42a0              CMP      r0,r4                 ;898
000c1c  d107              BNE      |L1.3118|
000c1e  9806              LDR      r0,[sp,#0x18]         ;899
000c20  9001              STR      r0,[sp,#4]            ;899
000c22  9807              LDR      r0,[sp,#0x1c]         ;900
000c24  9002              STR      r0,[sp,#8]            ;900
000c26  9808              LDR      r0,[sp,#0x20]         ;901
000c28  9003              STR      r0,[sp,#0xc]          ;901
000c2a  9809              LDR      r0,[sp,#0x24]         ;902
000c2c  9004              STR      r0,[sp,#0x10]         ;902
                  |L1.3118|
000c2e  42a5              CMP      r5,r4                 ;904
000c30  d11f              BNE      |L1.3186|
000c32  f89d003c          LDRB     r0,[sp,#0x3c]         ;905
000c36  2802              CMP      r0,#2                 ;905
000c38  d105              BNE      |L1.3142|
000c3a  ab01              ADD      r3,sp,#4              ;906
000c3c  aa06              ADD      r2,sp,#0x18           ;906
000c3e  4641              MOV      r1,r8                 ;906
000c40  4638              MOV      r0,r7                 ;906
000c42  f7fffffe          BL       _ClearUnusedPixels
                  |L1.3142|
000c46  f89d003c          LDRB     r0,[sp,#0x3c]         ;908
000c4a  9000              STR      r0,[sp,#0]            ;908
000c4c  9807              LDR      r0,[sp,#0x1c]         ;908
000c4e  eb000208          ADD      r2,r0,r8              ;908
000c52  9806              LDR      r0,[sp,#0x18]         ;908
000c54  19c1              ADDS     r1,r0,r7              ;908
000c56  a806              ADD      r0,sp,#0x18           ;908
000c58  9b0c              LDR      r3,[sp,#0x30]         ;908
000c5a  f7fffffe          BL       _DispGIFImage
000c5e  b108              CBZ      r0,|L1.3172|
000c60  2001              MOVS     r0,#1                 ;909
000c62  e7ab              B        |L1.3004|
                  |L1.3172|
000c64  f7fffffe          BL       _ReadU8
000c68  b108              CBZ      r0,|L1.3182|
000c6a  2001              MOVS     r0,#1                 ;912
000c6c  e7a6              B        |L1.3004|
                  |L1.3182|
000c6e  2000              MOVS     r0,#0                 ;914
000c70  e7a4              B        |L1.3004|
                  |L1.3186|
000c72  f7fffffe          BL       _ReadU8
000c76  bf00              NOP                            ;917
                  |L1.3192|
000c78  2000              MOVS     r0,#0                 ;917
000c7a  f7fffffe          BL       _GetDataBlock
000c7e  2800              CMP      r0,#0                 ;917
000c80  dcfa              BGT      |L1.3192|
000c82  1c64              ADDS     r4,r4,#1              ;919
000c84  e015              B        |L1.3250|
                  |L1.3206|
000c86  e014              B        |L1.3250|
                  |L1.3208|
000c88  42a5              CMP      r5,r4                 ;925
000c8a  d101              BNE      |L1.3216|
000c8c  a80f              ADD      r0,sp,#0x3c           ;925
000c8e  e000              B        |L1.3218|
                  |L1.3216|
000c90  2000              MOVS     r0,#0                 ;925
                  |L1.3218|
000c92  4602              MOV      r2,r0                 ;925
000c94  42a5              CMP      r5,r4                 ;925
000c96  d101              BNE      |L1.3228|
000c98  a801              ADD      r0,sp,#4              ;925
000c9a  e000              B        |L1.3230|
                  |L1.3228|
000c9c  2000              MOVS     r0,#0                 ;925
                  |L1.3230|
000c9e  4601              MOV      r1,r0                 ;925
000ca0  a80c              ADD      r0,sp,#0x30           ;925
000ca2  f7fffffe          BL       _ReadExtension
000ca6  b108              CBZ      r0,|L1.3244|
000ca8  2001              MOVS     r0,#1                 ;926
000caa  e787              B        |L1.3004|
                  |L1.3244|
000cac  e001              B        |L1.3250|
                  |L1.3246|
000cae  2001              MOVS     r0,#1                 ;930
000cb0  e784              B        |L1.3004|
                  |L1.3250|
000cb2  bf00              NOP                            ;920
000cb4  2e3b              CMP      r6,#0x3b              ;932
000cb6  d185              BNE      |L1.3012|
000cb8  2000              MOVS     r0,#0                 ;933
000cba  e77f              B        |L1.3004|
;;;935    
                          ENDP

                  GUI_GIF_GetXSize PROC
;;;948    */
;;;949    int GUI_GIF_GetXSize(const void * pGIF) {
000cbc  b538              PUSH     {r3-r5,lr}
000cbe  4604              MOV      r4,r0
;;;950      const U8 * pSrc;
;;;951      if (!pGIF) {
000cc0  b90c              CBNZ     r4,|L1.3270|
;;;952        return 0;
000cc2  2000              MOVS     r0,#0
                  |L1.3268|
;;;953      }
;;;954      pSrc = (const U8 *)pGIF + 6;
;;;955      return GUI__Read16(&pSrc);
;;;956    }
000cc4  bd38              POP      {r3-r5,pc}
                  |L1.3270|
000cc6  1da0              ADDS     r0,r4,#6              ;954
000cc8  9000              STR      r0,[sp,#0]            ;954
000cca  4668              MOV      r0,sp                 ;955
000ccc  f7fffffe          BL       GUI__Read16
000cd0  e7f8              B        |L1.3268|
;;;957    
                          ENDP

                  GUI_GIF_GetYSize PROC
;;;964    */
;;;965    int GUI_GIF_GetYSize(const void * pGIF) {
000cd2  b538              PUSH     {r3-r5,lr}
000cd4  4604              MOV      r4,r0
;;;966      const U8 * pSrc;
;;;967      if (!pGIF) {
000cd6  b90c              CBNZ     r4,|L1.3292|
;;;968        return 0;
000cd8  2000              MOVS     r0,#0
                  |L1.3290|
;;;969      }
;;;970      pSrc = (const U8 *)pGIF + 8;
;;;971      return GUI__Read16(&pSrc);
;;;972    }
000cda  bd38              POP      {r3-r5,pc}
                  |L1.3292|
000cdc  f1040008          ADD      r0,r4,#8              ;970
000ce0  9000              STR      r0,[sp,#0]            ;970
000ce2  4668              MOV      r0,sp                 ;971
000ce4  f7fffffe          BL       GUI__Read16
000ce8  e7f7              B        |L1.3290|
;;;973    
                          ENDP

                  GUI_GIF_DrawEx PROC
;;;977    */
;;;978    int GUI_GIF_DrawEx(const void * pGIF, U32 NumBytes, int x0, int y0, int Index) {
000cea  e92d4ff0          PUSH     {r4-r11,lr}
000cee  b085              SUB      sp,sp,#0x14
000cf0  4606              MOV      r6,r0
000cf2  4688              MOV      r8,r1
000cf4  4614              MOV      r4,r2
000cf6  461d              MOV      r5,r3
000cf8  f8dd9038          LDR      r9,[sp,#0x38]
;;;979      const U8 * pSrc;
;;;980      int Result, OldColorIndex;
;;;981      #if (GUI_WINSUPPORT)
;;;982        int Width, Height;
;;;983        GUI_RECT r;
;;;984        Width  = GUI_GIF_GetXSize(pGIF);
000cfc  4630              MOV      r0,r6
000cfe  f7fffffe          BL       GUI_GIF_GetXSize
000d02  4682              MOV      r10,r0
;;;985        Height = GUI_GIF_GetYSize(pGIF);
000d04  4630              MOV      r0,r6
000d06  f7fffffe          BL       GUI_GIF_GetYSize
000d0a  4683              MOV      r11,r0
;;;986      #endif
;;;987      GUI_LOCK();
;;;988      OldColorIndex = LCD_GetColorIndex();
000d0c  f7fffffe          BL       LCD_GetColorIndex
000d10  9003              STR      r0,[sp,#0xc]
;;;989      pSrc          = (const U8 *)pGIF;
000d12  9604              STR      r6,[sp,#0x10]
;;;990      #if (GUI_WINSUPPORT)
;;;991        WM_ADDORG(x0,y0);
000d14  483c              LDR      r0,|L1.3592|
000d16  6c00              LDR      r0,[r0,#0x40]  ; GUI_Context
000d18  4404              ADD      r4,r4,r0
000d1a  483b              LDR      r0,|L1.3592|
000d1c  6c40              LDR      r0,[r0,#0x44]  ; GUI_Context
000d1e  4405              ADD      r5,r5,r0
;;;992        r.x1 = (r.x0 = x0) + Width - 1;
000d20  b220              SXTH     r0,r4
000d22  f8ad0004          STRH     r0,[sp,#4]
000d26  4450              ADD      r0,r0,r10
000d28  1e40              SUBS     r0,r0,#1
000d2a  b200              SXTH     r0,r0
000d2c  f8ad0008          STRH     r0,[sp,#8]
;;;993        r.y1 = (r.y0 = y0) + Height - 1;
000d30  b228              SXTH     r0,r5
000d32  f8ad0006          STRH     r0,[sp,#6]
000d36  4458              ADD      r0,r0,r11
000d38  1e40              SUBS     r0,r0,#1
000d3a  b200              SXTH     r0,r0
000d3c  f8ad000a          STRH     r0,[sp,#0xa]
;;;994        WM_ITERATE_START(&r) {
000d40  a801              ADD      r0,sp,#4
000d42  f7fffffe          BL       WM__InitIVRSearch
000d46  b168              CBZ      r0,|L1.3428|
000d48  bf00              NOP      
                  |L1.3402|
;;;995      #endif
;;;996      Result = _DrawGIFImage(pSrc, NumBytes, x0, y0, Index);
000d4a  462b              MOV      r3,r5
000d4c  4622              MOV      r2,r4
000d4e  4641              MOV      r1,r8
000d50  f8cd9000          STR      r9,[sp,#0]
000d54  9804              LDR      r0,[sp,#0x10]
000d56  f7fffffe          BL       _DrawGIFImage
000d5a  4607              MOV      r7,r0
;;;997      #if (GUI_WINSUPPORT)
;;;998        } WM_ITERATE_END();
000d5c  f7fffffe          BL       WM__GetNextIVR
000d60  2800              CMP      r0,#0
000d62  d1f2              BNE      |L1.3402|
                  |L1.3428|
;;;999      #endif
;;;1000     LCD_SetColorIndex(OldColorIndex);
000d64  9803              LDR      r0,[sp,#0xc]
000d66  f7fffffe          BL       LCD_SetColorIndex
;;;1001     GUI_UNLOCK();
;;;1002     return Result;
000d6a  4638              MOV      r0,r7
;;;1003   }
000d6c  b005              ADD      sp,sp,#0x14
000d6e  e8bd8ff0          POP      {r4-r11,pc}
;;;1004   
                          ENDP

                  GUI_GIF_Draw PROC
;;;1008   */
;;;1009   int GUI_GIF_Draw(const void * pGIF, U32 NumBytes, int x0, int y0) {
000d72  b5f8              PUSH     {r3-r7,lr}
000d74  4604              MOV      r4,r0
000d76  460d              MOV      r5,r1
000d78  4616              MOV      r6,r2
000d7a  461f              MOV      r7,r3
;;;1010     return GUI_GIF_DrawEx(pGIF, NumBytes, x0, y0, 0);
000d7c  2000              MOVS     r0,#0
000d7e  463b              MOV      r3,r7
000d80  4632              MOV      r2,r6
000d82  4629              MOV      r1,r5
000d84  9000              STR      r0,[sp,#0]
000d86  4620              MOV      r0,r4
000d88  f7fffffe          BL       GUI_GIF_DrawEx
;;;1011   }
000d8c  bdf8              POP      {r3-r7,pc}
;;;1012   
                          ENDP

                  GUI_GIF_GetInfo PROC
;;;1016   */
;;;1017   int GUI_GIF_GetInfo(const void * pGIF, U32 NumBytes, GUI_GIF_INFO * pInfo) {
000d8e  e92d41f0          PUSH     {r4-r8,lr}
000d92  4604              MOV      r4,r0
000d94  460d              MOV      r5,r1
000d96  4616              MOV      r6,r2
;;;1018     const U8 * pSrc;
;;;1019     pSrc = (const U8 *)pGIF;
000d98  4627              MOV      r7,r4
;;;1020     if (_GetGIFInfo(pSrc, NumBytes, pInfo)) {
000d9a  4632              MOV      r2,r6
000d9c  4629              MOV      r1,r5
000d9e  4638              MOV      r0,r7
000da0  f7fffffe          BL       _GetGIFInfo
000da4  b110              CBZ      r0,|L1.3500|
;;;1021       return 1;
000da6  2001              MOVS     r0,#1
                  |L1.3496|
;;;1022     }
;;;1023     return 0;
;;;1024   }
000da8  e8bd81f0          POP      {r4-r8,pc}
                  |L1.3500|
000dac  2000              MOVS     r0,#0                 ;1023
000dae  e7fb              B        |L1.3496|
;;;1025   
                          ENDP

                  GUI_GIF_GetImageInfo PROC
;;;1029   */
;;;1030   int GUI_GIF_GetImageInfo(const void * pGIF, U32 NumBytes, GUI_GIF_IMAGE_INFO * pInfo, int Index) {
000db0  e92d41f0          PUSH     {r4-r8,lr}
000db4  4604              MOV      r4,r0
000db6  460d              MOV      r5,r1
000db8  4616              MOV      r6,r2
000dba  461f              MOV      r7,r3
;;;1031     const U8 * pSrc;
;;;1032     pSrc = (const U8 *)pGIF;
000dbc  46a0              MOV      r8,r4
;;;1033     if (_GetImageInfo(pSrc, NumBytes, pInfo, Index)) {
000dbe  463b              MOV      r3,r7
000dc0  4632              MOV      r2,r6
000dc2  4629              MOV      r1,r5
000dc4  4640              MOV      r0,r8
000dc6  f7fffffe          BL       _GetImageInfo
000dca  b110              CBZ      r0,|L1.3538|
;;;1034       return 1;
000dcc  2001              MOVS     r0,#1
                  |L1.3534|
;;;1035     }
;;;1036     return 0;
;;;1037   }
000dce  e8bd81f0          POP      {r4-r8,pc}
                  |L1.3538|
000dd2  2000              MOVS     r0,#0                 ;1036
000dd4  e7fb              B        |L1.3534|
;;;1038   
                          ENDP

                  GUI_GIF_GetComment PROC
;;;1042   */
;;;1043   int GUI_GIF_GetComment(const void * pGIF, U32 NumBytes, U8 * pBuffer, int MaxSize, int Index) {
000dd6  e92d43f8          PUSH     {r3-r9,lr}
000dda  4604              MOV      r4,r0
000ddc  460d              MOV      r5,r1
000dde  4616              MOV      r6,r2
000de0  461f              MOV      r7,r3
000de2  f8dd8020          LDR      r8,[sp,#0x20]
;;;1044     const U8 * pSrc;
;;;1045     pSrc = (const U8 *)pGIF;
000de6  46a1              MOV      r9,r4
;;;1046     if (_GetGIFComment(pSrc, NumBytes, pBuffer, MaxSize, Index)) {
000de8  463b              MOV      r3,r7
000dea  4632              MOV      r2,r6
000dec  4629              MOV      r1,r5
000dee  4648              MOV      r0,r9
000df0  f8cd8000          STR      r8,[sp,#0]
000df4  f7fffffe          BL       _GetGIFComment
000df8  b110              CBZ      r0,|L1.3584|
;;;1047       return 1;
000dfa  2001              MOVS     r0,#1
                  |L1.3580|
;;;1048     }
;;;1049     return 0;
;;;1050   }
000dfc  e8bd83f8          POP      {r3-r9,pc}
                  |L1.3584|
000e00  2000              MOVS     r0,#0                 ;1049
000e02  e7fb              B        |L1.3580|
;;;1051   
                          ENDP

                  |L1.3588|
                          DCD      _Source
                  |L1.3592|
                          DCD      GUI_Context

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  _LZWContext
                          %        15604
                  _aColorTable
                          %        1024
                  _aBuffer
                          %        256

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  _aMaskTbl
                          DCD      0x00000000
                          DCD      0x00000001
                          DCD      0x00000003
                          DCD      0x00000007
                          DCD      0x0000000f
                          DCD      0x0000001f
                          DCD      0x0000003f
                          DCD      0x0000007f
                          DCD      0x000000ff
                          DCD      0x000001ff
                          DCD      0x000003ff
                          DCD      0x000007ff
                          DCD      0x00000fff
                          DCD      0x00001fff
                          DCD      0x00003fff
                          DCD      0x00007fff
                  _aInterlaceOffset
                          DCD      0x00000008
                          DCD      0x00000008
                          DCD      0x00000004
                          DCD      0x00000002
                  _aInterlaceYPos
                          DCD      0x00000000
                          DCD      0x00000004
                          DCD      0x00000002
                          DCD      0x00000001

                          AREA ||.data||, DATA, ALIGN=2

                  _Source
                          %        8
