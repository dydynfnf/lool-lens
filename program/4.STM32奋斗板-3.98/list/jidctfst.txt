; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\jidctfst.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\jidctfst.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -I.\GUI\AntiAlias -I.\GUI\Config -I.\GUI\ConvertColor -I.\GUI\ConvertMono -I.\GUI\Core -I.\GUI\Font -I.\GUI\GUI_X -I.\GUI\JPEG -I.\GUI\LCDDriver -I.\GUI\MemDev -I.\GUI\MultiLayer -I.\GUI\Widget -I.\GUI\WM -IC:\Users\Administrator\Desktop\gui\STM32·Ü¶·°å-3.98\RTE -Id:\Keil_v5\ARM\PACK\ARM\CMSIS\4.3.0\CMSIS\Include -Id:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.1.0\Device\Include -D__UVISION_VERSION=515 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\jidctfst.crf GUI\JPEG\jidctfst.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=1

                  jpeg_idct_ifast PROC
;;;167    GLOBAL(void)
;;;168    jpeg_idct_ifast (j_decompress_ptr cinfo, jpeg_component_info * compptr,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;169    		 JCOEFPTR coef_block,
;;;170    		 JSAMPARRAY output_buf, JDIMENSION output_col)
;;;171    {
000004  b0cc              SUB      sp,sp,#0x130
;;;172      DCTELEM tmp0, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7;
;;;173      DCTELEM tmp10, tmp11, tmp12, tmp13;
;;;174      DCTELEM z5, z10, z11, z12, z13;
;;;175      JCOEFPTR inptr;
;;;176      IFAST_MULT_TYPE * quantptr;
;;;177      int * wsptr;
;;;178      JSAMPROW outptr;
;;;179      JSAMPLE *range_limit = IDCT_range_limit(cinfo);
000006  f8dd8130          LDR      r8,[sp,#0x130]
00000a  f8d88144          LDR      r8,[r8,#0x144]
00000e  f1080780          ADD      r7,r8,#0x80
;;;180      int ctr;
;;;181      int workspace[DCTSIZE2];	/* buffers data between passes */
;;;182      SHIFT_TEMPS			/* for DESCALE */
;;;183      ISHIFT_TEMPS			/* for IDESCALE */
;;;184    
;;;185      /* Pass 1: process columns from input, store into work array. */
;;;186    
;;;187      inptr = coef_block;
000012  994e              LDR      r1,[sp,#0x138]
;;;188      quantptr = (IFAST_MULT_TYPE *) compptr->dct_table;
000014  f8dd8134          LDR      r8,[sp,#0x134]
000018  f8d83050          LDR      r3,[r8,#0x50]
;;;189      wsptr = workspace;
00001c  4668              MOV      r0,sp
;;;190      for (ctr = DCTSIZE; ctr > 0; ctr--) {
00001e  f04f0808          MOV      r8,#8
000022  f8cd8100          STR      r8,[sp,#0x100]
000026  e132              B        |L1.654|
                  |L1.40|
;;;191        /* Due to quantization, we will usually find that many of the input
;;;192         * coefficients are zero, especially the AC terms.  We can exploit this
;;;193         * by short-circuiting the IDCT calculation for any column in which all
;;;194         * the AC terms are zero.  In that case each output is equal to the
;;;195         * DC coefficient (with scale factor as needed).
;;;196         * With typical images and quantization tables, half or more of the
;;;197         * column DCT calculations can be simplified this way.
;;;198         */
;;;199        
;;;200        if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
000028  f8b18010          LDRH     r8,[r1,#0x10]
00002c  f1b80f00          CMP      r8,#0
000030  d137              BNE      |L1.162|
000032  f8b18020          LDRH     r8,[r1,#0x20]
000036  f1b80f00          CMP      r8,#0
00003a  d132              BNE      |L1.162|
;;;201    	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
00003c  f8b18030          LDRH     r8,[r1,#0x30]
000040  f1b80f00          CMP      r8,#0
000044  d12d              BNE      |L1.162|
000046  f8b18040          LDRH     r8,[r1,#0x40]
00004a  f1b80f00          CMP      r8,#0
00004e  d128              BNE      |L1.162|
;;;202    	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
000050  f8b18050          LDRH     r8,[r1,#0x50]
000054  f1b80f00          CMP      r8,#0
000058  d123              BNE      |L1.162|
00005a  f8b18060          LDRH     r8,[r1,#0x60]
00005e  f1b80f00          CMP      r8,#0
000062  d11e              BNE      |L1.162|
;;;203    	inptr[DCTSIZE*7] == 0) {
000064  f8b18070          LDRH     r8,[r1,#0x70]
000068  f1b80f00          CMP      r8,#0
00006c  d119              BNE      |L1.162|
;;;204          /* AC terms all zero */
;;;205          int dcval = (int) DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
00006e  f9b1b000          LDRSH    r11,[r1,#0]
000072  f8d3e000          LDR      lr,[r3,#0]
000076  fb0bf80e          MUL      r8,r11,lr
;;;206    
;;;207          wsptr[DCTSIZE*0] = dcval;
00007a  f8c08000          STR      r8,[r0,#0]
;;;208          wsptr[DCTSIZE*1] = dcval;
00007e  f8c08020          STR      r8,[r0,#0x20]
;;;209          wsptr[DCTSIZE*2] = dcval;
000082  f8c08040          STR      r8,[r0,#0x40]
;;;210          wsptr[DCTSIZE*3] = dcval;
000086  f8c08060          STR      r8,[r0,#0x60]
;;;211          wsptr[DCTSIZE*4] = dcval;
00008a  f8c08080          STR      r8,[r0,#0x80]
;;;212          wsptr[DCTSIZE*5] = dcval;
00008e  f8c080a0          STR      r8,[r0,#0xa0]
;;;213          wsptr[DCTSIZE*6] = dcval;
000092  f8c080c0          STR      r8,[r0,#0xc0]
;;;214          wsptr[DCTSIZE*7] = dcval;
000096  f8c080e0          STR      r8,[r0,#0xe0]
;;;215          
;;;216          inptr++;			/* advance pointers to next column */
00009a  1c89              ADDS     r1,r1,#2
;;;217          quantptr++;
00009c  1d1b              ADDS     r3,r3,#4
;;;218          wsptr++;
00009e  1d00              ADDS     r0,r0,#4
;;;219          continue;
0000a0  e0ef              B        |L1.642|
                  |L1.162|
;;;220        }
;;;221        
;;;222        /* Even part */
;;;223    
;;;224        tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
0000a2  f9b18000          LDRSH    r8,[r1,#0]
0000a6  f8d3b000          LDR      r11,[r3,#0]
0000aa  fb08fa0b          MUL      r10,r8,r11
;;;225        tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
0000ae  f9b18020          LDRSH    r8,[r1,#0x20]
0000b2  f8d3b040          LDR      r11,[r3,#0x40]
0000b6  fb08f80b          MUL      r8,r8,r11
0000ba  f8cd812c          STR      r8,[sp,#0x12c]
;;;226        tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
0000be  f9b18040          LDRSH    r8,[r1,#0x40]
0000c2  f8d3b080          LDR      r11,[r3,#0x80]
0000c6  fb08f80b          MUL      r8,r8,r11
0000ca  f8cd8128          STR      r8,[sp,#0x128]
;;;227        tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
0000ce  f9b18060          LDRSH    r8,[r1,#0x60]
0000d2  f8d3b0c0          LDR      r11,[r3,#0xc0]
0000d6  fb08f80b          MUL      r8,r8,r11
0000da  f8cd8124          STR      r8,[sp,#0x124]
;;;228    
;;;229        tmp10 = tmp0 + tmp2;	/* phase 3 */
0000de  f8dd8128          LDR      r8,[sp,#0x128]
0000e2  44d0              ADD      r8,r8,r10
0000e4  f8cd8120          STR      r8,[sp,#0x120]
;;;230        tmp11 = tmp0 - tmp2;
0000e8  f8dd8128          LDR      r8,[sp,#0x128]
0000ec  ebaa0808          SUB      r8,r10,r8
0000f0  f8cd811c          STR      r8,[sp,#0x11c]
;;;231    
;;;232        tmp13 = tmp1 + tmp3;	/* phases 5-3 */
0000f4  f8ddb124          LDR      r11,[sp,#0x124]
0000f8  f8dd812c          LDR      r8,[sp,#0x12c]
0000fc  eb080c0b          ADD      r12,r8,r11
;;;233        tmp12 = MULTIPLY(tmp1 - tmp3, FIX_1_414213562) - tmp13; /* 2*c4 */
000100  f8ddb124          LDR      r11,[sp,#0x124]
000104  f8dd812c          LDR      r8,[sp,#0x12c]
000108  eba8080b          SUB      r8,r8,r11
00010c  f44f7bb5          MOV      r11,#0x16a
000110  fb08f80b          MUL      r8,r8,r11
000114  ebcc2828          RSB      r8,r12,r8,ASR #8
000118  f8cd8118          STR      r8,[sp,#0x118]
;;;234    
;;;235        tmp0 = tmp10 + tmp13;	/* phase 2 */
00011c  f8dd8120          LDR      r8,[sp,#0x120]
000120  eb080a0c          ADD      r10,r8,r12
;;;236        tmp3 = tmp10 - tmp13;
000124  f8dd8120          LDR      r8,[sp,#0x120]
000128  eba8080c          SUB      r8,r8,r12
00012c  f8cd8124          STR      r8,[sp,#0x124]
;;;237        tmp1 = tmp11 + tmp12;
000130  f8ddb118          LDR      r11,[sp,#0x118]
000134  f8dd811c          LDR      r8,[sp,#0x11c]
000138  44d8              ADD      r8,r8,r11
00013a  f8cd812c          STR      r8,[sp,#0x12c]
;;;238        tmp2 = tmp11 - tmp12;
00013e  f8ddb118          LDR      r11,[sp,#0x118]
000142  f8dd811c          LDR      r8,[sp,#0x11c]
000146  eba8080b          SUB      r8,r8,r11
00014a  f8cd8128          STR      r8,[sp,#0x128]
;;;239        
;;;240        /* Odd part */
;;;241    
;;;242        tmp4 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
00014e  f9b18010          LDRSH    r8,[r1,#0x10]
000152  f8d3b020          LDR      r11,[r3,#0x20]
000156  fb08f90b          MUL      r9,r8,r11
;;;243        tmp5 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
00015a  f9b18030          LDRSH    r8,[r1,#0x30]
00015e  f8d3b060          LDR      r11,[r3,#0x60]
000162  fb08f40b          MUL      r4,r8,r11
;;;244        tmp6 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
000166  f9b18050          LDRSH    r8,[r1,#0x50]
00016a  f8d3b0a0          LDR      r11,[r3,#0xa0]
00016e  fb08f50b          MUL      r5,r8,r11
;;;245        tmp7 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
000172  f9b18070          LDRSH    r8,[r1,#0x70]
000176  f8d3b0e0          LDR      r11,[r3,#0xe0]
00017a  fb08f60b          MUL      r6,r8,r11
;;;246    
;;;247        z13 = tmp6 + tmp5;		/* phase 6 */
00017e  eb050804          ADD      r8,r5,r4
000182  f8cd8104          STR      r8,[sp,#0x104]
;;;248        z10 = tmp6 - tmp5;
000186  eba50804          SUB      r8,r5,r4
00018a  f8cd8110          STR      r8,[sp,#0x110]
;;;249        z11 = tmp4 + tmp7;
00018e  eb090806          ADD      r8,r9,r6
000192  f8cd810c          STR      r8,[sp,#0x10c]
;;;250        z12 = tmp4 - tmp7;
000196  eba90806          SUB      r8,r9,r6
00019a  f8cd8108          STR      r8,[sp,#0x108]
;;;251    
;;;252        tmp7 = z11 + z13;		/* phase 5 */
00019e  f8ddb104          LDR      r11,[sp,#0x104]
0001a2  f8dd810c          LDR      r8,[sp,#0x10c]
0001a6  eb08060b          ADD      r6,r8,r11
;;;253        tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */
0001aa  f8ddb104          LDR      r11,[sp,#0x104]
0001ae  f8dd810c          LDR      r8,[sp,#0x10c]
0001b2  eba8080b          SUB      r8,r8,r11
0001b6  f44f7bb5          MOV      r11,#0x16a
0001ba  fb08f80b          MUL      r8,r8,r11
0001be  ea4f2828          ASR      r8,r8,#8
0001c2  f8cd811c          STR      r8,[sp,#0x11c]
;;;254    
;;;255        z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
0001c6  f8ddb108          LDR      r11,[sp,#0x108]
0001ca  f8dd8110          LDR      r8,[sp,#0x110]
0001ce  44d8              ADD      r8,r8,r11
0001d0  f2401bd9          MOV      r11,#0x1d9
0001d4  fb08f80b          MUL      r8,r8,r11
0001d8  ea4f2828          ASR      r8,r8,#8
0001dc  f8cd8114          STR      r8,[sp,#0x114]
;;;256        tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
0001e0  f2401b15          MOV      r11,#0x115
0001e4  f8dd8108          LDR      r8,[sp,#0x108]
0001e8  fb08fb0b          MUL      r11,r8,r11
0001ec  f8dd8114          LDR      r8,[sp,#0x114]
0001f0  ebc8282b          RSB      r8,r8,r11,ASR #8
0001f4  f8cd8120          STR      r8,[sp,#0x120]
;;;257        tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
0001f8  f46f7b27          MVN      r11,#0x29c
0001fc  f8dd8110          LDR      r8,[sp,#0x110]
000200  fb08fb0b          MUL      r11,r8,r11
000204  f8dd8114          LDR      r8,[sp,#0x114]
000208  eb08282b          ADD      r8,r8,r11,ASR #8
00020c  f8cd8118          STR      r8,[sp,#0x118]
;;;258    
;;;259        tmp6 = tmp12 - tmp7;	/* phase 2 */
000210  f8dd8118          LDR      r8,[sp,#0x118]
000214  eba80506          SUB      r5,r8,r6
;;;260        tmp5 = tmp11 - tmp6;
000218  f8dd811c          LDR      r8,[sp,#0x11c]
00021c  eba80405          SUB      r4,r8,r5
;;;261        tmp4 = tmp10 + tmp5;
000220  f8dd8120          LDR      r8,[sp,#0x120]
000224  eb080904          ADD      r9,r8,r4
;;;262    
;;;263        wsptr[DCTSIZE*0] = (int) (tmp0 + tmp7);
000228  eb0a0806          ADD      r8,r10,r6
00022c  f8c08000          STR      r8,[r0,#0]
;;;264        wsptr[DCTSIZE*7] = (int) (tmp0 - tmp7);
000230  ebaa0806          SUB      r8,r10,r6
000234  f8c080e0          STR      r8,[r0,#0xe0]
;;;265        wsptr[DCTSIZE*1] = (int) (tmp1 + tmp6);
000238  f8dd812c          LDR      r8,[sp,#0x12c]
00023c  44a8              ADD      r8,r8,r5
00023e  f8c08020          STR      r8,[r0,#0x20]
;;;266        wsptr[DCTSIZE*6] = (int) (tmp1 - tmp6);
000242  f8dd812c          LDR      r8,[sp,#0x12c]
000246  eba80805          SUB      r8,r8,r5
00024a  f8c080c0          STR      r8,[r0,#0xc0]
;;;267        wsptr[DCTSIZE*2] = (int) (tmp2 + tmp5);
00024e  f8dd8128          LDR      r8,[sp,#0x128]
000252  44a0              ADD      r8,r8,r4
000254  f8c08040          STR      r8,[r0,#0x40]
;;;268        wsptr[DCTSIZE*5] = (int) (tmp2 - tmp5);
000258  f8dd8128          LDR      r8,[sp,#0x128]
00025c  eba80804          SUB      r8,r8,r4
000260  f8c080a0          STR      r8,[r0,#0xa0]
;;;269        wsptr[DCTSIZE*4] = (int) (tmp3 + tmp4);
000264  f8dd8124          LDR      r8,[sp,#0x124]
000268  44c8              ADD      r8,r8,r9
00026a  f8c08080          STR      r8,[r0,#0x80]
;;;270        wsptr[DCTSIZE*3] = (int) (tmp3 - tmp4);
00026e  f8dd8124          LDR      r8,[sp,#0x124]
000272  eba80809          SUB      r8,r8,r9
000276  f8c08060          STR      r8,[r0,#0x60]
;;;271    
;;;272        inptr++;			/* advance pointers to next column */
00027a  1c89              ADDS     r1,r1,#2
;;;273        quantptr++;
00027c  1d1b              ADDS     r3,r3,#4
;;;274        wsptr++;
00027e  1d00              ADDS     r0,r0,#4
000280  bf00              NOP                            ;219
                  |L1.642|
000282  f8dd8100          LDR      r8,[sp,#0x100]        ;190
000286  f1a80801          SUB      r8,r8,#1              ;190
00028a  f8cd8100          STR      r8,[sp,#0x100]        ;190
                  |L1.654|
00028e  f8dd8100          LDR      r8,[sp,#0x100]        ;190
000292  f1b80f00          CMP      r8,#0                 ;190
000296  f73faec7          BGT      |L1.40|
;;;275      }
;;;276      
;;;277      /* Pass 2: process rows from work array, store into output array. */
;;;278      /* Note that we must descale the results by a factor of 8 == 2**3, */
;;;279      /* and also undo the PASS1_BITS scaling. */
;;;280    
;;;281      wsptr = workspace;
00029a  4668              MOV      r0,sp
;;;282      for (ctr = 0; ctr < DCTSIZE; ctr++) {
00029c  f04f0800          MOV      r8,#0
0002a0  f8cd8100          STR      r8,[sp,#0x100]
0002a4  e134              B        |L1.1296|
                  |L1.678|
;;;283        outptr = output_buf[ctr] + output_col;
0002a6  f8ddb100          LDR      r11,[sp,#0x100]
0002aa  f8dd813c          LDR      r8,[sp,#0x13c]
0002ae  f858b02b          LDR      r11,[r8,r11,LSL #2]
0002b2  f8dd8164          LDR      r8,[sp,#0x164]
0002b6  eb0b0208          ADD      r2,r11,r8
;;;284        /* Rows of zeroes can be exploited in the same way as we did with columns.
;;;285         * However, the column calculation has created many nonzero AC terms, so
;;;286         * the simplification applies less often (typically 5% to 10% of the time).
;;;287         * On machines with very fast multiplication, it's possible that the
;;;288         * test takes more time than it's worth.  In that case this section
;;;289         * may be commented out.
;;;290         */
;;;291        
;;;292    #ifndef NO_ZERO_ROW_TEST
;;;293        if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
0002ba  f8d08004          LDR      r8,[r0,#4]
0002be  f1b80f00          CMP      r8,#0
0002c2  d135              BNE      |L1.816|
0002c4  f8d08008          LDR      r8,[r0,#8]
0002c8  f1b80f00          CMP      r8,#0
0002cc  d130              BNE      |L1.816|
0002ce  f8d0800c          LDR      r8,[r0,#0xc]
0002d2  f1b80f00          CMP      r8,#0
0002d6  d12b              BNE      |L1.816|
0002d8  f8d08010          LDR      r8,[r0,#0x10]
0002dc  f1b80f00          CMP      r8,#0
0002e0  d126              BNE      |L1.816|
;;;294    	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
0002e2  f8d08014          LDR      r8,[r0,#0x14]
0002e6  f1b80f00          CMP      r8,#0
0002ea  d121              BNE      |L1.816|
0002ec  f8d08018          LDR      r8,[r0,#0x18]
0002f0  f1b80f00          CMP      r8,#0
0002f4  d11c              BNE      |L1.816|
0002f6  f8d0801c          LDR      r8,[r0,#0x1c]
0002fa  f1b80f00          CMP      r8,#0
0002fe  d117              BNE      |L1.816|
;;;295          /* AC terms all zero */
;;;296          JSAMPLE dcval = range_limit[IDESCALE(wsptr[0], PASS1_BITS+3)
000300  f8b0b000          LDRH     r11,[r0,#0]
000304  f3cb1b49          UBFX     r11,r11,#5,#10
000308  f817800b          LDRB     r8,[r7,r11]
;;;297    				  & RANGE_MASK];
;;;298          
;;;299          outptr[0] = dcval;
00030c  f8828000          STRB     r8,[r2,#0]
;;;300          outptr[1] = dcval;
000310  f8828001          STRB     r8,[r2,#1]
;;;301          outptr[2] = dcval;
000314  f8828002          STRB     r8,[r2,#2]
;;;302          outptr[3] = dcval;
000318  f8828003          STRB     r8,[r2,#3]
;;;303          outptr[4] = dcval;
00031c  f8828004          STRB     r8,[r2,#4]
;;;304          outptr[5] = dcval;
000320  f8828005          STRB     r8,[r2,#5]
;;;305          outptr[6] = dcval;
000324  f8828006          STRB     r8,[r2,#6]
;;;306          outptr[7] = dcval;
000328  f8828007          STRB     r8,[r2,#7]
;;;307    
;;;308          wsptr += DCTSIZE;		/* advance pointer to next row */
00032c  3020              ADDS     r0,r0,#0x20
;;;309          continue;
00032e  e0e9              B        |L1.1284|
                  |L1.816|
;;;310        }
;;;311    #endif
;;;312        
;;;313        /* Even part */
;;;314    
;;;315        tmp10 = ((DCTELEM) wsptr[0] + (DCTELEM) wsptr[4]);
000330  f8d0b010          LDR      r11,[r0,#0x10]
000334  f8d08000          LDR      r8,[r0,#0]
000338  44d8              ADD      r8,r8,r11
00033a  f8cd8120          STR      r8,[sp,#0x120]
;;;316        tmp11 = ((DCTELEM) wsptr[0] - (DCTELEM) wsptr[4]);
00033e  f8d0b010          LDR      r11,[r0,#0x10]
000342  f8d08000          LDR      r8,[r0,#0]
000346  eba8080b          SUB      r8,r8,r11
00034a  f8cd811c          STR      r8,[sp,#0x11c]
;;;317    
;;;318        tmp13 = ((DCTELEM) wsptr[2] + (DCTELEM) wsptr[6]);
00034e  f8d0b018          LDR      r11,[r0,#0x18]
000352  f8d08008          LDR      r8,[r0,#8]
000356  eb080c0b          ADD      r12,r8,r11
;;;319        tmp12 = MULTIPLY((DCTELEM) wsptr[2] - (DCTELEM) wsptr[6], FIX_1_414213562)
00035a  f8d0b018          LDR      r11,[r0,#0x18]
00035e  f8d08008          LDR      r8,[r0,#8]
000362  eba8080b          SUB      r8,r8,r11
000366  f44f7bb5          MOV      r11,#0x16a
00036a  fb08f80b          MUL      r8,r8,r11
00036e  ebcc2828          RSB      r8,r12,r8,ASR #8
000372  f8cd8118          STR      r8,[sp,#0x118]
;;;320    	    - tmp13;
;;;321    
;;;322        tmp0 = tmp10 + tmp13;
000376  f8dd8120          LDR      r8,[sp,#0x120]
00037a  eb080a0c          ADD      r10,r8,r12
;;;323        tmp3 = tmp10 - tmp13;
00037e  f8dd8120          LDR      r8,[sp,#0x120]
000382  eba8080c          SUB      r8,r8,r12
000386  f8cd8124          STR      r8,[sp,#0x124]
;;;324        tmp1 = tmp11 + tmp12;
00038a  f8ddb118          LDR      r11,[sp,#0x118]
00038e  f8dd811c          LDR      r8,[sp,#0x11c]
000392  44d8              ADD      r8,r8,r11
000394  f8cd812c          STR      r8,[sp,#0x12c]
;;;325        tmp2 = tmp11 - tmp12;
000398  f8ddb118          LDR      r11,[sp,#0x118]
00039c  f8dd811c          LDR      r8,[sp,#0x11c]
0003a0  eba8080b          SUB      r8,r8,r11
0003a4  f8cd8128          STR      r8,[sp,#0x128]
;;;326    
;;;327        /* Odd part */
;;;328    
;;;329        z13 = (DCTELEM) wsptr[5] + (DCTELEM) wsptr[3];
0003a8  f8d0b00c          LDR      r11,[r0,#0xc]
0003ac  f8d08014          LDR      r8,[r0,#0x14]
0003b0  44d8              ADD      r8,r8,r11
0003b2  f8cd8104          STR      r8,[sp,#0x104]
;;;330        z10 = (DCTELEM) wsptr[5] - (DCTELEM) wsptr[3];
0003b6  f8d0b00c          LDR      r11,[r0,#0xc]
0003ba  f8d08014          LDR      r8,[r0,#0x14]
0003be  eba8080b          SUB      r8,r8,r11
0003c2  f8cd8110          STR      r8,[sp,#0x110]
;;;331        z11 = (DCTELEM) wsptr[1] + (DCTELEM) wsptr[7];
0003c6  f8d0b01c          LDR      r11,[r0,#0x1c]
0003ca  f8d08004          LDR      r8,[r0,#4]
0003ce  44d8              ADD      r8,r8,r11
0003d0  f8cd810c          STR      r8,[sp,#0x10c]
;;;332        z12 = (DCTELEM) wsptr[1] - (DCTELEM) wsptr[7];
0003d4  f8d0b01c          LDR      r11,[r0,#0x1c]
0003d8  f8d08004          LDR      r8,[r0,#4]
0003dc  eba8080b          SUB      r8,r8,r11
0003e0  f8cd8108          STR      r8,[sp,#0x108]
;;;333    
;;;334        tmp7 = z11 + z13;		/* phase 5 */
0003e4  f8ddb104          LDR      r11,[sp,#0x104]
0003e8  f8dd810c          LDR      r8,[sp,#0x10c]
0003ec  eb08060b          ADD      r6,r8,r11
;;;335        tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */
0003f0  f8ddb104          LDR      r11,[sp,#0x104]
0003f4  f8dd810c          LDR      r8,[sp,#0x10c]
0003f8  eba8080b          SUB      r8,r8,r11
0003fc  f44f7bb5          MOV      r11,#0x16a
000400  fb08f80b          MUL      r8,r8,r11
000404  ea4f2828          ASR      r8,r8,#8
000408  f8cd811c          STR      r8,[sp,#0x11c]
;;;336    
;;;337        z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
00040c  f8ddb108          LDR      r11,[sp,#0x108]
000410  f8dd8110          LDR      r8,[sp,#0x110]
000414  44d8              ADD      r8,r8,r11
000416  f2401bd9          MOV      r11,#0x1d9
00041a  fb08f80b          MUL      r8,r8,r11
00041e  ea4f2828          ASR      r8,r8,#8
000422  f8cd8114          STR      r8,[sp,#0x114]
;;;338        tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
000426  f2401b15          MOV      r11,#0x115
00042a  f8dd8108          LDR      r8,[sp,#0x108]
00042e  fb08fb0b          MUL      r11,r8,r11
000432  f8dd8114          LDR      r8,[sp,#0x114]
000436  ebc8282b          RSB      r8,r8,r11,ASR #8
00043a  f8cd8120          STR      r8,[sp,#0x120]
;;;339        tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
00043e  f46f7b27          MVN      r11,#0x29c
000442  f8dd8110          LDR      r8,[sp,#0x110]
000446  fb08fb0b          MUL      r11,r8,r11
00044a  f8dd8114          LDR      r8,[sp,#0x114]
00044e  eb08282b          ADD      r8,r8,r11,ASR #8
000452  f8cd8118          STR      r8,[sp,#0x118]
;;;340    
;;;341        tmp6 = tmp12 - tmp7;	/* phase 2 */
000456  f8dd8118          LDR      r8,[sp,#0x118]
00045a  eba80506          SUB      r5,r8,r6
;;;342        tmp5 = tmp11 - tmp6;
00045e  f8dd811c          LDR      r8,[sp,#0x11c]
000462  eba80405          SUB      r4,r8,r5
;;;343        tmp4 = tmp10 + tmp5;
000466  f8dd8120          LDR      r8,[sp,#0x120]
00046a  eb080904          ADD      r9,r8,r4
;;;344    
;;;345        /* Final output stage: scale down by a factor of 8 and range-limit */
;;;346    
;;;347        outptr[0] = range_limit[IDESCALE(tmp0 + tmp7, PASS1_BITS+3)
00046e  eb0a0806          ADD      r8,r10,r6
000472  f3c81849          UBFX     r8,r8,#5,#10
000476  f8178008          LDRB     r8,[r7,r8]
00047a  f8828000          STRB     r8,[r2,#0]
;;;348    			    & RANGE_MASK];
;;;349        outptr[7] = range_limit[IDESCALE(tmp0 - tmp7, PASS1_BITS+3)
00047e  ebaa0806          SUB      r8,r10,r6
000482  f3c81849          UBFX     r8,r8,#5,#10
000486  f8178008          LDRB     r8,[r7,r8]
00048a  f8828007          STRB     r8,[r2,#7]
;;;350    			    & RANGE_MASK];
;;;351        outptr[1] = range_limit[IDESCALE(tmp1 + tmp6, PASS1_BITS+3)
00048e  f8dd812c          LDR      r8,[sp,#0x12c]
000492  44a8              ADD      r8,r8,r5
000494  f3c81849          UBFX     r8,r8,#5,#10
000498  f8178008          LDRB     r8,[r7,r8]
00049c  f8828001          STRB     r8,[r2,#1]
;;;352    			    & RANGE_MASK];
;;;353        outptr[6] = range_limit[IDESCALE(tmp1 - tmp6, PASS1_BITS+3)
0004a0  f8dd812c          LDR      r8,[sp,#0x12c]
0004a4  eba80805          SUB      r8,r8,r5
0004a8  f3c81849          UBFX     r8,r8,#5,#10
0004ac  f8178008          LDRB     r8,[r7,r8]
0004b0  f8828006          STRB     r8,[r2,#6]
;;;354    			    & RANGE_MASK];
;;;355        outptr[2] = range_limit[IDESCALE(tmp2 + tmp5, PASS1_BITS+3)
0004b4  f8dd8128          LDR      r8,[sp,#0x128]
0004b8  44a0              ADD      r8,r8,r4
0004ba  f3c81849          UBFX     r8,r8,#5,#10
0004be  f8178008          LDRB     r8,[r7,r8]
0004c2  f8828002          STRB     r8,[r2,#2]
;;;356    			    & RANGE_MASK];
;;;357        outptr[5] = range_limit[IDESCALE(tmp2 - tmp5, PASS1_BITS+3)
0004c6  f8dd8128          LDR      r8,[sp,#0x128]
0004ca  eba80804          SUB      r8,r8,r4
0004ce  f3c81849          UBFX     r8,r8,#5,#10
0004d2  f8178008          LDRB     r8,[r7,r8]
0004d6  f8828005          STRB     r8,[r2,#5]
;;;358    			    & RANGE_MASK];
;;;359        outptr[4] = range_limit[IDESCALE(tmp3 + tmp4, PASS1_BITS+3)
0004da  f8dd8124          LDR      r8,[sp,#0x124]
0004de  44c8              ADD      r8,r8,r9
0004e0  f3c81849          UBFX     r8,r8,#5,#10
0004e4  f8178008          LDRB     r8,[r7,r8]
0004e8  f8828004          STRB     r8,[r2,#4]
;;;360    			    & RANGE_MASK];
;;;361        outptr[3] = range_limit[IDESCALE(tmp3 - tmp4, PASS1_BITS+3)
0004ec  f8dd8124          LDR      r8,[sp,#0x124]
0004f0  eba80809          SUB      r8,r8,r9
0004f4  f3c81849          UBFX     r8,r8,#5,#10
0004f8  f8178008          LDRB     r8,[r7,r8]
0004fc  f8828003          STRB     r8,[r2,#3]
;;;362    			    & RANGE_MASK];
;;;363    
;;;364        wsptr += DCTSIZE;		/* advance pointer to next row */
000500  3020              ADDS     r0,r0,#0x20
000502  bf00              NOP                            ;309
                  |L1.1284|
000504  f8dd8100          LDR      r8,[sp,#0x100]        ;282
000508  f1080801          ADD      r8,r8,#1              ;282
00050c  f8cd8100          STR      r8,[sp,#0x100]        ;282
                  |L1.1296|
000510  f8dd8100          LDR      r8,[sp,#0x100]        ;282
000514  f1b80f08          CMP      r8,#8                 ;282
000518  f6ffaec5          BLT      |L1.678|
;;;365      }
;;;366    }
00051c  b050              ADD      sp,sp,#0x140
00051e  e8bd8ff0          POP      {r4-r11,pc}
;;;367    
                          ENDP

