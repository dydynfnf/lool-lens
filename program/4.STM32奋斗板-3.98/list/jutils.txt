; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\jutils.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\jutils.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -I.\GUI\AntiAlias -I.\GUI\Config -I.\GUI\ConvertColor -I.\GUI\ConvertMono -I.\GUI\Core -I.\GUI\Font -I.\GUI\GUI_X -I.\GUI\JPEG -I.\GUI\LCDDriver -I.\GUI\MemDev -I.\GUI\MultiLayer -I.\GUI\Widget -I.\GUI\WM -IC:\Users\Administrator\Desktop\gui\STM32·Ü¶·°å-3.98\RTE -Id:\Keil_v5\ARM\PACK\ARM\CMSIS\4.3.0\CMSIS\Include -Id:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.1.0\Device\Include -D__UVISION_VERSION=515 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\jutils.crf GUI\JPEG\jutils.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=1

                  jdiv_round_up PROC
;;;71     GLOBAL(long)
;;;72     jdiv_round_up (long a, long b)
000000  4602              MOV      r2,r0
;;;73     /* Compute a/b rounded up to next integer, ie, ceil(a/b) */
;;;74     /* Assumes a >= 0, b > 0 */
;;;75     {
;;;76       return (a + b - 1L) / b;
000002  1850              ADDS     r0,r2,r1
000004  1e40              SUBS     r0,r0,#1
000006  fb90f0f1          SDIV     r0,r0,r1
;;;77     }
00000a  4770              BX       lr
;;;78     
                          ENDP

                  jround_up PROC
;;;80     GLOBAL(long)
;;;81     jround_up (long a, long b)
00000c  4602              MOV      r2,r0
;;;82     /* Compute a rounded up to next multiple of b, ie, ceil(a/b)*b */
;;;83     /* Assumes a >= 0, b > 0 */
;;;84     {
;;;85       a += b - 1L;
00000e  1e48              SUBS     r0,r1,#1
000010  4402              ADD      r2,r2,r0
;;;86       return a - (a % b);
000012  fb92f0f1          SDIV     r0,r2,r1
000016  fb012010          MLS      r0,r1,r0,r2
00001a  1a10              SUBS     r0,r2,r0
;;;87     }
00001c  4770              BX       lr
;;;88     
                          ENDP

                  jcopy_sample_rows PROC
;;;110    GLOBAL(void)
;;;111    jcopy_sample_rows (JSAMPARRAY input_array, int source_row,
00001e  e92d4ff8          PUSH     {r3-r11,lr}
;;;112    		   JSAMPARRAY output_array, int dest_row,
;;;113    		   int num_rows, JDIMENSION num_cols)
;;;114    /* Copy some rows of samples from one place to another.
;;;115     * num_rows rows are copied from input_array[source_row++]
;;;116     * to output_array[dest_row++]; these areas may overlap for duplication.
;;;117     * The source and destination arrays must be at least as wide as num_cols.
;;;118     */
;;;119    {
000022  4604              MOV      r4,r0
000024  460e              MOV      r6,r1
000026  4615              MOV      r5,r2
000028  461f              MOV      r7,r3
00002a  f8dd802c          LDR      r8,[sp,#0x2c]
;;;120      register JSAMPROW inptr, outptr;
;;;121    #ifdef FMEMCOPY
;;;122      register size_t count = (size_t) (num_cols * SIZEOF(JSAMPLE));
00002e  f8cd8000          STR      r8,[sp,#0]
;;;123    #else
;;;124      register JDIMENSION count;
;;;125    #endif
;;;126      register int row;
;;;127    
;;;128      input_array += source_row;
000032  eb040486          ADD      r4,r4,r6,LSL #2
;;;129      output_array += dest_row;
000036  eb050587          ADD      r5,r5,r7,LSL #2
;;;130    
;;;131      for (row = num_rows; row > 0; row--) {
00003a  f8ddb028          LDR      r11,[sp,#0x28]
00003e  e00a              B        |L1.86|
                  |L1.64|
;;;132        inptr = *input_array++;
000040  f8549b04          LDR      r9,[r4],#4
;;;133        outptr = *output_array++;
000044  f855ab04          LDR      r10,[r5],#4
;;;134    #ifdef FMEMCOPY
;;;135        FMEMCOPY(outptr, inptr, count);
000048  4649              MOV      r1,r9
00004a  4650              MOV      r0,r10
00004c  9a00              LDR      r2,[sp,#0]
00004e  f7fffffe          BL       __aeabi_memcpy
000052  f1ab0b01          SUB      r11,r11,#1            ;131
                  |L1.86|
000056  f1bb0f00          CMP      r11,#0                ;131
00005a  dcf1              BGT      |L1.64|
;;;136    #else
;;;137        for (count = num_cols; count > 0; count--)
;;;138          *outptr++ = *inptr++;	/* needn't bother with GETJSAMPLE() here */
;;;139    #endif
;;;140      }
;;;141    }
00005c  e8bd8ff8          POP      {r3-r11,pc}
;;;142    
                          ENDP

                  jcopy_block_row PROC
;;;144    GLOBAL(void)
;;;145    jcopy_block_row (JBLOCKROW input_row, JBLOCKROW output_row,
000060  b570              PUSH     {r4-r6,lr}
;;;146    		 JDIMENSION num_blocks)
;;;147    /* Copy a row of coefficient blocks from one place to another. */
;;;148    {
000062  4604              MOV      r4,r0
000064  460d              MOV      r5,r1
000066  4616              MOV      r6,r2
;;;149    #ifdef FMEMCOPY
;;;150      FMEMCOPY(output_row, input_row, num_blocks * (DCTSIZE2 * SIZEOF(JCOEF)));
000068  01f2              LSLS     r2,r6,#7
00006a  4621              MOV      r1,r4
00006c  4628              MOV      r0,r5
00006e  f7fffffe          BL       __aeabi_memcpy
;;;151    #else
;;;152      register JCOEFPTR inptr, outptr;
;;;153      register long count;
;;;154    
;;;155      inptr = (JCOEFPTR) input_row;
;;;156      outptr = (JCOEFPTR) output_row;
;;;157      for (count = (long) num_blocks * DCTSIZE2; count > 0; count--) {
;;;158        *outptr++ = *inptr++;
;;;159      }
;;;160    #endif
;;;161    }
000072  bd70              POP      {r4-r6,pc}
;;;162    
                          ENDP

                  jzero_far PROC
;;;164    GLOBAL(void)
;;;165    jzero_far (void FAR * target, size_t bytestozero)
000074  b570              PUSH     {r4-r6,lr}
;;;166    /* Zero out a chunk of FAR memory. */
;;;167    /* This might be sample-array data, block-array data, or alloc_large data. */
;;;168    {
000076  4604              MOV      r4,r0
000078  460d              MOV      r5,r1
;;;169    #ifdef FMEMZERO
;;;170      FMEMZERO(target, bytestozero);
00007a  4629              MOV      r1,r5
00007c  4620              MOV      r0,r4
00007e  f7fffffe          BL       __aeabi_memclr
;;;171    #else
;;;172      register char FAR * ptr = (char FAR *) target;
;;;173      register size_t count;
;;;174    
;;;175      for (count = bytestozero; count > 0; count--) {
;;;176        *ptr++ = 0;
;;;177      }
;;;178    #endif
;;;179    }
000082  bd70              POP      {r4-r6,pc}
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  jpeg_natural_order
                          DCD      0x00000000
                          DCD      0x00000001
                          DCD      0x00000008
                          DCD      0x00000010
                          DCD      0x00000009
                          DCD      0x00000002
                          DCD      0x00000003
                          DCD      0x0000000a
                          DCD      0x00000011
                          DCD      0x00000018
                          DCD      0x00000020
                          DCD      0x00000019
                          DCD      0x00000012
                          DCD      0x0000000b
                          DCD      0x00000004
                          DCD      0x00000005
                          DCD      0x0000000c
                          DCD      0x00000013
                          DCD      0x0000001a
                          DCD      0x00000021
                          DCD      0x00000028
                          DCD      0x00000030
                          DCD      0x00000029
                          DCD      0x00000022
                          DCD      0x0000001b
                          DCD      0x00000014
                          DCD      0x0000000d
                          DCD      0x00000006
                          DCD      0x00000007
                          DCD      0x0000000e
                          DCD      0x00000015
                          DCD      0x0000001c
                          DCD      0x00000023
                          DCD      0x0000002a
                          DCD      0x00000031
                          DCD      0x00000038
                          DCD      0x00000039
                          DCD      0x00000032
                          DCD      0x0000002b
                          DCD      0x00000024
                          DCD      0x0000001d
                          DCD      0x00000016
                          DCD      0x0000000f
                          DCD      0x00000017
                          DCD      0x0000001e
                          DCD      0x00000025
                          DCD      0x0000002c
                          DCD      0x00000033
                          DCD      0x0000003a
                          DCD      0x0000003b
                          DCD      0x00000034
                          DCD      0x0000002d
                          DCD      0x00000026
                          DCD      0x0000001f
                          DCD      0x00000027
                          DCD      0x0000002e
                          DCD      0x00000035
                          DCD      0x0000003c
                          DCD      0x0000003d
                          DCD      0x00000036
                          DCD      0x0000002f
                          DCD      0x00000037
                          DCD      0x0000003e
                          DCD      0x0000003f
                          DCD      0x0000003f
                          DCD      0x0000003f
                          DCD      0x0000003f
                          DCD      0x0000003f
                          DCD      0x0000003f
                          DCD      0x0000003f
                          DCD      0x0000003f
                          DCD      0x0000003f
                          DCD      0x0000003f
                          DCD      0x0000003f
                          DCD      0x0000003f
                          DCD      0x0000003f
                          DCD      0x0000003f
                          DCD      0x0000003f
                          DCD      0x0000003f
                          DCD      0x0000003f
