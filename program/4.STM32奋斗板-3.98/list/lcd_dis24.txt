; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\lcd_dis24.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\lcd_dis24.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -I.\GUI\AntiAlias -I.\GUI\Config -I.\GUI\ConvertColor -I.\GUI\ConvertMono -I.\GUI\Core -I.\GUI\Font -I.\GUI\GUI_X -I.\GUI\JPEG -I.\GUI\LCDDriver -I.\GUI\MemDev -I.\GUI\MultiLayer -I.\GUI\Widget -I.\GUI\WM -IC:\Users\Administrator\Desktop\gui\STM32奋斗板-3.98\RTE -Id:\Keil_v5\ARM\PACK\ARM\CMSIS\4.3.0\CMSIS\Include -Id:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.1.0\Device\Include -D__UVISION_VERSION=515 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\lcd_dis24.crf TFT\lcd_dis24.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  Delay PROC
;;;49     ****************************************************************************/ 
;;;50     void Delay(__IO uint32_t nCount)
000000  b501              PUSH     {r0,lr}
;;;51     {
;;;52       for(; nCount != 0; nCount--);
000002  e002              B        |L1.10|
                  |L1.4|
000004  9800              LDR      r0,[sp,#0]
000006  1e40              SUBS     r0,r0,#1
000008  9000              STR      r0,[sp,#0]
                  |L1.10|
00000a  9800              LDR      r0,[sp,#0]
00000c  2800              CMP      r0,#0
00000e  d1f9              BNE      |L1.4|
;;;53     }
000010  bd08              POP      {r3,pc}
;;;54     /****************************************************************************
                          ENDP

                  LCD_WR_REG PROC
;;;61     ****************************************************************************/ 
;;;62     void LCD_WR_REG(u16 index)
000012  f04f41c0          MOV      r1,#0x60000000
;;;63     {
;;;64     	*(__IO uint16_t *) (Bank1_LCD_C)= index;
000016  8008              STRH     r0,[r1,#0]
;;;65     
;;;66     }
000018  4770              BX       lr
;;;67     
                          ENDP

                  LCD_WR_CMD PROC
;;;75     ****************************************************************************/ 
;;;76     void LCD_WR_CMD(u16 index,u16 val)
00001a  f04f42c0          MOV      r2,#0x60000000
;;;77     {	
;;;78     	*(__IO uint16_t *) (Bank1_LCD_C)= index;	
00001e  8010              STRH     r0,[r2,#0]
;;;79     	*(__IO uint16_t *) (Bank1_LCD_D)= val;
000020  4afe              LDR      r2,|L1.1052|
000022  8011              STRH     r1,[r2,#0]
;;;80     }
000024  4770              BX       lr
;;;81     
                          ENDP

                  LCD_RD_Data PROC
;;;89     ****************************************************************************/ 
;;;90     u16 LCD_RD_Data(void){
000026  2000              MOVS     r0,#0
;;;91     	u16 a=0;
;;;92     	a=*(__IO uint16_t *) (Bank1_LCD_D);   //读出的实际16位像素数据	  
000028  49fc              LDR      r1,|L1.1052|
00002a  8808              LDRH     r0,[r1,#0]
;;;93     	return(a);	
;;;94     }
00002c  4770              BX       lr
;;;95     
                          ENDP

                  LCD_WR_Data PROC
;;;103    ****************************************************************************/ 
;;;104    void    LCD_WR_Data(u16 val)
00002e  49fb              LDR      r1,|L1.1052|
;;;105    {   
;;;106    	*(__IO uint16_t *) (Bank1_LCD_D)= val; 	
000030  8008              STRH     r0,[r1,#0]
;;;107    }
000032  4770              BX       lr
;;;108    
                          ENDP

                  LCD_WR_Data_8 PROC
;;;109     void LCD_WR_Data_8(u16 val)
000034  49f9              LDR      r1,|L1.1052|
;;;110    {
;;;111    	*(__IO uint16_t *) (Bank1_LCD_D)= val;
000036  8008              STRH     r0,[r1,#0]
;;;112    }
000038  4770              BX       lr
;;;113    /****************************************************************************
                          ENDP

                  LCD_init PROC
;;;115    ****************************************************************************/ 
;;;116    void LCD_init(void)
00003a  b510              PUSH     {r4,lr}
;;;117    {
;;;118    	GPIO_ResetBits(GPIOE, GPIO_Pin_1);
00003c  2102              MOVS     r1,#2
00003e  48f8              LDR      r0,|L1.1056|
000040  f7fffffe          BL       GPIO_ResetBits
;;;119        Delay(0xAFFFF);					   
000044  48f7              LDR      r0,|L1.1060|
000046  f7fffffe          BL       Delay
;;;120        GPIO_SetBits(GPIOE, GPIO_Pin_1 );		 	 
00004a  2102              MOVS     r1,#2
00004c  48f4              LDR      r0,|L1.1056|
00004e  f7fffffe          BL       GPIO_SetBits
;;;121    	Delay(0xAFFFF);
000052  48f4              LDR      r0,|L1.1060|
000054  f7fffffe          BL       Delay
;;;122    
;;;123        LCD_WR_REG(0x00E2);	        //PLL 倍频到120M   PLL=10*36/3=120M
000058  20e2              MOVS     r0,#0xe2
00005a  f7fffffe          BL       LCD_WR_REG
;;;124    	LCD_WR_Data(0x0023);	    //N=0x36 for 6.5M, 0x23 for 10M crystal
00005e  2023              MOVS     r0,#0x23
000060  f7fffffe          BL       LCD_WR_Data
;;;125    	LCD_WR_Data(0x0002);
000064  2002              MOVS     r0,#2
000066  f7fffffe          BL       LCD_WR_Data
;;;126    	LCD_WR_Data(0x0004);
00006a  2004              MOVS     r0,#4
00006c  f7fffffe          BL       LCD_WR_Data
;;;127    	
;;;128    	LCD_WR_REG(0x00E0);         
000070  20e0              MOVS     r0,#0xe0
000072  f7fffffe          BL       LCD_WR_REG
;;;129    	LCD_WR_Data(0x0001);
000076  2001              MOVS     r0,#1
000078  f7fffffe          BL       LCD_WR_Data
;;;130    	Delay(0xAFFF);
00007c  f64a70ff          MOV      r0,#0xafff
000080  f7fffffe          BL       Delay
;;;131    	LCD_WR_REG(0x00E0);
000084  20e0              MOVS     r0,#0xe0
000086  f7fffffe          BL       LCD_WR_REG
;;;132    	LCD_WR_Data(0x0003);		// PLL 使能  PLL作为时钟
00008a  2003              MOVS     r0,#3
00008c  f7fffffe          BL       LCD_WR_Data
;;;133    	Delay(0xAFFF);
000090  f64a70ff          MOV      r0,#0xafff
000094  f7fffffe          BL       Delay
;;;134    	LCD_WR_REG(0x0001);         // 软件复位
000098  2001              MOVS     r0,#1
00009a  f7fffffe          BL       LCD_WR_REG
;;;135    	Delay(0xAFFF);
00009e  f64a70ff          MOV      r0,#0xafff
0000a2  f7fffffe          BL       Delay
;;;136    	LCD_WR_REG(0xE6);
0000a6  20e6              MOVS     r0,#0xe6
0000a8  f7fffffe          BL       LCD_WR_REG
;;;137    	LCD_WR_Data(0x04);
0000ac  2004              MOVS     r0,#4
0000ae  f7fffffe          BL       LCD_WR_Data
;;;138    	LCD_WR_Data(0x93);
0000b2  2093              MOVS     r0,#0x93
0000b4  f7fffffe          BL       LCD_WR_Data
;;;139    	LCD_WR_Data(0xE0);
0000b8  20e0              MOVS     r0,#0xe0
0000ba  f7fffffe          BL       LCD_WR_Data
;;;140    
;;;141    	LCD_WR_REG(0x00B0);	        //设置LCD模式
0000be  20b0              MOVS     r0,#0xb0
0000c0  f7fffffe          BL       LCD_WR_REG
;;;142    	LCD_WR_Data(0x0000);
0000c4  2000              MOVS     r0,#0
0000c6  f7fffffe          BL       LCD_WR_Data
;;;143    	LCD_WR_Data(0x0000);
0000ca  2000              MOVS     r0,#0
0000cc  f7fffffe          BL       LCD_WR_Data
;;;144    	LCD_WR_Data((HDP>>8)&0X00FF);  //Set HDP
0000d0  48d5              LDR      r0,|L1.1064|
0000d2  8800              LDRH     r0,[r0,#0]  ; HDP
0000d4  f3c02007          UBFX     r0,r0,#8,#8
0000d8  f7fffffe          BL       LCD_WR_Data
;;;145    	LCD_WR_Data(HDP&0X00FF);
0000dc  49d2              LDR      r1,|L1.1064|
0000de  7808              LDRB     r0,[r1,#0]  ; HDP
0000e0  f7fffffe          BL       LCD_WR_Data
;;;146        LCD_WR_Data((VDP>>8)&0X00FF);  //Set VDP
0000e4  48d1              LDR      r0,|L1.1068|
0000e6  8800              LDRH     r0,[r0,#0]  ; VDP
0000e8  f3c02007          UBFX     r0,r0,#8,#8
0000ec  f7fffffe          BL       LCD_WR_Data
;;;147    	LCD_WR_Data(VDP&0X00FF);
0000f0  49ce              LDR      r1,|L1.1068|
0000f2  7808              LDRB     r0,[r1,#0]  ; VDP
0000f4  f7fffffe          BL       LCD_WR_Data
;;;148        LCD_WR_Data(0x0000);
0000f8  2000              MOVS     r0,#0
0000fa  f7fffffe          BL       LCD_WR_Data
;;;149    
;;;150    	LCD_WR_REG(0x00B4);	//HSYNC
0000fe  20b4              MOVS     r0,#0xb4
000100  f7fffffe          BL       LCD_WR_REG
;;;151    	LCD_WR_Data((HT>>8)&0X00FF);  //Set HT
000104  48ca              LDR      r0,|L1.1072|
000106  8800              LDRH     r0,[r0,#0]  ; HT
000108  f3c02007          UBFX     r0,r0,#8,#8
00010c  f7fffffe          BL       LCD_WR_Data
;;;152    	LCD_WR_Data(HT&0X00FF);
000110  49c7              LDR      r1,|L1.1072|
000112  7808              LDRB     r0,[r1,#0]  ; HT
000114  f7fffffe          BL       LCD_WR_Data
;;;153    	LCD_WR_Data((HPS>>8)&0X00FF);  //Set HPS
000118  48c6              LDR      r0,|L1.1076|
00011a  8800              LDRH     r0,[r0,#0]  ; HPS
00011c  f3c02007          UBFX     r0,r0,#8,#8
000120  f7fffffe          BL       LCD_WR_Data
;;;154    	LCD_WR_Data(HPS&0X00FF);
000124  49c3              LDR      r1,|L1.1076|
000126  7808              LDRB     r0,[r1,#0]  ; HPS
000128  f7fffffe          BL       LCD_WR_Data
;;;155    	LCD_WR_Data(HPW);			   //Set HPW
00012c  48c2              LDR      r0,|L1.1080|
00012e  7800              LDRB     r0,[r0,#0]  ; HPW
000130  f7fffffe          BL       LCD_WR_Data
;;;156    	LCD_WR_Data((LPS>>8)&0X00FF);  //Set HPS
000134  48c1              LDR      r0,|L1.1084|
000136  8800              LDRH     r0,[r0,#0]  ; LPS
000138  f3c02007          UBFX     r0,r0,#8,#8
00013c  f7fffffe          BL       LCD_WR_Data
;;;157    	LCD_WR_Data(LPS&0X00FF);
000140  49be              LDR      r1,|L1.1084|
000142  7808              LDRB     r0,[r1,#0]  ; LPS
000144  f7fffffe          BL       LCD_WR_Data
;;;158    	LCD_WR_Data(0x0000);
000148  2000              MOVS     r0,#0
00014a  f7fffffe          BL       LCD_WR_Data
;;;159    
;;;160    	LCD_WR_REG(0x00B6);	//VSYNC
00014e  20b6              MOVS     r0,#0xb6
000150  f7fffffe          BL       LCD_WR_REG
;;;161    	LCD_WR_Data((VT>>8)&0X00FF);   //Set VT
000154  48ba              LDR      r0,|L1.1088|
000156  8800              LDRH     r0,[r0,#0]  ; VT
000158  f3c02007          UBFX     r0,r0,#8,#8
00015c  f7fffffe          BL       LCD_WR_Data
;;;162    	LCD_WR_Data(VT&0X00FF);
000160  49b7              LDR      r1,|L1.1088|
000162  7808              LDRB     r0,[r1,#0]  ; VT
000164  f7fffffe          BL       LCD_WR_Data
;;;163    	LCD_WR_Data((VPS>>8)&0X00FF);  //Set VPS
000168  48b6              LDR      r0,|L1.1092|
00016a  8800              LDRH     r0,[r0,#0]  ; VPS
00016c  f3c02007          UBFX     r0,r0,#8,#8
000170  f7fffffe          BL       LCD_WR_Data
;;;164    	LCD_WR_Data(VPS&0X00FF);
000174  49b3              LDR      r1,|L1.1092|
000176  7808              LDRB     r0,[r1,#0]  ; VPS
000178  f7fffffe          BL       LCD_WR_Data
;;;165    	LCD_WR_Data(VPW);			   //Set VPW
00017c  48b2              LDR      r0,|L1.1096|
00017e  7800              LDRB     r0,[r0,#0]  ; VPW
000180  f7fffffe          BL       LCD_WR_Data
;;;166    	LCD_WR_Data((FPS>>8)&0X00FF);  //Set FPS
000184  48b1              LDR      r0,|L1.1100|
000186  8800              LDRH     r0,[r0,#0]  ; FPS
000188  f3c02007          UBFX     r0,r0,#8,#8
00018c  f7fffffe          BL       LCD_WR_Data
;;;167    	LCD_WR_Data(FPS&0X00FF);
000190  49ae              LDR      r1,|L1.1100|
000192  7808              LDRB     r0,[r1,#0]  ; FPS
000194  f7fffffe          BL       LCD_WR_Data
;;;168    
;;;169    	LCD_WR_REG(0x00BA);
000198  20ba              MOVS     r0,#0xba
00019a  f7fffffe          BL       LCD_WR_REG
;;;170    	LCD_WR_Data(0x000D);    //GPIO[3:0] out 1
00019e  200d              MOVS     r0,#0xd
0001a0  f7fffffe          BL       LCD_WR_Data
;;;171    
;;;172    	LCD_WR_REG(0x00B8);
0001a4  20b8              MOVS     r0,#0xb8
0001a6  f7fffffe          BL       LCD_WR_REG
;;;173    	LCD_WR_Data(0x0007);    //GPIO3=input, GPIO[2:0]=output
0001aa  2007              MOVS     r0,#7
0001ac  f7fffffe          BL       LCD_WR_Data
;;;174    	LCD_WR_Data(0x0001);    //GPIO0 normal
0001b0  2001              MOVS     r0,#1
0001b2  f7fffffe          BL       LCD_WR_Data
;;;175    
;;;176    	LCD_WR_REG(0x0036);            //rotation
0001b6  2036              MOVS     r0,#0x36
0001b8  f7fffffe          BL       LCD_WR_REG
;;;177    	LCD_WR_Data(0x0000);
0001bc  2000              MOVS     r0,#0
0001be  f7fffffe          BL       LCD_WR_Data
;;;178    
;;;179    
;;;180    	LCD_WR_REG(0x00F0);             //16位  565模式
0001c2  20f0              MOVS     r0,#0xf0
0001c4  f7fffffe          BL       LCD_WR_REG
;;;181    	LCD_WR_Data(0x0003);
0001c8  2003              MOVS     r0,#3
0001ca  f7fffffe          BL       LCD_WR_Data
;;;182    
;;;183    
;;;184    	Delay(0xAFFF);
0001ce  f64a70ff          MOV      r0,#0xafff
0001d2  f7fffffe          BL       Delay
;;;185    
;;;186    	//LCD_clear();
;;;187    	LCD_WR_REG(0x0029); //display on
0001d6  2029              MOVS     r0,#0x29
0001d8  f7fffffe          BL       LCD_WR_REG
;;;188    
;;;189    	LCD_WR_REG(0x00BE); //set PWM for B/L
0001dc  20be              MOVS     r0,#0xbe
0001de  f7fffffe          BL       LCD_WR_REG
;;;190    	LCD_WR_Data(0x0006);
0001e2  2006              MOVS     r0,#6
0001e4  f7fffffe          BL       LCD_WR_Data
;;;191    	LCD_WR_Data(0x00ff);
0001e8  20ff              MOVS     r0,#0xff
0001ea  f7fffffe          BL       LCD_WR_Data
;;;192    	
;;;193    	LCD_WR_Data(0x0001);
0001ee  2001              MOVS     r0,#1
0001f0  f7fffffe          BL       LCD_WR_Data
;;;194    	LCD_WR_Data(0x00f0);
0001f4  20f0              MOVS     r0,#0xf0
0001f6  f7fffffe          BL       LCD_WR_Data
;;;195    	LCD_WR_Data(0x0000);
0001fa  2000              MOVS     r0,#0
0001fc  f7fffffe          BL       LCD_WR_Data
;;;196    	LCD_WR_Data(0x0000);
000200  2000              MOVS     r0,#0
000202  f7fffffe          BL       LCD_WR_Data
;;;197    
;;;198    	LCD_WR_REG(0x00d0);//设置动态背光控制配置 
000206  20d0              MOVS     r0,#0xd0
000208  f7fffffe          BL       LCD_WR_REG
;;;199    	LCD_WR_Data(0x000d);
00020c  200d              MOVS     r0,#0xd
00020e  f7fffffe          BL       LCD_WR_Data
;;;200    
;;;201       			
;;;202    
;;;203    }
000212  bd10              POP      {r4,pc}
;;;204    
                          ENDP

                  TFT_CLEAR PROC
;;;207    ****************************************************************************/ 
;;;208    void TFT_CLEAR(u16 x,u16 y,u32 len,u32 wid)
000214  b570              PUSH     {r4-r6,lr}
;;;209    {                    
000216  4605              MOV      r5,r0
000218  460c              MOV      r4,r1
;;;210        u32 w;
;;;211    
;;;212    	LCD_WR_REG(0x002A);	
00021a  202a              MOVS     r0,#0x2a
00021c  f7fffffe          BL       LCD_WR_REG
;;;213    	LCD_WR_Data(x>>8);	    
000220  1228              ASRS     r0,r5,#8
000222  f7fffffe          BL       LCD_WR_Data
;;;214    	LCD_WR_Data(x);
000226  4628              MOV      r0,r5
000228  f7fffffe          BL       LCD_WR_Data
;;;215    	LCD_WR_Data((len-1)>>8);	    
00022c  1e51              SUBS     r1,r2,#1
00022e  f3c1200f          UBFX     r0,r1,#8,#16
000232  f7fffffe          BL       LCD_WR_Data
;;;216    	LCD_WR_Data((len-1));
000236  1e51              SUBS     r1,r2,#1
000238  b288              UXTH     r0,r1
00023a  f7fffffe          BL       LCD_WR_Data
;;;217        LCD_WR_REG(0x002b);	
00023e  202b              MOVS     r0,#0x2b
000240  f7fffffe          BL       LCD_WR_REG
;;;218    	LCD_WR_Data(y>>8);	    
000244  1220              ASRS     r0,r4,#8
000246  f7fffffe          BL       LCD_WR_Data
;;;219    	LCD_WR_Data(y);
00024a  4620              MOV      r0,r4
00024c  f7fffffe          BL       LCD_WR_Data
;;;220    	LCD_WR_Data((wid-1)>>8);	    
000250  1e59              SUBS     r1,r3,#1
000252  f3c1200f          UBFX     r0,r1,#8,#16
000256  f7fffffe          BL       LCD_WR_Data
;;;221    	LCD_WR_Data((wid-1));
00025a  1e59              SUBS     r1,r3,#1
00025c  b288              UXTH     r0,r1
00025e  f7fffffe          BL       LCD_WR_Data
;;;222    	LCD_WR_REG(0x002c);
000262  202c              MOVS     r0,#0x2c
000264  f7fffffe          BL       LCD_WR_REG
;;;223    	w=(len-x)*(wid-y);
000268  1b50              SUBS     r0,r2,r5
00026a  1b19              SUBS     r1,r3,r4
00026c  fb00f601          MUL      r6,r0,r1
;;;224    	while(w--) LCD_WR_Data(0xffff);
000270  e003              B        |L1.634|
                  |L1.626|
000272  f64f70ff          MOV      r0,#0xffff
000276  f7fffffe          BL       LCD_WR_Data
                  |L1.634|
00027a  0030              MOVS     r0,r6
00027c  f1a60601          SUB      r6,r6,#1
000280  d1f7              BNE      |L1.626|
;;;225    }   
000282  bd70              POP      {r4-r6,pc}
;;;226    
                          ENDP

                  TFT_DrawPoint PROC
;;;229    ****************************************************************************/ 
;;;230    void TFT_DrawPoint(u16 x,u16 y, u16 color)
000284  b510              PUSH     {r4,lr}
;;;231    {								       
000286  4604              MOV      r4,r0
000288  460b              MOV      r3,r1
;;;232    	LCD_WR_REG(0x002A);				    
00028a  202a              MOVS     r0,#0x2a
00028c  f7fffffe          BL       LCD_WR_REG
;;;233    	LCD_WR_Data(x>>8);	    			//起始地址X
000290  1220              ASRS     r0,r4,#8
000292  f7fffffe          BL       LCD_WR_Data
;;;234    	LCD_WR_Data(x);	    			
000296  4620              MOV      r0,r4
000298  f7fffffe          BL       LCD_WR_Data
;;;235    	LCD_WR_Data(x>>8);	    			//结束地址X
00029c  1220              ASRS     r0,r4,#8
00029e  f7fffffe          BL       LCD_WR_Data
;;;236    	LCD_WR_Data(x);	    			    
0002a2  4620              MOV      r0,r4
0002a4  f7fffffe          BL       LCD_WR_Data
;;;237        LCD_WR_REG(0x002b);	
0002a8  202b              MOVS     r0,#0x2b
0002aa  f7fffffe          BL       LCD_WR_REG
;;;238    	LCD_WR_Data(y>>8);	    			//起始地址Y
0002ae  1218              ASRS     r0,r3,#8
0002b0  f7fffffe          BL       LCD_WR_Data
;;;239    	LCD_WR_Data(y);	    			    
0002b4  4618              MOV      r0,r3
0002b6  f7fffffe          BL       LCD_WR_Data
;;;240    	LCD_WR_Data(y>>8);	    			//结束地址Y
0002ba  1218              ASRS     r0,r3,#8
0002bc  f7fffffe          BL       LCD_WR_Data
;;;241    	LCD_WR_Data(y);	    			
0002c0  4618              MOV      r0,r3
0002c2  f7fffffe          BL       LCD_WR_Data
;;;242    	LCD_WR_REG(0x2c);
0002c6  202c              MOVS     r0,#0x2c
0002c8  f7fffffe          BL       LCD_WR_REG
;;;243    	LCD_WR_Data(color); 	   	
0002cc  4610              MOV      r0,r2
0002ce  f7fffffe          BL       LCD_WR_Data
;;;244    }
0002d2  bd10              POP      {r4,pc}
;;;245    
                          ENDP

                  TFT_ReadPoint PROC
;;;248    ****************************************************************************/ 
;;;249    u16 TFT_ReadPoint(u16 x,u16 y)
0002d4  b500              PUSH     {lr}
;;;250    {								       
0002d6  4603              MOV      r3,r0
0002d8  460a              MOV      r2,r1
;;;251    	LCD_WR_REG(0x002A);				    
0002da  202a              MOVS     r0,#0x2a
0002dc  f7fffffe          BL       LCD_WR_REG
;;;252    	LCD_WR_Data(x>>8);	    			//起始地址X
0002e0  1218              ASRS     r0,r3,#8
0002e2  f7fffffe          BL       LCD_WR_Data
;;;253    	LCD_WR_Data(x);	    			
0002e6  4618              MOV      r0,r3
0002e8  f7fffffe          BL       LCD_WR_Data
;;;254    	LCD_WR_Data(x>>8);	    			//结束地址X
0002ec  1218              ASRS     r0,r3,#8
0002ee  f7fffffe          BL       LCD_WR_Data
;;;255    	LCD_WR_Data(x);	    			    
0002f2  4618              MOV      r0,r3
0002f4  f7fffffe          BL       LCD_WR_Data
;;;256        LCD_WR_REG(0x002b);	
0002f8  202b              MOVS     r0,#0x2b
0002fa  f7fffffe          BL       LCD_WR_REG
;;;257    	LCD_WR_Data(y>>8);	    			//起始地址Y
0002fe  1210              ASRS     r0,r2,#8
000300  f7fffffe          BL       LCD_WR_Data
;;;258    	LCD_WR_Data(y);	    			    
000304  4610              MOV      r0,r2
000306  f7fffffe          BL       LCD_WR_Data
;;;259    	LCD_WR_Data(y>>8);	    			//结束地址Y
00030a  1210              ASRS     r0,r2,#8
00030c  f7fffffe          BL       LCD_WR_Data
;;;260    	LCD_WR_Data(y);	    			
000310  4610              MOV      r0,r2
000312  f7fffffe          BL       LCD_WR_Data
;;;261    	LCD_WR_REG(0x2e);
000316  202e              MOVS     r0,#0x2e
000318  f7fffffe          BL       LCD_WR_REG
;;;262    	return(LCD_RD_Data()); 	   	
00031c  f7fffffe          BL       LCD_RD_Data
;;;263    }
000320  bd00              POP      {pc}
;;;264    
                          ENDP

                  TFT_HLine PROC
;;;267    ****************************************************************************/ 
;;;268    void TFT_HLine(u16 x0,u16 y,u16 x1,u16 color)
000322  b5f0              PUSH     {r4-r7,lr}
;;;269    {	
000324  4605              MOV      r5,r0
000326  460c              MOV      r4,r1
;;;270    	u32 i,point_count;							       
;;;271    	LCD_WR_REG(0x002A);				    
000328  202a              MOVS     r0,#0x2a
00032a  f7fffffe          BL       LCD_WR_REG
;;;272    	LCD_WR_Data(x0>>8);	    			//起始地址X
00032e  1228              ASRS     r0,r5,#8
000330  f7fffffe          BL       LCD_WR_Data
;;;273    	LCD_WR_Data(x0);	    			
000334  4628              MOV      r0,r5
000336  f7fffffe          BL       LCD_WR_Data
;;;274    	LCD_WR_Data(x1>>8);	    			//结束地址X
00033a  1210              ASRS     r0,r2,#8
00033c  f7fffffe          BL       LCD_WR_Data
;;;275    	LCD_WR_Data(x1);	    			    
000340  4610              MOV      r0,r2
000342  f7fffffe          BL       LCD_WR_Data
;;;276        LCD_WR_REG(0x002b);	
000346  202b              MOVS     r0,#0x2b
000348  f7fffffe          BL       LCD_WR_REG
;;;277    	LCD_WR_Data(y>>8);	    			//起始地址Y
00034c  1220              ASRS     r0,r4,#8
00034e  f7fffffe          BL       LCD_WR_Data
;;;278    	LCD_WR_Data(y);	    			    
000352  4620              MOV      r0,r4
000354  f7fffffe          BL       LCD_WR_Data
;;;279    	LCD_WR_Data(y>>8);	    			//结束地址Y
000358  1220              ASRS     r0,r4,#8
00035a  f7fffffe          BL       LCD_WR_Data
;;;280    	LCD_WR_Data(y);	    			
00035e  4620              MOV      r0,r4
000360  f7fffffe          BL       LCD_WR_Data
;;;281    	LCD_WR_REG(0x2c);
000364  202c              MOVS     r0,#0x2c
000366  f7fffffe          BL       LCD_WR_REG
;;;282    	point_count=x1-x0+1;
00036a  1b50              SUBS     r0,r2,r5
00036c  1c47              ADDS     r7,r0,#1
;;;283    	for(i=0;i<=point_count;i++)
00036e  2600              MOVS     r6,#0
000370  e003              B        |L1.890|
                  |L1.882|
;;;284    	{
;;;285    		LCD_WR_Data(color); 	 
000372  4618              MOV      r0,r3
000374  f7fffffe          BL       LCD_WR_Data
000378  1c76              ADDS     r6,r6,#1              ;283
                  |L1.890|
00037a  42be              CMP      r6,r7                 ;283
00037c  d9f9              BLS      |L1.882|
;;;286    	} 
;;;287    }
00037e  bdf0              POP      {r4-r7,pc}
;;;288    
                          ENDP

                  TFT_VLine PROC
;;;291    ****************************************************************************/ 
;;;292    void TFT_VLine(u16 x,u16 y0,u16 y1,u16 color)
000380  b5f0              PUSH     {r4-r7,lr}
;;;293    {	
000382  4605              MOV      r5,r0
000384  460c              MOV      r4,r1
;;;294    	u32 i,point_count;							       
;;;295    	LCD_WR_REG(0x002A);				    
000386  202a              MOVS     r0,#0x2a
000388  f7fffffe          BL       LCD_WR_REG
;;;296    	LCD_WR_Data(x>>8);	    			//起始地址X
00038c  1228              ASRS     r0,r5,#8
00038e  f7fffffe          BL       LCD_WR_Data
;;;297    	LCD_WR_Data(x);	    			
000392  4628              MOV      r0,r5
000394  f7fffffe          BL       LCD_WR_Data
;;;298    	LCD_WR_Data(x>>8);	    			//结束地址X
000398  1228              ASRS     r0,r5,#8
00039a  f7fffffe          BL       LCD_WR_Data
;;;299    	LCD_WR_Data(x);	    			    
00039e  4628              MOV      r0,r5
0003a0  f7fffffe          BL       LCD_WR_Data
;;;300        LCD_WR_REG(0x002b);	
0003a4  202b              MOVS     r0,#0x2b
0003a6  f7fffffe          BL       LCD_WR_REG
;;;301    	LCD_WR_Data(y0>>8);	    			//起始地址Y
0003aa  1220              ASRS     r0,r4,#8
0003ac  f7fffffe          BL       LCD_WR_Data
;;;302    	LCD_WR_Data(y0);	    			    
0003b0  4620              MOV      r0,r4
0003b2  f7fffffe          BL       LCD_WR_Data
;;;303    	LCD_WR_Data(y1>>8);	    			//结束地址Y
0003b6  1210              ASRS     r0,r2,#8
0003b8  f7fffffe          BL       LCD_WR_Data
;;;304    	LCD_WR_Data(y1);	    			
0003bc  4610              MOV      r0,r2
0003be  f7fffffe          BL       LCD_WR_Data
;;;305    	LCD_WR_REG(0x2c);
0003c2  202c              MOVS     r0,#0x2c
0003c4  f7fffffe          BL       LCD_WR_REG
;;;306    	point_count=y1-y0+1;
0003c8  1b10              SUBS     r0,r2,r4
0003ca  1c47              ADDS     r7,r0,#1
;;;307    	for(i=0;i<=point_count;i++)
0003cc  2600              MOVS     r6,#0
0003ce  e003              B        |L1.984|
                  |L1.976|
;;;308    	{
;;;309    		LCD_WR_Data(color); 	 
0003d0  4618              MOV      r0,r3
0003d2  f7fffffe          BL       LCD_WR_Data
0003d6  1c76              ADDS     r6,r6,#1              ;307
                  |L1.984|
0003d8  42be              CMP      r6,r7                 ;307
0003da  d9f9              BLS      |L1.976|
;;;310    	} 
;;;311    }
0003dc  bdf0              POP      {r4-r7,pc}
;;;312    
                          ENDP

                  TFT_Fill PROC
;;;315    ****************************************************************************/ 
;;;316    void TFT_Fill(u16 x0,u16 y0, u16 x1, u16 y1, u16 color)
0003de  e92d41f0          PUSH     {r4-r8,lr}
;;;317    {	
0003e2  4605              MOV      r5,r0
0003e4  460c              MOV      r4,r1
0003e6  9f06              LDR      r7,[sp,#0x18]
;;;318    	u32 i,point_count;						       
;;;319    	LCD_WR_REG(0x002A);				    
0003e8  202a              MOVS     r0,#0x2a
0003ea  f7fffffe          BL       LCD_WR_REG
;;;320    	LCD_WR_Data(x0>>8);	    			//起始地址X
0003ee  1228              ASRS     r0,r5,#8
0003f0  f7fffffe          BL       LCD_WR_Data
;;;321    	LCD_WR_Data(x0);	    			
0003f4  4628              MOV      r0,r5
0003f6  f7fffffe          BL       LCD_WR_Data
;;;322    	LCD_WR_Data(x1>>8);	    			//结束地址X
0003fa  1210              ASRS     r0,r2,#8
0003fc  f7fffffe          BL       LCD_WR_Data
;;;323    	LCD_WR_Data(x1);	    			    
000400  4610              MOV      r0,r2
000402  f7fffffe          BL       LCD_WR_Data
;;;324        LCD_WR_REG(0x002b);	
000406  202b              MOVS     r0,#0x2b
000408  f7fffffe          BL       LCD_WR_REG
;;;325    	LCD_WR_Data(y0>>8);	    			//起始地址Y
00040c  1220              ASRS     r0,r4,#8
00040e  f7fffffe          BL       LCD_WR_Data
;;;326    	LCD_WR_Data(y0);	    			    
000412  4620              MOV      r0,r4
000414  f7fffffe          BL       LCD_WR_Data
;;;327    	LCD_WR_Data(y1>>8);	    			//结束地址Y
000418  1218              ASRS     r0,r3,#8
00041a  e019              B        |L1.1104|
                  |L1.1052|
                          DCD      0x60020000
                  |L1.1056|
                          DCD      0x40011800
                  |L1.1060|
                          DCD      0x000affff
                  |L1.1064|
                          DCD      HDP
                  |L1.1068|
                          DCD      VDP
                  |L1.1072|
                          DCD      ||HT||
                  |L1.1076|
                          DCD      HPS
                  |L1.1080|
                          DCD      HPW
                  |L1.1084|
                          DCD      LPS
                  |L1.1088|
                          DCD      ||VT||
                  |L1.1092|
                          DCD      VPS
                  |L1.1096|
                          DCD      VPW
                  |L1.1100|
                          DCD      ||FPS||
                  |L1.1104|
000450  f7fffffe          BL       LCD_WR_Data
;;;328    	LCD_WR_Data(y1);	    			
000454  4618              MOV      r0,r3
000456  f7fffffe          BL       LCD_WR_Data
;;;329    	LCD_WR_REG(0x2c);
00045a  202c              MOVS     r0,#0x2c
00045c  f7fffffe          BL       LCD_WR_REG
;;;330    	point_count=(x1-x0+1)*(y1-y0+1);
000460  1b50              SUBS     r0,r2,r5
000462  1c40              ADDS     r0,r0,#1
000464  1b19              SUBS     r1,r3,r4
000466  1c49              ADDS     r1,r1,#1
000468  fb00f801          MUL      r8,r0,r1
;;;331    	for(i=0;i<=point_count;i++)
00046c  2600              MOVS     r6,#0
00046e  e003              B        |L1.1144|
                  |L1.1136|
;;;332    	{
;;;333    		LCD_WR_Data(color); 	 
000470  4638              MOV      r0,r7
000472  f7fffffe          BL       LCD_WR_Data
000476  1c76              ADDS     r6,r6,#1              ;331
                  |L1.1144|
000478  4546              CMP      r6,r8                 ;331
00047a  d9f9              BLS      |L1.1136|
;;;334    	}	
;;;335    }
00047c  e8bd81f0          POP      {r4-r8,pc}
;;;336    
                          ENDP

                  TFT_ShowBmp PROC
;;;344    ****************************************************************************/ 
;;;345    void TFT_ShowBmp(u16 x,u16 y,u16 lenth,u16 wide,const u8 *p)
000480  e92d41f0          PUSH     {r4-r8,lr}
;;;346    {      
000484  4604              MOV      r4,r0
000486  460d              MOV      r5,r1
000488  9f06              LDR      r7,[sp,#0x18]
;;;347        u32 size,temp; 
;;;348        //设定一个图片所占的窗口大小 
;;;349    	
;;;350    	LCD_WR_REG(0x002A);				    
00048a  202a              MOVS     r0,#0x2a
00048c  f7fffffe          BL       LCD_WR_REG
;;;351    	LCD_WR_Data(x>>8);	    			//起始地址X
000490  1220              ASRS     r0,r4,#8
000492  f7fffffe          BL       LCD_WR_Data
;;;352    	LCD_WR_Data(x&0x00ff);
000496  b2e0              UXTB     r0,r4
000498  f7fffffe          BL       LCD_WR_Data
;;;353    	LCD_WR_Data(((u16)x+lenth-1)>>8);	    		//结束地址X
00049c  18a1              ADDS     r1,r4,r2
00049e  1e49              SUBS     r1,r1,#1
0004a0  f3c1200f          UBFX     r0,r1,#8,#16
0004a4  f7fffffe          BL       LCD_WR_Data
;;;354    	LCD_WR_Data(((u16)x+lenth-1)&0x00ff);
0004a8  18a1              ADDS     r1,r4,r2
0004aa  1e49              SUBS     r1,r1,#1
0004ac  b2c8              UXTB     r0,r1
0004ae  f7fffffe          BL       LCD_WR_Data
;;;355        LCD_WR_REG(0x002b);	
0004b2  202b              MOVS     r0,#0x2b
0004b4  f7fffffe          BL       LCD_WR_REG
;;;356    	LCD_WR_Data(y>>8);	    			//起始地址Y
0004b8  1228              ASRS     r0,r5,#8
0004ba  f7fffffe          BL       LCD_WR_Data
;;;357    	LCD_WR_Data(y&0x00ff);
0004be  b2e8              UXTB     r0,r5
0004c0  f7fffffe          BL       LCD_WR_Data
;;;358    	LCD_WR_Data((y+wide-1)>>8);	    	 	//结束地址Y
0004c4  18e9              ADDS     r1,r5,r3
0004c6  1e49              SUBS     r1,r1,#1
0004c8  f3c1200f          UBFX     r0,r1,#8,#16
0004cc  f7fffffe          BL       LCD_WR_Data
;;;359    	LCD_WR_Data((y+wide-1)&0x00ff);
0004d0  18e9              ADDS     r1,r5,r3
0004d2  1e49              SUBS     r1,r1,#1
0004d4  b2c8              UXTB     r0,r1
0004d6  f7fffffe          BL       LCD_WR_Data
;;;360    	LCD_WR_REG(0x2c);	 
0004da  202c              MOVS     r0,#0x2c
0004dc  f7fffffe          BL       LCD_WR_REG
;;;361    	temp=(u32)lenth*wide*2;
0004e0  fb02f003          MUL      r0,r2,r3
0004e4  ea4f0840          LSL      r8,r0,#1
;;;362    	for(size=0;size<temp;size++)LCD_WR_Data_8(p[size]); 
0004e8  2600              MOVS     r6,#0
0004ea  e003              B        |L1.1268|
                  |L1.1260|
0004ec  5db8              LDRB     r0,[r7,r6]
0004ee  f7fffffe          BL       LCD_WR_Data_8
0004f2  1c76              ADDS     r6,r6,#1
                  |L1.1268|
0004f4  4546              CMP      r6,r8
0004f6  d3f9              BCC      |L1.1260|
;;;363    }         
0004f8  e8bd81f0          POP      {r4-r8,pc}
;;;364    
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  HDP
                          DCD      0x0000031f
                  ||HT||
                          DCD      0x000004b0
                  HPS
                          DCD      0x0000005d
                  HPW
00000c  28000000          DCB      0x28,0x00,0x00,0x00
                  LPS
                          DCD      0x0000002e
                  VDP
                          DCD      0x000001df
                  ||VT||
                          DCD      0x0000029e
                  VPS
                          DCD      0x0000002b
                  VPW
000020  14000000          DCB      0x14,0x00,0x00,0x00
                  ||FPS||
                          DCD      0x00000017
