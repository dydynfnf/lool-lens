; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\guialloc.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\guialloc.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -I.\GUI\AntiAlias -I.\GUI\Config -I.\GUI\ConvertColor -I.\GUI\ConvertMono -I.\GUI\Core -I.\GUI\Font -I.\GUI\GUI_X -I.\GUI\JPEG -I.\GUI\LCDDriver -I.\GUI\MemDev -I.\GUI\MultiLayer -I.\GUI\Widget -I.\GUI\WM -IC:\Users\Administrator\Desktop\gui\STM32·Ü¶·°å-3.98\RTE -Id:\Keil_v5\ARM\PACK\ARM\CMSIS\4.3.0\CMSIS\Include -Id:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.1.0\Device\Include -D__UVISION_VERSION=515 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\guialloc.crf GUI\Core\GUIAlloc.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _Size2LegalSize PROC
;;;132    */
;;;133    static GUI_ALLOC_DATATYPE _Size2LegalSize(GUI_ALLOC_DATATYPE size) {
000000  4601              MOV      r1,r0
;;;134      return (size + ((1 << GUI_BLOCK_ALIGN) - 1)) & ~((1 << GUI_BLOCK_ALIGN) - 1);
000002  1cc8              ADDS     r0,r1,#3
000004  f0200003          BIC      r0,r0,#3
000008  b200              SXTH     r0,r0
;;;135    }
00000a  4770              BX       lr
;;;136      
                          ENDP

                  _GetSize PROC
;;;140    */
;;;141    static GUI_ALLOC_DATATYPE _GetSize(GUI_HMEM  hMem) {
00000c  4601              MOV      r1,r0
;;;142      return aBlock[hMem].Size;
00000e  48f8              LDR      r0,|L1.1008|
000010  eb0000c1          ADD      r0,r0,r1,LSL #3
000014  f9b00002          LDRSH    r0,[r0,#2]
;;;143    }
000018  4770              BX       lr
;;;144    
                          ENDP

                  _Free PROC
;;;148    */
;;;149    static void _Free(GUI_HMEM hMem) {
00001a  b530              PUSH     {r4,r5,lr}
;;;150      GUI_ALLOC_DATATYPE Size;
;;;151      GUI_DEBUG_LOG1("\nGUI_ALLOC_Free(%d)", hMem);
;;;152      /* Do some error checking ... */
;;;153      #if GUI_DEBUG_LEVEL>0
;;;154        /* Block not allocated ? */
;;;155        if (aBlock[hMem].Size == 0) {
00001c  49f4              LDR      r1,|L1.1008|
00001e  eb0101c0          ADD      r1,r1,r0,LSL #3
000022  8849              LDRH     r1,[r1,#2]
000024  b901              CBNZ     r1,|L1.40|
                  |L1.38|
;;;156          GUI_DEBUG_ERROROUT("GUI_ALLOC_Free(): Invalid hMem");
;;;157          return;
;;;158        }
;;;159      #endif
;;;160      Size = aBlock[hMem].Size;
;;;161      #ifdef WIN32
;;;162        GUI_MEMSET(&GUI_Heap.abHeap[aBlock[hMem].Off], 0xcc, Size);
;;;163      #endif
;;;164      GUI_ALLOC.NumFreeBytes += Size;
;;;165      GUI_ALLOC.NumUsedBytes -= Size;
;;;166      aBlock[hMem].Size = 0;
;;;167      if (_FirstFreeHandle > hMem) {
;;;168        _FirstFreeHandle = hMem;
;;;169      }
;;;170      {
;;;171        int Next = aBlock[hMem].Next;
;;;172        int Prev = aBlock[hMem].Prev;
;;;173        aBlock[Prev].Next = Next;
;;;174        if (Next) {
;;;175          aBlock[Next].Prev = Prev;
;;;176        }
;;;177      }  
;;;178      GUI_ALLOC.NumFreeBlocks++;
;;;179      GUI_ALLOC.NumUsedBlocks--;
;;;180    }
000026  bd30              POP      {r4,r5,pc}
                  |L1.40|
000028  49f1              LDR      r1,|L1.1008|
00002a  eb0101c0          ADD      r1,r1,r0,LSL #3       ;160
00002e  f9b12002          LDRSH    r2,[r1,#2]            ;160
000032  49f0              LDR      r1,|L1.1012|
000034  89c9              LDRH     r1,[r1,#0xe]          ;164  ; GUI_ALLOC
000036  4411              ADD      r1,r1,r2              ;164
000038  b209              SXTH     r1,r1                 ;164
00003a  4bee              LDR      r3,|L1.1012|
00003c  81d9              STRH     r1,[r3,#0xe]          ;164
00003e  4619              MOV      r1,r3                 ;165
000040  8989              LDRH     r1,[r1,#0xc]          ;165  ; GUI_ALLOC
000042  1a89              SUBS     r1,r1,r2              ;165
000044  b209              SXTH     r1,r1                 ;165
000046  8199              STRH     r1,[r3,#0xc]          ;165
000048  2100              MOVS     r1,#0                 ;166
00004a  4be9              LDR      r3,|L1.1008|
00004c  eb0303c0          ADD      r3,r3,r0,LSL #3       ;166
000050  8059              STRH     r1,[r3,#2]            ;166
000052  49e9              LDR      r1,|L1.1016|
000054  6809              LDR      r1,[r1,#0]            ;167  ; _FirstFreeHandle
000056  4281              CMP      r1,r0                 ;167
000058  dd01              BLE      |L1.94|
00005a  49e7              LDR      r1,|L1.1016|
00005c  6008              STR      r0,[r1,#0]            ;168  ; _FirstFreeHandle
                  |L1.94|
00005e  4ce4              LDR      r4,|L1.1008|
000060  eb0404c0          ADD      r4,r4,r0,LSL #3       ;171
000064  88a1              LDRH     r1,[r4,#4]            ;171
000066  4ce2              LDR      r4,|L1.1008|
000068  eb0404c0          ADD      r4,r4,r0,LSL #3       ;172
00006c  88e3              LDRH     r3,[r4,#6]            ;172
00006e  4ce0              LDR      r4,|L1.1008|
000070  eb0404c3          ADD      r4,r4,r3,LSL #3       ;173
000074  80a1              STRH     r1,[r4,#4]            ;173
000076  b119              CBZ      r1,|L1.128|
000078  4ddd              LDR      r5,|L1.1008|
00007a  eb0505c1          ADD      r5,r5,r1,LSL #3       ;175
00007e  80eb              STRH     r3,[r5,#6]            ;175
                  |L1.128|
000080  49dc              LDR      r1,|L1.1012|
000082  6849              LDR      r1,[r1,#4]            ;178  ; GUI_ALLOC
000084  1c49              ADDS     r1,r1,#1              ;178
000086  4bdb              LDR      r3,|L1.1012|
000088  6059              STR      r1,[r3,#4]            ;178  ; GUI_ALLOC
00008a  4619              MOV      r1,r3                 ;179
00008c  6809              LDR      r1,[r1,#0]            ;179  ; GUI_ALLOC
00008e  1e49              SUBS     r1,r1,#1              ;179
000090  6019              STR      r1,[r3,#0]            ;179  ; GUI_ALLOC
000092  bf00              NOP      
000094  e7c7              B        |L1.38|
;;;181    
                          ENDP

                  _FindFreeHandle PROC
;;;188    */
;;;189    static GUI_HMEM _FindFreeHandle(void) {
000096  48d8              LDR      r0,|L1.1016|
;;;190      int i;
;;;191      for (i = _FirstFreeHandle; i < GUI_MAXBLOCKS; i++) {
000098  6801              LDR      r1,[r0,#0]  ; _FirstFreeHandle
00009a  e009              B        |L1.176|
                  |L1.156|
;;;192        if (aBlock[i].Size == 0) {
00009c  48d4              LDR      r0,|L1.1008|
00009e  eb0000c1          ADD      r0,r0,r1,LSL #3
0000a2  8840              LDRH     r0,[r0,#2]
0000a4  b918              CBNZ     r0,|L1.174|
;;;193          _FirstFreeHandle = i;
0000a6  48d4              LDR      r0,|L1.1016|
0000a8  6001              STR      r1,[r0,#0]  ; _FirstFreeHandle
;;;194          return i;
0000aa  b208              SXTH     r0,r1
                  |L1.172|
;;;195        }
;;;196      }
;;;197      GUI_DEBUG_ERROROUT1("Insufficient memory handles configured (GUI_MAXBLOCKS == %d (See GUIConf.h))", GUI_MAXBLOCKS);
;;;198      return GUI_HMEM_NULL;
;;;199    }
0000ac  4770              BX       lr
                  |L1.174|
0000ae  1c49              ADDS     r1,r1,#1              ;191
                  |L1.176|
0000b0  f5b17fc4          CMP      r1,#0x188             ;191
0000b4  dbf2              BLT      |L1.156|
0000b6  2000              MOVS     r0,#0                 ;198
0000b8  e7f8              B        |L1.172|
;;;200    
                          ENDP

                  _FindHole PROC
;;;208    */
;;;209    static GUI_HMEM _FindHole(GUI_ALLOC_DATATYPE Size) {
0000ba  b530              PUSH     {r4,r5,lr}
0000bc  4602              MOV      r2,r0
;;;210      int i, iNext;
;;;211      for (i=0; (iNext = aBlock[i].Next) != 0; i = iNext) {
0000be  2100              MOVS     r1,#0
0000c0  e011              B        |L1.230|
                  |L1.194|
;;;212        GUI_ALLOC_DATATYPE NumFreeBytes = aBlock[iNext].Off- (aBlock[i].Off+aBlock[i].Size);
0000c2  48cb              LDR      r0,|L1.1008|
0000c4  f8300031          LDRH     r0,[r0,r1,LSL #3]
0000c8  4dc9              LDR      r5,|L1.1008|
0000ca  eb0505c1          ADD      r5,r5,r1,LSL #3
0000ce  886d              LDRH     r5,[r5,#2]
0000d0  4428              ADD      r0,r0,r5
0000d2  4dc7              LDR      r5,|L1.1008|
0000d4  f8355033          LDRH     r5,[r5,r3,LSL #3]
0000d8  1a28              SUBS     r0,r5,r0
0000da  b204              SXTH     r4,r0
;;;213        if (NumFreeBytes>=Size) {
0000dc  4294              CMP      r4,r2
0000de  db01              BLT      |L1.228|
;;;214          return i;
0000e0  b208              SXTH     r0,r1
                  |L1.226|
;;;215        }
;;;216      }
;;;217      /* Check last block */
;;;218      if (GUI_ALLOC_SIZE - (aBlock[i].Off+aBlock[i].Size) >= Size) {
;;;219        return i;
;;;220      }
;;;221      return -1;
;;;222    }
0000e2  bd30              POP      {r4,r5,pc}
                  |L1.228|
0000e4  4619              MOV      r1,r3                 ;211
                  |L1.230|
0000e6  48c2              LDR      r0,|L1.1008|
0000e8  eb0000c1          ADD      r0,r0,r1,LSL #3       ;211
0000ec  8883              LDRH     r3,[r0,#4]            ;211
0000ee  2b00              CMP      r3,#0                 ;211
0000f0  d1e7              BNE      |L1.194|
0000f2  48bf              LDR      r0,|L1.1008|
0000f4  f9300031          LDRSH    r0,[r0,r1,LSL #3]     ;218
0000f8  4cbd              LDR      r4,|L1.1008|
0000fa  eb0404c1          ADD      r4,r4,r1,LSL #3       ;218
0000fe  f9b44002          LDRSH    r4,[r4,#2]            ;218
000102  4420              ADD      r0,r0,r4              ;218
000104  f24304d4          MOV      r4,#0x30d4            ;218
000108  1a20              SUBS     r0,r4,r0              ;218
00010a  4290              CMP      r0,r2                 ;218
00010c  db01              BLT      |L1.274|
00010e  b208              SXTH     r0,r1                 ;219
000110  e7e7              B        |L1.226|
                  |L1.274|
000112  f04f30ff          MOV      r0,#0xffffffff        ;221
000116  e7e4              B        |L1.226|
;;;223    
                          ENDP

                  _CreateHole PROC
;;;231    */
;;;232    static GUI_HMEM _CreateHole(GUI_ALLOC_DATATYPE Size) {
000118  e92d47f0          PUSH     {r4-r10,lr}
00011c  4606              MOV      r6,r0
;;;233      int i, iNext;
;;;234      int r = -1;
00011e  f04f39ff          MOV      r9,#0xffffffff
;;;235      for (i=0; (iNext =aBlock[i].Next) !=0; i= iNext) {
000122  2400              MOVS     r4,#0
000124  e038              B        |L1.408|
                  |L1.294|
;;;236        GUI_ALLOC_DATATYPE NumFreeBytes = aBlock[iNext].Off- (aBlock[i].Off+aBlock[i].Size);
000126  48b2              LDR      r0,|L1.1008|
000128  f8300034          LDRH     r0,[r0,r4,LSL #3]
00012c  49b0              LDR      r1,|L1.1008|
00012e  eb0101c4          ADD      r1,r1,r4,LSL #3
000132  8849              LDRH     r1,[r1,#2]
000134  4408              ADD      r0,r0,r1
000136  49ae              LDR      r1,|L1.1008|
000138  f8311035          LDRH     r1,[r1,r5,LSL #3]
00013c  1a08              SUBS     r0,r1,r0
00013e  fa0ffa80          SXTH     r10,r0
;;;237        if (NumFreeBytes < Size) {
000142  45b2              CMP      r10,r6
000144  da27              BGE      |L1.406|
;;;238          GUI_ALLOC_DATATYPE NumBytesBeforeBlock = aBlock[iNext].Off - (aBlock[i].Off+aBlock[i].Size);
000146  48aa              LDR      r0,|L1.1008|
000148  f8300034          LDRH     r0,[r0,r4,LSL #3]
00014c  49a8              LDR      r1,|L1.1008|
00014e  eb0101c4          ADD      r1,r1,r4,LSL #3
000152  8849              LDRH     r1,[r1,#2]
000154  4408              ADD      r0,r0,r1
000156  49a6              LDR      r1,|L1.1008|
000158  f8311035          LDRH     r1,[r1,r5,LSL #3]
00015c  1a08              SUBS     r0,r1,r0
00015e  b207              SXTH     r7,r0
;;;239          if (NumBytesBeforeBlock) {
000160  b1c7              CBZ      r7,|L1.404|
;;;240            U8* pData = &GUI_Heap.abHeap[aBlock[iNext].Off];
000162  48a3              LDR      r0,|L1.1008|
000164  f9300035          LDRSH    r0,[r0,r5,LSL #3]
000168  49a4              LDR      r1,|L1.1020|
00016a  eb000801          ADD      r8,r0,r1
;;;241            memmove(pData-NumBytesBeforeBlock, pData, aBlock[iNext].Size);
00016e  49a0              LDR      r1,|L1.1008|
000170  eb0101c5          ADD      r1,r1,r5,LSL #3
000174  f9b12002          LDRSH    r2,[r1,#2]
000178  eba80007          SUB      r0,r8,r7
00017c  4641              MOV      r1,r8
00017e  f7fffffe          BL       __aeabi_memmove
;;;242            aBlock[iNext].Off -=NumBytesBeforeBlock;
000182  489b              LDR      r0,|L1.1008|
000184  f8300035          LDRH     r0,[r0,r5,LSL #3]
000188  1bc0              SUBS     r0,r0,r7
00018a  b200              SXTH     r0,r0
00018c  4998              LDR      r1,|L1.1008|
00018e  f8210035          STRH     r0,[r1,r5,LSL #3]
;;;243          }
000192  bf00              NOP      
                  |L1.404|
;;;244        }
000194  bf00              NOP      
                  |L1.406|
000196  462c              MOV      r4,r5                 ;235
                  |L1.408|
000198  4895              LDR      r0,|L1.1008|
00019a  eb0000c4          ADD      r0,r0,r4,LSL #3       ;235
00019e  8885              LDRH     r5,[r0,#4]            ;235
0001a0  2d00              CMP      r5,#0                 ;235
0001a2  d1c0              BNE      |L1.294|
;;;245      }
;;;246      /* Check last block */
;;;247      if (GUI_ALLOC_SIZE - (aBlock[i].Off+aBlock[i].Size) >= Size) {
0001a4  4892              LDR      r0,|L1.1008|
0001a6  f9300034          LDRSH    r0,[r0,r4,LSL #3]
0001aa  4991              LDR      r1,|L1.1008|
0001ac  eb0101c4          ADD      r1,r1,r4,LSL #3
0001b0  f9b11002          LDRSH    r1,[r1,#2]
0001b4  4408              ADD      r0,r0,r1
0001b6  f24301d4          MOV      r1,#0x30d4
0001ba  1a08              SUBS     r0,r1,r0
0001bc  42b0              CMP      r0,r6
0001be  db00              BLT      |L1.450|
;;;248        r = i;
0001c0  46a1              MOV      r9,r4
                  |L1.450|
;;;249      }
;;;250      return r;
0001c2  fa0ff089          SXTH     r0,r9
;;;251    }
0001c6  e8bd87f0          POP      {r4-r10,pc}
;;;252    
                          ENDP

                  GUI_ALLOC_Init PROC
;;;340    */
;;;341    void GUI_ALLOC_Init(void) {
0001ca  f2401087          MOV      r0,#0x187
;;;342      GUI_DEBUG_LOG("\nGUI_ALLOC_Init...");
;;;343      GUI_ALLOC.NumFreeBlocksMin = GUI_ALLOC.NumFreeBlocks = GUI_MAXBLOCKS-1;
0001ce  4989              LDR      r1,|L1.1012|
0001d0  6048              STR      r0,[r1,#4]  ; GUI_ALLOC
0001d2  6088              STR      r0,[r1,#8]  ; GUI_ALLOC
;;;344      GUI_ALLOC.NumFreeBytesMin  = GUI_ALLOC.NumFreeBytes  = GUI_ALLOC_SIZE;
0001d4  f24300d4          MOV      r0,#0x30d4
0001d8  81c8              STRH     r0,[r1,#0xe]
0001da  8208              STRH     r0,[r1,#0x10]
;;;345      GUI_ALLOC.NumUsedBlocks = 0;
0001dc  2000              MOVS     r0,#0
0001de  6008              STR      r0,[r1,#0]  ; GUI_ALLOC
;;;346      GUI_ALLOC.NumUsedBytes = 0;
0001e0  8188              STRH     r0,[r1,#0xc]
;;;347      aBlock[0].Size = (1<<GUI_BLOCK_ALIGN);  /* occupy minimum for a block */
0001e2  2004              MOVS     r0,#4
0001e4  4982              LDR      r1,|L1.1008|
0001e6  8048              STRH     r0,[r1,#2]
;;;348      aBlock[0].Off  = 0;
0001e8  2000              MOVS     r0,#0
0001ea  8008              STRH     r0,[r1,#0]
;;;349      aBlock[0].Next = 0;
0001ec  8088              STRH     r0,[r1,#4]
;;;350      IsInitialized =1;
0001ee  2001              MOVS     r0,#1
0001f0  4983              LDR      r1,|L1.1024|
0001f2  7008              STRB     r0,[r1,#0]
;;;351    }
0001f4  4770              BX       lr
;;;352    
                          ENDP

                  _CheckInit PROC
;;;256    */
;;;257    static void _CheckInit(void) {
0001f6  b500              PUSH     {lr}
;;;258      if (!IsInitialized) {
0001f8  4881              LDR      r0,|L1.1024|
0001fa  7800              LDRB     r0,[r0,#0]  ; IsInitialized
0001fc  b908              CBNZ     r0,|L1.514|
;;;259        GUI_ALLOC_Init();
0001fe  f7fffffe          BL       GUI_ALLOC_Init
                  |L1.514|
;;;260      }
;;;261    }
000202  bd00              POP      {pc}
;;;262    
                          ENDP

                  GUI_ALLOC_GetMaxSize PROC
;;;431    */
;;;432    GUI_ALLOC_DATATYPE GUI_ALLOC_GetMaxSize(void) {
000204  e92d41f0          PUSH     {r4-r8,lr}
;;;433      GUI_ALLOC_DATATYPE r = 0;
000208  2700              MOVS     r7,#0
;;;434      GUI_ALLOC_DATATYPE NumFreeBytes;
;;;435      int i, iNext;
;;;436    
;;;437      GUI_LOCK();
;;;438      _CheckInit();
00020a  f7fffffe          BL       _CheckInit
;;;439      for (i=0; (iNext =aBlock[i].Next) !=0; i= iNext) {
00020e  2500              MOVS     r5,#0
000210  e010              B        |L1.564|
                  |L1.530|
;;;440        NumFreeBytes = aBlock[iNext].Off- (aBlock[i].Off+aBlock[i].Size);
000212  4877              LDR      r0,|L1.1008|
000214  f8300035          LDRH     r0,[r0,r5,LSL #3]
000218  4975              LDR      r1,|L1.1008|
00021a  eb0101c5          ADD      r1,r1,r5,LSL #3
00021e  8849              LDRH     r1,[r1,#2]
000220  4408              ADD      r0,r0,r1
000222  4973              LDR      r1,|L1.1008|
000224  f8311036          LDRH     r1,[r1,r6,LSL #3]
000228  1a08              SUBS     r0,r1,r0
00022a  b204              SXTH     r4,r0
;;;441        if (NumFreeBytes > r) {
00022c  42bc              CMP      r4,r7
00022e  dd00              BLE      |L1.562|
;;;442          r = NumFreeBytes;
000230  4627              MOV      r7,r4
                  |L1.562|
000232  4635              MOV      r5,r6                 ;439
                  |L1.564|
000234  486e              LDR      r0,|L1.1008|
000236  eb0000c5          ADD      r0,r0,r5,LSL #3       ;439
00023a  8886              LDRH     r6,[r0,#4]            ;439
00023c  2e00              CMP      r6,#0                 ;439
00023e  d1e8              BNE      |L1.530|
;;;443        }
;;;444      }
;;;445      /* Check last block */
;;;446      NumFreeBytes = (GUI_ALLOC_SIZE - (aBlock[i].Off+aBlock[i].Size));
000240  486b              LDR      r0,|L1.1008|
000242  f8300035          LDRH     r0,[r0,r5,LSL #3]
000246  496a              LDR      r1,|L1.1008|
000248  eb0101c5          ADD      r1,r1,r5,LSL #3
00024c  8849              LDRH     r1,[r1,#2]
00024e  4408              ADD      r0,r0,r1
000250  f24301d4          MOV      r1,#0x30d4
000254  1a08              SUBS     r0,r1,r0
000256  b204              SXTH     r4,r0
;;;447      if (NumFreeBytes > r) {
000258  42bc              CMP      r4,r7
00025a  dd00              BLE      |L1.606|
;;;448        r = NumFreeBytes;
00025c  4627              MOV      r7,r4
                  |L1.606|
;;;449      }
;;;450      GUI_UNLOCK();
;;;451      return r;
00025e  4638              MOV      r0,r7
;;;452    }
000260  e8bd81f0          POP      {r4-r8,pc}
;;;453    
                          ENDP

                  _GetNumFreeBytes PROC
;;;266    */
;;;267    static GUI_ALLOC_DATATYPE _GetNumFreeBytes(void) {
000264  b510              PUSH     {r4,lr}
;;;268      if (_LockCnt) {
000266  4867              LDR      r0,|L1.1028|
000268  6800              LDR      r0,[r0,#0]  ; _LockCnt
00026a  b110              CBZ      r0,|L1.626|
;;;269        return GUI_ALLOC_GetMaxSize();
00026c  f7fffffe          BL       GUI_ALLOC_GetMaxSize
                  |L1.624|
;;;270      } else {
;;;271        return GUI_ALLOC.NumFreeBytes;  
;;;272      }
;;;273    }
000270  bd10              POP      {r4,pc}
                  |L1.626|
000272  4860              LDR      r0,|L1.1012|
000274  f9b0000e          LDRSH    r0,[r0,#0xe]          ;271  ; GUI_ALLOC
000278  e7fa              B        |L1.624|
;;;274    
                          ENDP

                  _Alloc PROC
;;;278    */
;;;279    static GUI_HMEM _Alloc(GUI_ALLOC_DATATYPE size) {
00027a  b570              PUSH     {r4-r6,lr}
00027c  4606              MOV      r6,r0
;;;280      GUI_HMEM hMemNew, hMemIns;
;;;281      _CheckInit();
00027e  f7fffffe          BL       _CheckInit
;;;282      size = _Size2LegalSize(size);
000282  4630              MOV      r0,r6
000284  f7fffffe          BL       _Size2LegalSize
000288  4606              MOV      r6,r0
;;;283      /* Check if memory is available at all ...*/
;;;284      if (size > _GetNumFreeBytes()) {
00028a  f7fffffe          BL       _GetNumFreeBytes
00028e  42b0              CMP      r0,r6
000290  da01              BGE      |L1.662|
;;;285        GUI_DEBUG_WARN1("GUI_ALLOC_Alloc: Insufficient memory configured (Trying to alloc % bytes)", size);
;;;286        return 0;
000292  2000              MOVS     r0,#0
                  |L1.660|
;;;287      }
;;;288      /* Locate free handle */
;;;289      if ((hMemNew = _FindFreeHandle()) == 0) {
;;;290        return 0;
;;;291      }
;;;292      /* Locate or Create hole of sufficient size */
;;;293      hMemIns = _FindHole(size);
;;;294      #if GUI_ALLOC_AUTDEFRAG
;;;295        if (hMemIns == -1) {
;;;296          if (_LockCnt == 0) {
;;;297            hMemIns = _CreateHole(size);
;;;298          }
;;;299        }
;;;300      #endif
;;;301      /* Occupy hole */
;;;302      if (hMemIns==-1) {
;;;303        GUI_DEBUG_ERROROUT1("GUI_ALLOC_Alloc: Could not allocate %d bytes",size);
;;;304        return 0;
;;;305    	}
;;;306      {
;;;307        GUI_ALLOC_DATATYPE Off = aBlock[hMemIns].Off + aBlock[hMemIns].Size;
;;;308        int Next = aBlock[hMemIns].Next;
;;;309        aBlock[hMemNew].Size  = size;
;;;310        aBlock[hMemNew].Off   = Off;
;;;311        if ((aBlock[hMemNew].Next  = Next) >0) {
;;;312          aBlock[Next].Prev = hMemNew;  
;;;313        }
;;;314        aBlock[hMemNew].Prev  = hMemIns;
;;;315        aBlock[hMemIns].Next  = hMemNew;
;;;316      }
;;;317      /* Keep track of number of blocks and av. memory */
;;;318      GUI_ALLOC.NumUsedBlocks++;
;;;319      GUI_ALLOC.NumFreeBlocks--;
;;;320      if (GUI_ALLOC.NumFreeBlocksMin > GUI_ALLOC.NumFreeBlocks) {
;;;321        GUI_ALLOC.NumFreeBlocksMin = GUI_ALLOC.NumFreeBlocks;
;;;322      }
;;;323      GUI_ALLOC.NumUsedBytes += size;
;;;324      GUI_ALLOC.NumFreeBytes -= size;
;;;325      if (GUI_ALLOC.NumFreeBytesMin > GUI_ALLOC.NumFreeBytes) {
;;;326        GUI_ALLOC.NumFreeBytesMin = GUI_ALLOC.NumFreeBytes;
;;;327      }
;;;328      return hMemNew;
;;;329    }
000294  bd70              POP      {r4-r6,pc}
                  |L1.662|
000296  f7fffffe          BL       _FindFreeHandle
00029a  0005              MOVS     r5,r0                 ;289
00029c  d100              BNE      |L1.672|
00029e  e7f9              B        |L1.660|
                  |L1.672|
0002a0  4630              MOV      r0,r6                 ;293
0002a2  f7fffffe          BL       _FindHole
0002a6  4604              MOV      r4,r0                 ;293
0002a8  1c60              ADDS     r0,r4,#1              ;295
0002aa  b930              CBNZ     r0,|L1.698|
0002ac  4855              LDR      r0,|L1.1028|
0002ae  6800              LDR      r0,[r0,#0]            ;296  ; _LockCnt
0002b0  b918              CBNZ     r0,|L1.698|
0002b2  4630              MOV      r0,r6                 ;297
0002b4  f7fffffe          BL       _CreateHole
0002b8  4604              MOV      r4,r0                 ;297
                  |L1.698|
0002ba  1c60              ADDS     r0,r4,#1              ;302
0002bc  b908              CBNZ     r0,|L1.706|
0002be  2000              MOVS     r0,#0                 ;304
0002c0  e7e8              B        |L1.660|
                  |L1.706|
0002c2  4a4b              LDR      r2,|L1.1008|
0002c4  f8322034          LDRH     r2,[r2,r4,LSL #3]     ;307
0002c8  4b49              LDR      r3,|L1.1008|
0002ca  eb0303c4          ADD      r3,r3,r4,LSL #3       ;307
0002ce  885b              LDRH     r3,[r3,#2]            ;307
0002d0  441a              ADD      r2,r2,r3              ;307
0002d2  b211              SXTH     r1,r2                 ;307
0002d4  4a46              LDR      r2,|L1.1008|
0002d6  eb0202c4          ADD      r2,r2,r4,LSL #3       ;308
0002da  8890              LDRH     r0,[r2,#4]            ;308
0002dc  4a44              LDR      r2,|L1.1008|
0002de  eb0202c5          ADD      r2,r2,r5,LSL #3       ;309
0002e2  8056              STRH     r6,[r2,#2]            ;309
0002e4  4a42              LDR      r2,|L1.1008|
0002e6  f8221035          STRH     r1,[r2,r5,LSL #3]     ;310
0002ea  eb0202c5          ADD      r2,r2,r5,LSL #3       ;311
0002ee  8090              STRH     r0,[r2,#4]            ;311
0002f0  2800              CMP      r0,#0                 ;311
0002f2  dd03              BLE      |L1.764|
0002f4  4b3e              LDR      r3,|L1.1008|
0002f6  eb0303c0          ADD      r3,r3,r0,LSL #3       ;312
0002fa  80dd              STRH     r5,[r3,#6]            ;312
                  |L1.764|
0002fc  4b3c              LDR      r3,|L1.1008|
0002fe  eb0303c5          ADD      r3,r3,r5,LSL #3       ;314
000302  80dc              STRH     r4,[r3,#6]            ;314
000304  4b3a              LDR      r3,|L1.1008|
000306  eb0303c4          ADD      r3,r3,r4,LSL #3       ;315
00030a  809d              STRH     r5,[r3,#4]            ;315
00030c  4839              LDR      r0,|L1.1012|
00030e  6800              LDR      r0,[r0,#0]            ;318  ; GUI_ALLOC
000310  1c40              ADDS     r0,r0,#1              ;318
000312  4938              LDR      r1,|L1.1012|
000314  6008              STR      r0,[r1,#0]            ;318  ; GUI_ALLOC
000316  4608              MOV      r0,r1                 ;319
000318  6840              LDR      r0,[r0,#4]            ;319  ; GUI_ALLOC
00031a  1e40              SUBS     r0,r0,#1              ;319
00031c  6048              STR      r0,[r1,#4]            ;319  ; GUI_ALLOC
00031e  4608              MOV      r0,r1                 ;320
000320  6880              LDR      r0,[r0,#8]            ;320  ; GUI_ALLOC
000322  6849              LDR      r1,[r1,#4]            ;320  ; GUI_ALLOC
000324  4288              CMP      r0,r1                 ;320
000326  dd03              BLE      |L1.816|
000328  4832              LDR      r0,|L1.1012|
00032a  6840              LDR      r0,[r0,#4]            ;321  ; GUI_ALLOC
00032c  4931              LDR      r1,|L1.1012|
00032e  6088              STR      r0,[r1,#8]            ;321  ; GUI_ALLOC
                  |L1.816|
000330  4830              LDR      r0,|L1.1012|
000332  8980              LDRH     r0,[r0,#0xc]          ;323  ; GUI_ALLOC
000334  4430              ADD      r0,r0,r6              ;323
000336  b200              SXTH     r0,r0                 ;323
000338  492e              LDR      r1,|L1.1012|
00033a  8188              STRH     r0,[r1,#0xc]          ;323
00033c  4608              MOV      r0,r1                 ;324
00033e  89c0              LDRH     r0,[r0,#0xe]          ;324  ; GUI_ALLOC
000340  1b80              SUBS     r0,r0,r6              ;324
000342  b200              SXTH     r0,r0                 ;324
000344  81c8              STRH     r0,[r1,#0xe]          ;324
000346  4608              MOV      r0,r1                 ;325
000348  f9b00010          LDRSH    r0,[r0,#0x10]         ;325  ; GUI_ALLOC
00034c  f9b1100e          LDRSH    r1,[r1,#0xe]          ;325  ; GUI_ALLOC
000350  4288              CMP      r0,r1                 ;325
000352  dd03              BLE      |L1.860|
000354  4827              LDR      r0,|L1.1012|
000356  89c0              LDRH     r0,[r0,#0xe]          ;326  ; GUI_ALLOC
000358  4926              LDR      r1,|L1.1012|
00035a  8208              STRH     r0,[r1,#0x10]         ;326
                  |L1.860|
00035c  4628              MOV      r0,r5                 ;328
00035e  e799              B        |L1.660|
;;;330    
                          ENDP

                  GUI_ALLOC_AllocNoInit PROC
;;;356    */
;;;357    GUI_HMEM GUI_ALLOC_AllocNoInit(GUI_ALLOC_DATATYPE Size) {
000360  b570              PUSH     {r4-r6,lr}
000362  4604              MOV      r4,r0
;;;358      GUI_HMEM hMem;
;;;359      if (Size == 0) {
000364  b90c              CBNZ     r4,|L1.874|
;;;360        return (GUI_HMEM)0;
000366  2000              MOVS     r0,#0
                  |L1.872|
;;;361      }
;;;362      GUI_LOCK();
;;;363      GUI_DEBUG_LOG2("\nGUI_ALLOC_AllocNoInit... requesting %d, %d avail", Size, GUI_ALLOC.NumFreeBytes);
;;;364      hMem = _Alloc(Size);
;;;365      GUI_DEBUG_LOG1("\nGUI_ALLOC_AllocNoInit : Handle", hMem);
;;;366      GUI_UNLOCK();
;;;367      return hMem;
;;;368    }
000368  bd70              POP      {r4-r6,pc}
                  |L1.874|
00036a  4620              MOV      r0,r4                 ;364
00036c  f7fffffe          BL       _Alloc
000370  4605              MOV      r5,r0                 ;364
000372  4628              MOV      r0,r5                 ;367
000374  e7f8              B        |L1.872|
;;;369    
                          ENDP

                  GUI_ALLOC_h2p PROC
;;;373    */
;;;374    void* GUI_ALLOC_h2p(GUI_HMEM  hMem) {
000376  4601              MOV      r1,r0
;;;375      GUI_ASSERT_LOCK();
;;;376      #if GUI_DEBUG_LEVEL > 0
;;;377        if (!hMem) {
000378  b909              CBNZ     r1,|L1.894|
;;;378          GUI_DEBUG_ERROROUT("\n"__FILE__ " GUI_ALLOC_h2p: illegal argument (0 handle)");
;;;379          return 0;
00037a  2000              MOVS     r0,#0
                  |L1.892|
;;;380        }
;;;381        if (aBlock[hMem].Size == 0) {
;;;382          GUI_DEBUG_ERROROUT("Dereferencing free block");
;;;383        }
;;;384    
;;;385      #endif
;;;386      return HMEM2PTR(hMem);
;;;387    }
00037c  4770              BX       lr
                  |L1.894|
00037e  481c              LDR      r0,|L1.1008|
000380  f9300031          LDRSH    r0,[r0,r1,LSL #3]     ;386
000384  4a1d              LDR      r2,|L1.1020|
000386  4410              ADD      r0,r0,r2              ;386
000388  e7f8              B        |L1.892|
;;;388    
                          ENDP

                  GUI_ALLOC_GetNumFreeBytes PROC
;;;392    */
;;;393    GUI_ALLOC_DATATYPE GUI_ALLOC_GetNumFreeBytes(void) {
00038a  b510              PUSH     {r4,lr}
;;;394      _CheckInit();
00038c  f7fffffe          BL       _CheckInit
;;;395      return GUI_ALLOC.NumFreeBytes;
000390  4818              LDR      r0,|L1.1012|
000392  f9b0000e          LDRSH    r0,[r0,#0xe]  ; GUI_ALLOC
;;;396    }
000396  bd10              POP      {r4,pc}
;;;397    
                          ENDP

                  GUI_ALLOC_GetNumFreeBlocks PROC
;;;401    */
;;;402    GUI_ALLOC_DATATYPE GUI_ALLOC_GetNumFreeBlocks(void) {
000398  b510              PUSH     {r4,lr}
;;;403      _CheckInit();
00039a  f7fffffe          BL       _CheckInit
;;;404      return GUI_ALLOC.NumFreeBlocks;
00039e  4815              LDR      r0,|L1.1012|
0003a0  8880              LDRH     r0,[r0,#4]  ; GUI_ALLOC
0003a2  b200              SXTH     r0,r0
;;;405    }
0003a4  bd10              POP      {r4,pc}
;;;406    
                          ENDP

                  GUI_ALLOC_GetNumUsedBytes PROC
;;;410    */
;;;411    GUI_ALLOC_DATATYPE GUI_ALLOC_GetNumUsedBytes(void) {
0003a6  b510              PUSH     {r4,lr}
;;;412      _CheckInit();
0003a8  f7fffffe          BL       _CheckInit
;;;413      return GUI_ALLOC.NumUsedBytes;
0003ac  4811              LDR      r0,|L1.1012|
0003ae  f9b0000c          LDRSH    r0,[r0,#0xc]  ; GUI_ALLOC
;;;414    }
0003b2  bd10              POP      {r4,pc}
;;;415    
                          ENDP

                  GUI_ALLOC_GetNumUsedBlocks PROC
;;;419    */
;;;420    GUI_ALLOC_DATATYPE GUI_ALLOC_GetNumUsedBlocks(void) {
0003b4  b510              PUSH     {r4,lr}
;;;421      _CheckInit();
0003b6  f7fffffe          BL       _CheckInit
;;;422      return GUI_ALLOC.NumUsedBlocks;
0003ba  480e              LDR      r0,|L1.1012|
0003bc  8800              LDRH     r0,[r0,#0]  ; GUI_ALLOC
0003be  b200              SXTH     r0,r0
;;;423    }
0003c0  bd10              POP      {r4,pc}
;;;424    
                          ENDP

                  GUI_ALLOC_Lock PROC
;;;461    */
;;;462    void GUI_ALLOC_Lock(void) {
0003c2  4810              LDR      r0,|L1.1028|
;;;463      _LockCnt++;
0003c4  6800              LDR      r0,[r0,#0]  ; _LockCnt
0003c6  1c40              ADDS     r0,r0,#1
0003c8  490e              LDR      r1,|L1.1028|
0003ca  6008              STR      r0,[r1,#0]  ; _LockCnt
;;;464    }
0003cc  4770              BX       lr
;;;465    
                          ENDP

                  GUI_ALLOC_Unlock PROC
;;;473    */
;;;474    void GUI_ALLOC_Unlock(void) {
0003ce  480d              LDR      r0,|L1.1028|
;;;475      _LockCnt--;
0003d0  6800              LDR      r0,[r0,#0]  ; _LockCnt
0003d2  1e40              SUBS     r0,r0,#1
0003d4  490b              LDR      r1,|L1.1028|
0003d6  6008              STR      r0,[r1,#0]  ; _LockCnt
;;;476    }
0003d8  4770              BX       lr
;;;477    
                          ENDP

                  GUI_ALLOC_GetSize PROC
;;;594    */
;;;595    GUI_ALLOC_DATATYPE GUI_ALLOC_GetSize(GUI_HMEM  hMem) {
0003da  b570              PUSH     {r4-r6,lr}
0003dc  4604              MOV      r4,r0
;;;596      GUI_ALLOC_DATATYPE r;
;;;597    
;;;598      r = 0;
0003de  2500              MOVS     r5,#0
;;;599      if (hMem) {
0003e0  b11c              CBZ      r4,|L1.1002|
;;;600        r = _GetSize(hMem);
0003e2  4620              MOV      r0,r4
0003e4  f7fffffe          BL       _GetSize
0003e8  4605              MOV      r5,r0
                  |L1.1002|
;;;601      }
;;;602      return r;
0003ea  4628              MOV      r0,r5
;;;603    }
0003ec  bd70              POP      {r4-r6,pc}
0003ee  0000              DCW      0x0000
                  |L1.1008|
                          DCD      aBlock
                  |L1.1012|
                          DCD      GUI_ALLOC
                  |L1.1016|
                          DCD      _FirstFreeHandle
                  |L1.1020|
                          DCD      GUI_Heap
                  |L1.1024|
                          DCD      IsInitialized
                  |L1.1028|
                          DCD      _LockCnt
                          ENDP

                  GUI_ALLOC_Free PROC
;;;608    */
;;;609    void GUI_ALLOC_Free(GUI_HMEM hMem) {
000408  b510              PUSH     {r4,lr}
00040a  4604              MOV      r4,r0
;;;610      if (hMem == GUI_HMEM_NULL) { /* Note: This is not an error, it is permitted */
00040c  b904              CBNZ     r4,|L1.1040|
                  |L1.1038|
;;;611        return;
;;;612      }
;;;613      GUI_LOCK();
;;;614      GUI_DEBUG_LOG1("\nGUI_ALLOC_Free(%d)", hMem);
;;;615      _Free(hMem);
;;;616      GUI_UNLOCK();
;;;617    }
00040e  bd10              POP      {r4,pc}
                  |L1.1040|
000410  4620              MOV      r0,r4                 ;615
000412  f7fffffe          BL       _Free
000416  bf00              NOP      
000418  e7f9              B        |L1.1038|
;;;618    
                          ENDP

                  GUI_ALLOC_FreePtr PROC
;;;623    */
;;;624    void GUI_ALLOC_FreePtr(GUI_HMEM *ph) {
00041a  b510              PUSH     {r4,lr}
00041c  4604              MOV      r4,r0
;;;625      GUI_LOCK();
;;;626      GUI_ALLOC_Free(*ph);
00041e  f9b40000          LDRSH    r0,[r4,#0]
000422  f7fffffe          BL       GUI_ALLOC_Free
;;;627      *ph =0;
000426  2000              MOVS     r0,#0
000428  8020              STRH     r0,[r4,#0]
;;;628      GUI_UNLOCK();
;;;629    }
00042a  bd10              POP      {r4,pc}
;;;630    
                          ENDP

                  GUI_ALLOC_FreePtrArray PROC
;;;634    */
;;;635    void GUI_ALLOC_FreePtrArray(GUI_HMEM * pArray, int NumElems) {
00042c  b570              PUSH     {r4-r6,lr}
00042e  4605              MOV      r5,r0
000430  460e              MOV      r6,r1
;;;636      int i;
;;;637      for (i = 0; i < NumElems; i++) {
000432  2400              MOVS     r4,#0
000434  e004              B        |L1.1088|
                  |L1.1078|
;;;638        GUI_ALLOC_FreePtr(&pArray[i]);
000436  eb050044          ADD      r0,r5,r4,LSL #1
00043a  f7fffffe          BL       GUI_ALLOC_FreePtr
00043e  1c64              ADDS     r4,r4,#1              ;637
                  |L1.1088|
000440  42b4              CMP      r4,r6                 ;637
000442  dbf8              BLT      |L1.1078|
;;;639      }
;;;640    }
000444  bd70              POP      {r4-r6,pc}
;;;641    
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  GUI_Heap
                          %        12500
                  aBlock
                          %        3136
                  GUI_ALLOC
                          %        20

                          AREA ||.data||, DATA, ALIGN=2

                  IsInitialized
000000  00000000          DCB      0x00,0x00,0x00,0x00
                  _LockCnt
                          DCD      0x00000000
                  _FirstFreeHandle
                          DCD      0x00000001
