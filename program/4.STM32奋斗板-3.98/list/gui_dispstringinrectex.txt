; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\gui_dispstringinrectex.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\gui_dispstringinrectex.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -I.\GUI\AntiAlias -I.\GUI\Config -I.\GUI\ConvertColor -I.\GUI\ConvertMono -I.\GUI\Core -I.\GUI\Font -I.\GUI\GUI_X -I.\GUI\JPEG -I.\GUI\LCDDriver -I.\GUI\MemDev -I.\GUI\MultiLayer -I.\GUI\Widget -I.\GUI\WM -IC:\Users\Administrator\Desktop\gui\STM32·Ü¶·°å-3.98\RTE -Id:\Keil_v5\ARM\PACK\ARM\CMSIS\4.3.0\CMSIS\Include -Id:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.1.0\Device\Include -D__UVISION_VERSION=515 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\gui_dispstringinrectex.crf GUI\Core\GUI_DispStringInRectEx.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _SetRotation PROC
;;;42     */
;;;43     static const GUI_ROTATION * _SetRotation(const GUI_ROTATION* pLCD_Api) {
000000  4601              MOV      r1,r0
;;;44       const GUI_ROTATION * pLCD_ApiOld;
;;;45       GUI_LOCK();
;;;46       pLCD_ApiOld = GUI_pLCD_APIList;
000002  4a27              LDR      r2,|L1.160|
000004  6810              LDR      r0,[r2,#0]  ; GUI_pLCD_APIList
;;;47       if (pLCD_Api) {
000006  b119              CBZ      r1,|L1.16|
;;;48         GUI_Context.pClipRect_HL = NULL;           /* Do not perform high level clipping in rotated mode */
000008  2200              MOVS     r2,#0
00000a  4b26              LDR      r3,|L1.164|
00000c  615a              STR      r2,[r3,#0x14]  ; GUI_Context
00000e  e003              B        |L1.24|
                  |L1.16|
;;;49       } else {
;;;50         GUI_Context.pClipRect_HL = &GUI_Context.ClipRect;
000010  4a24              LDR      r2,|L1.164|
000012  3208              ADDS     r2,r2,#8
000014  4b23              LDR      r3,|L1.164|
000016  615a              STR      r2,[r3,#0x14]  ; GUI_Context
                  |L1.24|
;;;51       }
;;;52       GUI_pLCD_APIList = pLCD_Api;
000018  4a21              LDR      r2,|L1.160|
00001a  6011              STR      r1,[r2,#0]  ; GUI_pLCD_APIList
;;;53       GUI_UNLOCK();
;;;54       return pLCD_ApiOld;
;;;55     }
00001c  4770              BX       lr
;;;56     
                          ENDP

                  GUI_DispStringInRectEx PROC
;;;66     */
;;;67     void GUI_DispStringInRectEx(const char GUI_UNI_PTR *s, GUI_RECT* pRect, int TextAlign, int MaxLen, const GUI_ROTATION * pLCD_Api) {
00001e  e92d47ff          PUSH     {r0-r10,lr}
000022  4607              MOV      r7,r0
000024  460c              MOV      r4,r1
000026  4690              MOV      r8,r2
000028  4699              MOV      r9,r3
00002a  9d0c              LDR      r5,[sp,#0x30]
;;;68       const GUI_ROTATION * pLCD_ApiOld;
;;;69       if (pLCD_Api == GUI_ROTATE_0) {
00002c  b935              CBNZ     r5,|L1.60|
;;;70         /* Do nothing else but calling GUI_DispStringInRectMax if pLCD_Api == GUI_ROTATE_0 */
;;;71         GUI_DispStringInRectMax(s, pRect, TextAlign, MaxLen);
00002e  464b              MOV      r3,r9
000030  4642              MOV      r2,r8
000032  4621              MOV      r1,r4
000034  4638              MOV      r0,r7
000036  f7fffffe          BL       GUI_DispStringInRectMax
00003a  e02e              B        |L1.154|
                  |L1.60|
;;;72       } else {
;;;73         #if (!GUI_WINSUPPORT)
;;;74           GUI_RECT Rect_Old;
;;;75         #else
;;;76           const GUI_RECT * pOldClipRect = NULL;
00003c  2600              MOVS     r6,#0
;;;77         #endif
;;;78         GUI_RECT rClip, rText = {0};
00003e  2000              MOVS     r0,#0
000040  9000              STR      r0,[sp,#0]
000042  9001              STR      r0,[sp,#4]
;;;79         GUI_LOCK();
;;;80         /* Set the clip rectangle */
;;;81         if (pRect) {
000044  b1ac              CBZ      r4,|L1.114|
;;;82           rText = *pRect;
000046  6820              LDR      r0,[r4,#0]
000048  9000              STR      r0,[sp,#0]
00004a  6860              LDR      r0,[r4,#4]
00004c  9001              STR      r0,[sp,#4]
;;;83           GUI_RectDispString = rText;
00004e  4816              LDR      r0,|L1.168|
000050  9900              LDR      r1,[sp,#0]
000052  6001              STR      r1,[r0,#0]  ; GUI_RectDispString
000054  9901              LDR      r1,[sp,#4]
000056  6041              STR      r1,[r0,#4]  ; GUI_RectDispString
;;;84           #if (GUI_WINSUPPORT)
;;;85             pOldClipRect = WM_SetUserClipRect(pRect);
000058  4620              MOV      r0,r4
00005a  f7fffffe          BL       WM_SetUserClipRect
00005e  4606              MOV      r6,r0
;;;86             if (pOldClipRect) {
000060  b13e              CBZ      r6,|L1.114|
;;;87               GUI__IntersectRects(&rClip, pRect, pOldClipRect);
000062  4632              MOV      r2,r6
000064  4621              MOV      r1,r4
000066  a802              ADD      r0,sp,#8
000068  f7fffffe          BL       GUI__IntersectRects
;;;88               WM_SetUserClipRect(&rClip);
00006c  a802              ADD      r0,sp,#8
00006e  f7fffffe          BL       WM_SetUserClipRect
                  |L1.114|
;;;89             }
;;;90           #else
;;;91             Rect_Old = GUI_Context.ClipRect;
;;;92             GUI__IntersectRects(&rClip, pRect, &Rect_Old);
;;;93             LCD_SetClipRectEx(&rClip);
;;;94           #endif
;;;95         }
;;;96         pLCD_ApiOld = _SetRotation(pLCD_Api);                /* Set the new function pointer for rotating text */
000072  4628              MOV      r0,r5
000074  f7fffffe          BL       _SetRotation
000078  4682              MOV      r10,r0
;;;97         pLCD_Api->pfRect2TextRect(&rText);                   /* Calculate the text rectangle */
00007a  4668              MOV      r0,sp
00007c  6869              LDR      r1,[r5,#4]
00007e  4788              BLX      r1
;;;98         GUI__DispStringInRect(s, &rText, TextAlign, MaxLen); /* Display the string */
000080  464b              MOV      r3,r9
000082  4642              MOV      r2,r8
000084  4669              MOV      r1,sp
000086  4638              MOV      r0,r7
000088  f7fffffe          BL       GUI__DispStringInRect
;;;99         /* Restore old clipping rectangle */
;;;100        #if (GUI_WINSUPPORT)
;;;101          WM_SetUserClipRect(pOldClipRect);
00008c  4630              MOV      r0,r6
00008e  f7fffffe          BL       WM_SetUserClipRect
;;;102        #else
;;;103          LCD_SetClipRectEx(&Rect_Old);
;;;104        #endif
;;;105        _SetRotation(pLCD_ApiOld);
000092  4650              MOV      r0,r10
000094  f7fffffe          BL       _SetRotation
;;;106        GUI_UNLOCK();
;;;107      }
000098  bf00              NOP      
                  |L1.154|
;;;108    }
00009a  e8bd87ff          POP      {r0-r10,pc}
;;;109    
                          ENDP

00009e  0000              DCW      0x0000
                  |L1.160|
                          DCD      GUI_pLCD_APIList
                  |L1.164|
                          DCD      GUI_Context
                  |L1.168|
                          DCD      GUI_RectDispString

                          AREA ||.data||, DATA, ALIGN=1

                  GUI_RectDispString
                          %        8
