; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\lcd_rotate180.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\lcd_rotate180.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -I.\GUI\AntiAlias -I.\GUI\Config -I.\GUI\ConvertColor -I.\GUI\ConvertMono -I.\GUI\Core -I.\GUI\Font -I.\GUI\GUI_X -I.\GUI\JPEG -I.\GUI\LCDDriver -I.\GUI\MemDev -I.\GUI\MultiLayer -I.\GUI\Widget -I.\GUI\WM -IC:\Users\Administrator\Desktop\gui\STM32·Ü¶·°å-3.98\RTE -Id:\Keil_v5\ARM\PACK\ARM\CMSIS\4.3.0\CMSIS\Include -Id:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.1.0\Device\Include -D__UVISION_VERSION=515 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\lcd_rotate180.crf GUI\Core\LCD_Rotate180.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _DrawBitLine1BPP PROC
;;;37     */
;;;38     static void  _DrawBitLine1BPP(int x, int y, U8 const GUI_UNI_PTR *p, int Diff, int xsize, const LCD_PIXELINDEX*pTrans) {
000000  e92d4ff8          PUSH     {r3-r11,lr}
000004  4606              MOV      r6,r0
000006  4689              MOV      r9,r1
000008  4615              MOV      r5,r2
00000a  461c              MOV      r4,r3
00000c  e9dd780a          LDRD     r7,r8,[sp,#0x28]
;;;39       LCD_PIXELINDEX Index0 = *(pTrans+0);
000010  f8b80000          LDRH     r0,[r8,#0]
000014  9000              STR      r0,[sp,#0]
;;;40       LCD_PIXELINDEX Index1 = *(pTrans+1);
000016  f8b8a002          LDRH     r10,[r8,#2]
;;;41       x -= Diff;
00001a  1b36              SUBS     r6,r6,r4
;;;42       switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
00001c  48d8              LDR      r0,|L1.896|
00001e  7c00              LDRB     r0,[r0,#0x10]  ; GUI_Context
000020  f0000003          AND      r0,r0,#3
000024  b120              CBZ      r0,|L1.48|
000026  2801              CMP      r0,#1
000028  d038              BEQ      |L1.156|
00002a  2802              CMP      r0,#2
00002c  d157              BNE      |L1.222|
00002e  e01d              B        |L1.108|
                  |L1.48|
;;;43       case 0:
;;;44         do {
000030  bf00              NOP      
                  |L1.50|
;;;45           LCDDEV_L0_SetPixelIndex(x--, y, (*p & (0x80 >> Diff)) ? Index1 : Index0);
000032  7829              LDRB     r1,[r5,#0]
000034  f04f0c80          MOV      r12,#0x80
000038  fa4cfc04          ASR      r12,r12,r4
00003c  ea01010c          AND      r1,r1,r12
000040  b109              CBZ      r1,|L1.70|
000042  4651              MOV      r1,r10
000044  e000              B        |L1.72|
                  |L1.70|
000046  9900              LDR      r1,[sp,#0]
                  |L1.72|
000048  460a              MOV      r2,r1
00004a  4630              MOV      r0,r6
00004c  1e76              SUBS     r6,r6,#1
00004e  49cc              LDR      r1,|L1.896|
000050  6c89              LDR      r1,[r1,#0x48]  ; GUI_Context
000052  6a4b              LDR      r3,[r1,#0x24]
000054  4649              MOV      r1,r9
000056  4798              BLX      r3
;;;46     			if (++Diff == 8) {
000058  1c60              ADDS     r0,r4,#1
00005a  4604              MOV      r4,r0
00005c  2808              CMP      r0,#8
00005e  d101              BNE      |L1.100|
;;;47             Diff = 0;
000060  2400              MOVS     r4,#0
;;;48     				p++;
000062  1c6d              ADDS     r5,r5,#1
                  |L1.100|
;;;49     			}
;;;50     		} while (--xsize);
000064  1e78              SUBS     r0,r7,#1
000066  0007              MOVS     r7,r0
000068  d1e3              BNE      |L1.50|
;;;51         break;
00006a  e038              B        |L1.222|
                  |L1.108|
;;;52       case LCD_DRAWMODE_TRANS:
;;;53         do {
00006c  bf00              NOP      
                  |L1.110|
;;;54       		if (*p & (0x80 >> Diff))
00006e  7828              LDRB     r0,[r5,#0]
000070  2180              MOVS     r1,#0x80
000072  4121              ASRS     r1,r1,r4
000074  4008              ANDS     r0,r0,r1
000076  b130              CBZ      r0,|L1.134|
;;;55             LCDDEV_L0_SetPixelIndex(x, y, Index1);
000078  48c1              LDR      r0,|L1.896|
00007a  6c80              LDR      r0,[r0,#0x48]  ; GUI_Context
00007c  4652              MOV      r2,r10
00007e  4649              MOV      r1,r9
000080  6a43              LDR      r3,[r0,#0x24]
000082  4630              MOV      r0,r6
000084  4798              BLX      r3
                  |L1.134|
;;;56           x--;
000086  1e76              SUBS     r6,r6,#1
;;;57     			if (++Diff == 8) {
000088  1c60              ADDS     r0,r4,#1
00008a  4604              MOV      r4,r0
00008c  2808              CMP      r0,#8
00008e  d101              BNE      |L1.148|
;;;58             Diff = 0;
000090  2400              MOVS     r4,#0
;;;59     				p++;
000092  1c6d              ADDS     r5,r5,#1
                  |L1.148|
;;;60     			}
;;;61     		} while (--xsize);
000094  1e78              SUBS     r0,r7,#1
000096  0007              MOVS     r7,r0
000098  d1e9              BNE      |L1.110|
;;;62         break;
00009a  e020              B        |L1.222|
                  |L1.156|
;;;63       case LCD_DRAWMODE_XOR:;
;;;64         do {
00009c  bf00              NOP      
                  |L1.158|
;;;65       		if (*p & (0x80 >> Diff)) {
00009e  7828              LDRB     r0,[r5,#0]
0000a0  2180              MOVS     r1,#0x80
0000a2  4121              ASRS     r1,r1,r4
0000a4  4008              ANDS     r0,r0,r1
0000a6  b178              CBZ      r0,|L1.200|
;;;66             int Pixel = LCD_L0_GetPixelIndex(x, y);
0000a8  4649              MOV      r1,r9
0000aa  4630              MOV      r0,r6
0000ac  f7fffffe          BL       LCD_L0_GetPixelIndex
0000b0  4683              MOV      r11,r0
;;;67             LCDDEV_L0_SetPixelIndex(x, y, LCD_NUM_COLORS - 1 - Pixel);
0000b2  f64f70ff          MOV      r0,#0xffff
0000b6  eba0020b          SUB      r2,r0,r11
0000ba  48b1              LDR      r0,|L1.896|
0000bc  6c80              LDR      r0,[r0,#0x48]  ; GUI_Context
0000be  4649              MOV      r1,r9
0000c0  6a43              LDR      r3,[r0,#0x24]
0000c2  4630              MOV      r0,r6
0000c4  4798              BLX      r3
;;;68           }
0000c6  bf00              NOP      
                  |L1.200|
;;;69           x--;
0000c8  1e76              SUBS     r6,r6,#1
;;;70     			if (++Diff == 8) {
0000ca  1c60              ADDS     r0,r4,#1
0000cc  4604              MOV      r4,r0
0000ce  2808              CMP      r0,#8
0000d0  d101              BNE      |L1.214|
;;;71             Diff = 0;
0000d2  2400              MOVS     r4,#0
;;;72     				p++;
0000d4  1c6d              ADDS     r5,r5,#1
                  |L1.214|
;;;73     			}
;;;74     		} while (--xsize);
0000d6  1e78              SUBS     r0,r7,#1
0000d8  0007              MOVS     r7,r0
0000da  d1e0              BNE      |L1.158|
;;;75         break;
0000dc  bf00              NOP      
                  |L1.222|
0000de  bf00              NOP                            ;51
;;;76     	}
;;;77     }
0000e0  e8bd8ff8          POP      {r3-r11,pc}
;;;78     
                          ENDP

                  _DrawBitmap PROC
;;;85     */
;;;86     static void _DrawBitmap(int x0, int y0,
0000e4  e92d5ffc          PUSH     {r2-r12,lr}
;;;87                            int xsize, int ysize,
;;;88                            int BitsPerPixel, 
;;;89                            int BytesPerLine,
;;;90                            const U8 GUI_UNI_PTR * pData, int Diff,
;;;91                            const LCD_PIXELINDEX* pTrans)
;;;92     {
0000e8  4681              MOV      r9,r0
0000ea  460d              MOV      r5,r1
0000ec  4616              MOV      r6,r2
0000ee  461f              MOV      r7,r3
0000f0  f8ddb040          LDR      r11,[sp,#0x40]
0000f4  f8dda030          LDR      r10,[sp,#0x30]
0000f8  f8dd8038          LDR      r8,[sp,#0x38]
;;;93       int i;
;;;94       /* Use _DrawBitLineXBPP */
;;;95       for (i = 0; i < ysize; i++) {
0000fc  2400              MOVS     r4,#0
0000fe  e00f              B        |L1.288|
                  |L1.256|
;;;96         switch (BitsPerPixel) {
000100  f1ba0f01          CMP      r10,#1
000104  d108              BNE      |L1.280|
;;;97         case 1:
;;;98           _DrawBitLine1BPP(x0, y0 - i, pData, Diff, xsize, pTrans);
000106  1b29              SUBS     r1,r5,r4
000108  e9cd6b00          STRD     r6,r11,[sp,#0]
00010c  4642              MOV      r2,r8
00010e  4648              MOV      r0,r9
000110  9b0f              LDR      r3,[sp,#0x3c]
000112  f7fffffe          BL       _DrawBitLine1BPP
;;;99           break;
000116  bf00              NOP      
                  |L1.280|
000118  bf00              NOP      
;;;100        }
;;;101        pData += BytesPerLine;
00011a  980d              LDR      r0,[sp,#0x34]
00011c  4480              ADD      r8,r8,r0
00011e  1c64              ADDS     r4,r4,#1              ;95
                  |L1.288|
000120  42bc              CMP      r4,r7                 ;95
000122  dbed              BLT      |L1.256|
;;;102      }
;;;103    }
000124  e8bd9ffc          POP      {r2-r12,pc}
;;;104    
                          ENDP

                  _Rect2TextRect PROC
;;;112    */
;;;113    static void _Rect2TextRect(GUI_RECT * pRect) {
000128  bf00              NOP      
;;;114      GUI_USE_PARA(pRect);
;;;115      /* nothing to do in case of rotating text by 180 degrees */
;;;116    }
00012a  4770              BX       lr
;;;117    
                          ENDP

                  _TransformPoint180 PROC
;;;126    */
;;;127    static void _TransformPoint180(int * pXPos, int * pYPos) {
00012c  e92d47fc          PUSH     {r2-r10,lr}
000130  4604              MOV      r4,r0
000132  460d              MOV      r5,r1
;;;128      GUI_RECT ClientRect = {0};
000134  2000              MOVS     r0,#0
000136  9000              STR      r0,[sp,#0]
000138  9001              STR      r0,[sp,#4]
;;;129      int xPos, yPos, xNumPixel, yNumPixel;
;;;130      /* Get the client rectangle */
;;;131      #if GUI_WINSUPPORT
;;;132        WM_GetWindowRect(&ClientRect);
00013a  4668              MOV      r0,sp
00013c  f7fffffe          BL       WM_GetWindowRect
;;;133      #else
;;;134        GUI_GetClientRect(&ClientRect);
;;;135      #endif
;;;136      xNumPixel = LCD_GetXSize() - 1;
000140  f7fffffe          BL       LCD_GetXSize
000144  f1a00801          SUB      r8,r0,#1
;;;137      yNumPixel = LCD_GetYSize() - 1;
000148  f7fffffe          BL       LCD_GetYSize
00014c  f1a00901          SUB      r9,r0,#1
;;;138      if (ClientRect.x1 > xNumPixel) {
000150  f9bd0004          LDRSH    r0,[sp,#4]
000154  4540              CMP      r0,r8
000156  dd03              BLE      |L1.352|
;;;139        ClientRect.x1 = xNumPixel;
000158  fa0ff088          SXTH     r0,r8
00015c  f8ad0004          STRH     r0,[sp,#4]
                  |L1.352|
;;;140      }
;;;141      if (ClientRect.y1 > yNumPixel) {
000160  f9bd0006          LDRSH    r0,[sp,#6]
000164  4548              CMP      r0,r9
000166  dd03              BLE      |L1.368|
;;;142        ClientRect.y1 = yNumPixel;
000168  fa0ff089          SXTH     r0,r9
00016c  f8ad0006          STRH     r0,[sp,#6]
                  |L1.368|
;;;143      }
;;;144      /* Save old positions */
;;;145      xPos = *pXPos;
000170  6826              LDR      r6,[r4,#0]
;;;146      yPos = *pYPos;
000172  682f              LDR      r7,[r5,#0]
;;;147      /* Handle rotation of text rectangle */
;;;148      *pXPos = ClientRect.x0 + GUI_RectDispString.x1 - (xPos - GUI_RectDispString.x0);
000174  f9bd0000          LDRSH    r0,[sp,#0]
000178  4982              LDR      r1,|L1.900|
00017a  f9b11004          LDRSH    r1,[r1,#4]  ; GUI_RectDispString
00017e  4408              ADD      r0,r0,r1
000180  4980              LDR      r1,|L1.900|
000182  f9b11000          LDRSH    r1,[r1,#0]  ; GUI_RectDispString
000186  1a71              SUBS     r1,r6,r1
000188  1a40              SUBS     r0,r0,r1
00018a  6020              STR      r0,[r4,#0]
;;;149      *pYPos = ClientRect.y0 + GUI_RectDispString.y1 - (yPos - GUI_RectDispString.y0);
00018c  f9bd0002          LDRSH    r0,[sp,#2]
000190  497c              LDR      r1,|L1.900|
000192  f9b11006          LDRSH    r1,[r1,#6]  ; GUI_RectDispString
000196  4408              ADD      r0,r0,r1
000198  497a              LDR      r1,|L1.900|
00019a  f9b11002          LDRSH    r1,[r1,#2]  ; GUI_RectDispString
00019e  1a79              SUBS     r1,r7,r1
0001a0  1a40              SUBS     r0,r0,r1
0001a2  6028              STR      r0,[r5,#0]
;;;150    }
0001a4  e8bd87fc          POP      {r2-r10,pc}
;;;151    
                          ENDP

                  _DrawBitmap180 PROC
;;;155    */
;;;156    static void _DrawBitmap180(int x0, int y0, int xsize, int ysize, int xMul, int yMul,
0001a8  e92d4fff          PUSH     {r0-r11,lr}
;;;157                               int BitsPerPixel, int BytesPerLine,
;;;158                               const U8 GUI_UNI_PTR * pPixel, const LCD_PIXELINDEX* pTrans)
;;;159    {
0001ac  b08b              SUB      sp,sp,#0x2c
0001ae  4614              MOV      r4,r2
0001b0  461d              MOV      r5,r3
0001b2  f8dda060          LDR      r10,[sp,#0x60]
0001b6  f8dd8070          LDR      r8,[sp,#0x70]
0001ba  9f1a              LDR      r7,[sp,#0x68]
;;;160      U8  Data = 0;
0001bc  2000              MOVS     r0,#0
0001be  900a              STR      r0,[sp,#0x28]
;;;161      int x1, y1;
;;;162      /* Handle the optional Y-magnification */
;;;163      y1 = y0 + ysize - 1;
0001c0  980c              LDR      r0,[sp,#0x30]
0001c2  4428              ADD      r0,r0,r5
0001c4  1e40              SUBS     r0,r0,#1
0001c6  9008              STR      r0,[sp,#0x20]
;;;164      x1 = x0 + xsize - 1;
0001c8  980b              LDR      r0,[sp,#0x2c]
0001ca  4420              ADD      r0,r0,r4
0001cc  1e40              SUBS     r0,r0,#1
0001ce  9009              STR      r0,[sp,#0x24]
;;;165      /* Rotate positions */
;;;166      _TransformPoint180(&x0, &y0);
0001d0  a90c              ADD      r1,sp,#0x30
0001d2  a80b              ADD      r0,sp,#0x2c
0001d4  f7fffffe          BL       _TransformPoint180
;;;167      _TransformPoint180(&x1, &y1);
0001d8  a908              ADD      r1,sp,#0x20
0001da  a809              ADD      r0,sp,#0x24
0001dc  f7fffffe          BL       _TransformPoint180
;;;168      /*  Handle BITMAP without magnification */
;;;169      if ((xMul == 1) && (yMul == 1)) {
0001e0  f1ba0f01          CMP      r10,#1
0001e4  d160              BNE      |L1.680|
0001e6  9819              LDR      r0,[sp,#0x64]
0001e8  2801              CMP      r0,#1
0001ea  d15d              BNE      |L1.680|
;;;170        int Diff;
;;;171        /* Clip top */
;;;172        if (y0 > GUI_Context.ClipRect.y1) {
0001ec  4864              LDR      r0,|L1.896|
0001ee  f9b0000e          LDRSH    r0,[r0,#0xe]
0001f2  990c              LDR      r1,[sp,#0x30]
0001f4  4288              CMP      r0,r1
0001f6  da0d              BGE      |L1.532|
;;;173          int Diff = y0 - GUI_Context.ClipRect.y1;
0001f8  4961              LDR      r1,|L1.896|
0001fa  f9b1100e          LDRSH    r1,[r1,#0xe]
0001fe  9a0c              LDR      r2,[sp,#0x30]
000200  1a50              SUBS     r0,r2,r1
;;;174          y0       = GUI_Context.ClipRect.y1;
000202  495f              LDR      r1,|L1.896|
000204  f9b1100e          LDRSH    r1,[r1,#0xe]
000208  910c              STR      r1,[sp,#0x30]
;;;175          pPixel  += Diff * BytesPerLine;
00020a  991b              LDR      r1,[sp,#0x6c]
00020c  fb008801          MLA      r8,r0,r1,r8
;;;176          ysize   -= Diff;
000210  1a2d              SUBS     r5,r5,r0
;;;177        }
000212  bf00              NOP      
                  |L1.532|
;;;178        /* Clip bottom */
;;;179        if (y1 < GUI_Context.ClipRect.y0) {
000214  485a              LDR      r0,|L1.896|
000216  f9b0000a          LDRSH    r0,[r0,#0xa]
00021a  9908              LDR      r1,[sp,#0x20]
00021c  4288              CMP      r0,r1
00021e  dd06              BLE      |L1.558|
;;;180          int Diff = GUI_Context.ClipRect.y0 - y1;
000220  4957              LDR      r1,|L1.896|
000222  f9b1100a          LDRSH    r1,[r1,#0xa]
000226  9a08              LDR      r2,[sp,#0x20]
000228  1a88              SUBS     r0,r1,r2
;;;181          ysize -= Diff;
00022a  1a2d              SUBS     r5,r5,r0
;;;182        }
00022c  bf00              NOP      
                  |L1.558|
;;;183        if (ysize <= 0) {
00022e  2d00              CMP      r5,#0
000230  dc02              BGT      |L1.568|
                  |L1.562|
;;;184    		  return;
;;;185        }
;;;186        /* Clip right side */
;;;187        if (x1 < GUI_Context.ClipRect.x0) {
;;;188          int Diff = GUI_Context.ClipRect.x0 - x1;
;;;189          xsize   -= Diff;
;;;190        }
;;;191        /* Clip left side */
;;;192        Diff = 0;
;;;193        if (x0 > GUI_Context.ClipRect.x1) {
;;;194          Diff   = x0 - GUI_Context.ClipRect.x1;
;;;195    			xsize -= Diff;
;;;196    			switch (BitsPerPixel) {
;;;197    			case 1:
;;;198      			pPixel += (Diff >> 3); x0 += (Diff >> 3) << 3; Diff &= 7;
;;;199    				break;
;;;200    			}
;;;201        }
;;;202        if (xsize <= 0) {
;;;203    		  return;
;;;204        }
;;;205        _DrawBitmap(x0, y0, xsize, ysize, BitsPerPixel, BytesPerLine, pPixel, Diff, pTrans);
;;;206      } else {
;;;207        /* Handle BITMAP with magnification */
;;;208        int x, y;
;;;209        int yi;
;;;210        int Shift = 8 - BitsPerPixel;
;;;211        for (y = y0, yi = 0; yi < ysize; yi++, y -= yMul, pPixel += BytesPerLine) {
;;;212          int yMax = y + yMul - 1;
;;;213          /* Draw if within clip area (Optimization ... "if" is not required !) */
;;;214          if ((yMax >= GUI_Context.ClipRect.y0) && (y <= GUI_Context.ClipRect.y1)) {
;;;215            int BitsLeft = 0;
;;;216            int xi;
;;;217            const U8 GUI_UNI_PTR * pDataLine = pPixel;
;;;218            for (x = x0, xi = 0; xi < xsize; xi++, x -= xMul) {
;;;219              U8  Index;
;;;220              if (!BitsLeft) {
;;;221                Data = *pDataLine++;
;;;222                BitsLeft =8;
;;;223              }
;;;224              Index = Data >> Shift;
;;;225              Data    <<= BitsPerPixel;
;;;226              BitsLeft -= BitsPerPixel;
;;;227              if (Index || ((GUI_Context.DrawMode & LCD_DRAWMODE_TRANS) == 0)) {
;;;228                LCD_PIXELINDEX OldColor = LCD_COLORINDEX;
;;;229                if (pTrans) {
;;;230                  LCD_COLORINDEX = *(pTrans + Index);
;;;231                } else {
;;;232                  LCD_COLORINDEX = Index;
;;;233                }
;;;234                LCD_FillRect(x - xMul + 1, y, x, yMax);
;;;235                LCD_COLORINDEX = OldColor;
;;;236              }
;;;237            }
;;;238          }
;;;239        }
;;;240      }
;;;241    }
000232  b00f              ADD      sp,sp,#0x3c
000234  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.568|
000238  4851              LDR      r0,|L1.896|
00023a  f9b00008          LDRSH    r0,[r0,#8]            ;187  ; GUI_Context
00023e  9909              LDR      r1,[sp,#0x24]         ;187
000240  4288              CMP      r0,r1                 ;187
000242  dd06              BLE      |L1.594|
000244  494e              LDR      r1,|L1.896|
000246  f9b11008          LDRSH    r1,[r1,#8]            ;188  ; GUI_Context
00024a  9a09              LDR      r2,[sp,#0x24]         ;188
00024c  1a88              SUBS     r0,r1,r2              ;188
00024e  1a24              SUBS     r4,r4,r0              ;189
000250  bf00              NOP                            ;190
                  |L1.594|
000252  2600              MOVS     r6,#0                 ;192
000254  484a              LDR      r0,|L1.896|
000256  f9b0000c          LDRSH    r0,[r0,#0xc]          ;193
00025a  990b              LDR      r1,[sp,#0x2c]         ;193
00025c  4288              CMP      r0,r1                 ;193
00025e  da12              BGE      |L1.646|
000260  4847              LDR      r0,|L1.896|
000262  f9b0000c          LDRSH    r0,[r0,#0xc]          ;194
000266  990b              LDR      r1,[sp,#0x2c]         ;194
000268  1a0e              SUBS     r6,r1,r0              ;194
00026a  1ba4              SUBS     r4,r4,r6              ;195
00026c  2f01              CMP      r7,#1                 ;196
00026e  d109              BNE      |L1.644|
000270  eb0808e6          ADD      r8,r8,r6,ASR #3       ;198
000274  10f0              ASRS     r0,r6,#3              ;198
000276  990b              LDR      r1,[sp,#0x2c]         ;198
000278  eb0100c0          ADD      r0,r1,r0,LSL #3       ;198
00027c  900b              STR      r0,[sp,#0x2c]         ;198
00027e  f0060607          AND      r6,r6,#7              ;198
000282  bf00              NOP                            ;199
                  |L1.644|
000284  bf00              NOP                            ;199
                  |L1.646|
000286  2c00              CMP      r4,#0                 ;202
000288  dc00              BGT      |L1.652|
00028a  e7d2              B        |L1.562|
                  |L1.652|
00028c  991d              LDR      r1,[sp,#0x74]         ;205
00028e  981b              LDR      r0,[sp,#0x6c]         ;205
000290  462b              MOV      r3,r5                 ;205
000292  4622              MOV      r2,r4                 ;205
000294  e9cd8602          STRD     r8,r6,[sp,#8]         ;205
000298  e9cd7000          STRD     r7,r0,[sp,#0]         ;205
00029c  9104              STR      r1,[sp,#0x10]         ;205
00029e  e9dd010b          LDRD     r0,r1,[sp,#0x2c]      ;205
0002a2  f7fffffe          BL       _DrawBitmap
0002a6  e068              B        |L1.890|
                  |L1.680|
0002a8  f1c70008          RSB      r0,r7,#8              ;210
0002ac  9006              STR      r0,[sp,#0x18]         ;210
0002ae  9e0c              LDR      r6,[sp,#0x30]         ;211
0002b0  2000              MOVS     r0,#0                 ;211
0002b2  9007              STR      r0,[sp,#0x1c]         ;211
0002b4  e05d              B        |L1.882|
                  |L1.694|
0002b6  9819              LDR      r0,[sp,#0x64]         ;212
0002b8  4430              ADD      r0,r0,r6              ;212
0002ba  1e40              SUBS     r0,r0,#1              ;212
0002bc  9005              STR      r0,[sp,#0x14]         ;212
0002be  4830              LDR      r0,|L1.896|
0002c0  f9b0100a          LDRSH    r1,[r0,#0xa]          ;214
0002c4  9805              LDR      r0,[sp,#0x14]         ;214
0002c6  4281              CMP      r1,r0                 ;214
0002c8  dc4c              BGT      |L1.868|
0002ca  482d              LDR      r0,|L1.896|
0002cc  f9b0000e          LDRSH    r0,[r0,#0xe]          ;214
0002d0  42b0              CMP      r0,r6                 ;214
0002d2  db47              BLT      |L1.868|
0002d4  2000              MOVS     r0,#0                 ;215
0002d6  9004              STR      r0,[sp,#0x10]         ;215
0002d8  f8cd8008          STR      r8,[sp,#8]            ;217
0002dc  f8ddb02c          LDR      r11,[sp,#0x2c]        ;218
0002e0  9003              STR      r0,[sp,#0xc]          ;218
0002e2  e03b              B        |L1.860|
                  |L1.740|
0002e4  9804              LDR      r0,[sp,#0x10]         ;220
0002e6  b938              CBNZ     r0,|L1.760|
0002e8  9802              LDR      r0,[sp,#8]            ;221
0002ea  7800              LDRB     r0,[r0,#0]            ;221
0002ec  900a              STR      r0,[sp,#0x28]         ;221
0002ee  9802              LDR      r0,[sp,#8]            ;221
0002f0  1c40              ADDS     r0,r0,#1              ;221
0002f2  9002              STR      r0,[sp,#8]            ;221
0002f4  2008              MOVS     r0,#8                 ;222
0002f6  9004              STR      r0,[sp,#0x10]         ;222
                  |L1.760|
0002f8  9906              LDR      r1,[sp,#0x18]         ;224
0002fa  980a              LDR      r0,[sp,#0x28]         ;224
0002fc  fa40f901          ASR      r9,r0,r1              ;224
000300  980a              LDR      r0,[sp,#0x28]         ;225
000302  40b8              LSLS     r0,r0,r7              ;225
000304  b2c0              UXTB     r0,r0                 ;225
000306  900a              STR      r0,[sp,#0x28]         ;225
000308  9804              LDR      r0,[sp,#0x10]         ;226
00030a  1bc0              SUBS     r0,r0,r7              ;226
00030c  9004              STR      r0,[sp,#0x10]         ;226
00030e  f1b90f00          CMP      r9,#0                 ;227
000312  d104              BNE      |L1.798|
000314  481a              LDR      r0,|L1.896|
000316  7c00              LDRB     r0,[r0,#0x10]         ;227  ; GUI_Context
000318  f0000002          AND      r0,r0,#2              ;227
00031c  b9c8              CBNZ     r0,|L1.850|
                  |L1.798|
00031e  4818              LDR      r0,|L1.896|
000320  8840              LDRH     r0,[r0,#2]            ;228  ; GUI_Context
000322  9001              STR      r0,[sp,#4]            ;228
000324  981d              LDR      r0,[sp,#0x74]         ;229
000326  b128              CBZ      r0,|L1.820|
000328  981d              LDR      r0,[sp,#0x74]         ;230
00032a  f8300019          LDRH     r0,[r0,r9,LSL #1]     ;230
00032e  4914              LDR      r1,|L1.896|
000330  8048              STRH     r0,[r1,#2]            ;230
000332  e002              B        |L1.826|
                  |L1.820|
000334  4812              LDR      r0,|L1.896|
000336  f8a09002          STRH     r9,[r0,#2]            ;232
                  |L1.826|
00033a  ebab010a          SUB      r1,r11,r10            ;234
00033e  1c48              ADDS     r0,r1,#1              ;234
000340  465a              MOV      r2,r11                ;234
000342  4631              MOV      r1,r6                 ;234
000344  9b05              LDR      r3,[sp,#0x14]         ;234
000346  f7fffffe          BL       LCD_FillRect
00034a  490d              LDR      r1,|L1.896|
00034c  9801              LDR      r0,[sp,#4]            ;235
00034e  8048              STRH     r0,[r1,#2]            ;235
000350  bf00              NOP                            ;236
                  |L1.850|
000352  9803              LDR      r0,[sp,#0xc]          ;218
000354  1c40              ADDS     r0,r0,#1              ;218
000356  9003              STR      r0,[sp,#0xc]          ;218
000358  ebab0b0a          SUB      r11,r11,r10           ;218
                  |L1.860|
00035c  9803              LDR      r0,[sp,#0xc]          ;218
00035e  42a0              CMP      r0,r4                 ;218
000360  dbc0              BLT      |L1.740|
000362  bf00              NOP                            ;238
                  |L1.868|
000364  9807              LDR      r0,[sp,#0x1c]         ;211
000366  1c40              ADDS     r0,r0,#1              ;211
000368  9007              STR      r0,[sp,#0x1c]         ;211
00036a  9819              LDR      r0,[sp,#0x64]         ;211
00036c  1a36              SUBS     r6,r6,r0              ;211
00036e  981b              LDR      r0,[sp,#0x6c]         ;211
000370  4480              ADD      r8,r8,r0              ;211
                  |L1.882|
000372  9807              LDR      r0,[sp,#0x1c]         ;211
000374  42a8              CMP      r0,r5                 ;211
000376  db9e              BLT      |L1.694|
000378  bf00              NOP                            ;240
                  |L1.890|
00037a  bf00              NOP      
00037c  e759              B        |L1.562|
;;;242    
                          ENDP

00037e  0000              DCW      0x0000
                  |L1.896|
                          DCD      GUI_Context
                  |L1.900|
                          DCD      GUI_RectDispString

                          AREA ||.data||, DATA, ALIGN=2

                  LCD_APIList180
                          DCD      _DrawBitmap180
                          DCD      _Rect2TextRect
