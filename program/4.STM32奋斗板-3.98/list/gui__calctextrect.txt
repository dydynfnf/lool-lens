; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\gui__calctextrect.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\gui__calctextrect.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -I.\GUI\AntiAlias -I.\GUI\Config -I.\GUI\ConvertColor -I.\GUI\ConvertMono -I.\GUI\Core -I.\GUI\Font -I.\GUI\GUI_X -I.\GUI\JPEG -I.\GUI\LCDDriver -I.\GUI\MemDev -I.\GUI\MultiLayer -I.\GUI\Widget -I.\GUI\WM -IC:\Users\Administrator\Desktop\gui\STM32·Ü¶·°å-3.98\RTE -Id:\Keil_v5\ARM\PACK\ARM\CMSIS\4.3.0\CMSIS\Include -Id:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.1.0\Device\Include -D__UVISION_VERSION=515 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\gui__calctextrect.crf GUI\Core\GUI__CalcTextRect.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=1

                  GUI__CalcTextRect PROC
;;;33     */
;;;34     void GUI__CalcTextRect(const char GUI_UNI_PTR* pText, const GUI_RECT* pTextRectIn, GUI_RECT* pTextRectOut, int TextAlign) {
000000  e92d5ff0          PUSH     {r4-r12,lr}
000004  4683              MOV      r11,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
00000a  4699              MOV      r9,r3
;;;35       if (pText) {
00000c  f1bb0f00          CMP      r11,#0
000010  d052              BEQ      |L1.184|
;;;36         int xPos, yPos, TextWidth, TextHeight;
;;;37     
;;;38         /* Calculate X-pos of text */
;;;39         TextWidth = GUI_GetStringDistX(pText);
000012  4658              MOV      r0,r11
000014  f7fffffe          BL       GUI_GetStringDistX
000018  4682              MOV      r10,r0
;;;40         switch (TextAlign & GUI_TA_HORIZONTAL) {
00001a  f0090003          AND      r0,r9,#3
00001e  2801              CMP      r0,#1
000020  d00e              BEQ      |L1.64|
000022  2802              CMP      r0,#2
000024  d112              BNE      |L1.76|
;;;41         case GUI_TA_HCENTER:
;;;42           xPos = pTextRectIn->x0 + ((pTextRectIn->x1 - pTextRectIn->x0 + 1) - TextWidth) / 2;
000026  f9b41004          LDRSH    r1,[r4,#4]
00002a  f9b42000          LDRSH    r2,[r4,#0]
00002e  1a89              SUBS     r1,r1,r2
000030  1c49              ADDS     r1,r1,#1
000032  eba1000a          SUB      r0,r1,r10
000036  eb0071d0          ADD      r1,r0,r0,LSR #31
00003a  eb020661          ADD      r6,r2,r1,ASR #1
;;;43           break;
00003e  e008              B        |L1.82|
                  |L1.64|
;;;44         case GUI_TA_RIGHT:
;;;45           xPos = pTextRectIn->x1 - TextWidth + 1;
000040  f9b40004          LDRSH    r0,[r4,#4]
000044  eba0000a          SUB      r0,r0,r10
000048  1c46              ADDS     r6,r0,#1
;;;46           break;
00004a  e002              B        |L1.82|
                  |L1.76|
;;;47         default:
;;;48           xPos = pTextRectIn->x0;
00004c  f9b46000          LDRSH    r6,[r4,#0]
000050  bf00              NOP                            ;40
                  |L1.82|
000052  bf00              NOP                            ;43
;;;49         }
;;;50     
;;;51         /* Calculate Y-pos of text*/
;;;52         TextHeight = GUI_GetFontDistY();
000054  f7fffffe          BL       GUI_GetFontDistY
000058  4680              MOV      r8,r0
;;;53         switch (TextAlign & GUI_TA_VERTICAL) {
00005a  f009000c          AND      r0,r9,#0xc
00005e  2804              CMP      r0,#4
000060  d010              BEQ      |L1.132|
000062  2808              CMP      r0,#8
000064  d015              BEQ      |L1.146|
000066  280c              CMP      r0,#0xc
000068  d112              BNE      |L1.144|
;;;54         case GUI_TA_VCENTER:
;;;55           yPos = pTextRectIn->y0 + ((pTextRectIn->y1 - pTextRectIn->y0 + 1) - TextHeight) / 2;
00006a  f9b41006          LDRSH    r1,[r4,#6]
00006e  f9b42002          LDRSH    r2,[r4,#2]
000072  1a89              SUBS     r1,r1,r2
000074  1c49              ADDS     r1,r1,#1
000076  eba10008          SUB      r0,r1,r8
00007a  eb0071d0          ADD      r1,r0,r0,LSR #31
00007e  eb020761          ADD      r7,r2,r1,ASR #1
;;;56           break;
000082  e009              B        |L1.152|
                  |L1.132|
;;;57         case GUI_TA_BOTTOM:
;;;58           yPos = pTextRectIn->y1 - TextHeight + 1;
000084  f9b40006          LDRSH    r0,[r4,#6]
000088  eba00008          SUB      r0,r0,r8
00008c  1c47              ADDS     r7,r0,#1
;;;59           break;
00008e  e003              B        |L1.152|
                  |L1.144|
;;;60         case GUI_TA_BASELINE:
000090  bf00              NOP      
                  |L1.146|
;;;61         default:
;;;62           yPos = pTextRectIn->y0;
000092  f9b47002          LDRSH    r7,[r4,#2]
000096  bf00              NOP                            ;53
                  |L1.152|
000098  bf00              NOP                            ;56
;;;63         }
;;;64     
;;;65         /* Return text rectangle */
;;;66         pTextRectOut->x0 = xPos;
00009a  b230              SXTH     r0,r6
00009c  8028              STRH     r0,[r5,#0]
;;;67         pTextRectOut->y0 = yPos;
00009e  b238              SXTH     r0,r7
0000a0  8068              STRH     r0,[r5,#2]
;;;68         pTextRectOut->x1 = xPos + TextWidth  - 1;
0000a2  eb06000a          ADD      r0,r6,r10
0000a6  1e40              SUBS     r0,r0,#1
0000a8  b200              SXTH     r0,r0
0000aa  80a8              STRH     r0,[r5,#4]
;;;69         pTextRectOut->y1 = yPos + TextHeight - 1;
0000ac  eb070008          ADD      r0,r7,r8
0000b0  1e40              SUBS     r0,r0,#1
0000b2  b200              SXTH     r0,r0
0000b4  80e8              STRH     r0,[r5,#6]
;;;70       } else {
0000b6  e003              B        |L1.192|
                  |L1.184|
;;;71         *pTextRectOut = *pTextRectIn;
0000b8  6820              LDR      r0,[r4,#0]
0000ba  6028              STR      r0,[r5,#0]
0000bc  6860              LDR      r0,[r4,#4]
0000be  6068              STR      r0,[r5,#4]
                  |L1.192|
;;;72       }
;;;73     }
0000c0  e8bd9ff0          POP      {r4-r12,pc}
;;;74     
                          ENDP

