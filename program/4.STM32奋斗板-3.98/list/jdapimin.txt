; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\jdapimin.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\jdapimin.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -I.\GUI\AntiAlias -I.\GUI\Config -I.\GUI\ConvertColor -I.\GUI\ConvertMono -I.\GUI\Core -I.\GUI\Font -I.\GUI\GUI_X -I.\GUI\JPEG -I.\GUI\LCDDriver -I.\GUI\MemDev -I.\GUI\MultiLayer -I.\GUI\Widget -I.\GUI\WM -IC:\Users\Administrator\Desktop\gui\STM32·Ü¶·°å-3.98\RTE -Id:\Keil_v5\ARM\PACK\ARM\CMSIS\4.3.0\CMSIS\Include -Id:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.1.0\Device\Include -D__UVISION_VERSION=515 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\jdapimin.crf GUI\JPEG\jdapimin.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  jpeg_CreateDecompress PROC
;;;29     GLOBAL(void)
;;;30     jpeg_CreateDecompress (j_decompress_ptr cinfo, int version, size_t structsize)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;31     {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;32       int i;
;;;33     
;;;34       /* Guard against version mismatches between library and caller. */
;;;35       cinfo->mem = NULL;		/* so jpeg_destroy knows mem mgr not called */
00000a  2000              MOVS     r0,#0
00000c  6060              STR      r0,[r4,#4]
;;;36       if (version != JPEG_LIB_VERSION)
00000e  2e3e              CMP      r6,#0x3e
000010  d00b              BEQ      |L1.42|
;;;37         ERREXIT2(cinfo, JERR_BAD_LIB_VERSION, JPEG_LIB_VERSION, version);
000012  200c              MOVS     r0,#0xc
000014  6821              LDR      r1,[r4,#0]
000016  6148              STR      r0,[r1,#0x14]
000018  203e              MOVS     r0,#0x3e
00001a  6821              LDR      r1,[r4,#0]
00001c  6188              STR      r0,[r1,#0x18]
00001e  6820              LDR      r0,[r4,#0]
000020  61c6              STR      r6,[r0,#0x1c]
000022  6820              LDR      r0,[r4,#0]
000024  6801              LDR      r1,[r0,#0]
000026  4620              MOV      r0,r4
000028  4788              BLX      r1
                  |L1.42|
;;;38       if (structsize != SIZEOF(struct jpeg_decompress_struct))
00002a  f5b77fe8          CMP      r7,#0x1d0
00002e  d00c              BEQ      |L1.74|
;;;39         ERREXIT2(cinfo, JERR_BAD_STRUCT_SIZE, 
000030  2015              MOVS     r0,#0x15
000032  6821              LDR      r1,[r4,#0]
000034  6148              STR      r0,[r1,#0x14]
000036  f44f70e8          MOV      r0,#0x1d0
00003a  6821              LDR      r1,[r4,#0]
00003c  6188              STR      r0,[r1,#0x18]
00003e  6820              LDR      r0,[r4,#0]
000040  61c7              STR      r7,[r0,#0x1c]
000042  6820              LDR      r0,[r4,#0]
000044  6801              LDR      r1,[r0,#0]
000046  4620              MOV      r0,r4
000048  4788              BLX      r1
                  |L1.74|
;;;40     	     (int) SIZEOF(struct jpeg_decompress_struct), (int) structsize);
;;;41     
;;;42       /* For debugging purposes, we zero the whole master structure.
;;;43        * But the application has already set the err pointer, and may have set
;;;44        * client_data, so we have to save and restore those fields.
;;;45        * Note: if application hasn't set client_data, tools like Purify may
;;;46        * complain here.
;;;47        */
;;;48       {
;;;49         struct jpeg_error_mgr * err = cinfo->err;
00004a  f8d48000          LDR      r8,[r4,#0]
;;;50         void * client_data = cinfo->client_data; /* ignore Purify complaint here */
00004e  f8d4900c          LDR      r9,[r4,#0xc]
;;;51         MEMZERO(cinfo, SIZEOF(struct jpeg_decompress_struct));
000052  f44f71e8          MOV      r1,#0x1d0
000056  4620              MOV      r0,r4
000058  f7fffffe          BL       __aeabi_memclr4
;;;52         cinfo->err = err;
00005c  f8c48000          STR      r8,[r4,#0]
;;;53         cinfo->client_data = client_data;
000060  f8c4900c          STR      r9,[r4,#0xc]
;;;54       }
;;;55       cinfo->is_decompressor = TRUE;
000064  2001              MOVS     r0,#1
000066  6120              STR      r0,[r4,#0x10]
;;;56     
;;;57       /* Initialize a memory manager instance for this object */
;;;58       jinit_memory_mgr((j_common_ptr) cinfo);
000068  4620              MOV      r0,r4
00006a  f7fffffe          BL       jinit_memory_mgr
;;;59     
;;;60       /* Zero out pointers to permanent structures. */
;;;61       cinfo->progress = NULL;
00006e  2000              MOVS     r0,#0
000070  60a0              STR      r0,[r4,#8]
;;;62       cinfo->src = NULL;
000072  61a0              STR      r0,[r4,#0x18]
;;;63     
;;;64       for (i = 0; i < NUM_QUANT_TBLS; i++)
000074  2500              MOVS     r5,#0
000076  e005              B        |L1.132|
                  |L1.120|
;;;65         cinfo->quant_tbl_ptrs[i] = NULL;
000078  2100              MOVS     r1,#0
00007a  f10400a4          ADD      r0,r4,#0xa4
00007e  f8401025          STR      r1,[r0,r5,LSL #2]
000082  1c6d              ADDS     r5,r5,#1              ;64
                  |L1.132|
000084  2d04              CMP      r5,#4                 ;64
000086  dbf7              BLT      |L1.120|
;;;66     
;;;67       for (i = 0; i < NUM_HUFF_TBLS; i++) {
000088  2500              MOVS     r5,#0
00008a  e008              B        |L1.158|
                  |L1.140|
;;;68         cinfo->dc_huff_tbl_ptrs[i] = NULL;
00008c  2100              MOVS     r1,#0
00008e  f10400b4          ADD      r0,r4,#0xb4
000092  f8401025          STR      r1,[r0,r5,LSL #2]
;;;69         cinfo->ac_huff_tbl_ptrs[i] = NULL;
000096  3010              ADDS     r0,r0,#0x10
000098  f8401025          STR      r1,[r0,r5,LSL #2]
00009c  1c6d              ADDS     r5,r5,#1              ;67
                  |L1.158|
00009e  2d04              CMP      r5,#4                 ;67
0000a0  dbf4              BLT      |L1.140|
;;;70       }
;;;71     
;;;72       /* Initialize marker processor so application can override methods
;;;73        * for COM, APPn markers before calling jpeg_read_header.
;;;74        */
;;;75       cinfo->marker_list = NULL;
0000a2  2000              MOVS     r0,#0
0000a4  f8c40130          STR      r0,[r4,#0x130]
;;;76       jinit_marker_reader(cinfo);
0000a8  4620              MOV      r0,r4
0000aa  f7fffffe          BL       jinit_marker_reader
;;;77     
;;;78       /* And initialize the overall input controller. */
;;;79       jinit_input_controller(cinfo);
0000ae  4620              MOV      r0,r4
0000b0  f7fffffe          BL       jinit_input_controller
;;;80     
;;;81       /* OK, I'm ready */
;;;82       cinfo->global_state = DSTATE_START;
0000b4  20c8              MOVS     r0,#0xc8
0000b6  6160              STR      r0,[r4,#0x14]
;;;83     }
0000b8  e8bd87f0          POP      {r4-r10,pc}
;;;84     
                          ENDP

                  jpeg_destroy_decompress PROC
;;;90     GLOBAL(void)
;;;91     jpeg_destroy_decompress (j_decompress_ptr cinfo)
0000bc  b510              PUSH     {r4,lr}
;;;92     {
0000be  4604              MOV      r4,r0
;;;93       jpeg_destroy((j_common_ptr) cinfo); /* use common routine */
0000c0  4620              MOV      r0,r4
0000c2  f7fffffe          BL       jpeg_destroy
;;;94     }
0000c6  bd10              POP      {r4,pc}
;;;95     
                          ENDP

                  jpeg_abort_decompress PROC
;;;102    GLOBAL(void)
;;;103    jpeg_abort_decompress (j_decompress_ptr cinfo)
0000c8  b510              PUSH     {r4,lr}
;;;104    {
0000ca  4604              MOV      r4,r0
;;;105      jpeg_abort((j_common_ptr) cinfo); /* use common routine */
0000cc  4620              MOV      r0,r4
0000ce  f7fffffe          BL       jpeg_abort
;;;106    }
0000d2  bd10              POP      {r4,pc}
;;;107    
                          ENDP

                  default_decompress_parms PROC
;;;113    LOCAL(void)
;;;114    default_decompress_parms (j_decompress_ptr cinfo)
0000d4  e92d41f0          PUSH     {r4-r8,lr}
;;;115    {
0000d8  4604              MOV      r4,r0
;;;116      /* Guess the input colorspace, and set output colorspace accordingly. */
;;;117      /* (Wish JPEG committee had provided a real way to specify this...) */
;;;118      /* Note application may override our guesses. */
;;;119      switch (cinfo->num_components) {
0000da  6a60              LDR      r0,[r4,#0x24]
0000dc  2801              CMP      r0,#1
0000de  d004              BEQ      |L1.234|
0000e0  2803              CMP      r0,#3
0000e2  d008              BEQ      |L1.246|
0000e4  2804              CMP      r0,#4
0000e6  d171              BNE      |L1.460|
0000e8  e067              B        |L1.442|
                  |L1.234|
;;;120      case 1:
;;;121        cinfo->jpeg_color_space = JCS_GRAYSCALE;
0000ea  2001              MOVS     r0,#1
0000ec  f8840028          STRB     r0,[r4,#0x28]
;;;122        cinfo->out_color_space = JCS_GRAYSCALE;
0000f0  f8840029          STRB     r0,[r4,#0x29]
;;;123        break;
0000f4  e092              B        |L1.540|
                  |L1.246|
;;;124        
;;;125      case 3:
;;;126        if (cinfo->saw_JFIF_marker) {
0000f6  f8d40118          LDR      r0,[r4,#0x118]
0000fa  b118              CBZ      r0,|L1.260|
;;;127          cinfo->jpeg_color_space = JCS_YCbCr; /* JFIF implies YCbCr */
0000fc  2003              MOVS     r0,#3
0000fe  f8840028          STRB     r0,[r4,#0x28]
000102  e056              B        |L1.434|
                  |L1.260|
;;;128        } else if (cinfo->saw_Adobe_marker) {
000104  f8d40124          LDR      r0,[r4,#0x124]
000108  b1f8              CBZ      r0,|L1.330|
;;;129          switch (cinfo->Adobe_transform) {
00010a  f8940128          LDRB     r0,[r4,#0x128]
00010e  b110              CBZ      r0,|L1.278|
000110  2801              CMP      r0,#1
000112  d108              BNE      |L1.294|
000114  e003              B        |L1.286|
                  |L1.278|
;;;130          case 0:
;;;131    	cinfo->jpeg_color_space = JCS_RGB;
000116  2002              MOVS     r0,#2
000118  f8840028          STRB     r0,[r4,#0x28]
;;;132    	break;
00011c  e014              B        |L1.328|
                  |L1.286|
;;;133          case 1:
;;;134    	cinfo->jpeg_color_space = JCS_YCbCr;
00011e  2003              MOVS     r0,#3
000120  f8840028          STRB     r0,[r4,#0x28]
;;;135    	break;
000124  e010              B        |L1.328|
                  |L1.294|
;;;136          default:
;;;137    	WARNMS1(cinfo, JWRN_ADOBE_XFORM, cinfo->Adobe_transform);
000126  2072              MOVS     r0,#0x72
000128  6821              LDR      r1,[r4,#0]
00012a  6148              STR      r0,[r1,#0x14]
00012c  f8940128          LDRB     r0,[r4,#0x128]
000130  6821              LDR      r1,[r4,#0]
000132  6188              STR      r0,[r1,#0x18]
000134  6820              LDR      r0,[r4,#0]
000136  f04f31ff          MOV      r1,#0xffffffff
00013a  6842              LDR      r2,[r0,#4]
00013c  4620              MOV      r0,r4
00013e  4790              BLX      r2
;;;138    	cinfo->jpeg_color_space = JCS_YCbCr; /* assume it's YCbCr */
000140  2003              MOVS     r0,#3
000142  f8840028          STRB     r0,[r4,#0x28]
;;;139    	break;
000146  bf00              NOP      
                  |L1.328|
000148  e033              B        |L1.434|
                  |L1.330|
;;;140          }
;;;141        } else {
;;;142          /* Saw no special markers, try to guess from the component IDs */
;;;143          int cid0 = cinfo->comp_info[0].component_id;
00014a  f8540fd8          LDR      r0,[r4,#0xd8]!
00014e  6805              LDR      r5,[r0,#0]
;;;144          int cid1 = cinfo->comp_info[1].component_id;
000150  6820              LDR      r0,[r4,#0]
000152  6d46              LDR      r6,[r0,#0x54]
;;;145          int cid2 = cinfo->comp_info[2].component_id;
000154  f85409d8          LDR      r0,[r4],#-0xd8
000158  f8d070a8          LDR      r7,[r0,#0xa8]
;;;146    
;;;147          if (cid0 == 1 && cid1 == 2 && cid2 == 3)
00015c  2d01              CMP      r5,#1
00015e  d107              BNE      |L1.368|
000160  2e02              CMP      r6,#2
000162  d105              BNE      |L1.368|
000164  2f03              CMP      r7,#3
000166  d103              BNE      |L1.368|
;;;148    	cinfo->jpeg_color_space = JCS_YCbCr; /* assume JFIF w/out marker */
000168  2003              MOVS     r0,#3
00016a  f8840028          STRB     r0,[r4,#0x28]
00016e  e01f              B        |L1.432|
                  |L1.368|
;;;149          else if (cid0 == 82 && cid1 == 71 && cid2 == 66)
000170  2d52              CMP      r5,#0x52
000172  d107              BNE      |L1.388|
000174  2e47              CMP      r6,#0x47
000176  d105              BNE      |L1.388|
000178  2f42              CMP      r7,#0x42
00017a  d103              BNE      |L1.388|
;;;150    	cinfo->jpeg_color_space = JCS_RGB; /* ASCII 'R', 'G', 'B' */
00017c  2002              MOVS     r0,#2
00017e  f8840028          STRB     r0,[r4,#0x28]
000182  e015              B        |L1.432|
                  |L1.388|
;;;151          else {
;;;152    	TRACEMS3(cinfo, 1, JTRC_UNKNOWN_IDS, cid0, cid1, cid2);
000184  bf00              NOP      
000186  6820              LDR      r0,[r4,#0]
000188  f1000818          ADD      r8,r0,#0x18
00018c  f8c85000          STR      r5,[r8,#0]
000190  f8c86004          STR      r6,[r8,#4]
000194  f8c87008          STR      r7,[r8,#8]
000198  206f              MOVS     r0,#0x6f
00019a  6821              LDR      r1,[r4,#0]
00019c  6148              STR      r0,[r1,#0x14]
00019e  6820              LDR      r0,[r4,#0]
0001a0  2101              MOVS     r1,#1
0001a2  6842              LDR      r2,[r0,#4]
0001a4  4620              MOV      r0,r4
0001a6  4790              BLX      r2
0001a8  bf00              NOP      
;;;153    	cinfo->jpeg_color_space = JCS_YCbCr; /* assume it's YCbCr */
0001aa  2003              MOVS     r0,#3
0001ac  f8840028          STRB     r0,[r4,#0x28]
                  |L1.432|
;;;154          }
;;;155        }
0001b0  bf00              NOP      
                  |L1.434|
;;;156        /* Always guess RGB is proper output colorspace. */
;;;157        cinfo->out_color_space = JCS_RGB;
0001b2  2002              MOVS     r0,#2
0001b4  f8840029          STRB     r0,[r4,#0x29]
;;;158        break;
0001b8  e030              B        |L1.540|
                  |L1.442|
;;;159        
;;;160      case 4:
;;;161        if (cinfo->saw_Adobe_marker) {
0001ba  f8d40124          LDR      r0,[r4,#0x124]
0001be  b300              CBZ      r0,|L1.514|
;;;162          switch (cinfo->Adobe_transform) {
0001c0  f8940128          LDRB     r0,[r4,#0x128]
0001c4  b118              CBZ      r0,|L1.462|
0001c6  2802              CMP      r0,#2
0001c8  d109              BNE      |L1.478|
0001ca  e004              B        |L1.470|
                  |L1.460|
0001cc  e020              B        |L1.528|
                  |L1.462|
;;;163          case 0:
;;;164    	cinfo->jpeg_color_space = JCS_CMYK;
0001ce  2004              MOVS     r0,#4
0001d0  f8840028          STRB     r0,[r4,#0x28]
;;;165    	break;
0001d4  e014              B        |L1.512|
                  |L1.470|
;;;166          case 2:
;;;167    	cinfo->jpeg_color_space = JCS_YCCK;
0001d6  2005              MOVS     r0,#5
0001d8  f8840028          STRB     r0,[r4,#0x28]
;;;168    	break;
0001dc  e010              B        |L1.512|
                  |L1.478|
;;;169          default:
;;;170    	WARNMS1(cinfo, JWRN_ADOBE_XFORM, cinfo->Adobe_transform);
0001de  2072              MOVS     r0,#0x72
0001e0  6821              LDR      r1,[r4,#0]
0001e2  6148              STR      r0,[r1,#0x14]
0001e4  f8940128          LDRB     r0,[r4,#0x128]
0001e8  6821              LDR      r1,[r4,#0]
0001ea  6188              STR      r0,[r1,#0x18]
0001ec  6820              LDR      r0,[r4,#0]
0001ee  f04f31ff          MOV      r1,#0xffffffff
0001f2  6842              LDR      r2,[r0,#4]
0001f4  4620              MOV      r0,r4
0001f6  4790              BLX      r2
;;;171    	cinfo->jpeg_color_space = JCS_YCCK; /* assume it's YCCK */
0001f8  2005              MOVS     r0,#5
0001fa  f8840028          STRB     r0,[r4,#0x28]
;;;172    	break;
0001fe  bf00              NOP      
                  |L1.512|
000200  e002              B        |L1.520|
                  |L1.514|
;;;173          }
;;;174        } else {
;;;175          /* No special markers, assume straight CMYK. */
;;;176          cinfo->jpeg_color_space = JCS_CMYK;
000202  2004              MOVS     r0,#4
000204  f8840028          STRB     r0,[r4,#0x28]
                  |L1.520|
;;;177        }
;;;178        cinfo->out_color_space = JCS_CMYK;
000208  2004              MOVS     r0,#4
00020a  f8840029          STRB     r0,[r4,#0x29]
;;;179        break;
00020e  e005              B        |L1.540|
                  |L1.528|
;;;180        
;;;181      default:
;;;182        cinfo->jpeg_color_space = JCS_UNKNOWN;
000210  2000              MOVS     r0,#0
000212  f8840028          STRB     r0,[r4,#0x28]
;;;183        cinfo->out_color_space = JCS_UNKNOWN;
000216  f8840029          STRB     r0,[r4,#0x29]
;;;184        break;
00021a  bf00              NOP      
                  |L1.540|
00021c  bf00              NOP                            ;123
;;;185      }
;;;186    
;;;187      /* Set defaults for other decompression parameters. */
;;;188      cinfo->scale_num = 1;		/* 1:1 scaling */
00021e  2001              MOVS     r0,#1
000220  62e0              STR      r0,[r4,#0x2c]
;;;189      cinfo->scale_denom = 1;
000222  6320              STR      r0,[r4,#0x30]
;;;190      cinfo->output_gamma = 1.0;
000224  2100              MOVS     r1,#0
000226  4883              LDR      r0,|L1.1076|
000228  e9c4100e          STRD     r1,r0,[r4,#0x38]
;;;191      cinfo->buffered_image = FALSE;
00022c  2000              MOVS     r0,#0
00022e  6420              STR      r0,[r4,#0x40]
;;;192      cinfo->raw_data_out = FALSE;
000230  6460              STR      r0,[r4,#0x44]
;;;193      cinfo->dct_method = JDCT_DEFAULT;
000232  f8840048          STRB     r0,[r4,#0x48]
;;;194      cinfo->do_fancy_upsampling = TRUE;
000236  2001              MOVS     r0,#1
000238  64e0              STR      r0,[r4,#0x4c]
;;;195      cinfo->do_block_smoothing = TRUE;
00023a  6520              STR      r0,[r4,#0x50]
;;;196      cinfo->quantize_colors = FALSE;
00023c  2000              MOVS     r0,#0
00023e  6560              STR      r0,[r4,#0x54]
;;;197      /* We set these in case application only sets quantize_colors. */
;;;198      cinfo->dither_mode = JDITHER_FS;
000240  2002              MOVS     r0,#2
000242  f8840058          STRB     r0,[r4,#0x58]
;;;199    #ifdef QUANT_2PASS_SUPPORTED
;;;200      cinfo->two_pass_quantize = TRUE;
000246  2001              MOVS     r0,#1
000248  65e0              STR      r0,[r4,#0x5c]
;;;201    #else
;;;202      cinfo->two_pass_quantize = FALSE;
;;;203    #endif
;;;204      cinfo->desired_number_of_colors = 256;
00024a  0200              LSLS     r0,r0,#8
00024c  6620              STR      r0,[r4,#0x60]
;;;205      cinfo->colormap = NULL;
00024e  2000              MOVS     r0,#0
000250  f8c40088          STR      r0,[r4,#0x88]
;;;206      /* Initialize for no mode change in buffered-image mode. */
;;;207      cinfo->enable_1pass_quant = FALSE;
000254  6660              STR      r0,[r4,#0x64]
;;;208      cinfo->enable_external_quant = FALSE;
000256  66a0              STR      r0,[r4,#0x68]
;;;209      cinfo->enable_2pass_quant = FALSE;
000258  66e0              STR      r0,[r4,#0x6c]
;;;210    }
00025a  e8bd81f0          POP      {r4-r8,pc}
;;;211    
                          ENDP

                  jpeg_consume_input PROC
;;;286    GLOBAL(int)
;;;287    jpeg_consume_input (j_decompress_ptr cinfo)
00025e  b570              PUSH     {r4-r6,lr}
;;;288    {
000260  4604              MOV      r4,r0
;;;289      int retcode = JPEG_SUSPENDED;
000262  2500              MOVS     r5,#0
;;;290    
;;;291      /* NB: every possible DSTATE value should be listed in this switch */
;;;292      switch (cinfo->global_state) {
000264  6960              LDR      r0,[r4,#0x14]
000266  38c8              SUBS     r0,r0,#0xc8
000268  280b              CMP      r0,#0xb
00026a  d230              BCS      |L1.718|
00026c  e8dff000          TBB      [pc,r0]
000270  06122022          DCB      0x06,0x12,0x20,0x22
000274  23242526          DCB      0x23,0x24,0x25,0x26
000278  272f2800          DCB      0x27,0x2f,0x28,0x00
;;;293      case DSTATE_START:
;;;294        /* Start-of-datastream actions: reset appropriate modules */
;;;295        (*cinfo->inputctl->reset_input_controller) (cinfo);
00027c  f8d401b4          LDR      r0,[r4,#0x1b4]
000280  6841              LDR      r1,[r0,#4]
000282  4620              MOV      r0,r4
000284  4788              BLX      r1
;;;296        /* Initialize application's data source module */
;;;297        (*cinfo->src->init_source) (cinfo);
000286  69a0              LDR      r0,[r4,#0x18]
000288  6881              LDR      r1,[r0,#8]
00028a  4620              MOV      r0,r4
00028c  4788              BLX      r1
;;;298        cinfo->global_state = DSTATE_INHEADER;
00028e  20c9              MOVS     r0,#0xc9
000290  6160              STR      r0,[r4,#0x14]
;;;299        /*FALLTHROUGH*/
;;;300      case DSTATE_INHEADER:
000292  bf00              NOP      
;;;301        retcode = (*cinfo->inputctl->consume_input) (cinfo);
000294  f8d401b4          LDR      r0,[r4,#0x1b4]
000298  6801              LDR      r1,[r0,#0]
00029a  4620              MOV      r0,r4
00029c  4788              BLX      r1
00029e  4605              MOV      r5,r0
;;;302        if (retcode == JPEG_REACHED_SOS) { /* Found SOS, prepare to decompress */
0002a0  2d01              CMP      r5,#1
0002a2  d104              BNE      |L1.686|
;;;303          /* Set up default parameters based on header data */
;;;304          default_decompress_parms(cinfo);
0002a4  4620              MOV      r0,r4
0002a6  f7fffffe          BL       default_decompress_parms
;;;305          /* Set global state: ready for start_decompress */
;;;306          cinfo->global_state = DSTATE_READY;
0002aa  20ca              MOVS     r0,#0xca
0002ac  6160              STR      r0,[r4,#0x14]
                  |L1.686|
;;;307        }
;;;308        break;
0002ae  e019              B        |L1.740|
;;;309      case DSTATE_READY:
;;;310        /* Can't advance past first SOS until start_decompress is called */
;;;311        retcode = JPEG_REACHED_SOS;
0002b0  2501              MOVS     r5,#1
;;;312        break;
0002b2  e017              B        |L1.740|
;;;313      case DSTATE_PRELOAD:
;;;314      case DSTATE_PRESCAN:
0002b4  bf00              NOP      
;;;315      case DSTATE_SCANNING:
0002b6  bf00              NOP      
;;;316      case DSTATE_RAW_OK:
0002b8  bf00              NOP      
;;;317      case DSTATE_BUFIMAGE:
0002ba  bf00              NOP      
;;;318      case DSTATE_BUFPOST:
0002bc  bf00              NOP      
;;;319      case DSTATE_STOPPING:
0002be  bf00              NOP      
;;;320        retcode = (*cinfo->inputctl->consume_input) (cinfo);
0002c0  f8d401b4          LDR      r0,[r4,#0x1b4]
0002c4  6801              LDR      r1,[r0,#0]
0002c6  4620              MOV      r0,r4
0002c8  4788              BLX      r1
0002ca  4605              MOV      r5,r0
;;;321        break;
0002cc  e00a              B        |L1.740|
                  |L1.718|
;;;322      default:
;;;323        ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
0002ce  2014              MOVS     r0,#0x14
0002d0  6821              LDR      r1,[r4,#0]
0002d2  6148              STR      r0,[r1,#0x14]
0002d4  6821              LDR      r1,[r4,#0]
0002d6  6960              LDR      r0,[r4,#0x14]
0002d8  6188              STR      r0,[r1,#0x18]
0002da  6820              LDR      r0,[r4,#0]
0002dc  6801              LDR      r1,[r0,#0]
0002de  4620              MOV      r0,r4
0002e0  4788              BLX      r1
0002e2  bf00              NOP                            ;292
                  |L1.740|
0002e4  bf00              NOP                            ;308
;;;324      }
;;;325      return retcode;
0002e6  4628              MOV      r0,r5
;;;326    }
0002e8  bd70              POP      {r4-r6,pc}
;;;327    
                          ENDP

                  jpeg_read_header PROC
;;;240    GLOBAL(int)
;;;241    jpeg_read_header (j_decompress_ptr cinfo, boolean require_image)
0002ea  b570              PUSH     {r4-r6,lr}
;;;242    {
0002ec  4604              MOV      r4,r0
0002ee  460e              MOV      r6,r1
;;;243      int retcode;
;;;244    
;;;245      if (cinfo->global_state != DSTATE_START &&
0002f0  6960              LDR      r0,[r4,#0x14]
0002f2  28c8              CMP      r0,#0xc8
0002f4  d00c              BEQ      |L1.784|
;;;246          cinfo->global_state != DSTATE_INHEADER)
0002f6  6960              LDR      r0,[r4,#0x14]
0002f8  28c9              CMP      r0,#0xc9
0002fa  d009              BEQ      |L1.784|
;;;247        ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
0002fc  2014              MOVS     r0,#0x14
0002fe  6821              LDR      r1,[r4,#0]
000300  6148              STR      r0,[r1,#0x14]
000302  6821              LDR      r1,[r4,#0]
000304  6960              LDR      r0,[r4,#0x14]
000306  6188              STR      r0,[r1,#0x18]
000308  6820              LDR      r0,[r4,#0]
00030a  6801              LDR      r1,[r0,#0]
00030c  4620              MOV      r0,r4
00030e  4788              BLX      r1
                  |L1.784|
;;;248    
;;;249      retcode = jpeg_consume_input(cinfo);
000310  4620              MOV      r0,r4
000312  f7fffffe          BL       jpeg_consume_input
000316  4605              MOV      r5,r0
;;;250    
;;;251      switch (retcode) {
000318  b19d              CBZ      r5,|L1.834|
00031a  2d01              CMP      r5,#1
00031c  d002              BEQ      |L1.804|
00031e  2d02              CMP      r5,#2
000320  d110              BNE      |L1.836|
000322  e001              B        |L1.808|
                  |L1.804|
;;;252      case JPEG_REACHED_SOS:
;;;253        retcode = JPEG_HEADER_OK;
000324  2501              MOVS     r5,#1
;;;254        break;
000326  e00d              B        |L1.836|
                  |L1.808|
;;;255      case JPEG_REACHED_EOI:
;;;256        if (require_image)		/* Complain if application wanted an image */
000328  b136              CBZ      r6,|L1.824|
;;;257          ERREXIT(cinfo, JERR_NO_IMAGE);
00032a  2033              MOVS     r0,#0x33
00032c  6821              LDR      r1,[r4,#0]
00032e  6148              STR      r0,[r1,#0x14]
000330  6820              LDR      r0,[r4,#0]
000332  6801              LDR      r1,[r0,#0]
000334  4620              MOV      r0,r4
000336  4788              BLX      r1
                  |L1.824|
;;;258        /* Reset to start state; it would be safer to require the application to
;;;259         * call jpeg_abort, but we can't change it now for compatibility reasons.
;;;260         * A side effect is to free any temporary memory (there shouldn't be any).
;;;261         */
;;;262        jpeg_abort((j_common_ptr) cinfo); /* sets state = DSTATE_START */
000338  4620              MOV      r0,r4
00033a  f7fffffe          BL       jpeg_abort
;;;263        retcode = JPEG_HEADER_TABLES_ONLY;
00033e  2502              MOVS     r5,#2
;;;264        break;
000340  e000              B        |L1.836|
                  |L1.834|
;;;265      case JPEG_SUSPENDED:
;;;266        /* no work */
;;;267        break;
000342  bf00              NOP      
                  |L1.836|
000344  bf00              NOP                            ;254
;;;268      }
;;;269    
;;;270      return retcode;
000346  4628              MOV      r0,r5
;;;271    }
000348  bd70              POP      {r4-r6,pc}
;;;272    
                          ENDP

                  jpeg_input_complete PROC
;;;333    GLOBAL(boolean)
;;;334    jpeg_input_complete (j_decompress_ptr cinfo)
00034a  b510              PUSH     {r4,lr}
;;;335    {
00034c  4604              MOV      r4,r0
;;;336      /* Check for valid jpeg object */
;;;337      if (cinfo->global_state < DSTATE_START ||
00034e  6960              LDR      r0,[r4,#0x14]
000350  28c8              CMP      r0,#0xc8
000352  db02              BLT      |L1.858|
;;;338          cinfo->global_state > DSTATE_STOPPING)
000354  6960              LDR      r0,[r4,#0x14]
000356  28d2              CMP      r0,#0xd2
000358  dd09              BLE      |L1.878|
                  |L1.858|
;;;339        ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
00035a  2014              MOVS     r0,#0x14
00035c  6821              LDR      r1,[r4,#0]
00035e  6148              STR      r0,[r1,#0x14]
000360  6821              LDR      r1,[r4,#0]
000362  6960              LDR      r0,[r4,#0x14]
000364  6188              STR      r0,[r1,#0x18]
000366  6820              LDR      r0,[r4,#0]
000368  6801              LDR      r1,[r0,#0]
00036a  4620              MOV      r0,r4
00036c  4788              BLX      r1
                  |L1.878|
;;;340      return cinfo->inputctl->eoi_reached;
00036e  f8d401b4          LDR      r0,[r4,#0x1b4]
000372  6940              LDR      r0,[r0,#0x14]
;;;341    }
000374  bd10              POP      {r4,pc}
;;;342    
                          ENDP

                  jpeg_has_multiple_scans PROC
;;;348    GLOBAL(boolean)
;;;349    jpeg_has_multiple_scans (j_decompress_ptr cinfo)
000376  b510              PUSH     {r4,lr}
;;;350    {
000378  4604              MOV      r4,r0
;;;351      /* Only valid after jpeg_read_header completes */
;;;352      if (cinfo->global_state < DSTATE_READY ||
00037a  6960              LDR      r0,[r4,#0x14]
00037c  28ca              CMP      r0,#0xca
00037e  db02              BLT      |L1.902|
;;;353          cinfo->global_state > DSTATE_STOPPING)
000380  6960              LDR      r0,[r4,#0x14]
000382  28d2              CMP      r0,#0xd2
000384  dd09              BLE      |L1.922|
                  |L1.902|
;;;354        ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
000386  2014              MOVS     r0,#0x14
000388  6821              LDR      r1,[r4,#0]
00038a  6148              STR      r0,[r1,#0x14]
00038c  6821              LDR      r1,[r4,#0]
00038e  6960              LDR      r0,[r4,#0x14]
000390  6188              STR      r0,[r1,#0x18]
000392  6820              LDR      r0,[r4,#0]
000394  6801              LDR      r1,[r0,#0]
000396  4620              MOV      r0,r4
000398  4788              BLX      r1
                  |L1.922|
;;;355      return cinfo->inputctl->has_multiple_scans;
00039a  f8d401b4          LDR      r0,[r4,#0x1b4]
00039e  6900              LDR      r0,[r0,#0x10]
;;;356    }
0003a0  bd10              POP      {r4,pc}
;;;357    
                          ENDP

                  jpeg_finish_decompress PROC
;;;368    GLOBAL(boolean)
;;;369    jpeg_finish_decompress (j_decompress_ptr cinfo)
0003a2  b510              PUSH     {r4,lr}
;;;370    {
0003a4  4604              MOV      r4,r0
;;;371      if ((cinfo->global_state == DSTATE_SCANNING ||
0003a6  6960              LDR      r0,[r4,#0x14]
0003a8  28cd              CMP      r0,#0xcd
0003aa  d002              BEQ      |L1.946|
;;;372           cinfo->global_state == DSTATE_RAW_OK) && ! cinfo->buffered_image) {
0003ac  6960              LDR      r0,[r4,#0x14]
0003ae  28ce              CMP      r0,#0xce
0003b0  d115              BNE      |L1.990|
                  |L1.946|
0003b2  6c20              LDR      r0,[r4,#0x40]
0003b4  b998              CBNZ     r0,|L1.990|
;;;373        /* Terminate final pass of non-buffered mode */
;;;374        if (cinfo->output_scanline < cinfo->output_height)
0003b6  6f61              LDR      r1,[r4,#0x74]
0003b8  f8d4008c          LDR      r0,[r4,#0x8c]
0003bc  4288              CMP      r0,r1
0003be  d206              BCS      |L1.974|
;;;375          ERREXIT(cinfo, JERR_TOO_LITTLE_DATA);
0003c0  2043              MOVS     r0,#0x43
0003c2  6821              LDR      r1,[r4,#0]
0003c4  6148              STR      r0,[r1,#0x14]
0003c6  6820              LDR      r0,[r4,#0]
0003c8  6801              LDR      r1,[r0,#0]
0003ca  4620              MOV      r0,r4
0003cc  4788              BLX      r1
                  |L1.974|
;;;376        (*cinfo->master->finish_output_pass) (cinfo);
0003ce  f8d401a4          LDR      r0,[r4,#0x1a4]
0003d2  6841              LDR      r1,[r0,#4]
0003d4  4620              MOV      r0,r4
0003d6  4788              BLX      r1
;;;377        cinfo->global_state = DSTATE_STOPPING;
0003d8  20d2              MOVS     r0,#0xd2
0003da  6160              STR      r0,[r4,#0x14]
0003dc  e012              B        |L1.1028|
                  |L1.990|
;;;378      } else if (cinfo->global_state == DSTATE_BUFIMAGE) {
0003de  6960              LDR      r0,[r4,#0x14]
0003e0  28cf              CMP      r0,#0xcf
0003e2  d102              BNE      |L1.1002|
;;;379        /* Finishing after a buffered-image operation */
;;;380        cinfo->global_state = DSTATE_STOPPING;
0003e4  20d2              MOVS     r0,#0xd2
0003e6  6160              STR      r0,[r4,#0x14]
0003e8  e00c              B        |L1.1028|
                  |L1.1002|
;;;381      } else if (cinfo->global_state != DSTATE_STOPPING) {
0003ea  6960              LDR      r0,[r4,#0x14]
0003ec  28d2              CMP      r0,#0xd2
0003ee  d009              BEQ      |L1.1028|
;;;382        /* STOPPING = repeat call after a suspension, anything else is error */
;;;383        ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
0003f0  2014              MOVS     r0,#0x14
0003f2  6821              LDR      r1,[r4,#0]
0003f4  6148              STR      r0,[r1,#0x14]
0003f6  6821              LDR      r1,[r4,#0]
0003f8  6960              LDR      r0,[r4,#0x14]
0003fa  6188              STR      r0,[r1,#0x18]
0003fc  6820              LDR      r0,[r4,#0]
0003fe  6801              LDR      r1,[r0,#0]
000400  4620              MOV      r0,r4
000402  4788              BLX      r1
                  |L1.1028|
;;;384      }
;;;385      /* Read until EOI */
;;;386      while (! cinfo->inputctl->eoi_reached) {
000404  e007              B        |L1.1046|
                  |L1.1030|
;;;387        if ((*cinfo->inputctl->consume_input) (cinfo) == JPEG_SUSPENDED)
000406  f8d401b4          LDR      r0,[r4,#0x1b4]
00040a  6801              LDR      r1,[r0,#0]
00040c  4620              MOV      r0,r4
00040e  4788              BLX      r1
000410  b908              CBNZ     r0,|L1.1046|
;;;388          return FALSE;		/* Suspend, come back later */
000412  2000              MOVS     r0,#0
                  |L1.1044|
;;;389      }
;;;390      /* Do final cleanup */
;;;391      (*cinfo->src->term_source) (cinfo);
;;;392      /* We can use jpeg_abort to release memory and reset global_state */
;;;393      jpeg_abort((j_common_ptr) cinfo);
;;;394      return TRUE;
;;;395    }
000414  bd10              POP      {r4,pc}
                  |L1.1046|
000416  f8d401b4          LDR      r0,[r4,#0x1b4]        ;386
00041a  6940              LDR      r0,[r0,#0x14]         ;386
00041c  2800              CMP      r0,#0                 ;386
00041e  d0f2              BEQ      |L1.1030|
000420  69a0              LDR      r0,[r4,#0x18]         ;391
000422  6981              LDR      r1,[r0,#0x18]         ;391
000424  4620              MOV      r0,r4                 ;391
000426  4788              BLX      r1                    ;391
000428  4620              MOV      r0,r4                 ;393
00042a  f7fffffe          BL       jpeg_abort
00042e  2001              MOVS     r0,#1                 ;394
000430  e7f0              B        |L1.1044|
                          ENDP

000432  0000              DCW      0x0000
                  |L1.1076|
                          DCD      0x3ff00000
