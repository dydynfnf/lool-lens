; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\guipolyr.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\guipolyr.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -I.\GUI\AntiAlias -I.\GUI\Config -I.\GUI\ConvertColor -I.\GUI\ConvertMono -I.\GUI\Core -I.\GUI\Font -I.\GUI\GUI_X -I.\GUI\JPEG -I.\GUI\LCDDriver -I.\GUI\MemDev -I.\GUI\MultiLayer -I.\GUI\Widget -I.\GUI\WM -IC:\Users\Administrator\Desktop\gui\STM32·Ü¶·°å-3.98\RTE -Id:\Keil_v5\ARM\PACK\ARM\CMSIS\4.3.0\CMSIS\Include -Id:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.1.0\Device\Include -D__UVISION_VERSION=515 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\guipolyr.crf GUI\Core\GUIPolyR.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=1

                  GUI_RotatePolygon PROC
;;;32     */
;;;33     void GUI_RotatePolygon(GUI_POINT* pDest, const GUI_POINT* pSrc, int NumPoints, float Angle) {
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  b085              SUB      sp,sp,#0x14
000006  4605              MOV      r5,r0
000008  460e              MOV      r6,r1
00000a  4691              MOV      r9,r2
00000c  469a              MOV      r10,r3
;;;34       int j;
;;;35       float fcos = cos(Angle);
00000e  4650              MOV      r0,r10
000010  f7fffffe          BL       __aeabi_f2d
000014  e9cd0100          STRD     r0,r1,[sp,#0]
000018  f7fffffe          BL       ||cos||
00001c  4607              MOV      r7,r0
00001e  f7fffffe          BL       __aeabi_d2f
000022  9004              STR      r0,[sp,#0x10]
;;;36       float fsin = sin(Angle);
000024  4650              MOV      r0,r10
000026  f7fffffe          BL       __aeabi_f2d
00002a  e9cd0100          STRD     r0,r1,[sp,#0]
00002e  f7fffffe          BL       ||sin||
000032  4607              MOV      r7,r0
000034  f7fffffe          BL       __aeabi_d2f
000038  9003              STR      r0,[sp,#0xc]
;;;37       for (j=0; j<NumPoints; j++) {
00003a  2400              MOVS     r4,#0
00003c  e03a              B        |L1.180|
                  |L1.62|
;;;38         int x = (pSrc+j)->x;
00003e  f9367024          LDRSH    r7,[r6,r4,LSL #2]
;;;39         int y = (pSrc+j)->y;
000042  eb060084          ADD      r0,r6,r4,LSL #2
000046  f9b00002          LDRSH    r0,[r0,#2]
00004a  9002              STR      r0,[sp,#8]
;;;40         (pDest+j)->x =  x * fcos + y * fsin;
00004c  9802              LDR      r0,[sp,#8]
00004e  f7fffffe          BL       __aeabi_i2f
000052  9000              STR      r0,[sp,#0]
000054  9903              LDR      r1,[sp,#0xc]
000056  f7fffffe          BL       __aeabi_fmul
00005a  4680              MOV      r8,r0
00005c  4638              MOV      r0,r7
00005e  f7fffffe          BL       __aeabi_i2f
000062  9000              STR      r0,[sp,#0]
000064  9904              LDR      r1,[sp,#0x10]
000066  f7fffffe          BL       __aeabi_fmul
00006a  4683              MOV      r11,r0
00006c  4641              MOV      r1,r8
00006e  f7fffffe          BL       __aeabi_fadd
000072  9001              STR      r0,[sp,#4]
000074  f7fffffe          BL       __aeabi_f2iz
000078  b200              SXTH     r0,r0
00007a  f8250024          STRH     r0,[r5,r4,LSL #2]
;;;41         (pDest+j)->y = -x * fsin + y * fcos;
00007e  9802              LDR      r0,[sp,#8]
000080  f7fffffe          BL       __aeabi_i2f
000084  9000              STR      r0,[sp,#0]
000086  9904              LDR      r1,[sp,#0x10]
000088  f7fffffe          BL       __aeabi_fmul
00008c  4683              MOV      r11,r0
00008e  4278              RSBS     r0,r7,#0
000090  f7fffffe          BL       __aeabi_i2f
000094  9000              STR      r0,[sp,#0]
000096  9903              LDR      r1,[sp,#0xc]
000098  f7fffffe          BL       __aeabi_fmul
00009c  4659              MOV      r1,r11
00009e  9001              STR      r0,[sp,#4]
0000a0  f7fffffe          BL       __aeabi_fadd
0000a4  4680              MOV      r8,r0
0000a6  f7fffffe          BL       __aeabi_f2iz
0000aa  b200              SXTH     r0,r0
0000ac  eb050184          ADD      r1,r5,r4,LSL #2
0000b0  8048              STRH     r0,[r1,#2]
0000b2  1c64              ADDS     r4,r4,#1              ;37
                  |L1.180|
0000b4  454c              CMP      r4,r9                 ;37
0000b6  dbc2              BLT      |L1.62|
;;;42       }
;;;43     }
0000b8  b005              ADD      sp,sp,#0x14
0000ba  e8bd8ff0          POP      {r4-r11,pc}
;;;44     
                          ENDP

