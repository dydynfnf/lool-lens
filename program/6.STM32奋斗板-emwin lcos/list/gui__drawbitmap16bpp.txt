; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\gui__drawbitmap16bpp.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\gui__drawbitmap16bpp.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -I.\GUI\AntiAlias -I.\GUI\Config -I.\GUI\ConvertColor -I.\GUI\ConvertMono -I.\GUI\Core -I.\GUI\Font -I.\GUI\GUI_X -I.\GUI\JPEG -I.\GUI\LCDDriver -I.\GUI\MemDev -I.\GUI\MultiLayer -I.\GUI\Widget -I.\GUI\WM -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\INC\ST\STM32F10x -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\gui__drawbitmap16bpp.crf GUI\Core\GUI__DrawBitmap16bpp.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  GUI__DrawBitmap16bpp PROC
;;;32     */
;;;33     void GUI__DrawBitmap16bpp(int x0, int y0, int xsize, int ysize, const U8 GUI_UNI_PTR * pPixel, const LCD_LOGPALETTE GUI_UNI_PTR * pLogPal, int xMag, int yMag, tLCDDEV_Index2Color * pfIndex2Color) {
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  b08b              SUB      sp,sp,#0x2c
000006  4606              MOV      r6,r0
000008  4689              MOV      r9,r1
00000a  4615              MOV      r5,r2
00000c  461f              MOV      r7,r3
;;;34       const U16 * pData;
;;;35       int y, OldIndex, PrevIndex, Mag, BytesPerLine, UseDrawBitmap = 0;
00000e  f04f0000          MOV      r0,#0
000012  9007              STR      r0,[sp,#0x1c]
;;;36       GUI_USE_PARA(pLogPal);
000014  9815              LDR      r0,[sp,#0x54]
000016  9015              STR      r0,[sp,#0x54]
;;;37       OldIndex = LCD_GetColorIndex();
000018  f7fffffe          BL       LCD_GetColorIndex
00001c  900a              STR      r0,[sp,#0x28]
;;;38       PrevIndex = OldIndex;
00001e  980a              LDR      r0,[sp,#0x28]
000020  9009              STR      r0,[sp,#0x24]
;;;39       pData = (const U16 *)pPixel;
000022  f8dda050          LDR      r10,[sp,#0x50]
;;;40       Mag = (xMag | yMag);
000026  e9dd0116          LDRD     r0,r1,[sp,#0x58]
00002a  ea400001          ORR      r0,r0,r1
00002e  9008              STR      r0,[sp,#0x20]
;;;41       BytesPerLine = xsize * 2;
000030  ea4f0845          LSL      r8,r5,#1
;;;42       /* Check if bitmaps color format fits to the current color conversion */
;;;43       if (Mag == 1) {
000034  9808              LDR      r0,[sp,#0x20]
000036  2801              CMP      r0,#1
000038  d11c              BNE      |L1.116|
;;;44         tLCDDEV_Index2Color * pfIndex2ColorCompare = NULL;
00003a  f04f0000          MOV      r0,#0
00003e  9006              STR      r0,[sp,#0x18]
;;;45         #if GUI_SUPPORT_MEMDEV
;;;46         if (GUI_Context.hDevData) {
000040  488c              LDR      r0,|L1.628|
000042  f8b0004c          LDRH     r0,[r0,#0x4c]  ; GUI_Context
000046  b140              CBZ      r0,|L1.90|
;;;47           /* If a memory device is selected, use the color conversion routine of the memory device */
;;;48           GUI_MEMDEV * pDevData;
;;;49           pDevData = GUI_MEMDEV_H2P(GUI_Context.hDevData);
000048  498a              LDR      r1,|L1.628|
00004a  f9b1004c          LDRSH    r0,[r1,#0x4c]  ; GUI_Context
00004e  f7fffffe          BL       GUI_ALLOC_h2p
000052  4604              MOV      r4,r0
;;;50           pfIndex2ColorCompare = pDevData->pfIndex2Color;
000054  6a20              LDR      r0,[r4,#0x20]
000056  9006              STR      r0,[sp,#0x18]
;;;51         } else {
000058  e004              B        |L1.100|
                  |L1.90|
;;;52         #else
;;;53         {
;;;54         #endif
;;;55           /* If no memory device is selected, use the color conversion routine of the current layer */
;;;56           pfIndex2ColorCompare = LCD_GetpfIndex2ColorEx(GUI_Context.SelLayer);
00005a  4986              LDR      r1,|L1.628|
00005c  7c48              LDRB     r0,[r1,#0x11]  ; GUI_Context
00005e  f7fffffe          BL       LCD_GetpfIndex2ColorEx
000062  9006              STR      r0,[sp,#0x18]
                  |L1.100|
;;;57         }
;;;58         /* Check if color conversion routine fits  */
;;;59         if (pfIndex2ColorCompare == pfIndex2Color) {
000064  9918              LDR      r1,[sp,#0x60]
000066  9806              LDR      r0,[sp,#0x18]
000068  4288              CMP      r0,r1
00006a  d102              BNE      |L1.114|
;;;60           UseDrawBitmap = 1;
00006c  f04f0001          MOV      r0,#1
000070  9007              STR      r0,[sp,#0x1c]
                  |L1.114|
;;;61         }
;;;62       }
000072  bf00              NOP      
                  |L1.116|
;;;63       if (UseDrawBitmap) {
000074  9807              LDR      r0,[sp,#0x1c]
000076  b180              CBZ      r0,|L1.154|
;;;64         LCD_DrawBitmap(x0, y0, xsize, ysize, 1, 1, 16, BytesPerLine, pPixel, 0);
000078  2100              MOVS     r1,#0
00007a  2210              MOVS     r2,#0x10
00007c  9814              LDR      r0,[sp,#0x50]
00007e  e9cd2802          STRD     r2,r8,[sp,#8]
000082  e9cd0104          STRD     r0,r1,[sp,#0x10]
000086  2001              MOVS     r0,#1
000088  9000              STR      r0,[sp,#0]
00008a  463b              MOV      r3,r7
00008c  462a              MOV      r2,r5
00008e  4649              MOV      r1,r9
000090  9001              STR      r0,[sp,#4]
000092  4630              MOV      r0,r6
000094  f7fffffe          BL       LCD_DrawBitmap
000098  e0e9              B        |L1.622|
                  |L1.154|
;;;65       } else {
;;;66         if (Mag == 1) {
00009a  9808              LDR      r0,[sp,#0x20]
00009c  2801              CMP      r0,#1
00009e  d17d              BNE      |L1.412|
;;;67           /* Perform clipping */
;;;68           int x1, y1, Diff;
;;;69           y1 = y0 + ysize - 1;
0000a0  eb090007          ADD      r0,r9,r7
0000a4  f1a00001          SUB      r0,r0,#1
0000a8  9005              STR      r0,[sp,#0x14]
;;;70           x1 = x0 + xsize - 1;
0000aa  eb060005          ADD      r0,r6,r5
0000ae  f1a00001          SUB      r0,r0,#1
0000b2  9006              STR      r0,[sp,#0x18]
;;;71           /* Clip Y */
;;;72           if (y0 < GUI_Context.ClipRect.y0) {
0000b4  486f              LDR      r0,|L1.628|
0000b6  f9b0000a          LDRSH    r0,[r0,#0xa]
0000ba  4548              CMP      r0,r9
0000bc  dd0f              BLE      |L1.222|
;;;73             Diff = GUI_Context.ClipRect.y0 -y0;
0000be  486d              LDR      r0,|L1.628|
0000c0  f9b0000a          LDRSH    r0,[r0,#0xa]
0000c4  eba00409          SUB      r4,r0,r9
;;;74             y0   = GUI_Context.ClipRect.y0;
0000c8  486a              LDR      r0,|L1.628|
0000ca  f9b0900a          LDRSH    r9,[r0,#0xa]
;;;75             #if GUI_SUPPORT_LARGE_BITMAPS                       /* Required only for 16 bit CPUs if some bitmaps are >64kByte */
;;;76               pData += (U32)Diff * (U32)BytesPerLine / 2;
;;;77             #else
;;;78               pData += (unsigned)Diff * (unsigned)BytesPerLine / 2;
0000ce  fb04f008          MUL      r0,r4,r8
0000d2  ea4f0050          LSR      r0,r0,#1
0000d6  eb0a0a40          ADD      r10,r10,r0,LSL #1
;;;79             #endif
;;;80             ysize -= Diff;
0000da  eba70704          SUB      r7,r7,r4
                  |L1.222|
;;;81           }
;;;82           Diff = y1 - GUI_Context.ClipRect.y1;
0000de  4865              LDR      r0,|L1.628|
0000e0  f9b0100e          LDRSH    r1,[r0,#0xe]
0000e4  9805              LDR      r0,[sp,#0x14]
0000e6  eba00401          SUB      r4,r0,r1
;;;83           if (Diff > 0) {
0000ea  2c00              CMP      r4,#0
0000ec  dd01              BLE      |L1.242|
;;;84             ysize -= Diff;
0000ee  eba70704          SUB      r7,r7,r4
                  |L1.242|
;;;85           }
;;;86           if (ysize <=0) {
0000f2  2f00              CMP      r7,#0
0000f4  dc02              BGT      |L1.252|
                  |L1.246|
;;;87     		    return;
;;;88           }
;;;89           /* Clip right side */
;;;90           Diff = x1 - GUI_Context.ClipRect.x1;
;;;91           if (Diff > 0) {
;;;92             xsize -= Diff;
;;;93           }
;;;94           /* Clip left side */
;;;95           if (x0 < GUI_Context.ClipRect.x0) {
;;;96             Diff = GUI_Context.ClipRect.x0-x0;
;;;97     			  xsize -= Diff;
;;;98             pData += Diff; 
;;;99             x0 += Diff; 
;;;100          }
;;;101          if (xsize <=0) {
;;;102    		    return;
;;;103          }
;;;104          /* Simple, unmagnified output using LCD_L0_SetPixel() */
;;;105          for (y = 0; y < ysize; y++) {
;;;106            int x;
;;;107            const U16 * p = pData;
;;;108            for (x = 0; x < xsize; x++) {
;;;109              U16 Index;
;;;110              Index = *p++;
;;;111              if (Index != PrevIndex) {
;;;112                LCD_SetColor(pfIndex2Color(Index));
;;;113                PrevIndex = Index;
;;;114              }
;;;115              LCDDEV_L0_SetPixelIndex(x + x0, y + y0, LCD_COLORINDEX);
;;;116            }
;;;117            pData += BytesPerLine / 2;
;;;118          }
;;;119        } else {
;;;120          /* Magnified output using LCD_FillRect() */
;;;121          int x,y;
;;;122          int yi;
;;;123          for (y = y0, yi = 0; yi < ysize; yi++, y += yMag, pPixel += BytesPerLine) {
;;;124            int yMax;
;;;125            yMax = y + yMag - 1;
;;;126            /* Draw if within clip area */
;;;127            if ((yMax >= GUI_Context.ClipRect.y0) && (y <= GUI_Context.ClipRect.y1)) {
;;;128              int xi;
;;;129              const U16 GUI_UNI_PTR * p = pData;
;;;130              for (x = x0, xi = 0; xi < xsize; xi++, x += xMag) {
;;;131                U16 Index;
;;;132                Index = *p++;
;;;133                if (Index != PrevIndex) {
;;;134                  LCD_SetColor(pfIndex2Color(Index));
;;;135                  PrevIndex = Index;
;;;136                }
;;;137                LCD_FillRect(x, y, x + xMag - 1, yMax);
;;;138              }
;;;139            }
;;;140            pData += BytesPerLine / 2;
;;;141          }
;;;142        }
;;;143        GUI_SetColorIndex(OldIndex);
;;;144      }
;;;145    }
0000f6  b00b              ADD      sp,sp,#0x2c
0000f8  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.252|
0000fc  485d              LDR      r0,|L1.628|
0000fe  f9b0100c          LDRSH    r1,[r0,#0xc]          ;90
000102  9806              LDR      r0,[sp,#0x18]         ;90
000104  eba00401          SUB      r4,r0,r1              ;90
000108  2c00              CMP      r4,#0                 ;91
00010a  dd01              BLE      |L1.272|
00010c  eba50504          SUB      r5,r5,r4              ;92
                  |L1.272|
000110  4858              LDR      r0,|L1.628|
000112  f9b00008          LDRSH    r0,[r0,#8]            ;95  ; GUI_Context
000116  42b0              CMP      r0,r6                 ;95
000118  dd09              BLE      |L1.302|
00011a  4856              LDR      r0,|L1.628|
00011c  f9b00008          LDRSH    r0,[r0,#8]            ;96  ; GUI_Context
000120  eba00406          SUB      r4,r0,r6              ;96
000124  eba50504          SUB      r5,r5,r4              ;97
000128  eb0a0a44          ADD      r10,r10,r4,LSL #1     ;98
00012c  4426              ADD      r6,r6,r4              ;99
                  |L1.302|
00012e  2d00              CMP      r5,#0                 ;101
000130  dc00              BGT      |L1.308|
000132  e7e0              B        |L1.246|
                  |L1.308|
000134  f04f0b00          MOV      r11,#0                ;105
000138  e03b              B        |L1.434|
                  |L1.314|
00013a  f8cda00c          STR      r10,[sp,#0xc]         ;107
00013e  f04f0000          MOV      r0,#0                 ;108
000142  9004              STR      r0,[sp,#0x10]         ;108
000144  e027              B        |L1.406|
                  |L1.326|
000146  9803              LDR      r0,[sp,#0xc]          ;110
000148  8800              LDRH     r0,[r0,#0]            ;110
00014a  9002              STR      r0,[sp,#8]            ;110
00014c  9803              LDR      r0,[sp,#0xc]          ;110
00014e  f1000002          ADD      r0,r0,#2              ;110
000152  9003              STR      r0,[sp,#0xc]          ;110
000154  9909              LDR      r1,[sp,#0x24]         ;111
000156  9802              LDR      r0,[sp,#8]            ;111
000158  4288              CMP      r0,r1                 ;111
00015a  d007              BEQ      |L1.364|
00015c  9918              LDR      r1,[sp,#0x60]         ;112
00015e  9802              LDR      r0,[sp,#8]            ;112
000160  4788              BLX      r1                    ;112
000162  9001              STR      r0,[sp,#4]            ;112
000164  f7fffffe          BL       LCD_SetColor
000168  9802              LDR      r0,[sp,#8]            ;113
00016a  9009              STR      r0,[sp,#0x24]         ;113
                  |L1.364|
00016c  f8dfc104          LDR      r12,|L1.628|
000170  f8bc2002          LDRH     r2,[r12,#2]           ;115  ; GUI_Context
000174  eb0b0109          ADD      r1,r11,r9             ;115
000178  f8ddc010          LDR      r12,[sp,#0x10]        ;115
00017c  eb0c0006          ADD      r0,r12,r6             ;115
000180  f8dfc0f0          LDR      r12,|L1.628|
000184  f8dcc048          LDR      r12,[r12,#0x48]       ;115  ; GUI_Context
000188  f8dc3024          LDR      r3,[r12,#0x24]        ;115
00018c  4798              BLX      r3                    ;115
00018e  9804              LDR      r0,[sp,#0x10]         ;108
000190  f1000001          ADD      r0,r0,#1              ;108
000194  9004              STR      r0,[sp,#0x10]         ;108
                  |L1.406|
000196  9804              LDR      r0,[sp,#0x10]         ;108
000198  42a8              CMP      r0,r5                 ;108
00019a  e000              B        |L1.414|
                  |L1.412|
00019c  e00c              B        |L1.440|
                  |L1.414|
00019e  dbd2              BLT      |L1.326|
0001a0  4640              MOV      r0,r8                 ;117
0001a2  eb0871d0          ADD      r1,r8,r0,LSR #31      ;117
0001a6  ea4f0161          ASR      r1,r1,#1              ;117
0001aa  eb0a0a41          ADD      r10,r10,r1,LSL #1     ;117
0001ae  f10b0b01          ADD      r11,r11,#1            ;105
                  |L1.434|
0001b2  45bb              CMP      r11,r7                ;105
0001b4  dbc1              BLT      |L1.314|
0001b6  e057              B        |L1.616|
                  |L1.440|
0001b8  464c              MOV      r4,r9                 ;123
0001ba  f04f0000          MOV      r0,#0                 ;123
0001be  9005              STR      r0,[sp,#0x14]         ;123
0001c0  e04e              B        |L1.608|
                  |L1.450|
0001c2  9817              LDR      r0,[sp,#0x5c]         ;125
0001c4  4420              ADD      r0,r0,r4              ;125
0001c6  f1a00001          SUB      r0,r0,#1              ;125
0001ca  9004              STR      r0,[sp,#0x10]         ;125
0001cc  4829              LDR      r0,|L1.628|
0001ce  f9b0100a          LDRSH    r1,[r0,#0xa]          ;127
0001d2  9804              LDR      r0,[sp,#0x10]         ;127
0001d4  4281              CMP      r1,r0                 ;127
0001d6  dc33              BGT      |L1.576|
0001d8  4826              LDR      r0,|L1.628|
0001da  f9b0000e          LDRSH    r0,[r0,#0xe]          ;127
0001de  42a0              CMP      r0,r4                 ;127
0001e0  db2e              BLT      |L1.576|
0001e2  f8cda008          STR      r10,[sp,#8]           ;129
0001e6  9606              STR      r6,[sp,#0x18]         ;130
0001e8  f04f0000          MOV      r0,#0                 ;130
0001ec  9003              STR      r0,[sp,#0xc]          ;130
0001ee  e023              B        |L1.568|
                  |L1.496|
0001f0  9802              LDR      r0,[sp,#8]            ;132
0001f2  8800              LDRH     r0,[r0,#0]            ;132
0001f4  9001              STR      r0,[sp,#4]            ;132
0001f6  9802              LDR      r0,[sp,#8]            ;132
0001f8  f1000002          ADD      r0,r0,#2              ;132
0001fc  9002              STR      r0,[sp,#8]            ;132
0001fe  9909              LDR      r1,[sp,#0x24]         ;133
000200  9801              LDR      r0,[sp,#4]            ;133
000202  4288              CMP      r0,r1                 ;133
000204  d007              BEQ      |L1.534|
000206  9918              LDR      r1,[sp,#0x60]         ;134
000208  9801              LDR      r0,[sp,#4]            ;134
00020a  4788              BLX      r1                    ;134
00020c  9000              STR      r0,[sp,#0]            ;134
00020e  f7fffffe          BL       LCD_SetColor
000212  9801              LDR      r0,[sp,#4]            ;135
000214  9009              STR      r0,[sp,#0x24]         ;135
                  |L1.534|
000216  9916              LDR      r1,[sp,#0x58]         ;137
000218  9806              LDR      r0,[sp,#0x18]         ;137
00021a  4408              ADD      r0,r0,r1              ;137
00021c  1e42              SUBS     r2,r0,#1              ;137
00021e  4621              MOV      r1,r4                 ;137
000220  9b04              LDR      r3,[sp,#0x10]         ;137
000222  9806              LDR      r0,[sp,#0x18]         ;137
000224  f7fffffe          BL       LCD_FillRect
000228  9803              LDR      r0,[sp,#0xc]          ;130
00022a  f1000001          ADD      r0,r0,#1              ;130
00022e  9003              STR      r0,[sp,#0xc]          ;130
000230  9916              LDR      r1,[sp,#0x58]         ;130
000232  9806              LDR      r0,[sp,#0x18]         ;130
000234  4408              ADD      r0,r0,r1              ;130
000236  9006              STR      r0,[sp,#0x18]         ;130
                  |L1.568|
000238  9803              LDR      r0,[sp,#0xc]          ;130
00023a  42a8              CMP      r0,r5                 ;130
00023c  dbd8              BLT      |L1.496|
00023e  bf00              NOP                            ;139
                  |L1.576|
000240  4640              MOV      r0,r8                 ;140
000242  eb0871d0          ADD      r1,r8,r0,LSR #31      ;140
000246  ea4f0161          ASR      r1,r1,#1              ;140
00024a  eb0a0a41          ADD      r10,r10,r1,LSL #1     ;140
00024e  9805              LDR      r0,[sp,#0x14]         ;123
000250  f1000001          ADD      r0,r0,#1              ;123
000254  9005              STR      r0,[sp,#0x14]         ;123
000256  9817              LDR      r0,[sp,#0x5c]         ;123
000258  4404              ADD      r4,r4,r0              ;123
00025a  9814              LDR      r0,[sp,#0x50]         ;123
00025c  4440              ADD      r0,r0,r8              ;123
00025e  9014              STR      r0,[sp,#0x50]         ;123
                  |L1.608|
000260  9805              LDR      r0,[sp,#0x14]         ;123
000262  42b8              CMP      r0,r7                 ;123
000264  dbad              BLT      |L1.450|
000266  bf00              NOP                            ;142
                  |L1.616|
000268  980a              LDR      r0,[sp,#0x28]         ;143
00026a  f7fffffe          BL       GUI_SetColorIndex
                  |L1.622|
00026e  bf00              NOP      
000270  e741              B        |L1.246|
;;;146    
                          ENDP

000272  0000              DCW      0x0000
                  |L1.628|
                          DCD      GUI_Context
