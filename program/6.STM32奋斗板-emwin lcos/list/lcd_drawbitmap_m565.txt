; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\lcd_drawbitmap_m565.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\lcd_drawbitmap_m565.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -I.\GUI\AntiAlias -I.\GUI\Config -I.\GUI\ConvertColor -I.\GUI\ConvertMono -I.\GUI\Core -I.\GUI\Font -I.\GUI\GUI_X -I.\GUI\JPEG -I.\GUI\LCDDriver -I.\GUI\MemDev -I.\GUI\MultiLayer -I.\GUI\Widget -I.\GUI\WM -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\INC\ST\STM32F10x -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\lcd_drawbitmap_m565.crf GUI\Core\LCD_DrawBitmap_M565.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _DrawBitmap_M565 PROC
;;;33     */
;;;34     static void _DrawBitmap_M565(int x0,int y0,int xsize, int ysize, const U8 GUI_UNI_PTR * pPixel, const LCD_LOGPALETTE GUI_UNI_PTR * pLogPal, int xMag, int yMag) {
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  b08d              SUB      sp,sp,#0x34
000006  4606              MOV      r6,r0
000008  4689              MOV      r9,r1
00000a  4615              MOV      r5,r2
00000c  461f              MOV      r7,r3
;;;35       const U16 * pData;
;;;36       int y, OldIndex, PrevIndex, Mode, SwapRB, Mag, BytesPerLine, UseDrawBitmap = 0;
00000e  f04f0000          MOV      r0,#0
000012  9007              STR      r0,[sp,#0x1c]
;;;37       GUI_USE_PARA(pLogPal);
000014  9817              LDR      r0,[sp,#0x5c]
000016  9017              STR      r0,[sp,#0x5c]
;;;38       OldIndex = LCD_GetColorIndex();
000018  f7fffffe          BL       LCD_GetColorIndex
00001c  900c              STR      r0,[sp,#0x30]
;;;39       PrevIndex = OldIndex;
00001e  980c              LDR      r0,[sp,#0x30]
000020  900b              STR      r0,[sp,#0x2c]
;;;40       pData = (const U16 *)pPixel;
000022  f8dda058          LDR      r10,[sp,#0x58]
;;;41       Mode = LCD_GetFixedPaletteEx(GUI_Context.SelLayer);
000026  4998              LDR      r1,|L1.648|
000028  7b48              LDRB     r0,[r1,#0xd]  ; GUI_Context
00002a  f7fffffe          BL       LCD_GetFixedPaletteEx
00002e  900a              STR      r0,[sp,#0x28]
;;;42       SwapRB = LCD_GetSwapRBEx(GUI_Context.SelLayer);
000030  4995              LDR      r1,|L1.648|
000032  7b48              LDRB     r0,[r1,#0xd]  ; GUI_Context
000034  f7fffffe          BL       LCD_GetSwapRBEx
000038  9009              STR      r0,[sp,#0x24]
;;;43       Mag = (xMag | yMag);
00003a  e9dd0118          LDRD     r0,r1,[sp,#0x60]
00003e  ea400001          ORR      r0,r0,r1
000042  9008              STR      r0,[sp,#0x20]
;;;44       BytesPerLine = xsize * 2;
000044  ea4f0845          LSL      r8,r5,#1
;;;45       #if GUI_SUPPORT_MEMDEV == 0
;;;46       if ((Mode == 565) && (SwapRB == 1) && (Mag == 1)) {
;;;47         UseDrawBitmap = 1;
;;;48       }
;;;49       #else
;;;50       if (GUI_Context.pDeviceAPI->pMemDevAPI) {
000048  488f              LDR      r0,|L1.648|
00004a  6c80              LDR      r0,[r0,#0x48]  ; GUI_Context
00004c  6b80              LDR      r0,[r0,#0x38]
00004e  b1d0              CBZ      r0,|L1.134|
;;;51         if (((GUI_Context.hDevData && (GUI_Context.pDeviceAPI->pMemDevAPI->pfIndex2Color == LCD_Index2Color_565)) ||
000050  488d              LDR      r0,|L1.648|
000052  f8b0004c          LDRH     r0,[r0,#0x4c]  ; GUI_Context
000056  b130              CBZ      r0,|L1.102|
000058  488b              LDR      r0,|L1.648|
00005a  6c80              LDR      r0,[r0,#0x48]  ; GUI_Context
00005c  6b80              LDR      r0,[r0,#0x38]
00005e  6840              LDR      r0,[r0,#4]
000060  498a              LDR      r1,|L1.652|
000062  4288              CMP      r0,r1
000064  d00b              BEQ      |L1.126|
                  |L1.102|
;;;52             ((GUI_Context.hDevData == 0) && (Mode == 565) && (SwapRB == 1)))  && (Mag == 1)) {
000066  4888              LDR      r0,|L1.648|
000068  f8b0004c          LDRH     r0,[r0,#0x4c]  ; GUI_Context
00006c  b958              CBNZ     r0,|L1.134|
00006e  980a              LDR      r0,[sp,#0x28]
000070  f5a07100          SUB      r1,r0,#0x200
000074  3935              SUBS     r1,r1,#0x35
000076  d106              BNE      |L1.134|
000078  9809              LDR      r0,[sp,#0x24]
00007a  2801              CMP      r0,#1
00007c  d103              BNE      |L1.134|
                  |L1.126|
00007e  9808              LDR      r0,[sp,#0x20]
000080  2801              CMP      r0,#1
000082  d100              BNE      |L1.134|
;;;53           UseDrawBitmap = 1;
000084  9007              STR      r0,[sp,#0x1c]
                  |L1.134|
;;;54         }
;;;55       }
;;;56       #endif
;;;57       if (UseDrawBitmap) {
000086  9807              LDR      r0,[sp,#0x1c]
000088  b180              CBZ      r0,|L1.172|
;;;58         LCD_DrawBitmap(x0, y0, xsize, ysize, 1, 1, 16, BytesPerLine, pPixel, 0);
00008a  2100              MOVS     r1,#0
00008c  2210              MOVS     r2,#0x10
00008e  9816              LDR      r0,[sp,#0x58]
000090  e9cd2802          STRD     r2,r8,[sp,#8]
000094  e9cd0104          STRD     r0,r1,[sp,#0x10]
000098  2001              MOVS     r0,#1
00009a  9000              STR      r0,[sp,#0]
00009c  463b              MOV      r3,r7
00009e  462a              MOV      r2,r5
0000a0  4649              MOV      r1,r9
0000a2  9001              STR      r0,[sp,#4]
0000a4  4630              MOV      r0,r6
0000a6  f7fffffe          BL       LCD_DrawBitmap
0000aa  e0eb              B        |L1.644|
                  |L1.172|
;;;59       } else {
;;;60         if (Mag == 1) {
0000ac  9808              LDR      r0,[sp,#0x20]
0000ae  2801              CMP      r0,#1
0000b0  d17e              BNE      |L1.432|
;;;61           /* Perform clipping */
;;;62           int x1, y1, Diff;
;;;63           y1 = y0 + ysize - 1;
0000b2  eb090007          ADD      r0,r9,r7
0000b6  f1a00001          SUB      r0,r0,#1
0000ba  9005              STR      r0,[sp,#0x14]
;;;64           x1 = x0 + xsize - 1;
0000bc  eb060005          ADD      r0,r6,r5
0000c0  f1a00001          SUB      r0,r0,#1
0000c4  9006              STR      r0,[sp,#0x18]
;;;65           /* Clip Y */
;;;66           if (y0 < GUI_Context.ClipRect.y0) {
0000c6  4870              LDR      r0,|L1.648|
0000c8  f9b00006          LDRSH    r0,[r0,#6]
0000cc  4548              CMP      r0,r9
0000ce  dd0f              BLE      |L1.240|
;;;67             Diff = GUI_Context.ClipRect.y0 -y0;
0000d0  486d              LDR      r0,|L1.648|
0000d2  f9b00006          LDRSH    r0,[r0,#6]
0000d6  eba00409          SUB      r4,r0,r9
;;;68             y0   = GUI_Context.ClipRect.y0;
0000da  486b              LDR      r0,|L1.648|
0000dc  f9b09006          LDRSH    r9,[r0,#6]
;;;69             #if GUI_SUPPORT_LARGE_BITMAPS                       /* Required only for 16 bit CPUs if some bitmaps are >64kByte */
;;;70               pData += (U32)Diff * (U32)BytesPerLine / 2;
;;;71             #else
;;;72               pData += (unsigned)Diff * (unsigned)BytesPerLine / 2;
0000e0  fb04f008          MUL      r0,r4,r8
0000e4  ea4f0050          LSR      r0,r0,#1
0000e8  eb0a0a40          ADD      r10,r10,r0,LSL #1
;;;73             #endif
;;;74             ysize -= Diff;
0000ec  eba70704          SUB      r7,r7,r4
                  |L1.240|
;;;75           }
;;;76           Diff = y1 - GUI_Context.ClipRect.y1;
0000f0  4865              LDR      r0,|L1.648|
0000f2  f9b0100a          LDRSH    r1,[r0,#0xa]
0000f6  9805              LDR      r0,[sp,#0x14]
0000f8  eba00401          SUB      r4,r0,r1
;;;77           if (Diff > 0) {
0000fc  2c00              CMP      r4,#0
0000fe  dd01              BLE      |L1.260|
;;;78             ysize -= Diff;
000100  eba70704          SUB      r7,r7,r4
                  |L1.260|
;;;79           }
;;;80           if (ysize <=0) {
000104  2f00              CMP      r7,#0
000106  dc02              BGT      |L1.270|
                  |L1.264|
;;;81     		    return;
;;;82           }
;;;83           /* Clip right side */
;;;84           Diff = x1 - GUI_Context.ClipRect.x1;
;;;85           if (Diff > 0) {
;;;86             xsize -= Diff;
;;;87           }
;;;88           /* Clip left side */
;;;89           Diff =0;
;;;90           if (x0 < GUI_Context.ClipRect.x0) {
;;;91             Diff = GUI_Context.ClipRect.x0-x0;
;;;92     			  xsize -= Diff;
;;;93             pData += Diff; 
;;;94             x0 += Diff; 
;;;95           }
;;;96           if (xsize <=0) {
;;;97     		    return;
;;;98           }
;;;99           /* Simple, unmagnified output using LCD_L0_SetPixel() */
;;;100          for (y = 0; y < ysize; y++) {
;;;101            int x;
;;;102            const U16 * p = pData;
;;;103            for (x = 0; x < xsize; x++) {
;;;104              U16 Index;
;;;105              Index = *p++;
;;;106              if (Index != PrevIndex) {
;;;107                LCD_SetColor(LCD_Index2Color_M565(Index));
;;;108                PrevIndex = Index;
;;;109              }
;;;110              LCDDEV_L0_SetPixelIndex(x + x0, y + y0, LCD_COLORINDEX);
;;;111            }
;;;112            pData += BytesPerLine / 2;
;;;113          }
;;;114        } else {
;;;115          /* Magnified output using LCD_FillRect() */
;;;116          int x,y;
;;;117          int yi;
;;;118          for (y = y0, yi = 0; yi < ysize; yi++, y += yMag, pPixel += BytesPerLine) {
;;;119            int yMax;
;;;120            yMax = y + yMag - 1;
;;;121            /* Draw if within clip area */
;;;122            if ((yMax >= GUI_Context.ClipRect.y0) && (y <= GUI_Context.ClipRect.y1)) {
;;;123              int xi;
;;;124              const U16 GUI_UNI_PTR * p = pData;
;;;125              for (x = x0, xi = 0; xi < xsize; xi++, x += xMag) {
;;;126                U16 Index;
;;;127                Index = *p++;
;;;128                if (Index != PrevIndex) {
;;;129                  LCD_SetColor(LCD_Index2Color_M565(Index));
;;;130                  PrevIndex = Index;
;;;131                }
;;;132                LCD_FillRect(x, y, x + xMag - 1, yMax);
;;;133              }
;;;134            }
;;;135            pData += BytesPerLine / 2;
;;;136          }
;;;137        }
;;;138        GUI_SetColorIndex(OldIndex);
;;;139      }
;;;140    }
000108  b00d              ADD      sp,sp,#0x34
00010a  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.270|
00010e  485e              LDR      r0,|L1.648|
000110  f9b01008          LDRSH    r1,[r0,#8]            ;84
000114  9806              LDR      r0,[sp,#0x18]         ;84
000116  eba00401          SUB      r4,r0,r1              ;84
00011a  2c00              CMP      r4,#0                 ;85
00011c  dd01              BLE      |L1.290|
00011e  eba50504          SUB      r5,r5,r4              ;86
                  |L1.290|
000122  f04f0400          MOV      r4,#0                 ;89
000126  4858              LDR      r0,|L1.648|
000128  f9b00004          LDRSH    r0,[r0,#4]            ;90  ; GUI_Context
00012c  42b0              CMP      r0,r6                 ;90
00012e  dd09              BLE      |L1.324|
000130  4855              LDR      r0,|L1.648|
000132  f9b00004          LDRSH    r0,[r0,#4]            ;91  ; GUI_Context
000136  eba00406          SUB      r4,r0,r6              ;91
00013a  eba50504          SUB      r5,r5,r4              ;92
00013e  eb0a0a44          ADD      r10,r10,r4,LSL #1     ;93
000142  4426              ADD      r6,r6,r4              ;94
                  |L1.324|
000144  2d00              CMP      r5,#0                 ;96
000146  dc00              BGT      |L1.330|
000148  e7de              B        |L1.264|
                  |L1.330|
00014a  f04f0b00          MOV      r11,#0                ;100
00014e  e03b              B        |L1.456|
                  |L1.336|
000150  f8cda00c          STR      r10,[sp,#0xc]         ;102
000154  f04f0000          MOV      r0,#0                 ;103
000158  9004              STR      r0,[sp,#0x10]         ;103
00015a  e027              B        |L1.428|
                  |L1.348|
00015c  9803              LDR      r0,[sp,#0xc]          ;105
00015e  8800              LDRH     r0,[r0,#0]            ;105
000160  9002              STR      r0,[sp,#8]            ;105
000162  9803              LDR      r0,[sp,#0xc]          ;105
000164  f1000002          ADD      r0,r0,#2              ;105
000168  9003              STR      r0,[sp,#0xc]          ;105
00016a  990b              LDR      r1,[sp,#0x2c]         ;106
00016c  9802              LDR      r0,[sp,#8]            ;106
00016e  4288              CMP      r0,r1                 ;106
000170  d007              BEQ      |L1.386|
000172  9802              LDR      r0,[sp,#8]            ;107
000174  f7fffffe          BL       LCD_Index2Color_M565
000178  9001              STR      r0,[sp,#4]            ;107
00017a  f7fffffe          BL       LCD_SetColor
00017e  9802              LDR      r0,[sp,#8]            ;108
000180  900b              STR      r0,[sp,#0x2c]         ;108
                  |L1.386|
000182  f8dfc104          LDR      r12,|L1.648|
000186  f8bc2002          LDRH     r2,[r12,#2]           ;110  ; GUI_Context
00018a  eb0b0109          ADD      r1,r11,r9             ;110
00018e  f8ddc010          LDR      r12,[sp,#0x10]        ;110
000192  eb0c0006          ADD      r0,r12,r6             ;110
000196  f8dfc0f0          LDR      r12,|L1.648|
00019a  f8dcc048          LDR      r12,[r12,#0x48]       ;110  ; GUI_Context
00019e  f8dc3024          LDR      r3,[r12,#0x24]        ;110
0001a2  4798              BLX      r3                    ;110
0001a4  9804              LDR      r0,[sp,#0x10]         ;103
0001a6  f1000001          ADD      r0,r0,#1              ;103
0001aa  9004              STR      r0,[sp,#0x10]         ;103
                  |L1.428|
0001ac  9804              LDR      r0,[sp,#0x10]         ;103
0001ae  e000              B        |L1.434|
                  |L1.432|
0001b0  e00d              B        |L1.462|
                  |L1.434|
0001b2  42a8              CMP      r0,r5                 ;103
0001b4  dbd2              BLT      |L1.348|
0001b6  4640              MOV      r0,r8                 ;112
0001b8  eb0871d0          ADD      r1,r8,r0,LSR #31      ;112
0001bc  ea4f0161          ASR      r1,r1,#1              ;112
0001c0  eb0a0a41          ADD      r10,r10,r1,LSL #1     ;112
0001c4  f10b0b01          ADD      r11,r11,#1            ;100
                  |L1.456|
0001c8  45bb              CMP      r11,r7                ;100
0001ca  dbc1              BLT      |L1.336|
0001cc  e057              B        |L1.638|
                  |L1.462|
0001ce  464c              MOV      r4,r9                 ;118
0001d0  f04f0000          MOV      r0,#0                 ;118
0001d4  9005              STR      r0,[sp,#0x14]         ;118
0001d6  e04e              B        |L1.630|
                  |L1.472|
0001d8  9819              LDR      r0,[sp,#0x64]         ;120
0001da  4420              ADD      r0,r0,r4              ;120
0001dc  f1a00001          SUB      r0,r0,#1              ;120
0001e0  9004              STR      r0,[sp,#0x10]         ;120
0001e2  4829              LDR      r0,|L1.648|
0001e4  f9b01006          LDRSH    r1,[r0,#6]            ;122
0001e8  9804              LDR      r0,[sp,#0x10]         ;122
0001ea  4281              CMP      r1,r0                 ;122
0001ec  dc33              BGT      |L1.598|
0001ee  4826              LDR      r0,|L1.648|
0001f0  f9b0000a          LDRSH    r0,[r0,#0xa]          ;122
0001f4  42a0              CMP      r0,r4                 ;122
0001f6  db2e              BLT      |L1.598|
0001f8  f8cda008          STR      r10,[sp,#8]           ;124
0001fc  9606              STR      r6,[sp,#0x18]         ;125
0001fe  f04f0000          MOV      r0,#0                 ;125
000202  9003              STR      r0,[sp,#0xc]          ;125
000204  e023              B        |L1.590|
                  |L1.518|
000206  9802              LDR      r0,[sp,#8]            ;127
000208  8800              LDRH     r0,[r0,#0]            ;127
00020a  9001              STR      r0,[sp,#4]            ;127
00020c  9802              LDR      r0,[sp,#8]            ;127
00020e  f1000002          ADD      r0,r0,#2              ;127
000212  9002              STR      r0,[sp,#8]            ;127
000214  990b              LDR      r1,[sp,#0x2c]         ;128
000216  9801              LDR      r0,[sp,#4]            ;128
000218  4288              CMP      r0,r1                 ;128
00021a  d007              BEQ      |L1.556|
00021c  9801              LDR      r0,[sp,#4]            ;129
00021e  f7fffffe          BL       LCD_Index2Color_M565
000222  9000              STR      r0,[sp,#0]            ;129
000224  f7fffffe          BL       LCD_SetColor
000228  9801              LDR      r0,[sp,#4]            ;130
00022a  900b              STR      r0,[sp,#0x2c]         ;130
                  |L1.556|
00022c  9918              LDR      r1,[sp,#0x60]         ;132
00022e  9806              LDR      r0,[sp,#0x18]         ;132
000230  4408              ADD      r0,r0,r1              ;132
000232  1e42              SUBS     r2,r0,#1              ;132
000234  4621              MOV      r1,r4                 ;132
000236  9b04              LDR      r3,[sp,#0x10]         ;132
000238  9806              LDR      r0,[sp,#0x18]         ;132
00023a  f7fffffe          BL       LCD_FillRect
00023e  9803              LDR      r0,[sp,#0xc]          ;125
000240  f1000001          ADD      r0,r0,#1              ;125
000244  9003              STR      r0,[sp,#0xc]          ;125
000246  9918              LDR      r1,[sp,#0x60]         ;125
000248  9806              LDR      r0,[sp,#0x18]         ;125
00024a  4408              ADD      r0,r0,r1              ;125
00024c  9006              STR      r0,[sp,#0x18]         ;125
                  |L1.590|
00024e  9803              LDR      r0,[sp,#0xc]          ;125
000250  42a8              CMP      r0,r5                 ;125
000252  dbd8              BLT      |L1.518|
000254  bf00              NOP                            ;134
                  |L1.598|
000256  4640              MOV      r0,r8                 ;135
000258  eb0871d0          ADD      r1,r8,r0,LSR #31      ;135
00025c  ea4f0161          ASR      r1,r1,#1              ;135
000260  eb0a0a41          ADD      r10,r10,r1,LSL #1     ;135
000264  9805              LDR      r0,[sp,#0x14]         ;118
000266  f1000001          ADD      r0,r0,#1              ;118
00026a  9005              STR      r0,[sp,#0x14]         ;118
00026c  9819              LDR      r0,[sp,#0x64]         ;118
00026e  4404              ADD      r4,r4,r0              ;118
000270  9816              LDR      r0,[sp,#0x58]         ;118
000272  4440              ADD      r0,r0,r8              ;118
000274  9016              STR      r0,[sp,#0x58]         ;118
                  |L1.630|
000276  9805              LDR      r0,[sp,#0x14]         ;118
000278  42b8              CMP      r0,r7                 ;118
00027a  dbad              BLT      |L1.472|
00027c  bf00              NOP                            ;137
                  |L1.638|
00027e  980c              LDR      r0,[sp,#0x30]         ;138
000280  f7fffffe          BL       GUI_SetColorIndex
                  |L1.644|
000284  bf00              NOP      
000286  e73f              B        |L1.264|
;;;141    
                          ENDP

                  |L1.648|
                          DCD      GUI_Context
                  |L1.652|
                          DCD      LCD_Index2Color_565

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  GUI_BitmapMethodsM565
                          DCD      _DrawBitmap_M565
                          DCD      LCD_Index2Color_M565
