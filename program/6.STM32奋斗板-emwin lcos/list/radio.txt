; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\radio.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\radio.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -I.\GUI\AntiAlias -I.\GUI\Config -I.\GUI\ConvertColor -I.\GUI\ConvertMono -I.\GUI\Core -I.\GUI\Font -I.\GUI\GUI_X -I.\GUI\JPEG -I.\GUI\LCDDriver -I.\GUI\MemDev -I.\GUI\MultiLayer -I.\GUI\Widget -I.\GUI\WM -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\INC\ST\STM32F10x -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\radio.crf GUI\Widget\RADIO.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _OnPaint PROC
;;;113    */
;;;114    static void _OnPaint(RADIO_Handle hObj, RADIO_Obj* pObj) {
000000  e92d4ff3          PUSH     {r0,r1,r4-r11,lr}
000004  b08d              SUB      sp,sp,#0x34
000006  460c              MOV      r4,r1
;;;115      const GUI_BITMAP* pBmRadio;
;;;116      const GUI_BITMAP* pBmCheck;
;;;117      const char* pText;
;;;118      GUI_FONTINFO FontInfo;
;;;119      GUI_RECT Rect, r, rFocus = {0};
000008  f04f0000          MOV      r0,#0
00000c  9005              STR      r0,[sp,#0x14]
00000e  9006              STR      r0,[sp,#0x18]
;;;120      int i, y, HasFocus, FontDistY;
;;;121      U8 SpaceAbove, CHeight, FocusBorder;
;;;122    
;;;123      /* Init some data */
;;;124      WIDGET__GetClientRect(&pObj->Widget, &rFocus);
000010  a905              ADD      r1,sp,#0x14
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       WIDGET__GetClientRect
;;;125      HasFocus  = (pObj->Widget.State & WIDGET_STATE_FOCUS) ? 1 : 0;
000018  8ce0              LDRH     r0,[r4,#0x26]
00001a  f0000b01          AND      r11,r0,#1
;;;126      pBmRadio  = pObj->Props.apBmRadio[WM__IsEnabled(hObj)];
00001e  980d              LDR      r0,[sp,#0x34]
000020  f7fffffe          BL       WM__IsEnabled
000024  4601              MOV      r1,r0
000026  f1040038          ADD      r0,r4,#0x38
00002a  f8506021          LDR      r6,[r0,r1,LSL #2]
;;;127      pBmCheck  = pObj->Props.pBmCheck;
00002e  f8d4a040          LDR      r10,[r4,#0x40]
;;;128      rFocus.x1 = pBmRadio->XSize + RADIO_BORDER * 2 - 1;
000032  8830              LDRH     r0,[r6,#0]
000034  f1000003          ADD      r0,r0,#3
000038  b200              SXTH     r0,r0
00003a  f8ad0018          STRH     r0,[sp,#0x18]
;;;129      rFocus.y1 = pObj->Height + ((pObj->NumItems - 1) * pObj->Spacing) - 1;
00003e  f104044a          ADD      r4,r4,#0x4a
000042  8861              LDRH     r1,[r4,#2]
000044  88a0              LDRH     r0,[r4,#4]
000046  f1a00001          SUB      r0,r0,#1
00004a  f834294a          LDRH     r2,[r4],#-0x4a
00004e  fb001002          MLA      r0,r0,r2,r1
000052  f1a00001          SUB      r0,r0,#1
000056  b200              SXTH     r0,r0
000058  f8ad001a          STRH     r0,[sp,#0x1a]
;;;130    
;;;131      /* Select font and text color */
;;;132      LCD_SetColor(pObj->Props.TextColor);
00005c  6ae0              LDR      r0,[r4,#0x2c]
00005e  f7fffffe          BL       LCD_SetColor
;;;133      GUI_SetFont(pObj->Props.pFont);
000062  6b60              LDR      r0,[r4,#0x34]
000064  f7fffffe          BL       GUI_SetFont
;;;134      GUI_SetTextMode(GUI_TM_TRANS);
000068  2002              MOVS     r0,#2
00006a  f7fffffe          BL       GUI_SetTextMode
;;;135    
;;;136      /* Get font infos */
;;;137      GUI_GetFontInfo(pObj->Props.pFont, &FontInfo);
00006e  a90b              ADD      r1,sp,#0x2c
000070  6b60              LDR      r0,[r4,#0x34]
000072  f7fffffe          BL       GUI_GetFontInfo
;;;138      FontDistY   = GUI_GetFontDistY();
000076  f7fffffe          BL       GUI_GetFontDistY
00007a  9004              STR      r0,[sp,#0x10]
;;;139      CHeight     = FontInfo.CHeight;
00007c  f89d9030          LDRB     r9,[sp,#0x30]
;;;140      SpaceAbove  = FontInfo.Baseline - CHeight;
000080  f89d002e          LDRB     r0,[sp,#0x2e]
000084  eba00009          SUB      r0,r0,r9
000088  b2c0              UXTB     r0,r0
00008a  9003              STR      r0,[sp,#0xc]
;;;141      Rect.x0     = pBmRadio->XSize + RADIO_BORDER * 2 + 2;
00008c  8830              LDRH     r0,[r6,#0]
00008e  f1000006          ADD      r0,r0,#6
000092  b200              SXTH     r0,r0
000094  f8ad0024          STRH     r0,[sp,#0x24]
;;;142      Rect.y0     = (CHeight <= pObj->Height) ? ((pObj->Height - CHeight) / 2) : 0;
000098  f8b4104c          LDRH     r1,[r4,#0x4c]
00009c  4549              CMP      r1,r9
00009e  db08              BLT      |L1.178|
0000a0  f8b4104c          LDRH     r1,[r4,#0x4c]
0000a4  eba10009          SUB      r0,r1,r9
0000a8  eb0071d0          ADD      r1,r0,r0,LSR #31
0000ac  ea4f0161          ASR      r1,r1,#1
0000b0  e001              B        |L1.182|
                  |L1.178|
0000b2  f04f0100          MOV      r1,#0
                  |L1.182|
0000b6  b209              SXTH     r1,r1
0000b8  f8ad1026          STRH     r1,[sp,#0x26]
;;;143      Rect.y1     = Rect.y0 + CHeight - 1;
0000bc  f8bd0026          LDRH     r0,[sp,#0x26]
0000c0  4448              ADD      r0,r0,r9
0000c2  f1a00001          SUB      r0,r0,#1
0000c6  b200              SXTH     r0,r0
0000c8  f8ad002a          STRH     r0,[sp,#0x2a]
;;;144      FocusBorder = (FontDistY <= 12) ? 2 : 3;
0000cc  9804              LDR      r0,[sp,#0x10]
0000ce  280c              CMP      r0,#0xc
0000d0  dc02              BGT      |L1.216|
0000d2  f04f0002          MOV      r0,#2
0000d6  e001              B        |L1.220|
                  |L1.216|
0000d8  f04f0003          MOV      r0,#3
                  |L1.220|
0000dc  9002              STR      r0,[sp,#8]
;;;145      if (Rect.y0 < FocusBorder) {
0000de  f9bd1026          LDRSH    r1,[sp,#0x26]
0000e2  9802              LDR      r0,[sp,#8]
0000e4  4281              CMP      r1,r0
0000e6  da03              BGE      |L1.240|
;;;146        FocusBorder = Rect.y0;
0000e8  f8bd0026          LDRH     r0,[sp,#0x26]
0000ec  b2c0              UXTB     r0,r0
0000ee  9002              STR      r0,[sp,#8]
                  |L1.240|
;;;147      }
;;;148    
;;;149      /* Clear inside ... Just in case      */
;;;150      /* Fill with parents background color */
;;;151    #if WM_SUPPORT_TRANSPARENCY
;;;152      if (!WM_GetHasTrans(hObj))
0000f0  980d              LDR      r0,[sp,#0x34]
0000f2  f7fffffe          BL       WM_GetHasTrans
0000f6  b968              CBNZ     r0,|L1.276|
;;;153    #endif
;;;154      {
;;;155        if (pObj->Props.BkColor != GUI_INVALID_COLOR) {
0000f8  f06f4170          MVN      r1,#0xf0000000
0000fc  6aa0              LDR      r0,[r4,#0x28]
0000fe  4288              CMP      r0,r1
000100  d003              BEQ      |L1.266|
;;;156          LCD_SetBkColor(pObj->Props.BkColor);
000102  6aa0              LDR      r0,[r4,#0x28]
000104  f7fffffe          BL       LCD_SetBkColor
000108  e002              B        |L1.272|
                  |L1.266|
;;;157        } else {
;;;158          LCD_SetBkColor(RADIO_DEFAULT_BKCOLOR);
00010a  48f4              LDR      r0,|L1.1244|
00010c  f7fffffe          BL       LCD_SetBkColor
                  |L1.272|
;;;159        }
;;;160        GUI_Clear();
000110  f7fffffe          BL       GUI_Clear
                  |L1.276|
;;;161      }
;;;162    
;;;163      /* Iterate over all items */
;;;164      for (i = 0; i < pObj->NumItems; i++) {
000114  f04f0500          MOV      r5,#0
000118  e05a              B        |L1.464|
                  |L1.282|
;;;165        y = i * pObj->Spacing;
00011a  f8b4004a          LDRH     r0,[r4,#0x4a]
00011e  fb00f805          MUL      r8,r0,r5
;;;166        /* Draw the radio button bitmap */
;;;167        GUI_DrawBitmap(pBmRadio, RADIO_BORDER, RADIO_BORDER + y);
000122  f1080202          ADD      r2,r8,#2
000126  2102              MOVS     r1,#2
000128  4630              MOV      r0,r6
00012a  f7fffffe          BL       GUI_DrawBitmap
;;;168        /* Draw the check bitmap */
;;;169        if (pObj->Sel == i) {
00012e  f9b40048          LDRSH    r0,[r4,#0x48]
000132  42a8              CMP      r0,r5
000134  d116              BNE      |L1.356|
;;;170          GUI_DrawBitmap(pBmCheck, RADIO_BORDER +  (pBmRadio->XSize - pBmCheck->XSize) / 2, 
000136  8870              LDRH     r0,[r6,#2]
000138  f8ba3002          LDRH     r3,[r10,#2]
00013c  1ac0              SUBS     r0,r0,r3
00013e  9001              STR      r0,[sp,#4]
000140  eb0070d0          ADD      r0,r0,r0,LSR #31
000144  1040              ASRS     r0,r0,#1
000146  1c80              ADDS     r0,r0,#2
000148  eb000208          ADD      r2,r0,r8
00014c  8830              LDRH     r0,[r6,#0]
00014e  f8ba3000          LDRH     r3,[r10,#0]
000152  1ac0              SUBS     r0,r0,r3
000154  9000              STR      r0,[sp,#0]
000156  eb0070d0          ADD      r0,r0,r0,LSR #31
00015a  1040              ASRS     r0,r0,#1
00015c  1c81              ADDS     r1,r0,#2
00015e  4650              MOV      r0,r10
000160  f7fffffe          BL       GUI_DrawBitmap
                  |L1.356|
;;;171                                   RADIO_BORDER + ((pBmRadio->YSize - pBmCheck->YSize) / 2) + y);
;;;172        }
;;;173        /* Draw text if available */
;;;174        pText = (const char*)GUI_ARRAY_GetpItem(&pObj->TextArray, i);
000164  4629              MOV      r1,r5
000166  f1040044          ADD      r0,r4,#0x44
00016a  f7fffffe          BL       GUI_ARRAY_GetpItem
00016e  4607              MOV      r7,r0
;;;175        if (pText) {
000170  b367              CBZ      r7,|L1.460|
;;;176          if (*pText) {
000172  7838              LDRB     r0,[r7,#0]
000174  b350              CBZ      r0,|L1.460|
;;;177            r = Rect;
000176  e9dd0109          LDRD     r0,r1,[sp,#0x24]
00017a  e9cd0107          STRD     r0,r1,[sp,#0x1c]
;;;178            r.x1 = r.x0 + GUI_GetStringDistX(pText) - 2;
00017e  4638              MOV      r0,r7
000180  f7fffffe          BL       GUI_GetStringDistX
000184  f8bd101c          LDRH     r1,[sp,#0x1c]
000188  4408              ADD      r0,r0,r1
00018a  f1a00002          SUB      r0,r0,#2
00018e  b200              SXTH     r0,r0
000190  f8ad0020          STRH     r0,[sp,#0x20]
;;;179            GUI_MoveRect(&r, 0, y);
000194  4642              MOV      r2,r8
000196  f04f0100          MOV      r1,#0
00019a  a807              ADD      r0,sp,#0x1c
00019c  f7fffffe          BL       GUI_MoveRect
;;;180            GUI_DispStringAt(pText, r.x0, r.y0 - SpaceAbove);
0001a0  f9bd301e          LDRSH    r3,[sp,#0x1e]
0001a4  9803              LDR      r0,[sp,#0xc]
0001a6  1a1a              SUBS     r2,r3,r0
0001a8  f9bd101c          LDRSH    r1,[sp,#0x1c]
0001ac  4638              MOV      r0,r7
0001ae  f7fffffe          BL       GUI_DispStringAt
;;;181            /* Calculate focus rect */
;;;182            if (HasFocus && (pObj->Sel == i)) {
0001b2  f1bb0f00          CMP      r11,#0
0001b6  d009              BEQ      |L1.460|
0001b8  f9b40048          LDRSH    r0,[r4,#0x48]
0001bc  42a8              CMP      r0,r5
0001be  d105              BNE      |L1.460|
;;;183              GUI__ReduceRect(&rFocus, &r, -FocusBorder);
0001c0  9802              LDR      r0,[sp,#8]
0001c2  4242              RSBS     r2,r0,#0
0001c4  a907              ADD      r1,sp,#0x1c
0001c6  a805              ADD      r0,sp,#0x14
0001c8  f7fffffe          BL       GUI__ReduceRect
                  |L1.460|
0001cc  f1050501          ADD      r5,r5,#1              ;164
                  |L1.464|
0001d0  f8b4004e          LDRH     r0,[r4,#0x4e]         ;164
0001d4  42a8              CMP      r0,r5                 ;164
0001d6  dca0              BGT      |L1.282|
;;;184            }
;;;185          }
;;;186        }
;;;187      }
;;;188    
;;;189      /* Draw the focus rect */
;;;190      if (HasFocus) {
0001d8  f1bb0f00          CMP      r11,#0
0001dc  d006              BEQ      |L1.492|
;;;191        LCD_SetColor(pObj->Props.FocusColor);
0001de  6b20              LDR      r0,[r4,#0x30]
0001e0  f7fffffe          BL       LCD_SetColor
;;;192        GUI_DrawFocusRect(&rFocus, 0);
0001e4  2100              MOVS     r1,#0
0001e6  a805              ADD      r0,sp,#0x14
0001e8  f7fffffe          BL       GUI_DrawFocusRect
                  |L1.492|
;;;193      }
;;;194    }
0001ec  b00f              ADD      sp,sp,#0x3c
0001ee  e8bd8ff0          POP      {r4-r11,pc}
;;;195    
                          ENDP

                  RADIO__SetValue PROC
;;;286    */
;;;287    void RADIO__SetValue(RADIO_Handle hObj, RADIO_Obj* pObj, int v) {
0001f2  b570              PUSH     {r4-r6,lr}
0001f4  4606              MOV      r6,r0
0001f6  460c              MOV      r4,r1
0001f8  4615              MOV      r5,r2
;;;288      if (v >= (int)pObj->NumItems) {
0001fa  f8b4004e          LDRH     r0,[r4,#0x4e]
0001fe  42a8              CMP      r0,r5
000200  dc03              BGT      |L1.522|
;;;289        v = pObj->NumItems - 1;
000202  f8b4004e          LDRH     r0,[r4,#0x4e]
000206  f1a00501          SUB      r5,r0,#1
                  |L1.522|
;;;290      }
;;;291      if (v != pObj->Sel) {
00020a  f9b40048          LDRSH    r0,[r4,#0x48]
00020e  42a8              CMP      r0,r5
000210  d009              BEQ      |L1.550|
;;;292        pObj->Sel = v;
000212  b228              SXTH     r0,r5
000214  f8a40048          STRH     r0,[r4,#0x48]
;;;293        WM_InvalidateWindow(hObj);
000218  4630              MOV      r0,r6
00021a  f7fffffe          BL       WM_InvalidateWindow
;;;294        WM_NotifyParent(hObj, WM_NOTIFICATION_VALUE_CHANGED);
00021e  2105              MOVS     r1,#5
000220  4630              MOV      r0,r6
000222  f7fffffe          BL       WM_NotifyParent
                  |L1.550|
;;;295      }
;;;296    }
000226  bd70              POP      {r4-r6,pc}
;;;297    
                          ENDP

                  RADIO_SetValue PROC
;;;437    */
;;;438    void RADIO_SetValue(RADIO_Handle hObj, int v) {
000228  b570              PUSH     {r4-r6,lr}
00022a  4605              MOV      r5,r0
00022c  460c              MOV      r4,r1
;;;439      if (hObj) {
00022e  b1d5              CBZ      r5,|L1.614|
;;;440        RADIO_Obj* pObj;
;;;441        WM_LOCK();
;;;442        pObj = RADIO_H2P(hObj);
000230  4628              MOV      r0,r5
000232  f7fffffe          BL       GUI_ALLOC_h2p
000236  4606              MOV      r6,r0
;;;443        if (pObj->GroupId && RADIO__pfHandleSetValue) {
000238  f8960050          LDRB     r0,[r6,#0x50]
00023c  b148              CBZ      r0,|L1.594|
00023e  48a8              LDR      r0,|L1.1248|
000240  6800              LDR      r0,[r0,#0]  ; RADIO__pfHandleSetValue
000242  b130              CBZ      r0,|L1.594|
;;;444          (*RADIO__pfHandleSetValue)(hObj, pObj, v);
000244  4622              MOV      r2,r4
000246  4631              MOV      r1,r6
000248  4628              MOV      r0,r5
00024a  4ba5              LDR      r3,|L1.1248|
00024c  681b              LDR      r3,[r3,#0]  ; RADIO__pfHandleSetValue
00024e  4798              BLX      r3
000250  e008              B        |L1.612|
                  |L1.594|
;;;445        } else {
;;;446          if (v < 0) {
000252  2c00              CMP      r4,#0
000254  da01              BGE      |L1.602|
;;;447            v = 0;
000256  f04f0400          MOV      r4,#0
                  |L1.602|
;;;448          }
;;;449          RADIO__SetValue(hObj, pObj, v);
00025a  4622              MOV      r2,r4
00025c  4631              MOV      r1,r6
00025e  4628              MOV      r0,r5
000260  f7fffffe          BL       RADIO__SetValue
                  |L1.612|
;;;450        }
;;;451        WM_UNLOCK();
;;;452      }
000264  bf00              NOP      
                  |L1.614|
;;;453    }
000266  bd70              POP      {r4-r6,pc}
;;;454    
                          ENDP

                  _OnTouch PROC
;;;199    */
;;;200    static void _OnTouch(RADIO_Handle hObj, RADIO_Obj* pObj, WM_MESSAGE*pMsg) {
000268  e92d5ff0          PUSH     {r4-r12,lr}
00026c  4682              MOV      r10,r0
00026e  460c              MOV      r4,r1
000270  4616              MOV      r6,r2
;;;201      int Notification;
;;;202      int Hit = 0;
000272  f04f0b00          MOV      r11,#0
;;;203      GUI_PID_STATE* pState = (GUI_PID_STATE*)pMsg->Data.p;
000276  f8d68008          LDR      r8,[r6,#8]
;;;204      if (pMsg->Data.p) {  /* Something happened in our area (pressed or released) */
00027a  68b0              LDR      r0,[r6,#8]
00027c  b318              CBZ      r0,|L1.710|
;;;205        if (pState->Pressed) {
00027e  f8980008          LDRB     r0,[r8,#8]
000282  b1d8              CBZ      r0,|L1.700|
;;;206          int y, Sel;
;;;207          y   = pState->y;
000284  f8d87004          LDR      r7,[r8,#4]
;;;208          Sel = y   / pObj->Spacing;
000288  f8340f4a          LDRH     r0,[r4,#0x4a]!
00028c  fb97f9f0          SDIV     r9,r7,r0
;;;209          y  -= Sel * pObj->Spacing;
000290  8820              LDRH     r0,[r4,#0]
000292  fb097710          MLS      r7,r9,r0,r7
;;;210          if (y <= pObj->Height) {
000296  8860              LDRH     r0,[r4,#2]
000298  f1a4044a          SUB      r4,r4,#0x4a
00029c  42b8              CMP      r0,r7
00029e  db03              BLT      |L1.680|
;;;211            RADIO_SetValue(hObj, Sel);
0002a0  4649              MOV      r1,r9
0002a2  4650              MOV      r0,r10
0002a4  f7fffffe          BL       RADIO_SetValue
                  |L1.680|
;;;212          }
;;;213          if (WM_IsFocussable(hObj)) {
0002a8  4650              MOV      r0,r10
0002aa  f7fffffe          BL       WM_IsFocussable
0002ae  b110              CBZ      r0,|L1.694|
;;;214            WM_SetFocus(hObj);
0002b0  4650              MOV      r0,r10
0002b2  f7fffffe          BL       WM_SetFocus
                  |L1.694|
;;;215          }
;;;216          Notification = WM_NOTIFICATION_CLICKED;
0002b6  f04f0501          MOV      r5,#1
;;;217        } else {
0002ba  e006              B        |L1.714|
                  |L1.700|
;;;218          Hit = 1;
0002bc  f04f0b01          MOV      r11,#1
;;;219          Notification = WM_NOTIFICATION_RELEASED;
0002c0  f04f0502          MOV      r5,#2
0002c4  e001              B        |L1.714|
                  |L1.710|
;;;220        }
;;;221      } else {
;;;222        Notification = WM_NOTIFICATION_MOVED_OUT;
0002c6  f04f0503          MOV      r5,#3
                  |L1.714|
;;;223      }
;;;224      WM_NotifyParent(hObj, Notification);
0002ca  4629              MOV      r1,r5
0002cc  4650              MOV      r0,r10
0002ce  f7fffffe          BL       WM_NotifyParent
;;;225      if (Hit == 1) {
0002d2  f1bb0f01          CMP      r11,#1
0002d6  d103              BNE      |L1.736|
;;;226        GUI_DEBUG_LOG("RADIO: Hit\n");
;;;227        GUI_StoreKey(pObj->Widget.Id);
0002d8  f9b40024          LDRSH    r0,[r4,#0x24]
0002dc  f7fffffe          BL       GUI_StoreKey
                  |L1.736|
;;;228      }
;;;229    }
0002e0  e8bd9ff0          POP      {r4-r12,pc}
;;;230    
                          ENDP

                  RADIO_AddValue PROC
;;;407    */
;;;408    void RADIO_AddValue(RADIO_Handle hObj, int Add) {
0002e4  b570              PUSH     {r4-r6,lr}
0002e6  4604              MOV      r4,r0
0002e8  460d              MOV      r5,r1
;;;409      if (hObj) {
0002ea  b15c              CBZ      r4,|L1.772|
;;;410        RADIO_Obj* pObj;
;;;411        WM_LOCK();
;;;412        pObj = RADIO_H2P(hObj);
0002ec  4620              MOV      r0,r4
0002ee  f7fffffe          BL       GUI_ALLOC_h2p
0002f2  4606              MOV      r6,r0
;;;413        RADIO_SetValue(hObj, pObj->Sel + Add);
0002f4  f9b60048          LDRSH    r0,[r6,#0x48]
0002f8  eb000105          ADD      r1,r0,r5
0002fc  4620              MOV      r0,r4
0002fe  f7fffffe          BL       RADIO_SetValue
;;;414        WM_UNLOCK();
;;;415      }
000302  bf00              NOP      
                  |L1.772|
;;;416    }
000304  bd70              POP      {r4-r6,pc}
;;;417    
                          ENDP

                  RADIO_Dec PROC
;;;421    */
;;;422    void RADIO_Dec(RADIO_Handle hObj) {
000306  b510              PUSH     {r4,lr}
000308  4604              MOV      r4,r0
;;;423      RADIO_AddValue(hObj, -1);
00030a  f04f31ff          MOV      r1,#0xffffffff
00030e  4620              MOV      r0,r4
000310  f7fffffe          BL       RADIO_AddValue
;;;424    }
000314  bd10              POP      {r4,pc}
;;;425    
                          ENDP

                  RADIO_Inc PROC
;;;429    */
;;;430    void RADIO_Inc(RADIO_Handle hObj) {
000316  b510              PUSH     {r4,lr}
000318  4604              MOV      r4,r0
;;;431      RADIO_AddValue(hObj,  1);
00031a  f04f0101          MOV      r1,#1
00031e  4620              MOV      r0,r4
000320  f7fffffe          BL       RADIO_AddValue
;;;432    }
000324  bd10              POP      {r4,pc}
;;;433    
                          ENDP

                  _OnKey PROC
;;;234    */
;;;235    static void  _OnKey(RADIO_Handle hObj, WM_MESSAGE* pMsg) {
000326  b570              PUSH     {r4-r6,lr}
000328  4606              MOV      r6,r0
00032a  460c              MOV      r4,r1
;;;236      WM_KEY_INFO* pKeyInfo;
;;;237      pKeyInfo = (WM_KEY_INFO*)(pMsg->Data.p);
00032c  68a5              LDR      r5,[r4,#8]
;;;238      if (pKeyInfo->PressedCnt > 0) {
00032e  6868              LDR      r0,[r5,#4]
000330  2800              CMP      r0,#0
000332  dd15              BLE      |L1.864|
;;;239        switch (pKeyInfo->Key) {
000334  6828              LDR      r0,[r5,#0]
000336  2810              CMP      r0,#0x10
000338  d00b              BEQ      |L1.850|
00033a  2811              CMP      r0,#0x11
00033c  d00a              BEQ      |L1.852|
00033e  2812              CMP      r0,#0x12
000340  d002              BEQ      |L1.840|
000342  2813              CMP      r0,#0x13
000344  d10a              BNE      |L1.860|
000346  e000              B        |L1.842|
                  |L1.840|
;;;240        case GUI_KEY_RIGHT:
;;;241        case GUI_KEY_DOWN:
000348  bf00              NOP      
                  |L1.842|
;;;242          RADIO_Inc(hObj);
00034a  4630              MOV      r0,r6
00034c  f7fffffe          BL       RADIO_Inc
;;;243          break;                    /* Send to parent by not doing anything */
000350  e005              B        |L1.862|
                  |L1.850|
;;;244        case GUI_KEY_LEFT:
;;;245        case GUI_KEY_UP:
000352  bf00              NOP      
                  |L1.852|
;;;246          RADIO_Dec(hObj);
000354  4630              MOV      r0,r6
000356  f7fffffe          BL       RADIO_Dec
;;;247          break;                    /* Send to parent by not doing anything */
00035a  e000              B        |L1.862|
                  |L1.860|
;;;248        default:
;;;249          return;
;;;250        }
;;;251      }
;;;252    }
00035c  bd70              POP      {r4-r6,pc}
                  |L1.862|
00035e  bf00              NOP                            ;243
                  |L1.864|
000360  bf00              NOP      
000362  e7fb              B        |L1.860|
;;;253    
                          ENDP

                  RADIO_Callback PROC
;;;307    */
;;;308    void RADIO_Callback (WM_MESSAGE* pMsg) {
000364  b570              PUSH     {r4-r6,lr}
000366  4604              MOV      r4,r0
;;;309      RADIO_Handle hObj;
;;;310      RADIO_Obj*   pObj;
;;;311      hObj = pMsg->hWin;
000368  f9b46004          LDRSH    r6,[r4,#4]
;;;312      pObj = (RADIO_Obj *)GUI_ALLOC_h2p(hObj); /* Don't use use WIDGET_H2P because WIDGET_INIT_ID() has not be called at this point */
00036c  4630              MOV      r0,r6
00036e  f7fffffe          BL       GUI_ALLOC_h2p
000372  4605              MOV      r5,r0
;;;313      /* Let widget handle the standard messages */
;;;314      if (WIDGET_HandleActive(hObj, pMsg) == 0) {
000374  4621              MOV      r1,r4
000376  4630              MOV      r0,r6
000378  f7fffffe          BL       WIDGET_HandleActive
00037c  b900              CBNZ     r0,|L1.896|
                  |L1.894|
;;;315        return;
;;;316      }
;;;317      switch (pMsg->MsgId) {
;;;318      case WM_PAINT:
;;;319        GUI_DEBUG_LOG("RADIO: _Callback(WM_PAINT)\n");
;;;320        _OnPaint(hObj, pObj);
;;;321        return;
;;;322      case WM_GET_RADIOGROUP:
;;;323        pMsg->Data.v = pObj->GroupId;
;;;324        return;
;;;325      case WM_TOUCH:
;;;326        _OnTouch(hObj, pObj, pMsg);
;;;327        break;
;;;328      case WM_KEY:
;;;329        _OnKey(hObj, pMsg);
;;;330        break;
;;;331      case WM_DELETE:
;;;332        GUI_ARRAY_Delete(&pObj->TextArray);
;;;333        break;
;;;334      }
;;;335      WM_DefaultProc(pMsg);
;;;336    }
00037e  bd70              POP      {r4-r6,pc}
                  |L1.896|
000380  6820              LDR      r0,[r4,#0]            ;317
000382  280e              CMP      r0,#0xe               ;317
000384  d019              BEQ      |L1.954|
000386  dc04              BGT      |L1.914|
000388  280b              CMP      r0,#0xb               ;317
00038a  d01b              BEQ      |L1.964|
00038c  280c              CMP      r0,#0xc               ;317
00038e  d11e              BNE      |L1.974|
000390  e00d              B        |L1.942|
                  |L1.914|
000392  280f              CMP      r0,#0xf               ;317
000394  d002              BEQ      |L1.924|
000396  282b              CMP      r0,#0x2b              ;317
000398  d119              BNE      |L1.974|
00039a  e004              B        |L1.934|
                  |L1.924|
00039c  4629              MOV      r1,r5                 ;320
00039e  4630              MOV      r0,r6                 ;320
0003a0  f7fffffe          BL       _OnPaint
0003a4  e7eb              B        |L1.894|
                  |L1.934|
0003a6  f8950050          LDRB     r0,[r5,#0x50]         ;323
0003aa  60a0              STR      r0,[r4,#8]            ;323
0003ac  e7e7              B        |L1.894|
                  |L1.942|
0003ae  4622              MOV      r2,r4                 ;326
0003b0  4629              MOV      r1,r5                 ;326
0003b2  4630              MOV      r0,r6                 ;326
0003b4  f7fffffe          BL       _OnTouch
0003b8  e009              B        |L1.974|
                  |L1.954|
0003ba  4621              MOV      r1,r4                 ;329
0003bc  4630              MOV      r0,r6                 ;329
0003be  f7fffffe          BL       _OnKey
0003c2  e004              B        |L1.974|
                  |L1.964|
0003c4  f1050044          ADD      r0,r5,#0x44           ;332
0003c8  f7fffffe          BL       GUI_ARRAY_Delete
0003cc  bf00              NOP                            ;333
                  |L1.974|
0003ce  bf00              NOP                            ;327
0003d0  4620              MOV      r0,r4                 ;335
0003d2  f7fffffe          BL       WM_DefaultProc
0003d6  bf00              NOP      
0003d8  e7d1              B        |L1.894|
;;;337    
                          ENDP

                  RADIO_CreateEx PROC
;;;351    */
;;;352    RADIO_Handle RADIO_CreateEx(int x0, int y0, int xSize, int ySize, WM_HWIN hParent,
0003da  e92d4fff          PUSH     {r0-r11,lr}
;;;353                                int WinFlags, int ExFlags, int Id, int NumItems, int Spacing)
;;;354    {
0003de  b085              SUB      sp,sp,#0x14
0003e0  4691              MOV      r9,r2
0003e2  f8ddb050          LDR      r11,[sp,#0x50]
0003e6  f8dda048          LDR      r10,[sp,#0x48]
0003ea  e9dd5616          LDRD     r5,r6,[sp,#0x58]
;;;355      RADIO_Handle hObj;
;;;356      int Height, i;
;;;357      WM_LOCK();
;;;358      /* Calculate helper variables */
;;;359      Height   = RADIO__DefaultProps.apBmRadio[0]->YSize + RADIO_BORDER * 2;
0003ee  483d              LDR      r0,|L1.1252|
0003f0  6900              LDR      r0,[r0,#0x10]  ; RADIO__DefaultProps
0003f2  8840              LDRH     r0,[r0,#2]
0003f4  f1000004          ADD      r0,r0,#4
0003f8  9004              STR      r0,[sp,#0x10]
;;;360      Spacing  = (Spacing  <= 0) ? RADIO_SPACING_DEFAULT : Spacing;
0003fa  2e00              CMP      r6,#0
0003fc  dc02              BGT      |L1.1028|
0003fe  f04f0014          MOV      r0,#0x14
000402  e000              B        |L1.1030|
                  |L1.1028|
000404  4630              MOV      r0,r6
                  |L1.1030|
000406  4606              MOV      r6,r0
;;;361      NumItems = (NumItems <= 0) ? 2                     : NumItems;
000408  2d00              CMP      r5,#0
00040a  dc02              BGT      |L1.1042|
00040c  f04f0002          MOV      r0,#2
000410  e000              B        |L1.1044|
                  |L1.1042|
000412  4628              MOV      r0,r5
                  |L1.1044|
000414  4605              MOV      r5,r0
;;;362      if (ySize == 0) {
000416  9808              LDR      r0,[sp,#0x20]
000418  b928              CBNZ     r0,|L1.1062|
;;;363        ySize  = Height + ((NumItems - 1) * Spacing);
00041a  f1a50001          SUB      r0,r5,#1
00041e  9904              LDR      r1,[sp,#0x10]
000420  fb001006          MLA      r0,r0,r6,r1
000424  9008              STR      r0,[sp,#0x20]
                  |L1.1062|
;;;364      }
;;;365      if (xSize == 0) {
000426  f1b90f00          CMP      r9,#0
00042a  d104              BNE      |L1.1078|
;;;366        xSize  = RADIO__DefaultProps.apBmRadio[0]->XSize + RADIO_BORDER * 2;
00042c  482d              LDR      r0,|L1.1252|
00042e  6900              LDR      r0,[r0,#0x10]  ; RADIO__DefaultProps
000430  8800              LDRH     r0,[r0,#0]
000432  f1000904          ADD      r9,r0,#4
                  |L1.1078|
;;;367      }
;;;368    #if WM_SUPPORT_TRANSPARENCY
;;;369      WinFlags |= WM_CF_HASTRANS;
000436  9813              LDR      r0,[sp,#0x4c]
000438  f0400001          ORR      r0,r0,#1
00043c  9013              STR      r0,[sp,#0x4c]
;;;370    #endif
;;;371      /* Create the window */
;;;372      hObj = WM_CreateWindowAsChild(x0, y0, xSize, ySize, hParent, WinFlags, RADIO_Callback, sizeof(RADIO_Obj) - sizeof(WM_Obj));
00043e  f04f0134          MOV      r1,#0x34
000442  f2af02df          ADR      r2,RADIO_Callback + 1
000446  9813              LDR      r0,[sp,#0x4c]
000448  b280              UXTH     r0,r0
00044a  e9cda000          STRD     r10,r0,[sp,#0]
00044e  e9cd2102          STRD     r2,r1,[sp,#8]
000452  464a              MOV      r2,r9
000454  9b08              LDR      r3,[sp,#0x20]
000456  e9dd0105          LDRD     r0,r1,[sp,#0x14]
00045a  f7fffffe          BL       WM_CreateWindowAsChild
00045e  4607              MOV      r7,r0
;;;373      if (hObj) {
000460  b357              CBZ      r7,|L1.1208|
;;;374        RADIO_Obj* pObj;
;;;375        pObj = (RADIO_Obj *)GUI_ALLOC_h2p(hObj); /* Don't use use WIDGET_H2P because WIDGET_INIT_ID() has not be called at this point */
000462  4638              MOV      r0,r7
000464  f7fffffe          BL       GUI_ALLOC_h2p
000468  4604              MOV      r4,r0
;;;376        /* Init sub-classes */
;;;377        GUI_ARRAY_CREATE(&pObj->TextArray);
;;;378        for (i = 0; i < NumItems; i++) {
00046a  f04f0800          MOV      r8,#0
00046e  e007              B        |L1.1152|
                  |L1.1136|
;;;379          GUI_ARRAY_AddItem(&pObj->TextArray, NULL, 0);
000470  2200              MOVS     r2,#0
000472  4611              MOV      r1,r2
000474  f1040044          ADD      r0,r4,#0x44
000478  f7fffffe          BL       GUI_ARRAY_AddItem
00047c  f1080801          ADD      r8,r8,#1              ;378
                  |L1.1152|
000480  45a8              CMP      r8,r5                 ;378
000482  dbf5              BLT      |L1.1136|
;;;380        }
;;;381        /* Init widget specific variables */
;;;382        ExFlags &= RADIO_TEXTPOS_LEFT;
000484  f40b7b80          AND      r11,r11,#0x100
;;;383        WIDGET__Init(&pObj->Widget, Id, WIDGET_STATE_FOCUSSABLE | ExFlags);
000488  f04b0210          ORR      r2,r11,#0x10
00048c  4620              MOV      r0,r4
00048e  9915              LDR      r1,[sp,#0x54]
000490  f7fffffe          BL       WIDGET__Init
;;;384        /* Init member variables */
;;;385        RADIO_INIT_ID(pObj);
;;;386        pObj->Props = RADIO__DefaultProps;
000494  221c              MOVS     r2,#0x1c
000496  4913              LDR      r1,|L1.1252|
000498  f1040028          ADD      r0,r4,#0x28
00049c  f7fffffe          BL       __aeabi_memcpy4
;;;387        pObj->Props.BkColor= WM_GetBkColor(hParent);
0004a0  4650              MOV      r0,r10
0004a2  f7fffffe          BL       WM_GetBkColor
0004a6  f8440f28          STR      r0,[r4,#0x28]!
;;;388        pObj->NumItems     = NumItems;
0004aa  84e5              STRH     r5,[r4,#0x26]
;;;389        pObj->Spacing      = Spacing;
0004ac  8466              STRH     r6,[r4,#0x22]
;;;390        pObj->Height       = Height;
0004ae  9804              LDR      r0,[sp,#0x10]
0004b0  84a0              STRH     r0,[r4,#0x24]
0004b2  f1a40428          SUB      r4,r4,#0x28
;;;391      } else {
0004b6  bf00              NOP      
                  |L1.1208|
;;;392        GUI_DEBUG_ERROROUT_IF(hObj==0, "RADIO_Create failed")
;;;393      }
;;;394      WM_UNLOCK();
;;;395      return hObj;
0004b8  4638              MOV      r0,r7
;;;396    }
0004ba  b009              ADD      sp,sp,#0x24
0004bc  e8bd8ff0          POP      {r4-r11,pc}
;;;397    
                          ENDP

                  RADIO_GetValue PROC
;;;464    */
;;;465    int RADIO_GetValue(RADIO_Handle hObj) {
0004c0  b570              PUSH     {r4-r6,lr}
0004c2  4604              MOV      r4,r0
;;;466      int r = 0;
0004c4  f04f0500          MOV      r5,#0
;;;467      if (hObj) {
0004c8  b134              CBZ      r4,|L1.1240|
;;;468        RADIO_Obj* pObj;
;;;469        WM_LOCK();
;;;470        pObj = RADIO_H2P(hObj);
0004ca  4620              MOV      r0,r4
0004cc  f7fffffe          BL       GUI_ALLOC_h2p
0004d0  4606              MOV      r6,r0
;;;471        r = pObj->Sel;
0004d2  f9b65048          LDRSH    r5,[r6,#0x48]
;;;472        WM_UNLOCK();
;;;473      }
0004d6  bf00              NOP      
                  |L1.1240|
;;;474      return r;
0004d8  4628              MOV      r0,r5
;;;475    }
0004da  bd70              POP      {r4-r6,pc}
;;;476    
                          ENDP

                  |L1.1244|
                          DCD      0x00c0c0c0
                  |L1.1248|
                          DCD      RADIO__pfHandleSetValue
                  |L1.1252|
                          DCD      RADIO__DefaultProps

                          AREA ||.data||, DATA, ALIGN=2

                  RADIO__DefaultProps
                          DCD      0x00c0c0c0
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      GUI_Font13_1
                          DCD      RADIO__abmRadio
                          DCD      RADIO__abmRadio+0x14
                          DCD      RADIO__bmCheck
                  RADIO__pfHandleSetValue
                          DCD      0x00000000
