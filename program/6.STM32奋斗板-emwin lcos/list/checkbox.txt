; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\checkbox.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\checkbox.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -I.\GUI\AntiAlias -I.\GUI\Config -I.\GUI\ConvertColor -I.\GUI\ConvertMono -I.\GUI\Core -I.\GUI\Font -I.\GUI\GUI_X -I.\GUI\JPEG -I.\GUI\LCDDriver -I.\GUI\MemDev -I.\GUI\MultiLayer -I.\GUI\Widget -I.\GUI\WM -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\INC\ST\STM32F10x -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\checkbox.crf GUI\Widget\CHECKBOX.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _Paint PROC
;;;107    */
;;;108    static void _Paint(CHECKBOX_Obj* pObj, CHECKBOX_Handle hObj) {
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  b087              SUB      sp,sp,#0x1c
000006  4604              MOV      r4,r0
000008  4689              MOV      r9,r1
;;;109      GUI_RECT RectBox = {0};
00000a  f04f0000          MOV      r0,#0
00000e  9005              STR      r0,[sp,#0x14]
000010  9006              STR      r0,[sp,#0x18]
;;;110      int ColorIndex, EffectSize, Index;
;;;111      EffectSize = pObj->Widget.pEffect->EffectSize;
000012  6a20              LDR      r0,[r4,#0x20]
000014  6945              LDR      r5,[r0,#0x14]
;;;112      ColorIndex = WM__IsEnabled(hObj);
000016  4648              MOV      r0,r9
000018  f7fffffe          BL       WM__IsEnabled
00001c  4682              MOV      r10,r0
;;;113      /* Clear inside ... Just in case      */
;;;114      /* Fill with parents background color */
;;;115    #if WM_SUPPORT_TRANSPARENCY
;;;116      if (!WM_GetHasTrans(hObj))
00001e  4648              MOV      r0,r9
000020  f7fffffe          BL       WM_GetHasTrans
000024  b980              CBNZ     r0,|L1.72|
;;;117    #endif
;;;118      {
;;;119        if (pObj->Props.BkColor == GUI_INVALID_COLOR) {
000026  f06f4170          MVN      r1,#0xf0000000
00002a  6b60              LDR      r0,[r4,#0x34]
00002c  4288              CMP      r0,r1
00002e  d106              BNE      |L1.62|
;;;120          LCD_SetBkColor(WIDGET__GetBkColor(hObj));
000030  4648              MOV      r0,r9
000032  f7fffffe          BL       WIDGET__GetBkColor
000036  4607              MOV      r7,r0
000038  f7fffffe          BL       LCD_SetBkColor
00003c  e002              B        |L1.68|
                  |L1.62|
;;;121        } else {
;;;122          LCD_SetBkColor(pObj->Props.BkColor);
00003e  6b60              LDR      r0,[r4,#0x34]
000040  f7fffffe          BL       LCD_SetBkColor
                  |L1.68|
;;;123        }
;;;124        GUI_Clear();
000044  f7fffffe          BL       GUI_Clear
                  |L1.72|
;;;125      }
;;;126      /* Get size from bitmap */
;;;127      RectBox.x1 = pObj->Props.apBm[CHECKBOX_BI_ACTIV]->XSize - 1 + 2 * EffectSize;
000048  6d20              LDR      r0,[r4,#0x50]
00004a  8800              LDRH     r0,[r0,#0]
00004c  f1a00001          SUB      r0,r0,#1
000050  f04f0102          MOV      r1,#2
000054  fb010005          MLA      r0,r1,r5,r0
000058  b200              SXTH     r0,r0
00005a  f8ad0018          STRH     r0,[sp,#0x18]
;;;128      RectBox.y1 = pObj->Props.apBm[CHECKBOX_BI_ACTIV]->YSize - 1 + 2 * EffectSize;
00005e  6d20              LDR      r0,[r4,#0x50]
000060  8840              LDRH     r0,[r0,#2]
000062  f1a00001          SUB      r0,r0,#1
000066  fb010005          MLA      r0,r1,r5,r0
00006a  b200              SXTH     r0,r0
00006c  f8ad001a          STRH     r0,[sp,#0x1a]
;;;129      WM_SetUserClipRect(&RectBox);
000070  a805              ADD      r0,sp,#0x14
000072  f7fffffe          BL       WM_SetUserClipRect
;;;130      /* Clear inside  ... Just in case */
;;;131      LCD_SetBkColor(pObj->Props.aBkColorBox[ColorIndex]);
000076  f104012c          ADD      r1,r4,#0x2c
00007a  f851002a          LDR      r0,[r1,r10,LSL #2]
00007e  f7fffffe          BL       LCD_SetBkColor
;;;132      GUI_Clear();
000082  f7fffffe          BL       GUI_Clear
;;;133      Index = pObj->CurrentState * 2 + ColorIndex;
000086  f894005d          LDRB     r0,[r4,#0x5d]
00008a  eb0a0640          ADD      r6,r10,r0,LSL #1
;;;134      if (pObj->Props.apBm[Index]) {
00008e  f1040044          ADD      r0,r4,#0x44
000092  f8500026          LDR      r0,[r0,r6,LSL #2]
000096  b138              CBZ      r0,|L1.168|
;;;135        GUI_DrawBitmap(pObj->Props.apBm[Index], EffectSize, EffectSize);
000098  f1040144          ADD      r1,r4,#0x44
00009c  f8510026          LDR      r0,[r1,r6,LSL #2]
0000a0  462a              MOV      r2,r5
0000a2  4629              MOV      r1,r5
0000a4  f7fffffe          BL       GUI_DrawBitmap
                  |L1.168|
;;;136      }
;;;137      /* Draw the effect arround the box */
;;;138      WIDGET__EFFECT_DrawDownRect(&pObj->Widget, &RectBox);
0000a8  a905              ADD      r1,sp,#0x14
0000aa  4620              MOV      r0,r4
0000ac  f7fffffe          BL       WIDGET__EFFECT_DrawDownRect
;;;139      WM_SetUserClipRect(NULL);
0000b0  2000              MOVS     r0,#0
0000b2  f7fffffe          BL       WM_SetUserClipRect
;;;140      /* Draw text if needed */
;;;141      if (pObj->hpText) {
0000b6  f8b4005e          LDRH     r0,[r4,#0x5e]
0000ba  2800              CMP      r0,#0
0000bc  d07e              BEQ      |L1.444|
;;;142        const char * s;
;;;143        GUI_RECT RectText;
;;;144        /* Draw the text */
;;;145        s = (const char *) GUI_ALLOC_h2p(pObj->hpText);
0000be  f9b4005e          LDRSH    r0,[r4,#0x5e]
0000c2  f7fffffe          BL       GUI_ALLOC_h2p
0000c6  4683              MOV      r11,r0
;;;146        WM_GetClientRect(&RectText);
0000c8  a803              ADD      r0,sp,#0xc
0000ca  f7fffffe          BL       WM_GetClientRect
;;;147        RectText.x0 += RectBox.x1 + 1 + pObj->Props.Spacing;
0000ce  f8bd0018          LDRH     r0,[sp,#0x18]
0000d2  f1000001          ADD      r0,r0,#1
0000d6  f04f0142          MOV      r1,#0x42
0000da  5d09              LDRB     r1,[r1,r4]
0000dc  4408              ADD      r0,r0,r1
0000de  f8bd100c          LDRH     r1,[sp,#0xc]
0000e2  4408              ADD      r0,r0,r1
0000e4  b200              SXTH     r0,r0
0000e6  f8ad000c          STRH     r0,[sp,#0xc]
;;;148        GUI_SetTextMode(GUI_TM_TRANS);
0000ea  f04f0002          MOV      r0,#2
0000ee  f7fffffe          BL       GUI_SetTextMode
;;;149        LCD_SetColor(pObj->Props.TextColor);
0000f2  6ba0              LDR      r0,[r4,#0x38]
0000f4  f7fffffe          BL       LCD_SetColor
;;;150        GUI_SetFont(pObj->Props.pFont);
0000f8  6aa0              LDR      r0,[r4,#0x28]
0000fa  f7fffffe          BL       GUI_SetFont
;;;151        GUI_DispStringInRect(s, &RectText, pObj->Props.Align);
0000fe  f9b42040          LDRSH    r2,[r4,#0x40]
000102  a903              ADD      r1,sp,#0xc
000104  4658              MOV      r0,r11
000106  f7fffffe          BL       GUI_DispStringInRect
;;;152        /* Draw focus rectangle */
;;;153        if (pObj->Widget.State & WIDGET_STATE_FOCUS) {
00010a  8ce0              LDRH     r0,[r4,#0x26]
00010c  f0100f01          TST      r0,#1
000110  d06e              BEQ      |L1.496|
;;;154          int xSizeText = GUI_GetStringDistX(s);
000112  4658              MOV      r0,r11
000114  f7fffffe          BL       GUI_GetStringDistX
000118  4607              MOV      r7,r0
;;;155          int ySizeText = GUI_GetFontSizeY();
00011a  f7fffffe          BL       GUI_GetFontSizeY
00011e  4680              MOV      r8,r0
;;;156          GUI_RECT RectFocus = RectText;
000120  e9dd0103          LDRD     r0,r1,[sp,#0xc]
000124  e9cd0101          STRD     r0,r1,[sp,#4]
;;;157          switch (pObj->Props.Align & ~(GUI_TA_HORIZONTAL)) {
000128  f9b40040          LDRSH    r0,[r4,#0x40]
00012c  f0200003          BIC      r0,r0,#3
000130  2804              CMP      r0,#4
000132  d00f              BEQ      |L1.340|
000134  280c              CMP      r0,#0xc
000136  d115              BNE      |L1.356|
;;;158          case GUI_TA_VCENTER:
;;;159            RectFocus.y0 = (RectText.y1 - ySizeText + 1) / 2;
000138  f9bd1012          LDRSH    r1,[sp,#0x12]
00013c  eba10108          SUB      r1,r1,r8
000140  f1010001          ADD      r0,r1,#1
000144  eb0071d0          ADD      r1,r0,r0,LSR #31
000148  ea4f0161          ASR      r1,r1,#1
00014c  b209              SXTH     r1,r1
00014e  f8ad1006          STRH     r1,[sp,#6]
;;;160            break;
000152  e007              B        |L1.356|
                  |L1.340|
;;;161          case GUI_TA_BOTTOM:
;;;162            RectFocus.y0 = RectText.y1 - ySizeText;
000154  f8bd0012          LDRH     r0,[sp,#0x12]
000158  eba00008          SUB      r0,r0,r8
00015c  b200              SXTH     r0,r0
00015e  f8ad0006          STRH     r0,[sp,#6]
;;;163            break;
000162  bf00              NOP      
                  |L1.356|
000164  bf00              NOP                            ;160
;;;164          }
;;;165          switch (pObj->Props.Align & ~(GUI_TA_VERTICAL)) {
000166  f9b40040          LDRSH    r0,[r4,#0x40]
00016a  f020000c          BIC      r0,r0,#0xc
00016e  2801              CMP      r0,#1
000170  d013              BEQ      |L1.410|
000172  2802              CMP      r0,#2
000174  d120              BNE      |L1.440|
;;;166          case GUI_TA_HCENTER:
;;;167            RectFocus.x0 += ((RectText.x1 - RectText.x0) - xSizeText) / 2;
000176  f9bd1010          LDRSH    r1,[sp,#0x10]
00017a  f9bd200c          LDRSH    r2,[sp,#0xc]
00017e  eba10102          SUB      r1,r1,r2
000182  eba10007          SUB      r0,r1,r7
000186  eb0071d0          ADD      r1,r0,r0,LSR #31
00018a  f8bd2004          LDRH     r2,[sp,#4]
00018e  eb020161          ADD      r1,r2,r1,ASR #1
000192  b209              SXTH     r1,r1
000194  f8ad1004          STRH     r1,[sp,#4]
;;;168            break;
000198  e00e              B        |L1.440|
                  |L1.410|
;;;169          case GUI_TA_RIGHT:
;;;170            RectFocus.x0 += (RectText.x1 - RectText.x0) - xSizeText;
00019a  f8bd0010          LDRH     r0,[sp,#0x10]
00019e  f8bd100c          LDRH     r1,[sp,#0xc]
0001a2  eba00001          SUB      r0,r0,r1
0001a6  eba00007          SUB      r0,r0,r7
0001aa  f8bd1004          LDRH     r1,[sp,#4]
0001ae  4408              ADD      r0,r0,r1
0001b0  b200              SXTH     r0,r0
0001b2  f8ad0004          STRH     r0,[sp,#4]
;;;171            break;
0001b6  bf00              NOP      
                  |L1.440|
0001b8  bf00              NOP                            ;168
;;;172          }
;;;173          RectFocus.x1 = RectFocus.x0 + xSizeText - 1;
0001ba  e000              B        |L1.446|
                  |L1.444|
0001bc  e019              B        |L1.498|
                  |L1.446|
0001be  f8bd0004          LDRH     r0,[sp,#4]
0001c2  4438              ADD      r0,r0,r7
0001c4  f1a00001          SUB      r0,r0,#1
0001c8  b200              SXTH     r0,r0
0001ca  f8ad0008          STRH     r0,[sp,#8]
;;;174          RectFocus.y1 = RectFocus.y0 + ySizeText - 1;
0001ce  f8bd0006          LDRH     r0,[sp,#6]
0001d2  4440              ADD      r0,r0,r8
0001d4  f1a00001          SUB      r0,r0,#1
0001d8  b200              SXTH     r0,r0
0001da  f8ad000a          STRH     r0,[sp,#0xa]
;;;175          LCD_SetColor(pObj->Props.FocusColor);
0001de  6be0              LDR      r0,[r4,#0x3c]
0001e0  f7fffffe          BL       LCD_SetColor
;;;176          GUI_DrawFocusRect(&RectFocus, -1);
0001e4  f04f31ff          MOV      r1,#0xffffffff
0001e8  a801              ADD      r0,sp,#4
0001ea  f7fffffe          BL       GUI_DrawFocusRect
;;;177        }
0001ee  bf00              NOP      
                  |L1.496|
;;;178      }
0001f0  bf00              NOP      
                  |L1.498|
;;;179    }
0001f2  b007              ADD      sp,sp,#0x1c
0001f4  e8bd8ff0          POP      {r4-r11,pc}
;;;180    
                          ENDP

                  _OnTouch PROC
;;;184    */
;;;185    static void _OnTouch(CHECKBOX_Handle hObj, CHECKBOX_Obj* pObj, WM_MESSAGE*pMsg) {
0001f8  e92d47f0          PUSH     {r4-r10,lr}
0001fc  4606              MOV      r6,r0
0001fe  460c              MOV      r4,r1
000200  4615              MOV      r5,r2
;;;186      int Notification = 0;
000202  f04f0700          MOV      r7,#0
;;;187      int Hit = 0;
000206  46b8              MOV      r8,r7
;;;188      const GUI_PID_STATE* pState = (const GUI_PID_STATE*)pMsg->Data.p;
000208  f8d59008          LDR      r9,[r5,#8]
;;;189      if (pMsg->Data.p) {  /* Something happened in our area (pressed or released) */
00020c  68a8              LDR      r0,[r5,#8]
00020e  b1f8              CBZ      r0,|L1.592|
;;;190        if (!WM_HasCaptured(hObj)) {
000210  4630              MOV      r0,r6
000212  f7fffffe          BL       WM_HasCaptured
000216  b9e8              CBNZ     r0,|L1.596|
;;;191          if (pState->Pressed) {
000218  f8990008          LDRB     r0,[r9,#8]
00021c  b198              CBZ      r0,|L1.582|
;;;192            WM_SetCapture(hObj, 1);
00021e  2101              MOVS     r1,#1
000220  4630              MOV      r0,r6
000222  f7fffffe          BL       WM_SetCapture
;;;193            CHECKBOX_SetState(hObj, (pObj->CurrentState + 1) % pObj->NumStates);
000226  f894005d          LDRB     r0,[r4,#0x5d]
00022a  1c40              ADDS     r0,r0,#1
00022c  f894105c          LDRB     r1,[r4,#0x5c]
000230  fb90f2f1          SDIV     r2,r0,r1
000234  fb010a12          MLS      r10,r1,r2,r0
000238  4651              MOV      r1,r10
00023a  4630              MOV      r0,r6
00023c  f7fffffe          BL       CHECKBOX_SetState
;;;194            Notification = WM_NOTIFICATION_CLICKED;
000240  f04f0701          MOV      r7,#1
000244  e006              B        |L1.596|
                  |L1.582|
;;;195          } else {
;;;196            Hit =1;
000246  f04f0801          MOV      r8,#1
;;;197            Notification = WM_NOTIFICATION_RELEASED;
00024a  f04f0702          MOV      r7,#2
00024e  e001              B        |L1.596|
                  |L1.592|
;;;198          }
;;;199        }
;;;200      } else {
;;;201        Notification = WM_NOTIFICATION_MOVED_OUT;
000250  f04f0703          MOV      r7,#3
                  |L1.596|
;;;202      }
;;;203      WM_NotifyParent(hObj, Notification);
000254  4639              MOV      r1,r7
000256  4630              MOV      r0,r6
000258  f7fffffe          BL       WM_NotifyParent
;;;204      if (Hit == 1) {
00025c  f1b80f01          CMP      r8,#1
000260  d103              BNE      |L1.618|
;;;205        GUI_DEBUG_LOG("CHECKBOX: Hit\n");
;;;206        GUI_StoreKey(pObj->Widget.Id);
000262  f9b40024          LDRSH    r0,[r4,#0x24]
000266  f7fffffe          BL       GUI_StoreKey
                  |L1.618|
;;;207      }
;;;208    }
00026a  e8bd87f0          POP      {r4-r10,pc}
;;;209    
                          ENDP

                  _OnKey PROC
;;;213    */
;;;214    static void  _OnKey(CHECKBOX_Handle hObj, CHECKBOX_Obj * pObj, WM_MESSAGE * pMsg) {
00026e  e92d41f0          PUSH     {r4-r8,lr}
000272  4607              MOV      r7,r0
000274  460c              MOV      r4,r1
000276  4616              MOV      r6,r2
;;;215      WM_KEY_INFO * pKeyInfo;
;;;216      if (WM__IsEnabled(hObj)) {
000278  4638              MOV      r0,r7
00027a  f7fffffe          BL       WM__IsEnabled
00027e  b1a8              CBZ      r0,|L1.684|
;;;217        pKeyInfo = (WM_KEY_INFO *)(pMsg->Data.p);
000280  68b5              LDR      r5,[r6,#8]
;;;218        if (pKeyInfo->PressedCnt > 0) {
000282  6868              LDR      r0,[r5,#4]
000284  2800              CMP      r0,#0
000286  dd11              BLE      |L1.684|
;;;219          switch (pKeyInfo->Key) {
000288  6828              LDR      r0,[r5,#0]
00028a  2820              CMP      r0,#0x20
00028c  d10d              BNE      |L1.682|
;;;220          case GUI_KEY_SPACE:
;;;221            CHECKBOX_SetState(hObj, (pObj->CurrentState + 1) % pObj->NumStates);
00028e  f894005d          LDRB     r0,[r4,#0x5d]
000292  1c40              ADDS     r0,r0,#1
000294  f894105c          LDRB     r1,[r4,#0x5c]
000298  fb90f2f1          SDIV     r2,r0,r1
00029c  fb010812          MLS      r8,r1,r2,r0
0002a0  4641              MOV      r1,r8
0002a2  4638              MOV      r0,r7
0002a4  f7fffffe          BL       CHECKBOX_SetState
;;;222            break;                    /* Send to parent by not doing anything */
0002a8  bf00              NOP      
                  |L1.682|
0002aa  bf00              NOP      
                  |L1.684|
;;;223          }
;;;224        }
;;;225      }
;;;226    }
0002ac  e8bd81f0          POP      {r4-r8,pc}
;;;227    
                          ENDP

                  _Delete PROC
;;;231    */
;;;232    static void _Delete(CHECKBOX_Obj * pObj) {
0002b0  b510              PUSH     {r4,lr}
0002b2  4604              MOV      r4,r0
;;;233      /* Delete attached objects (if any) */
;;;234      GUI_DEBUG_LOG("CHECKBOX: Delete() Deleting attached items");
;;;235      GUI_ALLOC_FreePtr(&pObj->hpText);
0002b4  f104005e          ADD      r0,r4,#0x5e
0002b8  f7fffffe          BL       GUI_ALLOC_FreePtr
;;;236    }
0002bc  bd10              POP      {r4,pc}
;;;237    
                          ENDP

                  CHECKBOX_Callback PROC
;;;270    */
;;;271    void CHECKBOX_Callback (WM_MESSAGE *pMsg) {
0002be  b570              PUSH     {r4-r6,lr}
0002c0  4604              MOV      r4,r0
;;;272      CHECKBOX_Handle hObj;
;;;273      CHECKBOX_Obj* pObj;
;;;274      hObj = pMsg->hWin;
0002c2  f9b45004          LDRSH    r5,[r4,#4]
;;;275      pObj = (CHECKBOX_Obj *)GUI_ALLOC_h2p(hObj); /* Don't use use WIDGET_H2P because WIDGET_INIT_ID() has not be called at this point */
0002c6  4628              MOV      r0,r5
0002c8  f7fffffe          BL       GUI_ALLOC_h2p
0002cc  4606              MOV      r6,r0
;;;276      /* Let widget handle the standard messages */
;;;277      if (WIDGET_HandleActive(hObj, pMsg) == 0) {
0002ce  4621              MOV      r1,r4
0002d0  4628              MOV      r0,r5
0002d2  f7fffffe          BL       WIDGET_HandleActive
0002d6  b900              CBNZ     r0,|L1.730|
                  |L1.728|
;;;278        return;
;;;279      }
;;;280      switch (pMsg->MsgId) {
;;;281      case WM_KEY:
;;;282        _OnKey(hObj, pObj, pMsg);
;;;283        break;
;;;284      case WM_PAINT:
;;;285        GUI_DEBUG_LOG("CHECKBOX: _Callback(WM_PAINT)\n");
;;;286        _Paint(pObj, hObj);
;;;287        return;
;;;288      case WM_TOUCH:
;;;289        _OnTouch(hObj, pObj, pMsg);
;;;290        break;
;;;291      case WM_DELETE:
;;;292        GUI_DEBUG_LOG("CHECKBOX: _Callback(WM_DELETE)\n");
;;;293        _Delete(pObj);
;;;294        break;       /* No return here ... WM_DefaultProc needs to be called */
;;;295      }
;;;296      WM_DefaultProc(pMsg);
;;;297    }
0002d8  bd70              POP      {r4-r6,pc}
                  |L1.730|
0002da  6820              LDR      r0,[r4,#0]            ;280
0002dc  280b              CMP      r0,#0xb               ;280
0002de  d017              BEQ      |L1.784|
0002e0  280c              CMP      r0,#0xc               ;280
0002e2  d00f              BEQ      |L1.772|
0002e4  280e              CMP      r0,#0xe               ;280
0002e6  d002              BEQ      |L1.750|
0002e8  280f              CMP      r0,#0xf               ;280
0002ea  d115              BNE      |L1.792|
0002ec  e005              B        |L1.762|
                  |L1.750|
0002ee  4622              MOV      r2,r4                 ;282
0002f0  4631              MOV      r1,r6                 ;282
0002f2  4628              MOV      r0,r5                 ;282
0002f4  f7fffffe          BL       _OnKey
0002f8  e00e              B        |L1.792|
                  |L1.762|
0002fa  4629              MOV      r1,r5                 ;286
0002fc  4630              MOV      r0,r6                 ;286
0002fe  f7fffffe          BL       _Paint
000302  e7e9              B        |L1.728|
                  |L1.772|
000304  4622              MOV      r2,r4                 ;289
000306  4631              MOV      r1,r6                 ;289
000308  4628              MOV      r0,r5                 ;289
00030a  f7fffffe          BL       _OnTouch
00030e  e003              B        |L1.792|
                  |L1.784|
000310  4630              MOV      r0,r6                 ;293
000312  f7fffffe          BL       _Delete
000316  bf00              NOP                            ;294
                  |L1.792|
000318  bf00              NOP                            ;283
00031a  4620              MOV      r0,r4                 ;296
00031c  f7fffffe          BL       WM_DefaultProc
000320  bf00              NOP      
000322  e7d9              B        |L1.728|
;;;298    
                          ENDP

                  CHECKBOX_CreateEx PROC
;;;312    */
;;;313    CHECKBOX_Handle CHECKBOX_CreateEx(int x0, int y0, int xsize, int ysize, WM_HWIN hParent,
000324  e92d5fff          PUSH     {r0-r12,lr}
;;;314                                        int WinFlags, int ExFlags, int Id)
;;;315    {
000328  4681              MOV      r9,r0
00032a  468a              MOV      r10,r1
00032c  4614              MOV      r4,r2
00032e  461d              MOV      r5,r3
000330  e9ddb80e          LDRD     r11,r8,[sp,#0x38]
;;;316      CHECKBOX_Handle hObj;
;;;317      GUI_USE_PARA(ExFlags);
000334  9810              LDR      r0,[sp,#0x40]
000336  9010              STR      r0,[sp,#0x40]
;;;318      WM_LOCK();
;;;319      /* Calculate size if needed */
;;;320      if ((xsize == 0) || (ysize == 0)) {
000338  b104              CBZ      r4,|L1.828|
00033a  b99d              CBNZ     r5,|L1.868|
                  |L1.828|
;;;321        int EffectSize;
;;;322        EffectSize = WIDGET_GetDefaultEffect()->EffectSize;
00033c  f7fffffe          BL       WIDGET_GetDefaultEffect
000340  6947              LDR      r7,[r0,#0x14]
;;;323        if (xsize == 0) {
000342  b934              CBNZ     r4,|L1.850|
;;;324          xsize = CHECKBOX__DefaultProps.apBm[CHECKBOX_BI_ACTIV]->XSize + 2 * EffectSize;
000344  4820              LDR      r0,|L1.968|
000346  6a80              LDR      r0,[r0,#0x28]
000348  8800              LDRH     r0,[r0,#0]
00034a  f04f0102          MOV      r1,#2
00034e  fb010407          MLA      r4,r1,r7,r0
                  |L1.850|
;;;325        }
;;;326        if (ysize == 0) {
000352  b935              CBNZ     r5,|L1.866|
;;;327          ysize = CHECKBOX__DefaultProps.apBm[CHECKBOX_BI_ACTIV]->YSize + 2 * EffectSize;
000354  481c              LDR      r0,|L1.968|
000356  6a80              LDR      r0,[r0,#0x28]
000358  8840              LDRH     r0,[r0,#2]
00035a  f04f0102          MOV      r1,#2
00035e  fb010507          MLA      r5,r1,r7,r0
                  |L1.866|
;;;328        }
;;;329      }
000362  bf00              NOP      
                  |L1.868|
;;;330    #if WM_SUPPORT_TRANSPARENCY
;;;331      if (CHECKBOX__DefaultProps.BkColor == GUI_INVALID_COLOR) {
000364  4818              LDR      r0,|L1.968|
000366  68c0              LDR      r0,[r0,#0xc]  ; CHECKBOX__DefaultProps
000368  f06f4170          MVN      r1,#0xf0000000
00036c  4288              CMP      r0,r1
00036e  d101              BNE      |L1.884|
;;;332        WinFlags |= WM_CF_HASTRANS;
000370  f0480801          ORR      r8,r8,#1
                  |L1.884|
;;;333      }
;;;334    #endif
;;;335      /* Create the window */
;;;336      hObj = WM_CreateWindowAsChild(x0, y0, xsize, ysize, hParent, WinFlags, CHECKBOX_Callback,
000374  2140              MOVS     r1,#0x40
000376  f2af02b9          ADR      r2,CHECKBOX_Callback + 1
00037a  fa1ff088          UXTH     r0,r8
00037e  462b              MOV      r3,r5
000380  e9cdb000          STRD     r11,r0,[sp,#0]
000384  e9cd2102          STRD     r2,r1,[sp,#8]
000388  4622              MOV      r2,r4
00038a  4651              MOV      r1,r10
00038c  4648              MOV      r0,r9
00038e  f7fffffe          BL       WM_CreateWindowAsChild
000392  4606              MOV      r6,r0
;;;337                                    sizeof(CHECKBOX_Obj) - sizeof(WM_Obj));
;;;338      if (hObj) {
000394  b1a6              CBZ      r6,|L1.960|
;;;339        CHECKBOX_Obj* pObj = (CHECKBOX_Obj *)GUI_ALLOC_h2p(hObj); /* Don't use use WIDGET_H2P because WIDGET_INIT_ID() has not be called at this point */
000396  4630              MOV      r0,r6
000398  f7fffffe          BL       GUI_ALLOC_h2p
00039c  4607              MOV      r7,r0
;;;340        /* init widget specific variables */
;;;341        WIDGET__Init(&pObj->Widget, Id, WIDGET_STATE_FOCUSSABLE);
00039e  f04f0210          MOV      r2,#0x10
0003a2  4638              MOV      r0,r7
0003a4  9911              LDR      r1,[sp,#0x44]
0003a6  f7fffffe          BL       WIDGET__Init
;;;342        CHECKBOX_INIT_ID(pObj);
;;;343        /* init member variables */
;;;344        pObj->Props = CHECKBOX__DefaultProps;
0003aa  2234              MOVS     r2,#0x34
0003ac  4906              LDR      r1,|L1.968|
0003ae  f1070028          ADD      r0,r7,#0x28
0003b2  f7fffffe          BL       __aeabi_memcpy4
;;;345        pObj->NumStates   = 2; /* Default behaviour is 2 states: checked and unchecked */
0003b6  f04f0002          MOV      r0,#2
0003ba  f887005c          STRB     r0,[r7,#0x5c]
;;;346      } else {
0003be  bf00              NOP      
                  |L1.960|
;;;347        GUI_DEBUG_ERROROUT_IF(hObj==0, "CHECKBOX_Create failed")
;;;348      }
;;;349      WM_UNLOCK();
;;;350      return hObj;
0003c0  4630              MOV      r0,r6
;;;351    }
0003c2  b004              ADD      sp,sp,#0x10
0003c4  e8bd9ff0          POP      {r4-r12,pc}
;;;352    
                          ENDP

                  |L1.968|
                          DCD      CHECKBOX__DefaultProps

                          AREA ||.data||, DATA, ALIGN=2

                  CHECKBOX__DefaultProps
                          DCD      GUI_Font13_1
                          DCD      0x00808080
                          DCD      0x00ffffff
                          DCD      0x00c0c0c0
                          DCD      0x00000000
                          DCD      0x00000000
000018  000c              DCW      0x000c
00001a  0400              DCB      0x04,0x00
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      CHECKBOX__abmCheck
                          DCD      CHECKBOX__abmCheck+0x14
                          %        8
