; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\lcd_dis24.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\lcd_dis24.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\FWlib\inc -I.\user -I.\CM3 -I.\MALLOC -I.\TFT -I.\EMWIN\EMWIN_INC -I.\EMWIN\DEMO -I"E:\material\GUI\STM32奋斗板-emwin lcos\RTE" -Id:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.1.0\Device\Include -Id:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=515 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\lcd_dis24.crf TFT\lcd_dis24.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  Delay PROC
;;;49     ****************************************************************************/ 
;;;50     void Delay(__IO uint32_t nCount)
000000  b501              PUSH     {r0,lr}
;;;51     {
;;;52       for(; nCount != 0; nCount--);
000002  e002              B        |L1.10|
                  |L1.4|
000004  9800              LDR      r0,[sp,#0]
000006  1e40              SUBS     r0,r0,#1
000008  9000              STR      r0,[sp,#0]
                  |L1.10|
00000a  9800              LDR      r0,[sp,#0]
00000c  2800              CMP      r0,#0
00000e  d1f9              BNE      |L1.4|
;;;53     }
000010  bd08              POP      {r3,pc}
;;;54     /****************************************************************************
                          ENDP

                  LCD_WR_REG PROC
;;;61     ****************************************************************************/ 
;;;62     void LCD_WR_REG(u16 index)
000012  f04f41c0          MOV      r1,#0x60000000
;;;63     {
;;;64     	*(__IO uint16_t *) (Bank1_LCD_C)= index;
000016  8008              STRH     r0,[r1,#0]
;;;65     
;;;66     }
000018  4770              BX       lr
;;;67     
                          ENDP

                  LCD_WR_CMD PROC
;;;75     ****************************************************************************/ 
;;;76     void LCD_WR_CMD(u16 index,u16 val)
00001a  f04f42c0          MOV      r2,#0x60000000
;;;77     {	
;;;78     	*(__IO uint16_t *) (Bank1_LCD_C)= index;	
00001e  8010              STRH     r0,[r2,#0]
;;;79     	*(__IO uint16_t *) (Bank1_LCD_D)= val;
000020  4afe              LDR      r2,|L1.1052|
000022  8011              STRH     r1,[r2,#0]
;;;80     }
000024  4770              BX       lr
;;;81     
                          ENDP

                  LCD_RD_Data PROC
;;;89     ****************************************************************************/ 
;;;90     u16 LCD_RD_Data(void){
000026  2000              MOVS     r0,#0
;;;91     	u16 a=0;
;;;92     	a=*(__IO uint16_t *) (Bank1_LCD_D);   //读出的实际16位像素数据	  
000028  49fc              LDR      r1,|L1.1052|
00002a  8808              LDRH     r0,[r1,#0]
;;;93     	return(a);	
;;;94     }
00002c  4770              BX       lr
;;;95     
                          ENDP

                  LCD_WR_Data PROC
;;;103    ****************************************************************************/ 
;;;104    void    LCD_WR_Data(u16 val)
00002e  49fb              LDR      r1,|L1.1052|
;;;105    {   
;;;106    	*(__IO uint16_t *) (Bank1_LCD_D)= val; 	
000030  8008              STRH     r0,[r1,#0]
;;;107    }
000032  4770              BX       lr
;;;108    
                          ENDP

                  LCD_WR_Data_8 PROC
;;;109     void LCD_WR_Data_8(u16 val)
000034  49f9              LDR      r1,|L1.1052|
;;;110    {
;;;111    	*(__IO uint16_t *) (Bank1_LCD_D)= val;
000036  8008              STRH     r0,[r1,#0]
;;;112    }
000038  4770              BX       lr
;;;113    
                          ENDP

                  SPI_Configuration PROC
;;;123    SPI_InitTypeDef   SPI_InitStructure;
;;;124    void SPI_Configuration(void)
00003a  b510              PUSH     {r4,lr}
;;;125    {
;;;126    	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
00003c  2000              MOVS     r0,#0
00003e  49f8              LDR      r1,|L1.1056|
000040  8008              STRH     r0,[r1,#0]
;;;127    	SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
000042  8088              STRH     r0,[r1,#4]
;;;128    	SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
000044  80c8              STRH     r0,[r1,#6]
;;;129    	SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
000046  8108              STRH     r0,[r1,#8]
;;;130    	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
000048  f44f7000          MOV      r0,#0x200
00004c  8148              STRH     r0,[r1,#0xa]
;;;131    	SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_128;
00004e  2030              MOVS     r0,#0x30
000050  8188              STRH     r0,[r1,#0xc]
;;;132    	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
000052  2000              MOVS     r0,#0
000054  81c8              STRH     r0,[r1,#0xe]
;;;133    	SPI_InitStructure.SPI_CRCPolynomial = 7;
000056  2007              MOVS     r0,#7
000058  8208              STRH     r0,[r1,#0x10]
;;;134    	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
00005a  f44f7082          MOV      r0,#0x104
00005e  8048              STRH     r0,[r1,#2]
;;;135    	
;;;136    	SPI_Cmd(SPI1, ENABLE);
000060  2101              MOVS     r1,#1
000062  48f0              LDR      r0,|L1.1060|
000064  f7fffffe          BL       SPI_Cmd
;;;137    	SPI_Init(SPI1, &SPI_InitStructure);
000068  49ed              LDR      r1,|L1.1056|
00006a  48ee              LDR      r0,|L1.1060|
00006c  f7fffffe          BL       SPI_Init
;;;138    }
000070  bd10              POP      {r4,pc}
;;;139    
                          ENDP

                  lcos_reg_init PROC
;;;163    u8 send_count=0;
;;;164    void lcos_reg_init(void)
000072  b510              PUSH     {r4,lr}
;;;165    {
;;;166    	SPI_Configuration();
000074  f7fffffe          BL       SPI_Configuration
;;;167    	for(send_count=0; send_count<9; send_count++)
000078  2000              MOVS     r0,#0
00007a  49eb              LDR      r1,|L1.1064|
00007c  7008              STRB     r0,[r1,#0]
00007e  e03d              B        |L1.252|
                  |L1.128|
;;;168    	{
;;;169    		Tx_Idx = 0;
000080  2000              MOVS     r0,#0
000082  49ea              LDR      r1,|L1.1068|
000084  7008              STRB     r0,[r1,#0]
;;;170    		
;;;171    		GPIO_ResetBits(GPIOB, GPIO_Pin_7);
000086  2180              MOVS     r1,#0x80
000088  48e9              LDR      r0,|L1.1072|
00008a  f7fffffe          BL       GPIO_ResetBits
;;;172    		while(Tx_Idx < 2)
00008e  e028              B        |L1.226|
                  |L1.144|
;;;173    		{ 
;;;174    			while(SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET);
000090  bf00              NOP      
                  |L1.146|
000092  2102              MOVS     r1,#2
000094  48e3              LDR      r0,|L1.1060|
000096  f7fffffe          BL       SPI_I2S_GetFlagStatus
00009a  2800              CMP      r0,#0
00009c  d0f9              BEQ      |L1.146|
;;;175    			SPI_I2S_SendData(SPI1, SPI1_Buffer_Tx[send_count][Tx_Idx]);
00009e  48e5              LDR      r0,|L1.1076|
0000a0  4ae1              LDR      r2,|L1.1064|
0000a2  7812              LDRB     r2,[r2,#0]  ; send_count
0000a4  eb000042          ADD      r0,r0,r2,LSL #1
0000a8  4ae0              LDR      r2,|L1.1068|
0000aa  7812              LDRB     r2,[r2,#0]  ; Tx_Idx
0000ac  5c81              LDRB     r1,[r0,r2]
0000ae  48dd              LDR      r0,|L1.1060|
0000b0  f7fffffe          BL       SPI_I2S_SendData
;;;176    			
;;;177    			while(SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE) == RESET);
0000b4  bf00              NOP      
                  |L1.182|
0000b6  2101              MOVS     r1,#1
0000b8  48da              LDR      r0,|L1.1060|
0000ba  f7fffffe          BL       SPI_I2S_GetFlagStatus
0000be  2800              CMP      r0,#0
0000c0  d0f9              BEQ      |L1.182|
;;;178    			SPI1_Buffer_Rx[send_count][Tx_Idx++] = SPI_I2S_ReceiveData(SPI1);		 
0000c2  48d8              LDR      r0,|L1.1060|
0000c4  f7fffffe          BL       SPI_I2S_ReceiveData
0000c8  b2c1              UXTB     r1,r0
0000ca  48db              LDR      r0,|L1.1080|
0000cc  4ad6              LDR      r2,|L1.1064|
0000ce  7812              LDRB     r2,[r2,#0]  ; send_count
0000d0  eb000242          ADD      r2,r0,r2,LSL #1
0000d4  48d5              LDR      r0,|L1.1068|
0000d6  7803              LDRB     r3,[r0,#0]  ; Tx_Idx
0000d8  7800              LDRB     r0,[r0,#0]  ; Tx_Idx
0000da  1c40              ADDS     r0,r0,#1
0000dc  4cd3              LDR      r4,|L1.1068|
0000de  7020              STRB     r0,[r4,#0]
0000e0  54d1              STRB     r1,[r2,r3]
                  |L1.226|
0000e2  48d2              LDR      r0,|L1.1068|
0000e4  7800              LDRB     r0,[r0,#0]            ;172  ; Tx_Idx
0000e6  2802              CMP      r0,#2                 ;172
0000e8  dbd2              BLT      |L1.144|
;;;179    		}
;;;180    		GPIO_SetBits(GPIOB, GPIO_Pin_7);
0000ea  2180              MOVS     r1,#0x80
0000ec  48d0              LDR      r0,|L1.1072|
0000ee  f7fffffe          BL       GPIO_SetBits
0000f2  48cd              LDR      r0,|L1.1064|
0000f4  7800              LDRB     r0,[r0,#0]            ;167  ; send_count
0000f6  1c40              ADDS     r0,r0,#1              ;167
0000f8  49cb              LDR      r1,|L1.1064|
0000fa  7008              STRB     r0,[r1,#0]            ;167
                  |L1.252|
0000fc  48ca              LDR      r0,|L1.1064|
0000fe  7800              LDRB     r0,[r0,#0]            ;167  ; send_count
000100  2809              CMP      r0,#9                 ;167
000102  dbbd              BLT      |L1.128|
;;;181    	}
;;;182    }
000104  bd10              POP      {r4,pc}
;;;183    
                          ENDP

                  LCD_init PROC
;;;187    
;;;188    void LCD_init(void)
000106  b510              PUSH     {r4,lr}
;;;189    {
;;;190    	
;;;191    	GPIO_SetBits(GPIOB, GPIO_Pin_6);
000108  2140              MOVS     r1,#0x40
00010a  48c9              LDR      r0,|L1.1072|
00010c  f7fffffe          BL       GPIO_SetBits
;;;192    	GPIO_SetBits(GPIOB, GPIO_Pin_7);
000110  2180              MOVS     r1,#0x80
000112  48c7              LDR      r0,|L1.1072|
000114  f7fffffe          BL       GPIO_SetBits
;;;193    	GPIO_ResetBits(GPIOE, GPIO_Pin_1);
000118  2102              MOVS     r1,#2
00011a  48c8              LDR      r0,|L1.1084|
00011c  f7fffffe          BL       GPIO_ResetBits
;;;194        Delay(0xAFFFF);					   
000120  48c7              LDR      r0,|L1.1088|
000122  f7fffffe          BL       Delay
;;;195        GPIO_SetBits(GPIOE, GPIO_Pin_1 );
000126  2102              MOVS     r1,#2
000128  48c4              LDR      r0,|L1.1084|
00012a  f7fffffe          BL       GPIO_SetBits
;;;196    	Delay(0xAFFFF);
00012e  48c4              LDR      r0,|L1.1088|
000130  f7fffffe          BL       Delay
;;;197    
;;;198    	LCD_WR_REG(0x00E2);	        //PLL 倍频到120M   PLL=10*36/3=120M
000134  20e2              MOVS     r0,#0xe2
000136  f7fffffe          BL       LCD_WR_REG
;;;199    	LCD_WR_Data(0x001D);	    //N=0x36 for 6.5M, 0x23 for 10M crystal
00013a  201d              MOVS     r0,#0x1d
00013c  f7fffffe          BL       LCD_WR_Data
;;;200    	LCD_WR_Data(0x0002);
000140  2002              MOVS     r0,#2
000142  f7fffffe          BL       LCD_WR_Data
;;;201    	LCD_WR_Data(0x0004);
000146  2004              MOVS     r0,#4
000148  f7fffffe          BL       LCD_WR_Data
;;;202    	
;;;203    	LCD_WR_REG(0x00E0);         
00014c  20e0              MOVS     r0,#0xe0
00014e  f7fffffe          BL       LCD_WR_REG
;;;204    	LCD_WR_Data(0x0001);
000152  2001              MOVS     r0,#1
000154  f7fffffe          BL       LCD_WR_Data
;;;205    	Delay(0xAFFF);
000158  f64a70ff          MOV      r0,#0xafff
00015c  f7fffffe          BL       Delay
;;;206    	LCD_WR_REG(0x00E0);
000160  20e0              MOVS     r0,#0xe0
000162  f7fffffe          BL       LCD_WR_REG
;;;207    	LCD_WR_Data(0x0003);		// PLL 使能  PLL作为时钟
000166  2003              MOVS     r0,#3
000168  f7fffffe          BL       LCD_WR_Data
;;;208    	Delay(0xAFFF);
00016c  f64a70ff          MOV      r0,#0xafff
000170  f7fffffe          BL       Delay
;;;209    	LCD_WR_REG(0x0001);         // 软件复位
000174  2001              MOVS     r0,#1
000176  f7fffffe          BL       LCD_WR_REG
;;;210    	Delay(0xAFFF);
00017a  f64a70ff          MOV      r0,#0xafff
00017e  f7fffffe          BL       Delay
;;;211    
;;;212    	LCD_WR_REG(0x00B0);	        //设置LCD模式
000182  20b0              MOVS     r0,#0xb0
000184  f7fffffe          BL       LCD_WR_REG
;;;213    	LCD_WR_Data(0x0024);
000188  2024              MOVS     r0,#0x24
00018a  f7fffffe          BL       LCD_WR_Data
;;;214    	LCD_WR_Data(0x0040);
00018e  2040              MOVS     r0,#0x40
000190  f7fffffe          BL       LCD_WR_Data
;;;215    	LCD_WR_Data((HDP>>8)&0X00FF);  //Set HDP
000194  48ab              LDR      r0,|L1.1092|
000196  8800              LDRH     r0,[r0,#0]  ; HDP
000198  f3c02007          UBFX     r0,r0,#8,#8
00019c  f7fffffe          BL       LCD_WR_Data
;;;216    	LCD_WR_Data(HDP&0X00FF);
0001a0  49a8              LDR      r1,|L1.1092|
0001a2  7808              LDRB     r0,[r1,#0]  ; HDP
0001a4  f7fffffe          BL       LCD_WR_Data
;;;217        LCD_WR_Data((VDP>>8)&0X00FF);  //Set VDP
0001a8  48a7              LDR      r0,|L1.1096|
0001aa  8800              LDRH     r0,[r0,#0]  ; VDP
0001ac  f3c02007          UBFX     r0,r0,#8,#8
0001b0  f7fffffe          BL       LCD_WR_Data
;;;218    	LCD_WR_Data(VDP&0X00FF);
0001b4  49a4              LDR      r1,|L1.1096|
0001b6  7808              LDRB     r0,[r1,#0]  ; VDP
0001b8  f7fffffe          BL       LCD_WR_Data
;;;219        LCD_WR_Data(0x0000);
0001bc  2000              MOVS     r0,#0
0001be  f7fffffe          BL       LCD_WR_Data
;;;220    
;;;221    	LCD_WR_REG(0x00B4);	//HSYNC
0001c2  20b4              MOVS     r0,#0xb4
0001c4  f7fffffe          BL       LCD_WR_REG
;;;222    	LCD_WR_Data((HT>>8)&0X00FF);  //Set HT
0001c8  48a0              LDR      r0,|L1.1100|
0001ca  8800              LDRH     r0,[r0,#0]  ; HT
0001cc  f3c02007          UBFX     r0,r0,#8,#8
0001d0  f7fffffe          BL       LCD_WR_Data
;;;223    	LCD_WR_Data(HT&0X00FF);
0001d4  499d              LDR      r1,|L1.1100|
0001d6  7808              LDRB     r0,[r1,#0]  ; HT
0001d8  f7fffffe          BL       LCD_WR_Data
;;;224    	LCD_WR_Data((HPS>>8)&0X00FF);  //Set HPS
0001dc  489c              LDR      r0,|L1.1104|
0001de  8800              LDRH     r0,[r0,#0]  ; HPS
0001e0  f3c02007          UBFX     r0,r0,#8,#8
0001e4  f7fffffe          BL       LCD_WR_Data
;;;225    	LCD_WR_Data(HPS&0X00FF);
0001e8  4999              LDR      r1,|L1.1104|
0001ea  7808              LDRB     r0,[r1,#0]  ; HPS
0001ec  f7fffffe          BL       LCD_WR_Data
;;;226    	LCD_WR_Data(HPW);			   //Set HPW
0001f0  4898              LDR      r0,|L1.1108|
0001f2  7800              LDRB     r0,[r0,#0]  ; HPW
0001f4  f7fffffe          BL       LCD_WR_Data
;;;227    	LCD_WR_Data((LPS>>8)&0X00FF);  //Set HPS
0001f8  4897              LDR      r0,|L1.1112|
0001fa  8800              LDRH     r0,[r0,#0]  ; LPS
0001fc  f3c02007          UBFX     r0,r0,#8,#8
000200  f7fffffe          BL       LCD_WR_Data
;;;228    	LCD_WR_Data(LPS&0X00FF);
000204  4994              LDR      r1,|L1.1112|
000206  7808              LDRB     r0,[r1,#0]  ; LPS
000208  f7fffffe          BL       LCD_WR_Data
;;;229    	LCD_WR_Data(0x0000);
00020c  2000              MOVS     r0,#0
00020e  f7fffffe          BL       LCD_WR_Data
;;;230    
;;;231    	LCD_WR_REG(0x00B6);	//VSYNC
000212  20b6              MOVS     r0,#0xb6
000214  f7fffffe          BL       LCD_WR_REG
;;;232    	LCD_WR_Data((VT>>8)&0X00FF);   //Set VT
000218  4890              LDR      r0,|L1.1116|
00021a  8800              LDRH     r0,[r0,#0]  ; VT
00021c  f3c02007          UBFX     r0,r0,#8,#8
000220  f7fffffe          BL       LCD_WR_Data
;;;233    	LCD_WR_Data(VT&0X00FF);
000224  498d              LDR      r1,|L1.1116|
000226  7808              LDRB     r0,[r1,#0]  ; VT
000228  f7fffffe          BL       LCD_WR_Data
;;;234    	LCD_WR_Data((VPS>>8)&0X00FF);  //Set VPS
00022c  488c              LDR      r0,|L1.1120|
00022e  8800              LDRH     r0,[r0,#0]  ; VPS
000230  f3c02007          UBFX     r0,r0,#8,#8
000234  f7fffffe          BL       LCD_WR_Data
;;;235    	LCD_WR_Data(VPS&0X00FF);
000238  4989              LDR      r1,|L1.1120|
00023a  7808              LDRB     r0,[r1,#0]  ; VPS
00023c  f7fffffe          BL       LCD_WR_Data
;;;236    	LCD_WR_Data(VPW);			   //Set VPW
000240  4888              LDR      r0,|L1.1124|
000242  7800              LDRB     r0,[r0,#0]  ; VPW
000244  f7fffffe          BL       LCD_WR_Data
;;;237    	LCD_WR_Data((FPS>>8)&0X00FF);  //Set FPS
000248  4887              LDR      r0,|L1.1128|
00024a  8800              LDRH     r0,[r0,#0]  ; FPS
00024c  f3c02007          UBFX     r0,r0,#8,#8
000250  f7fffffe          BL       LCD_WR_Data
;;;238    	LCD_WR_Data(FPS&0X00FF);
000254  4984              LDR      r1,|L1.1128|
000256  7808              LDRB     r0,[r1,#0]  ; FPS
000258  f7fffffe          BL       LCD_WR_Data
;;;239    	
;;;240    	LCD_WR_REG(0xE6);
00025c  20e6              MOVS     r0,#0xe6
00025e  f7fffffe          BL       LCD_WR_REG
;;;241    	LCD_WR_Data(0x01);
000262  2001              MOVS     r0,#1
000264  f7fffffe          BL       LCD_WR_Data
;;;242    	LCD_WR_Data(0x14);
000268  2014              MOVS     r0,#0x14
00026a  f7fffffe          BL       LCD_WR_Data
;;;243    	LCD_WR_Data(0x79);
00026e  2079              MOVS     r0,#0x79
000270  f7fffffe          BL       LCD_WR_Data
;;;244    
;;;245    	LCD_WR_REG(0x00B8);
000274  20b8              MOVS     r0,#0xb8
000276  f7fffffe          BL       LCD_WR_REG
;;;246    	LCD_WR_Data(0x000F);    //GPIO3=input, GPIO[2:0]=output
00027a  200f              MOVS     r0,#0xf
00027c  f7fffffe          BL       LCD_WR_Data
;;;247    	LCD_WR_Data(0x0001);    //GPIO0 normal
000280  2001              MOVS     r0,#1
000282  f7fffffe          BL       LCD_WR_Data
;;;248    
;;;249    	LCD_WR_REG(0x00BA);
000286  20ba              MOVS     r0,#0xba
000288  f7fffffe          BL       LCD_WR_REG
;;;250    	LCD_WR_Data(0x000F);    //GPIO[3:0] out 1
00028c  200f              MOVS     r0,#0xf
00028e  f7fffffe          BL       LCD_WR_Data
;;;251    
;;;252    	LCD_WR_REG(0x0036);            //rotation
000292  2036              MOVS     r0,#0x36
000294  f7fffffe          BL       LCD_WR_REG
;;;253    	LCD_WR_Data(0x0000);
000298  2000              MOVS     r0,#0
00029a  f7fffffe          BL       LCD_WR_Data
;;;254    
;;;255    
;;;256    	LCD_WR_REG(0x00F0);             //16位  565模式
00029e  20f0              MOVS     r0,#0xf0
0002a0  f7fffffe          BL       LCD_WR_REG
;;;257    	LCD_WR_Data(0x0003);
0002a4  2003              MOVS     r0,#3
0002a6  f7fffffe          BL       LCD_WR_Data
;;;258    
;;;259    
;;;260    	Delay(0xAFFF);
0002aa  f64a70ff          MOV      r0,#0xafff
0002ae  f7fffffe          BL       Delay
;;;261    
;;;262    	//LCD_clear();
;;;263    	LCD_WR_REG(0x0029); //display on
0002b2  2029              MOVS     r0,#0x29
0002b4  f7fffffe          BL       LCD_WR_REG
;;;264    
;;;265    	LCD_WR_REG(0x00BE); //set PWM for B/L
0002b8  20be              MOVS     r0,#0xbe
0002ba  f7fffffe          BL       LCD_WR_REG
;;;266    	LCD_WR_Data(0x0001);
0002be  2001              MOVS     r0,#1
0002c0  f7fffffe          BL       LCD_WR_Data
;;;267    	LCD_WR_Data(0x000ff);
0002c4  20ff              MOVS     r0,#0xff
0002c6  f7fffffe          BL       LCD_WR_Data
;;;268    	
;;;269    	LCD_WR_Data(0x0001);
0002ca  2001              MOVS     r0,#1
0002cc  f7fffffe          BL       LCD_WR_Data
;;;270    	LCD_WR_Data(0x00ff);
0002d0  20ff              MOVS     r0,#0xff
0002d2  f7fffffe          BL       LCD_WR_Data
;;;271    	LCD_WR_Data(0x0000);
0002d6  2000              MOVS     r0,#0
0002d8  f7fffffe          BL       LCD_WR_Data
;;;272    	LCD_WR_Data(0x0000);
0002dc  2000              MOVS     r0,#0
0002de  f7fffffe          BL       LCD_WR_Data
;;;273    
;;;274    //	LCD_WR_REG(0x00E2);	        //PLL 倍频到120M   PLL=10*36/3=120M
;;;275    //	LCD_WR_Data(0x0023);	    //N=0x36 for 6.5M, 0x23 for 10M crystal
;;;276    //	LCD_WR_Data(0x0002);
;;;277    //	LCD_WR_Data(0x0004);
;;;278    //	
;;;279    //	LCD_WR_REG(0x00E0);         
;;;280    //	LCD_WR_Data(0x0001);
;;;281    //	Delay(0xAFFF);
;;;282    //	LCD_WR_REG(0x00E0);
;;;283    //	LCD_WR_Data(0x0003);		// PLL 使能  PLL作为时钟
;;;284    //	Delay(0xAFFF);
;;;285    //	LCD_WR_REG(0x0001);         // 软件复位
;;;286    //	Delay(0xAFFF);
;;;287    
;;;288    //	LCD_WR_REG(0x00B0);	        //设置LCD模式
;;;289    //	LCD_WR_Data(0x0020);
;;;290    //	LCD_WR_Data(0x0000);
;;;291    //	LCD_WR_Data((HDP>>8)&0X00FF);  //Set HDP
;;;292    //	LCD_WR_Data(HDP&0X00FF);
;;;293    //    LCD_WR_Data((VDP>>8)&0X00FF);  //Set VDP
;;;294    //	LCD_WR_Data(VDP&0X00FF);
;;;295    //    LCD_WR_Data(0x0000);
;;;296    
;;;297    //	LCD_WR_REG(0x00B4);	//HSYNC
;;;298    //	LCD_WR_Data((HT>>8)&0X00FF);  //Set HT
;;;299    //	LCD_WR_Data(HT&0X00FF);
;;;300    //	LCD_WR_Data((HPS>>8)&0X00FF);  //Set HPS
;;;301    //	LCD_WR_Data(HPS&0X00FF);
;;;302    //	LCD_WR_Data(HPW);			   //Set HPW
;;;303    //	LCD_WR_Data((LPS>>8)&0X00FF);  //Set HPS
;;;304    //	LCD_WR_Data(LPS&0X00FF);
;;;305    //	LCD_WR_Data(0x0000);
;;;306    
;;;307    //	LCD_WR_REG(0x00B6);	//VSYNC
;;;308    //	LCD_WR_Data((VT>>8)&0X00FF);   //Set VT
;;;309    //	LCD_WR_Data(VT&0X00FF);
;;;310    //	LCD_WR_Data((VPS>>8)&0X00FF);  //Set VPS
;;;311    //	LCD_WR_Data(VPS&0X00FF);
;;;312    //	LCD_WR_Data(VPW);			   //Set VPW
;;;313    //	LCD_WR_Data((FPS>>8)&0X00FF);  //Set FPS
;;;314    //	LCD_WR_Data(FPS&0X00FF);
;;;315    //	
;;;316    //	LCD_WR_REG(0xE6);
;;;317    //	LCD_WR_Data(0x03);
;;;318    //	LCD_WR_Data(0x99);
;;;319    //	LCD_WR_Data(0x94);
;;;320    
;;;321    //	LCD_WR_REG(0x00B8);
;;;322    //	LCD_WR_Data(0x000F);    //GPIO3=input, GPIO[2:0]=output
;;;323    //	LCD_WR_Data(0x0001);    //GPIO0 normal
;;;324    
;;;325    //	LCD_WR_REG(0x00BA);
;;;326    //	LCD_WR_Data(0x000F);    //GPIO[3:0] out 1
;;;327    
;;;328    //	LCD_WR_REG(0x0036);            //rotation
;;;329    //	LCD_WR_Data(0x0000);
;;;330    
;;;331    
;;;332    //	LCD_WR_REG(0x00F0);             //16位  565模式
;;;333    //	LCD_WR_Data(0x0003);
;;;334    
;;;335    
;;;336    //	Delay(0xAFFF);
;;;337    
;;;338    //	//LCD_clear();
;;;339    //	LCD_WR_REG(0x0029); //display on
;;;340    
;;;341    //	LCD_WR_REG(0x00BE); //set PWM for B/L
;;;342    //	LCD_WR_Data(0x0001);
;;;343    //	LCD_WR_Data(0x000ff);
;;;344    //	
;;;345    //	LCD_WR_Data(0x0001);
;;;346    //	LCD_WR_Data(0x00ff);
;;;347    //	LCD_WR_Data(0x0000);
;;;348    //	LCD_WR_Data(0x0000);
;;;349    	
;;;350    	Delay(0xFFFFF);Delay(0xFFFFF);Delay(0xFFFFF);Delay(0xFFFFF);Delay(0xFFFFF);Delay(0xFFFFF);
0002e2  4862              LDR      r0,|L1.1132|
0002e4  f7fffffe          BL       Delay
0002e8  4860              LDR      r0,|L1.1132|
0002ea  f7fffffe          BL       Delay
0002ee  485f              LDR      r0,|L1.1132|
0002f0  f7fffffe          BL       Delay
0002f4  485d              LDR      r0,|L1.1132|
0002f6  f7fffffe          BL       Delay
0002fa  485c              LDR      r0,|L1.1132|
0002fc  f7fffffe          BL       Delay
000300  485a              LDR      r0,|L1.1132|
000302  f7fffffe          BL       Delay
;;;351    	lcos_reg_init();
000306  f7fffffe          BL       lcos_reg_init
;;;352    }
00030a  bd10              POP      {r4,pc}
;;;353    
                          ENDP

                  TFT_CLEAR PROC
;;;356    ****************************************************************************/ 
;;;357    void TFT_CLEAR(u16 x,u16 y,u32 len,u32 wid)
00030c  b570              PUSH     {r4-r6,lr}
;;;358    {                    
00030e  4605              MOV      r5,r0
000310  460c              MOV      r4,r1
;;;359        u32 w;
;;;360    
;;;361    	LCD_WR_REG(0x002A);	
000312  202a              MOVS     r0,#0x2a
000314  f7fffffe          BL       LCD_WR_REG
;;;362    	LCD_WR_Data(x>>8);	    
000318  1228              ASRS     r0,r5,#8
00031a  f7fffffe          BL       LCD_WR_Data
;;;363    	LCD_WR_Data(x);
00031e  4628              MOV      r0,r5
000320  f7fffffe          BL       LCD_WR_Data
;;;364    	LCD_WR_Data((len-1)>>8);	    
000324  1e51              SUBS     r1,r2,#1
000326  f3c1200f          UBFX     r0,r1,#8,#16
00032a  f7fffffe          BL       LCD_WR_Data
;;;365    	LCD_WR_Data((len-1));
00032e  1e51              SUBS     r1,r2,#1
000330  b288              UXTH     r0,r1
000332  f7fffffe          BL       LCD_WR_Data
;;;366        LCD_WR_REG(0x002b);	
000336  202b              MOVS     r0,#0x2b
000338  f7fffffe          BL       LCD_WR_REG
;;;367    	LCD_WR_Data(y>>8);	    
00033c  1220              ASRS     r0,r4,#8
00033e  f7fffffe          BL       LCD_WR_Data
;;;368    	LCD_WR_Data(y);
000342  4620              MOV      r0,r4
000344  f7fffffe          BL       LCD_WR_Data
;;;369    	LCD_WR_Data((wid-1)>>8);	    
000348  1e59              SUBS     r1,r3,#1
00034a  f3c1200f          UBFX     r0,r1,#8,#16
00034e  f7fffffe          BL       LCD_WR_Data
;;;370    	LCD_WR_Data((wid-1));
000352  1e59              SUBS     r1,r3,#1
000354  b288              UXTH     r0,r1
000356  f7fffffe          BL       LCD_WR_Data
;;;371    	LCD_WR_REG(0x002c);
00035a  202c              MOVS     r0,#0x2c
00035c  f7fffffe          BL       LCD_WR_REG
;;;372    	w=(len-x)*(wid-y);
000360  1b50              SUBS     r0,r2,r5
000362  1b19              SUBS     r1,r3,r4
000364  fb00f601          MUL      r6,r0,r1
;;;373    	while(w--) LCD_WR_Data(0xffff);
000368  e003              B        |L1.882|
                  |L1.874|
00036a  f64f70ff          MOV      r0,#0xffff
00036e  f7fffffe          BL       LCD_WR_Data
                  |L1.882|
000372  0030              MOVS     r0,r6
000374  f1a60601          SUB      r6,r6,#1
000378  d1f7              BNE      |L1.874|
;;;374    }   
00037a  bd70              POP      {r4-r6,pc}
;;;375    
                          ENDP

                  TFT_DrawPoint PROC
;;;378    ****************************************************************************/ 
;;;379    void TFT_DrawPoint(u16 x,u16 y, u16 color)
00037c  b510              PUSH     {r4,lr}
;;;380    {								       
00037e  4604              MOV      r4,r0
000380  460b              MOV      r3,r1
;;;381    	LCD_WR_REG(0x002A);				    
000382  202a              MOVS     r0,#0x2a
000384  f7fffffe          BL       LCD_WR_REG
;;;382    	LCD_WR_Data(x>>8);	    			//起始地址X
000388  1220              ASRS     r0,r4,#8
00038a  f7fffffe          BL       LCD_WR_Data
;;;383    	LCD_WR_Data(x);	    			
00038e  4620              MOV      r0,r4
000390  f7fffffe          BL       LCD_WR_Data
;;;384    	LCD_WR_Data(x>>8);	    			//结束地址X
000394  1220              ASRS     r0,r4,#8
000396  f7fffffe          BL       LCD_WR_Data
;;;385    	LCD_WR_Data(x);	    			    
00039a  4620              MOV      r0,r4
00039c  f7fffffe          BL       LCD_WR_Data
;;;386        LCD_WR_REG(0x002b);	
0003a0  202b              MOVS     r0,#0x2b
0003a2  f7fffffe          BL       LCD_WR_REG
;;;387    	LCD_WR_Data(y>>8);	    			//起始地址Y
0003a6  1218              ASRS     r0,r3,#8
0003a8  f7fffffe          BL       LCD_WR_Data
;;;388    	LCD_WR_Data(y);	    			    
0003ac  4618              MOV      r0,r3
0003ae  f7fffffe          BL       LCD_WR_Data
;;;389    	LCD_WR_Data(y>>8);	    			//结束地址Y
0003b2  1218              ASRS     r0,r3,#8
0003b4  f7fffffe          BL       LCD_WR_Data
;;;390    	LCD_WR_Data(y);	    			
0003b8  4618              MOV      r0,r3
0003ba  f7fffffe          BL       LCD_WR_Data
;;;391    	LCD_WR_REG(0x2c);
0003be  202c              MOVS     r0,#0x2c
0003c0  f7fffffe          BL       LCD_WR_REG
;;;392    	LCD_WR_Data(color); 	   	
0003c4  4610              MOV      r0,r2
0003c6  f7fffffe          BL       LCD_WR_Data
;;;393    }
0003ca  bd10              POP      {r4,pc}
;;;394    
                          ENDP

                  TFT_ReadPoint PROC
;;;397    ****************************************************************************/ 
;;;398    u16 TFT_ReadPoint(u16 x,u16 y)
0003cc  b500              PUSH     {lr}
;;;399    {								       
0003ce  4603              MOV      r3,r0
0003d0  460a              MOV      r2,r1
;;;400    	LCD_WR_REG(0x002A);				    
0003d2  202a              MOVS     r0,#0x2a
0003d4  f7fffffe          BL       LCD_WR_REG
;;;401    	LCD_WR_Data(x>>8);	    			//起始地址X
0003d8  1218              ASRS     r0,r3,#8
0003da  f7fffffe          BL       LCD_WR_Data
;;;402    	LCD_WR_Data(x);	    			
0003de  4618              MOV      r0,r3
0003e0  f7fffffe          BL       LCD_WR_Data
;;;403    	LCD_WR_Data(x>>8);	    			//结束地址X
0003e4  1218              ASRS     r0,r3,#8
0003e6  f7fffffe          BL       LCD_WR_Data
;;;404    	LCD_WR_Data(x);	    			    
0003ea  4618              MOV      r0,r3
0003ec  f7fffffe          BL       LCD_WR_Data
;;;405        LCD_WR_REG(0x002b);	
0003f0  202b              MOVS     r0,#0x2b
0003f2  f7fffffe          BL       LCD_WR_REG
;;;406    	LCD_WR_Data(y>>8);	    			//起始地址Y
0003f6  1210              ASRS     r0,r2,#8
0003f8  f7fffffe          BL       LCD_WR_Data
;;;407    	LCD_WR_Data(y);	    			    
0003fc  4610              MOV      r0,r2
0003fe  f7fffffe          BL       LCD_WR_Data
;;;408    	LCD_WR_Data(y>>8);	    			//结束地址Y
000402  1210              ASRS     r0,r2,#8
000404  f7fffffe          BL       LCD_WR_Data
;;;409    	LCD_WR_Data(y);	    			
000408  4610              MOV      r0,r2
00040a  f7fffffe          BL       LCD_WR_Data
;;;410    	LCD_WR_REG(0x2e);
00040e  202e              MOVS     r0,#0x2e
000410  f7fffffe          BL       LCD_WR_REG
;;;411    	return(LCD_RD_Data()); 	   	
000414  f7fffffe          BL       LCD_RD_Data
;;;412    }
000418  bd00              POP      {pc}
00041a  0000              DCW      0x0000
                  |L1.1052|
                          DCD      0x60020000
                  |L1.1056|
                          DCD      SPI_InitStructure
                  |L1.1060|
                          DCD      0x40013000
                  |L1.1064|
                          DCD      send_count
                  |L1.1068|
                          DCD      Tx_Idx
                  |L1.1072|
                          DCD      0x40010c00
                  |L1.1076|
                          DCD      SPI1_Buffer_Tx
                  |L1.1080|
                          DCD      SPI1_Buffer_Rx
                  |L1.1084|
                          DCD      0x40011800
                  |L1.1088|
                          DCD      0x000affff
                  |L1.1092|
                          DCD      HDP
                  |L1.1096|
                          DCD      VDP
                  |L1.1100|
                          DCD      ||HT||
                  |L1.1104|
                          DCD      HPS
                  |L1.1108|
                          DCD      HPW
                  |L1.1112|
                          DCD      LPS
                  |L1.1116|
                          DCD      ||VT||
                  |L1.1120|
                          DCD      VPS
                  |L1.1124|
                          DCD      VPW
                  |L1.1128|
                          DCD      ||FPS||
                  |L1.1132|
                          DCD      0x000fffff
                          ENDP

                  TFT_HLine PROC
;;;416    ****************************************************************************/ 
;;;417    void TFT_HLine(u16 x0,u16 y,u16 x1,u16 color)
000470  b5f0              PUSH     {r4-r7,lr}
;;;418    {	
000472  4605              MOV      r5,r0
000474  460c              MOV      r4,r1
;;;419    	u32 i,point_count;							       
;;;420    	LCD_WR_REG(0x002A);				    
000476  202a              MOVS     r0,#0x2a
000478  f7fffffe          BL       LCD_WR_REG
;;;421    	LCD_WR_Data(x0>>8);	    			//起始地址X
00047c  1228              ASRS     r0,r5,#8
00047e  f7fffffe          BL       LCD_WR_Data
;;;422    	LCD_WR_Data(x0);	    			
000482  4628              MOV      r0,r5
000484  f7fffffe          BL       LCD_WR_Data
;;;423    	LCD_WR_Data(x1>>8);	    			//结束地址X
000488  1210              ASRS     r0,r2,#8
00048a  f7fffffe          BL       LCD_WR_Data
;;;424    	LCD_WR_Data(x1);	    			    
00048e  4610              MOV      r0,r2
000490  f7fffffe          BL       LCD_WR_Data
;;;425        LCD_WR_REG(0x002b);	
000494  202b              MOVS     r0,#0x2b
000496  f7fffffe          BL       LCD_WR_REG
;;;426    	LCD_WR_Data(y>>8);	    			//起始地址Y
00049a  1220              ASRS     r0,r4,#8
00049c  f7fffffe          BL       LCD_WR_Data
;;;427    	LCD_WR_Data(y);	    			    
0004a0  4620              MOV      r0,r4
0004a2  f7fffffe          BL       LCD_WR_Data
;;;428    	LCD_WR_Data(y>>8);	    			//结束地址Y
0004a6  1220              ASRS     r0,r4,#8
0004a8  f7fffffe          BL       LCD_WR_Data
;;;429    	LCD_WR_Data(y);	    			
0004ac  4620              MOV      r0,r4
0004ae  f7fffffe          BL       LCD_WR_Data
;;;430    	LCD_WR_REG(0x2c);
0004b2  202c              MOVS     r0,#0x2c
0004b4  f7fffffe          BL       LCD_WR_REG
;;;431    	point_count=x1-x0+1;
0004b8  1b50              SUBS     r0,r2,r5
0004ba  1c47              ADDS     r7,r0,#1
;;;432    	for(i=0;i<=point_count;i++)
0004bc  2600              MOVS     r6,#0
0004be  e003              B        |L1.1224|
                  |L1.1216|
;;;433    	{
;;;434    		LCD_WR_Data(color); 	 
0004c0  4618              MOV      r0,r3
0004c2  f7fffffe          BL       LCD_WR_Data
0004c6  1c76              ADDS     r6,r6,#1              ;432
                  |L1.1224|
0004c8  42be              CMP      r6,r7                 ;432
0004ca  d9f9              BLS      |L1.1216|
;;;435    	} 
;;;436    }
0004cc  bdf0              POP      {r4-r7,pc}
;;;437    
                          ENDP

                  TFT_VLine PROC
;;;440    ****************************************************************************/ 
;;;441    void TFT_VLine(u16 x,u16 y0,u16 y1,u16 color)
0004ce  b5f0              PUSH     {r4-r7,lr}
;;;442    {	
0004d0  4605              MOV      r5,r0
0004d2  460c              MOV      r4,r1
;;;443    	u32 i,point_count;							       
;;;444    	LCD_WR_REG(0x002A);				    
0004d4  202a              MOVS     r0,#0x2a
0004d6  f7fffffe          BL       LCD_WR_REG
;;;445    	LCD_WR_Data(x>>8);	    			//起始地址X
0004da  1228              ASRS     r0,r5,#8
0004dc  f7fffffe          BL       LCD_WR_Data
;;;446    	LCD_WR_Data(x);	    			
0004e0  4628              MOV      r0,r5
0004e2  f7fffffe          BL       LCD_WR_Data
;;;447    	LCD_WR_Data(x>>8);	    			//结束地址X
0004e6  1228              ASRS     r0,r5,#8
0004e8  f7fffffe          BL       LCD_WR_Data
;;;448    	LCD_WR_Data(x);	    			    
0004ec  4628              MOV      r0,r5
0004ee  f7fffffe          BL       LCD_WR_Data
;;;449        LCD_WR_REG(0x002b);	
0004f2  202b              MOVS     r0,#0x2b
0004f4  f7fffffe          BL       LCD_WR_REG
;;;450    	LCD_WR_Data(y0>>8);	    			//起始地址Y
0004f8  1220              ASRS     r0,r4,#8
0004fa  f7fffffe          BL       LCD_WR_Data
;;;451    	LCD_WR_Data(y0);	    			    
0004fe  4620              MOV      r0,r4
000500  f7fffffe          BL       LCD_WR_Data
;;;452    	LCD_WR_Data(y1>>8);	    			//结束地址Y
000504  1210              ASRS     r0,r2,#8
000506  f7fffffe          BL       LCD_WR_Data
;;;453    	LCD_WR_Data(y1);	    			
00050a  4610              MOV      r0,r2
00050c  f7fffffe          BL       LCD_WR_Data
;;;454    	LCD_WR_REG(0x2c);
000510  202c              MOVS     r0,#0x2c
000512  f7fffffe          BL       LCD_WR_REG
;;;455    	point_count=y1-y0+1;
000516  1b10              SUBS     r0,r2,r4
000518  1c47              ADDS     r7,r0,#1
;;;456    	for(i=0;i<=point_count;i++)
00051a  2600              MOVS     r6,#0
00051c  e003              B        |L1.1318|
                  |L1.1310|
;;;457    	{
;;;458    		LCD_WR_Data(color); 	 
00051e  4618              MOV      r0,r3
000520  f7fffffe          BL       LCD_WR_Data
000524  1c76              ADDS     r6,r6,#1              ;456
                  |L1.1318|
000526  42be              CMP      r6,r7                 ;456
000528  d9f9              BLS      |L1.1310|
;;;459    	} 
;;;460    }
00052a  bdf0              POP      {r4-r7,pc}
;;;461    
                          ENDP

                  TFT_Fill PROC
;;;464    ****************************************************************************/ 
;;;465    void TFT_Fill(u16 x0,u16 y0, u16 x1, u16 y1, u16 color)
00052c  e92d41f0          PUSH     {r4-r8,lr}
;;;466    {	
000530  4605              MOV      r5,r0
000532  460c              MOV      r4,r1
000534  9f06              LDR      r7,[sp,#0x18]
;;;467    	u32 i,point_count;						       
;;;468    	LCD_WR_REG(0x002A);				    
000536  202a              MOVS     r0,#0x2a
000538  f7fffffe          BL       LCD_WR_REG
;;;469    	LCD_WR_Data(x0>>8);	    			//起始地址X
00053c  1228              ASRS     r0,r5,#8
00053e  f7fffffe          BL       LCD_WR_Data
;;;470    	LCD_WR_Data(x0);	    			
000542  4628              MOV      r0,r5
000544  f7fffffe          BL       LCD_WR_Data
;;;471    	LCD_WR_Data(x1>>8);	    			//结束地址X
000548  1210              ASRS     r0,r2,#8
00054a  f7fffffe          BL       LCD_WR_Data
;;;472    	LCD_WR_Data(x1);	    			    
00054e  4610              MOV      r0,r2
000550  f7fffffe          BL       LCD_WR_Data
;;;473        LCD_WR_REG(0x002b);	
000554  202b              MOVS     r0,#0x2b
000556  f7fffffe          BL       LCD_WR_REG
;;;474    	LCD_WR_Data(y0>>8);	    			//起始地址Y
00055a  1220              ASRS     r0,r4,#8
00055c  f7fffffe          BL       LCD_WR_Data
;;;475    	LCD_WR_Data(y0);	    			    
000560  4620              MOV      r0,r4
000562  f7fffffe          BL       LCD_WR_Data
;;;476    	LCD_WR_Data(y1>>8);	    			//结束地址Y
000566  1218              ASRS     r0,r3,#8
000568  f7fffffe          BL       LCD_WR_Data
;;;477    	LCD_WR_Data(y1);	    			
00056c  4618              MOV      r0,r3
00056e  f7fffffe          BL       LCD_WR_Data
;;;478    	LCD_WR_REG(0x2c);
000572  202c              MOVS     r0,#0x2c
000574  f7fffffe          BL       LCD_WR_REG
;;;479    	point_count=(x1-x0+1)*(y1-y0+1);
000578  1b50              SUBS     r0,r2,r5
00057a  1c40              ADDS     r0,r0,#1
00057c  1b19              SUBS     r1,r3,r4
00057e  1c49              ADDS     r1,r1,#1
000580  fb00f801          MUL      r8,r0,r1
;;;480    	for(i=0;i<=point_count;i++)
000584  2600              MOVS     r6,#0
000586  e003              B        |L1.1424|
                  |L1.1416|
;;;481    	{
;;;482    		LCD_WR_Data(color); 	 
000588  4638              MOV      r0,r7
00058a  f7fffffe          BL       LCD_WR_Data
00058e  1c76              ADDS     r6,r6,#1              ;480
                  |L1.1424|
000590  4546              CMP      r6,r8                 ;480
000592  d9f9              BLS      |L1.1416|
;;;483    	}	
;;;484    }
000594  e8bd81f0          POP      {r4-r8,pc}
;;;485    
                          ENDP

                  TFT_ShowBmp PROC
;;;493    ****************************************************************************/ 
;;;494    void TFT_ShowBmp(u16 x,u16 y,u16 lenth,u16 wide,const u8 *p)
000598  e92d41f0          PUSH     {r4-r8,lr}
;;;495    {      
00059c  4604              MOV      r4,r0
00059e  460d              MOV      r5,r1
0005a0  9f06              LDR      r7,[sp,#0x18]
;;;496        u32 size,temp; 
;;;497        //设定一个图片所占的窗口大小 
;;;498    	
;;;499    	LCD_WR_REG(0x002A);				    
0005a2  202a              MOVS     r0,#0x2a
0005a4  f7fffffe          BL       LCD_WR_REG
;;;500    	LCD_WR_Data(x>>8);	    			//起始地址X
0005a8  1220              ASRS     r0,r4,#8
0005aa  f7fffffe          BL       LCD_WR_Data
;;;501    	LCD_WR_Data(x&0x00ff);
0005ae  b2e0              UXTB     r0,r4
0005b0  f7fffffe          BL       LCD_WR_Data
;;;502    	LCD_WR_Data(((u16)x+lenth-1)>>8);	    		//结束地址X
0005b4  18a1              ADDS     r1,r4,r2
0005b6  1e49              SUBS     r1,r1,#1
0005b8  f3c1200f          UBFX     r0,r1,#8,#16
0005bc  f7fffffe          BL       LCD_WR_Data
;;;503    	LCD_WR_Data(((u16)x+lenth-1)&0x00ff);
0005c0  18a1              ADDS     r1,r4,r2
0005c2  1e49              SUBS     r1,r1,#1
0005c4  b2c8              UXTB     r0,r1
0005c6  f7fffffe          BL       LCD_WR_Data
;;;504        LCD_WR_REG(0x002b);	
0005ca  202b              MOVS     r0,#0x2b
0005cc  f7fffffe          BL       LCD_WR_REG
;;;505    	LCD_WR_Data(y>>8);	    			//起始地址Y
0005d0  1228              ASRS     r0,r5,#8
0005d2  f7fffffe          BL       LCD_WR_Data
;;;506    	LCD_WR_Data(y&0x00ff);
0005d6  b2e8              UXTB     r0,r5
0005d8  f7fffffe          BL       LCD_WR_Data
;;;507    	LCD_WR_Data((y+wide-1)>>8);	    	 	//结束地址Y
0005dc  18e9              ADDS     r1,r5,r3
0005de  1e49              SUBS     r1,r1,#1
0005e0  f3c1200f          UBFX     r0,r1,#8,#16
0005e4  f7fffffe          BL       LCD_WR_Data
;;;508    	LCD_WR_Data((y+wide-1)&0x00ff);
0005e8  18e9              ADDS     r1,r5,r3
0005ea  1e49              SUBS     r1,r1,#1
0005ec  b2c8              UXTB     r0,r1
0005ee  f7fffffe          BL       LCD_WR_Data
;;;509    	LCD_WR_REG(0x2c);	 
0005f2  202c              MOVS     r0,#0x2c
0005f4  f7fffffe          BL       LCD_WR_REG
;;;510    	temp=(u32)lenth*wide*2;
0005f8  fb02f003          MUL      r0,r2,r3
0005fc  ea4f0840          LSL      r8,r0,#1
;;;511    	for(size=0;size<temp;size++)LCD_WR_Data_8(p[size]); 
000600  2600              MOVS     r6,#0
000602  e003              B        |L1.1548|
                  |L1.1540|
000604  5db8              LDRB     r0,[r7,r6]
000606  f7fffffe          BL       LCD_WR_Data_8
00060a  1c76              ADDS     r6,r6,#1
                  |L1.1548|
00060c  4546              CMP      r6,r8
00060e  d3f9              BCC      |L1.1540|
;;;512    }         
000610  e8bd81f0          POP      {r4-r8,pc}
;;;513    
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  SPI_InitStructure
                          %        18
                  SPI1_Buffer_Rx
                          %        18

                          AREA ||.data||, DATA, ALIGN=2

                  HDP
                          DCD      0x0000012b
                  ||HT||
                          DCD      0x0000023f
                  HPS
                          DCD      0x00000058
                  HPW
00000c  29000000          DCB      0x29,0x00,0x00,0x00
                  LPS
                          DCD      0x00000000
                  VDP
                          DCD      0x000000df
                  ||VT||
                          DCD      0x00000137
                  VPS
                          DCD      0x00000045
                  VPW
000020  02000000          DCB      0x02,0x00,0x00,0x00
                  ||FPS||
                          DCD      0x00000000
                  SPI1_Buffer_Tx
000028  0110033f          DCB      0x01,0x10,0x03,0x3f
00002c  070a0800          DCB      0x07,0x0a,0x08,0x00
000030  09010a00          DCB      0x09,0x01,0x0a,0x00
000034  0b010c00          DCB      0x0b,0x01,0x0c,0x00
000038  0628              DCB      0x06,0x28
                  Tx_Idx
00003a  00                DCB      0x00
                  send_count
00003b  00                DCB      0x00
