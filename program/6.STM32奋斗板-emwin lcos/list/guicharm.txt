; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\guicharm.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\guicharm.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -I.\GUI\AntiAlias -I.\GUI\Config -I.\GUI\ConvertColor -I.\GUI\ConvertMono -I.\GUI\Core -I.\GUI\Font -I.\GUI\GUI_X -I.\GUI\JPEG -I.\GUI\LCDDriver -I.\GUI\MemDev -I.\GUI\MultiLayer -I.\GUI\Widget -I.\GUI\WM -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\INC\ST\STM32F10x -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\guicharm.crf GUI\Core\GUICharM.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  GUIMONO_DispChar PROC
;;;38     */
;;;39     void GUIMONO_DispChar(U16P c) {
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  b08b              SUB      sp,sp,#0x2c
000006  4605              MOV      r5,r0
;;;40       int c0, c1;
;;;41       const unsigned char GUI_UNI_PTR * pd;
;;;42       int x = GUI_Context.DispPosX;
000008  4874              LDR      r0,|L1.476|
00000a  f9b00022          LDRSH    r0,[r0,#0x22]  ; GUI_Context
00000e  900a              STR      r0,[sp,#0x28]
;;;43       int y = GUI_Context.DispPosY;
000010  4872              LDR      r0,|L1.476|
000012  f9b0a024          LDRSH    r10,[r0,#0x24]  ; GUI_Context
;;;44       /* do some checking if drawing is actually necessary ... */
;;;45       const GUI_FONT_MONO GUI_UNI_PTR * pMono = GUI_Context.pAFont->p.pMono;
000016  69c0              LDR      r0,[r0,#0x1c]  ; GUI_Context
000018  6984              LDR      r4,[r0,#0x18]
;;;46       unsigned int FirstChar = pMono->FirstChar;
00001a  f8b4800c          LDRH     r8,[r4,#0xc]
;;;47       /* translate character into 2 characters to display : c0,c1 */
;;;48       /* Check if regular character first. */
;;;49       if ((c >= (U16P)FirstChar) &&(c <= (U16P)pMono->LastChar)) {
00001e  4545              CMP      r5,r8
000020  db09              BLT      |L1.54|
000022  89e0              LDRH     r0,[r4,#0xe]
000024  42a8              CMP      r0,r5
000026  db06              BLT      |L1.54|
;;;50         pd = pMono->pData;
000028  f8d49000          LDR      r9,[r4,#0]
;;;51         c0 = ((int)c) - FirstChar;
00002c  eba50608          SUB      r6,r5,r8
;;;52         c1 = -1;
000030  f04f37ff          MOV      r7,#0xffffffff
000034  e01e              B        |L1.116|
                  |L1.54|
;;;53       } else {
;;;54         /* Check if character is in translation table */
;;;55         GUI_FONT_TRANSINFO const GUI_UNI_PTR * pti = pMono->pTrans;
000036  68a0              LDR      r0,[r4,#8]
;;;56         pd = pMono->pTransData;
000038  f8d49004          LDR      r9,[r4,#4]
;;;57         if (pti) {
00003c  b1b0              CBZ      r0,|L1.108|
;;;58           FirstChar = pti->FirstChar;
00003e  f8b08000          LDRH     r8,[r0,#0]
;;;59           if ((c >= (U16P)FirstChar) && (c <= (U16P)pti->LastChar)) {
000042  4545              CMP      r5,r8
000044  db0e              BLT      |L1.100|
000046  8841              LDRH     r1,[r0,#2]
000048  42a9              CMP      r1,r5
00004a  db0b              BLT      |L1.100|
;;;60             GUI_FONT_TRANSLIST const GUI_UNI_PTR * ptl;
;;;61             c -= pti->FirstChar;
00004c  8802              LDRH     r2,[r0,#0]
00004e  eba50202          SUB      r2,r5,r2
000052  b295              UXTH     r5,r2
;;;62             ptl = pti->pList;
000054  6841              LDR      r1,[r0,#4]
;;;63             ptl += c;
000056  eb010185          ADD      r1,r1,r5,LSL #2
;;;64             c0  = ptl->c0;
00005a  f9b16000          LDRSH    r6,[r1,#0]
;;;65             c1  = ptl->c1;
00005e  f9b17002          LDRSH    r7,[r1,#2]
;;;66           } else {
000062  e006              B        |L1.114|
                  |L1.100|
;;;67             c0 = c1 = -1;
000064  f04f36ff          MOV      r6,#0xffffffff
000068  4637              MOV      r7,r6
00006a  e002              B        |L1.114|
                  |L1.108|
;;;68           }
;;;69         } else {
;;;70           c0 = c1 = -1;
00006c  f04f36ff          MOV      r6,#0xffffffff
000070  4637              MOV      r7,r6
                  |L1.114|
;;;71         }
;;;72       }
000072  bf00              NOP      
                  |L1.116|
;;;73       /* Draw first character if it is valid */
;;;74       if (c0!=-1) {
000074  1c70              ADDS     r0,r6,#1
000076  d078              BEQ      |L1.362|
;;;75         int BytesPerChar = GUI_Context.pAFont->YSize*pMono->BytesPerLine;
000078  4858              LDR      r0,|L1.476|
00007a  69c0              LDR      r0,[r0,#0x1c]  ; GUI_Context
00007c  7d00              LDRB     r0,[r0,#0x14]
00007e  7ca1              LDRB     r1,[r4,#0x12]
000080  4348              MULS     r0,r1,r0
000082  9009              STR      r0,[sp,#0x24]
;;;76         GUI_DRAWMODE DrawMode;
;;;77         int XSize = pMono->XSize;
000084  7c20              LDRB     r0,[r4,#0x10]
000086  9008              STR      r0,[sp,#0x20]
;;;78         int YSize = GUI_Context.pAFont->YSize;
000088  4854              LDR      r0,|L1.476|
00008a  69c0              LDR      r0,[r0,#0x1c]  ; GUI_Context
00008c  7d00              LDRB     r0,[r0,#0x14]
00008e  9007              STR      r0,[sp,#0x1c]
;;;79         /* Select the right drawing mode */
;;;80         DrawMode = GUI_Context.TextMode;
000090  4852              LDR      r0,|L1.476|
000092  f9b0b02a          LDRSH    r11,[r0,#0x2a]  ; GUI_Context
;;;81         /* call drawing routine */
;;;82         {
;;;83           U8 OldMode = LCD_SetDrawMode(DrawMode);
000096  4658              MOV      r0,r11
000098  f7fffffe          BL       LCD_SetDrawMode
00009c  b2c0              UXTB     r0,r0
00009e  9006              STR      r0,[sp,#0x18]
;;;84           LCD_DrawBitmap( x, y,
0000a0  4a4e              LDR      r2,|L1.476|
0000a2  9809              LDR      r0,[sp,#0x24]
0000a4  fb069000          MLA      r0,r6,r0,r9
0000a8  7ca1              LDRB     r1,[r4,#0x12]
0000aa  f04f0301          MOV      r3,#1
0000ae  e9cd3102          STRD     r3,r1,[sp,#8]
0000b2  e9cd0204          STRD     r0,r2,[sp,#0x10]
0000b6  4610              MOV      r0,r2
0000b8  69c0              LDR      r0,[r0,#0x1c]  ; GUI_Context
0000ba  7dc0              LDRB     r0,[r0,#0x17]
0000bc  4611              MOV      r1,r2
0000be  69c9              LDR      r1,[r1,#0x1c]  ; GUI_Context
0000c0  7d89              LDRB     r1,[r1,#0x16]
0000c2  e9cd1000          STRD     r1,r0,[sp,#0]
0000c6  4651              MOV      r1,r10
0000c8  e9dd3207          LDRD     r3,r2,[sp,#0x1c]
0000cc  980a              LDR      r0,[sp,#0x28]
0000ce  f7fffffe          BL       LCD_DrawBitmap
;;;85                              XSize, YSize,
;;;86                              GUI_Context.pAFont->XMag,  GUI_Context.pAFont->YMag,
;;;87                              1,     /* Bits per Pixel */
;;;88                              pMono->BytesPerLine,
;;;89                              pd + c0* BytesPerChar,
;;;90                              &LCD_BKCOLORINDEX
;;;91                              );
;;;92           if (c1 != -1) {
0000d2  1c78              ADDS     r0,r7,#1
0000d4  d01b              BEQ      |L1.270|
;;;93             LCD_SetDrawMode(DrawMode | LCD_DRAWMODE_TRANS);
0000d6  f04b0002          ORR      r0,r11,#2
0000da  f7fffffe          BL       LCD_SetDrawMode
;;;94             LCD_DrawBitmap( x, y,
0000de  4a3f              LDR      r2,|L1.476|
0000e0  9809              LDR      r0,[sp,#0x24]
0000e2  fb079000          MLA      r0,r7,r0,r9
0000e6  7ca1              LDRB     r1,[r4,#0x12]
0000e8  2301              MOVS     r3,#1
0000ea  e9cd3102          STRD     r3,r1,[sp,#8]
0000ee  e9cd0204          STRD     r0,r2,[sp,#0x10]
0000f2  4610              MOV      r0,r2
0000f4  69c0              LDR      r0,[r0,#0x1c]  ; GUI_Context
0000f6  7dc0              LDRB     r0,[r0,#0x17]
0000f8  4611              MOV      r1,r2
0000fa  69c9              LDR      r1,[r1,#0x1c]  ; GUI_Context
0000fc  7d89              LDRB     r1,[r1,#0x16]
0000fe  e9cd1000          STRD     r1,r0,[sp,#0]
000102  4651              MOV      r1,r10
000104  e9dd3207          LDRD     r3,r2,[sp,#0x1c]
000108  980a              LDR      r0,[sp,#0x28]
00010a  f7fffffe          BL       LCD_DrawBitmap
                  |L1.270|
;;;95                                XSize, YSize,
;;;96                                GUI_Context.pAFont->XMag,  GUI_Context.pAFont->YMag,
;;;97                                1,     /* Bits per Pixel */
;;;98                                pMono->BytesPerLine,
;;;99                                pd + c1* BytesPerChar,
;;;100                               &LCD_BKCOLORINDEX
;;;101                               );
;;;102          }
;;;103          /* Fill empty pixel lines */
;;;104          if (GUI_Context.pAFont->YDist > GUI_Context.pAFont->YSize) {
00010e  4833              LDR      r0,|L1.476|
000110  69c0              LDR      r0,[r0,#0x1c]  ; GUI_Context
000112  7d40              LDRB     r0,[r0,#0x15]
000114  4931              LDR      r1,|L1.476|
000116  69c9              LDR      r1,[r1,#0x1c]  ; GUI_Context
000118  7d09              LDRB     r1,[r1,#0x14]
00011a  4288              CMP      r0,r1
00011c  dd21              BLE      |L1.354|
;;;105            if (DrawMode != LCD_DRAWMODE_TRANS) {
00011e  f1bb0f02          CMP      r11,#2
000122  d01e              BEQ      |L1.354|
;;;106              LCD_SetDrawMode(DrawMode ^ LCD_DRAWMODE_REV);  /* Reverse so we can fill with BkColor */
000124  f08b0004          EOR      r0,r11,#4
000128  f7fffffe          BL       LCD_SetDrawMode
;;;107              LCD_FillRect(x, 
00012c  482b              LDR      r0,|L1.476|
00012e  69c0              LDR      r0,[r0,#0x1c]  ; GUI_Context
000130  7d00              LDRB     r0,[r0,#0x14]
000132  f8dfc0a8          LDR      r12,|L1.476|
000136  f8dcc01c          LDR      r12,[r12,#0x1c]  ; GUI_Context
00013a  f89cc015          LDRB     r12,[r12,#0x15]
00013e  fb00a10c          MLA      r1,r0,r12,r10
000142  4826              LDR      r0,|L1.476|
000144  69c0              LDR      r0,[r0,#0x1c]  ; GUI_Context
000146  7d40              LDRB     r0,[r0,#0x15]
000148  eb00030a          ADD      r3,r0,r10
00014c  4823              LDR      r0,|L1.476|
00014e  69c0              LDR      r0,[r0,#0x1c]  ; GUI_Context
000150  f890e016          LDRB     lr,[r0,#0x16]
000154  f8ddc020          LDR      r12,[sp,#0x20]
000158  980a              LDR      r0,[sp,#0x28]
00015a  fb0c020e          MLA      r2,r12,lr,r0
00015e  f7fffffe          BL       LCD_FillRect
                  |L1.354|
;;;108                           y + GUI_Context.pAFont->YSize * GUI_Context.pAFont->YDist, 
;;;109                           x + XSize * GUI_Context.pAFont->XMag, 
;;;110                           y + GUI_Context.pAFont->YDist);
;;;111            }
;;;112          }
;;;113          LCD_SetDrawMode(OldMode);
000162  9806              LDR      r0,[sp,#0x18]
000164  f7fffffe          BL       LCD_SetDrawMode
;;;114        } 
;;;115      }
000168  bf00              NOP      
                  |L1.362|
;;;116      GUI_Context.DispPosX+=pMono->XDist;
00016a  481c              LDR      r0,|L1.476|
00016c  8c40              LDRH     r0,[r0,#0x22]  ; GUI_Context
00016e  7c61              LDRB     r1,[r4,#0x11]
000170  4408              ADD      r0,r0,r1
000172  b200              SXTH     r0,r0
000174  4919              LDR      r1,|L1.476|
000176  8448              STRH     r0,[r1,#0x22]
;;;117    }
000178  b00b              ADD      sp,sp,#0x2c
00017a  e8bd8ff0          POP      {r4-r11,pc}
;;;118    
                          ENDP

                  GUIMONO_GetCharDistX PROC
;;;122    */
;;;123    int GUIMONO_GetCharDistX(U16P c) {
00017e  4601              MOV      r1,r0
;;;124      const GUI_FONT_MONO GUI_UNI_PTR * pMono = GUI_Context.pAFont->p.pMono;
000180  4816              LDR      r0,|L1.476|
000182  69c0              LDR      r0,[r0,#0x1c]  ; GUI_Context
000184  6982              LDR      r2,[r0,#0x18]
;;;125      GUI_USE_PARA(c);
000186  bf00              NOP      
;;;126      return pMono->XDist;
000188  7c50              LDRB     r0,[r2,#0x11]
;;;127    }
00018a  4770              BX       lr
;;;128    
                          ENDP

                  GUIMONO_GetFontInfo PROC
;;;132    */
;;;133    void GUIMONO_GetFontInfo(const GUI_FONT GUI_UNI_PTR * pFont, GUI_FONTINFO* pfi) {
00018c  bf00              NOP      
;;;134      GUI_USE_PARA(pFont);
;;;135      pfi->Flags = GUI_FONTINFO_FLAG_MONO;
00018e  f04f0202          MOV      r2,#2
000192  800a              STRH     r2,[r1,#0]
;;;136    }
000194  4770              BX       lr
;;;137    
                          ENDP

                  GUIMONO_IsInFont PROC
;;;141    */
;;;142    char GUIMONO_IsInFont(const GUI_FONT GUI_UNI_PTR * pFont, U16 c) {
000196  b5f0              PUSH     {r4-r7,lr}
000198  4604              MOV      r4,r0
;;;143      const GUI_FONT_MONO GUI_UNI_PTR * pMono = pFont->p.pMono;
00019a  69a3              LDR      r3,[r4,#0x18]
;;;144      unsigned int FirstChar = pMono->FirstChar;
00019c  899d              LDRH     r5,[r3,#0xc]
;;;145      /* Check if regular character first. */
;;;146      if ((c >= (U16P)FirstChar) &&(c <= (U16P)pMono->LastChar)) {
00019e  42a9              CMP      r1,r5
0001a0  db04              BLT      |L1.428|
0001a2  89d8              LDRH     r0,[r3,#0xe]
0001a4  4288              CMP      r0,r1
0001a6  db01              BLT      |L1.428|
;;;147        return 1;  /* Yes, we have it ! */
0001a8  2001              MOVS     r0,#1
                  |L1.426|
;;;148      } else {
;;;149       /* Check if character is in translation table */
;;;150        GUI_FONT_TRANSINFO const GUI_UNI_PTR * pti;
;;;151        pti = pMono->pTrans;
;;;152        if (pti) {
;;;153          if ((c >= pti->FirstChar) && (c <= pti->LastChar)) {
;;;154            const GUI_FONT_TRANSLIST GUI_UNI_PTR * pList;
;;;155            pList = pti->pList + c - pti->FirstChar;
;;;156            if (pList->c0 >= 0) {
;;;157              return 1;  /* Yes, we have it ! */
;;;158            }
;;;159          }
;;;160        }
;;;161      }
;;;162      return 0;  /* No, we can not display this character */
;;;163    }
0001aa  bdf0              POP      {r4-r7,pc}
                  |L1.428|
0001ac  689a              LDR      r2,[r3,#8]            ;151
0001ae  b192              CBZ      r2,|L1.470|
0001b0  8810              LDRH     r0,[r2,#0]            ;153
0001b2  4288              CMP      r0,r1                 ;153
0001b4  dc0f              BGT      |L1.470|
0001b6  8850              LDRH     r0,[r2,#2]            ;153
0001b8  4288              CMP      r0,r1                 ;153
0001ba  db0c              BLT      |L1.470|
0001bc  6850              LDR      r0,[r2,#4]            ;155
0001be  eb000081          ADD      r0,r0,r1,LSL #2       ;155
0001c2  8817              LDRH     r7,[r2,#0]            ;155
0001c4  eba00687          SUB      r6,r0,r7,LSL #2       ;155
0001c8  f9b60000          LDRSH    r0,[r6,#0]            ;156
0001cc  2800              CMP      r0,#0                 ;156
0001ce  db01              BLT      |L1.468|
0001d0  2001              MOVS     r0,#1                 ;157
0001d2  e7ea              B        |L1.426|
                  |L1.468|
0001d4  bf00              NOP                            ;159
                  |L1.470|
0001d6  bf00              NOP                            ;161
0001d8  2000              MOVS     r0,#0                 ;162
0001da  e7e6              B        |L1.426|
;;;164    
                          ENDP

                  |L1.476|
                          DCD      GUI_Context
