; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\guipolye.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\guipolye.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -I.\GUI\AntiAlias -I.\GUI\Config -I.\GUI\ConvertColor -I.\GUI\ConvertMono -I.\GUI\Core -I.\GUI\Font -I.\GUI\GUI_X -I.\GUI\JPEG -I.\GUI\LCDDriver -I.\GUI\MemDev -I.\GUI\MultiLayer -I.\GUI\Widget -I.\GUI\WM -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\INC\ST\STM32F10x -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\guipolye.crf GUI\Core\GUIPolyE.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _fround PROC
;;;44     */
;;;45     static int _fround(float f) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4680              MOV      r8,r0
;;;46       if (f>0)
000006  f04f0100          MOV      r1,#0
00000a  4640              MOV      r0,r8
00000c  f7fffffe          BL       __aeabi_cfrcmple
000010  d20c              BCS      |L1.44|
;;;47         return f+0.5;
000012  4640              MOV      r0,r8
000014  f7fffffe          BL       __aeabi_f2d
000018  4606              MOV      r6,r0
00001a  2200              MOVS     r2,#0
00001c  4b81              LDR      r3,|L1.548|
00001e  f7fffffe          BL       __aeabi_dadd
000022  4604              MOV      r4,r0
000024  f7fffffe          BL       __aeabi_d2iz
                  |L1.40|
;;;48       return f-0.5;
;;;49     }
000028  e8bd81f0          POP      {r4-r8,pc}
                  |L1.44|
00002c  4640              MOV      r0,r8                 ;48
00002e  f7fffffe          BL       __aeabi_f2d
000032  4606              MOV      r6,r0                 ;48
000034  2200              MOVS     r2,#0                 ;48
000036  4b7b              LDR      r3,|L1.548|
000038  f7fffffe          BL       __aeabi_dsub
00003c  4604              MOV      r4,r0                 ;48
00003e  f7fffffe          BL       __aeabi_d2iz
000042  e7f1              B        |L1.40|
;;;50     
                          ENDP

                  _Normalize PROC
;;;54     */
;;;55     static void _Normalize(tfPoint* pfPoint) {
000044  e92d5fff          PUSH     {r0-r12,lr}
000048  4606              MOV      r6,r0
;;;56       float fx = pfPoint->x;
00004a  6837              LDR      r7,[r6,#0]
;;;57       float fy = pfPoint->y;
00004c  f8d68004          LDR      r8,[r6,#4]
;;;58       float r = sqrt(fx*fx + fy*fy);
000050  4641              MOV      r1,r8
000052  4640              MOV      r0,r8
000054  f7fffffe          BL       __aeabi_fmul
000058  4683              MOV      r11,r0
00005a  4639              MOV      r1,r7
00005c  4638              MOV      r0,r7
00005e  f7fffffe          BL       __aeabi_fmul
000062  4659              MOV      r1,r11
000064  9001              STR      r0,[sp,#4]
000066  f7fffffe          BL       __aeabi_fadd
00006a  4682              MOV      r10,r0
00006c  f7fffffe          BL       __aeabi_f2d
000070  e9cd0102          STRD     r0,r1,[sp,#8]
000074  f7fffffe          BL       sqrt
000078  4604              MOV      r4,r0
00007a  f7fffffe          BL       __aeabi_d2f
00007e  4681              MOV      r9,r0
;;;59       if (r > 0) {
000080  f04f0100          MOV      r1,#0
000084  4648              MOV      r0,r9
000086  f7fffffe          BL       __aeabi_cfrcmple
00008a  d209              BCS      |L1.160|
;;;60         pfPoint->x = fx/r;
00008c  4649              MOV      r1,r9
00008e  4638              MOV      r0,r7
000090  f7fffffe          BL       __aeabi_fdiv
000094  6030              STR      r0,[r6,#0]
;;;61         pfPoint->y = fy/r;
000096  4649              MOV      r1,r9
000098  4640              MOV      r0,r8
00009a  f7fffffe          BL       __aeabi_fdiv
00009e  6070              STR      r0,[r6,#4]
                  |L1.160|
;;;62       }
;;;63     }
0000a0  e8bd9fff          POP      {r0-r12,pc}
;;;64     
                          ENDP

                  _ReverseLen PROC
;;;68     */
;;;69     static void _ReverseLen(tfPoint* pfPoint) {
0000a4  e92d5fff          PUSH     {r0-r12,lr}
0000a8  4606              MOV      r6,r0
;;;70       float fx = pfPoint->x;
0000aa  6837              LDR      r7,[r6,#0]
;;;71       float fy = pfPoint->y;
0000ac  f8d68004          LDR      r8,[r6,#4]
;;;72       float r = sqrt(fx*fx/2 + fy*fy/2);
0000b0  4641              MOV      r1,r8
0000b2  4640              MOV      r0,r8
0000b4  f7fffffe          BL       __aeabi_fmul
0000b8  f04f4180          MOV      r1,#0x40000000
0000bc  9000              STR      r0,[sp,#0]
0000be  f7fffffe          BL       __aeabi_fdiv
0000c2  4683              MOV      r11,r0
0000c4  4639              MOV      r1,r7
0000c6  4638              MOV      r0,r7
0000c8  f7fffffe          BL       __aeabi_fmul
0000cc  f04f4180          MOV      r1,#0x40000000
0000d0  9000              STR      r0,[sp,#0]
0000d2  f7fffffe          BL       __aeabi_fdiv
0000d6  4659              MOV      r1,r11
0000d8  9001              STR      r0,[sp,#4]
0000da  f7fffffe          BL       __aeabi_fadd
0000de  4682              MOV      r10,r0
0000e0  f7fffffe          BL       __aeabi_f2d
0000e4  e9cd0102          STRD     r0,r1,[sp,#8]
0000e8  f7fffffe          BL       sqrt
0000ec  4604              MOV      r4,r0
0000ee  f7fffffe          BL       __aeabi_d2f
0000f2  4681              MOV      r9,r0
;;;73       if (r > 0) {
0000f4  f04f0100          MOV      r1,#0
0000f8  4648              MOV      r0,r9
0000fa  f7fffffe          BL       __aeabi_cfrcmple
0000fe  d211              BCS      |L1.292|
;;;74         pfPoint->x = fx/r/r;
000100  4649              MOV      r1,r9
000102  4638              MOV      r0,r7
000104  f7fffffe          BL       __aeabi_fdiv
000108  4604              MOV      r4,r0
00010a  4649              MOV      r1,r9
00010c  f7fffffe          BL       __aeabi_fdiv
000110  6030              STR      r0,[r6,#0]
;;;75         pfPoint->y = fy/r/r;
000112  4649              MOV      r1,r9
000114  4640              MOV      r0,r8
000116  f7fffffe          BL       __aeabi_fdiv
00011a  4604              MOV      r4,r0
00011c  4649              MOV      r1,r9
00011e  f7fffffe          BL       __aeabi_fdiv
000122  6070              STR      r0,[r6,#4]
                  |L1.292|
;;;76       }
;;;77     }
000124  e8bd9fff          POP      {r0-r12,pc}
;;;78     
                          ENDP

                  _GetVect PROC
;;;82     */
;;;83     static void _GetVect(tfPoint* pfPoint, const GUI_POINT* pSrc, int NumPoints, int Index) {
000128  e92d47f0          PUSH     {r4-r10,lr}
00012c  4606              MOV      r6,r0
00012e  460c              MOV      r4,r1
000130  4615              MOV      r5,r2
000132  461f              MOV      r7,r3
;;;84       int Off0 = (Index + NumPoints-1) % NumPoints;
000134  eb070005          ADD      r0,r7,r5
000138  f1a00001          SUB      r0,r0,#1
00013c  fb90f1f5          SDIV     r1,r0,r5
000140  fb050811          MLS      r8,r5,r1,r0
;;;85       int Off1 = Index % NumPoints;
000144  fb97f0f5          SDIV     r0,r7,r5
000148  fb057910          MLS      r9,r5,r0,r7
;;;86       pfPoint->x = pSrc[Off1].x - pSrc[Off0].x; 
00014c  f9341029          LDRSH    r1,[r4,r9,LSL #2]
000150  f9342028          LDRSH    r2,[r4,r8,LSL #2]
000154  eba10002          SUB      r0,r1,r2
000158  f7fffffe          BL       __aeabi_i2f
00015c  6030              STR      r0,[r6,#0]
;;;87       pfPoint->y = pSrc[Off1].y - pSrc[Off0].y; 
00015e  eb040189          ADD      r1,r4,r9,LSL #2
000162  f9b11002          LDRSH    r1,[r1,#2]
000166  eb040288          ADD      r2,r4,r8,LSL #2
00016a  f9b22002          LDRSH    r2,[r2,#2]
00016e  1a88              SUBS     r0,r1,r2
000170  f7fffffe          BL       __aeabi_i2f
000174  6070              STR      r0,[r6,#4]
;;;88     }
000176  e8bd87f0          POP      {r4-r10,pc}
;;;89     
                          ENDP

                  GUI_EnlargePolygon PROC
;;;126    
;;;127    void GUI_EnlargePolygon(GUI_POINT* pDest, const GUI_POINT* pSrc, int NumPoints, int Len) {
00017a  e92d4ff0          PUSH     {r4-r11,lr}
00017e  b085              SUB      sp,sp,#0x14
000180  4605              MOV      r5,r0
000182  460e              MOV      r6,r1
000184  4617              MOV      r7,r2
000186  4698              MOV      r8,r3
;;;128      int j;
;;;129      /* Calc destination points */
;;;130      for (j=0; j<NumPoints; j++) {
000188  f04f0400          MOV      r4,#0
00018c  e045              B        |L1.538|
                  |L1.398|
;;;131        int x, y;
;;;132        tfPoint aVect[2];
;;;133        /* Get the vectors */
;;;134        _GetVect(&aVect[0], pSrc, NumPoints, j);
00018e  4623              MOV      r3,r4
000190  463a              MOV      r2,r7
000192  4631              MOV      r1,r6
000194  a801              ADD      r0,sp,#4
000196  f7fffffe          BL       _GetVect
;;;135        _GetVect(&aVect[1], pSrc, NumPoints, j+1);
00019a  1c63              ADDS     r3,r4,#1
00019c  463a              MOV      r2,r7
00019e  4631              MOV      r1,r6
0001a0  a803              ADD      r0,sp,#0xc
0001a2  f7fffffe          BL       _GetVect
;;;136        /* Normalize the vectors and add vectors */
;;;137        _Normalize(&aVect[0]);
0001a6  a801              ADD      r0,sp,#4
0001a8  f7fffffe          BL       _Normalize
;;;138        _Normalize(&aVect[1]);
0001ac  a803              ADD      r0,sp,#0xc
0001ae  f7fffffe          BL       _Normalize
;;;139        aVect[0].x += aVect[1].x;
0001b2  9903              LDR      r1,[sp,#0xc]
0001b4  9801              LDR      r0,[sp,#4]
0001b6  f7fffffe          BL       __aeabi_fadd
0001ba  9001              STR      r0,[sp,#4]
;;;140        aVect[0].y += aVect[1].y;
0001bc  9904              LDR      r1,[sp,#0x10]
0001be  9802              LDR      r0,[sp,#8]
0001c0  f7fffffe          BL       __aeabi_fadd
0001c4  9002              STR      r0,[sp,#8]
;;;141        /* Resulting vector needs to be normalized again */
;;;142        _ReverseLen(&aVect[0]);
0001c6  a801              ADD      r0,sp,#4
0001c8  f7fffffe          BL       _ReverseLen
;;;143        x =  _fround(aVect[0].y * Len);
0001cc  4640              MOV      r0,r8
0001ce  f7fffffe          BL       __aeabi_i2f
0001d2  9000              STR      r0,[sp,#0]
0001d4  9902              LDR      r1,[sp,#8]
0001d6  f7fffffe          BL       __aeabi_fmul
0001da  4683              MOV      r11,r0
0001dc  f7fffffe          BL       _fround
0001e0  4681              MOV      r9,r0
;;;144        y = -_fround(aVect[0].x * Len);
0001e2  4640              MOV      r0,r8
0001e4  f7fffffe          BL       __aeabi_i2f
0001e8  9000              STR      r0,[sp,#0]
0001ea  9901              LDR      r1,[sp,#4]
0001ec  f7fffffe          BL       __aeabi_fmul
0001f0  4683              MOV      r11,r0
0001f2  f7fffffe          BL       _fround
0001f6  f1c00a00          RSB      r10,r0,#0
;;;145        /* Store destination */
;;;146        (pDest+j)->x = (pSrc+j)->x + x;
0001fa  f8360024          LDRH     r0,[r6,r4,LSL #2]
0001fe  4448              ADD      r0,r0,r9
000200  b200              SXTH     r0,r0
000202  f8250024          STRH     r0,[r5,r4,LSL #2]
;;;147        (pDest+j)->y = (pSrc+j)->y + y;
000206  eb060084          ADD      r0,r6,r4,LSL #2
00020a  8840              LDRH     r0,[r0,#2]
00020c  4450              ADD      r0,r0,r10
00020e  b200              SXTH     r0,r0
000210  eb050184          ADD      r1,r5,r4,LSL #2
000214  8048              STRH     r0,[r1,#2]
000216  f1040401          ADD      r4,r4,#1              ;130
                  |L1.538|
00021a  42bc              CMP      r4,r7                 ;130
00021c  dbb7              BLT      |L1.398|
;;;148      }
;;;149    }
00021e  b005              ADD      sp,sp,#0x14
000220  e8bd8ff0          POP      {r4-r11,pc}
;;;150    #endif
                          ENDP

                  |L1.548|
                          DCD      0x3fe00000
