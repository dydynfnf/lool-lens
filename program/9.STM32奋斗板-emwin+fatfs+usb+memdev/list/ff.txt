; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\ff.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\ff.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\FWlib\inc -I.\user -I.\CM3 -I.\MALLOC -I.\TFT -I.\EMWIN\EMWIN_INC -I.\EMWIN\DEMO -I.\PNG -I.\FATFS -I.\SDIO -I.\USB\inc -I.\USBCFG\inc -IE:\material\GUI\STM32·Ü¶·°å-emwin+fatfs+usb+memdev\RTE -Id:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.1.0\Device\Include -Id:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=515 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\ff.crf FATFS\ff.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  mem_cpy PROC
;;;520    static
;;;521    void mem_cpy (void* dst, const void* src, UINT cnt) {
000000  b570              PUSH     {r4-r6,lr}
;;;522    	BYTE *d = (BYTE*)dst;
000002  4603              MOV      r3,r0
;;;523    	const BYTE *s = (const BYTE*)src;
000004  460c              MOV      r4,r1
;;;524    
;;;525    #if _WORD_ACCESS == 1
;;;526    	while (cnt >= sizeof(int)) {
;;;527    		*(int*)d = *(int*)s;
;;;528    		d += sizeof(int); s += sizeof(int);
;;;529    		cnt -= sizeof(int);
;;;530    	}
;;;531    #endif
;;;532    	while (cnt--)
000006  e003              B        |L1.16|
                  |L1.8|
;;;533    		*d++ = *s++;
000008  f8145b01          LDRB     r5,[r4],#1
00000c  f8035b01          STRB     r5,[r3],#1
                  |L1.16|
000010  0015              MOVS     r5,r2                 ;532
000012  f1a20201          SUB      r2,r2,#1              ;532
000016  d1f7              BNE      |L1.8|
;;;534    }
000018  bd70              POP      {r4-r6,pc}
;;;535    
                          ENDP

                  mem_set PROC
;;;537    static
;;;538    void mem_set (void* dst, int val, UINT cnt) {
00001a  b530              PUSH     {r4,r5,lr}
;;;539    	BYTE *d = (BYTE*)dst;
00001c  4603              MOV      r3,r0
;;;540    
;;;541    	while (cnt--)
00001e  e001              B        |L1.36|
                  |L1.32|
;;;542    		*d++ = (BYTE)val;
000020  f8031b01          STRB     r1,[r3],#1
                  |L1.36|
000024  0014              MOVS     r4,r2                 ;541
000026  f1a20201          SUB      r2,r2,#1              ;541
00002a  d1f9              BNE      |L1.32|
;;;543    }
00002c  bd30              POP      {r4,r5,pc}
;;;544    
                          ENDP

                  mem_cmp PROC
;;;546    static
;;;547    int mem_cmp (const void* dst, const void* src, UINT cnt) {
00002e  b5f0              PUSH     {r4-r7,lr}
000030  4603              MOV      r3,r0
;;;548    	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
000032  461c              MOV      r4,r3
000034  460d              MOV      r5,r1
;;;549    	int r = 0;
000036  2000              MOVS     r0,#0
;;;550    
;;;551    	while (cnt-- && (r = *d++ - *s++) == 0) ;
000038  bf00              NOP      
                  |L1.58|
00003a  0016              MOVS     r6,r2
00003c  f1a20201          SUB      r2,r2,#1
000040  d007              BEQ      |L1.82|
000042  f8147b01          LDRB     r7,[r4],#1
000046  f815cb01          LDRB     r12,[r5],#1
00004a  eba7060c          SUB      r6,r7,r12
00004e  0030              MOVS     r0,r6
000050  d0f3              BEQ      |L1.58|
                  |L1.82|
;;;552    	return r;
;;;553    }
000052  bdf0              POP      {r4-r7,pc}
;;;554    
                          ENDP

                  chk_chr PROC
;;;556    static
;;;557    int chk_chr (const char* str, int chr) {
000054  4602              MOV      r2,r0
;;;558    	while (*str && *str != chr) str++;
000056  e000              B        |L1.90|
                  |L1.88|
000058  1c52              ADDS     r2,r2,#1
                  |L1.90|
00005a  7810              LDRB     r0,[r2,#0]
00005c  b110              CBZ      r0,|L1.100|
00005e  7810              LDRB     r0,[r2,#0]
000060  4288              CMP      r0,r1
000062  d1f9              BNE      |L1.88|
                  |L1.100|
;;;559    	return *str;
000064  7810              LDRB     r0,[r2,#0]
;;;560    }
000066  4770              BX       lr
;;;561    
                          ENDP

                  move_window PROC
;;;712    static
;;;713    FRESULT move_window (
000068  e92d41f0          PUSH     {r4-r8,lr}
;;;714    	FATFS *fs,		/* File system object */
;;;715    	DWORD sector	/* Sector number to make appearance in the fs->win[] */
;;;716    )					/* Move to zero only writes back dirty window */
;;;717    {
00006c  4604              MOV      r4,r0
00006e  460d              MOV      r5,r1
;;;718    	DWORD wsect;
;;;719    
;;;720    
;;;721    	wsect = fs->winsect;
000070  6ae6              LDR      r6,[r4,#0x2c]
;;;722    	if (wsect != sector) {	/* Changed current window */
000072  42ae              CMP      r6,r5
000074  d02f              BEQ      |L1.214|
;;;723    #if !_FS_READONLY
;;;724    		if (fs->wflag) {	/* Write back dirty window if needed */
000076  7920              LDRB     r0,[r4,#4]
000078  b308              CBZ      r0,|L1.190|
;;;725    			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
00007a  7860              LDRB     r0,[r4,#1]
00007c  2301              MOVS     r3,#1
00007e  4632              MOV      r2,r6
000080  f1040130          ADD      r1,r4,#0x30
000084  f7fffffe          BL       disk_write
000088  b110              CBZ      r0,|L1.144|
;;;726    				return FR_DISK_ERR;
00008a  2001              MOVS     r0,#1
                  |L1.140|
;;;727    			fs->wflag = 0;
;;;728    			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
;;;729    				BYTE nf;
;;;730    				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
;;;731    					wsect += fs->fsize;
;;;732    					disk_write(fs->drv, fs->win, wsect, 1);
;;;733    				}
;;;734    			}
;;;735    		}
;;;736    #endif
;;;737    		if (sector) {
;;;738    			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
;;;739    				return FR_DISK_ERR;
;;;740    			fs->winsect = sector;
;;;741    		}
;;;742    	}
;;;743    
;;;744    	return FR_OK;
;;;745    }
00008c  e8bd81f0          POP      {r4-r8,pc}
                  |L1.144|
000090  2000              MOVS     r0,#0                 ;727
000092  7120              STRB     r0,[r4,#4]            ;727
000094  e9d41007          LDRD     r1,r0,[r4,#0x1c]      ;728
000098  4408              ADD      r0,r0,r1              ;728
00009a  42b0              CMP      r0,r6                 ;728
00009c  d90f              BLS      |L1.190|
00009e  78e7              LDRB     r7,[r4,#3]            ;730
0000a0  e00a              B        |L1.184|
                  |L1.162|
0000a2  69e0              LDR      r0,[r4,#0x1c]         ;731
0000a4  4406              ADD      r6,r6,r0              ;731
0000a6  7860              LDRB     r0,[r4,#1]            ;732
0000a8  2301              MOVS     r3,#1                 ;732
0000aa  4632              MOV      r2,r6                 ;732
0000ac  f1040130          ADD      r1,r4,#0x30           ;732
0000b0  f7fffffe          BL       disk_write
0000b4  1e78              SUBS     r0,r7,#1              ;730
0000b6  b2c7              UXTB     r7,r0                 ;730
                  |L1.184|
0000b8  2f01              CMP      r7,#1                 ;730
0000ba  dcf2              BGT      |L1.162|
0000bc  bf00              NOP                            ;734
                  |L1.190|
0000be  b155              CBZ      r5,|L1.214|
0000c0  7860              LDRB     r0,[r4,#1]            ;738
0000c2  2301              MOVS     r3,#1                 ;738
0000c4  462a              MOV      r2,r5                 ;738
0000c6  f1040130          ADD      r1,r4,#0x30           ;738
0000ca  f7fffffe          BL       disk_read
0000ce  b108              CBZ      r0,|L1.212|
0000d0  2001              MOVS     r0,#1                 ;739
0000d2  e7db              B        |L1.140|
                  |L1.212|
0000d4  62e5              STR      r5,[r4,#0x2c]         ;740
                  |L1.214|
0000d6  2000              MOVS     r0,#0                 ;744
0000d8  e7d8              B        |L1.140|
;;;746    
                          ENDP

                  sync PROC
;;;754    static
;;;755    FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
0000da  b570              PUSH     {r4-r6,lr}
;;;756    	FATFS *fs	/* File system object */
;;;757    )
;;;758    {
0000dc  4604              MOV      r4,r0
;;;759    	FRESULT res;
;;;760    
;;;761    
;;;762    	res = move_window(fs, 0);
0000de  2100              MOVS     r1,#0
0000e0  4620              MOV      r0,r4
0000e2  f7fffffe          BL       move_window
0000e6  4605              MOV      r5,r0
;;;763    	if (res == FR_OK) {
0000e8  2d00              CMP      r5,#0
0000ea  d159              BNE      |L1.416|
;;;764    		/* Update FSInfo sector if needed */
;;;765    		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
0000ec  7820              LDRB     r0,[r4,#0]
0000ee  2803              CMP      r0,#3
0000f0  d14f              BNE      |L1.402|
0000f2  7960              LDRB     r0,[r4,#5]
0000f4  2800              CMP      r0,#0
0000f6  d04c              BEQ      |L1.402|
;;;766    			fs->winsect = 0;
0000f8  2000              MOVS     r0,#0
0000fa  62e0              STR      r0,[r4,#0x2c]
;;;767    			/* Create FSInfo structure */
;;;768    			mem_set(fs->win, 0, 512);
0000fc  f44f7200          MOV      r2,#0x200
000100  2100              MOVS     r1,#0
000102  f1040030          ADD      r0,r4,#0x30
000106  f7fffffe          BL       mem_set
;;;769    			ST_WORD(fs->win+BS_55AA, 0xAA55);
00010a  2155              MOVS     r1,#0x55
00010c  f884122e          STRB     r1,[r4,#0x22e]
000110  21aa              MOVS     r1,#0xaa
000112  f884122f          STRB     r1,[r4,#0x22f]
;;;770    			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
000116  2052              MOVS     r0,#0x52
000118  f8840030          STRB     r0,[r4,#0x30]
00011c  2152              MOVS     r1,#0x52
00011e  2031              MOVS     r0,#0x31
000120  5501              STRB     r1,[r0,r4]
000122  2161              MOVS     r1,#0x61
000124  2032              MOVS     r0,#0x32
000126  5501              STRB     r1,[r0,r4]
000128  2141              MOVS     r1,#0x41
00012a  2033              MOVS     r0,#0x33
00012c  5501              STRB     r1,[r0,r4]
;;;771    			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
00012e  2172              MOVS     r1,#0x72
000130  f8841214          STRB     r1,[r4,#0x214]
000134  f8841215          STRB     r1,[r4,#0x215]
000138  2141              MOVS     r1,#0x41
00013a  f8841216          STRB     r1,[r4,#0x216]
00013e  2161              MOVS     r1,#0x61
000140  f8841217          STRB     r1,[r4,#0x217]
;;;772    			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
000144  7c21              LDRB     r1,[r4,#0x10]
000146  f8841218          STRB     r1,[r4,#0x218]
00014a  8a20              LDRH     r0,[r4,#0x10]
00014c  0a01              LSRS     r1,r0,#8
00014e  f8841219          STRB     r1,[r4,#0x219]
000152  6920              LDR      r0,[r4,#0x10]
000154  0c01              LSRS     r1,r0,#16
000156  f884121a          STRB     r1,[r4,#0x21a]
00015a  6920              LDR      r0,[r4,#0x10]
00015c  0e01              LSRS     r1,r0,#24
00015e  f884121b          STRB     r1,[r4,#0x21b]
;;;773    			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
000162  7b21              LDRB     r1,[r4,#0xc]
000164  f884121c          STRB     r1,[r4,#0x21c]
000168  89a0              LDRH     r0,[r4,#0xc]
00016a  0a01              LSRS     r1,r0,#8
00016c  f884121d          STRB     r1,[r4,#0x21d]
000170  68e0              LDR      r0,[r4,#0xc]
000172  0c01              LSRS     r1,r0,#16
000174  f884121e          STRB     r1,[r4,#0x21e]
000178  68e0              LDR      r0,[r4,#0xc]
00017a  0e01              LSRS     r1,r0,#24
00017c  f884121f          STRB     r1,[r4,#0x21f]
;;;774    			/* Write it into the FSInfo sector */
;;;775    			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
000180  7860              LDRB     r0,[r4,#1]
000182  2301              MOVS     r3,#1
000184  f1040130          ADD      r1,r4,#0x30
000188  6962              LDR      r2,[r4,#0x14]
00018a  f7fffffe          BL       disk_write
;;;776    			fs->fsi_flag = 0;
00018e  2000              MOVS     r0,#0
000190  7160              STRB     r0,[r4,#5]
                  |L1.402|
;;;777    		}
;;;778    		/* Make sure that no pending write process in the physical drive */
;;;779    		if (disk_ioctl(fs->drv, CTRL_SYNC, (void*)0) != RES_OK)
000192  7860              LDRB     r0,[r4,#1]
000194  2200              MOVS     r2,#0
000196  4611              MOV      r1,r2
000198  f7fffffe          BL       disk_ioctl
00019c  b100              CBZ      r0,|L1.416|
;;;780    			res = FR_DISK_ERR;
00019e  2501              MOVS     r5,#1
                  |L1.416|
;;;781    	}
;;;782    
;;;783    	return res;
0001a0  4628              MOV      r0,r5
;;;784    }
0001a2  bd70              POP      {r4-r6,pc}
;;;785    #endif
                          ENDP

                  clust2sect PROC
;;;794    
;;;795    DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
0001a4  4602              MOV      r2,r0
;;;796    	FATFS *fs,		/* File system object */
;;;797    	DWORD clst		/* Cluster# to be converted */
;;;798    )
;;;799    {
;;;800    	clst -= 2;
0001a6  1e89              SUBS     r1,r1,#2
;;;801    	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
0001a8  6990              LDR      r0,[r2,#0x18]
0001aa  1e80              SUBS     r0,r0,#2
0001ac  4288              CMP      r0,r1
0001ae  d801              BHI      |L1.436|
0001b0  2000              MOVS     r0,#0
                  |L1.434|
;;;802    	return clst * fs->csize + fs->database;
;;;803    }
0001b2  4770              BX       lr
                  |L1.436|
0001b4  7893              LDRB     r3,[r2,#2]            ;802
0001b6  6a90              LDR      r0,[r2,#0x28]         ;802
0001b8  fb010003          MLA      r0,r1,r3,r0           ;802
0001bc  e7f9              B        |L1.434|
;;;804    
                          ENDP

                  get_fat PROC
;;;812    
;;;813    DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
0001be  e92d41f0          PUSH     {r4-r8,lr}
;;;814    	FATFS *fs,	/* File system object */
;;;815    	DWORD clst	/* Cluster# to get the link information */
;;;816    )
;;;817    {
0001c2  4605              MOV      r5,r0
0001c4  460c              MOV      r4,r1
;;;818    	UINT wc, bc;
;;;819    	BYTE *p;
;;;820    
;;;821    
;;;822    	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
0001c6  2c02              CMP      r4,#2
0001c8  d302              BCC      |L1.464|
0001ca  69a8              LDR      r0,[r5,#0x18]
0001cc  42a0              CMP      r0,r4
0001ce  d802              BHI      |L1.470|
                  |L1.464|
;;;823    		return 1;
0001d0  2001              MOVS     r0,#1
                  |L1.466|
;;;824    
;;;825    	switch (fs->fs_type) {
;;;826    	case FS_FAT12 :
;;;827    		bc = (UINT)clst; bc += bc / 2;
;;;828    		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
;;;829    		wc = fs->win[bc % SS(fs)]; bc++;
;;;830    		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
;;;831    		wc |= fs->win[bc % SS(fs)] << 8;
;;;832    		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
;;;833    
;;;834    	case FS_FAT16 :
;;;835    		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
;;;836    		p = &fs->win[clst * 2 % SS(fs)];
;;;837    		return LD_WORD(p);
;;;838    
;;;839    	case FS_FAT32 :
;;;840    		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
;;;841    		p = &fs->win[clst * 4 % SS(fs)];
;;;842    		return LD_DWORD(p) & 0x0FFFFFFF;
;;;843    	}
;;;844    
;;;845    	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
;;;846    }
0001d2  e8bd81f0          POP      {r4-r8,pc}
                  |L1.470|
0001d6  7828              LDRB     r0,[r5,#0]            ;825
0001d8  2801              CMP      r0,#1                 ;825
0001da  d004              BEQ      |L1.486|
0001dc  2802              CMP      r0,#2                 ;825
0001de  d02c              BEQ      |L1.570|
0001e0  2803              CMP      r0,#3                 ;825
0001e2  d15a              BNE      |L1.666|
0001e4  e03d              B        |L1.610|
                  |L1.486|
0001e6  4627              MOV      r7,r4                 ;827
0001e8  eb070757          ADD      r7,r7,r7,LSR #1       ;827
0001ec  6a28              LDR      r0,[r5,#0x20]         ;828
0001ee  eb002157          ADD      r1,r0,r7,LSR #9       ;828
0001f2  4628              MOV      r0,r5                 ;828
0001f4  f7fffffe          BL       move_window
0001f8  b100              CBZ      r0,|L1.508|
0001fa  e04e              B        |L1.666|
                  |L1.508|
0001fc  f3c70108          UBFX     r1,r7,#0,#9           ;829
000200  f1050030          ADD      r0,r5,#0x30           ;829
000204  f8108001          LDRB     r8,[r0,r1]            ;829
000208  1c7f              ADDS     r7,r7,#1              ;829
00020a  6a28              LDR      r0,[r5,#0x20]         ;830
00020c  eb002157          ADD      r1,r0,r7,LSR #9       ;830
000210  4628              MOV      r0,r5                 ;830
000212  f7fffffe          BL       move_window
000216  b100              CBZ      r0,|L1.538|
000218  e03f              B        |L1.666|
                  |L1.538|
00021a  f3c70108          UBFX     r1,r7,#0,#9           ;831
00021e  f1050030          ADD      r0,r5,#0x30           ;831
000222  5c40              LDRB     r0,[r0,r1]            ;831
000224  ea482800          ORR      r8,r8,r0,LSL #8       ;831
000228  f0040001          AND      r0,r4,#1              ;832
00022c  b110              CBZ      r0,|L1.564|
00022e  ea4f1018          LSR      r0,r8,#4              ;832
000232  e7ce              B        |L1.466|
                  |L1.564|
000234  f3c8000b          UBFX     r0,r8,#0,#12          ;832
000238  e7cb              B        |L1.466|
                  |L1.570|
00023a  6a28              LDR      r0,[r5,#0x20]         ;835
00023c  eb002114          ADD      r1,r0,r4,LSR #8       ;835
000240  4628              MOV      r0,r5                 ;835
000242  f7fffffe          BL       move_window
000246  b100              CBZ      r0,|L1.586|
000248  e027              B        |L1.666|
                  |L1.586|
00024a  f24010ff          MOV      r0,#0x1ff             ;836
00024e  ea000144          AND      r1,r0,r4,LSL #1       ;836
000252  f1050030          ADD      r0,r5,#0x30           ;836
000256  180e              ADDS     r6,r1,r0              ;836
000258  7830              LDRB     r0,[r6,#0]            ;837
00025a  7871              LDRB     r1,[r6,#1]            ;837
00025c  ea402001          ORR      r0,r0,r1,LSL #8       ;837
000260  e7b7              B        |L1.466|
                  |L1.610|
000262  6a28              LDR      r0,[r5,#0x20]         ;840
000264  eb0011d4          ADD      r1,r0,r4,LSR #7       ;840
000268  4628              MOV      r0,r5                 ;840
00026a  f7fffffe          BL       move_window
00026e  b100              CBZ      r0,|L1.626|
000270  e013              B        |L1.666|
                  |L1.626|
000272  f24010ff          MOV      r0,#0x1ff             ;841
000276  ea000184          AND      r1,r0,r4,LSL #2       ;841
00027a  f1050030          ADD      r0,r5,#0x30           ;841
00027e  180e              ADDS     r6,r1,r0              ;841
000280  78f0              LDRB     r0,[r6,#3]            ;842
000282  0600              LSLS     r0,r0,#24             ;842
000284  78b1              LDRB     r1,[r6,#2]            ;842
000286  ea404001          ORR      r0,r0,r1,LSL #16      ;842
00028a  7871              LDRB     r1,[r6,#1]            ;842
00028c  ea402001          ORR      r0,r0,r1,LSL #8       ;842
000290  7831              LDRB     r1,[r6,#0]            ;842
000292  4308              ORRS     r0,r0,r1              ;842
000294  f0204070          BIC      r0,r0,#0xf0000000     ;842
000298  e79b              B        |L1.466|
                  |L1.666|
00029a  bf00              NOP                            ;828
00029c  f04f30ff          MOV      r0,#0xffffffff        ;845
0002a0  e797              B        |L1.466|
;;;847    
                          ENDP

                  put_fat PROC
;;;855    
;;;856    FRESULT put_fat (
0002a2  e92d47f0          PUSH     {r4-r10,lr}
;;;857    	FATFS *fs,	/* File system object */
;;;858    	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
;;;859    	DWORD val	/* New value to mark the cluster */
;;;860    )
;;;861    {
0002a6  4605              MOV      r5,r0
0002a8  460e              MOV      r6,r1
0002aa  4617              MOV      r7,r2
;;;862    	UINT bc;
;;;863    	BYTE *p;
;;;864    	FRESULT res;
;;;865    
;;;866    
;;;867    	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
0002ac  2e02              CMP      r6,#2
0002ae  d302              BCC      |L1.694|
0002b0  69a8              LDR      r0,[r5,#0x18]
0002b2  42b0              CMP      r0,r6
0002b4  d802              BHI      |L1.700|
                  |L1.694|
;;;868    		res = FR_INT_ERR;
0002b6  f04f0802          MOV      r8,#2
0002ba  e08a              B        |L1.978|
                  |L1.700|
;;;869    
;;;870    	} else {
;;;871    		switch (fs->fs_type) {
0002bc  7828              LDRB     r0,[r5,#0]
0002be  2801              CMP      r0,#1
0002c0  d004              BEQ      |L1.716|
0002c2  2802              CMP      r0,#2
0002c4  d041              BEQ      |L1.842|
0002c6  2803              CMP      r0,#3
0002c8  d17d              BNE      |L1.966|
0002ca  e054              B        |L1.886|
                  |L1.716|
;;;872    		case FS_FAT12 :
;;;873    			bc = clst; bc += bc / 2;
0002cc  46b1              MOV      r9,r6
0002ce  eb090959          ADD      r9,r9,r9,LSR #1
;;;874    			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
0002d2  6a28              LDR      r0,[r5,#0x20]
0002d4  eb002159          ADD      r1,r0,r9,LSR #9
0002d8  4628              MOV      r0,r5
0002da  f7fffffe          BL       move_window
0002de  4680              MOV      r8,r0
;;;875    			if (res != FR_OK) break;
0002e0  f1b80f00          CMP      r8,#0
0002e4  d000              BEQ      |L1.744|
0002e6  e071              B        |L1.972|
                  |L1.744|
;;;876    			p = &fs->win[bc % SS(fs)];
0002e8  f3c90108          UBFX     r1,r9,#0,#9
0002ec  f1050030          ADD      r0,r5,#0x30
0002f0  180c              ADDS     r4,r1,r0
;;;877    			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
0002f2  f0060001          AND      r0,r6,#1
0002f6  b120              CBZ      r0,|L1.770|
0002f8  b2f9              UXTB     r1,r7
0002fa  7820              LDRB     r0,[r4,#0]
0002fc  f361101f          BFI      r0,r1,#4,#28
000300  e000              B        |L1.772|
                  |L1.770|
000302  4638              MOV      r0,r7
                  |L1.772|
000304  7020              STRB     r0,[r4,#0]
;;;878    			bc++;
000306  f1090901          ADD      r9,r9,#1
;;;879    			fs->wflag = 1;
00030a  2001              MOVS     r0,#1
00030c  7128              STRB     r0,[r5,#4]
;;;880    			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
00030e  6a28              LDR      r0,[r5,#0x20]
000310  eb002159          ADD      r1,r0,r9,LSR #9
000314  4628              MOV      r0,r5
000316  f7fffffe          BL       move_window
00031a  4680              MOV      r8,r0
;;;881    			if (res != FR_OK) break;
00031c  f1b80f00          CMP      r8,#0
000320  d000              BEQ      |L1.804|
000322  e053              B        |L1.972|
                  |L1.804|
;;;882    			p = &fs->win[bc % SS(fs)];
000324  f3c90108          UBFX     r1,r9,#0,#9
000328  f1050030          ADD      r0,r5,#0x30
00032c  180c              ADDS     r4,r1,r0
;;;883    			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
00032e  f0060001          AND      r0,r6,#1
000332  b110              CBZ      r0,|L1.826|
000334  f3c71007          UBFX     r0,r7,#4,#8
000338  e005              B        |L1.838|
                  |L1.826|
00033a  7820              LDRB     r0,[r4,#0]
00033c  f00000f0          AND      r0,r0,#0xf0
000340  f3c72103          UBFX     r1,r7,#8,#4
000344  4308              ORRS     r0,r0,r1
                  |L1.838|
000346  7020              STRB     r0,[r4,#0]
;;;884    			break;
000348  e040              B        |L1.972|
                  |L1.842|
;;;885    
;;;886    		case FS_FAT16 :
;;;887    			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
00034a  6a28              LDR      r0,[r5,#0x20]
00034c  eb002116          ADD      r1,r0,r6,LSR #8
000350  4628              MOV      r0,r5
000352  f7fffffe          BL       move_window
000356  4680              MOV      r8,r0
;;;888    			if (res != FR_OK) break;
000358  f1b80f00          CMP      r8,#0
00035c  d000              BEQ      |L1.864|
00035e  e035              B        |L1.972|
                  |L1.864|
;;;889    			p = &fs->win[clst * 2 % SS(fs)];
000360  f24010ff          MOV      r0,#0x1ff
000364  ea000146          AND      r1,r0,r6,LSL #1
000368  f1050030          ADD      r0,r5,#0x30
00036c  180c              ADDS     r4,r1,r0
;;;890    			ST_WORD(p, (WORD)val);
00036e  7027              STRB     r7,[r4,#0]
000370  0a38              LSRS     r0,r7,#8
000372  7060              STRB     r0,[r4,#1]
;;;891    			break;
000374  e02a              B        |L1.972|
                  |L1.886|
;;;892    
;;;893    		case FS_FAT32 :
;;;894    			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
000376  6a28              LDR      r0,[r5,#0x20]
000378  eb0011d6          ADD      r1,r0,r6,LSR #7
00037c  4628              MOV      r0,r5
00037e  f7fffffe          BL       move_window
000382  4680              MOV      r8,r0
;;;895    			if (res != FR_OK) break;
000384  f1b80f00          CMP      r8,#0
000388  d000              BEQ      |L1.908|
00038a  e01f              B        |L1.972|
                  |L1.908|
;;;896    			p = &fs->win[clst * 4 % SS(fs)];
00038c  f24010ff          MOV      r0,#0x1ff
000390  ea000186          AND      r1,r0,r6,LSL #2
000394  f1050030          ADD      r0,r5,#0x30
000398  180c              ADDS     r4,r1,r0
;;;897    			val |= LD_DWORD(p) & 0xF0000000;
00039a  78e0              LDRB     r0,[r4,#3]
00039c  0600              LSLS     r0,r0,#24
00039e  78a1              LDRB     r1,[r4,#2]
0003a0  ea404001          ORR      r0,r0,r1,LSL #16
0003a4  7861              LDRB     r1,[r4,#1]
0003a6  ea402001          ORR      r0,r0,r1,LSL #8
0003aa  7821              LDRB     r1,[r4,#0]
0003ac  4308              ORRS     r0,r0,r1
0003ae  f0004070          AND      r0,r0,#0xf0000000
0003b2  4307              ORRS     r7,r7,r0
;;;898    			ST_DWORD(p, val);
0003b4  7027              STRB     r7,[r4,#0]
0003b6  0a38              LSRS     r0,r7,#8
0003b8  7060              STRB     r0,[r4,#1]
0003ba  0c38              LSRS     r0,r7,#16
0003bc  70a0              STRB     r0,[r4,#2]
0003be  0e38              LSRS     r0,r7,#24
0003c0  70e0              STRB     r0,[r4,#3]
;;;899    			break;
0003c2  e003              B        |L1.972|
0003c4  e7ff              B        |L1.966|
                  |L1.966|
;;;900    
;;;901    		default :
;;;902    			res = FR_INT_ERR;
0003c6  f04f0802          MOV      r8,#2
0003ca  bf00              NOP                            ;871
                  |L1.972|
0003cc  bf00              NOP                            ;875
;;;903    		}
;;;904    		fs->wflag = 1;
0003ce  2001              MOVS     r0,#1
0003d0  7128              STRB     r0,[r5,#4]
                  |L1.978|
;;;905    	}
;;;906    
;;;907    	return res;
0003d2  4640              MOV      r0,r8
;;;908    }
0003d4  e8bd87f0          POP      {r4-r10,pc}
;;;909    #endif /* !_FS_READONLY */
                          ENDP

                  remove_chain PROC
;;;918    static
;;;919    FRESULT remove_chain (
0003d8  e92d41f0          PUSH     {r4-r8,lr}
;;;920    	FATFS *fs,			/* File system object */
;;;921    	DWORD clst			/* Cluster# to remove a chain from */
;;;922    )
;;;923    {
0003dc  4604              MOV      r4,r0
0003de  460e              MOV      r6,r1
;;;924    	FRESULT res;
;;;925    	DWORD nxt;
;;;926    #if _USE_ERASE
;;;927    	DWORD scl = clst, ecl = clst, resion[2];
;;;928    #endif
;;;929    
;;;930    	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
0003e0  2e02              CMP      r6,#2
0003e2  d302              BCC      |L1.1002|
0003e4  69a0              LDR      r0,[r4,#0x18]
0003e6  42b0              CMP      r0,r6
0003e8  d801              BHI      |L1.1006|
                  |L1.1002|
;;;931    		res = FR_INT_ERR;
0003ea  2702              MOVS     r7,#2
0003ec  e025              B        |L1.1082|
                  |L1.1006|
;;;932    
;;;933    	} else {
;;;934    		res = FR_OK;
0003ee  2700              MOVS     r7,#0
;;;935    		while (clst < fs->n_fatent) {			/* Not a last link? */
0003f0  e01f              B        |L1.1074|
                  |L1.1010|
;;;936    			nxt = get_fat(fs, clst);			/* Get cluster status */
0003f2  4631              MOV      r1,r6
0003f4  4620              MOV      r0,r4
0003f6  f7fffffe          BL       get_fat
0003fa  4605              MOV      r5,r0
;;;937    			if (nxt == 0) break;				/* Empty cluster? */
0003fc  b905              CBNZ     r5,|L1.1024|
0003fe  e01b              B        |L1.1080|
                  |L1.1024|
;;;938    			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
000400  2d01              CMP      r5,#1
000402  d101              BNE      |L1.1032|
000404  2702              MOVS     r7,#2
000406  e017              B        |L1.1080|
                  |L1.1032|
;;;939    			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
000408  1c68              ADDS     r0,r5,#1
00040a  b908              CBNZ     r0,|L1.1040|
00040c  2701              MOVS     r7,#1
00040e  e013              B        |L1.1080|
                  |L1.1040|
;;;940    			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
000410  2200              MOVS     r2,#0
000412  4631              MOV      r1,r6
000414  4620              MOV      r0,r4
000416  f7fffffe          BL       put_fat
00041a  4607              MOV      r7,r0
;;;941    			if (res != FR_OK) break;
00041c  b107              CBZ      r7,|L1.1056|
00041e  e00b              B        |L1.1080|
                  |L1.1056|
;;;942    			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
000420  6920              LDR      r0,[r4,#0x10]
000422  1c40              ADDS     r0,r0,#1
000424  b120              CBZ      r0,|L1.1072|
;;;943    				fs->free_clust++;
000426  6920              LDR      r0,[r4,#0x10]
000428  1c40              ADDS     r0,r0,#1
00042a  6120              STR      r0,[r4,#0x10]
;;;944    				fs->fsi_flag = 1;
00042c  2001              MOVS     r0,#1
00042e  7160              STRB     r0,[r4,#5]
                  |L1.1072|
;;;945    			}
;;;946    #if _USE_ERASE
;;;947    			if (ecl + 1 == nxt) {	/* Next cluster is contiguous */
;;;948    				ecl = nxt;
;;;949    			} else {				/* End of contiguous clusters */ 
;;;950    				resion[0] = clust2sect(fs, scl);					/* Start sector */
;;;951    				resion[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
;;;952    				disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, resion);		/* Erase the block */
;;;953    				scl = ecl = nxt;
;;;954    			}
;;;955    #endif
;;;956    			clst = nxt;	/* Next cluster */
000430  462e              MOV      r6,r5
                  |L1.1074|
000432  69a0              LDR      r0,[r4,#0x18]         ;935
000434  42b0              CMP      r0,r6                 ;935
000436  d8dc              BHI      |L1.1010|
                  |L1.1080|
000438  bf00              NOP                            ;937
                  |L1.1082|
;;;957    		}
;;;958    	}
;;;959    
;;;960    	return res;
00043a  4638              MOV      r0,r7
;;;961    }
00043c  e8bd81f0          POP      {r4-r8,pc}
;;;962    #endif
                          ENDP

                  create_chain PROC
;;;971    static
;;;972    DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
000440  e92d47f0          PUSH     {r4-r10,lr}
;;;973    	FATFS *fs,			/* File system object */
;;;974    	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
;;;975    )
;;;976    {
000444  4604              MOV      r4,r0
000446  4689              MOV      r9,r1
;;;977    	DWORD cs, ncl, scl;
;;;978    	FRESULT res;
;;;979    
;;;980    
;;;981    	if (clst == 0) {		/* Create a new chain */
000448  f1b90f00          CMP      r9,#0
00044c  d106              BNE      |L1.1116|
;;;982    		scl = fs->last_clust;			/* Get suggested start point */
00044e  68e7              LDR      r7,[r4,#0xc]
;;;983    		if (!scl || scl >= fs->n_fatent) scl = 1;
000450  b117              CBZ      r7,|L1.1112|
000452  69a0              LDR      r0,[r4,#0x18]
000454  42b8              CMP      r0,r7
000456  d811              BHI      |L1.1148|
                  |L1.1112|
000458  2701              MOVS     r7,#1
00045a  e00f              B        |L1.1148|
                  |L1.1116|
;;;984    	}
;;;985    	else {					/* Stretch the current chain */
;;;986    		cs = get_fat(fs, clst);			/* Check the cluster status */
00045c  4649              MOV      r1,r9
00045e  4620              MOV      r0,r4
000460  f7fffffe          BL       get_fat
000464  4606              MOV      r6,r0
;;;987    		if (cs < 2) return 1;			/* It is an invalid cluster */
000466  2e02              CMP      r6,#2
000468  d202              BCS      |L1.1136|
00046a  2001              MOVS     r0,#1
                  |L1.1132|
;;;988    		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
;;;989    		scl = clst;
;;;990    	}
;;;991    
;;;992    	ncl = scl;				/* Start cluster */
;;;993    	for (;;) {
;;;994    		ncl++;							/* Next cluster */
;;;995    		if (ncl >= fs->n_fatent) {		/* Wrap around */
;;;996    			ncl = 2;
;;;997    			if (ncl > scl) return 0;	/* No free cluster */
;;;998    		}
;;;999    		cs = get_fat(fs, ncl);			/* Get the cluster status */
;;;1000   		if (cs == 0) break;				/* Found a free cluster */
;;;1001   		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
;;;1002   			return cs;
;;;1003   		if (ncl == scl) return 0;		/* No free cluster */
;;;1004   	}
;;;1005   
;;;1006   	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
;;;1007   	if (res == FR_OK && clst != 0) {
;;;1008   		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
;;;1009   	}
;;;1010   	if (res == FR_OK) {
;;;1011   		fs->last_clust = ncl;			/* Update FSINFO */
;;;1012   		if (fs->free_clust != 0xFFFFFFFF) {
;;;1013   			fs->free_clust--;
;;;1014   			fs->fsi_flag = 1;
;;;1015   		}
;;;1016   	} else {
;;;1017   		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
;;;1018   	}
;;;1019   
;;;1020   	return ncl;		/* Return new cluster number or error code */
;;;1021   }
00046c  e8bd87f0          POP      {r4-r10,pc}
                  |L1.1136|
000470  69a0              LDR      r0,[r4,#0x18]         ;988
000472  42b0              CMP      r0,r6                 ;988
000474  d901              BLS      |L1.1146|
000476  4630              MOV      r0,r6                 ;988
000478  e7f8              B        |L1.1132|
                  |L1.1146|
00047a  464f              MOV      r7,r9                 ;989
                  |L1.1148|
00047c  463d              MOV      r5,r7                 ;992
00047e  bf00              NOP                            ;993
                  |L1.1152|
000480  1c6d              ADDS     r5,r5,#1              ;994
000482  69a0              LDR      r0,[r4,#0x18]         ;995
000484  42a8              CMP      r0,r5                 ;995
000486  d804              BHI      |L1.1170|
000488  2502              MOVS     r5,#2                 ;996
00048a  42bd              CMP      r5,r7                 ;997
00048c  d901              BLS      |L1.1170|
00048e  2000              MOVS     r0,#0                 ;997
000490  e7ec              B        |L1.1132|
                  |L1.1170|
000492  4629              MOV      r1,r5                 ;999
000494  4620              MOV      r0,r4                 ;999
000496  f7fffffe          BL       get_fat
00049a  4606              MOV      r6,r0                 ;999
00049c  b906              CBNZ     r6,|L1.1184|
00049e  e009              B        |L1.1204|
                  |L1.1184|
0004a0  1c70              ADDS     r0,r6,#1              ;1001
0004a2  b108              CBZ      r0,|L1.1192|
0004a4  2e01              CMP      r6,#1                 ;1001
0004a6  d101              BNE      |L1.1196|
                  |L1.1192|
0004a8  4630              MOV      r0,r6                 ;1002
0004aa  e7df              B        |L1.1132|
                  |L1.1196|
0004ac  42bd              CMP      r5,r7                 ;1003
0004ae  d1e7              BNE      |L1.1152|
0004b0  2000              MOVS     r0,#0                 ;1003
0004b2  e7db              B        |L1.1132|
                  |L1.1204|
0004b4  bf00              NOP                            ;1000
0004b6  f06f4270          MVN      r2,#0xf0000000        ;1006
0004ba  4629              MOV      r1,r5                 ;1006
0004bc  4620              MOV      r0,r4                 ;1006
0004be  f7fffffe          BL       put_fat
0004c2  4680              MOV      r8,r0                 ;1006
0004c4  f1b80f00          CMP      r8,#0                 ;1007
0004c8  d108              BNE      |L1.1244|
0004ca  f1b90f00          CMP      r9,#0                 ;1007
0004ce  d005              BEQ      |L1.1244|
0004d0  462a              MOV      r2,r5                 ;1008
0004d2  4649              MOV      r1,r9                 ;1008
0004d4  4620              MOV      r0,r4                 ;1008
0004d6  f7fffffe          BL       put_fat
0004da  4680              MOV      r8,r0                 ;1008
                  |L1.1244|
0004dc  f1b80f00          CMP      r8,#0                 ;1010
0004e0  d109              BNE      |L1.1270|
0004e2  60e5              STR      r5,[r4,#0xc]          ;1011
0004e4  6920              LDR      r0,[r4,#0x10]         ;1012
0004e6  1c40              ADDS     r0,r0,#1              ;1012
0004e8  b168              CBZ      r0,|L1.1286|
0004ea  6920              LDR      r0,[r4,#0x10]         ;1013
0004ec  1e40              SUBS     r0,r0,#1              ;1013
0004ee  6120              STR      r0,[r4,#0x10]         ;1013
0004f0  2001              MOVS     r0,#1                 ;1014
0004f2  7160              STRB     r0,[r4,#5]            ;1014
0004f4  e007              B        |L1.1286|
                  |L1.1270|
0004f6  f1b80f01          CMP      r8,#1                 ;1017
0004fa  d102              BNE      |L1.1282|
0004fc  f04f30ff          MOV      r0,#0xffffffff        ;1017
000500  e000              B        |L1.1284|
                  |L1.1282|
000502  2001              MOVS     r0,#1                 ;1017
                  |L1.1284|
000504  4605              MOV      r5,r0                 ;1017
                  |L1.1286|
000506  4628              MOV      r0,r5                 ;1020
000508  e7b0              B        |L1.1132|
;;;1022   #endif /* !_FS_READONLY */
                          ENDP

                  clmt_clust PROC
;;;1031   static
;;;1032   DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
00050a  b570              PUSH     {r4-r6,lr}
;;;1033   	FIL* fp,		/* Pointer to the file object */
;;;1034   	DWORD ofs		/* File offset to be converted to cluster# */
;;;1035   )
;;;1036   {
00050c  4603              MOV      r3,r0
00050e  460d              MOV      r5,r1
;;;1037   	DWORD cl, ncl, *tbl;
;;;1038   
;;;1039   
;;;1040   	tbl = fp->cltbl + 1;	/* Top of CLMT */
000510  6a58              LDR      r0,[r3,#0x24]
000512  1d02              ADDS     r2,r0,#4
;;;1041   	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
000514  0a68              LSRS     r0,r5,#9
000516  681e              LDR      r6,[r3,#0]
000518  78b6              LDRB     r6,[r6,#2]
00051a  fbb0f4f6          UDIV     r4,r0,r6
;;;1042   	for (;;) {
00051e  bf00              NOP      
                  |L1.1312|
;;;1043   		ncl = *tbl++;			/* Number of cluters in the fragment */
000520  ca02              LDM      r2!,{r1}
;;;1044   		if (!ncl) return 0;		/* End of table? (error) */
000522  b909              CBNZ     r1,|L1.1320|
000524  2000              MOVS     r0,#0
                  |L1.1318|
;;;1045   		if (cl < ncl) break;	/* In this fragment? */
;;;1046   		cl -= ncl; tbl++;		/* Next fragment */
;;;1047   	}
;;;1048   	return cl + *tbl;	/* Return the cluster number */
;;;1049   }
000526  bd70              POP      {r4-r6,pc}
                  |L1.1320|
000528  428c              CMP      r4,r1                 ;1045
00052a  d200              BCS      |L1.1326|
00052c  e002              B        |L1.1332|
                  |L1.1326|
00052e  1a64              SUBS     r4,r4,r1              ;1046
000530  1d12              ADDS     r2,r2,#4              ;1046
000532  e7f5              B        |L1.1312|
                  |L1.1332|
000534  bf00              NOP                            ;1045
000536  6810              LDR      r0,[r2,#0]            ;1048
000538  4420              ADD      r0,r0,r4              ;1048
00053a  e7f4              B        |L1.1318|
;;;1050   #endif	/* _USE_FASTSEEK */
                          ENDP

                  dir_sdi PROC
;;;1058   static
;;;1059   FRESULT dir_sdi (
00053c  e92d41f0          PUSH     {r4-r8,lr}
;;;1060   	DIR *dj,		/* Pointer to directory object */
;;;1061   	WORD idx		/* Directory index number */
;;;1062   )
;;;1063   {
000540  4604              MOV      r4,r0
000542  460e              MOV      r6,r1
;;;1064   	DWORD clst;
;;;1065   	WORD ic;
;;;1066   
;;;1067   
;;;1068   	dj->index = idx;
000544  80e6              STRH     r6,[r4,#6]
;;;1069   	clst = dj->sclust;
000546  68a5              LDR      r5,[r4,#8]
;;;1070   	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
000548  2d01              CMP      r5,#1
00054a  d003              BEQ      |L1.1364|
00054c  6820              LDR      r0,[r4,#0]
00054e  6980              LDR      r0,[r0,#0x18]
000550  42a8              CMP      r0,r5
000552  d802              BHI      |L1.1370|
                  |L1.1364|
;;;1071   		return FR_INT_ERR;
000554  2002              MOVS     r0,#2
                  |L1.1366|
;;;1072   	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
;;;1073   		clst = dj->fs->dirbase;
;;;1074   
;;;1075   	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
;;;1076   		dj->clust = clst;
;;;1077   		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
;;;1078   			return FR_INT_ERR;
;;;1079   		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
;;;1080   	}
;;;1081   	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
;;;1082   		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
;;;1083   		while (idx >= ic) {	/* Follow cluster chain */
;;;1084   			clst = get_fat(dj->fs, clst);				/* Get next cluster */
;;;1085   			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
;;;1086   			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
;;;1087   				return FR_INT_ERR;
;;;1088   			idx -= ic;
;;;1089   		}
;;;1090   		dj->clust = clst;
;;;1091   		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
;;;1092   	}
;;;1093   
;;;1094   	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
;;;1095   
;;;1096   	return FR_OK;	/* Seek succeeded */
;;;1097   }
000556  e8bd81f0          POP      {r4-r8,pc}
                  |L1.1370|
00055a  b92d              CBNZ     r5,|L1.1384|
00055c  6820              LDR      r0,[r4,#0]            ;1072
00055e  7800              LDRB     r0,[r0,#0]            ;1072
000560  2803              CMP      r0,#3                 ;1072
000562  d101              BNE      |L1.1384|
000564  6820              LDR      r0,[r4,#0]            ;1073
000566  6a45              LDR      r5,[r0,#0x24]         ;1073
                  |L1.1384|
000568  b965              CBNZ     r5,|L1.1412|
00056a  60e5              STR      r5,[r4,#0xc]          ;1076
00056c  6820              LDR      r0,[r4,#0]            ;1077
00056e  8900              LDRH     r0,[r0,#8]            ;1077
000570  42b0              CMP      r0,r6                 ;1077
000572  dc01              BGT      |L1.1400|
000574  2002              MOVS     r0,#2                 ;1078
000576  e7ee              B        |L1.1366|
                  |L1.1400|
000578  6820              LDR      r0,[r4,#0]            ;1079
00057a  6a40              LDR      r0,[r0,#0x24]         ;1079
00057c  eb001016          ADD      r0,r0,r6,LSR #4       ;1079
000580  6120              STR      r0,[r4,#0x10]         ;1079
000582  e020              B        |L1.1478|
                  |L1.1412|
000584  6820              LDR      r0,[r4,#0]            ;1082
000586  7880              LDRB     r0,[r0,#2]            ;1082
000588  0107              LSLS     r7,r0,#4              ;1082
00058a  e012              B        |L1.1458|
                  |L1.1420|
00058c  4629              MOV      r1,r5                 ;1084
00058e  6820              LDR      r0,[r4,#0]            ;1084
000590  f7fffffe          BL       get_fat
000594  4605              MOV      r5,r0                 ;1084
000596  1c68              ADDS     r0,r5,#1              ;1085
000598  b908              CBNZ     r0,|L1.1438|
00059a  2001              MOVS     r0,#1                 ;1085
00059c  e7db              B        |L1.1366|
                  |L1.1438|
00059e  2d02              CMP      r5,#2                 ;1086
0005a0  d303              BCC      |L1.1450|
0005a2  6820              LDR      r0,[r4,#0]            ;1086
0005a4  6980              LDR      r0,[r0,#0x18]         ;1086
0005a6  42a8              CMP      r0,r5                 ;1086
0005a8  d801              BHI      |L1.1454|
                  |L1.1450|
0005aa  2002              MOVS     r0,#2                 ;1087
0005ac  e7d3              B        |L1.1366|
                  |L1.1454|
0005ae  1bf0              SUBS     r0,r6,r7              ;1088
0005b0  b286              UXTH     r6,r0                 ;1088
                  |L1.1458|
0005b2  42be              CMP      r6,r7                 ;1083
0005b4  daea              BGE      |L1.1420|
0005b6  60e5              STR      r5,[r4,#0xc]          ;1090
0005b8  4629              MOV      r1,r5                 ;1091
0005ba  6820              LDR      r0,[r4,#0]            ;1091
0005bc  f7fffffe          BL       clust2sect
0005c0  eb001016          ADD      r0,r0,r6,LSR #4       ;1091
0005c4  6120              STR      r0,[r4,#0x10]         ;1091
                  |L1.1478|
0005c6  6820              LDR      r0,[r4,#0]            ;1094
0005c8  3030              ADDS     r0,r0,#0x30           ;1094
0005ca  f006010f          AND      r1,r6,#0xf            ;1094
0005ce  eb001041          ADD      r0,r0,r1,LSL #5       ;1094
0005d2  6160              STR      r0,[r4,#0x14]         ;1094
0005d4  2000              MOVS     r0,#0                 ;1096
0005d6  e7be              B        |L1.1366|
;;;1098   
                          ENDP

                  dir_next PROC
;;;1106   static
;;;1107   FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
0005d8  e92d41f0          PUSH     {r4-r8,lr}
;;;1108   	DIR *dj,		/* Pointer to directory object */
;;;1109   	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
;;;1110   )
;;;1111   {
0005dc  4604              MOV      r4,r0
0005de  4688              MOV      r8,r1
;;;1112   	DWORD clst;
;;;1113   	WORD i;
;;;1114   
;;;1115   
;;;1116   	i = dj->index + 1;
0005e0  88e0              LDRH     r0,[r4,#6]
0005e2  1c40              ADDS     r0,r0,#1
0005e4  b286              UXTH     r6,r0
;;;1117   	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
0005e6  b10e              CBZ      r6,|L1.1516|
0005e8  6920              LDR      r0,[r4,#0x10]
0005ea  b910              CBNZ     r0,|L1.1522|
                  |L1.1516|
;;;1118   		return FR_NO_FILE;
0005ec  2004              MOVS     r0,#4
                  |L1.1518|
;;;1119   
;;;1120   	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
;;;1121   		dj->sect++;					/* Next sector */
;;;1122   
;;;1123   		if (dj->clust == 0) {	/* Static table */
;;;1124   			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
;;;1125   				return FR_NO_FILE;
;;;1126   		}
;;;1127   		else {					/* Dynamic table */
;;;1128   			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
;;;1129   				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
;;;1130   				if (clst <= 1) return FR_INT_ERR;
;;;1131   				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
;;;1132   				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
;;;1133   #if !_FS_READONLY
;;;1134   					BYTE c;
;;;1135   					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
;;;1136   					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
;;;1137   					if (clst == 0) return FR_DENIED;			/* No free cluster */
;;;1138   					if (clst == 1) return FR_INT_ERR;
;;;1139   					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
;;;1140   					/* Clean-up stretched table */
;;;1141   					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
;;;1142   					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
;;;1143   					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
;;;1144   					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
;;;1145   						dj->fs->wflag = 1;
;;;1146   						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
;;;1147   						dj->fs->winsect++;
;;;1148   					}
;;;1149   					dj->fs->winsect -= c;						/* Rewind window address */
;;;1150   #else
;;;1151   					return FR_NO_FILE;			/* Report EOT */
;;;1152   #endif
;;;1153   				}
;;;1154   				dj->clust = clst;				/* Initialize data for new cluster */
;;;1155   				dj->sect = clust2sect(dj->fs, clst);
;;;1156   			}
;;;1157   		}
;;;1158   	}
;;;1159   
;;;1160   	dj->index = i;
;;;1161   	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
;;;1162   
;;;1163   	return FR_OK;
;;;1164   }
0005ee  e8bd81f0          POP      {r4-r8,pc}
                  |L1.1522|
0005f2  f006000f          AND      r0,r6,#0xf            ;1120
0005f6  2800              CMP      r0,#0                 ;1120
0005f8  d16f              BNE      |L1.1754|
0005fa  6920              LDR      r0,[r4,#0x10]         ;1121
0005fc  1c40              ADDS     r0,r0,#1              ;1121
0005fe  6120              STR      r0,[r4,#0x10]         ;1121
000600  68e0              LDR      r0,[r4,#0xc]          ;1123
000602  b928              CBNZ     r0,|L1.1552|
000604  6820              LDR      r0,[r4,#0]            ;1124
000606  8900              LDRH     r0,[r0,#8]            ;1124
000608  42b0              CMP      r0,r6                 ;1124
00060a  dc66              BGT      |L1.1754|
00060c  2004              MOVS     r0,#4                 ;1125
00060e  e7ee              B        |L1.1518|
                  |L1.1552|
000610  6820              LDR      r0,[r4,#0]            ;1128
000612  7880              LDRB     r0,[r0,#2]            ;1128
000614  1e40              SUBS     r0,r0,#1              ;1128
000616  ea001016          AND      r0,r0,r6,LSR #4       ;1128
00061a  2800              CMP      r0,#0                 ;1128
00061c  d15d              BNE      |L1.1754|
00061e  68e1              LDR      r1,[r4,#0xc]          ;1129
000620  6820              LDR      r0,[r4,#0]            ;1129
000622  f7fffffe          BL       get_fat
000626  4605              MOV      r5,r0                 ;1129
000628  2d01              CMP      r5,#1                 ;1130
00062a  d801              BHI      |L1.1584|
00062c  2002              MOVS     r0,#2                 ;1130
00062e  e7de              B        |L1.1518|
                  |L1.1584|
000630  1c68              ADDS     r0,r5,#1              ;1131
000632  b908              CBNZ     r0,|L1.1592|
000634  2001              MOVS     r0,#1                 ;1131
000636  e7da              B        |L1.1518|
                  |L1.1592|
000638  6820              LDR      r0,[r4,#0]            ;1132
00063a  6980              LDR      r0,[r0,#0x18]         ;1132
00063c  42a8              CMP      r0,r5                 ;1132
00063e  d846              BHI      |L1.1742|
000640  f1b80f00          CMP      r8,#0                 ;1135
000644  d101              BNE      |L1.1610|
000646  2004              MOVS     r0,#4                 ;1135
000648  e7d1              B        |L1.1518|
                  |L1.1610|
00064a  68e1              LDR      r1,[r4,#0xc]          ;1136
00064c  6820              LDR      r0,[r4,#0]            ;1136
00064e  f7fffffe          BL       create_chain
000652  4605              MOV      r5,r0                 ;1136
000654  b90d              CBNZ     r5,|L1.1626|
000656  2007              MOVS     r0,#7                 ;1137
000658  e7c9              B        |L1.1518|
                  |L1.1626|
00065a  2d01              CMP      r5,#1                 ;1138
00065c  d101              BNE      |L1.1634|
00065e  2002              MOVS     r0,#2                 ;1138
000660  e7c5              B        |L1.1518|
                  |L1.1634|
000662  1c68              ADDS     r0,r5,#1              ;1139
000664  b908              CBNZ     r0,|L1.1642|
000666  2001              MOVS     r0,#1                 ;1139
000668  e7c1              B        |L1.1518|
                  |L1.1642|
00066a  2100              MOVS     r1,#0                 ;1141
00066c  6820              LDR      r0,[r4,#0]            ;1141
00066e  f7fffffe          BL       move_window
000672  b108              CBZ      r0,|L1.1656|
000674  2001              MOVS     r0,#1                 ;1141
000676  e7ba              B        |L1.1518|
                  |L1.1656|
000678  6821              LDR      r1,[r4,#0]            ;1142
00067a  f1010030          ADD      r0,r1,#0x30           ;1142
00067e  f44f7200          MOV      r2,#0x200             ;1142
000682  2100              MOVS     r1,#0                 ;1142
000684  f7fffffe          BL       mem_set
000688  4629              MOV      r1,r5                 ;1143
00068a  6820              LDR      r0,[r4,#0]            ;1143
00068c  f7fffffe          BL       clust2sect
000690  6821              LDR      r1,[r4,#0]            ;1143
000692  62c8              STR      r0,[r1,#0x2c]         ;1143
000694  2700              MOVS     r7,#0                 ;1144
000696  e010              B        |L1.1722|
                  |L1.1688|
000698  2001              MOVS     r0,#1                 ;1145
00069a  6821              LDR      r1,[r4,#0]            ;1145
00069c  7108              STRB     r0,[r1,#4]            ;1145
00069e  2100              MOVS     r1,#0                 ;1146
0006a0  6820              LDR      r0,[r4,#0]            ;1146
0006a2  f7fffffe          BL       move_window
0006a6  b108              CBZ      r0,|L1.1708|
0006a8  2001              MOVS     r0,#1                 ;1146
0006aa  e7a0              B        |L1.1518|
                  |L1.1708|
0006ac  6820              LDR      r0,[r4,#0]            ;1147
0006ae  6ac0              LDR      r0,[r0,#0x2c]         ;1147
0006b0  1c40              ADDS     r0,r0,#1              ;1147
0006b2  6821              LDR      r1,[r4,#0]            ;1147
0006b4  62c8              STR      r0,[r1,#0x2c]         ;1147
0006b6  1c78              ADDS     r0,r7,#1              ;1144
0006b8  b2c7              UXTB     r7,r0                 ;1144
                  |L1.1722|
0006ba  6820              LDR      r0,[r4,#0]            ;1144
0006bc  7880              LDRB     r0,[r0,#2]            ;1144
0006be  42b8              CMP      r0,r7                 ;1144
0006c0  dcea              BGT      |L1.1688|
0006c2  6820              LDR      r0,[r4,#0]            ;1149
0006c4  6ac0              LDR      r0,[r0,#0x2c]         ;1149
0006c6  1bc0              SUBS     r0,r0,r7              ;1149
0006c8  6821              LDR      r1,[r4,#0]            ;1149
0006ca  62c8              STR      r0,[r1,#0x2c]         ;1149
0006cc  bf00              NOP                            ;1153
                  |L1.1742|
0006ce  60e5              STR      r5,[r4,#0xc]          ;1154
0006d0  4629              MOV      r1,r5                 ;1155
0006d2  6820              LDR      r0,[r4,#0]            ;1155
0006d4  f7fffffe          BL       clust2sect
0006d8  6120              STR      r0,[r4,#0x10]         ;1155
                  |L1.1754|
0006da  80e6              STRH     r6,[r4,#6]            ;1160
0006dc  6820              LDR      r0,[r4,#0]            ;1161
0006de  3030              ADDS     r0,r0,#0x30           ;1161
0006e0  f006010f          AND      r1,r6,#0xf            ;1161
0006e4  eb001041          ADD      r0,r0,r1,LSL #5       ;1161
0006e8  6160              STR      r0,[r4,#0x14]         ;1161
0006ea  2000              MOVS     r0,#0                 ;1163
0006ec  e77f              B        |L1.1518|
;;;1165   
                          ENDP

                  cmp_lfn PROC
;;;1177   static
;;;1178   int cmp_lfn (			/* 1:Matched, 0:Not matched */
0006ee  e92d47f0          PUSH     {r4-r10,lr}
;;;1179   	WCHAR *lfnbuf,		/* Pointer to the LFN to be compared */
;;;1180   	BYTE *dir			/* Pointer to the directory entry containing a part of LFN */
;;;1181   )
;;;1182   {
0006f2  4605              MOV      r5,r0
0006f4  460c              MOV      r4,r1
;;;1183   	UINT i, s;
;;;1184   	WCHAR wc, uc;
;;;1185   
;;;1186   
;;;1187   	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
0006f6  7820              LDRB     r0,[r4,#0]
0006f8  f0200040          BIC      r0,r0,#0x40
0006fc  1e40              SUBS     r0,r0,#1
0006fe  eb000180          ADD      r1,r0,r0,LSL #2
000702  eb0106c0          ADD      r6,r1,r0,LSL #3
;;;1188   	s = 0; wc = 1;
000706  2700              MOVS     r7,#0
000708  f04f0801          MOV      r8,#1
;;;1189   	do {
00070c  bf00              NOP      
                  |L1.1806|
;;;1190   		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
00070e  48fe              LDR      r0,|L1.2824|
000710  5dc0              LDRB     r0,[r0,r7]
000712  5c20              LDRB     r0,[r4,r0]
000714  49fc              LDR      r1,|L1.2824|
000716  5dc9              LDRB     r1,[r1,r7]
000718  4421              ADD      r1,r1,r4
00071a  7849              LDRB     r1,[r1,#1]
00071c  ea402901          ORR      r9,r0,r1,LSL #8
;;;1191   		if (wc) {	/* Last char has not been processed */
000720  f1b80f00          CMP      r8,#0
000724  d010              BEQ      |L1.1864|
;;;1192   			wc = ff_wtoupper(uc);		/* Convert it to upper case */
000726  4648              MOV      r0,r9
000728  f7fffffe          BL       ff_wtoupper
00072c  4680              MOV      r8,r0
;;;1193   			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
00072e  2eff              CMP      r6,#0xff
000730  d207              BCS      |L1.1858|
000732  4631              MOV      r1,r6
000734  1c76              ADDS     r6,r6,#1
000736  f8350011          LDRH     r0,[r5,r1,LSL #1]
00073a  f7fffffe          BL       ff_wtoupper
00073e  4540              CMP      r0,r8
000740  d008              BEQ      |L1.1876|
                  |L1.1858|
;;;1194   				return 0;				/* Not matched */
000742  2000              MOVS     r0,#0
                  |L1.1860|
;;;1195   		} else {
;;;1196   			if (uc != 0xFFFF) return 0;	/* Check filler */
;;;1197   		}
;;;1198   	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
;;;1199   
;;;1200   	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
;;;1201   		return 0;
;;;1202   
;;;1203   	return 1;						/* The part of LFN matched */
;;;1204   }
000744  e8bd87f0          POP      {r4-r10,pc}
                  |L1.1864|
000748  f64f70ff          MOV      r0,#0xffff            ;1196
00074c  4581              CMP      r9,r0                 ;1196
00074e  d001              BEQ      |L1.1876|
000750  2000              MOVS     r0,#0                 ;1196
000752  e7f7              B        |L1.1860|
                  |L1.1876|
000754  1c78              ADDS     r0,r7,#1              ;1198
000756  4607              MOV      r7,r0                 ;1198
000758  280d              CMP      r0,#0xd               ;1198
00075a  d3d8              BCC      |L1.1806|
00075c  7820              LDRB     r0,[r4,#0]            ;1200
00075e  f0000040          AND      r0,r0,#0x40           ;1200
000762  b138              CBZ      r0,|L1.1908|
000764  f1b80f00          CMP      r8,#0                 ;1200
000768  d004              BEQ      |L1.1908|
00076a  f8350016          LDRH     r0,[r5,r6,LSL #1]     ;1200
00076e  b108              CBZ      r0,|L1.1908|
000770  2000              MOVS     r0,#0                 ;1201
000772  e7e7              B        |L1.1860|
                  |L1.1908|
000774  2001              MOVS     r0,#1                 ;1203
000776  e7e5              B        |L1.1860|
;;;1205   
                          ENDP

                  pick_lfn PROC
;;;1208   static
;;;1209   int pick_lfn (			/* 1:Succeeded, 0:Buffer overflow */
000778  b5f0              PUSH     {r4-r7,lr}
;;;1210   	WCHAR *lfnbuf,		/* Pointer to the Unicode-LFN buffer */
;;;1211   	BYTE *dir			/* Pointer to the directory entry */
;;;1212   )
;;;1213   {
00077a  4603              MOV      r3,r0
;;;1214   	UINT i, s;
;;;1215   	WCHAR wc, uc;
;;;1216   
;;;1217   
;;;1218   	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
00077c  7808              LDRB     r0,[r1,#0]
00077e  f000003f          AND      r0,r0,#0x3f
000782  1e40              SUBS     r0,r0,#1
000784  eb000780          ADD      r7,r0,r0,LSL #2
000788  eb0702c0          ADD      r2,r7,r0,LSL #3
;;;1219   
;;;1220   	s = 0; wc = 1;
00078c  2500              MOVS     r5,#0
00078e  2601              MOVS     r6,#1
;;;1221   	do {
000790  bf00              NOP      
                  |L1.1938|
;;;1222   		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
000792  48dd              LDR      r0,|L1.2824|
000794  5d40              LDRB     r0,[r0,r5]
000796  5c08              LDRB     r0,[r1,r0]
000798  4fdb              LDR      r7,|L1.2824|
00079a  5d7f              LDRB     r7,[r7,r5]
00079c  440f              ADD      r7,r7,r1
00079e  787f              LDRB     r7,[r7,#1]
0007a0  ea402407          ORR      r4,r0,r7,LSL #8
;;;1223   		if (wc) {	/* Last char has not been processed */
0007a4  b14e              CBZ      r6,|L1.1978|
;;;1224   			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
0007a6  2aff              CMP      r2,#0xff
0007a8  d301              BCC      |L1.1966|
0007aa  2000              MOVS     r0,#0
                  |L1.1964|
;;;1225   			lfnbuf[i++] = wc = uc;			/* Store it */
;;;1226   		} else {
;;;1227   			if (uc != 0xFFFF) return 0;		/* Check filler */
;;;1228   		}
;;;1229   	} while (++s < 13);						/* Read all character in the entry */
;;;1230   
;;;1231   	if (dir[LDIR_Ord] & LLE) {				/* Put terminator if it is the last LFN part */
;;;1232   		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
;;;1233   		lfnbuf[i] = 0;
;;;1234   	}
;;;1235   
;;;1236   	return 1;
;;;1237   }
0007ac  bdf0              POP      {r4-r7,pc}
                  |L1.1966|
0007ae  4626              MOV      r6,r4                 ;1225
0007b0  4610              MOV      r0,r2                 ;1225
0007b2  1c52              ADDS     r2,r2,#1              ;1225
0007b4  f8234010          STRH     r4,[r3,r0,LSL #1]     ;1225
0007b8  e005              B        |L1.1990|
                  |L1.1978|
0007ba  f64f70ff          MOV      r0,#0xffff            ;1227
0007be  4284              CMP      r4,r0                 ;1227
0007c0  d001              BEQ      |L1.1990|
0007c2  2000              MOVS     r0,#0                 ;1227
0007c4  e7f2              B        |L1.1964|
                  |L1.1990|
0007c6  1c68              ADDS     r0,r5,#1              ;1229
0007c8  4605              MOV      r5,r0                 ;1229
0007ca  280d              CMP      r0,#0xd               ;1229
0007cc  d3e1              BCC      |L1.1938|
0007ce  7808              LDRB     r0,[r1,#0]            ;1231
0007d0  f0000040          AND      r0,r0,#0x40           ;1231
0007d4  b130              CBZ      r0,|L1.2020|
0007d6  2aff              CMP      r2,#0xff              ;1232
0007d8  d301              BCC      |L1.2014|
0007da  2000              MOVS     r0,#0                 ;1232
0007dc  e7e6              B        |L1.1964|
                  |L1.2014|
0007de  2000              MOVS     r0,#0                 ;1233
0007e0  f8230012          STRH     r0,[r3,r2,LSL #1]     ;1233
                  |L1.2020|
0007e4  2001              MOVS     r0,#1                 ;1236
0007e6  e7e1              B        |L1.1964|
;;;1238   
                          ENDP

                  fit_lfn PROC
;;;1241   static
;;;1242   void fit_lfn (
0007e8  b5f0              PUSH     {r4-r7,lr}
;;;1243   	const WCHAR *lfnbuf,	/* Pointer to the LFN buffer */
;;;1244   	BYTE *dir,				/* Pointer to the directory entry */
;;;1245   	BYTE ord,				/* LFN order (1-20) */
;;;1246   	BYTE sum				/* SFN sum */
;;;1247   )
;;;1248   {
0007ea  4604              MOV      r4,r0
0007ec  461d              MOV      r5,r3
;;;1249   	UINT i, s;
;;;1250   	WCHAR wc;
;;;1251   
;;;1252   
;;;1253   	dir[LDIR_Chksum] = sum;			/* Set check sum */
0007ee  734d              STRB     r5,[r1,#0xd]
;;;1254   	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
0007f0  270f              MOVS     r7,#0xf
0007f2  72cf              STRB     r7,[r1,#0xb]
;;;1255   	dir[LDIR_Type] = 0;
0007f4  2700              MOVS     r7,#0
0007f6  730f              STRB     r7,[r1,#0xc]
;;;1256   	ST_WORD(dir+LDIR_FstClusLO, 0);
0007f8  768f              STRB     r7,[r1,#0x1a]
0007fa  46bc              MOV      r12,r7
0007fc  f881c01b          STRB     r12,[r1,#0x1b]
;;;1257   
;;;1258   	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
000800  1e57              SUBS     r7,r2,#1
000802  eb070c87          ADD      r12,r7,r7,LSL #2
000806  eb0c06c7          ADD      r6,r12,r7,LSL #3
;;;1259   	s = wc = 0;
00080a  2700              MOVS     r7,#0
00080c  4638              MOV      r0,r7
00080e  463b              MOV      r3,r7
;;;1260   	do {
000810  bf00              NOP      
                  |L1.2066|
;;;1261   		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
000812  f64f77ff          MOV      r7,#0xffff
000816  42b8              CMP      r0,r7
000818  d003              BEQ      |L1.2082|
00081a  4637              MOV      r7,r6
00081c  1c76              ADDS     r6,r6,#1
00081e  f8340017          LDRH     r0,[r4,r7,LSL #1]
                  |L1.2082|
;;;1262   		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
000822  f8dfc2e4          LDR      r12,|L1.2824|
000826  f81cc003          LDRB     r12,[r12,r3]
00082a  f801000c          STRB     r0,[r1,r12]
00082e  1207              ASRS     r7,r0,#8
000830  f8dfc2d4          LDR      r12,|L1.2824|
000834  f81cc003          LDRB     r12,[r12,r3]
000838  448c              ADD      r12,r12,r1
00083a  f88c7001          STRB     r7,[r12,#1]
;;;1263   		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
00083e  b908              CBNZ     r0,|L1.2116|
000840  f64f70ff          MOV      r0,#0xffff
                  |L1.2116|
;;;1264   	} while (++s < 13);
000844  1c5f              ADDS     r7,r3,#1
000846  463b              MOV      r3,r7
000848  2f0d              CMP      r7,#0xd
00084a  d3e2              BCC      |L1.2066|
;;;1265   	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
00084c  f64f77ff          MOV      r7,#0xffff
000850  42b8              CMP      r0,r7
000852  d002              BEQ      |L1.2138|
000854  f8347016          LDRH     r7,[r4,r6,LSL #1]
000858  b90f              CBNZ     r7,|L1.2142|
                  |L1.2138|
00085a  f0420240          ORR      r2,r2,#0x40
                  |L1.2142|
;;;1266   	dir[LDIR_Ord] = ord;			/* Set the LFN order */
00085e  700a              STRB     r2,[r1,#0]
;;;1267   }
000860  bdf0              POP      {r4-r7,pc}
;;;1268   
                          ENDP

                  gen_numname PROC
;;;1277   #if _USE_LFN
;;;1278   void gen_numname (
000862  e92d47fc          PUSH     {r2-r10,lr}
;;;1279   	BYTE *dst,			/* Pointer to generated SFN */
;;;1280   	const BYTE *src,	/* Pointer to source SFN to be modified */
;;;1281   	const WCHAR *lfn,	/* Pointer to LFN */
;;;1282   	WORD seq			/* Sequence number */
;;;1283   )
;;;1284   {
000866  4607              MOV      r7,r0
000868  468a              MOV      r10,r1
00086a  4690              MOV      r8,r2
00086c  461c              MOV      r4,r3
;;;1285   	BYTE ns[8], c;
;;;1286   	UINT i, j;
;;;1287   
;;;1288   
;;;1289   	mem_cpy(dst, src, 11);
00086e  220b              MOVS     r2,#0xb
000870  4651              MOV      r1,r10
000872  4638              MOV      r0,r7
000874  f7fffffe          BL       mem_cpy
;;;1290   
;;;1291   	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
000878  2c05              CMP      r4,#5
00087a  dd0b              BLE      |L1.2196|
;;;1292   		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
00087c  bf00              NOP      
                  |L1.2174|
00087e  1060              ASRS     r0,r4,#1
000880  eb0031c4          ADD      r1,r0,r4,LSL #15
000884  f8382b02          LDRH     r2,[r8],#2
000888  1888              ADDS     r0,r1,r2
00088a  b284              UXTH     r4,r0
00088c  f8b80000          LDRH     r0,[r8,#0]
000890  2800              CMP      r0,#0
000892  d1f4              BNE      |L1.2174|
                  |L1.2196|
;;;1293   	}
;;;1294   
;;;1295   	/* itoa (hexdecimal) */
;;;1296   	i = 7;
000894  2607              MOVS     r6,#7
;;;1297   	do {
000896  bf00              NOP      
                  |L1.2200|
;;;1298   		c = (seq % 16) + '0';
000898  4620              MOV      r0,r4
00089a  17e1              ASRS     r1,r4,#31
00089c  eb047111          ADD      r1,r4,r1,LSR #28
0008a0  1109              ASRS     r1,r1,#4
0008a2  eba41101          SUB      r1,r4,r1,LSL #4
0008a6  3130              ADDS     r1,r1,#0x30
0008a8  f00109ff          AND      r9,r1,#0xff
;;;1299   		if (c > '9') c += 7;
0008ac  f1b90f39          CMP      r9,#0x39
0008b0  dd03              BLE      |L1.2234|
0008b2  f1090007          ADD      r0,r9,#7
0008b6  f00009ff          AND      r9,r0,#0xff
                  |L1.2234|
;;;1300   		ns[i--] = c;
0008ba  4630              MOV      r0,r6
0008bc  1e76              SUBS     r6,r6,#1
0008be  f80d9000          STRB     r9,[sp,r0]
;;;1301   		seq /= 16;
0008c2  4620              MOV      r0,r4
0008c4  17e1              ASRS     r1,r4,#31
0008c6  eb047111          ADD      r1,r4,r1,LSR #28
0008ca  f3c1140f          UBFX     r4,r1,#4,#16
;;;1302   	} while (seq);
0008ce  2c00              CMP      r4,#0
0008d0  d1e2              BNE      |L1.2200|
;;;1303   	ns[i] = '~';
0008d2  207e              MOVS     r0,#0x7e
0008d4  f80d0006          STRB     r0,[sp,r6]
;;;1304   
;;;1305   	/* Append the number */
;;;1306   	for (j = 0; j < i && dst[j] != ' '; j++) {
0008d8  2500              MOVS     r5,#0
0008da  e00b              B        |L1.2292|
                  |L1.2268|
;;;1307   		if (IsDBCS1(dst[j])) {
0008dc  5d78              LDRB     r0,[r7,r5]
0008de  2881              CMP      r0,#0x81
0008e0  db07              BLT      |L1.2290|
0008e2  5d78              LDRB     r0,[r7,r5]
0008e4  28fe              CMP      r0,#0xfe
0008e6  dc04              BGT      |L1.2290|
;;;1308   			if (j == i - 1) break;
0008e8  1e70              SUBS     r0,r6,#1
0008ea  42a8              CMP      r0,r5
0008ec  d100              BNE      |L1.2288|
0008ee  e006              B        |L1.2302|
                  |L1.2288|
;;;1309   			j++;
0008f0  1c6d              ADDS     r5,r5,#1
                  |L1.2290|
0008f2  1c6d              ADDS     r5,r5,#1              ;1306
                  |L1.2292|
0008f4  42b5              CMP      r5,r6                 ;1306
0008f6  d202              BCS      |L1.2302|
0008f8  5d78              LDRB     r0,[r7,r5]            ;1306
0008fa  2820              CMP      r0,#0x20              ;1306
0008fc  d1ee              BNE      |L1.2268|
                  |L1.2302|
0008fe  bf00              NOP                            ;1308
;;;1310   		}
;;;1311   	}
;;;1312   	do {
000900  bf00              NOP      
                  |L1.2306|
;;;1313   		dst[j++] = (i < 8) ? ns[i++] : ' ';
000902  2e08              CMP      r6,#8
000904  d204              BCS      |L1.2320|
000906  4630              MOV      r0,r6
000908  1c76              ADDS     r6,r6,#1
00090a  f81d0000          LDRB     r0,[sp,r0]
00090e  e000              B        |L1.2322|
                  |L1.2320|
000910  2020              MOVS     r0,#0x20
                  |L1.2322|
000912  4629              MOV      r1,r5
000914  1c6d              ADDS     r5,r5,#1
000916  5478              STRB     r0,[r7,r1]
;;;1314   	} while (j < 8);
000918  2d08              CMP      r5,#8
00091a  d3f2              BCC      |L1.2306|
;;;1315   }
00091c  e8bd87fc          POP      {r2-r10,pc}
;;;1316   #endif
                          ENDP

                  sum_sfn PROC
;;;1325   static
;;;1326   BYTE sum_sfn (
000920  b530              PUSH     {r4,r5,lr}
;;;1327   	const BYTE *dir		/* Ptr to directory entry */
;;;1328   )
;;;1329   {
000922  4601              MOV      r1,r0
;;;1330   	BYTE sum = 0;
000924  2000              MOVS     r0,#0
;;;1331   	UINT n = 11;
000926  220b              MOVS     r2,#0xb
;;;1332   
;;;1333   	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
000928  bf00              NOP      
                  |L1.2346|
00092a  1043              ASRS     r3,r0,#1
00092c  eb0314c0          ADD      r4,r3,r0,LSL #7
000930  f8115b01          LDRB     r5,[r1],#1
000934  1963              ADDS     r3,r4,r5
000936  b2d8              UXTB     r0,r3
000938  1e53              SUBS     r3,r2,#1
00093a  001a              MOVS     r2,r3
00093c  d1f5              BNE      |L1.2346|
;;;1334   	return sum;
;;;1335   }
00093e  bd30              POP      {r4,r5,pc}
;;;1336   #endif
                          ENDP

                  dir_find PROC
;;;1345   static
;;;1346   FRESULT dir_find (
000940  e92d47f0          PUSH     {r4-r10,lr}
;;;1347   	DIR *dj			/* Pointer to the directory object linked to the file name */
;;;1348   )
;;;1349   {
000944  4604              MOV      r4,r0
;;;1350   	FRESULT res;
;;;1351   	BYTE c, *dir;
;;;1352   #if _USE_LFN
;;;1353   	BYTE a, ord, sum;
;;;1354   #endif
;;;1355   
;;;1356   	res = dir_sdi(dj, 0);			/* Rewind directory object */
000946  2100              MOVS     r1,#0
000948  4620              MOV      r0,r4
00094a  f7fffffe          BL       dir_sdi
00094e  4607              MOV      r7,r0
;;;1357   	if (res != FR_OK) return res;
000950  b117              CBZ      r7,|L1.2392|
000952  4638              MOV      r0,r7
                  |L1.2388|
;;;1358   
;;;1359   #if _USE_LFN
;;;1360   	ord = sum = 0xFF;
;;;1361   #endif
;;;1362   	do {
;;;1363   		res = move_window(dj->fs, dj->sect);
;;;1364   		if (res != FR_OK) break;
;;;1365   		dir = dj->dir;					/* Ptr to the directory entry of current index */
;;;1366   		c = dir[DIR_Name];
;;;1367   		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
;;;1368   #if _USE_LFN	/* LFN configuration */
;;;1369   		a = dir[DIR_Attr] & AM_MASK;
;;;1370   		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
;;;1371   			ord = 0xFF;
;;;1372   		} else {
;;;1373   			if (a == AM_LFN) {			/* An LFN entry is found */
;;;1374   				if (dj->lfn) {
;;;1375   					if (c & LLE) {		/* Is it start of LFN sequence? */
;;;1376   						sum = dir[LDIR_Chksum];
;;;1377   						c &= ~LLE; ord = c;	/* LFN start order */
;;;1378   						dj->lfn_idx = dj->index;
;;;1379   					}
;;;1380   					/* Check validity of the LFN entry and compare it with given name */
;;;1381   					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
;;;1382   				}
;;;1383   			} else {					/* An SFN entry is found */
;;;1384   				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
;;;1385   				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
;;;1386   				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
;;;1387   			}
;;;1388   		}
;;;1389   #else		/* Non LFN configuration */
;;;1390   		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
;;;1391   			break;
;;;1392   #endif
;;;1393   		res = dir_next(dj, 0);		/* Next entry */
;;;1394   	} while (res == FR_OK);
;;;1395   
;;;1396   	return res;
;;;1397   }
000954  e8bd87f0          POP      {r4-r10,pc}
                  |L1.2392|
000958  f04f09ff          MOV      r9,#0xff              ;1360
00095c  46ca              MOV      r10,r9                ;1360
00095e  bf00              NOP                            ;1362
                  |L1.2400|
000960  6921              LDR      r1,[r4,#0x10]         ;1363
000962  6820              LDR      r0,[r4,#0]            ;1363
000964  f7fffffe          BL       move_window
000968  4607              MOV      r7,r0                 ;1363
00096a  b107              CBZ      r7,|L1.2414|
00096c  e054              B        |L1.2584|
                  |L1.2414|
00096e  6965              LDR      r5,[r4,#0x14]         ;1365
000970  782e              LDRB     r6,[r5,#0]            ;1366
000972  b90e              CBNZ     r6,|L1.2424|
000974  2704              MOVS     r7,#4                 ;1367
000976  e04f              B        |L1.2584|
                  |L1.2424|
000978  7ae8              LDRB     r0,[r5,#0xb]          ;1369
00097a  f000083f          AND      r8,r0,#0x3f           ;1369
00097e  2ee5              CMP      r6,#0xe5              ;1370
000980  d005              BEQ      |L1.2446|
000982  f0080008          AND      r0,r8,#8              ;1370
000986  b128              CBZ      r0,|L1.2452|
000988  f1b80f0f          CMP      r8,#0xf               ;1370
00098c  d002              BEQ      |L1.2452|
                  |L1.2446|
00098e  f04f09ff          MOV      r9,#0xff              ;1371
000992  e03a              B        |L1.2570|
                  |L1.2452|
000994  f1b80f0f          CMP      r8,#0xf               ;1373
000998  d11c              BNE      |L1.2516|
00099a  69e0              LDR      r0,[r4,#0x1c]         ;1374
00099c  b3a0              CBZ      r0,|L1.2568|
00099e  f0060040          AND      r0,r6,#0x40           ;1375
0009a2  b130              CBZ      r0,|L1.2482|
0009a4  f895a00d          LDRB     r10,[r5,#0xd]         ;1376
0009a8  f0260640          BIC      r6,r6,#0x40           ;1377
0009ac  46b1              MOV      r9,r6                 ;1377
0009ae  88e0              LDRH     r0,[r4,#6]            ;1378
0009b0  8420              STRH     r0,[r4,#0x20]         ;1378
                  |L1.2482|
0009b2  454e              CMP      r6,r9                 ;1381
0009b4  d10a              BNE      |L1.2508|
0009b6  7b68              LDRB     r0,[r5,#0xd]          ;1381
0009b8  4550              CMP      r0,r10                ;1381
0009ba  d107              BNE      |L1.2508|
0009bc  4629              MOV      r1,r5                 ;1381
0009be  69e0              LDR      r0,[r4,#0x1c]         ;1381
0009c0  f7fffffe          BL       cmp_lfn
0009c4  b110              CBZ      r0,|L1.2508|
0009c6  f1a90001          SUB      r0,r9,#1              ;1381
0009ca  e000              B        |L1.2510|
                  |L1.2508|
0009cc  20ff              MOVS     r0,#0xff              ;1381
                  |L1.2510|
0009ce  f00009ff          AND      r9,r0,#0xff           ;1381
0009d2  e01a              B        |L1.2570|
                  |L1.2516|
0009d4  f1b90f00          CMP      r9,#0                 ;1384
0009d8  d105              BNE      |L1.2534|
0009da  4628              MOV      r0,r5                 ;1384
0009dc  f7fffffe          BL       sum_sfn
0009e0  4550              CMP      r0,r10                ;1384
0009e2  d100              BNE      |L1.2534|
0009e4  e018              B        |L1.2584|
                  |L1.2534|
0009e6  f04f09ff          MOV      r9,#0xff              ;1385
0009ea  f64f70ff          MOV      r0,#0xffff            ;1385
0009ee  8420              STRH     r0,[r4,#0x20]         ;1385
0009f0  69a0              LDR      r0,[r4,#0x18]         ;1386
0009f2  7ac0              LDRB     r0,[r0,#0xb]          ;1386
0009f4  f0000001          AND      r0,r0,#1              ;1386
0009f8  b930              CBNZ     r0,|L1.2568|
0009fa  220b              MOVS     r2,#0xb               ;1386
0009fc  4628              MOV      r0,r5                 ;1386
0009fe  69a1              LDR      r1,[r4,#0x18]         ;1386
000a00  f7fffffe          BL       mem_cmp
000a04  b900              CBNZ     r0,|L1.2568|
000a06  e007              B        |L1.2584|
                  |L1.2568|
000a08  e7ff              B        |L1.2570|
                  |L1.2570|
000a0a  2100              MOVS     r1,#0                 ;1393
000a0c  4620              MOV      r0,r4                 ;1393
000a0e  f7fffffe          BL       dir_next
000a12  4607              MOV      r7,r0                 ;1393
000a14  2f00              CMP      r7,#0                 ;1394
000a16  d0a3              BEQ      |L1.2400|
                  |L1.2584|
000a18  bf00              NOP                            ;1364
000a1a  4638              MOV      r0,r7                 ;1396
000a1c  e79a              B        |L1.2388|
;;;1398   
                          ENDP

                  dir_read PROC
;;;1406   static
;;;1407   FRESULT dir_read (
000a1e  e92d47f0          PUSH     {r4-r10,lr}
;;;1408   	DIR *dj			/* Pointer to the directory object that pointing the entry to be read */
;;;1409   )
;;;1410   {
000a22  4604              MOV      r4,r0
;;;1411   	FRESULT res;
;;;1412   	BYTE c, *dir;
;;;1413   #if _USE_LFN
;;;1414   	BYTE a, ord = 0xFF, sum = 0xFF;
000a24  f04f09ff          MOV      r9,#0xff
000a28  46ca              MOV      r10,r9
;;;1415   #endif
;;;1416   
;;;1417   	res = FR_NO_FILE;
000a2a  2704              MOVS     r7,#4
;;;1418   	while (dj->sect) {
000a2c  e04c              B        |L1.2760|
                  |L1.2606|
;;;1419   		res = move_window(dj->fs, dj->sect);
000a2e  6921              LDR      r1,[r4,#0x10]
000a30  6820              LDR      r0,[r4,#0]
000a32  f7fffffe          BL       move_window
000a36  4607              MOV      r7,r0
;;;1420   		if (res != FR_OK) break;
000a38  b107              CBZ      r7,|L1.2620|
000a3a  e048              B        |L1.2766|
                  |L1.2620|
;;;1421   		dir = dj->dir;					/* Ptr to the directory entry of current index */
000a3c  6966              LDR      r6,[r4,#0x14]
;;;1422   		c = dir[DIR_Name];
000a3e  7835              LDRB     r5,[r6,#0]
;;;1423   		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
000a40  b90d              CBNZ     r5,|L1.2630|
000a42  2704              MOVS     r7,#4
000a44  e043              B        |L1.2766|
                  |L1.2630|
;;;1424   #if _USE_LFN	/* LFN configuration */
;;;1425   		a = dir[DIR_Attr] & AM_MASK;
000a46  7af0              LDRB     r0,[r6,#0xb]
000a48  f000083f          AND      r8,r0,#0x3f
;;;1426   		if (c == DDE || (!_FS_RPATH && c == '.') || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
000a4c  2de5              CMP      r5,#0xe5
000a4e  d007              BEQ      |L1.2656|
000a50  2d2e              CMP      r5,#0x2e
000a52  d005              BEQ      |L1.2656|
000a54  f0080008          AND      r0,r8,#8
000a58  b128              CBZ      r0,|L1.2662|
000a5a  f1b80f0f          CMP      r8,#0xf
000a5e  d002              BEQ      |L1.2662|
                  |L1.2656|
;;;1427   			ord = 0xFF;
000a60  f04f09ff          MOV      r9,#0xff
000a64  e029              B        |L1.2746|
                  |L1.2662|
;;;1428   		} else {
;;;1429   			if (a == AM_LFN) {			/* An LFN entry is found */
000a66  f1b80f0f          CMP      r8,#0xf
000a6a  d11a              BNE      |L1.2722|
;;;1430   				if (c & LLE) {			/* Is it start of LFN sequence? */
000a6c  f0050040          AND      r0,r5,#0x40
000a70  b130              CBZ      r0,|L1.2688|
;;;1431   					sum = dir[LDIR_Chksum];
000a72  f896a00d          LDRB     r10,[r6,#0xd]
;;;1432   					c &= ~LLE; ord = c;
000a76  f0250540          BIC      r5,r5,#0x40
000a7a  46a9              MOV      r9,r5
;;;1433   					dj->lfn_idx = dj->index;
000a7c  88e0              LDRH     r0,[r4,#6]
000a7e  8420              STRH     r0,[r4,#0x20]
                  |L1.2688|
;;;1434   				}
;;;1435   				/* Check LFN validity and capture it */
;;;1436   				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
000a80  454d              CMP      r5,r9
000a82  d10a              BNE      |L1.2714|
000a84  7b70              LDRB     r0,[r6,#0xd]
000a86  4550              CMP      r0,r10
000a88  d107              BNE      |L1.2714|
000a8a  4631              MOV      r1,r6
000a8c  69e0              LDR      r0,[r4,#0x1c]
000a8e  f7fffffe          BL       pick_lfn
000a92  b110              CBZ      r0,|L1.2714|
000a94  f1a90001          SUB      r0,r9,#1
000a98  e000              B        |L1.2716|
                  |L1.2714|
000a9a  20ff              MOVS     r0,#0xff
                  |L1.2716|
000a9c  f00009ff          AND      r9,r0,#0xff
000aa0  e00b              B        |L1.2746|
                  |L1.2722|
;;;1437   			} else {					/* An SFN entry is found */
;;;1438   				if (ord || sum != sum_sfn(dir))	/* Is there a valid LFN? */
000aa2  f1b90f00          CMP      r9,#0
000aa6  d104              BNE      |L1.2738|
000aa8  4630              MOV      r0,r6
000aaa  f7fffffe          BL       sum_sfn
000aae  4550              CMP      r0,r10
000ab0  d002              BEQ      |L1.2744|
                  |L1.2738|
;;;1439   					dj->lfn_idx = 0xFFFF;		/* It has no LFN. */
000ab2  f64f70ff          MOV      r0,#0xffff
000ab6  8420              STRH     r0,[r4,#0x20]
                  |L1.2744|
;;;1440   				break;
000ab8  e009              B        |L1.2766|
                  |L1.2746|
;;;1441   			}
;;;1442   		}
;;;1443   #else		/* Non LFN configuration */
;;;1444   		if (c != DDE && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
;;;1445   			break;
;;;1446   #endif
;;;1447   		res = dir_next(dj, 0);				/* Next entry */
000aba  2100              MOVS     r1,#0
000abc  4620              MOV      r0,r4
000abe  f7fffffe          BL       dir_next
000ac2  4607              MOV      r7,r0
;;;1448   		if (res != FR_OK) break;
000ac4  b107              CBZ      r7,|L1.2760|
000ac6  e002              B        |L1.2766|
                  |L1.2760|
000ac8  6920              LDR      r0,[r4,#0x10]         ;1418
000aca  2800              CMP      r0,#0                 ;1418
000acc  d1af              BNE      |L1.2606|
                  |L1.2766|
000ace  bf00              NOP                            ;1420
;;;1449   	}
;;;1450   
;;;1451   	if (res != FR_OK) dj->sect = 0;
000ad0  b10f              CBZ      r7,|L1.2774|
000ad2  2000              MOVS     r0,#0
000ad4  6120              STR      r0,[r4,#0x10]
                  |L1.2774|
;;;1452   
;;;1453   	return res;
000ad6  4638              MOV      r0,r7
;;;1454   }
000ad8  e8bd87f0          POP      {r4-r10,pc}
;;;1455   #endif
                          ENDP

                  dir_register PROC
;;;1463   static
;;;1464   FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
000adc  e92d4ff0          PUSH     {r4-r11,lr}
;;;1465   	DIR *dj				/* Target directory with object name to be created */
;;;1466   )
;;;1467   {
000ae0  b085              SUB      sp,sp,#0x14
000ae2  4604              MOV      r4,r0
;;;1468   	FRESULT res;
;;;1469   	BYTE c, *dir;
;;;1470   #if _USE_LFN	/* LFN configuration */
;;;1471   	WORD n, ne, is;
;;;1472   	BYTE sn[12], *fn, sum;
;;;1473   	WCHAR *lfn;
;;;1474   
;;;1475   
;;;1476   	fn = dj->fn; lfn = dj->lfn;
000ae4  f8d48018          LDR      r8,[r4,#0x18]
000ae8  f8d4b01c          LDR      r11,[r4,#0x1c]
;;;1477   	mem_cpy(sn, fn, 12);
000aec  220c              MOVS     r2,#0xc
000aee  4641              MOV      r1,r8
000af0  a801              ADD      r0,sp,#4
000af2  f7fffffe          BL       mem_cpy
;;;1478   
;;;1479   	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
000af6  bf00              NOP      
;;;1480   		return FR_INVALID_NAME;
;;;1481   
;;;1482   	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
000af8  f89d000f          LDRB     r0,[sp,#0xf]
000afc  f0000001          AND      r0,r0,#1
000b00  b350              CBZ      r0,|L1.2904|
;;;1483   		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
000b02  2000              MOVS     r0,#0
000b04  e002              B        |L1.2828|
000b06  0000              DCW      0x0000
                  |L1.2824|
                          DCD      LfnOfs
                  |L1.2828|
000b0c  f888000b          STRB     r0,[r8,#0xb]
000b10  61e0              STR      r0,[r4,#0x1c]
;;;1484   		for (n = 1; n < 100; n++) {
000b12  2701              MOVS     r7,#1
000b14  e00d              B        |L1.2866|
                  |L1.2838|
;;;1485   			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
000b16  463b              MOV      r3,r7
000b18  465a              MOV      r2,r11
000b1a  a901              ADD      r1,sp,#4
000b1c  4640              MOV      r0,r8
000b1e  f7fffffe          BL       gen_numname
;;;1486   			res = dir_find(dj);				/* Check if the name collides with existing SFN */
000b22  4620              MOV      r0,r4
000b24  f7fffffe          BL       dir_find
000b28  4605              MOV      r5,r0
;;;1487   			if (res != FR_OK) break;
000b2a  b105              CBZ      r5,|L1.2862|
000b2c  e003              B        |L1.2870|
                  |L1.2862|
000b2e  1c78              ADDS     r0,r7,#1              ;1484
000b30  b287              UXTH     r7,r0                 ;1484
                  |L1.2866|
000b32  2f64              CMP      r7,#0x64              ;1484
000b34  dbef              BLT      |L1.2838|
                  |L1.2870|
000b36  bf00              NOP      
;;;1488   		}
;;;1489   		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
000b38  2f64              CMP      r7,#0x64
000b3a  d103              BNE      |L1.2884|
000b3c  2007              MOVS     r0,#7
                  |L1.2878|
;;;1490   		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
;;;1491   		fn[NS] = sn[NS]; dj->lfn = lfn;
;;;1492   	}
;;;1493   
;;;1494   	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
;;;1495   		for (ne = 0; lfn[ne]; ne++) ;
;;;1496   		ne = (ne + 25) / 13;
;;;1497   	} else {						/* Otherwise reserve only an SFN entry. */
;;;1498   		ne = 1;
;;;1499   	}
;;;1500   
;;;1501   	/* Reserve contiguous entries */
;;;1502   	res = dir_sdi(dj, 0);
;;;1503   	if (res != FR_OK) return res;
;;;1504   	n = is = 0;
;;;1505   	do {
;;;1506   		res = move_window(dj->fs, dj->sect);
;;;1507   		if (res != FR_OK) break;
;;;1508   		c = *dj->dir;				/* Check the entry status */
;;;1509   		if (c == DDE || c == 0) {	/* Is it a blank entry? */
;;;1510   			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
;;;1511   			if (++n == ne) break;	/* A contiguous entry that required count is found */
;;;1512   		} else {
;;;1513   			n = 0;					/* Not a blank entry. Restart to search */
;;;1514   		}
;;;1515   		res = dir_next(dj, 1);		/* Next entry with table stretch */
;;;1516   	} while (res == FR_OK);
;;;1517   
;;;1518   	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
;;;1519   		res = dir_sdi(dj, is);
;;;1520   		if (res == FR_OK) {
;;;1521   			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
;;;1522   			ne--;
;;;1523   			do {					/* Store LFN entries in bottom first */
;;;1524   				res = move_window(dj->fs, dj->sect);
;;;1525   				if (res != FR_OK) break;
;;;1526   				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
;;;1527   				dj->fs->wflag = 1;
;;;1528   				res = dir_next(dj, 0);	/* Next entry */
;;;1529   			} while (res == FR_OK && --ne);
;;;1530   		}
;;;1531   	}
;;;1532   
;;;1533   #else	/* Non LFN configuration */
;;;1534   	res = dir_sdi(dj, 0);
;;;1535   	if (res == FR_OK) {
;;;1536   		do {	/* Find a blank entry for the SFN */
;;;1537   			res = move_window(dj->fs, dj->sect);
;;;1538   			if (res != FR_OK) break;
;;;1539   			c = *dj->dir;
;;;1540   			if (c == DDE || c == 0) break;	/* Is it a blank entry? */
;;;1541   			res = dir_next(dj, 1);			/* Next entry with table stretch */
;;;1542   		} while (res == FR_OK);
;;;1543   	}
;;;1544   #endif
;;;1545   
;;;1546   	if (res == FR_OK) {		/* Initialize the SFN entry */
;;;1547   		res = move_window(dj->fs, dj->sect);
;;;1548   		if (res == FR_OK) {
;;;1549   			dir = dj->dir;
;;;1550   			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
;;;1551   			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
;;;1552   #if _USE_LFN
;;;1553   			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
;;;1554   #endif
;;;1555   			dj->fs->wflag = 1;
;;;1556   		}
;;;1557   	}
;;;1558   
;;;1559   	return res;
;;;1560   }
000b3e  b005              ADD      sp,sp,#0x14
000b40  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.2884|
000b44  2d04              CMP      r5,#4                 ;1490
000b46  d001              BEQ      |L1.2892|
000b48  4628              MOV      r0,r5                 ;1490
000b4a  e7f8              B        |L1.2878|
                  |L1.2892|
000b4c  f89d000f          LDRB     r0,[sp,#0xf]          ;1491
000b50  f888000b          STRB     r0,[r8,#0xb]          ;1491
000b54  f8c4b01c          STR      r11,[r4,#0x1c]        ;1491
                  |L1.2904|
000b58  f89d000f          LDRB     r0,[sp,#0xf]          ;1494
000b5c  f0000002          AND      r0,r0,#2              ;1494
000b60  b170              CBZ      r0,|L1.2944|
000b62  2600              MOVS     r6,#0                 ;1495
000b64  e001              B        |L1.2922|
                  |L1.2918|
000b66  1c70              ADDS     r0,r6,#1              ;1495
000b68  b286              UXTH     r6,r0                 ;1495
                  |L1.2922|
000b6a  f83b0016          LDRH     r0,[r11,r6,LSL #1]    ;1495
000b6e  2800              CMP      r0,#0                 ;1495
000b70  d1f9              BNE      |L1.2918|
000b72  f1060019          ADD      r0,r6,#0x19           ;1496
000b76  210d              MOVS     r1,#0xd               ;1496
000b78  fb90f0f1          SDIV     r0,r0,r1              ;1496
000b7c  b286              UXTH     r6,r0                 ;1496
000b7e  e000              B        |L1.2946|
                  |L1.2944|
000b80  2601              MOVS     r6,#1                 ;1498
                  |L1.2946|
000b82  2100              MOVS     r1,#0                 ;1502
000b84  4620              MOV      r0,r4                 ;1502
000b86  f7fffffe          BL       dir_sdi
000b8a  4605              MOV      r5,r0                 ;1502
000b8c  b10d              CBZ      r5,|L1.2962|
000b8e  4628              MOV      r0,r5                 ;1503
000b90  e7d5              B        |L1.2878|
                  |L1.2962|
000b92  2000              MOVS     r0,#0                 ;1504
000b94  4607              MOV      r7,r0                 ;1504
000b96  9004              STR      r0,[sp,#0x10]         ;1504
000b98  bf00              NOP                            ;1505
                  |L1.2970|
000b9a  6921              LDR      r1,[r4,#0x10]         ;1506
000b9c  6820              LDR      r0,[r4,#0]            ;1506
000b9e  f7fffffe          BL       move_window
000ba2  4605              MOV      r5,r0                 ;1506
000ba4  b105              CBZ      r5,|L1.2984|
000ba6  e019              B        |L1.3036|
                  |L1.2984|
000ba8  6960              LDR      r0,[r4,#0x14]         ;1508
000baa  f8909000          LDRB     r9,[r0,#0]            ;1508
000bae  f1b90fe5          CMP      r9,#0xe5              ;1509
000bb2  d002              BEQ      |L1.3002|
000bb4  f1b90f00          CMP      r9,#0                 ;1509
000bb8  d108              BNE      |L1.3020|
                  |L1.3002|
000bba  b90f              CBNZ     r7,|L1.3008|
000bbc  88e0              LDRH     r0,[r4,#6]            ;1510
000bbe  9004              STR      r0,[sp,#0x10]         ;1510
                  |L1.3008|
000bc0  1c78              ADDS     r0,r7,#1              ;1511
000bc2  b280              UXTH     r0,r0                 ;1511
000bc4  4607              MOV      r7,r0                 ;1511
000bc6  42b0              CMP      r0,r6                 ;1511
000bc8  d101              BNE      |L1.3022|
000bca  e007              B        |L1.3036|
                  |L1.3020|
000bcc  2700              MOVS     r7,#0                 ;1513
                  |L1.3022|
000bce  2101              MOVS     r1,#1                 ;1515
000bd0  4620              MOV      r0,r4                 ;1515
000bd2  f7fffffe          BL       dir_next
000bd6  4605              MOV      r5,r0                 ;1515
000bd8  2d00              CMP      r5,#0                 ;1516
000bda  d0de              BEQ      |L1.2970|
                  |L1.3036|
000bdc  bf00              NOP                            ;1507
000bde  bb4d              CBNZ     r5,|L1.3124|
000be0  2e01              CMP      r6,#1                 ;1518
000be2  dd27              BLE      |L1.3124|
000be4  4620              MOV      r0,r4                 ;1519
000be6  9904              LDR      r1,[sp,#0x10]         ;1519
000be8  f7fffffe          BL       dir_sdi
000bec  4605              MOV      r5,r0                 ;1519
000bee  bb0d              CBNZ     r5,|L1.3124|
000bf0  69a0              LDR      r0,[r4,#0x18]         ;1521
000bf2  f7fffffe          BL       sum_sfn
000bf6  9000              STR      r0,[sp,#0]            ;1521
000bf8  1e70              SUBS     r0,r6,#1              ;1522
000bfa  b286              UXTH     r6,r0                 ;1522
000bfc  bf00              NOP                            ;1523
                  |L1.3070|
000bfe  6921              LDR      r1,[r4,#0x10]         ;1524
000c00  6820              LDR      r0,[r4,#0]            ;1524
000c02  f7fffffe          BL       move_window
000c06  4605              MOV      r5,r0                 ;1524
000c08  b105              CBZ      r5,|L1.3084|
000c0a  e012              B        |L1.3122|
                  |L1.3084|
000c0c  b2f2              UXTB     r2,r6                 ;1526
000c0e  6961              LDR      r1,[r4,#0x14]         ;1526
000c10  69e0              LDR      r0,[r4,#0x1c]         ;1526
000c12  9b00              LDR      r3,[sp,#0]            ;1526
000c14  f7fffffe          BL       fit_lfn
000c18  2001              MOVS     r0,#1                 ;1527
000c1a  6821              LDR      r1,[r4,#0]            ;1527
000c1c  7108              STRB     r0,[r1,#4]            ;1527
000c1e  2100              MOVS     r1,#0                 ;1528
000c20  4620              MOV      r0,r4                 ;1528
000c22  f7fffffe          BL       dir_next
000c26  4605              MOV      r5,r0                 ;1528
000c28  b91d              CBNZ     r5,|L1.3122|
000c2a  1e70              SUBS     r0,r6,#1              ;1529
000c2c  b280              UXTH     r0,r0                 ;1529
000c2e  0006              MOVS     r6,r0                 ;1529
000c30  d1e5              BNE      |L1.3070|
                  |L1.3122|
000c32  bf00              NOP                            ;1525
                  |L1.3124|
000c34  b9d5              CBNZ     r5,|L1.3180|
000c36  6921              LDR      r1,[r4,#0x10]         ;1547
000c38  6820              LDR      r0,[r4,#0]            ;1547
000c3a  f7fffffe          BL       move_window
000c3e  4605              MOV      r5,r0                 ;1547
000c40  b9a5              CBNZ     r5,|L1.3180|
000c42  f8d4a014          LDR      r10,[r4,#0x14]        ;1549
000c46  2220              MOVS     r2,#0x20              ;1550
000c48  2100              MOVS     r1,#0                 ;1550
000c4a  4650              MOV      r0,r10                ;1550
000c4c  f7fffffe          BL       mem_set
000c50  220b              MOVS     r2,#0xb               ;1551
000c52  4650              MOV      r0,r10                ;1551
000c54  69a1              LDR      r1,[r4,#0x18]         ;1551
000c56  f7fffffe          BL       mem_cpy
000c5a  69a0              LDR      r0,[r4,#0x18]         ;1553
000c5c  7ac0              LDRB     r0,[r0,#0xb]          ;1553
000c5e  f0000018          AND      r0,r0,#0x18           ;1553
000c62  f88a000c          STRB     r0,[r10,#0xc]         ;1553
000c66  2001              MOVS     r0,#1                 ;1555
000c68  6821              LDR      r1,[r4,#0]            ;1555
000c6a  7108              STRB     r0,[r1,#4]            ;1555
                  |L1.3180|
000c6c  4628              MOV      r0,r5                 ;1559
000c6e  e766              B        |L1.2878|
;;;1561   #endif /* !_FS_READONLY */
                          ENDP

                  dir_remove PROC
;;;1570   static
;;;1571   FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
000c70  b570              PUSH     {r4-r6,lr}
;;;1572   	DIR *dj				/* Directory object pointing the entry to be removed */
;;;1573   )
;;;1574   {
000c72  4604              MOV      r4,r0
;;;1575   	FRESULT res;
;;;1576   #if _USE_LFN	/* LFN configuration */
;;;1577   	WORD i;
;;;1578   
;;;1579   	i = dj->index;	/* SFN index */
000c74  88e6              LDRH     r6,[r4,#6]
;;;1580   	res = dir_sdi(dj, (WORD)((dj->lfn_idx == 0xFFFF) ? i : dj->lfn_idx));	/* Goto the SFN or top of the LFN entries */
000c76  8c20              LDRH     r0,[r4,#0x20]
000c78  f64f72ff          MOV      r2,#0xffff
000c7c  4290              CMP      r0,r2
000c7e  d101              BNE      |L1.3204|
000c80  4630              MOV      r0,r6
000c82  e000              B        |L1.3206|
                  |L1.3204|
000c84  8c20              LDRH     r0,[r4,#0x20]
                  |L1.3206|
000c86  4601              MOV      r1,r0
000c88  4620              MOV      r0,r4
000c8a  f7fffffe          BL       dir_sdi
000c8e  4605              MOV      r5,r0
;;;1581   	if (res == FR_OK) {
000c90  b9e5              CBNZ     r5,|L1.3276|
;;;1582   		do {
000c92  bf00              NOP      
                  |L1.3220|
;;;1583   			res = move_window(dj->fs, dj->sect);
000c94  6921              LDR      r1,[r4,#0x10]
000c96  6820              LDR      r0,[r4,#0]
000c98  f7fffffe          BL       move_window
000c9c  4605              MOV      r5,r0
;;;1584   			if (res != FR_OK) break;
000c9e  b105              CBZ      r5,|L1.3234|
000ca0  e010              B        |L1.3268|
                  |L1.3234|
;;;1585   			*dj->dir = DDE;			/* Mark the entry "deleted" */
000ca2  20e5              MOVS     r0,#0xe5
000ca4  6961              LDR      r1,[r4,#0x14]
000ca6  7008              STRB     r0,[r1,#0]
;;;1586   			dj->fs->wflag = 1;
000ca8  2001              MOVS     r0,#1
000caa  6821              LDR      r1,[r4,#0]
000cac  7108              STRB     r0,[r1,#4]
;;;1587   			if (dj->index >= i) break;	/* When reached SFN, all entries of the object has been deleted. */
000cae  88e0              LDRH     r0,[r4,#6]
000cb0  42b0              CMP      r0,r6
000cb2  db00              BLT      |L1.3254|
000cb4  e006              B        |L1.3268|
                  |L1.3254|
;;;1588   			res = dir_next(dj, 0);		/* Next entry */
000cb6  2100              MOVS     r1,#0
000cb8  4620              MOV      r0,r4
000cba  f7fffffe          BL       dir_next
000cbe  4605              MOV      r5,r0
;;;1589   		} while (res == FR_OK);
000cc0  2d00              CMP      r5,#0
000cc2  d0e7              BEQ      |L1.3220|
                  |L1.3268|
000cc4  bf00              NOP                            ;1584
;;;1590   		if (res == FR_NO_FILE) res = FR_INT_ERR;
000cc6  2d04              CMP      r5,#4
000cc8  d100              BNE      |L1.3276|
000cca  2502              MOVS     r5,#2
                  |L1.3276|
;;;1591   	}
;;;1592   
;;;1593   #else			/* Non LFN configuration */
;;;1594   	res = dir_sdi(dj, dj->index);
;;;1595   	if (res == FR_OK) {
;;;1596   		res = move_window(dj->fs, dj->sect);
;;;1597   		if (res == FR_OK) {
;;;1598   			*dj->dir = DDE;			/* Mark the entry "deleted" */
;;;1599   			dj->fs->wflag = 1;
;;;1600   		}
;;;1601   	}
;;;1602   #endif
;;;1603   
;;;1604   	return res;
000ccc  4628              MOV      r0,r5
;;;1605   }
000cce  bd70              POP      {r4-r6,pc}
;;;1606   #endif /* !_FS_READONLY */
                          ENDP

                  create_name PROC
;;;1615   static
;;;1616   FRESULT create_name (
000cd0  e92d4ff3          PUSH     {r0,r1,r4-r11,lr}
;;;1617   	DIR *dj,			/* Pointer to the directory object */
;;;1618   	const TCHAR **path	/* Pointer to pointer to the segment in the path string */
;;;1619   )
;;;1620   {
000cd4  b083              SUB      sp,sp,#0xc
000cd6  4681              MOV      r9,r0
;;;1621   #ifdef _EXCVT
;;;1622   	static const BYTE excvt[] = _EXCVT;	/* Upper conversion table for extended chars */
;;;1623   #endif
;;;1624   
;;;1625   #if _USE_LFN	/* LFN configuration */
;;;1626   	BYTE b, cf;
;;;1627   	WCHAR w, *lfn;
;;;1628   	UINT i, ni, si, di;
;;;1629   	const TCHAR *p;
;;;1630   
;;;1631   	/* Create LFN in Unicode */
;;;1632   	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
000cd8  9804              LDR      r0,[sp,#0x10]
000cda  6800              LDR      r0,[r0,#0]
000cdc  9001              STR      r0,[sp,#4]
000cde  e002              B        |L1.3302|
                  |L1.3296|
000ce0  9801              LDR      r0,[sp,#4]
000ce2  1c40              ADDS     r0,r0,#1
000ce4  9001              STR      r0,[sp,#4]
                  |L1.3302|
000ce6  9801              LDR      r0,[sp,#4]
000ce8  7800              LDRB     r0,[r0,#0]
000cea  282f              CMP      r0,#0x2f
000cec  d0f8              BEQ      |L1.3296|
000cee  9801              LDR      r0,[sp,#4]
000cf0  7800              LDRB     r0,[r0,#0]
000cf2  285c              CMP      r0,#0x5c
000cf4  d0f4              BEQ      |L1.3296|
;;;1633   	lfn = dj->lfn;
000cf6  f8d9a01c          LDR      r10,[r9,#0x1c]
;;;1634   	si = di = 0;
000cfa  2500              MOVS     r5,#0
000cfc  462f              MOV      r7,r5
;;;1635   	for (;;) {
000cfe  bf00              NOP      
                  |L1.3328|
;;;1636   		w = p[si++];					/* Get a character */
000d00  4638              MOV      r0,r7
000d02  1c7f              ADDS     r7,r7,#1
000d04  9901              LDR      r1,[sp,#4]
000d06  5c0c              LDRB     r4,[r1,r0]
;;;1637   		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
000d08  2c20              CMP      r4,#0x20
000d0a  db03              BLT      |L1.3348|
000d0c  2c2f              CMP      r4,#0x2f
000d0e  d001              BEQ      |L1.3348|
000d10  2c5c              CMP      r4,#0x5c
000d12  d100              BNE      |L1.3350|
                  |L1.3348|
000d14  e032              B        |L1.3452|
                  |L1.3350|
;;;1638   		if (di >= _MAX_LFN)				/* Reject too long name */
000d16  2dff              CMP      r5,#0xff
000d18  d303              BCC      |L1.3362|
;;;1639   			return FR_INVALID_NAME;
000d1a  2006              MOVS     r0,#6
                  |L1.3356|
;;;1640   #if !_LFN_UNICODE
;;;1641   		w &= 0xFF;
;;;1642   		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
;;;1643   			b = (BYTE)p[si++];			/* Get 2nd byte */
;;;1644   			if (!IsDBCS2(b))
;;;1645   				return FR_INVALID_NAME;	/* Reject invalid sequence */
;;;1646   			w = (w << 8) + b;			/* Create a DBC */
;;;1647   		}
;;;1648   		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
;;;1649   		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
;;;1650   #endif
;;;1651   		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
;;;1652   			return FR_INVALID_NAME;
;;;1653   		lfn[di++] = w;					/* Store the Unicode char */
;;;1654   	}
;;;1655   	*path = &p[si];						/* Return pointer to the next segment */
;;;1656   	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
;;;1657   #if _FS_RPATH
;;;1658   	if ((di == 1 && lfn[di-1] == '.') || /* Is this a dot entry? */
;;;1659   		(di == 2 && lfn[di-1] == '.' && lfn[di-2] == '.')) {
;;;1660   		lfn[di] = 0;
;;;1661   		for (i = 0; i < 11; i++)
;;;1662   			dj->fn[i] = (i < di) ? '.' : ' ';
;;;1663   		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
;;;1664   		return FR_OK;
;;;1665   	}
;;;1666   #endif
;;;1667   	while (di) {						/* Strip trailing spaces and dots */
;;;1668   		w = lfn[di-1];
;;;1669   		if (w != ' ' && w != '.') break;
;;;1670   		di--;
;;;1671   	}
;;;1672   	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
;;;1673   
;;;1674   	lfn[di] = 0;						/* LFN is created */
;;;1675   
;;;1676   	/* Create SFN in directory form */
;;;1677   	mem_set(dj->fn, ' ', 11);
;;;1678   	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
;;;1679   	if (si) cf |= NS_LOSS | NS_LFN;
;;;1680   	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
;;;1681   
;;;1682   	b = i = 0; ni = 8;
;;;1683   	for (;;) {
;;;1684   		w = lfn[si++];					/* Get an LFN char */
;;;1685   		if (!w) break;					/* Break on end of the LFN */
;;;1686   		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
;;;1687   			cf |= NS_LOSS | NS_LFN; continue;
;;;1688   		}
;;;1689   
;;;1690   		if (i >= ni || si == di) {		/* Extension or end of SFN */
;;;1691   			if (ni == 11) {				/* Long extension */
;;;1692   				cf |= NS_LOSS | NS_LFN; break;
;;;1693   			}
;;;1694   			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
;;;1695   			if (si > di) break;			/* No extension */
;;;1696   			si = di; i = 8; ni = 11;	/* Enter extension section */
;;;1697   			b <<= 2; continue;
;;;1698   		}
;;;1699   
;;;1700   		if (w >= 0x80) {				/* Non ASCII char */
;;;1701   #ifdef _EXCVT
;;;1702   			w = ff_convert(w, 0);		/* Unicode -> OEM code */
;;;1703   			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
;;;1704   #else
;;;1705   			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
;;;1706   #endif
;;;1707   			cf |= NS_LFN;				/* Force create LFN entry */
;;;1708   		}
;;;1709   
;;;1710   		if (_DF1S && w >= 0x100) {		/* Double byte char (always false on SBCS cfg) */
;;;1711   			if (i >= ni - 1) {
;;;1712   				cf |= NS_LOSS | NS_LFN; i = ni; continue;
;;;1713   			}
;;;1714   			dj->fn[i++] = (BYTE)(w >> 8);
;;;1715   		} else {						/* Single byte char */
;;;1716   			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
;;;1717   				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
;;;1718   			} else {
;;;1719   				if (IsUpper(w)) {		/* ASCII large capital */
;;;1720   					b |= 2;
;;;1721   				} else {
;;;1722   					if (IsLower(w)) {	/* ASCII small capital */
;;;1723   						b |= 1; w -= 0x20;
;;;1724   					}
;;;1725   				}
;;;1726   			}
;;;1727   		}
;;;1728   		dj->fn[i++] = (BYTE)w;
;;;1729   	}
;;;1730   
;;;1731   	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
;;;1732   
;;;1733   	if (ni == 8) b <<= 2;
;;;1734   	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
;;;1735   		cf |= NS_LFN;
;;;1736   	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
;;;1737   		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
;;;1738   		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
;;;1739   	}
;;;1740   
;;;1741   	dj->fn[NS] = cf;	/* SFN is created */
;;;1742   
;;;1743   	return FR_OK;
;;;1744   
;;;1745   
;;;1746   #else	/* Non-LFN configuration */
;;;1747   	BYTE b, c, d, *sfn;
;;;1748   	UINT ni, si, i;
;;;1749   	const char *p;
;;;1750   
;;;1751   	/* Create file name in directory form */
;;;1752   	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
;;;1753   	sfn = dj->fn;
;;;1754   	mem_set(sfn, ' ', 11);
;;;1755   	si = i = b = 0; ni = 8;
;;;1756   #if _FS_RPATH
;;;1757   	if (p[si] == '.') { /* Is this a dot entry? */
;;;1758   		for (;;) {
;;;1759   			c = (BYTE)p[si++];
;;;1760   			if (c != '.' || si >= 3) break;
;;;1761   			sfn[i++] = c;
;;;1762   		}
;;;1763   		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
;;;1764   		*path = &p[si];									/* Return pointer to the next segment */
;;;1765   		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
;;;1766   		return FR_OK;
;;;1767   	}
;;;1768   #endif
;;;1769   	for (;;) {
;;;1770   		c = (BYTE)p[si++];
;;;1771   		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
;;;1772   		if (c == '.' || i >= ni) {
;;;1773   			if (ni != 8 || c != '.') return FR_INVALID_NAME;
;;;1774   			i = 8; ni = 11;
;;;1775   			b <<= 2; continue;
;;;1776   		}
;;;1777   		if (c >= 0x80) {				/* Extended char? */
;;;1778   			b |= 3;						/* Eliminate NT flag */
;;;1779   #ifdef _EXCVT
;;;1780   			c = excvt[c-0x80];			/* Upper conversion (SBCS) */
;;;1781   #else
;;;1782   #if !_DF1S	/* ASCII only cfg */
;;;1783   			return FR_INVALID_NAME;
;;;1784   #endif
;;;1785   #endif
;;;1786   		}
;;;1787   		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
;;;1788   			d = (BYTE)p[si++];			/* Get 2nd byte */
;;;1789   			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
;;;1790   				return FR_INVALID_NAME;
;;;1791   			sfn[i++] = c;
;;;1792   			sfn[i++] = d;
;;;1793   		} else {						/* Single byte code */
;;;1794   			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
;;;1795   				return FR_INVALID_NAME;
;;;1796   			if (IsUpper(c)) {			/* ASCII large capital? */
;;;1797   				b |= 2;
;;;1798   			} else {
;;;1799   				if (IsLower(c)) {		/* ASCII small capital? */
;;;1800   					b |= 1; c -= 0x20;
;;;1801   				}
;;;1802   			}
;;;1803   			sfn[i++] = c;
;;;1804   		}
;;;1805   	}
;;;1806   	*path = &p[si];						/* Return pointer to the next segment */
;;;1807   	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
;;;1808   
;;;1809   	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
;;;1810   	if (sfn[0] == DDE) sfn[0] = NDDE;	/* When first char collides with DDE, replace it with 0x05 */
;;;1811   
;;;1812   	if (ni == 8) b <<= 2;
;;;1813   	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
;;;1814   	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
;;;1815   
;;;1816   	sfn[NS] = c;		/* Store NT flag, File name is created */
;;;1817   
;;;1818   	return FR_OK;
;;;1819   #endif
;;;1820   }
000d1c  b005              ADD      sp,sp,#0x14
000d1e  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.3362|
000d22  b2e4              UXTB     r4,r4                 ;1641
000d24  2c81              CMP      r4,#0x81              ;1642
000d26  db13              BLT      |L1.3408|
000d28  b2e0              UXTB     r0,r4                 ;1642
000d2a  28fe              CMP      r0,#0xfe              ;1642
000d2c  dc10              BGT      |L1.3408|
000d2e  4638              MOV      r0,r7                 ;1643
000d30  1c7f              ADDS     r7,r7,#1              ;1643
000d32  9901              LDR      r1,[sp,#4]            ;1643
000d34  5c0e              LDRB     r6,[r1,r0]            ;1643
000d36  2e40              CMP      r6,#0x40              ;1644
000d38  db01              BLT      |L1.3390|
000d3a  2e7e              CMP      r6,#0x7e              ;1644
000d3c  dd05              BLE      |L1.3402|
                  |L1.3390|
000d3e  2e80              CMP      r6,#0x80              ;1644
000d40  db01              BLT      |L1.3398|
000d42  2efe              CMP      r6,#0xfe              ;1644
000d44  dd01              BLE      |L1.3402|
                  |L1.3398|
000d46  2006              MOVS     r0,#6                 ;1645
000d48  e7e8              B        |L1.3356|
                  |L1.3402|
000d4a  eb062004          ADD      r0,r6,r4,LSL #8       ;1646
000d4e  b284              UXTH     r4,r0                 ;1646
                  |L1.3408|
000d50  2101              MOVS     r1,#1                 ;1648
000d52  4620              MOV      r0,r4                 ;1648
000d54  f7fffffe          BL       ff_convert
000d58  4604              MOV      r4,r0                 ;1648
000d5a  b90c              CBNZ     r4,|L1.3424|
000d5c  2006              MOVS     r0,#6                 ;1649
000d5e  e7dd              B        |L1.3356|
                  |L1.3424|
000d60  2c80              CMP      r4,#0x80              ;1651
000d62  da06              BGE      |L1.3442|
000d64  4621              MOV      r1,r4                 ;1651
000d66  a0fe              ADR      r0,|L1.4448|
000d68  f7fffffe          BL       chk_chr
000d6c  b108              CBZ      r0,|L1.3442|
000d6e  2006              MOVS     r0,#6                 ;1652
000d70  e7d4              B        |L1.3356|
                  |L1.3442|
000d72  4628              MOV      r0,r5                 ;1653
000d74  1c6d              ADDS     r5,r5,#1              ;1653
000d76  f82a4010          STRH     r4,[r10,r0,LSL #1]    ;1653
000d7a  e7c1              B        |L1.3328|
                  |L1.3452|
000d7c  bf00              NOP                            ;1637
000d7e  9801              LDR      r0,[sp,#4]            ;1655
000d80  19c1              ADDS     r1,r0,r7              ;1655
000d82  9804              LDR      r0,[sp,#0x10]         ;1655
000d84  6001              STR      r1,[r0,#0]            ;1655
000d86  2c20              CMP      r4,#0x20              ;1656
000d88  da01              BGE      |L1.3470|
000d8a  2004              MOVS     r0,#4                 ;1656
000d8c  e000              B        |L1.3472|
                  |L1.3470|
000d8e  2000              MOVS     r0,#0                 ;1656
                  |L1.3472|
000d90  4680              MOV      r8,r0                 ;1656
000d92  e008              B        |L1.3494|
                  |L1.3476|
000d94  1e68              SUBS     r0,r5,#1              ;1668
000d96  f83a4010          LDRH     r4,[r10,r0,LSL #1]    ;1668
000d9a  2c20              CMP      r4,#0x20              ;1669
000d9c  d002              BEQ      |L1.3492|
000d9e  2c2e              CMP      r4,#0x2e              ;1669
000da0  d000              BEQ      |L1.3492|
000da2  e002              B        |L1.3498|
                  |L1.3492|
000da4  1e6d              SUBS     r5,r5,#1              ;1670
                  |L1.3494|
000da6  2d00              CMP      r5,#0                 ;1667
000da8  d1f4              BNE      |L1.3476|
                  |L1.3498|
000daa  bf00              NOP                            ;1669
000dac  b90d              CBNZ     r5,|L1.3506|
000dae  2006              MOVS     r0,#6                 ;1672
000db0  e7b4              B        |L1.3356|
                  |L1.3506|
000db2  2000              MOVS     r0,#0                 ;1674
000db4  f82a0015          STRH     r0,[r10,r5,LSL #1]    ;1674
000db8  220b              MOVS     r2,#0xb               ;1677
000dba  2120              MOVS     r1,#0x20              ;1677
000dbc  f8d90018          LDR      r0,[r9,#0x18]         ;1677
000dc0  f7fffffe          BL       mem_set
000dc4  2700              MOVS     r7,#0                 ;1678
000dc6  e000              B        |L1.3530|
                  |L1.3528|
000dc8  1c7f              ADDS     r7,r7,#1              ;1678
                  |L1.3530|
000dca  f83a0017          LDRH     r0,[r10,r7,LSL #1]    ;1678
000dce  2820              CMP      r0,#0x20              ;1678
000dd0  d0fa              BEQ      |L1.3528|
000dd2  f83a0017          LDRH     r0,[r10,r7,LSL #1]    ;1678
000dd6  282e              CMP      r0,#0x2e              ;1678
000dd8  d0f6              BEQ      |L1.3528|
000dda  b10f              CBZ      r7,|L1.3552|
000ddc  f0480803          ORR      r8,r8,#3              ;1679
                  |L1.3552|
000de0  e000              B        |L1.3556|
                  |L1.3554|
000de2  1e6d              SUBS     r5,r5,#1              ;1680
                  |L1.3556|
000de4  b125              CBZ      r5,|L1.3568|
000de6  1e68              SUBS     r0,r5,#1              ;1680
000de8  f83a0010          LDRH     r0,[r10,r0,LSL #1]    ;1680
000dec  282e              CMP      r0,#0x2e              ;1680
000dee  d1f8              BNE      |L1.3554|
                  |L1.3568|
000df0  2000              MOVS     r0,#0                 ;1682
000df2  4606              MOV      r6,r0                 ;1682
000df4  9002              STR      r0,[sp,#8]            ;1682
000df6  f04f0b08          MOV      r11,#8                ;1682
000dfa  bf00              NOP                            ;1683
                  |L1.3580|
000dfc  4638              MOV      r0,r7                 ;1684
000dfe  1c7f              ADDS     r7,r7,#1              ;1684
000e00  f83a4010          LDRH     r4,[r10,r0,LSL #1]    ;1684
000e04  b904              CBNZ     r4,|L1.3592|
000e06  e063              B        |L1.3792|
                  |L1.3592|
000e08  2c20              CMP      r4,#0x20              ;1686
000e0a  d003              BEQ      |L1.3604|
000e0c  2c2e              CMP      r4,#0x2e              ;1686
000e0e  d104              BNE      |L1.3610|
000e10  42af              CMP      r7,r5                 ;1686
000e12  d002              BEQ      |L1.3610|
                  |L1.3604|
000e14  f0480803          ORR      r8,r8,#3              ;1687
000e18  e7f0              B        |L1.3580|
                  |L1.3610|
000e1a  9802              LDR      r0,[sp,#8]            ;1690
000e1c  4558              CMP      r0,r11                ;1690
000e1e  d201              BCS      |L1.3620|
000e20  42af              CMP      r7,r5                 ;1690
000e22  d114              BNE      |L1.3662|
                  |L1.3620|
000e24  f1bb0f0b          CMP      r11,#0xb              ;1691
000e28  d102              BNE      |L1.3632|
000e2a  f0480803          ORR      r8,r8,#3              ;1692
000e2e  e04f              B        |L1.3792|
                  |L1.3632|
000e30  42af              CMP      r7,r5                 ;1694
000e32  d001              BEQ      |L1.3640|
000e34  f0480803          ORR      r8,r8,#3              ;1694
                  |L1.3640|
000e38  42af              CMP      r7,r5                 ;1695
000e3a  d900              BLS      |L1.3646|
000e3c  e048              B        |L1.3792|
                  |L1.3646|
000e3e  462f              MOV      r7,r5                 ;1696
000e40  2008              MOVS     r0,#8                 ;1696
000e42  9002              STR      r0,[sp,#8]            ;1696
000e44  f04f0b0b          MOV      r11,#0xb              ;1696
000e48  06b0              LSLS     r0,r6,#26             ;1697
000e4a  0e06              LSRS     r6,r0,#24             ;1697
000e4c  e7d6              B        |L1.3580|
                  |L1.3662|
000e4e  2c80              CMP      r4,#0x80              ;1700
000e50  db09              BLT      |L1.3686|
000e52  4620              MOV      r0,r4                 ;1705
000e54  f7fffffe          BL       ff_wtoupper
000e58  2100              MOVS     r1,#0                 ;1705
000e5a  9000              STR      r0,[sp,#0]            ;1705
000e5c  f7fffffe          BL       ff_convert
000e60  4604              MOV      r4,r0                 ;1705
000e62  f0480802          ORR      r8,r8,#2              ;1707
                  |L1.3686|
000e66  2cff              CMP      r4,#0xff              ;1710
000e68  dd11              BLE      |L1.3726|
000e6a  f1ab0001          SUB      r0,r11,#1             ;1711
000e6e  9902              LDR      r1,[sp,#8]            ;1711
000e70  4288              CMP      r0,r1                 ;1711
000e72  d804              BHI      |L1.3710|
000e74  f0480803          ORR      r8,r8,#3              ;1712
000e78  f8cdb008          STR      r11,[sp,#8]           ;1712
000e7c  e7be              B        |L1.3580|
                  |L1.3710|
000e7e  1222              ASRS     r2,r4,#8              ;1714
000e80  f8d93018          LDR      r3,[r9,#0x18]         ;1714
000e84  9802              LDR      r0,[sp,#8]            ;1714
000e86  1c41              ADDS     r1,r0,#1              ;1714
000e88  9102              STR      r1,[sp,#8]            ;1714
000e8a  541a              STRB     r2,[r3,r0]            ;1714
000e8c  e019              B        |L1.3778|
                  |L1.3726|
000e8e  b124              CBZ      r4,|L1.3738|
000e90  4621              MOV      r1,r4                 ;1716
000e92  a0b6              ADR      r0,|L1.4460|
000e94  f7fffffe          BL       chk_chr
000e98  b118              CBZ      r0,|L1.3746|
                  |L1.3738|
000e9a  245f              MOVS     r4,#0x5f              ;1717
000e9c  f0480803          ORR      r8,r8,#3              ;1717
000ea0  e00f              B        |L1.3778|
                  |L1.3746|
000ea2  2c41              CMP      r4,#0x41              ;1719
000ea4  db04              BLT      |L1.3760|
000ea6  2c5a              CMP      r4,#0x5a              ;1719
000ea8  dc02              BGT      |L1.3760|
000eaa  f0460602          ORR      r6,r6,#2              ;1720
000eae  e008              B        |L1.3778|
                  |L1.3760|
000eb0  2c61              CMP      r4,#0x61              ;1722
000eb2  db06              BLT      |L1.3778|
000eb4  2c7a              CMP      r4,#0x7a              ;1722
000eb6  dc04              BGT      |L1.3778|
000eb8  f0460601          ORR      r6,r6,#1              ;1723
000ebc  f1a40020          SUB      r0,r4,#0x20           ;1723
000ec0  b284              UXTH     r4,r0                 ;1723
                  |L1.3778|
000ec2  f8d93018          LDR      r3,[r9,#0x18]         ;1728
000ec6  9802              LDR      r0,[sp,#8]            ;1728
000ec8  1c41              ADDS     r1,r0,#1              ;1728
000eca  9102              STR      r1,[sp,#8]            ;1728
000ecc  541c              STRB     r4,[r3,r0]            ;1728
000ece  e795              B        |L1.3580|
                  |L1.3792|
000ed0  bf00              NOP                            ;1685
000ed2  f8d90018          LDR      r0,[r9,#0x18]         ;1731
000ed6  7800              LDRB     r0,[r0,#0]            ;1731
000ed8  28e5              CMP      r0,#0xe5              ;1731
000eda  d103              BNE      |L1.3812|
000edc  2005              MOVS     r0,#5                 ;1731
000ede  f8d91018          LDR      r1,[r9,#0x18]         ;1731
000ee2  7008              STRB     r0,[r1,#0]            ;1731
                  |L1.3812|
000ee4  f1bb0f08          CMP      r11,#8                ;1733
000ee8  d101              BNE      |L1.3822|
000eea  06b0              LSLS     r0,r6,#26             ;1733
000eec  0e06              LSRS     r6,r0,#24             ;1733
                  |L1.3822|
000eee  f006000c          AND      r0,r6,#0xc            ;1734
000ef2  280c              CMP      r0,#0xc               ;1734
000ef4  d003              BEQ      |L1.3838|
000ef6  f0060003          AND      r0,r6,#3              ;1734
000efa  2803              CMP      r0,#3                 ;1734
000efc  d101              BNE      |L1.3842|
                  |L1.3838|
000efe  f0480802          ORR      r8,r8,#2              ;1735
                  |L1.3842|
000f02  f0080002          AND      r0,r8,#2              ;1736
000f06  b958              CBNZ     r0,|L1.3872|
000f08  f0060003          AND      r0,r6,#3              ;1737
000f0c  2801              CMP      r0,#1                 ;1737
000f0e  d101              BNE      |L1.3860|
000f10  f0480810          ORR      r8,r8,#0x10           ;1737
                  |L1.3860|
000f14  f006000c          AND      r0,r6,#0xc            ;1738
000f18  2804              CMP      r0,#4                 ;1738
000f1a  d101              BNE      |L1.3872|
000f1c  f0480808          ORR      r8,r8,#8              ;1738
                  |L1.3872|
000f20  f8d90018          LDR      r0,[r9,#0x18]         ;1741
000f24  f880800b          STRB     r8,[r0,#0xb]          ;1741
000f28  2000              MOVS     r0,#0                 ;1743
000f2a  e6f7              B        |L1.3356|
;;;1821   
                          ENDP

                  get_fileinfo PROC
;;;1829   static
;;;1830   void get_fileinfo (		/* No return code */
000f2c  e92d5ffc          PUSH     {r2-r12,lr}
;;;1831   	DIR *dj,			/* Pointer to the directory object */
;;;1832   	FILINFO *fno	 	/* Pointer to the file information to be filled */
;;;1833   )
;;;1834   {
000f30  4681              MOV      r9,r0
000f32  460f              MOV      r7,r1
;;;1835   	UINT i;
;;;1836   	BYTE nt, *dir;
;;;1837   	TCHAR *p, c;
;;;1838   
;;;1839   
;;;1840   	p = fno->fname;
000f34  f1070809          ADD      r8,r7,#9
;;;1841   	if (dj->sect) {
000f38  f8d90010          LDR      r0,[r9,#0x10]
000f3c  2800              CMP      r0,#0
000f3e  d051              BEQ      |L1.4068|
;;;1842   		dir = dj->dir;
000f40  f8d94014          LDR      r4,[r9,#0x14]
;;;1843   		nt = dir[DIR_NTres];		/* NT flag */
000f44  7b20              LDRB     r0,[r4,#0xc]
000f46  9001              STR      r0,[sp,#4]
;;;1844   		for (i = 0; i < 8; i++) {	/* Copy name body */
000f48  2500              MOVS     r5,#0
000f4a  e014              B        |L1.3958|
                  |L1.3916|
;;;1845   			c = dir[i];
000f4c  5d66              LDRB     r6,[r4,r5]
;;;1846   			if (c == ' ') break;
000f4e  2e20              CMP      r6,#0x20
000f50  d100              BNE      |L1.3924|
000f52  e012              B        |L1.3962|
                  |L1.3924|
;;;1847   			if (c == NDDE) c = (TCHAR)DDE;
000f54  2e05              CMP      r6,#5
000f56  d100              BNE      |L1.3930|
000f58  26e5              MOVS     r6,#0xe5
                  |L1.3930|
;;;1848   			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
000f5a  9801              LDR      r0,[sp,#4]
000f5c  f0000008          AND      r0,r0,#8
000f60  b130              CBZ      r0,|L1.3952|
000f62  2e41              CMP      r6,#0x41
000f64  db04              BLT      |L1.3952|
000f66  2e5a              CMP      r6,#0x5a
000f68  dc02              BGT      |L1.3952|
000f6a  f1060020          ADD      r0,r6,#0x20
000f6e  b2c6              UXTB     r6,r0
                  |L1.3952|
;;;1849   #if _LFN_UNICODE
;;;1850   			if (IsDBCS1(c) && i < 7 && IsDBCS2(dir[i+1]))
;;;1851   				c = (c << 8) | dir[++i];
;;;1852   			c = ff_convert(c, 1);
;;;1853   			if (!c) c = '?';
;;;1854   #endif
;;;1855   			*p++ = c;
000f70  f8086b01          STRB     r6,[r8],#1
000f74  1c6d              ADDS     r5,r5,#1              ;1844
                  |L1.3958|
000f76  2d08              CMP      r5,#8                 ;1844
000f78  d3e8              BCC      |L1.3916|
                  |L1.3962|
000f7a  bf00              NOP                            ;1846
;;;1856   		}
;;;1857   		if (dir[8] != ' ') {		/* Copy name extension */
000f7c  7a20              LDRB     r0,[r4,#8]
000f7e  2820              CMP      r0,#0x20
000f80  d019              BEQ      |L1.4022|
;;;1858   			*p++ = '.';
000f82  202e              MOVS     r0,#0x2e
000f84  f8080b01          STRB     r0,[r8],#1
;;;1859   			for (i = 8; i < 11; i++) {
000f88  2508              MOVS     r5,#8
000f8a  e011              B        |L1.4016|
                  |L1.3980|
;;;1860   				c = dir[i];
000f8c  5d66              LDRB     r6,[r4,r5]
;;;1861   				if (c == ' ') break;
000f8e  2e20              CMP      r6,#0x20
000f90  d100              BNE      |L1.3988|
000f92  e00f              B        |L1.4020|
                  |L1.3988|
;;;1862   				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
000f94  9801              LDR      r0,[sp,#4]
000f96  f0000010          AND      r0,r0,#0x10
000f9a  b130              CBZ      r0,|L1.4010|
000f9c  2e41              CMP      r6,#0x41
000f9e  db04              BLT      |L1.4010|
000fa0  2e5a              CMP      r6,#0x5a
000fa2  dc02              BGT      |L1.4010|
000fa4  f1060020          ADD      r0,r6,#0x20
000fa8  b2c6              UXTB     r6,r0
                  |L1.4010|
;;;1863   #if _LFN_UNICODE
;;;1864   				if (IsDBCS1(c) && i < 10 && IsDBCS2(dir[i+1]))
;;;1865   					c = (c << 8) | dir[++i];
;;;1866   				c = ff_convert(c, 1);
;;;1867   				if (!c) c = '?';
;;;1868   #endif
;;;1869   				*p++ = c;
000faa  f8086b01          STRB     r6,[r8],#1
000fae  1c6d              ADDS     r5,r5,#1              ;1859
                  |L1.4016|
000fb0  2d0b              CMP      r5,#0xb               ;1859
000fb2  d3eb              BCC      |L1.3980|
                  |L1.4020|
000fb4  bf00              NOP                            ;1861
                  |L1.4022|
;;;1870   			}
;;;1871   		}
;;;1872   		fno->fattrib = dir[DIR_Attr];				/* Attribute */
000fb6  7ae0              LDRB     r0,[r4,#0xb]
000fb8  7238              STRB     r0,[r7,#8]
;;;1873   		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
000fba  7fe0              LDRB     r0,[r4,#0x1f]
000fbc  0601              LSLS     r1,r0,#24
000fbe  7fa0              LDRB     r0,[r4,#0x1e]
000fc0  ea414100          ORR      r1,r1,r0,LSL #16
000fc4  7f60              LDRB     r0,[r4,#0x1d]
000fc6  ea412000          ORR      r0,r1,r0,LSL #8
000fca  7f21              LDRB     r1,[r4,#0x1c]
000fcc  4308              ORRS     r0,r0,r1
000fce  6038              STR      r0,[r7,#0]
;;;1874   		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
000fd0  7e21              LDRB     r1,[r4,#0x18]
000fd2  7e60              LDRB     r0,[r4,#0x19]
000fd4  ea412000          ORR      r0,r1,r0,LSL #8
000fd8  80b8              STRH     r0,[r7,#4]
;;;1875   		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
000fda  7da1              LDRB     r1,[r4,#0x16]
000fdc  7de0              LDRB     r0,[r4,#0x17]
000fde  ea412000          ORR      r0,r1,r0,LSL #8
000fe2  80f8              STRH     r0,[r7,#6]
                  |L1.4068|
;;;1876   	}
;;;1877   	*p = 0;		/* Terminate SFN str by a \0 */
000fe4  2000              MOVS     r0,#0
000fe6  f8880000          STRB     r0,[r8,#0]
;;;1878   
;;;1879   #if _USE_LFN
;;;1880   	if (fno->lfname && fno->lfsize) {
000fea  69b8              LDR      r0,[r7,#0x18]
000fec  b3d0              CBZ      r0,|L1.4196|
000fee  69f8              LDR      r0,[r7,#0x1c]
000ff0  b3c0              CBZ      r0,|L1.4196|
;;;1881   		TCHAR *tp = fno->lfname;
000ff2  f8d7b018          LDR      r11,[r7,#0x18]
;;;1882   		WCHAR w, *lfn;
;;;1883   
;;;1884   		i = 0;
000ff6  2500              MOVS     r5,#0
;;;1885   		if (dj->sect && dj->lfn_idx != 0xFFFF) {/* Get LFN if available */
000ff8  f8d90010          LDR      r0,[r9,#0x10]
000ffc  b370              CBZ      r0,|L1.4188|
000ffe  f8b90020          LDRH     r0,[r9,#0x20]
001002  f64f71ff          MOV      r1,#0xffff
001006  4288              CMP      r0,r1
001008  d028              BEQ      |L1.4188|
;;;1886   			lfn = dj->lfn;
00100a  f8d9001c          LDR      r0,[r9,#0x1c]
00100e  9000              STR      r0,[sp,#0]
;;;1887   			while ((w = *lfn++) != 0) {			/* Get an LFN char */
001010  e01c              B        |L1.4172|
                  |L1.4114|
;;;1888   #if !_LFN_UNICODE
;;;1889   				w = ff_convert(w, 0);			/* Unicode -> OEM conversion */
001012  2100              MOVS     r1,#0
001014  4650              MOV      r0,r10
001016  f7fffffe          BL       ff_convert
00101a  4682              MOV      r10,r0
;;;1890   				if (!w) { i = 0; break; }		/* Could not convert, no LFN */
00101c  f1ba0f00          CMP      r10,#0
001020  d101              BNE      |L1.4134|
001022  2500              MOVS     r5,#0
001024  e019              B        |L1.4186|
                  |L1.4134|
;;;1891   				if (_DF1S && w >= 0x100)		/* Put 1st byte if it is a DBC (always false on SBCS cfg) */
001026  f1ba0fff          CMP      r10,#0xff
00102a  dd05              BLE      |L1.4152|
;;;1892   					tp[i++] = (TCHAR)(w >> 8);
00102c  ea4f222a          ASR      r2,r10,#8
001030  4628              MOV      r0,r5
001032  1c6d              ADDS     r5,r5,#1
001034  f80b2000          STRB     r2,[r11,r0]
                  |L1.4152|
;;;1893   #endif
;;;1894   				if (i >= fno->lfsize - 1) { i = 0; break; }	/* Buffer overflow, no LFN */
001038  69f8              LDR      r0,[r7,#0x1c]
00103a  1e40              SUBS     r0,r0,#1
00103c  42a8              CMP      r0,r5
00103e  d801              BHI      |L1.4164|
001040  2500              MOVS     r5,#0
001042  e00a              B        |L1.4186|
                  |L1.4164|
;;;1895   				tp[i++] = (TCHAR)w;
001044  4628              MOV      r0,r5
001046  1c6d              ADDS     r5,r5,#1
001048  f80ba000          STRB     r10,[r11,r0]
                  |L1.4172|
00104c  9800              LDR      r0,[sp,#0]            ;1887
00104e  f8301b02          LDRH     r1,[r0],#2            ;1887
001052  ea5f0a01          MOVS     r10,r1                ;1887
001056  9000              STR      r0,[sp,#0]            ;1887
001058  d1db              BNE      |L1.4114|
                  |L1.4186|
00105a  bf00              NOP                            ;1890
                  |L1.4188|
;;;1896   			}
;;;1897   		}
;;;1898   		tp[i] = 0;	/* Terminate the LFN str by a \0 */
00105c  2000              MOVS     r0,#0
00105e  f80b0005          STRB     r0,[r11,r5]
;;;1899   	}
001062  bf00              NOP      
                  |L1.4196|
;;;1900   #endif
;;;1901   }
001064  e8bd9ffc          POP      {r2-r12,pc}
;;;1902   #endif /* _FS_MINIMIZE <= 1 */
                          ENDP

                  follow_path PROC
;;;1911   static
;;;1912   FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
001068  e92d41f3          PUSH     {r0,r1,r4-r8,lr}
;;;1913   	DIR *dj,			/* Directory object to return last directory and found object */
;;;1914   	const TCHAR *path	/* Full-path string to find a file or directory */
;;;1915   )
;;;1916   {
00106c  4604              MOV      r4,r0
;;;1917   	FRESULT res;
;;;1918   	BYTE *dir, ns;
;;;1919   
;;;1920   
;;;1921   #if _FS_RPATH
;;;1922   	if (*path == '/' || *path == '\\') { /* There is a heading separator */
;;;1923   		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
;;;1924   	} else {							/* No heading separator */
;;;1925   		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
;;;1926   	}
;;;1927   #else
;;;1928   	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
00106e  9801              LDR      r0,[sp,#4]
001070  7800              LDRB     r0,[r0,#0]
001072  282f              CMP      r0,#0x2f
001074  d003              BEQ      |L1.4222|
001076  9801              LDR      r0,[sp,#4]
001078  7800              LDRB     r0,[r0,#0]
00107a  285c              CMP      r0,#0x5c
00107c  d102              BNE      |L1.4228|
                  |L1.4222|
;;;1929   		path++;
00107e  9801              LDR      r0,[sp,#4]
001080  1c40              ADDS     r0,r0,#1
001082  9001              STR      r0,[sp,#4]
                  |L1.4228|
;;;1930   	dj->sclust = 0;						/* Start from the root dir */
001084  2000              MOVS     r0,#0
001086  60a0              STR      r0,[r4,#8]
;;;1931   #endif
;;;1932   
;;;1933   	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
001088  9801              LDR      r0,[sp,#4]
00108a  7800              LDRB     r0,[r0,#0]
00108c  2820              CMP      r0,#0x20
00108e  d207              BCS      |L1.4256|
;;;1934   		res = dir_sdi(dj, 0);
001090  2100              MOVS     r1,#0
001092  4620              MOV      r0,r4
001094  f7fffffe          BL       dir_sdi
001098  4606              MOV      r6,r0
;;;1935   		dj->dir = 0;
00109a  2000              MOVS     r0,#0
00109c  6160              STR      r0,[r4,#0x14]
00109e  e02f              B        |L1.4352|
                  |L1.4256|
;;;1936   
;;;1937   	} else {							/* Follow path */
;;;1938   		for (;;) {
0010a0  bf00              NOP      
                  |L1.4258|
;;;1939   			res = create_name(dj, &path);	/* Get a segment */
0010a2  a901              ADD      r1,sp,#4
0010a4  4620              MOV      r0,r4
0010a6  f7fffffe          BL       create_name
0010aa  4606              MOV      r6,r0
;;;1940   			if (res != FR_OK) break;
0010ac  b106              CBZ      r6,|L1.4272|
0010ae  e026              B        |L1.4350|
                  |L1.4272|
;;;1941   			res = dir_find(dj);				/* Find it */
0010b0  4620              MOV      r0,r4
0010b2  f7fffffe          BL       dir_find
0010b6  4606              MOV      r6,r0
;;;1942   			ns = *(dj->fn+NS);
0010b8  69a0              LDR      r0,[r4,#0x18]
0010ba  7ac7              LDRB     r7,[r0,#0xb]
;;;1943   			if (res != FR_OK) {				/* Failed to find the object */
0010bc  b146              CBZ      r6,|L1.4304|
;;;1944   				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
0010be  2e04              CMP      r6,#4
0010c0  d000              BEQ      |L1.4292|
0010c2  e01c              B        |L1.4350|
                  |L1.4292|
;;;1945   				/* Object not found */
;;;1946   				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
0010c4  bf00              NOP      
;;;1947   					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
;;;1948   					res = FR_OK;
;;;1949   					if (!(ns & NS_LAST)) continue;
;;;1950   				} else {							/* Could not find the object */
;;;1951   					if (!(ns & NS_LAST)) res = FR_NO_PATH;
0010c6  f0070004          AND      r0,r7,#4
0010ca  b900              CBNZ     r0,|L1.4302|
0010cc  2605              MOVS     r6,#5
                  |L1.4302|
;;;1952   				}
;;;1953   				break;
0010ce  e016              B        |L1.4350|
                  |L1.4304|
;;;1954   			}
;;;1955   			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
0010d0  f0070004          AND      r0,r7,#4
0010d4  b100              CBZ      r0,|L1.4312|
0010d6  e012              B        |L1.4350|
                  |L1.4312|
;;;1956   			dir = dj->dir;						/* There is next segment. Follow the sub directory */
0010d8  6965              LDR      r5,[r4,#0x14]
;;;1957   			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
0010da  7ae8              LDRB     r0,[r5,#0xb]
0010dc  f0000010          AND      r0,r0,#0x10
0010e0  b908              CBNZ     r0,|L1.4326|
;;;1958   				res = FR_NO_PATH; break;
0010e2  2605              MOVS     r6,#5
0010e4  e00b              B        |L1.4350|
                  |L1.4326|
;;;1959   			}
;;;1960   			dj->sclust = LD_CLUST(dir);
0010e6  7ea9              LDRB     r1,[r5,#0x1a]
0010e8  7ee8              LDRB     r0,[r5,#0x1b]
0010ea  ea412100          ORR      r1,r1,r0,LSL #8
0010ee  7d2a              LDRB     r2,[r5,#0x14]
0010f0  7d68              LDRB     r0,[r5,#0x15]
0010f2  ea422000          ORR      r0,r2,r0,LSL #8
0010f6  ea414000          ORR      r0,r1,r0,LSL #16
0010fa  60a0              STR      r0,[r4,#8]
0010fc  e7d1              B        |L1.4258|
                  |L1.4350|
0010fe  bf00              NOP                            ;1940
                  |L1.4352|
;;;1961   		}
;;;1962   	}
;;;1963   
;;;1964   	return res;
001100  4630              MOV      r0,r6
;;;1965   }
001102  e8bd81fc          POP      {r2-r8,pc}
;;;1966   
                          ENDP

                  check_fs PROC
;;;1974   static
;;;1975   BYTE check_fs (	/* 0:The FAT BR, 1:Valid BR but not an FAT, 2:Not a BR, 3:Disk error */
001106  b570              PUSH     {r4-r6,lr}
;;;1976   	FATFS *fs,	/* File system object */
;;;1977   	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
;;;1978   )
;;;1979   {
001108  4604              MOV      r4,r0
00110a  460d              MOV      r5,r1
;;;1980   	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
00110c  7860              LDRB     r0,[r4,#1]
00110e  2301              MOVS     r3,#1
001110  462a              MOV      r2,r5
001112  f1040130          ADD      r1,r4,#0x30
001116  f7fffffe          BL       disk_read
00111a  b108              CBZ      r0,|L1.4384|
;;;1981   		return 3;
00111c  2003              MOVS     r0,#3
                  |L1.4382|
;;;1982   	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
;;;1983   		return 2;
;;;1984   
;;;1985   	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
;;;1986   		return 0;
;;;1987   	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
;;;1988   		return 0;
;;;1989   
;;;1990   	return 1;
;;;1991   }
00111e  bd70              POP      {r4-r6,pc}
                  |L1.4384|
001120  f894122e          LDRB     r1,[r4,#0x22e]        ;1982
001124  f894022f          LDRB     r0,[r4,#0x22f]        ;1982
001128  ea412000          ORR      r0,r1,r0,LSL #8       ;1982
00112c  f64a2155          MOV      r1,#0xaa55            ;1982
001130  4288              CMP      r0,r1                 ;1982
001132  d001              BEQ      |L1.4408|
001134  2002              MOVS     r0,#2                 ;1983
001136  e7f2              B        |L1.4382|
                  |L1.4408|
001138  f8940069          LDRB     r0,[r4,#0x69]         ;1985
00113c  0601              LSLS     r1,r0,#24             ;1985
00113e  f8940068          LDRB     r0,[r4,#0x68]         ;1985
001142  ea414100          ORR      r1,r1,r0,LSL #16      ;1985
001146  f8940067          LDRB     r0,[r4,#0x67]         ;1985
00114a  ea412000          ORR      r0,r1,r0,LSL #8       ;1985
00114e  f8941066          LDRB     r1,[r4,#0x66]         ;1985
001152  4308              ORRS     r0,r0,r1              ;1985
001154  f020407f          BIC      r0,r0,#0xff000000     ;1985
001158  4906              LDR      r1,|L1.4468|
00115a  4288              CMP      r0,r1                 ;1985
00115c  d10e              BNE      |L1.4476|
00115e  e00b              B        |L1.4472|
                  |L1.4448|
001160  222a3a3c          DCB      """*:<>?|",127,0
001164  3e3f7c7f
001168  00      
001169  00                DCB      0
00116a  00                DCB      0
00116b  00                DCB      0
                  |L1.4460|
00116c  2b2c3b3d          DCB      "+,;=[]",0
001170  5b5d00  
001173  00                DCB      0
                  |L1.4468|
                          DCD      0x00544146
                  |L1.4472|
001178  2000              MOVS     r0,#0                 ;1986
00117a  e7d0              B        |L1.4382|
                  |L1.4476|
00117c  f8940085          LDRB     r0,[r4,#0x85]         ;1987
001180  0601              LSLS     r1,r0,#24             ;1987
001182  f8940084          LDRB     r0,[r4,#0x84]         ;1987
001186  ea414100          ORR      r1,r1,r0,LSL #16      ;1987
00118a  f8940083          LDRB     r0,[r4,#0x83]         ;1987
00118e  ea412000          ORR      r0,r1,r0,LSL #8       ;1987
001192  f8941082          LDRB     r1,[r4,#0x82]         ;1987
001196  4308              ORRS     r0,r0,r1              ;1987
001198  f020407f          BIC      r0,r0,#0xff000000     ;1987
00119c  49fe              LDR      r1,|L1.5528|
00119e  4288              CMP      r0,r1                 ;1987
0011a0  d101              BNE      |L1.4518|
0011a2  2000              MOVS     r0,#0                 ;1988
0011a4  e7bb              B        |L1.4382|
                  |L1.4518|
0011a6  2001              MOVS     r0,#1                 ;1990
0011a8  e7b9              B        |L1.4382|
;;;1992   
                          ENDP

                  chk_mounted PROC
;;;2000   static
;;;2001   FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
0011aa  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;2002   	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
;;;2003   	FATFS **rfs,		/* Pointer to pointer to the found file system object */
;;;2004   	BYTE chk_wp			/* !=0: Check media write protection for write access */
;;;2005   )
;;;2006   {
0011ae  b086              SUB      sp,sp,#0x18
;;;2007   	BYTE fmt, b, *tbl;
;;;2008   	UINT vol;
;;;2009   	DSTATUS stat;
;;;2010   	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
;;;2011   	WORD nrsv;
;;;2012   	const TCHAR *p = *path;
0011b0  9806              LDR      r0,[sp,#0x18]
0011b2  6800              LDR      r0,[r0,#0]
0011b4  9000              STR      r0,[sp,#0]
;;;2013   	FATFS *fs;
;;;2014   
;;;2015   	/* Get logical drive number from the path name */
;;;2016   	vol = p[0] - '0';					/* Is there a drive number? */
0011b6  9800              LDR      r0,[sp,#0]
0011b8  7800              LDRB     r0,[r0,#0]
0011ba  3830              SUBS     r0,r0,#0x30
0011bc  9005              STR      r0,[sp,#0x14]
;;;2017   	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
0011be  9805              LDR      r0,[sp,#0x14]
0011c0  2809              CMP      r0,#9
0011c2  d80a              BHI      |L1.4570|
0011c4  9800              LDR      r0,[sp,#0]
0011c6  7840              LDRB     r0,[r0,#1]
0011c8  283a              CMP      r0,#0x3a
0011ca  d106              BNE      |L1.4570|
;;;2018   		p += 2; *path = p;				/* Return pointer to the path name */
0011cc  9800              LDR      r0,[sp,#0]
0011ce  1c80              ADDS     r0,r0,#2
0011d0  9000              STR      r0,[sp,#0]
0011d2  9906              LDR      r1,[sp,#0x18]
0011d4  9800              LDR      r0,[sp,#0]
0011d6  6008              STR      r0,[r1,#0]
0011d8  e001              B        |L1.4574|
                  |L1.4570|
;;;2019   	} else {							/* No drive number is given */
;;;2020   #if _FS_RPATH
;;;2021   		vol = CurrVol;					/* Use current drive */
;;;2022   #else
;;;2023   		vol = 0;						/* Use drive 0 */
0011da  2000              MOVS     r0,#0
0011dc  9005              STR      r0,[sp,#0x14]
                  |L1.4574|
;;;2024   #endif
;;;2025   	}
;;;2026   
;;;2027   	/* Check if the logical drive is valid or not */
;;;2028   	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
0011de  9805              LDR      r0,[sp,#0x14]
0011e0  b118              CBZ      r0,|L1.4586|
;;;2029   		return FR_INVALID_DRIVE;
0011e2  200b              MOVS     r0,#0xb
                  |L1.4580|
;;;2030   	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
;;;2031   	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
;;;2032   
;;;2033   	ENTER_FF(fs);						/* Lock file system */
;;;2034   
;;;2035   	if (fs->fs_type) {					/* If the logical drive has been mounted */
;;;2036   		stat = disk_status(fs->drv);
;;;2037   		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
;;;2038   #if !_FS_READONLY
;;;2039   			if (chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
;;;2040   				return FR_WRITE_PROTECTED;
;;;2041   #endif
;;;2042   			return FR_OK;				/* The file system object is valid */
;;;2043   		}
;;;2044   	}
;;;2045   
;;;2046   	/* The logical drive must be mounted. */
;;;2047   	/* Following code attempts to mount a volume. (analyze BPB and initialize the fs object) */
;;;2048   
;;;2049   	fs->fs_type = 0;					/* Clear the file system object */
;;;2050   	fs->drv = (BYTE)LD2PD(vol);			/* Bind the logical drive and a physical drive */
;;;2051   	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
;;;2052   	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
;;;2053   		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
;;;2054   #if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
;;;2055   	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
;;;2056   		return FR_DISK_ERR;
;;;2057   #endif
;;;2058   #if !_FS_READONLY
;;;2059   	if (chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
;;;2060   		return FR_WRITE_PROTECTED;
;;;2061   #endif
;;;2062   	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
;;;2063   	fmt = check_fs(fs, bsect = 0);		/* Check sector 0 if it is a VBR */
;;;2064   	if (fmt == 1) {						/* Not an FAT-VBR, the disk may be partitioned */
;;;2065   		/* Check the partition listed in top of the partition table */
;;;2066   		tbl = &fs->win[MBR_Table + LD2PT(vol) * SZ_PTE];/* Partition table */
;;;2067   		if (tbl[4]) {									/* Is the partition existing? */
;;;2068   			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
;;;2069   			fmt = check_fs(fs, bsect);					/* Check the partition */
;;;2070   		}
;;;2071   	}
;;;2072   	if (fmt == 3) return FR_DISK_ERR;
;;;2073   	if (fmt) return FR_NO_FILESYSTEM;					/* No FAT volume is found */
;;;2074   
;;;2075   	/* Following code initializes the file system object */
;;;2076   
;;;2077   	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
;;;2078   		return FR_NO_FILESYSTEM;
;;;2079   
;;;2080   	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
;;;2081   	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
;;;2082   	fs->fsize = fasize;
;;;2083   
;;;2084   	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
;;;2085   	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
;;;2086   	fasize *= b;										/* Number of sectors for FAT area */
;;;2087   
;;;2088   	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
;;;2089   	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
;;;2090   
;;;2091   	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
;;;2092   	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
;;;2093   
;;;2094   	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
;;;2095   	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
;;;2096   
;;;2097   	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
;;;2098   	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
;;;2099   
;;;2100   	/* Determine the FAT sub type */
;;;2101   	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
;;;2102   	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
;;;2103   	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
;;;2104   	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
;;;2105   	fmt = FS_FAT12;
;;;2106   	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
;;;2107   	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
;;;2108   
;;;2109   	/* Boundaries and Limits */
;;;2110   	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
;;;2111   	fs->database = bsect + sysect;						/* Data start sector */
;;;2112   	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
;;;2113   	if (fmt == FS_FAT32) {
;;;2114   		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
;;;2115   		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
;;;2116   		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
;;;2117   	} else {
;;;2118   		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
;;;2119   		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
;;;2120   		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
;;;2121   			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
;;;2122   	}
;;;2123   	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
;;;2124   		return FR_NO_FILESYSTEM;
;;;2125   
;;;2126   #if !_FS_READONLY
;;;2127   	/* Initialize cluster allocation information */
;;;2128   	fs->free_clust = 0xFFFFFFFF;
;;;2129   	fs->last_clust = 0;
;;;2130   
;;;2131   	/* Get fsinfo if available */
;;;2132   	if (fmt == FS_FAT32) {
;;;2133   	 	fs->fsi_flag = 0;
;;;2134   		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
;;;2135   		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
;;;2136   			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
;;;2137   			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
;;;2138   			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
;;;2139   				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
;;;2140   				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
;;;2141   		}
;;;2142   	}
;;;2143   #endif
;;;2144   	fs->fs_type = fmt;		/* FAT sub-type */
;;;2145   	fs->id = ++Fsid;		/* File system mount ID */
;;;2146   	fs->winsect = 0;		/* Invalidate sector cache */
;;;2147   	fs->wflag = 0;
;;;2148   #if _FS_RPATH
;;;2149   	fs->cdir = 0;			/* Current directory (root dir) */
;;;2150   #endif
;;;2151   #if _FS_SHARE				/* Clear file lock semaphores */
;;;2152   	clear_lock(fs);
;;;2153   #endif
;;;2154   
;;;2155   	return FR_OK;
;;;2156   }
0011e4  b009              ADD      sp,sp,#0x24
0011e6  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.4586|
0011ea  49ec              LDR      r1,|L1.5532|
0011ec  9805              LDR      r0,[sp,#0x14]         ;2030
0011ee  f8514020          LDR      r4,[r1,r0,LSL #2]     ;2030
0011f2  9807              LDR      r0,[sp,#0x1c]         ;2030
0011f4  6004              STR      r4,[r0,#0]            ;2030
0011f6  b90c              CBNZ     r4,|L1.4604|
0011f8  200c              MOVS     r0,#0xc               ;2031
0011fa  e7f3              B        |L1.4580|
                  |L1.4604|
0011fc  7820              LDRB     r0,[r4,#0]            ;2035
0011fe  b178              CBZ      r0,|L1.4640|
001200  7860              LDRB     r0,[r4,#1]            ;2036
001202  f7fffffe          BL       disk_status
001206  4680              MOV      r8,r0                 ;2036
001208  f0080001          AND      r0,r8,#1              ;2037
00120c  b940              CBNZ     r0,|L1.4640|
00120e  9808              LDR      r0,[sp,#0x20]         ;2039
001210  b120              CBZ      r0,|L1.4636|
001212  f0080004          AND      r0,r8,#4              ;2039
001216  b108              CBZ      r0,|L1.4636|
001218  200a              MOVS     r0,#0xa               ;2040
00121a  e7e3              B        |L1.4580|
                  |L1.4636|
00121c  2000              MOVS     r0,#0                 ;2042
00121e  e7e1              B        |L1.4580|
                  |L1.4640|
001220  2000              MOVS     r0,#0                 ;2049
001222  7020              STRB     r0,[r4,#0]            ;2049
001224  9805              LDR      r0,[sp,#0x14]         ;2050
001226  7060              STRB     r0,[r4,#1]            ;2050
001228  7860              LDRB     r0,[r4,#1]            ;2051
00122a  f7fffffe          BL       disk_initialize
00122e  4680              MOV      r8,r0                 ;2051
001230  f0080001          AND      r0,r8,#1              ;2052
001234  b108              CBZ      r0,|L1.4666|
001236  2003              MOVS     r0,#3                 ;2053
001238  e7d4              B        |L1.4580|
                  |L1.4666|
00123a  9808              LDR      r0,[sp,#0x20]         ;2059
00123c  b120              CBZ      r0,|L1.4680|
00123e  f0080004          AND      r0,r8,#4              ;2059
001242  b108              CBZ      r0,|L1.4680|
001244  200a              MOVS     r0,#0xa               ;2060
001246  e7cd              B        |L1.4580|
                  |L1.4680|
001248  f04f0a00          MOV      r10,#0                ;2063
00124c  4651              MOV      r1,r10                ;2063
00124e  4620              MOV      r0,r4                 ;2063
001250  f7fffffe          BL       check_fs
001254  4605              MOV      r5,r0                 ;2063
001256  2d01              CMP      r5,#1                 ;2064
001258  d113              BNE      |L1.4738|
00125a  f50477f7          ADD      r7,r4,#0x1ee          ;2066
00125e  7938              LDRB     r0,[r7,#4]            ;2067
001260  b178              CBZ      r0,|L1.4738|
001262  7af8              LDRB     r0,[r7,#0xb]          ;2068
001264  0601              LSLS     r1,r0,#24             ;2068
001266  7ab8              LDRB     r0,[r7,#0xa]          ;2068
001268  ea414100          ORR      r1,r1,r0,LSL #16      ;2068
00126c  7a78              LDRB     r0,[r7,#9]            ;2068
00126e  ea412000          ORR      r0,r1,r0,LSL #8       ;2068
001272  7a39              LDRB     r1,[r7,#8]            ;2068
001274  ea400a01          ORR      r10,r0,r1             ;2068
001278  4651              MOV      r1,r10                ;2069
00127a  4620              MOV      r0,r4                 ;2069
00127c  f7fffffe          BL       check_fs
001280  4605              MOV      r5,r0                 ;2069
                  |L1.4738|
001282  2d03              CMP      r5,#3                 ;2072
001284  d101              BNE      |L1.4746|
001286  2001              MOVS     r0,#1                 ;2072
001288  e7ac              B        |L1.4580|
                  |L1.4746|
00128a  b10d              CBZ      r5,|L1.4752|
00128c  200d              MOVS     r0,#0xd               ;2073
00128e  e7a9              B        |L1.4580|
                  |L1.4752|
001290  203b              MOVS     r0,#0x3b              ;2077
001292  5d01              LDRB     r1,[r0,r4]            ;2077
001294  f894003c          LDRB     r0,[r4,#0x3c]         ;2077
001298  ea412000          ORR      r0,r1,r0,LSL #8       ;2077
00129c  f5b07f00          CMP      r0,#0x200             ;2077
0012a0  d001              BEQ      |L1.4774|
0012a2  200d              MOVS     r0,#0xd               ;2078
0012a4  e79e              B        |L1.4580|
                  |L1.4774|
0012a6  2046              MOVS     r0,#0x46              ;2080
0012a8  5d01              LDRB     r1,[r0,r4]            ;2080
0012aa  f8940047          LDRB     r0,[r4,#0x47]         ;2080
0012ae  ea412900          ORR      r9,r1,r0,LSL #8       ;2080
0012b2  f1b90f00          CMP      r9,#0                 ;2081
0012b6  d10e              BNE      |L1.4822|
0012b8  f8940057          LDRB     r0,[r4,#0x57]         ;2081
0012bc  0601              LSLS     r1,r0,#24             ;2081
0012be  f8940056          LDRB     r0,[r4,#0x56]         ;2081
0012c2  ea414100          ORR      r1,r1,r0,LSL #16      ;2081
0012c6  f8940055          LDRB     r0,[r4,#0x55]         ;2081
0012ca  ea412000          ORR      r0,r1,r0,LSL #8       ;2081
0012ce  f8941054          LDRB     r1,[r4,#0x54]         ;2081
0012d2  ea400901          ORR      r9,r0,r1              ;2081
                  |L1.4822|
0012d6  f8c4901c          STR      r9,[r4,#0x1c]         ;2082
0012da  2040              MOVS     r0,#0x40              ;2084
0012dc  5d06              LDRB     r6,[r0,r4]            ;2084
0012de  70e6              STRB     r6,[r4,#3]            ;2084
0012e0  2e01              CMP      r6,#1                 ;2085
0012e2  d003              BEQ      |L1.4844|
0012e4  2e02              CMP      r6,#2                 ;2085
0012e6  d001              BEQ      |L1.4844|
0012e8  200d              MOVS     r0,#0xd               ;2085
0012ea  e77b              B        |L1.4580|
                  |L1.4844|
0012ec  fb09f906          MUL      r9,r9,r6              ;2086
0012f0  203d              MOVS     r0,#0x3d              ;2088
0012f2  5d00              LDRB     r0,[r0,r4]            ;2088
0012f4  4606              MOV      r6,r0                 ;2088
0012f6  70a0              STRB     r0,[r4,#2]            ;2088
0012f8  b116              CBZ      r6,|L1.4864|
0012fa  1e70              SUBS     r0,r6,#1              ;2089
0012fc  4030              ANDS     r0,r0,r6              ;2089
0012fe  b108              CBZ      r0,|L1.4868|
                  |L1.4864|
001300  200d              MOVS     r0,#0xd               ;2089
001302  e76f              B        |L1.4580|
                  |L1.4868|
001304  2041              MOVS     r0,#0x41              ;2091
001306  5d01              LDRB     r1,[r0,r4]            ;2091
001308  f8940042          LDRB     r0,[r4,#0x42]         ;2091
00130c  ea412000          ORR      r0,r1,r0,LSL #8       ;2091
001310  8120              STRH     r0,[r4,#8]            ;2091
001312  7a20              LDRB     r0,[r4,#8]            ;2092
001314  f000000f          AND      r0,r0,#0xf            ;2092
001318  b108              CBZ      r0,|L1.4894|
00131a  200d              MOVS     r0,#0xd               ;2092
00131c  e762              B        |L1.4580|
                  |L1.4894|
00131e  2043              MOVS     r0,#0x43              ;2094
001320  5d01              LDRB     r1,[r0,r4]            ;2094
001322  f8940044          LDRB     r0,[r4,#0x44]         ;2094
001326  ea412000          ORR      r0,r1,r0,LSL #8       ;2094
00132a  9004              STR      r0,[sp,#0x10]         ;2094
00132c  9804              LDR      r0,[sp,#0x10]         ;2095
00132e  b970              CBNZ     r0,|L1.4942|
001330  f8940053          LDRB     r0,[r4,#0x53]         ;2095
001334  0601              LSLS     r1,r0,#24             ;2095
001336  f8940052          LDRB     r0,[r4,#0x52]         ;2095
00133a  ea414100          ORR      r1,r1,r0,LSL #16      ;2095
00133e  f8940051          LDRB     r0,[r4,#0x51]         ;2095
001342  ea412000          ORR      r0,r1,r0,LSL #8       ;2095
001346  f8941050          LDRB     r1,[r4,#0x50]         ;2095
00134a  4308              ORRS     r0,r0,r1              ;2095
00134c  9004              STR      r0,[sp,#0x10]         ;2095
                  |L1.4942|
00134e  203e              MOVS     r0,#0x3e              ;2097
001350  5d01              LDRB     r1,[r0,r4]            ;2097
001352  f894003f          LDRB     r0,[r4,#0x3f]         ;2097
001356  ea412000          ORR      r0,r1,r0,LSL #8       ;2097
00135a  9001              STR      r0,[sp,#4]            ;2097
00135c  9801              LDR      r0,[sp,#4]            ;2098
00135e  b908              CBNZ     r0,|L1.4964|
001360  200d              MOVS     r0,#0xd               ;2098
001362  e73f              B        |L1.4580|
                  |L1.4964|
001364  9801              LDR      r0,[sp,#4]            ;2101
001366  4448              ADD      r0,r0,r9              ;2101
001368  8921              LDRH     r1,[r4,#8]            ;2101
00136a  eb001011          ADD      r0,r0,r1,LSR #4       ;2101
00136e  9003              STR      r0,[sp,#0xc]          ;2101
001370  e9dd0103          LDRD     r0,r1,[sp,#0xc]       ;2102
001374  4281              CMP      r1,r0                 ;2102
001376  d201              BCS      |L1.4988|
001378  200d              MOVS     r0,#0xd               ;2102
00137a  e733              B        |L1.4580|
                  |L1.4988|
00137c  e9dd1003          LDRD     r1,r0,[sp,#0xc]       ;2103
001380  1a40              SUBS     r0,r0,r1              ;2103
001382  78a1              LDRB     r1,[r4,#2]            ;2103
001384  fbb0fbf1          UDIV     r11,r0,r1             ;2103
001388  f1bb0f00          CMP      r11,#0                ;2104
00138c  d101              BNE      |L1.5010|
00138e  200d              MOVS     r0,#0xd               ;2104
001390  e728              B        |L1.4580|
                  |L1.5010|
001392  2501              MOVS     r5,#1                 ;2105
001394  f64070f6          MOV      r0,#0xff6             ;2106
001398  4583              CMP      r11,r0                ;2106
00139a  d300              BCC      |L1.5022|
00139c  2502              MOVS     r5,#2                 ;2106
                  |L1.5022|
00139e  f64f70f6          MOV      r0,#0xfff6            ;2107
0013a2  4583              CMP      r11,r0                ;2107
0013a4  d300              BCC      |L1.5032|
0013a6  2503              MOVS     r5,#3                 ;2107
                  |L1.5032|
0013a8  f10b0002          ADD      r0,r11,#2             ;2110
0013ac  61a0              STR      r0,[r4,#0x18]         ;2110
0013ae  9803              LDR      r0,[sp,#0xc]          ;2111
0013b0  4450              ADD      r0,r0,r10             ;2111
0013b2  62a0              STR      r0,[r4,#0x28]         ;2111
0013b4  9801              LDR      r0,[sp,#4]            ;2112
0013b6  4450              ADD      r0,r0,r10             ;2112
0013b8  6220              STR      r0,[r4,#0x20]         ;2112
0013ba  2d03              CMP      r5,#3                 ;2113
0013bc  d116              BNE      |L1.5100|
0013be  8920              LDRH     r0,[r4,#8]            ;2114
0013c0  b108              CBZ      r0,|L1.5062|
0013c2  200d              MOVS     r0,#0xd               ;2114
0013c4  e70e              B        |L1.4580|
                  |L1.5062|
0013c6  f894005f          LDRB     r0,[r4,#0x5f]         ;2115
0013ca  0601              LSLS     r1,r0,#24             ;2115
0013cc  f894005e          LDRB     r0,[r4,#0x5e]         ;2115
0013d0  ea414100          ORR      r1,r1,r0,LSL #16      ;2115
0013d4  f894005d          LDRB     r0,[r4,#0x5d]         ;2115
0013d8  ea412000          ORR      r0,r1,r0,LSL #8       ;2115
0013dc  f894105c          LDRB     r1,[r4,#0x5c]         ;2115
0013e0  4308              ORRS     r0,r0,r1              ;2115
0013e2  6260              STR      r0,[r4,#0x24]         ;2115
0013e4  69a0              LDR      r0,[r4,#0x18]         ;2116
0013e6  0080              LSLS     r0,r0,#2              ;2116
0013e8  9002              STR      r0,[sp,#8]            ;2116
0013ea  e014              B        |L1.5142|
                  |L1.5100|
0013ec  8920              LDRH     r0,[r4,#8]            ;2118
0013ee  b908              CBNZ     r0,|L1.5108|
0013f0  200d              MOVS     r0,#0xd               ;2118
0013f2  e6f7              B        |L1.4580|
                  |L1.5108|
0013f4  6a20              LDR      r0,[r4,#0x20]         ;2119
0013f6  4448              ADD      r0,r0,r9              ;2119
0013f8  6260              STR      r0,[r4,#0x24]         ;2119
0013fa  2d02              CMP      r5,#2                 ;2120
0013fc  d102              BNE      |L1.5124|
0013fe  69a0              LDR      r0,[r4,#0x18]         ;2121
001400  0040              LSLS     r0,r0,#1              ;2121
001402  e007              B        |L1.5140|
                  |L1.5124|
001404  7e20              LDRB     r0,[r4,#0x18]         ;2121
001406  f0000001          AND      r0,r0,#1              ;2121
00140a  69a1              LDR      r1,[r4,#0x18]         ;2121
00140c  eb010141          ADD      r1,r1,r1,LSL #1       ;2121
001410  eb000051          ADD      r0,r0,r1,LSR #1       ;2121
                  |L1.5140|
001414  9002              STR      r0,[sp,#8]            ;2121
                  |L1.5142|
001416  69e1              LDR      r1,[r4,#0x1c]         ;2123
001418  9802              LDR      r0,[sp,#8]            ;2123
00141a  f20010ff          ADD      r0,r0,#0x1ff          ;2123
00141e  ebb12f50          CMP      r1,r0,LSR #9          ;2123
001422  d201              BCS      |L1.5160|
001424  200d              MOVS     r0,#0xd               ;2124
001426  e6dd              B        |L1.4580|
                  |L1.5160|
001428  f04f30ff          MOV      r0,#0xffffffff        ;2128
00142c  6120              STR      r0,[r4,#0x10]         ;2128
00142e  2000              MOVS     r0,#0                 ;2129
001430  60e0              STR      r0,[r4,#0xc]          ;2129
001432  2d03              CMP      r5,#3                 ;2132
001434  d15c              BNE      |L1.5360|
001436  7160              STRB     r0,[r4,#5]            ;2133
001438  f8941060          LDRB     r1,[r4,#0x60]         ;2134
00143c  f8940061          LDRB     r0,[r4,#0x61]         ;2134
001440  ea412000          ORR      r0,r1,r0,LSL #8       ;2134
001444  4450              ADD      r0,r0,r10             ;2134
001446  6160              STR      r0,[r4,#0x14]         ;2134
001448  7860              LDRB     r0,[r4,#1]            ;2135
00144a  2301              MOVS     r3,#1                 ;2135
00144c  f1040130          ADD      r1,r4,#0x30           ;2135
001450  6962              LDR      r2,[r4,#0x14]         ;2135
001452  f7fffffe          BL       disk_read
001456  bbe8              CBNZ     r0,|L1.5332|
001458  f894122e          LDRB     r1,[r4,#0x22e]        ;2136
00145c  f894022f          LDRB     r0,[r4,#0x22f]        ;2136
001460  ea412000          ORR      r0,r1,r0,LSL #8       ;2136
001464  f64a2155          MOV      r1,#0xaa55            ;2136
001468  4288              CMP      r0,r1                 ;2136
00146a  d141              BNE      |L1.5360|
00146c  2033              MOVS     r0,#0x33              ;2137
00146e  5d00              LDRB     r0,[r0,r4]            ;2137
001470  0601              LSLS     r1,r0,#24             ;2137
001472  2032              MOVS     r0,#0x32              ;2137
001474  5d00              LDRB     r0,[r0,r4]            ;2137
001476  ea414100          ORR      r1,r1,r0,LSL #16      ;2137
00147a  2031              MOVS     r0,#0x31              ;2137
00147c  5d00              LDRB     r0,[r0,r4]            ;2137
00147e  ea412000          ORR      r0,r1,r0,LSL #8       ;2137
001482  f8941030          LDRB     r1,[r4,#0x30]         ;2137
001486  4308              ORRS     r0,r0,r1              ;2137
001488  4945              LDR      r1,|L1.5536|
00148a  4288              CMP      r0,r1                 ;2137
00148c  d130              BNE      |L1.5360|
00148e  f8940217          LDRB     r0,[r4,#0x217]        ;2138
001492  0601              LSLS     r1,r0,#24             ;2138
001494  f8940216          LDRB     r0,[r4,#0x216]        ;2138
001498  ea414100          ORR      r1,r1,r0,LSL #16      ;2138
00149c  f8940215          LDRB     r0,[r4,#0x215]        ;2138
0014a0  ea412000          ORR      r0,r1,r0,LSL #8       ;2138
0014a4  f8941214          LDRB     r1,[r4,#0x214]        ;2138
0014a8  4308              ORRS     r0,r0,r1              ;2138
0014aa  493e              LDR      r1,|L1.5540|
0014ac  4288              CMP      r0,r1                 ;2138
0014ae  d11f              BNE      |L1.5360|
0014b0  f894021f          LDRB     r0,[r4,#0x21f]        ;2139
0014b4  0601              LSLS     r1,r0,#24             ;2139
0014b6  f894021e          LDRB     r0,[r4,#0x21e]        ;2139
0014ba  ea414100          ORR      r1,r1,r0,LSL #16      ;2139
0014be  f894021d          LDRB     r0,[r4,#0x21d]        ;2139
0014c2  ea412000          ORR      r0,r1,r0,LSL #8       ;2139
0014c6  f894121c          LDRB     r1,[r4,#0x21c]        ;2139
0014ca  4308              ORRS     r0,r0,r1              ;2139
0014cc  60e0              STR      r0,[r4,#0xc]          ;2139
0014ce  f894021b          LDRB     r0,[r4,#0x21b]        ;2140
0014d2  e000              B        |L1.5334|
                  |L1.5332|
0014d4  e00c              B        |L1.5360|
                  |L1.5334|
0014d6  0601              LSLS     r1,r0,#24             ;2140
0014d8  f894021a          LDRB     r0,[r4,#0x21a]        ;2140
0014dc  ea414100          ORR      r1,r1,r0,LSL #16      ;2140
0014e0  f8940219          LDRB     r0,[r4,#0x219]        ;2140
0014e4  ea412000          ORR      r0,r1,r0,LSL #8       ;2140
0014e8  f8941218          LDRB     r1,[r4,#0x218]        ;2140
0014ec  4308              ORRS     r0,r0,r1              ;2140
0014ee  6120              STR      r0,[r4,#0x10]         ;2140
                  |L1.5360|
0014f0  7025              STRB     r5,[r4,#0]            ;2144
0014f2  482d              LDR      r0,|L1.5544|
0014f4  8800              LDRH     r0,[r0,#0]            ;2145  ; Fsid
0014f6  1c40              ADDS     r0,r0,#1              ;2145
0014f8  b280              UXTH     r0,r0                 ;2145
0014fa  492b              LDR      r1,|L1.5544|
0014fc  8008              STRH     r0,[r1,#0]            ;2145
0014fe  80e0              STRH     r0,[r4,#6]            ;2145
001500  2000              MOVS     r0,#0                 ;2146
001502  62e0              STR      r0,[r4,#0x2c]         ;2146
001504  7120              STRB     r0,[r4,#4]            ;2147
001506  bf00              NOP                            ;2155
001508  e66c              B        |L1.4580|
;;;2157   
                          ENDP

                  validate PROC
;;;2165   static
;;;2166   FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
00150a  b570              PUSH     {r4-r6,lr}
;;;2167   	FATFS *fs,		/* Pointer to the file system object */
;;;2168   	WORD id			/* Member id of the target object to be checked */
;;;2169   )
;;;2170   {
00150c  4604              MOV      r4,r0
00150e  460d              MOV      r5,r1
;;;2171   	if (!fs || !fs->fs_type || fs->id != id)
001510  b124              CBZ      r4,|L1.5404|
001512  7820              LDRB     r0,[r4,#0]
001514  b110              CBZ      r0,|L1.5404|
001516  88e0              LDRH     r0,[r4,#6]
001518  42a8              CMP      r0,r5
00151a  d001              BEQ      |L1.5408|
                  |L1.5404|
;;;2172   		return FR_INVALID_OBJECT;
00151c  2009              MOVS     r0,#9
                  |L1.5406|
;;;2173   
;;;2174   	ENTER_FF(fs);		/* Lock file system */
;;;2175   
;;;2176   	if (disk_status(fs->drv) & STA_NOINIT)
;;;2177   		return FR_NOT_READY;
;;;2178   
;;;2179   	return FR_OK;
;;;2180   }
00151e  bd70              POP      {r4-r6,pc}
                  |L1.5408|
001520  7860              LDRB     r0,[r4,#1]            ;2176
001522  f7fffffe          BL       disk_status
001526  f0000001          AND      r0,r0,#1              ;2176
00152a  b108              CBZ      r0,|L1.5424|
00152c  2003              MOVS     r0,#3                 ;2177
00152e  e7f6              B        |L1.5406|
                  |L1.5424|
001530  2000              MOVS     r0,#0                 ;2179
001532  e7f4              B        |L1.5406|
;;;2181   
                          ENDP

                  f_mount PROC
;;;2196   
;;;2197   FRESULT f_mount (
001534  4602              MOV      r2,r0
;;;2198   	BYTE vol,		/* Logical drive number to be mounted/unmounted */
;;;2199   	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
;;;2200   )
;;;2201   {
;;;2202   	FATFS *rfs;
;;;2203   
;;;2204   
;;;2205   	if (vol >= _VOLUMES)			/* Check if the drive number is valid */
001536  2a01              CMP      r2,#1
001538  db01              BLT      |L1.5438|
;;;2206   		return FR_INVALID_DRIVE;
00153a  200b              MOVS     r0,#0xb
                  |L1.5436|
;;;2207   	rfs = FatFs[vol];				/* Get current fs object */
;;;2208   
;;;2209   	if (rfs) {
;;;2210   #if _FS_SHARE
;;;2211   		clear_lock(rfs);
;;;2212   #endif
;;;2213   #if _FS_REENTRANT					/* Discard sync object of the current volume */
;;;2214   		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
;;;2215   #endif
;;;2216   		rfs->fs_type = 0;			/* Clear old fs object */
;;;2217   	}
;;;2218   
;;;2219   	if (fs) {
;;;2220   		fs->fs_type = 0;			/* Clear new fs object */
;;;2221   #if _FS_REENTRANT					/* Create sync object for the new volume */
;;;2222   		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
;;;2223   #endif
;;;2224   	}
;;;2225   	FatFs[vol] = fs;				/* Register new fs object */
;;;2226   
;;;2227   	return FR_OK;
;;;2228   }
00153c  4770              BX       lr
                  |L1.5438|
00153e  4817              LDR      r0,|L1.5532|
001540  f8503022          LDR      r3,[r0,r2,LSL #2]     ;2207
001544  b10b              CBZ      r3,|L1.5450|
001546  2000              MOVS     r0,#0                 ;2216
001548  7018              STRB     r0,[r3,#0]            ;2216
                  |L1.5450|
00154a  b109              CBZ      r1,|L1.5456|
00154c  2000              MOVS     r0,#0                 ;2220
00154e  7008              STRB     r0,[r1,#0]            ;2220
                  |L1.5456|
001550  4812              LDR      r0,|L1.5532|
001552  f8401022          STR      r1,[r0,r2,LSL #2]     ;2225
001556  2000              MOVS     r0,#0                 ;2227
001558  e7f0              B        |L1.5436|
;;;2229   
                          ENDP

                  f_open PROC
;;;2236   
;;;2237   FRESULT f_open (
00155a  e92d43f7          PUSH     {r0-r2,r4-r9,lr}
;;;2238   	FIL *fp,			/* Pointer to the blank file object */
;;;2239   	const TCHAR *path,	/* Pointer to the file name */
;;;2240   	BYTE mode			/* Access mode and file open mode flags */
;;;2241   )
;;;2242   {
00155e  b08c              SUB      sp,sp,#0x30
001560  4605              MOV      r5,r0
001562  4616              MOV      r6,r2
;;;2243   	FRESULT res;
;;;2244   	DIR dj;
;;;2245   	BYTE *dir;
;;;2246   	DEF_NAMEBUF;
;;;2247   
;;;2248   
;;;2249   	fp->fs = 0;			/* Clear file object */
001564  2000              MOVS     r0,#0
001566  6028              STR      r0,[r5,#0]
;;;2250   
;;;2251   #if !_FS_READONLY
;;;2252   	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
001568  f006061f          AND      r6,r6,#0x1f
;;;2253   	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
00156c  f0260201          BIC      r2,r6,#1
001570  a903              ADD      r1,sp,#0xc
001572  a80d              ADD      r0,sp,#0x34
001574  f7fffffe          BL       chk_mounted
001578  4607              MOV      r7,r0
;;;2254   #else
;;;2255   	mode &= FA_READ;
;;;2256   	res = chk_mounted(&path, &dj.fs, 0);
;;;2257   #endif
;;;2258   	INIT_BUF(dj);
00157a  f8cdd024          STR      sp,[sp,#0x24]
00157e  480b              LDR      r0,|L1.5548|
001580  900a              STR      r0,[sp,#0x28]
;;;2259   	if (res == FR_OK)
001582  b927              CBNZ     r7,|L1.5518|
;;;2260   		res = follow_path(&dj, path);	/* Follow the file path */
001584  a803              ADD      r0,sp,#0xc
001586  990d              LDR      r1,[sp,#0x34]
001588  f7fffffe          BL       follow_path
00158c  4607              MOV      r7,r0
                  |L1.5518|
;;;2261   	dir = dj.dir;
00158e  9c08              LDR      r4,[sp,#0x20]
;;;2262   
;;;2263   #if !_FS_READONLY	/* R/W configuration */
;;;2264   	if (res == FR_OK) {
001590  b90f              CBNZ     r7,|L1.5526|
;;;2265   		if (!dir)	/* Current dir itself */
001592  b904              CBNZ     r4,|L1.5526|
;;;2266   			res = FR_INVALID_NAME;
001594  2706              MOVS     r7,#6
                  |L1.5526|
;;;2267   #if _FS_SHARE
;;;2268   		else
;;;2269   			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
;;;2270   #endif
;;;2271   	}
;;;2272   	/* Create or Open a file */
;;;2273   	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
001596  e00b              B        |L1.5552|
                  |L1.5528|
                          DCD      0x00544146
                  |L1.5532|
                          DCD      FatFs
                  |L1.5536|
                          DCD      0x41615252
                  |L1.5540|
                          DCD      0x61417272
                  |L1.5544|
                          DCD      Fsid
                  |L1.5548|
                          DCD      LfnBuf
                  |L1.5552|
0015b0  f006001c          AND      r0,r6,#0x1c
0015b4  2800              CMP      r0,#0
0015b6  d058              BEQ      |L1.5738|
;;;2274   		DWORD dw, cl;
;;;2275   
;;;2276   		if (res != FR_OK) {					/* No file, create new */
0015b8  b14f              CBZ      r7,|L1.5582|
;;;2277   			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
0015ba  2f04              CMP      r7,#4
0015bc  d103              BNE      |L1.5574|
;;;2278   #if _FS_SHARE
;;;2279   				res = enq_lock(dj.fs) ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
;;;2280   #else
;;;2281   				res = dir_register(&dj);
0015be  a803              ADD      r0,sp,#0xc
0015c0  f7fffffe          BL       dir_register
0015c4  4607              MOV      r7,r0
                  |L1.5574|
;;;2282   #endif
;;;2283   			mode |= FA_CREATE_ALWAYS;		/* File is created */
0015c6  f0460608          ORR      r6,r6,#8
;;;2284   			dir = dj.dir;					/* New entry */
0015ca  9c08              LDR      r4,[sp,#0x20]
0015cc  e009              B        |L1.5602|
                  |L1.5582|
;;;2285   		}
;;;2286   		else {								/* Any object is already existing */
;;;2287   			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
0015ce  7ae0              LDRB     r0,[r4,#0xb]
0015d0  f0000011          AND      r0,r0,#0x11
0015d4  b108              CBZ      r0,|L1.5594|
;;;2288   				res = FR_DENIED;
0015d6  2707              MOVS     r7,#7
0015d8  e003              B        |L1.5602|
                  |L1.5594|
;;;2289   			} else {
;;;2290   				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
0015da  f0060004          AND      r0,r6,#4
0015de  b100              CBZ      r0,|L1.5602|
;;;2291   					res = FR_EXIST;
0015e0  2708              MOVS     r7,#8
                  |L1.5602|
;;;2292   			}
;;;2293   		}
;;;2294   		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
0015e2  2f00              CMP      r7,#0
0015e4  d140              BNE      |L1.5736|
0015e6  f0060008          AND      r0,r6,#8
0015ea  2800              CMP      r0,#0
0015ec  d03c              BEQ      |L1.5736|
;;;2295   			dw = get_fattime();					/* Created time */
0015ee  f7fffffe          BL       get_fattime
0015f2  4680              MOV      r8,r0
;;;2296   			ST_DWORD(dir+DIR_CrtTime, dw);
0015f4  f884800e          STRB     r8,[r4,#0xe]
0015f8  ea4f2118          LSR      r1,r8,#8
0015fc  73e1              STRB     r1,[r4,#0xf]
0015fe  ea4f4118          LSR      r1,r8,#16
001602  7421              STRB     r1,[r4,#0x10]
001604  ea4f6118          LSR      r1,r8,#24
001608  7461              STRB     r1,[r4,#0x11]
;;;2297   			dir[DIR_Attr] = 0;					/* Reset attribute */
00160a  2000              MOVS     r0,#0
00160c  72e0              STRB     r0,[r4,#0xb]
;;;2298   			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
00160e  7720              STRB     r0,[r4,#0x1c]
001610  2100              MOVS     r1,#0
001612  7761              STRB     r1,[r4,#0x1d]
001614  77a1              STRB     r1,[r4,#0x1e]
001616  77e1              STRB     r1,[r4,#0x1f]
;;;2299   			cl = LD_CLUST(dir);					/* Get start cluster */
001618  7ea1              LDRB     r1,[r4,#0x1a]
00161a  7ee0              LDRB     r0,[r4,#0x1b]
00161c  ea412100          ORR      r1,r1,r0,LSL #8
001620  7d22              LDRB     r2,[r4,#0x14]
001622  7d60              LDRB     r0,[r4,#0x15]
001624  ea422000          ORR      r0,r2,r0,LSL #8
001628  ea414900          ORR      r9,r1,r0,LSL #16
;;;2300   			ST_CLUST(dir, 0);					/* cluster = 0 */
00162c  2000              MOVS     r0,#0
00162e  76a0              STRB     r0,[r4,#0x1a]
001630  2100              MOVS     r1,#0
001632  76e1              STRB     r1,[r4,#0x1b]
001634  7520              STRB     r0,[r4,#0x14]
001636  7561              STRB     r1,[r4,#0x15]
;;;2301   			dj.fs->wflag = 1;
001638  2001              MOVS     r0,#1
00163a  9903              LDR      r1,[sp,#0xc]
00163c  7108              STRB     r0,[r1,#4]
;;;2302   			if (cl) {							/* Remove the cluster chain if exist */
00163e  f1b90f00          CMP      r9,#0
001642  d011              BEQ      |L1.5736|
;;;2303   				dw = dj.fs->winsect;
001644  9803              LDR      r0,[sp,#0xc]
001646  f8d0802c          LDR      r8,[r0,#0x2c]
;;;2304   				res = remove_chain(dj.fs, cl);
00164a  4649              MOV      r1,r9
00164c  9803              LDR      r0,[sp,#0xc]
00164e  f7fffffe          BL       remove_chain
001652  4607              MOV      r7,r0
;;;2305   				if (res == FR_OK) {
001654  b947              CBNZ     r7,|L1.5736|
;;;2306   					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
001656  f1a90001          SUB      r0,r9,#1
00165a  9903              LDR      r1,[sp,#0xc]
00165c  60c8              STR      r0,[r1,#0xc]
;;;2307   					res = move_window(dj.fs, dw);
00165e  4641              MOV      r1,r8
001660  9803              LDR      r0,[sp,#0xc]
001662  f7fffffe          BL       move_window
001666  4607              MOV      r7,r0
                  |L1.5736|
;;;2308   				}
;;;2309   			}
;;;2310   		}
;;;2311   	}
001668  e00e              B        |L1.5768|
                  |L1.5738|
;;;2312   	else {	/* Open an existing file */
;;;2313   		if (res == FR_OK) {						/* Follow succeeded */
00166a  b96f              CBNZ     r7,|L1.5768|
;;;2314   			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
00166c  7ae0              LDRB     r0,[r4,#0xb]
00166e  f0000010          AND      r0,r0,#0x10
001672  b108              CBZ      r0,|L1.5752|
;;;2315   				res = FR_NO_FILE;
001674  2704              MOVS     r7,#4
001676  e007              B        |L1.5768|
                  |L1.5752|
;;;2316   			} else {
;;;2317   				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
001678  f0060002          AND      r0,r6,#2
00167c  b120              CBZ      r0,|L1.5768|
00167e  7ae0              LDRB     r0,[r4,#0xb]
001680  f0000001          AND      r0,r0,#1
001684  b100              CBZ      r0,|L1.5768|
;;;2318   					res = FR_DENIED;
001686  2707              MOVS     r7,#7
                  |L1.5768|
;;;2319   			}
;;;2320   		}
;;;2321   	}
;;;2322   	if (res == FR_OK) {
001688  b947              CBNZ     r7,|L1.5788|
;;;2323   		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
00168a  f0060008          AND      r0,r6,#8
00168e  b108              CBZ      r0,|L1.5780|
;;;2324   			mode |= FA__WRITTEN;
001690  f0460620          ORR      r6,r6,#0x20
                  |L1.5780|
;;;2325   		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
001694  9803              LDR      r0,[sp,#0xc]
001696  6ac0              LDR      r0,[r0,#0x2c]
001698  61e8              STR      r0,[r5,#0x1c]
;;;2326   		fp->dir_ptr = dir;
00169a  622c              STR      r4,[r5,#0x20]
                  |L1.5788|
;;;2327   #if _FS_SHARE
;;;2328   		fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
;;;2329   		if (!fp->lockid) res = FR_INT_ERR;
;;;2330   #endif
;;;2331   	}
;;;2332   
;;;2333   #else				/* R/O configuration */
;;;2334   	if (res == FR_OK) {					/* Follow succeeded */
;;;2335   		if (!dir) {						/* Current dir itself */
;;;2336   			res = FR_INVALID_NAME;
;;;2337   		} else {
;;;2338   			if (dir[DIR_Attr] & AM_DIR)	/* It is a directory */
;;;2339   				res = FR_NO_FILE;
;;;2340   		}
;;;2341   	}
;;;2342   #endif
;;;2343   	FREE_BUF();
;;;2344   
;;;2345   	if (res == FR_OK) {
00169c  b9ff              CBNZ     r7,|L1.5854|
;;;2346   		fp->flag = mode;					/* File access mode */
00169e  71ae              STRB     r6,[r5,#6]
;;;2347   		fp->sclust = LD_CLUST(dir);			/* File start cluster */
0016a0  7ea1              LDRB     r1,[r4,#0x1a]
0016a2  7ee0              LDRB     r0,[r4,#0x1b]
0016a4  ea412100          ORR      r1,r1,r0,LSL #8
0016a8  7d22              LDRB     r2,[r4,#0x14]
0016aa  7d60              LDRB     r0,[r4,#0x15]
0016ac  ea422000          ORR      r0,r2,r0,LSL #8
0016b0  ea414000          ORR      r0,r1,r0,LSL #16
0016b4  6128              STR      r0,[r5,#0x10]
;;;2348   		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
0016b6  7fe0              LDRB     r0,[r4,#0x1f]
0016b8  0601              LSLS     r1,r0,#24
0016ba  7fa0              LDRB     r0,[r4,#0x1e]
0016bc  ea414100          ORR      r1,r1,r0,LSL #16
0016c0  7f60              LDRB     r0,[r4,#0x1d]
0016c2  ea412000          ORR      r0,r1,r0,LSL #8
0016c6  7f21              LDRB     r1,[r4,#0x1c]
0016c8  4308              ORRS     r0,r0,r1
0016ca  60e8              STR      r0,[r5,#0xc]
;;;2349   		fp->fptr = 0;						/* File pointer */
0016cc  2000              MOVS     r0,#0
0016ce  60a8              STR      r0,[r5,#8]
;;;2350   		fp->dsect = 0;
0016d0  61a8              STR      r0,[r5,#0x18]
;;;2351   #if _USE_FASTSEEK
;;;2352   		fp->cltbl = 0;						/* Normal seek mode */
0016d2  6268              STR      r0,[r5,#0x24]
;;;2353   #endif
;;;2354   		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
0016d4  9803              LDR      r0,[sp,#0xc]
0016d6  6028              STR      r0,[r5,#0]
0016d8  9803              LDR      r0,[sp,#0xc]
0016da  88c0              LDRH     r0,[r0,#6]
0016dc  80a8              STRH     r0,[r5,#4]
                  |L1.5854|
;;;2355   	}
;;;2356   
;;;2357   	LEAVE_FF(dj.fs, res);
0016de  4638              MOV      r0,r7
;;;2358   }
0016e0  b00f              ADD      sp,sp,#0x3c
0016e2  e8bd83f0          POP      {r4-r9,pc}
;;;2359   
                          ENDP

                  f_read PROC
;;;2366   
;;;2367   FRESULT f_read (
0016e6  e92d4fff          PUSH     {r0-r11,lr}
;;;2368   	FIL *fp, 		/* Pointer to the file object */
;;;2369   	void *buff,		/* Pointer to data buffer */
;;;2370   	UINT btr,		/* Number of bytes to read */
;;;2371   	UINT *br		/* Pointer to number of bytes read */
;;;2372   )
;;;2373   {
0016ea  b083              SUB      sp,sp,#0xc
0016ec  4604              MOV      r4,r0
0016ee  4615              MOV      r5,r2
0016f0  469a              MOV      r10,r3
;;;2374   	FRESULT res;
;;;2375   	DWORD clst, sect, remain;
;;;2376   	UINT rcnt, cc;
;;;2377   	BYTE csect, *rbuff = buff;
0016f2  f8ddb010          LDR      r11,[sp,#0x10]
;;;2378   
;;;2379   
;;;2380   	*br = 0;	/* Initialize byte counter */
0016f6  2000              MOVS     r0,#0
0016f8  f8ca0000          STR      r0,[r10,#0]
;;;2381   
;;;2382   	res = validate(fp->fs, fp->id);				/* Check validity */
0016fc  88a1              LDRH     r1,[r4,#4]
0016fe  6820              LDR      r0,[r4,#0]
001700  f7fffffe          BL       validate
001704  9002              STR      r0,[sp,#8]
;;;2383   	if (res != FR_OK) LEAVE_FF(fp->fs, res);
001706  9802              LDR      r0,[sp,#8]
001708  b118              CBZ      r0,|L1.5906|
00170a  9802              LDR      r0,[sp,#8]
                  |L1.5900|
;;;2384   	if (fp->flag & FA__ERROR)					/* Aborted file? */
;;;2385   		LEAVE_FF(fp->fs, FR_INT_ERR);
;;;2386   	if (!(fp->flag & FA_READ)) 					/* Check access mode */
;;;2387   		LEAVE_FF(fp->fs, FR_DENIED);
;;;2388   	remain = fp->fsize - fp->fptr;
;;;2389   	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
;;;2390   
;;;2391   	for ( ;  btr;								/* Repeat until all data read */
;;;2392   		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
;;;2393   		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
;;;2394   			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
;;;2395   			if (!csect) {						/* On the cluster boundary? */
;;;2396   				if (fp->fptr == 0) {			/* On the top of the file? */
;;;2397   					clst = fp->sclust;			/* Follow from the origin */
;;;2398   				} else {						/* Middle or end of the file */
;;;2399   #if _USE_FASTSEEK
;;;2400   					if (fp->cltbl)
;;;2401   						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
;;;2402   					else
;;;2403   #endif
;;;2404   						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
;;;2405   				}
;;;2406   				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
;;;2407   				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
;;;2408   				fp->clust = clst;				/* Update current cluster */
;;;2409   			}
;;;2410   			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
;;;2411   			if (!sect) ABORT(fp->fs, FR_INT_ERR);
;;;2412   			sect += csect;
;;;2413   			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
;;;2414   			if (cc) {							/* Read maximum contiguous sectors directly */
;;;2415   				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
;;;2416   					cc = fp->fs->csize - csect;
;;;2417   				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
;;;2418   					ABORT(fp->fs, FR_DISK_ERR);
;;;2419   #if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
;;;2420   #if _FS_TINY
;;;2421   				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
;;;2422   					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
;;;2423   #else
;;;2424   				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
;;;2425   					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
;;;2426   #endif
;;;2427   #endif
;;;2428   				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
;;;2429   				continue;
;;;2430   			}
;;;2431   #if !_FS_TINY
;;;2432   			if (fp->dsect != sect) {			/* Load data sector if not in cache */
;;;2433   #if !_FS_READONLY
;;;2434   				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
;;;2435   					if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
;;;2436   						ABORT(fp->fs, FR_DISK_ERR);
;;;2437   					fp->flag &= ~FA__DIRTY;
;;;2438   				}
;;;2439   #endif
;;;2440   				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
;;;2441   					ABORT(fp->fs, FR_DISK_ERR);
;;;2442   			}
;;;2443   #endif
;;;2444   			fp->dsect = sect;
;;;2445   		}
;;;2446   		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
;;;2447   		if (rcnt > btr) rcnt = btr;
;;;2448   #if _FS_TINY
;;;2449   		if (move_window(fp->fs, fp->dsect))		/* Move sector window */
;;;2450   			ABORT(fp->fs, FR_DISK_ERR);
;;;2451   		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
;;;2452   #else
;;;2453   		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
;;;2454   #endif
;;;2455   	}
;;;2456   
;;;2457   	LEAVE_FF(fp->fs, FR_OK);
;;;2458   }
00170c  b007              ADD      sp,sp,#0x1c
00170e  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.5906|
001712  79a0              LDRB     r0,[r4,#6]            ;2384
001714  f0000080          AND      r0,r0,#0x80           ;2384
001718  b108              CBZ      r0,|L1.5918|
00171a  2002              MOVS     r0,#2                 ;2385
00171c  e7f6              B        |L1.5900|
                  |L1.5918|
00171e  79a0              LDRB     r0,[r4,#6]            ;2386
001720  f0000001          AND      r0,r0,#1              ;2386
001724  b908              CBNZ     r0,|L1.5930|
001726  2007              MOVS     r0,#7                 ;2387
001728  e7f0              B        |L1.5900|
                  |L1.5930|
00172a  e9d41002          LDRD     r1,r0,[r4,#8]         ;2388
00172e  1a40              SUBS     r0,r0,r1              ;2388
001730  9000              STR      r0,[sp,#0]            ;2388
001732  9800              LDR      r0,[sp,#0]            ;2389
001734  4285              CMP      r5,r0                 ;2389
001736  d900              BLS      |L1.5946|
001738  9d00              LDR      r5,[sp,#0]            ;2389
                  |L1.5946|
00173a  e0bd              B        |L1.6328|
                  |L1.5948|
00173c  8920              LDRH     r0,[r4,#8]            ;2393
00173e  f3c00008          UBFX     r0,r0,#0,#9           ;2393
001742  2800              CMP      r0,#0                 ;2393
001744  d170              BNE      |L1.6184|
001746  6820              LDR      r0,[r4,#0]            ;2394
001748  7880              LDRB     r0,[r0,#2]            ;2394
00174a  1e40              SUBS     r0,r0,#1              ;2394
00174c  68a1              LDR      r1,[r4,#8]            ;2394
00174e  ea002051          AND      r0,r0,r1,LSR #9       ;2394
001752  f00009ff          AND      r9,r0,#0xff           ;2394
001756  f1b90f00          CMP      r9,#0                 ;2395
00175a  d125              BNE      |L1.6056|
00175c  68a0              LDR      r0,[r4,#8]            ;2396
00175e  b910              CBNZ     r0,|L1.5990|
001760  6920              LDR      r0,[r4,#0x10]         ;2397
001762  9001              STR      r0,[sp,#4]            ;2397
001764  e00c              B        |L1.6016|
                  |L1.5990|
001766  6a60              LDR      r0,[r4,#0x24]         ;2400
001768  b128              CBZ      r0,|L1.6006|
00176a  4620              MOV      r0,r4                 ;2401
00176c  68a1              LDR      r1,[r4,#8]            ;2401
00176e  f7fffffe          BL       clmt_clust
001772  9001              STR      r0,[sp,#4]            ;2401
001774  e004              B        |L1.6016|
                  |L1.6006|
001776  6961              LDR      r1,[r4,#0x14]         ;2404
001778  6820              LDR      r0,[r4,#0]            ;2404
00177a  f7fffffe          BL       get_fat
00177e  9001              STR      r0,[sp,#4]            ;2404
                  |L1.6016|
001780  9801              LDR      r0,[sp,#4]            ;2406
001782  2802              CMP      r0,#2                 ;2406
001784  d205              BCS      |L1.6034|
001786  79a0              LDRB     r0,[r4,#6]            ;2406
001788  f0400080          ORR      r0,r0,#0x80           ;2406
00178c  71a0              STRB     r0,[r4,#6]            ;2406
00178e  2002              MOVS     r0,#2                 ;2406
001790  e7bc              B        |L1.5900|
                  |L1.6034|
001792  9801              LDR      r0,[sp,#4]            ;2407
001794  1c40              ADDS     r0,r0,#1              ;2407
001796  b928              CBNZ     r0,|L1.6052|
001798  79a0              LDRB     r0,[r4,#6]            ;2407
00179a  f0400080          ORR      r0,r0,#0x80           ;2407
00179e  71a0              STRB     r0,[r4,#6]            ;2407
0017a0  2001              MOVS     r0,#1                 ;2407
0017a2  e7b3              B        |L1.5900|
                  |L1.6052|
0017a4  9801              LDR      r0,[sp,#4]            ;2408
0017a6  6160              STR      r0,[r4,#0x14]         ;2408
                  |L1.6056|
0017a8  6961              LDR      r1,[r4,#0x14]         ;2410
0017aa  6820              LDR      r0,[r4,#0]            ;2410
0017ac  f7fffffe          BL       clust2sect
0017b0  4606              MOV      r6,r0                 ;2410
0017b2  b92e              CBNZ     r6,|L1.6080|
0017b4  79a0              LDRB     r0,[r4,#6]            ;2411
0017b6  f0400080          ORR      r0,r0,#0x80           ;2411
0017ba  71a0              STRB     r0,[r4,#6]            ;2411
0017bc  2002              MOVS     r0,#2                 ;2411
0017be  e7a5              B        |L1.5900|
                  |L1.6080|
0017c0  444e              ADD      r6,r6,r9              ;2412
0017c2  ea4f2855          LSR      r8,r5,#9              ;2413
0017c6  f1b80f00          CMP      r8,#0                 ;2414
0017ca  d02e              BEQ      |L1.6186|
0017cc  eb090008          ADD      r0,r9,r8              ;2415
0017d0  6821              LDR      r1,[r4,#0]            ;2415
0017d2  7889              LDRB     r1,[r1,#2]            ;2415
0017d4  4288              CMP      r0,r1                 ;2415
0017d6  d903              BLS      |L1.6112|
0017d8  6820              LDR      r0,[r4,#0]            ;2416
0017da  7880              LDRB     r0,[r0,#2]            ;2416
0017dc  eba00809          SUB      r8,r0,r9              ;2416
                  |L1.6112|
0017e0  f00803ff          AND      r3,r8,#0xff           ;2417
0017e4  6821              LDR      r1,[r4,#0]            ;2417
0017e6  7848              LDRB     r0,[r1,#1]            ;2417
0017e8  4632              MOV      r2,r6                 ;2417
0017ea  4659              MOV      r1,r11                ;2417
0017ec  f7fffffe          BL       disk_read
0017f0  b128              CBZ      r0,|L1.6142|
0017f2  79a0              LDRB     r0,[r4,#6]            ;2418
0017f4  f0400080          ORR      r0,r0,#0x80           ;2418
0017f8  71a0              STRB     r0,[r4,#6]            ;2418
0017fa  2001              MOVS     r0,#1                 ;2418
0017fc  e786              B        |L1.5900|
                  |L1.6142|
0017fe  79a0              LDRB     r0,[r4,#6]            ;2424
001800  f0000040          AND      r0,r0,#0x40           ;2424
001804  b168              CBZ      r0,|L1.6178|
001806  69a0              LDR      r0,[r4,#0x18]         ;2424
001808  1b80              SUBS     r0,r0,r6              ;2424
00180a  4540              CMP      r0,r8                 ;2424
00180c  d209              BCS      |L1.6178|
00180e  69a1              LDR      r1,[r4,#0x18]         ;2425
001810  1b89              SUBS     r1,r1,r6              ;2425
001812  eb0b2041          ADD      r0,r11,r1,LSL #9      ;2425
001816  f44f7200          MOV      r2,#0x200             ;2425
00181a  f1040128          ADD      r1,r4,#0x28           ;2425
00181e  f7fffffe          BL       mem_cpy
                  |L1.6178|
001822  ea4f2748          LSL      r7,r8,#9              ;2428
001826  e03d              B        |L1.6308|
                  |L1.6184|
001828  e029              B        |L1.6270|
                  |L1.6186|
00182a  69a0              LDR      r0,[r4,#0x18]         ;2432
00182c  42b0              CMP      r0,r6                 ;2432
00182e  d025              BEQ      |L1.6268|
001830  79a0              LDRB     r0,[r4,#6]            ;2434
001832  f0000040          AND      r0,r0,#0x40           ;2434
001836  b190              CBZ      r0,|L1.6238|
001838  6821              LDR      r1,[r4,#0]            ;2435
00183a  7848              LDRB     r0,[r1,#1]            ;2435
00183c  2301              MOVS     r3,#1                 ;2435
00183e  f1040128          ADD      r1,r4,#0x28           ;2435
001842  69a2              LDR      r2,[r4,#0x18]         ;2435
001844  f7fffffe          BL       disk_write
001848  b128              CBZ      r0,|L1.6230|
00184a  79a0              LDRB     r0,[r4,#6]            ;2436
00184c  f0400080          ORR      r0,r0,#0x80           ;2436
001850  71a0              STRB     r0,[r4,#6]            ;2436
001852  2001              MOVS     r0,#1                 ;2436
001854  e75a              B        |L1.5900|
                  |L1.6230|
001856  79a0              LDRB     r0,[r4,#6]            ;2437
001858  f0200040          BIC      r0,r0,#0x40           ;2437
00185c  71a0              STRB     r0,[r4,#6]            ;2437
                  |L1.6238|
00185e  6821              LDR      r1,[r4,#0]            ;2440
001860  7848              LDRB     r0,[r1,#1]            ;2440
001862  2301              MOVS     r3,#1                 ;2440
001864  4632              MOV      r2,r6                 ;2440
001866  f1040128          ADD      r1,r4,#0x28           ;2440
00186a  f7fffffe          BL       disk_read
00186e  b128              CBZ      r0,|L1.6268|
001870  79a0              LDRB     r0,[r4,#6]            ;2441
001872  f0400080          ORR      r0,r0,#0x80           ;2441
001876  71a0              STRB     r0,[r4,#6]            ;2441
001878  2001              MOVS     r0,#1                 ;2441
00187a  e747              B        |L1.5900|
                  |L1.6268|
00187c  61a6              STR      r6,[r4,#0x18]         ;2444
                  |L1.6270|
00187e  8920              LDRH     r0,[r4,#8]            ;2446
001880  f3c00008          UBFX     r0,r0,#0,#9           ;2446
001884  f5c07700          RSB      r7,r0,#0x200          ;2446
001888  42af              CMP      r7,r5                 ;2447
00188a  d900              BLS      |L1.6286|
00188c  462f              MOV      r7,r5                 ;2447
                  |L1.6286|
00188e  8920              LDRH     r0,[r4,#8]            ;2453
001890  f3c00208          UBFX     r2,r0,#0,#9           ;2453
001894  f1040028          ADD      r0,r4,#0x28           ;2453
001898  1811              ADDS     r1,r2,r0              ;2453
00189a  463a              MOV      r2,r7                 ;2453
00189c  4658              MOV      r0,r11                ;2453
00189e  f7fffffe          BL       mem_cpy
0018a2  bf00              NOP                            ;2429
                  |L1.6308|
0018a4  44bb              ADD      r11,r11,r7            ;2392
0018a6  68a0              LDR      r0,[r4,#8]            ;2392
0018a8  4438              ADD      r0,r0,r7              ;2392
0018aa  60a0              STR      r0,[r4,#8]            ;2392
0018ac  f8da0000          LDR      r0,[r10,#0]           ;2392
0018b0  4438              ADD      r0,r0,r7              ;2392
0018b2  f8ca0000          STR      r0,[r10,#0]           ;2392
0018b6  1bed              SUBS     r5,r5,r7              ;2392
                  |L1.6328|
0018b8  2d00              CMP      r5,#0                 ;2391
0018ba  f47faf3f          BNE      |L1.5948|
0018be  2000              MOVS     r0,#0                 ;2457
0018c0  e724              B        |L1.5900|
;;;2459   
                          ENDP

                  f_write PROC
;;;2467   
;;;2468   FRESULT f_write (
0018c2  e92d4fff          PUSH     {r0-r11,lr}
;;;2469   	FIL *fp,			/* Pointer to the file object */
;;;2470   	const void *buff,	/* Pointer to the data to be written */
;;;2471   	UINT btw,			/* Number of bytes to write */
;;;2472   	UINT *bw			/* Pointer to number of bytes written */
;;;2473   )
;;;2474   {
0018c6  b083              SUB      sp,sp,#0xc
0018c8  4604              MOV      r4,r0
0018ca  4615              MOV      r5,r2
0018cc  469b              MOV      r11,r3
;;;2475   	FRESULT res;
;;;2476   	DWORD clst, sect;
;;;2477   	UINT wcnt, cc;
;;;2478   	const BYTE *wbuff = buff;
0018ce  9804              LDR      r0,[sp,#0x10]
0018d0  9001              STR      r0,[sp,#4]
;;;2479   	BYTE csect;
;;;2480   
;;;2481   
;;;2482   	*bw = 0;	/* Initialize byte counter */
0018d2  2000              MOVS     r0,#0
0018d4  f8cb0000          STR      r0,[r11,#0]
;;;2483   
;;;2484   	res = validate(fp->fs, fp->id);			/* Check validity */
0018d8  88a1              LDRH     r1,[r4,#4]
0018da  6820              LDR      r0,[r4,#0]
0018dc  f7fffffe          BL       validate
0018e0  9002              STR      r0,[sp,#8]
;;;2485   	if (res != FR_OK) LEAVE_FF(fp->fs, res);
0018e2  9802              LDR      r0,[sp,#8]
0018e4  b118              CBZ      r0,|L1.6382|
0018e6  9802              LDR      r0,[sp,#8]
                  |L1.6376|
;;;2486   	if (fp->flag & FA__ERROR)				/* Aborted file? */
;;;2487   		LEAVE_FF(fp->fs, FR_INT_ERR);
;;;2488   	if (!(fp->flag & FA_WRITE))				/* Check access mode */
;;;2489   		LEAVE_FF(fp->fs, FR_DENIED);
;;;2490   	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
;;;2491   
;;;2492   	for ( ;  btw;							/* Repeat until all data written */
;;;2493   		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
;;;2494   		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
;;;2495   			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
;;;2496   			if (!csect) {					/* On the cluster boundary? */
;;;2497   				if (fp->fptr == 0) {		/* On the top of the file? */
;;;2498   					clst = fp->sclust;		/* Follow from the origin */
;;;2499   					if (clst == 0)			/* When no cluster is allocated, */
;;;2500   						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
;;;2501   				} else {					/* Middle or end of the file */
;;;2502   #if _USE_FASTSEEK
;;;2503   					if (fp->cltbl)
;;;2504   						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
;;;2505   					else
;;;2506   #endif
;;;2507   						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
;;;2508   				}
;;;2509   				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
;;;2510   				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
;;;2511   				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
;;;2512   				fp->clust = clst;			/* Update current cluster */
;;;2513   			}
;;;2514   #if _FS_TINY
;;;2515   			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
;;;2516   				ABORT(fp->fs, FR_DISK_ERR);
;;;2517   #else
;;;2518   			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
;;;2519   				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
;;;2520   					ABORT(fp->fs, FR_DISK_ERR);
;;;2521   				fp->flag &= ~FA__DIRTY;
;;;2522   			}
;;;2523   #endif
;;;2524   			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
;;;2525   			if (!sect) ABORT(fp->fs, FR_INT_ERR);
;;;2526   			sect += csect;
;;;2527   			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
;;;2528   			if (cc) {						/* Write maximum contiguous sectors directly */
;;;2529   				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
;;;2530   					cc = fp->fs->csize - csect;
;;;2531   				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
;;;2532   					ABORT(fp->fs, FR_DISK_ERR);
;;;2533   #if _FS_TINY
;;;2534   				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
;;;2535   					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
;;;2536   					fp->fs->wflag = 0;
;;;2537   				}
;;;2538   #else
;;;2539   				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
;;;2540   					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
;;;2541   					fp->flag &= ~FA__DIRTY;
;;;2542   				}
;;;2543   #endif
;;;2544   				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
;;;2545   				continue;
;;;2546   			}
;;;2547   #if _FS_TINY
;;;2548   			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
;;;2549   				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
;;;2550   				fp->fs->winsect = sect;
;;;2551   			}
;;;2552   #else
;;;2553   			if (fp->dsect != sect) {		/* Fill sector cache with file data */
;;;2554   				if (fp->fptr < fp->fsize &&
;;;2555   					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
;;;2556   						ABORT(fp->fs, FR_DISK_ERR);
;;;2557   			}
;;;2558   #endif
;;;2559   			fp->dsect = sect;
;;;2560   		}
;;;2561   		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
;;;2562   		if (wcnt > btw) wcnt = btw;
;;;2563   #if _FS_TINY
;;;2564   		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
;;;2565   			ABORT(fp->fs, FR_DISK_ERR);
;;;2566   		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
;;;2567   		fp->fs->wflag = 1;
;;;2568   #else
;;;2569   		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
;;;2570   		fp->flag |= FA__DIRTY;
;;;2571   #endif
;;;2572   	}
;;;2573   
;;;2574   	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
;;;2575   	fp->flag |= FA__WRITTEN;						/* Set file change flag */
;;;2576   
;;;2577   	LEAVE_FF(fp->fs, FR_OK);
;;;2578   }
0018e8  b007              ADD      sp,sp,#0x1c
0018ea  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.6382|
0018ee  79a0              LDRB     r0,[r4,#6]            ;2486
0018f0  f0000080          AND      r0,r0,#0x80           ;2486
0018f4  b108              CBZ      r0,|L1.6394|
0018f6  2002              MOVS     r0,#2                 ;2487
0018f8  e7f6              B        |L1.6376|
                  |L1.6394|
0018fa  79a0              LDRB     r0,[r4,#6]            ;2488
0018fc  f0000002          AND      r0,r0,#2              ;2488
001900  b908              CBNZ     r0,|L1.6406|
001902  2007              MOVS     r0,#7                 ;2489
001904  e7f0              B        |L1.6376|
                  |L1.6406|
001906  68e0              LDR      r0,[r4,#0xc]          ;2490
001908  4428              ADD      r0,r0,r5              ;2490
00190a  68e1              LDR      r1,[r4,#0xc]          ;2490
00190c  4288              CMP      r0,r1                 ;2490
00190e  d200              BCS      |L1.6418|
001910  2500              MOVS     r5,#0                 ;2490
                  |L1.6418|
001912  e0d6              B        |L1.6850|
                  |L1.6420|
001914  8920              LDRH     r0,[r4,#8]            ;2494
001916  f3c00008          UBFX     r0,r0,#0,#9           ;2494
00191a  2800              CMP      r0,#0                 ;2494
00191c  d17e              BNE      |L1.6684|
00191e  6820              LDR      r0,[r4,#0]            ;2495
001920  7880              LDRB     r0,[r0,#2]            ;2495
001922  1e40              SUBS     r0,r0,#1              ;2495
001924  68a1              LDR      r1,[r4,#8]            ;2495
001926  ea002051          AND      r0,r0,r1,LSR #9       ;2495
00192a  f0000aff          AND      r10,r0,#0xff          ;2495
00192e  f1ba0f00          CMP      r10,#0                ;2496
001932  d132              BNE      |L1.6554|
001934  68a0              LDR      r0,[r4,#8]            ;2497
001936  b958              CBNZ     r0,|L1.6480|
001938  f8d48010          LDR      r8,[r4,#0x10]         ;2498
00193c  f1b80f00          CMP      r8,#0                 ;2499
001940  d113              BNE      |L1.6506|
001942  2100              MOVS     r1,#0                 ;2500
001944  6820              LDR      r0,[r4,#0]            ;2500
001946  f7fffffe          BL       create_chain
00194a  4680              MOV      r8,r0                 ;2500
00194c  6120              STR      r0,[r4,#0x10]         ;2500
00194e  e00c              B        |L1.6506|
                  |L1.6480|
001950  6a60              LDR      r0,[r4,#0x24]         ;2503
001952  b128              CBZ      r0,|L1.6496|
001954  4620              MOV      r0,r4                 ;2504
001956  68a1              LDR      r1,[r4,#8]            ;2504
001958  f7fffffe          BL       clmt_clust
00195c  4680              MOV      r8,r0                 ;2504
00195e  e004              B        |L1.6506|
                  |L1.6496|
001960  6961              LDR      r1,[r4,#0x14]         ;2507
001962  6820              LDR      r0,[r4,#0]            ;2507
001964  f7fffffe          BL       create_chain
001968  4680              MOV      r8,r0                 ;2507
                  |L1.6506|
00196a  f1b80f00          CMP      r8,#0                 ;2509
00196e  d100              BNE      |L1.6514|
001970  e0aa              B        |L1.6856|
                  |L1.6514|
001972  f1b80f01          CMP      r8,#1                 ;2510
001976  d105              BNE      |L1.6532|
001978  79a0              LDRB     r0,[r4,#6]            ;2510
00197a  f0400080          ORR      r0,r0,#0x80           ;2510
00197e  71a0              STRB     r0,[r4,#6]            ;2510
001980  2002              MOVS     r0,#2                 ;2510
001982  e7b1              B        |L1.6376|
                  |L1.6532|
001984  f1080001          ADD      r0,r8,#1              ;2511
001988  b928              CBNZ     r0,|L1.6550|
00198a  79a0              LDRB     r0,[r4,#6]            ;2511
00198c  f0400080          ORR      r0,r0,#0x80           ;2511
001990  71a0              STRB     r0,[r4,#6]            ;2511
001992  2001              MOVS     r0,#1                 ;2511
001994  e7a8              B        |L1.6376|
                  |L1.6550|
001996  f8c48014          STR      r8,[r4,#0x14]         ;2512
                  |L1.6554|
00199a  79a0              LDRB     r0,[r4,#6]            ;2518
00199c  f0000040          AND      r0,r0,#0x40           ;2518
0019a0  b190              CBZ      r0,|L1.6600|
0019a2  6821              LDR      r1,[r4,#0]            ;2519
0019a4  7848              LDRB     r0,[r1,#1]            ;2519
0019a6  2301              MOVS     r3,#1                 ;2519
0019a8  f1040128          ADD      r1,r4,#0x28           ;2519
0019ac  69a2              LDR      r2,[r4,#0x18]         ;2519
0019ae  f7fffffe          BL       disk_write
0019b2  b128              CBZ      r0,|L1.6592|
0019b4  79a0              LDRB     r0,[r4,#6]            ;2520
0019b6  f0400080          ORR      r0,r0,#0x80           ;2520
0019ba  71a0              STRB     r0,[r4,#6]            ;2520
0019bc  2001              MOVS     r0,#1                 ;2520
0019be  e793              B        |L1.6376|
                  |L1.6592|
0019c0  79a0              LDRB     r0,[r4,#6]            ;2521
0019c2  f0200040          BIC      r0,r0,#0x40           ;2521
0019c6  71a0              STRB     r0,[r4,#6]            ;2521
                  |L1.6600|
0019c8  6961              LDR      r1,[r4,#0x14]         ;2524
0019ca  6820              LDR      r0,[r4,#0]            ;2524
0019cc  f7fffffe          BL       clust2sect
0019d0  4606              MOV      r6,r0                 ;2524
0019d2  b92e              CBNZ     r6,|L1.6624|
0019d4  79a0              LDRB     r0,[r4,#6]            ;2525
0019d6  f0400080          ORR      r0,r0,#0x80           ;2525
0019da  71a0              STRB     r0,[r4,#6]            ;2525
0019dc  2002              MOVS     r0,#2                 ;2525
0019de  e783              B        |L1.6376|
                  |L1.6624|
0019e0  4456              ADD      r6,r6,r10             ;2526
0019e2  ea4f2955          LSR      r9,r5,#9              ;2527
0019e6  f1b90f00          CMP      r9,#0                 ;2528
0019ea  d030              BEQ      |L1.6734|
0019ec  eb0a0009          ADD      r0,r10,r9             ;2529
0019f0  6821              LDR      r1,[r4,#0]            ;2529
0019f2  7889              LDRB     r1,[r1,#2]            ;2529
0019f4  4288              CMP      r0,r1                 ;2529
0019f6  d903              BLS      |L1.6656|
0019f8  6820              LDR      r0,[r4,#0]            ;2530
0019fa  7880              LDRB     r0,[r0,#2]            ;2530
0019fc  eba0090a          SUB      r9,r0,r10             ;2530
                  |L1.6656|
001a00  f00903ff          AND      r3,r9,#0xff           ;2531
001a04  6821              LDR      r1,[r4,#0]            ;2531
001a06  7848              LDRB     r0,[r1,#1]            ;2531
001a08  4632              MOV      r2,r6                 ;2531
001a0a  9901              LDR      r1,[sp,#4]            ;2531
001a0c  f7fffffe          BL       disk_write
001a10  b138              CBZ      r0,|L1.6690|
001a12  79a0              LDRB     r0,[r4,#6]            ;2532
001a14  f0400080          ORR      r0,r0,#0x80           ;2532
001a18  71a0              STRB     r0,[r4,#6]            ;2532
001a1a  e000              B        |L1.6686|
                  |L1.6684|
001a1c  e02e              B        |L1.6780|
                  |L1.6686|
001a1e  2001              MOVS     r0,#1                 ;2532
001a20  e762              B        |L1.6376|
                  |L1.6690|
001a22  69a0              LDR      r0,[r4,#0x18]         ;2539
001a24  1b80              SUBS     r0,r0,r6              ;2539
001a26  4548              CMP      r0,r9                 ;2539
001a28  d20e              BCS      |L1.6728|
001a2a  69a0              LDR      r0,[r4,#0x18]         ;2540
001a2c  1b80              SUBS     r0,r0,r6              ;2540
001a2e  9a01              LDR      r2,[sp,#4]            ;2540
001a30  eb022140          ADD      r1,r2,r0,LSL #9       ;2540
001a34  f44f7200          MOV      r2,#0x200             ;2540
001a38  f1040028          ADD      r0,r4,#0x28           ;2540
001a3c  f7fffffe          BL       mem_cpy
001a40  79a0              LDRB     r0,[r4,#6]            ;2541
001a42  f0200040          BIC      r0,r0,#0x40           ;2541
001a46  71a0              STRB     r0,[r4,#6]            ;2541
                  |L1.6728|
001a48  ea4f2749          LSL      r7,r9,#9              ;2544
001a4c  e02d              B        |L1.6826|
                  |L1.6734|
001a4e  69a0              LDR      r0,[r4,#0x18]         ;2553
001a50  42b0              CMP      r0,r6                 ;2553
001a52  d012              BEQ      |L1.6778|
001a54  e9d40102          LDRD     r0,r1,[r4,#8]         ;2554
001a58  4288              CMP      r0,r1                 ;2554
001a5a  d20e              BCS      |L1.6778|
001a5c  6821              LDR      r1,[r4,#0]            ;2555
001a5e  7848              LDRB     r0,[r1,#1]            ;2555
001a60  2301              MOVS     r3,#1                 ;2555
001a62  4632              MOV      r2,r6                 ;2555
001a64  f1040128          ADD      r1,r4,#0x28           ;2555
001a68  f7fffffe          BL       disk_read
001a6c  b128              CBZ      r0,|L1.6778|
001a6e  79a0              LDRB     r0,[r4,#6]            ;2556
001a70  f0400080          ORR      r0,r0,#0x80           ;2556
001a74  71a0              STRB     r0,[r4,#6]            ;2556
001a76  2001              MOVS     r0,#1                 ;2556
001a78  e736              B        |L1.6376|
                  |L1.6778|
001a7a  61a6              STR      r6,[r4,#0x18]         ;2559
                  |L1.6780|
001a7c  8920              LDRH     r0,[r4,#8]            ;2561
001a7e  f3c00008          UBFX     r0,r0,#0,#9           ;2561
001a82  f5c07700          RSB      r7,r0,#0x200          ;2561
001a86  42af              CMP      r7,r5                 ;2562
001a88  d900              BLS      |L1.6796|
001a8a  462f              MOV      r7,r5                 ;2562
                  |L1.6796|
001a8c  8921              LDRH     r1,[r4,#8]            ;2569
001a8e  f3c10208          UBFX     r2,r1,#0,#9           ;2569
001a92  f1040128          ADD      r1,r4,#0x28           ;2569
001a96  1850              ADDS     r0,r2,r1              ;2569
001a98  463a              MOV      r2,r7                 ;2569
001a9a  9901              LDR      r1,[sp,#4]            ;2569
001a9c  f7fffffe          BL       mem_cpy
001aa0  79a0              LDRB     r0,[r4,#6]            ;2570
001aa2  f0400040          ORR      r0,r0,#0x40           ;2570
001aa6  71a0              STRB     r0,[r4,#6]            ;2570
001aa8  bf00              NOP                            ;2545
                  |L1.6826|
001aaa  9801              LDR      r0,[sp,#4]            ;2493
001aac  4438              ADD      r0,r0,r7              ;2493
001aae  9001              STR      r0,[sp,#4]            ;2493
001ab0  68a0              LDR      r0,[r4,#8]            ;2493
001ab2  4438              ADD      r0,r0,r7              ;2493
001ab4  60a0              STR      r0,[r4,#8]            ;2493
001ab6  f8db0000          LDR      r0,[r11,#0]           ;2493
001aba  4438              ADD      r0,r0,r7              ;2493
001abc  f8cb0000          STR      r0,[r11,#0]           ;2493
001ac0  1bed              SUBS     r5,r5,r7              ;2493
                  |L1.6850|
001ac2  2d00              CMP      r5,#0                 ;2492
001ac4  f47faf26          BNE      |L1.6420|
                  |L1.6856|
001ac8  bf00              NOP                            ;2509
001aca  e9d40102          LDRD     r0,r1,[r4,#8]         ;2574
001ace  4288              CMP      r0,r1                 ;2574
001ad0  d901              BLS      |L1.6870|
001ad2  68a0              LDR      r0,[r4,#8]            ;2574
001ad4  60e0              STR      r0,[r4,#0xc]          ;2574
                  |L1.6870|
001ad6  79a0              LDRB     r0,[r4,#6]            ;2575
001ad8  f0400020          ORR      r0,r0,#0x20           ;2575
001adc  71a0              STRB     r0,[r4,#6]            ;2575
001ade  2000              MOVS     r0,#0                 ;2577
001ae0  e702              B        |L1.6376|
;;;2579   
                          ENDP

                  f_sync PROC
;;;2586   
;;;2587   FRESULT f_sync (
001ae2  e92d41f0          PUSH     {r4-r8,lr}
;;;2588   	FIL *fp		/* Pointer to the file object */
;;;2589   )
;;;2590   {
001ae6  4604              MOV      r4,r0
;;;2591   	FRESULT res;
;;;2592   	DWORD tim;
;;;2593   	BYTE *dir;
;;;2594   
;;;2595   
;;;2596   	res = validate(fp->fs, fp->id);		/* Check validity of the object */
001ae8  88a1              LDRH     r1,[r4,#4]
001aea  6820              LDR      r0,[r4,#0]
001aec  f7fffffe          BL       validate
001af0  4607              MOV      r7,r0
;;;2597   	if (res == FR_OK) {
001af2  2f00              CMP      r7,#0
001af4  d14f              BNE      |L1.7062|
;;;2598   		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
001af6  79a0              LDRB     r0,[r4,#6]
001af8  f0000020          AND      r0,r0,#0x20
001afc  2800              CMP      r0,#0
001afe  d04a              BEQ      |L1.7062|
;;;2599   #if !_FS_TINY	/* Write-back dirty buffer */
;;;2600   			if (fp->flag & FA__DIRTY) {
001b00  79a0              LDRB     r0,[r4,#6]
001b02  f0000040          AND      r0,r0,#0x40
001b06  b178              CBZ      r0,|L1.6952|
;;;2601   				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
001b08  6821              LDR      r1,[r4,#0]
001b0a  7848              LDRB     r0,[r1,#1]
001b0c  2301              MOVS     r3,#1
001b0e  f1040128          ADD      r1,r4,#0x28
001b12  69a2              LDR      r2,[r4,#0x18]
001b14  f7fffffe          BL       disk_write
001b18  b110              CBZ      r0,|L1.6944|
;;;2602   					LEAVE_FF(fp->fs, FR_DISK_ERR);
001b1a  2001              MOVS     r0,#1
                  |L1.6940|
;;;2603   				fp->flag &= ~FA__DIRTY;
;;;2604   			}
;;;2605   #endif
;;;2606   			/* Update the directory entry */
;;;2607   			res = move_window(fp->fs, fp->dir_sect);
;;;2608   			if (res == FR_OK) {
;;;2609   				dir = fp->dir_ptr;
;;;2610   				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
;;;2611   				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
;;;2612   				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
;;;2613   				tim = get_fattime();						/* Update updated time */
;;;2614   				ST_DWORD(dir+DIR_WrtTime, tim);
;;;2615   				fp->flag &= ~FA__WRITTEN;
;;;2616   				fp->fs->wflag = 1;
;;;2617   				res = sync(fp->fs);
;;;2618   			}
;;;2619   		}
;;;2620   	}
;;;2621   
;;;2622   	LEAVE_FF(fp->fs, res);
;;;2623   }
001b1c  e8bd81f0          POP      {r4-r8,pc}
                  |L1.6944|
001b20  79a0              LDRB     r0,[r4,#6]            ;2603
001b22  f0200040          BIC      r0,r0,#0x40           ;2603
001b26  71a0              STRB     r0,[r4,#6]            ;2603
                  |L1.6952|
001b28  69e1              LDR      r1,[r4,#0x1c]         ;2607
001b2a  6820              LDR      r0,[r4,#0]            ;2607
001b2c  f7fffffe          BL       move_window
001b30  4607              MOV      r7,r0                 ;2607
001b32  2f00              CMP      r7,#0                 ;2608
001b34  d12f              BNE      |L1.7062|
001b36  6a25              LDR      r5,[r4,#0x20]         ;2609
001b38  7ae8              LDRB     r0,[r5,#0xb]          ;2610
001b3a  f0400020          ORR      r0,r0,#0x20           ;2610
001b3e  72e8              STRB     r0,[r5,#0xb]          ;2610
001b40  7b20              LDRB     r0,[r4,#0xc]          ;2611
001b42  7728              STRB     r0,[r5,#0x1c]         ;2611
001b44  89a0              LDRH     r0,[r4,#0xc]          ;2611
001b46  0a01              LSRS     r1,r0,#8              ;2611
001b48  7769              STRB     r1,[r5,#0x1d]         ;2611
001b4a  68e0              LDR      r0,[r4,#0xc]          ;2611
001b4c  0c01              LSRS     r1,r0,#16             ;2611
001b4e  77a9              STRB     r1,[r5,#0x1e]         ;2611
001b50  68e0              LDR      r0,[r4,#0xc]          ;2611
001b52  0e01              LSRS     r1,r0,#24             ;2611
001b54  77e9              STRB     r1,[r5,#0x1f]         ;2611
001b56  7c20              LDRB     r0,[r4,#0x10]         ;2612
001b58  76a8              STRB     r0,[r5,#0x1a]         ;2612
001b5a  8a20              LDRH     r0,[r4,#0x10]         ;2612
001b5c  0a01              LSRS     r1,r0,#8              ;2612
001b5e  76e9              STRB     r1,[r5,#0x1b]         ;2612
001b60  6920              LDR      r0,[r4,#0x10]         ;2612
001b62  0c00              LSRS     r0,r0,#16             ;2612
001b64  7528              STRB     r0,[r5,#0x14]         ;2612
001b66  6920              LDR      r0,[r4,#0x10]         ;2612
001b68  0e01              LSRS     r1,r0,#24             ;2612
001b6a  7569              STRB     r1,[r5,#0x15]         ;2612
001b6c  f7fffffe          BL       get_fattime
001b70  4606              MOV      r6,r0                 ;2613
001b72  75ae              STRB     r6,[r5,#0x16]         ;2614
001b74  0a31              LSRS     r1,r6,#8              ;2614
001b76  75e9              STRB     r1,[r5,#0x17]         ;2614
001b78  0c31              LSRS     r1,r6,#16             ;2614
001b7a  7629              STRB     r1,[r5,#0x18]         ;2614
001b7c  0e31              LSRS     r1,r6,#24             ;2614
001b7e  7669              STRB     r1,[r5,#0x19]         ;2614
001b80  79a0              LDRB     r0,[r4,#6]            ;2615
001b82  f0200020          BIC      r0,r0,#0x20           ;2615
001b86  71a0              STRB     r0,[r4,#6]            ;2615
001b88  2001              MOVS     r0,#1                 ;2616
001b8a  6821              LDR      r1,[r4,#0]            ;2616
001b8c  7108              STRB     r0,[r1,#4]            ;2616
001b8e  6820              LDR      r0,[r4,#0]            ;2617
001b90  f7fffffe          BL       sync
001b94  4607              MOV      r7,r0                 ;2617
                  |L1.7062|
001b96  4638              MOV      r0,r7                 ;2622
001b98  e7c0              B        |L1.6940|
;;;2624   
                          ENDP

                  f_close PROC
;;;2633   
;;;2634   FRESULT f_close (
001b9a  b570              PUSH     {r4-r6,lr}
;;;2635   	FIL *fp		/* Pointer to the file object to be closed */
;;;2636   )
;;;2637   {
001b9c  4604              MOV      r4,r0
;;;2638   	FRESULT res;
;;;2639   
;;;2640   #if _FS_READONLY
;;;2641   	FATFS *fs = fp->fs;
;;;2642   	res = validate(fs, fp->id);
;;;2643   	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
;;;2644   	LEAVE_FF(fs, res);
;;;2645   
;;;2646   #else
;;;2647   	res = f_sync(fp);		/* Flush cached data */
001b9e  4620              MOV      r0,r4
001ba0  f7fffffe          BL       f_sync
001ba4  4605              MOV      r5,r0
;;;2648   #if _FS_SHARE
;;;2649   	if (res == FR_OK) {		/* Decrement open counter */
;;;2650   #if _FS_REENTRANT
;;;2651   		res = validate(fp->fs, fp->id);
;;;2652   		if (res == FR_OK) {
;;;2653   			res = dec_lock(fp->lockid);	
;;;2654   			unlock_fs(fp->fs, FR_OK);
;;;2655   		}
;;;2656   #else
;;;2657   		res = dec_lock(fp->lockid);
;;;2658   #endif
;;;2659   	}
;;;2660   #endif
;;;2661   	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
001ba6  b90d              CBNZ     r5,|L1.7084|
001ba8  2000              MOVS     r0,#0
001baa  6020              STR      r0,[r4,#0]
                  |L1.7084|
;;;2662   	return res;
001bac  4628              MOV      r0,r5
;;;2663   #endif
;;;2664   }
001bae  bd70              POP      {r4-r6,pc}
;;;2665   
                          ENDP

                  f_lseek PROC
;;;2797   
;;;2798   FRESULT f_lseek (
001bb0  e92d4ffe          PUSH     {r1-r11,lr}
;;;2799   	FIL *fp,		/* Pointer to the file object */
;;;2800   	DWORD ofs		/* File pointer from top of file */
;;;2801   )
;;;2802   {
001bb4  4604              MOV      r4,r0
001bb6  460d              MOV      r5,r1
;;;2803   	FRESULT res;
;;;2804   
;;;2805   
;;;2806   	res = validate(fp->fs, fp->id);		/* Check validity of the object */
001bb8  88a1              LDRH     r1,[r4,#4]
001bba  6820              LDR      r0,[r4,#0]
001bbc  f7fffffe          BL       validate
001bc0  9002              STR      r0,[sp,#8]
;;;2807   	if (res != FR_OK) LEAVE_FF(fp->fs, res);
001bc2  9802              LDR      r0,[sp,#8]
001bc4  b110              CBZ      r0,|L1.7116|
001bc6  9802              LDR      r0,[sp,#8]
                  |L1.7112|
;;;2808   	if (fp->flag & FA__ERROR)			/* Check abort flag */
;;;2809   		LEAVE_FF(fp->fs, FR_INT_ERR);
;;;2810   
;;;2811   #if _USE_FASTSEEK
;;;2812   	if (fp->cltbl) {	/* Fast seek */
;;;2813   		DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
;;;2814   
;;;2815   		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
;;;2816   			tbl = fp->cltbl;
;;;2817   			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
;;;2818   			cl = fp->sclust;			/* Top of the chain */
;;;2819   			if (cl) {
;;;2820   				do {
;;;2821   					/* Get a fragment */
;;;2822   					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
;;;2823   					do {
;;;2824   						pcl = cl; ncl++;
;;;2825   						cl = get_fat(fp->fs, cl);
;;;2826   						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
;;;2827   						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
;;;2828   					} while (cl == pcl + 1);
;;;2829   					if (ulen <= tlen) {		/* Store the length and top of the fragment */
;;;2830   						*tbl++ = ncl; *tbl++ = tcl;
;;;2831   					}
;;;2832   				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
;;;2833   			}
;;;2834   			*fp->cltbl = ulen;	/* Number of items used */
;;;2835   			if (ulen <= tlen)
;;;2836   				*tbl = 0;		/* Terminate table */
;;;2837   			else
;;;2838   				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
;;;2839   
;;;2840   		} else {						/* Fast seek */
;;;2841   			if (ofs > fp->fsize)		/* Clip offset at the file size */
;;;2842   				ofs = fp->fsize;
;;;2843   			fp->fptr = ofs;				/* Set file pointer */
;;;2844   			if (ofs) {
;;;2845   				fp->clust = clmt_clust(fp, ofs - 1);
;;;2846   				dsc = clust2sect(fp->fs, fp->clust);
;;;2847   				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
;;;2848   				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
;;;2849   				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
;;;2850   #if !_FS_TINY
;;;2851   #if !_FS_READONLY
;;;2852   					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
;;;2853   						if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
;;;2854   							ABORT(fp->fs, FR_DISK_ERR);
;;;2855   						fp->flag &= ~FA__DIRTY;
;;;2856   					}
;;;2857   #endif
;;;2858   					if (disk_read(fp->fs->drv, fp->buf, dsc, 1) != RES_OK)	/* Load current sector */
;;;2859   						ABORT(fp->fs, FR_DISK_ERR);
;;;2860   #endif
;;;2861   					fp->dsect = dsc;
;;;2862   				}
;;;2863   			}
;;;2864   		}
;;;2865   	} else
;;;2866   #endif
;;;2867   
;;;2868   	/* Normal Seek */
;;;2869   	{
;;;2870   		DWORD clst, bcs, nsect, ifptr;
;;;2871   
;;;2872   		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
;;;2873   #if !_FS_READONLY
;;;2874   			 && !(fp->flag & FA_WRITE)
;;;2875   #endif
;;;2876   			) ofs = fp->fsize;
;;;2877   
;;;2878   		ifptr = fp->fptr;
;;;2879   		fp->fptr = nsect = 0;
;;;2880   		if (ofs) {
;;;2881   			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
;;;2882   			if (ifptr > 0 &&
;;;2883   				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
;;;2884   				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
;;;2885   				ofs -= fp->fptr;
;;;2886   				clst = fp->clust;
;;;2887   			} else {									/* When seek to back cluster, */
;;;2888   				clst = fp->sclust;						/* start from the first cluster */
;;;2889   #if !_FS_READONLY
;;;2890   				if (clst == 0) {						/* If no cluster chain, create a new chain */
;;;2891   					clst = create_chain(fp->fs, 0);
;;;2892   					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
;;;2893   					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
;;;2894   					fp->sclust = clst;
;;;2895   				}
;;;2896   #endif
;;;2897   				fp->clust = clst;
;;;2898   			}
;;;2899   			if (clst != 0) {
;;;2900   				while (ofs > bcs) {						/* Cluster following loop */
;;;2901   #if !_FS_READONLY
;;;2902   					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
;;;2903   						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
;;;2904   						if (clst == 0) {				/* When disk gets full, clip file size */
;;;2905   							ofs = bcs; break;
;;;2906   						}
;;;2907   					} else
;;;2908   #endif
;;;2909   						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
;;;2910   					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
;;;2911   					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
;;;2912   					fp->clust = clst;
;;;2913   					fp->fptr += bcs;
;;;2914   					ofs -= bcs;
;;;2915   				}
;;;2916   				fp->fptr += ofs;
;;;2917   				if (ofs % SS(fp->fs)) {
;;;2918   					nsect = clust2sect(fp->fs, clst);	/* Current sector */
;;;2919   					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
;;;2920   					nsect += ofs / SS(fp->fs);
;;;2921   				}
;;;2922   			}
;;;2923   		}
;;;2924   		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
;;;2925   #if !_FS_TINY
;;;2926   #if !_FS_READONLY
;;;2927   			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
;;;2928   				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
;;;2929   					ABORT(fp->fs, FR_DISK_ERR);
;;;2930   				fp->flag &= ~FA__DIRTY;
;;;2931   			}
;;;2932   #endif
;;;2933   			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)	/* Fill sector cache */
;;;2934   				ABORT(fp->fs, FR_DISK_ERR);
;;;2935   #endif
;;;2936   			fp->dsect = nsect;
;;;2937   		}
;;;2938   #if !_FS_READONLY
;;;2939   		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
;;;2940   			fp->fsize = fp->fptr;
;;;2941   			fp->flag |= FA__WRITTEN;
;;;2942   		}
;;;2943   #endif
;;;2944   	}
;;;2945   
;;;2946   	LEAVE_FF(fp->fs, res);
;;;2947   }
001bc8  e8bd8ffe          POP      {r1-r11,pc}
                  |L1.7116|
001bcc  79a0              LDRB     r0,[r4,#6]            ;2808
001bce  f0000080          AND      r0,r0,#0x80           ;2808
001bd2  b108              CBZ      r0,|L1.7128|
001bd4  2002              MOVS     r0,#2                 ;2809
001bd6  e7f7              B        |L1.7112|
                  |L1.7128|
001bd8  6a60              LDR      r0,[r4,#0x24]         ;2812
001bda  2800              CMP      r0,#0                 ;2812
001bdc  d07d              BEQ      |L1.7386|
001bde  1c68              ADDS     r0,r5,#1              ;2815
001be0  2800              CMP      r0,#0                 ;2815
001be2  d141              BNE      |L1.7272|
001be4  f8d48024          LDR      r8,[r4,#0x24]         ;2816
001be8  f858ab04          LDR      r10,[r8],#4           ;2817
001bec  f04f0902          MOV      r9,#2                 ;2817
001bf0  6926              LDR      r6,[r4,#0x10]         ;2818
001bf2  b36e              CBZ      r6,|L1.7248|
001bf4  bf00              NOP                            ;2820
                  |L1.7158|
001bf6  9600              STR      r6,[sp,#0]            ;2822
001bf8  f04f0b00          MOV      r11,#0                ;2822
001bfc  f1090902          ADD      r9,r9,#2              ;2822
001c00  bf00              NOP                            ;2823
                  |L1.7170|
001c02  9601              STR      r6,[sp,#4]            ;2824
001c04  f10b0b01          ADD      r11,r11,#1            ;2824
001c08  4631              MOV      r1,r6                 ;2825
001c0a  6820              LDR      r0,[r4,#0]            ;2825
001c0c  f7fffffe          BL       get_fat
001c10  4606              MOV      r6,r0                 ;2825
001c12  2e01              CMP      r6,#1                 ;2826
001c14  d805              BHI      |L1.7202|
001c16  79a0              LDRB     r0,[r4,#6]            ;2826
001c18  f0400080          ORR      r0,r0,#0x80           ;2826
001c1c  71a0              STRB     r0,[r4,#6]            ;2826
001c1e  2002              MOVS     r0,#2                 ;2826
001c20  e7d2              B        |L1.7112|
                  |L1.7202|
001c22  1c70              ADDS     r0,r6,#1              ;2827
001c24  b928              CBNZ     r0,|L1.7218|
001c26  79a0              LDRB     r0,[r4,#6]            ;2827
001c28  f0400080          ORR      r0,r0,#0x80           ;2827
001c2c  71a0              STRB     r0,[r4,#6]            ;2827
001c2e  2001              MOVS     r0,#1                 ;2827
001c30  e7ca              B        |L1.7112|
                  |L1.7218|
001c32  9801              LDR      r0,[sp,#4]            ;2828
001c34  1c40              ADDS     r0,r0,#1              ;2828
001c36  4286              CMP      r6,r0                 ;2828
001c38  d0e3              BEQ      |L1.7170|
001c3a  45d1              CMP      r9,r10                ;2829
001c3c  d804              BHI      |L1.7240|
001c3e  f848bb04          STR      r11,[r8],#4           ;2830
001c42  9800              LDR      r0,[sp,#0]            ;2830
001c44  f8480b04          STR      r0,[r8],#4            ;2830
                  |L1.7240|
001c48  6820              LDR      r0,[r4,#0]            ;2832
001c4a  6980              LDR      r0,[r0,#0x18]         ;2832
001c4c  42b0              CMP      r0,r6                 ;2832
001c4e  d8d2              BHI      |L1.7158|
                  |L1.7248|
001c50  6a60              LDR      r0,[r4,#0x24]         ;2834
001c52  f8c09000          STR      r9,[r0,#0]            ;2834
001c56  45d1              CMP      r9,r10                ;2835
001c58  d803              BHI      |L1.7266|
001c5a  2000              MOVS     r0,#0                 ;2836
001c5c  f8c80000          STR      r0,[r8,#0]            ;2836
001c60  e050              B        |L1.7428|
                  |L1.7266|
001c62  2011              MOVS     r0,#0x11              ;2838
001c64  9002              STR      r0,[sp,#8]            ;2838
001c66  e04d              B        |L1.7428|
                  |L1.7272|
001c68  68e0              LDR      r0,[r4,#0xc]          ;2841
001c6a  42a8              CMP      r0,r5                 ;2841
001c6c  d200              BCS      |L1.7280|
001c6e  68e5              LDR      r5,[r4,#0xc]          ;2842
                  |L1.7280|
001c70  60a5              STR      r5,[r4,#8]            ;2843
001c72  2d00              CMP      r5,#0                 ;2844
001c74  d046              BEQ      |L1.7428|
001c76  1e69              SUBS     r1,r5,#1              ;2845
001c78  4620              MOV      r0,r4                 ;2845
001c7a  f7fffffe          BL       clmt_clust
001c7e  6160              STR      r0,[r4,#0x14]         ;2845
001c80  6961              LDR      r1,[r4,#0x14]         ;2846
001c82  6820              LDR      r0,[r4,#0]            ;2846
001c84  f7fffffe          BL       clust2sect
001c88  4607              MOV      r7,r0                 ;2846
001c8a  b92f              CBNZ     r7,|L1.7320|
001c8c  79a0              LDRB     r0,[r4,#6]            ;2847
001c8e  f0400080          ORR      r0,r0,#0x80           ;2847
001c92  71a0              STRB     r0,[r4,#6]            ;2847
001c94  2002              MOVS     r0,#2                 ;2847
001c96  e797              B        |L1.7112|
                  |L1.7320|
001c98  6820              LDR      r0,[r4,#0]            ;2848
001c9a  7880              LDRB     r0,[r0,#2]            ;2848
001c9c  1e40              SUBS     r0,r0,#1              ;2848
001c9e  1e69              SUBS     r1,r5,#1              ;2848
001ca0  ea002051          AND      r0,r0,r1,LSR #9       ;2848
001ca4  4407              ADD      r7,r7,r0              ;2848
001ca6  8920              LDRH     r0,[r4,#8]            ;2849
001ca8  f3c00008          UBFX     r0,r0,#0,#9           ;2849
001cac  b350              CBZ      r0,|L1.7428|
001cae  69a0              LDR      r0,[r4,#0x18]         ;2849
001cb0  42b8              CMP      r0,r7                 ;2849
001cb2  d027              BEQ      |L1.7428|
001cb4  79a0              LDRB     r0,[r4,#6]            ;2852
001cb6  f0000040          AND      r0,r0,#0x40           ;2852
001cba  b198              CBZ      r0,|L1.7396|
001cbc  6821              LDR      r1,[r4,#0]            ;2853
001cbe  7848              LDRB     r0,[r1,#1]            ;2853
001cc0  2301              MOVS     r3,#1                 ;2853
001cc2  f1040128          ADD      r1,r4,#0x28           ;2853
001cc6  69a2              LDR      r2,[r4,#0x18]         ;2853
001cc8  f7fffffe          BL       disk_write
001ccc  b130              CBZ      r0,|L1.7388|
001cce  79a0              LDRB     r0,[r4,#6]            ;2854
001cd0  f0400080          ORR      r0,r0,#0x80           ;2854
001cd4  71a0              STRB     r0,[r4,#6]            ;2854
001cd6  2001              MOVS     r0,#1                 ;2854
001cd8  e776              B        |L1.7112|
                  |L1.7386|
001cda  e014              B        |L1.7430|
                  |L1.7388|
001cdc  79a0              LDRB     r0,[r4,#6]            ;2855
001cde  f0200040          BIC      r0,r0,#0x40           ;2855
001ce2  71a0              STRB     r0,[r4,#6]            ;2855
                  |L1.7396|
001ce4  6821              LDR      r1,[r4,#0]            ;2858
001ce6  7848              LDRB     r0,[r1,#1]            ;2858
001ce8  2301              MOVS     r3,#1                 ;2858
001cea  463a              MOV      r2,r7                 ;2858
001cec  f1040128          ADD      r1,r4,#0x28           ;2858
001cf0  f7fffffe          BL       disk_read
001cf4  b128              CBZ      r0,|L1.7426|
001cf6  79a0              LDRB     r0,[r4,#6]            ;2859
001cf8  f0400080          ORR      r0,r0,#0x80           ;2859
001cfc  71a0              STRB     r0,[r4,#6]            ;2859
001cfe  2001              MOVS     r0,#1                 ;2859
001d00  e762              B        |L1.7112|
                  |L1.7426|
001d02  61a7              STR      r7,[r4,#0x18]         ;2861
                  |L1.7428|
001d04  e0c1              B        |L1.7818|
                  |L1.7430|
001d06  68e0              LDR      r0,[r4,#0xc]          ;2872
001d08  42a8              CMP      r0,r5                 ;2872
001d0a  d204              BCS      |L1.7446|
001d0c  79a0              LDRB     r0,[r4,#6]            ;2874
001d0e  f0000002          AND      r0,r0,#2              ;2874
001d12  b900              CBNZ     r0,|L1.7446|
001d14  68e5              LDR      r5,[r4,#0xc]          ;2876
                  |L1.7446|
001d16  f8d49008          LDR      r9,[r4,#8]            ;2878
001d1a  f04f0800          MOV      r8,#0                 ;2879
001d1e  f8c48008          STR      r8,[r4,#8]            ;2879
001d22  2d00              CMP      r5,#0                 ;2880
001d24  d077              BEQ      |L1.7702|
001d26  6820              LDR      r0,[r4,#0]            ;2881
001d28  7880              LDRB     r0,[r0,#2]            ;2881
001d2a  0247              LSLS     r7,r0,#9              ;2881
001d2c  f1b90f00          CMP      r9,#0                 ;2882
001d30  d011              BEQ      |L1.7510|
001d32  1e68              SUBS     r0,r5,#1              ;2883
001d34  fbb0f1f7          UDIV     r1,r0,r7              ;2883
001d38  f1a90001          SUB      r0,r9,#1              ;2883
001d3c  fbb0f0f7          UDIV     r0,r0,r7              ;2883
001d40  4281              CMP      r1,r0                 ;2883
001d42  d308              BCC      |L1.7510|
001d44  f1a90001          SUB      r0,r9,#1              ;2884
001d48  1e79              SUBS     r1,r7,#1              ;2884
001d4a  4388              BICS     r0,r0,r1              ;2884
001d4c  60a0              STR      r0,[r4,#8]            ;2884
001d4e  68a0              LDR      r0,[r4,#8]            ;2885
001d50  1a2d              SUBS     r5,r5,r0              ;2885
001d52  6966              LDR      r6,[r4,#0x14]         ;2886
001d54  e018              B        |L1.7560|
                  |L1.7510|
001d56  6926              LDR      r6,[r4,#0x10]         ;2888
001d58  b9ae              CBNZ     r6,|L1.7558|
001d5a  2100              MOVS     r1,#0                 ;2891
001d5c  6820              LDR      r0,[r4,#0]            ;2891
001d5e  f7fffffe          BL       create_chain
001d62  4606              MOV      r6,r0                 ;2891
001d64  2e01              CMP      r6,#1                 ;2892
001d66  d105              BNE      |L1.7540|
001d68  79a0              LDRB     r0,[r4,#6]            ;2892
001d6a  f0400080          ORR      r0,r0,#0x80           ;2892
001d6e  71a0              STRB     r0,[r4,#6]            ;2892
001d70  2002              MOVS     r0,#2                 ;2892
001d72  e729              B        |L1.7112|
                  |L1.7540|
001d74  1c70              ADDS     r0,r6,#1              ;2893
001d76  b928              CBNZ     r0,|L1.7556|
001d78  79a0              LDRB     r0,[r4,#6]            ;2893
001d7a  f0400080          ORR      r0,r0,#0x80           ;2893
001d7e  71a0              STRB     r0,[r4,#6]            ;2893
001d80  2001              MOVS     r0,#1                 ;2893
001d82  e721              B        |L1.7112|
                  |L1.7556|
001d84  6126              STR      r6,[r4,#0x10]         ;2894
                  |L1.7558|
001d86  6166              STR      r6,[r4,#0x14]         ;2897
                  |L1.7560|
001d88  b3ee              CBZ      r6,|L1.7686|
001d8a  e029              B        |L1.7648|
                  |L1.7564|
001d8c  79a0              LDRB     r0,[r4,#6]            ;2902
001d8e  f0000002          AND      r0,r0,#2              ;2902
001d92  b138              CBZ      r0,|L1.7588|
001d94  4631              MOV      r1,r6                 ;2903
001d96  6820              LDR      r0,[r4,#0]            ;2903
001d98  f7fffffe          BL       create_chain
001d9c  4606              MOV      r6,r0                 ;2903
001d9e  b936              CBNZ     r6,|L1.7598|
001da0  463d              MOV      r5,r7                 ;2905
001da2  e01f              B        |L1.7652|
                  |L1.7588|
001da4  4631              MOV      r1,r6                 ;2909
001da6  6820              LDR      r0,[r4,#0]            ;2909
001da8  f7fffffe          BL       get_fat
001dac  4606              MOV      r6,r0                 ;2909
                  |L1.7598|
001dae  1c70              ADDS     r0,r6,#1              ;2910
001db0  b928              CBNZ     r0,|L1.7614|
001db2  79a0              LDRB     r0,[r4,#6]            ;2910
001db4  f0400080          ORR      r0,r0,#0x80           ;2910
001db8  71a0              STRB     r0,[r4,#6]            ;2910
001dba  2001              MOVS     r0,#1                 ;2910
001dbc  e704              B        |L1.7112|
                  |L1.7614|
001dbe  2e01              CMP      r6,#1                 ;2911
001dc0  d903              BLS      |L1.7626|
001dc2  6820              LDR      r0,[r4,#0]            ;2911
001dc4  6980              LDR      r0,[r0,#0x18]         ;2911
001dc6  42b0              CMP      r0,r6                 ;2911
001dc8  d805              BHI      |L1.7638|
                  |L1.7626|
001dca  79a0              LDRB     r0,[r4,#6]            ;2911
001dcc  f0400080          ORR      r0,r0,#0x80           ;2911
001dd0  71a0              STRB     r0,[r4,#6]            ;2911
001dd2  2002              MOVS     r0,#2                 ;2911
001dd4  e6f8              B        |L1.7112|
                  |L1.7638|
001dd6  6166              STR      r6,[r4,#0x14]         ;2912
001dd8  68a0              LDR      r0,[r4,#8]            ;2913
001dda  4438              ADD      r0,r0,r7              ;2913
001ddc  60a0              STR      r0,[r4,#8]            ;2913
001dde  1bed              SUBS     r5,r5,r7              ;2914
                  |L1.7648|
001de0  42bd              CMP      r5,r7                 ;2900
001de2  d8d3              BHI      |L1.7564|
                  |L1.7652|
001de4  bf00              NOP                            ;2905
001de6  68a0              LDR      r0,[r4,#8]            ;2916
001de8  4428              ADD      r0,r0,r5              ;2916
001dea  60a0              STR      r0,[r4,#8]            ;2916
001dec  f3c50008          UBFX     r0,r5,#0,#9           ;2917
001df0  b148              CBZ      r0,|L1.7686|
001df2  4631              MOV      r1,r6                 ;2918
001df4  6820              LDR      r0,[r4,#0]            ;2918
001df6  f7fffffe          BL       clust2sect
001dfa  4680              MOV      r8,r0                 ;2918
001dfc  f1b80f00          CMP      r8,#0                 ;2919
001e00  d107              BNE      |L1.7698|
001e02  79a0              LDRB     r0,[r4,#6]            ;2919
001e04  e000              B        |L1.7688|
                  |L1.7686|
001e06  e006              B        |L1.7702|
                  |L1.7688|
001e08  f0400080          ORR      r0,r0,#0x80           ;2919
001e0c  71a0              STRB     r0,[r4,#6]            ;2919
001e0e  2002              MOVS     r0,#2                 ;2919
001e10  e6da              B        |L1.7112|
                  |L1.7698|
001e12  eb082855          ADD      r8,r8,r5,LSR #9       ;2920
                  |L1.7702|
001e16  8920              LDRH     r0,[r4,#8]            ;2924
001e18  f3c00008          UBFX     r0,r0,#0,#9           ;2924
001e1c  b350              CBZ      r0,|L1.7796|
001e1e  69a0              LDR      r0,[r4,#0x18]         ;2924
001e20  4540              CMP      r0,r8                 ;2924
001e22  d027              BEQ      |L1.7796|
001e24  79a0              LDRB     r0,[r4,#6]            ;2927
001e26  f0000040          AND      r0,r0,#0x40           ;2927
001e2a  b190              CBZ      r0,|L1.7762|
001e2c  6821              LDR      r1,[r4,#0]            ;2928
001e2e  7848              LDRB     r0,[r1,#1]            ;2928
001e30  2301              MOVS     r3,#1                 ;2928
001e32  f1040128          ADD      r1,r4,#0x28           ;2928
001e36  69a2              LDR      r2,[r4,#0x18]         ;2928
001e38  f7fffffe          BL       disk_write
001e3c  b128              CBZ      r0,|L1.7754|
001e3e  79a0              LDRB     r0,[r4,#6]            ;2929
001e40  f0400080          ORR      r0,r0,#0x80           ;2929
001e44  71a0              STRB     r0,[r4,#6]            ;2929
001e46  2001              MOVS     r0,#1                 ;2929
001e48  e6be              B        |L1.7112|
                  |L1.7754|
001e4a  79a0              LDRB     r0,[r4,#6]            ;2930
001e4c  f0200040          BIC      r0,r0,#0x40           ;2930
001e50  71a0              STRB     r0,[r4,#6]            ;2930
                  |L1.7762|
001e52  6821              LDR      r1,[r4,#0]            ;2933
001e54  7848              LDRB     r0,[r1,#1]            ;2933
001e56  2301              MOVS     r3,#1                 ;2933
001e58  4642              MOV      r2,r8                 ;2933
001e5a  f1040128          ADD      r1,r4,#0x28           ;2933
001e5e  f7fffffe          BL       disk_read
001e62  b128              CBZ      r0,|L1.7792|
001e64  79a0              LDRB     r0,[r4,#6]            ;2934
001e66  f0400080          ORR      r0,r0,#0x80           ;2934
001e6a  71a0              STRB     r0,[r4,#6]            ;2934
001e6c  2001              MOVS     r0,#1                 ;2934
001e6e  e6ab              B        |L1.7112|
                  |L1.7792|
001e70  f8c48018          STR      r8,[r4,#0x18]         ;2936
                  |L1.7796|
001e74  e9d40102          LDRD     r0,r1,[r4,#8]         ;2939
001e78  4288              CMP      r0,r1                 ;2939
001e7a  d905              BLS      |L1.7816|
001e7c  68a0              LDR      r0,[r4,#8]            ;2940
001e7e  60e0              STR      r0,[r4,#0xc]          ;2940
001e80  79a0              LDRB     r0,[r4,#6]            ;2941
001e82  f0400020          ORR      r0,r0,#0x20           ;2941
001e86  71a0              STRB     r0,[r4,#6]            ;2941
                  |L1.7816|
001e88  bf00              NOP                            ;2944
                  |L1.7818|
001e8a  9802              LDR      r0,[sp,#8]            ;2946
001e8c  e69c              B        |L1.7112|
;;;2948   
                          ENDP

                  f_opendir PROC
;;;2955   
;;;2956   FRESULT f_opendir (
001e8e  b533              PUSH     {r0,r1,r4,r5,lr}
;;;2957   	DIR *dj,			/* Pointer to directory object to create */
;;;2958   	const TCHAR *path	/* Pointer to the directory path */
;;;2959   )
;;;2960   {
001e90  b083              SUB      sp,sp,#0xc
001e92  4604              MOV      r4,r0
;;;2961   	FRESULT res;
;;;2962   	DEF_NAMEBUF;
;;;2963   
;;;2964   
;;;2965   	res = chk_mounted(&path, &dj->fs, 0);
001e94  2200              MOVS     r2,#0
001e96  4621              MOV      r1,r4
001e98  a804              ADD      r0,sp,#0x10
001e9a  f7fffffe          BL       chk_mounted
001e9e  4605              MOV      r5,r0
;;;2966   	if (res == FR_OK) {
001ea0  bb5d              CBNZ     r5,|L1.7930|
;;;2967   		INIT_BUF(*dj);
001ea2  f8c4d018          STR      sp,[r4,#0x18]
001ea6  48fe              LDR      r0,|L1.8864|
001ea8  61e0              STR      r0,[r4,#0x1c]
;;;2968   		res = follow_path(dj, path);			/* Follow the path to the directory */
001eaa  4620              MOV      r0,r4
001eac  9904              LDR      r1,[sp,#0x10]
001eae  f7fffffe          BL       follow_path
001eb2  4605              MOV      r5,r0
;;;2969   		FREE_BUF();
;;;2970   		if (res == FR_OK) {						/* Follow completed */
001eb4  b9f5              CBNZ     r5,|L1.7924|
;;;2971   			if (dj->dir) {						/* It is not the root dir */
001eb6  6960              LDR      r0,[r4,#0x14]
001eb8  b198              CBZ      r0,|L1.7906|
;;;2972   				if (dj->dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
001eba  6960              LDR      r0,[r4,#0x14]
001ebc  7ac0              LDRB     r0,[r0,#0xb]
001ebe  f0000010          AND      r0,r0,#0x10
001ec2  b168              CBZ      r0,|L1.7904|
;;;2973   					dj->sclust = LD_CLUST(dj->dir);
001ec4  6960              LDR      r0,[r4,#0x14]
001ec6  7e81              LDRB     r1,[r0,#0x1a]
001ec8  7ec0              LDRB     r0,[r0,#0x1b]
001eca  ea412100          ORR      r1,r1,r0,LSL #8
001ece  6960              LDR      r0,[r4,#0x14]
001ed0  7d02              LDRB     r2,[r0,#0x14]
001ed2  7d40              LDRB     r0,[r0,#0x15]
001ed4  ea422000          ORR      r0,r2,r0,LSL #8
001ed8  ea414000          ORR      r0,r1,r0,LSL #16
001edc  60a0              STR      r0,[r4,#8]
001ede  e000              B        |L1.7906|
                  |L1.7904|
;;;2974   				} else {						/* The object is not a directory */
;;;2975   					res = FR_NO_PATH;
001ee0  2505              MOVS     r5,#5
                  |L1.7906|
;;;2976   				}
;;;2977   			}
;;;2978   			if (res == FR_OK) {
001ee2  b93d              CBNZ     r5,|L1.7924|
;;;2979   				dj->id = dj->fs->id;
001ee4  6820              LDR      r0,[r4,#0]
001ee6  88c0              LDRH     r0,[r0,#6]
001ee8  80a0              STRH     r0,[r4,#4]
;;;2980   				res = dir_sdi(dj, 0);			/* Rewind dir */
001eea  2100              MOVS     r1,#0
001eec  4620              MOV      r0,r4
001eee  f7fffffe          BL       dir_sdi
001ef2  4605              MOV      r5,r0
                  |L1.7924|
;;;2981   			}
;;;2982   		}
;;;2983   		if (res == FR_NO_FILE) res = FR_NO_PATH;
001ef4  2d04              CMP      r5,#4
001ef6  d100              BNE      |L1.7930|
001ef8  2505              MOVS     r5,#5
                  |L1.7930|
;;;2984   	}
;;;2985   
;;;2986   	LEAVE_FF(dj->fs, res);
001efa  4628              MOV      r0,r5
;;;2987   }
001efc  b005              ADD      sp,sp,#0x14
001efe  bd30              POP      {r4,r5,pc}
;;;2988   
                          ENDP

                  f_readdir PROC
;;;2995   
;;;2996   FRESULT f_readdir (
001f00  b5fe              PUSH     {r1-r7,lr}
;;;2997   	DIR *dj,			/* Pointer to the open directory object */
;;;2998   	FILINFO *fno		/* Pointer to file information to return */
;;;2999   )
;;;3000   {
001f02  4604              MOV      r4,r0
001f04  460e              MOV      r6,r1
;;;3001   	FRESULT res;
;;;3002   	DEF_NAMEBUF;
;;;3003   
;;;3004   
;;;3005   	res = validate(dj->fs, dj->id);			/* Check validity of the object */
001f06  88a1              LDRH     r1,[r4,#4]
001f08  6820              LDR      r0,[r4,#0]
001f0a  f7fffffe          BL       validate
001f0e  4605              MOV      r5,r0
;;;3006   	if (res == FR_OK) {
001f10  bb15              CBNZ     r5,|L1.8024|
;;;3007   		if (!fno) {
001f12  b92e              CBNZ     r6,|L1.7968|
;;;3008   			res = dir_sdi(dj, 0);			/* Rewind the directory object */
001f14  2100              MOVS     r1,#0
001f16  4620              MOV      r0,r4
001f18  f7fffffe          BL       dir_sdi
001f1c  4605              MOV      r5,r0
001f1e  e01b              B        |L1.8024|
                  |L1.7968|
;;;3009   		} else {
;;;3010   			INIT_BUF(*dj);
001f20  f8c4d018          STR      sp,[r4,#0x18]
001f24  48de              LDR      r0,|L1.8864|
001f26  61e0              STR      r0,[r4,#0x1c]
;;;3011   			res = dir_read(dj);				/* Read an directory item */
001f28  4620              MOV      r0,r4
001f2a  f7fffffe          BL       dir_read
001f2e  4605              MOV      r5,r0
;;;3012   			if (res == FR_NO_FILE) {		/* Reached end of dir */
001f30  2d04              CMP      r5,#4
001f32  d102              BNE      |L1.7994|
;;;3013   				dj->sect = 0;
001f34  2000              MOVS     r0,#0
001f36  6120              STR      r0,[r4,#0x10]
;;;3014   				res = FR_OK;
001f38  2500              MOVS     r5,#0
                  |L1.7994|
;;;3015   			}
;;;3016   			if (res == FR_OK) {				/* A valid entry is found */
001f3a  b96d              CBNZ     r5,|L1.8024|
;;;3017   				get_fileinfo(dj, fno);		/* Get the object information */
001f3c  4631              MOV      r1,r6
001f3e  4620              MOV      r0,r4
001f40  f7fffffe          BL       get_fileinfo
;;;3018   				res = dir_next(dj, 0);		/* Increment index for next */
001f44  2100              MOVS     r1,#0
001f46  4620              MOV      r0,r4
001f48  f7fffffe          BL       dir_next
001f4c  4605              MOV      r5,r0
;;;3019   				if (res == FR_NO_FILE) {
001f4e  2d04              CMP      r5,#4
001f50  d102              BNE      |L1.8024|
;;;3020   					dj->sect = 0;
001f52  2000              MOVS     r0,#0
001f54  6120              STR      r0,[r4,#0x10]
;;;3021   					res = FR_OK;
001f56  2500              MOVS     r5,#0
                  |L1.8024|
;;;3022   				}
;;;3023   			}
;;;3024   			FREE_BUF();
;;;3025   		}
;;;3026   	}
;;;3027   
;;;3028   	LEAVE_FF(dj->fs, res);
001f58  4628              MOV      r0,r5
;;;3029   }
001f5a  bdfe              POP      {r1-r7,pc}
;;;3030   
                          ENDP

                  f_stat PROC
;;;3037   
;;;3038   FRESULT f_stat (
001f5c  b533              PUSH     {r0,r1,r4,r5,lr}
;;;3039   	const TCHAR *path,	/* Pointer to the file path */
;;;3040   	FILINFO *fno		/* Pointer to file information to return */
;;;3041   )
;;;3042   {
001f5e  b08d              SUB      sp,sp,#0x34
001f60  460d              MOV      r5,r1
;;;3043   	FRESULT res;
;;;3044   	DIR dj;
;;;3045   	DEF_NAMEBUF;
;;;3046   
;;;3047   
;;;3048   	res = chk_mounted(&path, &dj.fs, 0);
001f62  2200              MOVS     r2,#0
001f64  a904              ADD      r1,sp,#0x10
001f66  a80d              ADD      r0,sp,#0x34
001f68  f7fffffe          BL       chk_mounted
001f6c  4604              MOV      r4,r0
;;;3049   	if (res == FR_OK) {
001f6e  b98c              CBNZ     r4,|L1.8084|
;;;3050   		INIT_BUF(dj);
001f70  a801              ADD      r0,sp,#4
001f72  900a              STR      r0,[sp,#0x28]
001f74  48ca              LDR      r0,|L1.8864|
001f76  900b              STR      r0,[sp,#0x2c]
;;;3051   		res = follow_path(&dj, path);	/* Follow the file path */
001f78  a804              ADD      r0,sp,#0x10
001f7a  990d              LDR      r1,[sp,#0x34]
001f7c  f7fffffe          BL       follow_path
001f80  4604              MOV      r4,r0
;;;3052   		if (res == FR_OK) {				/* Follow completed */
001f82  b93c              CBNZ     r4,|L1.8084|
;;;3053   			if (dj.dir)		/* Found an object */
001f84  9809              LDR      r0,[sp,#0x24]
001f86  b120              CBZ      r0,|L1.8082|
;;;3054   				get_fileinfo(&dj, fno);
001f88  4629              MOV      r1,r5
001f8a  a804              ADD      r0,sp,#0x10
001f8c  f7fffffe          BL       get_fileinfo
001f90  e000              B        |L1.8084|
                  |L1.8082|
;;;3055   			else			/* It is root dir */
;;;3056   				res = FR_INVALID_NAME;
001f92  2406              MOVS     r4,#6
                  |L1.8084|
;;;3057   		}
;;;3058   		FREE_BUF();
;;;3059   	}
;;;3060   
;;;3061   	LEAVE_FF(dj.fs, res);
001f94  4620              MOV      r0,r4
;;;3062   }
001f96  b00f              ADD      sp,sp,#0x3c
001f98  bd30              POP      {r4,r5,pc}
;;;3063   
                          ENDP

                  f_getfree PROC
;;;3070   
;;;3071   FRESULT f_getfree (
001f9a  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;3072   	const TCHAR *path,	/* Pointer to the logical drive number (root dir) */
;;;3073   	DWORD *nclst,		/* Pointer to the variable to return number of free clusters */
;;;3074   	FATFS **fatfs		/* Pointer to pointer to corresponding file system object to return */
;;;3075   )
;;;3076   {
001f9e  b082              SUB      sp,sp,#8
001fa0  468b              MOV      r11,r1
001fa2  4614              MOV      r4,r2
;;;3077   	FRESULT res;
;;;3078   	DWORD n, clst, sect, stat;
;;;3079   	UINT i;
;;;3080   	BYTE fat, *p;
;;;3081   
;;;3082   
;;;3083   	/* Get drive number */
;;;3084   	res = chk_mounted(&path, fatfs, 0);
001fa4  2200              MOVS     r2,#0
001fa6  4621              MOV      r1,r4
001fa8  a802              ADD      r0,sp,#8
001faa  f7fffffe          BL       chk_mounted
001fae  9001              STR      r0,[sp,#4]
;;;3085   	if (res == FR_OK) {
001fb0  9801              LDR      r0,[sp,#4]
001fb2  2800              CMP      r0,#0
001fb4  d177              BNE      |L1.8358|
;;;3086   		/* If free_clust is valid, return it without full cluster scan */
;;;3087   		if ((*fatfs)->free_clust <= (*fatfs)->n_fatent - 2) {
001fb6  6820              LDR      r0,[r4,#0]
001fb8  6901              LDR      r1,[r0,#0x10]
001fba  6980              LDR      r0,[r0,#0x18]
001fbc  1e80              SUBS     r0,r0,#2
001fbe  4281              CMP      r1,r0
001fc0  d804              BHI      |L1.8140|
;;;3088   			*nclst = (*fatfs)->free_clust;
001fc2  6820              LDR      r0,[r4,#0]
001fc4  6900              LDR      r0,[r0,#0x10]
001fc6  f8cb0000          STR      r0,[r11,#0]
001fca  e06c              B        |L1.8358|
                  |L1.8140|
;;;3089   		} else {
;;;3090   			/* Get number of free clusters */
;;;3091   			fat = (*fatfs)->fs_type;
001fcc  6820              LDR      r0,[r4,#0]
001fce  f890a000          LDRB     r10,[r0,#0]
;;;3092   			n = 0;
001fd2  2600              MOVS     r6,#0
;;;3093   			if (fat == FS_FAT12) {
001fd4  f1ba0f01          CMP      r10,#1
001fd8  d11d              BNE      |L1.8214|
;;;3094   				clst = 2;
001fda  2702              MOVS     r7,#2
;;;3095   				do {
001fdc  bf00              NOP      
                  |L1.8158|
;;;3096   					stat = get_fat(*fatfs, clst);
001fde  4639              MOV      r1,r7
001fe0  6820              LDR      r0,[r4,#0]
001fe2  f7fffffe          BL       get_fat
001fe6  4680              MOV      r8,r0
;;;3097   					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
001fe8  f1080001          ADD      r0,r8,#1
001fec  b910              CBNZ     r0,|L1.8180|
001fee  2001              MOVS     r0,#1
001ff0  9001              STR      r0,[sp,#4]
001ff2  e00f              B        |L1.8212|
                  |L1.8180|
;;;3098   					if (stat == 1) { res = FR_INT_ERR; break; }
001ff4  f1b80f01          CMP      r8,#1
001ff8  d102              BNE      |L1.8192|
001ffa  2002              MOVS     r0,#2
001ffc  9001              STR      r0,[sp,#4]
001ffe  e009              B        |L1.8212|
                  |L1.8192|
;;;3099   					if (stat == 0) n++;
002000  f1b80f00          CMP      r8,#0
002004  d100              BNE      |L1.8200|
002006  1c76              ADDS     r6,r6,#1
                  |L1.8200|
;;;3100   				} while (++clst < (*fatfs)->n_fatent);
002008  1c78              ADDS     r0,r7,#1
00200a  4607              MOV      r7,r0
00200c  6821              LDR      r1,[r4,#0]
00200e  6989              LDR      r1,[r1,#0x18]
002010  4288              CMP      r0,r1
002012  d3e4              BCC      |L1.8158|
                  |L1.8212|
002014  e03d              B        |L1.8338|
                  |L1.8214|
;;;3101   			} else {
;;;3102   				clst = (*fatfs)->n_fatent;
002016  6820              LDR      r0,[r4,#0]
002018  6987              LDR      r7,[r0,#0x18]
;;;3103   				sect = (*fatfs)->fatbase;
00201a  6820              LDR      r0,[r4,#0]
00201c  6a00              LDR      r0,[r0,#0x20]
00201e  9000              STR      r0,[sp,#0]
;;;3104   				i = 0; p = 0;
002020  f04f0900          MOV      r9,#0
002024  2500              MOVS     r5,#0
;;;3105   				do {
002026  bf00              NOP      
                  |L1.8232|
;;;3106   					if (!i) {
002028  f1b90f00          CMP      r9,#0
00202c  d10f              BNE      |L1.8270|
;;;3107   						res = move_window(*fatfs, sect++);
00202e  9a00              LDR      r2,[sp,#0]
002030  1c53              ADDS     r3,r2,#1
002032  4611              MOV      r1,r2
002034  9300              STR      r3,[sp,#0]
002036  6820              LDR      r0,[r4,#0]
002038  f7fffffe          BL       move_window
00203c  9001              STR      r0,[sp,#4]
;;;3108   						if (res != FR_OK) break;
00203e  9801              LDR      r0,[sp,#4]
002040  b100              CBZ      r0,|L1.8260|
002042  e025              B        |L1.8336|
                  |L1.8260|
;;;3109   						p = (*fatfs)->win;
002044  6820              LDR      r0,[r4,#0]
002046  f1000530          ADD      r5,r0,#0x30
;;;3110   						i = SS(*fatfs);
00204a  f44f7900          MOV      r9,#0x200
                  |L1.8270|
;;;3111   					}
;;;3112   					if (fat == FS_FAT16) {
00204e  f1ba0f02          CMP      r10,#2
002052  d109              BNE      |L1.8296|
;;;3113   						if (LD_WORD(p) == 0) n++;
002054  7828              LDRB     r0,[r5,#0]
002056  7869              LDRB     r1,[r5,#1]
002058  ea402001          ORR      r0,r0,r1,LSL #8
00205c  b900              CBNZ     r0,|L1.8288|
00205e  1c76              ADDS     r6,r6,#1
                  |L1.8288|
;;;3114   						p += 2; i -= 2;
002060  1cad              ADDS     r5,r5,#2
002062  f1a90902          SUB      r9,r9,#2
002066  e010              B        |L1.8330|
                  |L1.8296|
;;;3115   					} else {
;;;3116   						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
002068  78e8              LDRB     r0,[r5,#3]
00206a  0600              LSLS     r0,r0,#24
00206c  78a9              LDRB     r1,[r5,#2]
00206e  ea404001          ORR      r0,r0,r1,LSL #16
002072  7869              LDRB     r1,[r5,#1]
002074  ea402001          ORR      r0,r0,r1,LSL #8
002078  7829              LDRB     r1,[r5,#0]
00207a  4308              ORRS     r0,r0,r1
00207c  f0204070          BIC      r0,r0,#0xf0000000
002080  b900              CBNZ     r0,|L1.8324|
002082  1c76              ADDS     r6,r6,#1
                  |L1.8324|
;;;3117   						p += 4; i -= 4;
002084  1d2d              ADDS     r5,r5,#4
002086  f1a90904          SUB      r9,r9,#4
                  |L1.8330|
;;;3118   					}
;;;3119   				} while (--clst);
00208a  1e78              SUBS     r0,r7,#1
00208c  0007              MOVS     r7,r0
00208e  d1cb              BNE      |L1.8232|
                  |L1.8336|
002090  bf00              NOP                            ;3108
                  |L1.8338|
;;;3120   			}
;;;3121   			(*fatfs)->free_clust = n;
002092  6820              LDR      r0,[r4,#0]
002094  6106              STR      r6,[r0,#0x10]
;;;3122   			if (fat == FS_FAT32) (*fatfs)->fsi_flag = 1;
002096  f1ba0f03          CMP      r10,#3
00209a  d102              BNE      |L1.8354|
00209c  2001              MOVS     r0,#1
00209e  6821              LDR      r1,[r4,#0]
0020a0  7148              STRB     r0,[r1,#5]
                  |L1.8354|
;;;3123   			*nclst = n;
0020a2  f8cb6000          STR      r6,[r11,#0]
                  |L1.8358|
;;;3124   		}
;;;3125   	}
;;;3126   	LEAVE_FF(*fatfs, res);
0020a6  9801              LDR      r0,[sp,#4]
;;;3127   }
0020a8  b005              ADD      sp,sp,#0x14
0020aa  e8bd8ff0          POP      {r4-r11,pc}
;;;3128   
                          ENDP

                  f_truncate PROC
;;;3135   
;;;3136   FRESULT f_truncate (
0020ae  b570              PUSH     {r4-r6,lr}
;;;3137   	FIL *fp		/* Pointer to the file object */
;;;3138   )
;;;3139   {
0020b0  4604              MOV      r4,r0
;;;3140   	FRESULT res;
;;;3141   	DWORD ncl;
;;;3142   
;;;3143   
;;;3144   	res = validate(fp->fs, fp->id);		/* Check validity of the object */
0020b2  88a1              LDRH     r1,[r4,#4]
0020b4  6820              LDR      r0,[r4,#0]
0020b6  f7fffffe          BL       validate
0020ba  4605              MOV      r5,r0
;;;3145   	if (res == FR_OK) {
0020bc  b955              CBNZ     r5,|L1.8404|
;;;3146   		if (fp->flag & FA__ERROR) {			/* Check abort flag */
0020be  79a0              LDRB     r0,[r4,#6]
0020c0  f0000080          AND      r0,r0,#0x80
0020c4  b108              CBZ      r0,|L1.8394|
;;;3147   			res = FR_INT_ERR;
0020c6  2502              MOVS     r5,#2
0020c8  e004              B        |L1.8404|
                  |L1.8394|
;;;3148   		} else {
;;;3149   			if (!(fp->flag & FA_WRITE))		/* Check access mode */
0020ca  79a0              LDRB     r0,[r4,#6]
0020cc  f0000002          AND      r0,r0,#2
0020d0  b900              CBNZ     r0,|L1.8404|
;;;3150   				res = FR_DENIED;
0020d2  2507              MOVS     r5,#7
                  |L1.8404|
;;;3151   		}
;;;3152   	}
;;;3153   	if (res == FR_OK) {
0020d4  2d00              CMP      r5,#0
0020d6  d136              BNE      |L1.8518|
;;;3154   		if (fp->fsize > fp->fptr) {
0020d8  e9d41002          LDRD     r1,r0,[r4,#8]
0020dc  4288              CMP      r0,r1
0020de  d92d              BLS      |L1.8508|
;;;3155   			fp->fsize = fp->fptr;	/* Set file size to current R/W point */
0020e0  68a0              LDR      r0,[r4,#8]
0020e2  60e0              STR      r0,[r4,#0xc]
;;;3156   			fp->flag |= FA__WRITTEN;
0020e4  79a0              LDRB     r0,[r4,#6]
0020e6  f0400020          ORR      r0,r0,#0x20
0020ea  71a0              STRB     r0,[r4,#6]
;;;3157   			if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
0020ec  68a0              LDR      r0,[r4,#8]
0020ee  b938              CBNZ     r0,|L1.8448|
;;;3158   				res = remove_chain(fp->fs, fp->sclust);
0020f0  6921              LDR      r1,[r4,#0x10]
0020f2  6820              LDR      r0,[r4,#0]
0020f4  f7fffffe          BL       remove_chain
0020f8  4605              MOV      r5,r0
;;;3159   				fp->sclust = 0;
0020fa  2000              MOVS     r0,#0
0020fc  6120              STR      r0,[r4,#0x10]
0020fe  e01d              B        |L1.8508|
                  |L1.8448|
;;;3160   			} else {				/* When truncate a part of the file, remove remaining clusters */
;;;3161   				ncl = get_fat(fp->fs, fp->clust);
002100  6961              LDR      r1,[r4,#0x14]
002102  6820              LDR      r0,[r4,#0]
002104  f7fffffe          BL       get_fat
002108  4606              MOV      r6,r0
;;;3162   				res = FR_OK;
00210a  2500              MOVS     r5,#0
;;;3163   				if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
00210c  1c70              ADDS     r0,r6,#1
00210e  b900              CBNZ     r0,|L1.8466|
002110  2501              MOVS     r5,#1
                  |L1.8466|
;;;3164   				if (ncl == 1) res = FR_INT_ERR;
002112  2e01              CMP      r6,#1
002114  d100              BNE      |L1.8472|
002116  2502              MOVS     r5,#2
                  |L1.8472|
;;;3165   				if (res == FR_OK && ncl < fp->fs->n_fatent) {
002118  b985              CBNZ     r5,|L1.8508|
00211a  6820              LDR      r0,[r4,#0]
00211c  6980              LDR      r0,[r0,#0x18]
00211e  42b0              CMP      r0,r6
002120  d90c              BLS      |L1.8508|
;;;3166   					res = put_fat(fp->fs, fp->clust, 0x0FFFFFFF);
002122  f06f4270          MVN      r2,#0xf0000000
002126  6961              LDR      r1,[r4,#0x14]
002128  6820              LDR      r0,[r4,#0]
00212a  f7fffffe          BL       put_fat
00212e  4605              MOV      r5,r0
;;;3167   					if (res == FR_OK) res = remove_chain(fp->fs, ncl);
002130  b925              CBNZ     r5,|L1.8508|
002132  4631              MOV      r1,r6
002134  6820              LDR      r0,[r4,#0]
002136  f7fffffe          BL       remove_chain
00213a  4605              MOV      r5,r0
                  |L1.8508|
;;;3168   				}
;;;3169   			}
;;;3170   		}
;;;3171   		if (res != FR_OK) fp->flag |= FA__ERROR;
00213c  b11d              CBZ      r5,|L1.8518|
00213e  79a0              LDRB     r0,[r4,#6]
002140  f0400080          ORR      r0,r0,#0x80
002144  71a0              STRB     r0,[r4,#6]
                  |L1.8518|
;;;3172   	}
;;;3173   
;;;3174   	LEAVE_FF(fp->fs, res);
002146  4628              MOV      r0,r5
;;;3175   }
002148  bd70              POP      {r4-r6,pc}
;;;3176   
                          ENDP

                  f_unlink PROC
;;;3183   
;;;3184   FRESULT f_unlink (
00214a  b571              PUSH     {r0,r4-r6,lr}
;;;3185   	const TCHAR *path		/* Pointer to the file or directory path */
;;;3186   )
;;;3187   {
00214c  b095              SUB      sp,sp,#0x54
;;;3188   	FRESULT res;
;;;3189   	DIR dj, sdj;
;;;3190   	BYTE *dir;
;;;3191   	DWORD dclst;
;;;3192   	DEF_NAMEBUF;
;;;3193   
;;;3194   
;;;3195   	res = chk_mounted(&path, &dj.fs, 1);
00214e  2201              MOVS     r2,#1
002150  a90c              ADD      r1,sp,#0x30
002152  a815              ADD      r0,sp,#0x54
002154  f7fffffe          BL       chk_mounted
002158  4604              MOV      r4,r0
;;;3196   	if (res == FR_OK) {
00215a  2c00              CMP      r4,#0
00215c  d14d              BNE      |L1.8698|
;;;3197   		INIT_BUF(dj);
00215e  f8cdd048          STR      sp,[sp,#0x48]
002162  484f              LDR      r0,|L1.8864|
002164  9013              STR      r0,[sp,#0x4c]
;;;3198   		res = follow_path(&dj, path);		/* Follow the file path */
002166  a80c              ADD      r0,sp,#0x30
002168  9915              LDR      r1,[sp,#0x54]
00216a  f7fffffe          BL       follow_path
00216e  4604              MOV      r4,r0
;;;3199   		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
002170  bf00              NOP      
;;;3200   			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
;;;3201   #if _FS_SHARE
;;;3202   		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Cannot remove open file */
;;;3203   #endif
;;;3204   		if (res == FR_OK) {					/* The object is accessible */
002172  2c00              CMP      r4,#0
002174  d141              BNE      |L1.8698|
;;;3205   			dir = dj.dir;
002176  9d11              LDR      r5,[sp,#0x44]
;;;3206   			if (!dir) {
002178  b90d              CBNZ     r5,|L1.8574|
;;;3207   				res = FR_INVALID_NAME;		/* Cannot remove the start directory */
00217a  2406              MOVS     r4,#6
00217c  e004              B        |L1.8584|
                  |L1.8574|
;;;3208   			} else {
;;;3209   				if (dir[DIR_Attr] & AM_RDO)
00217e  7ae8              LDRB     r0,[r5,#0xb]
002180  f0000001          AND      r0,r0,#1
002184  b100              CBZ      r0,|L1.8584|
;;;3210   					res = FR_DENIED;		/* Cannot remove R/O object */
002186  2407              MOVS     r4,#7
                  |L1.8584|
;;;3211   			}
;;;3212   			dclst = LD_CLUST(dir);
002188  7ea9              LDRB     r1,[r5,#0x1a]
00218a  7ee8              LDRB     r0,[r5,#0x1b]
00218c  ea412100          ORR      r1,r1,r0,LSL #8
002190  7d2a              LDRB     r2,[r5,#0x14]
002192  7d68              LDRB     r0,[r5,#0x15]
002194  ea422000          ORR      r0,r2,r0,LSL #8
002198  ea414600          ORR      r6,r1,r0,LSL #16
;;;3213   			if (res == FR_OK && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-dir? */
00219c  b9e4              CBNZ     r4,|L1.8664|
00219e  7ae8              LDRB     r0,[r5,#0xb]
0021a0  f0000010          AND      r0,r0,#0x10
0021a4  b1c0              CBZ      r0,|L1.8664|
;;;3214   				if (dclst < 2) {
0021a6  2e02              CMP      r6,#2
0021a8  d201              BCS      |L1.8622|
;;;3215   					res = FR_INT_ERR;
0021aa  2402              MOVS     r4,#2
0021ac  e014              B        |L1.8664|
                  |L1.8622|
;;;3216   				} else {
;;;3217   					mem_cpy(&sdj, &dj, sizeof(DIR));	/* Check if the sub-dir is empty or not */
0021ae  2224              MOVS     r2,#0x24
0021b0  a90c              ADD      r1,sp,#0x30
0021b2  a803              ADD      r0,sp,#0xc
0021b4  f7fffffe          BL       mem_cpy
;;;3218   					sdj.sclust = dclst;
0021b8  9605              STR      r6,[sp,#0x14]
;;;3219   					res = dir_sdi(&sdj, 2);		/* Exclude dot entries */
0021ba  2102              MOVS     r1,#2
0021bc  a803              ADD      r0,sp,#0xc
0021be  f7fffffe          BL       dir_sdi
0021c2  4604              MOV      r4,r0
;;;3220   					if (res == FR_OK) {
0021c4  b944              CBNZ     r4,|L1.8664|
;;;3221   						res = dir_read(&sdj);
0021c6  a803              ADD      r0,sp,#0xc
0021c8  f7fffffe          BL       dir_read
0021cc  4604              MOV      r4,r0
;;;3222   						if (res == FR_OK			/* Not empty dir */
0021ce  b904              CBNZ     r4,|L1.8658|
;;;3223   #if _FS_RPATH
;;;3224   						|| dclst == sdj.fs->cdir	/* Current dir */
;;;3225   #endif
;;;3226   						) res = FR_DENIED;
0021d0  2407              MOVS     r4,#7
                  |L1.8658|
;;;3227   						if (res == FR_NO_FILE) res = FR_OK;	/* Empty */
0021d2  2c04              CMP      r4,#4
0021d4  d100              BNE      |L1.8664|
0021d6  2400              MOVS     r4,#0
                  |L1.8664|
;;;3228   					}
;;;3229   				}
;;;3230   			}
;;;3231   			if (res == FR_OK) {
0021d8  b97c              CBNZ     r4,|L1.8698|
;;;3232   				res = dir_remove(&dj);		/* Remove the directory entry */
0021da  a80c              ADD      r0,sp,#0x30
0021dc  f7fffffe          BL       dir_remove
0021e0  4604              MOV      r4,r0
;;;3233   				if (res == FR_OK) {
0021e2  b954              CBNZ     r4,|L1.8698|
;;;3234   					if (dclst)				/* Remove the cluster chain if exist */
0021e4  b126              CBZ      r6,|L1.8688|
;;;3235   						res = remove_chain(dj.fs, dclst);
0021e6  4631              MOV      r1,r6
0021e8  980c              LDR      r0,[sp,#0x30]
0021ea  f7fffffe          BL       remove_chain
0021ee  4604              MOV      r4,r0
                  |L1.8688|
;;;3236   					if (res == FR_OK) res = sync(dj.fs);
0021f0  b91c              CBNZ     r4,|L1.8698|
0021f2  980c              LDR      r0,[sp,#0x30]
0021f4  f7fffffe          BL       sync
0021f8  4604              MOV      r4,r0
                  |L1.8698|
;;;3237   				}
;;;3238   			}
;;;3239   		}
;;;3240   		FREE_BUF();
;;;3241   	}
;;;3242   	LEAVE_FF(dj.fs, res);
0021fa  4620              MOV      r0,r4
;;;3243   }
0021fc  b016              ADD      sp,sp,#0x58
0021fe  bd70              POP      {r4-r6,pc}
;;;3244   
                          ENDP

                  f_mkdir PROC
;;;3251   
;;;3252   FRESULT f_mkdir (
002200  e92d47f1          PUSH     {r0,r4-r10,lr}
;;;3253   	const TCHAR *path		/* Pointer to the directory path */
;;;3254   )
;;;3255   {
002204  b08d              SUB      sp,sp,#0x34
;;;3256   	FRESULT res;
;;;3257   	DIR dj;
;;;3258   	BYTE *dir, n;
;;;3259   	DWORD dsc, dcl, pcl, tim = get_fattime();
002206  f7fffffe          BL       get_fattime
00220a  4607              MOV      r7,r0
;;;3260   	DEF_NAMEBUF;
;;;3261   
;;;3262   
;;;3263   	res = chk_mounted(&path, &dj.fs, 1);
00220c  2201              MOVS     r2,#1
00220e  a904              ADD      r1,sp,#0x10
002210  a80d              ADD      r0,sp,#0x34
002212  f7fffffe          BL       chk_mounted
002216  4606              MOV      r6,r0
;;;3264   	if (res == FR_OK) {
002218  2e00              CMP      r6,#0
                  |L1.8730|
00221a  d171              BNE      |L1.8960|
;;;3265   		INIT_BUF(dj);
00221c  a801              ADD      r0,sp,#4
00221e  900a              STR      r0,[sp,#0x28]
002220  481f              LDR      r0,|L1.8864|
002222  900b              STR      r0,[sp,#0x2c]
;;;3266   		res = follow_path(&dj, path);			/* Follow the file path */
002224  a804              ADD      r0,sp,#0x10
002226  990d              LDR      r1,[sp,#0x34]
002228  f7fffffe          BL       follow_path
00222c  4606              MOV      r6,r0
;;;3267   		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
00222e  b906              CBNZ     r6,|L1.8754|
002230  2608              MOVS     r6,#8
                  |L1.8754|
;;;3268   		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NS] & NS_DOT))
002232  bf00              NOP      
;;;3269   			res = FR_INVALID_NAME;
;;;3270   		if (res == FR_NO_FILE) {				/* Can create a new directory */
002234  2e04              CMP      r6,#4
002236  d1f0              BNE      |L1.8730|
;;;3271   			dcl = create_chain(dj.fs, 0);		/* Allocate a cluster for the new directory table */
002238  2100              MOVS     r1,#0
00223a  9804              LDR      r0,[sp,#0x10]
00223c  f7fffffe          BL       create_chain
002240  4605              MOV      r5,r0
;;;3272   			res = FR_OK;
002242  2600              MOVS     r6,#0
;;;3273   			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
002244  b905              CBNZ     r5,|L1.8776|
002246  2607              MOVS     r6,#7
                  |L1.8776|
;;;3274   			if (dcl == 1) res = FR_INT_ERR;
002248  2d01              CMP      r5,#1
00224a  d100              BNE      |L1.8782|
00224c  2602              MOVS     r6,#2
                  |L1.8782|
;;;3275   			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
00224e  1c68              ADDS     r0,r5,#1
002250  b900              CBNZ     r0,|L1.8788|
002252  2601              MOVS     r6,#1
                  |L1.8788|
;;;3276   			if (res == FR_OK)					/* Flush FAT */
002254  b926              CBNZ     r6,|L1.8800|
;;;3277   				res = move_window(dj.fs, 0);
002256  2100              MOVS     r1,#0
002258  9804              LDR      r0,[sp,#0x10]
00225a  f7fffffe          BL       move_window
00225e  4606              MOV      r6,r0
                  |L1.8800|
;;;3278   			if (res == FR_OK) {					/* Initialize the new directory table */
002260  2e00              CMP      r6,#0
002262  d16b              BNE      |L1.9020|
;;;3279   				dsc = clust2sect(dj.fs, dcl);
002264  4629              MOV      r1,r5
002266  9804              LDR      r0,[sp,#0x10]
002268  f7fffffe          BL       clust2sect
00226c  4682              MOV      r10,r0
;;;3280   				dir = dj.fs->win;
00226e  9804              LDR      r0,[sp,#0x10]
002270  f1000430          ADD      r4,r0,#0x30
;;;3281   				mem_set(dir, 0, SS(dj.fs));
002274  f44f7200          MOV      r2,#0x200
002278  2100              MOVS     r1,#0
00227a  4620              MOV      r0,r4
00227c  f7fffffe          BL       mem_set
;;;3282   				mem_set(dir+DIR_Name, ' ', 8+3);	/* Create "." entry */
002280  220b              MOVS     r2,#0xb
002282  2120              MOVS     r1,#0x20
002284  4620              MOV      r0,r4
002286  f7fffffe          BL       mem_set
;;;3283   				dir[DIR_Name] = '.';
00228a  202e              MOVS     r0,#0x2e
00228c  7020              STRB     r0,[r4,#0]
;;;3284   				dir[DIR_Attr] = AM_DIR;
00228e  2010              MOVS     r0,#0x10
002290  72e0              STRB     r0,[r4,#0xb]
;;;3285   				ST_DWORD(dir+DIR_WrtTime, tim);
002292  75a7              STRB     r7,[r4,#0x16]
002294  0a39              LSRS     r1,r7,#8
002296  75e1              STRB     r1,[r4,#0x17]
002298  0c39              LSRS     r1,r7,#16
00229a  7621              STRB     r1,[r4,#0x18]
00229c  0e39              LSRS     r1,r7,#24
00229e  e001              B        |L1.8868|
                  |L1.8864|
                          DCD      LfnBuf
                  |L1.8868|
0022a4  7661              STRB     r1,[r4,#0x19]
;;;3286   				ST_CLUST(dir, dcl);
0022a6  76a5              STRB     r5,[r4,#0x1a]
0022a8  0a29              LSRS     r1,r5,#8
0022aa  76e1              STRB     r1,[r4,#0x1b]
0022ac  0c28              LSRS     r0,r5,#16
0022ae  7520              STRB     r0,[r4,#0x14]
0022b0  0e29              LSRS     r1,r5,#24
0022b2  7561              STRB     r1,[r4,#0x15]
;;;3287   				mem_cpy(dir+SZ_DIR, dir, SZ_DIR); 	/* Create ".." entry */
0022b4  2220              MOVS     r2,#0x20
0022b6  4621              MOV      r1,r4
0022b8  f1040020          ADD      r0,r4,#0x20
0022bc  f7fffffe          BL       mem_cpy
;;;3288   				dir[33] = '.'; pcl = dj.sclust;
0022c0  202e              MOVS     r0,#0x2e
0022c2  f8840021          STRB     r0,[r4,#0x21]
0022c6  f8dd8018          LDR      r8,[sp,#0x18]
;;;3289   				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
0022ca  9804              LDR      r0,[sp,#0x10]
0022cc  7800              LDRB     r0,[r0,#0]
0022ce  2803              CMP      r0,#3
0022d0  d104              BNE      |L1.8924|
0022d2  9804              LDR      r0,[sp,#0x10]
0022d4  6a40              LDR      r0,[r0,#0x24]
0022d6  4540              CMP      r0,r8
0022d8  d100              BNE      |L1.8924|
;;;3290   					pcl = 0;
0022da  46b0              MOV      r8,r6
                  |L1.8924|
;;;3291   				ST_CLUST(dir+SZ_DIR, pcl);
0022dc  f884803a          STRB     r8,[r4,#0x3a]
0022e0  ea4f2118          LSR      r1,r8,#8
0022e4  f884103b          STRB     r1,[r4,#0x3b]
0022e8  f3c84107          UBFX     r1,r8,#16,#8
0022ec  2034              MOVS     r0,#0x34
0022ee  5501              STRB     r1,[r0,r4]
0022f0  ea4f6118          LSR      r1,r8,#24
0022f4  f8841035          STRB     r1,[r4,#0x35]
;;;3292   				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
0022f8  9804              LDR      r0,[sp,#0x10]
0022fa  f8909002          LDRB     r9,[r0,#2]
0022fe  e019              B        |L1.9012|
                  |L1.8960|
002300  e03f              B        |L1.9090|
                  |L1.8962|
;;;3293   					dj.fs->winsect = dsc++;
002302  9804              LDR      r0,[sp,#0x10]
002304  f8c0a02c          STR      r10,[r0,#0x2c]
002308  f10a0a01          ADD      r10,r10,#1
;;;3294   					dj.fs->wflag = 1;
00230c  2001              MOVS     r0,#1
00230e  9904              LDR      r1,[sp,#0x10]
002310  7108              STRB     r0,[r1,#4]
;;;3295   					res = move_window(dj.fs, 0);
002312  2100              MOVS     r1,#0
002314  9804              LDR      r0,[sp,#0x10]
002316  f7fffffe          BL       move_window
00231a  4606              MOV      r6,r0
;;;3296   					if (res != FR_OK) break;
00231c  b106              CBZ      r6,|L1.8992|
00231e  e00c              B        |L1.9018|
                  |L1.8992|
;;;3297   					mem_set(dir, 0, SS(dj.fs));
002320  f44f7200          MOV      r2,#0x200
002324  2100              MOVS     r1,#0
002326  4620              MOV      r0,r4
002328  f7fffffe          BL       mem_set
00232c  f1a90001          SUB      r0,r9,#1              ;3292
002330  f00009ff          AND      r9,r0,#0xff           ;3292
                  |L1.9012|
002334  f1b90f00          CMP      r9,#0                 ;3292
002338  d1e3              BNE      |L1.8962|
                  |L1.9018|
00233a  bf00              NOP                            ;3296
                  |L1.9020|
;;;3298   				}
;;;3299   			}
;;;3300   			if (res == FR_OK) res = dir_register(&dj);	/* Register the object to the directoy */
00233c  b91e              CBNZ     r6,|L1.9030|
00233e  a804              ADD      r0,sp,#0x10
002340  f7fffffe          BL       dir_register
002344  4606              MOV      r6,r0
                  |L1.9030|
;;;3301   			if (res != FR_OK) {
002346  b126              CBZ      r6,|L1.9042|
;;;3302   				remove_chain(dj.fs, dcl);			/* Could not register, remove cluster chain */
002348  4629              MOV      r1,r5
00234a  9804              LDR      r0,[sp,#0x10]
00234c  f7fffffe          BL       remove_chain
002350  e017              B        |L1.9090|
                  |L1.9042|
;;;3303   			} else {
;;;3304   				dir = dj.dir;
002352  9c09              LDR      r4,[sp,#0x24]
;;;3305   				dir[DIR_Attr] = AM_DIR;				/* Attribute */
002354  2010              MOVS     r0,#0x10
002356  72e0              STRB     r0,[r4,#0xb]
;;;3306   				ST_DWORD(dir+DIR_WrtTime, tim);		/* Created time */
002358  75a7              STRB     r7,[r4,#0x16]
00235a  0a39              LSRS     r1,r7,#8
00235c  75e1              STRB     r1,[r4,#0x17]
00235e  0c39              LSRS     r1,r7,#16
002360  7621              STRB     r1,[r4,#0x18]
002362  0e39              LSRS     r1,r7,#24
002364  7661              STRB     r1,[r4,#0x19]
;;;3307   				ST_CLUST(dir, dcl);					/* Table start cluster */
002366  76a5              STRB     r5,[r4,#0x1a]
002368  0a29              LSRS     r1,r5,#8
00236a  76e1              STRB     r1,[r4,#0x1b]
00236c  0c28              LSRS     r0,r5,#16
00236e  7520              STRB     r0,[r4,#0x14]
002370  0e29              LSRS     r1,r5,#24
002372  7561              STRB     r1,[r4,#0x15]
;;;3308   				dj.fs->wflag = 1;
002374  2001              MOVS     r0,#1
002376  9904              LDR      r1,[sp,#0x10]
002378  7108              STRB     r0,[r1,#4]
;;;3309   				res = sync(dj.fs);
00237a  9804              LDR      r0,[sp,#0x10]
00237c  f7fffffe          BL       sync
002380  4606              MOV      r6,r0
                  |L1.9090|
;;;3310   			}
;;;3311   		}
;;;3312   		FREE_BUF();
;;;3313   	}
;;;3314   
;;;3315   	LEAVE_FF(dj.fs, res);
002382  4630              MOV      r0,r6
;;;3316   }
002384  b00e              ADD      sp,sp,#0x38
002386  e8bd87f0          POP      {r4-r10,pc}
;;;3317   
                          ENDP

                  f_chmod PROC
;;;3324   
;;;3325   FRESULT f_chmod (
00238a  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;3326   	const TCHAR *path,	/* Pointer to the file path */
;;;3327   	BYTE value,			/* Attribute bits */
;;;3328   	BYTE mask			/* Attribute mask to change */
;;;3329   )
;;;3330   {
00238c  b08c              SUB      sp,sp,#0x30
00238e  460f              MOV      r7,r1
002390  4614              MOV      r4,r2
;;;3331   	FRESULT res;
;;;3332   	DIR dj;
;;;3333   	BYTE *dir;
;;;3334   	DEF_NAMEBUF;
;;;3335   
;;;3336   
;;;3337   	res = chk_mounted(&path, &dj.fs, 1);
002392  2201              MOVS     r2,#1
002394  a903              ADD      r1,sp,#0xc
002396  a80c              ADD      r0,sp,#0x30
002398  f7fffffe          BL       chk_mounted
00239c  4606              MOV      r6,r0
;;;3338   	if (res == FR_OK) {
00239e  b9ee              CBNZ     r6,|L1.9180|
;;;3339   		INIT_BUF(dj);
0023a0  f8cdd024          STR      sp,[sp,#0x24]
0023a4  48fd              LDR      r0,|L1.10140|
0023a6  900a              STR      r0,[sp,#0x28]
;;;3340   		res = follow_path(&dj, path);		/* Follow the file path */
0023a8  a803              ADD      r0,sp,#0xc
0023aa  990c              LDR      r1,[sp,#0x30]
0023ac  f7fffffe          BL       follow_path
0023b0  4606              MOV      r6,r0
;;;3341   		FREE_BUF();
;;;3342   		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
0023b2  bf00              NOP      
;;;3343   			res = FR_INVALID_NAME;
;;;3344   		if (res == FR_OK) {
0023b4  b996              CBNZ     r6,|L1.9180|
;;;3345   			dir = dj.dir;
0023b6  9d08              LDR      r5,[sp,#0x20]
;;;3346   			if (!dir) {						/* Is it a root directory? */
0023b8  b90d              CBNZ     r5,|L1.9150|
;;;3347   				res = FR_INVALID_NAME;
0023ba  2606              MOVS     r6,#6
0023bc  e00e              B        |L1.9180|
                  |L1.9150|
;;;3348   			} else {						/* File or sub directory */
;;;3349   				mask &= AM_RDO|AM_HID|AM_SYS|AM_ARC;	/* Valid attribute mask */
0023be  f0040427          AND      r4,r4,#0x27
;;;3350   				dir[DIR_Attr] = (value & mask) | (dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
0023c2  ea070004          AND      r0,r7,r4
0023c6  7ae9              LDRB     r1,[r5,#0xb]
0023c8  43a1              BICS     r1,r1,r4
0023ca  4308              ORRS     r0,r0,r1
0023cc  72e8              STRB     r0,[r5,#0xb]
;;;3351   				dj.fs->wflag = 1;
0023ce  2001              MOVS     r0,#1
0023d0  9903              LDR      r1,[sp,#0xc]
0023d2  7108              STRB     r0,[r1,#4]
;;;3352   				res = sync(dj.fs);
0023d4  9803              LDR      r0,[sp,#0xc]
0023d6  f7fffffe          BL       sync
0023da  4606              MOV      r6,r0
                  |L1.9180|
;;;3353   			}
;;;3354   		}
;;;3355   	}
;;;3356   
;;;3357   	LEAVE_FF(dj.fs, res);
0023dc  4630              MOV      r0,r6
;;;3358   }
0023de  b00f              ADD      sp,sp,#0x3c
0023e0  bdf0              POP      {r4-r7,pc}
;;;3359   
                          ENDP

                  f_utime PROC
;;;3366   
;;;3367   FRESULT f_utime (
0023e2  b573              PUSH     {r0,r1,r4-r6,lr}
;;;3368   	const TCHAR *path,	/* Pointer to the file/directory name */
;;;3369   	const FILINFO *fno	/* Pointer to the time stamp to be set */
;;;3370   )
;;;3371   {
0023e4  b08c              SUB      sp,sp,#0x30
0023e6  460d              MOV      r5,r1
;;;3372   	FRESULT res;
;;;3373   	DIR dj;
;;;3374   	BYTE *dir;
;;;3375   	DEF_NAMEBUF;
;;;3376   
;;;3377   
;;;3378   	res = chk_mounted(&path, &dj.fs, 1);
0023e8  2201              MOVS     r2,#1
0023ea  a903              ADD      r1,sp,#0xc
0023ec  a80c              ADD      r0,sp,#0x30
0023ee  f7fffffe          BL       chk_mounted
0023f2  4606              MOV      r6,r0
;;;3379   	if (res == FR_OK) {
0023f4  b9fe              CBNZ     r6,|L1.9270|
;;;3380   		INIT_BUF(dj);
0023f6  f8cdd024          STR      sp,[sp,#0x24]
0023fa  48e8              LDR      r0,|L1.10140|
0023fc  900a              STR      r0,[sp,#0x28]
;;;3381   		res = follow_path(&dj, path);	/* Follow the file path */
0023fe  a803              ADD      r0,sp,#0xc
002400  990c              LDR      r1,[sp,#0x30]
002402  f7fffffe          BL       follow_path
002406  4606              MOV      r6,r0
;;;3382   		FREE_BUF();
;;;3383   		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
002408  bf00              NOP      
;;;3384   			res = FR_INVALID_NAME;
;;;3385   		if (res == FR_OK) {
00240a  b9a6              CBNZ     r6,|L1.9270|
;;;3386   			dir = dj.dir;
00240c  9c08              LDR      r4,[sp,#0x20]
;;;3387   			if (!dir) {					/* Root directory */
00240e  b90c              CBNZ     r4,|L1.9236|
;;;3388   				res = FR_INVALID_NAME;
002410  2606              MOVS     r6,#6
002412  e010              B        |L1.9270|
                  |L1.9236|
;;;3389   			} else {					/* File or sub-directory */
;;;3390   				ST_WORD(dir+DIR_WrtTime, fno->ftime);
002414  79a8              LDRB     r0,[r5,#6]
002416  75a0              STRB     r0,[r4,#0x16]
002418  88e8              LDRH     r0,[r5,#6]
00241a  1201              ASRS     r1,r0,#8
00241c  75e1              STRB     r1,[r4,#0x17]
;;;3391   				ST_WORD(dir+DIR_WrtDate, fno->fdate);
00241e  7928              LDRB     r0,[r5,#4]
002420  7620              STRB     r0,[r4,#0x18]
002422  88a8              LDRH     r0,[r5,#4]
002424  1201              ASRS     r1,r0,#8
002426  7661              STRB     r1,[r4,#0x19]
;;;3392   				dj.fs->wflag = 1;
002428  2001              MOVS     r0,#1
00242a  9903              LDR      r1,[sp,#0xc]
00242c  7108              STRB     r0,[r1,#4]
;;;3393   				res = sync(dj.fs);
00242e  9803              LDR      r0,[sp,#0xc]
002430  f7fffffe          BL       sync
002434  4606              MOV      r6,r0
                  |L1.9270|
;;;3394   			}
;;;3395   		}
;;;3396   	}
;;;3397   
;;;3398   	LEAVE_FF(dj.fs, res);
002436  4630              MOV      r0,r6
;;;3399   }
002438  b00e              ADD      sp,sp,#0x38
00243a  bd70              POP      {r4-r6,pc}
;;;3400   
                          ENDP

                  f_rename PROC
;;;3407   
;;;3408   FRESULT f_rename (
00243c  b5f3              PUSH     {r0,r1,r4-r7,lr}
;;;3409   	const TCHAR *path_old,	/* Pointer to the old name */
;;;3410   	const TCHAR *path_new	/* Pointer to the new name */
;;;3411   )
;;;3412   {
00243e  b09b              SUB      sp,sp,#0x6c
002440  460f              MOV      r7,r1
;;;3413   	FRESULT res;
;;;3414   	DIR djo, djn;
;;;3415   	BYTE buf[21], *dir;
;;;3416   	DWORD dw;
;;;3417   	DEF_NAMEBUF;
;;;3418   
;;;3419   
;;;3420   	res = chk_mounted(&path_old, &djo.fs, 1);
002442  2201              MOVS     r2,#1
002444  a912              ADD      r1,sp,#0x48
002446  a81b              ADD      r0,sp,#0x6c
002448  f7fffffe          BL       chk_mounted
00244c  4605              MOV      r5,r0
;;;3421   	if (res == FR_OK) {
00244e  2d00              CMP      r5,#0
002450  d110              BNE      |L1.9332|
;;;3422   		djn.fs = djo.fs;
002452  9812              LDR      r0,[sp,#0x48]
002454  9009              STR      r0,[sp,#0x24]
;;;3423   		INIT_BUF(djo);
002456  f8cdd060          STR      sp,[sp,#0x60]
00245a  48d0              LDR      r0,|L1.10140|
00245c  9019              STR      r0,[sp,#0x64]
;;;3424   		res = follow_path(&djo, path_old);		/* Check old object */
00245e  a812              ADD      r0,sp,#0x48
002460  991b              LDR      r1,[sp,#0x6c]
002462  f7fffffe          BL       follow_path
002466  4605              MOV      r5,r0
;;;3425   		if (_FS_RPATH && res == FR_OK && (djo.fn[NS] & NS_DOT))
002468  bf00              NOP      
;;;3426   			res = FR_INVALID_NAME;
;;;3427   #if _FS_SHARE
;;;3428   		if (res == FR_OK) res = chk_lock(&djo, 2);
;;;3429   #endif
;;;3430   		if (res == FR_OK) {						/* Old object is found */
00246a  2d00              CMP      r5,#0
00246c  d176              BNE      |L1.9564|
;;;3431   			if (!djo.dir) {						/* Is root dir? */
00246e  9817              LDR      r0,[sp,#0x5c]
002470  b908              CBNZ     r0,|L1.9334|
;;;3432   				res = FR_NO_FILE;
002472  2504              MOVS     r5,#4
                  |L1.9332|
002474  e072              B        |L1.9564|
                  |L1.9334|
;;;3433   			} else {
;;;3434   				mem_cpy(buf, djo.dir+DIR_Attr, 21);		/* Save the object information except for name */
002476  9817              LDR      r0,[sp,#0x5c]
002478  f100010b          ADD      r1,r0,#0xb
00247c  2215              MOVS     r2,#0x15
00247e  a803              ADD      r0,sp,#0xc
002480  f7fffffe          BL       mem_cpy
;;;3435   				mem_cpy(&djn, &djo, sizeof(DIR));		/* Check new object */
002484  2224              MOVS     r2,#0x24
002486  a912              ADD      r1,sp,#0x48
002488  a809              ADD      r0,sp,#0x24
00248a  f7fffffe          BL       mem_cpy
;;;3436   				res = follow_path(&djn, path_new);
00248e  4639              MOV      r1,r7
002490  a809              ADD      r0,sp,#0x24
002492  f7fffffe          BL       follow_path
002496  4605              MOV      r5,r0
;;;3437   				if (res == FR_OK) res = FR_EXIST;		/* The new object name is already existing */
002498  b905              CBNZ     r5,|L1.9372|
00249a  2508              MOVS     r5,#8
                  |L1.9372|
;;;3438   				if (res == FR_NO_FILE) { 				/* Is it a valid path and no name collision? */
00249c  2d04              CMP      r5,#4
00249e  d15d              BNE      |L1.9564|
;;;3439   /* Start critical section that any interruption or error can cause cross-link */
;;;3440   					res = dir_register(&djn);			/* Register the new entry */
0024a0  a809              ADD      r0,sp,#0x24
0024a2  f7fffffe          BL       dir_register
0024a6  4605              MOV      r5,r0
;;;3441   					if (res == FR_OK) {
0024a8  2d00              CMP      r5,#0
0024aa  d157              BNE      |L1.9564|
;;;3442   						dir = djn.dir;					/* Copy object information except for name */
0024ac  9c0e              LDR      r4,[sp,#0x38]
;;;3443   						mem_cpy(dir+13, buf+2, 19);
0024ae  2213              MOVS     r2,#0x13
0024b0  f10d010e          ADD      r1,sp,#0xe
0024b4  f104000d          ADD      r0,r4,#0xd
0024b8  f7fffffe          BL       mem_cpy
;;;3444   						dir[DIR_Attr] = buf[0] | AM_ARC;
0024bc  f89d000c          LDRB     r0,[sp,#0xc]
0024c0  f0400020          ORR      r0,r0,#0x20
0024c4  72e0              STRB     r0,[r4,#0xb]
;;;3445   						djo.fs->wflag = 1;
0024c6  2001              MOVS     r0,#1
0024c8  9912              LDR      r1,[sp,#0x48]
0024ca  7108              STRB     r0,[r1,#4]
;;;3446   						if (djo.sclust != djn.sclust && (dir[DIR_Attr] & AM_DIR)) {		/* Update .. entry in the directory if needed */
0024cc  990b              LDR      r1,[sp,#0x2c]
0024ce  9814              LDR      r0,[sp,#0x50]
0024d0  4288              CMP      r0,r1
0024d2  d039              BEQ      |L1.9544|
0024d4  7ae0              LDRB     r0,[r4,#0xb]
0024d6  f0000010          AND      r0,r0,#0x10
0024da  2800              CMP      r0,#0
0024dc  d034              BEQ      |L1.9544|
;;;3447   							dw = clust2sect(djn.fs, LD_CLUST(dir));
0024de  7ea3              LDRB     r3,[r4,#0x1a]
0024e0  7ee2              LDRB     r2,[r4,#0x1b]
0024e2  ea432302          ORR      r3,r3,r2,LSL #8
0024e6  f894c014          LDRB     r12,[r4,#0x14]
0024ea  7d62              LDRB     r2,[r4,#0x15]
0024ec  ea4c2202          ORR      r2,r12,r2,LSL #8
0024f0  ea434102          ORR      r1,r3,r2,LSL #16
0024f4  9809              LDR      r0,[sp,#0x24]
0024f6  f7fffffe          BL       clust2sect
0024fa  4606              MOV      r6,r0
;;;3448   							if (!dw) {
0024fc  b90e              CBNZ     r6,|L1.9474|
;;;3449   								res = FR_INT_ERR;
0024fe  2502              MOVS     r5,#2
002500  e022              B        |L1.9544|
                  |L1.9474|
;;;3450   							} else {
;;;3451   								res = move_window(djn.fs, dw);
002502  4631              MOV      r1,r6
002504  9809              LDR      r0,[sp,#0x24]
002506  f7fffffe          BL       move_window
00250a  4605              MOV      r5,r0
;;;3452   								dir = djn.fs->win+SZ_DIR;	/* .. entry */
00250c  9809              LDR      r0,[sp,#0x24]
00250e  f1000450          ADD      r4,r0,#0x50
;;;3453   								if (res == FR_OK && dir[1] == '.') {
002512  b9cd              CBNZ     r5,|L1.9544|
002514  7860              LDRB     r0,[r4,#1]
002516  282e              CMP      r0,#0x2e
002518  d116              BNE      |L1.9544|
;;;3454   									dw = (djn.fs->fs_type == FS_FAT32 && djn.sclust == djn.fs->dirbase) ? 0 : djn.sclust;
00251a  9809              LDR      r0,[sp,#0x24]
00251c  7800              LDRB     r0,[r0,#0]
00251e  2803              CMP      r0,#3
002520  d106              BNE      |L1.9520|
002522  9909              LDR      r1,[sp,#0x24]
002524  980b              LDR      r0,[sp,#0x2c]
002526  6a49              LDR      r1,[r1,#0x24]
002528  4288              CMP      r0,r1
00252a  d101              BNE      |L1.9520|
00252c  2000              MOVS     r0,#0
00252e  e000              B        |L1.9522|
                  |L1.9520|
002530  980b              LDR      r0,[sp,#0x2c]
                  |L1.9522|
002532  4606              MOV      r6,r0
;;;3455   									ST_CLUST(dir, dw);
002534  76a6              STRB     r6,[r4,#0x1a]
002536  0a31              LSRS     r1,r6,#8
002538  76e1              STRB     r1,[r4,#0x1b]
00253a  0c30              LSRS     r0,r6,#16
00253c  7520              STRB     r0,[r4,#0x14]
00253e  0e31              LSRS     r1,r6,#24
002540  7561              STRB     r1,[r4,#0x15]
;;;3456   									djn.fs->wflag = 1;
002542  2001              MOVS     r0,#1
002544  9909              LDR      r1,[sp,#0x24]
002546  7108              STRB     r0,[r1,#4]
                  |L1.9544|
;;;3457   								}
;;;3458   							}
;;;3459   						}
;;;3460   						if (res == FR_OK) {
002548  b945              CBNZ     r5,|L1.9564|
;;;3461   							res = dir_remove(&djo);		/* Remove old entry */
00254a  a812              ADD      r0,sp,#0x48
00254c  f7fffffe          BL       dir_remove
002550  4605              MOV      r5,r0
;;;3462   							if (res == FR_OK)
002552  b91d              CBNZ     r5,|L1.9564|
;;;3463   								res = sync(djo.fs);
002554  9812              LDR      r0,[sp,#0x48]
002556  f7fffffe          BL       sync
00255a  4605              MOV      r5,r0
                  |L1.9564|
;;;3464   						}
;;;3465   					}
;;;3466   /* End critical section */
;;;3467   				}
;;;3468   			}
;;;3469   		}
;;;3470   		FREE_BUF();
;;;3471   	}
;;;3472   	LEAVE_FF(djo.fs, res);
00255c  4628              MOV      r0,r5
;;;3473   }
00255e  b01d              ADD      sp,sp,#0x74
002560  bdf0              POP      {r4-r7,pc}
;;;3474   
                          ENDP

                  f_mkfs PROC
;;;3549   
;;;3550   FRESULT f_mkfs (
002562  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;3551   	BYTE drv,		/* Logical drive number */
;;;3552   	BYTE sfd,		/* Partitioning rule 0:FDISK, 1:SFD */
;;;3553   	UINT au			/* Allocation unit size [bytes] */
;;;3554   )
;;;3555   {
002566  b08c              SUB      sp,sp,#0x30
002568  4690              MOV      r8,r2
;;;3556   	static const WORD vst[] = { 1024,   512,  256,  128,   64,    32,   16,    8,    4,    2,   0};
;;;3557   	static const WORD cst[] = {32768, 16384, 8192, 4096, 2048, 16384, 8192, 4096, 2048, 1024, 512};
;;;3558   	BYTE fmt, md, *tbl;
;;;3559   	DWORD n_clst, vs, n, wsect;
;;;3560   	UINT i;
;;;3561   	DWORD b_vol, b_fat, b_dir, b_data;	/* Offset (LBA) */
;;;3562   	DWORD n_vol, n_rsv, n_fat, n_dir;	/* Size */
;;;3563   	FATFS *fs;
;;;3564   	DSTATUS stat;
;;;3565   
;;;3566   
;;;3567   	/* Check mounted drive and clear work area */
;;;3568   	if (drv >= _VOLUMES) return FR_INVALID_DRIVE;
00256a  980c              LDR      r0,[sp,#0x30]
00256c  2801              CMP      r0,#1
00256e  db03              BLT      |L1.9592|
002570  200b              MOVS     r0,#0xb
                  |L1.9586|
;;;3569   	fs = FatFs[drv];
;;;3570   	if (!fs) return FR_NOT_ENABLED;
;;;3571   	fs->fs_type = 0;
;;;3572   	drv = LD2PD(drv);
;;;3573   
;;;3574   	/* Get disk statics */
;;;3575   	stat = disk_initialize(drv);
;;;3576   	if (stat & STA_NOINIT) return FR_NOT_READY;
;;;3577   	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
;;;3578   #if _MAX_SS != 512					/* Get disk sector size */
;;;3579   	if (disk_ioctl(drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK)
;;;3580   		return FR_DISK_ERR;
;;;3581   #endif
;;;3582   	if (disk_ioctl(drv, GET_SECTOR_COUNT, &n_vol) != RES_OK || n_vol < 128)
;;;3583   		return FR_DISK_ERR;
;;;3584   	b_vol = (sfd) ? 0 : 63;	/* Volume start sector */
;;;3585   	n_vol -= b_vol;
;;;3586   	if (au & (au - 1)) au = 0;	/* Check validity of the AU size */
;;;3587   	if (!au) {					/* AU auto selection */
;;;3588   		vs = n_vol / (2000 / (SS(fs) / 512));
;;;3589   		for (i = 0; vs < vst[i]; i++) ;
;;;3590   		au = cst[i];
;;;3591   	}
;;;3592   	au /= SS(fs);		/* Number of sectors per cluster */
;;;3593   	if (au == 0) au = 1;
;;;3594   	if (au > 128) au = 128;
;;;3595   
;;;3596   	/* Pre-compute number of clusters and FAT syb-type */
;;;3597   	n_clst = n_vol / au;
;;;3598   	fmt = FS_FAT12;
;;;3599   	if (n_clst >= MIN_FAT16) fmt = FS_FAT16;
;;;3600   	if (n_clst >= MIN_FAT32) fmt = FS_FAT32;
;;;3601   
;;;3602   	/* Determine offset and size of FAT structure */
;;;3603   	if (fmt == FS_FAT32) {
;;;3604   		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
;;;3605   		n_rsv = 32;
;;;3606   		n_dir = 0;
;;;3607   	} else {
;;;3608   		n_fat = (fmt == FS_FAT12) ? (n_clst * 3 + 1) / 2 + 3 : (n_clst * 2) + 4;
;;;3609   		n_fat = (n_fat + SS(fs) - 1) / SS(fs);
;;;3610   		n_rsv = 1;
;;;3611   		n_dir = (DWORD)N_ROOTDIR * SZ_DIR / SS(fs);
;;;3612   	}
;;;3613   	b_fat = b_vol + n_rsv;				/* FAT area start sector */
;;;3614   	b_dir = b_fat + n_fat * N_FATS;		/* Directory area start sector */
;;;3615   	b_data = b_dir + n_dir;				/* Data area start sector */
;;;3616   	if (n_vol < b_data + au) return FR_MKFS_ABORTED;	/* Too small volume */
;;;3617   
;;;3618   	/* Align data start sector to erase block boundary (for flash memory media) */
;;;3619   	if (disk_ioctl(drv, GET_BLOCK_SIZE, &n) != RES_OK || !n || n > 32768) n = 1;
;;;3620   	n = (b_data + n - 1) & ~(n - 1);	/* Next nearest erase block from current data start */
;;;3621   	n = (n - b_data) / N_FATS;
;;;3622   	if (fmt == FS_FAT32) {		/* FAT32: Move FAT offset */
;;;3623   		n_rsv += n;
;;;3624   		b_fat += n;
;;;3625   	} else {					/* FAT12/16: Expand FAT size */
;;;3626   		n_fat += n;
;;;3627   	}
;;;3628   
;;;3629   	/* Determine number of clusters and final check of validity of the FAT sub-type */
;;;3630   	n_clst = (n_vol - n_rsv - n_fat * N_FATS - n_dir) / au;
;;;3631   	if (   (fmt == FS_FAT16 && n_clst < MIN_FAT16)
;;;3632   		|| (fmt == FS_FAT32 && n_clst < MIN_FAT32))
;;;3633   		return FR_MKFS_ABORTED;
;;;3634   
;;;3635   	/* Create partition table if required */
;;;3636   	if (sfd) {	/* No patition table (SFD) */
;;;3637   		md = 0xF0;
;;;3638   	} else {	/* With patition table (FDISK) */
;;;3639   		DWORD n_disk = b_vol + n_vol;
;;;3640   
;;;3641   		mem_set(fs->win, 0, SS(fs));
;;;3642   		tbl = fs->win+MBR_Table;
;;;3643   		ST_DWORD(tbl, 0x00010180);			/* Partition start in CHS */
;;;3644   		if (n_disk < 63UL * 255 * 1024) {	/* Partition end in CHS */
;;;3645   			n_disk = n_disk / 63 / 255;
;;;3646   			tbl[7] = (BYTE)n_disk;
;;;3647   			tbl[6] = (BYTE)((n_disk >> 2) | 63);
;;;3648   		} else {
;;;3649   			ST_WORD(&tbl[6], 0xFFFF);	/* CHS saturated */
;;;3650   		}
;;;3651   		tbl[5] = 254;
;;;3652   		if (fmt != FS_FAT32)				/* System ID */
;;;3653   			tbl[4] = (n_vol < 0x10000) ? 0x04 : 0x06;
;;;3654   		else
;;;3655   			tbl[4] = 0x0c;
;;;3656   		ST_DWORD(tbl+8, 63);				/* Partition start in LBA */
;;;3657   		ST_DWORD(tbl+12, n_vol);			/* Partition size in LBA */
;;;3658   		ST_WORD(fs->win+BS_55AA, 0xAA55);	/* MBR signature */
;;;3659   		if (disk_write(drv, fs->win, 0, 1) != RES_OK)	/* Put the MBR into first physical sector */
;;;3660   			return FR_DISK_ERR;
;;;3661   		md = 0xF8;
;;;3662   	}
;;;3663   
;;;3664   	/* Create volume boot record */
;;;3665   	tbl = fs->win;							/* Clear sector */
;;;3666   	mem_set(tbl, 0, SS(fs));
;;;3667   	mem_cpy(tbl, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code, OEM name */
;;;3668   	i = SS(fs);								/* Sector size */
;;;3669   	ST_WORD(tbl+BPB_BytsPerSec, i);
;;;3670   	tbl[BPB_SecPerClus] = (BYTE)au;			/* Sectors per cluster */
;;;3671   	ST_WORD(tbl+BPB_RsvdSecCnt, n_rsv);		/* Reserved sectors */
;;;3672   	tbl[BPB_NumFATs] = N_FATS;				/* Number of FATs */
;;;3673   	i = (fmt == FS_FAT32) ? 0 : N_ROOTDIR;	/* Number of rootdir entries */
;;;3674   	ST_WORD(tbl+BPB_RootEntCnt, i);
;;;3675   	if (n_vol < 0x10000) {					/* Number of total sectors */
;;;3676   		ST_WORD(tbl+BPB_TotSec16, n_vol);
;;;3677   	} else {
;;;3678   		ST_DWORD(tbl+BPB_TotSec32, n_vol);
;;;3679   	}
;;;3680   	tbl[BPB_Media] = md;					/* Media descriptor */
;;;3681   	ST_WORD(tbl+BPB_SecPerTrk, 63);			/* Number of sectors per track */
;;;3682   	ST_WORD(tbl+BPB_NumHeads, 255);			/* Number of heads */
;;;3683   	ST_DWORD(tbl+BPB_HiddSec, b_vol);		/* Hidden sectors */
;;;3684   	n = get_fattime();						/* Use current time as VSN */
;;;3685   	if (fmt == FS_FAT32) {
;;;3686   		ST_DWORD(tbl+BS_VolID32, n);		/* VSN */
;;;3687   		ST_DWORD(tbl+BPB_FATSz32, n_fat);	/* Number of sectors per FAT */
;;;3688   		ST_DWORD(tbl+BPB_RootClus, 2);		/* Root directory start cluster (2) */
;;;3689   		ST_WORD(tbl+BPB_FSInfo, 1);			/* FSInfo record offset (VBR+1) */
;;;3690   		ST_WORD(tbl+BPB_BkBootSec, 6);		/* Backup boot record offset (VBR+6) */
;;;3691   		tbl[BS_DrvNum32] = 0x80;			/* Drive number */
;;;3692   		tbl[BS_BootSig32] = 0x29;			/* Extended boot signature */
;;;3693   		mem_cpy(tbl+BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
;;;3694   	} else {
;;;3695   		ST_DWORD(tbl+BS_VolID, n);			/* VSN */
;;;3696   		ST_WORD(tbl+BPB_FATSz16, n_fat);	/* Number of sectors per FAT */
;;;3697   		tbl[BS_DrvNum] = 0x80;				/* Drive number */
;;;3698   		tbl[BS_BootSig] = 0x29;				/* Extended boot signature */
;;;3699   		mem_cpy(tbl+BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
;;;3700   	}
;;;3701   	ST_WORD(tbl+BS_55AA, 0xAA55);			/* Signature (Offset is fixed here regardless of sector size) */
;;;3702   	if (disk_write(drv, tbl, b_vol, 1) != RES_OK)	/* Write VBR */
;;;3703   		return FR_DISK_ERR;
;;;3704   	if (fmt == FS_FAT32)							/* Write backup VBR if needed (VBR+6) */
;;;3705   		disk_write(drv, tbl, b_vol + 6, 1);
;;;3706   
;;;3707   	/* Initialize FAT area */
;;;3708   	wsect = b_fat;
;;;3709   	for (i = 0; i < N_FATS; i++) {		/* Initialize each FAT copy */
;;;3710   		mem_set(tbl, 0, SS(fs));			/* 1st sector of the FAT  */
;;;3711   		n = md;								/* Media descriptor byte */
;;;3712   		if (fmt != FS_FAT32) {
;;;3713   			n |= (fmt == FS_FAT12) ? 0x00FFFF00 : 0xFFFFFF00;
;;;3714   			ST_DWORD(tbl+0, n);				/* Reserve cluster #0-1 (FAT12/16) */
;;;3715   		} else {
;;;3716   			n |= 0xFFFFFF00;
;;;3717   			ST_DWORD(tbl+0, n);				/* Reserve cluster #0-1 (FAT32) */
;;;3718   			ST_DWORD(tbl+4, 0xFFFFFFFF);
;;;3719   			ST_DWORD(tbl+8, 0x0FFFFFFF);	/* Reserve cluster #2 for root dir */
;;;3720   		}
;;;3721   		if (disk_write(drv, tbl, wsect++, 1) != RES_OK)
;;;3722   			return FR_DISK_ERR;
;;;3723   		mem_set(tbl, 0, SS(fs));			/* Fill following FAT entries with zero */
;;;3724   		for (n = 1; n < n_fat; n++) {		/* This loop may take a time on FAT32 volume due to many single sector writes */
;;;3725   			if (disk_write(drv, tbl, wsect++, 1) != RES_OK)
;;;3726   				return FR_DISK_ERR;
;;;3727   		}
;;;3728   	}
;;;3729   
;;;3730   	/* Initialize root directory */
;;;3731   	i = (fmt == FS_FAT32) ? au : n_dir;
;;;3732   	do {
;;;3733   		if (disk_write(drv, tbl, wsect++, 1) != RES_OK)
;;;3734   			return FR_DISK_ERR;
;;;3735   	} while (--i);
;;;3736   
;;;3737   #if _USE_ERASE	/* Erase data area if needed */
;;;3738   	{
;;;3739   		DWORD eb[2];
;;;3740   
;;;3741   		eb[0] = wsect; eb[1] = wsect + (n_clst - ((fmt == FS_FAT32) ? 1 : 0)) * au - 1;
;;;3742   		disk_ioctl(drv, CTRL_ERASE_SECTOR, eb);
;;;3743   	}
;;;3744   #endif
;;;3745   
;;;3746   	/* Create FSInfo if needed */
;;;3747   	if (fmt == FS_FAT32) {
;;;3748   		ST_DWORD(tbl+FSI_LeadSig, 0x41615252);
;;;3749   		ST_DWORD(tbl+FSI_StrucSig, 0x61417272);
;;;3750   		ST_DWORD(tbl+FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
;;;3751   		ST_DWORD(tbl+FSI_Nxt_Free, 2);				/* Last allocated cluster# */
;;;3752   		ST_WORD(tbl+BS_55AA, 0xAA55);
;;;3753   		disk_write(drv, tbl, b_vol + 1, 1);	/* Write original (VBR+1) */
;;;3754   		disk_write(drv, tbl, b_vol + 7, 1);	/* Write backup (VBR+7) */
;;;3755   	}
;;;3756   
;;;3757   	return (disk_ioctl(drv, CTRL_SYNC, (void*)0) == RES_OK) ? FR_OK : FR_DISK_ERR;
;;;3758   }
002572  b00f              ADD      sp,sp,#0x3c
002574  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.9592|
002578  4989              LDR      r1,|L1.10144|
00257a  980c              LDR      r0,[sp,#0x30]         ;3569
00257c  f851b020          LDR      r11,[r1,r0,LSL #2]    ;3569
002580  f1bb0f00          CMP      r11,#0                ;3570
002584  d101              BNE      |L1.9610|
002586  200c              MOVS     r0,#0xc               ;3570
002588  e7f3              B        |L1.9586|
                  |L1.9610|
00258a  2000              MOVS     r0,#0                 ;3571
00258c  f88b0000          STRB     r0,[r11,#0]           ;3571
002590  980c              LDR      r0,[sp,#0x30]         ;3572
002592  900c              STR      r0,[sp,#0x30]         ;3572
002594  980c              LDR      r0,[sp,#0x30]         ;3575
002596  f7fffffe          BL       disk_initialize
00259a  9001              STR      r0,[sp,#4]            ;3575
00259c  9801              LDR      r0,[sp,#4]            ;3576
00259e  f0000001          AND      r0,r0,#1              ;3576
0025a2  b108              CBZ      r0,|L1.9640|
0025a4  2003              MOVS     r0,#3                 ;3576
0025a6  e7e4              B        |L1.9586|
                  |L1.9640|
0025a8  9801              LDR      r0,[sp,#4]            ;3577
0025aa  f0000004          AND      r0,r0,#4              ;3577
0025ae  b108              CBZ      r0,|L1.9652|
0025b0  200a              MOVS     r0,#0xa               ;3577
0025b2  e7de              B        |L1.9586|
                  |L1.9652|
0025b4  aa04              ADD      r2,sp,#0x10           ;3582
0025b6  2101              MOVS     r1,#1                 ;3582
0025b8  980c              LDR      r0,[sp,#0x30]         ;3582
0025ba  f7fffffe          BL       disk_ioctl
0025be  b910              CBNZ     r0,|L1.9670|
0025c0  9804              LDR      r0,[sp,#0x10]         ;3582
0025c2  2880              CMP      r0,#0x80              ;3582
0025c4  d201              BCS      |L1.9674|
                  |L1.9670|
0025c6  2001              MOVS     r0,#1                 ;3583
0025c8  e7d3              B        |L1.9586|
                  |L1.9674|
0025ca  980d              LDR      r0,[sp,#0x34]         ;3584
0025cc  b108              CBZ      r0,|L1.9682|
0025ce  2000              MOVS     r0,#0                 ;3584
0025d0  e000              B        |L1.9684|
                  |L1.9682|
0025d2  203f              MOVS     r0,#0x3f              ;3584
                  |L1.9684|
0025d4  4682              MOV      r10,r0                ;3584
0025d6  9804              LDR      r0,[sp,#0x10]         ;3585
0025d8  eba0000a          SUB      r0,r0,r10             ;3585
0025dc  9004              STR      r0,[sp,#0x10]         ;3585
0025de  f1a80001          SUB      r0,r8,#1              ;3586
0025e2  ea000008          AND      r0,r0,r8              ;3586
0025e6  b108              CBZ      r0,|L1.9708|
0025e8  f04f0800          MOV      r8,#0                 ;3586
                  |L1.9708|
0025ec  f1b80f00          CMP      r8,#0                 ;3587
0025f0  d113              BNE      |L1.9754|
0025f2  f44f61fa          MOV      r1,#0x7d0             ;3588
0025f6  9804              LDR      r0,[sp,#0x10]         ;3588
0025f8  fbb0f0f1          UDIV     r0,r0,r1              ;3588
0025fc  900a              STR      r0,[sp,#0x28]         ;3588
0025fe  f04f0900          MOV      r9,#0                 ;3589
002602  e001              B        |L1.9736|
                  |L1.9732|
002604  f1090901          ADD      r9,r9,#1              ;3589
                  |L1.9736|
002608  4866              LDR      r0,|L1.10148|
00260a  f8301019          LDRH     r1,[r0,r9,LSL #1]     ;3589
00260e  980a              LDR      r0,[sp,#0x28]         ;3589
002610  4281              CMP      r1,r0                 ;3589
002612  d8f7              BHI      |L1.9732|
002614  4864              LDR      r0,|L1.10152|
002616  f8308019          LDRH     r8,[r0,r9,LSL #1]     ;3590
                  |L1.9754|
00261a  ea4f2858          LSR      r8,r8,#9              ;3592
00261e  f1b80f00          CMP      r8,#0                 ;3593
002622  d101              BNE      |L1.9768|
002624  f04f0801          MOV      r8,#1                 ;3593
                  |L1.9768|
002628  f1b80f80          CMP      r8,#0x80              ;3594
00262c  d901              BLS      |L1.9778|
00262e  f04f0880          MOV      r8,#0x80              ;3594
                  |L1.9778|
002632  9804              LDR      r0,[sp,#0x10]         ;3597
002634  fbb0f7f8          UDIV     r7,r0,r8              ;3597
002638  2501              MOVS     r5,#1                 ;3598
00263a  f64070f6          MOV      r0,#0xff6             ;3599
00263e  4287              CMP      r7,r0                 ;3599
002640  d300              BCC      |L1.9796|
002642  2502              MOVS     r5,#2                 ;3599
                  |L1.9796|
002644  f64f70f6          MOV      r0,#0xfff6            ;3600
002648  4287              CMP      r7,r0                 ;3600
00264a  d300              BCC      |L1.9806|
00264c  2503              MOVS     r5,#3                 ;3600
                  |L1.9806|
00264e  2d03              CMP      r5,#3                 ;3603
002650  d10a              BNE      |L1.9832|
002652  2008              MOVS     r0,#8                 ;3604
002654  eb000087          ADD      r0,r0,r7,LSL #2       ;3604
002658  f20010ff          ADD      r0,r0,#0x1ff          ;3604
00265c  0a46              LSRS     r6,r0,#9              ;3604
00265e  2020              MOVS     r0,#0x20              ;3605
002660  9003              STR      r0,[sp,#0xc]          ;3605
002662  2000              MOVS     r0,#0                 ;3606
002664  9002              STR      r0,[sp,#8]            ;3606
002666  e011              B        |L1.9868|
                  |L1.9832|
002668  2d01              CMP      r5,#1                 ;3608
00266a  d105              BNE      |L1.9848|
00266c  eb070047          ADD      r0,r7,r7,LSL #1       ;3608
002670  1c40              ADDS     r0,r0,#1              ;3608
002672  0840              LSRS     r0,r0,#1              ;3608
002674  1cc0              ADDS     r0,r0,#3              ;3608
002676  e001              B        |L1.9852|
                  |L1.9848|
002678  0078              LSLS     r0,r7,#1              ;3608
00267a  1d00              ADDS     r0,r0,#4              ;3608
                  |L1.9852|
00267c  4606              MOV      r6,r0                 ;3608
00267e  f20610ff          ADD      r0,r6,#0x1ff          ;3609
002682  0a46              LSRS     r6,r0,#9              ;3609
002684  2001              MOVS     r0,#1                 ;3610
002686  9003              STR      r0,[sp,#0xc]          ;3610
002688  2020              MOVS     r0,#0x20              ;3611
00268a  9002              STR      r0,[sp,#8]            ;3611
                  |L1.9868|
00268c  9803              LDR      r0,[sp,#0xc]          ;3613
00268e  4450              ADD      r0,r0,r10             ;3613
002690  9007              STR      r0,[sp,#0x1c]         ;3613
002692  9807              LDR      r0,[sp,#0x1c]         ;3614
002694  4430              ADD      r0,r0,r6              ;3614
002696  9006              STR      r0,[sp,#0x18]         ;3614
002698  9902              LDR      r1,[sp,#8]            ;3615
00269a  9806              LDR      r0,[sp,#0x18]         ;3615
00269c  4408              ADD      r0,r0,r1              ;3615
00269e  9005              STR      r0,[sp,#0x14]         ;3615
0026a0  9805              LDR      r0,[sp,#0x14]         ;3616
0026a2  4440              ADD      r0,r0,r8              ;3616
0026a4  9904              LDR      r1,[sp,#0x10]         ;3616
0026a6  4288              CMP      r0,r1                 ;3616
0026a8  d901              BLS      |L1.9902|
0026aa  200e              MOVS     r0,#0xe               ;3616
0026ac  e761              B        |L1.9586|
                  |L1.9902|
0026ae  aa09              ADD      r2,sp,#0x24           ;3619
0026b0  2103              MOVS     r1,#3                 ;3619
0026b2  980c              LDR      r0,[sp,#0x30]         ;3619
0026b4  f7fffffe          BL       disk_ioctl
0026b8  b928              CBNZ     r0,|L1.9926|
0026ba  9809              LDR      r0,[sp,#0x24]         ;3619
0026bc  b118              CBZ      r0,|L1.9926|
0026be  9809              LDR      r0,[sp,#0x24]         ;3619
0026c0  f5b04f00          CMP      r0,#0x8000            ;3619
0026c4  d901              BLS      |L1.9930|
                  |L1.9926|
0026c6  2001              MOVS     r0,#1                 ;3619
0026c8  9009              STR      r0,[sp,#0x24]         ;3619
                  |L1.9930|
0026ca  9909              LDR      r1,[sp,#0x24]         ;3620
0026cc  9805              LDR      r0,[sp,#0x14]         ;3620
0026ce  4408              ADD      r0,r0,r1              ;3620
0026d0  1e40              SUBS     r0,r0,#1              ;3620
0026d2  1e49              SUBS     r1,r1,#1              ;3620
0026d4  4388              BICS     r0,r0,r1              ;3620
0026d6  9009              STR      r0,[sp,#0x24]         ;3620
0026d8  9909              LDR      r1,[sp,#0x24]         ;3621
0026da  9805              LDR      r0,[sp,#0x14]         ;3621
0026dc  1a08              SUBS     r0,r1,r0              ;3621
0026de  9009              STR      r0,[sp,#0x24]         ;3621
0026e0  2d03              CMP      r5,#3                 ;3622
0026e2  d108              BNE      |L1.9974|
0026e4  9909              LDR      r1,[sp,#0x24]         ;3623
0026e6  9803              LDR      r0,[sp,#0xc]          ;3623
0026e8  4408              ADD      r0,r0,r1              ;3623
0026ea  9003              STR      r0,[sp,#0xc]          ;3623
0026ec  9909              LDR      r1,[sp,#0x24]         ;3624
0026ee  9807              LDR      r0,[sp,#0x1c]         ;3624
0026f0  4408              ADD      r0,r0,r1              ;3624
0026f2  9007              STR      r0,[sp,#0x1c]         ;3624
0026f4  e001              B        |L1.9978|
                  |L1.9974|
0026f6  9809              LDR      r0,[sp,#0x24]         ;3626
0026f8  4406              ADD      r6,r6,r0              ;3626
                  |L1.9978|
0026fa  e9dd0103          LDRD     r0,r1,[sp,#0xc]       ;3630
0026fe  1a08              SUBS     r0,r1,r0              ;3630
002700  1b81              SUBS     r1,r0,r6              ;3630
002702  9802              LDR      r0,[sp,#8]            ;3630
002704  1a08              SUBS     r0,r1,r0              ;3630
002706  fbb0f7f8          UDIV     r7,r0,r8              ;3630
00270a  2d02              CMP      r5,#2                 ;3631
00270c  d103              BNE      |L1.10006|
00270e  f64070f6          MOV      r0,#0xff6             ;3631
002712  4287              CMP      r7,r0                 ;3631
002714  d305              BCC      |L1.10018|
                  |L1.10006|
002716  2d03              CMP      r5,#3                 ;3632
002718  d105              BNE      |L1.10022|
00271a  f64f70f6          MOV      r0,#0xfff6            ;3632
00271e  4287              CMP      r7,r0                 ;3632
002720  d201              BCS      |L1.10022|
                  |L1.10018|
002722  200e              MOVS     r0,#0xe               ;3633
002724  e725              B        |L1.9586|
                  |L1.10022|
002726  980d              LDR      r0,[sp,#0x34]         ;3636
002728  b110              CBZ      r0,|L1.10032|
00272a  20f0              MOVS     r0,#0xf0              ;3637
00272c  900b              STR      r0,[sp,#0x2c]         ;3637
00272e  e068              B        |L1.10242|
                  |L1.10032|
002730  9804              LDR      r0,[sp,#0x10]         ;3639
002732  4450              ADD      r0,r0,r10             ;3639
002734  9000              STR      r0,[sp,#0]            ;3639
002736  f44f7200          MOV      r2,#0x200             ;3641
00273a  2100              MOVS     r1,#0                 ;3641
00273c  f10b0030          ADD      r0,r11,#0x30          ;3641
002740  f7fffffe          BL       mem_set
002744  f50b74f7          ADD      r4,r11,#0x1ee         ;3642
002748  2080              MOVS     r0,#0x80              ;3643
00274a  7020              STRB     r0,[r4,#0]            ;3643
00274c  2001              MOVS     r0,#1                 ;3643
00274e  7060              STRB     r0,[r4,#1]            ;3643
002750  70a0              STRB     r0,[r4,#2]            ;3643
002752  2000              MOVS     r0,#0                 ;3643
002754  70e0              STRB     r0,[r4,#3]            ;3643
002756  4915              LDR      r1,|L1.10156|
002758  9800              LDR      r0,[sp,#0]            ;3644
00275a  4288              CMP      r0,r1                 ;3644
00275c  d20f              BCS      |L1.10110|
00275e  213f              MOVS     r1,#0x3f              ;3645
002760  9800              LDR      r0,[sp,#0]            ;3645
002762  fbb0f0f1          UDIV     r0,r0,r1              ;3645
002766  21ff              MOVS     r1,#0xff              ;3645
002768  fbb0f0f1          UDIV     r0,r0,r1              ;3645
00276c  9000              STR      r0,[sp,#0]            ;3645
00276e  9800              LDR      r0,[sp,#0]            ;3646
002770  71e0              STRB     r0,[r4,#7]            ;3646
002772  213f              MOVS     r1,#0x3f              ;3647
002774  9800              LDR      r0,[sp,#0]            ;3647
002776  ea410090          ORR      r0,r1,r0,LSR #2       ;3647
00277a  71a0              STRB     r0,[r4,#6]            ;3647
00277c  e003              B        |L1.10118|
                  |L1.10110|
00277e  20ff              MOVS     r0,#0xff              ;3649
002780  71a0              STRB     r0,[r4,#6]            ;3649
002782  21ff              MOVS     r1,#0xff              ;3649
002784  71e1              STRB     r1,[r4,#7]            ;3649
                  |L1.10118|
002786  20fe              MOVS     r0,#0xfe              ;3651
002788  7160              STRB     r0,[r4,#5]            ;3651
00278a  2d03              CMP      r5,#3                 ;3652
00278c  d013              BEQ      |L1.10166|
00278e  9804              LDR      r0,[sp,#0x10]         ;3653
002790  f5b03f80          CMP      r0,#0x10000           ;3653
002794  d20c              BCS      |L1.10160|
002796  2004              MOVS     r0,#4                 ;3653
002798  e00b              B        |L1.10162|
00279a  0000              DCW      0x0000
                  |L1.10140|
                          DCD      LfnBuf
                  |L1.10144|
                          DCD      FatFs
                  |L1.10148|
                          DCD      vst
                  |L1.10152|
                          DCD      ||cst||
                  |L1.10156|
                          DCD      0x00fb0400
                  |L1.10160|
0027b0  2006              MOVS     r0,#6                 ;3653
                  |L1.10162|
0027b2  7120              STRB     r0,[r4,#4]            ;3653
0027b4  e001              B        |L1.10170|
                  |L1.10166|
0027b6  200c              MOVS     r0,#0xc               ;3655
0027b8  7120              STRB     r0,[r4,#4]            ;3655
                  |L1.10170|
0027ba  203f              MOVS     r0,#0x3f              ;3656
0027bc  7220              STRB     r0,[r4,#8]            ;3656
0027be  2100              MOVS     r1,#0                 ;3656
0027c0  7261              STRB     r1,[r4,#9]            ;3656
0027c2  72a1              STRB     r1,[r4,#0xa]          ;3656
0027c4  72e1              STRB     r1,[r4,#0xb]          ;3656
0027c6  9804              LDR      r0,[sp,#0x10]         ;3657
0027c8  7320              STRB     r0,[r4,#0xc]          ;3657
0027ca  9804              LDR      r0,[sp,#0x10]         ;3657
0027cc  0a01              LSRS     r1,r0,#8              ;3657
0027ce  7361              STRB     r1,[r4,#0xd]          ;3657
0027d0  9804              LDR      r0,[sp,#0x10]         ;3657
0027d2  0c01              LSRS     r1,r0,#16             ;3657
0027d4  73a1              STRB     r1,[r4,#0xe]          ;3657
0027d6  9804              LDR      r0,[sp,#0x10]         ;3657
0027d8  0e01              LSRS     r1,r0,#24             ;3657
0027da  73e1              STRB     r1,[r4,#0xf]          ;3657
0027dc  2155              MOVS     r1,#0x55              ;3658
0027de  f88b122e          STRB     r1,[r11,#0x22e]       ;3658
0027e2  21aa              MOVS     r1,#0xaa              ;3658
0027e4  f88b122f          STRB     r1,[r11,#0x22f]       ;3658
0027e8  2301              MOVS     r3,#1                 ;3659
0027ea  2200              MOVS     r2,#0                 ;3659
0027ec  f10b0130          ADD      r1,r11,#0x30          ;3659
0027f0  980c              LDR      r0,[sp,#0x30]         ;3659
0027f2  f7fffffe          BL       disk_write
0027f6  b108              CBZ      r0,|L1.10236|
0027f8  2001              MOVS     r0,#1                 ;3660
0027fa  e6ba              B        |L1.9586|
                  |L1.10236|
0027fc  20f8              MOVS     r0,#0xf8              ;3661
0027fe  900b              STR      r0,[sp,#0x2c]         ;3661
002800  bf00              NOP                            ;3662
                  |L1.10242|
002802  f10b0430          ADD      r4,r11,#0x30          ;3665
002806  f44f7200          MOV      r2,#0x200             ;3666
00280a  2100              MOVS     r1,#0                 ;3666
00280c  4620              MOV      r0,r4                 ;3666
00280e  f7fffffe          BL       mem_set
002812  220b              MOVS     r2,#0xb               ;3667
002814  a1f7              ADR      r1,|L1.11252|
002816  4620              MOV      r0,r4                 ;3667
002818  f7fffffe          BL       mem_cpy
00281c  f44f7900          MOV      r9,#0x200             ;3668
002820  f884900b          STRB     r9,[r4,#0xb]          ;3669
002824  ea4f2119          LSR      r1,r9,#8              ;3669
002828  7321              STRB     r1,[r4,#0xc]          ;3669
00282a  f884800d          STRB     r8,[r4,#0xd]          ;3670
00282e  9803              LDR      r0,[sp,#0xc]          ;3671
002830  73a0              STRB     r0,[r4,#0xe]          ;3671
002832  9803              LDR      r0,[sp,#0xc]          ;3671
002834  0a01              LSRS     r1,r0,#8              ;3671
002836  73e1              STRB     r1,[r4,#0xf]          ;3671
002838  2001              MOVS     r0,#1                 ;3672
00283a  7420              STRB     r0,[r4,#0x10]         ;3672
00283c  2d03              CMP      r5,#3                 ;3673
00283e  d101              BNE      |L1.10308|
002840  2000              MOVS     r0,#0                 ;3673
002842  e001              B        |L1.10312|
                  |L1.10308|
002844  f44f7000          MOV      r0,#0x200             ;3673
                  |L1.10312|
002848  4681              MOV      r9,r0                 ;3673
00284a  f8849011          STRB     r9,[r4,#0x11]         ;3674
00284e  ea4f2119          LSR      r1,r9,#8              ;3674
002852  74a1              STRB     r1,[r4,#0x12]         ;3674
002854  9804              LDR      r0,[sp,#0x10]         ;3675
002856  f5b03f80          CMP      r0,#0x10000           ;3675
00285a  d205              BCS      |L1.10344|
00285c  9804              LDR      r0,[sp,#0x10]         ;3676
00285e  74e0              STRB     r0,[r4,#0x13]         ;3676
002860  9804              LDR      r0,[sp,#0x10]         ;3676
002862  0a01              LSRS     r1,r0,#8              ;3676
002864  7521              STRB     r1,[r4,#0x14]         ;3676
002866  e010              B        |L1.10378|
                  |L1.10344|
002868  9804              LDR      r0,[sp,#0x10]         ;3678
00286a  f8840020          STRB     r0,[r4,#0x20]         ;3678
00286e  9804              LDR      r0,[sp,#0x10]         ;3678
002870  f3c02107          UBFX     r1,r0,#8,#8           ;3678
002874  2021              MOVS     r0,#0x21              ;3678
002876  5501              STRB     r1,[r0,r4]            ;3678
002878  9804              LDR      r0,[sp,#0x10]         ;3678
00287a  f3c04107          UBFX     r1,r0,#16,#8          ;3678
00287e  2022              MOVS     r0,#0x22              ;3678
002880  5501              STRB     r1,[r0,r4]            ;3678
002882  9804              LDR      r0,[sp,#0x10]         ;3678
002884  0e01              LSRS     r1,r0,#24             ;3678
002886  2023              MOVS     r0,#0x23              ;3678
002888  5501              STRB     r1,[r0,r4]            ;3678
                  |L1.10378|
00288a  980b              LDR      r0,[sp,#0x2c]         ;3680
00288c  7560              STRB     r0,[r4,#0x15]         ;3680
00288e  203f              MOVS     r0,#0x3f              ;3681
002890  7620              STRB     r0,[r4,#0x18]         ;3681
002892  2100              MOVS     r1,#0                 ;3681
002894  7661              STRB     r1,[r4,#0x19]         ;3681
002896  20ff              MOVS     r0,#0xff              ;3682
002898  76a0              STRB     r0,[r4,#0x1a]         ;3682
00289a  76e1              STRB     r1,[r4,#0x1b]         ;3682
00289c  f884a01c          STRB     r10,[r4,#0x1c]        ;3683
0028a0  ea4f211a          LSR      r1,r10,#8             ;3683
0028a4  7761              STRB     r1,[r4,#0x1d]         ;3683
0028a6  ea4f411a          LSR      r1,r10,#16            ;3683
0028aa  77a1              STRB     r1,[r4,#0x1e]         ;3683
0028ac  ea4f611a          LSR      r1,r10,#24            ;3683
0028b0  77e1              STRB     r1,[r4,#0x1f]         ;3683
0028b2  f7fffffe          BL       get_fattime
0028b6  9009              STR      r0,[sp,#0x24]         ;3684
0028b8  2d03              CMP      r5,#3                 ;3685
0028ba  d13e              BNE      |L1.10554|
0028bc  9809              LDR      r0,[sp,#0x24]         ;3686
0028be  f8840043          STRB     r0,[r4,#0x43]         ;3686
0028c2  9809              LDR      r0,[sp,#0x24]         ;3686
0028c4  f3c02107          UBFX     r1,r0,#8,#8           ;3686
0028c8  2044              MOVS     r0,#0x44              ;3686
0028ca  5501              STRB     r1,[r0,r4]            ;3686
0028cc  9809              LDR      r0,[sp,#0x24]         ;3686
0028ce  f3c04107          UBFX     r1,r0,#16,#8          ;3686
0028d2  2045              MOVS     r0,#0x45              ;3686
0028d4  5501              STRB     r1,[r0,r4]            ;3686
0028d6  9809              LDR      r0,[sp,#0x24]         ;3686
0028d8  0e01              LSRS     r1,r0,#24             ;3686
0028da  2046              MOVS     r0,#0x46              ;3686
0028dc  5501              STRB     r1,[r0,r4]            ;3686
0028de  f8846024          STRB     r6,[r4,#0x24]         ;3687
0028e2  f3c62107          UBFX     r1,r6,#8,#8           ;3687
0028e6  2025              MOVS     r0,#0x25              ;3687
0028e8  5501              STRB     r1,[r0,r4]            ;3687
0028ea  f3c64107          UBFX     r1,r6,#16,#8          ;3687
0028ee  2026              MOVS     r0,#0x26              ;3687
0028f0  5501              STRB     r1,[r0,r4]            ;3687
0028f2  0e31              LSRS     r1,r6,#24             ;3687
0028f4  2027              MOVS     r0,#0x27              ;3687
0028f6  5501              STRB     r1,[r0,r4]            ;3687
0028f8  2002              MOVS     r0,#2                 ;3688
0028fa  f884002c          STRB     r0,[r4,#0x2c]         ;3688
0028fe  2100              MOVS     r1,#0                 ;3688
002900  202d              MOVS     r0,#0x2d              ;3688
002902  5501              STRB     r1,[r0,r4]            ;3688
002904  202e              MOVS     r0,#0x2e              ;3688
002906  5501              STRB     r1,[r0,r4]            ;3688
002908  202f              MOVS     r0,#0x2f              ;3688
00290a  5501              STRB     r1,[r0,r4]            ;3688
00290c  2001              MOVS     r0,#1                 ;3689
00290e  f8840030          STRB     r0,[r4,#0x30]         ;3689
002912  2031              MOVS     r0,#0x31              ;3689
002914  5501              STRB     r1,[r0,r4]            ;3689
002916  2006              MOVS     r0,#6                 ;3690
002918  f8840032          STRB     r0,[r4,#0x32]         ;3690
00291c  2033              MOVS     r0,#0x33              ;3690
00291e  5501              STRB     r1,[r0,r4]            ;3690
002920  2080              MOVS     r0,#0x80              ;3691
002922  f8840040          STRB     r0,[r4,#0x40]         ;3691
002926  2029              MOVS     r0,#0x29              ;3692
002928  f8840042          STRB     r0,[r4,#0x42]         ;3692
00292c  2213              MOVS     r2,#0x13              ;3693
00292e  a1b4              ADR      r1,|L1.11264|
002930  f1040047          ADD      r0,r4,#0x47           ;3693
002934  f7fffffe          BL       mem_cpy
002938  e01f              B        |L1.10618|
                  |L1.10554|
00293a  9809              LDR      r0,[sp,#0x24]         ;3695
00293c  f8840027          STRB     r0,[r4,#0x27]         ;3695
002940  9809              LDR      r0,[sp,#0x24]         ;3695
002942  f3c02107          UBFX     r1,r0,#8,#8           ;3695
002946  2028              MOVS     r0,#0x28              ;3695
002948  5501              STRB     r1,[r0,r4]            ;3695
00294a  9809              LDR      r0,[sp,#0x24]         ;3695
00294c  f3c04107          UBFX     r1,r0,#16,#8          ;3695
002950  2029              MOVS     r0,#0x29              ;3695
002952  5501              STRB     r1,[r0,r4]            ;3695
002954  9809              LDR      r0,[sp,#0x24]         ;3695
002956  0e01              LSRS     r1,r0,#24             ;3695
002958  202a              MOVS     r0,#0x2a              ;3695
00295a  5501              STRB     r1,[r0,r4]            ;3695
00295c  75a6              STRB     r6,[r4,#0x16]         ;3696
00295e  0a31              LSRS     r1,r6,#8              ;3696
002960  75e1              STRB     r1,[r4,#0x17]         ;3696
002962  2080              MOVS     r0,#0x80              ;3697
002964  f8840024          STRB     r0,[r4,#0x24]         ;3697
002968  2029              MOVS     r0,#0x29              ;3698
00296a  f8840026          STRB     r0,[r4,#0x26]         ;3698
00296e  2213              MOVS     r2,#0x13              ;3699
002970  a1a8              ADR      r1,|L1.11284|
002972  f104002b          ADD      r0,r4,#0x2b           ;3699
002976  f7fffffe          BL       mem_cpy
                  |L1.10618|
00297a  2055              MOVS     r0,#0x55              ;3701
00297c  f88401fe          STRB     r0,[r4,#0x1fe]        ;3701
002980  21aa              MOVS     r1,#0xaa              ;3701
002982  f24010ff          MOV      r0,#0x1ff             ;3701
002986  5501              STRB     r1,[r0,r4]            ;3701
002988  2301              MOVS     r3,#1                 ;3702
00298a  4652              MOV      r2,r10                ;3702
00298c  4621              MOV      r1,r4                 ;3702
00298e  980c              LDR      r0,[sp,#0x30]         ;3702
002990  f7fffffe          BL       disk_write
002994  b108              CBZ      r0,|L1.10650|
002996  2001              MOVS     r0,#1                 ;3703
002998  e5eb              B        |L1.9586|
                  |L1.10650|
00299a  2d03              CMP      r5,#3                 ;3704
00299c  d106              BNE      |L1.10668|
00299e  2301              MOVS     r3,#1                 ;3705
0029a0  f10a0206          ADD      r2,r10,#6             ;3705
0029a4  4621              MOV      r1,r4                 ;3705
0029a6  980c              LDR      r0,[sp,#0x30]         ;3705
0029a8  f7fffffe          BL       disk_write
                  |L1.10668|
0029ac  9807              LDR      r0,[sp,#0x1c]         ;3708
0029ae  9008              STR      r0,[sp,#0x20]         ;3708
0029b0  f04f0900          MOV      r9,#0                 ;3709
0029b4  e061              B        |L1.10874|
                  |L1.10678|
0029b6  f44f7200          MOV      r2,#0x200             ;3710
0029ba  2100              MOVS     r1,#0                 ;3710
0029bc  4620              MOV      r0,r4                 ;3710
0029be  f7fffffe          BL       mem_set
0029c2  980b              LDR      r0,[sp,#0x2c]         ;3711
0029c4  9009              STR      r0,[sp,#0x24]         ;3711
0029c6  2d03              CMP      r5,#3                 ;3712
0029c8  d014              BEQ      |L1.10740|
0029ca  2d01              CMP      r5,#1                 ;3713
0029cc  d101              BNE      |L1.10706|
0029ce  4896              LDR      r0,|L1.11304|
0029d0  e001              B        |L1.10710|
                  |L1.10706|
0029d2  f06f00ff          MVN      r0,#0xff              ;3713
                  |L1.10710|
0029d6  9909              LDR      r1,[sp,#0x24]         ;3713
0029d8  4308              ORRS     r0,r0,r1              ;3713
0029da  9009              STR      r0,[sp,#0x24]         ;3713
0029dc  9809              LDR      r0,[sp,#0x24]         ;3714
0029de  7020              STRB     r0,[r4,#0]            ;3714
0029e0  9809              LDR      r0,[sp,#0x24]         ;3714
0029e2  0a00              LSRS     r0,r0,#8              ;3714
0029e4  7060              STRB     r0,[r4,#1]            ;3714
0029e6  9809              LDR      r0,[sp,#0x24]         ;3714
0029e8  0c00              LSRS     r0,r0,#16             ;3714
0029ea  70a0              STRB     r0,[r4,#2]            ;3714
0029ec  9809              LDR      r0,[sp,#0x24]         ;3714
0029ee  0e00              LSRS     r0,r0,#24             ;3714
0029f0  70e0              STRB     r0,[r4,#3]            ;3714
0029f2  e019              B        |L1.10792|
                  |L1.10740|
0029f4  9809              LDR      r0,[sp,#0x24]         ;3716
0029f6  f06000ff          ORN      r0,r0,#0xff           ;3716
0029fa  9009              STR      r0,[sp,#0x24]         ;3716
0029fc  9809              LDR      r0,[sp,#0x24]         ;3717
0029fe  7020              STRB     r0,[r4,#0]            ;3717
002a00  9809              LDR      r0,[sp,#0x24]         ;3717
002a02  0a00              LSRS     r0,r0,#8              ;3717
002a04  7060              STRB     r0,[r4,#1]            ;3717
002a06  9809              LDR      r0,[sp,#0x24]         ;3717
002a08  0c00              LSRS     r0,r0,#16             ;3717
002a0a  70a0              STRB     r0,[r4,#2]            ;3717
002a0c  9809              LDR      r0,[sp,#0x24]         ;3717
002a0e  0e00              LSRS     r0,r0,#24             ;3717
002a10  70e0              STRB     r0,[r4,#3]            ;3717
002a12  20ff              MOVS     r0,#0xff              ;3718
002a14  7120              STRB     r0,[r4,#4]            ;3718
002a16  21ff              MOVS     r1,#0xff              ;3718
002a18  7161              STRB     r1,[r4,#5]            ;3718
002a1a  71a1              STRB     r1,[r4,#6]            ;3718
002a1c  71e1              STRB     r1,[r4,#7]            ;3718
002a1e  7220              STRB     r0,[r4,#8]            ;3719
002a20  7261              STRB     r1,[r4,#9]            ;3719
002a22  72a1              STRB     r1,[r4,#0xa]          ;3719
002a24  210f              MOVS     r1,#0xf               ;3719
002a26  72e1              STRB     r1,[r4,#0xb]          ;3719
                  |L1.10792|
002a28  9808              LDR      r0,[sp,#0x20]         ;3721
002a2a  1c41              ADDS     r1,r0,#1              ;3721
002a2c  4602              MOV      r2,r0                 ;3721
002a2e  2301              MOVS     r3,#1                 ;3721
002a30  9108              STR      r1,[sp,#0x20]         ;3721
002a32  4621              MOV      r1,r4                 ;3721
002a34  980c              LDR      r0,[sp,#0x30]         ;3721
002a36  f7fffffe          BL       disk_write
002a3a  b108              CBZ      r0,|L1.10816|
002a3c  2001              MOVS     r0,#1                 ;3722
002a3e  e598              B        |L1.9586|
                  |L1.10816|
002a40  f44f7200          MOV      r2,#0x200             ;3723
002a44  2100              MOVS     r1,#0                 ;3723
002a46  4620              MOV      r0,r4                 ;3723
002a48  f7fffffe          BL       mem_set
002a4c  2001              MOVS     r0,#1                 ;3724
002a4e  9009              STR      r0,[sp,#0x24]         ;3724
002a50  e00e              B        |L1.10864|
                  |L1.10834|
002a52  9808              LDR      r0,[sp,#0x20]         ;3725
002a54  1c41              ADDS     r1,r0,#1              ;3725
002a56  4602              MOV      r2,r0                 ;3725
002a58  2301              MOVS     r3,#1                 ;3725
002a5a  9108              STR      r1,[sp,#0x20]         ;3725
002a5c  4621              MOV      r1,r4                 ;3725
002a5e  980c              LDR      r0,[sp,#0x30]         ;3725
002a60  f7fffffe          BL       disk_write
002a64  b108              CBZ      r0,|L1.10858|
002a66  2001              MOVS     r0,#1                 ;3726
002a68  e583              B        |L1.9586|
                  |L1.10858|
002a6a  9809              LDR      r0,[sp,#0x24]         ;3724
002a6c  1c40              ADDS     r0,r0,#1              ;3724
002a6e  9009              STR      r0,[sp,#0x24]         ;3724
                  |L1.10864|
002a70  9809              LDR      r0,[sp,#0x24]         ;3724
002a72  42b0              CMP      r0,r6                 ;3724
002a74  d3ed              BCC      |L1.10834|
002a76  f1090901          ADD      r9,r9,#1              ;3709
                  |L1.10874|
002a7a  f1b90f00          CMP      r9,#0                 ;3709
002a7e  d09a              BEQ      |L1.10678|
002a80  2d03              CMP      r5,#3                 ;3731
002a82  d101              BNE      |L1.10888|
002a84  4640              MOV      r0,r8                 ;3731
002a86  e000              B        |L1.10890|
                  |L1.10888|
002a88  9802              LDR      r0,[sp,#8]            ;3731
                  |L1.10890|
002a8a  4681              MOV      r9,r0                 ;3731
002a8c  bf00              NOP                            ;3732
                  |L1.10894|
002a8e  9808              LDR      r0,[sp,#0x20]         ;3733
002a90  1c41              ADDS     r1,r0,#1              ;3733
002a92  4602              MOV      r2,r0                 ;3733
002a94  2301              MOVS     r3,#1                 ;3733
002a96  9108              STR      r1,[sp,#0x20]         ;3733
002a98  4621              MOV      r1,r4                 ;3733
002a9a  980c              LDR      r0,[sp,#0x30]         ;3733
002a9c  f7fffffe          BL       disk_write
002aa0  b108              CBZ      r0,|L1.10918|
002aa2  2001              MOVS     r0,#1                 ;3734
002aa4  e565              B        |L1.9586|
                  |L1.10918|
002aa6  f1a90001          SUB      r0,r9,#1              ;3735
002aaa  ea5f0900          MOVS     r9,r0                 ;3735
002aae  d1ee              BNE      |L1.10894|
002ab0  2d03              CMP      r5,#3                 ;3747
002ab2  d146              BNE      |L1.11074|
002ab4  2052              MOVS     r0,#0x52              ;3748
002ab6  7020              STRB     r0,[r4,#0]            ;3748
002ab8  7060              STRB     r0,[r4,#1]            ;3748
002aba  2061              MOVS     r0,#0x61              ;3748
002abc  70a0              STRB     r0,[r4,#2]            ;3748
002abe  2041              MOVS     r0,#0x41              ;3748
002ac0  70e0              STRB     r0,[r4,#3]            ;3748
002ac2  2072              MOVS     r0,#0x72              ;3749
002ac4  f88401e4          STRB     r0,[r4,#0x1e4]        ;3749
002ac8  2172              MOVS     r1,#0x72              ;3749
002aca  f24010e5          MOV      r0,#0x1e5             ;3749
002ace  5501              STRB     r1,[r0,r4]            ;3749
002ad0  2141              MOVS     r1,#0x41              ;3749
002ad2  1c40              ADDS     r0,r0,#1              ;3749
002ad4  5501              STRB     r1,[r0,r4]            ;3749
002ad6  2161              MOVS     r1,#0x61              ;3749
002ad8  1c40              ADDS     r0,r0,#1              ;3749
002ada  5501              STRB     r1,[r0,r4]            ;3749
002adc  1e78              SUBS     r0,r7,#1              ;3750
002ade  f88401e8          STRB     r0,[r4,#0x1e8]        ;3750
002ae2  f3c02107          UBFX     r1,r0,#8,#8           ;3750
002ae6  f24010e9          MOV      r0,#0x1e9             ;3750
002aea  5501              STRB     r1,[r0,r4]            ;3750
002aec  1e78              SUBS     r0,r7,#1              ;3750
002aee  f3c04107          UBFX     r1,r0,#16,#8          ;3750
002af2  f44f70f5          MOV      r0,#0x1ea             ;3750
002af6  5501              STRB     r1,[r0,r4]            ;3750
002af8  1e78              SUBS     r0,r7,#1              ;3750
002afa  0e01              LSRS     r1,r0,#24             ;3750
002afc  f24010eb          MOV      r0,#0x1eb             ;3750
002b00  5501              STRB     r1,[r0,r4]            ;3750
002b02  2002              MOVS     r0,#2                 ;3751
002b04  f88401ec          STRB     r0,[r4,#0x1ec]        ;3751
002b08  2100              MOVS     r1,#0                 ;3751
002b0a  f24010ed          MOV      r0,#0x1ed             ;3751
002b0e  5501              STRB     r1,[r0,r4]            ;3751
002b10  1c40              ADDS     r0,r0,#1              ;3751
002b12  5501              STRB     r1,[r0,r4]            ;3751
002b14  1c40              ADDS     r0,r0,#1              ;3751
002b16  5501              STRB     r1,[r0,r4]            ;3751
002b18  2055              MOVS     r0,#0x55              ;3752
002b1a  f88401fe          STRB     r0,[r4,#0x1fe]        ;3752
002b1e  21aa              MOVS     r1,#0xaa              ;3752
002b20  f24010ff          MOV      r0,#0x1ff             ;3752
002b24  5501              STRB     r1,[r0,r4]            ;3752
002b26  2301              MOVS     r3,#1                 ;3753
002b28  f10a0201          ADD      r2,r10,#1             ;3753
002b2c  4621              MOV      r1,r4                 ;3753
002b2e  980c              LDR      r0,[sp,#0x30]         ;3753
002b30  f7fffffe          BL       disk_write
002b34  2301              MOVS     r3,#1                 ;3754
002b36  f10a0207          ADD      r2,r10,#7             ;3754
002b3a  4621              MOV      r1,r4                 ;3754
002b3c  980c              LDR      r0,[sp,#0x30]         ;3754
002b3e  f7fffffe          BL       disk_write
                  |L1.11074|
002b42  2200              MOVS     r2,#0                 ;3757
002b44  4611              MOV      r1,r2                 ;3757
002b46  980c              LDR      r0,[sp,#0x30]         ;3757
002b48  f7fffffe          BL       disk_ioctl
002b4c  b108              CBZ      r0,|L1.11090|
002b4e  2001              MOVS     r0,#1                 ;3757
002b50  e50f              B        |L1.9586|
                  |L1.11090|
002b52  2000              MOVS     r0,#0                 ;3757
002b54  e50d              B        |L1.9586|
;;;3759   
                          ENDP

                  f_gets PROC
;;;3768   /*-----------------------------------------------------------------------*/
;;;3769   TCHAR* f_gets (
002b56  e92d47fc          PUSH     {r2-r10,lr}
;;;3770   	TCHAR* buff,	/* Pointer to the string buffer to read */
;;;3771   	int len,		/* Size of string buffer (characters) */
;;;3772   	FIL* fil		/* Pointer to the file object */
;;;3773   )
;;;3774   {
002b5a  4607              MOV      r7,r0
002b5c  4688              MOV      r8,r1
002b5e  4691              MOV      r9,r2
;;;3775   	int n = 0;
002b60  2400              MOVS     r4,#0
;;;3776   	TCHAR c, *p = buff;
002b62  463e              MOV      r6,r7
;;;3777   	BYTE s[2];
;;;3778   	UINT rc;
;;;3779   
;;;3780   
;;;3781   	while (n < len - 1) {			/* Read bytes until buffer gets filled */
002b64  e011              B        |L1.11146|
                  |L1.11110|
;;;3782   		f_read(fil, s, 1, &rc);
002b66  466b              MOV      r3,sp
002b68  2201              MOVS     r2,#1
002b6a  a901              ADD      r1,sp,#4
002b6c  4648              MOV      r0,r9
002b6e  f7fffffe          BL       f_read
;;;3783   		if (rc != 1) break;			/* Break on EOF or error */
002b72  9800              LDR      r0,[sp,#0]
002b74  2801              CMP      r0,#1
002b76  d000              BEQ      |L1.11130|
002b78  e00b              B        |L1.11154|
                  |L1.11130|
;;;3784   		c = s[0];
002b7a  f89d5004          LDRB     r5,[sp,#4]
;;;3785   #if _LFN_UNICODE					/* Read a character in UTF-8 encoding */
;;;3786   		if (c >= 0x80) {
;;;3787   			if (c < 0xC0) continue;	/* Skip stray trailer */
;;;3788   			if (c < 0xE0) {			/* Two-byte sequense */
;;;3789   				f_read(fil, s, 1, &rc);
;;;3790   				if (rc != 1) break;
;;;3791   				c = ((c & 0x1F) << 6) | (s[0] & 0x3F);
;;;3792   				if (c < 0x80) c = '?';
;;;3793   			} else {
;;;3794   				if (c < 0xF0) {		/* Three-byte sequense */
;;;3795   					f_read(fil, s, 2, &rc);
;;;3796   					if (rc != 2) break;
;;;3797   					c = (c << 12) | ((s[0] & 0x3F) << 6) | (s[1] & 0x3F);
;;;3798   					if (c < 0x800) c = '?';
;;;3799   				} else {			/* Reject four-byte sequense */
;;;3800   					c = '?';
;;;3801   				}
;;;3802   			}
;;;3803   		}
;;;3804   #endif
;;;3805   #if _USE_STRFUNC >= 2
;;;3806   		if (c == '\r') continue;	/* Strip '\r' */
;;;3807   #endif
;;;3808   		*p++ = c;
002b7e  f8065b01          STRB     r5,[r6],#1
;;;3809   		n++;
002b82  1c64              ADDS     r4,r4,#1
;;;3810   		if (c == '\n') break;		/* Break on EOL */
002b84  2d0a              CMP      r5,#0xa
002b86  d100              BNE      |L1.11146|
002b88  e003              B        |L1.11154|
                  |L1.11146|
002b8a  f1a80001          SUB      r0,r8,#1              ;3781
002b8e  42a0              CMP      r0,r4                 ;3781
002b90  dce9              BGT      |L1.11110|
                  |L1.11154|
002b92  bf00              NOP                            ;3783
;;;3811   	}
;;;3812   	*p = 0;
002b94  2000              MOVS     r0,#0
002b96  7030              STRB     r0,[r6,#0]
;;;3813   	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
002b98  b114              CBZ      r4,|L1.11168|
002b9a  4638              MOV      r0,r7
                  |L1.11164|
;;;3814   }
002b9c  e8bd87fc          POP      {r2-r10,pc}
                  |L1.11168|
002ba0  2000              MOVS     r0,#0                 ;3813
002ba2  e7fb              B        |L1.11164|
;;;3815   
                          ENDP

                  f_putc PROC
;;;3822   /*-----------------------------------------------------------------------*/
;;;3823   int f_putc (
002ba4  b57c              PUSH     {r2-r6,lr}
;;;3824   	TCHAR c,	/* A character to be output */
;;;3825   	FIL* fil	/* Pointer to the file object */
;;;3826   )
;;;3827   {
002ba6  4604              MOV      r4,r0
002ba8  460d              MOV      r5,r1
;;;3828   	UINT bw, btw;
;;;3829   	BYTE s[3];
;;;3830   
;;;3831   
;;;3832   #if _USE_STRFUNC >= 2
;;;3833   	if (c == '\n') f_putc ('\r', fil);	/* LF -> CRLF conversion */
;;;3834   #endif
;;;3835   
;;;3836   #if _LFN_UNICODE	/* Write the character in UTF-8 encoding */
;;;3837   	if (c < 0x80) {			/* 7-bit */
;;;3838   		s[0] = (BYTE)c;
;;;3839   		btw = 1;
;;;3840   	} else {
;;;3841   		if (c < 0x800) {	/* 11-bit */
;;;3842   			s[0] = (BYTE)(0xC0 | (c >> 6));
;;;3843   			s[1] = (BYTE)(0x80 | (c & 0x3F));
;;;3844   			btw = 2;
;;;3845   		} else {			/* 16-bit */
;;;3846   			s[0] = (BYTE)(0xE0 | (c >> 12));
;;;3847   			s[1] = (BYTE)(0x80 | ((c >> 6) & 0x3F));
;;;3848   			s[2] = (BYTE)(0x80 | (c & 0x3F));
;;;3849   			btw = 3;
;;;3850   		}
;;;3851   	}
;;;3852   #else				/* Write the character without conversion */
;;;3853   	s[0] = (BYTE)c;
002baa  f88d4000          STRB     r4,[sp,#0]
;;;3854   	btw = 1;
002bae  2601              MOVS     r6,#1
;;;3855   #endif
;;;3856   	f_write(fil, s, btw, &bw);		/* Write the char to the file */
002bb0  ab01              ADD      r3,sp,#4
002bb2  4632              MOV      r2,r6
002bb4  4669              MOV      r1,sp
002bb6  4628              MOV      r0,r5
002bb8  f7fffffe          BL       f_write
;;;3857   	return (bw == btw) ? 1 : EOF;	/* Return the result */
002bbc  9801              LDR      r0,[sp,#4]
002bbe  42b0              CMP      r0,r6
002bc0  d100              BNE      |L1.11204|
                  |L1.11202|
;;;3858   }
002bc2  bd7c              POP      {r2-r6,pc}
                  |L1.11204|
002bc4  f04f30ff          MOV      r0,#0xffffffff        ;3857
002bc8  e7fb              B        |L1.11202|
;;;3859   
                          ENDP

                  f_puts PROC
;;;3865   /*-----------------------------------------------------------------------*/
;;;3866   int f_puts (
002bca  b570              PUSH     {r4-r6,lr}
;;;3867   	const TCHAR* str,	/* Pointer to the string to be output */
;;;3868   	FIL* fil			/* Pointer to the file object */
;;;3869   )
;;;3870   {
002bcc  4604              MOV      r4,r0
002bce  460e              MOV      r6,r1
;;;3871   	int n;
;;;3872   
;;;3873   
;;;3874   	for (n = 0; *str; str++, n++) {
002bd0  2500              MOVS     r5,#0
002bd2  e00a              B        |L1.11242|
                  |L1.11220|
;;;3875   		if (f_putc(*str, fil) == EOF) return EOF;
002bd4  7820              LDRB     r0,[r4,#0]
002bd6  4631              MOV      r1,r6
002bd8  f7fffffe          BL       f_putc
002bdc  1c40              ADDS     r0,r0,#1
002bde  b910              CBNZ     r0,|L1.11238|
002be0  f04f30ff          MOV      r0,#0xffffffff
                  |L1.11236|
;;;3876   	}
;;;3877   	return n;
;;;3878   }
002be4  bd70              POP      {r4-r6,pc}
                  |L1.11238|
002be6  1c64              ADDS     r4,r4,#1              ;3874
002be8  1c6d              ADDS     r5,r5,#1              ;3874
                  |L1.11242|
002bea  7820              LDRB     r0,[r4,#0]            ;3874
002bec  2800              CMP      r0,#0                 ;3874
002bee  d1f1              BNE      |L1.11220|
002bf0  4628              MOV      r0,r5                 ;3877
002bf2  e7f7              B        |L1.11236|
                  |L1.11252|
002bf4  ebfe904d          DCB      235,254,144,"MSDOS5.0",0
002bf8  53444f53
002bfc  352e3000
                  |L1.11264|
002c00  4e4f204e          DCB      "NO NAME    FAT32   ",0
002c04  414d4520
002c08  20202046
002c0c  41543332
002c10  20202000
                  |L1.11284|
002c14  4e4f204e          DCB      "NO NAME    FAT     ",0
002c18  414d4520
002c1c  20202046
002c20  41542020
002c24  20202000
                  |L1.11304|
                          DCD      0x00ffff00
                          ENDP

                  f_printf PROC
;;;3885   /*-----------------------------------------------------------------------*/
;;;3886   int f_printf (
002c2c  b40f              PUSH     {r0-r3}
;;;3887   	FIL* fil,			/* Pointer to the file object */
;;;3888   	const TCHAR* str,	/* Pointer to the format string */
;;;3889   	...					/* Optional arguments... */
;;;3890   )
;;;3891   {
002c2e  e92d4ff0          PUSH     {r4-r11,lr}
002c32  b089              SUB      sp,sp,#0x24
;;;3892   	va_list arp;
;;;3893   	BYTE f, r;
;;;3894   	UINT i, j, w;
;;;3895   	ULONG v;
;;;3896   	TCHAR c, d, s[16], *p;
;;;3897   	int res, cc;
;;;3898   
;;;3899   
;;;3900   	va_start(arp, str);
002c34  a814              ADD      r0,sp,#0x50
002c36  9008              STR      r0,[sp,#0x20]
;;;3901   
;;;3902   	for (cc = res = 0; cc != EOF; res += cc) {
002c38  2000              MOVS     r0,#0
002c3a  4606              MOV      r6,r0
002c3c  4682              MOV      r10,r0
002c3e  e139              B        |L1.11956|
                  |L1.11328|
;;;3903   		c = *str++;
002c40  9813              LDR      r0,[sp,#0x4c]
002c42  f8104b01          LDRB     r4,[r0],#1
002c46  9013              STR      r0,[sp,#0x4c]
;;;3904   		if (c == 0) break;			/* End of string */
002c48  b904              CBNZ     r4,|L1.11340|
002c4a  e138              B        |L1.11966|
                  |L1.11340|
;;;3905   		if (c != '%') {				/* Non escape character */
002c4c  2c25              CMP      r4,#0x25
002c4e  d00a              BEQ      |L1.11366|
;;;3906   			cc = f_putc(c, fil);
002c50  4620              MOV      r0,r4
002c52  9912              LDR      r1,[sp,#0x48]
002c54  f7fffffe          BL       f_putc
002c58  4682              MOV      r10,r0
;;;3907   			if (cc != EOF) cc = 1;
002c5a  f10a0001          ADD      r0,r10,#1
002c5e  b108              CBZ      r0,|L1.11364|
002c60  f04f0a01          MOV      r10,#1
                  |L1.11364|
;;;3908   			continue;
002c64  e125              B        |L1.11954|
                  |L1.11366|
;;;3909   		}
;;;3910   		w = f = 0;
002c66  2000              MOVS     r0,#0
002c68  4607              MOV      r7,r0
002c6a  4683              MOV      r11,r0
;;;3911   		c = *str++;
002c6c  9813              LDR      r0,[sp,#0x4c]
002c6e  f8104b01          LDRB     r4,[r0],#1
002c72  9013              STR      r0,[sp,#0x4c]
;;;3912   		if (c == '0') {				/* Flag: '0' padding */
002c74  2c30              CMP      r4,#0x30
002c76  d105              BNE      |L1.11396|
;;;3913   			f = 1; c = *str++;
002c78  2701              MOVS     r7,#1
002c7a  9813              LDR      r0,[sp,#0x4c]
002c7c  f8104b01          LDRB     r4,[r0],#1
002c80  9013              STR      r0,[sp,#0x4c]
002c82  e006              B        |L1.11410|
                  |L1.11396|
;;;3914   		} else {
;;;3915   			if (c == '-') {			/* Flag: left justified */
002c84  2c2d              CMP      r4,#0x2d
002c86  d104              BNE      |L1.11410|
;;;3916   				f = 2; c = *str++;
002c88  2702              MOVS     r7,#2
002c8a  9813              LDR      r0,[sp,#0x4c]
002c8c  f8104b01          LDRB     r4,[r0],#1
002c90  9013              STR      r0,[sp,#0x4c]
                  |L1.11410|
;;;3917   			}
;;;3918   		}
;;;3919   		while (IsDigit(c)) {		/* Precision */
002c92  e009              B        |L1.11432|
                  |L1.11412|
;;;3920   			w = w * 10 + c - '0';
002c94  eb0b008b          ADD      r0,r11,r11,LSL #2
002c98  eb040040          ADD      r0,r4,r0,LSL #1
002c9c  f1a00b30          SUB      r11,r0,#0x30
;;;3921   			c = *str++;
002ca0  9813              LDR      r0,[sp,#0x4c]
002ca2  f8104b01          LDRB     r4,[r0],#1
002ca6  9013              STR      r0,[sp,#0x4c]
                  |L1.11432|
002ca8  2c30              CMP      r4,#0x30              ;3919
002caa  db01              BLT      |L1.11440|
002cac  2c39              CMP      r4,#0x39              ;3919
002cae  ddf1              BLE      |L1.11412|
                  |L1.11440|
;;;3922   		}
;;;3923   		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
002cb0  2c6c              CMP      r4,#0x6c
002cb2  d001              BEQ      |L1.11448|
002cb4  2c4c              CMP      r4,#0x4c
002cb6  d105              BNE      |L1.11460|
                  |L1.11448|
;;;3924   			f |= 4; c = *str++;
002cb8  f0470704          ORR      r7,r7,#4
002cbc  9813              LDR      r0,[sp,#0x4c]
002cbe  f8104b01          LDRB     r4,[r0],#1
002cc2  9013              STR      r0,[sp,#0x4c]
                  |L1.11460|
;;;3925   		}
;;;3926   		if (!c) break;
002cc4  b904              CBNZ     r4,|L1.11464|
002cc6  e0fa              B        |L1.11966|
                  |L1.11464|
;;;3927   		d = c;
002cc8  4625              MOV      r5,r4
;;;3928   		if (IsLower(d)) d -= 0x20;
002cca  2d61              CMP      r5,#0x61
002ccc  db04              BLT      |L1.11480|
002cce  2d7a              CMP      r5,#0x7a
002cd0  dc02              BGT      |L1.11480|
002cd2  f1a50020          SUB      r0,r5,#0x20
002cd6  b2c5              UXTB     r5,r0
                  |L1.11480|
;;;3929   		switch (d) {				/* Type is... */
002cd8  2d4f              CMP      r5,#0x4f
002cda  d052              BEQ      |L1.11650|
002cdc  dc06              BGT      |L1.11500|
002cde  2d42              CMP      r5,#0x42
002ce0  d04c              BEQ      |L1.11644|
002ce2  2d43              CMP      r5,#0x43
002ce4  d040              BEQ      |L1.11624|
002ce6  2d44              CMP      r5,#0x44
002ce8  d155              BNE      |L1.11670|
002cea  e04d              B        |L1.11656|
                  |L1.11500|
002cec  2d53              CMP      r5,#0x53
002cee  d004              BEQ      |L1.11514|
002cf0  2d55              CMP      r5,#0x55
002cf2  d04a              BEQ      |L1.11658|
002cf4  2d58              CMP      r5,#0x58
002cf6  d14e              BNE      |L1.11670|
002cf8  e04a              B        |L1.11664|
                  |L1.11514|
;;;3930   		case 'S' :					/* String */
;;;3931   			p = va_arg(arp, TCHAR*);
002cfa  9808              LDR      r0,[sp,#0x20]
002cfc  6800              LDR      r0,[r0,#0]
002cfe  9001              STR      r0,[sp,#4]
002d00  9808              LDR      r0,[sp,#0x20]
002d02  1d00              ADDS     r0,r0,#4
002d04  9008              STR      r0,[sp,#0x20]
;;;3932   			for (j = 0; p[j]; j++) ;
002d06  f04f0900          MOV      r9,#0
002d0a  e001              B        |L1.11536|
                  |L1.11532|
002d0c  f1090901          ADD      r9,r9,#1
                  |L1.11536|
002d10  9801              LDR      r0,[sp,#4]
002d12  f8100009          LDRB     r0,[r0,r9]
002d16  2800              CMP      r0,#0
002d18  d1f8              BNE      |L1.11532|
;;;3933   			res = 0;
002d1a  2600              MOVS     r6,#0
;;;3934   			while (!(f & 2) && j++ < w) res += (cc = f_putc(' ', fil));
002d1c  e005              B        |L1.11562|
                  |L1.11550|
002d1e  2020              MOVS     r0,#0x20
002d20  9912              LDR      r1,[sp,#0x48]
002d22  f7fffffe          BL       f_putc
002d26  4682              MOV      r10,r0
002d28  4406              ADD      r6,r6,r0
                  |L1.11562|
002d2a  f0070002          AND      r0,r7,#2
002d2e  b920              CBNZ     r0,|L1.11578|
002d30  4648              MOV      r0,r9
002d32  f1090901          ADD      r9,r9,#1
002d36  4558              CMP      r0,r11
002d38  d3f1              BCC      |L1.11550|
                  |L1.11578|
;;;3935   			res += (cc = f_puts(p, fil));
002d3a  9912              LDR      r1,[sp,#0x48]
002d3c  9801              LDR      r0,[sp,#4]
002d3e  f7fffffe          BL       f_puts
002d42  4682              MOV      r10,r0
002d44  4406              ADD      r6,r6,r0
;;;3936   			while (j++ < w) res += (cc = f_putc(' ', fil));
002d46  e005              B        |L1.11604|
                  |L1.11592|
002d48  2020              MOVS     r0,#0x20
002d4a  9912              LDR      r1,[sp,#0x48]
002d4c  f7fffffe          BL       f_putc
002d50  4682              MOV      r10,r0
002d52  4406              ADD      r6,r6,r0
                  |L1.11604|
002d54  4648              MOV      r0,r9
002d56  f1090901          ADD      r9,r9,#1
002d5a  4558              CMP      r0,r11
002d5c  d3f4              BCC      |L1.11592|
;;;3937   			if (cc != EOF) cc = res;
002d5e  f10a0001          ADD      r0,r10,#1
002d62  b100              CBZ      r0,|L1.11622|
002d64  46b2              MOV      r10,r6
                  |L1.11622|
;;;3938   			continue;
002d66  e0a4              B        |L1.11954|
                  |L1.11624|
;;;3939   		case 'C' :					/* Character */
;;;3940   			cc = f_putc((TCHAR)va_arg(arp, int), fil); continue;
002d68  9908              LDR      r1,[sp,#0x20]
002d6a  f8112b04          LDRB     r2,[r1],#4
002d6e  b2d0              UXTB     r0,r2
002d70  9108              STR      r1,[sp,#0x20]
002d72  9912              LDR      r1,[sp,#0x48]
002d74  f7fffffe          BL       f_putc
002d78  4682              MOV      r10,r0
002d7a  e09a              B        |L1.11954|
                  |L1.11644|
;;;3941   		case 'B' :					/* Binary */
;;;3942   			r = 2; break;
002d7c  2002              MOVS     r0,#2
002d7e  9007              STR      r0,[sp,#0x1c]
002d80  e00f              B        |L1.11682|
                  |L1.11650|
;;;3943   		case 'O' :					/* Octal */
;;;3944   			r = 8; break;
002d82  2008              MOVS     r0,#8
002d84  9007              STR      r0,[sp,#0x1c]
002d86  e00c              B        |L1.11682|
                  |L1.11656|
;;;3945   		case 'D' :					/* Signed decimal */
;;;3946   		case 'U' :					/* Unsigned decimal */
002d88  bf00              NOP      
                  |L1.11658|
;;;3947   			r = 10; break;
002d8a  200a              MOVS     r0,#0xa
002d8c  9007              STR      r0,[sp,#0x1c]
002d8e  e008              B        |L1.11682|
                  |L1.11664|
;;;3948   		case 'X' :					/* Hexdecimal */
;;;3949   			r = 16; break;
002d90  2010              MOVS     r0,#0x10
002d92  9007              STR      r0,[sp,#0x1c]
002d94  e005              B        |L1.11682|
                  |L1.11670|
;;;3950   		default:					/* Unknown type (passthrough) */
;;;3951   			cc = f_putc(c, fil); continue;
002d96  4620              MOV      r0,r4
002d98  9912              LDR      r1,[sp,#0x48]
002d9a  f7fffffe          BL       f_putc
002d9e  4682              MOV      r10,r0
002da0  e087              B        |L1.11954|
                  |L1.11682|
002da2  bf00              NOP                            ;3942
;;;3952   		}
;;;3953   
;;;3954   		/* Get an argument and put it in numeral */
;;;3955   		v = (f & 4) ? va_arg(arp, long) : ((d == 'D') ? (long)va_arg(arp, int) : va_arg(arp, unsigned int));
002da4  f0070004          AND      r0,r7,#4
002da8  b128              CBZ      r0,|L1.11702|
002daa  9808              LDR      r0,[sp,#0x20]
002dac  6800              LDR      r0,[r0,#0]
002dae  9908              LDR      r1,[sp,#0x20]
002db0  1d09              ADDS     r1,r1,#4
002db2  9108              STR      r1,[sp,#0x20]
002db4  e00c              B        |L1.11728|
                  |L1.11702|
002db6  2d44              CMP      r5,#0x44
002db8  d105              BNE      |L1.11718|
002dba  9808              LDR      r0,[sp,#0x20]
002dbc  6800              LDR      r0,[r0,#0]
002dbe  9908              LDR      r1,[sp,#0x20]
002dc0  1d09              ADDS     r1,r1,#4
002dc2  9108              STR      r1,[sp,#0x20]
002dc4  e004              B        |L1.11728|
                  |L1.11718|
002dc6  9808              LDR      r0,[sp,#0x20]
002dc8  6800              LDR      r0,[r0,#0]
002dca  9908              LDR      r1,[sp,#0x20]
002dcc  1d09              ADDS     r1,r1,#4
002dce  9108              STR      r1,[sp,#0x20]
                  |L1.11728|
002dd0  9006              STR      r0,[sp,#0x18]
;;;3956   		if (d == 'D' && (v & 0x80000000)) {
002dd2  2d44              CMP      r5,#0x44
002dd4  d108              BNE      |L1.11752|
002dd6  9806              LDR      r0,[sp,#0x18]
002dd8  f0004000          AND      r0,r0,#0x80000000
002ddc  b120              CBZ      r0,|L1.11752|
;;;3957   			v = 0 - v;
002dde  9806              LDR      r0,[sp,#0x18]
002de0  4240              RSBS     r0,r0,#0
002de2  9006              STR      r0,[sp,#0x18]
;;;3958   			f |= 8;
002de4  f0470708          ORR      r7,r7,#8
                  |L1.11752|
;;;3959   		}
;;;3960   		i = 0;
002de8  f04f0800          MOV      r8,#0
;;;3961   		do {
002dec  bf00              NOP      
                  |L1.11758|
;;;3962   			d = (TCHAR)(v % r); v /= r;
002dee  e9dd0106          LDRD     r0,r1,[sp,#0x18]
002df2  fbb0f2f1          UDIV     r2,r0,r1
002df6  fb010012          MLS      r0,r1,r2,r0
002dfa  b2c5              UXTB     r5,r0
002dfc  e9dd0106          LDRD     r0,r1,[sp,#0x18]
002e00  fbb0f0f1          UDIV     r0,r0,r1
002e04  9006              STR      r0,[sp,#0x18]
;;;3963   			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
002e06  2d09              CMP      r5,#9
002e08  dd06              BLE      |L1.11800|
002e0a  2c78              CMP      r4,#0x78
002e0c  d101              BNE      |L1.11794|
002e0e  2027              MOVS     r0,#0x27
002e10  e000              B        |L1.11796|
                  |L1.11794|
002e12  2007              MOVS     r0,#7
                  |L1.11796|
002e14  4428              ADD      r0,r0,r5
002e16  b2c5              UXTB     r5,r0
                  |L1.11800|
;;;3964   			s[i++] = d + '0';
002e18  f1050030          ADD      r0,r5,#0x30
002e1c  b2c2              UXTB     r2,r0
002e1e  4640              MOV      r0,r8
002e20  f1080801          ADD      r8,r8,#1
002e24  a902              ADD      r1,sp,#8
002e26  540a              STRB     r2,[r1,r0]
;;;3965   		} while (v && i < sizeof(s) / sizeof(s[0]));
002e28  9806              LDR      r0,[sp,#0x18]
002e2a  b110              CBZ      r0,|L1.11826|
002e2c  f1b80f10          CMP      r8,#0x10
002e30  d3dd              BCC      |L1.11758|
                  |L1.11826|
;;;3966   		if (f & 8) s[i++] = '-';
002e32  f0070008          AND      r0,r7,#8
002e36  b128              CBZ      r0,|L1.11844|
002e38  222d              MOVS     r2,#0x2d
002e3a  4640              MOV      r0,r8
002e3c  f1080801          ADD      r8,r8,#1
002e40  a902              ADD      r1,sp,#8
002e42  540a              STRB     r2,[r1,r0]
                  |L1.11844|
;;;3967   		j = i; d = (f & 1) ? '0' : ' ';
002e44  46c1              MOV      r9,r8
002e46  f0070001          AND      r0,r7,#1
002e4a  b108              CBZ      r0,|L1.11856|
002e4c  2030              MOVS     r0,#0x30
002e4e  e000              B        |L1.11858|
                  |L1.11856|
002e50  2020              MOVS     r0,#0x20
                  |L1.11858|
002e52  4605              MOV      r5,r0
;;;3968   		res = 0;
002e54  2600              MOVS     r6,#0
;;;3969   		while (!(f & 2) && j++ < w) res += (cc = f_putc(d, fil));
002e56  e005              B        |L1.11876|
                  |L1.11864|
002e58  4628              MOV      r0,r5
002e5a  9912              LDR      r1,[sp,#0x48]
002e5c  f7fffffe          BL       f_putc
002e60  4682              MOV      r10,r0
002e62  4406              ADD      r6,r6,r0
                  |L1.11876|
002e64  f0070002          AND      r0,r7,#2
002e68  b920              CBNZ     r0,|L1.11892|
002e6a  4648              MOV      r0,r9
002e6c  f1090901          ADD      r9,r9,#1
002e70  4558              CMP      r0,r11
002e72  d3f1              BCC      |L1.11864|
                  |L1.11892|
;;;3970   		do res += (cc = f_putc(s[--i], fil)); while(i);
002e74  bf00              NOP      
                  |L1.11894|
002e76  f1a80101          SUB      r1,r8,#1
002e7a  4688              MOV      r8,r1
002e7c  aa02              ADD      r2,sp,#8
002e7e  5c50              LDRB     r0,[r2,r1]
002e80  9912              LDR      r1,[sp,#0x48]
002e82  f7fffffe          BL       f_putc
002e86  4682              MOV      r10,r0
002e88  4406              ADD      r6,r6,r0
002e8a  f1b80f00          CMP      r8,#0
002e8e  d1f2              BNE      |L1.11894|
;;;3971   		while (j++ < w) res += (cc = f_putc(' ', fil));
002e90  e005              B        |L1.11934|
                  |L1.11922|
002e92  2020              MOVS     r0,#0x20
002e94  9912              LDR      r1,[sp,#0x48]
002e96  f7fffffe          BL       f_putc
002e9a  4682              MOV      r10,r0
002e9c  4406              ADD      r6,r6,r0
                  |L1.11934|
002e9e  4648              MOV      r0,r9
002ea0  f1090901          ADD      r9,r9,#1
002ea4  4558              CMP      r0,r11
002ea6  d3f4              BCC      |L1.11922|
;;;3972   		if (cc != EOF) cc = res;
002ea8  f10a0001          ADD      r0,r10,#1
002eac  b100              CBZ      r0,|L1.11952|
002eae  46b2              MOV      r10,r6
                  |L1.11952|
002eb0  bf00              NOP                            ;3908
                  |L1.11954|
002eb2  4456              ADD      r6,r6,r10             ;3902
                  |L1.11956|
002eb4  f10a0001          ADD      r0,r10,#1             ;3902
002eb8  2800              CMP      r0,#0                 ;3902
002eba  f47faec1          BNE      |L1.11328|
                  |L1.11966|
002ebe  bf00              NOP                            ;3904
;;;3973   	}
;;;3974   
;;;3975   	va_end(arp);
002ec0  2000              MOVS     r0,#0
002ec2  9008              STR      r0,[sp,#0x20]
;;;3976   	return (cc == EOF) ? cc : res;
002ec4  f10a0001          ADD      r0,r10,#1
002ec8  b928              CBNZ     r0,|L1.11990|
002eca  4650              MOV      r0,r10
                  |L1.11980|
;;;3977   }
002ecc  b009              ADD      sp,sp,#0x24
002ece  e8bd0ff0          POP      {r4-r11}
002ed2  f85dfb14          LDR      pc,[sp],#0x14
                  |L1.11990|
002ed6  4630              MOV      r0,r6                 ;3976
002ed8  e7f8              B        |L1.11980|
;;;3978   
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  LfnBuf
                          %        512

                          AREA ||.constdata||, DATA, READONLY, ALIGN=1

                  LfnOfs
000000  01030507          DCB      0x01,0x03,0x05,0x07
000004  090e1012          DCB      0x09,0x0e,0x10,0x12
000008  1416181c          DCB      0x14,0x16,0x18,0x1c
00000c  1e00              DCB      0x1e,0x00
                  vst
00000e  0400              DCW      0x0400
000010  02000100          DCW      0x0200,0x0100
000014  00800040          DCW      0x0080,0x0040
000018  00200010          DCW      0x0020,0x0010
00001c  00080004          DCW      0x0008,0x0004
000020  00020000          DCW      0x0002,0x0000
                  ||cst||
000024  80004000          DCW      0x8000,0x4000
000028  20001000          DCW      0x2000,0x1000
00002c  08004000          DCW      0x0800,0x4000
000030  20001000          DCW      0x2000,0x1000
000034  08000400          DCW      0x0800,0x0400
000038  0200              DCW      0x0200

                          AREA ||.data||, DATA, ALIGN=2

                  FatFs
                          DCD      0x00000000
                  Fsid
000004  0000              DCB      0x00,0x00
