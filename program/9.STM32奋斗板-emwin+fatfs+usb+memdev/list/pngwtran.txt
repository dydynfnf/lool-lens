; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\pngwtran.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\pngwtran.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\FWlib\inc -I.\user -I.\CM3 -I.\MALLOC -I.\TFT -I.\EMWIN\EMWIN_INC -I.\EMWIN\DEMO -I.\PNG -I.\FATFS -I.\SDIO -I.\USB\inc -I.\USBCFG\inc -IE:\material\GUI\9.STM32·Ü¶·°å-emwin+fatfs+usb+memdev\RTE -Id:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.1.0\Device\Include -Id:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=515 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\pngwtran.crf PNG\pngwtran.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=1

                  png_do_write_invert_alpha PROC
;;;424    void /* PRIVATE */
;;;425    png_do_write_invert_alpha(png_row_infop row_info, png_bytep row)
000000  b5f0              PUSH     {r4-r7,lr}
;;;426    {
000002  460b              MOV      r3,r1
;;;427       png_debug(1, "in png_do_write_invert_alpha\n");
;;;428    #if defined(PNG_USELESS_TESTS_SUPPORTED)
;;;429       if (row != NULL && row_info != NULL)
;;;430    #endif
;;;431       {
;;;432          if (row_info->color_type == PNG_COLOR_TYPE_RGB_ALPHA)
000004  7a01              LDRB     r1,[r0,#8]
000006  2906              CMP      r1,#6
000008  d12a              BNE      |L1.96|
;;;433          {
;;;434             /* This inverts the alpha channel in RGBA */
;;;435             if (row_info->bit_depth == 8)
00000a  7a41              LDRB     r1,[r0,#9]
00000c  2908              CMP      r1,#8
00000e  d110              BNE      |L1.50|
;;;436             {
;;;437                png_bytep sp, dp;
;;;438                png_uint_32 i;
;;;439                png_uint_32 row_width = row_info->width;
000010  6805              LDR      r5,[r0,#0]
;;;440                for (i = 0, sp = dp = row; i < row_width; i++)
000012  2400              MOVS     r4,#0
000014  461a              MOV      r2,r3
000016  4619              MOV      r1,r3
000018  e008              B        |L1.44|
                  |L1.26|
;;;441                {
;;;442                   /* does nothing
;;;443                   *(dp++) = *(sp++);
;;;444                   *(dp++) = *(sp++);
;;;445                   *(dp++) = *(sp++);
;;;446                   */
;;;447                   sp+=3; dp = sp;
00001a  1cc9              ADDS     r1,r1,#3
00001c  460a              MOV      r2,r1
;;;448                   *(dp++) = (png_byte)(255 - *(sp++));
00001e  f8117b01          LDRB     r7,[r1],#1
000022  f1c706ff          RSB      r6,r7,#0xff
000026  f8026b01          STRB     r6,[r2],#1
00002a  1c64              ADDS     r4,r4,#1              ;440
                  |L1.44|
00002c  42ac              CMP      r4,r5                 ;440
00002e  d3f4              BCC      |L1.26|
;;;449                }
;;;450             }
000030  e046              B        |L1.192|
                  |L1.50|
;;;451             /* This inverts the alpha channel in RRGGBBAA */
;;;452             else
;;;453             {
;;;454                png_bytep sp, dp;
;;;455                png_uint_32 i;
;;;456                png_uint_32 row_width = row_info->width;
000032  6805              LDR      r5,[r0,#0]
;;;457    
;;;458                for (i = 0, sp = dp = row; i < row_width; i++)
000034  2400              MOVS     r4,#0
000036  461a              MOV      r2,r3
000038  4619              MOV      r1,r3
00003a  e00e              B        |L1.90|
                  |L1.60|
;;;459                {
;;;460                   /* does nothing
;;;461                   *(dp++) = *(sp++);
;;;462                   *(dp++) = *(sp++);
;;;463                   *(dp++) = *(sp++);
;;;464                   *(dp++) = *(sp++);
;;;465                   *(dp++) = *(sp++);
;;;466                   *(dp++) = *(sp++);
;;;467                   */
;;;468                   sp+=6; dp = sp;
00003c  1d89              ADDS     r1,r1,#6
00003e  460a              MOV      r2,r1
;;;469                   *(dp++) = (png_byte)(255 - *(sp++));
000040  f8117b01          LDRB     r7,[r1],#1
000044  f1c706ff          RSB      r6,r7,#0xff
000048  f8026b01          STRB     r6,[r2],#1
;;;470                   *(dp++) = (png_byte)(255 - *(sp++));
00004c  f8117b01          LDRB     r7,[r1],#1
000050  f1c706ff          RSB      r6,r7,#0xff
000054  f8026b01          STRB     r6,[r2],#1
000058  1c64              ADDS     r4,r4,#1              ;458
                  |L1.90|
00005a  42ac              CMP      r4,r5                 ;458
00005c  d3ee              BCC      |L1.60|
;;;471                }
;;;472             }
00005e  e02f              B        |L1.192|
                  |L1.96|
;;;473          }
;;;474          else if (row_info->color_type == PNG_COLOR_TYPE_GRAY_ALPHA)
000060  7a01              LDRB     r1,[r0,#8]
000062  2904              CMP      r1,#4
000064  d12c              BNE      |L1.192|
;;;475          {
;;;476             /* This inverts the alpha channel in GA */
;;;477             if (row_info->bit_depth == 8)
000066  7a41              LDRB     r1,[r0,#9]
000068  2908              CMP      r1,#8
00006a  d112              BNE      |L1.146|
;;;478             {
;;;479                png_bytep sp, dp;
;;;480                png_uint_32 i;
;;;481                png_uint_32 row_width = row_info->width;
00006c  6805              LDR      r5,[r0,#0]
;;;482    
;;;483                for (i = 0, sp = dp = row; i < row_width; i++)
00006e  2400              MOVS     r4,#0
000070  461a              MOV      r2,r3
000072  4619              MOV      r1,r3
000074  e00a              B        |L1.140|
                  |L1.118|
;;;484                {
;;;485                   *(dp++) = *(sp++);
000076  f8116b01          LDRB     r6,[r1],#1
00007a  f8026b01          STRB     r6,[r2],#1
;;;486                   *(dp++) = (png_byte)(255 - *(sp++));
00007e  f8117b01          LDRB     r7,[r1],#1
000082  f1c706ff          RSB      r6,r7,#0xff
000086  f8026b01          STRB     r6,[r2],#1
00008a  1c64              ADDS     r4,r4,#1              ;483
                  |L1.140|
00008c  42ac              CMP      r4,r5                 ;483
00008e  d3f2              BCC      |L1.118|
;;;487                }
;;;488             }
000090  e016              B        |L1.192|
                  |L1.146|
;;;489             /* This inverts the alpha channel in GGAA */
;;;490             else
;;;491             {
;;;492                png_bytep sp, dp;
;;;493                png_uint_32 i;
;;;494                png_uint_32 row_width = row_info->width;
000092  6805              LDR      r5,[r0,#0]
;;;495    
;;;496                for (i = 0, sp = dp = row; i < row_width; i++)
000094  2400              MOVS     r4,#0
000096  461a              MOV      r2,r3
000098  4619              MOV      r1,r3
00009a  e00e              B        |L1.186|
                  |L1.156|
;;;497                {
;;;498                   /* does nothing
;;;499                   *(dp++) = *(sp++);
;;;500                   *(dp++) = *(sp++);
;;;501                   */
;;;502                   sp+=2; dp = sp;
00009c  1c89              ADDS     r1,r1,#2
00009e  460a              MOV      r2,r1
;;;503                   *(dp++) = (png_byte)(255 - *(sp++));
0000a0  f8117b01          LDRB     r7,[r1],#1
0000a4  f1c706ff          RSB      r6,r7,#0xff
0000a8  f8026b01          STRB     r6,[r2],#1
;;;504                   *(dp++) = (png_byte)(255 - *(sp++));
0000ac  f8117b01          LDRB     r7,[r1],#1
0000b0  f1c706ff          RSB      r6,r7,#0xff
0000b4  f8026b01          STRB     r6,[r2],#1
0000b8  1c64              ADDS     r4,r4,#1              ;496
                  |L1.186|
0000ba  42ac              CMP      r4,r5                 ;496
0000bc  d3ee              BCC      |L1.156|
;;;505                }
;;;506             }
0000be  bf00              NOP      
                  |L1.192|
;;;507          }
;;;508       }
;;;509    }
0000c0  bdf0              POP      {r4-r7,pc}
;;;510    #endif
                          ENDP

                  png_do_write_swap_alpha PROC
;;;336    void /* PRIVATE */
;;;337    png_do_write_swap_alpha(png_row_infop row_info, png_bytep row)
0000c2  b5f8              PUSH     {r3-r7,lr}
;;;338    {
0000c4  4602              MOV      r2,r0
0000c6  460b              MOV      r3,r1
;;;339       png_debug(1, "in png_do_write_swap_alpha\n");
;;;340    #if defined(PNG_USELESS_TESTS_SUPPORTED)
;;;341       if (row != NULL && row_info != NULL)
;;;342    #endif
;;;343       {
;;;344          if (row_info->color_type == PNG_COLOR_TYPE_RGB_ALPHA)
0000c8  7a10              LDRB     r0,[r2,#8]
0000ca  2806              CMP      r0,#6
0000cc  d14c              BNE      |L1.360|
;;;345          {
;;;346             /* This converts from ARGB to RGBA */
;;;347             if (row_info->bit_depth == 8)
0000ce  7a50              LDRB     r0,[r2,#9]
0000d0  2808              CMP      r0,#8
0000d2  d118              BNE      |L1.262|
;;;348             {
;;;349                png_bytep sp, dp;
;;;350                png_uint_32 i;
;;;351                png_uint_32 row_width = row_info->width;
0000d4  6815              LDR      r5,[r2,#0]
;;;352                for (i = 0, sp = dp = row; i < row_width; i++)
0000d6  2400              MOVS     r4,#0
0000d8  4619              MOV      r1,r3
0000da  4618              MOV      r0,r3
0000dc  e010              B        |L1.256|
                  |L1.222|
;;;353                {
;;;354                   png_byte save = *(sp++);
0000de  f8106b01          LDRB     r6,[r0],#1
;;;355                   *(dp++) = *(sp++);
0000e2  f8107b01          LDRB     r7,[r0],#1
0000e6  f8017b01          STRB     r7,[r1],#1
;;;356                   *(dp++) = *(sp++);
0000ea  f8107b01          LDRB     r7,[r0],#1
0000ee  f8017b01          STRB     r7,[r1],#1
;;;357                   *(dp++) = *(sp++);
0000f2  f8107b01          LDRB     r7,[r0],#1
0000f6  f8017b01          STRB     r7,[r1],#1
;;;358                   *(dp++) = save;
0000fa  f8016b01          STRB     r6,[r1],#1
0000fe  1c64              ADDS     r4,r4,#1              ;352
                  |L1.256|
000100  42ac              CMP      r4,r5                 ;352
000102  d3ec              BCC      |L1.222|
;;;359                }
;;;360             }
000104  e068              B        |L1.472|
                  |L1.262|
;;;361             /* This converts from AARRGGBB to RRGGBBAA */
;;;362             else
;;;363             {
;;;364                png_bytep sp, dp;
;;;365                png_uint_32 i;
;;;366                png_uint_32 row_width = row_info->width;
000106  6815              LDR      r5,[r2,#0]
;;;367    
;;;368                for (i = 0, sp = dp = row; i < row_width; i++)
000108  2400              MOVS     r4,#0
00010a  4619              MOV      r1,r3
00010c  4618              MOV      r0,r3
00010e  e028              B        |L1.354|
                  |L1.272|
;;;369                {
;;;370                   png_byte save[2];
;;;371                   save[0] = *(sp++);
000110  f8106b01          LDRB     r6,[r0],#1
000114  f88d6000          STRB     r6,[sp,#0]
;;;372                   save[1] = *(sp++);
000118  f8106b01          LDRB     r6,[r0],#1
00011c  f88d6001          STRB     r6,[sp,#1]
;;;373                   *(dp++) = *(sp++);
000120  f8106b01          LDRB     r6,[r0],#1
000124  f8016b01          STRB     r6,[r1],#1
;;;374                   *(dp++) = *(sp++);
000128  f8106b01          LDRB     r6,[r0],#1
00012c  f8016b01          STRB     r6,[r1],#1
;;;375                   *(dp++) = *(sp++);
000130  f8106b01          LDRB     r6,[r0],#1
000134  f8016b01          STRB     r6,[r1],#1
;;;376                   *(dp++) = *(sp++);
000138  f8106b01          LDRB     r6,[r0],#1
00013c  f8016b01          STRB     r6,[r1],#1
;;;377                   *(dp++) = *(sp++);
000140  f8106b01          LDRB     r6,[r0],#1
000144  f8016b01          STRB     r6,[r1],#1
;;;378                   *(dp++) = *(sp++);
000148  f8106b01          LDRB     r6,[r0],#1
00014c  f8016b01          STRB     r6,[r1],#1
;;;379                   *(dp++) = save[0];
000150  f89d6000          LDRB     r6,[sp,#0]
000154  f8016b01          STRB     r6,[r1],#1
;;;380                   *(dp++) = save[1];
000158  f89d6001          LDRB     r6,[sp,#1]
00015c  f8016b01          STRB     r6,[r1],#1
000160  1c64              ADDS     r4,r4,#1              ;368
                  |L1.354|
000162  42ac              CMP      r4,r5                 ;368
000164  d3d4              BCC      |L1.272|
;;;381                }
;;;382             }
000166  e037              B        |L1.472|
                  |L1.360|
;;;383          }
;;;384          else if (row_info->color_type == PNG_COLOR_TYPE_GRAY_ALPHA)
000168  7a10              LDRB     r0,[r2,#8]
00016a  2804              CMP      r0,#4
00016c  d134              BNE      |L1.472|
;;;385          {
;;;386             /* This converts from AG to GA */
;;;387             if (row_info->bit_depth == 8)
00016e  7a50              LDRB     r0,[r2,#9]
000170  2808              CMP      r0,#8
000172  d110              BNE      |L1.406|
;;;388             {
;;;389                png_bytep sp, dp;
;;;390                png_uint_32 i;
;;;391                png_uint_32 row_width = row_info->width;
000174  6815              LDR      r5,[r2,#0]
;;;392    
;;;393                for (i = 0, sp = dp = row; i < row_width; i++)
000176  2400              MOVS     r4,#0
000178  4619              MOV      r1,r3
00017a  4618              MOV      r0,r3
00017c  e008              B        |L1.400|
                  |L1.382|
;;;394                {
;;;395                   png_byte save = *(sp++);
00017e  f8106b01          LDRB     r6,[r0],#1
;;;396                   *(dp++) = *(sp++);
000182  f8107b01          LDRB     r7,[r0],#1
000186  f8017b01          STRB     r7,[r1],#1
;;;397                   *(dp++) = save;
00018a  f8016b01          STRB     r6,[r1],#1
00018e  1c64              ADDS     r4,r4,#1              ;393
                  |L1.400|
000190  42ac              CMP      r4,r5                 ;393
000192  d3f4              BCC      |L1.382|
;;;398                }
;;;399             }
000194  e020              B        |L1.472|
                  |L1.406|
;;;400             /* This converts from AAGG to GGAA */
;;;401             else
;;;402             {
;;;403                png_bytep sp, dp;
;;;404                png_uint_32 i;
;;;405                png_uint_32 row_width = row_info->width;
000196  6815              LDR      r5,[r2,#0]
;;;406    
;;;407                for (i = 0, sp = dp = row; i < row_width; i++)
000198  2400              MOVS     r4,#0
00019a  4619              MOV      r1,r3
00019c  4618              MOV      r0,r3
00019e  e018              B        |L1.466|
                  |L1.416|
;;;408                {
;;;409                   png_byte save[2];
;;;410                   save[0] = *(sp++);
0001a0  f8106b01          LDRB     r6,[r0],#1
0001a4  f88d6000          STRB     r6,[sp,#0]
;;;411                   save[1] = *(sp++);
0001a8  f8106b01          LDRB     r6,[r0],#1
0001ac  f88d6001          STRB     r6,[sp,#1]
;;;412                   *(dp++) = *(sp++);
0001b0  f8106b01          LDRB     r6,[r0],#1
0001b4  f8016b01          STRB     r6,[r1],#1
;;;413                   *(dp++) = *(sp++);
0001b8  f8106b01          LDRB     r6,[r0],#1
0001bc  f8016b01          STRB     r6,[r1],#1
;;;414                   *(dp++) = save[0];
0001c0  f89d6000          LDRB     r6,[sp,#0]
0001c4  f8016b01          STRB     r6,[r1],#1
;;;415                   *(dp++) = save[1];
0001c8  f89d6001          LDRB     r6,[sp,#1]
0001cc  f8016b01          STRB     r6,[r1],#1
0001d0  1c64              ADDS     r4,r4,#1              ;407
                  |L1.466|
0001d2  42ac              CMP      r4,r5                 ;407
0001d4  d3e4              BCC      |L1.416|
;;;416                }
;;;417             }
0001d6  bf00              NOP      
                  |L1.472|
;;;418          }
;;;419       }
;;;420    }
0001d8  bdf8              POP      {r3-r7,pc}
;;;421    #endif
                          ENDP

                  png_do_shift PROC
;;;212    void /* PRIVATE */
;;;213    png_do_shift(png_row_infop row_info, png_bytep row, png_color_8p bit_depth)
0001da  e92d4ff0          PUSH     {r4-r11,lr}
;;;214    {
0001de  b088              SUB      sp,sp,#0x20
0001e0  4603              MOV      r3,r0
0001e2  460d              MOV      r5,r1
;;;215       png_debug(1, "in png_do_shift\n");
;;;216    #if defined(PNG_USELESS_TESTS_SUPPORTED)
;;;217       if (row != NULL && row_info != NULL &&
;;;218    #else
;;;219       if (
0001e4  7a18              LDRB     r0,[r3,#8]
0001e6  2803              CMP      r0,#3
0001e8  d07e              BEQ      |L1.744|
;;;220    #endif
;;;221          row_info->color_type != PNG_COLOR_TYPE_PALETTE)
;;;222       {
;;;223          int shift_start[4], shift_dec[4];
;;;224          int channels = 0;
0001ea  2000              MOVS     r0,#0
;;;225    
;;;226          if (row_info->color_type & PNG_COLOR_MASK_COLOR)
0001ec  7a19              LDRB     r1,[r3,#8]
0001ee  f0010102          AND      r1,r1,#2
0001f2  b1f1              CBZ      r1,|L1.562|
;;;227          {
;;;228             shift_start[channels] = row_info->bit_depth - bit_depth->red;
0001f4  7a59              LDRB     r1,[r3,#9]
0001f6  7814              LDRB     r4,[r2,#0]
0001f8  1b09              SUBS     r1,r1,r4
0001fa  ac04              ADD      r4,sp,#0x10
0001fc  f8441020          STR      r1,[r4,r0,LSL #2]
;;;229             shift_dec[channels] = bit_depth->red;
000200  7811              LDRB     r1,[r2,#0]
000202  f84d1020          STR      r1,[sp,r0,LSL #2]
;;;230             channels++;
000206  1c40              ADDS     r0,r0,#1
;;;231             shift_start[channels] = row_info->bit_depth - bit_depth->green;
000208  7a59              LDRB     r1,[r3,#9]
00020a  7854              LDRB     r4,[r2,#1]
00020c  1b09              SUBS     r1,r1,r4
00020e  ac04              ADD      r4,sp,#0x10
000210  f8441020          STR      r1,[r4,r0,LSL #2]
;;;232             shift_dec[channels] = bit_depth->green;
000214  7851              LDRB     r1,[r2,#1]
000216  f84d1020          STR      r1,[sp,r0,LSL #2]
;;;233             channels++;
00021a  1c40              ADDS     r0,r0,#1
;;;234             shift_start[channels] = row_info->bit_depth - bit_depth->blue;
00021c  7a59              LDRB     r1,[r3,#9]
00021e  7894              LDRB     r4,[r2,#2]
000220  1b09              SUBS     r1,r1,r4
000222  ac04              ADD      r4,sp,#0x10
000224  f8441020          STR      r1,[r4,r0,LSL #2]
;;;235             shift_dec[channels] = bit_depth->blue;
000228  7891              LDRB     r1,[r2,#2]
00022a  f84d1020          STR      r1,[sp,r0,LSL #2]
;;;236             channels++;
00022e  1c40              ADDS     r0,r0,#1
000230  e009              B        |L1.582|
                  |L1.562|
;;;237          }
;;;238          else
;;;239          {
;;;240             shift_start[channels] = row_info->bit_depth - bit_depth->gray;
000232  7a59              LDRB     r1,[r3,#9]
000234  78d4              LDRB     r4,[r2,#3]
000236  1b09              SUBS     r1,r1,r4
000238  ac04              ADD      r4,sp,#0x10
00023a  f8441020          STR      r1,[r4,r0,LSL #2]
;;;241             shift_dec[channels] = bit_depth->gray;
00023e  78d1              LDRB     r1,[r2,#3]
000240  f84d1020          STR      r1,[sp,r0,LSL #2]
;;;242             channels++;
000244  1c40              ADDS     r0,r0,#1
                  |L1.582|
;;;243          }
;;;244          if (row_info->color_type & PNG_COLOR_MASK_ALPHA)
000246  7a19              LDRB     r1,[r3,#8]
000248  f0010104          AND      r1,r1,#4
00024c  b149              CBZ      r1,|L1.610|
;;;245          {
;;;246             shift_start[channels] = row_info->bit_depth - bit_depth->alpha;
00024e  7a59              LDRB     r1,[r3,#9]
000250  7914              LDRB     r4,[r2,#4]
000252  1b09              SUBS     r1,r1,r4
000254  ac04              ADD      r4,sp,#0x10
000256  f8441020          STR      r1,[r4,r0,LSL #2]
;;;247             shift_dec[channels] = bit_depth->alpha;
00025a  7911              LDRB     r1,[r2,#4]
00025c  f84d1020          STR      r1,[sp,r0,LSL #2]
;;;248             channels++;
000260  1c40              ADDS     r0,r0,#1
                  |L1.610|
;;;249          }
;;;250    
;;;251          /* with low row depths, could only be grayscale, so one channel */
;;;252          if (row_info->bit_depth < 8)
000262  7a59              LDRB     r1,[r3,#9]
000264  2908              CMP      r1,#8
000266  da47              BGE      |L1.760|
;;;253          {
;;;254             png_bytep bp = row;
000268  4629              MOV      r1,r5
;;;255             png_uint_32 i;
;;;256             png_byte mask;
;;;257             png_uint_32 row_bytes = row_info->rowbytes;
00026a  f8d38004          LDR      r8,[r3,#4]
;;;258    
;;;259             if (bit_depth->gray == 1 && row_info->bit_depth == 2)
00026e  78d4              LDRB     r4,[r2,#3]
000270  2c01              CMP      r4,#1
000272  d104              BNE      |L1.638|
000274  7a5c              LDRB     r4,[r3,#9]
000276  2c02              CMP      r4,#2
000278  d101              BNE      |L1.638|
;;;260                mask = 0x55;
00027a  2655              MOVS     r6,#0x55
00027c  e008              B        |L1.656|
                  |L1.638|
;;;261             else if (row_info->bit_depth == 4 && bit_depth->gray == 3)
00027e  7a5c              LDRB     r4,[r3,#9]
000280  2c04              CMP      r4,#4
000282  d104              BNE      |L1.654|
000284  78d4              LDRB     r4,[r2,#3]
000286  2c03              CMP      r4,#3
000288  d101              BNE      |L1.654|
;;;262                mask = 0x11;
00028a  2611              MOVS     r6,#0x11
00028c  e000              B        |L1.656|
                  |L1.654|
;;;263             else
;;;264                mask = 0xff;
00028e  26ff              MOVS     r6,#0xff
                  |L1.656|
;;;265    
;;;266             for (i = 0; i < row_bytes; i++, bp++)
000290  2700              MOVS     r7,#0
000292  e02e              B        |L1.754|
                  |L1.660|
;;;267             {
;;;268                png_uint_16 v;
;;;269                int j;
;;;270    
;;;271                v = *bp;
000294  f891c000          LDRB     r12,[r1,#0]
;;;272                *bp = 0;
000298  f04f0900          MOV      r9,#0
00029c  f8819000          STRB     r9,[r1,#0]
;;;273                for (j = shift_start[0]; j > -shift_dec[0]; j -= shift_dec[0])
0002a0  9c04              LDR      r4,[sp,#0x10]
0002a2  e01c              B        |L1.734|
                  |L1.676|
;;;274                {
;;;275                   if (j > 0)
0002a4  2c00              CMP      r4,#0
0002a6  dd0a              BLE      |L1.702|
;;;276                      *bp |= (png_byte)((v << j) & 0xff);
0002a8  f8919000          LDRB     r9,[r1,#0]
0002ac  fa0cfa04          LSL      r10,r12,r4
0002b0  f00a0aff          AND      r10,r10,#0xff
0002b4  ea49090a          ORR      r9,r9,r10
0002b8  f8819000          STRB     r9,[r1,#0]
0002bc  e00b              B        |L1.726|
                  |L1.702|
;;;277                   else
;;;278                      *bp |= (png_byte)((v >> (-j)) & mask);
0002be  f891a000          LDRB     r10,[r1,#0]
0002c2  f1c40b00          RSB      r11,r4,#0
0002c6  fa4cf90b          ASR      r9,r12,r11
0002ca  ea090906          AND      r9,r9,r6
0002ce  ea4a0a09          ORR      r10,r10,r9
0002d2  f881a000          STRB     r10,[r1,#0]
                  |L1.726|
0002d6  f8dd9000          LDR      r9,[sp,#0]            ;273
0002da  eba40409          SUB      r4,r4,r9              ;273
                  |L1.734|
0002de  f8dd9000          LDR      r9,[sp,#0]            ;273
0002e2  f1c90900          RSB      r9,r9,#0              ;273
0002e6  e000              B        |L1.746|
                  |L1.744|
0002e8  e084              B        |L1.1012|
                  |L1.746|
0002ea  45a1              CMP      r9,r4                 ;273
0002ec  dbda              BLT      |L1.676|
0002ee  1c7f              ADDS     r7,r7,#1              ;266
0002f0  1c49              ADDS     r1,r1,#1              ;266
                  |L1.754|
0002f2  4547              CMP      r7,r8                 ;266
0002f4  d3ce              BCC      |L1.660|
;;;279                }
;;;280             }
;;;281          }
0002f6  e07c              B        |L1.1010|
                  |L1.760|
;;;282          else if (row_info->bit_depth == 8)
0002f8  7a59              LDRB     r1,[r3,#9]
0002fa  2908              CMP      r1,#8
0002fc  d13c              BNE      |L1.888|
;;;283          {
;;;284             png_bytep bp = row;
0002fe  4629              MOV      r1,r5
;;;285             png_uint_32 i;
;;;286             png_uint_32 istop = channels * row_info->width;
000300  681c              LDR      r4,[r3,#0]
000302  fb04f800          MUL      r8,r4,r0
;;;287    
;;;288             for (i = 0; i < istop; i++, bp++)
000306  2600              MOVS     r6,#0
000308  e033              B        |L1.882|
                  |L1.778|
;;;289             {
;;;290    
;;;291                png_uint_16 v;
;;;292                int j;
;;;293                int c = (int)(i%channels);
00030a  fbb6f9f0          UDIV     r9,r6,r0
00030e  fb006719          MLS      r7,r0,r9,r6
;;;294    
;;;295                v = *bp;
000312  f891c000          LDRB     r12,[r1,#0]
;;;296                *bp = 0;
000316  f04f0900          MOV      r9,#0
00031a  f8819000          STRB     r9,[r1,#0]
;;;297                for (j = shift_start[c]; j > -shift_dec[c]; j -= shift_dec[c])
00031e  f10d0910          ADD      r9,sp,#0x10
000322  f8594027          LDR      r4,[r9,r7,LSL #2]
000326  e01c              B        |L1.866|
                  |L1.808|
;;;298                {
;;;299                   if (j > 0)
000328  2c00              CMP      r4,#0
00032a  dd0a              BLE      |L1.834|
;;;300                      *bp |= (png_byte)((v << j) & 0xff);
00032c  f8919000          LDRB     r9,[r1,#0]
000330  fa0cfa04          LSL      r10,r12,r4
000334  f00a0aff          AND      r10,r10,#0xff
000338  ea49090a          ORR      r9,r9,r10
00033c  f8819000          STRB     r9,[r1,#0]
000340  e00b              B        |L1.858|
                  |L1.834|
;;;301                   else
;;;302                      *bp |= (png_byte)((v >> (-j)) & 0xff);
000342  f8919000          LDRB     r9,[r1,#0]
000346  f1c40a00          RSB      r10,r4,#0
00034a  fa4cfa0a          ASR      r10,r12,r10
00034e  f00a0aff          AND      r10,r10,#0xff
000352  ea49090a          ORR      r9,r9,r10
000356  f8819000          STRB     r9,[r1,#0]
                  |L1.858|
00035a  f85d9027          LDR      r9,[sp,r7,LSL #2]     ;297
00035e  eba40409          SUB      r4,r4,r9              ;297
                  |L1.866|
000362  f85d9027          LDR      r9,[sp,r7,LSL #2]     ;297
000366  f1c90900          RSB      r9,r9,#0              ;297
00036a  45a1              CMP      r9,r4                 ;297
00036c  dbdc              BLT      |L1.808|
00036e  1c76              ADDS     r6,r6,#1              ;288
000370  1c49              ADDS     r1,r1,#1              ;288
                  |L1.882|
000372  4546              CMP      r6,r8                 ;288
000374  d3c9              BCC      |L1.778|
;;;303                }
;;;304             }
;;;305          }
000376  e03c              B        |L1.1010|
                  |L1.888|
;;;306          else
;;;307          {
;;;308             png_bytep bp;
;;;309             png_uint_32 i;
;;;310             png_uint_32 istop = channels * row_info->width;
000378  681c              LDR      r4,[r3,#0]
00037a  fb04f900          MUL      r9,r4,r0
;;;311    
;;;312             for (bp = row, i = 0; i < istop; i++)
00037e  4629              MOV      r1,r5
000380  2700              MOVS     r7,#0
000382  e033              B        |L1.1004|
                  |L1.900|
;;;313             {
;;;314                int c = (int)(i%channels);
000384  fbb7faf0          UDIV     r10,r7,r0
000388  fb007c1a          MLS      r12,r0,r10,r7
;;;315                png_uint_16 value, v;
;;;316                int j;
;;;317    
;;;318                v = (png_uint_16)(((png_uint_16)(*bp) << 8) + *(bp + 1));
00038c  f891a001          LDRB     r10,[r1,#1]
000390  f891b000          LDRB     r11,[r1,#0]
000394  eb0a2a0b          ADD      r10,r10,r11,LSL #8
000398  fa1ff88a          UXTH     r8,r10
;;;319                value = 0;
00039c  2600              MOVS     r6,#0
;;;320                for (j = shift_start[c]; j > -shift_dec[c]; j -= shift_dec[c])
00039e  f10d0a10          ADD      r10,sp,#0x10
0003a2  f85a402c          LDR      r4,[r10,r12,LSL #2]
0003a6  e014              B        |L1.978|
                  |L1.936|
;;;321                {
;;;322                   if (j > 0)
0003a8  2c00              CMP      r4,#0
0003aa  dd06              BLE      |L1.954|
;;;323                      value |= (png_uint_16)((v << j) & (png_uint_16)0xffff);
0003ac  fa08fa04          LSL      r10,r8,r4
0003b0  fa1ffa8a          UXTH     r10,r10
0003b4  ea4a0606          ORR      r6,r10,r6
0003b8  e007              B        |L1.970|
                  |L1.954|
;;;324                   else
;;;325                      value |= (png_uint_16)((v >> (-j)) & (png_uint_16)0xffff);
0003ba  f1c40a00          RSB      r10,r4,#0
0003be  fa48fa0a          ASR      r10,r8,r10
0003c2  fa1ffa8a          UXTH     r10,r10
0003c6  ea4a0606          ORR      r6,r10,r6
                  |L1.970|
0003ca  f85da02c          LDR      r10,[sp,r12,LSL #2]   ;320
0003ce  eba4040a          SUB      r4,r4,r10             ;320
                  |L1.978|
0003d2  f85da02c          LDR      r10,[sp,r12,LSL #2]   ;320
0003d6  f1ca0a00          RSB      r10,r10,#0            ;320
0003da  45a2              CMP      r10,r4                ;320
0003dc  dbe4              BLT      |L1.936|
;;;326                }
;;;327                *bp++ = (png_byte)(value >> 8);
0003de  ea4f2a26          ASR      r10,r6,#8
0003e2  f801ab01          STRB     r10,[r1],#1
;;;328                *bp++ = (png_byte)(value & 0xff);
0003e6  f8016b01          STRB     r6,[r1],#1
0003ea  1c7f              ADDS     r7,r7,#1              ;312
                  |L1.1004|
0003ec  454f              CMP      r7,r9                 ;312
0003ee  d3c9              BCC      |L1.900|
;;;329             }
;;;330          }
0003f0  bf00              NOP      
                  |L1.1010|
;;;331       }
0003f2  bf00              NOP      
                  |L1.1012|
;;;332    }
0003f4  b008              ADD      sp,sp,#0x20
0003f6  e8bd8ff0          POP      {r4-r11,pc}
;;;333    #endif
                          ENDP

                  png_do_pack PROC
;;;86     void /* PRIVATE */
;;;87     png_do_pack(png_row_infop row_info, png_bytep row, png_uint_32 bit_depth)
0003fa  e92d43f0          PUSH     {r4-r9,lr}
;;;88     {
;;;89        png_debug(1, "in png_do_pack\n");
;;;90        if (row_info->bit_depth == 8 &&
0003fe  7a43              LDRB     r3,[r0,#9]
000400  2b08              CMP      r3,#8
000402  d179              BNE      |L1.1272|
;;;91     #if defined(PNG_USELESS_TESTS_SUPPORTED)
;;;92            row != NULL && row_info != NULL &&
;;;93     #endif
;;;94           row_info->channels == 1)
000404  7a83              LDRB     r3,[r0,#0xa]
000406  2b01              CMP      r3,#1
000408  d176              BNE      |L1.1272|
;;;95        {
;;;96           switch ((int)bit_depth)
00040a  2a01              CMP      r2,#1
00040c  d004              BEQ      |L1.1048|
00040e  2a02              CMP      r2,#2
000410  d020              BEQ      |L1.1108|
000412  2a04              CMP      r2,#4
000414  d15c              BNE      |L1.1232|
000416  e03c              B        |L1.1170|
                  |L1.1048|
;;;97           {
;;;98              case 1:
;;;99              {
;;;100                png_bytep sp, dp;
;;;101                int mask, v;
;;;102                png_uint_32 i;
;;;103                png_uint_32 row_width = row_info->width;
000418  f8d0c000          LDR      r12,[r0,#0]
;;;104    
;;;105                sp = row;
00041c  460c              MOV      r4,r1
;;;106                dp = row;
00041e  460d              MOV      r5,r1
;;;107                mask = 0x80;
000420  2380              MOVS     r3,#0x80
;;;108                v = 0;
000422  2600              MOVS     r6,#0
;;;109    
;;;110                for (i = 0; i < row_width; i++)
000424  2700              MOVS     r7,#0
000426  e00f              B        |L1.1096|
                  |L1.1064|
;;;111                {
;;;112                   if (*sp != 0)
000428  f8948000          LDRB     r8,[r4,#0]
00042c  f1b80f00          CMP      r8,#0
000430  d000              BEQ      |L1.1076|
;;;113                      v |= mask;
000432  431e              ORRS     r6,r6,r3
                  |L1.1076|
;;;114                   sp++;
000434  1c64              ADDS     r4,r4,#1
;;;115                   if (mask > 1)
000436  2b01              CMP      r3,#1
000438  dd01              BLE      |L1.1086|
;;;116                      mask >>= 1;
00043a  105b              ASRS     r3,r3,#1
00043c  e003              B        |L1.1094|
                  |L1.1086|
;;;117                   else
;;;118                   {
;;;119                      mask = 0x80;
00043e  2380              MOVS     r3,#0x80
;;;120                      *dp = (png_byte)v;
000440  702e              STRB     r6,[r5,#0]
;;;121                      dp++;
000442  1c6d              ADDS     r5,r5,#1
;;;122                      v = 0;
000444  2600              MOVS     r6,#0
                  |L1.1094|
000446  1c7f              ADDS     r7,r7,#1              ;110
                  |L1.1096|
000448  4567              CMP      r7,r12                ;110
00044a  d3ed              BCC      |L1.1064|
;;;123                   }
;;;124                }
;;;125                if (mask != 0x80)
00044c  2b80              CMP      r3,#0x80
00044e  d000              BEQ      |L1.1106|
;;;126                   *dp = (png_byte)v;
000450  702e              STRB     r6,[r5,#0]
                  |L1.1106|
;;;127                break;
000452  e03d              B        |L1.1232|
                  |L1.1108|
;;;128             }
;;;129             case 2:
;;;130             {
;;;131                png_bytep sp, dp;
;;;132                int shift, v;
;;;133                png_uint_32 i;
;;;134                png_uint_32 row_width = row_info->width;
000454  f8d0c000          LDR      r12,[r0,#0]
;;;135    
;;;136                sp = row;
000458  460c              MOV      r4,r1
;;;137                dp = row;
00045a  460d              MOV      r5,r1
;;;138                shift = 6;
00045c  2306              MOVS     r3,#6
;;;139                v = 0;
00045e  2600              MOVS     r6,#0
;;;140                for (i = 0; i < row_width; i++)
000460  2700              MOVS     r7,#0
000462  e010              B        |L1.1158|
                  |L1.1124|
;;;141                {
;;;142                   png_byte value;
;;;143    
;;;144                   value = (png_byte)(*sp & 0x03);
000464  f8949000          LDRB     r9,[r4,#0]
000468  f0090803          AND      r8,r9,#3
;;;145                   v |= (value << shift);
00046c  fa08f903          LSL      r9,r8,r3
000470  ea490606          ORR      r6,r9,r6
;;;146                   if (shift == 0)
000474  b923              CBNZ     r3,|L1.1152|
;;;147                   {
;;;148                      shift = 6;
000476  2306              MOVS     r3,#6
;;;149                      *dp = (png_byte)v;
000478  702e              STRB     r6,[r5,#0]
;;;150                      dp++;
00047a  1c6d              ADDS     r5,r5,#1
;;;151                      v = 0;
00047c  2600              MOVS     r6,#0
00047e  e000              B        |L1.1154|
                  |L1.1152|
;;;152                   }
;;;153                   else
;;;154                      shift -= 2;
000480  1e9b              SUBS     r3,r3,#2
                  |L1.1154|
;;;155                   sp++;
000482  1c64              ADDS     r4,r4,#1
000484  1c7f              ADDS     r7,r7,#1              ;140
                  |L1.1158|
000486  4567              CMP      r7,r12                ;140
000488  d3ec              BCC      |L1.1124|
;;;156                }
;;;157                if (shift != 6)
00048a  2b06              CMP      r3,#6
00048c  d000              BEQ      |L1.1168|
;;;158                   *dp = (png_byte)v;
00048e  702e              STRB     r6,[r5,#0]
                  |L1.1168|
;;;159                break;
000490  e01e              B        |L1.1232|
                  |L1.1170|
;;;160             }
;;;161             case 4:
;;;162             {
;;;163                png_bytep sp, dp;
;;;164                int shift, v;
;;;165                png_uint_32 i;
;;;166                png_uint_32 row_width = row_info->width;
000492  f8d0c000          LDR      r12,[r0,#0]
;;;167    
;;;168                sp = row;
000496  460c              MOV      r4,r1
;;;169                dp = row;
000498  460d              MOV      r5,r1
;;;170                shift = 4;
00049a  2304              MOVS     r3,#4
;;;171                v = 0;
00049c  2600              MOVS     r6,#0
;;;172                for (i = 0; i < row_width; i++)
00049e  2700              MOVS     r7,#0
0004a0  e010              B        |L1.1220|
                  |L1.1186|
;;;173                {
;;;174                   png_byte value;
;;;175    
;;;176                   value = (png_byte)(*sp & 0x0f);
0004a2  f8949000          LDRB     r9,[r4,#0]
0004a6  f009080f          AND      r8,r9,#0xf
;;;177                   v |= (value << shift);
0004aa  fa08f903          LSL      r9,r8,r3
0004ae  ea490606          ORR      r6,r9,r6
;;;178    
;;;179                   if (shift == 0)
0004b2  b923              CBNZ     r3,|L1.1214|
;;;180                   {
;;;181                      shift = 4;
0004b4  2304              MOVS     r3,#4
;;;182                      *dp = (png_byte)v;
0004b6  702e              STRB     r6,[r5,#0]
;;;183                      dp++;
0004b8  1c6d              ADDS     r5,r5,#1
;;;184                      v = 0;
0004ba  2600              MOVS     r6,#0
0004bc  e000              B        |L1.1216|
                  |L1.1214|
;;;185                   }
;;;186                   else
;;;187                      shift -= 4;
0004be  1f1b              SUBS     r3,r3,#4
                  |L1.1216|
;;;188    
;;;189                   sp++;
0004c0  1c64              ADDS     r4,r4,#1
0004c2  1c7f              ADDS     r7,r7,#1              ;172
                  |L1.1220|
0004c4  4567              CMP      r7,r12                ;172
0004c6  d3ec              BCC      |L1.1186|
;;;190                }
;;;191                if (shift != 4)
0004c8  2b04              CMP      r3,#4
0004ca  d000              BEQ      |L1.1230|
;;;192                   *dp = (png_byte)v;
0004cc  702e              STRB     r6,[r5,#0]
                  |L1.1230|
;;;193                break;
0004ce  bf00              NOP      
                  |L1.1232|
0004d0  bf00              NOP                            ;127
;;;194             }
;;;195          }
;;;196          row_info->bit_depth = (png_byte)bit_depth;
0004d2  7242              STRB     r2,[r0,#9]
;;;197          row_info->pixel_depth = (png_byte)(bit_depth * row_info->channels);
0004d4  7a83              LDRB     r3,[r0,#0xa]
0004d6  4353              MULS     r3,r2,r3
0004d8  72c3              STRB     r3,[r0,#0xb]
;;;198          row_info->rowbytes = PNG_ROWBYTES(row_info->pixel_depth,
0004da  7ac3              LDRB     r3,[r0,#0xb]
0004dc  2b08              CMP      r3,#8
0004de  db05              BLT      |L1.1260|
0004e0  7ac4              LDRB     r4,[r0,#0xb]
0004e2  08e4              LSRS     r4,r4,#3
0004e4  6803              LDR      r3,[r0,#0]
0004e6  4363              MULS     r3,r4,r3
0004e8  e005              B        |L1.1270|
0004ea  e005              B        |L1.1272|
                  |L1.1260|
0004ec  7ac4              LDRB     r4,[r0,#0xb]
0004ee  6803              LDR      r3,[r0,#0]
0004f0  4363              MULS     r3,r4,r3
0004f2  1ddb              ADDS     r3,r3,#7
0004f4  08db              LSRS     r3,r3,#3
                  |L1.1270|
0004f6  6043              STR      r3,[r0,#4]
                  |L1.1272|
;;;199             row_info->width);
;;;200       }
;;;201    }
0004f8  e8bd83f0          POP      {r4-r9,pc}
;;;202    #endif
                          ENDP

                  png_do_write_transformations PROC
;;;18     void /* PRIVATE */
;;;19     png_do_write_transformations(png_structp png_ptr)
0004fc  b510              PUSH     {r4,lr}
;;;20     {
0004fe  4604              MOV      r4,r0
;;;21        png_debug(1, "in png_do_write_transformations\n");
;;;22     
;;;23        if (png_ptr == NULL)
000500  b904              CBNZ     r4,|L1.1284|
                  |L1.1282|
;;;24           return;
;;;25     
;;;26     #if defined(PNG_WRITE_USER_TRANSFORM_SUPPORTED)
;;;27        if (png_ptr->transformations & PNG_USER_TRANSFORM)
;;;28           if(png_ptr->write_user_transform_fn != NULL)
;;;29             (*(png_ptr->write_user_transform_fn)) /* user write transform function */
;;;30               (png_ptr,                    /* png_ptr */
;;;31                &(png_ptr->row_info),       /* row_info:     */
;;;32                  /*  png_uint_32 width;          width of row */
;;;33                  /*  png_uint_32 rowbytes;       number of bytes in row */
;;;34                  /*  png_byte color_type;        color type of pixels */
;;;35                  /*  png_byte bit_depth;         bit depth of samples */
;;;36                  /*  png_byte channels;          number of channels (1-4) */
;;;37                  /*  png_byte pixel_depth;       bits per pixel (depth*channels) */
;;;38                png_ptr->row_buf + 1);      /* start of pixel data for row */
;;;39     #endif
;;;40     #if defined(PNG_WRITE_FILLER_SUPPORTED)
;;;41        if (png_ptr->transformations & PNG_FILLER)
;;;42           png_do_strip_filler(&(png_ptr->row_info), png_ptr->row_buf + 1,
;;;43              png_ptr->flags);
;;;44     #endif
;;;45     #if defined(PNG_WRITE_PACKSWAP_SUPPORTED)
;;;46        if (png_ptr->transformations & PNG_PACKSWAP)
;;;47           png_do_packswap(&(png_ptr->row_info), png_ptr->row_buf + 1);
;;;48     #endif
;;;49     #if defined(PNG_WRITE_PACK_SUPPORTED)
;;;50        if (png_ptr->transformations & PNG_PACK)
;;;51           png_do_pack(&(png_ptr->row_info), png_ptr->row_buf + 1,
;;;52              (png_uint_32)png_ptr->bit_depth);
;;;53     #endif
;;;54     #if defined(PNG_WRITE_SWAP_SUPPORTED)
;;;55        if (png_ptr->transformations & PNG_SWAP_BYTES)
;;;56           png_do_swap(&(png_ptr->row_info), png_ptr->row_buf + 1);
;;;57     #endif
;;;58     #if defined(PNG_WRITE_SHIFT_SUPPORTED)
;;;59        if (png_ptr->transformations & PNG_SHIFT)
;;;60           png_do_shift(&(png_ptr->row_info), png_ptr->row_buf + 1,
;;;61              &(png_ptr->shift));
;;;62     #endif
;;;63     #if defined(PNG_WRITE_SWAP_ALPHA_SUPPORTED)
;;;64        if (png_ptr->transformations & PNG_SWAP_ALPHA)
;;;65           png_do_write_swap_alpha(&(png_ptr->row_info), png_ptr->row_buf + 1);
;;;66     #endif
;;;67     #if defined(PNG_WRITE_INVERT_ALPHA_SUPPORTED)
;;;68        if (png_ptr->transformations & PNG_INVERT_ALPHA)
;;;69           png_do_write_invert_alpha(&(png_ptr->row_info), png_ptr->row_buf + 1);
;;;70     #endif
;;;71     #if defined(PNG_WRITE_BGR_SUPPORTED)
;;;72        if (png_ptr->transformations & PNG_BGR)
;;;73           png_do_bgr(&(png_ptr->row_info), png_ptr->row_buf + 1);
;;;74     #endif
;;;75     #if defined(PNG_WRITE_INVERT_SUPPORTED)
;;;76        if (png_ptr->transformations & PNG_INVERT_MONO)
;;;77           png_do_invert(&(png_ptr->row_info), png_ptr->row_buf + 1);
;;;78     #endif
;;;79     }
000502  bd10              POP      {r4,pc}
                  |L1.1284|
000504  f8d401b0          LDR      r0,[r4,#0x1b0]        ;27
000508  f4001080          AND      r0,r0,#0x100000       ;27
00050c  b158              CBZ      r0,|L1.1318|
00050e  f8d4019c          LDR      r0,[r4,#0x19c]        ;28
000512  b140              CBZ      r0,|L1.1318|
000514  f8d4022c          LDR      r0,[r4,#0x22c]        ;29
000518  1c42              ADDS     r2,r0,#1              ;29
00051a  f5047110          ADD      r1,r4,#0x240          ;29
00051e  4620              MOV      r0,r4                 ;29
000520  f8d4319c          LDR      r3,[r4,#0x19c]        ;29
000524  4798              BLX      r3                    ;29
                  |L1.1318|
000526  f8b401b0          LDRH     r0,[r4,#0x1b0]        ;41
00052a  f4004000          AND      r0,r0,#0x8000         ;41
00052e  b140              CBZ      r0,|L1.1346|
000530  f8d4022c          LDR      r0,[r4,#0x22c]        ;42
000534  1c41              ADDS     r1,r0,#1              ;42
000536  f5047010          ADD      r0,r4,#0x240          ;42
00053a  f8d421ac          LDR      r2,[r4,#0x1ac]        ;42
00053e  f7fffffe          BL       png_do_strip_filler
                  |L1.1346|
000542  f8d401b0          LDR      r0,[r4,#0x1b0]        ;46
000546  f4003080          AND      r0,r0,#0x10000        ;46
00054a  b130              CBZ      r0,|L1.1370|
00054c  f8d4022c          LDR      r0,[r4,#0x22c]        ;47
000550  1c41              ADDS     r1,r0,#1              ;47
000552  f5047010          ADD      r0,r4,#0x240          ;47
000556  f7fffffe          BL       png_do_packswap
                  |L1.1370|
00055a  f89401b0          LDRB     r0,[r4,#0x1b0]        ;50
00055e  f0000004          AND      r0,r0,#4              ;50
000562  b140              CBZ      r0,|L1.1398|
000564  f8942267          LDRB     r2,[r4,#0x267]        ;51
000568  f8d4022c          LDR      r0,[r4,#0x22c]        ;51
00056c  1c41              ADDS     r1,r0,#1              ;51
00056e  f5047010          ADD      r0,r4,#0x240          ;51
000572  f7fffffe          BL       png_do_pack
                  |L1.1398|
000576  f89401b0          LDRB     r0,[r4,#0x1b0]        ;55
00057a  f0000010          AND      r0,r0,#0x10           ;55
00057e  b130              CBZ      r0,|L1.1422|
000580  f8d4022c          LDR      r0,[r4,#0x22c]        ;56
000584  1c41              ADDS     r1,r0,#1              ;56
000586  f5047010          ADD      r0,r4,#0x240          ;56
00058a  f7fffffe          BL       png_do_swap
                  |L1.1422|
00058e  f89401b0          LDRB     r0,[r4,#0x1b0]        ;59
000592  f0000008          AND      r0,r0,#8              ;59
000596  b140              CBZ      r0,|L1.1450|
000598  f8d4022c          LDR      r0,[r4,#0x22c]        ;60
00059c  1c41              ADDS     r1,r0,#1              ;60
00059e  f20422c1          ADD      r2,r4,#0x2c1          ;60
0005a2  f5047010          ADD      r0,r4,#0x240          ;60
0005a6  f7fffffe          BL       png_do_shift
                  |L1.1450|
0005aa  f8d401b0          LDR      r0,[r4,#0x1b0]        ;64
0005ae  f4003000          AND      r0,r0,#0x20000        ;64
0005b2  b130              CBZ      r0,|L1.1474|
0005b4  f8d4022c          LDR      r0,[r4,#0x22c]        ;65
0005b8  1c41              ADDS     r1,r0,#1              ;65
0005ba  f5047010          ADD      r0,r4,#0x240          ;65
0005be  f7fffffe          BL       png_do_write_swap_alpha
                  |L1.1474|
0005c2  f8d401b0          LDR      r0,[r4,#0x1b0]        ;68
0005c6  f4002000          AND      r0,r0,#0x80000        ;68
0005ca  b130              CBZ      r0,|L1.1498|
0005cc  f8d4022c          LDR      r0,[r4,#0x22c]        ;69
0005d0  1c41              ADDS     r1,r0,#1              ;69
0005d2  f5047010          ADD      r0,r4,#0x240          ;69
0005d6  f7fffffe          BL       png_do_write_invert_alpha
                  |L1.1498|
0005da  f89401b0          LDRB     r0,[r4,#0x1b0]        ;72
0005de  f0000001          AND      r0,r0,#1              ;72
0005e2  b130              CBZ      r0,|L1.1522|
0005e4  f8d4022c          LDR      r0,[r4,#0x22c]        ;73
0005e8  1c41              ADDS     r1,r0,#1              ;73
0005ea  f5047010          ADD      r0,r4,#0x240          ;73
0005ee  f7fffffe          BL       png_do_bgr
                  |L1.1522|
0005f2  f89401b0          LDRB     r0,[r4,#0x1b0]        ;76
0005f6  f0000020          AND      r0,r0,#0x20           ;76
0005fa  b130              CBZ      r0,|L1.1546|
0005fc  f8d4022c          LDR      r0,[r4,#0x22c]        ;77
000600  1c41              ADDS     r1,r0,#1              ;77
000602  f5047010          ADD      r0,r4,#0x240          ;77
000606  f7fffffe          BL       png_do_invert
                  |L1.1546|
00060a  bf00              NOP      
00060c  e779              B        |L1.1282|
;;;80     
                          ENDP

                  png_do_write_intrapixel PROC
;;;514    void /* PRIVATE */
;;;515    png_do_write_intrapixel(png_row_infop row_info, png_bytep row)
00060e  e92d4ff0          PUSH     {r4-r11,lr}
;;;516    {
000612  4602              MOV      r2,r0
000614  460b              MOV      r3,r1
;;;517       png_debug(1, "in png_do_write_intrapixel\n");
;;;518       if (
000616  7a10              LDRB     r0,[r2,#8]
000618  f0000002          AND      r0,r0,#2
00061c  2800              CMP      r0,#0
00061e  d05b              BEQ      |L1.1752|
;;;519    #if defined(PNG_USELESS_TESTS_SUPPORTED)
;;;520           row != NULL && row_info != NULL &&
;;;521    #endif
;;;522           (row_info->color_type & PNG_COLOR_MASK_COLOR))
;;;523       {
;;;524          int bytes_per_pixel;
;;;525          png_uint_32 row_width = row_info->width;
000620  6815              LDR      r5,[r2,#0]
;;;526          if (row_info->bit_depth == 8)
000622  7a50              LDRB     r0,[r2,#9]
000624  2808              CMP      r0,#8
000626  d11b              BNE      |L1.1632|
;;;527          {
;;;528             png_bytep rp;
;;;529             png_uint_32 i;
;;;530    
;;;531             if (row_info->color_type == PNG_COLOR_TYPE_RGB)
000628  7a16              LDRB     r6,[r2,#8]
00062a  2e02              CMP      r6,#2
00062c  d101              BNE      |L1.1586|
;;;532                bytes_per_pixel = 3;
00062e  2103              MOVS     r1,#3
000630  e006              B        |L1.1600|
                  |L1.1586|
;;;533             else if (row_info->color_type == PNG_COLOR_TYPE_RGB_ALPHA)
000632  7a16              LDRB     r6,[r2,#8]
000634  2e06              CMP      r6,#6
000636  d101              BNE      |L1.1596|
;;;534                bytes_per_pixel = 4;
000638  2104              MOVS     r1,#4
00063a  e001              B        |L1.1600|
                  |L1.1596|
;;;535             else
;;;536                return;
;;;537    
;;;538             for (i = 0, rp = row; i < row_width; i++, rp += bytes_per_pixel)
;;;539             {
;;;540                *(rp)   = (png_byte)((*rp     - *(rp+1))&0xff);
;;;541                *(rp+2) = (png_byte)((*(rp+2) - *(rp+1))&0xff);
;;;542             }
;;;543          }
;;;544          else if (row_info->bit_depth == 16)
;;;545          {
;;;546             png_bytep rp;
;;;547             png_uint_32 i;
;;;548    
;;;549             if (row_info->color_type == PNG_COLOR_TYPE_RGB)
;;;550                bytes_per_pixel = 6;
;;;551             else if (row_info->color_type == PNG_COLOR_TYPE_RGB_ALPHA)
;;;552                bytes_per_pixel = 8;
;;;553             else
;;;554                return;
;;;555    
;;;556             for (i = 0, rp = row; i < row_width; i++, rp += bytes_per_pixel)
;;;557             {
;;;558                png_uint_32 s0   = (*(rp  ) << 8) | *(rp+1);
;;;559                png_uint_32 s1   = (*(rp+2) << 8) | *(rp+3);
;;;560                png_uint_32 s2   = (*(rp+4) << 8) | *(rp+5);
;;;561                png_uint_32 red  = (png_uint_32)((s0-s1) & 0xffffL);
;;;562                png_uint_32 blue = (png_uint_32)((s2-s1) & 0xffffL);
;;;563                *(rp  ) = (png_byte)((red >> 8) & 0xff);
;;;564                *(rp+1) = (png_byte)(red & 0xff);
;;;565                *(rp+4) = (png_byte)((blue >> 8) & 0xff);
;;;566                *(rp+5) = (png_byte)(blue & 0xff);
;;;567             }
;;;568          }
;;;569       }
;;;570    }
00063c  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.1600|
000640  2400              MOVS     r4,#0                 ;538
000642  4618              MOV      r0,r3                 ;538
000644  e009              B        |L1.1626|
                  |L1.1606|
000646  7806              LDRB     r6,[r0,#0]            ;540
000648  7847              LDRB     r7,[r0,#1]            ;540
00064a  1bf6              SUBS     r6,r6,r7              ;540
00064c  7006              STRB     r6,[r0,#0]            ;540
00064e  7886              LDRB     r6,[r0,#2]            ;541
000650  7847              LDRB     r7,[r0,#1]            ;541
000652  1bf6              SUBS     r6,r6,r7              ;541
000654  7086              STRB     r6,[r0,#2]            ;541
000656  1c64              ADDS     r4,r4,#1              ;538
000658  4408              ADD      r0,r0,r1              ;538
                  |L1.1626|
00065a  42ac              CMP      r4,r5                 ;538
00065c  d3f3              BCC      |L1.1606|
00065e  e03a              B        |L1.1750|
                  |L1.1632|
000660  7a50              LDRB     r0,[r2,#9]            ;544
000662  2810              CMP      r0,#0x10              ;544
000664  d137              BNE      |L1.1750|
000666  7a16              LDRB     r6,[r2,#8]            ;549
000668  2e02              CMP      r6,#2                 ;549
00066a  d101              BNE      |L1.1648|
00066c  2106              MOVS     r1,#6                 ;550
00066e  e005              B        |L1.1660|
                  |L1.1648|
000670  7a16              LDRB     r6,[r2,#8]            ;551
000672  2e06              CMP      r6,#6                 ;551
000674  d101              BNE      |L1.1658|
000676  2108              MOVS     r1,#8                 ;552
000678  e000              B        |L1.1660|
                  |L1.1658|
00067a  e7df              B        |L1.1596|
                  |L1.1660|
00067c  2400              MOVS     r4,#0                 ;556
00067e  4618              MOV      r0,r3                 ;556
000680  e026              B        |L1.1744|
                  |L1.1666|
000682  f890a001          LDRB     r10,[r0,#1]           ;558
000686  f890b000          LDRB     r11,[r0,#0]           ;558
00068a  ea4a280b          ORR      r8,r10,r11,LSL #8     ;558
00068e  f890a003          LDRB     r10,[r0,#3]           ;559
000692  f890b002          LDRB     r11,[r0,#2]           ;559
000696  ea4a260b          ORR      r6,r10,r11,LSL #8     ;559
00069a  f890a005          LDRB     r10,[r0,#5]           ;560
00069e  f890b004          LDRB     r11,[r0,#4]           ;560
0006a2  ea4a290b          ORR      r9,r10,r11,LSL #8     ;560
0006a6  eba80a06          SUB      r10,r8,r6             ;561
0006aa  fa1ff78a          UXTH     r7,r10                ;561
0006ae  eba90a06          SUB      r10,r9,r6             ;562
0006b2  fa1ffc8a          UXTH     r12,r10               ;562
0006b6  ea4f2a17          LSR      r10,r7,#8             ;563
0006ba  f880a000          STRB     r10,[r0,#0]           ;563
0006be  7047              STRB     r7,[r0,#1]            ;564
0006c0  ea4f2a1c          LSR      r10,r12,#8            ;565
0006c4  f880a004          STRB     r10,[r0,#4]           ;565
0006c8  f880c005          STRB     r12,[r0,#5]           ;566
0006cc  1c64              ADDS     r4,r4,#1              ;556
0006ce  4408              ADD      r0,r0,r1              ;556
                  |L1.1744|
0006d0  42ac              CMP      r4,r5                 ;556
0006d2  d3d6              BCC      |L1.1666|
0006d4  bf00              NOP                            ;568
                  |L1.1750|
0006d6  bf00              NOP                            ;569
                  |L1.1752|
0006d8  bf00              NOP      
0006da  e7af              B        |L1.1596|
;;;571    #endif /* PNG_MNG_FEATURES_SUPPORTED */
                          ENDP

