; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\gui_png.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\gui_png.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\FWlib\inc -I.\user -I.\CM3 -I.\MALLOC -I.\TFT -I.\EMWIN\EMWIN_INC -I.\EMWIN\DEMO -I.\PNG -I.\FATFS -I.\SDIO -I.\USB\inc -I.\USBCFG\inc -IE:\material\GUI\9.STM32·Ü¶·°å-emwin+fatfs+usb+memdev\RTE -Id:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.1.0\Device\Include -Id:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=515 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\gui_png.crf PNG\GUI_PNG.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  GUI_PNG__GetData PROC
;;;76     */
;;;77     static int GUI_PNG__GetData(void * p, const U8 ** ppData, unsigned NumBytesReq, U32 Off) {
000000  e92d47f0          PUSH     {r4-r10,lr}
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;78       GUI_PNG_PARAM * pParam;
;;;79       U8 * pData;
;;;80     
;;;81       pData = (U8 *)*ppData;
00000c  f8d59000          LDR      r9,[r5,#0]
;;;82       pParam = (GUI_PNG_PARAM *)p;
000010  46a0              MOV      r8,r4
;;;83       memcpy(pData, (const void *)(pParam->pFileData + Off), NumBytesReq);
000012  f8d80000          LDR      r0,[r8,#0]
000016  19c1              ADDS     r1,r0,r7
000018  4632              MOV      r2,r6
00001a  4648              MOV      r0,r9
00001c  f7fffffe          BL       __aeabi_memcpy
;;;84       return NumBytesReq;
000020  4630              MOV      r0,r6
;;;85     }
000022  e8bd87f0          POP      {r4-r10,pc}
;;;86     
                          ENDP

                  _png_cexcept_error PROC
;;;97     */
;;;98     static void _png_cexcept_error(png_structp png_ptr, png_const_charp msg) {
000026  4770              BX       lr
;;;99       GUI_USE_PARA(png_ptr);
;;;100      GUI_USE_PARA(msg);
;;;101      GUI_DEBUG_ERROROUT("GUI_PNG.c:\nError in _png_cexcept_error().");
;;;102    }
;;;103    
                          ENDP

                  _png_read_data PROC
;;;107    */
;;;108    static void PNGAPI _png_read_data(png_structp png_ptr, png_bytep data, png_size_t length) {
000028  b5f7              PUSH     {r0-r2,r4-r7,lr}
00002a  4606              MOV      r6,r0
00002c  4615              MOV      r5,r2
;;;109      GUI_PNG_CONTEXT * pContext;
;;;110      pContext = (GUI_PNG_CONTEXT *)png_ptr->io_ptr;
00002e  f8d64194          LDR      r4,[r6,#0x194]
;;;111      if ((png_size_t)pContext->pfGetData(pContext->pParam, (const U8 **)&data, length, pContext->Off) != length) {
000032  462a              MOV      r2,r5
000034  a901              ADD      r1,sp,#4
000036  e9d47300          LDRD     r7,r3,[r4,#0]
00003a  68a0              LDR      r0,[r4,#8]
00003c  47b8              BLX      r7
00003e  42a8              CMP      r0,r5
000040  d003              BEQ      |L1.74|
;;;112        _png_cexcept_error(png_ptr, "Error reading data!");
000042  a1fd              ADR      r1,|L1.1080|
000044  4630              MOV      r0,r6
000046  f7fffffe          BL       _png_cexcept_error
                  |L1.74|
;;;113      }
;;;114      pContext->Off += length;
00004a  6860              LDR      r0,[r4,#4]
00004c  4428              ADD      r0,r0,r5
00004e  6060              STR      r0,[r4,#4]
;;;115    }
000050  bdfe              POP      {r1-r7,pc}
;;;116    
                          ENDP

                  _malloc_fn PROC
;;;123    */
;;;124    static png_voidp _malloc_fn(png_structp png_ptr, png_size_t size) {
000052  e92d41f0          PUSH     {r4-r8,lr}
000056  4607              MOV      r7,r0
000058  460c              MOV      r4,r1
;;;125      #if 1
;;;126        void * p;
;;;127        GUI_HMEM hMem;
;;;128    
;;;129        GUI_USE_PARA(png_ptr);
;;;130        hMem = GUI_ALLOC_AllocNoInit(size);
00005a  4620              MOV      r0,r4
00005c  f7fffffe          BL       GUI_ALLOC_AllocNoInit
000060  4606              MOV      r6,r0
;;;131        p = (void *)GUI_LOCK_H(hMem);
000062  4630              MOV      r0,r6
000064  f7fffffe          BL       GUI_ALLOC_LockH
000068  4605              MOV      r5,r0
;;;132        return p;
00006a  4628              MOV      r0,r5
;;;133      #else
;;;134        GUI_USE_PARA(png_ptr);
;;;135        return malloc(size);
;;;136      #endif
;;;137    }
00006c  e8bd81f0          POP      {r4-r8,pc}
;;;138     
                          ENDP

                  _free_fn PROC
;;;145    */
;;;146    static void _free_fn(png_structp png_ptr, png_voidp ptr) {
000070  b573              PUSH     {r0,r1,r4-r6,lr}
000072  4605              MOV      r5,r0
;;;147      #if 1
;;;148        GUI_HMEM hMem;
;;;149        
;;;150        GUI_USE_PARA(png_ptr);
;;;151        hMem = GUI_ALLOC_p2h(ptr);
000074  9801              LDR      r0,[sp,#4]
000076  f7fffffe          BL       GUI_ALLOC_p2h
00007a  4604              MOV      r4,r0
;;;152        GUI_UNLOCK_H(ptr);
00007c  a801              ADD      r0,sp,#4
00007e  f7fffffe          BL       GUI_ALLOC_UnlockH
;;;153        GUI_ALLOC_Free(hMem);
000082  4620              MOV      r0,r4
000084  f7fffffe          BL       GUI_ALLOC_Free
;;;154      #else
;;;155        GUI_USE_PARA(png_ptr);
;;;156        free(ptr);
;;;157      #endif
;;;158    }
000088  bd7c              POP      {r2-r6,pc}
;;;159    
                          ENDP

                  _GetImageHeader PROC
;;;163    */
;;;164    static int _GetImageHeader(png_structp * ppng_ptr, png_infop * pinfo_ptr, GUI_PNG_CONTEXT * pContext, U32 * pWidth, U32 * pHeight, int * pBitDepth, int * pColorType) {
00008a  e92d4ff0          PUSH     {r4-r11,lr}
00008e  b089              SUB      sp,sp,#0x24
000090  4604              MOV      r4,r0
000092  460d              MOV      r5,r1
000094  4617              MOV      r7,r2
000096  4698              MOV      r8,r3
000098  e9ddab13          LDRD     r10,r11,[sp,#0x4c]
00009c  f8dd9048          LDR      r9,[sp,#0x48]
;;;165      U8 acHeader[8];
;;;166      png_structp png_ptr  = NULL;
0000a0  2000              MOVS     r0,#0
0000a2  9006              STR      r0,[sp,#0x18]
;;;167      png_infop   info_ptr = NULL;
0000a4  2600              MOVS     r6,#0
;;;168    
;;;169      png_ptr  = *ppng_ptr;
0000a6  6820              LDR      r0,[r4,#0]
0000a8  9006              STR      r0,[sp,#0x18]
;;;170      info_ptr = *pinfo_ptr;
0000aa  682e              LDR      r6,[r5,#0]
;;;171      //
;;;172      // Read-struct creation
;;;173      //
;;;174      png_ptr = png_create_read_struct_2(PNG_LIBPNG_VER_STRING, NULL, (png_error_ptr)_png_cexcept_error, (png_error_ptr)NULL, NULL, _malloc_fn, _free_fn);
0000ac  48e7              LDR      r0,|L1.1100|
0000ae  49e8              LDR      r1,|L1.1104|
0000b0  2200              MOVS     r2,#0
0000b2  4613              MOV      r3,r2
0000b4  e9cd2100          STRD     r2,r1,[sp,#0]
0000b8  9002              STR      r0,[sp,#8]
0000ba  4ae6              LDR      r2,|L1.1108|
0000bc  2100              MOVS     r1,#0
0000be  a0e6              ADR      r0,|L1.1112|
0000c0  f7fffffe          BL       png_create_read_struct_2
0000c4  9006              STR      r0,[sp,#0x18]
;;;175      if (png_ptr == NULL) {
0000c6  9806              LDR      r0,[sp,#0x18]
0000c8  b918              CBNZ     r0,|L1.210|
;;;176        return 1;
0000ca  2001              MOVS     r0,#1
                  |L1.204|
;;;177      }
;;;178      //
;;;179      // Info-struct creation
;;;180      //
;;;181      info_ptr = png_create_info_struct(png_ptr);
;;;182      if (info_ptr == NULL) {
;;;183        png_destroy_read_struct(&png_ptr, NULL, NULL);
;;;184        return 1;
;;;185      }
;;;186      //
;;;187      // Set read function
;;;188      //
;;;189      png_set_read_fn(png_ptr, (png_voidp)pContext, _png_read_data);
;;;190      //
;;;191      // Check file header
;;;192      //
;;;193      _png_read_data(png_ptr, acHeader, 8);
;;;194      if (png_sig_cmp(acHeader, 0, 8) != 0) {
;;;195        return 1;
;;;196      }
;;;197      png_set_sig_bytes(png_ptr, 8);
;;;198      //
;;;199      // Read all PNG info up to image data
;;;200      //
;;;201      png_read_info(png_ptr, info_ptr);
;;;202      //
;;;203      // Get width, height, bit-depth and color-type
;;;204      //
;;;205      png_get_IHDR(png_ptr, info_ptr, pWidth, pHeight, pBitDepth, pColorType, NULL, NULL, NULL);
;;;206      *ppng_ptr  = png_ptr;
;;;207      *pinfo_ptr = info_ptr;
;;;208      return 0;
;;;209    }
0000cc  b009              ADD      sp,sp,#0x24
0000ce  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.210|
0000d2  9806              LDR      r0,[sp,#0x18]         ;181
0000d4  f7fffffe          BL       png_create_info_struct
0000d8  4606              MOV      r6,r0                 ;181
0000da  b936              CBNZ     r6,|L1.234|
0000dc  2200              MOVS     r2,#0                 ;183
0000de  4611              MOV      r1,r2                 ;183
0000e0  a806              ADD      r0,sp,#0x18           ;183
0000e2  f7fffffe          BL       png_destroy_read_struct
0000e6  2001              MOVS     r0,#1                 ;184
0000e8  e7f0              B        |L1.204|
                  |L1.234|
0000ea  4add              LDR      r2,|L1.1120|
0000ec  4639              MOV      r1,r7                 ;189
0000ee  9806              LDR      r0,[sp,#0x18]         ;189
0000f0  f7fffffe          BL       png_set_read_fn
0000f4  2208              MOVS     r2,#8                 ;193
0000f6  a907              ADD      r1,sp,#0x1c           ;193
0000f8  9806              LDR      r0,[sp,#0x18]         ;193
0000fa  f7fffffe          BL       _png_read_data
0000fe  2208              MOVS     r2,#8                 ;194
000100  2100              MOVS     r1,#0                 ;194
000102  a807              ADD      r0,sp,#0x1c           ;194
000104  f7fffffe          BL       png_sig_cmp
000108  b108              CBZ      r0,|L1.270|
00010a  2001              MOVS     r0,#1                 ;195
00010c  e7de              B        |L1.204|
                  |L1.270|
00010e  2108              MOVS     r1,#8                 ;197
000110  9806              LDR      r0,[sp,#0x18]         ;197
000112  f7fffffe          BL       png_set_sig_bytes
000116  4631              MOV      r1,r6                 ;201
000118  9806              LDR      r0,[sp,#0x18]         ;201
00011a  f7fffffe          BL       png_read_info
00011e  2000              MOVS     r0,#0                 ;205
000120  e9cdb001          STRD     r11,r0,[sp,#4]        ;205
000124  9003              STR      r0,[sp,#0xc]          ;205
000126  464b              MOV      r3,r9                 ;205
000128  4642              MOV      r2,r8                 ;205
00012a  4631              MOV      r1,r6                 ;205
00012c  f8cda000          STR      r10,[sp,#0]           ;205
000130  9004              STR      r0,[sp,#0x10]         ;205
000132  9806              LDR      r0,[sp,#0x18]         ;205
000134  f7fffffe          BL       png_get_IHDR
000138  9806              LDR      r0,[sp,#0x18]         ;206
00013a  6020              STR      r0,[r4,#0]            ;206
00013c  602e              STR      r6,[r5,#0]            ;207
00013e  2000              MOVS     r0,#0                 ;208
000140  e7c4              B        |L1.204|
;;;210    
                          ENDP

                  _Draw PROC
;;;214    */
;;;215    static int _Draw(int x0, int y0, GUI_PNG_CONTEXT * pContext) {
000142  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
000146  b0ae              SUB      sp,sp,#0xb8
000148  4606              MOV      r6,r0
00014a  460f              MOV      r7,r1
;;;216      png_structp png_ptr  = NULL;
00014c  2000              MOVS     r0,#0
00014e  902d              STR      r0,[sp,#0xb4]
;;;217      png_infop   info_ptr = NULL;
000150  902c              STR      r0,[sp,#0xb0]
;;;218      U32 Width, Height;
;;;219      int BitDepth, ColorType;
;;;220      png_color bkgColor = {127, 127, 127};
000152  48c4              LDR      r0,|L1.1124|
000154  6800              LDR      r0,[r0,#0]  ; <Data1>
000156  9027              STR      r0,[sp,#0x9c]
;;;221      png_color * pBkgColor; 
;;;222      U32 RowBytes;
;;;223      U32 Channels;
;;;224      double Gamma;
;;;225      U8 * pImageData;
;;;226      U8 * pImageDataOld;
;;;227      U8 ** ppRowPointers = NULL;
000158  2000              MOVS     r0,#0
00015a  9020              STR      r0,[sp,#0x80]
;;;228      png_color_16 * pBackground;
;;;229      int BitsPerPixel, BytesPerPixel, HasAlpha, HasTrans;
;;;230      unsigned i, x, y;
;;;231      int BkPixelIndex;
;;;232      LCD_PIXELINDEX * pBkGnd;
;;;233      U32 * pColor;
;;;234      U32 * pWrite;
;;;235      tLCDDEV_Index2Color * pfIndex2Color;
;;;236      tLCDDEV_Color2Index * pfColor2Index;
;;;237      GUI_HMEM hBkGnd;
;;;238      GUI_HMEM hColor;
;;;239      int xSize, xPos;
;;;240      LCD_PIXELINDEX * p;
;;;241      U8 r, g, b, a, Alpha;
;;;242      U32 Color;
;;;243      U32 BkColor, DataColor;
;;;244    
;;;245      #if (GUI_WINSUPPORT)
;;;246        GUI_RECT Rect;
;;;247        GUI_RECT ClipRect;
;;;248      #endif
;;;249      
;;;250      //
;;;251      // Get image header
;;;252      //
;;;253      if (_GetImageHeader(&png_ptr, &info_ptr, pContext, &Width, &Height, &BitDepth, &ColorType)) {
00015c  a828              ADD      r0,sp,#0xa0
00015e  a929              ADD      r1,sp,#0xa4
000160  aa2a              ADD      r2,sp,#0xa8
000162  ab2b              ADD      r3,sp,#0xac
000164  e9cd2100          STRD     r2,r1,[sp,#0]
000168  9002              STR      r0,[sp,#8]
00016a  a92c              ADD      r1,sp,#0xb0
00016c  a82d              ADD      r0,sp,#0xb4
00016e  9a30              LDR      r2,[sp,#0xc0]
000170  f7fffffe          BL       _GetImageHeader
000174  b118              CBZ      r0,|L1.382|
;;;254        return 1;
000176  2001              MOVS     r0,#1
                  |L1.376|
;;;255      }
;;;256      //
;;;257      // Expand images of all color-type and bit-depth to 3x8 bit RGB images, and
;;;258      // let the library process things like alpha, transparency, background
;;;259      //
;;;260      if (BitDepth == 16) {
;;;261        png_set_strip_16(png_ptr);
;;;262      }
;;;263      if (ColorType == PNG_COLOR_TYPE_PALETTE) {
;;;264        png_set_expand(png_ptr);
;;;265      }
;;;266      if (BitDepth < 8) {
;;;267        png_set_expand(png_ptr);
;;;268      }
;;;269      if (png_get_valid(png_ptr, info_ptr, PNG_INFO_tRNS)) {
;;;270        png_set_expand(png_ptr);
;;;271      }
;;;272      if (ColorType == PNG_COLOR_TYPE_GRAY || ColorType == PNG_COLOR_TYPE_GRAY_ALPHA) {
;;;273        png_set_gray_to_rgb(png_ptr);
;;;274      }
;;;275      //
;;;276      // Set the background color to draw transparent and alpha images over.
;;;277      //
;;;278      pBkgColor = &bkgColor;
;;;279      if (png_get_bKGD(png_ptr, info_ptr, &pBackground)) {
;;;280        png_set_background(png_ptr, pBackground, PNG_BACKGROUND_GAMMA_FILE, 1, 1.0);
;;;281        pBkgColor->red   = (png_byte) pBackground->red;
;;;282        pBkgColor->green = (png_byte) pBackground->green;
;;;283        pBkgColor->blue  = (png_byte) pBackground->blue;
;;;284      } else {
;;;285        pBkgColor = NULL;
;;;286      }
;;;287      //
;;;288      // If required set gamma conversion
;;;289      //
;;;290      if (png_get_gAMA(png_ptr, info_ptr, &Gamma)) {
;;;291        png_set_gamma(png_ptr, (double)2.2, Gamma);
;;;292      }
;;;293      //
;;;294      // After the transformations have been registered update info_ptr data
;;;295      //
;;;296      png_read_update_info(png_ptr, info_ptr);
;;;297      //
;;;298      // Get again width, height and the new bit-depth and color-type
;;;299      //
;;;300      png_get_IHDR(png_ptr, info_ptr, &Width, &Height, &BitDepth, &ColorType, NULL, NULL, NULL);
;;;301      //
;;;302      // Row_bytes is the width x number of channels
;;;303      //
;;;304      RowBytes = png_get_rowbytes(png_ptr, info_ptr);
;;;305      Channels = png_get_channels(png_ptr, info_ptr);
;;;306      //
;;;307      // Now we can allocate memory to store the image
;;;308      //
;;;309      if ((pImageData = (png_byte *)_malloc_fn(NULL, RowBytes * Height * sizeof(png_byte))) == NULL) {
;;;310        png_error(png_ptr, "Out of memory");
;;;311        return 1;
;;;312      }
;;;313      //
;;;314      // And allocate memory for an array of row-pointers
;;;315      //
;;;316      if ((ppRowPointers = (png_bytepp)_malloc_fn(NULL, Height * sizeof(png_bytep))) == NULL) {
;;;317        png_error(png_ptr, "Out of memory");
;;;318        _free_fn(NULL, pImageData);
;;;319        return 1;
;;;320      }
;;;321      //
;;;322      // Set the individual row-pointers to point at the correct offsets
;;;323      //
;;;324      for (i = 0; i < Height; i++) {
;;;325        ppRowPointers[i] = pImageData + i * RowBytes;
;;;326      }
;;;327      //
;;;328      // Read the whole image
;;;329      //
;;;330      png_read_image(png_ptr, ppRowPointers);
;;;331      //
;;;332      // Cleanup memory except image data
;;;333      //
;;;334      png_read_end(png_ptr, info_ptr);
;;;335      png_destroy_read_struct(&png_ptr, &info_ptr, NULL);
;;;336      _free_fn(NULL, ppRowPointers);
;;;337      pImageDataOld = pImageData;
;;;338      {
;;;339        //
;;;340        // Allocate line buffer(s)
;;;341        //
;;;342        hColor = GUI_ALLOC_AllocZero(Width * sizeof(U32));
;;;343        hBkGnd = GUI_ALLOC_AllocZero(Width * sizeof(LCD_PIXELINDEX));
;;;344        if (hColor && hBkGnd) {
;;;345          pColor = (U32 *)GUI_LOCK_H(hColor);
;;;346          pBkGnd = (LCD_PIXELINDEX *)GUI_LOCK_H(hBkGnd);
;;;347          BitsPerPixel = GUI_GetBitsPerPixelEx(GUI_pContext->SelLayer);
;;;348          if (BitsPerPixel <= 8) {
;;;349            BytesPerPixel = 1;
;;;350          } else if (BitsPerPixel <= 16) {
;;;351            BytesPerPixel = 2;
;;;352          } else {
;;;353            BytesPerPixel = 4;
;;;354          }
;;;355          //
;;;356          // Get function pointer(s)
;;;357          //
;;;358          pfIndex2Color = GUI_GetpfIndex2ColorEx(GUI_pContext->SelLayer);
;;;359          pfColor2Index = GUI_GetpfColor2IndexEx(GUI_pContext->SelLayer);
;;;360          //
;;;361          // Iterate over window manager rectangles
;;;362          //
;;;363          #if (GUI_WINSUPPORT)
;;;364            WM_ADDORG(x0,y0);
;;;365            Rect.x1 = (Rect.x0 = x0) + Width - 1;
;;;366            Rect.y1 = (Rect.y0 = y0) + Height - 1;
;;;367            WM_ITERATE_START(&Rect) {
;;;368          #endif
;;;369          //
;;;370          // Iterate over all lines
;;;371          //
;;;372          for (y = 0; y < Height; y++) {
;;;373            pWrite = pColor;
;;;374            HasAlpha = HasTrans = 0;
;;;375            //
;;;376            // Read one line of pixel data
;;;377            //
;;;378            for (x = 0; x < Width; x++) {
;;;379              r = *pImageData++;
;;;380              g = *pImageData++;
;;;381              b = *pImageData++;
;;;382              if (Channels == 4) { // If alpha channel exist...
;;;383                a = 255 - *pImageData++;
;;;384                if (a < 255) {
;;;385                  HasAlpha = 1;
;;;386                } else if (a == 255) {
;;;387                  HasTrans = 1;
;;;388                }
;;;389    #if (GUI_USE_ARGB)
;;;390                Color = b + ((U16)g << 8) + ((U32)r << 16) + ((U32)(255 - a) << 24);
;;;391    #else
;;;392                Color = r + ((U16)g << 8) + ((U32)b << 16) + ((U32)a << 24);
;;;393    #endif
;;;394              } else {
;;;395    #if (GUI_USE_ARGB)
;;;396                Color = b + ((U16)g << 8) + ((U32)r << 16);
;;;397    #else
;;;398                Color = r + ((U16)g << 8) + ((U32)b << 16);
;;;399    #endif
;;;400              }
;;;401              *pWrite++ = Color;
;;;402            }
;;;403            //
;;;404            // Read background if transparency or alpha exist
;;;405            //
;;;406            #if (GUI_WINSUPPORT)
;;;407              ClipRect = GUI_pContext->ClipRect;
;;;408              WM_Deactivate();
;;;409            #endif
;;;410            if (HasAlpha || HasTrans) {
;;;411              if (x0 < 0) {
;;;412                p     = pBkGnd - x0;
;;;413                xSize = Width + x0;
;;;414                xPos  = 0;
;;;415              } else {
;;;416                p     = pBkGnd;
;;;417                xSize = Width;
;;;418                xPos  = x0;
;;;419              }
;;;420              if (xSize > 0) {
;;;421                GUI_ReadRectEx(xPos, y0 + y, xPos + xSize - 1, y0 + y, p, GUI__apDevice[GUI_pContext->SelLayer]);
;;;422                GUI__ExpandPixelIndices(p, xSize, GUI_GetBitsPerPixelEx(GUI_pContext->SelLayer));
;;;423              }
;;;424            }
;;;425            #if (GUI_WINSUPPORT)
;;;426              WM_Activate();
;;;427              GUI_pContext->ClipRect = ClipRect;
;;;428            #endif
;;;429            if (HasAlpha) {
;;;430              //
;;;431              // Mix with background
;;;432              //
;;;433              for (x = 0; x < Width; x++) {
;;;434                DataColor = *(pColor + x);
;;;435                Alpha = DataColor >> 24;
;;;436    #if (GUI_USE_ARGB)
;;;437                if (Alpha < 255) {
;;;438    #else
;;;439                if (Alpha) {
;;;440    #endif
;;;441                  BkPixelIndex = *(pBkGnd + x);
;;;442                  BkColor = pfIndex2Color(BkPixelIndex);
;;;443    #if (GUI_USE_ARGB)
;;;444                  Color = GUI__MixColors(DataColor, BkColor, Alpha);
;;;445    #else
;;;446                  Color = GUI__MixColors(DataColor, BkColor, 255 - Alpha);
;;;447    #endif
;;;448                  *(pBkGnd + x) = pfColor2Index(Color);
;;;449                } else {
;;;450                  *(pBkGnd + x) = pfColor2Index(DataColor);
;;;451                }
;;;452              }
;;;453            } else {
;;;454              //
;;;455              // Store data
;;;456              //
;;;457              for (x = 0; x < Width; x++) {
;;;458                Alpha = *(pColor + x) >> 24;
;;;459    #if (GUI_USE_ARGB)
;;;460                if (Alpha == 255) {
;;;461    #else
;;;462                if (Alpha == 0) {
;;;463    #endif
;;;464                  Color = *(pColor + x);
;;;465                  *(pBkGnd + x) = pfColor2Index(Color);
;;;466                }
;;;467              }
;;;468            }
;;;469            //
;;;470            // Draw line of pixels
;;;471            //
;;;472            GUI__CompactPixelIndices(pBkGnd, Width, BitsPerPixel);
;;;473            LCD_DrawBitmap(x0, y0 + y, Width, 1, 1, 1, BytesPerPixel * 8, 0, (U8 *)pBkGnd, NULL);
;;;474          }
;;;475          pImageData = pImageDataOld;
;;;476          #if (GUI_WINSUPPORT)
;;;477            } WM_ITERATE_END();
;;;478          #endif
;;;479          //
;;;480          // Unlock pointers
;;;481          //
;;;482          GUI_UNLOCK_H(pColor);
;;;483          GUI_UNLOCK_H(pBkGnd);
;;;484        }
;;;485        GUI_ALLOC_Free(hColor);
;;;486        GUI_ALLOC_Free(hBkGnd);
;;;487      }
;;;488      //
;;;489      // Cleanup image data
;;;490      //
;;;491      _free_fn(NULL, pImageData);
;;;492      return 0;
;;;493    }
000178  b031              ADD      sp,sp,#0xc4
00017a  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.382|
00017e  9829              LDR      r0,[sp,#0xa4]         ;260
000180  2810              CMP      r0,#0x10              ;260
000182  d102              BNE      |L1.394|
000184  982d              LDR      r0,[sp,#0xb4]         ;261
000186  f7fffffe          BL       png_set_strip_16
                  |L1.394|
00018a  9828              LDR      r0,[sp,#0xa0]         ;263
00018c  2803              CMP      r0,#3                 ;263
00018e  d102              BNE      |L1.406|
000190  982d              LDR      r0,[sp,#0xb4]         ;264
000192  f7fffffe          BL       png_set_expand
                  |L1.406|
000196  9829              LDR      r0,[sp,#0xa4]         ;266
000198  2808              CMP      r0,#8                 ;266
00019a  da02              BGE      |L1.418|
00019c  982d              LDR      r0,[sp,#0xb4]         ;267
00019e  f7fffffe          BL       png_set_expand
                  |L1.418|
0001a2  2210              MOVS     r2,#0x10              ;269
0001a4  e9dd102c          LDRD     r1,r0,[sp,#0xb0]      ;269
0001a8  f7fffffe          BL       png_get_valid
0001ac  b110              CBZ      r0,|L1.436|
0001ae  982d              LDR      r0,[sp,#0xb4]         ;270
0001b0  f7fffffe          BL       png_set_expand
                  |L1.436|
0001b4  9828              LDR      r0,[sp,#0xa0]         ;272
0001b6  b110              CBZ      r0,|L1.446|
0001b8  9828              LDR      r0,[sp,#0xa0]         ;272
0001ba  2804              CMP      r0,#4                 ;272
0001bc  d102              BNE      |L1.452|
                  |L1.446|
0001be  982d              LDR      r0,[sp,#0xb4]         ;273
0001c0  f7fffffe          BL       png_set_gray_to_rgb
                  |L1.452|
0001c4  a827              ADD      r0,sp,#0x9c           ;278
0001c6  9026              STR      r0,[sp,#0x98]         ;278
0001c8  aa1f              ADD      r2,sp,#0x7c           ;279
0001ca  e9dd102c          LDRD     r1,r0,[sp,#0xb0]      ;279
0001ce  f7fffffe          BL       png_get_bKGD
0001d2  b1b0              CBZ      r0,|L1.514|
0001d4  2100              MOVS     r1,#0                 ;280
0001d6  48a4              LDR      r0,|L1.1128|
0001d8  2301              MOVS     r3,#1                 ;280
0001da  2202              MOVS     r2,#2                 ;280
0001dc  e9cd1000          STRD     r1,r0,[sp,#0]         ;280
0001e0  991f              LDR      r1,[sp,#0x7c]         ;280
0001e2  982d              LDR      r0,[sp,#0xb4]         ;280
0001e4  f7fffffe          BL       png_set_background
0001e8  981f              LDR      r0,[sp,#0x7c]         ;281
0001ea  7881              LDRB     r1,[r0,#2]            ;281
0001ec  9826              LDR      r0,[sp,#0x98]         ;281
0001ee  7001              STRB     r1,[r0,#0]            ;281
0001f0  981f              LDR      r0,[sp,#0x7c]         ;282
0001f2  7901              LDRB     r1,[r0,#4]            ;282
0001f4  9826              LDR      r0,[sp,#0x98]         ;282
0001f6  7041              STRB     r1,[r0,#1]            ;282
0001f8  981f              LDR      r0,[sp,#0x7c]         ;283
0001fa  7981              LDRB     r1,[r0,#6]            ;283
0001fc  9826              LDR      r0,[sp,#0x98]         ;283
0001fe  7081              STRB     r1,[r0,#2]            ;283
000200  e001              B        |L1.518|
                  |L1.514|
000202  2000              MOVS     r0,#0                 ;285
000204  9026              STR      r0,[sp,#0x98]         ;285
                  |L1.518|
000206  aa22              ADD      r2,sp,#0x88           ;290
000208  e9dd102c          LDRD     r1,r0,[sp,#0xb0]      ;290
00020c  f7fffffe          BL       png_get_gAMA
000210  b140              CBZ      r0,|L1.548|
000212  e9dd0122          LDRD     r0,r1,[sp,#0x88]      ;291
000216  4a95              LDR      r2,|L1.1132|
000218  4b95              LDR      r3,|L1.1136|
00021a  e9cd0100          STRD     r0,r1,[sp,#0]         ;291
00021e  982d              LDR      r0,[sp,#0xb4]         ;291
000220  f7fffffe          BL       png_set_gamma
                  |L1.548|
000224  e9dd102c          LDRD     r1,r0,[sp,#0xb0]      ;296
000228  f7fffffe          BL       png_read_update_info
00022c  2000              MOVS     r0,#0                 ;300
00022e  ab28              ADD      r3,sp,#0xa0           ;300
000230  e9cd3001          STRD     r3,r0,[sp,#4]         ;300
000234  9003              STR      r0,[sp,#0xc]          ;300
000236  9004              STR      r0,[sp,#0x10]         ;300
000238  a829              ADD      r0,sp,#0xa4           ;300
00023a  ab2a              ADD      r3,sp,#0xa8           ;300
00023c  aa2b              ADD      r2,sp,#0xac           ;300
00023e  9000              STR      r0,[sp,#0]            ;300
000240  e9dd102c          LDRD     r1,r0,[sp,#0xb0]      ;300
000244  f7fffffe          BL       png_get_IHDR
000248  e9dd102c          LDRD     r1,r0,[sp,#0xb0]      ;304
00024c  f7fffffe          BL       png_get_rowbytes
000250  9025              STR      r0,[sp,#0x94]         ;304
000252  e9dd102c          LDRD     r1,r0,[sp,#0xb0]      ;305
000256  f7fffffe          BL       png_get_channels
00025a  9024              STR      r0,[sp,#0x90]         ;305
00025c  9a2a              LDR      r2,[sp,#0xa8]         ;309
00025e  9825              LDR      r0,[sp,#0x94]         ;309
000260  fb00f102          MUL      r1,r0,r2              ;309
000264  2000              MOVS     r0,#0                 ;309
000266  f7fffffe          BL       _malloc_fn
00026a  0004              MOVS     r4,r0                 ;309
00026c  d105              BNE      |L1.634|
00026e  a181              ADR      r1,|L1.1140|
000270  982d              LDR      r0,[sp,#0xb4]         ;310
000272  f7fffffe          BL       png_error
000276  2001              MOVS     r0,#1                 ;311
000278  e77e              B        |L1.376|
                  |L1.634|
00027a  982a              LDR      r0,[sp,#0xa8]         ;316
00027c  0081              LSLS     r1,r0,#2              ;316
00027e  2000              MOVS     r0,#0                 ;316
000280  f7fffffe          BL       _malloc_fn
000284  9020              STR      r0,[sp,#0x80]         ;316
000286  b948              CBNZ     r0,|L1.668|
000288  a17a              ADR      r1,|L1.1140|
00028a  982d              LDR      r0,[sp,#0xb4]         ;317
00028c  f7fffffe          BL       png_error
000290  4621              MOV      r1,r4                 ;318
000292  2000              MOVS     r0,#0                 ;318
000294  f7fffffe          BL       _free_fn
000298  2001              MOVS     r0,#1                 ;319
00029a  e76d              B        |L1.376|
                  |L1.668|
00029c  f04f0900          MOV      r9,#0                 ;324
0002a0  e007              B        |L1.690|
                  |L1.674|
0002a2  9825              LDR      r0,[sp,#0x94]         ;325
0002a4  fb094100          MLA      r1,r9,r0,r4           ;325
0002a8  9820              LDR      r0,[sp,#0x80]         ;325
0002aa  f8401029          STR      r1,[r0,r9,LSL #2]     ;325
0002ae  f1090901          ADD      r9,r9,#1              ;324
                  |L1.690|
0002b2  982a              LDR      r0,[sp,#0xa8]         ;324
0002b4  4581              CMP      r9,r0                 ;324
0002b6  d3f4              BCC      |L1.674|
0002b8  9920              LDR      r1,[sp,#0x80]         ;330
0002ba  982d              LDR      r0,[sp,#0xb4]         ;330
0002bc  f7fffffe          BL       png_read_image
0002c0  e9dd102c          LDRD     r1,r0,[sp,#0xb0]      ;334
0002c4  f7fffffe          BL       png_read_end
0002c8  2200              MOVS     r2,#0                 ;335
0002ca  a92c              ADD      r1,sp,#0xb0           ;335
0002cc  a82d              ADD      r0,sp,#0xb4           ;335
0002ce  f7fffffe          BL       png_destroy_read_struct
0002d2  2000              MOVS     r0,#0                 ;336
0002d4  9920              LDR      r1,[sp,#0x80]         ;336
0002d6  f7fffffe          BL       _free_fn
0002da  9421              STR      r4,[sp,#0x84]         ;337
0002dc  992b              LDR      r1,[sp,#0xac]         ;342
0002de  0088              LSLS     r0,r1,#2              ;342
0002e0  f7fffffe          BL       GUI_ALLOC_AllocZero
0002e4  9015              STR      r0,[sp,#0x54]         ;342
0002e6  992b              LDR      r1,[sp,#0xac]         ;343
0002e8  0088              LSLS     r0,r1,#2              ;343
0002ea  f7fffffe          BL       GUI_ALLOC_AllocZero
0002ee  9016              STR      r0,[sp,#0x58]         ;343
0002f0  9815              LDR      r0,[sp,#0x54]         ;344
0002f2  2800              CMP      r0,#0                 ;344
                  |L1.756|
0002f4  d07c              BEQ      |L1.1008|
0002f6  9816              LDR      r0,[sp,#0x58]         ;344
0002f8  2800              CMP      r0,#0                 ;344
0002fa  d0fb              BEQ      |L1.756|
0002fc  9815              LDR      r0,[sp,#0x54]         ;345
0002fe  f7fffffe          BL       GUI_ALLOC_LockH
000302  9019              STR      r0,[sp,#0x64]         ;345
000304  9816              LDR      r0,[sp,#0x58]         ;346
000306  f7fffffe          BL       GUI_ALLOC_LockH
00030a  901a              STR      r0,[sp,#0x68]         ;346
00030c  495d              LDR      r1,|L1.1156|
00030e  6809              LDR      r1,[r1,#0]            ;347  ; GUI_pContext
000310  7c48              LDRB     r0,[r1,#0x11]         ;347
000312  f7fffffe          BL       GUI_GetBitsPerPixelEx
000316  4680              MOV      r8,r0                 ;347
000318  f1b80f08          CMP      r8,#8                 ;348
00031c  dc02              BGT      |L1.804|
00031e  2001              MOVS     r0,#1                 ;349
000320  901e              STR      r0,[sp,#0x78]         ;349
000322  e007              B        |L1.820|
                  |L1.804|
000324  f1b80f10          CMP      r8,#0x10              ;350
000328  dc02              BGT      |L1.816|
00032a  2002              MOVS     r0,#2                 ;351
00032c  901e              STR      r0,[sp,#0x78]         ;351
00032e  e001              B        |L1.820|
                  |L1.816|
000330  2004              MOVS     r0,#4                 ;353
000332  901e              STR      r0,[sp,#0x78]         ;353
                  |L1.820|
000334  4953              LDR      r1,|L1.1156|
000336  6809              LDR      r1,[r1,#0]            ;358  ; GUI_pContext
000338  7c48              LDRB     r0,[r1,#0x11]         ;358
00033a  f7fffffe          BL       GUI_GetpfIndex2ColorEx
00033e  9017              STR      r0,[sp,#0x5c]         ;358
000340  4950              LDR      r1,|L1.1156|
000342  6809              LDR      r1,[r1,#0]            ;359  ; GUI_pContext
000344  7c48              LDRB     r0,[r1,#0x11]         ;359
000346  f7fffffe          BL       GUI_GetpfColor2IndexEx
00034a  4683              MOV      r11,r0                ;359
00034c  484d              LDR      r0,|L1.1156|
00034e  6800              LDR      r0,[r0,#0]            ;364  ; GUI_pContext
000350  6cc0              LDR      r0,[r0,#0x4c]         ;364
000352  4406              ADD      r6,r6,r0              ;364
000354  484b              LDR      r0,|L1.1156|
000356  6800              LDR      r0,[r0,#0]            ;364  ; GUI_pContext
000358  6d00              LDR      r0,[r0,#0x50]         ;364
00035a  4407              ADD      r7,r7,r0              ;364
00035c  b230              SXTH     r0,r6                 ;365
00035e  f8ad0020          STRH     r0,[sp,#0x20]         ;365
000362  992b              LDR      r1,[sp,#0xac]         ;365
000364  4408              ADD      r0,r0,r1              ;365
000366  1e40              SUBS     r0,r0,#1              ;365
000368  b200              SXTH     r0,r0                 ;365
00036a  f8ad0024          STRH     r0,[sp,#0x24]         ;365
00036e  b238              SXTH     r0,r7                 ;366
000370  f8ad0022          STRH     r0,[sp,#0x22]         ;366
000374  992a              LDR      r1,[sp,#0xa8]         ;366
000376  4408              ADD      r0,r0,r1              ;366
000378  1e40              SUBS     r0,r0,#1              ;366
00037a  b200              SXTH     r0,r0                 ;366
00037c  f8ad0026          STRH     r0,[sp,#0x26]         ;366
000380  a808              ADD      r0,sp,#0x20           ;367
000382  f7fffffe          BL       WM__InitIVRSearch
000386  2800              CMP      r0,#0                 ;367
000388  d055              BEQ      |L1.1078|
00038a  bf00              NOP                            ;367
                  |L1.908|
00038c  f04f0a00          MOV      r10,#0                ;372
000390  e10e              B        |L1.1456|
                  |L1.914|
000392  9819              LDR      r0,[sp,#0x64]         ;373
000394  9018              STR      r0,[sp,#0x60]         ;373
000396  2000              MOVS     r0,#0                 ;374
000398  901c              STR      r0,[sp,#0x70]         ;374
00039a  901d              STR      r0,[sp,#0x74]         ;374
00039c  2500              MOVS     r5,#0                 ;378
00039e  e037              B        |L1.1040|
                  |L1.928|
0003a0  f8140b01          LDRB     r0,[r4],#1            ;379
0003a4  9011              STR      r0,[sp,#0x44]         ;379
0003a6  f8140b01          LDRB     r0,[r4],#1            ;380
0003aa  9010              STR      r0,[sp,#0x40]         ;380
0003ac  f8140b01          LDRB     r0,[r4],#1            ;381
0003b0  900f              STR      r0,[sp,#0x3c]         ;381
0003b2  9824              LDR      r0,[sp,#0x90]         ;382
0003b4  2804              CMP      r0,#4                 ;382
0003b6  d11c              BNE      |L1.1010|
0003b8  f8141b01          LDRB     r1,[r4],#1            ;383
0003bc  f1c100ff          RSB      r0,r1,#0xff           ;383
0003c0  900e              STR      r0,[sp,#0x38]         ;383
0003c2  980e              LDR      r0,[sp,#0x38]         ;384
0003c4  28ff              CMP      r0,#0xff              ;384
0003c6  da02              BGE      |L1.974|
0003c8  2001              MOVS     r0,#1                 ;385
0003ca  901d              STR      r0,[sp,#0x74]         ;385
0003cc  e004              B        |L1.984|
                  |L1.974|
0003ce  980e              LDR      r0,[sp,#0x38]         ;386
0003d0  28ff              CMP      r0,#0xff              ;386
0003d2  d101              BNE      |L1.984|
0003d4  2001              MOVS     r0,#1                 ;387
0003d6  901c              STR      r0,[sp,#0x70]         ;387
                  |L1.984|
0003d8  e9dd1010          LDRD     r1,r0,[sp,#0x40]      ;392
0003dc  eb002101          ADD      r1,r0,r1,LSL #8       ;392
0003e0  980f              LDR      r0,[sp,#0x3c]         ;392
0003e2  eb014100          ADD      r1,r1,r0,LSL #16      ;392
0003e6  980e              LDR      r0,[sp,#0x38]         ;392
0003e8  eb016000          ADD      r0,r1,r0,LSL #24      ;392
0003ec  900c              STR      r0,[sp,#0x30]         ;392
0003ee  e008              B        |L1.1026|
                  |L1.1008|
0003f0  e0ee              B        |L1.1488|
                  |L1.1010|
0003f2  e9dd1010          LDRD     r1,r0,[sp,#0x40]      ;398
0003f6  eb002101          ADD      r1,r0,r1,LSL #8       ;398
0003fa  980f              LDR      r0,[sp,#0x3c]         ;398
0003fc  eb014000          ADD      r0,r1,r0,LSL #16      ;398
000400  900c              STR      r0,[sp,#0x30]         ;398
                  |L1.1026|
000402  9918              LDR      r1,[sp,#0x60]         ;401
000404  980c              LDR      r0,[sp,#0x30]         ;401
000406  6008              STR      r0,[r1,#0]            ;401
000408  9818              LDR      r0,[sp,#0x60]         ;401
00040a  1d00              ADDS     r0,r0,#4              ;401
00040c  9018              STR      r0,[sp,#0x60]         ;401
00040e  1c6d              ADDS     r5,r5,#1              ;378
                  |L1.1040|
000410  982b              LDR      r0,[sp,#0xac]         ;378
000412  4285              CMP      r5,r0                 ;378
000414  d3c4              BCC      |L1.928|
000416  481b              LDR      r0,|L1.1156|
000418  6800              LDR      r0,[r0,#0]            ;407  ; GUI_pContext
00041a  6881              LDR      r1,[r0,#8]            ;407
00041c  9106              STR      r1,[sp,#0x18]         ;407
00041e  68c0              LDR      r0,[r0,#0xc]          ;407
000420  9007              STR      r0,[sp,#0x1c]         ;407
000422  f7fffffe          BL       WM_Deactivate
000426  981d              LDR      r0,[sp,#0x74]         ;410
000428  b908              CBNZ     r0,|L1.1070|
00042a  981c              LDR      r0,[sp,#0x70]         ;410
00042c  b360              CBZ      r0,|L1.1160|
                  |L1.1070|
00042e  2e00              CMP      r6,#0                 ;411
000430  da34              BGE      |L1.1180|
000432  981a              LDR      r0,[sp,#0x68]         ;412
000434  e029              B        |L1.1162|
                  |L1.1078|
000436  e0c5              B        |L1.1476|
                  |L1.1080|
000438  4572726f          DCB      "Error reading data!",0
00043c  72207265
000440  6164696e
000444  67206461
000448  74612100
                  |L1.1100|
                          DCD      _free_fn
                  |L1.1104|
                          DCD      _malloc_fn
                  |L1.1108|
                          DCD      _png_cexcept_error
                  |L1.1112|
000458  312e322e          DCB      "1.2.15",0
00045c  313500  
00045f  00                DCB      0
                  |L1.1120|
                          DCD      _png_read_data
                  |L1.1124|
                          DCD      ||.constdata||
                  |L1.1128|
                          DCD      0x3ff00000
                  |L1.1132|
                          DCD      0x9999999a
                  |L1.1136|
                          DCD      0x40019999
                  |L1.1140|
000474  4f757420          DCB      "Out of memory",0
000478  6f66206d
00047c  656d6f72
000480  7900    
000482  00                DCB      0
000483  00                DCB      0
                  |L1.1156|
                          DCD      GUI_pContext
                  |L1.1160|
000488  e02f              B        |L1.1258|
                  |L1.1162|
00048a  eba00086          SUB      r0,r0,r6,LSL #2       ;412
00048e  9012              STR      r0,[sp,#0x48]         ;412
000490  982b              LDR      r0,[sp,#0xac]         ;413
000492  4430              ADD      r0,r0,r6              ;413
000494  9014              STR      r0,[sp,#0x50]         ;413
000496  2000              MOVS     r0,#0                 ;414
000498  9013              STR      r0,[sp,#0x4c]         ;414
00049a  e004              B        |L1.1190|
                  |L1.1180|
00049c  981a              LDR      r0,[sp,#0x68]         ;416
00049e  9012              STR      r0,[sp,#0x48]         ;416
0004a0  982b              LDR      r0,[sp,#0xac]         ;417
0004a2  9014              STR      r0,[sp,#0x50]         ;417
0004a4  9613              STR      r6,[sp,#0x4c]         ;418
                  |L1.1190|
0004a6  9814              LDR      r0,[sp,#0x50]         ;420
0004a8  2800              CMP      r0,#0                 ;420
0004aa  dd1e              BLE      |L1.1258|
0004ac  4899              LDR      r0,|L1.1812|
0004ae  6800              LDR      r0,[r0,#0]            ;421  ; GUI_pContext
0004b0  7c40              LDRB     r0,[r0,#0x11]         ;421
0004b2  4999              LDR      r1,|L1.1816|
0004b4  f8510020          LDR      r0,[r1,r0,LSL #2]     ;421
0004b8  9912              LDR      r1,[sp,#0x48]         ;421
0004ba  eb07030a          ADD      r3,r7,r10             ;421
0004be  e9cd1000          STRD     r1,r0,[sp,#0]         ;421
0004c2  e9dd0c13          LDRD     r0,r12,[sp,#0x4c]     ;421
0004c6  4460              ADD      r0,r0,r12             ;421
0004c8  1e42              SUBS     r2,r0,#1              ;421
0004ca  eb07010a          ADD      r1,r7,r10             ;421
0004ce  9813              LDR      r0,[sp,#0x4c]         ;421
0004d0  f7fffffe          BL       GUI_ReadRectEx
0004d4  498f              LDR      r1,|L1.1812|
0004d6  6809              LDR      r1,[r1,#0]            ;422  ; GUI_pContext
0004d8  7c48              LDRB     r0,[r1,#0x11]         ;422
0004da  f7fffffe          BL       GUI_GetBitsPerPixelEx
0004de  4602              MOV      r2,r0                 ;422
0004e0  9005              STR      r0,[sp,#0x14]         ;422
0004e2  9914              LDR      r1,[sp,#0x50]         ;422
0004e4  9812              LDR      r0,[sp,#0x48]         ;422
0004e6  f7fffffe          BL       GUI__ExpandPixelIndices
                  |L1.1258|
0004ea  f7fffffe          BL       WM_Activate
0004ee  4889              LDR      r0,|L1.1812|
0004f0  6800              LDR      r0,[r0,#0]            ;427  ; GUI_pContext
0004f2  9906              LDR      r1,[sp,#0x18]         ;427
0004f4  6081              STR      r1,[r0,#8]            ;427
0004f6  9907              LDR      r1,[sp,#0x1c]         ;427
0004f8  60c1              STR      r1,[r0,#0xc]          ;427
0004fa  981d              LDR      r0,[sp,#0x74]         ;429
0004fc  b350              CBZ      r0,|L1.1364|
0004fe  2500              MOVS     r5,#0                 ;433
000500  e024              B        |L1.1356|
                  |L1.1282|
000502  9819              LDR      r0,[sp,#0x64]         ;434
000504  f8500025          LDR      r0,[r0,r5,LSL #2]     ;434
000508  900a              STR      r0,[sp,#0x28]         ;434
00050a  980a              LDR      r0,[sp,#0x28]         ;435
00050c  0e00              LSRS     r0,r0,#24             ;435
00050e  900d              STR      r0,[sp,#0x34]         ;435
000510  980d              LDR      r0,[sp,#0x34]         ;439
000512  b1a8              CBZ      r0,|L1.1344|
000514  981a              LDR      r0,[sp,#0x68]         ;441
000516  f8500025          LDR      r0,[r0,r5,LSL #2]     ;441
00051a  901b              STR      r0,[sp,#0x6c]         ;441
00051c  9917              LDR      r1,[sp,#0x5c]         ;442
00051e  981b              LDR      r0,[sp,#0x6c]         ;442
000520  4788              BLX      r1                    ;442
000522  900b              STR      r0,[sp,#0x2c]         ;442
000524  980d              LDR      r0,[sp,#0x34]         ;446
000526  f1c002ff          RSB      r2,r0,#0xff           ;446
00052a  e9dd010a          LDRD     r0,r1,[sp,#0x28]      ;446
00052e  f7fffffe          BL       GUI__MixColors
000532  900c              STR      r0,[sp,#0x30]         ;446
000534  980c              LDR      r0,[sp,#0x30]         ;448
000536  47d8              BLX      r11                   ;448
000538  991a              LDR      r1,[sp,#0x68]         ;448
00053a  f8410025          STR      r0,[r1,r5,LSL #2]     ;448
00053e  e004              B        |L1.1354|
                  |L1.1344|
000540  980a              LDR      r0,[sp,#0x28]         ;450
000542  47d8              BLX      r11                   ;450
000544  991a              LDR      r1,[sp,#0x68]         ;450
000546  f8410025          STR      r0,[r1,r5,LSL #2]     ;450
                  |L1.1354|
00054a  1c6d              ADDS     r5,r5,#1              ;433
                  |L1.1356|
00054c  982b              LDR      r0,[sp,#0xac]         ;433
00054e  4285              CMP      r5,r0                 ;433
000550  d3d7              BCC      |L1.1282|
000552  e015              B        |L1.1408|
                  |L1.1364|
000554  2500              MOVS     r5,#0                 ;457
000556  e010              B        |L1.1402|
                  |L1.1368|
000558  9819              LDR      r0,[sp,#0x64]         ;458
00055a  f8500025          LDR      r0,[r0,r5,LSL #2]     ;458
00055e  0e00              LSRS     r0,r0,#24             ;458
000560  900d              STR      r0,[sp,#0x34]         ;458
000562  980d              LDR      r0,[sp,#0x34]         ;462
000564  b940              CBNZ     r0,|L1.1400|
000566  9819              LDR      r0,[sp,#0x64]         ;464
000568  f8500025          LDR      r0,[r0,r5,LSL #2]     ;464
00056c  900c              STR      r0,[sp,#0x30]         ;464
00056e  980c              LDR      r0,[sp,#0x30]         ;465
000570  47d8              BLX      r11                   ;465
000572  991a              LDR      r1,[sp,#0x68]         ;465
000574  f8410025          STR      r0,[r1,r5,LSL #2]     ;465
                  |L1.1400|
000578  1c6d              ADDS     r5,r5,#1              ;457
                  |L1.1402|
00057a  982b              LDR      r0,[sp,#0xac]         ;457
00057c  4285              CMP      r5,r0                 ;457
00057e  d3eb              BCC      |L1.1368|
                  |L1.1408|
000580  4642              MOV      r2,r8                 ;472
000582  992b              LDR      r1,[sp,#0xac]         ;472
000584  981a              LDR      r0,[sp,#0x68]         ;472
000586  f7fffffe          BL       GUI__CompactPixelIndices
00058a  2100              MOVS     r1,#0                 ;473
00058c  981e              LDR      r0,[sp,#0x78]         ;473
00058e  00c0              LSLS     r0,r0,#3              ;473
000590  9a1a              LDR      r2,[sp,#0x68]         ;473
000592  ab02              ADD      r3,sp,#8              ;473
000594  c307              STM      r3!,{r0-r2}           ;473
000596  2001              MOVS     r0,#1                 ;473
000598  9000              STR      r0,[sp,#0]            ;473
00059a  9105              STR      r1,[sp,#0x14]         ;473
00059c  9001              STR      r0,[sp,#4]            ;473
00059e  eb07010a          ADD      r1,r7,r10             ;473
0005a2  4603              MOV      r3,r0                 ;473
0005a4  4630              MOV      r0,r6                 ;473
0005a6  9a2b              LDR      r2,[sp,#0xac]         ;473
0005a8  f7fffffe          BL       LCD_DrawBitmap
0005ac  f10a0a01          ADD      r10,r10,#1            ;372
                  |L1.1456|
0005b0  982a              LDR      r0,[sp,#0xa8]         ;372
0005b2  4582              CMP      r10,r0                ;372
0005b4  f4ffaeed          BCC      |L1.914|
0005b8  9c21              LDR      r4,[sp,#0x84]         ;475
0005ba  f7fffffe          BL       WM__GetNextIVR
0005be  2800              CMP      r0,#0                 ;477
0005c0  f47faee4          BNE      |L1.908|
                  |L1.1476|
0005c4  a819              ADD      r0,sp,#0x64           ;482
0005c6  f7fffffe          BL       GUI_ALLOC_UnlockH
0005ca  a81a              ADD      r0,sp,#0x68           ;483
0005cc  f7fffffe          BL       GUI_ALLOC_UnlockH
                  |L1.1488|
0005d0  9815              LDR      r0,[sp,#0x54]         ;485
0005d2  f7fffffe          BL       GUI_ALLOC_Free
0005d6  9816              LDR      r0,[sp,#0x58]         ;486
0005d8  f7fffffe          BL       GUI_ALLOC_Free
0005dc  4621              MOV      r1,r4                 ;491
0005de  2000              MOVS     r0,#0                 ;491
0005e0  f7fffffe          BL       _free_fn
0005e4  2000              MOVS     r0,#0                 ;492
0005e6  e5c7              B        |L1.376|
;;;494    
                          ENDP

                  _GetSize PROC
;;;498    */
;;;499    static int _GetSize(GUI_GET_DATA_FUNC * pfGetData, void * p, U32 * pxSize, U32 * pySize) {
0005e8  b5f0              PUSH     {r4-r7,lr}
0005ea  b08b              SUB      sp,sp,#0x2c
0005ec  4604              MOV      r4,r0
0005ee  460d              MOV      r5,r1
0005f0  4616              MOV      r6,r2
0005f2  461f              MOV      r7,r3
;;;500      png_structp png_ptr  = NULL;
0005f4  2000              MOVS     r0,#0
0005f6  900a              STR      r0,[sp,#0x28]
;;;501      png_infop   info_ptr = NULL;
0005f8  9009              STR      r0,[sp,#0x24]
;;;502      int BitDepth, ColorType;
;;;503      GUI_PNG_CONTEXT Context = {0};
0005fa  9004              STR      r0,[sp,#0x10]
0005fc  9005              STR      r0,[sp,#0x14]
0005fe  9006              STR      r0,[sp,#0x18]
;;;504    
;;;505      Context.pfGetData = pfGetData;
000600  9404              STR      r4,[sp,#0x10]
;;;506      Context.pParam    = p;
000602  9506              STR      r5,[sp,#0x18]
;;;507      //
;;;508      // Get image header
;;;509      //
;;;510      if (_GetImageHeader(&png_ptr, &info_ptr, &Context, pxSize, pySize, &BitDepth, &ColorType)) {
000604  a807              ADD      r0,sp,#0x1c
000606  a908              ADD      r1,sp,#0x20
000608  4633              MOV      r3,r6
00060a  aa04              ADD      r2,sp,#0x10
00060c  e9cd7100          STRD     r7,r1,[sp,#0]
000610  9002              STR      r0,[sp,#8]
000612  a909              ADD      r1,sp,#0x24
000614  a80a              ADD      r0,sp,#0x28
000616  f7fffffe          BL       _GetImageHeader
00061a  b110              CBZ      r0,|L1.1570|
;;;511        return 1;
00061c  2001              MOVS     r0,#1
                  |L1.1566|
;;;512      }
;;;513      //
;;;514      // Cleanup memory
;;;515      //
;;;516      png_destroy_read_struct(&png_ptr, &info_ptr, NULL);
;;;517      return 0;
;;;518    }
00061e  b00b              ADD      sp,sp,#0x2c
000620  bdf0              POP      {r4-r7,pc}
                  |L1.1570|
000622  2200              MOVS     r2,#0                 ;516
000624  a909              ADD      r1,sp,#0x24           ;516
000626  a80a              ADD      r0,sp,#0x28           ;516
000628  f7fffffe          BL       png_destroy_read_struct
00062c  2000              MOVS     r0,#0                 ;517
00062e  e7f6              B        |L1.1566|
;;;519    
                          ENDP

                  GUI_PNG_GetXSizeEx PROC
;;;529    */
;;;530    int GUI_PNG_GetXSizeEx(GUI_GET_DATA_FUNC * pfGetData, void * p) {
000630  b57c              PUSH     {r2-r6,lr}
000632  4605              MOV      r5,r0
000634  460e              MOV      r6,r1
;;;531      U32 Width, Height;
;;;532      int r;
;;;533    
;;;534      _LOCK();
000636  f7fffffe          BL       GUI_ALLOC_Lock
;;;535      if (_GetSize(pfGetData, p, &Width, &Height)) {
00063a  466b              MOV      r3,sp
00063c  aa01              ADD      r2,sp,#4
00063e  4631              MOV      r1,r6
000640  4628              MOV      r0,r5
000642  f7fffffe          BL       _GetSize
000646  b108              CBZ      r0,|L1.1612|
;;;536        r = 0;
000648  2400              MOVS     r4,#0
00064a  e000              B        |L1.1614|
                  |L1.1612|
;;;537      } else {
;;;538        r = (int)Width;
00064c  9c01              LDR      r4,[sp,#4]
                  |L1.1614|
;;;539      }
;;;540      _UNLOCK();
00064e  f7fffffe          BL       GUI_ALLOC_Unlock
;;;541      return r;
000652  4620              MOV      r0,r4
;;;542    }
000654  bd7c              POP      {r2-r6,pc}
;;;543    
                          ENDP

                  GUI_PNG_GetXSize PROC
;;;547    */
;;;548    int GUI_PNG_GetXSize(const void * pFileData, int FileSize) {
000656  b57c              PUSH     {r2-r6,lr}
000658  4604              MOV      r4,r0
00065a  460d              MOV      r5,r1
;;;549      GUI_PNG_PARAM Param = {0};
00065c  2000              MOVS     r0,#0
00065e  9000              STR      r0,[sp,#0]
000660  9001              STR      r0,[sp,#4]
;;;550      Param.pFileData = (const U8 *)pFileData;
000662  9400              STR      r4,[sp,#0]
;;;551      Param.FileSize  = FileSize;
000664  9501              STR      r5,[sp,#4]
;;;552      return GUI_PNG_GetXSizeEx(GUI_PNG__GetData, &Param);
000666  4669              MOV      r1,sp
000668  482c              LDR      r0,|L1.1820|
00066a  f7fffffe          BL       GUI_PNG_GetXSizeEx
;;;553    }
00066e  bd7c              POP      {r2-r6,pc}
;;;554    
                          ENDP

                  GUI_PNG_GetYSizeEx PROC
;;;558    */
;;;559    int GUI_PNG_GetYSizeEx(GUI_GET_DATA_FUNC * pfGetData, void * p) {
000670  b57c              PUSH     {r2-r6,lr}
000672  4605              MOV      r5,r0
000674  460e              MOV      r6,r1
;;;560      U32 Width, Height;
;;;561      int r;
;;;562    
;;;563      _LOCK();
000676  f7fffffe          BL       GUI_ALLOC_Lock
;;;564      if (_GetSize(pfGetData, p, &Width, &Height)) {
00067a  466b              MOV      r3,sp
00067c  aa01              ADD      r2,sp,#4
00067e  4631              MOV      r1,r6
000680  4628              MOV      r0,r5
000682  f7fffffe          BL       _GetSize
000686  b108              CBZ      r0,|L1.1676|
;;;565        r = 0;
000688  2400              MOVS     r4,#0
00068a  e000              B        |L1.1678|
                  |L1.1676|
;;;566      } else {
;;;567        r = (int)Height;
00068c  9c00              LDR      r4,[sp,#0]
                  |L1.1678|
;;;568      }
;;;569      _UNLOCK();
00068e  f7fffffe          BL       GUI_ALLOC_Unlock
;;;570      return r;
000692  4620              MOV      r0,r4
;;;571    }
000694  bd7c              POP      {r2-r6,pc}
;;;572    
                          ENDP

                  GUI_PNG_GetYSize PROC
;;;576    */
;;;577    int GUI_PNG_GetYSize(const void * pFileData, int FileSize) {
000696  b57c              PUSH     {r2-r6,lr}
000698  4604              MOV      r4,r0
00069a  460d              MOV      r5,r1
;;;578      GUI_PNG_PARAM Param = {0};
00069c  2000              MOVS     r0,#0
00069e  9000              STR      r0,[sp,#0]
0006a0  9001              STR      r0,[sp,#4]
;;;579      Param.pFileData = (const U8 *)pFileData;
0006a2  9400              STR      r4,[sp,#0]
;;;580      Param.FileSize  = FileSize;
0006a4  9501              STR      r5,[sp,#4]
;;;581      return GUI_PNG_GetYSizeEx(GUI_PNG__GetData, &Param);
0006a6  4669              MOV      r1,sp
0006a8  481c              LDR      r0,|L1.1820|
0006aa  f7fffffe          BL       GUI_PNG_GetYSizeEx
;;;582    }
0006ae  bd7c              POP      {r2-r6,pc}
;;;583    
                          ENDP

                  GUI_PNG_DrawEx PROC
;;;587    */
;;;588    int  GUI_PNG_DrawEx(GUI_GET_DATA_FUNC * pfGetData, void * p, int x0, int y0) {
0006b0  e92d43fe          PUSH     {r1-r9,lr}
0006b4  4604              MOV      r4,r0
0006b6  460d              MOV      r5,r1
0006b8  4616              MOV      r6,r2
0006ba  461f              MOV      r7,r3
;;;589      GUI_PNG_CONTEXT Context = {0};
0006bc  2000              MOVS     r0,#0
0006be  9000              STR      r0,[sp,#0]
0006c0  9001              STR      r0,[sp,#4]
0006c2  9002              STR      r0,[sp,#8]
;;;590      int r;
;;;591    
;;;592      _LOCK();
0006c4  f7fffffe          BL       GUI_ALLOC_Lock
;;;593      Context.pfGetData = pfGetData;
0006c8  9400              STR      r4,[sp,#0]
;;;594      Context.pParam    = p;
0006ca  9502              STR      r5,[sp,#8]
;;;595      r = _Draw(x0, y0, &Context);
0006cc  466a              MOV      r2,sp
0006ce  4639              MOV      r1,r7
0006d0  4630              MOV      r0,r6
0006d2  f7fffffe          BL       _Draw
0006d6  4680              MOV      r8,r0
;;;596      _UNLOCK();
0006d8  f7fffffe          BL       GUI_ALLOC_Unlock
;;;597      return r;
0006dc  4640              MOV      r0,r8
;;;598    }
0006de  e8bd83fe          POP      {r1-r9,pc}
;;;599    
                          ENDP

                  GUI_PNG_Draw PROC
;;;603    */
;;;604    int GUI_PNG_Draw(const void * pFileData, int FileSize, int x0, int y0) {
0006e2  e92d41fc          PUSH     {r2-r8,lr}
0006e6  4604              MOV      r4,r0
0006e8  460d              MOV      r5,r1
0006ea  4616              MOV      r6,r2
0006ec  461f              MOV      r7,r3
;;;605      GUI_PNG_PARAM Param = {0};
0006ee  2000              MOVS     r0,#0
0006f0  9000              STR      r0,[sp,#0]
0006f2  9001              STR      r0,[sp,#4]
;;;606      int r;
;;;607    
;;;608      _LOCK();
0006f4  f7fffffe          BL       GUI_ALLOC_Lock
;;;609      Param.pFileData = (const U8 *)pFileData;
0006f8  9400              STR      r4,[sp,#0]
;;;610      Param.FileSize  = FileSize;
0006fa  9501              STR      r5,[sp,#4]
;;;611      r = GUI_PNG_DrawEx(GUI_PNG__GetData, &Param, x0, y0);
0006fc  463b              MOV      r3,r7
0006fe  4632              MOV      r2,r6
000700  4669              MOV      r1,sp
000702  4806              LDR      r0,|L1.1820|
000704  f7fffffe          BL       GUI_PNG_DrawEx
000708  4680              MOV      r8,r0
;;;612      _UNLOCK();
00070a  f7fffffe          BL       GUI_ALLOC_Unlock
;;;613      return r;
00070e  4640              MOV      r0,r8
;;;614    }
000710  e8bd81fc          POP      {r2-r8,pc}
;;;615    
                          ENDP

                  |L1.1812|
                          DCD      GUI_pContext
                  |L1.1816|
                          DCD      GUI__apDevice
                  |L1.1820|
                          DCD      GUI_PNG__GetData

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  7f7f7f            DCB      0x7f,0x7f,0x7f
