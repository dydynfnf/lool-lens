; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\gui_dispstringinrectex.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\gui_dispstringinrectex.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -I.\GUI\AntiAlias -I.\GUI\Config -I.\GUI\ConvertColor -I.\GUI\ConvertMono -I.\GUI\Core -I.\GUI\Font -I.\GUI\GUI_X -I.\GUI\JPEG -I.\GUI\LCDDriver -I.\GUI\MemDev -I.\GUI\MultiLayer -I.\GUI\Widget -I.\GUI\WM -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\INC\ST\STM32F10x -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\gui_dispstringinrectex.crf GUI\Core\GUI_DispStringInRectEx.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _SetRotation PROC
;;;42     */
;;;43     static const GUI_ROTATION * _SetRotation(const GUI_ROTATION* pLCD_Api) {
000000  4601              MOV      r1,r0
;;;44       const GUI_ROTATION * pLCD_ApiOld;
;;;45       GUI_LOCK();
;;;46       pLCD_ApiOld = GUI_pLCD_APIList;
000002  4a28              LDR      r2,|L1.164|
000004  6810              LDR      r0,[r2,#0]  ; GUI_pLCD_APIList
;;;47       if (pLCD_Api) {
000006  b121              CBZ      r1,|L1.18|
;;;48         GUI_Context.pClipRect_HL = NULL;           /* Do not perform high level clipping in rotated mode */
000008  f04f0200          MOV      r2,#0
00000c  4b26              LDR      r3,|L1.168|
00000e  615a              STR      r2,[r3,#0x14]  ; GUI_Context
000010  e003              B        |L1.26|
                  |L1.18|
;;;49       } else {
;;;50         GUI_Context.pClipRect_HL = &GUI_Context.ClipRect;
000012  4a25              LDR      r2,|L1.168|
000014  3208              ADDS     r2,r2,#8
000016  4b24              LDR      r3,|L1.168|
000018  615a              STR      r2,[r3,#0x14]  ; GUI_Context
                  |L1.26|
;;;51       }
;;;52       GUI_pLCD_APIList = pLCD_Api;
00001a  4a22              LDR      r2,|L1.164|
00001c  6011              STR      r1,[r2,#0]  ; GUI_pLCD_APIList
;;;53       GUI_UNLOCK();
;;;54       return pLCD_ApiOld;
;;;55     }
00001e  4770              BX       lr
;;;56     
                          ENDP

                  GUI_DispStringInRectEx PROC
;;;66     */
;;;67     void GUI_DispStringInRectEx(const char GUI_UNI_PTR *s, GUI_RECT* pRect, int TextAlign, int MaxLen, const GUI_ROTATION * pLCD_Api) {
000020  e92d47ff          PUSH     {r0-r10,lr}
000024  4607              MOV      r7,r0
000026  460c              MOV      r4,r1
000028  4690              MOV      r8,r2
00002a  4699              MOV      r9,r3
00002c  9d0c              LDR      r5,[sp,#0x30]
;;;68       const GUI_ROTATION * pLCD_ApiOld;
;;;69       if (pLCD_Api == GUI_ROTATE_0) {
00002e  b935              CBNZ     r5,|L1.62|
;;;70         /* Do nothing else but calling GUI_DispStringInRectMax if pLCD_Api == GUI_ROTATE_0 */
;;;71         GUI_DispStringInRectMax(s, pRect, TextAlign, MaxLen);
000030  464b              MOV      r3,r9
000032  4642              MOV      r2,r8
000034  4621              MOV      r1,r4
000036  4638              MOV      r0,r7
000038  f7fffffe          BL       GUI_DispStringInRectMax
00003c  e02f              B        |L1.158|
                  |L1.62|
;;;72       } else {
;;;73         #if (!GUI_WINSUPPORT)
;;;74           GUI_RECT Rect_Old;
;;;75         #else
;;;76           const GUI_RECT * pOldClipRect = NULL;
00003e  f04f0600          MOV      r6,#0
;;;77         #endif
;;;78         GUI_RECT rClip, rText = {0};
000042  4630              MOV      r0,r6
000044  9000              STR      r0,[sp,#0]
000046  9001              STR      r0,[sp,#4]
;;;79         GUI_LOCK();
;;;80         /* Set the clip rectangle */
;;;81         if (pRect) {
000048  b1ac              CBZ      r4,|L1.118|
;;;82           rText = *pRect;
00004a  6820              LDR      r0,[r4,#0]
00004c  9000              STR      r0,[sp,#0]
00004e  6860              LDR      r0,[r4,#4]
000050  9001              STR      r0,[sp,#4]
;;;83           GUI_RectDispString = rText;
000052  4816              LDR      r0,|L1.172|
000054  9900              LDR      r1,[sp,#0]
000056  6001              STR      r1,[r0,#0]  ; GUI_RectDispString
000058  9901              LDR      r1,[sp,#4]
00005a  6041              STR      r1,[r0,#4]  ; GUI_RectDispString
;;;84           #if (GUI_WINSUPPORT)
;;;85             pOldClipRect = WM_SetUserClipRect(pRect);
00005c  4620              MOV      r0,r4
00005e  f7fffffe          BL       WM_SetUserClipRect
000062  4606              MOV      r6,r0
;;;86             if (pOldClipRect) {
000064  b13e              CBZ      r6,|L1.118|
;;;87               GUI__IntersectRects(&rClip, pRect, pOldClipRect);
000066  4632              MOV      r2,r6
000068  4621              MOV      r1,r4
00006a  a802              ADD      r0,sp,#8
00006c  f7fffffe          BL       GUI__IntersectRects
;;;88               WM_SetUserClipRect(&rClip);
000070  a802              ADD      r0,sp,#8
000072  f7fffffe          BL       WM_SetUserClipRect
                  |L1.118|
;;;89             }
;;;90           #else
;;;91             Rect_Old = GUI_Context.ClipRect;
;;;92             GUI__IntersectRects(&rClip, pRect, &Rect_Old);
;;;93             LCD_SetClipRectEx(&rClip);
;;;94           #endif
;;;95         }
;;;96         pLCD_ApiOld = _SetRotation(pLCD_Api);                /* Set the new function pointer for rotating text */
000076  4628              MOV      r0,r5
000078  f7fffffe          BL       _SetRotation
00007c  4682              MOV      r10,r0
;;;97         pLCD_Api->pfRect2TextRect(&rText);                   /* Calculate the text rectangle */
00007e  4668              MOV      r0,sp
000080  6869              LDR      r1,[r5,#4]
000082  4788              BLX      r1
;;;98         GUI__DispStringInRect(s, &rText, TextAlign, MaxLen); /* Display the string */
000084  464b              MOV      r3,r9
000086  4642              MOV      r2,r8
000088  4669              MOV      r1,sp
00008a  4638              MOV      r0,r7
00008c  f7fffffe          BL       GUI__DispStringInRect
;;;99         /* Restore old clipping rectangle */
;;;100        #if (GUI_WINSUPPORT)
;;;101          WM_SetUserClipRect(pOldClipRect);
000090  4630              MOV      r0,r6
000092  f7fffffe          BL       WM_SetUserClipRect
;;;102        #else
;;;103          LCD_SetClipRectEx(&Rect_Old);
;;;104        #endif
;;;105        _SetRotation(pLCD_ApiOld);
000096  4650              MOV      r0,r10
000098  f7fffffe          BL       _SetRotation
;;;106        GUI_UNLOCK();
;;;107      }
00009c  bf00              NOP      
                  |L1.158|
;;;108    }
00009e  e8bd87ff          POP      {r0-r10,pc}
;;;109    
                          ENDP

0000a2  0000              DCW      0x0000
                  |L1.164|
                          DCD      GUI_pLCD_APIList
                  |L1.168|
                          DCD      GUI_Context
                  |L1.172|
                          DCD      GUI_RectDispString

                          AREA ||.data||, DATA, ALIGN=1

                  GUI_RectDispString
                          %        8
