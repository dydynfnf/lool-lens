; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\usb_int.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\usb_int.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\FWlib\inc -I.\user -I.\CM3 -I.\MALLOC -I.\TFT -I.\EMWIN\EMWIN_INC -I.\EMWIN\DEMO -I.\PNG -I.\FATFS -I.\SDIO -I.\USB\inc -I.\USBCFG\inc -IE:\material\GUI\STM32·Ü¶·°å-emwin+fatfs+usb+memdev\RTE -Id:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.1.0\Device\Include -Id:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=515 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\usb_int.crf USB\src\usb_int.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  CTR_LP PROC
;;;41     *******************************************************************************/
;;;42     void CTR_LP(void)
000000  b508              PUSH     {r3,lr}
;;;43     {
;;;44       __IO uint16_t wEPVal = 0;
000002  2000              MOVS     r0,#0
000004  9000              STR      r0,[sp,#0]
;;;45       /* stay in loop while pending interrupts */
;;;46       while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
000006  e122              B        |L1.590|
                  |L1.8|
;;;47       {
;;;48         /* extract highest priority endpoint number */
;;;49         EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
000008  48c4              LDR      r0,|L1.796|
00000a  8800              LDRH     r0,[r0,#0]  ; wIstr
00000c  f000000f          AND      r0,r0,#0xf
000010  49c3              LDR      r1,|L1.800|
000012  7008              STRB     r0,[r1,#0]
;;;50         if (EPindex == 0)
000014  4608              MOV      r0,r1
000016  7800              LDRB     r0,[r0,#0]  ; EPindex
000018  2800              CMP      r0,#0
00001a  d17c              BNE      |L1.278|
;;;51         {
;;;52           /* Decode and service control endpoint interrupt */
;;;53           /* calling related service routine */
;;;54           /* (Setup0_Process, In0_Process, Out0_Process) */
;;;55     
;;;56           /* save RX & TX status */
;;;57           /* and set both to NAK */
;;;58     
;;;59     
;;;60     	    SaveRState = _GetENDPOINT(ENDP0);
00001c  48c1              LDR      r0,|L1.804|
00001e  6800              LDR      r0,[r0,#0]
000020  49c1              LDR      r1,|L1.808|
000022  8008              STRH     r0,[r1,#0]
;;;61     	    SaveTState = SaveRState & EPTX_STAT;
000024  4608              MOV      r0,r1
000026  8800              LDRH     r0,[r0,#0]  ; SaveRState
000028  f0000030          AND      r0,r0,#0x30
00002c  49bf              LDR      r1,|L1.812|
00002e  8008              STRH     r0,[r1,#0]
;;;62     	    SaveRState &=  EPRX_STAT;	
000030  48bd              LDR      r0,|L1.808|
000032  8800              LDRH     r0,[r0,#0]  ; SaveRState
000034  f4005040          AND      r0,r0,#0x3000
000038  49bb              LDR      r1,|L1.808|
00003a  8008              STRH     r0,[r1,#0]
;;;63     
;;;64     	    _SetEPRxTxStatus(ENDP0,EP_RX_NAK,EP_TX_NAK);
00003c  49b9              LDR      r1,|L1.804|
00003e  6809              LDR      r1,[r1,#0]
000040  f64b72bf          MOV      r2,#0xbfbf
000044  ea010002          AND      r0,r1,r2
000048  f4805000          EOR      r0,r0,#0x2000
00004c  f0800020          EOR      r0,r0,#0x20
000050  f4404100          ORR      r1,r0,#0x8000
000054  f0410180          ORR      r1,r1,#0x80
000058  4ab2              LDR      r2,|L1.804|
00005a  6011              STR      r1,[r2,#0]
;;;65     
;;;66           /* DIR bit = origin of the interrupt */
;;;67     
;;;68           if ((wIstr & ISTR_DIR) == 0)
00005c  48af              LDR      r0,|L1.796|
00005e  8800              LDRH     r0,[r0,#0]  ; wIstr
000060  f0000010          AND      r0,r0,#0x10
000064  bb90              CBNZ     r0,|L1.204|
;;;69           {
;;;70             /* DIR = 0 */
;;;71     
;;;72             /* DIR = 0      => IN  int */
;;;73             /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
;;;74     
;;;75     
;;;76             _ClearEP_CTR_TX(ENDP0);
000066  4610              MOV      r0,r2
000068  6800              LDR      r0,[r0,#0]
00006a  f648710f          MOV      r1,#0x8f0f
00006e  4008              ANDS     r0,r0,r1
000070  4611              MOV      r1,r2
000072  6008              STR      r0,[r1,#0]
;;;77             In0_Process();
000074  f7fffffe          BL       In0_Process
;;;78     
;;;79                /* before terminate set Tx & Rx status */
;;;80     
;;;81                 _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
000078  49aa              LDR      r1,|L1.804|
00007a  6809              LDR      r1,[r1,#0]
00007c  f64b72bf          MOV      r2,#0xbfbf
000080  ea010002          AND      r0,r1,r2
000084  49a8              LDR      r1,|L1.808|
000086  8809              LDRH     r1,[r1,#0]  ; SaveRState
000088  f4015180          AND      r1,r1,#0x1000
00008c  b109              CBZ      r1,|L1.146|
00008e  f4805080          EOR      r0,r0,#0x1000
                  |L1.146|
000092  49a5              LDR      r1,|L1.808|
000094  8809              LDRH     r1,[r1,#0]  ; SaveRState
000096  f4015100          AND      r1,r1,#0x2000
00009a  b109              CBZ      r1,|L1.160|
00009c  f4805000          EOR      r0,r0,#0x2000
                  |L1.160|
0000a0  49a2              LDR      r1,|L1.812|
0000a2  8809              LDRH     r1,[r1,#0]  ; SaveTState
0000a4  f0010110          AND      r1,r1,#0x10
0000a8  b109              CBZ      r1,|L1.174|
0000aa  f0800010          EOR      r0,r0,#0x10
                  |L1.174|
0000ae  499f              LDR      r1,|L1.812|
0000b0  8809              LDRH     r1,[r1,#0]  ; SaveTState
0000b2  f0010120          AND      r1,r1,#0x20
0000b6  b109              CBZ      r1,|L1.188|
0000b8  f0800020          EOR      r0,r0,#0x20
                  |L1.188|
0000bc  b281              UXTH     r1,r0
0000be  f4414100          ORR      r1,r1,#0x8000
0000c2  f0410180          ORR      r1,r1,#0x80
0000c6  4a97              LDR      r2,|L1.804|
0000c8  6011              STR      r1,[r2,#0]
                  |L1.202|
;;;82     		  return;
;;;83           }
;;;84           else
;;;85           {
;;;86             /* DIR = 1 */
;;;87     
;;;88             /* DIR = 1 & CTR_RX       => SETUP or OUT int */
;;;89             /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
;;;90     
;;;91             wEPVal = _GetENDPOINT(ENDP0);
;;;92             
;;;93             if ((wEPVal &EP_SETUP) != 0)
;;;94             {
;;;95               _ClearEP_CTR_RX(ENDP0); /* SETUP bit kept frozen while CTR_RX = 1 */
;;;96               Setup0_Process();
;;;97               /* before terminate set Tx & Rx status */
;;;98     
;;;99     		      _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
;;;100              return;
;;;101            }
;;;102    
;;;103            else if ((wEPVal & EP_CTR_RX) != 0)
;;;104            {
;;;105              _ClearEP_CTR_RX(ENDP0);
;;;106              Out0_Process();
;;;107              /* before terminate set Tx & Rx status */
;;;108         
;;;109    		     _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
;;;110              return;
;;;111            }
;;;112          }
;;;113        }/* if(EPindex == 0) */
;;;114        else
;;;115        {
;;;116          /* Decode and service non control endpoints interrupt  */
;;;117    
;;;118          /* process related endpoint register */
;;;119          wEPVal = _GetENDPOINT(EPindex);
;;;120          if ((wEPVal & EP_CTR_RX) != 0)
;;;121          {
;;;122            /* clear int flag */
;;;123            _ClearEP_CTR_RX(EPindex);
;;;124    
;;;125            /* call OUT service function */
;;;126            (*pEpInt_OUT[EPindex-1])();
;;;127    
;;;128          } /* if((wEPVal & EP_CTR_RX) */
;;;129    
;;;130          if ((wEPVal & EP_CTR_TX) != 0)
;;;131          {
;;;132            /* clear int flag */
;;;133            _ClearEP_CTR_TX(EPindex);
;;;134    
;;;135            /* call IN service function */
;;;136            (*pEpInt_IN[EPindex-1])();
;;;137          } /* if((wEPVal & EP_CTR_TX) != 0) */
;;;138    
;;;139        }/* if(EPindex == 0) else */
;;;140    
;;;141      }/* while(...) */
;;;142    }
0000ca  bd08              POP      {r3,pc}
                  |L1.204|
0000cc  e7ff              B        |L1.206|
                  |L1.206|
0000ce  4895              LDR      r0,|L1.804|
0000d0  6800              LDR      r0,[r0,#0]            ;91
0000d2  b280              UXTH     r0,r0                 ;91
0000d4  9000              STR      r0,[sp,#0]            ;91
0000d6  f8bd0000          LDRH     r0,[sp,#0]            ;93
0000da  f4006000          AND      r0,r0,#0x800          ;93
0000de  b3b0              CBZ      r0,|L1.334|
0000e0  4890              LDR      r0,|L1.804|
0000e2  6800              LDR      r0,[r0,#0]            ;95
0000e4  f3c0000e          UBFX     r0,r0,#0,#15          ;95
0000e8  f648718f          MOV      r1,#0x8f8f            ;95
0000ec  4008              ANDS     r0,r0,r1              ;95
0000ee  498d              LDR      r1,|L1.804|
0000f0  6008              STR      r0,[r1,#0]            ;95
0000f2  f7fffffe          BL       Setup0_Process
0000f6  498b              LDR      r1,|L1.804|
0000f8  6809              LDR      r1,[r1,#0]            ;99
0000fa  f64b72bf          MOV      r2,#0xbfbf            ;99
0000fe  ea010002          AND      r0,r1,r2              ;99
000102  4989              LDR      r1,|L1.808|
000104  8809              LDRH     r1,[r1,#0]            ;99  ; SaveRState
000106  f4015180          AND      r1,r1,#0x1000         ;99
00010a  b109              CBZ      r1,|L1.272|
00010c  f4805080          EOR      r0,r0,#0x1000         ;99
                  |L1.272|
000110  4985              LDR      r1,|L1.808|
000112  8809              LDRH     r1,[r1,#0]            ;99  ; SaveRState
000114  e000              B        |L1.280|
                  |L1.278|
000116  e056              B        |L1.454|
                  |L1.280|
000118  f4015100          AND      r1,r1,#0x2000         ;99
00011c  b109              CBZ      r1,|L1.290|
00011e  f4805000          EOR      r0,r0,#0x2000         ;99
                  |L1.290|
000122  4982              LDR      r1,|L1.812|
000124  8809              LDRH     r1,[r1,#0]            ;99  ; SaveTState
000126  f0010110          AND      r1,r1,#0x10           ;99
00012a  b109              CBZ      r1,|L1.304|
00012c  f0800010          EOR      r0,r0,#0x10           ;99
                  |L1.304|
000130  497e              LDR      r1,|L1.812|
000132  8809              LDRH     r1,[r1,#0]            ;99  ; SaveTState
000134  f0010120          AND      r1,r1,#0x20           ;99
000138  b109              CBZ      r1,|L1.318|
00013a  f0800020          EOR      r0,r0,#0x20           ;99
                  |L1.318|
00013e  b281              UXTH     r1,r0                 ;99
000140  f4414100          ORR      r1,r1,#0x8000         ;99
000144  f0410180          ORR      r1,r1,#0x80           ;99
000148  4a76              LDR      r2,|L1.804|
00014a  6011              STR      r1,[r2,#0]            ;99
00014c  e7bd              B        |L1.202|
                  |L1.334|
00014e  e7ff              B        |L1.336|
                  |L1.336|
000150  f8bd0000          LDRH     r0,[sp,#0]            ;103
000154  f4004000          AND      r0,r0,#0x8000         ;103
000158  2800              CMP      r0,#0                 ;103
00015a  d078              BEQ      |L1.590|
00015c  4871              LDR      r0,|L1.804|
00015e  6800              LDR      r0,[r0,#0]            ;105
000160  f3c0000e          UBFX     r0,r0,#0,#15          ;105
000164  f648718f          MOV      r1,#0x8f8f            ;105
000168  4008              ANDS     r0,r0,r1              ;105
00016a  496e              LDR      r1,|L1.804|
00016c  6008              STR      r0,[r1,#0]            ;105
00016e  f7fffffe          BL       Out0_Process
000172  496c              LDR      r1,|L1.804|
000174  6809              LDR      r1,[r1,#0]            ;109
000176  f64b72bf          MOV      r2,#0xbfbf            ;109
00017a  ea010002          AND      r0,r1,r2              ;109
00017e  496a              LDR      r1,|L1.808|
000180  8809              LDRH     r1,[r1,#0]            ;109  ; SaveRState
000182  f4015180          AND      r1,r1,#0x1000         ;109
000186  b109              CBZ      r1,|L1.396|
000188  f4805080          EOR      r0,r0,#0x1000         ;109
                  |L1.396|
00018c  4966              LDR      r1,|L1.808|
00018e  8809              LDRH     r1,[r1,#0]            ;109  ; SaveRState
000190  f4015100          AND      r1,r1,#0x2000         ;109
000194  b109              CBZ      r1,|L1.410|
000196  f4805000          EOR      r0,r0,#0x2000         ;109
                  |L1.410|
00019a  4964              LDR      r1,|L1.812|
00019c  8809              LDRH     r1,[r1,#0]            ;109  ; SaveTState
00019e  f0010110          AND      r1,r1,#0x10           ;109
0001a2  b109              CBZ      r1,|L1.424|
0001a4  f0800010          EOR      r0,r0,#0x10           ;109
                  |L1.424|
0001a8  4960              LDR      r1,|L1.812|
0001aa  8809              LDRH     r1,[r1,#0]            ;109  ; SaveTState
0001ac  f0010120          AND      r1,r1,#0x20           ;109
0001b0  b109              CBZ      r1,|L1.438|
0001b2  f0800020          EOR      r0,r0,#0x20           ;109
                  |L1.438|
0001b6  b281              UXTH     r1,r0                 ;109
0001b8  f4414100          ORR      r1,r1,#0x8000         ;109
0001bc  f0410180          ORR      r1,r1,#0x80           ;109
0001c0  4a58              LDR      r2,|L1.804|
0001c2  6011              STR      r1,[r2,#0]            ;109
0001c4  e781              B        |L1.202|
                  |L1.454|
0001c6  4856              LDR      r0,|L1.800|
0001c8  7800              LDRB     r0,[r0,#0]            ;119  ; EPindex
0001ca  4959              LDR      r1,|L1.816|
0001cc  eb010080          ADD      r0,r1,r0,LSL #2       ;119
0001d0  f8d00c00          LDR      r0,[r0,#0xc00]        ;119
0001d4  b280              UXTH     r0,r0                 ;119
0001d6  9000              STR      r0,[sp,#0]            ;119
0001d8  f8bd0000          LDRH     r0,[sp,#0]            ;120
0001dc  f4004000          AND      r0,r0,#0x8000         ;120
0001e0  b1c0              CBZ      r0,|L1.532|
0001e2  484f              LDR      r0,|L1.800|
0001e4  7800              LDRB     r0,[r0,#0]            ;123  ; EPindex
0001e6  eb010080          ADD      r0,r1,r0,LSL #2       ;123
0001ea  f8d00c00          LDR      r0,[r0,#0xc00]        ;123
0001ee  f3c0000e          UBFX     r0,r0,#0,#15          ;123
0001f2  f648718f          MOV      r1,#0x8f8f            ;123
0001f6  4008              ANDS     r0,r0,r1              ;123
0001f8  4949              LDR      r1,|L1.800|
0001fa  7809              LDRB     r1,[r1,#0]            ;123  ; EPindex
0001fc  4a4c              LDR      r2,|L1.816|
0001fe  eb020181          ADD      r1,r2,r1,LSL #2       ;123
000202  f8c10c00          STR      r0,[r1,#0xc00]        ;123
000206  4946              LDR      r1,|L1.800|
000208  7809              LDRB     r1,[r1,#0]            ;126  ; EPindex
00020a  1e49              SUBS     r1,r1,#1              ;126
00020c  4a49              LDR      r2,|L1.820|
00020e  f8520021          LDR      r0,[r2,r1,LSL #2]     ;126
000212  4780              BLX      r0                    ;126
                  |L1.532|
000214  f8bd0000          LDRH     r0,[sp,#0]            ;130
000218  f0000080          AND      r0,r0,#0x80           ;130
00021c  b1b8              CBZ      r0,|L1.590|
00021e  4840              LDR      r0,|L1.800|
000220  7800              LDRB     r0,[r0,#0]            ;133  ; EPindex
000222  4943              LDR      r1,|L1.816|
000224  eb010080          ADD      r0,r1,r0,LSL #2       ;133
000228  f8d00c00          LDR      r0,[r0,#0xc00]        ;133
00022c  f648710f          MOV      r1,#0x8f0f            ;133
000230  4008              ANDS     r0,r0,r1              ;133
000232  493b              LDR      r1,|L1.800|
000234  7809              LDRB     r1,[r1,#0]            ;133  ; EPindex
000236  4a3e              LDR      r2,|L1.816|
000238  eb020181          ADD      r1,r2,r1,LSL #2       ;133
00023c  f8c10c00          STR      r0,[r1,#0xc00]        ;133
000240  4937              LDR      r1,|L1.800|
000242  7809              LDRB     r1,[r1,#0]            ;136  ; EPindex
000244  1e49              SUBS     r1,r1,#1              ;136
000246  4a3c              LDR      r2,|L1.824|
000248  f8520021          LDR      r0,[r2,r1,LSL #2]     ;136
00024c  4780              BLX      r0                    ;136
                  |L1.590|
00024e  4835              LDR      r0,|L1.804|
000250  3044              ADDS     r0,r0,#0x44           ;46
000252  6800              LDR      r0,[r0,#0]            ;46
000254  b280              UXTH     r0,r0                 ;46
000256  4931              LDR      r1,|L1.796|
000258  8008              STRH     r0,[r1,#0]            ;46
00025a  f4004000          AND      r0,r0,#0x8000         ;46
00025e  2800              CMP      r0,#0                 ;46
000260  f47faed2          BNE      |L1.8|
000264  bf00              NOP      
000266  e730              B        |L1.202|
;;;143    
                          ENDP

                  CTR_HP PROC
;;;151    *******************************************************************************/
;;;152    void CTR_HP(void)
000268  b510              PUSH     {r4,lr}
;;;153    {
;;;154      uint32_t wEPVal = 0;
00026a  2400              MOVS     r4,#0
;;;155    
;;;156      while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
00026c  e04a              B        |L1.772|
                  |L1.622|
;;;157      {
;;;158        _SetISTR((uint16_t)CLR_CTR); /* clear CTR flag */
00026e  f64770ff          MOV      r0,#0x7fff
000272  492c              LDR      r1,|L1.804|
000274  3144              ADDS     r1,r1,#0x44
000276  6008              STR      r0,[r1,#0]
;;;159        /* extract highest priority endpoint number */
;;;160        EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
000278  4828              LDR      r0,|L1.796|
00027a  8800              LDRH     r0,[r0,#0]  ; wIstr
00027c  f000000f          AND      r0,r0,#0xf
000280  4927              LDR      r1,|L1.800|
000282  7008              STRB     r0,[r1,#0]
;;;161        /* process related endpoint register */
;;;162        wEPVal = _GetENDPOINT(EPindex);
000284  4608              MOV      r0,r1
000286  7800              LDRB     r0,[r0,#0]  ; EPindex
000288  4929              LDR      r1,|L1.816|
00028a  eb010080          ADD      r0,r1,r0,LSL #2
00028e  f8d00c00          LDR      r0,[r0,#0xc00]
000292  b284              UXTH     r4,r0
;;;163        if ((wEPVal & EP_CTR_RX) != 0)
000294  f4044000          AND      r0,r4,#0x8000
000298  b1c8              CBZ      r0,|L1.718|
;;;164        {
;;;165          /* clear int flag */
;;;166          _ClearEP_CTR_RX(EPindex);
00029a  4821              LDR      r0,|L1.800|
00029c  7800              LDRB     r0,[r0,#0]  ; EPindex
00029e  eb010080          ADD      r0,r1,r0,LSL #2
0002a2  f8d00c00          LDR      r0,[r0,#0xc00]
0002a6  f3c0000e          UBFX     r0,r0,#0,#15
0002aa  f648718f          MOV      r1,#0x8f8f
0002ae  4008              ANDS     r0,r0,r1
0002b0  491b              LDR      r1,|L1.800|
0002b2  7809              LDRB     r1,[r1,#0]  ; EPindex
0002b4  4a1e              LDR      r2,|L1.816|
0002b6  eb020181          ADD      r1,r2,r1,LSL #2
0002ba  f8c10c00          STR      r0,[r1,#0xc00]
;;;167    
;;;168          /* call OUT service function */
;;;169          (*pEpInt_OUT[EPindex-1])();
0002be  4918              LDR      r1,|L1.800|
0002c0  7809              LDRB     r1,[r1,#0]  ; EPindex
0002c2  1e49              SUBS     r1,r1,#1
0002c4  4a1b              LDR      r2,|L1.820|
0002c6  f8520021          LDR      r0,[r2,r1,LSL #2]
0002ca  4780              BLX      r0
0002cc  e01a              B        |L1.772|
                  |L1.718|
;;;170    
;;;171        } /* if((wEPVal & EP_CTR_RX) */
;;;172        else if ((wEPVal & EP_CTR_TX) != 0)
0002ce  f0040080          AND      r0,r4,#0x80
0002d2  b1b8              CBZ      r0,|L1.772|
;;;173        {
;;;174          /* clear int flag */
;;;175          _ClearEP_CTR_TX(EPindex);
0002d4  4812              LDR      r0,|L1.800|
0002d6  7800              LDRB     r0,[r0,#0]  ; EPindex
0002d8  4915              LDR      r1,|L1.816|
0002da  eb010080          ADD      r0,r1,r0,LSL #2
0002de  f8d00c00          LDR      r0,[r0,#0xc00]
0002e2  f648710f          MOV      r1,#0x8f0f
0002e6  4008              ANDS     r0,r0,r1
0002e8  490d              LDR      r1,|L1.800|
0002ea  7809              LDRB     r1,[r1,#0]  ; EPindex
0002ec  4a10              LDR      r2,|L1.816|
0002ee  eb020181          ADD      r1,r2,r1,LSL #2
0002f2  f8c10c00          STR      r0,[r1,#0xc00]
;;;176    
;;;177          /* call IN service function */
;;;178          (*pEpInt_IN[EPindex-1])();
0002f6  490a              LDR      r1,|L1.800|
0002f8  7809              LDRB     r1,[r1,#0]  ; EPindex
0002fa  1e49              SUBS     r1,r1,#1
0002fc  4a0e              LDR      r2,|L1.824|
0002fe  f8520021          LDR      r0,[r2,r1,LSL #2]
000302  4780              BLX      r0
                  |L1.772|
000304  4807              LDR      r0,|L1.804|
000306  3044              ADDS     r0,r0,#0x44           ;156
000308  6800              LDR      r0,[r0,#0]            ;156
00030a  b280              UXTH     r0,r0                 ;156
00030c  4903              LDR      r1,|L1.796|
00030e  8008              STRH     r0,[r1,#0]            ;156
000310  f4004000          AND      r0,r0,#0x8000         ;156
000314  2800              CMP      r0,#0                 ;156
000316  d1aa              BNE      |L1.622|
;;;179    
;;;180    
;;;181        } /* if((wEPVal & EP_CTR_TX) != 0) */
;;;182    
;;;183      }/* while(...) */
;;;184    }
000318  bd10              POP      {r4,pc}
;;;185    
                          ENDP

00031a  0000              DCW      0x0000
                  |L1.796|
                          DCD      wIstr
                  |L1.800|
                          DCD      EPindex
                  |L1.804|
                          DCD      0x40005c00
                  |L1.808|
                          DCD      SaveRState
                  |L1.812|
                          DCD      SaveTState
                  |L1.816|
                          DCD      0x40005000
                  |L1.820|
                          DCD      pEpInt_OUT
                  |L1.824|
                          DCD      pEpInt_IN

                          AREA ||.data||, DATA, ALIGN=1

                  SaveRState
000000  0000              DCB      0x00,0x00
                  SaveTState
000002  0000              DCB      0x00,0x00
