; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\pngget.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\pngget.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\FWlib\inc -I.\user -I.\CM3 -I.\MALLOC -I.\TFT -I.\EMWIN\EMWIN_INC -I.\EMWIN\DEMO -I.\PNG -I.\FATFS -I.\SDIO -I.\USB\inc -I.\USBCFG\inc -IE:\material\GUI\9.STM32·Ü¶·°å-emwin+fatfs+usb+memdev\RTE -Id:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.1.0\Device\Include -Id:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=515 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\pngget.crf PNG\pngget.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  png_get_valid PROC
;;;16     png_uint_32 PNGAPI
;;;17     png_get_valid(png_structp png_ptr, png_infop info_ptr, png_uint_32 flag)
000000  4603              MOV      r3,r0
;;;18     {
;;;19        if (png_ptr != NULL && info_ptr != NULL)
000002  b11b              CBZ      r3,|L1.12|
000004  b111              CBZ      r1,|L1.12|
;;;20           return(info_ptr->valid & flag);
000006  6888              LDR      r0,[r1,#8]
000008  4010              ANDS     r0,r0,r2
                  |L1.10|
;;;21        else
;;;22           return(0);
;;;23     }
00000a  4770              BX       lr
                  |L1.12|
00000c  2000              MOVS     r0,#0                 ;22
00000e  e7fc              B        |L1.10|
;;;24     
                          ENDP

                  png_get_rowbytes PROC
;;;25     png_uint_32 PNGAPI
;;;26     png_get_rowbytes(png_structp png_ptr, png_infop info_ptr)
000010  4602              MOV      r2,r0
;;;27     {
;;;28        if (png_ptr != NULL && info_ptr != NULL)
000012  b112              CBZ      r2,|L1.26|
000014  b109              CBZ      r1,|L1.26|
;;;29           return(info_ptr->rowbytes);
000016  68c8              LDR      r0,[r1,#0xc]
                  |L1.24|
;;;30        else
;;;31           return(0);
;;;32     }
000018  4770              BX       lr
                  |L1.26|
00001a  2000              MOVS     r0,#0                 ;31
00001c  e7fc              B        |L1.24|
;;;33     
                          ENDP

                  png_get_rows PROC
;;;35     png_bytepp PNGAPI
;;;36     png_get_rows(png_structp png_ptr, png_infop info_ptr)
00001e  4602              MOV      r2,r0
;;;37     {
;;;38        if (png_ptr != NULL && info_ptr != NULL)
000020  b11a              CBZ      r2,|L1.42|
000022  b111              CBZ      r1,|L1.42|
;;;39           return(info_ptr->row_pointers);
000024  f8d100f8          LDR      r0,[r1,#0xf8]
                  |L1.40|
;;;40        else
;;;41           return(0);
;;;42     }
000028  4770              BX       lr
                  |L1.42|
00002a  2000              MOVS     r0,#0                 ;41
00002c  e7fc              B        |L1.40|
;;;43     #endif
                          ENDP

                  png_get_image_width PROC
;;;47     png_uint_32 PNGAPI
;;;48     png_get_image_width(png_structp png_ptr, png_infop info_ptr)
00002e  4602              MOV      r2,r0
;;;49     {
;;;50        if (png_ptr != NULL && info_ptr != NULL)
000030  b112              CBZ      r2,|L1.56|
000032  b109              CBZ      r1,|L1.56|
;;;51        {
;;;52           return info_ptr->width;
000034  6808              LDR      r0,[r1,#0]
                  |L1.54|
;;;53        }
;;;54        return (0);
;;;55     }
000036  4770              BX       lr
                  |L1.56|
000038  2000              MOVS     r0,#0                 ;54
00003a  e7fc              B        |L1.54|
;;;56     
                          ENDP

                  png_get_image_height PROC
;;;57     png_uint_32 PNGAPI
;;;58     png_get_image_height(png_structp png_ptr, png_infop info_ptr)
00003c  4602              MOV      r2,r0
;;;59     {
;;;60        if (png_ptr != NULL && info_ptr != NULL)
00003e  b112              CBZ      r2,|L1.70|
000040  b109              CBZ      r1,|L1.70|
;;;61        {
;;;62           return info_ptr->height;
000042  6848              LDR      r0,[r1,#4]
                  |L1.68|
;;;63        }
;;;64        return (0);
;;;65     }
000044  4770              BX       lr
                  |L1.70|
000046  2000              MOVS     r0,#0                 ;64
000048  e7fc              B        |L1.68|
;;;66     
                          ENDP

                  png_get_bit_depth PROC
;;;67     png_byte PNGAPI
;;;68     png_get_bit_depth(png_structp png_ptr, png_infop info_ptr)
00004a  4602              MOV      r2,r0
;;;69     {
;;;70        if (png_ptr != NULL && info_ptr != NULL)
00004c  b112              CBZ      r2,|L1.84|
00004e  b109              CBZ      r1,|L1.84|
;;;71        {
;;;72           return info_ptr->bit_depth;
000050  7e08              LDRB     r0,[r1,#0x18]
                  |L1.82|
;;;73        }
;;;74        return (0);
;;;75     }
000052  4770              BX       lr
                  |L1.84|
000054  2000              MOVS     r0,#0                 ;74
000056  e7fc              B        |L1.82|
;;;76     
                          ENDP

                  png_get_color_type PROC
;;;77     png_byte PNGAPI
;;;78     png_get_color_type(png_structp png_ptr, png_infop info_ptr)
000058  4602              MOV      r2,r0
;;;79     {
;;;80        if (png_ptr != NULL && info_ptr != NULL)
00005a  b112              CBZ      r2,|L1.98|
00005c  b109              CBZ      r1,|L1.98|
;;;81        {
;;;82           return info_ptr->color_type;
00005e  7e48              LDRB     r0,[r1,#0x19]
                  |L1.96|
;;;83        }
;;;84        return (0);
;;;85     }
000060  4770              BX       lr
                  |L1.98|
000062  2000              MOVS     r0,#0                 ;84
000064  e7fc              B        |L1.96|
;;;86     
                          ENDP

                  png_get_filter_type PROC
;;;87     png_byte PNGAPI
;;;88     png_get_filter_type(png_structp png_ptr, png_infop info_ptr)
000066  4602              MOV      r2,r0
;;;89     {
;;;90        if (png_ptr != NULL && info_ptr != NULL)
000068  b112              CBZ      r2,|L1.112|
00006a  b109              CBZ      r1,|L1.112|
;;;91        {
;;;92           return info_ptr->filter_type;
00006c  7ec8              LDRB     r0,[r1,#0x1b]
                  |L1.110|
;;;93        }
;;;94        return (0);
;;;95     }
00006e  4770              BX       lr
                  |L1.112|
000070  2000              MOVS     r0,#0                 ;94
000072  e7fc              B        |L1.110|
;;;96     
                          ENDP

                  png_get_interlace_type PROC
;;;97     png_byte PNGAPI
;;;98     png_get_interlace_type(png_structp png_ptr, png_infop info_ptr)
000074  4602              MOV      r2,r0
;;;99     {
;;;100       if (png_ptr != NULL && info_ptr != NULL)
000076  b112              CBZ      r2,|L1.126|
000078  b109              CBZ      r1,|L1.126|
;;;101       {
;;;102          return info_ptr->interlace_type;
00007a  7f08              LDRB     r0,[r1,#0x1c]
                  |L1.124|
;;;103       }
;;;104       return (0);
;;;105    }
00007c  4770              BX       lr
                  |L1.126|
00007e  2000              MOVS     r0,#0                 ;104
000080  e7fc              B        |L1.124|
;;;106    
                          ENDP

                  png_get_compression_type PROC
;;;107    png_byte PNGAPI
;;;108    png_get_compression_type(png_structp png_ptr, png_infop info_ptr)
000082  4602              MOV      r2,r0
;;;109    {
;;;110       if (png_ptr != NULL && info_ptr != NULL)
000084  b112              CBZ      r2,|L1.140|
000086  b109              CBZ      r1,|L1.140|
;;;111       {
;;;112          return info_ptr->compression_type;
000088  7e88              LDRB     r0,[r1,#0x1a]
                  |L1.138|
;;;113       }
;;;114       return (0);
;;;115    }
00008a  4770              BX       lr
                  |L1.140|
00008c  2000              MOVS     r0,#0                 ;114
00008e  e7fc              B        |L1.138|
;;;116    
                          ENDP

                  png_get_x_pixels_per_meter PROC
;;;117    png_uint_32 PNGAPI
;;;118    png_get_x_pixels_per_meter(png_structp png_ptr, png_infop info_ptr)
000090  4602              MOV      r2,r0
;;;119    {
;;;120       if (png_ptr != NULL && info_ptr != NULL)
000092  b162              CBZ      r2,|L1.174|
000094  b159              CBZ      r1,|L1.174|
;;;121    #if defined(PNG_pHYs_SUPPORTED)
;;;122       if (info_ptr->valid & PNG_INFO_pHYs)
000096  7a08              LDRB     r0,[r1,#8]
000098  f0000080          AND      r0,r0,#0x80
00009c  b138              CBZ      r0,|L1.174|
;;;123       {
;;;124          png_debug1(1, "in %s retrieval function\n", "png_get_x_pixels_per_meter");
;;;125          if(info_ptr->phys_unit_type != PNG_RESOLUTION_METER)
00009e  f8910078          LDRB     r0,[r1,#0x78]
0000a2  2801              CMP      r0,#1
0000a4  d001              BEQ      |L1.170|
;;;126              return (0);
0000a6  2000              MOVS     r0,#0
                  |L1.168|
;;;127          else return (info_ptr->x_pixels_per_unit);
;;;128       }
;;;129    #else
;;;130       return (0);
;;;131    #endif
;;;132       return (0);
;;;133    }
0000a8  4770              BX       lr
                  |L1.170|
0000aa  6f08              LDR      r0,[r1,#0x70]         ;127
0000ac  e7fc              B        |L1.168|
                  |L1.174|
0000ae  2000              MOVS     r0,#0                 ;132
0000b0  e7fa              B        |L1.168|
;;;134    
                          ENDP

                  png_get_y_pixels_per_meter PROC
;;;135    png_uint_32 PNGAPI
;;;136    png_get_y_pixels_per_meter(png_structp png_ptr, png_infop info_ptr)
0000b2  4602              MOV      r2,r0
;;;137    {
;;;138       if (png_ptr != NULL && info_ptr != NULL)
0000b4  b162              CBZ      r2,|L1.208|
0000b6  b159              CBZ      r1,|L1.208|
;;;139    #if defined(PNG_pHYs_SUPPORTED)
;;;140       if (info_ptr->valid & PNG_INFO_pHYs)
0000b8  7a08              LDRB     r0,[r1,#8]
0000ba  f0000080          AND      r0,r0,#0x80
0000be  b138              CBZ      r0,|L1.208|
;;;141       {
;;;142          png_debug1(1, "in %s retrieval function\n", "png_get_y_pixels_per_meter");
;;;143          if(info_ptr->phys_unit_type != PNG_RESOLUTION_METER)
0000c0  f8910078          LDRB     r0,[r1,#0x78]
0000c4  2801              CMP      r0,#1
0000c6  d001              BEQ      |L1.204|
;;;144              return (0);
0000c8  2000              MOVS     r0,#0
                  |L1.202|
;;;145          else return (info_ptr->y_pixels_per_unit);
;;;146       }
;;;147    #else
;;;148       return (0);
;;;149    #endif
;;;150       return (0);
;;;151    }
0000ca  4770              BX       lr
                  |L1.204|
0000cc  6f48              LDR      r0,[r1,#0x74]         ;145
0000ce  e7fc              B        |L1.202|
                  |L1.208|
0000d0  2000              MOVS     r0,#0                 ;150
0000d2  e7fa              B        |L1.202|
;;;152    
                          ENDP

                  png_get_pixels_per_meter PROC
;;;153    png_uint_32 PNGAPI
;;;154    png_get_pixels_per_meter(png_structp png_ptr, png_infop info_ptr)
0000d4  4602              MOV      r2,r0
;;;155    {
;;;156       if (png_ptr != NULL && info_ptr != NULL)
0000d6  b182              CBZ      r2,|L1.250|
0000d8  b179              CBZ      r1,|L1.250|
;;;157    #if defined(PNG_pHYs_SUPPORTED)
;;;158       if (info_ptr->valid & PNG_INFO_pHYs)
0000da  7a08              LDRB     r0,[r1,#8]
0000dc  f0000080          AND      r0,r0,#0x80
0000e0  b158              CBZ      r0,|L1.250|
;;;159       {
;;;160          png_debug1(1, "in %s retrieval function\n", "png_get_pixels_per_meter");
;;;161          if(info_ptr->phys_unit_type != PNG_RESOLUTION_METER ||
0000e2  f8910078          LDRB     r0,[r1,#0x78]
0000e6  2801              CMP      r0,#1
0000e8  d103              BNE      |L1.242|
;;;162             info_ptr->x_pixels_per_unit != info_ptr->y_pixels_per_unit)
0000ea  e9d1031c          LDRD     r0,r3,[r1,#0x70]
0000ee  4298              CMP      r0,r3
0000f0  d001              BEQ      |L1.246|
                  |L1.242|
;;;163              return (0);
0000f2  2000              MOVS     r0,#0
                  |L1.244|
;;;164          else return (info_ptr->x_pixels_per_unit);
;;;165       }
;;;166    #else
;;;167       return (0);
;;;168    #endif
;;;169       return (0);
;;;170    }
0000f4  4770              BX       lr
                  |L1.246|
0000f6  6f08              LDR      r0,[r1,#0x70]         ;164
0000f8  e7fc              B        |L1.244|
                  |L1.250|
0000fa  2000              MOVS     r0,#0                 ;169
0000fc  e7fa              B        |L1.244|
;;;171    
                          ENDP

                  png_get_pixel_aspect_ratio PROC
;;;173    float PNGAPI
;;;174    png_get_pixel_aspect_ratio(png_structp png_ptr, png_infop info_ptr)
0000fe  e92d41f0          PUSH     {r4-r8,lr}
;;;175       {
000102  4605              MOV      r5,r0
000104  460c              MOV      r4,r1
;;;176       if (png_ptr != NULL && info_ptr != NULL)
000106  b1ad              CBZ      r5,|L1.308|
000108  b1a4              CBZ      r4,|L1.308|
;;;177    #if defined(PNG_pHYs_SUPPORTED)
;;;178       if (info_ptr->valid & PNG_INFO_pHYs)
00010a  7a20              LDRB     r0,[r4,#8]
00010c  f0000080          AND      r0,r0,#0x80
000110  b180              CBZ      r0,|L1.308|
;;;179       {
;;;180          png_debug1(1, "in %s retrieval function\n", "png_get_aspect_ratio");
;;;181          if (info_ptr->x_pixels_per_unit == 0)
000112  6f20              LDR      r0,[r4,#0x70]
000114  b910              CBNZ     r0,|L1.284|
;;;182             return ((float)0.0);
000116  2000              MOVS     r0,#0
                  |L1.280|
;;;183          else
;;;184             return ((float)((float)info_ptr->y_pixels_per_unit
;;;185                /(float)info_ptr->x_pixels_per_unit));
;;;186       }
;;;187    #else
;;;188       return (0.0);
;;;189    #endif
;;;190       return ((float)0.0);
;;;191    }
000118  e8bd81f0          POP      {r4-r8,pc}
                  |L1.284|
00011c  6f20              LDR      r0,[r4,#0x70]         ;184
00011e  f7fffffe          BL       __aeabi_ui2f
000122  4606              MOV      r6,r0                 ;184
000124  6f60              LDR      r0,[r4,#0x74]         ;184
000126  f7fffffe          BL       __aeabi_ui2f
00012a  4607              MOV      r7,r0                 ;184
00012c  4631              MOV      r1,r6                 ;184
00012e  f7fffffe          BL       __aeabi_fdiv
000132  e7f1              B        |L1.280|
                  |L1.308|
000134  2000              MOVS     r0,#0                 ;190
000136  e7ef              B        |L1.280|
;;;192    #endif
                          ENDP

                  png_get_x_offset_microns PROC
;;;194    png_int_32 PNGAPI
;;;195    png_get_x_offset_microns(png_structp png_ptr, png_infop info_ptr)
000138  4602              MOV      r2,r0
;;;196    {
;;;197       if (png_ptr != NULL && info_ptr != NULL)
00013a  b162              CBZ      r2,|L1.342|
00013c  b159              CBZ      r1,|L1.342|
;;;198    #if defined(PNG_oFFs_SUPPORTED)
;;;199       if (info_ptr->valid & PNG_INFO_oFFs)
00013e  8908              LDRH     r0,[r1,#8]
000140  f4007080          AND      r0,r0,#0x100
000144  b138              CBZ      r0,|L1.342|
;;;200       {
;;;201          png_debug1(1, "in %s retrieval function\n", "png_get_x_offset_microns");
;;;202          if(info_ptr->offset_unit_type != PNG_OFFSET_MICROMETER)
000146  f891006c          LDRB     r0,[r1,#0x6c]
00014a  2801              CMP      r0,#1
00014c  d001              BEQ      |L1.338|
;;;203              return (0);
00014e  2000              MOVS     r0,#0
                  |L1.336|
;;;204          else return (info_ptr->x_offset);
;;;205       }
;;;206    #else
;;;207       return (0);
;;;208    #endif
;;;209       return (0);
;;;210    }
000150  4770              BX       lr
                  |L1.338|
000152  6e48              LDR      r0,[r1,#0x64]         ;204
000154  e7fc              B        |L1.336|
                  |L1.342|
000156  2000              MOVS     r0,#0                 ;209
000158  e7fa              B        |L1.336|
;;;211    
                          ENDP

                  png_get_y_offset_microns PROC
;;;212    png_int_32 PNGAPI
;;;213    png_get_y_offset_microns(png_structp png_ptr, png_infop info_ptr)
00015a  4602              MOV      r2,r0
;;;214    {
;;;215       if (png_ptr != NULL && info_ptr != NULL)
00015c  b162              CBZ      r2,|L1.376|
00015e  b159              CBZ      r1,|L1.376|
;;;216    #if defined(PNG_oFFs_SUPPORTED)
;;;217       if (info_ptr->valid & PNG_INFO_oFFs)
000160  8908              LDRH     r0,[r1,#8]
000162  f4007080          AND      r0,r0,#0x100
000166  b138              CBZ      r0,|L1.376|
;;;218       {
;;;219          png_debug1(1, "in %s retrieval function\n", "png_get_y_offset_microns");
;;;220          if(info_ptr->offset_unit_type != PNG_OFFSET_MICROMETER)
000168  f891006c          LDRB     r0,[r1,#0x6c]
00016c  2801              CMP      r0,#1
00016e  d001              BEQ      |L1.372|
;;;221              return (0);
000170  2000              MOVS     r0,#0
                  |L1.370|
;;;222          else return (info_ptr->y_offset);
;;;223       }
;;;224    #else
;;;225       return (0);
;;;226    #endif
;;;227       return (0);
;;;228    }
000172  4770              BX       lr
                  |L1.372|
000174  6e88              LDR      r0,[r1,#0x68]         ;222
000176  e7fc              B        |L1.370|
                  |L1.376|
000178  2000              MOVS     r0,#0                 ;227
00017a  e7fa              B        |L1.370|
;;;229    
                          ENDP

                  png_get_x_offset_pixels PROC
;;;230    png_int_32 PNGAPI
;;;231    png_get_x_offset_pixels(png_structp png_ptr, png_infop info_ptr)
00017c  4602              MOV      r2,r0
;;;232    {
;;;233       if (png_ptr != NULL && info_ptr != NULL)
00017e  b15a              CBZ      r2,|L1.408|
000180  b151              CBZ      r1,|L1.408|
;;;234    #if defined(PNG_oFFs_SUPPORTED)
;;;235       if (info_ptr->valid & PNG_INFO_oFFs)
000182  8908              LDRH     r0,[r1,#8]
000184  f4007080          AND      r0,r0,#0x100
000188  b130              CBZ      r0,|L1.408|
;;;236       {
;;;237          png_debug1(1, "in %s retrieval function\n", "png_get_x_offset_microns");
;;;238          if(info_ptr->offset_unit_type != PNG_OFFSET_PIXEL)
00018a  f891006c          LDRB     r0,[r1,#0x6c]
00018e  b108              CBZ      r0,|L1.404|
;;;239              return (0);
000190  2000              MOVS     r0,#0
                  |L1.402|
;;;240          else return (info_ptr->x_offset);
;;;241       }
;;;242    #else
;;;243       return (0);
;;;244    #endif
;;;245       return (0);
;;;246    }
000192  4770              BX       lr
                  |L1.404|
000194  6e48              LDR      r0,[r1,#0x64]         ;240
000196  e7fc              B        |L1.402|
                  |L1.408|
000198  2000              MOVS     r0,#0                 ;245
00019a  e7fa              B        |L1.402|
;;;247    
                          ENDP

                  png_get_y_offset_pixels PROC
;;;248    png_int_32 PNGAPI
;;;249    png_get_y_offset_pixels(png_structp png_ptr, png_infop info_ptr)
00019c  4602              MOV      r2,r0
;;;250    {
;;;251       if (png_ptr != NULL && info_ptr != NULL)
00019e  b15a              CBZ      r2,|L1.440|
0001a0  b151              CBZ      r1,|L1.440|
;;;252    #if defined(PNG_oFFs_SUPPORTED)
;;;253       if (info_ptr->valid & PNG_INFO_oFFs)
0001a2  8908              LDRH     r0,[r1,#8]
0001a4  f4007080          AND      r0,r0,#0x100
0001a8  b130              CBZ      r0,|L1.440|
;;;254       {
;;;255          png_debug1(1, "in %s retrieval function\n", "png_get_y_offset_microns");
;;;256          if(info_ptr->offset_unit_type != PNG_OFFSET_PIXEL)
0001aa  f891006c          LDRB     r0,[r1,#0x6c]
0001ae  b108              CBZ      r0,|L1.436|
;;;257              return (0);
0001b0  2000              MOVS     r0,#0
                  |L1.434|
;;;258          else return (info_ptr->y_offset);
;;;259       }
;;;260    #else
;;;261       return (0);
;;;262    #endif
;;;263       return (0);
;;;264    }
0001b2  4770              BX       lr
                  |L1.436|
0001b4  6e88              LDR      r0,[r1,#0x68]         ;258
0001b6  e7fc              B        |L1.434|
                  |L1.440|
0001b8  2000              MOVS     r0,#0                 ;263
0001ba  e7fa              B        |L1.434|
;;;265    
                          ENDP

                  png_get_channels PROC
;;;342    png_byte PNGAPI
;;;343    png_get_channels(png_structp png_ptr, png_infop info_ptr)
0001bc  4602              MOV      r2,r0
;;;344    {
;;;345       if (png_ptr != NULL && info_ptr != NULL)
0001be  b112              CBZ      r2,|L1.454|
0001c0  b109              CBZ      r1,|L1.454|
;;;346          return(info_ptr->channels);
0001c2  7f48              LDRB     r0,[r1,#0x1d]
                  |L1.452|
;;;347       else
;;;348          return (0);
;;;349    }
0001c4  4770              BX       lr
                  |L1.454|
0001c6  2000              MOVS     r0,#0                 ;348
0001c8  e7fc              B        |L1.452|
;;;350    
                          ENDP

                  png_get_signature PROC
;;;351    png_bytep PNGAPI
;;;352    png_get_signature(png_structp png_ptr, png_infop info_ptr)
0001ca  4602              MOV      r2,r0
;;;353    {
;;;354       if (png_ptr != NULL && info_ptr != NULL)
0001cc  b11a              CBZ      r2,|L1.470|
0001ce  b111              CBZ      r1,|L1.470|
;;;355          return(info_ptr->signature);
0001d0  f1010020          ADD      r0,r1,#0x20
                  |L1.468|
;;;356       else
;;;357          return (NULL);
;;;358    }
0001d4  4770              BX       lr
                  |L1.470|
0001d6  2000              MOVS     r0,#0                 ;357
0001d8  e7fc              B        |L1.468|
;;;359    
                          ENDP

                  png_get_bKGD PROC
;;;361    png_uint_32 PNGAPI
;;;362    png_get_bKGD(png_structp png_ptr, png_infop info_ptr,
0001da  4603              MOV      r3,r0
;;;363       png_color_16p *background)
;;;364    {
;;;365       if (png_ptr != NULL && info_ptr != NULL && (info_ptr->valid & PNG_INFO_bKGD)
0001dc  b153              CBZ      r3,|L1.500|
0001de  b149              CBZ      r1,|L1.500|
0001e0  7a08              LDRB     r0,[r1,#8]
0001e2  f0000020          AND      r0,r0,#0x20
0001e6  b128              CBZ      r0,|L1.500|
;;;366          && background != NULL)
0001e8  b122              CBZ      r2,|L1.500|
;;;367       {
;;;368          png_debug1(1, "in %s retrieval function\n", "bKGD");
;;;369          *background = &(info_ptr->background);
0001ea  f101005a          ADD      r0,r1,#0x5a
0001ee  6010              STR      r0,[r2,#0]
;;;370          return (PNG_INFO_bKGD);
0001f0  2020              MOVS     r0,#0x20
                  |L1.498|
;;;371       }
;;;372       return (0);
;;;373    }
0001f2  4770              BX       lr
                  |L1.500|
0001f4  2000              MOVS     r0,#0                 ;372
0001f6  e7fc              B        |L1.498|
;;;374    #endif
                          ENDP

                  png_get_cHRM PROC
;;;378    png_uint_32 PNGAPI
;;;379    png_get_cHRM(png_structp png_ptr, png_infop info_ptr,
0001f8  e92d5fff          PUSH     {r0-r12,lr}
;;;380       double *white_x, double *white_y, double *red_x, double *red_y,
;;;381       double *green_x, double *green_y, double *blue_x, double *blue_y)
;;;382    {
0001fc  460c              MOV      r4,r1
0001fe  4615              MOV      r5,r2
000200  461e              MOV      r6,r3
000202  af0e              ADD      r7,sp,#0x38
000204  e8970f80          LDM      r7,{r7-r11}
;;;383       if (png_ptr != NULL && info_ptr != NULL && (info_ptr->valid & PNG_INFO_cHRM))
000208  9800              LDR      r0,[sp,#0]
00020a  2800              CMP      r0,#0
00020c  d04b              BEQ      |L1.678|
00020e  2c00              CMP      r4,#0
000210  d049              BEQ      |L1.678|
000212  7a20              LDRB     r0,[r4,#8]
000214  f0000004          AND      r0,r0,#4
000218  2800              CMP      r0,#0
00021a  d044              BEQ      |L1.678|
;;;384       {
;;;385          png_debug1(1, "in %s retrieval function\n", "cHRM");
;;;386          if (white_x != NULL)
00021c  b12d              CBZ      r5,|L1.554|
;;;387             *white_x = (double)info_ptr->x_white;
00021e  f8d40080          LDR      r0,[r4,#0x80]
000222  f7fffffe          BL       __aeabi_f2d
000226  e9c50100          STRD     r0,r1,[r5,#0]
                  |L1.554|
;;;388          if (white_y != NULL)
00022a  b12e              CBZ      r6,|L1.568|
;;;389             *white_y = (double)info_ptr->y_white;
00022c  f8d40084          LDR      r0,[r4,#0x84]
000230  f7fffffe          BL       __aeabi_f2d
000234  e9c60100          STRD     r0,r1,[r6,#0]
                  |L1.568|
;;;390          if (red_x != NULL)
000238  b12f              CBZ      r7,|L1.582|
;;;391             *red_x = (double)info_ptr->x_red;
00023a  f8d40088          LDR      r0,[r4,#0x88]
00023e  f7fffffe          BL       __aeabi_f2d
000242  e9c70100          STRD     r0,r1,[r7,#0]
                  |L1.582|
;;;392          if (red_y != NULL)
000246  f1b80f00          CMP      r8,#0
00024a  d005              BEQ      |L1.600|
;;;393             *red_y = (double)info_ptr->y_red;
00024c  f8d4008c          LDR      r0,[r4,#0x8c]
000250  f7fffffe          BL       __aeabi_f2d
000254  e9c80100          STRD     r0,r1,[r8,#0]
                  |L1.600|
;;;394          if (green_x != NULL)
000258  f1b90f00          CMP      r9,#0
00025c  d005              BEQ      |L1.618|
;;;395             *green_x = (double)info_ptr->x_green;
00025e  f8d40090          LDR      r0,[r4,#0x90]
000262  f7fffffe          BL       __aeabi_f2d
000266  e9c90100          STRD     r0,r1,[r9,#0]
                  |L1.618|
;;;396          if (green_y != NULL)
00026a  f1ba0f00          CMP      r10,#0
00026e  d005              BEQ      |L1.636|
;;;397             *green_y = (double)info_ptr->y_green;
000270  f8d40094          LDR      r0,[r4,#0x94]
000274  f7fffffe          BL       __aeabi_f2d
000278  e9ca0100          STRD     r0,r1,[r10,#0]
                  |L1.636|
;;;398          if (blue_x != NULL)
00027c  f1bb0f00          CMP      r11,#0
000280  d005              BEQ      |L1.654|
;;;399             *blue_x = (double)info_ptr->x_blue;
000282  f8d40098          LDR      r0,[r4,#0x98]
000286  f7fffffe          BL       __aeabi_f2d
00028a  e9cb0100          STRD     r0,r1,[r11,#0]
                  |L1.654|
;;;400          if (blue_y != NULL)
00028e  9813              LDR      r0,[sp,#0x4c]
000290  b128              CBZ      r0,|L1.670|
;;;401             *blue_y = (double)info_ptr->y_blue;
000292  f8d4009c          LDR      r0,[r4,#0x9c]
000296  f7fffffe          BL       __aeabi_f2d
00029a  9a13              LDR      r2,[sp,#0x4c]
00029c  c203              STM      r2!,{r0,r1}
                  |L1.670|
;;;402          return (PNG_INFO_cHRM);
00029e  2004              MOVS     r0,#4
                  |L1.672|
;;;403       }
;;;404       return (0);
;;;405    }
0002a0  b004              ADD      sp,sp,#0x10
0002a2  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.678|
0002a6  2000              MOVS     r0,#0                 ;404
0002a8  e7fa              B        |L1.672|
;;;406    #endif
                          ENDP

                  png_get_cHRM_fixed PROC
;;;408    png_uint_32 PNGAPI
;;;409    png_get_cHRM_fixed(png_structp png_ptr, png_infop info_ptr,
0002aa  e92d43f0          PUSH     {r4-r9,lr}
;;;410       png_fixed_point *white_x, png_fixed_point *white_y, png_fixed_point *red_x,
;;;411       png_fixed_point *red_y, png_fixed_point *green_x, png_fixed_point *green_y,
;;;412       png_fixed_point *blue_x, png_fixed_point *blue_y)
;;;413    {
0002ae  4604              MOV      r4,r0
0002b0  ad07              ADD      r5,sp,#0x1c
0002b2  e89510e0          LDM      r5,{r5-r7,r12}
0002b6  e9dd890b          LDRD     r8,r9,[sp,#0x2c]
;;;414       if (png_ptr != NULL && info_ptr != NULL && (info_ptr->valid & PNG_INFO_cHRM))
0002ba  b384              CBZ      r4,|L1.798|
0002bc  b379              CBZ      r1,|L1.798|
0002be  7a08              LDRB     r0,[r1,#8]
0002c0  f0000004          AND      r0,r0,#4
0002c4  b358              CBZ      r0,|L1.798|
;;;415       {
;;;416          png_debug1(1, "in %s retrieval function\n", "cHRM");
;;;417          if (white_x != NULL)
0002c6  b112              CBZ      r2,|L1.718|
;;;418             *white_x = info_ptr->int_x_white;
0002c8  f8d10100          LDR      r0,[r1,#0x100]
0002cc  6010              STR      r0,[r2,#0]
                  |L1.718|
;;;419          if (white_y != NULL)
0002ce  b113              CBZ      r3,|L1.726|
;;;420             *white_y = info_ptr->int_y_white;
0002d0  f8d10104          LDR      r0,[r1,#0x104]
0002d4  6018              STR      r0,[r3,#0]
                  |L1.726|
;;;421          if (red_x != NULL)
0002d6  b115              CBZ      r5,|L1.734|
;;;422             *red_x = info_ptr->int_x_red;
0002d8  f8d10108          LDR      r0,[r1,#0x108]
0002dc  6028              STR      r0,[r5,#0]
                  |L1.734|
;;;423          if (red_y != NULL)
0002de  b116              CBZ      r6,|L1.742|
;;;424             *red_y = info_ptr->int_y_red;
0002e0  f8d1010c          LDR      r0,[r1,#0x10c]
0002e4  6030              STR      r0,[r6,#0]
                  |L1.742|
;;;425          if (green_x != NULL)
0002e6  b117              CBZ      r7,|L1.750|
;;;426             *green_x = info_ptr->int_x_green;
0002e8  f8d10110          LDR      r0,[r1,#0x110]
0002ec  6038              STR      r0,[r7,#0]
                  |L1.750|
;;;427          if (green_y != NULL)
0002ee  f1bc0f00          CMP      r12,#0
0002f2  d003              BEQ      |L1.764|
;;;428             *green_y = info_ptr->int_y_green;
0002f4  f8d10114          LDR      r0,[r1,#0x114]
0002f8  f8cc0000          STR      r0,[r12,#0]
                  |L1.764|
;;;429          if (blue_x != NULL)
0002fc  f1b80f00          CMP      r8,#0
000300  d003              BEQ      |L1.778|
;;;430             *blue_x = info_ptr->int_x_blue;
000302  f8d10118          LDR      r0,[r1,#0x118]
000306  f8c80000          STR      r0,[r8,#0]
                  |L1.778|
;;;431          if (blue_y != NULL)
00030a  f1b90f00          CMP      r9,#0
00030e  d003              BEQ      |L1.792|
;;;432             *blue_y = info_ptr->int_y_blue;
000310  f8d1011c          LDR      r0,[r1,#0x11c]
000314  f8c90000          STR      r0,[r9,#0]
                  |L1.792|
;;;433          return (PNG_INFO_cHRM);
000318  2004              MOVS     r0,#4
                  |L1.794|
;;;434       }
;;;435       return (0);
;;;436    }
00031a  e8bd83f0          POP      {r4-r9,pc}
                  |L1.798|
00031e  e7ff              B        |L1.800|
                  |L1.800|
000320  2000              MOVS     r0,#0                 ;435
000322  e7fa              B        |L1.794|
;;;437    #endif
                          ENDP

                  png_get_gAMA PROC
;;;442    png_uint_32 PNGAPI
;;;443    png_get_gAMA(png_structp png_ptr, png_infop info_ptr, double *file_gamma)
000324  b570              PUSH     {r4-r6,lr}
;;;444    {
000326  4606              MOV      r6,r0
000328  460c              MOV      r4,r1
00032a  4615              MOV      r5,r2
;;;445       if (png_ptr != NULL && info_ptr != NULL && (info_ptr->valid & PNG_INFO_gAMA)
00032c  b166              CBZ      r6,|L1.840|
00032e  b15c              CBZ      r4,|L1.840|
000330  7a20              LDRB     r0,[r4,#8]
000332  f0000001          AND      r0,r0,#1
000336  b138              CBZ      r0,|L1.840|
;;;446          && file_gamma != NULL)
000338  b135              CBZ      r5,|L1.840|
;;;447       {
;;;448          png_debug1(1, "in %s retrieval function\n", "gAMA");
;;;449          *file_gamma = (double)info_ptr->gamma;
00033a  6aa0              LDR      r0,[r4,#0x28]
00033c  f7fffffe          BL       __aeabi_f2d
000340  e9c50100          STRD     r0,r1,[r5,#0]
;;;450          return (PNG_INFO_gAMA);
000344  2001              MOVS     r0,#1
                  |L1.838|
;;;451       }
;;;452       return (0);
;;;453    }
000346  bd70              POP      {r4-r6,pc}
                  |L1.840|
000348  2000              MOVS     r0,#0                 ;452
00034a  e7fc              B        |L1.838|
;;;454    #endif
                          ENDP

                  png_get_gAMA_fixed PROC
;;;456    png_uint_32 PNGAPI
;;;457    png_get_gAMA_fixed(png_structp png_ptr, png_infop info_ptr,
00034c  4603              MOV      r3,r0
;;;458        png_fixed_point *int_file_gamma)
;;;459    {
;;;460       if (png_ptr != NULL && info_ptr != NULL && (info_ptr->valid & PNG_INFO_gAMA)
00034e  b153              CBZ      r3,|L1.870|
000350  b149              CBZ      r1,|L1.870|
000352  7a08              LDRB     r0,[r1,#8]
000354  f0000001          AND      r0,r0,#1
000358  b128              CBZ      r0,|L1.870|
;;;461          && int_file_gamma != NULL)
00035a  b122              CBZ      r2,|L1.870|
;;;462       {
;;;463          png_debug1(1, "in %s retrieval function\n", "gAMA");
;;;464          *int_file_gamma = info_ptr->int_gamma;
00035c  f8d100fc          LDR      r0,[r1,#0xfc]
000360  6010              STR      r0,[r2,#0]
;;;465          return (PNG_INFO_gAMA);
000362  2001              MOVS     r0,#1
                  |L1.868|
;;;466       }
;;;467       return (0);
;;;468    }
000364  4770              BX       lr
                  |L1.870|
000366  2000              MOVS     r0,#0                 ;467
000368  e7fc              B        |L1.868|
;;;469    #endif
                          ENDP

                  png_get_sRGB PROC
;;;473    png_uint_32 PNGAPI
;;;474    png_get_sRGB(png_structp png_ptr, png_infop info_ptr, int *file_srgb_intent)
00036a  4603              MOV      r3,r0
;;;475    {
;;;476       if (png_ptr != NULL && info_ptr != NULL && (info_ptr->valid & PNG_INFO_sRGB)
00036c  b15b              CBZ      r3,|L1.902|
00036e  b151              CBZ      r1,|L1.902|
000370  8908              LDRH     r0,[r1,#8]
000372  f4006000          AND      r0,r0,#0x800
000376  b130              CBZ      r0,|L1.902|
;;;477          && file_srgb_intent != NULL)
000378  b12a              CBZ      r2,|L1.902|
;;;478       {
;;;479          png_debug1(1, "in %s retrieval function\n", "sRGB");
;;;480          *file_srgb_intent = (int)info_ptr->srgb_intent;
00037a  f891002c          LDRB     r0,[r1,#0x2c]
00037e  6010              STR      r0,[r2,#0]
;;;481          return (PNG_INFO_sRGB);
000380  f44f6000          MOV      r0,#0x800
                  |L1.900|
;;;482       }
;;;483       return (0);
;;;484    }
000384  4770              BX       lr
                  |L1.902|
000386  2000              MOVS     r0,#0                 ;483
000388  e7fc              B        |L1.900|
;;;485    #endif
                          ENDP

                  png_get_iCCP PROC
;;;488    png_uint_32 PNGAPI
;;;489    png_get_iCCP(png_structp png_ptr, png_infop info_ptr,
00038a  b570              PUSH     {r4-r6,lr}
;;;490                 png_charpp name, int *compression_type,
;;;491                 png_charpp profile, png_uint_32 *proflen)
;;;492    {
00038c  4605              MOV      r5,r0
00038e  e9dd4604          LDRD     r4,r6,[sp,#0x10]
;;;493       if (png_ptr != NULL && info_ptr != NULL && (info_ptr->valid & PNG_INFO_iCCP)
000392  b1a5              CBZ      r5,|L1.958|
000394  b199              CBZ      r1,|L1.958|
000396  8908              LDRH     r0,[r1,#8]
000398  f4005080          AND      r0,r0,#0x1000
00039c  b178              CBZ      r0,|L1.958|
;;;494          && name != NULL && profile != NULL && proflen != NULL)
00039e  b172              CBZ      r2,|L1.958|
0003a0  b16c              CBZ      r4,|L1.958|
0003a2  b166              CBZ      r6,|L1.958|
;;;495       {
;;;496          png_debug1(1, "in %s retrieval function\n", "iCCP");
;;;497          *name = info_ptr->iccp_name;
0003a4  f8510fc4          LDR      r0,[r1,#0xc4]!
0003a8  6010              STR      r0,[r2,#0]
;;;498          *profile = info_ptr->iccp_profile;
0003aa  6848              LDR      r0,[r1,#4]
0003ac  6020              STR      r0,[r4,#0]
;;;499          /* compression_type is a dummy so the API won't have to change
;;;500             if we introduce multiple compression types later. */
;;;501          *proflen = (int)info_ptr->iccp_proflen;
0003ae  6888              LDR      r0,[r1,#8]
0003b0  6030              STR      r0,[r6,#0]
;;;502          *compression_type = (int)info_ptr->iccp_compression;
0003b2  7b08              LDRB     r0,[r1,#0xc]
0003b4  39c4              SUBS     r1,r1,#0xc4
0003b6  6018              STR      r0,[r3,#0]
;;;503          return (PNG_INFO_iCCP);
0003b8  f44f5080          MOV      r0,#0x1000
                  |L1.956|
;;;504       }
;;;505       return (0);
;;;506    }
0003bc  bd70              POP      {r4-r6,pc}
                  |L1.958|
0003be  2000              MOVS     r0,#0                 ;505
0003c0  e7fc              B        |L1.956|
;;;507    #endif
                          ENDP

                  png_get_sPLT PROC
;;;510    png_uint_32 PNGAPI
;;;511    png_get_sPLT(png_structp png_ptr, png_infop info_ptr,
0003c2  4603              MOV      r3,r0
;;;512                 png_sPLT_tpp spalettes)
;;;513    {
;;;514       if (png_ptr != NULL && info_ptr != NULL && spalettes != NULL)
0003c4  b123              CBZ      r3,|L1.976|
0003c6  b119              CBZ      r1,|L1.976|
0003c8  b112              CBZ      r2,|L1.976|
;;;515         *spalettes = info_ptr->splt_palettes;
0003ca  f8d100d4          LDR      r0,[r1,#0xd4]
0003ce  6010              STR      r0,[r2,#0]
                  |L1.976|
;;;516       return ((png_uint_32)info_ptr->splt_palettes_num);
0003d0  f8d100d8          LDR      r0,[r1,#0xd8]
;;;517    }
0003d4  4770              BX       lr
;;;518    #endif
                          ENDP

                  png_get_hIST PROC
;;;521    png_uint_32 PNGAPI
;;;522    png_get_hIST(png_structp png_ptr, png_infop info_ptr, png_uint_16p *hist)
0003d6  4603              MOV      r3,r0
;;;523    {
;;;524       if (png_ptr != NULL && info_ptr != NULL && (info_ptr->valid & PNG_INFO_hIST)
0003d8  b14b              CBZ      r3,|L1.1006|
0003da  b141              CBZ      r1,|L1.1006|
0003dc  7a08              LDRB     r0,[r1,#8]
0003de  f0000040          AND      r0,r0,#0x40
0003e2  b120              CBZ      r0,|L1.1006|
;;;525          && hist != NULL)
0003e4  b11a              CBZ      r2,|L1.1006|
;;;526       {
;;;527          png_debug1(1, "in %s retrieval function\n", "hIST");
;;;528          *hist = info_ptr->hist;
0003e6  6fc8              LDR      r0,[r1,#0x7c]
0003e8  6010              STR      r0,[r2,#0]
;;;529          return (PNG_INFO_hIST);
0003ea  2040              MOVS     r0,#0x40
                  |L1.1004|
;;;530       }
;;;531       return (0);
;;;532    }
0003ec  4770              BX       lr
                  |L1.1006|
0003ee  2000              MOVS     r0,#0                 ;531
0003f0  e7fc              B        |L1.1004|
;;;533    #endif
                          ENDP

                  png_get_IHDR PROC
;;;535    png_uint_32 PNGAPI
;;;536    png_get_IHDR(png_structp png_ptr, png_infop info_ptr,
0003f2  e92d5fff          PUSH     {r0-r12,lr}
;;;537       png_uint_32 *width, png_uint_32 *height, int *bit_depth,
;;;538       int *color_type, int *interlace_type, int *compression_type,
;;;539       int *filter_type)
;;;540    
;;;541    {
0003f6  460c              MOV      r4,r1
0003f8  4615              MOV      r5,r2
0003fa  461e              MOV      r6,r3
0003fc  af0e              ADD      r7,sp,#0x38
0003fe  e8970f80          LDM      r7,{r7-r11}
;;;542       if (png_ptr != NULL && info_ptr != NULL && width != NULL && height != NULL &&
000402  9800              LDR      r0,[sp,#0]
000404  2800              CMP      r0,#0
000406  d056              BEQ      |L1.1206|
000408  2c00              CMP      r4,#0
00040a  d054              BEQ      |L1.1206|
00040c  2d00              CMP      r5,#0
00040e  d052              BEQ      |L1.1206|
000410  2e00              CMP      r6,#0
000412  d050              BEQ      |L1.1206|
;;;543          bit_depth != NULL && color_type != NULL)
000414  2f00              CMP      r7,#0
000416  d04e              BEQ      |L1.1206|
000418  f1b80f00          CMP      r8,#0
00041c  d04b              BEQ      |L1.1206|
;;;544       {
;;;545          png_debug1(1, "in %s retrieval function\n", "IHDR");
;;;546          *width = info_ptr->width;
00041e  6820              LDR      r0,[r4,#0]
000420  6028              STR      r0,[r5,#0]
;;;547          *height = info_ptr->height;
000422  6860              LDR      r0,[r4,#4]
000424  6030              STR      r0,[r6,#0]
;;;548          *bit_depth = info_ptr->bit_depth;
000426  7e20              LDRB     r0,[r4,#0x18]
000428  6038              STR      r0,[r7,#0]
;;;549          if (info_ptr->bit_depth < 1 || info_ptr->bit_depth > 16)
00042a  7e20              LDRB     r0,[r4,#0x18]
00042c  2801              CMP      r0,#1
00042e  db02              BLT      |L1.1078|
000430  7e20              LDRB     r0,[r4,#0x18]
000432  2810              CMP      r0,#0x10
000434  dd03              BLE      |L1.1086|
                  |L1.1078|
;;;550            png_error(png_ptr, "Invalid bit depth");
000436  a1b6              ADR      r1,|L1.1808|
000438  9800              LDR      r0,[sp,#0]
00043a  f7fffffe          BL       png_error
                  |L1.1086|
;;;551          *color_type = info_ptr->color_type;
00043e  7e60              LDRB     r0,[r4,#0x19]
000440  f8c80000          STR      r0,[r8,#0]
;;;552          if (info_ptr->color_type > 6)
000444  7e60              LDRB     r0,[r4,#0x19]
000446  2806              CMP      r0,#6
000448  dd03              BLE      |L1.1106|
;;;553            png_error(png_ptr, "Invalid color type");
00044a  a1b6              ADR      r1,|L1.1828|
00044c  9800              LDR      r0,[sp,#0]
00044e  f7fffffe          BL       png_error
                  |L1.1106|
;;;554          if (compression_type != NULL)
000452  f1ba0f00          CMP      r10,#0
000456  d002              BEQ      |L1.1118|
;;;555             *compression_type = info_ptr->compression_type;
000458  7ea0              LDRB     r0,[r4,#0x1a]
00045a  f8ca0000          STR      r0,[r10,#0]
                  |L1.1118|
;;;556          if (filter_type != NULL)
00045e  f1bb0f00          CMP      r11,#0
000462  d002              BEQ      |L1.1130|
;;;557             *filter_type = info_ptr->filter_type;
000464  7ee0              LDRB     r0,[r4,#0x1b]
000466  f8cb0000          STR      r0,[r11,#0]
                  |L1.1130|
;;;558          if (interlace_type != NULL)
00046a  f1b90f00          CMP      r9,#0
00046e  d002              BEQ      |L1.1142|
;;;559             *interlace_type = info_ptr->interlace_type;
000470  7f20              LDRB     r0,[r4,#0x1c]
000472  f8c90000          STR      r0,[r9,#0]
                  |L1.1142|
;;;560    
;;;561          /* check for potential overflow of rowbytes */
;;;562          if (*width == 0 || *width > PNG_UINT_31_MAX)
000476  6828              LDR      r0,[r5,#0]
000478  b118              CBZ      r0,|L1.1154|
00047a  6828              LDR      r0,[r5,#0]
00047c  f1b04f00          CMP      r0,#0x80000000
000480  d303              BCC      |L1.1162|
                  |L1.1154|
;;;563            png_error(png_ptr, "Invalid image width");
000482  a1ad              ADR      r1,|L1.1848|
000484  9800              LDR      r0,[sp,#0]
000486  f7fffffe          BL       png_error
                  |L1.1162|
;;;564          if (*height == 0 || *height > PNG_UINT_31_MAX)
00048a  6830              LDR      r0,[r6,#0]
00048c  b118              CBZ      r0,|L1.1174|
00048e  6830              LDR      r0,[r6,#0]
000490  f1b04f00          CMP      r0,#0x80000000
000494  d303              BCC      |L1.1182|
                  |L1.1174|
;;;565            png_error(png_ptr, "Invalid image height");
000496  a1ad              ADR      r1,|L1.1868|
000498  9800              LDR      r0,[sp,#0]
00049a  f7fffffe          BL       png_error
                  |L1.1182|
;;;566          if (info_ptr->width > (PNG_UINT_32_MAX
00049e  49b1              LDR      r1,|L1.1892|
0004a0  6820              LDR      r0,[r4,#0]
0004a2  4288              CMP      r0,r1
0004a4  d903              BLS      |L1.1198|
;;;567                     >> 3)      /* 8-byte RGBA pixels */
;;;568                     - 64       /* bigrowbuf hack */
;;;569                     - 1        /* filter byte */
;;;570                     - 7*8      /* rounding of width to multiple of 8 pixels */
;;;571                     - 8)       /* extra max_pixel_depth pad */
;;;572          {
;;;573             png_warning(png_ptr,
0004a6  a1b0              ADR      r1,|L1.1896|
0004a8  9800              LDR      r0,[sp,#0]
0004aa  f7fffffe          BL       png_warning
                  |L1.1198|
;;;574                "Width too large for libpng to process image data.");
;;;575          }
;;;576          return (1);
0004ae  2001              MOVS     r0,#1
                  |L1.1200|
;;;577       }
;;;578       return (0);
;;;579    }
0004b0  b004              ADD      sp,sp,#0x10
0004b2  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.1206|
0004b6  2000              MOVS     r0,#0                 ;578
0004b8  e7fa              B        |L1.1200|
;;;580    
                          ENDP

                  png_get_oFFs PROC
;;;582    png_uint_32 PNGAPI
;;;583    png_get_oFFs(png_structp png_ptr, png_infop info_ptr,
0004ba  b530              PUSH     {r4,r5,lr}
;;;584       png_int_32 *offset_x, png_int_32 *offset_y, int *unit_type)
;;;585    {
0004bc  4605              MOV      r5,r0
0004be  9c03              LDR      r4,[sp,#0xc]
;;;586       if (png_ptr != NULL && info_ptr != NULL && (info_ptr->valid & PNG_INFO_oFFs)
0004c0  b18d              CBZ      r5,|L1.1254|
0004c2  b181              CBZ      r1,|L1.1254|
0004c4  8908              LDRH     r0,[r1,#8]
0004c6  f4007080          AND      r0,r0,#0x100
0004ca  b160              CBZ      r0,|L1.1254|
;;;587          && offset_x != NULL && offset_y != NULL && unit_type != NULL)
0004cc  b15a              CBZ      r2,|L1.1254|
0004ce  b153              CBZ      r3,|L1.1254|
0004d0  b14c              CBZ      r4,|L1.1254|
;;;588       {
;;;589          png_debug1(1, "in %s retrieval function\n", "oFFs");
;;;590          *offset_x = info_ptr->x_offset;
0004d2  6e48              LDR      r0,[r1,#0x64]
0004d4  6010              STR      r0,[r2,#0]
;;;591          *offset_y = info_ptr->y_offset;
0004d6  6e88              LDR      r0,[r1,#0x68]
0004d8  6018              STR      r0,[r3,#0]
;;;592          *unit_type = (int)info_ptr->offset_unit_type;
0004da  f891006c          LDRB     r0,[r1,#0x6c]
0004de  6020              STR      r0,[r4,#0]
;;;593          return (PNG_INFO_oFFs);
0004e0  f44f7080          MOV      r0,#0x100
                  |L1.1252|
;;;594       }
;;;595       return (0);
;;;596    }
0004e4  bd30              POP      {r4,r5,pc}
                  |L1.1254|
0004e6  2000              MOVS     r0,#0                 ;595
0004e8  e7fc              B        |L1.1252|
;;;597    #endif
                          ENDP

                  png_get_pCAL PROC
;;;600    png_uint_32 PNGAPI
;;;601    png_get_pCAL(png_structp png_ptr, png_infop info_ptr,
0004ea  e92d41f0          PUSH     {r4-r8,lr}
;;;602       png_charp *purpose, png_int_32 *X0, png_int_32 *X1, int *type, int *nparams,
;;;603       png_charp *units, png_charpp *params)
;;;604    {
0004ee  4680              MOV      r8,r0
0004f0  ac06              ADD      r4,sp,#0x18
0004f2  e89410f0          LDM      r4,{r4-r7,r12}
;;;605       if (png_ptr != NULL && info_ptr != NULL && (info_ptr->valid & PNG_INFO_pCAL)
0004f6  f1b80f00          CMP      r8,#0
0004fa  d022              BEQ      |L1.1346|
0004fc  b309              CBZ      r1,|L1.1346|
0004fe  8908              LDRH     r0,[r1,#8]
000500  f4006080          AND      r0,r0,#0x400
000504  b1e8              CBZ      r0,|L1.1346|
;;;606          && purpose != NULL && X0 != NULL && X1 != NULL && type != NULL &&
000506  b1e2              CBZ      r2,|L1.1346|
000508  b1db              CBZ      r3,|L1.1346|
00050a  b1d4              CBZ      r4,|L1.1346|
00050c  b1cd              CBZ      r5,|L1.1346|
;;;607          nparams != NULL && units != NULL && params != NULL)
00050e  b1c6              CBZ      r6,|L1.1346|
000510  b1bf              CBZ      r7,|L1.1346|
000512  f1bc0f00          CMP      r12,#0
000516  d014              BEQ      |L1.1346|
;;;608       {
;;;609          png_debug1(1, "in %s retrieval function\n", "pCAL");
;;;610          *purpose = info_ptr->pcal_purpose;
000518  f8510fa0          LDR      r0,[r1,#0xa0]!
00051c  6010              STR      r0,[r2,#0]
;;;611          *X0 = info_ptr->pcal_X0;
00051e  6848              LDR      r0,[r1,#4]
000520  6018              STR      r0,[r3,#0]
;;;612          *X1 = info_ptr->pcal_X1;
000522  6888              LDR      r0,[r1,#8]
000524  6020              STR      r0,[r4,#0]
;;;613          *type = (int)info_ptr->pcal_type;
000526  7d08              LDRB     r0,[r1,#0x14]
000528  6028              STR      r0,[r5,#0]
;;;614          *nparams = (int)info_ptr->pcal_nparams;
00052a  7d48              LDRB     r0,[r1,#0x15]
00052c  6030              STR      r0,[r6,#0]
;;;615          *units = info_ptr->pcal_units;
00052e  68c8              LDR      r0,[r1,#0xc]
000530  6038              STR      r0,[r7,#0]
;;;616          *params = info_ptr->pcal_params;
000532  6908              LDR      r0,[r1,#0x10]
000534  39a0              SUBS     r1,r1,#0xa0
000536  f8cc0000          STR      r0,[r12,#0]
;;;617          return (PNG_INFO_pCAL);
00053a  f44f6080          MOV      r0,#0x400
                  |L1.1342|
;;;618       }
;;;619       return (0);
;;;620    }
00053e  e8bd81f0          POP      {r4-r8,pc}
                  |L1.1346|
000542  2000              MOVS     r0,#0                 ;619
000544  e7fb              B        |L1.1342|
;;;621    #endif
                          ENDP

                  png_get_sCAL PROC
;;;625    png_uint_32 PNGAPI
;;;626    png_get_sCAL(png_structp png_ptr, png_infop info_ptr,
000546  b570              PUSH     {r4-r6,lr}
;;;627                 int *unit, double *width, double *height)
;;;628    {
000548  4604              MOV      r4,r0
00054a  9d04              LDR      r5,[sp,#0x10]
;;;629        if (png_ptr != NULL && info_ptr != NULL &&
00054c  b19c              CBZ      r4,|L1.1398|
00054e  b191              CBZ      r1,|L1.1398|
;;;630           (info_ptr->valid & PNG_INFO_sCAL))
000550  8908              LDRH     r0,[r1,#8]
000552  f4004080          AND      r0,r0,#0x4000
000556  b170              CBZ      r0,|L1.1398|
;;;631        {
;;;632            *unit = info_ptr->scal_unit;
000558  f8110fdc          LDRB     r0,[r1,#0xdc]!
00055c  6010              STR      r0,[r2,#0]
;;;633            *width = info_ptr->scal_pixel_width;
00055e  e9d10601          LDRD     r0,r6,[r1,#4]
000562  e9c30600          STRD     r0,r6,[r3,#0]
;;;634            *height = info_ptr->scal_pixel_height;
000566  e9d16003          LDRD     r6,r0,[r1,#0xc]
00056a  39dc              SUBS     r1,r1,#0xdc
00056c  e9c56000          STRD     r6,r0,[r5,#0]
;;;635            return (PNG_INFO_sCAL);
000570  f44f4080          MOV      r0,#0x4000
                  |L1.1396|
;;;636        }
;;;637        return(0);
;;;638    }
000574  bd70              POP      {r4-r6,pc}
                  |L1.1398|
000576  2000              MOVS     r0,#0                 ;637
000578  e7fc              B        |L1.1396|
;;;639    #else
                          ENDP

                  png_get_pHYs PROC
;;;660    png_uint_32 PNGAPI
;;;661    png_get_pHYs(png_structp png_ptr, png_infop info_ptr,
00057a  b570              PUSH     {r4-r6,lr}
;;;662       png_uint_32 *res_x, png_uint_32 *res_y, int *unit_type)
;;;663    {
00057c  4605              MOV      r5,r0
00057e  9c04              LDR      r4,[sp,#0x10]
;;;664       png_uint_32 retval = 0;
000580  2000              MOVS     r0,#0
;;;665    
;;;666       if (png_ptr != NULL && info_ptr != NULL &&
000582  b1a5              CBZ      r5,|L1.1454|
000584  b199              CBZ      r1,|L1.1454|
;;;667          (info_ptr->valid & PNG_INFO_pHYs))
000586  7a0e              LDRB     r6,[r1,#8]
000588  f0060680          AND      r6,r6,#0x80
00058c  b17e              CBZ      r6,|L1.1454|
;;;668       {
;;;669          png_debug1(1, "in %s retrieval function\n", "pHYs");
;;;670          if (res_x != NULL)
00058e  b11a              CBZ      r2,|L1.1432|
;;;671          {
;;;672             *res_x = info_ptr->x_pixels_per_unit;
000590  6f0e              LDR      r6,[r1,#0x70]
000592  6016              STR      r6,[r2,#0]
;;;673             retval |= PNG_INFO_pHYs;
000594  f0400080          ORR      r0,r0,#0x80
                  |L1.1432|
;;;674          }
;;;675          if (res_y != NULL)
000598  b11b              CBZ      r3,|L1.1442|
;;;676          {
;;;677             *res_y = info_ptr->y_pixels_per_unit;
00059a  6f4e              LDR      r6,[r1,#0x74]
00059c  601e              STR      r6,[r3,#0]
;;;678             retval |= PNG_INFO_pHYs;
00059e  f0400080          ORR      r0,r0,#0x80
                  |L1.1442|
;;;679          }
;;;680          if (unit_type != NULL)
0005a2  b124              CBZ      r4,|L1.1454|
;;;681          {
;;;682             *unit_type = (int)info_ptr->phys_unit_type;
0005a4  f8916078          LDRB     r6,[r1,#0x78]
0005a8  6026              STR      r6,[r4,#0]
;;;683             retval |= PNG_INFO_pHYs;
0005aa  f0400080          ORR      r0,r0,#0x80
                  |L1.1454|
;;;684          }
;;;685       }
;;;686       return (retval);
;;;687    }
0005ae  bd70              POP      {r4-r6,pc}
;;;688    #endif
                          ENDP

                  png_get_PLTE PROC
;;;690    png_uint_32 PNGAPI
;;;691    png_get_PLTE(png_structp png_ptr, png_infop info_ptr, png_colorp *palette,
0005b0  b510              PUSH     {r4,lr}
;;;692       int *num_palette)
;;;693    {
0005b2  4604              MOV      r4,r0
;;;694       if (png_ptr != NULL && info_ptr != NULL && (info_ptr->valid & PNG_INFO_PLTE)
0005b4  b15c              CBZ      r4,|L1.1486|
0005b6  b151              CBZ      r1,|L1.1486|
0005b8  7a08              LDRB     r0,[r1,#8]
0005ba  f0000008          AND      r0,r0,#8
0005be  b130              CBZ      r0,|L1.1486|
;;;695           && palette != NULL)
0005c0  b12a              CBZ      r2,|L1.1486|
;;;696       {
;;;697          png_debug1(1, "in %s retrieval function\n", "PLTE");
;;;698          *palette = info_ptr->palette;
0005c2  6908              LDR      r0,[r1,#0x10]
0005c4  6010              STR      r0,[r2,#0]
;;;699          *num_palette = info_ptr->num_palette;
0005c6  8a88              LDRH     r0,[r1,#0x14]
0005c8  6018              STR      r0,[r3,#0]
;;;700          png_debug1(3, "num_palette = %d\n", *num_palette);
;;;701          return (PNG_INFO_PLTE);
0005ca  2008              MOVS     r0,#8
                  |L1.1484|
;;;702       }
;;;703       return (0);
;;;704    }
0005cc  bd10              POP      {r4,pc}
                  |L1.1486|
0005ce  2000              MOVS     r0,#0                 ;703
0005d0  e7fc              B        |L1.1484|
;;;705    
                          ENDP

                  png_get_sBIT PROC
;;;707    png_uint_32 PNGAPI
;;;708    png_get_sBIT(png_structp png_ptr, png_infop info_ptr, png_color_8p *sig_bit)
0005d2  4603              MOV      r3,r0
;;;709    {
;;;710       if (png_ptr != NULL && info_ptr != NULL && (info_ptr->valid & PNG_INFO_sBIT)
0005d4  b153              CBZ      r3,|L1.1516|
0005d6  b149              CBZ      r1,|L1.1516|
0005d8  7a08              LDRB     r0,[r1,#8]
0005da  f0000002          AND      r0,r0,#2
0005de  b128              CBZ      r0,|L1.1516|
;;;711          && sig_bit != NULL)
0005e0  b122              CBZ      r2,|L1.1516|
;;;712       {
;;;713          png_debug1(1, "in %s retrieval function\n", "sBIT");
;;;714          *sig_bit = &(info_ptr->sig_bit);
0005e2  f1010044          ADD      r0,r1,#0x44
0005e6  6010              STR      r0,[r2,#0]
;;;715          return (PNG_INFO_sBIT);
0005e8  2002              MOVS     r0,#2
                  |L1.1514|
;;;716       }
;;;717       return (0);
;;;718    }
0005ea  4770              BX       lr
                  |L1.1516|
0005ec  2000              MOVS     r0,#0                 ;717
0005ee  e7fc              B        |L1.1514|
;;;719    #endif
                          ENDP

                  png_get_text PROC
;;;722    png_uint_32 PNGAPI
;;;723    png_get_text(png_structp png_ptr, png_infop info_ptr, png_textp *text_ptr,
0005f0  b510              PUSH     {r4,lr}
;;;724       int *num_text)
;;;725    {
0005f2  4604              MOV      r4,r0
;;;726       if (png_ptr != NULL && info_ptr != NULL && info_ptr->num_text > 0)
0005f4  b15c              CBZ      r4,|L1.1550|
0005f6  b151              CBZ      r1,|L1.1550|
0005f8  6b08              LDR      r0,[r1,#0x30]
0005fa  2800              CMP      r0,#0
0005fc  dd07              BLE      |L1.1550|
;;;727       {
;;;728          png_debug1(1, "in %s retrieval function\n",
;;;729             (png_ptr->chunk_name[0] == '\0' ? "text"
;;;730                 : (png_const_charp)png_ptr->chunk_name));
;;;731          if (text_ptr != NULL)
0005fe  b10a              CBZ      r2,|L1.1540|
;;;732             *text_ptr = info_ptr->text;
000600  6b88              LDR      r0,[r1,#0x38]
000602  6010              STR      r0,[r2,#0]
                  |L1.1540|
;;;733          if (num_text != NULL)
000604  b10b              CBZ      r3,|L1.1546|
;;;734             *num_text = info_ptr->num_text;
000606  6b08              LDR      r0,[r1,#0x30]
000608  6018              STR      r0,[r3,#0]
                  |L1.1546|
;;;735          return ((png_uint_32)info_ptr->num_text);
00060a  6b08              LDR      r0,[r1,#0x30]
                  |L1.1548|
;;;736       }
;;;737       if (num_text != NULL)
;;;738         *num_text = 0;
;;;739       return(0);
;;;740    }
00060c  bd10              POP      {r4,pc}
                  |L1.1550|
00060e  b10b              CBZ      r3,|L1.1556|
000610  2000              MOVS     r0,#0                 ;738
000612  6018              STR      r0,[r3,#0]            ;738
                  |L1.1556|
000614  2000              MOVS     r0,#0                 ;739
000616  e7f9              B        |L1.1548|
;;;741    #endif
                          ENDP

                  png_get_tIME PROC
;;;744    png_uint_32 PNGAPI
;;;745    png_get_tIME(png_structp png_ptr, png_infop info_ptr, png_timep *mod_time)
000618  4603              MOV      r3,r0
;;;746    {
;;;747       if (png_ptr != NULL && info_ptr != NULL && (info_ptr->valid & PNG_INFO_tIME)
00061a  b15b              CBZ      r3,|L1.1588|
00061c  b151              CBZ      r1,|L1.1588|
00061e  8908              LDRH     r0,[r1,#8]
000620  f4007000          AND      r0,r0,#0x200
000624  b130              CBZ      r0,|L1.1588|
;;;748           && mod_time != NULL)
000626  b12a              CBZ      r2,|L1.1588|
;;;749       {
;;;750          png_debug1(1, "in %s retrieval function\n", "tIME");
;;;751          *mod_time = &(info_ptr->mod_time);
000628  f101003c          ADD      r0,r1,#0x3c
00062c  6010              STR      r0,[r2,#0]
;;;752          return (PNG_INFO_tIME);
00062e  f44f7000          MOV      r0,#0x200
                  |L1.1586|
;;;753       }
;;;754       return (0);
;;;755    }
000632  4770              BX       lr
                  |L1.1588|
000634  2000              MOVS     r0,#0                 ;754
000636  e7fc              B        |L1.1586|
;;;756    #endif
                          ENDP

                  png_get_tRNS PROC
;;;759    png_uint_32 PNGAPI
;;;760    png_get_tRNS(png_structp png_ptr, png_infop info_ptr,
000638  b570              PUSH     {r4-r6,lr}
;;;761       png_bytep *trans, int *num_trans, png_color_16p *trans_values)
;;;762    {
00063a  4605              MOV      r5,r0
00063c  9c04              LDR      r4,[sp,#0x10]
;;;763       png_uint_32 retval = 0;
00063e  2000              MOVS     r0,#0
;;;764       if (png_ptr != NULL && info_ptr != NULL && (info_ptr->valid & PNG_INFO_tRNS))
000640  b1fd              CBZ      r5,|L1.1666|
000642  b1f1              CBZ      r1,|L1.1666|
000644  7a0e              LDRB     r6,[r1,#8]
000646  f0060610          AND      r6,r6,#0x10
00064a  b1d6              CBZ      r6,|L1.1666|
;;;765       {
;;;766          png_debug1(1, "in %s retrieval function\n", "tRNS");
;;;767          if (info_ptr->color_type == PNG_COLOR_TYPE_PALETTE)
00064c  7e4e              LDRB     r6,[r1,#0x19]
00064e  2e03              CMP      r6,#3
000650  d109              BNE      |L1.1638|
;;;768          {
;;;769              if (trans != NULL)
000652  b11a              CBZ      r2,|L1.1628|
;;;770              {
;;;771                 *trans = info_ptr->trans;
000654  6cce              LDR      r6,[r1,#0x4c]
000656  6016              STR      r6,[r2,#0]
;;;772                 retval |= PNG_INFO_tRNS;
000658  f0400010          ORR      r0,r0,#0x10
                  |L1.1628|
;;;773              }
;;;774              if (trans_values != NULL)
00065c  b164              CBZ      r4,|L1.1656|
;;;775                 *trans_values = &(info_ptr->trans_values);
00065e  f1010650          ADD      r6,r1,#0x50
000662  6026              STR      r6,[r4,#0]
000664  e008              B        |L1.1656|
                  |L1.1638|
;;;776          }
;;;777          else /* if (info_ptr->color_type != PNG_COLOR_TYPE_PALETTE) */
;;;778          {
;;;779              if (trans_values != NULL)
000666  b124              CBZ      r4,|L1.1650|
;;;780              {
;;;781                 *trans_values = &(info_ptr->trans_values);
000668  f1010650          ADD      r6,r1,#0x50
00066c  6026              STR      r6,[r4,#0]
;;;782                 retval |= PNG_INFO_tRNS;
00066e  f0400010          ORR      r0,r0,#0x10
                  |L1.1650|
;;;783              }
;;;784              if(trans != NULL)
000672  b10a              CBZ      r2,|L1.1656|
;;;785                 *trans = NULL;
000674  2600              MOVS     r6,#0
000676  6016              STR      r6,[r2,#0]
                  |L1.1656|
;;;786          }
;;;787          if(num_trans != NULL)
000678  b11b              CBZ      r3,|L1.1666|
;;;788          {
;;;789             *num_trans = info_ptr->num_trans;
00067a  8ace              LDRH     r6,[r1,#0x16]
00067c  601e              STR      r6,[r3,#0]
;;;790             retval |= PNG_INFO_tRNS;
00067e  f0400010          ORR      r0,r0,#0x10
                  |L1.1666|
;;;791          }
;;;792       }
;;;793       return (retval);
;;;794    }
000682  bd70              POP      {r4-r6,pc}
;;;795    #endif
                          ENDP

                  png_get_unknown_chunks PROC
;;;798    png_uint_32 PNGAPI
;;;799    png_get_unknown_chunks(png_structp png_ptr, png_infop info_ptr,
000684  4603              MOV      r3,r0
;;;800                 png_unknown_chunkpp unknowns)
;;;801    {
;;;802       if (png_ptr != NULL && info_ptr != NULL && unknowns != NULL)
000686  b123              CBZ      r3,|L1.1682|
000688  b119              CBZ      r1,|L1.1682|
00068a  b112              CBZ      r2,|L1.1682|
;;;803         *unknowns = info_ptr->unknown_chunks;
00068c  f8d100bc          LDR      r0,[r1,#0xbc]
000690  6010              STR      r0,[r2,#0]
                  |L1.1682|
;;;804       return ((png_uint_32)info_ptr->unknown_chunks_num);
000692  f8d100c0          LDR      r0,[r1,#0xc0]
;;;805    }
000696  4770              BX       lr
;;;806    #endif
                          ENDP

                  png_get_rgb_to_gray_status PROC
;;;809    png_byte PNGAPI
;;;810    png_get_rgb_to_gray_status (png_structp png_ptr)
000698  4601              MOV      r1,r0
;;;811    {
;;;812       return (png_byte)(png_ptr? png_ptr->rgb_to_gray_status : 0);
00069a  b111              CBZ      r1,|L1.1698|
00069c  f8910364          LDRB     r0,[r1,#0x364]
                  |L1.1696|
;;;813    }
0006a0  4770              BX       lr
                  |L1.1698|
0006a2  2000              MOVS     r0,#0                 ;812
0006a4  e7fc              B        |L1.1696|
;;;814    #endif
                          ENDP

                  png_get_user_chunk_ptr PROC
;;;817    png_voidp PNGAPI
;;;818    png_get_user_chunk_ptr(png_structp png_ptr)
0006a6  4601              MOV      r1,r0
;;;819    {
;;;820       return (png_ptr? png_ptr->user_chunk_ptr : NULL);
0006a8  b111              CBZ      r1,|L1.1712|
0006aa  f8d10354          LDR      r0,[r1,#0x354]
                  |L1.1710|
;;;821    }
0006ae  4770              BX       lr
                  |L1.1712|
0006b0  2000              MOVS     r0,#0                 ;820
0006b2  e7fc              B        |L1.1710|
;;;822    #endif
                          ENDP

                  png_get_compression_buffer_size PROC
;;;825    png_uint_32 PNGAPI
;;;826    png_get_compression_buffer_size(png_structp png_ptr)
0006b4  4601              MOV      r1,r0
;;;827    {
;;;828       return (png_uint_32)(png_ptr? png_ptr->zbuf_size : 0L);
0006b6  b111              CBZ      r1,|L1.1726|
0006b8  f8d101f0          LDR      r0,[r1,#0x1f0]
                  |L1.1724|
;;;829    }
0006bc  4770              BX       lr
                  |L1.1726|
0006be  2000              MOVS     r0,#0                 ;828
0006c0  e7fc              B        |L1.1724|
;;;830    #endif
                          ENDP

                  png_get_asm_flags PROC
;;;835    png_uint_32 PNGAPI
;;;836    png_get_asm_flags (png_structp png_ptr)
0006c2  4601              MOV      r1,r0
;;;837    {
;;;838    #ifdef PNG_MMX_CODE_SUPPORTED
;;;839        return (png_uint_32)(png_ptr? png_ptr->asm_flags : 0L);
;;;840    #else
;;;841        return (png_ptr? 0L: 0L);
0006c4  b109              CBZ      r1,|L1.1738|
0006c6  2000              MOVS     r0,#0
                  |L1.1736|
;;;842    #endif
;;;843    }
0006c8  4770              BX       lr
                  |L1.1738|
0006ca  2000              MOVS     r0,#0                 ;841
0006cc  e7fc              B        |L1.1736|
;;;844    
                          ENDP

                  png_get_asm_flagmask PROC
;;;846    png_uint_32 PNGAPI
;;;847    png_get_asm_flagmask (int flag_select)
0006ce  4601              MOV      r1,r0
;;;848    {
;;;849    #ifdef PNG_MMX_CODE_SUPPORTED
;;;850        png_uint_32 settable_asm_flags = 0;
;;;851    
;;;852        if (flag_select & PNG_SELECT_READ)
;;;853            settable_asm_flags |=
;;;854              PNG_ASM_FLAG_MMX_READ_COMBINE_ROW  |
;;;855              PNG_ASM_FLAG_MMX_READ_INTERLACE    |
;;;856              PNG_ASM_FLAG_MMX_READ_FILTER_SUB   |
;;;857              PNG_ASM_FLAG_MMX_READ_FILTER_UP    |
;;;858              PNG_ASM_FLAG_MMX_READ_FILTER_AVG   |
;;;859              PNG_ASM_FLAG_MMX_READ_FILTER_PAETH ;
;;;860              /* no non-MMX flags yet */
;;;861    
;;;862    #if 0
;;;863        /* GRR:  no write-flags yet, either, but someday... */
;;;864        if (flag_select & PNG_SELECT_WRITE)
;;;865            settable_asm_flags |=
;;;866              PNG_ASM_FLAG_MMX_WRITE_ [whatever] ;
;;;867    #endif /* 0 */
;;;868    
;;;869        return settable_asm_flags;  /* _theoretically_ settable capabilities only */
;;;870    #else
;;;871        return (0L);
0006d0  2000              MOVS     r0,#0
;;;872    #endif /* PNG_MMX_CODE_SUPPORTED */
;;;873    }
0006d2  4770              BX       lr
;;;874    
                          ENDP

                  png_get_mmx_flagmask PROC
;;;878    png_uint_32 PNGAPI
;;;879    png_get_mmx_flagmask (int flag_select, int *compilerID)
0006d4  4602              MOV      r2,r0
;;;880    {
;;;881    #if defined(PNG_MMX_CODE_SUPPORTED)
;;;882        png_uint_32 settable_mmx_flags = 0;
;;;883    
;;;884        if (flag_select & PNG_SELECT_READ)
;;;885            settable_mmx_flags |=
;;;886              PNG_ASM_FLAG_MMX_READ_COMBINE_ROW  |
;;;887              PNG_ASM_FLAG_MMX_READ_INTERLACE    |
;;;888              PNG_ASM_FLAG_MMX_READ_FILTER_SUB   |
;;;889              PNG_ASM_FLAG_MMX_READ_FILTER_UP    |
;;;890              PNG_ASM_FLAG_MMX_READ_FILTER_AVG   |
;;;891              PNG_ASM_FLAG_MMX_READ_FILTER_PAETH ;
;;;892    #if 0
;;;893        /* GRR:  no MMX write support yet, but someday... */
;;;894        if (flag_select & PNG_SELECT_WRITE)
;;;895            settable_mmx_flags |=
;;;896              PNG_ASM_FLAG_MMX_WRITE_ [whatever] ;
;;;897    #endif /* 0 */
;;;898    
;;;899        if (compilerID != NULL) {
;;;900    #ifdef PNG_USE_PNGVCRD
;;;901            *compilerID = 1;    /* MSVC */
;;;902    #else
;;;903    #ifdef PNG_USE_PNGGCCRD
;;;904            *compilerID = 2;    /* gcc/gas */
;;;905    #else
;;;906            *compilerID = -1;   /* unknown (i.e., no asm/MMX code compiled) */
;;;907    #endif
;;;908    #endif
;;;909        }
;;;910    
;;;911        return settable_mmx_flags;  /* _theoretically_ settable capabilities only */
;;;912    #else
;;;913        return (0L);
0006d6  2000              MOVS     r0,#0
;;;914    #endif /* ?PNG_MMX_CODE_SUPPORTED */
;;;915    }
0006d8  4770              BX       lr
;;;916    
                          ENDP

                  png_get_mmx_bitdepth_threshold PROC
;;;918    png_byte PNGAPI
;;;919    png_get_mmx_bitdepth_threshold (png_structp png_ptr)
0006da  4601              MOV      r1,r0
;;;920    {
;;;921    #if defined(PNG_MMX_CODE_SUPPORTED)
;;;922        return (png_byte)(png_ptr? png_ptr->mmx_bitdepth_threshold : 0);
;;;923    #else
;;;924        return (png_ptr? 0: 0);
0006dc  b109              CBZ      r1,|L1.1762|
0006de  2000              MOVS     r0,#0
                  |L1.1760|
;;;925    #endif /* ?PNG_MMX_CODE_SUPPORTED */
;;;926    }
0006e0  4770              BX       lr
                  |L1.1762|
0006e2  2000              MOVS     r0,#0                 ;924
0006e4  e7fc              B        |L1.1760|
;;;927    
                          ENDP

                  png_get_mmx_rowbytes_threshold PROC
;;;929    png_uint_32 PNGAPI
;;;930    png_get_mmx_rowbytes_threshold (png_structp png_ptr)
0006e6  4601              MOV      r1,r0
;;;931    {
;;;932    #if defined(PNG_MMX_CODE_SUPPORTED)
;;;933        return (png_uint_32)(png_ptr? png_ptr->mmx_rowbytes_threshold : 0L);
;;;934    #else
;;;935        return (png_ptr? 0L: 0L);
0006e8  b109              CBZ      r1,|L1.1774|
0006ea  2000              MOVS     r0,#0
                  |L1.1772|
;;;936    #endif /* ?PNG_MMX_CODE_SUPPORTED */
;;;937    }
0006ec  4770              BX       lr
                  |L1.1774|
0006ee  2000              MOVS     r0,#0                 ;935
0006f0  e7fc              B        |L1.1772|
;;;938    #endif /* ?PNG_1_0_X */
                          ENDP

                  png_get_user_width_max PROC
;;;943    png_uint_32 PNGAPI
;;;944    png_get_user_width_max (png_structp png_ptr)
0006f2  4601              MOV      r1,r0
;;;945    {
;;;946        return (png_ptr? png_ptr->user_width_max : 0);
0006f4  b111              CBZ      r1,|L1.1788|
0006f6  f8d1039c          LDR      r0,[r1,#0x39c]
                  |L1.1786|
;;;947    }
0006fa  4770              BX       lr
                  |L1.1788|
0006fc  2000              MOVS     r0,#0                 ;946
0006fe  e7fc              B        |L1.1786|
;;;948    png_uint_32 PNGAPI
                          ENDP

                  png_get_user_height_max PROC
;;;949    png_get_user_height_max (png_structp png_ptr)
000700  4601              MOV      r1,r0
;;;950    {
;;;951        return (png_ptr? png_ptr->user_height_max : 0);
000702  b111              CBZ      r1,|L1.1802|
000704  f8d103a0          LDR      r0,[r1,#0x3a0]
                  |L1.1800|
;;;952    }
000708  4770              BX       lr
                  |L1.1802|
00070a  2000              MOVS     r0,#0                 ;951
00070c  e7fc              B        |L1.1800|
;;;953    #endif /* ?PNG_SET_USER_LIMITS_SUPPORTED */
                          ENDP

00070e  0000              DCW      0x0000
                  |L1.1808|
000710  496e7661          DCB      "Invalid bit depth",0
000714  6c696420
000718  62697420
00071c  64657074
000720  6800    
000722  00                DCB      0
000723  00                DCB      0
                  |L1.1828|
000724  496e7661          DCB      "Invalid color type",0
000728  6c696420
00072c  636f6c6f
000730  72207479
000734  706500  
000737  00                DCB      0
                  |L1.1848|
000738  496e7661          DCB      "Invalid image width",0
00073c  6c696420
000740  696d6167
000744  65207769
000748  64746800
                  |L1.1868|
00074c  496e7661          DCB      "Invalid image height",0
000750  6c696420
000754  696d6167
000758  65206865
00075c  69676874
000760  00      
000761  00                DCB      0
000762  00                DCB      0
000763  00                DCB      0
                  |L1.1892|
                          DCD      0x1fffff7e
                  |L1.1896|
000768  57696474          DCB      "Width too large for libpng to process image data.",0
00076c  6820746f
000770  6f206c61
000774  72676520
000778  666f7220
00077c  6c696270
000780  6e672074
000784  6f207072
000788  6f636573
00078c  7320696d
000790  61676520
000794  64617461
000798  2e00    
00079a  00                DCB      0
00079b  00                DCB      0
