; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\jdphuff.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\jdphuff.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -I.\GUI\AntiAlias -I.\GUI\Config -I.\GUI\ConvertColor -I.\GUI\ConvertMono -I.\GUI\Core -I.\GUI\Font -I.\GUI\GUI_X -I.\GUI\JPEG -I.\GUI\LCDDriver -I.\GUI\MemDev -I.\GUI\MultiLayer -I.\GUI\Widget -I.\GUI\WM -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\INC\ST\STM32F10x -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\jdphuff.crf GUI\JPEG\jdphuff.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  process_restart PROC
;;;227    LOCAL(boolean)
;;;228    process_restart (j_decompress_ptr cinfo)
000000  b570              PUSH     {r4-r6,lr}
;;;229    {
000002  4604              MOV      r4,r0
;;;230      phuff_entropy_ptr entropy = (phuff_entropy_ptr) cinfo->entropy;
000004  f8d451bc          LDR      r5,[r4,#0x1bc]
;;;231      int ci;
;;;232    
;;;233      /* Throw away any unused bits remaining in bit buffer; */
;;;234      /* include any full bytes in next_marker's count of discarded bytes */
;;;235      cinfo->marker->discarded_bytes += entropy->bitstate.bits_left / 8;
000008  6928              LDR      r0,[r5,#0x10]
00000a  ea4f71e0          ASR      r1,r0,#31
00000e  eb007151          ADD      r1,r0,r1,LSR #29
000012  f8d421b8          LDR      r2,[r4,#0x1b8]
000016  6992              LDR      r2,[r2,#0x18]
000018  eb0201e1          ADD      r1,r2,r1,ASR #3
00001c  f8d421b8          LDR      r2,[r4,#0x1b8]
000020  6191              STR      r1,[r2,#0x18]
;;;236      entropy->bitstate.bits_left = 0;
000022  f04f0100          MOV      r1,#0
000026  6129              STR      r1,[r5,#0x10]
;;;237    
;;;238      /* Advance past the RSTn marker */
;;;239      if (! (*cinfo->marker->read_restart_marker) (cinfo))
000028  f8d401b8          LDR      r0,[r4,#0x1b8]
00002c  6881              LDR      r1,[r0,#8]
00002e  4620              MOV      r0,r4
000030  4788              BLX      r1
000032  b908              CBNZ     r0,|L1.56|
;;;240        return FALSE;
000034  2000              MOVS     r0,#0
                  |L1.54|
;;;241    
;;;242      /* Re-initialize DC predictions to 0 */
;;;243      for (ci = 0; ci < cinfo->comps_in_scan; ci++)
;;;244        entropy->saved.last_dc_val[ci] = 0;
;;;245      /* Re-init EOB run count, too */
;;;246      entropy->saved.EOBRUN = 0;
;;;247    
;;;248      /* Reset restart counter */
;;;249      entropy->restarts_to_go = cinfo->restart_interval;
;;;250    
;;;251      /* Reset out-of-data flag, unless read_restart_marker left us smack up
;;;252       * against a marker.  In that case we will end up treating the next data
;;;253       * segment as empty, and we can avoid producing bogus output pixels by
;;;254       * leaving the flag set.
;;;255       */
;;;256      if (cinfo->unread_marker == 0)
;;;257        entropy->pub.insufficient_data = FALSE;
;;;258    
;;;259      return TRUE;
;;;260    }
000036  bd70              POP      {r4-r6,pc}
                  |L1.56|
000038  f04f0600          MOV      r6,#0                 ;243
00003c  e007              B        |L1.78|
                  |L1.62|
00003e  f04f0100          MOV      r1,#0                 ;244
000042  f1050018          ADD      r0,r5,#0x18           ;244
000046  f8401026          STR      r1,[r0,r6,LSL #2]     ;244
00004a  f1060601          ADD      r6,r6,#1              ;243
                  |L1.78|
00004e  f8d40148          LDR      r0,[r4,#0x148]        ;243
000052  42b0              CMP      r0,r6                 ;243
000054  dcf3              BGT      |L1.62|
000056  f04f0000          MOV      r0,#0                 ;246
00005a  6168              STR      r0,[r5,#0x14]         ;246
00005c  f8d40114          LDR      r0,[r4,#0x114]        ;249
000060  62a8              STR      r0,[r5,#0x28]         ;249
000062  f8d401a0          LDR      r0,[r4,#0x1a0]        ;256
000066  b910              CBNZ     r0,|L1.110|
000068  f04f0000          MOV      r0,#0                 ;257
00006c  60a8              STR      r0,[r5,#8]            ;257
                  |L1.110|
00006e  2001              MOVS     r0,#1                 ;259
000070  e7e1              B        |L1.54|
;;;261    
                          ENDP

                  decode_mcu_AC_refine PROC
;;;490    METHODDEF(boolean)
;;;491    decode_mcu_AC_refine (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
000072  e92d4ff3          PUSH     {r0,r1,r4-r11,lr}
;;;492    {   
000076  b0cf              SUB      sp,sp,#0x13c
000078  4606              MOV      r6,r0
;;;493      phuff_entropy_ptr entropy = (phuff_entropy_ptr) cinfo->entropy;
00007a  f8d671bc          LDR      r7,[r6,#0x1bc]
;;;494      int Se = cinfo->Se;
00007e  f8d60194          LDR      r0,[r6,#0x194]
000082  904e              STR      r0,[sp,#0x138]
;;;495      int p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
000084  f04f0001          MOV      r0,#1
000088  f8d6119c          LDR      r1,[r6,#0x19c]
00008c  fa00f001          LSL      r0,r0,r1
000090  904d              STR      r0,[sp,#0x134]
;;;496      int m1 = (-1) << cinfo->Al;	/* -1 in the bit position being coded */
000092  f04f30ff          MOV      r0,#0xffffffff
000096  f8d6119c          LDR      r1,[r6,#0x19c]
00009a  fa00f001          LSL      r0,r0,r1
00009e  904c              STR      r0,[sp,#0x130]
;;;497      register int s, k, r;
;;;498      unsigned int EOBRUN;
;;;499      JBLOCKROW block;
;;;500      JCOEFPTR thiscoef;
;;;501      BITREAD_STATE_VARS;
;;;502      d_derived_tbl * tbl;
;;;503      int num_newnz;
;;;504      int newnz_pos[DCTSIZE2];
;;;505    
;;;506      /* Process restart marker if needed; may have to suspend */
;;;507      if (cinfo->restart_interval) {
0000a0  f8d60114          LDR      r0,[r6,#0x114]
0000a4  b148              CBZ      r0,|L1.186|
;;;508        if (entropy->restarts_to_go == 0)
0000a6  6ab8              LDR      r0,[r7,#0x28]
0000a8  b938              CBNZ     r0,|L1.186|
;;;509          if (! process_restart(cinfo))
0000aa  4630              MOV      r0,r6
0000ac  f7fffffe          BL       process_restart
0000b0  b918              CBNZ     r0,|L1.186|
;;;510    	return FALSE;
0000b2  2000              MOVS     r0,#0
                  |L1.180|
;;;511      }
;;;512    
;;;513      /* If we've run out of data, don't modify the MCU.
;;;514       */
;;;515      if (! entropy->pub.insufficient_data) {
;;;516    
;;;517        /* Load up working state */
;;;518        BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
;;;519        EOBRUN = entropy->saved.EOBRUN; /* only part of saved state we need */
;;;520    
;;;521        /* There is always only one block per MCU */
;;;522        block = MCU_data[0];
;;;523        tbl = entropy->ac_derived_tbl;
;;;524    
;;;525        /* If we are forced to suspend, we must undo the assignments to any newly
;;;526         * nonzero coefficients in the block, because otherwise we'd get confused
;;;527         * next time about which coefficients were already nonzero.
;;;528         * But we need not undo addition of bits to already-nonzero coefficients;
;;;529         * instead, we can test the current bit to see if we already did it.
;;;530         */
;;;531        num_newnz = 0;
;;;532    
;;;533        /* initialize coefficient loop counter to start of band */
;;;534        k = cinfo->Ss;
;;;535    
;;;536        if (EOBRUN == 0) {
;;;537          for (; k <= Se; k++) {
;;;538    	HUFF_DECODE(s, br_state, tbl, goto undoit, label3);
;;;539    	r = s >> 4;
;;;540    	s &= 15;
;;;541    	if (s) {
;;;542    	  if (s != 1)		/* size of new coef should always be 1 */
;;;543    	    WARNMS(cinfo, JWRN_HUFF_BAD_CODE);
;;;544    	  CHECK_BIT_BUFFER(br_state, 1, goto undoit);
;;;545    	  if (GET_BITS(1))
;;;546    	    s = p1;		/* newly nonzero coef is positive */
;;;547    	  else
;;;548    	    s = m1;		/* newly nonzero coef is negative */
;;;549    	} else {
;;;550    	  if (r != 15) {
;;;551    	    EOBRUN = 1 << r;	/* EOBr, run length is 2^r + appended bits */
;;;552    	    if (r) {
;;;553    	      CHECK_BIT_BUFFER(br_state, r, goto undoit);
;;;554    	      r = GET_BITS(r);
;;;555    	      EOBRUN += r;
;;;556    	    }
;;;557    	    break;		/* rest of block is handled by EOB logic */
;;;558    	  }
;;;559    	  /* note s = 0 for processing ZRL */
;;;560    	}
;;;561    	/* Advance over already-nonzero coefs and r still-zero coefs,
;;;562    	 * appending correction bits to the nonzeroes.  A correction bit is 1
;;;563    	 * if the absolute value of the coefficient must be increased.
;;;564    	 */
;;;565    	do {
;;;566    	  thiscoef = *block + jpeg_natural_order[k];
;;;567    	  if (*thiscoef != 0) {
;;;568    	    CHECK_BIT_BUFFER(br_state, 1, goto undoit);
;;;569    	    if (GET_BITS(1)) {
;;;570    	      if ((*thiscoef & p1) == 0) { /* do nothing if already set it */
;;;571    		if (*thiscoef >= 0)
;;;572    		  *thiscoef += p1;
;;;573    		else
;;;574    		  *thiscoef += m1;
;;;575    	      }
;;;576    	    }
;;;577    	  } else {
;;;578    	    if (--r < 0)
;;;579    	      break;		/* reached target zero coefficient */
;;;580    	  }
;;;581    	  k++;
;;;582    	} while (k <= Se);
;;;583    	if (s) {
;;;584    	  int pos = jpeg_natural_order[k];
;;;585    	  /* Output newly nonzero coefficient */
;;;586    	  (*block)[pos] = (JCOEF) s;
;;;587    	  /* Remember its position in case we have to suspend */
;;;588    	  newnz_pos[num_newnz++] = pos;
;;;589    	}
;;;590          }
;;;591        }
;;;592    
;;;593        if (EOBRUN > 0) {
;;;594          /* Scan any remaining coefficient positions after the end-of-band
;;;595           * (the last newly nonzero coefficient, if any).  Append a correction
;;;596           * bit to each already-nonzero coefficient.  A correction bit is 1
;;;597           * if the absolute value of the coefficient must be increased.
;;;598           */
;;;599          for (; k <= Se; k++) {
;;;600    	thiscoef = *block + jpeg_natural_order[k];
;;;601    	if (*thiscoef != 0) {
;;;602    	  CHECK_BIT_BUFFER(br_state, 1, goto undoit);
;;;603    	  if (GET_BITS(1)) {
;;;604    	    if ((*thiscoef & p1) == 0) { /* do nothing if already changed it */
;;;605    	      if (*thiscoef >= 0)
;;;606    		*thiscoef += p1;
;;;607    	      else
;;;608    		*thiscoef += m1;
;;;609    	    }
;;;610    	  }
;;;611    	}
;;;612          }
;;;613          /* Count one block completed in EOB run */
;;;614          EOBRUN--;
;;;615        }
;;;616    
;;;617        /* Completed MCU, so update state */
;;;618        BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
;;;619        entropy->saved.EOBRUN = EOBRUN; /* only part of saved state we need */
;;;620      }
;;;621    
;;;622      /* Account for restart interval (no-op if not using restarts) */
;;;623      entropy->restarts_to_go--;
;;;624    
;;;625      return TRUE;
;;;626    
;;;627    undoit:
;;;628      /* Re-zero any output coefficients that we made newly nonzero */
;;;629      while (num_newnz > 0)
;;;630        (*block)[newnz_pos[--num_newnz]] = 0;
;;;631    
;;;632      return FALSE;
;;;633    }
0000b4  b051              ADD      sp,sp,#0x144
0000b6  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.186|
0000ba  68b8              LDR      r0,[r7,#8]            ;515
0000bc  2800              CMP      r0,#0                 ;515
0000be  d175              BNE      |L1.428|
0000c0  9649              STR      r6,[sp,#0x124]        ;518
0000c2  69b0              LDR      r0,[r6,#0x18]         ;518
0000c4  6800              LDR      r0,[r0,#0]            ;518
0000c6  9045              STR      r0,[sp,#0x114]        ;518
0000c8  69b0              LDR      r0,[r6,#0x18]         ;518
0000ca  6840              LDR      r0,[r0,#4]            ;518
0000cc  9046              STR      r0,[sp,#0x118]        ;518
0000ce  f8d7a00c          LDR      r10,[r7,#0xc]         ;518
0000d2  693d              LDR      r5,[r7,#0x10]         ;518
0000d4  6978              LDR      r0,[r7,#0x14]         ;519
0000d6  904b              STR      r0,[sp,#0x12c]        ;519
0000d8  9850              LDR      r0,[sp,#0x140]        ;522
0000da  6800              LDR      r0,[r0,#0]            ;522
0000dc  904a              STR      r0,[sp,#0x128]        ;522
0000de  6bf8              LDR      r0,[r7,#0x3c]         ;523
0000e0  9044              STR      r0,[sp,#0x110]        ;523
0000e2  f04f0000          MOV      r0,#0                 ;531
0000e6  9043              STR      r0,[sp,#0x10c]        ;531
0000e8  f8d68190          LDR      r8,[r6,#0x190]        ;534
0000ec  984b              LDR      r0,[sp,#0x12c]        ;536
0000ee  2800              CMP      r0,#0                 ;536
0000f0  d17e              BNE      |L1.496|
0000f2  e0ec              B        |L1.718|
                  |L1.244|
0000f4  2d08              CMP      r5,#8                 ;538
0000f6  da10              BGE      |L1.282|
0000f8  2300              MOVS     r3,#0                 ;538
0000fa  462a              MOV      r2,r5                 ;538
0000fc  4651              MOV      r1,r10                ;538
0000fe  a845              ADD      r0,sp,#0x114          ;538
000100  f7fffffe          BL       jpeg_fill_bit_buffer
000104  b900              CBNZ     r0,|L1.264|
000106  e136              B        |L1.886|
                  |L1.264|
000108  f8dda11c          LDR      r10,[sp,#0x11c]       ;538
00010c  9d48              LDR      r5,[sp,#0x120]        ;538
00010e  2d08              CMP      r5,#8                 ;538
000110  da03              BGE      |L1.282|
000112  f04f0001          MOV      r0,#1                 ;538
000116  9002              STR      r0,[sp,#8]            ;538
000118  e01b              B        |L1.338|
                  |L1.282|
00011a  f1a50008          SUB      r0,r5,#8              ;538
00011e  fa4af000          ASR      r0,r10,r0             ;538
000122  b2c0              UXTB     r0,r0                 ;538
000124  9001              STR      r0,[sp,#4]            ;538
000126  9844              LDR      r0,[sp,#0x110]        ;538
000128  f1000190          ADD      r1,r0,#0x90           ;538
00012c  9801              LDR      r0,[sp,#4]            ;538
00012e  f8510020          LDR      r0,[r1,r0,LSL #2]     ;538
000132  9002              STR      r0,[sp,#8]            ;538
000134  b148              CBZ      r0,|L1.330|
000136  9802              LDR      r0,[sp,#8]            ;538
000138  eba50500          SUB      r5,r5,r0              ;538
00013c  9844              LDR      r0,[sp,#0x110]        ;538
00013e  f5006092          ADD      r0,r0,#0x490          ;538
000142  9901              LDR      r1,[sp,#4]            ;538
000144  f810b001          LDRB     r11,[r0,r1]           ;538
000148  e012              B        |L1.368|
                  |L1.330|
00014a  f04f0009          MOV      r0,#9                 ;538
00014e  9002              STR      r0,[sp,#8]            ;538
000150  bf00              NOP                            ;538
                  |L1.338|
000152  9802              LDR      r0,[sp,#8]            ;538
000154  9000              STR      r0,[sp,#0]            ;538
000156  462a              MOV      r2,r5                 ;538
000158  4651              MOV      r1,r10                ;538
00015a  a845              ADD      r0,sp,#0x114          ;538
00015c  9b44              LDR      r3,[sp,#0x110]        ;538
00015e  f7fffffe          BL       jpeg_huff_decode
000162  f1b00b00          SUBS     r11,r0,#0             ;538
000166  da00              BGE      |L1.362|
000168  e105              B        |L1.886|
                  |L1.362|
00016a  f8dda11c          LDR      r10,[sp,#0x11c]       ;538
00016e  9d48              LDR      r5,[sp,#0x120]        ;538
                  |L1.368|
000170  ea4f192b          ASR      r9,r11,#4             ;539
000174  f00b0b0f          AND      r11,r11,#0xf          ;540
000178  f1bb0f00          CMP      r11,#0                ;541
00017c  d028              BEQ      |L1.464|
00017e  f1bb0f01          CMP      r11,#1                ;542
000182  d009              BEQ      |L1.408|
000184  f04f0076          MOV      r0,#0x76              ;543
000188  6831              LDR      r1,[r6,#0]            ;543
00018a  6148              STR      r0,[r1,#0x14]         ;543
00018c  6830              LDR      r0,[r6,#0]            ;543
00018e  f04f31ff          MOV      r1,#0xffffffff        ;543
000192  6842              LDR      r2,[r0,#4]            ;543
000194  4630              MOV      r0,r6                 ;543
000196  4790              BLX      r2                    ;543
                  |L1.408|
000198  2d01              CMP      r5,#1                 ;544
00019a  da0b              BGE      |L1.436|
00019c  2301              MOVS     r3,#1                 ;544
00019e  462a              MOV      r2,r5                 ;544
0001a0  4651              MOV      r1,r10                ;544
0001a2  a845              ADD      r0,sp,#0x114          ;544
0001a4  f7fffffe          BL       jpeg_fill_bit_buffer
0001a8  b908              CBNZ     r0,|L1.430|
0001aa  e0e4              B        |L1.886|
                  |L1.428|
0001ac  e0dc              B        |L1.872|
                  |L1.430|
0001ae  f8dda11c          LDR      r10,[sp,#0x11c]       ;544
0001b2  9d48              LDR      r5,[sp,#0x120]        ;544
                  |L1.436|
0001b4  f1a50001          SUB      r0,r5,#1              ;545
0001b8  4605              MOV      r5,r0                 ;545
0001ba  fa4af000          ASR      r0,r10,r0             ;545
0001be  f0100f01          TST      r0,#1                 ;545
0001c2  d002              BEQ      |L1.458|
0001c4  f8ddb134          LDR      r11,[sp,#0x134]       ;546
0001c8  e02d              B        |L1.550|
                  |L1.458|
0001ca  f8ddb130          LDR      r11,[sp,#0x130]       ;548
0001ce  e02a              B        |L1.550|
                  |L1.464|
0001d0  f1b90f0f          CMP      r9,#0xf               ;550
0001d4  d027              BEQ      |L1.550|
0001d6  f04f0001          MOV      r0,#1                 ;551
0001da  fa00f009          LSL      r0,r0,r9              ;551
0001de  904b              STR      r0,[sp,#0x12c]        ;551
0001e0  f1b90f00          CMP      r9,#0                 ;552
0001e4  d01e              BEQ      |L1.548|
0001e6  454d              CMP      r5,r9                 ;553
0001e8  da0c              BGE      |L1.516|
0001ea  464b              MOV      r3,r9                 ;553
0001ec  462a              MOV      r2,r5                 ;553
0001ee  e000              B        |L1.498|
                  |L1.496|
0001f0  e072              B        |L1.728|
                  |L1.498|
0001f2  4651              MOV      r1,r10                ;553
0001f4  a845              ADD      r0,sp,#0x114          ;553
0001f6  f7fffffe          BL       jpeg_fill_bit_buffer
0001fa  b900              CBNZ     r0,|L1.510|
0001fc  e0bb              B        |L1.886|
                  |L1.510|
0001fe  f8dda11c          LDR      r10,[sp,#0x11c]       ;553
000202  9d48              LDR      r5,[sp,#0x120]        ;553
                  |L1.516|
000204  eba50109          SUB      r1,r5,r9              ;554
000208  460d              MOV      r5,r1                 ;554
00020a  fa4af001          ASR      r0,r10,r1             ;554
00020e  f04f0101          MOV      r1,#1                 ;554
000212  fa01f109          LSL      r1,r1,r9              ;554
000216  f1a10101          SUB      r1,r1,#1              ;554
00021a  ea000901          AND      r9,r0,r1              ;554
00021e  984b              LDR      r0,[sp,#0x12c]        ;555
000220  4448              ADD      r0,r0,r9              ;555
000222  904b              STR      r0,[sp,#0x12c]        ;555
                  |L1.548|
000224  e057              B        |L1.726|
                  |L1.550|
000226  bf00              NOP                            ;565
                  |L1.552|
000228  48f7              LDR      r0,|L1.1544|
00022a  f8501028          LDR      r1,[r0,r8,LSL #2]     ;566
00022e  984a              LDR      r0,[sp,#0x128]        ;566
000230  eb000441          ADD      r4,r0,r1,LSL #1       ;566
000234  8820              LDRH     r0,[r4,#0]            ;567
000236  b348              CBZ      r0,|L1.652|
000238  2d01              CMP      r5,#1                 ;568
00023a  da0a              BGE      |L1.594|
00023c  2301              MOVS     r3,#1                 ;568
00023e  462a              MOV      r2,r5                 ;568
000240  4651              MOV      r1,r10                ;568
000242  a845              ADD      r0,sp,#0x114          ;568
000244  f7fffffe          BL       jpeg_fill_bit_buffer
000248  b900              CBNZ     r0,|L1.588|
00024a  e094              B        |L1.886|
                  |L1.588|
00024c  f8dda11c          LDR      r10,[sp,#0x11c]       ;568
000250  9d48              LDR      r5,[sp,#0x120]        ;568
                  |L1.594|
000252  f1a50001          SUB      r0,r5,#1              ;569
000256  4605              MOV      r5,r0                 ;569
000258  fa4af000          ASR      r0,r10,r0             ;569
00025c  f0100f01          TST      r0,#1                 ;569
000260  d01a              BEQ      |L1.664|
000262  f9b40000          LDRSH    r0,[r4,#0]            ;570
000266  994d              LDR      r1,[sp,#0x134]        ;570
000268  4208              TST      r0,r1                 ;570
00026a  d115              BNE      |L1.664|
00026c  f9b40000          LDRSH    r0,[r4,#0]            ;571
000270  2800              CMP      r0,#0                 ;571
000272  db05              BLT      |L1.640|
000274  8821              LDRH     r1,[r4,#0]            ;572
000276  984d              LDR      r0,[sp,#0x134]        ;572
000278  4408              ADD      r0,r0,r1              ;572
00027a  b200              SXTH     r0,r0                 ;572
00027c  8020              STRH     r0,[r4,#0]            ;572
00027e  e00b              B        |L1.664|
                  |L1.640|
000280  8821              LDRH     r1,[r4,#0]            ;574
000282  984c              LDR      r0,[sp,#0x130]        ;574
000284  4408              ADD      r0,r0,r1              ;574
000286  b200              SXTH     r0,r0                 ;574
000288  8020              STRH     r0,[r4,#0]            ;574
00028a  e005              B        |L1.664|
                  |L1.652|
00028c  f1a90001          SUB      r0,r9,#1              ;578
000290  f1b00900          SUBS     r9,r0,#0              ;578
000294  da00              BGE      |L1.664|
000296  e004              B        |L1.674|
                  |L1.664|
000298  f1080801          ADD      r8,r8,#1              ;581
00029c  984e              LDR      r0,[sp,#0x138]        ;582
00029e  4580              CMP      r8,r0                 ;582
0002a0  ddc2              BLE      |L1.552|
                  |L1.674|
0002a2  bf00              NOP                            ;579
0002a4  f1bb0f00          CMP      r11,#0                ;583
0002a8  d00f              BEQ      |L1.714|
0002aa  49d7              LDR      r1,|L1.1544|
0002ac  f8510028          LDR      r0,[r1,r8,LSL #2]     ;584
0002b0  fa0ff28b          SXTH     r2,r11                ;586
0002b4  994a              LDR      r1,[sp,#0x128]        ;586
0002b6  f8212010          STRH     r2,[r1,r0,LSL #1]     ;586
0002ba  9943              LDR      r1,[sp,#0x10c]        ;588
0002bc  f1010201          ADD      r2,r1,#1              ;588
0002c0  9243              STR      r2,[sp,#0x10c]        ;588
0002c2  aa03              ADD      r2,sp,#0xc            ;588
0002c4  f8420021          STR      r0,[r2,r1,LSL #2]     ;588
0002c8  bf00              NOP                            ;589
                  |L1.714|
0002ca  f1080801          ADD      r8,r8,#1              ;537
                  |L1.718|
0002ce  984e              LDR      r0,[sp,#0x138]        ;537
0002d0  4580              CMP      r8,r0                 ;537
0002d2  f77faf0f          BLE      |L1.244|
                  |L1.726|
0002d6  bf00              NOP                            ;557
                  |L1.728|
0002d8  984b              LDR      r0,[sp,#0x12c]        ;593
0002da  b3d0              CBZ      r0,|L1.850|
0002dc  e032              B        |L1.836|
                  |L1.734|
0002de  48ca              LDR      r0,|L1.1544|
0002e0  f8501028          LDR      r1,[r0,r8,LSL #2]     ;600
0002e4  984a              LDR      r0,[sp,#0x128]        ;600
0002e6  eb000441          ADD      r4,r0,r1,LSL #1       ;600
0002ea  8820              LDRH     r0,[r4,#0]            ;601
0002ec  b310              CBZ      r0,|L1.820|
0002ee  2d01              CMP      r5,#1                 ;602
0002f0  da0a              BGE      |L1.776|
0002f2  2301              MOVS     r3,#1                 ;602
0002f4  462a              MOV      r2,r5                 ;602
0002f6  4651              MOV      r1,r10                ;602
0002f8  a845              ADD      r0,sp,#0x114          ;602
0002fa  f7fffffe          BL       jpeg_fill_bit_buffer
0002fe  b900              CBNZ     r0,|L1.770|
000300  e039              B        |L1.886|
                  |L1.770|
000302  f8dda11c          LDR      r10,[sp,#0x11c]       ;602
000306  9d48              LDR      r5,[sp,#0x120]        ;602
                  |L1.776|
000308  f1a50001          SUB      r0,r5,#1              ;603
00030c  4605              MOV      r5,r0                 ;603
00030e  fa4af000          ASR      r0,r10,r0             ;603
000312  f0100f01          TST      r0,#1                 ;603
000316  d013              BEQ      |L1.832|
000318  f9b40000          LDRSH    r0,[r4,#0]            ;604
00031c  994d              LDR      r1,[sp,#0x134]        ;604
00031e  4208              TST      r0,r1                 ;604
000320  d10e              BNE      |L1.832|
000322  f9b40000          LDRSH    r0,[r4,#0]            ;605
000326  2800              CMP      r0,#0                 ;605
000328  db05              BLT      |L1.822|
00032a  8821              LDRH     r1,[r4,#0]            ;606
00032c  984d              LDR      r0,[sp,#0x134]        ;606
00032e  4408              ADD      r0,r0,r1              ;606
000330  b200              SXTH     r0,r0                 ;606
000332  8020              STRH     r0,[r4,#0]            ;606
                  |L1.820|
000334  e004              B        |L1.832|
                  |L1.822|
000336  8821              LDRH     r1,[r4,#0]            ;608
000338  984c              LDR      r0,[sp,#0x130]        ;608
00033a  4408              ADD      r0,r0,r1              ;608
00033c  b200              SXTH     r0,r0                 ;608
00033e  8020              STRH     r0,[r4,#0]            ;608
                  |L1.832|
000340  f1080801          ADD      r8,r8,#1              ;599
                  |L1.836|
000344  984e              LDR      r0,[sp,#0x138]        ;599
000346  4580              CMP      r8,r0                 ;599
000348  ddc9              BLE      |L1.734|
00034a  984b              LDR      r0,[sp,#0x12c]        ;614
00034c  f1a00001          SUB      r0,r0,#1              ;614
000350  904b              STR      r0,[sp,#0x12c]        ;614
                  |L1.850|
000352  9845              LDR      r0,[sp,#0x114]        ;618
000354  69b1              LDR      r1,[r6,#0x18]         ;618
000356  6008              STR      r0,[r1,#0]            ;618
000358  9846              LDR      r0,[sp,#0x118]        ;618
00035a  69b1              LDR      r1,[r6,#0x18]         ;618
00035c  6048              STR      r0,[r1,#4]            ;618
00035e  f8c7a00c          STR      r10,[r7,#0xc]         ;618
000362  613d              STR      r5,[r7,#0x10]         ;618
000364  984b              LDR      r0,[sp,#0x12c]        ;619
000366  6178              STR      r0,[r7,#0x14]         ;619
                  |L1.872|
000368  6ab8              LDR      r0,[r7,#0x28]         ;623
00036a  f1a00001          SUB      r0,r0,#1              ;623
00036e  62b8              STR      r0,[r7,#0x28]         ;623
000370  f04f0001          MOV      r0,#1                 ;625
000374  e69e              B        |L1.180|
                  |L1.886|
000376  e00b              B        |L1.912|
                  |L1.888|
000378  f04f0100          MOV      r1,#0                 ;630
00037c  9843              LDR      r0,[sp,#0x10c]        ;630
00037e  f1a00001          SUB      r0,r0,#1              ;630
000382  aa03              ADD      r2,sp,#0xc            ;630
000384  9043              STR      r0,[sp,#0x10c]        ;630
000386  f8522020          LDR      r2,[r2,r0,LSL #2]     ;630
00038a  984a              LDR      r0,[sp,#0x128]        ;630
00038c  f8201012          STRH     r1,[r0,r2,LSL #1]     ;630
                  |L1.912|
000390  9843              LDR      r0,[sp,#0x10c]        ;629
000392  2800              CMP      r0,#0                 ;629
000394  dcf0              BGT      |L1.888|
000396  2000              MOVS     r0,#0                 ;632
000398  e68c              B        |L1.180|
;;;634    
                          ENDP

                  decode_mcu_DC_refine PROC
;;;441    METHODDEF(boolean)
;;;442    decode_mcu_DC_refine (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
00039a  e92d4ff0          PUSH     {r4-r11,lr}
;;;443    {   
00039e  b085              SUB      sp,sp,#0x14
0003a0  4604              MOV      r4,r0
0003a2  468a              MOV      r10,r1
;;;444      phuff_entropy_ptr entropy = (phuff_entropy_ptr) cinfo->entropy;
0003a4  f8d451bc          LDR      r5,[r4,#0x1bc]
;;;445      int p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
0003a8  f04f0001          MOV      r0,#1
0003ac  f8d4119c          LDR      r1,[r4,#0x19c]
0003b0  fa00fb01          LSL      r11,r0,r1
;;;446      int blkn;
;;;447      JBLOCKROW block;
;;;448      BITREAD_STATE_VARS;
;;;449    
;;;450      /* Process restart marker if needed; may have to suspend */
;;;451      if (cinfo->restart_interval) {
0003b4  f8d40114          LDR      r0,[r4,#0x114]
0003b8  b148              CBZ      r0,|L1.974|
;;;452        if (entropy->restarts_to_go == 0)
0003ba  6aa8              LDR      r0,[r5,#0x28]
0003bc  b938              CBNZ     r0,|L1.974|
;;;453          if (! process_restart(cinfo))
0003be  4620              MOV      r0,r4
0003c0  f7fffffe          BL       process_restart
0003c4  b918              CBNZ     r0,|L1.974|
;;;454    	return FALSE;
0003c6  2000              MOVS     r0,#0
                  |L1.968|
;;;455      }
;;;456    
;;;457      /* Not worth the cycles to check insufficient_data here,
;;;458       * since we will not change the data anyway if we read zeroes.
;;;459       */
;;;460    
;;;461      /* Load up working state */
;;;462      BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
;;;463    
;;;464      /* Outer loop handles each block in the MCU */
;;;465    
;;;466      for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
;;;467        block = MCU_data[blkn];
;;;468    
;;;469        /* Encoded data is simply the next bit of the two's-complement DC value */
;;;470        CHECK_BIT_BUFFER(br_state, 1, return FALSE);
;;;471        if (GET_BITS(1))
;;;472          (*block)[0] |= p1;
;;;473        /* Note: since we use |=, repeating the assignment later is safe */
;;;474      }
;;;475    
;;;476      /* Completed MCU, so update state */
;;;477      BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
;;;478    
;;;479      /* Account for restart interval (no-op if not using restarts) */
;;;480      entropy->restarts_to_go--;
;;;481    
;;;482      return TRUE;
;;;483    }
0003c8  b005              ADD      sp,sp,#0x14
0003ca  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.974|
0003ce  9404              STR      r4,[sp,#0x10]         ;462
0003d0  69a0              LDR      r0,[r4,#0x18]         ;462
0003d2  6800              LDR      r0,[r0,#0]            ;462
0003d4  9000              STR      r0,[sp,#0]            ;462
0003d6  69a0              LDR      r0,[r4,#0x18]         ;462
0003d8  6840              LDR      r0,[r0,#4]            ;462
0003da  9001              STR      r0,[sp,#4]            ;462
0003dc  f8d5800c          LDR      r8,[r5,#0xc]          ;462
0003e0  692e              LDR      r6,[r5,#0x10]         ;462
0003e2  f04f0700          MOV      r7,#0                 ;466
0003e6  e020              B        |L1.1066|
                  |L1.1000|
0003e8  f85a9027          LDR      r9,[r10,r7,LSL #2]    ;467
0003ec  2e01              CMP      r6,#1                 ;470
0003ee  da0b              BGE      |L1.1032|
0003f0  2301              MOVS     r3,#1                 ;470
0003f2  4632              MOV      r2,r6                 ;470
0003f4  4641              MOV      r1,r8                 ;470
0003f6  4668              MOV      r0,sp                 ;470
0003f8  f7fffffe          BL       jpeg_fill_bit_buffer
0003fc  b908              CBNZ     r0,|L1.1026|
0003fe  2000              MOVS     r0,#0                 ;470
000400  e7e2              B        |L1.968|
                  |L1.1026|
000402  f8dd8008          LDR      r8,[sp,#8]            ;470
000406  9e03              LDR      r6,[sp,#0xc]          ;470
                  |L1.1032|
000408  f1a60001          SUB      r0,r6,#1              ;471
00040c  4606              MOV      r6,r0                 ;471
00040e  fa48f000          ASR      r0,r8,r0              ;471
000412  f0100f01          TST      r0,#1                 ;471
000416  d006              BEQ      |L1.1062|
000418  f8b90000          LDRH     r0,[r9,#0]            ;472
00041c  ea40000b          ORR      r0,r0,r11             ;472
000420  b200              SXTH     r0,r0                 ;472
000422  f8a90000          STRH     r0,[r9,#0]            ;472
                  |L1.1062|
000426  f1070701          ADD      r7,r7,#1              ;466
                  |L1.1066|
00042a  f8d40164          LDR      r0,[r4,#0x164]        ;466
00042e  42b8              CMP      r0,r7                 ;466
000430  dcda              BGT      |L1.1000|
000432  9800              LDR      r0,[sp,#0]            ;477
000434  69a1              LDR      r1,[r4,#0x18]         ;477
000436  6008              STR      r0,[r1,#0]            ;477
000438  9801              LDR      r0,[sp,#4]            ;477
00043a  69a1              LDR      r1,[r4,#0x18]         ;477
00043c  6048              STR      r0,[r1,#4]            ;477
00043e  f8c5800c          STR      r8,[r5,#0xc]          ;477
000442  612e              STR      r6,[r5,#0x10]         ;477
000444  6aa8              LDR      r0,[r5,#0x28]         ;480
000446  f1a00001          SUB      r0,r0,#1              ;480
00044a  62a8              STR      r0,[r5,#0x28]         ;480
00044c  f04f0001          MOV      r0,#1                 ;482
000450  e7ba              B        |L1.968|
;;;484    
                          ENDP

                  decode_mcu_AC_first PROC
;;;356    METHODDEF(boolean)
;;;357    decode_mcu_AC_first (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
000452  e92d4ff3          PUSH     {r0,r1,r4-r11,lr}
;;;358    {   
000456  b08d              SUB      sp,sp,#0x34
000458  4604              MOV      r4,r0
;;;359      phuff_entropy_ptr entropy = (phuff_entropy_ptr) cinfo->entropy;
00045a  f8d451bc          LDR      r5,[r4,#0x1bc]
;;;360      int Se = cinfo->Se;
00045e  f8d40194          LDR      r0,[r4,#0x194]
000462  900c              STR      r0,[sp,#0x30]
;;;361      int Al = cinfo->Al;
000464  f8d4019c          LDR      r0,[r4,#0x19c]
000468  900b              STR      r0,[sp,#0x2c]
;;;362      register int s, k, r;
;;;363      unsigned int EOBRUN;
;;;364      JBLOCKROW block;
;;;365      BITREAD_STATE_VARS;
;;;366      d_derived_tbl * tbl;
;;;367    
;;;368      /* Process restart marker if needed; may have to suspend */
;;;369      if (cinfo->restart_interval) {
00046a  f8d40114          LDR      r0,[r4,#0x114]
00046e  b148              CBZ      r0,|L1.1156|
;;;370        if (entropy->restarts_to_go == 0)
000470  6aa8              LDR      r0,[r5,#0x28]
000472  b938              CBNZ     r0,|L1.1156|
;;;371          if (! process_restart(cinfo))
000474  4620              MOV      r0,r4
000476  f7fffffe          BL       process_restart
00047a  b918              CBNZ     r0,|L1.1156|
;;;372    	return FALSE;
00047c  2000              MOVS     r0,#0
                  |L1.1150|
;;;373      }
;;;374    
;;;375      /* If we've run out of data, just leave the MCU set to zeroes.
;;;376       * This way, we return uniform gray for the remainder of the segment.
;;;377       */
;;;378      if (! entropy->pub.insufficient_data) {
;;;379    
;;;380        /* Load up working state.
;;;381         * We can avoid loading/saving bitread state if in an EOB run.
;;;382         */
;;;383        EOBRUN = entropy->saved.EOBRUN;	/* only part of saved state we need */
;;;384    
;;;385        /* There is always only one block per MCU */
;;;386    
;;;387        if (EOBRUN > 0)		/* if it's a band of zeroes... */
;;;388          EOBRUN--;			/* ...process it now (we do nothing) */
;;;389        else {
;;;390          BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
;;;391          block = MCU_data[0];
;;;392          tbl = entropy->ac_derived_tbl;
;;;393    
;;;394          for (k = cinfo->Ss; k <= Se; k++) {
;;;395    	HUFF_DECODE(s, br_state, tbl, return FALSE, label2);
;;;396    	r = s >> 4;
;;;397    	s &= 15;
;;;398    	if (s) {
;;;399    	  k += r;
;;;400    	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
;;;401    	  r = GET_BITS(s);
;;;402    	  s = HUFF_EXTEND(r, s);
;;;403    	  /* Scale and output coefficient in natural (dezigzagged) order */
;;;404    	  (*block)[jpeg_natural_order[k]] = (JCOEF) (s << Al);
;;;405    	} else {
;;;406    	  if (r == 15) {	/* ZRL */
;;;407    	    k += 15;		/* skip 15 zeroes in band */
;;;408    	  } else {		/* EOBr, run length is 2^r + appended bits */
;;;409    	    EOBRUN = 1 << r;
;;;410    	    if (r) {		/* EOBr, r > 0 */
;;;411    	      CHECK_BIT_BUFFER(br_state, r, return FALSE);
;;;412    	      r = GET_BITS(r);
;;;413    	      EOBRUN += r;
;;;414    	    }
;;;415    	    EOBRUN--;		/* this band is processed at this moment */
;;;416    	    break;		/* force end-of-band */
;;;417    	  }
;;;418    	}
;;;419          }
;;;420    
;;;421          BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
;;;422        }
;;;423    
;;;424        /* Completed MCU, so update state */
;;;425        entropy->saved.EOBRUN = EOBRUN;	/* only part of saved state we need */
;;;426      }
;;;427    
;;;428      /* Account for restart interval (no-op if not using restarts) */
;;;429      entropy->restarts_to_go--;
;;;430    
;;;431      return TRUE;
;;;432    }
00047e  b00f              ADD      sp,sp,#0x3c
000480  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.1156|
000484  68a8              LDR      r0,[r5,#8]            ;378
000486  2800              CMP      r0,#0                 ;378
000488  d17e              BNE      |L1.1416|
00048a  f8d5a014          LDR      r10,[r5,#0x14]        ;383
00048e  f1ba0f00          CMP      r10,#0                ;387
000492  d002              BEQ      |L1.1178|
000494  f1aa0a01          SUB      r10,r10,#1            ;388
000498  e0cc              B        |L1.1588|
                  |L1.1178|
00049a  9409              STR      r4,[sp,#0x24]         ;390
00049c  69a0              LDR      r0,[r4,#0x18]         ;390
00049e  6800              LDR      r0,[r0,#0]            ;390
0004a0  9005              STR      r0,[sp,#0x14]         ;390
0004a2  69a0              LDR      r0,[r4,#0x18]         ;390
0004a4  6840              LDR      r0,[r0,#4]            ;390
0004a6  9006              STR      r0,[sp,#0x18]         ;390
0004a8  f8d5b00c          LDR      r11,[r5,#0xc]         ;390
0004ac  692f              LDR      r7,[r5,#0x10]         ;390
0004ae  980e              LDR      r0,[sp,#0x38]         ;391
0004b0  6800              LDR      r0,[r0,#0]            ;391
0004b2  900a              STR      r0,[sp,#0x28]         ;391
0004b4  6be8              LDR      r0,[r5,#0x3c]         ;392
0004b6  9004              STR      r0,[sp,#0x10]         ;392
0004b8  f8d49190          LDR      r9,[r4,#0x190]        ;394
0004bc  e0ac              B        |L1.1560|
                  |L1.1214|
0004be  2f08              CMP      r7,#8                 ;395
0004c0  da11              BGE      |L1.1254|
0004c2  2300              MOVS     r3,#0                 ;395
0004c4  463a              MOV      r2,r7                 ;395
0004c6  4659              MOV      r1,r11                ;395
0004c8  a805              ADD      r0,sp,#0x14           ;395
0004ca  f7fffffe          BL       jpeg_fill_bit_buffer
0004ce  b908              CBNZ     r0,|L1.1236|
0004d0  2000              MOVS     r0,#0                 ;395
0004d2  e7d4              B        |L1.1150|
                  |L1.1236|
0004d4  f8ddb01c          LDR      r11,[sp,#0x1c]        ;395
0004d8  9f08              LDR      r7,[sp,#0x20]         ;395
0004da  2f08              CMP      r7,#8                 ;395
0004dc  da03              BGE      |L1.1254|
0004de  f04f0001          MOV      r0,#1                 ;395
0004e2  9003              STR      r0,[sp,#0xc]          ;395
0004e4  e01b              B        |L1.1310|
                  |L1.1254|
0004e6  f1a70008          SUB      r0,r7,#8              ;395
0004ea  fa4bf000          ASR      r0,r11,r0             ;395
0004ee  b2c0              UXTB     r0,r0                 ;395
0004f0  9002              STR      r0,[sp,#8]            ;395
0004f2  9804              LDR      r0,[sp,#0x10]         ;395
0004f4  f1000190          ADD      r1,r0,#0x90           ;395
0004f8  9802              LDR      r0,[sp,#8]            ;395
0004fa  f8510020          LDR      r0,[r1,r0,LSL #2]     ;395
0004fe  9003              STR      r0,[sp,#0xc]          ;395
000500  b148              CBZ      r0,|L1.1302|
000502  9803              LDR      r0,[sp,#0xc]          ;395
000504  eba70700          SUB      r7,r7,r0              ;395
000508  9804              LDR      r0,[sp,#0x10]         ;395
00050a  f5006092          ADD      r0,r0,#0x490          ;395
00050e  9902              LDR      r1,[sp,#8]            ;395
000510  f8108001          LDRB     r8,[r0,r1]            ;395
000514  e013              B        |L1.1342|
                  |L1.1302|
000516  f04f0009          MOV      r0,#9                 ;395
00051a  9003              STR      r0,[sp,#0xc]          ;395
00051c  bf00              NOP                            ;395
                  |L1.1310|
00051e  9803              LDR      r0,[sp,#0xc]          ;395
000520  9000              STR      r0,[sp,#0]            ;395
000522  463a              MOV      r2,r7                 ;395
000524  4659              MOV      r1,r11                ;395
000526  a805              ADD      r0,sp,#0x14           ;395
000528  9b04              LDR      r3,[sp,#0x10]         ;395
00052a  f7fffffe          BL       jpeg_huff_decode
00052e  f1b00800          SUBS     r8,r0,#0              ;395
000532  da01              BGE      |L1.1336|
000534  2000              MOVS     r0,#0                 ;395
000536  e7a2              B        |L1.1150|
                  |L1.1336|
000538  f8ddb01c          LDR      r11,[sp,#0x1c]        ;395
00053c  9f08              LDR      r7,[sp,#0x20]         ;395
                  |L1.1342|
00053e  ea4f1628          ASR      r6,r8,#4              ;396
000542  f008080f          AND      r8,r8,#0xf            ;397
000546  f1b80f00          CMP      r8,#0                 ;398
00054a  d034              BEQ      |L1.1462|
00054c  44b1              ADD      r9,r9,r6              ;399
00054e  4547              CMP      r7,r8                 ;400
000550  da0b              BGE      |L1.1386|
000552  4643              MOV      r3,r8                 ;400
000554  463a              MOV      r2,r7                 ;400
000556  4659              MOV      r1,r11                ;400
000558  a805              ADD      r0,sp,#0x14           ;400
00055a  f7fffffe          BL       jpeg_fill_bit_buffer
00055e  b908              CBNZ     r0,|L1.1380|
000560  2000              MOVS     r0,#0                 ;400
000562  e78c              B        |L1.1150|
                  |L1.1380|
000564  f8ddb01c          LDR      r11,[sp,#0x1c]        ;400
000568  9f08              LDR      r7,[sp,#0x20]         ;400
                  |L1.1386|
00056a  eba70108          SUB      r1,r7,r8              ;401
00056e  460f              MOV      r7,r1                 ;401
000570  fa4bf001          ASR      r0,r11,r1             ;401
000574  f04f0101          MOV      r1,#1                 ;401
000578  fa01f108          LSL      r1,r1,r8              ;401
00057c  f1a10101          SUB      r1,r1,#1              ;401
000580  ea000601          AND      r6,r0,r1              ;401
000584  4821              LDR      r0,|L1.1548|
000586  e000              B        |L1.1418|
                  |L1.1416|
000588  e056              B        |L1.1592|
                  |L1.1418|
00058a  f8500028          LDR      r0,[r0,r8,LSL #2]     ;402
00058e  42b0              CMP      r0,r6                 ;402
000590  dd04              BLE      |L1.1436|
000592  481f              LDR      r0,|L1.1552|
000594  f8500028          LDR      r0,[r0,r8,LSL #2]     ;402
000598  4430              ADD      r0,r0,r6              ;402
00059a  e000              B        |L1.1438|
                  |L1.1436|
00059c  4630              MOV      r0,r6                 ;402
                  |L1.1438|
00059e  4680              MOV      r8,r0                 ;402
0005a0  980b              LDR      r0,[sp,#0x2c]         ;404
0005a2  fa08f000          LSL      r0,r8,r0              ;404
0005a6  b201              SXTH     r1,r0                 ;404
0005a8  4817              LDR      r0,|L1.1544|
0005aa  f8502029          LDR      r2,[r0,r9,LSL #2]     ;404
0005ae  980a              LDR      r0,[sp,#0x28]         ;404
0005b0  f8201012          STRH     r1,[r0,r2,LSL #1]     ;404
0005b4  e02e              B        |L1.1556|
                  |L1.1462|
0005b6  2e0f              CMP      r6,#0xf               ;406
0005b8  d102              BNE      |L1.1472|
0005ba  f109090f          ADD      r9,r9,#0xf            ;407
0005be  e029              B        |L1.1556|
                  |L1.1472|
0005c0  f04f0001          MOV      r0,#1                 ;409
0005c4  fa00fa06          LSL      r10,r0,r6             ;409
0005c8  b1de              CBZ      r6,|L1.1538|
0005ca  42b7              CMP      r7,r6                 ;411
0005cc  da0b              BGE      |L1.1510|
0005ce  4633              MOV      r3,r6                 ;411
0005d0  463a              MOV      r2,r7                 ;411
0005d2  4659              MOV      r1,r11                ;411
0005d4  a805              ADD      r0,sp,#0x14           ;411
0005d6  f7fffffe          BL       jpeg_fill_bit_buffer
0005da  b908              CBNZ     r0,|L1.1504|
0005dc  2000              MOVS     r0,#0                 ;411
0005de  e74e              B        |L1.1150|
                  |L1.1504|
0005e0  f8ddb01c          LDR      r11,[sp,#0x1c]        ;411
0005e4  9f08              LDR      r7,[sp,#0x20]         ;411
                  |L1.1510|
0005e6  eba70106          SUB      r1,r7,r6              ;412
0005ea  460f              MOV      r7,r1                 ;412
0005ec  fa4bf001          ASR      r0,r11,r1             ;412
0005f0  f04f0101          MOV      r1,#1                 ;412
0005f4  fa01f106          LSL      r1,r1,r6              ;412
0005f8  f1a10101          SUB      r1,r1,#1              ;412
0005fc  ea000601          AND      r6,r0,r1              ;412
000600  44b2              ADD      r10,r10,r6            ;413
                  |L1.1538|
000602  f1aa0a01          SUB      r10,r10,#1            ;415
000606  e00b              B        |L1.1568|
                  |L1.1544|
                          DCD      jpeg_natural_order
                  |L1.1548|
                          DCD      extend_test
                  |L1.1552|
                          DCD      extend_offset
                  |L1.1556|
000614  f1090901          ADD      r9,r9,#1              ;394
                  |L1.1560|
000618  980c              LDR      r0,[sp,#0x30]         ;394
00061a  4581              CMP      r9,r0                 ;394
00061c  f77faf4f          BLE      |L1.1214|
                  |L1.1568|
000620  bf00              NOP                            ;416
000622  9805              LDR      r0,[sp,#0x14]         ;421
000624  69a1              LDR      r1,[r4,#0x18]         ;421
000626  6008              STR      r0,[r1,#0]            ;421
000628  9806              LDR      r0,[sp,#0x18]         ;421
00062a  69a1              LDR      r1,[r4,#0x18]         ;421
00062c  6048              STR      r0,[r1,#4]            ;421
00062e  f8c5b00c          STR      r11,[r5,#0xc]         ;421
000632  612f              STR      r7,[r5,#0x10]         ;421
                  |L1.1588|
000634  f8c5a014          STR      r10,[r5,#0x14]        ;425
                  |L1.1592|
000638  6aa8              LDR      r0,[r5,#0x28]         ;429
00063a  f1a00001          SUB      r0,r0,#1              ;429
00063e  62a8              STR      r0,[r5,#0x28]         ;429
000640  f04f0001          MOV      r0,#1                 ;431
000644  e71b              B        |L1.1150|
;;;433    
                          ENDP

                  decode_mcu_DC_first PROC
;;;285    METHODDEF(boolean)
;;;286    decode_mcu_DC_first (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
000646  e92d4ff3          PUSH     {r0,r1,r4-r11,lr}
;;;287    {   
00064a  b091              SUB      sp,sp,#0x44
00064c  4604              MOV      r4,r0
;;;288      phuff_entropy_ptr entropy = (phuff_entropy_ptr) cinfo->entropy;
00064e  f8d451bc          LDR      r5,[r4,#0x1bc]
;;;289      int Al = cinfo->Al;
000652  f8d4019c          LDR      r0,[r4,#0x19c]
000656  9010              STR      r0,[sp,#0x40]
;;;290      register int s, r;
;;;291      int blkn, ci;
;;;292      JBLOCKROW block;
;;;293      BITREAD_STATE_VARS;
;;;294      savable_state state;
;;;295      d_derived_tbl * tbl;
;;;296      jpeg_component_info * compptr;
;;;297    
;;;298      /* Process restart marker if needed; may have to suspend */
;;;299      if (cinfo->restart_interval) {
000658  f8d40114          LDR      r0,[r4,#0x114]
00065c  b148              CBZ      r0,|L1.1650|
;;;300        if (entropy->restarts_to_go == 0)
00065e  6aa8              LDR      r0,[r5,#0x28]
000660  b938              CBNZ     r0,|L1.1650|
;;;301          if (! process_restart(cinfo))
000662  4620              MOV      r0,r4
000664  f7fffffe          BL       process_restart
000668  b918              CBNZ     r0,|L1.1650|
;;;302    	return FALSE;
00066a  2000              MOVS     r0,#0
                  |L1.1644|
;;;303      }
;;;304    
;;;305      /* If we've run out of data, just leave the MCU set to zeroes.
;;;306       * This way, we return uniform gray for the remainder of the segment.
;;;307       */
;;;308      if (! entropy->pub.insufficient_data) {
;;;309    
;;;310        /* Load up working state */
;;;311        BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
;;;312        ASSIGN_STATE(state, entropy->saved);
;;;313    
;;;314        /* Outer loop handles each block in the MCU */
;;;315    
;;;316        for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
;;;317          block = MCU_data[blkn];
;;;318          ci = cinfo->MCU_membership[blkn];
;;;319          compptr = cinfo->cur_comp_info[ci];
;;;320          tbl = entropy->derived_tbls[compptr->dc_tbl_no];
;;;321    
;;;322          /* Decode a single block's worth of coefficients */
;;;323    
;;;324          /* Section F.2.2.1: decode the DC coefficient difference */
;;;325          HUFF_DECODE(s, br_state, tbl, return FALSE, label1);
;;;326          if (s) {
;;;327    	CHECK_BIT_BUFFER(br_state, s, return FALSE);
;;;328    	r = GET_BITS(s);
;;;329    	s = HUFF_EXTEND(r, s);
;;;330          }
;;;331    
;;;332          /* Convert DC difference to actual value, update last_dc_val */
;;;333          s += state.last_dc_val[ci];
;;;334          state.last_dc_val[ci] = s;
;;;335          /* Scale and output the coefficient (assumes jpeg_natural_order[0]=0) */
;;;336          (*block)[0] = (JCOEF) (s << Al);
;;;337        }
;;;338    
;;;339        /* Completed MCU, so update state */
;;;340        BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
;;;341        ASSIGN_STATE(entropy->saved, state);
;;;342      }
;;;343    
;;;344      /* Account for restart interval (no-op if not using restarts) */
;;;345      entropy->restarts_to_go--;
;;;346    
;;;347      return TRUE;
;;;348    }
00066c  b013              ADD      sp,sp,#0x4c
00066e  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.1650|
000672  68a8              LDR      r0,[r5,#8]            ;308
000674  2800              CMP      r0,#0                 ;308
000676  d17c              BNE      |L1.1906|
000678  940d              STR      r4,[sp,#0x34]         ;311
00067a  69a0              LDR      r0,[r4,#0x18]         ;311
00067c  6800              LDR      r0,[r0,#0]            ;311
00067e  9009              STR      r0,[sp,#0x24]         ;311
000680  69a0              LDR      r0,[r4,#0x18]         ;311
000682  6840              LDR      r0,[r0,#4]            ;311
000684  900a              STR      r0,[sp,#0x28]         ;311
000686  f8d5900c          LDR      r9,[r5,#0xc]          ;311
00068a  692f              LDR      r7,[r5,#0x10]         ;311
00068c  2214              MOVS     r2,#0x14              ;312
00068e  f1050114          ADD      r1,r5,#0x14           ;312
000692  a804              ADD      r0,sp,#0x10           ;312
000694  f7fffffe          BL       __aeabi_memcpy4
000698  f04f0800          MOV      r8,#0                 ;316
00069c  e08a              B        |L1.1972|
                  |L1.1694|
00069e  9812              LDR      r0,[sp,#0x48]         ;317
0006a0  f8500028          LDR      r0,[r0,r8,LSL #2]     ;317
0006a4  900e              STR      r0,[sp,#0x38]         ;317
0006a6  f50470b4          ADD      r0,r4,#0x168          ;318
0006aa  f850a028          LDR      r10,[r0,r8,LSL #2]    ;318
0006ae  f50470a6          ADD      r0,r4,#0x14c          ;319
0006b2  f850002a          LDR      r0,[r0,r10,LSL #2]    ;319
0006b6  9003              STR      r0,[sp,#0xc]          ;319
0006b8  9803              LDR      r0,[sp,#0xc]          ;320
0006ba  6941              LDR      r1,[r0,#0x14]         ;320
0006bc  f105002c          ADD      r0,r5,#0x2c           ;320
0006c0  f850b021          LDR      r11,[r0,r1,LSL #2]    ;320
0006c4  2f08              CMP      r7,#8                 ;325
0006c6  da11              BGE      |L1.1772|
0006c8  2300              MOVS     r3,#0                 ;325
0006ca  463a              MOV      r2,r7                 ;325
0006cc  4649              MOV      r1,r9                 ;325
0006ce  a809              ADD      r0,sp,#0x24           ;325
0006d0  f7fffffe          BL       jpeg_fill_bit_buffer
0006d4  b908              CBNZ     r0,|L1.1754|
0006d6  2000              MOVS     r0,#0                 ;325
0006d8  e7c8              B        |L1.1644|
                  |L1.1754|
0006da  f8dd902c          LDR      r9,[sp,#0x2c]         ;325
0006de  9f0c              LDR      r7,[sp,#0x30]         ;325
0006e0  2f08              CMP      r7,#8                 ;325
0006e2  da03              BGE      |L1.1772|
0006e4  f04f0001          MOV      r0,#1                 ;325
0006e8  9002              STR      r0,[sp,#8]            ;325
0006ea  e018              B        |L1.1822|
                  |L1.1772|
0006ec  f1a70008          SUB      r0,r7,#8              ;325
0006f0  fa49f000          ASR      r0,r9,r0              ;325
0006f4  b2c0              UXTB     r0,r0                 ;325
0006f6  9001              STR      r0,[sp,#4]            ;325
0006f8  f10b0190          ADD      r1,r11,#0x90          ;325
0006fc  9801              LDR      r0,[sp,#4]            ;325
0006fe  f8510020          LDR      r0,[r1,r0,LSL #2]     ;325
000702  9002              STR      r0,[sp,#8]            ;325
000704  b138              CBZ      r0,|L1.1814|
000706  9802              LDR      r0,[sp,#8]            ;325
000708  eba70700          SUB      r7,r7,r0              ;325
00070c  f50b6092          ADD      r0,r11,#0x490         ;325
000710  9901              LDR      r1,[sp,#4]            ;325
000712  5c46              LDRB     r6,[r0,r1]            ;325
000714  e012              B        |L1.1852|
                  |L1.1814|
000716  f04f0009          MOV      r0,#9                 ;325
00071a  9002              STR      r0,[sp,#8]            ;325
00071c  bf00              NOP                            ;325
                  |L1.1822|
00071e  9802              LDR      r0,[sp,#8]            ;325
000720  465b              MOV      r3,r11                ;325
000722  463a              MOV      r2,r7                 ;325
000724  4649              MOV      r1,r9                 ;325
000726  9000              STR      r0,[sp,#0]            ;325
000728  a809              ADD      r0,sp,#0x24           ;325
00072a  f7fffffe          BL       jpeg_huff_decode
00072e  1e06              SUBS     r6,r0,#0              ;325
000730  da01              BGE      |L1.1846|
000732  2000              MOVS     r0,#0                 ;325
000734  e79a              B        |L1.1644|
                  |L1.1846|
000736  f8dd902c          LDR      r9,[sp,#0x2c]         ;325
00073a  9f0c              LDR      r7,[sp,#0x30]         ;325
                  |L1.1852|
00073c  b35e              CBZ      r6,|L1.1942|
00073e  42b7              CMP      r7,r6                 ;327
000740  da0b              BGE      |L1.1882|
000742  4633              MOV      r3,r6                 ;327
000744  463a              MOV      r2,r7                 ;327
000746  4649              MOV      r1,r9                 ;327
000748  a809              ADD      r0,sp,#0x24           ;327
00074a  f7fffffe          BL       jpeg_fill_bit_buffer
00074e  b908              CBNZ     r0,|L1.1876|
000750  2000              MOVS     r0,#0                 ;327
000752  e78b              B        |L1.1644|
                  |L1.1876|
000754  f8dd902c          LDR      r9,[sp,#0x2c]         ;327
000758  9f0c              LDR      r7,[sp,#0x30]         ;327
                  |L1.1882|
00075a  eba70106          SUB      r1,r7,r6              ;328
00075e  460f              MOV      r7,r1                 ;328
000760  fa49f001          ASR      r0,r9,r1              ;328
000764  f04f0101          MOV      r1,#1                 ;328
000768  fa01f106          LSL      r1,r1,r6              ;328
00076c  f1a10101          SUB      r1,r1,#1              ;328
000770  e000              B        |L1.1908|
                  |L1.1906|
000772  e033              B        |L1.2012|
                  |L1.1908|
000774  ea000001          AND      r0,r0,r1              ;328
000778  900f              STR      r0,[sp,#0x3c]         ;328
00077a  48bd              LDR      r0,|L1.2672|
00077c  f8501026          LDR      r1,[r0,r6,LSL #2]     ;329
000780  980f              LDR      r0,[sp,#0x3c]         ;329
000782  4281              CMP      r1,r0                 ;329
000784  dd05              BLE      |L1.1938|
000786  48bb              LDR      r0,|L1.2676|
000788  f8501026          LDR      r1,[r0,r6,LSL #2]     ;329
00078c  980f              LDR      r0,[sp,#0x3c]         ;329
00078e  4408              ADD      r0,r0,r1              ;329
000790  e000              B        |L1.1940|
                  |L1.1938|
000792  980f              LDR      r0,[sp,#0x3c]         ;329
                  |L1.1940|
000794  4606              MOV      r6,r0                 ;329
                  |L1.1942|
000796  a805              ADD      r0,sp,#0x14           ;333
000798  f850002a          LDR      r0,[r0,r10,LSL #2]    ;333
00079c  4406              ADD      r6,r6,r0              ;333
00079e  a805              ADD      r0,sp,#0x14           ;334
0007a0  f840602a          STR      r6,[r0,r10,LSL #2]    ;334
0007a4  9810              LDR      r0,[sp,#0x40]         ;336
0007a6  fa06f000          LSL      r0,r6,r0              ;336
0007aa  b201              SXTH     r1,r0                 ;336
0007ac  980e              LDR      r0,[sp,#0x38]         ;336
0007ae  8001              STRH     r1,[r0,#0]            ;336
0007b0  f1080801          ADD      r8,r8,#1              ;316
                  |L1.1972|
0007b4  f8d40164          LDR      r0,[r4,#0x164]        ;316
0007b8  4540              CMP      r0,r8                 ;316
0007ba  f73faf70          BGT      |L1.1694|
0007be  9809              LDR      r0,[sp,#0x24]         ;340
0007c0  69a1              LDR      r1,[r4,#0x18]         ;340
0007c2  6008              STR      r0,[r1,#0]            ;340
0007c4  980a              LDR      r0,[sp,#0x28]         ;340
0007c6  69a1              LDR      r1,[r4,#0x18]         ;340
0007c8  6048              STR      r0,[r1,#4]            ;340
0007ca  f8c5900c          STR      r9,[r5,#0xc]          ;340
0007ce  612f              STR      r7,[r5,#0x10]         ;340
0007d0  2214              MOVS     r2,#0x14              ;341
0007d2  a904              ADD      r1,sp,#0x10           ;341
0007d4  f1050014          ADD      r0,r5,#0x14           ;341
0007d8  f7fffffe          BL       __aeabi_memcpy4
                  |L1.2012|
0007dc  6aa8              LDR      r0,[r5,#0x28]         ;345
0007de  f1a00001          SUB      r0,r0,#1              ;345
0007e2  62a8              STR      r0,[r5,#0x28]         ;345
0007e4  f04f0001          MOV      r0,#1                 ;347
0007e8  e740              B        |L1.1644|
;;;349    
                          ENDP

                  start_pass_phuff_decoder PROC
;;;91     METHODDEF(void)
;;;92     start_pass_phuff_decoder (j_decompress_ptr cinfo)
0007ea  e92d4ffe          PUSH     {r1-r11,lr}
;;;93     {
0007ee  4604              MOV      r4,r0
;;;94       phuff_entropy_ptr entropy = (phuff_entropy_ptr) cinfo->entropy;
0007f0  f8d451bc          LDR      r5,[r4,#0x1bc]
;;;95       boolean is_DC_band, bad;
;;;96       int ci, coefi, tbl;
;;;97       int *coef_bit_ptr;
;;;98       jpeg_component_info * compptr;
;;;99     
;;;100      is_DC_band = (cinfo->Ss == 0);
0007f4  f8d40190          LDR      r0,[r4,#0x190]
0007f8  b910              CBNZ     r0,|L1.2048|
0007fa  f04f0001          MOV      r0,#1
0007fe  e001              B        |L1.2052|
                  |L1.2048|
000800  f04f0000          MOV      r0,#0
                  |L1.2052|
000804  4680              MOV      r8,r0
;;;101    
;;;102      /* Validate scan parameters */
;;;103      bad = FALSE;
000806  f04f0000          MOV      r0,#0
00080a  9002              STR      r0,[sp,#8]
;;;104      if (is_DC_band) {
00080c  f1b80f00          CMP      r8,#0
000810  d006              BEQ      |L1.2080|
;;;105        if (cinfo->Se != 0)
000812  f8d40194          LDR      r0,[r4,#0x194]
000816  b1b0              CBZ      r0,|L1.2118|
;;;106          bad = TRUE;
000818  f04f0001          MOV      r0,#1
00081c  9002              STR      r0,[sp,#8]
00081e  e012              B        |L1.2118|
                  |L1.2080|
;;;107      } else {
;;;108        /* need not check Ss/Se < 0 since they came from unsigned bytes */
;;;109        if (cinfo->Ss > cinfo->Se || cinfo->Se >= DCTSIZE2)
000820  f50470c8          ADD      r0,r4,#0x190
000824  c803              LDM      r0,{r0,r1}
000826  4288              CMP      r0,r1
000828  dc03              BGT      |L1.2098|
00082a  f8d40194          LDR      r0,[r4,#0x194]
00082e  2840              CMP      r0,#0x40
000830  db02              BLT      |L1.2104|
                  |L1.2098|
;;;110          bad = TRUE;
000832  f04f0001          MOV      r0,#1
000836  9002              STR      r0,[sp,#8]
                  |L1.2104|
;;;111        /* AC scans may have only one component */
;;;112        if (cinfo->comps_in_scan != 1)
000838  f8d40148          LDR      r0,[r4,#0x148]
00083c  2801              CMP      r0,#1
00083e  d002              BEQ      |L1.2118|
;;;113          bad = TRUE;
000840  f04f0001          MOV      r0,#1
000844  9002              STR      r0,[sp,#8]
                  |L1.2118|
;;;114      }
;;;115      if (cinfo->Ah != 0) {
000846  f8d40198          LDR      r0,[r4,#0x198]
00084a  b140              CBZ      r0,|L1.2142|
;;;116        /* Successive approximation refinement scan: must have Al = Ah-1. */
;;;117        if (cinfo->Al != cinfo->Ah-1)
00084c  f50470cc          ADD      r0,r4,#0x198
000850  c803              LDM      r0,{r0,r1}
000852  1e40              SUBS     r0,r0,#1
000854  4281              CMP      r1,r0
000856  d002              BEQ      |L1.2142|
;;;118          bad = TRUE;
000858  f04f0001          MOV      r0,#1
00085c  9002              STR      r0,[sp,#8]
                  |L1.2142|
;;;119      }
;;;120      if (cinfo->Al > 13)		/* need not check for < 0 */
00085e  f8d4019c          LDR      r0,[r4,#0x19c]
000862  280d              CMP      r0,#0xd
000864  dd02              BLE      |L1.2156|
;;;121        bad = TRUE;
000866  f04f0001          MOV      r0,#1
00086a  9002              STR      r0,[sp,#8]
                  |L1.2156|
;;;122      /* Arguably the maximum Al value should be less than 13 for 8-bit precision,
;;;123       * but the spec doesn't say so, and we try to be liberal about what we
;;;124       * accept.  Note: large Al values could result in out-of-range DC
;;;125       * coefficients during early scans, leading to bizarre displays due to
;;;126       * overflows in the IDCT math.  But we won't crash.
;;;127       */
;;;128      if (bad)
00086c  9802              LDR      r0,[sp,#8]
00086e  b1b8              CBZ      r0,|L1.2208|
;;;129        ERREXIT4(cinfo, JERR_BAD_PROGRESSION,
000870  f04f0010          MOV      r0,#0x10
000874  6821              LDR      r1,[r4,#0]
000876  6148              STR      r0,[r1,#0x14]
000878  6821              LDR      r1,[r4,#0]
00087a  f8d40190          LDR      r0,[r4,#0x190]
00087e  6188              STR      r0,[r1,#0x18]
000880  f8d41194          LDR      r1,[r4,#0x194]
000884  6820              LDR      r0,[r4,#0]
000886  61c1              STR      r1,[r0,#0x1c]
000888  f8d41198          LDR      r1,[r4,#0x198]
00088c  6820              LDR      r0,[r4,#0]
00088e  6201              STR      r1,[r0,#0x20]
000890  f8d4119c          LDR      r1,[r4,#0x19c]
000894  6820              LDR      r0,[r4,#0]
000896  6241              STR      r1,[r0,#0x24]
000898  6820              LDR      r0,[r4,#0]
00089a  6801              LDR      r1,[r0,#0]
00089c  4620              MOV      r0,r4
00089e  4788              BLX      r1
                  |L1.2208|
;;;130    	     cinfo->Ss, cinfo->Se, cinfo->Ah, cinfo->Al);
;;;131      /* Update progression status, and verify that scan order is legal.
;;;132       * Note that inter-scan inconsistencies are treated as warnings
;;;133       * not fatal errors ... not clear if this is right way to behave.
;;;134       */
;;;135      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
0008a0  f04f0600          MOV      r6,#0
0008a4  e04f              B        |L1.2374|
                  |L1.2214|
;;;136        int cindex = cinfo->cur_comp_info[ci]->component_index;
0008a6  f50470a6          ADD      r0,r4,#0x14c
0008aa  f8500026          LDR      r0,[r0,r6,LSL #2]
0008ae  6840              LDR      r0,[r0,#4]
0008b0  9001              STR      r0,[sp,#4]
;;;137        coef_bit_ptr = & cinfo->coef_bits[cindex][0];
0008b2  f8d410a0          LDR      r1,[r4,#0xa0]
0008b6  9801              LDR      r0,[sp,#4]
0008b8  eb012900          ADD      r9,r1,r0,LSL #8
;;;138        if (!is_DC_band && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
0008bc  f1b80f00          CMP      r8,#0
0008c0  d114              BNE      |L1.2284|
0008c2  f8d90000          LDR      r0,[r9,#0]
0008c6  2800              CMP      r0,#0
0008c8  da10              BGE      |L1.2284|
;;;139          WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, 0);
0008ca  f04f0073          MOV      r0,#0x73
0008ce  6821              LDR      r1,[r4,#0]
0008d0  6148              STR      r0,[r1,#0x14]
0008d2  9801              LDR      r0,[sp,#4]
0008d4  6821              LDR      r1,[r4,#0]
0008d6  6188              STR      r0,[r1,#0x18]
0008d8  f04f0100          MOV      r1,#0
0008dc  6820              LDR      r0,[r4,#0]
0008de  61c1              STR      r1,[r0,#0x1c]
0008e0  6820              LDR      r0,[r4,#0]
0008e2  f04f31ff          MOV      r1,#0xffffffff
0008e6  6842              LDR      r2,[r0,#4]
0008e8  4620              MOV      r0,r4
0008ea  4790              BLX      r2
                  |L1.2284|
;;;140        for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
0008ec  f8d47190          LDR      r7,[r4,#0x190]
0008f0  e023              B        |L1.2362|
                  |L1.2290|
;;;141          int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
0008f2  f8590027          LDR      r0,[r9,r7,LSL #2]
0008f6  2800              CMP      r0,#0
0008f8  da02              BGE      |L1.2304|
0008fa  f04f0000          MOV      r0,#0
0008fe  e001              B        |L1.2308|
                  |L1.2304|
000900  f8590027          LDR      r0,[r9,r7,LSL #2]
                  |L1.2308|
000904  9000              STR      r0,[sp,#0]
;;;142          if (cinfo->Ah != expected)
000906  f8d41198          LDR      r1,[r4,#0x198]
00090a  9800              LDR      r0,[sp,#0]
00090c  4281              CMP      r1,r0
00090e  d00e              BEQ      |L1.2350|
;;;143    	WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, coefi);
000910  f04f0073          MOV      r0,#0x73
000914  6821              LDR      r1,[r4,#0]
000916  6148              STR      r0,[r1,#0x14]
000918  9801              LDR      r0,[sp,#4]
00091a  6821              LDR      r1,[r4,#0]
00091c  6188              STR      r0,[r1,#0x18]
00091e  6820              LDR      r0,[r4,#0]
000920  61c7              STR      r7,[r0,#0x1c]
000922  6820              LDR      r0,[r4,#0]
000924  f04f31ff          MOV      r1,#0xffffffff
000928  6842              LDR      r2,[r0,#4]
00092a  4620              MOV      r0,r4
00092c  4790              BLX      r2
                  |L1.2350|
;;;144          coef_bit_ptr[coefi] = cinfo->Al;
00092e  f8d4019c          LDR      r0,[r4,#0x19c]
000932  f8490027          STR      r0,[r9,r7,LSL #2]
000936  f1070701          ADD      r7,r7,#1              ;140
                  |L1.2362|
00093a  f8d40194          LDR      r0,[r4,#0x194]        ;140
00093e  42b8              CMP      r0,r7                 ;140
000940  dad7              BGE      |L1.2290|
000942  f1060601          ADD      r6,r6,#1              ;135
                  |L1.2374|
000946  f8d40148          LDR      r0,[r4,#0x148]        ;135
00094a  42b0              CMP      r0,r6                 ;135
00094c  dcab              BGT      |L1.2214|
;;;145        }
;;;146      }
;;;147    
;;;148      /* Select MCU decoding routine */
;;;149      if (cinfo->Ah == 0) {
00094e  f8d40198          LDR      r0,[r4,#0x198]
000952  b940              CBNZ     r0,|L1.2406|
;;;150        if (is_DC_band)
000954  f1b80f00          CMP      r8,#0
000958  d002              BEQ      |L1.2400|
;;;151          entropy->pub.decode_mcu = decode_mcu_DC_first;
00095a  4847              LDR      r0,|L1.2680|
00095c  6068              STR      r0,[r5,#4]
00095e  e00a              B        |L1.2422|
                  |L1.2400|
;;;152        else
;;;153          entropy->pub.decode_mcu = decode_mcu_AC_first;
000960  4846              LDR      r0,|L1.2684|
000962  6068              STR      r0,[r5,#4]
000964  e007              B        |L1.2422|
                  |L1.2406|
;;;154      } else {
;;;155        if (is_DC_band)
000966  f1b80f00          CMP      r8,#0
00096a  d002              BEQ      |L1.2418|
;;;156          entropy->pub.decode_mcu = decode_mcu_DC_refine;
00096c  4844              LDR      r0,|L1.2688|
00096e  6068              STR      r0,[r5,#4]
000970  e001              B        |L1.2422|
                  |L1.2418|
;;;157        else
;;;158          entropy->pub.decode_mcu = decode_mcu_AC_refine;
000972  4844              LDR      r0,|L1.2692|
000974  6068              STR      r0,[r5,#4]
                  |L1.2422|
;;;159      }
;;;160    
;;;161      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
000976  f04f0600          MOV      r6,#0
00097a  e02d              B        |L1.2520|
                  |L1.2428|
;;;162        compptr = cinfo->cur_comp_info[ci];
00097c  f50470a6          ADD      r0,r4,#0x14c
000980  f850b026          LDR      r11,[r0,r6,LSL #2]
;;;163        /* Make sure requested tables are present, and compute derived tables.
;;;164         * We may build same derived table more than once, but it's not expensive.
;;;165         */
;;;166        if (is_DC_band) {
000984  f1b80f00          CMP      r8,#0
000988  d00e              BEQ      |L1.2472|
;;;167          if (cinfo->Ah == 0) {	/* DC refinement needs no table */
00098a  f8d40198          LDR      r0,[r4,#0x198]
00098e  b9d8              CBNZ     r0,|L1.2504|
;;;168    	tbl = compptr->dc_tbl_no;
000990  f8dba014          LDR      r10,[r11,#0x14]
;;;169    	jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
000994  f105002c          ADD      r0,r5,#0x2c
000998  eb00038a          ADD      r3,r0,r10,LSL #2
00099c  4652              MOV      r2,r10
00099e  2101              MOVS     r1,#1
0009a0  4620              MOV      r0,r4
0009a2  f7fffffe          BL       jpeg_make_d_derived_tbl
0009a6  e00f              B        |L1.2504|
                  |L1.2472|
;;;170    				& entropy->derived_tbls[tbl]);
;;;171          }
;;;172        } else {
;;;173          tbl = compptr->ac_tbl_no;
0009a8  f8dba018          LDR      r10,[r11,#0x18]
;;;174          jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
0009ac  f105002c          ADD      r0,r5,#0x2c
0009b0  eb00038a          ADD      r3,r0,r10,LSL #2
0009b4  4652              MOV      r2,r10
0009b6  2100              MOVS     r1,#0
0009b8  4620              MOV      r0,r4
0009ba  f7fffffe          BL       jpeg_make_d_derived_tbl
;;;175    			      & entropy->derived_tbls[tbl]);
;;;176          /* remember the single active table */
;;;177          entropy->ac_derived_tbl = entropy->derived_tbls[tbl];
0009be  f105002c          ADD      r0,r5,#0x2c
0009c2  f850002a          LDR      r0,[r0,r10,LSL #2]
0009c6  63e8              STR      r0,[r5,#0x3c]
                  |L1.2504|
;;;178        }
;;;179        /* Initialize DC predictions to 0 */
;;;180        entropy->saved.last_dc_val[ci] = 0;
0009c8  f04f0100          MOV      r1,#0
0009cc  f1050018          ADD      r0,r5,#0x18
0009d0  f8401026          STR      r1,[r0,r6,LSL #2]
0009d4  f1060601          ADD      r6,r6,#1              ;161
                  |L1.2520|
0009d8  f8d40148          LDR      r0,[r4,#0x148]        ;161
0009dc  42b0              CMP      r0,r6                 ;161
0009de  dccd              BGT      |L1.2428|
;;;181      }
;;;182    
;;;183      /* Initialize bitread state variables */
;;;184      entropy->bitstate.bits_left = 0;
0009e0  f04f0100          MOV      r1,#0
0009e4  6129              STR      r1,[r5,#0x10]
;;;185      entropy->bitstate.get_buffer = 0; /* unnecessary, but keeps Purify quiet */
0009e6  4608              MOV      r0,r1
0009e8  60e8              STR      r0,[r5,#0xc]
;;;186      entropy->pub.insufficient_data = FALSE;
0009ea  60a8              STR      r0,[r5,#8]
;;;187    
;;;188      /* Initialize private state variables */
;;;189      entropy->saved.EOBRUN = 0;
0009ec  6168              STR      r0,[r5,#0x14]
;;;190    
;;;191      /* Initialize restart counter */
;;;192      entropy->restarts_to_go = cinfo->restart_interval;
0009ee  f8d40114          LDR      r0,[r4,#0x114]
0009f2  62a8              STR      r0,[r5,#0x28]
;;;193    }
0009f4  e8bd8ffe          POP      {r1-r11,pc}
;;;194    
                          ENDP

                  jinit_phuff_decoder PROC
;;;640    GLOBAL(void)
;;;641    jinit_phuff_decoder (j_decompress_ptr cinfo)
0009f8  e92d41f0          PUSH     {r4-r8,lr}
;;;642    {
0009fc  4604              MOV      r4,r0
;;;643      phuff_entropy_ptr entropy;
;;;644      int *coef_bit_ptr;
;;;645      int ci, i;
;;;646    
;;;647      entropy = (phuff_entropy_ptr)
0009fe  6860              LDR      r0,[r4,#4]
000a00  f04f0240          MOV      r2,#0x40
000a04  f04f0101          MOV      r1,#1
000a08  6803              LDR      r3,[r0,#0]
000a0a  4620              MOV      r0,r4
000a0c  4798              BLX      r3
000a0e  4606              MOV      r6,r0
;;;648        (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
;;;649    				SIZEOF(phuff_entropy_decoder));
;;;650      cinfo->entropy = (struct jpeg_entropy_decoder *) entropy;
000a10  f8c461bc          STR      r6,[r4,#0x1bc]
;;;651      entropy->pub.start_pass = start_pass_phuff_decoder;
000a14  481c              LDR      r0,|L1.2696|
000a16  6030              STR      r0,[r6,#0]
;;;652    
;;;653      /* Mark derived tables unallocated */
;;;654      for (i = 0; i < NUM_HUFF_TBLS; i++) {
000a18  f04f0500          MOV      r5,#0
000a1c  e007              B        |L1.2606|
                  |L1.2590|
;;;655        entropy->derived_tbls[i] = NULL;
000a1e  f04f0100          MOV      r1,#0
000a22  f106002c          ADD      r0,r6,#0x2c
000a26  f8401025          STR      r1,[r0,r5,LSL #2]
000a2a  f1050501          ADD      r5,r5,#1              ;654
                  |L1.2606|
000a2e  2d04              CMP      r5,#4                 ;654
000a30  dbf5              BLT      |L1.2590|
;;;656      }
;;;657    
;;;658      /* Create progression status table */
;;;659      cinfo->coef_bits = (int (*)[DCTSIZE2])
000a32  6a60              LDR      r0,[r4,#0x24]
000a34  0202              LSLS     r2,r0,#8
000a36  6860              LDR      r0,[r4,#4]
000a38  2101              MOVS     r1,#1
000a3a  6803              LDR      r3,[r0,#0]
000a3c  4620              MOV      r0,r4
000a3e  4798              BLX      r3
000a40  f8c400a0          STR      r0,[r4,#0xa0]
;;;660        (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
;;;661    				cinfo->num_components*DCTSIZE2*SIZEOF(int));
;;;662      coef_bit_ptr = & cinfo->coef_bits[0][0];
000a44  f8d470a0          LDR      r7,[r4,#0xa0]
;;;663      for (ci = 0; ci < cinfo->num_components; ci++) 
000a48  f04f0800          MOV      r8,#0
000a4c  e00b              B        |L1.2662|
                  |L1.2638|
;;;664        for (i = 0; i < DCTSIZE2; i++)
000a4e  f04f0500          MOV      r5,#0
000a52  e004              B        |L1.2654|
                  |L1.2644|
;;;665          *coef_bit_ptr++ = -1;
000a54  f04f30ff          MOV      r0,#0xffffffff
000a58  c701              STM      r7!,{r0}
000a5a  f1050501          ADD      r5,r5,#1              ;664
                  |L1.2654|
000a5e  2d40              CMP      r5,#0x40              ;664
000a60  dbf8              BLT      |L1.2644|
000a62  f1080801          ADD      r8,r8,#1              ;663
                  |L1.2662|
000a66  6a60              LDR      r0,[r4,#0x24]         ;663
000a68  4540              CMP      r0,r8                 ;663
000a6a  dcf0              BGT      |L1.2638|
;;;666    }
000a6c  e8bd81f0          POP      {r4-r8,pc}
;;;667    
                          ENDP

                  |L1.2672|
                          DCD      extend_test
                  |L1.2676|
                          DCD      extend_offset
                  |L1.2680|
                          DCD      decode_mcu_DC_first
                  |L1.2684|
                          DCD      decode_mcu_AC_first
                  |L1.2688|
                          DCD      decode_mcu_DC_refine
                  |L1.2692|
                          DCD      decode_mcu_AC_refine
                  |L1.2696|
                          DCD      start_pass_phuff_decoder

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  extend_test
                          DCD      0x00000000
                          DCD      0x00000001
                          DCD      0x00000002
                          DCD      0x00000004
                          DCD      0x00000008
                          DCD      0x00000010
                          DCD      0x00000020
                          DCD      0x00000040
                          DCD      0x00000080
                          DCD      0x00000100
                          DCD      0x00000200
                          DCD      0x00000400
                          DCD      0x00000800
                          DCD      0x00001000
                          DCD      0x00002000
                          DCD      0x00004000
                  extend_offset
                          DCD      0x00000000
                          DCD      0xffffffff
                          DCD      0xfffffffd
                          DCD      0xfffffff9
                          DCD      0xfffffff1
                          DCD      0xffffffe1
                          DCD      0xffffffc1
                          DCD      0xffffff81
                          DCD      0xffffff01
                          DCD      0xfffffe01
                          DCD      0xfffffc01
                          DCD      0xfffff801
                          DCD      0xfffff001
                          DCD      0xffffe001
                          DCD      0xffffc001
                          DCD      0xffff8001
