; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\usb_regs.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\usb_regs.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\FWlib\inc -I.\user -I.\CM3 -I.\MALLOC -I.\TFT -I.\EMWIN\EMWIN_INC -I.\EMWIN\DEMO -I.\PNG -I.\FATFS -I.\SDIO -I.\USB\inc -I.\USBCFG\inc -IE:\material\GUI\STM32·Ü¶·°å-emwin+fatfs+usb+memdev\RTE -Id:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.1.0\Device\Include -Id:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=515 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\usb_regs.crf USB\src\usb_regs.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  SetCNTR PROC
;;;34     *******************************************************************************/
;;;35     void SetCNTR(uint16_t wRegValue)
000000  49fa              LDR      r1,|L1.1004|
;;;36     {
;;;37       _SetCNTR(wRegValue);
000002  6008              STR      r0,[r1,#0]
;;;38     }
000004  4770              BX       lr
;;;39     
                          ENDP

                  GetCNTR PROC
;;;46     *******************************************************************************/
;;;47     uint16_t GetCNTR(void)
000006  48f9              LDR      r0,|L1.1004|
;;;48     {
;;;49       return(_GetCNTR());
000008  6800              LDR      r0,[r0,#0]
00000a  b280              UXTH     r0,r0
;;;50     }
00000c  4770              BX       lr
;;;51     
                          ENDP

                  SetISTR PROC
;;;58     *******************************************************************************/
;;;59     void SetISTR(uint16_t wRegValue)
00000e  49f7              LDR      r1,|L1.1004|
;;;60     {
;;;61       _SetISTR(wRegValue);
000010  1d09              ADDS     r1,r1,#4
000012  6008              STR      r0,[r1,#0]
;;;62     }
000014  4770              BX       lr
;;;63     
                          ENDP

                  GetISTR PROC
;;;70     *******************************************************************************/
;;;71     uint16_t GetISTR(void)
000016  48f5              LDR      r0,|L1.1004|
;;;72     {
;;;73       return(_GetISTR());
000018  1d00              ADDS     r0,r0,#4
00001a  6800              LDR      r0,[r0,#0]
00001c  b280              UXTH     r0,r0
;;;74     }
00001e  4770              BX       lr
;;;75     
                          ENDP

                  GetFNR PROC
;;;82     *******************************************************************************/
;;;83     uint16_t GetFNR(void)
000020  48f2              LDR      r0,|L1.1004|
;;;84     {
;;;85       return(_GetFNR());
000022  3008              ADDS     r0,r0,#8
000024  6800              LDR      r0,[r0,#0]
000026  b280              UXTH     r0,r0
;;;86     }
000028  4770              BX       lr
;;;87     
                          ENDP

                  SetDADDR PROC
;;;94     *******************************************************************************/
;;;95     void SetDADDR(uint16_t wRegValue)
00002a  49f0              LDR      r1,|L1.1004|
;;;96     {
;;;97       _SetDADDR(wRegValue);
00002c  310c              ADDS     r1,r1,#0xc
00002e  6008              STR      r0,[r1,#0]
;;;98     }
000030  4770              BX       lr
;;;99     
                          ENDP

                  GetDADDR PROC
;;;106    *******************************************************************************/
;;;107    uint16_t GetDADDR(void)
000032  48ee              LDR      r0,|L1.1004|
;;;108    {
;;;109      return(_GetDADDR());
000034  300c              ADDS     r0,r0,#0xc
000036  6800              LDR      r0,[r0,#0]
000038  b280              UXTH     r0,r0
;;;110    }
00003a  4770              BX       lr
;;;111    
                          ENDP

                  SetBTABLE PROC
;;;118    *******************************************************************************/
;;;119    void SetBTABLE(uint16_t wRegValue)
00003c  f64f71f8          MOV      r1,#0xfff8
;;;120    {
;;;121      _SetBTABLE(wRegValue);
000040  4001              ANDS     r1,r1,r0
000042  4aea              LDR      r2,|L1.1004|
000044  3210              ADDS     r2,r2,#0x10
000046  6011              STR      r1,[r2,#0]
;;;122    }
000048  4770              BX       lr
;;;123    
                          ENDP

                  GetBTABLE PROC
;;;130    *******************************************************************************/
;;;131    uint16_t GetBTABLE(void)
00004a  48e8              LDR      r0,|L1.1004|
;;;132    {
;;;133      return(_GetBTABLE());
00004c  3010              ADDS     r0,r0,#0x10
00004e  6800              LDR      r0,[r0,#0]
000050  b280              UXTH     r0,r0
;;;134    }
000052  4770              BX       lr
;;;135    
                          ENDP

                  SetENDPOINT PROC
;;;143    *******************************************************************************/
;;;144    void SetENDPOINT(uint8_t bEpNum, uint16_t wRegValue)
000054  4be6              LDR      r3,|L1.1008|
;;;145    {
;;;146      _SetENDPOINT(bEpNum, wRegValue);
000056  eb030280          ADD      r2,r3,r0,LSL #2
00005a  f8c21c00          STR      r1,[r2,#0xc00]
;;;147    }
00005e  4770              BX       lr
;;;148    
                          ENDP

                  GetENDPOINT PROC
;;;155    *******************************************************************************/
;;;156    uint16_t GetENDPOINT(uint8_t bEpNum)
000060  4601              MOV      r1,r0
;;;157    {
;;;158      return(_GetENDPOINT(bEpNum));
000062  4ae3              LDR      r2,|L1.1008|
000064  eb020081          ADD      r0,r2,r1,LSL #2
000068  f8d00c00          LDR      r0,[r0,#0xc00]
00006c  b280              UXTH     r0,r0
;;;159    }
00006e  4770              BX       lr
;;;160    
                          ENDP

                  SetEPType PROC
;;;168    *******************************************************************************/
;;;169    void SetEPType(uint8_t bEpNum, uint16_t wType)
000070  b510              PUSH     {r4,lr}
;;;170    {
;;;171      _SetEPType(bEpNum, wType);
000072  4bdf              LDR      r3,|L1.1008|
000074  eb030280          ADD      r2,r3,r0,LSL #2
000078  f8d22c00          LDR      r2,[r2,#0xc00]
00007c  f648138f          MOV      r3,#0x898f
000080  401a              ANDS     r2,r2,r3
000082  430a              ORRS     r2,r2,r1
000084  4cda              LDR      r4,|L1.1008|
000086  eb040380          ADD      r3,r4,r0,LSL #2
00008a  f8c32c00          STR      r2,[r3,#0xc00]
;;;172    }
00008e  bd10              POP      {r4,pc}
;;;173    
                          ENDP

                  GetEPType PROC
;;;180    *******************************************************************************/
;;;181    uint16_t GetEPType(uint8_t bEpNum)
000090  4601              MOV      r1,r0
;;;182    {
;;;183      return(_GetEPType(bEpNum));
000092  4ad7              LDR      r2,|L1.1008|
000094  eb020081          ADD      r0,r2,r1,LSL #2
000098  f8d00c00          LDR      r0,[r0,#0xc00]
00009c  f40060c0          AND      r0,r0,#0x600
;;;184    }
0000a0  4770              BX       lr
;;;185    
                          ENDP

                  SetEPTxStatus PROC
;;;193    *******************************************************************************/
;;;194    void SetEPTxStatus(uint8_t bEpNum, uint16_t wState)
0000a2  b530              PUSH     {r4,r5,lr}
;;;195    {
;;;196      _SetEPTxStatus(bEpNum, wState);
0000a4  4cd2              LDR      r4,|L1.1008|
0000a6  eb040380          ADD      r3,r4,r0,LSL #2
0000aa  f8d33c00          LDR      r3,[r3,#0xc00]
0000ae  f64874bf          MOV      r4,#0x8fbf
0000b2  ea030204          AND      r2,r3,r4
0000b6  f0010310          AND      r3,r1,#0x10
0000ba  b10b              CBZ      r3,|L1.192|
0000bc  f0820210          EOR      r2,r2,#0x10
                  |L1.192|
0000c0  f0010320          AND      r3,r1,#0x20
0000c4  b10b              CBZ      r3,|L1.202|
0000c6  f0820220          EOR      r2,r2,#0x20
                  |L1.202|
0000ca  f4424300          ORR      r3,r2,#0x8000
0000ce  f0430380          ORR      r3,r3,#0x80
0000d2  4dc7              LDR      r5,|L1.1008|
0000d4  eb050480          ADD      r4,r5,r0,LSL #2
0000d8  f8c43c00          STR      r3,[r4,#0xc00]
;;;197    }
0000dc  bd30              POP      {r4,r5,pc}
;;;198    
                          ENDP

                  SetEPRxStatus PROC
;;;206    *******************************************************************************/
;;;207    void SetEPRxStatus(uint8_t bEpNum, uint16_t wState)
0000de  b530              PUSH     {r4,r5,lr}
;;;208    {
;;;209      _SetEPRxStatus(bEpNum, wState);
0000e0  4cc3              LDR      r4,|L1.1008|
0000e2  eb040380          ADD      r3,r4,r0,LSL #2
0000e6  f8d33c00          LDR      r3,[r3,#0xc00]
0000ea  f64b748f          MOV      r4,#0xbf8f
0000ee  ea030204          AND      r2,r3,r4
0000f2  f4015380          AND      r3,r1,#0x1000
0000f6  b10b              CBZ      r3,|L1.252|
0000f8  f4825280          EOR      r2,r2,#0x1000
                  |L1.252|
0000fc  f4015300          AND      r3,r1,#0x2000
000100  b10b              CBZ      r3,|L1.262|
000102  f4825200          EOR      r2,r2,#0x2000
                  |L1.262|
000106  f4424300          ORR      r3,r2,#0x8000
00010a  f0430380          ORR      r3,r3,#0x80
00010e  4db8              LDR      r5,|L1.1008|
000110  eb050480          ADD      r4,r5,r0,LSL #2
000114  f8c43c00          STR      r3,[r4,#0xc00]
;;;210    }
000118  bd30              POP      {r4,r5,pc}
;;;211    
                          ENDP

                  SetDouBleBuffEPStall PROC
;;;219    *******************************************************************************/
;;;220    void SetDouBleBuffEPStall(uint8_t bEpNum, uint8_t bDir)
00011a  b530              PUSH     {r4,r5,lr}
;;;221    {
00011c  4603              MOV      r3,r0
00011e  460c              MOV      r4,r1
;;;222      uint16_t Endpoint_DTOG_Status;
;;;223      Endpoint_DTOG_Status = GetENDPOINT(bEpNum);
000120  4618              MOV      r0,r3
000122  f7fffffe          BL       GetENDPOINT
000126  4605              MOV      r5,r0
;;;224      if (bDir == EP_DBUF_OUT)
000128  2c01              CMP      r4,#1
00012a  d107              BNE      |L1.316|
;;;225      { /* OUT double buffered endpoint */
;;;226        _SetENDPOINT(bEpNum, Endpoint_DTOG_Status & ~EPRX_DTOG1);
00012c  f4255080          BIC      r0,r5,#0x1000
000130  4aaf              LDR      r2,|L1.1008|
000132  eb020183          ADD      r1,r2,r3,LSL #2
000136  f8c10c00          STR      r0,[r1,#0xc00]
00013a  e008              B        |L1.334|
                  |L1.316|
;;;227      }
;;;228      else if (bDir == EP_DBUF_IN)
00013c  2c02              CMP      r4,#2
00013e  d106              BNE      |L1.334|
;;;229      { /* IN double buffered endpoint */
;;;230        _SetENDPOINT(bEpNum, Endpoint_DTOG_Status & ~EPTX_DTOG1);
000140  f0250010          BIC      r0,r5,#0x10
000144  4aaa              LDR      r2,|L1.1008|
000146  eb020183          ADD      r1,r2,r3,LSL #2
00014a  f8c10c00          STR      r0,[r1,#0xc00]
                  |L1.334|
;;;231      }
;;;232    }
00014e  bd30              POP      {r4,r5,pc}
;;;233    
                          ENDP

                  GetEPTxStatus PROC
;;;240    *******************************************************************************/
;;;241    uint16_t GetEPTxStatus(uint8_t bEpNum)
000150  4601              MOV      r1,r0
;;;242    {
;;;243      return(_GetEPTxStatus(bEpNum));
000152  4aa7              LDR      r2,|L1.1008|
000154  eb020081          ADD      r0,r2,r1,LSL #2
000158  f8d00c00          LDR      r0,[r0,#0xc00]
00015c  f0000030          AND      r0,r0,#0x30
;;;244    }
000160  4770              BX       lr
;;;245    
                          ENDP

                  GetEPRxStatus PROC
;;;252    *******************************************************************************/
;;;253    uint16_t GetEPRxStatus(uint8_t bEpNum)
000162  4601              MOV      r1,r0
;;;254    {
;;;255      return(_GetEPRxStatus(bEpNum));
000164  4aa2              LDR      r2,|L1.1008|
000166  eb020081          ADD      r0,r2,r1,LSL #2
00016a  f8d00c00          LDR      r0,[r0,#0xc00]
00016e  f4005040          AND      r0,r0,#0x3000
;;;256    }
000172  4770              BX       lr
;;;257    
                          ENDP

                  SetEPTxValid PROC
;;;264    *******************************************************************************/
;;;265    void SetEPTxValid(uint8_t bEpNum)
000174  b510              PUSH     {r4,lr}
;;;266    {
;;;267      _SetEPTxStatus(bEpNum, EP_TX_VALID);
000176  4b9e              LDR      r3,|L1.1008|
000178  eb030280          ADD      r2,r3,r0,LSL #2
00017c  f8d22c00          LDR      r2,[r2,#0xc00]
000180  f64873bf          MOV      r3,#0x8fbf
000184  ea020103          AND      r1,r2,r3
000188  f0810110          EOR      r1,r1,#0x10
00018c  f0810120          EOR      r1,r1,#0x20
000190  f4414200          ORR      r2,r1,#0x8000
000194  f0420280          ORR      r2,r2,#0x80
000198  4c95              LDR      r4,|L1.1008|
00019a  eb040380          ADD      r3,r4,r0,LSL #2
00019e  f8c32c00          STR      r2,[r3,#0xc00]
;;;268    }
0001a2  bd10              POP      {r4,pc}
;;;269    
                          ENDP

                  SetEPRxValid PROC
;;;276    *******************************************************************************/
;;;277    void SetEPRxValid(uint8_t bEpNum)
0001a4  b510              PUSH     {r4,lr}
;;;278    {
;;;279      _SetEPRxStatus(bEpNum, EP_RX_VALID);
0001a6  4b92              LDR      r3,|L1.1008|
0001a8  eb030280          ADD      r2,r3,r0,LSL #2
0001ac  f8d22c00          LDR      r2,[r2,#0xc00]
0001b0  f64b738f          MOV      r3,#0xbf8f
0001b4  ea020103          AND      r1,r2,r3
0001b8  f4815180          EOR      r1,r1,#0x1000
0001bc  f4815100          EOR      r1,r1,#0x2000
0001c0  f4414200          ORR      r2,r1,#0x8000
0001c4  f0420280          ORR      r2,r2,#0x80
0001c8  4c89              LDR      r4,|L1.1008|
0001ca  eb040380          ADD      r3,r4,r0,LSL #2
0001ce  f8c32c00          STR      r2,[r3,#0xc00]
;;;280    }
0001d2  bd10              POP      {r4,pc}
;;;281    
                          ENDP

                  SetEP_KIND PROC
;;;288    *******************************************************************************/
;;;289    void SetEP_KIND(uint8_t bEpNum)
0001d4  4a86              LDR      r2,|L1.1008|
;;;290    {
;;;291      _SetEP_KIND(bEpNum);
0001d6  eb020180          ADD      r1,r2,r0,LSL #2
0001da  f8d11c00          LDR      r1,[r1,#0xc00]
0001de  f4417180          ORR      r1,r1,#0x100
0001e2  f648728f          MOV      r2,#0x8f8f
0001e6  4011              ANDS     r1,r1,r2
0001e8  f2480280          MOV      r2,#0x8080
0001ec  4311              ORRS     r1,r1,r2
0001ee  4b80              LDR      r3,|L1.1008|
0001f0  eb030280          ADD      r2,r3,r0,LSL #2
0001f4  f8c21c00          STR      r1,[r2,#0xc00]
;;;292    }
0001f8  4770              BX       lr
;;;293    
                          ENDP

                  ClearEP_KIND PROC
;;;300    *******************************************************************************/
;;;301    void ClearEP_KIND(uint8_t bEpNum)
0001fa  4a7d              LDR      r2,|L1.1008|
;;;302    {
;;;303      _ClearEP_KIND(bEpNum);
0001fc  eb020180          ADD      r1,r2,r0,LSL #2
000200  f8d11c00          LDR      r1,[r1,#0xc00]
000204  f648628f          MOV      r2,#0x8e8f
000208  4011              ANDS     r1,r1,r2
00020a  f2480280          MOV      r2,#0x8080
00020e  4311              ORRS     r1,r1,r2
000210  4b77              LDR      r3,|L1.1008|
000212  eb030280          ADD      r2,r3,r0,LSL #2
000216  f8c21c00          STR      r1,[r2,#0xc00]
;;;304    }
00021a  4770              BX       lr
;;;305    /*******************************************************************************
                          ENDP

                  Clear_Status_Out PROC
;;;311    *******************************************************************************/
;;;312    void Clear_Status_Out(uint8_t bEpNum)
00021c  4a74              LDR      r2,|L1.1008|
;;;313    {
;;;314      _ClearEP_KIND(bEpNum);
00021e  eb020180          ADD      r1,r2,r0,LSL #2
000222  f8d11c00          LDR      r1,[r1,#0xc00]
000226  f648628f          MOV      r2,#0x8e8f
00022a  4011              ANDS     r1,r1,r2
00022c  f2480280          MOV      r2,#0x8080
000230  4311              ORRS     r1,r1,r2
000232  4b6f              LDR      r3,|L1.1008|
000234  eb030280          ADD      r2,r3,r0,LSL #2
000238  f8c21c00          STR      r1,[r2,#0xc00]
;;;315    }
00023c  4770              BX       lr
;;;316    /*******************************************************************************
                          ENDP

                  Set_Status_Out PROC
;;;322    *******************************************************************************/
;;;323    void Set_Status_Out(uint8_t bEpNum)
00023e  4a6c              LDR      r2,|L1.1008|
;;;324    {
;;;325      _SetEP_KIND(bEpNum);
000240  eb020180          ADD      r1,r2,r0,LSL #2
000244  f8d11c00          LDR      r1,[r1,#0xc00]
000248  f4417180          ORR      r1,r1,#0x100
00024c  f648728f          MOV      r2,#0x8f8f
000250  4011              ANDS     r1,r1,r2
000252  f2480280          MOV      r2,#0x8080
000256  4311              ORRS     r1,r1,r2
000258  4b65              LDR      r3,|L1.1008|
00025a  eb030280          ADD      r2,r3,r0,LSL #2
00025e  f8c21c00          STR      r1,[r2,#0xc00]
;;;326    }
000262  4770              BX       lr
;;;327    /*******************************************************************************
                          ENDP

                  SetEPDoubleBuff PROC
;;;333    *******************************************************************************/
;;;334    void SetEPDoubleBuff(uint8_t bEpNum)
000264  4a62              LDR      r2,|L1.1008|
;;;335    {
;;;336      _SetEP_KIND(bEpNum);
000266  eb020180          ADD      r1,r2,r0,LSL #2
00026a  f8d11c00          LDR      r1,[r1,#0xc00]
00026e  f4417180          ORR      r1,r1,#0x100
000272  f648728f          MOV      r2,#0x8f8f
000276  4011              ANDS     r1,r1,r2
000278  f2480280          MOV      r2,#0x8080
00027c  4311              ORRS     r1,r1,r2
00027e  4b5c              LDR      r3,|L1.1008|
000280  eb030280          ADD      r2,r3,r0,LSL #2
000284  f8c21c00          STR      r1,[r2,#0xc00]
;;;337    }
000288  4770              BX       lr
;;;338    /*******************************************************************************
                          ENDP

                  ClearEPDoubleBuff PROC
;;;344    *******************************************************************************/
;;;345    void ClearEPDoubleBuff(uint8_t bEpNum)
00028a  4a59              LDR      r2,|L1.1008|
;;;346    {
;;;347      _ClearEP_KIND(bEpNum);
00028c  eb020180          ADD      r1,r2,r0,LSL #2
000290  f8d11c00          LDR      r1,[r1,#0xc00]
000294  f648628f          MOV      r2,#0x8e8f
000298  4011              ANDS     r1,r1,r2
00029a  f2480280          MOV      r2,#0x8080
00029e  4311              ORRS     r1,r1,r2
0002a0  4b53              LDR      r3,|L1.1008|
0002a2  eb030280          ADD      r2,r3,r0,LSL #2
0002a6  f8c21c00          STR      r1,[r2,#0xc00]
;;;348    }
0002aa  4770              BX       lr
;;;349    /*******************************************************************************
                          ENDP

                  GetTxStallStatus PROC
;;;355    *******************************************************************************/
;;;356    uint16_t GetTxStallStatus(uint8_t bEpNum)
0002ac  4601              MOV      r1,r0
;;;357    {
;;;358      return(_GetTxStallStatus(bEpNum));
0002ae  4a50              LDR      r2,|L1.1008|
0002b0  eb020081          ADD      r0,r2,r1,LSL #2
0002b4  f8d00c00          LDR      r0,[r0,#0xc00]
0002b8  f0000030          AND      r0,r0,#0x30
0002bc  2810              CMP      r0,#0x10
0002be  d101              BNE      |L1.708|
0002c0  2001              MOVS     r0,#1
                  |L1.706|
;;;359    }
0002c2  4770              BX       lr
                  |L1.708|
0002c4  2000              MOVS     r0,#0                 ;358
0002c6  e7fc              B        |L1.706|
;;;360    /*******************************************************************************
                          ENDP

                  GetRxStallStatus PROC
;;;366    *******************************************************************************/
;;;367    uint16_t GetRxStallStatus(uint8_t bEpNum)
0002c8  4601              MOV      r1,r0
;;;368    {
;;;369      return(_GetRxStallStatus(bEpNum));
0002ca  4a49              LDR      r2,|L1.1008|
0002cc  eb020081          ADD      r0,r2,r1,LSL #2
0002d0  f8d00c00          LDR      r0,[r0,#0xc00]
0002d4  f4005040          AND      r0,r0,#0x3000
0002d8  f5b05f80          CMP      r0,#0x1000
0002dc  d101              BNE      |L1.738|
0002de  2001              MOVS     r0,#1
                  |L1.736|
;;;370    }
0002e0  4770              BX       lr
                  |L1.738|
0002e2  2000              MOVS     r0,#0                 ;369
0002e4  e7fc              B        |L1.736|
;;;371    /*******************************************************************************
                          ENDP

                  ClearEP_CTR_RX PROC
;;;377    *******************************************************************************/
;;;378    void ClearEP_CTR_RX(uint8_t bEpNum)
0002e6  4a42              LDR      r2,|L1.1008|
;;;379    {
;;;380      _ClearEP_CTR_RX(bEpNum);
0002e8  eb020180          ADD      r1,r2,r0,LSL #2
0002ec  f8d11c00          LDR      r1,[r1,#0xc00]
0002f0  f3c1010e          UBFX     r1,r1,#0,#15
0002f4  f648728f          MOV      r2,#0x8f8f
0002f8  4011              ANDS     r1,r1,r2
0002fa  4b3d              LDR      r3,|L1.1008|
0002fc  eb030280          ADD      r2,r3,r0,LSL #2
000300  f8c21c00          STR      r1,[r2,#0xc00]
;;;381    }
000304  4770              BX       lr
;;;382    /*******************************************************************************
                          ENDP

                  ClearEP_CTR_TX PROC
;;;388    *******************************************************************************/
;;;389    void ClearEP_CTR_TX(uint8_t bEpNum)
000306  4a3a              LDR      r2,|L1.1008|
;;;390    {
;;;391      _ClearEP_CTR_TX(bEpNum);
000308  eb020180          ADD      r1,r2,r0,LSL #2
00030c  f8d11c00          LDR      r1,[r1,#0xc00]
000310  f648720f          MOV      r2,#0x8f0f
000314  4011              ANDS     r1,r1,r2
000316  4b36              LDR      r3,|L1.1008|
000318  eb030280          ADD      r2,r3,r0,LSL #2
00031c  f8c21c00          STR      r1,[r2,#0xc00]
;;;392    }
000320  4770              BX       lr
;;;393    /*******************************************************************************
                          ENDP

                  ToggleDTOG_RX PROC
;;;399    *******************************************************************************/
;;;400    void ToggleDTOG_RX(uint8_t bEpNum)
000322  4a33              LDR      r2,|L1.1008|
;;;401    {
;;;402      _ToggleDTOG_RX(bEpNum);
000324  eb020180          ADD      r1,r2,r0,LSL #2
000328  f8d11c00          LDR      r1,[r1,#0xc00]
00032c  f648728f          MOV      r2,#0x8f8f
000330  4011              ANDS     r1,r1,r2
000332  f24c0280          MOV      r2,#0xc080
000336  4311              ORRS     r1,r1,r2
000338  4b2d              LDR      r3,|L1.1008|
00033a  eb030280          ADD      r2,r3,r0,LSL #2
00033e  f8c21c00          STR      r1,[r2,#0xc00]
;;;403    }
000342  4770              BX       lr
;;;404    /*******************************************************************************
                          ENDP

                  ToggleDTOG_TX PROC
;;;410    *******************************************************************************/
;;;411    void ToggleDTOG_TX(uint8_t bEpNum)
000344  4a2a              LDR      r2,|L1.1008|
;;;412    {
;;;413      _ToggleDTOG_TX(bEpNum);
000346  eb020180          ADD      r1,r2,r0,LSL #2
00034a  f8d11c00          LDR      r1,[r1,#0xc00]
00034e  f648728f          MOV      r2,#0x8f8f
000352  4011              ANDS     r1,r1,r2
000354  f24802c0          MOV      r2,#0x80c0
000358  4311              ORRS     r1,r1,r2
00035a  4b25              LDR      r3,|L1.1008|
00035c  eb030280          ADD      r2,r3,r0,LSL #2
000360  f8c21c00          STR      r1,[r2,#0xc00]
;;;414    }
000364  4770              BX       lr
;;;415    /*******************************************************************************
                          ENDP

                  ClearDTOG_RX PROC
;;;421    *******************************************************************************/
;;;422    void ClearDTOG_RX(uint8_t bEpNum)
000366  4a22              LDR      r2,|L1.1008|
;;;423    {
;;;424      _ClearDTOG_RX(bEpNum);
000368  eb020180          ADD      r1,r2,r0,LSL #2
00036c  f8d11c00          LDR      r1,[r1,#0xc00]
000370  f4014180          AND      r1,r1,#0x4000
000374  b171              CBZ      r1,|L1.916|
000376  eb020180          ADD      r1,r2,r0,LSL #2
00037a  f8d11c00          LDR      r1,[r1,#0xc00]
00037e  f648728f          MOV      r2,#0x8f8f
000382  4011              ANDS     r1,r1,r2
000384  f24c0280          MOV      r2,#0xc080
000388  4311              ORRS     r1,r1,r2
00038a  4b19              LDR      r3,|L1.1008|
00038c  eb030280          ADD      r2,r3,r0,LSL #2
000390  f8c21c00          STR      r1,[r2,#0xc00]
                  |L1.916|
;;;425    }
000394  4770              BX       lr
;;;426    /*******************************************************************************
                          ENDP

                  ClearDTOG_TX PROC
;;;432    *******************************************************************************/
;;;433    void ClearDTOG_TX(uint8_t bEpNum)
000396  4a16              LDR      r2,|L1.1008|
;;;434    {
;;;435      _ClearDTOG_TX(bEpNum);
000398  eb020180          ADD      r1,r2,r0,LSL #2
00039c  f8d11c00          LDR      r1,[r1,#0xc00]
0003a0  f0010140          AND      r1,r1,#0x40
0003a4  b171              CBZ      r1,|L1.964|
0003a6  eb020180          ADD      r1,r2,r0,LSL #2
0003aa  f8d11c00          LDR      r1,[r1,#0xc00]
0003ae  f648728f          MOV      r2,#0x8f8f
0003b2  4011              ANDS     r1,r1,r2
0003b4  f24802c0          MOV      r2,#0x80c0
0003b8  4311              ORRS     r1,r1,r2
0003ba  4b0d              LDR      r3,|L1.1008|
0003bc  eb030280          ADD      r2,r3,r0,LSL #2
0003c0  f8c21c00          STR      r1,[r2,#0xc00]
                  |L1.964|
;;;436    }
0003c4  4770              BX       lr
;;;437    /*******************************************************************************
                          ENDP

                  SetEPAddress PROC
;;;444    *******************************************************************************/
;;;445    void SetEPAddress(uint8_t bEpNum, uint8_t bAddr)
0003c6  b510              PUSH     {r4,lr}
;;;446    {
;;;447      _SetEPAddress(bEpNum, bAddr);
0003c8  4b09              LDR      r3,|L1.1008|
0003ca  eb030280          ADD      r2,r3,r0,LSL #2
0003ce  f8d22c00          LDR      r2,[r2,#0xc00]
0003d2  f648738f          MOV      r3,#0x8f8f
0003d6  401a              ANDS     r2,r2,r3
0003d8  f2480380          MOV      r3,#0x8080
0003dc  431a              ORRS     r2,r2,r3
0003de  430a              ORRS     r2,r2,r1
0003e0  4c03              LDR      r4,|L1.1008|
0003e2  eb040380          ADD      r3,r4,r0,LSL #2
0003e6  f8c32c00          STR      r2,[r3,#0xc00]
;;;448    }
0003ea  bd10              POP      {r4,pc}
                  |L1.1004|
                          DCD      0x40005c40
                  |L1.1008|
                          DCD      0x40005000
                          ENDP

                  GetEPAddress PROC
;;;455    *******************************************************************************/
;;;456    uint8_t GetEPAddress(uint8_t bEpNum)
0003f4  4601              MOV      r1,r0
;;;457    {
;;;458      return(_GetEPAddress(bEpNum));
0003f6  4afc              LDR      r2,|L1.2024|
0003f8  eb020081          ADD      r0,r2,r1,LSL #2
0003fc  f8d00c00          LDR      r0,[r0,#0xc00]
000400  f000000f          AND      r0,r0,#0xf
;;;459    }
000404  4770              BX       lr
;;;460    /*******************************************************************************
                          ENDP

                  SetEPTxAddr PROC
;;;467    *******************************************************************************/
;;;468    void SetEPTxAddr(uint8_t bEpNum, uint16_t wAddr)
000406  b510              PUSH     {r4,lr}
;;;469    {
;;;470      _SetEPTxAddr(bEpNum, wAddr);
000408  104a              ASRS     r2,r1,#1
00040a  0052              LSLS     r2,r2,#1
00040c  4bf7              LDR      r3,|L1.2028|
00040e  681b              LDR      r3,[r3,#0]
000410  b29b              UXTH     r3,r3
000412  eb0303c0          ADD      r3,r3,r0,LSL #3
000416  4cf6              LDR      r4,|L1.2032|
000418  f8442013          STR      r2,[r4,r3,LSL #1]
;;;471    }
00041c  bd10              POP      {r4,pc}
;;;472    /*******************************************************************************
                          ENDP

                  SetEPRxAddr PROC
;;;479    *******************************************************************************/
;;;480    void SetEPRxAddr(uint8_t bEpNum, uint16_t wAddr)
00041e  b510              PUSH     {r4,lr}
;;;481    {
;;;482      _SetEPRxAddr(bEpNum, wAddr);
000420  104a              ASRS     r2,r1,#1
000422  0053              LSLS     r3,r2,#1
000424  4af1              LDR      r2,|L1.2028|
000426  6812              LDR      r2,[r2,#0]
000428  b292              UXTH     r2,r2
00042a  eb0202c0          ADD      r2,r2,r0,LSL #3
00042e  1d12              ADDS     r2,r2,#4
000430  4cef              LDR      r4,|L1.2032|
000432  f8443012          STR      r3,[r4,r2,LSL #1]
;;;483    }
000436  bd10              POP      {r4,pc}
;;;484    /*******************************************************************************
                          ENDP

                  GetEPTxAddr PROC
;;;490    *******************************************************************************/
;;;491    uint16_t GetEPTxAddr(uint8_t bEpNum)
000438  4601              MOV      r1,r0
;;;492    {
;;;493      return(_GetEPTxAddr(bEpNum));
00043a  48ec              LDR      r0,|L1.2028|
00043c  6800              LDR      r0,[r0,#0]
00043e  b280              UXTH     r0,r0
000440  eb0000c1          ADD      r0,r0,r1,LSL #3
000444  4aea              LDR      r2,|L1.2032|
000446  f8320010          LDRH     r0,[r2,r0,LSL #1]
00044a  b280              UXTH     r0,r0
;;;494    }
00044c  4770              BX       lr
;;;495    /*******************************************************************************
                          ENDP

                  GetEPRxAddr PROC
;;;501    *******************************************************************************/
;;;502    uint16_t GetEPRxAddr(uint8_t bEpNum)
00044e  4601              MOV      r1,r0
;;;503    {
;;;504      return(_GetEPRxAddr(bEpNum));
000450  48e6              LDR      r0,|L1.2028|
000452  6800              LDR      r0,[r0,#0]
000454  b280              UXTH     r0,r0
000456  eb0000c1          ADD      r0,r0,r1,LSL #3
00045a  1d00              ADDS     r0,r0,#4
00045c  4ae4              LDR      r2,|L1.2032|
00045e  f8320010          LDRH     r0,[r2,r0,LSL #1]
000462  b280              UXTH     r0,r0
;;;505    }
000464  4770              BX       lr
;;;506    /*******************************************************************************
                          ENDP

                  SetEPTxCount PROC
;;;513    *******************************************************************************/
;;;514    void SetEPTxCount(uint8_t bEpNum, uint16_t wCount)
000466  4ae1              LDR      r2,|L1.2028|
;;;515    {
;;;516      _SetEPTxCount(bEpNum, wCount);
000468  6812              LDR      r2,[r2,#0]
00046a  b292              UXTH     r2,r2
00046c  eb0202c0          ADD      r2,r2,r0,LSL #3
000470  1c92              ADDS     r2,r2,#2
000472  4bdf              LDR      r3,|L1.2032|
000474  f8431012          STR      r1,[r3,r2,LSL #1]
;;;517    }
000478  4770              BX       lr
;;;518    /*******************************************************************************
                          ENDP

                  SetEPCountRxReg PROC
;;;525    *******************************************************************************/
;;;526    void SetEPCountRxReg(uint32_t *pdwReg, uint16_t wCount)
00047a  4602              MOV      r2,r0
;;;527    {
;;;528      _SetEPCountRxReg(dwReg, wCount);
00047c  293e              CMP      r1,#0x3e
00047e  dd0b              BLE      |L1.1176|
000480  1148              ASRS     r0,r1,#5
000482  f001031f          AND      r3,r1,#0x1f
000486  b90b              CBNZ     r3,|L1.1164|
000488  1e43              SUBS     r3,r0,#1
00048a  b298              UXTH     r0,r3
                  |L1.1164|
00048c  f44f4300          MOV      r3,#0x8000
000490  ea432380          ORR      r3,r3,r0,LSL #10
000494  6013              STR      r3,[r2,#0]
000496  e007              B        |L1.1192|
                  |L1.1176|
000498  1048              ASRS     r0,r1,#1
00049a  f0010301          AND      r3,r1,#1
00049e  b10b              CBZ      r3,|L1.1188|
0004a0  1c43              ADDS     r3,r0,#1
0004a2  b298              UXTH     r0,r3
                  |L1.1188|
0004a4  0283              LSLS     r3,r0,#10
0004a6  6013              STR      r3,[r2,#0]
                  |L1.1192|
;;;529    }
0004a8  4770              BX       lr
;;;530    /*******************************************************************************
                          ENDP

                  SetEPRxCount PROC
;;;537    *******************************************************************************/
;;;538    void SetEPRxCount(uint8_t bEpNum, uint16_t wCount)
0004aa  b510              PUSH     {r4,lr}
;;;539    {
0004ac  4602              MOV      r2,r0
;;;540      _SetEPRxCount(bEpNum, wCount);
0004ae  48cf              LDR      r0,|L1.2028|
0004b0  6800              LDR      r0,[r0,#0]
0004b2  b280              UXTH     r0,r0
0004b4  eb0000c2          ADD      r0,r0,r2,LSL #3
0004b8  1d80              ADDS     r0,r0,#6
0004ba  4ccd              LDR      r4,|L1.2032|
0004bc  eb040340          ADD      r3,r4,r0,LSL #1
0004c0  293e              CMP      r1,#0x3e
0004c2  dd0b              BLE      |L1.1244|
0004c4  1148              ASRS     r0,r1,#5
0004c6  f001041f          AND      r4,r1,#0x1f
0004ca  b90c              CBNZ     r4,|L1.1232|
0004cc  1e44              SUBS     r4,r0,#1
0004ce  b2a0              UXTH     r0,r4
                  |L1.1232|
0004d0  f44f4400          MOV      r4,#0x8000
0004d4  ea442480          ORR      r4,r4,r0,LSL #10
0004d8  601c              STR      r4,[r3,#0]
0004da  e007              B        |L1.1260|
                  |L1.1244|
0004dc  1048              ASRS     r0,r1,#1
0004de  f0010401          AND      r4,r1,#1
0004e2  b10c              CBZ      r4,|L1.1256|
0004e4  1c44              ADDS     r4,r0,#1
0004e6  b2a0              UXTH     r0,r4
                  |L1.1256|
0004e8  0284              LSLS     r4,r0,#10
0004ea  601c              STR      r4,[r3,#0]
                  |L1.1260|
;;;541    }
0004ec  bd10              POP      {r4,pc}
;;;542    /*******************************************************************************
                          ENDP

                  GetEPTxCount PROC
;;;548    *******************************************************************************/
;;;549    uint16_t GetEPTxCount(uint8_t bEpNum)
0004ee  4601              MOV      r1,r0
;;;550    {
;;;551      return(_GetEPTxCount(bEpNum));
0004f0  48be              LDR      r0,|L1.2028|
0004f2  6800              LDR      r0,[r0,#0]
0004f4  b280              UXTH     r0,r0
0004f6  eb0000c1          ADD      r0,r0,r1,LSL #3
0004fa  1c80              ADDS     r0,r0,#2
0004fc  4abc              LDR      r2,|L1.2032|
0004fe  f8320010          LDRH     r0,[r2,r0,LSL #1]
000502  f3c00009          UBFX     r0,r0,#0,#10
;;;552    }
000506  4770              BX       lr
;;;553    /*******************************************************************************
                          ENDP

                  GetEPRxCount PROC
;;;559    *******************************************************************************/
;;;560    uint16_t GetEPRxCount(uint8_t bEpNum)
000508  4601              MOV      r1,r0
;;;561    {
;;;562      return(_GetEPRxCount(bEpNum));
00050a  48b8              LDR      r0,|L1.2028|
00050c  6800              LDR      r0,[r0,#0]
00050e  b280              UXTH     r0,r0
000510  eb0000c1          ADD      r0,r0,r1,LSL #3
000514  1d80              ADDS     r0,r0,#6
000516  4ab6              LDR      r2,|L1.2032|
000518  f8320010          LDRH     r0,[r2,r0,LSL #1]
00051c  f3c00009          UBFX     r0,r0,#0,#10
;;;563    }
000520  4770              BX       lr
;;;564    /*******************************************************************************
                          ENDP

                  SetEPDblBuffAddr PROC
;;;572    *******************************************************************************/
;;;573    void SetEPDblBuffAddr(uint8_t bEpNum, uint16_t wBuf0Addr, uint16_t wBuf1Addr)
000522  b530              PUSH     {r4,r5,lr}
;;;574    {
;;;575      _SetEPDblBuffAddr(bEpNum, wBuf0Addr, wBuf1Addr);
000524  104b              ASRS     r3,r1,#1
000526  005b              LSLS     r3,r3,#1
000528  4cb0              LDR      r4,|L1.2028|
00052a  6824              LDR      r4,[r4,#0]
00052c  b2a4              UXTH     r4,r4
00052e  eb0404c0          ADD      r4,r4,r0,LSL #3
000532  4daf              LDR      r5,|L1.2032|
000534  f8453014          STR      r3,[r5,r4,LSL #1]
000538  1053              ASRS     r3,r2,#1
00053a  005c              LSLS     r4,r3,#1
00053c  4bab              LDR      r3,|L1.2028|
00053e  681b              LDR      r3,[r3,#0]
000540  b29b              UXTH     r3,r3
000542  eb0303c0          ADD      r3,r3,r0,LSL #3
000546  1d1b              ADDS     r3,r3,#4
000548  f8454013          STR      r4,[r5,r3,LSL #1]
;;;576    }
00054c  bd30              POP      {r4,r5,pc}
;;;577    /*******************************************************************************
                          ENDP

                  SetEPDblBuf0Addr PROC
;;;584    *******************************************************************************/
;;;585    void SetEPDblBuf0Addr(uint8_t bEpNum, uint16_t wBuf0Addr)
00054e  b510              PUSH     {r4,lr}
;;;586    {
;;;587      _SetEPDblBuf0Addr(bEpNum, wBuf0Addr);
000550  104a              ASRS     r2,r1,#1
000552  0052              LSLS     r2,r2,#1
000554  4ba5              LDR      r3,|L1.2028|
000556  681b              LDR      r3,[r3,#0]
000558  b29b              UXTH     r3,r3
00055a  eb0303c0          ADD      r3,r3,r0,LSL #3
00055e  4ca4              LDR      r4,|L1.2032|
000560  f8442013          STR      r2,[r4,r3,LSL #1]
;;;588    }
000564  bd10              POP      {r4,pc}
;;;589    /*******************************************************************************
                          ENDP

                  SetEPDblBuf1Addr PROC
;;;596    *******************************************************************************/
;;;597    void SetEPDblBuf1Addr(uint8_t bEpNum, uint16_t wBuf1Addr)
000566  b510              PUSH     {r4,lr}
;;;598    {
;;;599      _SetEPDblBuf1Addr(bEpNum, wBuf1Addr);
000568  104a              ASRS     r2,r1,#1
00056a  0053              LSLS     r3,r2,#1
00056c  4a9f              LDR      r2,|L1.2028|
00056e  6812              LDR      r2,[r2,#0]
000570  b292              UXTH     r2,r2
000572  eb0202c0          ADD      r2,r2,r0,LSL #3
000576  1d12              ADDS     r2,r2,#4
000578  4c9d              LDR      r4,|L1.2032|
00057a  f8443012          STR      r3,[r4,r2,LSL #1]
;;;600    }
00057e  bd10              POP      {r4,pc}
;;;601    /*******************************************************************************
                          ENDP

                  GetEPDblBuf0Addr PROC
;;;607    *******************************************************************************/
;;;608    uint16_t GetEPDblBuf0Addr(uint8_t bEpNum)
000580  4601              MOV      r1,r0
;;;609    {
;;;610      return(_GetEPDblBuf0Addr(bEpNum));
000582  489a              LDR      r0,|L1.2028|
000584  6800              LDR      r0,[r0,#0]
000586  b280              UXTH     r0,r0
000588  eb0000c1          ADD      r0,r0,r1,LSL #3
00058c  4a98              LDR      r2,|L1.2032|
00058e  f8320010          LDRH     r0,[r2,r0,LSL #1]
000592  b280              UXTH     r0,r0
;;;611    }
000594  4770              BX       lr
;;;612    /*******************************************************************************
                          ENDP

                  GetEPDblBuf1Addr PROC
;;;618    *******************************************************************************/
;;;619    uint16_t GetEPDblBuf1Addr(uint8_t bEpNum)
000596  4601              MOV      r1,r0
;;;620    {
;;;621      return(_GetEPDblBuf1Addr(bEpNum));
000598  4894              LDR      r0,|L1.2028|
00059a  6800              LDR      r0,[r0,#0]
00059c  b280              UXTH     r0,r0
00059e  eb0000c1          ADD      r0,r0,r1,LSL #3
0005a2  1d00              ADDS     r0,r0,#4
0005a4  4a92              LDR      r2,|L1.2032|
0005a6  f8320010          LDRH     r0,[r2,r0,LSL #1]
0005aa  b280              UXTH     r0,r0
;;;622    }
0005ac  4770              BX       lr
;;;623    /*******************************************************************************
                          ENDP

                  SetEPDblBuffCount PROC
;;;630    *******************************************************************************/
;;;631    void SetEPDblBuffCount(uint8_t bEpNum, uint8_t bDir, uint16_t wCount)
0005ae  b530              PUSH     {r4,r5,lr}
;;;632    {
0005b0  460b              MOV      r3,r1
;;;633      _SetEPDblBuffCount(bEpNum, bDir, wCount);
0005b2  2b01              CMP      r3,#1
0005b4  d11f              BNE      |L1.1526|
0005b6  498d              LDR      r1,|L1.2028|
0005b8  6809              LDR      r1,[r1,#0]
0005ba  b289              UXTH     r1,r1
0005bc  eb0101c0          ADD      r1,r1,r0,LSL #3
0005c0  1c89              ADDS     r1,r1,#2
0005c2  4d8b              LDR      r5,|L1.2032|
0005c4  eb050441          ADD      r4,r5,r1,LSL #1
0005c8  2a3e              CMP      r2,#0x3e
0005ca  dd0b              BLE      |L1.1508|
0005cc  1151              ASRS     r1,r2,#5
0005ce  f002051f          AND      r5,r2,#0x1f
0005d2  b90d              CBNZ     r5,|L1.1496|
0005d4  1e4d              SUBS     r5,r1,#1
0005d6  b2a9              UXTH     r1,r5
                  |L1.1496|
0005d8  f44f4500          MOV      r5,#0x8000
0005dc  ea452581          ORR      r5,r5,r1,LSL #10
0005e0  6025              STR      r5,[r4,#0]
0005e2  e007              B        |L1.1524|
                  |L1.1508|
0005e4  1051              ASRS     r1,r2,#1
0005e6  f0020501          AND      r5,r2,#1
0005ea  b10d              CBZ      r5,|L1.1520|
0005ec  1c4d              ADDS     r5,r1,#1
0005ee  b2a9              UXTH     r1,r5
                  |L1.1520|
0005f0  028d              LSLS     r5,r1,#10
0005f2  6025              STR      r5,[r4,#0]
                  |L1.1524|
0005f4  e00a              B        |L1.1548|
                  |L1.1526|
0005f6  2b02              CMP      r3,#2
0005f8  d108              BNE      |L1.1548|
0005fa  497c              LDR      r1,|L1.2028|
0005fc  6809              LDR      r1,[r1,#0]
0005fe  b289              UXTH     r1,r1
000600  eb0101c0          ADD      r1,r1,r0,LSL #3
000604  1c89              ADDS     r1,r1,#2
000606  4c7a              LDR      r4,|L1.2032|
000608  f8442011          STR      r2,[r4,r1,LSL #1]
                  |L1.1548|
00060c  2b01              CMP      r3,#1
00060e  d11f              BNE      |L1.1616|
000610  4976              LDR      r1,|L1.2028|
000612  6809              LDR      r1,[r1,#0]
000614  b289              UXTH     r1,r1
000616  eb0101c0          ADD      r1,r1,r0,LSL #3
00061a  1d89              ADDS     r1,r1,#6
00061c  4d74              LDR      r5,|L1.2032|
00061e  eb050441          ADD      r4,r5,r1,LSL #1
000622  2a3e              CMP      r2,#0x3e
000624  dd0b              BLE      |L1.1598|
000626  1151              ASRS     r1,r2,#5
000628  f002051f          AND      r5,r2,#0x1f
00062c  b90d              CBNZ     r5,|L1.1586|
00062e  1e4d              SUBS     r5,r1,#1
000630  b2a9              UXTH     r1,r5
                  |L1.1586|
000632  f44f4500          MOV      r5,#0x8000
000636  ea452581          ORR      r5,r5,r1,LSL #10
00063a  6025              STR      r5,[r4,#0]
00063c  e007              B        |L1.1614|
                  |L1.1598|
00063e  1051              ASRS     r1,r2,#1
000640  f0020501          AND      r5,r2,#1
000644  b10d              CBZ      r5,|L1.1610|
000646  1c4d              ADDS     r5,r1,#1
000648  b2a9              UXTH     r1,r5
                  |L1.1610|
00064a  028d              LSLS     r5,r1,#10
00064c  6025              STR      r5,[r4,#0]
                  |L1.1614|
00064e  e00a              B        |L1.1638|
                  |L1.1616|
000650  2b02              CMP      r3,#2
000652  d108              BNE      |L1.1638|
000654  4965              LDR      r1,|L1.2028|
000656  6809              LDR      r1,[r1,#0]
000658  b289              UXTH     r1,r1
00065a  eb0101c0          ADD      r1,r1,r0,LSL #3
00065e  1d89              ADDS     r1,r1,#6
000660  4c63              LDR      r4,|L1.2032|
000662  f8442011          STR      r2,[r4,r1,LSL #1]
                  |L1.1638|
;;;634    }
000666  bd30              POP      {r4,r5,pc}
;;;635    /*******************************************************************************
                          ENDP

                  SetEPDblBuf0Count PROC
;;;642    *******************************************************************************/
;;;643    void SetEPDblBuf0Count(uint8_t bEpNum, uint8_t bDir, uint16_t wCount)
000668  b530              PUSH     {r4,r5,lr}
;;;644    {
00066a  4603              MOV      r3,r0
;;;645      _SetEPDblBuf0Count(bEpNum, bDir, wCount);
00066c  2901              CMP      r1,#1
00066e  d11f              BNE      |L1.1712|
000670  485e              LDR      r0,|L1.2028|
000672  6800              LDR      r0,[r0,#0]
000674  b280              UXTH     r0,r0
000676  eb0000c3          ADD      r0,r0,r3,LSL #3
00067a  1c80              ADDS     r0,r0,#2
00067c  4d5c              LDR      r5,|L1.2032|
00067e  eb050440          ADD      r4,r5,r0,LSL #1
000682  2a3e              CMP      r2,#0x3e
000684  dd0b              BLE      |L1.1694|
000686  1150              ASRS     r0,r2,#5
000688  f002051f          AND      r5,r2,#0x1f
00068c  b90d              CBNZ     r5,|L1.1682|
00068e  1e45              SUBS     r5,r0,#1
000690  b2a8              UXTH     r0,r5
                  |L1.1682|
000692  f44f4500          MOV      r5,#0x8000
000696  ea452580          ORR      r5,r5,r0,LSL #10
00069a  6025              STR      r5,[r4,#0]
00069c  e007              B        |L1.1710|
                  |L1.1694|
00069e  1050              ASRS     r0,r2,#1
0006a0  f0020501          AND      r5,r2,#1
0006a4  b10d              CBZ      r5,|L1.1706|
0006a6  1c45              ADDS     r5,r0,#1
0006a8  b2a8              UXTH     r0,r5
                  |L1.1706|
0006aa  0285              LSLS     r5,r0,#10
0006ac  6025              STR      r5,[r4,#0]
                  |L1.1710|
0006ae  e00a              B        |L1.1734|
                  |L1.1712|
0006b0  2902              CMP      r1,#2
0006b2  d108              BNE      |L1.1734|
0006b4  484d              LDR      r0,|L1.2028|
0006b6  6800              LDR      r0,[r0,#0]
0006b8  b280              UXTH     r0,r0
0006ba  eb0000c3          ADD      r0,r0,r3,LSL #3
0006be  1c80              ADDS     r0,r0,#2
0006c0  4c4b              LDR      r4,|L1.2032|
0006c2  f8442010          STR      r2,[r4,r0,LSL #1]
                  |L1.1734|
;;;646    }
0006c6  bd30              POP      {r4,r5,pc}
;;;647    /*******************************************************************************
                          ENDP

                  SetEPDblBuf1Count PROC
;;;654    *******************************************************************************/
;;;655    void SetEPDblBuf1Count(uint8_t bEpNum, uint8_t bDir, uint16_t wCount)
0006c8  b530              PUSH     {r4,r5,lr}
;;;656    {
0006ca  4603              MOV      r3,r0
;;;657      _SetEPDblBuf1Count(bEpNum, bDir, wCount);
0006cc  2901              CMP      r1,#1
0006ce  d11f              BNE      |L1.1808|
0006d0  4846              LDR      r0,|L1.2028|
0006d2  6800              LDR      r0,[r0,#0]
0006d4  b280              UXTH     r0,r0
0006d6  eb0000c3          ADD      r0,r0,r3,LSL #3
0006da  1d80              ADDS     r0,r0,#6
0006dc  4d44              LDR      r5,|L1.2032|
0006de  eb050440          ADD      r4,r5,r0,LSL #1
0006e2  2a3e              CMP      r2,#0x3e
0006e4  dd0b              BLE      |L1.1790|
0006e6  1150              ASRS     r0,r2,#5
0006e8  f002051f          AND      r5,r2,#0x1f
0006ec  b90d              CBNZ     r5,|L1.1778|
0006ee  1e45              SUBS     r5,r0,#1
0006f0  b2a8              UXTH     r0,r5
                  |L1.1778|
0006f2  f44f4500          MOV      r5,#0x8000
0006f6  ea452580          ORR      r5,r5,r0,LSL #10
0006fa  6025              STR      r5,[r4,#0]
0006fc  e007              B        |L1.1806|
                  |L1.1790|
0006fe  1050              ASRS     r0,r2,#1
000700  f0020501          AND      r5,r2,#1
000704  b10d              CBZ      r5,|L1.1802|
000706  1c45              ADDS     r5,r0,#1
000708  b2a8              UXTH     r0,r5
                  |L1.1802|
00070a  0285              LSLS     r5,r0,#10
00070c  6025              STR      r5,[r4,#0]
                  |L1.1806|
00070e  e00a              B        |L1.1830|
                  |L1.1808|
000710  2902              CMP      r1,#2
000712  d108              BNE      |L1.1830|
000714  4835              LDR      r0,|L1.2028|
000716  6800              LDR      r0,[r0,#0]
000718  b280              UXTH     r0,r0
00071a  eb0000c3          ADD      r0,r0,r3,LSL #3
00071e  1d80              ADDS     r0,r0,#6
000720  4c33              LDR      r4,|L1.2032|
000722  f8442010          STR      r2,[r4,r0,LSL #1]
                  |L1.1830|
;;;658    }
000726  bd30              POP      {r4,r5,pc}
;;;659    /*******************************************************************************
                          ENDP

                  GetEPDblBuf0Count PROC
;;;666    *******************************************************************************/
;;;667    uint16_t GetEPDblBuf0Count(uint8_t bEpNum)
000728  4601              MOV      r1,r0
;;;668    {
;;;669      return(_GetEPDblBuf0Count(bEpNum));
00072a  4830              LDR      r0,|L1.2028|
00072c  6800              LDR      r0,[r0,#0]
00072e  b280              UXTH     r0,r0
000730  eb0000c1          ADD      r0,r0,r1,LSL #3
000734  1c80              ADDS     r0,r0,#2
000736  4a2e              LDR      r2,|L1.2032|
000738  f8320010          LDRH     r0,[r2,r0,LSL #1]
00073c  f3c00009          UBFX     r0,r0,#0,#10
;;;670    }
000740  4770              BX       lr
;;;671    /*******************************************************************************
                          ENDP

                  GetEPDblBuf1Count PROC
;;;678    *******************************************************************************/
;;;679    uint16_t GetEPDblBuf1Count(uint8_t bEpNum)
000742  4601              MOV      r1,r0
;;;680    {
;;;681      return(_GetEPDblBuf1Count(bEpNum));
000744  4829              LDR      r0,|L1.2028|
000746  6800              LDR      r0,[r0,#0]
000748  b280              UXTH     r0,r0
00074a  eb0000c1          ADD      r0,r0,r1,LSL #3
00074e  1d80              ADDS     r0,r0,#6
000750  4a27              LDR      r2,|L1.2032|
000752  f8320010          LDRH     r0,[r2,r0,LSL #1]
000756  f3c00009          UBFX     r0,r0,#0,#10
;;;682    }
00075a  4770              BX       lr
;;;683    /*******************************************************************************
                          ENDP

                  GetEPDblBufDir PROC
;;;690    *******************************************************************************/
;;;691    EP_DBUF_DIR GetEPDblBufDir(uint8_t bEpNum)
00075c  4601              MOV      r1,r0
;;;692    {
;;;693      if ((uint16_t)(*_pEPRxCount(bEpNum) & 0xFC00) != 0)
00075e  4823              LDR      r0,|L1.2028|
000760  6800              LDR      r0,[r0,#0]
000762  b280              UXTH     r0,r0
000764  eb0000c1          ADD      r0,r0,r1,LSL #3
000768  1d80              ADDS     r0,r0,#6
00076a  4a21              LDR      r2,|L1.2032|
00076c  f8320010          LDRH     r0,[r2,r0,LSL #1]
000770  f400407c          AND      r0,r0,#0xfc00
000774  b108              CBZ      r0,|L1.1914|
;;;694        return(EP_DBUF_OUT);
000776  2001              MOVS     r0,#1
                  |L1.1912|
;;;695      else if (((uint16_t)(*_pEPTxCount(bEpNum)) & 0x03FF) != 0)
;;;696        return(EP_DBUF_IN);
;;;697      else
;;;698        return(EP_DBUF_ERR);
;;;699    }
000778  4770              BX       lr
                  |L1.1914|
00077a  481c              LDR      r0,|L1.2028|
00077c  6800              LDR      r0,[r0,#0]            ;695
00077e  b280              UXTH     r0,r0                 ;695
000780  eb0000c1          ADD      r0,r0,r1,LSL #3       ;695
000784  1c80              ADDS     r0,r0,#2              ;695
000786  4a1a              LDR      r2,|L1.2032|
000788  f8320010          LDRH     r0,[r2,r0,LSL #1]     ;695
00078c  f3c00009          UBFX     r0,r0,#0,#10          ;695
000790  b108              CBZ      r0,|L1.1942|
000792  2002              MOVS     r0,#2                 ;696
000794  e7f0              B        |L1.1912|
                  |L1.1942|
000796  2000              MOVS     r0,#0                 ;698
000798  e7ee              B        |L1.1912|
;;;700    /*******************************************************************************
                          ENDP

                  FreeUserBuffer PROC
;;;707    *******************************************************************************/
;;;708    void FreeUserBuffer(uint8_t bEpNum, uint8_t bDir)
00079a  b510              PUSH     {r4,lr}
;;;709    {
;;;710      if (bDir == EP_DBUF_OUT)
00079c  2901              CMP      r1,#1
00079e  d110              BNE      |L1.1986|
;;;711      { /* OUT double buffered endpoint */
;;;712        _ToggleDTOG_TX(bEpNum);
0007a0  4b11              LDR      r3,|L1.2024|
0007a2  eb030280          ADD      r2,r3,r0,LSL #2
0007a6  f8d22c00          LDR      r2,[r2,#0xc00]
0007aa  f648738f          MOV      r3,#0x8f8f
0007ae  401a              ANDS     r2,r2,r3
0007b0  f24803c0          MOV      r3,#0x80c0
0007b4  431a              ORRS     r2,r2,r3
0007b6  4c0c              LDR      r4,|L1.2024|
0007b8  eb040380          ADD      r3,r4,r0,LSL #2
0007bc  f8c32c00          STR      r2,[r3,#0xc00]
0007c0  e011              B        |L1.2022|
                  |L1.1986|
;;;713      }
;;;714      else if (bDir == EP_DBUF_IN)
0007c2  2902              CMP      r1,#2
0007c4  d10f              BNE      |L1.2022|
;;;715      { /* IN double buffered endpoint */
;;;716        _ToggleDTOG_RX(bEpNum);
0007c6  4b08              LDR      r3,|L1.2024|
0007c8  eb030280          ADD      r2,r3,r0,LSL #2
0007cc  f8d22c00          LDR      r2,[r2,#0xc00]
0007d0  f648738f          MOV      r3,#0x8f8f
0007d4  401a              ANDS     r2,r2,r3
0007d6  f24c0380          MOV      r3,#0xc080
0007da  431a              ORRS     r2,r2,r3
0007dc  4c02              LDR      r4,|L1.2024|
0007de  eb040380          ADD      r3,r4,r0,LSL #2
0007e2  f8c32c00          STR      r2,[r3,#0xc00]
                  |L1.2022|
;;;717      }
;;;718    }
0007e6  bd10              POP      {r4,pc}
                  |L1.2024|
                          DCD      0x40005000
                  |L1.2028|
                          DCD      0x40005c50
                  |L1.2032|
                          DCD      0x40006000
                          ENDP

                  ToWord PROC
;;;726    *******************************************************************************/
;;;727    uint16_t ToWord(uint8_t bh, uint8_t bl)
0007f4  4602              MOV      r2,r0
;;;728    {
;;;729      uint16_t wRet;
;;;730      wRet = (uint16_t)bl | ((uint16_t)bh << 8);
0007f6  ea412002          ORR      r0,r1,r2,LSL #8
;;;731      return(wRet);
;;;732    }
0007fa  4770              BX       lr
;;;733    /*******************************************************************************
                          ENDP

                  ByteSwap PROC
;;;739    *******************************************************************************/
;;;740    uint16_t ByteSwap(uint16_t wSwW)
0007fc  4601              MOV      r1,r0
;;;741    {
;;;742      uint8_t bTemp;
;;;743      uint16_t wRet;
;;;744      bTemp = (uint8_t)(wSwW & 0xff);
0007fe  b2ca              UXTB     r2,r1
;;;745      wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
000800  120b              ASRS     r3,r1,#8
000802  ea432002          ORR      r0,r3,r2,LSL #8
;;;746      return(wRet);
;;;747    }
000806  4770              BX       lr
;;;748    
                          ENDP

