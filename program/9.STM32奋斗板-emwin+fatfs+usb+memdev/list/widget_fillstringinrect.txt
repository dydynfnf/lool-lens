; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\widget_fillstringinrect.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\widget_fillstringinrect.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -I.\GUI\AntiAlias -I.\GUI\Config -I.\GUI\ConvertColor -I.\GUI\ConvertMono -I.\GUI\Core -I.\GUI\Font -I.\GUI\GUI_X -I.\GUI\JPEG -I.\GUI\LCDDriver -I.\GUI\MemDev -I.\GUI\MultiLayer -I.\GUI\Widget -I.\GUI\WM -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\INC\ST\STM32F10x -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\widget_fillstringinrect.crf GUI\Widget\WIDGET_FillStringInRect.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  WIDGET__FillStringInRect PROC
;;;55     */
;;;56     void WIDGET__FillStringInRect(const char GUI_UNI_PTR * pText, const GUI_RECT * pFillRect, const GUI_RECT * pTextRectMax, const GUI_RECT * pTextRectAct) {
000000  e92d41fc          PUSH     {r2-r8,lr}
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
000008  4617              MOV      r7,r2
00000a  461d              MOV      r5,r3
;;;57       /* Check if we have anything to do at all ... */
;;;58       if (GUI_Context.pClipRect_HL) {
00000c  4841              LDR      r0,|L1.276|
00000e  6940              LDR      r0,[r0,#0x14]  ; GUI_Context
000010  b360              CBZ      r0,|L1.108|
;;;59         GUI_RECT r;
;;;60         r = *pFillRect;
000012  6820              LDR      r0,[r4,#0]
000014  9000              STR      r0,[sp,#0]
000016  6860              LDR      r0,[r4,#4]
000018  9001              STR      r0,[sp,#4]
;;;61         WM_ADDORG(r.x0, r.y0);
00001a  f8bd0000          LDRH     r0,[sp,#0]
00001e  493d              LDR      r1,|L1.276|
000020  6c09              LDR      r1,[r1,#0x40]  ; GUI_Context
000022  4408              ADD      r0,r0,r1
000024  b200              SXTH     r0,r0
000026  f8ad0000          STRH     r0,[sp,#0]
00002a  f8bd0002          LDRH     r0,[sp,#2]
00002e  4939              LDR      r1,|L1.276|
000030  6c49              LDR      r1,[r1,#0x44]  ; GUI_Context
000032  4408              ADD      r0,r0,r1
000034  b200              SXTH     r0,r0
000036  f8ad0002          STRH     r0,[sp,#2]
;;;62         WM_ADDORG(r.x1, r.y1);
00003a  f8bd0004          LDRH     r0,[sp,#4]
00003e  4935              LDR      r1,|L1.276|
000040  6c09              LDR      r1,[r1,#0x40]  ; GUI_Context
000042  4408              ADD      r0,r0,r1
000044  b200              SXTH     r0,r0
000046  f8ad0004          STRH     r0,[sp,#4]
00004a  f8bd0006          LDRH     r0,[sp,#6]
00004e  4931              LDR      r1,|L1.276|
000050  6c49              LDR      r1,[r1,#0x44]  ; GUI_Context
000052  4408              ADD      r0,r0,r1
000054  b200              SXTH     r0,r0
000056  f8ad0006          STRH     r0,[sp,#6]
;;;63         if (GUI_RectsIntersect(GUI_Context.pClipRect_HL, &r) == 0)
00005a  492e              LDR      r1,|L1.276|
00005c  6948              LDR      r0,[r1,#0x14]  ; GUI_Context
00005e  4669              MOV      r1,sp
000060  f7fffffe          BL       GUI_RectsIntersect
000064  b908              CBNZ     r0,|L1.106|
                  |L1.102|
;;;64           return;
;;;65       }
;;;66     
;;;67       if (pText) {
;;;68         if (*pText) {             /* Speed optimization, not required */
;;;69           const GUI_RECT* pOldClipRect;
;;;70     
;;;71     
;;;72           /* Fill border */
;;;73           #if WIDGET_FILL_TEXT_USES_TRANS
;;;74             GUI_ClearRectEx(pFillRect);
;;;75           #else
;;;76             {
;;;77               GUI_RECT rText;
;;;78               GUI__IntersectRects(&rText, pTextRectMax, pTextRectAct);
;;;79               GUI_ClearRect(pFillRect->x0, pFillRect->y0, pFillRect->x1, rText.y0 - 1); /* Top */
;;;80               GUI_ClearRect(pFillRect->x0, rText.y0,      rText.x0 - 1 , rText.y1);     /* Left */
;;;81               GUI_ClearRect(rText.x1 + 1,  rText.y0,      pFillRect->x1, rText.y1);     /* Right */
;;;82               GUI_ClearRect(pFillRect->x0, rText.y1 + 1,  pFillRect->x1, pFillRect->y1);/* Bottom */
;;;83             }
;;;84           #endif
;;;85     
;;;86           /* Set clipping rectangle */
;;;87           pOldClipRect = WM_SetUserClipRect(pTextRectMax);
;;;88     
;;;89           /* Display text */
;;;90           #if WIDGET_FILL_TEXT_USES_TRANS
;;;91             GUI_SetTextMode(GUI_TM_TRANS);
;;;92           #else
;;;93             GUI_SetTextMode(GUI_TM_NORMAL);
;;;94           #endif
;;;95           GUI_DispStringAt(pText, pTextRectAct->x0, pTextRectAct->y0);
;;;96     
;;;97           /* Restore clipping rectangle */
;;;98           WM_SetUserClipRect(pOldClipRect);
;;;99           return;
;;;100        }
;;;101      }
;;;102      GUI_ClearRectEx(pFillRect);
;;;103    }
000066  e8bd81fc          POP      {r2-r8,pc}
                  |L1.106|
00006a  bf00              NOP                            ;65
                  |L1.108|
00006c  2e00              CMP      r6,#0                 ;67
00006e  d04b              BEQ      |L1.264|
000070  7830              LDRB     r0,[r6,#0]            ;68
000072  2800              CMP      r0,#0                 ;68
000074  d047              BEQ      |L1.262|
000076  462a              MOV      r2,r5                 ;78
000078  4639              MOV      r1,r7                 ;78
00007a  4668              MOV      r0,sp                 ;78
00007c  f7fffffe          BL       GUI__IntersectRects
000080  f9bdc002          LDRSH    r12,[sp,#2]           ;79
000084  f1ac0301          SUB      r3,r12,#1             ;79
000088  f9b42004          LDRSH    r2,[r4,#4]            ;79
00008c  f9b41002          LDRSH    r1,[r4,#2]            ;79
000090  f9b40000          LDRSH    r0,[r4,#0]            ;79
000094  f7fffffe          BL       GUI_ClearRect
000098  f9bd3006          LDRSH    r3,[sp,#6]            ;80
00009c  f9bdc000          LDRSH    r12,[sp,#0]           ;80
0000a0  f1ac0201          SUB      r2,r12,#1             ;80
0000a4  f9bd1002          LDRSH    r1,[sp,#2]            ;80
0000a8  f9b40000          LDRSH    r0,[r4,#0]            ;80
0000ac  f7fffffe          BL       GUI_ClearRect
0000b0  f9bd3006          LDRSH    r3,[sp,#6]            ;81
0000b4  f9b42004          LDRSH    r2,[r4,#4]            ;81
0000b8  f9bd1002          LDRSH    r1,[sp,#2]            ;81
0000bc  f9bdc004          LDRSH    r12,[sp,#4]           ;81
0000c0  f10c0001          ADD      r0,r12,#1             ;81
0000c4  f7fffffe          BL       GUI_ClearRect
0000c8  f9b43006          LDRSH    r3,[r4,#6]            ;82
0000cc  f9b42004          LDRSH    r2,[r4,#4]            ;82
0000d0  f9bdc006          LDRSH    r12,[sp,#6]           ;82
0000d4  f10c0101          ADD      r1,r12,#1             ;82
0000d8  f9b40000          LDRSH    r0,[r4,#0]            ;82
0000dc  f7fffffe          BL       GUI_ClearRect
0000e0  4638              MOV      r0,r7                 ;87
0000e2  f7fffffe          BL       WM_SetUserClipRect
0000e6  4680              MOV      r8,r0                 ;87
0000e8  f04f0000          MOV      r0,#0                 ;93
0000ec  f7fffffe          BL       GUI_SetTextMode
0000f0  f9b52002          LDRSH    r2,[r5,#2]            ;95
0000f4  f9b51000          LDRSH    r1,[r5,#0]            ;95
0000f8  4630              MOV      r0,r6                 ;95
0000fa  f7fffffe          BL       GUI_DispStringAt
0000fe  4640              MOV      r0,r8                 ;98
000100  f7fffffe          BL       WM_SetUserClipRect
000104  e7af              B        |L1.102|
                  |L1.262|
000106  bf00              NOP                            ;100
                  |L1.264|
000108  4620              MOV      r0,r4                 ;102
00010a  f7fffffe          BL       GUI_ClearRectEx
00010e  bf00              NOP      
000110  e7a9              B        |L1.102|
;;;104    
                          ENDP

000112  0000              DCW      0x0000
                  |L1.276|
                          DCD      GUI_Context
