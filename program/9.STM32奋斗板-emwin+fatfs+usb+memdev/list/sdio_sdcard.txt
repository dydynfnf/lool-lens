; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\sdio_sdcard.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\sdio_sdcard.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\FWlib\inc -I.\user -I.\CM3 -I.\MALLOC -I.\TFT -I.\EMWIN\EMWIN_INC -I.\EMWIN\DEMO -I.\PNG -I.\FATFS -I.\SDIO -I.\USB\inc -I.\USBCFG\inc -IE:\material\GUI\STM32·Ü¶·°å-emwin+fatfs+usb+memdev\RTE -Id:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.1.0\Device\Include -Id:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=515 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\sdio_sdcard.crf SDIO\sdio_sdcard.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  SD_LowLevel_DeInit PROC
;;;217    
;;;218    void SD_LowLevel_DeInit(void)
000000  b508              PUSH     {r3,lr}
;;;219    {
;;;220      GPIO_InitTypeDef  GPIO_InitStructure;
;;;221      
;;;222      /*!< Disable SDIO Clock */
;;;223      SDIO_ClockCmd(DISABLE);
000002  2000              MOVS     r0,#0
000004  f7fffffe          BL       SDIO_ClockCmd
;;;224      
;;;225      /*!< Set Power State to OFF */
;;;226      SDIO_SetPowerState(SDIO_PowerState_OFF);
000008  2000              MOVS     r0,#0
00000a  f7fffffe          BL       SDIO_SetPowerState
;;;227    
;;;228      /*!< DeInitializes the SDIO peripheral */
;;;229      SDIO_DeInit();
00000e  f7fffffe          BL       SDIO_DeInit
;;;230      
;;;231      /*!< Disable the SDIO AHB Clock */
;;;232      RCC_AHBPeriphClockCmd(RCC_AHBPeriph_SDIO, DISABLE);
000012  2100              MOVS     r1,#0
000014  f44f6080          MOV      r0,#0x400
000018  f7fffffe          BL       RCC_AHBPeriphClockCmd
;;;233    
;;;234      /*!< Configure PC.08, PC.09, PC.10, PC.11, PC.12 pin: D0, D1, D2, D3, CLK pin */
;;;235      GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11 | GPIO_Pin_12;
00001c  f44f50f8          MOV      r0,#0x1f00
000020  f8ad0000          STRH     r0,[sp,#0]
;;;236      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
000024  2004              MOVS     r0,#4
000026  f88d0003          STRB     r0,[sp,#3]
;;;237      GPIO_Init(GPIOC, &GPIO_InitStructure);
00002a  4669              MOV      r1,sp
00002c  48fe              LDR      r0,|L1.1064|
00002e  f7fffffe          BL       GPIO_Init
;;;238    
;;;239      /*!< Configure PD.02 CMD line */
;;;240      GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
000032  2004              MOVS     r0,#4
000034  f8ad0000          STRH     r0,[sp,#0]
;;;241      GPIO_Init(GPIOD, &GPIO_InitStructure);
000038  4669              MOV      r1,sp
00003a  48fc              LDR      r0,|L1.1068|
00003c  f7fffffe          BL       GPIO_Init
;;;242    }
000040  bd08              POP      {r3,pc}
;;;243    
                          ENDP

                  SD_LowLevel_Init PROC
;;;249      */
;;;250    void SD_LowLevel_Init(void)
000042  b508              PUSH     {r3,lr}
;;;251    {
;;;252      GPIO_InitTypeDef  GPIO_InitStructure;
;;;253    
;;;254      /*!< GPIOC and GPIOD Periph clock enable */
;;;255      RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC | RCC_APB2Periph_GPIOD | SD_DETECT_GPIO_CLK, ENABLE);
000044  2101              MOVS     r1,#1
000046  20b0              MOVS     r0,#0xb0
000048  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;256    
;;;257      /*!< Configure PC.08, PC.09, PC.10, PC.11, PC.12 pin: D0, D1, D2, D3, CLK pin */
;;;258      GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11 | GPIO_Pin_12;
00004c  f44f50f8          MOV      r0,#0x1f00
000050  f8ad0000          STRH     r0,[sp,#0]
;;;259      GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000054  2003              MOVS     r0,#3
000056  f88d0002          STRB     r0,[sp,#2]
;;;260      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
00005a  2018              MOVS     r0,#0x18
00005c  f88d0003          STRB     r0,[sp,#3]
;;;261      GPIO_Init(GPIOC, &GPIO_InitStructure);
000060  4669              MOV      r1,sp
000062  48f1              LDR      r0,|L1.1064|
000064  f7fffffe          BL       GPIO_Init
;;;262    
;;;263      /*!< Configure PD.02 CMD line */
;;;264      GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
000068  2004              MOVS     r0,#4
00006a  f8ad0000          STRH     r0,[sp,#0]
;;;265      GPIO_Init(GPIOD, &GPIO_InitStructure);
00006e  4669              MOV      r1,sp
000070  48ee              LDR      r0,|L1.1068|
000072  f7fffffe          BL       GPIO_Init
;;;266    
;;;267      /*!< Configure SD_SPI_DETECT_PIN pin: SD Card detect pin */
;;;268      GPIO_InitStructure.GPIO_Pin = SD_DETECT_PIN;
000076  f44f6000          MOV      r0,#0x800
00007a  f8ad0000          STRH     r0,[sp,#0]
;;;269      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
00007e  2048              MOVS     r0,#0x48
000080  f88d0003          STRB     r0,[sp,#3]
;;;270      GPIO_Init(SD_DETECT_GPIO_PORT, &GPIO_InitStructure);
000084  4669              MOV      r1,sp
000086  48ea              LDR      r0,|L1.1072|
000088  f7fffffe          BL       GPIO_Init
;;;271      
;;;272      /*!< Enable the SDIO AHB Clock */
;;;273      RCC_AHBPeriphClockCmd(RCC_AHBPeriph_SDIO, ENABLE);
00008c  2101              MOVS     r1,#1
00008e  0288              LSLS     r0,r1,#10
000090  f7fffffe          BL       RCC_AHBPeriphClockCmd
;;;274    
;;;275      /*!< Enable the DMA2 Clock */
;;;276      RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA2, ENABLE);
000094  2101              MOVS     r1,#1
000096  2002              MOVS     r0,#2
000098  f7fffffe          BL       RCC_AHBPeriphClockCmd
;;;277    }
00009c  bd08              POP      {r3,pc}
;;;278    
                          ENDP

                  SD_LowLevel_DMA_TxConfig PROC
;;;284      */
;;;285    void SD_LowLevel_DMA_TxConfig(uint32_t *BufferSRC, uint32_t BufferSize)
00009e  b530              PUSH     {r4,r5,lr}
;;;286    {
0000a0  b08b              SUB      sp,sp,#0x2c
0000a2  4605              MOV      r5,r0
0000a4  460c              MOV      r4,r1
;;;287    
;;;288      DMA_InitTypeDef DMA_InitStructure;
;;;289    
;;;290      DMA_ClearFlag(DMA2_FLAG_TC4 | DMA2_FLAG_TE4 | DMA2_FLAG_HT4 | DMA2_FLAG_GL4);
0000a6  48e3              LDR      r0,|L1.1076|
0000a8  f7fffffe          BL       DMA_ClearFlag
;;;291    
;;;292      /*!< DMA2 Channel4 disable */
;;;293      DMA_Cmd(DMA2_Channel4, DISABLE);
0000ac  2100              MOVS     r1,#0
0000ae  48e2              LDR      r0,|L1.1080|
0000b0  f7fffffe          BL       DMA_Cmd
;;;294    
;;;295      /*!< DMA2 Channel4 Config */
;;;296      DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)SDIO_FIFO_ADDRESS;
0000b4  48e1              LDR      r0,|L1.1084|
0000b6  9000              STR      r0,[sp,#0]
;;;297      DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)BufferSRC;
0000b8  9501              STR      r5,[sp,#4]
;;;298      DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralDST;
0000ba  2010              MOVS     r0,#0x10
0000bc  9002              STR      r0,[sp,#8]
;;;299      DMA_InitStructure.DMA_BufferSize = BufferSize / 4;
0000be  08a0              LSRS     r0,r4,#2
0000c0  9003              STR      r0,[sp,#0xc]
;;;300      DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
0000c2  2000              MOVS     r0,#0
0000c4  9004              STR      r0,[sp,#0x10]
;;;301      DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
0000c6  2080              MOVS     r0,#0x80
0000c8  9005              STR      r0,[sp,#0x14]
;;;302      DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
0000ca  0080              LSLS     r0,r0,#2
0000cc  9006              STR      r0,[sp,#0x18]
;;;303      DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
0000ce  0080              LSLS     r0,r0,#2
0000d0  9007              STR      r0,[sp,#0x1c]
;;;304      DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
0000d2  2000              MOVS     r0,#0
0000d4  9008              STR      r0,[sp,#0x20]
;;;305      DMA_InitStructure.DMA_Priority = DMA_Priority_High;
0000d6  f44f5000          MOV      r0,#0x2000
0000da  9009              STR      r0,[sp,#0x24]
;;;306      DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
0000dc  2000              MOVS     r0,#0
0000de  900a              STR      r0,[sp,#0x28]
;;;307      DMA_Init(DMA2_Channel4, &DMA_InitStructure);
0000e0  4669              MOV      r1,sp
0000e2  48d5              LDR      r0,|L1.1080|
0000e4  f7fffffe          BL       DMA_Init
;;;308    
;;;309      /*!< DMA2 Channel4 enable */
;;;310      DMA_Cmd(DMA2_Channel4, ENABLE);  
0000e8  2101              MOVS     r1,#1
0000ea  48d3              LDR      r0,|L1.1080|
0000ec  f7fffffe          BL       DMA_Cmd
;;;311    }
0000f0  b00b              ADD      sp,sp,#0x2c
0000f2  bd30              POP      {r4,r5,pc}
;;;312    
                          ENDP

                  SD_LowLevel_DMA_RxConfig PROC
;;;318      */
;;;319    void SD_LowLevel_DMA_RxConfig(uint32_t *BufferDST, uint32_t BufferSize)
0000f4  b530              PUSH     {r4,r5,lr}
;;;320    {
0000f6  b08b              SUB      sp,sp,#0x2c
0000f8  4605              MOV      r5,r0
0000fa  460c              MOV      r4,r1
;;;321      DMA_InitTypeDef DMA_InitStructure;
;;;322    
;;;323      DMA_ClearFlag(DMA2_FLAG_TC4 | DMA2_FLAG_TE4 | DMA2_FLAG_HT4 | DMA2_FLAG_GL4);
0000fc  48cd              LDR      r0,|L1.1076|
0000fe  f7fffffe          BL       DMA_ClearFlag
;;;324    
;;;325      /*!< DMA2 Channel4 disable */
;;;326      DMA_Cmd(DMA2_Channel4, DISABLE);
000102  2100              MOVS     r1,#0
000104  48cc              LDR      r0,|L1.1080|
000106  f7fffffe          BL       DMA_Cmd
;;;327    
;;;328      /*!< DMA2 Channel4 Config */
;;;329      DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)SDIO_FIFO_ADDRESS;
00010a  48cc              LDR      r0,|L1.1084|
00010c  9000              STR      r0,[sp,#0]
;;;330      DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)BufferDST;
00010e  9501              STR      r5,[sp,#4]
;;;331      DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
000110  2000              MOVS     r0,#0
000112  9002              STR      r0,[sp,#8]
;;;332      DMA_InitStructure.DMA_BufferSize = BufferSize / 4;
000114  08a0              LSRS     r0,r4,#2
000116  9003              STR      r0,[sp,#0xc]
;;;333      DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
000118  2000              MOVS     r0,#0
00011a  9004              STR      r0,[sp,#0x10]
;;;334      DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
00011c  2080              MOVS     r0,#0x80
00011e  9005              STR      r0,[sp,#0x14]
;;;335      DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
000120  0080              LSLS     r0,r0,#2
000122  9006              STR      r0,[sp,#0x18]
;;;336      DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
000124  0080              LSLS     r0,r0,#2
000126  9007              STR      r0,[sp,#0x1c]
;;;337      DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
000128  2000              MOVS     r0,#0
00012a  9008              STR      r0,[sp,#0x20]
;;;338      DMA_InitStructure.DMA_Priority = DMA_Priority_High;
00012c  f44f5000          MOV      r0,#0x2000
000130  9009              STR      r0,[sp,#0x24]
;;;339      DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
000132  2000              MOVS     r0,#0
000134  900a              STR      r0,[sp,#0x28]
;;;340      DMA_Init(DMA2_Channel4, &DMA_InitStructure);
000136  4669              MOV      r1,sp
000138  48bf              LDR      r0,|L1.1080|
00013a  f7fffffe          BL       DMA_Init
;;;341    
;;;342      /*!< DMA2 Channel4 enable */
;;;343      DMA_Cmd(DMA2_Channel4, ENABLE); 
00013e  2101              MOVS     r1,#1
000140  48bd              LDR      r0,|L1.1080|
000142  f7fffffe          BL       DMA_Cmd
;;;344    }
000146  b00b              ADD      sp,sp,#0x2c
000148  bd30              POP      {r4,r5,pc}
;;;345    
                          ENDP

                  SD_DMAEndOfTransferStatus PROC
;;;350      */
;;;351    uint32_t SD_DMAEndOfTransferStatus(void)
00014a  b510              PUSH     {r4,lr}
;;;352    {
;;;353      return (uint32_t)DMA_GetFlagStatus(DMA2_FLAG_TC4);
00014c  48bc              LDR      r0,|L1.1088|
00014e  f7fffffe          BL       DMA_GetFlagStatus
;;;354    }
000152  bd10              POP      {r4,pc}
;;;355    
                          ENDP

                  SD_DeInit PROC
;;;370      */
;;;371    void SD_DeInit(void)
000154  b510              PUSH     {r4,lr}
;;;372    { 
;;;373      SD_LowLevel_DeInit();
000156  f7fffffe          BL       SD_LowLevel_DeInit
;;;374    }
00015a  bd10              POP      {r4,pc}
;;;375    
                          ENDP

                  SD_SetDeviceMode PROC
;;;1042     */
;;;1043   SD_Error SD_SetDeviceMode(uint32_t Mode)
00015c  4601              MOV      r1,r0
;;;1044   {
;;;1045     SD_Error errorstatus = SD_OK;
00015e  202a              MOVS     r0,#0x2a
;;;1046   
;;;1047     if ((Mode == SD_DMA_MODE) || (Mode == SD_INTERRUPT_MODE) || (Mode == SD_POLLING_MODE))
000160  b119              CBZ      r1,|L1.362|
000162  2901              CMP      r1,#1
000164  d001              BEQ      |L1.362|
000166  2902              CMP      r1,#2
000168  d102              BNE      |L1.368|
                  |L1.362|
;;;1048     {
;;;1049       DeviceMode = Mode;
00016a  4ab6              LDR      r2,|L1.1092|
00016c  6011              STR      r1,[r2,#0]  ; DeviceMode
00016e  e000              B        |L1.370|
                  |L1.368|
;;;1050     }
;;;1051     else
;;;1052     {
;;;1053       errorstatus = SD_INVALID_PARAMETER;
000170  2026              MOVS     r0,#0x26
                  |L1.370|
;;;1054     }
;;;1055     return(errorstatus);
;;;1056   
;;;1057   }
000172  4770              BX       lr
;;;1058   
                          ENDP

                  CmdResp1Error PROC
;;;2453     */
;;;2454   static SD_Error CmdResp1Error(uint8_t cmd)
000174  e92d41f0          PUSH     {r4-r8,lr}
;;;2455   {
000178  4606              MOV      r6,r0
;;;2456     SD_Error errorstatus = SD_OK;
00017a  272a              MOVS     r7,#0x2a
;;;2457     uint32_t status;
;;;2458     uint32_t response_r1;
;;;2459   
;;;2460     status = SDIO->STA;
00017c  48af              LDR      r0,|L1.1084|
00017e  3880              SUBS     r0,r0,#0x80
000180  6b45              LDR      r5,[r0,#0x34]
;;;2461   
;;;2462     while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)))
000182  e002              B        |L1.394|
                  |L1.388|
;;;2463     {
;;;2464       status = SDIO->STA;
000184  48ad              LDR      r0,|L1.1084|
000186  3880              SUBS     r0,r0,#0x80
000188  6b45              LDR      r5,[r0,#0x34]
                  |L1.394|
00018a  f0050045          AND      r0,r5,#0x45           ;2462
00018e  2800              CMP      r0,#0                 ;2462
000190  d0f8              BEQ      |L1.388|
;;;2465     }
;;;2466   
;;;2467     if (status & SDIO_FLAG_CTIMEOUT)
000192  f0050004          AND      r0,r5,#4
000196  b130              CBZ      r0,|L1.422|
;;;2468     {
;;;2469       errorstatus = SD_CMD_RSP_TIMEOUT;
000198  2703              MOVS     r7,#3
;;;2470       SDIO_ClearFlag(SDIO_FLAG_CTIMEOUT);
00019a  2004              MOVS     r0,#4
00019c  f7fffffe          BL       SDIO_ClearFlag
;;;2471       return(errorstatus);
0001a0  4638              MOV      r0,r7
                  |L1.418|
;;;2472     }
;;;2473     else if (status & SDIO_FLAG_CCRCFAIL)
;;;2474     {
;;;2475       errorstatus = SD_CMD_CRC_FAIL;
;;;2476       SDIO_ClearFlag(SDIO_FLAG_CCRCFAIL);
;;;2477       return(errorstatus);
;;;2478     }
;;;2479   
;;;2480     /*!< Check response received is of desired command */
;;;2481     if (SDIO_GetCommandResponse() != cmd)
;;;2482     {
;;;2483       errorstatus = SD_ILLEGAL_CMD;
;;;2484       return(errorstatus);
;;;2485     }
;;;2486   
;;;2487     /*!< Clear all the static flags */
;;;2488     SDIO_ClearFlag(SDIO_STATIC_FLAGS);
;;;2489   
;;;2490     /*!< We have received response, retrieve it for analysis  */
;;;2491     response_r1 = SDIO_GetResponse(SDIO_RESP1);
;;;2492   
;;;2493     if ((response_r1 & SD_OCR_ERRORBITS) == SD_ALLZERO)
;;;2494     {
;;;2495       return(errorstatus);
;;;2496     }
;;;2497   
;;;2498     if (response_r1 & SD_OCR_ADDR_OUT_OF_RANGE)
;;;2499     {
;;;2500       return(SD_ADDR_OUT_OF_RANGE);
;;;2501     }
;;;2502   
;;;2503     if (response_r1 & SD_OCR_ADDR_MISALIGNED)
;;;2504     {
;;;2505       return(SD_ADDR_MISALIGNED);
;;;2506     }
;;;2507   
;;;2508     if (response_r1 & SD_OCR_BLOCK_LEN_ERR)
;;;2509     {
;;;2510       return(SD_BLOCK_LEN_ERR);
;;;2511     }
;;;2512   
;;;2513     if (response_r1 & SD_OCR_ERASE_SEQ_ERR)
;;;2514     {
;;;2515       return(SD_ERASE_SEQ_ERR);
;;;2516     }
;;;2517   
;;;2518     if (response_r1 & SD_OCR_BAD_ERASE_PARAM)
;;;2519     {
;;;2520       return(SD_BAD_ERASE_PARAM);
;;;2521     }
;;;2522   
;;;2523     if (response_r1 & SD_OCR_WRITE_PROT_VIOLATION)
;;;2524     {
;;;2525       return(SD_WRITE_PROT_VIOLATION);
;;;2526     }
;;;2527   
;;;2528     if (response_r1 & SD_OCR_LOCK_UNLOCK_FAILED)
;;;2529     {
;;;2530       return(SD_LOCK_UNLOCK_FAILED);
;;;2531     }
;;;2532   
;;;2533     if (response_r1 & SD_OCR_COM_CRC_FAILED)
;;;2534     {
;;;2535       return(SD_COM_CRC_FAILED);
;;;2536     }
;;;2537   
;;;2538     if (response_r1 & SD_OCR_ILLEGAL_CMD)
;;;2539     {
;;;2540       return(SD_ILLEGAL_CMD);
;;;2541     }
;;;2542   
;;;2543     if (response_r1 & SD_OCR_CARD_ECC_FAILED)
;;;2544     {
;;;2545       return(SD_CARD_ECC_FAILED);
;;;2546     }
;;;2547   
;;;2548     if (response_r1 & SD_OCR_CC_ERROR)
;;;2549     {
;;;2550       return(SD_CC_ERROR);
;;;2551     }
;;;2552   
;;;2553     if (response_r1 & SD_OCR_GENERAL_UNKNOWN_ERROR)
;;;2554     {
;;;2555       return(SD_GENERAL_UNKNOWN_ERROR);
;;;2556     }
;;;2557   
;;;2558     if (response_r1 & SD_OCR_STREAM_READ_UNDERRUN)
;;;2559     {
;;;2560       return(SD_STREAM_READ_UNDERRUN);
;;;2561     }
;;;2562   
;;;2563     if (response_r1 & SD_OCR_STREAM_WRITE_OVERRUN)
;;;2564     {
;;;2565       return(SD_STREAM_WRITE_OVERRUN);
;;;2566     }
;;;2567   
;;;2568     if (response_r1 & SD_OCR_CID_CSD_OVERWRIETE)
;;;2569     {
;;;2570       return(SD_CID_CSD_OVERWRITE);
;;;2571     }
;;;2572   
;;;2573     if (response_r1 & SD_OCR_WP_ERASE_SKIP)
;;;2574     {
;;;2575       return(SD_WP_ERASE_SKIP);
;;;2576     }
;;;2577   
;;;2578     if (response_r1 & SD_OCR_CARD_ECC_DISABLED)
;;;2579     {
;;;2580       return(SD_CARD_ECC_DISABLED);
;;;2581     }
;;;2582   
;;;2583     if (response_r1 & SD_OCR_ERASE_RESET)
;;;2584     {
;;;2585       return(SD_ERASE_RESET);
;;;2586     }
;;;2587   
;;;2588     if (response_r1 & SD_OCR_AKE_SEQ_ERROR)
;;;2589     {
;;;2590       return(SD_AKE_SEQ_ERROR);
;;;2591     }
;;;2592     return(errorstatus);
;;;2593   }
0001a2  e8bd81f0          POP      {r4-r8,pc}
                  |L1.422|
0001a6  f0050001          AND      r0,r5,#1              ;2473
0001aa  b128              CBZ      r0,|L1.440|
0001ac  2701              MOVS     r7,#1                 ;2475
0001ae  2001              MOVS     r0,#1                 ;2476
0001b0  f7fffffe          BL       SDIO_ClearFlag
0001b4  4638              MOV      r0,r7                 ;2477
0001b6  e7f4              B        |L1.418|
                  |L1.440|
0001b8  f7fffffe          BL       SDIO_GetCommandResponse
0001bc  42b0              CMP      r0,r6                 ;2481
0001be  d002              BEQ      |L1.454|
0001c0  2710              MOVS     r7,#0x10              ;2483
0001c2  4638              MOV      r0,r7                 ;2484
0001c4  e7ed              B        |L1.418|
                  |L1.454|
0001c6  f24050ff          MOV      r0,#0x5ff             ;2488
0001ca  f7fffffe          BL       SDIO_ClearFlag
0001ce  2000              MOVS     r0,#0                 ;2491
0001d0  f7fffffe          BL       SDIO_GetResponse
0001d4  4604              MOV      r4,r0                 ;2491
0001d6  489c              LDR      r0,|L1.1096|
0001d8  4020              ANDS     r0,r0,r4              ;2493
0001da  b908              CBNZ     r0,|L1.480|
0001dc  4638              MOV      r0,r7                 ;2495
0001de  e7e0              B        |L1.418|
                  |L1.480|
0001e0  f0044000          AND      r0,r4,#0x80000000     ;2498
0001e4  b108              CBZ      r0,|L1.490|
0001e6  201c              MOVS     r0,#0x1c              ;2500
0001e8  e7db              B        |L1.418|
                  |L1.490|
0001ea  f0044080          AND      r0,r4,#0x40000000     ;2503
0001ee  b108              CBZ      r0,|L1.500|
0001f0  2009              MOVS     r0,#9                 ;2505
0001f2  e7d6              B        |L1.418|
                  |L1.500|
0001f4  f0045000          AND      r0,r4,#0x20000000     ;2508
0001f8  b108              CBZ      r0,|L1.510|
0001fa  200a              MOVS     r0,#0xa               ;2510
0001fc  e7d1              B        |L1.418|
                  |L1.510|
0001fe  f0045080          AND      r0,r4,#0x10000000     ;2513
000202  b108              CBZ      r0,|L1.520|
000204  200b              MOVS     r0,#0xb               ;2515
000206  e7cc              B        |L1.418|
                  |L1.520|
000208  f0046000          AND      r0,r4,#0x8000000      ;2518
00020c  b108              CBZ      r0,|L1.530|
00020e  200c              MOVS     r0,#0xc               ;2520
000210  e7c7              B        |L1.418|
                  |L1.530|
000212  f0046080          AND      r0,r4,#0x4000000      ;2523
000216  b108              CBZ      r0,|L1.540|
000218  200d              MOVS     r0,#0xd               ;2525
00021a  e7c2              B        |L1.418|
                  |L1.540|
00021c  f0047080          AND      r0,r4,#0x1000000      ;2528
000220  b108              CBZ      r0,|L1.550|
000222  200e              MOVS     r0,#0xe               ;2530
000224  e7bd              B        |L1.418|
                  |L1.550|
000226  f4040000          AND      r0,r4,#0x800000       ;2533
00022a  b108              CBZ      r0,|L1.560|
00022c  200f              MOVS     r0,#0xf               ;2535
00022e  e7b8              B        |L1.418|
                  |L1.560|
000230  f4040080          AND      r0,r4,#0x400000       ;2538
000234  b108              CBZ      r0,|L1.570|
000236  2010              MOVS     r0,#0x10              ;2540
000238  e7b3              B        |L1.418|
                  |L1.570|
00023a  f4041000          AND      r0,r4,#0x200000       ;2543
00023e  b108              CBZ      r0,|L1.580|
000240  2011              MOVS     r0,#0x11              ;2545
000242  e7ae              B        |L1.418|
                  |L1.580|
000244  f4041080          AND      r0,r4,#0x100000       ;2548
000248  b108              CBZ      r0,|L1.590|
00024a  2012              MOVS     r0,#0x12              ;2550
00024c  e7a9              B        |L1.418|
                  |L1.590|
00024e  f4042000          AND      r0,r4,#0x80000        ;2553
000252  b108              CBZ      r0,|L1.600|
000254  2013              MOVS     r0,#0x13              ;2555
000256  e7a4              B        |L1.418|
                  |L1.600|
000258  f4042080          AND      r0,r4,#0x40000        ;2558
00025c  b108              CBZ      r0,|L1.610|
00025e  2014              MOVS     r0,#0x14              ;2560
000260  e79f              B        |L1.418|
                  |L1.610|
000262  f4043000          AND      r0,r4,#0x20000        ;2563
000266  b108              CBZ      r0,|L1.620|
000268  2015              MOVS     r0,#0x15              ;2565
00026a  e79a              B        |L1.418|
                  |L1.620|
00026c  f4043080          AND      r0,r4,#0x10000        ;2568
000270  b108              CBZ      r0,|L1.630|
000272  2016              MOVS     r0,#0x16              ;2570
000274  e795              B        |L1.418|
                  |L1.630|
000276  f4044000          AND      r0,r4,#0x8000         ;2573
00027a  b108              CBZ      r0,|L1.640|
00027c  2017              MOVS     r0,#0x17              ;2575
00027e  e790              B        |L1.418|
                  |L1.640|
000280  f4044080          AND      r0,r4,#0x4000         ;2578
000284  b108              CBZ      r0,|L1.650|
000286  2018              MOVS     r0,#0x18              ;2580
000288  e78b              B        |L1.418|
                  |L1.650|
00028a  f4045000          AND      r0,r4,#0x2000         ;2583
00028e  b108              CBZ      r0,|L1.660|
000290  2019              MOVS     r0,#0x19              ;2585
000292  e786              B        |L1.418|
                  |L1.660|
000294  f0040008          AND      r0,r4,#8              ;2588
000298  b108              CBZ      r0,|L1.670|
00029a  201a              MOVS     r0,#0x1a              ;2590
00029c  e781              B        |L1.418|
                  |L1.670|
00029e  4638              MOV      r0,r7                 ;2592
0002a0  e77f              B        |L1.418|
;;;2594   
                          ENDP

                  FindSCR PROC
;;;3007     */
;;;3008   static SD_Error FindSCR(uint16_t rca, uint32_t *pscr)
0002a2  e92d41fc          PUSH     {r2-r8,lr}
;;;3009   {
0002a6  4607              MOV      r7,r0
0002a8  460d              MOV      r5,r1
;;;3010     uint32_t index = 0;
0002aa  2600              MOVS     r6,#0
;;;3011     SD_Error errorstatus = SD_OK;
0002ac  242a              MOVS     r4,#0x2a
;;;3012     uint32_t tempscr[2] = {0, 0};
0002ae  2000              MOVS     r0,#0
0002b0  9000              STR      r0,[sp,#0]
0002b2  9001              STR      r0,[sp,#4]
;;;3013   
;;;3014     /*!< Set Block Size To 8 Bytes */
;;;3015     /*!< Send CMD55 APP_CMD with argument as card's RCA */
;;;3016     SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)8;
0002b4  2008              MOVS     r0,#8
0002b6  4965              LDR      r1,|L1.1100|
0002b8  6008              STR      r0,[r1,#0]  ; SDIO_CmdInitStructure
;;;3017     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_BLOCKLEN;
0002ba  2010              MOVS     r0,#0x10
0002bc  6048              STR      r0,[r1,#4]  ; SDIO_CmdInitStructure
;;;3018     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
0002be  2040              MOVS     r0,#0x40
0002c0  6088              STR      r0,[r1,#8]  ; SDIO_CmdInitStructure
;;;3019     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
0002c2  2000              MOVS     r0,#0
0002c4  60c8              STR      r0,[r1,#0xc]  ; SDIO_CmdInitStructure
;;;3020     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
0002c6  f44f6080          MOV      r0,#0x400
0002ca  6108              STR      r0,[r1,#0x10]  ; SDIO_CmdInitStructure
;;;3021     SDIO_SendCommand(&SDIO_CmdInitStructure);
0002cc  4608              MOV      r0,r1
0002ce  f7fffffe          BL       SDIO_SendCommand
;;;3022   
;;;3023     errorstatus = CmdResp1Error(SD_CMD_SET_BLOCKLEN);
0002d2  2010              MOVS     r0,#0x10
0002d4  f7fffffe          BL       CmdResp1Error
0002d8  4604              MOV      r4,r0
;;;3024   
;;;3025     if (errorstatus != SD_OK)
0002da  2c2a              CMP      r4,#0x2a
0002dc  d002              BEQ      |L1.740|
;;;3026     {
;;;3027       return(errorstatus);
0002de  4620              MOV      r0,r4
                  |L1.736|
;;;3028     }
;;;3029   
;;;3030     /*!< Send CMD55 APP_CMD with argument as card's RCA */
;;;3031     SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
;;;3032     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
;;;3033     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;3034     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;3035     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;3036     SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;3037   
;;;3038     errorstatus = CmdResp1Error(SD_CMD_APP_CMD);
;;;3039   
;;;3040     if (errorstatus != SD_OK)
;;;3041     {
;;;3042       return(errorstatus);
;;;3043     }
;;;3044     SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
;;;3045     SDIO_DataInitStructure.SDIO_DataLength = 8;
;;;3046     SDIO_DataInitStructure.SDIO_DataBlockSize = SDIO_DataBlockSize_8b;
;;;3047     SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToSDIO;
;;;3048     SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
;;;3049     SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
;;;3050     SDIO_DataConfig(&SDIO_DataInitStructure);
;;;3051   
;;;3052   
;;;3053     /*!< Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
;;;3054     SDIO_CmdInitStructure.SDIO_Argument = 0x0;
;;;3055     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SD_APP_SEND_SCR;
;;;3056     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;3057     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;3058     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;3059     SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;3060   
;;;3061     errorstatus = CmdResp1Error(SD_CMD_SD_APP_SEND_SCR);
;;;3062   
;;;3063     if (errorstatus != SD_OK)
;;;3064     {
;;;3065       return(errorstatus);
;;;3066     }
;;;3067   
;;;3068     while (!(SDIO->STA & (SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND | SDIO_FLAG_STBITERR)))
;;;3069     {
;;;3070       if (SDIO_GetFlagStatus(SDIO_FLAG_RXDAVL) != RESET)
;;;3071       {
;;;3072         *(tempscr + index) = SDIO_ReadData();
;;;3073         index++;
;;;3074       }
;;;3075     }
;;;3076   
;;;3077     if (SDIO_GetFlagStatus(SDIO_FLAG_DTIMEOUT) != RESET)
;;;3078     {
;;;3079       SDIO_ClearFlag(SDIO_FLAG_DTIMEOUT);
;;;3080       errorstatus = SD_DATA_TIMEOUT;
;;;3081       return(errorstatus);
;;;3082     }
;;;3083     else if (SDIO_GetFlagStatus(SDIO_FLAG_DCRCFAIL) != RESET)
;;;3084     {
;;;3085       SDIO_ClearFlag(SDIO_FLAG_DCRCFAIL);
;;;3086       errorstatus = SD_DATA_CRC_FAIL;
;;;3087       return(errorstatus);
;;;3088     }
;;;3089     else if (SDIO_GetFlagStatus(SDIO_FLAG_RXOVERR) != RESET)
;;;3090     {
;;;3091       SDIO_ClearFlag(SDIO_FLAG_RXOVERR);
;;;3092       errorstatus = SD_RX_OVERRUN;
;;;3093       return(errorstatus);
;;;3094     }
;;;3095     else if (SDIO_GetFlagStatus(SDIO_FLAG_STBITERR) != RESET)
;;;3096     {
;;;3097       SDIO_ClearFlag(SDIO_FLAG_STBITERR);
;;;3098       errorstatus = SD_START_BIT_ERR;
;;;3099       return(errorstatus);
;;;3100     }
;;;3101   
;;;3102     /*!< Clear all the static flags */
;;;3103     SDIO_ClearFlag(SDIO_STATIC_FLAGS);
;;;3104   
;;;3105     *(pscr + 1) = ((tempscr[0] & SD_0TO7BITS) << 24) | ((tempscr[0] & SD_8TO15BITS) << 8) | ((tempscr[0] & SD_16TO23BITS) >> 8) | ((tempscr[0] & SD_24TO31BITS) >> 24);
;;;3106   
;;;3107     *(pscr) = ((tempscr[1] & SD_0TO7BITS) << 24) | ((tempscr[1] & SD_8TO15BITS) << 8) | ((tempscr[1] & SD_16TO23BITS) >> 8) | ((tempscr[1] & SD_24TO31BITS) >> 24);
;;;3108   
;;;3109     return(errorstatus);
;;;3110   }
0002e0  e8bd81fc          POP      {r2-r8,pc}
                  |L1.740|
0002e4  485a              LDR      r0,|L1.1104|
0002e6  8800              LDRH     r0,[r0,#0]            ;3031  ; RCA
0002e8  0400              LSLS     r0,r0,#16             ;3031
0002ea  4958              LDR      r1,|L1.1100|
0002ec  6008              STR      r0,[r1,#0]            ;3031  ; SDIO_CmdInitStructure
0002ee  2037              MOVS     r0,#0x37              ;3032
0002f0  6048              STR      r0,[r1,#4]            ;3032  ; SDIO_CmdInitStructure
0002f2  2040              MOVS     r0,#0x40              ;3033
0002f4  6088              STR      r0,[r1,#8]            ;3033  ; SDIO_CmdInitStructure
0002f6  2000              MOVS     r0,#0                 ;3034
0002f8  60c8              STR      r0,[r1,#0xc]          ;3034  ; SDIO_CmdInitStructure
0002fa  f44f6080          MOV      r0,#0x400             ;3035
0002fe  6108              STR      r0,[r1,#0x10]         ;3035  ; SDIO_CmdInitStructure
000300  4608              MOV      r0,r1                 ;3036
000302  f7fffffe          BL       SDIO_SendCommand
000306  2037              MOVS     r0,#0x37              ;3038
000308  f7fffffe          BL       CmdResp1Error
00030c  4604              MOV      r4,r0                 ;3038
00030e  2c2a              CMP      r4,#0x2a              ;3040
000310  d001              BEQ      |L1.790|
000312  4620              MOV      r0,r4                 ;3042
000314  e7e4              B        |L1.736|
                  |L1.790|
000316  484f              LDR      r0,|L1.1108|
000318  494f              LDR      r1,|L1.1112|
00031a  6008              STR      r0,[r1,#0]            ;3044  ; SDIO_DataInitStructure
00031c  2008              MOVS     r0,#8                 ;3045
00031e  6048              STR      r0,[r1,#4]            ;3045  ; SDIO_DataInitStructure
000320  2030              MOVS     r0,#0x30              ;3046
000322  6088              STR      r0,[r1,#8]            ;3046  ; SDIO_DataInitStructure
000324  2002              MOVS     r0,#2                 ;3047
000326  60c8              STR      r0,[r1,#0xc]          ;3047  ; SDIO_DataInitStructure
000328  2000              MOVS     r0,#0                 ;3048
00032a  6108              STR      r0,[r1,#0x10]         ;3048  ; SDIO_DataInitStructure
00032c  2001              MOVS     r0,#1                 ;3049
00032e  6148              STR      r0,[r1,#0x14]         ;3049  ; SDIO_DataInitStructure
000330  4608              MOV      r0,r1                 ;3050
000332  f7fffffe          BL       SDIO_DataConfig
000336  2000              MOVS     r0,#0                 ;3054
000338  4944              LDR      r1,|L1.1100|
00033a  6008              STR      r0,[r1,#0]            ;3054  ; SDIO_CmdInitStructure
00033c  2033              MOVS     r0,#0x33              ;3055
00033e  6048              STR      r0,[r1,#4]            ;3055  ; SDIO_CmdInitStructure
000340  2040              MOVS     r0,#0x40              ;3056
000342  6088              STR      r0,[r1,#8]            ;3056  ; SDIO_CmdInitStructure
000344  2000              MOVS     r0,#0                 ;3057
000346  60c8              STR      r0,[r1,#0xc]          ;3057  ; SDIO_CmdInitStructure
000348  f44f6080          MOV      r0,#0x400             ;3058
00034c  6108              STR      r0,[r1,#0x10]         ;3058  ; SDIO_CmdInitStructure
00034e  4608              MOV      r0,r1                 ;3059
000350  f7fffffe          BL       SDIO_SendCommand
000354  2033              MOVS     r0,#0x33              ;3061
000356  f7fffffe          BL       CmdResp1Error
00035a  4604              MOV      r4,r0                 ;3061
00035c  2c2a              CMP      r4,#0x2a              ;3063
00035e  d001              BEQ      |L1.868|
000360  4620              MOV      r0,r4                 ;3065
000362  e7bd              B        |L1.736|
                  |L1.868|
000364  e009              B        |L1.890|
                  |L1.870|
000366  f44f1000          MOV      r0,#0x200000          ;3070
00036a  f7fffffe          BL       SDIO_GetFlagStatus
00036e  b120              CBZ      r0,|L1.890|
000370  f7fffffe          BL       SDIO_ReadData
000374  f84d0026          STR      r0,[sp,r6,LSL #2]     ;3072
000378  1c76              ADDS     r6,r6,#1              ;3073
                  |L1.890|
00037a  4830              LDR      r0,|L1.1084|
00037c  3880              SUBS     r0,r0,#0x80           ;3068
00037e  6b40              LDR      r0,[r0,#0x34]         ;3068
000380  f240612a          MOV      r1,#0x62a             ;3068
000384  4008              ANDS     r0,r0,r1              ;3068
000386  2800              CMP      r0,#0                 ;3068
000388  d0ed              BEQ      |L1.870|
00038a  2008              MOVS     r0,#8                 ;3077
00038c  f7fffffe          BL       SDIO_GetFlagStatus
000390  b128              CBZ      r0,|L1.926|
000392  2008              MOVS     r0,#8                 ;3079
000394  f7fffffe          BL       SDIO_ClearFlag
000398  2404              MOVS     r4,#4                 ;3080
00039a  4620              MOV      r0,r4                 ;3081
00039c  e7a0              B        |L1.736|
                  |L1.926|
00039e  2002              MOVS     r0,#2                 ;3083
0003a0  f7fffffe          BL       SDIO_GetFlagStatus
0003a4  b128              CBZ      r0,|L1.946|
0003a6  2002              MOVS     r0,#2                 ;3085
0003a8  f7fffffe          BL       SDIO_ClearFlag
0003ac  2402              MOVS     r4,#2                 ;3086
0003ae  4620              MOV      r0,r4                 ;3087
0003b0  e796              B        |L1.736|
                  |L1.946|
0003b2  2020              MOVS     r0,#0x20              ;3089
0003b4  f7fffffe          BL       SDIO_GetFlagStatus
0003b8  b128              CBZ      r0,|L1.966|
0003ba  2020              MOVS     r0,#0x20              ;3091
0003bc  f7fffffe          BL       SDIO_ClearFlag
0003c0  2406              MOVS     r4,#6                 ;3092
0003c2  4620              MOV      r0,r4                 ;3093
0003c4  e78c              B        |L1.736|
                  |L1.966|
0003c6  f44f7000          MOV      r0,#0x200             ;3095
0003ca  f7fffffe          BL       SDIO_GetFlagStatus
0003ce  b130              CBZ      r0,|L1.990|
0003d0  f44f7000          MOV      r0,#0x200             ;3097
0003d4  f7fffffe          BL       SDIO_ClearFlag
0003d8  2407              MOVS     r4,#7                 ;3098
0003da  4620              MOV      r0,r4                 ;3099
0003dc  e780              B        |L1.736|
                  |L1.990|
0003de  f24050ff          MOV      r0,#0x5ff             ;3103
0003e2  f7fffffe          BL       SDIO_ClearFlag
0003e6  9800              LDR      r0,[sp,#0]            ;3105
0003e8  0600              LSLS     r0,r0,#24             ;3105
0003ea  9900              LDR      r1,[sp,#0]            ;3105
0003ec  f401417f          AND      r1,r1,#0xff00         ;3105
0003f0  ea402001          ORR      r0,r0,r1,LSL #8       ;3105
0003f4  9900              LDR      r1,[sp,#0]            ;3105
0003f6  f401017f          AND      r1,r1,#0xff0000       ;3105
0003fa  ea402011          ORR      r0,r0,r1,LSR #8       ;3105
0003fe  9900              LDR      r1,[sp,#0]            ;3105
000400  ea406011          ORR      r0,r0,r1,LSR #24      ;3105
000404  6068              STR      r0,[r5,#4]            ;3105
000406  9801              LDR      r0,[sp,#4]            ;3107
000408  0600              LSLS     r0,r0,#24             ;3107
00040a  9901              LDR      r1,[sp,#4]            ;3107
00040c  f401417f          AND      r1,r1,#0xff00         ;3107
000410  ea402001          ORR      r0,r0,r1,LSL #8       ;3107
000414  9901              LDR      r1,[sp,#4]            ;3107
000416  f401017f          AND      r1,r1,#0xff0000       ;3107
00041a  ea402011          ORR      r0,r0,r1,LSR #8       ;3107
00041e  9901              LDR      r1,[sp,#4]            ;3107
000420  ea406011          ORR      r0,r0,r1,LSR #24      ;3107
000424  6028              STR      r0,[r5,#0]            ;3107
000426  e019              B        |L1.1116|
                  |L1.1064|
                          DCD      0x40011000
                  |L1.1068|
                          DCD      0x40011400
                  |L1.1072|
                          DCD      0x40011c00
                  |L1.1076|
                          DCD      0x1000f000
                  |L1.1080|
                          DCD      0x40020444
                  |L1.1084|
                          DCD      0x40018080
                  |L1.1088|
                          DCD      0x10002000
                  |L1.1092|
                          DCD      DeviceMode
                  |L1.1096|
                          DCD      0xfdffe008
                  |L1.1100|
                          DCD      SDIO_CmdInitStructure
                  |L1.1104|
                          DCD      ||RCA||
                  |L1.1108|
                          DCD      0x000fffff
                  |L1.1112|
                          DCD      SDIO_DataInitStructure
                  |L1.1116|
00045c  4620              MOV      r0,r4                 ;3109
00045e  e73f              B        |L1.736|
;;;3111   
                          ENDP

                  SDEnWideBus PROC
;;;2734     */
;;;2735   static SD_Error SDEnWideBus(FunctionalState NewState)
000460  b57c              PUSH     {r2-r6,lr}
;;;2736   {
000462  4605              MOV      r5,r0
;;;2737     SD_Error errorstatus = SD_OK;
000464  242a              MOVS     r4,#0x2a
;;;2738   
;;;2739     uint32_t scr[2] = {0, 0};
000466  2000              MOVS     r0,#0
000468  9000              STR      r0,[sp,#0]
00046a  9001              STR      r0,[sp,#4]
;;;2740   
;;;2741     if (SDIO_GetResponse(SDIO_RESP1) & SD_CARD_LOCKED)
00046c  f7fffffe          BL       SDIO_GetResponse
000470  f0007000          AND      r0,r0,#0x2000000
000474  b110              CBZ      r0,|L1.1148|
;;;2742     {
;;;2743       errorstatus = SD_LOCK_UNLOCK_FAILED;
000476  240e              MOVS     r4,#0xe
;;;2744       return(errorstatus);
000478  4620              MOV      r0,r4
                  |L1.1146|
;;;2745     }
;;;2746   
;;;2747     /*!< Get SCR Register */
;;;2748     errorstatus = FindSCR(RCA, scr);
;;;2749   
;;;2750     if (errorstatus != SD_OK)
;;;2751     {
;;;2752       return(errorstatus);
;;;2753     }
;;;2754   
;;;2755     /*!< If wide bus operation to be enabled */
;;;2756     if (NewState == ENABLE)
;;;2757     {
;;;2758       /*!< If requested card supports wide bus operation */
;;;2759       if ((scr[1] & SD_WIDE_BUS_SUPPORT) != SD_ALLZERO)
;;;2760       {
;;;2761         /*!< Send CMD55 APP_CMD with argument as card's RCA.*/
;;;2762         SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
;;;2763         SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
;;;2764         SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;2765         SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;2766         SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;2767         SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;2768   
;;;2769         errorstatus = CmdResp1Error(SD_CMD_APP_CMD);
;;;2770   
;;;2771         if (errorstatus != SD_OK)
;;;2772         {
;;;2773           return(errorstatus);
;;;2774         }
;;;2775   
;;;2776         /*!< Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
;;;2777         SDIO_CmdInitStructure.SDIO_Argument = 0x2;
;;;2778         SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_SD_SET_BUSWIDTH;
;;;2779         SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;2780         SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;2781         SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;2782         SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;2783   
;;;2784         errorstatus = CmdResp1Error(SD_CMD_APP_SD_SET_BUSWIDTH);
;;;2785   
;;;2786         if (errorstatus != SD_OK)
;;;2787         {
;;;2788           return(errorstatus);
;;;2789         }
;;;2790         return(errorstatus);
;;;2791       }
;;;2792       else
;;;2793       {
;;;2794         errorstatus = SD_REQUEST_NOT_APPLICABLE;
;;;2795         return(errorstatus);
;;;2796       }
;;;2797     }   /*!< If wide bus operation to be disabled */
;;;2798     else
;;;2799     {
;;;2800       /*!< If requested card supports 1 bit mode operation */
;;;2801       if ((scr[1] & SD_SINGLE_BUS_SUPPORT) != SD_ALLZERO)
;;;2802       {
;;;2803         /*!< Send CMD55 APP_CMD with argument as card's RCA.*/
;;;2804         SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
;;;2805         SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
;;;2806         SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;2807         SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;2808         SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;2809         SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;2810   
;;;2811   
;;;2812         errorstatus = CmdResp1Error(SD_CMD_APP_CMD);
;;;2813   
;;;2814         if (errorstatus != SD_OK)
;;;2815         {
;;;2816           return(errorstatus);
;;;2817         }
;;;2818   
;;;2819         /*!< Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
;;;2820         SDIO_CmdInitStructure.SDIO_Argument = 0x00;
;;;2821         SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_SD_SET_BUSWIDTH;
;;;2822         SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;2823         SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;2824         SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;2825         SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;2826   
;;;2827         errorstatus = CmdResp1Error(SD_CMD_APP_SD_SET_BUSWIDTH);
;;;2828   
;;;2829         if (errorstatus != SD_OK)
;;;2830         {
;;;2831           return(errorstatus);
;;;2832         }
;;;2833   
;;;2834         return(errorstatus);
;;;2835       }
;;;2836       else
;;;2837       {
;;;2838         errorstatus = SD_REQUEST_NOT_APPLICABLE;
;;;2839         return(errorstatus);
;;;2840       }
;;;2841     }
;;;2842   }
00047a  bd7c              POP      {r2-r6,pc}
                  |L1.1148|
00047c  49fe              LDR      r1,|L1.2168|
00047e  8809              LDRH     r1,[r1,#0]            ;2748  ; RCA
000480  b288              UXTH     r0,r1                 ;2748
000482  4669              MOV      r1,sp                 ;2748
000484  f7fffffe          BL       FindSCR
000488  4604              MOV      r4,r0                 ;2748
00048a  2c2a              CMP      r4,#0x2a              ;2750
00048c  d001              BEQ      |L1.1170|
00048e  4620              MOV      r0,r4                 ;2752
000490  e7f3              B        |L1.1146|
                  |L1.1170|
000492  2d01              CMP      r5,#1                 ;2756
000494  d138              BNE      |L1.1288|
000496  9801              LDR      r0,[sp,#4]            ;2759
000498  f4002080          AND      r0,r0,#0x40000        ;2759
00049c  2800              CMP      r0,#0                 ;2759
00049e  d030              BEQ      |L1.1282|
0004a0  48f5              LDR      r0,|L1.2168|
0004a2  8800              LDRH     r0,[r0,#0]            ;2762  ; RCA
0004a4  0400              LSLS     r0,r0,#16             ;2762
0004a6  49f5              LDR      r1,|L1.2172|
0004a8  6008              STR      r0,[r1,#0]            ;2762  ; SDIO_CmdInitStructure
0004aa  2037              MOVS     r0,#0x37              ;2763
0004ac  6048              STR      r0,[r1,#4]            ;2763  ; SDIO_CmdInitStructure
0004ae  2040              MOVS     r0,#0x40              ;2764
0004b0  6088              STR      r0,[r1,#8]            ;2764  ; SDIO_CmdInitStructure
0004b2  2000              MOVS     r0,#0                 ;2765
0004b4  60c8              STR      r0,[r1,#0xc]          ;2765  ; SDIO_CmdInitStructure
0004b6  02a8              LSLS     r0,r5,#10             ;2766
0004b8  6108              STR      r0,[r1,#0x10]         ;2766  ; SDIO_CmdInitStructure
0004ba  4608              MOV      r0,r1                 ;2767
0004bc  f7fffffe          BL       SDIO_SendCommand
0004c0  2037              MOVS     r0,#0x37              ;2769
0004c2  f7fffffe          BL       CmdResp1Error
0004c6  4604              MOV      r4,r0                 ;2769
0004c8  2c2a              CMP      r4,#0x2a              ;2771
0004ca  d001              BEQ      |L1.1232|
0004cc  4620              MOV      r0,r4                 ;2773
0004ce  e7d4              B        |L1.1146|
                  |L1.1232|
0004d0  2002              MOVS     r0,#2                 ;2777
0004d2  49ea              LDR      r1,|L1.2172|
0004d4  6008              STR      r0,[r1,#0]            ;2777  ; SDIO_CmdInitStructure
0004d6  2006              MOVS     r0,#6                 ;2778
0004d8  6048              STR      r0,[r1,#4]            ;2778  ; SDIO_CmdInitStructure
0004da  2040              MOVS     r0,#0x40              ;2779
0004dc  6088              STR      r0,[r1,#8]            ;2779  ; SDIO_CmdInitStructure
0004de  2000              MOVS     r0,#0                 ;2780
0004e0  60c8              STR      r0,[r1,#0xc]          ;2780  ; SDIO_CmdInitStructure
0004e2  f44f6080          MOV      r0,#0x400             ;2781
0004e6  6108              STR      r0,[r1,#0x10]         ;2781  ; SDIO_CmdInitStructure
0004e8  4608              MOV      r0,r1                 ;2782
0004ea  f7fffffe          BL       SDIO_SendCommand
0004ee  2006              MOVS     r0,#6                 ;2784
0004f0  f7fffffe          BL       CmdResp1Error
0004f4  4604              MOV      r4,r0                 ;2784
0004f6  2c2a              CMP      r4,#0x2a              ;2786
0004f8  d001              BEQ      |L1.1278|
0004fa  4620              MOV      r0,r4                 ;2788
0004fc  e7bd              B        |L1.1146|
                  |L1.1278|
0004fe  4620              MOV      r0,r4                 ;2790
000500  e7bb              B        |L1.1146|
                  |L1.1282|
000502  2425              MOVS     r4,#0x25              ;2794
000504  4620              MOV      r0,r4                 ;2795
000506  e7b8              B        |L1.1146|
                  |L1.1288|
000508  9801              LDR      r0,[sp,#4]            ;2801
00050a  f4003080          AND      r0,r0,#0x10000        ;2801
00050e  b378              CBZ      r0,|L1.1392|
000510  48d9              LDR      r0,|L1.2168|
000512  8800              LDRH     r0,[r0,#0]            ;2804  ; RCA
000514  0400              LSLS     r0,r0,#16             ;2804
000516  49d9              LDR      r1,|L1.2172|
000518  6008              STR      r0,[r1,#0]            ;2804  ; SDIO_CmdInitStructure
00051a  2037              MOVS     r0,#0x37              ;2805
00051c  6048              STR      r0,[r1,#4]            ;2805  ; SDIO_CmdInitStructure
00051e  2040              MOVS     r0,#0x40              ;2806
000520  6088              STR      r0,[r1,#8]            ;2806  ; SDIO_CmdInitStructure
000522  2000              MOVS     r0,#0                 ;2807
000524  60c8              STR      r0,[r1,#0xc]          ;2807  ; SDIO_CmdInitStructure
000526  f44f6080          MOV      r0,#0x400             ;2808
00052a  6108              STR      r0,[r1,#0x10]         ;2808  ; SDIO_CmdInitStructure
00052c  4608              MOV      r0,r1                 ;2809
00052e  f7fffffe          BL       SDIO_SendCommand
000532  2037              MOVS     r0,#0x37              ;2812
000534  f7fffffe          BL       CmdResp1Error
000538  4604              MOV      r4,r0                 ;2812
00053a  2c2a              CMP      r4,#0x2a              ;2814
00053c  d001              BEQ      |L1.1346|
00053e  4620              MOV      r0,r4                 ;2816
000540  e79b              B        |L1.1146|
                  |L1.1346|
000542  2000              MOVS     r0,#0                 ;2820
000544  49cd              LDR      r1,|L1.2172|
000546  6008              STR      r0,[r1,#0]            ;2820  ; SDIO_CmdInitStructure
000548  2006              MOVS     r0,#6                 ;2821
00054a  6048              STR      r0,[r1,#4]            ;2821  ; SDIO_CmdInitStructure
00054c  2040              MOVS     r0,#0x40              ;2822
00054e  6088              STR      r0,[r1,#8]            ;2822  ; SDIO_CmdInitStructure
000550  2000              MOVS     r0,#0                 ;2823
000552  60c8              STR      r0,[r1,#0xc]          ;2823  ; SDIO_CmdInitStructure
000554  f44f6080          MOV      r0,#0x400             ;2824
000558  6108              STR      r0,[r1,#0x10]         ;2824  ; SDIO_CmdInitStructure
00055a  4608              MOV      r0,r1                 ;2825
00055c  f7fffffe          BL       SDIO_SendCommand
000560  2006              MOVS     r0,#6                 ;2827
000562  f7fffffe          BL       CmdResp1Error
000566  4604              MOV      r4,r0                 ;2827
000568  2c2a              CMP      r4,#0x2a              ;2829
00056a  d002              BEQ      |L1.1394|
00056c  4620              MOV      r0,r4                 ;2831
00056e  e784              B        |L1.1146|
                  |L1.1392|
000570  e001              B        |L1.1398|
                  |L1.1394|
000572  4620              MOV      r0,r4                 ;2834
000574  e781              B        |L1.1146|
                  |L1.1398|
000576  2425              MOVS     r4,#0x25              ;2838
000578  4620              MOV      r0,r4                 ;2839
00057a  e77e              B        |L1.1146|
;;;2843   
                          ENDP

                  SD_EnableWideBusOperation PROC
;;;979      */
;;;980    SD_Error SD_EnableWideBusOperation(uint32_t WideMode)
00057c  b570              PUSH     {r4-r6,lr}
;;;981    {
00057e  4604              MOV      r4,r0
;;;982      SD_Error errorstatus = SD_OK;
000580  252a              MOVS     r5,#0x2a
;;;983    
;;;984      /*!< MMC Card doesn't support this feature */
;;;985      if (SDIO_MULTIMEDIA_CARD == CardType)
000582  48bf              LDR      r0,|L1.2176|
000584  6800              LDR      r0,[r0,#0]  ; CardType
000586  2803              CMP      r0,#3
000588  d102              BNE      |L1.1424|
;;;986      {
;;;987        errorstatus = SD_UNSUPPORTED_FEATURE;
00058a  2527              MOVS     r5,#0x27
;;;988        return(errorstatus);
00058c  4628              MOV      r0,r5
                  |L1.1422|
;;;989      }
;;;990      else if ((SDIO_STD_CAPACITY_SD_CARD_V1_1 == CardType) || (SDIO_STD_CAPACITY_SD_CARD_V2_0 == CardType) || (SDIO_HIGH_CAPACITY_SD_CARD == CardType))
;;;991      {
;;;992        if (SDIO_BusWide_8b == WideMode)
;;;993        {
;;;994          errorstatus = SD_UNSUPPORTED_FEATURE;
;;;995          return(errorstatus);
;;;996        }
;;;997        else if (SDIO_BusWide_4b == WideMode)
;;;998        {
;;;999          errorstatus = SDEnWideBus(ENABLE);
;;;1000   
;;;1001         if (SD_OK == errorstatus)
;;;1002         {
;;;1003           /*!< Configure the SDIO peripheral */
;;;1004           SDIO_InitStructure.SDIO_ClockDiv = SDIO_TRANSFER_CLK_DIV; 
;;;1005           SDIO_InitStructure.SDIO_ClockEdge = SDIO_ClockEdge_Rising;
;;;1006           SDIO_InitStructure.SDIO_ClockBypass = SDIO_ClockBypass_Disable;
;;;1007           SDIO_InitStructure.SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
;;;1008           SDIO_InitStructure.SDIO_BusWide = SDIO_BusWide_4b;
;;;1009           SDIO_InitStructure.SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
;;;1010           SDIO_Init(&SDIO_InitStructure);
;;;1011         }
;;;1012       }
;;;1013       else
;;;1014       {
;;;1015         errorstatus = SDEnWideBus(DISABLE);
;;;1016   
;;;1017         if (SD_OK == errorstatus)
;;;1018         {
;;;1019           /*!< Configure the SDIO peripheral */
;;;1020           SDIO_InitStructure.SDIO_ClockDiv = SDIO_TRANSFER_CLK_DIV; 
;;;1021           SDIO_InitStructure.SDIO_ClockEdge = SDIO_ClockEdge_Rising;
;;;1022           SDIO_InitStructure.SDIO_ClockBypass = SDIO_ClockBypass_Disable;
;;;1023           SDIO_InitStructure.SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
;;;1024           SDIO_InitStructure.SDIO_BusWide = SDIO_BusWide_1b;
;;;1025           SDIO_InitStructure.SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
;;;1026           SDIO_Init(&SDIO_InitStructure);
;;;1027         }
;;;1028       }
;;;1029     }
;;;1030   
;;;1031     return(errorstatus);
;;;1032   }
00058e  bd70              POP      {r4-r6,pc}
                  |L1.1424|
000590  48bb              LDR      r0,|L1.2176|
000592  6800              LDR      r0,[r0,#0]            ;990  ; CardType
000594  b138              CBZ      r0,|L1.1446|
000596  48ba              LDR      r0,|L1.2176|
000598  6800              LDR      r0,[r0,#0]            ;990  ; CardType
00059a  2801              CMP      r0,#1                 ;990
00059c  d003              BEQ      |L1.1446|
00059e  48b8              LDR      r0,|L1.2176|
0005a0  6800              LDR      r0,[r0,#0]            ;990  ; CardType
0005a2  2802              CMP      r0,#2                 ;990
0005a4  d130              BNE      |L1.1544|
                  |L1.1446|
0005a6  f5b45f80          CMP      r4,#0x1000            ;992
0005aa  d102              BNE      |L1.1458|
0005ac  2527              MOVS     r5,#0x27              ;994
0005ae  4628              MOV      r0,r5                 ;995
0005b0  e7ed              B        |L1.1422|
                  |L1.1458|
0005b2  f5b46f00          CMP      r4,#0x800             ;997
0005b6  d115              BNE      |L1.1508|
0005b8  2001              MOVS     r0,#1                 ;999
0005ba  f7fffffe          BL       SDEnWideBus
0005be  4605              MOV      r5,r0                 ;999
0005c0  2d2a              CMP      r5,#0x2a              ;1001
0005c2  d121              BNE      |L1.1544|
0005c4  2001              MOVS     r0,#1                 ;1004
0005c6  49af              LDR      r1,|L1.2180|
0005c8  7508              STRB     r0,[r1,#0x14]         ;1004
0005ca  2000              MOVS     r0,#0                 ;1005
0005cc  6008              STR      r0,[r1,#0]            ;1005  ; SDIO_InitStructure
0005ce  6048              STR      r0,[r1,#4]            ;1006  ; SDIO_InitStructure
0005d0  6088              STR      r0,[r1,#8]            ;1007  ; SDIO_InitStructure
0005d2  f44f6000          MOV      r0,#0x800             ;1008
0005d6  60c8              STR      r0,[r1,#0xc]          ;1008  ; SDIO_InitStructure
0005d8  2000              MOVS     r0,#0                 ;1009
0005da  6108              STR      r0,[r1,#0x10]         ;1009  ; SDIO_InitStructure
0005dc  4608              MOV      r0,r1                 ;1010
0005de  f7fffffe          BL       SDIO_Init
0005e2  e011              B        |L1.1544|
                  |L1.1508|
0005e4  2000              MOVS     r0,#0                 ;1015
0005e6  f7fffffe          BL       SDEnWideBus
0005ea  4605              MOV      r5,r0                 ;1015
0005ec  2d2a              CMP      r5,#0x2a              ;1017
0005ee  d10b              BNE      |L1.1544|
0005f0  2001              MOVS     r0,#1                 ;1020
0005f2  49a4              LDR      r1,|L1.2180|
0005f4  7508              STRB     r0,[r1,#0x14]         ;1020
0005f6  2000              MOVS     r0,#0                 ;1021
0005f8  6008              STR      r0,[r1,#0]            ;1021  ; SDIO_InitStructure
0005fa  6048              STR      r0,[r1,#4]            ;1022  ; SDIO_InitStructure
0005fc  6088              STR      r0,[r1,#8]            ;1023  ; SDIO_InitStructure
0005fe  60c8              STR      r0,[r1,#0xc]          ;1024  ; SDIO_InitStructure
000600  6108              STR      r0,[r1,#0x10]         ;1025  ; SDIO_InitStructure
000602  4608              MOV      r0,r1                 ;1026
000604  f7fffffe          BL       SDIO_Init
                  |L1.1544|
000608  4628              MOV      r0,r5                 ;1031
00060a  e7c0              B        |L1.1422|
;;;1033   
                          ENDP

                  SD_SelectDeselect PROC
;;;1063     */
;;;1064   SD_Error SD_SelectDeselect(uint32_t addr)
00060c  b570              PUSH     {r4-r6,lr}
;;;1065   {
00060e  4604              MOV      r4,r0
;;;1066     SD_Error errorstatus = SD_OK;
000610  252a              MOVS     r5,#0x2a
;;;1067   
;;;1068     /*!< Send CMD7 SDIO_SEL_DESEL_CARD */
;;;1069     SDIO_CmdInitStructure.SDIO_Argument =  addr;
000612  489a              LDR      r0,|L1.2172|
000614  6004              STR      r4,[r0,#0]  ; SDIO_CmdInitStructure
;;;1070     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SEL_DESEL_CARD;
000616  2007              MOVS     r0,#7
000618  4998              LDR      r1,|L1.2172|
00061a  6048              STR      r0,[r1,#4]  ; SDIO_CmdInitStructure
;;;1071     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
00061c  2040              MOVS     r0,#0x40
00061e  6088              STR      r0,[r1,#8]  ; SDIO_CmdInitStructure
;;;1072     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
000620  2000              MOVS     r0,#0
000622  60c8              STR      r0,[r1,#0xc]  ; SDIO_CmdInitStructure
;;;1073     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
000624  f44f6080          MOV      r0,#0x400
000628  6108              STR      r0,[r1,#0x10]  ; SDIO_CmdInitStructure
;;;1074     SDIO_SendCommand(&SDIO_CmdInitStructure);
00062a  4608              MOV      r0,r1
00062c  f7fffffe          BL       SDIO_SendCommand
;;;1075   
;;;1076     errorstatus = CmdResp1Error(SD_CMD_SEL_DESEL_CARD);
000630  2007              MOVS     r0,#7
000632  f7fffffe          BL       CmdResp1Error
000636  4605              MOV      r5,r0
;;;1077   
;;;1078     return(errorstatus);
000638  4628              MOV      r0,r5
;;;1079   }
00063a  bd70              POP      {r4-r6,pc}
;;;1080   
                          ENDP

                  SD_GetCardInfo PROC
;;;767      */
;;;768    SD_Error SD_GetCardInfo(SD_CardInfo *cardinfo)
00063c  b530              PUSH     {r4,r5,lr}
;;;769    {
00063e  4601              MOV      r1,r0
;;;770      SD_Error errorstatus = SD_OK;
000640  202a              MOVS     r0,#0x2a
;;;771      uint8_t tmp = 0;
000642  2200              MOVS     r2,#0
;;;772    
;;;773      cardinfo->CardType = (uint8_t)CardType;
000644  4b8e              LDR      r3,|L1.2176|
000646  781b              LDRB     r3,[r3,#0]  ; CardType
000648  f881304e          STRB     r3,[r1,#0x4e]
;;;774      cardinfo->RCA = (uint16_t)RCA;
00064c  4b8a              LDR      r3,|L1.2168|
00064e  881b              LDRH     r3,[r3,#0]  ; RCA
000650  f8a1304c          STRH     r3,[r1,#0x4c]
;;;775    
;;;776      /*!< Byte 0 */
;;;777      tmp = (uint8_t)((CSD_Tab[0] & 0xFF000000) >> 24);
000654  4b8c              LDR      r3,|L1.2184|
000656  681b              LDR      r3,[r3,#0]  ; CSD_Tab
000658  0e1a              LSRS     r2,r3,#24
;;;778      cardinfo->SD_csd.CSDStruct = (tmp & 0xC0) >> 6;
00065a  0993              LSRS     r3,r2,#6
00065c  700b              STRB     r3,[r1,#0]
;;;779      cardinfo->SD_csd.SysSpecVersion = (tmp & 0x3C) >> 2;
00065e  f3c20383          UBFX     r3,r2,#2,#4
000662  704b              STRB     r3,[r1,#1]
;;;780      cardinfo->SD_csd.Reserved1 = tmp & 0x03;
000664  f0020303          AND      r3,r2,#3
000668  708b              STRB     r3,[r1,#2]
;;;781    
;;;782      /*!< Byte 1 */
;;;783      tmp = (uint8_t)((CSD_Tab[0] & 0x00FF0000) >> 16);
00066a  4b87              LDR      r3,|L1.2184|
00066c  681b              LDR      r3,[r3,#0]  ; CSD_Tab
00066e  f3c34207          UBFX     r2,r3,#16,#8
;;;784      cardinfo->SD_csd.TAAC = tmp;
000672  70ca              STRB     r2,[r1,#3]
;;;785    
;;;786      /*!< Byte 2 */
;;;787      tmp = (uint8_t)((CSD_Tab[0] & 0x0000FF00) >> 8);
000674  4b84              LDR      r3,|L1.2184|
000676  881b              LDRH     r3,[r3,#0]  ; CSD_Tab
000678  f3c32207          UBFX     r2,r3,#8,#8
;;;788      cardinfo->SD_csd.NSAC = tmp;
00067c  710a              STRB     r2,[r1,#4]
;;;789    
;;;790      /*!< Byte 3 */
;;;791      tmp = (uint8_t)(CSD_Tab[0] & 0x000000FF);
00067e  4b82              LDR      r3,|L1.2184|
000680  781a              LDRB     r2,[r3,#0]  ; CSD_Tab
;;;792      cardinfo->SD_csd.MaxBusClkFrec = tmp;
000682  714a              STRB     r2,[r1,#5]
;;;793    
;;;794      /*!< Byte 4 */
;;;795      tmp = (uint8_t)((CSD_Tab[1] & 0xFF000000) >> 24);
000684  685b              LDR      r3,[r3,#4]  ; CSD_Tab
000686  0e1a              LSRS     r2,r3,#24
;;;796      cardinfo->SD_csd.CardComdClasses = tmp << 4;
000688  0113              LSLS     r3,r2,#4
00068a  80cb              STRH     r3,[r1,#6]
;;;797    
;;;798      /*!< Byte 5 */
;;;799      tmp = (uint8_t)((CSD_Tab[1] & 0x00FF0000) >> 16);
00068c  4b7e              LDR      r3,|L1.2184|
00068e  685b              LDR      r3,[r3,#4]  ; CSD_Tab
000690  f3c34207          UBFX     r2,r3,#16,#8
;;;800      cardinfo->SD_csd.CardComdClasses |= (tmp & 0xF0) >> 4;
000694  88cb              LDRH     r3,[r1,#6]
000696  ea431312          ORR      r3,r3,r2,LSR #4
00069a  80cb              STRH     r3,[r1,#6]
;;;801      cardinfo->SD_csd.RdBlockLen = tmp & 0x0F;
00069c  f002030f          AND      r3,r2,#0xf
0006a0  720b              STRB     r3,[r1,#8]
;;;802    
;;;803      /*!< Byte 6 */
;;;804      tmp = (uint8_t)((CSD_Tab[1] & 0x0000FF00) >> 8);
0006a2  4b79              LDR      r3,|L1.2184|
0006a4  889b              LDRH     r3,[r3,#4]  ; CSD_Tab
0006a6  f3c32207          UBFX     r2,r3,#8,#8
;;;805      cardinfo->SD_csd.PartBlockRead = (tmp & 0x80) >> 7;
0006aa  09d3              LSRS     r3,r2,#7
0006ac  724b              STRB     r3,[r1,#9]
;;;806      cardinfo->SD_csd.WrBlockMisalign = (tmp & 0x40) >> 6;
0006ae  f3c21380          UBFX     r3,r2,#6,#1
0006b2  728b              STRB     r3,[r1,#0xa]
;;;807      cardinfo->SD_csd.RdBlockMisalign = (tmp & 0x20) >> 5;
0006b4  f3c21340          UBFX     r3,r2,#5,#1
0006b8  72cb              STRB     r3,[r1,#0xb]
;;;808      cardinfo->SD_csd.DSRImpl = (tmp & 0x10) >> 4;
0006ba  f3c21300          UBFX     r3,r2,#4,#1
0006be  730b              STRB     r3,[r1,#0xc]
;;;809      cardinfo->SD_csd.Reserved2 = 0; /*!< Reserved */
0006c0  2300              MOVS     r3,#0
0006c2  734b              STRB     r3,[r1,#0xd]
;;;810    
;;;811      if ((CardType == SDIO_STD_CAPACITY_SD_CARD_V1_1) || (CardType == SDIO_STD_CAPACITY_SD_CARD_V2_0))
0006c4  4b6e              LDR      r3,|L1.2176|
0006c6  681b              LDR      r3,[r3,#0]  ; CardType
0006c8  b11b              CBZ      r3,|L1.1746|
0006ca  4b6d              LDR      r3,|L1.2176|
0006cc  681b              LDR      r3,[r3,#0]  ; CardType
0006ce  2b01              CMP      r3,#1
0006d0  d13c              BNE      |L1.1868|
                  |L1.1746|
;;;812      {
;;;813        cardinfo->SD_csd.DeviceSize = (tmp & 0x03) << 10;
0006d2  0793              LSLS     r3,r2,#30
0006d4  0d1b              LSRS     r3,r3,#20
0006d6  610b              STR      r3,[r1,#0x10]
;;;814    
;;;815        /*!< Byte 7 */
;;;816        tmp = (uint8_t)(CSD_Tab[1] & 0x000000FF);
0006d8  4b6b              LDR      r3,|L1.2184|
0006da  791a              LDRB     r2,[r3,#4]  ; CSD_Tab
;;;817        cardinfo->SD_csd.DeviceSize |= (tmp) << 2;
0006dc  690b              LDR      r3,[r1,#0x10]
0006de  ea430382          ORR      r3,r3,r2,LSL #2
0006e2  610b              STR      r3,[r1,#0x10]
;;;818    
;;;819        /*!< Byte 8 */
;;;820        tmp = (uint8_t)((CSD_Tab[2] & 0xFF000000) >> 24);
0006e4  4b68              LDR      r3,|L1.2184|
0006e6  689b              LDR      r3,[r3,#8]  ; CSD_Tab
0006e8  0e1a              LSRS     r2,r3,#24
;;;821        cardinfo->SD_csd.DeviceSize |= (tmp & 0xC0) >> 6;
0006ea  690b              LDR      r3,[r1,#0x10]
0006ec  ea431392          ORR      r3,r3,r2,LSR #6
0006f0  610b              STR      r3,[r1,#0x10]
;;;822    
;;;823        cardinfo->SD_csd.MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
0006f2  f3c203c2          UBFX     r3,r2,#3,#3
0006f6  750b              STRB     r3,[r1,#0x14]
;;;824        cardinfo->SD_csd.MaxRdCurrentVDDMax = (tmp & 0x07);
0006f8  f0020307          AND      r3,r2,#7
0006fc  754b              STRB     r3,[r1,#0x15]
;;;825    
;;;826        /*!< Byte 9 */
;;;827        tmp = (uint8_t)((CSD_Tab[2] & 0x00FF0000) >> 16);
0006fe  4b62              LDR      r3,|L1.2184|
000700  689b              LDR      r3,[r3,#8]  ; CSD_Tab
000702  f3c34207          UBFX     r2,r3,#16,#8
;;;828        cardinfo->SD_csd.MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
000706  0953              LSRS     r3,r2,#5
000708  758b              STRB     r3,[r1,#0x16]
;;;829        cardinfo->SD_csd.MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
00070a  f3c20382          UBFX     r3,r2,#2,#3
00070e  75cb              STRB     r3,[r1,#0x17]
;;;830        cardinfo->SD_csd.DeviceSizeMul = (tmp & 0x03) << 1;
000710  0793              LSLS     r3,r2,#30
000712  0f5b              LSRS     r3,r3,#29
000714  760b              STRB     r3,[r1,#0x18]
;;;831        /*!< Byte 10 */
;;;832        tmp = (uint8_t)((CSD_Tab[2] & 0x0000FF00) >> 8);
000716  4b5c              LDR      r3,|L1.2184|
000718  891b              LDRH     r3,[r3,#8]  ; CSD_Tab
00071a  f3c32207          UBFX     r2,r3,#8,#8
;;;833        cardinfo->SD_csd.DeviceSizeMul |= (tmp & 0x80) >> 7;
00071e  7e0b              LDRB     r3,[r1,#0x18]
000720  ea4313d2          ORR      r3,r3,r2,LSR #7
000724  760b              STRB     r3,[r1,#0x18]
;;;834        
;;;835        cardinfo->CardCapacity = (cardinfo->SD_csd.DeviceSize + 1) ;
000726  690b              LDR      r3,[r1,#0x10]
000728  1c5b              ADDS     r3,r3,#1
00072a  644b              STR      r3,[r1,#0x44]
;;;836        cardinfo->CardCapacity *= (1 << (cardinfo->SD_csd.DeviceSizeMul + 2));
00072c  7e0c              LDRB     r4,[r1,#0x18]
00072e  6c4b              LDR      r3,[r1,#0x44]
000730  1ca4              ADDS     r4,r4,#2
000732  2501              MOVS     r5,#1
000734  40a5              LSLS     r5,r5,r4
000736  436b              MULS     r3,r5,r3
000738  644b              STR      r3,[r1,#0x44]
;;;837        cardinfo->CardBlockSize = 1 << (cardinfo->SD_csd.RdBlockLen);
00073a  7a0c              LDRB     r4,[r1,#8]
00073c  2301              MOVS     r3,#1
00073e  40a3              LSLS     r3,r3,r4
000740  648b              STR      r3,[r1,#0x48]
;;;838        cardinfo->CardCapacity *= cardinfo->CardBlockSize;
000742  e9d13411          LDRD     r3,r4,[r1,#0x44]
000746  4363              MULS     r3,r4,r3
000748  644b              STR      r3,[r1,#0x44]
00074a  e021              B        |L1.1936|
                  |L1.1868|
;;;839      }
;;;840      else if (CardType == SDIO_HIGH_CAPACITY_SD_CARD)
00074c  4b4c              LDR      r3,|L1.2176|
00074e  681b              LDR      r3,[r3,#0]  ; CardType
000750  2b02              CMP      r3,#2
000752  d11d              BNE      |L1.1936|
;;;841      {
;;;842        /*!< Byte 7 */
;;;843        tmp = (uint8_t)(CSD_Tab[1] & 0x000000FF);
000754  4b4c              LDR      r3,|L1.2184|
000756  791a              LDRB     r2,[r3,#4]  ; CSD_Tab
;;;844        cardinfo->SD_csd.DeviceSize = (tmp & 0x3F) << 16;
000758  0693              LSLS     r3,r2,#26
00075a  0a9b              LSRS     r3,r3,#10
00075c  610b              STR      r3,[r1,#0x10]
;;;845    
;;;846        /*!< Byte 8 */
;;;847        tmp = (uint8_t)((CSD_Tab[2] & 0xFF000000) >> 24);
00075e  4b4a              LDR      r3,|L1.2184|
000760  689b              LDR      r3,[r3,#8]  ; CSD_Tab
000762  0e1a              LSRS     r2,r3,#24
;;;848    
;;;849        cardinfo->SD_csd.DeviceSize |= (tmp << 8);
000764  690b              LDR      r3,[r1,#0x10]
000766  ea432302          ORR      r3,r3,r2,LSL #8
00076a  610b              STR      r3,[r1,#0x10]
;;;850    
;;;851        /*!< Byte 9 */
;;;852        tmp = (uint8_t)((CSD_Tab[2] & 0x00FF0000) >> 16);
00076c  4b46              LDR      r3,|L1.2184|
00076e  689b              LDR      r3,[r3,#8]  ; CSD_Tab
000770  f3c34207          UBFX     r2,r3,#16,#8
;;;853    
;;;854        cardinfo->SD_csd.DeviceSize |= (tmp);
000774  690b              LDR      r3,[r1,#0x10]
000776  4313              ORRS     r3,r3,r2
000778  610b              STR      r3,[r1,#0x10]
;;;855    
;;;856        /*!< Byte 10 */
;;;857        tmp = (uint8_t)((CSD_Tab[2] & 0x0000FF00) >> 8);
00077a  4b43              LDR      r3,|L1.2184|
00077c  891b              LDRH     r3,[r3,#8]  ; CSD_Tab
00077e  f3c32207          UBFX     r2,r3,#8,#8
;;;858        
;;;859        cardinfo->CardCapacity = (cardinfo->SD_csd.DeviceSize + 1) * 512 * 1024;
000782  690b              LDR      r3,[r1,#0x10]
000784  1c5b              ADDS     r3,r3,#1
000786  04db              LSLS     r3,r3,#19
000788  644b              STR      r3,[r1,#0x44]
;;;860        cardinfo->CardBlockSize = 512;    
00078a  f44f7300          MOV      r3,#0x200
00078e  648b              STR      r3,[r1,#0x48]
                  |L1.1936|
;;;861      }
;;;862    
;;;863    
;;;864      cardinfo->SD_csd.EraseGrSize = (tmp & 0x40) >> 6;
000790  f3c21380          UBFX     r3,r2,#6,#1
000794  f8013f19          STRB     r3,[r1,#0x19]!
;;;865      cardinfo->SD_csd.EraseGrMul = (tmp & 0x3F) << 1;
000798  0693              LSLS     r3,r2,#26
00079a  0e5b              LSRS     r3,r3,#25
00079c  704b              STRB     r3,[r1,#1]
;;;866    
;;;867      /*!< Byte 11 */
;;;868      tmp = (uint8_t)(CSD_Tab[2] & 0x000000FF);
00079e  4b3a              LDR      r3,|L1.2184|
0007a0  7a1a              LDRB     r2,[r3,#8]  ; CSD_Tab
;;;869      cardinfo->SD_csd.EraseGrMul |= (tmp & 0x80) >> 7;
0007a2  784b              LDRB     r3,[r1,#1]
0007a4  ea4313d2          ORR      r3,r3,r2,LSR #7
0007a8  704b              STRB     r3,[r1,#1]
;;;870      cardinfo->SD_csd.WrProtectGrSize = (tmp & 0x7F);
0007aa  f002037f          AND      r3,r2,#0x7f
0007ae  708b              STRB     r3,[r1,#2]
;;;871    
;;;872      /*!< Byte 12 */
;;;873      tmp = (uint8_t)((CSD_Tab[3] & 0xFF000000) >> 24);
0007b0  4b35              LDR      r3,|L1.2184|
0007b2  68db              LDR      r3,[r3,#0xc]  ; CSD_Tab
0007b4  0e1a              LSRS     r2,r3,#24
;;;874      cardinfo->SD_csd.WrProtectGrEnable = (tmp & 0x80) >> 7;
0007b6  09d3              LSRS     r3,r2,#7
0007b8  70cb              STRB     r3,[r1,#3]
;;;875      cardinfo->SD_csd.ManDeflECC = (tmp & 0x60) >> 5;
0007ba  f3c21341          UBFX     r3,r2,#5,#2
0007be  710b              STRB     r3,[r1,#4]
;;;876      cardinfo->SD_csd.WrSpeedFact = (tmp & 0x1C) >> 2;
0007c0  f3c20382          UBFX     r3,r2,#2,#3
0007c4  714b              STRB     r3,[r1,#5]
;;;877      cardinfo->SD_csd.MaxWrBlockLen = (tmp & 0x03) << 2;
0007c6  0793              LSLS     r3,r2,#30
0007c8  0f1b              LSRS     r3,r3,#28
0007ca  718b              STRB     r3,[r1,#6]
;;;878    
;;;879      /*!< Byte 13 */
;;;880      tmp = (uint8_t)((CSD_Tab[3] & 0x00FF0000) >> 16);
0007cc  4b2e              LDR      r3,|L1.2184|
0007ce  68db              LDR      r3,[r3,#0xc]  ; CSD_Tab
0007d0  f3c34207          UBFX     r2,r3,#16,#8
;;;881      cardinfo->SD_csd.MaxWrBlockLen |= (tmp & 0xC0) >> 6;
0007d4  798b              LDRB     r3,[r1,#6]
0007d6  ea431392          ORR      r3,r3,r2,LSR #6
0007da  718b              STRB     r3,[r1,#6]
;;;882      cardinfo->SD_csd.WriteBlockPaPartial = (tmp & 0x20) >> 5;
0007dc  f3c21340          UBFX     r3,r2,#5,#1
0007e0  71cb              STRB     r3,[r1,#7]
;;;883      cardinfo->SD_csd.Reserved3 = 0;
0007e2  2300              MOVS     r3,#0
0007e4  720b              STRB     r3,[r1,#8]
;;;884      cardinfo->SD_csd.ContentProtectAppli = (tmp & 0x01);
0007e6  f0020301          AND      r3,r2,#1
0007ea  724b              STRB     r3,[r1,#9]
;;;885    
;;;886      /*!< Byte 14 */
;;;887      tmp = (uint8_t)((CSD_Tab[3] & 0x0000FF00) >> 8);
0007ec  4b26              LDR      r3,|L1.2184|
0007ee  899b              LDRH     r3,[r3,#0xc]  ; CSD_Tab
0007f0  f3c32207          UBFX     r2,r3,#8,#8
;;;888      cardinfo->SD_csd.FileFormatGrouop = (tmp & 0x80) >> 7;
0007f4  09d3              LSRS     r3,r2,#7
0007f6  728b              STRB     r3,[r1,#0xa]
;;;889      cardinfo->SD_csd.CopyFlag = (tmp & 0x40) >> 6;
0007f8  f3c21380          UBFX     r3,r2,#6,#1
0007fc  72cb              STRB     r3,[r1,#0xb]
;;;890      cardinfo->SD_csd.PermWrProtect = (tmp & 0x20) >> 5;
0007fe  f3c21340          UBFX     r3,r2,#5,#1
000802  730b              STRB     r3,[r1,#0xc]
;;;891      cardinfo->SD_csd.TempWrProtect = (tmp & 0x10) >> 4;
000804  f3c21300          UBFX     r3,r2,#4,#1
000808  734b              STRB     r3,[r1,#0xd]
;;;892      cardinfo->SD_csd.FileFormat = (tmp & 0x0C) >> 2;
00080a  f3c20381          UBFX     r3,r2,#2,#2
00080e  738b              STRB     r3,[r1,#0xe]
;;;893      cardinfo->SD_csd.ECC = (tmp & 0x03);
000810  f0020303          AND      r3,r2,#3
000814  73cb              STRB     r3,[r1,#0xf]
;;;894    
;;;895      /*!< Byte 15 */
;;;896      tmp = (uint8_t)(CSD_Tab[3] & 0x000000FF);
000816  4b1c              LDR      r3,|L1.2184|
000818  7b1a              LDRB     r2,[r3,#0xc]  ; CSD_Tab
;;;897      cardinfo->SD_csd.CSD_CRC = (tmp & 0xFE) >> 1;
00081a  0853              LSRS     r3,r2,#1
00081c  740b              STRB     r3,[r1,#0x10]
;;;898      cardinfo->SD_csd.Reserved4 = 1;
00081e  2301              MOVS     r3,#1
000820  744b              STRB     r3,[r1,#0x11]
;;;899    
;;;900    
;;;901      /*!< Byte 0 */
;;;902      tmp = (uint8_t)((CID_Tab[0] & 0xFF000000) >> 24);
000822  4b1a              LDR      r3,|L1.2188|
000824  681b              LDR      r3,[r3,#0]  ; CID_Tab
000826  0e1a              LSRS     r2,r3,#24
;;;903      cardinfo->SD_cid.ManufacturerID = tmp;
000828  74ca              STRB     r2,[r1,#0x13]
00082a  3919              SUBS     r1,r1,#0x19
;;;904    
;;;905      /*!< Byte 1 */
;;;906      tmp = (uint8_t)((CID_Tab[0] & 0x00FF0000) >> 16);
00082c  4b17              LDR      r3,|L1.2188|
00082e  681b              LDR      r3,[r3,#0]  ; CID_Tab
000830  f3c34207          UBFX     r2,r3,#16,#8
;;;907      cardinfo->SD_cid.OEM_AppliID = tmp << 8;
000834  0214              LSLS     r4,r2,#8
000836  85cc              STRH     r4,[r1,#0x2e]
;;;908    
;;;909      /*!< Byte 2 */
;;;910      tmp = (uint8_t)((CID_Tab[0] & 0x000000FF00) >> 8);
000838  4b14              LDR      r3,|L1.2188|
00083a  881b              LDRH     r3,[r3,#0]  ; CID_Tab
00083c  f3c32207          UBFX     r2,r3,#8,#8
;;;911      cardinfo->SD_cid.OEM_AppliID |= tmp;
000840  8dcb              LDRH     r3,[r1,#0x2e]
000842  4313              ORRS     r3,r3,r2
000844  85cb              STRH     r3,[r1,#0x2e]
;;;912    
;;;913      /*!< Byte 3 */
;;;914      tmp = (uint8_t)(CID_Tab[0] & 0x000000FF);
000846  4b11              LDR      r3,|L1.2188|
000848  781a              LDRB     r2,[r3,#0]  ; CID_Tab
;;;915      cardinfo->SD_cid.ProdName1 = tmp << 24;
00084a  0614              LSLS     r4,r2,#24
00084c  630c              STR      r4,[r1,#0x30]
;;;916    
;;;917      /*!< Byte 4 */
;;;918      tmp = (uint8_t)((CID_Tab[1] & 0xFF000000) >> 24);
00084e  685b              LDR      r3,[r3,#4]  ; CID_Tab
000850  0e1a              LSRS     r2,r3,#24
;;;919      cardinfo->SD_cid.ProdName1 |= tmp << 16;
000852  6b0b              LDR      r3,[r1,#0x30]
000854  ea434402          ORR      r4,r3,r2,LSL #16
000858  630c              STR      r4,[r1,#0x30]
;;;920    
;;;921      /*!< Byte 5 */
;;;922      tmp = (uint8_t)((CID_Tab[1] & 0x00FF0000) >> 16);
00085a  4b0c              LDR      r3,|L1.2188|
00085c  685b              LDR      r3,[r3,#4]  ; CID_Tab
00085e  f3c34207          UBFX     r2,r3,#16,#8
;;;923      cardinfo->SD_cid.ProdName1 |= tmp << 8;
000862  6b0b              LDR      r3,[r1,#0x30]
000864  ea432402          ORR      r4,r3,r2,LSL #8
000868  630c              STR      r4,[r1,#0x30]
;;;924    
;;;925      /*!< Byte 6 */
;;;926      tmp = (uint8_t)((CID_Tab[1] & 0x0000FF00) >> 8);
00086a  4b08              LDR      r3,|L1.2188|
00086c  889b              LDRH     r3,[r3,#4]  ; CID_Tab
00086e  f3c32207          UBFX     r2,r3,#8,#8
;;;927      cardinfo->SD_cid.ProdName1 |= tmp;
000872  6b0b              LDR      r3,[r1,#0x30]
000874  4313              ORRS     r3,r3,r2
000876  e00b              B        |L1.2192|
                  |L1.2168|
                          DCD      ||RCA||
                  |L1.2172|
                          DCD      SDIO_CmdInitStructure
                  |L1.2176|
                          DCD      CardType
                  |L1.2180|
                          DCD      SDIO_InitStructure
                  |L1.2184|
                          DCD      CSD_Tab
                  |L1.2188|
                          DCD      CID_Tab
                  |L1.2192|
000890  630b              STR      r3,[r1,#0x30]
;;;928    
;;;929      /*!< Byte 7 */
;;;930      tmp = (uint8_t)(CID_Tab[1] & 0x000000FF);
000892  4bfe              LDR      r3,|L1.3212|
000894  791a              LDRB     r2,[r3,#4]  ; CID_Tab
;;;931      cardinfo->SD_cid.ProdName2 = tmp;
000896  2334              MOVS     r3,#0x34
000898  545a              STRB     r2,[r3,r1]
;;;932    
;;;933      /*!< Byte 8 */
;;;934      tmp = (uint8_t)((CID_Tab[2] & 0xFF000000) >> 24);
00089a  4bfc              LDR      r3,|L1.3212|
00089c  689b              LDR      r3,[r3,#8]  ; CID_Tab
00089e  0e1a              LSRS     r2,r3,#24
;;;935      cardinfo->SD_cid.ProdRev = tmp;
0008a0  2335              MOVS     r3,#0x35
0008a2  545a              STRB     r2,[r3,r1]
;;;936    
;;;937      /*!< Byte 9 */
;;;938      tmp = (uint8_t)((CID_Tab[2] & 0x00FF0000) >> 16);
0008a4  4bf9              LDR      r3,|L1.3212|
0008a6  689b              LDR      r3,[r3,#8]  ; CID_Tab
0008a8  f3c34207          UBFX     r2,r3,#16,#8
;;;939      cardinfo->SD_cid.ProdSN = tmp << 24;
0008ac  0614              LSLS     r4,r2,#24
0008ae  638c              STR      r4,[r1,#0x38]
;;;940    
;;;941      /*!< Byte 10 */
;;;942      tmp = (uint8_t)((CID_Tab[2] & 0x0000FF00) >> 8);
0008b0  4bf6              LDR      r3,|L1.3212|
0008b2  891b              LDRH     r3,[r3,#8]  ; CID_Tab
0008b4  f3c32207          UBFX     r2,r3,#8,#8
;;;943      cardinfo->SD_cid.ProdSN |= tmp << 16;
0008b8  6b8b              LDR      r3,[r1,#0x38]
0008ba  ea434402          ORR      r4,r3,r2,LSL #16
0008be  638c              STR      r4,[r1,#0x38]
;;;944    
;;;945      /*!< Byte 11 */
;;;946      tmp = (uint8_t)(CID_Tab[2] & 0x000000FF);
0008c0  4bf2              LDR      r3,|L1.3212|
0008c2  7a1a              LDRB     r2,[r3,#8]  ; CID_Tab
;;;947      cardinfo->SD_cid.ProdSN |= tmp << 8;
0008c4  6b8b              LDR      r3,[r1,#0x38]
0008c6  ea432402          ORR      r4,r3,r2,LSL #8
0008ca  638c              STR      r4,[r1,#0x38]
;;;948    
;;;949      /*!< Byte 12 */
;;;950      tmp = (uint8_t)((CID_Tab[3] & 0xFF000000) >> 24);
0008cc  4bef              LDR      r3,|L1.3212|
0008ce  68db              LDR      r3,[r3,#0xc]  ; CID_Tab
0008d0  0e1a              LSRS     r2,r3,#24
;;;951      cardinfo->SD_cid.ProdSN |= tmp;
0008d2  6b8b              LDR      r3,[r1,#0x38]
0008d4  4313              ORRS     r3,r3,r2
0008d6  638b              STR      r3,[r1,#0x38]
;;;952    
;;;953      /*!< Byte 13 */
;;;954      tmp = (uint8_t)((CID_Tab[3] & 0x00FF0000) >> 16);
0008d8  4bec              LDR      r3,|L1.3212|
0008da  68db              LDR      r3,[r3,#0xc]  ; CID_Tab
0008dc  f3c34207          UBFX     r2,r3,#16,#8
;;;955      cardinfo->SD_cid.Reserved1 |= (tmp & 0xF0) >> 4;
0008e0  233c              MOVS     r3,#0x3c
0008e2  5c5b              LDRB     r3,[r3,r1]
0008e4  ea431412          ORR      r4,r3,r2,LSR #4
0008e8  233c              MOVS     r3,#0x3c
0008ea  545c              STRB     r4,[r3,r1]
;;;956      cardinfo->SD_cid.ManufactDate = (tmp & 0x0F) << 8;
0008ec  0713              LSLS     r3,r2,#28
0008ee  0d1c              LSRS     r4,r3,#20
0008f0  87cc              STRH     r4,[r1,#0x3e]
;;;957    
;;;958      /*!< Byte 14 */
;;;959      tmp = (uint8_t)((CID_Tab[3] & 0x0000FF00) >> 8);
0008f2  4be6              LDR      r3,|L1.3212|
0008f4  899b              LDRH     r3,[r3,#0xc]  ; CID_Tab
0008f6  f3c32207          UBFX     r2,r3,#8,#8
;;;960      cardinfo->SD_cid.ManufactDate |= tmp;
0008fa  8fcb              LDRH     r3,[r1,#0x3e]
0008fc  4313              ORRS     r3,r3,r2
0008fe  87cb              STRH     r3,[r1,#0x3e]
;;;961    
;;;962      /*!< Byte 15 */
;;;963      tmp = (uint8_t)(CID_Tab[3] & 0x000000FF);
000900  4be2              LDR      r3,|L1.3212|
000902  7b1a              LDRB     r2,[r3,#0xc]  ; CID_Tab
;;;964      cardinfo->SD_cid.CID_CRC = (tmp & 0xFE) >> 1;
000904  0854              LSRS     r4,r2,#1
000906  2340              MOVS     r3,#0x40
000908  545c              STRB     r4,[r3,r1]
;;;965      cardinfo->SD_cid.Reserved2 = 1;
00090a  2401              MOVS     r4,#1
00090c  2341              MOVS     r3,#0x41
00090e  545c              STRB     r4,[r3,r1]
;;;966      
;;;967      return(errorstatus);
;;;968    }
000910  bd30              POP      {r4,r5,pc}
;;;969    
                          ENDP

                  CmdResp2Error PROC
;;;2627     */
;;;2628   static SD_Error CmdResp2Error(void)
000912  b570              PUSH     {r4-r6,lr}
;;;2629   {
;;;2630     SD_Error errorstatus = SD_OK;
000914  252a              MOVS     r5,#0x2a
;;;2631     uint32_t status;
;;;2632   
;;;2633     status = SDIO->STA;
000916  48de              LDR      r0,|L1.3216|
000918  6b44              LDR      r4,[r0,#0x34]
;;;2634   
;;;2635     while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CTIMEOUT | SDIO_FLAG_CMDREND)))
00091a  e001              B        |L1.2336|
                  |L1.2332|
;;;2636     {
;;;2637       status = SDIO->STA;
00091c  48dc              LDR      r0,|L1.3216|
00091e  6b44              LDR      r4,[r0,#0x34]
                  |L1.2336|
000920  f0040045          AND      r0,r4,#0x45           ;2635
000924  2800              CMP      r0,#0                 ;2635
000926  d0f9              BEQ      |L1.2332|
;;;2638     }
;;;2639   
;;;2640     if (status & SDIO_FLAG_CTIMEOUT)
000928  f0040004          AND      r0,r4,#4
00092c  b128              CBZ      r0,|L1.2362|
;;;2641     {
;;;2642       errorstatus = SD_CMD_RSP_TIMEOUT;
00092e  2503              MOVS     r5,#3
;;;2643       SDIO_ClearFlag(SDIO_FLAG_CTIMEOUT);
000930  2004              MOVS     r0,#4
000932  f7fffffe          BL       SDIO_ClearFlag
;;;2644       return(errorstatus);
000936  4628              MOV      r0,r5
                  |L1.2360|
;;;2645     }
;;;2646     else if (status & SDIO_FLAG_CCRCFAIL)
;;;2647     {
;;;2648       errorstatus = SD_CMD_CRC_FAIL;
;;;2649       SDIO_ClearFlag(SDIO_FLAG_CCRCFAIL);
;;;2650       return(errorstatus);
;;;2651     }
;;;2652   
;;;2653     /*!< Clear all the static flags */
;;;2654     SDIO_ClearFlag(SDIO_STATIC_FLAGS);
;;;2655   
;;;2656     return(errorstatus);
;;;2657   }
000938  bd70              POP      {r4-r6,pc}
                  |L1.2362|
00093a  f0040001          AND      r0,r4,#1              ;2646
00093e  b128              CBZ      r0,|L1.2380|
000940  2501              MOVS     r5,#1                 ;2648
000942  2001              MOVS     r0,#1                 ;2649
000944  f7fffffe          BL       SDIO_ClearFlag
000948  4628              MOV      r0,r5                 ;2650
00094a  e7f5              B        |L1.2360|
                  |L1.2380|
00094c  f24050ff          MOV      r0,#0x5ff             ;2654
000950  f7fffffe          BL       SDIO_ClearFlag
000954  4628              MOV      r0,r5                 ;2656
000956  e7ef              B        |L1.2360|
;;;2658   
                          ENDP

                  CmdResp6Error PROC
;;;2665     */
;;;2666   static SD_Error CmdResp6Error(uint8_t cmd, uint16_t *prca)
000958  e92d41f0          PUSH     {r4-r8,lr}
;;;2667   {
00095c  4606              MOV      r6,r0
00095e  460f              MOV      r7,r1
;;;2668     SD_Error errorstatus = SD_OK;
000960  f04f082a          MOV      r8,#0x2a
;;;2669     uint32_t status;
;;;2670     uint32_t response_r1;
;;;2671   
;;;2672     status = SDIO->STA;
000964  48ca              LDR      r0,|L1.3216|
000966  6b45              LDR      r5,[r0,#0x34]
;;;2673   
;;;2674     while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CTIMEOUT | SDIO_FLAG_CMDREND)))
000968  e001              B        |L1.2414|
                  |L1.2410|
;;;2675     {
;;;2676       status = SDIO->STA;
00096a  48c9              LDR      r0,|L1.3216|
00096c  6b45              LDR      r5,[r0,#0x34]
                  |L1.2414|
00096e  f0050045          AND      r0,r5,#0x45           ;2674
000972  2800              CMP      r0,#0                 ;2674
000974  d0f9              BEQ      |L1.2410|
;;;2677     }
;;;2678   
;;;2679     if (status & SDIO_FLAG_CTIMEOUT)
000976  f0050004          AND      r0,r5,#4
00097a  b138              CBZ      r0,|L1.2444|
;;;2680     {
;;;2681       errorstatus = SD_CMD_RSP_TIMEOUT;
00097c  f04f0803          MOV      r8,#3
;;;2682       SDIO_ClearFlag(SDIO_FLAG_CTIMEOUT);
000980  2004              MOVS     r0,#4
000982  f7fffffe          BL       SDIO_ClearFlag
;;;2683       return(errorstatus);
000986  4640              MOV      r0,r8
                  |L1.2440|
;;;2684     }
;;;2685     else if (status & SDIO_FLAG_CCRCFAIL)
;;;2686     {
;;;2687       errorstatus = SD_CMD_CRC_FAIL;
;;;2688       SDIO_ClearFlag(SDIO_FLAG_CCRCFAIL);
;;;2689       return(errorstatus);
;;;2690     }
;;;2691   
;;;2692     /*!< Check response received is of desired command */
;;;2693     if (SDIO_GetCommandResponse() != cmd)
;;;2694     {
;;;2695       errorstatus = SD_ILLEGAL_CMD;
;;;2696       return(errorstatus);
;;;2697     }
;;;2698   
;;;2699     /*!< Clear all the static flags */
;;;2700     SDIO_ClearFlag(SDIO_STATIC_FLAGS);
;;;2701   
;;;2702     /*!< We have received response, retrieve it.  */
;;;2703     response_r1 = SDIO_GetResponse(SDIO_RESP1);
;;;2704   
;;;2705     if (SD_ALLZERO == (response_r1 & (SD_R6_GENERAL_UNKNOWN_ERROR | SD_R6_ILLEGAL_CMD | SD_R6_COM_CRC_FAILED)))
;;;2706     {
;;;2707       *prca = (uint16_t) (response_r1 >> 16);
;;;2708       return(errorstatus);
;;;2709     }
;;;2710   
;;;2711     if (response_r1 & SD_R6_GENERAL_UNKNOWN_ERROR)
;;;2712     {
;;;2713       return(SD_GENERAL_UNKNOWN_ERROR);
;;;2714     }
;;;2715   
;;;2716     if (response_r1 & SD_R6_ILLEGAL_CMD)
;;;2717     {
;;;2718       return(SD_ILLEGAL_CMD);
;;;2719     }
;;;2720   
;;;2721     if (response_r1 & SD_R6_COM_CRC_FAILED)
;;;2722     {
;;;2723       return(SD_COM_CRC_FAILED);
;;;2724     }
;;;2725   
;;;2726     return(errorstatus);
;;;2727   }
000988  e8bd81f0          POP      {r4-r8,pc}
                  |L1.2444|
00098c  f0050001          AND      r0,r5,#1              ;2685
000990  b130              CBZ      r0,|L1.2464|
000992  f04f0801          MOV      r8,#1                 ;2687
000996  2001              MOVS     r0,#1                 ;2688
000998  f7fffffe          BL       SDIO_ClearFlag
00099c  4640              MOV      r0,r8                 ;2689
00099e  e7f3              B        |L1.2440|
                  |L1.2464|
0009a0  f7fffffe          BL       SDIO_GetCommandResponse
0009a4  42b0              CMP      r0,r6                 ;2693
0009a6  d003              BEQ      |L1.2480|
0009a8  f04f0810          MOV      r8,#0x10              ;2695
0009ac  4640              MOV      r0,r8                 ;2696
0009ae  e7eb              B        |L1.2440|
                  |L1.2480|
0009b0  f24050ff          MOV      r0,#0x5ff             ;2700
0009b4  f7fffffe          BL       SDIO_ClearFlag
0009b8  2000              MOVS     r0,#0                 ;2703
0009ba  f7fffffe          BL       SDIO_GetResponse
0009be  4604              MOV      r4,r0                 ;2703
0009c0  f4044060          AND      r0,r4,#0xe000         ;2705
0009c4  b918              CBNZ     r0,|L1.2510|
0009c6  0c20              LSRS     r0,r4,#16             ;2707
0009c8  8038              STRH     r0,[r7,#0]            ;2707
0009ca  4640              MOV      r0,r8                 ;2708
0009cc  e7dc              B        |L1.2440|
                  |L1.2510|
0009ce  f4045000          AND      r0,r4,#0x2000         ;2711
0009d2  b108              CBZ      r0,|L1.2520|
0009d4  2013              MOVS     r0,#0x13              ;2713
0009d6  e7d7              B        |L1.2440|
                  |L1.2520|
0009d8  f4044080          AND      r0,r4,#0x4000         ;2716
0009dc  b108              CBZ      r0,|L1.2530|
0009de  2010              MOVS     r0,#0x10              ;2718
0009e0  e7d2              B        |L1.2440|
                  |L1.2530|
0009e2  f4044000          AND      r0,r4,#0x8000         ;2721
0009e6  b108              CBZ      r0,|L1.2540|
0009e8  200f              MOVS     r0,#0xf               ;2723
0009ea  e7cd              B        |L1.2440|
                  |L1.2540|
0009ec  4640              MOV      r0,r8                 ;2726
0009ee  e7cb              B        |L1.2440|
;;;2728   
                          ENDP

                  SD_InitializeCards PROC
;;;678      */
;;;679    SD_Error SD_InitializeCards(void)
0009f0  b538              PUSH     {r3-r5,lr}
;;;680    {
;;;681      SD_Error errorstatus = SD_OK;
0009f2  242a              MOVS     r4,#0x2a
;;;682      uint16_t rca = 0x01;
0009f4  2001              MOVS     r0,#1
0009f6  9000              STR      r0,[sp,#0]
;;;683    
;;;684      if (SDIO_GetPowerState() == SDIO_PowerState_OFF)
0009f8  f7fffffe          BL       SDIO_GetPowerState
0009fc  b910              CBNZ     r0,|L1.2564|
;;;685      {
;;;686        errorstatus = SD_REQUEST_NOT_APPLICABLE;
0009fe  2425              MOVS     r4,#0x25
;;;687        return(errorstatus);
000a00  4620              MOV      r0,r4
                  |L1.2562|
;;;688      }
;;;689    
;;;690      if (SDIO_SECURE_DIGITAL_IO_CARD != CardType)
;;;691      {
;;;692        /*!< Send CMD2 ALL_SEND_CID */
;;;693        SDIO_CmdInitStructure.SDIO_Argument = 0x0;
;;;694        SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_ALL_SEND_CID;
;;;695        SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Long;
;;;696        SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;697        SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;698        SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;699    
;;;700        errorstatus = CmdResp2Error();
;;;701    
;;;702        if (SD_OK != errorstatus)
;;;703        {
;;;704          return(errorstatus);
;;;705        }
;;;706    
;;;707        CID_Tab[0] = SDIO_GetResponse(SDIO_RESP1);
;;;708        CID_Tab[1] = SDIO_GetResponse(SDIO_RESP2);
;;;709        CID_Tab[2] = SDIO_GetResponse(SDIO_RESP3);
;;;710        CID_Tab[3] = SDIO_GetResponse(SDIO_RESP4);
;;;711      }
;;;712      if ((SDIO_STD_CAPACITY_SD_CARD_V1_1 == CardType) ||  (SDIO_STD_CAPACITY_SD_CARD_V2_0 == CardType) ||  (SDIO_SECURE_DIGITAL_IO_COMBO_CARD == CardType)
;;;713          ||  (SDIO_HIGH_CAPACITY_SD_CARD == CardType))
;;;714      {
;;;715        /*!< Send CMD3 SET_REL_ADDR with argument 0 */
;;;716        /*!< SD Card publishes its RCA. */
;;;717        SDIO_CmdInitStructure.SDIO_Argument = 0x00;
;;;718        SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_REL_ADDR;
;;;719        SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;720        SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;721        SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;722        SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;723    
;;;724        errorstatus = CmdResp6Error(SD_CMD_SET_REL_ADDR, &rca);
;;;725    
;;;726        if (SD_OK != errorstatus)
;;;727        {
;;;728          return(errorstatus);
;;;729        }
;;;730      }
;;;731    
;;;732      if (SDIO_SECURE_DIGITAL_IO_CARD != CardType)
;;;733      {
;;;734        RCA = rca;
;;;735    
;;;736        /*!< Send CMD9 SEND_CSD with argument as card's RCA */
;;;737        SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)(rca << 16);
;;;738        SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SEND_CSD;
;;;739        SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Long;
;;;740        SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;741        SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;742        SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;743    
;;;744        errorstatus = CmdResp2Error();
;;;745    
;;;746        if (SD_OK != errorstatus)
;;;747        {
;;;748          return(errorstatus);
;;;749        }
;;;750    
;;;751        CSD_Tab[0] = SDIO_GetResponse(SDIO_RESP1);
;;;752        CSD_Tab[1] = SDIO_GetResponse(SDIO_RESP2);
;;;753        CSD_Tab[2] = SDIO_GetResponse(SDIO_RESP3);
;;;754        CSD_Tab[3] = SDIO_GetResponse(SDIO_RESP4);
;;;755      }
;;;756    
;;;757      errorstatus = SD_OK; /*!< All cards get intialized */
;;;758    
;;;759      return(errorstatus);
;;;760    }
000a02  bd38              POP      {r3-r5,pc}
                  |L1.2564|
000a04  48a3              LDR      r0,|L1.3220|
000a06  6800              LDR      r0,[r0,#0]            ;690  ; CardType
000a08  2804              CMP      r0,#4                 ;690
000a0a  d029              BEQ      |L1.2656|
000a0c  2000              MOVS     r0,#0                 ;693
000a0e  49a2              LDR      r1,|L1.3224|
000a10  6008              STR      r0,[r1,#0]            ;693  ; SDIO_CmdInitStructure
000a12  2002              MOVS     r0,#2                 ;694
000a14  6048              STR      r0,[r1,#4]            ;694  ; SDIO_CmdInitStructure
000a16  20c0              MOVS     r0,#0xc0              ;695
000a18  6088              STR      r0,[r1,#8]            ;695  ; SDIO_CmdInitStructure
000a1a  2000              MOVS     r0,#0                 ;696
000a1c  60c8              STR      r0,[r1,#0xc]          ;696  ; SDIO_CmdInitStructure
000a1e  f44f6080          MOV      r0,#0x400             ;697
000a22  6108              STR      r0,[r1,#0x10]         ;697  ; SDIO_CmdInitStructure
000a24  4608              MOV      r0,r1                 ;698
000a26  f7fffffe          BL       SDIO_SendCommand
000a2a  f7fffffe          BL       CmdResp2Error
000a2e  4604              MOV      r4,r0                 ;700
000a30  2c2a              CMP      r4,#0x2a              ;702
000a32  d001              BEQ      |L1.2616|
000a34  4620              MOV      r0,r4                 ;704
000a36  e7e4              B        |L1.2562|
                  |L1.2616|
000a38  2000              MOVS     r0,#0                 ;707
000a3a  f7fffffe          BL       SDIO_GetResponse
000a3e  4993              LDR      r1,|L1.3212|
000a40  6008              STR      r0,[r1,#0]            ;707  ; CID_Tab
000a42  2004              MOVS     r0,#4                 ;708
000a44  f7fffffe          BL       SDIO_GetResponse
000a48  4990              LDR      r1,|L1.3212|
000a4a  6048              STR      r0,[r1,#4]            ;708  ; CID_Tab
000a4c  2008              MOVS     r0,#8                 ;709
000a4e  f7fffffe          BL       SDIO_GetResponse
000a52  498e              LDR      r1,|L1.3212|
000a54  6088              STR      r0,[r1,#8]            ;709  ; CID_Tab
000a56  200c              MOVS     r0,#0xc               ;710
000a58  f7fffffe          BL       SDIO_GetResponse
000a5c  498b              LDR      r1,|L1.3212|
000a5e  60c8              STR      r0,[r1,#0xc]          ;710  ; CID_Tab
                  |L1.2656|
000a60  488c              LDR      r0,|L1.3220|
000a62  6800              LDR      r0,[r0,#0]            ;712  ; CardType
000a64  b158              CBZ      r0,|L1.2686|
000a66  488b              LDR      r0,|L1.3220|
000a68  6800              LDR      r0,[r0,#0]            ;712  ; CardType
000a6a  2801              CMP      r0,#1                 ;712
000a6c  d007              BEQ      |L1.2686|
000a6e  4889              LDR      r0,|L1.3220|
000a70  6800              LDR      r0,[r0,#0]            ;712  ; CardType
000a72  2806              CMP      r0,#6                 ;712
000a74  d003              BEQ      |L1.2686|
000a76  4887              LDR      r0,|L1.3220|
000a78  6800              LDR      r0,[r0,#0]            ;713  ; CardType
000a7a  2802              CMP      r0,#2                 ;713
000a7c  d117              BNE      |L1.2734|
                  |L1.2686|
000a7e  2000              MOVS     r0,#0                 ;717
000a80  4985              LDR      r1,|L1.3224|
000a82  6008              STR      r0,[r1,#0]            ;717  ; SDIO_CmdInitStructure
000a84  2003              MOVS     r0,#3                 ;718
000a86  6048              STR      r0,[r1,#4]            ;718  ; SDIO_CmdInitStructure
000a88  2040              MOVS     r0,#0x40              ;719
000a8a  6088              STR      r0,[r1,#8]            ;719  ; SDIO_CmdInitStructure
000a8c  2000              MOVS     r0,#0                 ;720
000a8e  60c8              STR      r0,[r1,#0xc]          ;720  ; SDIO_CmdInitStructure
000a90  f44f6080          MOV      r0,#0x400             ;721
000a94  6108              STR      r0,[r1,#0x10]         ;721  ; SDIO_CmdInitStructure
000a96  4608              MOV      r0,r1                 ;722
000a98  f7fffffe          BL       SDIO_SendCommand
000a9c  4669              MOV      r1,sp                 ;724
000a9e  2003              MOVS     r0,#3                 ;724
000aa0  f7fffffe          BL       CmdResp6Error
000aa4  4604              MOV      r4,r0                 ;724
000aa6  2c2a              CMP      r4,#0x2a              ;726
000aa8  d001              BEQ      |L1.2734|
000aaa  4620              MOV      r0,r4                 ;728
000aac  e7a9              B        |L1.2562|
                  |L1.2734|
000aae  4879              LDR      r0,|L1.3220|
000ab0  6800              LDR      r0,[r0,#0]            ;732  ; CardType
000ab2  2804              CMP      r0,#4                 ;732
000ab4  d02f              BEQ      |L1.2838|
000ab6  f8bd0000          LDRH     r0,[sp,#0]            ;734
000aba  4978              LDR      r1,|L1.3228|
000abc  6008              STR      r0,[r1,#0]            ;734  ; RCA
000abe  f8bd0000          LDRH     r0,[sp,#0]            ;737
000ac2  0400              LSLS     r0,r0,#16             ;737
000ac4  4974              LDR      r1,|L1.3224|
000ac6  6008              STR      r0,[r1,#0]            ;737  ; SDIO_CmdInitStructure
000ac8  2009              MOVS     r0,#9                 ;738
000aca  6048              STR      r0,[r1,#4]            ;738  ; SDIO_CmdInitStructure
000acc  20c0              MOVS     r0,#0xc0              ;739
000ace  6088              STR      r0,[r1,#8]            ;739  ; SDIO_CmdInitStructure
000ad0  2000              MOVS     r0,#0                 ;740
000ad2  60c8              STR      r0,[r1,#0xc]          ;740  ; SDIO_CmdInitStructure
000ad4  f44f6080          MOV      r0,#0x400             ;741
000ad8  6108              STR      r0,[r1,#0x10]         ;741  ; SDIO_CmdInitStructure
000ada  4608              MOV      r0,r1                 ;742
000adc  f7fffffe          BL       SDIO_SendCommand
000ae0  f7fffffe          BL       CmdResp2Error
000ae4  4604              MOV      r4,r0                 ;744
000ae6  2c2a              CMP      r4,#0x2a              ;746
000ae8  d001              BEQ      |L1.2798|
000aea  4620              MOV      r0,r4                 ;748
000aec  e789              B        |L1.2562|
                  |L1.2798|
000aee  2000              MOVS     r0,#0                 ;751
000af0  f7fffffe          BL       SDIO_GetResponse
000af4  496a              LDR      r1,|L1.3232|
000af6  6008              STR      r0,[r1,#0]            ;751  ; CSD_Tab
000af8  2004              MOVS     r0,#4                 ;752
000afa  f7fffffe          BL       SDIO_GetResponse
000afe  4968              LDR      r1,|L1.3232|
000b00  6048              STR      r0,[r1,#4]            ;752  ; CSD_Tab
000b02  2008              MOVS     r0,#8                 ;753
000b04  f7fffffe          BL       SDIO_GetResponse
000b08  4965              LDR      r1,|L1.3232|
000b0a  6088              STR      r0,[r1,#8]            ;753  ; CSD_Tab
000b0c  200c              MOVS     r0,#0xc               ;754
000b0e  f7fffffe          BL       SDIO_GetResponse
000b12  4963              LDR      r1,|L1.3232|
000b14  60c8              STR      r0,[r1,#0xc]          ;754  ; CSD_Tab
                  |L1.2838|
000b16  242a              MOVS     r4,#0x2a              ;757
000b18  4620              MOV      r0,r4                 ;759
000b1a  e772              B        |L1.2562|
;;;761    
                          ENDP

                  CmdResp3Error PROC
;;;2599     */
;;;2600   static SD_Error CmdResp3Error(void)
000b1c  b570              PUSH     {r4-r6,lr}
;;;2601   {
;;;2602     SD_Error errorstatus = SD_OK;
000b1e  252a              MOVS     r5,#0x2a
;;;2603     uint32_t status;
;;;2604   
;;;2605     status = SDIO->STA;
000b20  485b              LDR      r0,|L1.3216|
000b22  6b44              LDR      r4,[r0,#0x34]
;;;2606   
;;;2607     while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)))
000b24  e001              B        |L1.2858|
                  |L1.2854|
;;;2608     {
;;;2609       status = SDIO->STA;
000b26  485a              LDR      r0,|L1.3216|
000b28  6b44              LDR      r4,[r0,#0x34]
                  |L1.2858|
000b2a  f0040045          AND      r0,r4,#0x45           ;2607
000b2e  2800              CMP      r0,#0                 ;2607
000b30  d0f9              BEQ      |L1.2854|
;;;2610     }
;;;2611   
;;;2612     if (status & SDIO_FLAG_CTIMEOUT)
000b32  f0040004          AND      r0,r4,#4
000b36  b128              CBZ      r0,|L1.2884|
;;;2613     {
;;;2614       errorstatus = SD_CMD_RSP_TIMEOUT;
000b38  2503              MOVS     r5,#3
;;;2615       SDIO_ClearFlag(SDIO_FLAG_CTIMEOUT);
000b3a  2004              MOVS     r0,#4
000b3c  f7fffffe          BL       SDIO_ClearFlag
;;;2616       return(errorstatus);
000b40  4628              MOV      r0,r5
                  |L1.2882|
;;;2617     }
;;;2618     /*!< Clear all the static flags */
;;;2619     SDIO_ClearFlag(SDIO_STATIC_FLAGS);
;;;2620     return(errorstatus);
;;;2621   }
000b42  bd70              POP      {r4-r6,pc}
                  |L1.2884|
000b44  f24050ff          MOV      r0,#0x5ff             ;2619
000b48  f7fffffe          BL       SDIO_ClearFlag
000b4c  4628              MOV      r0,r5                 ;2620
000b4e  e7f8              B        |L1.2882|
;;;2622   
                          ENDP

                  CmdResp7Error PROC
;;;2416     */
;;;2417   static SD_Error CmdResp7Error(void)
000b50  b570              PUSH     {r4-r6,lr}
;;;2418   {
;;;2419     SD_Error errorstatus = SD_OK;
000b52  262a              MOVS     r6,#0x2a
;;;2420     uint32_t status;
;;;2421     uint32_t timeout = SDIO_CMD0TIMEOUT;
000b54  f44f3580          MOV      r5,#0x10000
;;;2422   
;;;2423     status = SDIO->STA;
000b58  484d              LDR      r0,|L1.3216|
000b5a  6b44              LDR      r4,[r0,#0x34]
;;;2424   
;;;2425     while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) && (timeout > 0))
000b5c  e002              B        |L1.2916|
                  |L1.2910|
;;;2426     {
;;;2427       timeout--;
000b5e  1e6d              SUBS     r5,r5,#1
;;;2428       status = SDIO->STA;
000b60  484b              LDR      r0,|L1.3216|
000b62  6b44              LDR      r4,[r0,#0x34]
                  |L1.2916|
000b64  f0040045          AND      r0,r4,#0x45           ;2425
000b68  b908              CBNZ     r0,|L1.2926|
000b6a  2d00              CMP      r5,#0                 ;2425
000b6c  d1f7              BNE      |L1.2910|
                  |L1.2926|
;;;2429     }
;;;2430   
;;;2431     if ((timeout == 0) || (status & SDIO_FLAG_CTIMEOUT))
000b6e  b115              CBZ      r5,|L1.2934|
000b70  f0040004          AND      r0,r4,#4
000b74  b128              CBZ      r0,|L1.2946|
                  |L1.2934|
;;;2432     {
;;;2433       /*!< Card is not V2.0 complient or card does not support the set voltage range */
;;;2434       errorstatus = SD_CMD_RSP_TIMEOUT;
000b76  2603              MOVS     r6,#3
;;;2435       SDIO_ClearFlag(SDIO_FLAG_CTIMEOUT);
000b78  2004              MOVS     r0,#4
000b7a  f7fffffe          BL       SDIO_ClearFlag
;;;2436       return(errorstatus);
000b7e  4630              MOV      r0,r6
                  |L1.2944|
;;;2437     }
;;;2438   
;;;2439     if (status & SDIO_FLAG_CMDREND)
;;;2440     {
;;;2441       /*!< Card is SD V2.0 compliant */
;;;2442       errorstatus = SD_OK;
;;;2443       SDIO_ClearFlag(SDIO_FLAG_CMDREND);
;;;2444       return(errorstatus);
;;;2445     }
;;;2446     return(errorstatus);
;;;2447   }
000b80  bd70              POP      {r4-r6,pc}
                  |L1.2946|
000b82  f0040040          AND      r0,r4,#0x40           ;2439
000b86  b128              CBZ      r0,|L1.2964|
000b88  262a              MOVS     r6,#0x2a              ;2442
000b8a  2040              MOVS     r0,#0x40              ;2443
000b8c  f7fffffe          BL       SDIO_ClearFlag
000b90  4630              MOV      r0,r6                 ;2444
000b92  e7f5              B        |L1.2944|
                  |L1.2964|
000b94  4630              MOV      r0,r6                 ;2446
000b96  e7f3              B        |L1.2944|
;;;2448   
                          ENDP

                  CmdError PROC
;;;2387     */
;;;2388   static SD_Error CmdError(void)
000b98  b570              PUSH     {r4-r6,lr}
;;;2389   {
;;;2390     SD_Error errorstatus = SD_OK;
000b9a  252a              MOVS     r5,#0x2a
;;;2391     uint32_t timeout;
;;;2392   
;;;2393     timeout = SDIO_CMD0TIMEOUT; /*!< 10000 */
000b9c  f44f3480          MOV      r4,#0x10000
;;;2394   
;;;2395     while ((timeout > 0) && (SDIO_GetFlagStatus(SDIO_FLAG_CMDSENT) == RESET))
000ba0  e000              B        |L1.2980|
                  |L1.2978|
;;;2396     {
;;;2397       timeout--;
000ba2  1e64              SUBS     r4,r4,#1
                  |L1.2980|
000ba4  b124              CBZ      r4,|L1.2992|
000ba6  2080              MOVS     r0,#0x80              ;2395
000ba8  f7fffffe          BL       SDIO_GetFlagStatus
000bac  2800              CMP      r0,#0                 ;2395
000bae  d0f8              BEQ      |L1.2978|
                  |L1.2992|
;;;2398     }
;;;2399   
;;;2400     if (timeout == 0)
000bb0  b914              CBNZ     r4,|L1.3000|
;;;2401     {
;;;2402       errorstatus = SD_CMD_RSP_TIMEOUT;
000bb2  2503              MOVS     r5,#3
;;;2403       return(errorstatus);
000bb4  4628              MOV      r0,r5
                  |L1.2998|
;;;2404     }
;;;2405   
;;;2406     /*!< Clear all the static flags */
;;;2407     SDIO_ClearFlag(SDIO_STATIC_FLAGS);
;;;2408   
;;;2409     return(errorstatus);
;;;2410   }
000bb6  bd70              POP      {r4-r6,pc}
                  |L1.3000|
000bb8  f24050ff          MOV      r0,#0x5ff             ;2407
000bbc  f7fffffe          BL       SDIO_ClearFlag
000bc0  4628              MOV      r0,r5                 ;2409
000bc2  e7f8              B        |L1.2998|
;;;2411   
                          ENDP

                  SD_PowerON PROC
;;;519      */
;;;520    SD_Error SD_PowerON(void)
000bc4  e92d41f0          PUSH     {r4-r8,lr}
;;;521    {
;;;522      SD_Error errorstatus = SD_OK;
000bc8  242a              MOVS     r4,#0x2a
;;;523      uint32_t response = 0, count = 0, validvoltage = 0;
000bca  2600              MOVS     r6,#0
000bcc  2500              MOVS     r5,#0
000bce  2700              MOVS     r7,#0
;;;524      uint32_t SDType = SD_STD_CAPACITY;
000bd0  f04f0800          MOV      r8,#0
;;;525    
;;;526      /*!< Power ON Sequence -----------------------------------------------------*/
;;;527      /*!< Configure the SDIO peripheral */
;;;528      /*!< SDIOCLK = HCLK, SDIO_CK = HCLK/(2 + SDIO_INIT_CLK_DIV) */
;;;529      /*!< SDIO_CK for initialization should not exceed 400 KHz */  
;;;530      SDIO_InitStructure.SDIO_ClockDiv = SDIO_INIT_CLK_DIV;
000bd4  20b2              MOVS     r0,#0xb2
000bd6  4933              LDR      r1,|L1.3236|
000bd8  7508              STRB     r0,[r1,#0x14]
;;;531      SDIO_InitStructure.SDIO_ClockEdge = SDIO_ClockEdge_Rising;
000bda  2000              MOVS     r0,#0
000bdc  6008              STR      r0,[r1,#0]  ; SDIO_InitStructure
;;;532      SDIO_InitStructure.SDIO_ClockBypass = SDIO_ClockBypass_Disable;
000bde  6048              STR      r0,[r1,#4]  ; SDIO_InitStructure
;;;533      SDIO_InitStructure.SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
000be0  6088              STR      r0,[r1,#8]  ; SDIO_InitStructure
;;;534      SDIO_InitStructure.SDIO_BusWide = SDIO_BusWide_1b;
000be2  60c8              STR      r0,[r1,#0xc]  ; SDIO_InitStructure
;;;535      SDIO_InitStructure.SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
000be4  6108              STR      r0,[r1,#0x10]  ; SDIO_InitStructure
;;;536      SDIO_Init(&SDIO_InitStructure);
000be6  4608              MOV      r0,r1
000be8  f7fffffe          BL       SDIO_Init
;;;537    
;;;538      /*!< Set Power State to ON */
;;;539      SDIO_SetPowerState(SDIO_PowerState_ON);
000bec  2003              MOVS     r0,#3
000bee  f7fffffe          BL       SDIO_SetPowerState
;;;540    
;;;541      /*!< Enable SDIO Clock */
;;;542      SDIO_ClockCmd(ENABLE);
000bf2  2001              MOVS     r0,#1
000bf4  f7fffffe          BL       SDIO_ClockCmd
;;;543    
;;;544      /*!< CMD0: GO_IDLE_STATE ---------------------------------------------------*/
;;;545      /*!< No CMD response required */
;;;546      SDIO_CmdInitStructure.SDIO_Argument = 0x0;
000bf8  2000              MOVS     r0,#0
000bfa  4927              LDR      r1,|L1.3224|
000bfc  6008              STR      r0,[r1,#0]  ; SDIO_CmdInitStructure
;;;547      SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_GO_IDLE_STATE;
000bfe  6048              STR      r0,[r1,#4]  ; SDIO_CmdInitStructure
;;;548      SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_No;
000c00  6088              STR      r0,[r1,#8]  ; SDIO_CmdInitStructure
;;;549      SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
000c02  60c8              STR      r0,[r1,#0xc]  ; SDIO_CmdInitStructure
;;;550      SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
000c04  f44f6080          MOV      r0,#0x400
000c08  6108              STR      r0,[r1,#0x10]  ; SDIO_CmdInitStructure
;;;551      SDIO_SendCommand(&SDIO_CmdInitStructure);
000c0a  4608              MOV      r0,r1
000c0c  f7fffffe          BL       SDIO_SendCommand
;;;552    
;;;553      errorstatus = CmdError();
000c10  f7fffffe          BL       CmdError
000c14  4604              MOV      r4,r0
;;;554    
;;;555      if (errorstatus != SD_OK)
000c16  2c2a              CMP      r4,#0x2a
000c18  d002              BEQ      |L1.3104|
;;;556      {
;;;557        /*!< CMD Response TimeOut (wait for CMDSENT flag) */
;;;558        return(errorstatus);
000c1a  4620              MOV      r0,r4
                  |L1.3100|
;;;559      }
;;;560    
;;;561      /*!< CMD8: SEND_IF_COND ----------------------------------------------------*/
;;;562      /*!< Send CMD8 to verify SD card interface operating condition */
;;;563      /*!< Argument: - [31:12]: Reserved (shall be set to '0')
;;;564                   - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
;;;565                   - [7:0]: Check Pattern (recommended 0xAA) */
;;;566      /*!< CMD Response: R7 */
;;;567      SDIO_CmdInitStructure.SDIO_Argument = SD_CHECK_PATTERN;
;;;568      SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SEND_IF_COND;
;;;569      SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;570      SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;571      SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;572      SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;573    
;;;574      errorstatus = CmdResp7Error();
;;;575    
;;;576      if (errorstatus == SD_OK)
;;;577      {
;;;578        CardType = SDIO_STD_CAPACITY_SD_CARD_V2_0; /*!< SD Card 2.0 */
;;;579        SDType = SD_HIGH_CAPACITY;
;;;580      }
;;;581      else
;;;582      {
;;;583        /*!< CMD55 */
;;;584        SDIO_CmdInitStructure.SDIO_Argument = 0x00;
;;;585        SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
;;;586        SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;587        SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;588        SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;589        SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;590        errorstatus = CmdResp1Error(SD_CMD_APP_CMD);
;;;591      }
;;;592      /*!< CMD55 */
;;;593      SDIO_CmdInitStructure.SDIO_Argument = 0x00;
;;;594      SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
;;;595      SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;596      SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;597      SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;598      SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;599      errorstatus = CmdResp1Error(SD_CMD_APP_CMD);
;;;600    
;;;601      /*!< If errorstatus is Command TimeOut, it is a MMC card */
;;;602      /*!< If errorstatus is SD_OK it is a SD card: SD card 2.0 (voltage range mismatch)
;;;603         or SD card 1.x */
;;;604      if (errorstatus == SD_OK)
;;;605      {
;;;606        /*!< SD CARD */
;;;607        /*!< Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
;;;608        while ((!validvoltage) && (count < SD_MAX_VOLT_TRIAL))
;;;609        {
;;;610    
;;;611          /*!< SEND CMD55 APP_CMD with RCA as 0 */
;;;612          SDIO_CmdInitStructure.SDIO_Argument = 0x00;
;;;613          SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
;;;614          SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;615          SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;616          SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;617          SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;618    
;;;619          errorstatus = CmdResp1Error(SD_CMD_APP_CMD);
;;;620    
;;;621          if (errorstatus != SD_OK)
;;;622          {
;;;623            return(errorstatus);
;;;624          }
;;;625          SDIO_CmdInitStructure.SDIO_Argument = SD_VOLTAGE_WINDOW_SD | SDType;
;;;626          SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SD_APP_OP_COND;
;;;627          SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;628          SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;629          SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;630          SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;631    
;;;632          errorstatus = CmdResp3Error();
;;;633          if (errorstatus != SD_OK)
;;;634          {
;;;635            return(errorstatus);
;;;636          }
;;;637    
;;;638          response = SDIO_GetResponse(SDIO_RESP1);
;;;639          validvoltage = (((response >> 31) == 1) ? 1 : 0);
;;;640          count++;
;;;641        }
;;;642        if (count >= SD_MAX_VOLT_TRIAL)
;;;643        {
;;;644          errorstatus = SD_INVALID_VOLTRANGE;
;;;645          return(errorstatus);
;;;646        }
;;;647    
;;;648        if (response &= SD_HIGH_CAPACITY)
;;;649        {
;;;650          CardType = SDIO_HIGH_CAPACITY_SD_CARD;
;;;651        }
;;;652    
;;;653      }/*!< else MMC Card */
;;;654    
;;;655      return(errorstatus);
;;;656    }
000c1c  e8bd81f0          POP      {r4-r8,pc}
                  |L1.3104|
000c20  f44f70d5          MOV      r0,#0x1aa             ;567
000c24  491c              LDR      r1,|L1.3224|
000c26  6008              STR      r0,[r1,#0]            ;567  ; SDIO_CmdInitStructure
000c28  2008              MOVS     r0,#8                 ;568
000c2a  6048              STR      r0,[r1,#4]            ;568  ; SDIO_CmdInitStructure
000c2c  2040              MOVS     r0,#0x40              ;569
000c2e  6088              STR      r0,[r1,#8]            ;569  ; SDIO_CmdInitStructure
000c30  2000              MOVS     r0,#0                 ;570
000c32  60c8              STR      r0,[r1,#0xc]          ;570  ; SDIO_CmdInitStructure
000c34  f44f6080          MOV      r0,#0x400             ;571
000c38  6108              STR      r0,[r1,#0x10]         ;571  ; SDIO_CmdInitStructure
000c3a  4608              MOV      r0,r1                 ;572
000c3c  f7fffffe          BL       SDIO_SendCommand
000c40  f7fffffe          BL       CmdResp7Error
000c44  4604              MOV      r4,r0                 ;574
000c46  2c2a              CMP      r4,#0x2a              ;576
000c48  d105              BNE      |L1.3158|
000c4a  2001              MOVS     r0,#1                 ;578
000c4c  4911              LDR      r1,|L1.3220|
000c4e  6008              STR      r0,[r1,#0]            ;578  ; CardType
000c50  f04f4880          MOV      r8,#0x40000000        ;579
000c54  e012              B        |L1.3196|
                  |L1.3158|
000c56  2000              MOVS     r0,#0                 ;584
000c58  490f              LDR      r1,|L1.3224|
000c5a  6008              STR      r0,[r1,#0]            ;584  ; SDIO_CmdInitStructure
000c5c  2037              MOVS     r0,#0x37              ;585
000c5e  6048              STR      r0,[r1,#4]            ;585  ; SDIO_CmdInitStructure
000c60  2040              MOVS     r0,#0x40              ;586
000c62  6088              STR      r0,[r1,#8]            ;586  ; SDIO_CmdInitStructure
000c64  2000              MOVS     r0,#0                 ;587
000c66  60c8              STR      r0,[r1,#0xc]          ;587  ; SDIO_CmdInitStructure
000c68  f44f6080          MOV      r0,#0x400             ;588
000c6c  6108              STR      r0,[r1,#0x10]         ;588  ; SDIO_CmdInitStructure
000c6e  4608              MOV      r0,r1                 ;589
000c70  f7fffffe          BL       SDIO_SendCommand
000c74  2037              MOVS     r0,#0x37              ;590
000c76  f7fffffe          BL       CmdResp1Error
000c7a  4604              MOV      r4,r0                 ;590
                  |L1.3196|
000c7c  2000              MOVS     r0,#0                 ;593
000c7e  4906              LDR      r1,|L1.3224|
000c80  6008              STR      r0,[r1,#0]            ;593  ; SDIO_CmdInitStructure
000c82  2037              MOVS     r0,#0x37              ;594
000c84  6048              STR      r0,[r1,#4]            ;594  ; SDIO_CmdInitStructure
000c86  2040              MOVS     r0,#0x40              ;595
000c88  6088              STR      r0,[r1,#8]            ;595  ; SDIO_CmdInitStructure
000c8a  e00d              B        |L1.3240|
                  |L1.3212|
                          DCD      CID_Tab
                  |L1.3216|
                          DCD      0x40018000
                  |L1.3220|
                          DCD      CardType
                  |L1.3224|
                          DCD      SDIO_CmdInitStructure
                  |L1.3228|
                          DCD      ||RCA||
                  |L1.3232|
                          DCD      CSD_Tab
                  |L1.3236|
                          DCD      SDIO_InitStructure
                  |L1.3240|
000ca8  2000              MOVS     r0,#0                 ;596
000caa  60c8              STR      r0,[r1,#0xc]          ;596  ; SDIO_CmdInitStructure
000cac  f44f6080          MOV      r0,#0x400             ;597
000cb0  6108              STR      r0,[r1,#0x10]         ;597  ; SDIO_CmdInitStructure
000cb2  4608              MOV      r0,r1                 ;598
000cb4  f7fffffe          BL       SDIO_SendCommand
000cb8  2037              MOVS     r0,#0x37              ;599
000cba  f7fffffe          BL       CmdResp1Error
000cbe  4604              MOV      r4,r0                 ;599
000cc0  2c2a              CMP      r4,#0x2a              ;604
000cc2  d14c              BNE      |L1.3422|
000cc4  e038              B        |L1.3384|
                  |L1.3270|
000cc6  2000              MOVS     r0,#0                 ;612
000cc8  49fa              LDR      r1,|L1.4276|
000cca  6008              STR      r0,[r1,#0]            ;612  ; SDIO_CmdInitStructure
000ccc  2037              MOVS     r0,#0x37              ;613
000cce  6048              STR      r0,[r1,#4]            ;613  ; SDIO_CmdInitStructure
000cd0  2040              MOVS     r0,#0x40              ;614
000cd2  6088              STR      r0,[r1,#8]            ;614  ; SDIO_CmdInitStructure
000cd4  2000              MOVS     r0,#0                 ;615
000cd6  60c8              STR      r0,[r1,#0xc]          ;615  ; SDIO_CmdInitStructure
000cd8  f44f6080          MOV      r0,#0x400             ;616
000cdc  6108              STR      r0,[r1,#0x10]         ;616  ; SDIO_CmdInitStructure
000cde  4608              MOV      r0,r1                 ;617
000ce0  f7fffffe          BL       SDIO_SendCommand
000ce4  2037              MOVS     r0,#0x37              ;619
000ce6  f7fffffe          BL       CmdResp1Error
000cea  4604              MOV      r4,r0                 ;619
000cec  2c2a              CMP      r4,#0x2a              ;621
000cee  d001              BEQ      |L1.3316|
000cf0  4620              MOV      r0,r4                 ;623
000cf2  e793              B        |L1.3100|
                  |L1.3316|
000cf4  48f0              LDR      r0,|L1.4280|
000cf6  ea480000          ORR      r0,r8,r0              ;625
000cfa  49ee              LDR      r1,|L1.4276|
000cfc  6008              STR      r0,[r1,#0]            ;625  ; SDIO_CmdInitStructure
000cfe  2029              MOVS     r0,#0x29              ;626
000d00  6048              STR      r0,[r1,#4]            ;626  ; SDIO_CmdInitStructure
000d02  2040              MOVS     r0,#0x40              ;627
000d04  6088              STR      r0,[r1,#8]            ;627  ; SDIO_CmdInitStructure
000d06  2000              MOVS     r0,#0                 ;628
000d08  60c8              STR      r0,[r1,#0xc]          ;628  ; SDIO_CmdInitStructure
000d0a  f44f6080          MOV      r0,#0x400             ;629
000d0e  6108              STR      r0,[r1,#0x10]         ;629  ; SDIO_CmdInitStructure
000d10  4608              MOV      r0,r1                 ;630
000d12  f7fffffe          BL       SDIO_SendCommand
000d16  f7fffffe          BL       CmdResp3Error
000d1a  4604              MOV      r4,r0                 ;632
000d1c  2c2a              CMP      r4,#0x2a              ;633
000d1e  d001              BEQ      |L1.3364|
000d20  4620              MOV      r0,r4                 ;635
000d22  e77b              B        |L1.3100|
                  |L1.3364|
000d24  2000              MOVS     r0,#0                 ;638
000d26  f7fffffe          BL       SDIO_GetResponse
000d2a  4606              MOV      r6,r0                 ;638
000d2c  2001              MOVS     r0,#1                 ;639
000d2e  ea8070d6          EOR      r0,r0,r6,LSR #31      ;639
000d32  f0800701          EOR      r7,r0,#1              ;639
000d36  1c6d              ADDS     r5,r5,#1              ;640
                  |L1.3384|
000d38  b91f              CBNZ     r7,|L1.3394|
000d3a  f64f70ff          MOV      r0,#0xffff            ;608
000d3e  4285              CMP      r5,r0                 ;608
000d40  d3c1              BCC      |L1.3270|
                  |L1.3394|
000d42  f64f70ff          MOV      r0,#0xffff            ;642
000d46  4285              CMP      r5,r0                 ;642
000d48  d302              BCC      |L1.3408|
000d4a  241b              MOVS     r4,#0x1b              ;644
000d4c  4620              MOV      r0,r4                 ;645
000d4e  e765              B        |L1.3100|
                  |L1.3408|
000d50  f0064080          AND      r0,r6,#0x40000000     ;648
000d54  0006              MOVS     r6,r0                 ;648
000d56  d002              BEQ      |L1.3422|
000d58  2002              MOVS     r0,#2                 ;650
000d5a  49d8              LDR      r1,|L1.4284|
000d5c  6008              STR      r0,[r1,#0]            ;650  ; CardType
                  |L1.3422|
000d5e  4620              MOV      r0,r4                 ;655
000d60  e75c              B        |L1.3100|
;;;657    
                          ENDP

                  SD_Init PROC
;;;381      */
;;;382    SD_Error SD_Init(void)
000d62  b510              PUSH     {r4,lr}
;;;383    {
;;;384      SD_Error errorstatus = SD_OK;
000d64  242a              MOVS     r4,#0x2a
;;;385      
;;;386      /* SDIO Peripheral Low Level Init */
;;;387      SD_LowLevel_Init();
000d66  f7fffffe          BL       SD_LowLevel_Init
;;;388      //SDIO_Configuration();
;;;389      SDIO_DeInit();
000d6a  f7fffffe          BL       SDIO_DeInit
;;;390    
;;;391      errorstatus = SD_PowerON();
000d6e  f7fffffe          BL       SD_PowerON
000d72  4604              MOV      r4,r0
;;;392    
;;;393      if (errorstatus != SD_OK)
000d74  2c2a              CMP      r4,#0x2a
000d76  d001              BEQ      |L1.3452|
;;;394      {
;;;395        /*!< CMD Response TimeOut (wait for CMDSENT flag) */
;;;396        return(errorstatus);
000d78  4620              MOV      r0,r4
                  |L1.3450|
;;;397      }
;;;398    
;;;399      errorstatus = SD_InitializeCards();
;;;400    
;;;401      if (errorstatus != SD_OK)
;;;402      {
;;;403        /*!< CMD Response TimeOut (wait for CMDSENT flag) */
;;;404        return(errorstatus);
;;;405      }
;;;406    
;;;407      /*!< Configure the SDIO peripheral */
;;;408      /*!< SDIOCLK = HCLK, SDIO_CK = HCLK/(2 + SDIO_TRANSFER_CLK_DIV) */
;;;409      SDIO_InitStructure.SDIO_ClockDiv = SDIO_TRANSFER_CLK_DIV; 
;;;410      SDIO_InitStructure.SDIO_ClockEdge = SDIO_ClockEdge_Rising;
;;;411      SDIO_InitStructure.SDIO_ClockBypass = SDIO_ClockBypass_Disable;
;;;412      SDIO_InitStructure.SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
;;;413      SDIO_InitStructure.SDIO_BusWide = SDIO_BusWide_1b;
;;;414      SDIO_InitStructure.SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
;;;415      SDIO_Init(&SDIO_InitStructure);
;;;416      
;;;417      if (errorstatus == SD_OK)
;;;418      {
;;;419        /*----------------- Read CSD/CID MSD registers ------------------*/
;;;420        errorstatus = SD_GetCardInfo(&SDCardInfo);
;;;421      }
;;;422    
;;;423      if (errorstatus == SD_OK)
;;;424      {
;;;425        /*----------------- Select Card --------------------------------*/
;;;426        errorstatus = SD_SelectDeselect((uint32_t) (SDCardInfo.RCA << 16));
;;;427      }
;;;428    
;;;429      if (errorstatus == SD_OK)
;;;430      {
;;;431        errorstatus = SD_EnableWideBusOperation(SDIO_BusWide_4b);
;;;432      }  
;;;433    
;;;434      /* Set Device Transfer Mode to DMA */
;;;435      if (errorstatus == SD_OK)
;;;436      {  
;;;437        errorstatus = SD_SetDeviceMode(SD_DMA_MODE);
;;;438      }
;;;439      
;;;440      return(errorstatus);
;;;441    }
000d7a  bd10              POP      {r4,pc}
                  |L1.3452|
000d7c  f7fffffe          BL       SD_InitializeCards
000d80  4604              MOV      r4,r0                 ;399
000d82  2c2a              CMP      r4,#0x2a              ;401
000d84  d001              BEQ      |L1.3466|
000d86  4620              MOV      r0,r4                 ;404
000d88  e7f7              B        |L1.3450|
                  |L1.3466|
000d8a  2001              MOVS     r0,#1                 ;409
000d8c  49cc              LDR      r1,|L1.4288|
000d8e  7508              STRB     r0,[r1,#0x14]         ;409
000d90  2000              MOVS     r0,#0                 ;410
000d92  6008              STR      r0,[r1,#0]            ;410  ; SDIO_InitStructure
000d94  6048              STR      r0,[r1,#4]            ;411  ; SDIO_InitStructure
000d96  6088              STR      r0,[r1,#8]            ;412  ; SDIO_InitStructure
000d98  60c8              STR      r0,[r1,#0xc]          ;413  ; SDIO_InitStructure
000d9a  6108              STR      r0,[r1,#0x10]         ;414  ; SDIO_InitStructure
000d9c  4608              MOV      r0,r1                 ;415
000d9e  f7fffffe          BL       SDIO_Init
000da2  2c2a              CMP      r4,#0x2a              ;417
000da4  d103              BNE      |L1.3502|
000da6  48c7              LDR      r0,|L1.4292|
000da8  f7fffffe          BL       SD_GetCardInfo
000dac  4604              MOV      r4,r0                 ;420
                  |L1.3502|
000dae  2c2a              CMP      r4,#0x2a              ;423
000db0  d106              BNE      |L1.3520|
000db2  49c4              LDR      r1,|L1.4292|
000db4  f8b1104c          LDRH     r1,[r1,#0x4c]         ;426  ; SDCardInfo
000db8  0408              LSLS     r0,r1,#16             ;426
000dba  f7fffffe          BL       SD_SelectDeselect
000dbe  4604              MOV      r4,r0                 ;426
                  |L1.3520|
000dc0  2c2a              CMP      r4,#0x2a              ;429
000dc2  d104              BNE      |L1.3534|
000dc4  f44f6000          MOV      r0,#0x800             ;431
000dc8  f7fffffe          BL       SD_EnableWideBusOperation
000dcc  4604              MOV      r4,r0                 ;431
                  |L1.3534|
000dce  2c2a              CMP      r4,#0x2a              ;435
000dd0  d103              BNE      |L1.3546|
000dd2  2000              MOVS     r0,#0                 ;437
000dd4  f7fffffe          BL       SD_SetDeviceMode
000dd8  4604              MOV      r4,r0                 ;437
                  |L1.3546|
000dda  4620              MOV      r0,r4                 ;440
000ddc  e7cd              B        |L1.3450|
;;;442    
                          ENDP

                  SD_SendStatus PROC
;;;2097     */
;;;2098   SD_Error SD_SendStatus(uint32_t *pcardstatus)
000dde  b570              PUSH     {r4-r6,lr}
;;;2099   {
000de0  4604              MOV      r4,r0
;;;2100     SD_Error errorstatus = SD_OK;
000de2  252a              MOVS     r5,#0x2a
;;;2101   
;;;2102     if (pcardstatus == NULL)
000de4  b914              CBNZ     r4,|L1.3564|
;;;2103     {
;;;2104       errorstatus = SD_INVALID_PARAMETER;
000de6  2526              MOVS     r5,#0x26
;;;2105       return(errorstatus);
000de8  4628              MOV      r0,r5
                  |L1.3562|
;;;2106     }
;;;2107   
;;;2108     SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
;;;2109     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SEND_STATUS;
;;;2110     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;2111     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;2112     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;2113     SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;2114   
;;;2115   
;;;2116     errorstatus = CmdResp1Error(SD_CMD_SEND_STATUS);
;;;2117   
;;;2118     if (errorstatus != SD_OK)
;;;2119     {
;;;2120       return(errorstatus);
;;;2121     }
;;;2122   
;;;2123     *pcardstatus = SDIO_GetResponse(SDIO_RESP1);
;;;2124   
;;;2125     return(errorstatus);
;;;2126   }
000dea  bd70              POP      {r4-r6,pc}
                  |L1.3564|
000dec  48b6              LDR      r0,|L1.4296|
000dee  8800              LDRH     r0,[r0,#0]            ;2108  ; RCA
000df0  0400              LSLS     r0,r0,#16             ;2108
000df2  49b0              LDR      r1,|L1.4276|
000df4  6008              STR      r0,[r1,#0]            ;2108  ; SDIO_CmdInitStructure
000df6  200d              MOVS     r0,#0xd               ;2109
000df8  6048              STR      r0,[r1,#4]            ;2109  ; SDIO_CmdInitStructure
000dfa  2040              MOVS     r0,#0x40              ;2110
000dfc  6088              STR      r0,[r1,#8]            ;2110  ; SDIO_CmdInitStructure
000dfe  2000              MOVS     r0,#0                 ;2111
000e00  60c8              STR      r0,[r1,#0xc]          ;2111  ; SDIO_CmdInitStructure
000e02  f44f6080          MOV      r0,#0x400             ;2112
000e06  6108              STR      r0,[r1,#0x10]         ;2112  ; SDIO_CmdInitStructure
000e08  4608              MOV      r0,r1                 ;2113
000e0a  f7fffffe          BL       SDIO_SendCommand
000e0e  200d              MOVS     r0,#0xd               ;2116
000e10  f7fffffe          BL       CmdResp1Error
000e14  4605              MOV      r5,r0                 ;2116
000e16  2d2a              CMP      r5,#0x2a              ;2118
000e18  d001              BEQ      |L1.3614|
000e1a  4628              MOV      r0,r5                 ;2120
000e1c  e7e5              B        |L1.3562|
                  |L1.3614|
000e1e  2000              MOVS     r0,#0                 ;2123
000e20  f7fffffe          BL       SDIO_GetResponse
000e24  6020              STR      r0,[r4,#0]            ;2123
000e26  4628              MOV      r0,r5                 ;2125
000e28  e7df              B        |L1.3562|
;;;2127   
                          ENDP

                  SD_Detect PROC
;;;501     */
;;;502    uint8_t SD_Detect(void)
000e2a  b508              PUSH     {r3,lr}
;;;503    {
;;;504      __IO uint8_t status = SD_PRESENT;
000e2c  2001              MOVS     r0,#1
000e2e  9000              STR      r0,[sp,#0]
;;;505    
;;;506      /*!< Check GPIO to detect SD */
;;;507      if (GPIO_ReadInputDataBit(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != Bit_RESET)
000e30  02c1              LSLS     r1,r0,#11
000e32  48a6              LDR      r0,|L1.4300|
000e34  f7fffffe          BL       GPIO_ReadInputDataBit
000e38  b108              CBZ      r0,|L1.3646|
;;;508      {
;;;509        status = SD_NOT_PRESENT;
000e3a  2000              MOVS     r0,#0
000e3c  9000              STR      r0,[sp,#0]
                  |L1.3646|
;;;510      }
;;;511      return status;
000e3e  f89d0000          LDRB     r0,[sp,#0]
;;;512    }
000e42  bd08              POP      {r3,pc}
;;;513    
                          ENDP

                  SD_GetState PROC
;;;475      */
;;;476    SDCardState SD_GetState(void)
000e44  b508              PUSH     {r3,lr}
;;;477    {
;;;478      uint32_t resp1 = 0;
000e46  2000              MOVS     r0,#0
000e48  9000              STR      r0,[sp,#0]
;;;479      
;;;480      if(SD_Detect()== SD_PRESENT)
000e4a  f7fffffe          BL       SD_Detect
000e4e  2801              CMP      r0,#1
000e50  d10a              BNE      |L1.3688|
;;;481      {
;;;482        if (SD_SendStatus(&resp1) != SD_OK)
000e52  4668              MOV      r0,sp
000e54  f7fffffe          BL       SD_SendStatus
000e58  282a              CMP      r0,#0x2a
000e5a  d001              BEQ      |L1.3680|
;;;483        {
;;;484          return SD_CARD_ERROR;
000e5c  20ff              MOVS     r0,#0xff
                  |L1.3678|
;;;485        }
;;;486        else
;;;487        {
;;;488          return (SDCardState)((resp1 >> 9) & 0x0F);
;;;489        }
;;;490      }
;;;491      else
;;;492      {
;;;493        return SD_CARD_ERROR;
;;;494      }
;;;495    }
000e5e  bd08              POP      {r3,pc}
                  |L1.3680|
000e60  9800              LDR      r0,[sp,#0]            ;488
000e62  f3c02043          UBFX     r0,r0,#9,#4           ;488
000e66  e7fa              B        |L1.3678|
                  |L1.3688|
000e68  20ff              MOVS     r0,#0xff              ;493
000e6a  e7f8              B        |L1.3678|
;;;496    
                          ENDP

                  SD_GetStatus PROC
;;;450      */
;;;451    SDTransferState SD_GetStatus(void)
000e6c  b510              PUSH     {r4,lr}
;;;452    {
;;;453      SDCardState cardstate =  SD_CARD_TRANSFER;
000e6e  2404              MOVS     r4,#4
;;;454    
;;;455      cardstate = SD_GetState();
000e70  f7fffffe          BL       SD_GetState
000e74  4604              MOV      r4,r0
;;;456      
;;;457      if (cardstate == SD_CARD_TRANSFER)
000e76  2c04              CMP      r4,#4
000e78  d101              BNE      |L1.3710|
;;;458      {
;;;459        return(SD_TRANSFER_OK);
000e7a  2000              MOVS     r0,#0
                  |L1.3708|
;;;460      }
;;;461      else if(cardstate == SD_CARD_ERROR)
;;;462      {
;;;463        return (SD_TRANSFER_ERROR);
;;;464      }
;;;465      else
;;;466      {
;;;467        return(SD_TRANSFER_BUSY);
;;;468      }
;;;469    }
000e7c  bd10              POP      {r4,pc}
                  |L1.3710|
000e7e  2cff              CMP      r4,#0xff              ;461
000e80  d101              BNE      |L1.3718|
000e82  2002              MOVS     r0,#2                 ;463
000e84  e7fa              B        |L1.3708|
                  |L1.3718|
000e86  2001              MOVS     r0,#1                 ;467
000e88  e7f8              B        |L1.3708|
;;;470    
                          ENDP

                  SD_PowerOFF PROC
;;;662      */
;;;663    SD_Error SD_PowerOFF(void)
000e8a  b510              PUSH     {r4,lr}
;;;664    {
;;;665      SD_Error errorstatus = SD_OK;
000e8c  242a              MOVS     r4,#0x2a
;;;666    
;;;667      /*!< Set Power State to OFF */
;;;668      SDIO_SetPowerState(SDIO_PowerState_OFF);
000e8e  2000              MOVS     r0,#0
000e90  f7fffffe          BL       SDIO_SetPowerState
;;;669    
;;;670      return(errorstatus);
000e94  4620              MOV      r0,r4
;;;671    }
000e96  bd10              POP      {r4,pc}
;;;672    
                          ENDP

                  convert_from_bytes_to_power_of_two PROC
;;;3116     */
;;;3117   static uint8_t convert_from_bytes_to_power_of_two(uint16_t NumberOfBytes)
000e98  4601              MOV      r1,r0
;;;3118   {
;;;3119     uint8_t count = 0;
000e9a  2000              MOVS     r0,#0
;;;3120   
;;;3121     while (NumberOfBytes != 1)
000e9c  e002              B        |L1.3748|
                  |L1.3742|
;;;3122     {
;;;3123       NumberOfBytes >>= 1;
000e9e  1049              ASRS     r1,r1,#1
;;;3124       count++;
000ea0  1c42              ADDS     r2,r0,#1
000ea2  b2d0              UXTB     r0,r2
                  |L1.3748|
000ea4  2901              CMP      r1,#1                 ;3121
000ea6  d1fa              BNE      |L1.3742|
;;;3125     }
;;;3126     return(count);
;;;3127   }
000ea8  4770              BX       lr
;;;3128   
                          ENDP

                  SD_ReadBlock PROC
;;;1087     */
;;;1088   SD_Error SD_ReadBlock(uint32_t *readbuff, uint32_t ReadAddr, uint16_t BlockSize)
000eaa  e92d47f0          PUSH     {r4-r10,lr}
;;;1089   {
000eae  4606              MOV      r6,r0
000eb0  460f              MOV      r7,r1
000eb2  4614              MOV      r4,r2
;;;1090     SD_Error errorstatus = SD_OK;
000eb4  f04f082a          MOV      r8,#0x2a
;;;1091     uint32_t count = 0, *tempbuff = (uint32_t *)readbuff;
000eb8  f04f0900          MOV      r9,#0
000ebc  4635              MOV      r5,r6
;;;1092     uint8_t power = 0;
000ebe  f04f0a00          MOV      r10,#0
;;;1093   
;;;1094     if (NULL == readbuff)
000ec2  b926              CBNZ     r6,|L1.3790|
;;;1095     {
;;;1096       errorstatus = SD_INVALID_PARAMETER;
000ec4  f04f0826          MOV      r8,#0x26
;;;1097       return(errorstatus);
000ec8  4640              MOV      r0,r8
                  |L1.3786|
;;;1098     }
;;;1099   
;;;1100     TransferError = SD_OK;
;;;1101     TransferEnd = 0;
;;;1102     TotalNumberOfBytes = 0;
;;;1103   
;;;1104     /*!< Clear all DPSM configuration */
;;;1105     SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
;;;1106     SDIO_DataInitStructure.SDIO_DataLength = 0;
;;;1107     SDIO_DataInitStructure.SDIO_DataBlockSize = SDIO_DataBlockSize_1b;
;;;1108     SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToCard;
;;;1109     SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
;;;1110     SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Disable;
;;;1111     SDIO_DataConfig(&SDIO_DataInitStructure);
;;;1112     SDIO_DMACmd(DISABLE);
;;;1113   
;;;1114     if (SDIO_GetResponse(SDIO_RESP1) & SD_CARD_LOCKED)
;;;1115     {
;;;1116       errorstatus = SD_LOCK_UNLOCK_FAILED;
;;;1117       return(errorstatus);
;;;1118     }
;;;1119     
;;;1120     if (CardType == SDIO_HIGH_CAPACITY_SD_CARD)
;;;1121     {
;;;1122       BlockSize = 512;
;;;1123       ReadAddr /= 512;
;;;1124     }
;;;1125     if ((BlockSize > 0) && (BlockSize <= 2048) && ((BlockSize & (BlockSize - 1)) == 0))
;;;1126     {
;;;1127       power = convert_from_bytes_to_power_of_two(BlockSize);
;;;1128   
;;;1129       /*!< Set Block Size for Card */
;;;1130       SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) BlockSize;
;;;1131       SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_BLOCKLEN;
;;;1132       SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1133       SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1134       SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1135       SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1136   
;;;1137       errorstatus = CmdResp1Error(SD_CMD_SET_BLOCKLEN);
;;;1138   
;;;1139       if (SD_OK != errorstatus)
;;;1140       {
;;;1141         return(errorstatus);
;;;1142       }
;;;1143     }
;;;1144     else
;;;1145     {
;;;1146       errorstatus = SD_INVALID_PARAMETER;
;;;1147       return(errorstatus);
;;;1148     }
;;;1149   
;;;1150     SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
;;;1151     SDIO_DataInitStructure.SDIO_DataLength = BlockSize;
;;;1152     SDIO_DataInitStructure.SDIO_DataBlockSize = (uint32_t) power << 4;
;;;1153     SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToSDIO;
;;;1154     SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
;;;1155     SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
;;;1156     SDIO_DataConfig(&SDIO_DataInitStructure);
;;;1157   
;;;1158     TotalNumberOfBytes = BlockSize;
;;;1159     StopCondition = 0;
;;;1160     DestBuffer = (uint32_t *)readbuff;
;;;1161   
;;;1162     /*!< Send CMD17 READ_SINGLE_BLOCK */
;;;1163     SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)ReadAddr;
;;;1164     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_READ_SINGLE_BLOCK;
;;;1165     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1166     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1167     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1168     SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1169   
;;;1170     errorstatus = CmdResp1Error(SD_CMD_READ_SINGLE_BLOCK);
;;;1171   
;;;1172     if (errorstatus != SD_OK)
;;;1173     {
;;;1174       return(errorstatus);
;;;1175     }
;;;1176     /*!< In case of single block transfer, no need of stop transfer at all.*/
;;;1177     if (DeviceMode == SD_POLLING_MODE)
;;;1178     {
;;;1179       /*!< Polling mode */
;;;1180       while (!(SDIO->STA &(SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND | SDIO_FLAG_STBITERR)))
;;;1181       {
;;;1182         if (SDIO_GetFlagStatus(SDIO_FLAG_RXFIFOHF) != RESET)
;;;1183         {
;;;1184           for (count = 0; count < 8; count++)
;;;1185           {
;;;1186             *(tempbuff + count) = SDIO_ReadData();
;;;1187           }
;;;1188           tempbuff += 8;
;;;1189         }
;;;1190       }
;;;1191   
;;;1192       if (SDIO_GetFlagStatus(SDIO_FLAG_DTIMEOUT) != RESET)
;;;1193       {
;;;1194         SDIO_ClearFlag(SDIO_FLAG_DTIMEOUT);
;;;1195         errorstatus = SD_DATA_TIMEOUT;
;;;1196         return(errorstatus);
;;;1197       }
;;;1198       else if (SDIO_GetFlagStatus(SDIO_FLAG_DCRCFAIL) != RESET)
;;;1199       {
;;;1200         SDIO_ClearFlag(SDIO_FLAG_DCRCFAIL);
;;;1201         errorstatus = SD_DATA_CRC_FAIL;
;;;1202         return(errorstatus);
;;;1203       }
;;;1204       else if (SDIO_GetFlagStatus(SDIO_FLAG_RXOVERR) != RESET)
;;;1205       {
;;;1206         SDIO_ClearFlag(SDIO_FLAG_RXOVERR);
;;;1207         errorstatus = SD_RX_OVERRUN;
;;;1208         return(errorstatus);
;;;1209       }
;;;1210       else if (SDIO_GetFlagStatus(SDIO_FLAG_STBITERR) != RESET)
;;;1211       {
;;;1212         SDIO_ClearFlag(SDIO_FLAG_STBITERR);
;;;1213         errorstatus = SD_START_BIT_ERR;
;;;1214         return(errorstatus);
;;;1215       }
;;;1216       while (SDIO_GetFlagStatus(SDIO_FLAG_RXDAVL) != RESET)
;;;1217       {
;;;1218         *tempbuff = SDIO_ReadData();
;;;1219         tempbuff++;
;;;1220       }
;;;1221   
;;;1222       /*!< Clear all the static flags */
;;;1223       SDIO_ClearFlag(SDIO_STATIC_FLAGS);
;;;1224     }
;;;1225     else if (DeviceMode == SD_INTERRUPT_MODE)
;;;1226     {
;;;1227       SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND | SDIO_IT_RXOVERR | SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR, ENABLE);
;;;1228       while ((TransferEnd == 0) && (TransferError == SD_OK))
;;;1229       {}
;;;1230       if (TransferError != SD_OK)
;;;1231       {
;;;1232         return(TransferError);
;;;1233       }
;;;1234     }
;;;1235     else if (DeviceMode == SD_DMA_MODE)
;;;1236     {
;;;1237       SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND | SDIO_IT_RXOVERR | SDIO_IT_STBITERR, ENABLE);
;;;1238       SDIO_DMACmd(ENABLE);
;;;1239       SD_LowLevel_DMA_RxConfig((uint32_t *)readbuff, BlockSize);
;;;1240       while ((SD_DMAEndOfTransferStatus() == RESET) && (TransferEnd == 0) && (TransferError == SD_OK))
;;;1241       {}
;;;1242       if (TransferError != SD_OK)
;;;1243       {
;;;1244         return(TransferError);
;;;1245       }
;;;1246     }
;;;1247     return(errorstatus);
;;;1248   }
000eca  e8bd87f0          POP      {r4-r10,pc}
                  |L1.3790|
000ece  202a              MOVS     r0,#0x2a              ;1100
000ed0  497f              LDR      r1,|L1.4304|
000ed2  7008              STRB     r0,[r1,#0]            ;1100
000ed4  2000              MOVS     r0,#0                 ;1101
000ed6  497f              LDR      r1,|L1.4308|
000ed8  6008              STR      r0,[r1,#0]            ;1101  ; TransferEnd
000eda  497f              LDR      r1,|L1.4312|
000edc  6008              STR      r0,[r1,#0]            ;1102  ; TotalNumberOfBytes
000ede  487f              LDR      r0,|L1.4316|
000ee0  497f              LDR      r1,|L1.4320|
000ee2  6008              STR      r0,[r1,#0]            ;1105  ; SDIO_DataInitStructure
000ee4  2000              MOVS     r0,#0                 ;1106
000ee6  6048              STR      r0,[r1,#4]            ;1106  ; SDIO_DataInitStructure
000ee8  6088              STR      r0,[r1,#8]            ;1107  ; SDIO_DataInitStructure
000eea  60c8              STR      r0,[r1,#0xc]          ;1108  ; SDIO_DataInitStructure
000eec  6108              STR      r0,[r1,#0x10]         ;1109  ; SDIO_DataInitStructure
000eee  6148              STR      r0,[r1,#0x14]         ;1110  ; SDIO_DataInitStructure
000ef0  4608              MOV      r0,r1                 ;1111
000ef2  f7fffffe          BL       SDIO_DataConfig
000ef6  2000              MOVS     r0,#0                 ;1112
000ef8  f7fffffe          BL       SDIO_DMACmd
000efc  2000              MOVS     r0,#0                 ;1114
000efe  f7fffffe          BL       SDIO_GetResponse
000f02  f0007000          AND      r0,r0,#0x2000000      ;1114
000f06  b118              CBZ      r0,|L1.3856|
000f08  f04f080e          MOV      r8,#0xe               ;1116
000f0c  4640              MOV      r0,r8                 ;1117
000f0e  e7dc              B        |L1.3786|
                  |L1.3856|
000f10  486a              LDR      r0,|L1.4284|
000f12  6800              LDR      r0,[r0,#0]            ;1120  ; CardType
000f14  2802              CMP      r0,#2                 ;1120
000f16  d101              BNE      |L1.3868|
000f18  0204              LSLS     r4,r0,#8              ;1122
000f1a  0a7f              LSRS     r7,r7,#9              ;1123
                  |L1.3868|
000f1c  2c00              CMP      r4,#0                 ;1125
000f1e  dd21              BLE      |L1.3940|
000f20  f5b46f00          CMP      r4,#0x800             ;1125
000f24  dc1e              BGT      |L1.3940|
000f26  1e60              SUBS     r0,r4,#1              ;1125
000f28  4020              ANDS     r0,r0,r4              ;1125
000f2a  b9d8              CBNZ     r0,|L1.3940|
000f2c  4620              MOV      r0,r4                 ;1127
000f2e  f7fffffe          BL       convert_from_bytes_to_power_of_two
000f32  4682              MOV      r10,r0                ;1127
000f34  485f              LDR      r0,|L1.4276|
000f36  6004              STR      r4,[r0,#0]            ;1130  ; SDIO_CmdInitStructure
000f38  2010              MOVS     r0,#0x10              ;1131
000f3a  495e              LDR      r1,|L1.4276|
000f3c  6048              STR      r0,[r1,#4]            ;1131  ; SDIO_CmdInitStructure
000f3e  2040              MOVS     r0,#0x40              ;1132
000f40  6088              STR      r0,[r1,#8]            ;1132  ; SDIO_CmdInitStructure
000f42  2000              MOVS     r0,#0                 ;1133
000f44  60c8              STR      r0,[r1,#0xc]          ;1133  ; SDIO_CmdInitStructure
000f46  f44f6080          MOV      r0,#0x400             ;1134
000f4a  6108              STR      r0,[r1,#0x10]         ;1134  ; SDIO_CmdInitStructure
000f4c  4608              MOV      r0,r1                 ;1135
000f4e  f7fffffe          BL       SDIO_SendCommand
000f52  2010              MOVS     r0,#0x10              ;1137
000f54  f7fffffe          BL       CmdResp1Error
000f58  4680              MOV      r8,r0                 ;1137
000f5a  f1b80f2a          CMP      r8,#0x2a              ;1139
000f5e  d005              BEQ      |L1.3948|
000f60  4640              MOV      r0,r8                 ;1141
000f62  e7b2              B        |L1.3786|
                  |L1.3940|
000f64  f04f0826          MOV      r8,#0x26              ;1146
000f68  4640              MOV      r0,r8                 ;1147
000f6a  e7ae              B        |L1.3786|
                  |L1.3948|
000f6c  485b              LDR      r0,|L1.4316|
000f6e  495c              LDR      r1,|L1.4320|
000f70  6008              STR      r0,[r1,#0]            ;1150  ; SDIO_DataInitStructure
000f72  4608              MOV      r0,r1                 ;1151
000f74  6044              STR      r4,[r0,#4]            ;1151  ; SDIO_DataInitStructure
000f76  ea4f100a          LSL      r0,r10,#4             ;1152
000f7a  6088              STR      r0,[r1,#8]            ;1152  ; SDIO_DataInitStructure
000f7c  2002              MOVS     r0,#2                 ;1153
000f7e  60c8              STR      r0,[r1,#0xc]          ;1153  ; SDIO_DataInitStructure
000f80  2000              MOVS     r0,#0                 ;1154
000f82  6108              STR      r0,[r1,#0x10]         ;1154  ; SDIO_DataInitStructure
000f84  2001              MOVS     r0,#1                 ;1155
000f86  6148              STR      r0,[r1,#0x14]         ;1155  ; SDIO_DataInitStructure
000f88  4608              MOV      r0,r1                 ;1156
000f8a  f7fffffe          BL       SDIO_DataConfig
000f8e  4852              LDR      r0,|L1.4312|
000f90  6004              STR      r4,[r0,#0]            ;1158  ; TotalNumberOfBytes
000f92  2000              MOVS     r0,#0                 ;1159
000f94  4953              LDR      r1,|L1.4324|
000f96  6008              STR      r0,[r1,#0]            ;1159  ; StopCondition
000f98  4853              LDR      r0,|L1.4328|
000f9a  6006              STR      r6,[r0,#0]            ;1160  ; DestBuffer
000f9c  4845              LDR      r0,|L1.4276|
000f9e  6007              STR      r7,[r0,#0]            ;1163  ; SDIO_CmdInitStructure
000fa0  2011              MOVS     r0,#0x11              ;1164
000fa2  4944              LDR      r1,|L1.4276|
000fa4  6048              STR      r0,[r1,#4]            ;1164  ; SDIO_CmdInitStructure
000fa6  2040              MOVS     r0,#0x40              ;1165
000fa8  6088              STR      r0,[r1,#8]            ;1165  ; SDIO_CmdInitStructure
000faa  2000              MOVS     r0,#0                 ;1166
000fac  60c8              STR      r0,[r1,#0xc]          ;1166  ; SDIO_CmdInitStructure
000fae  f44f6080          MOV      r0,#0x400             ;1167
000fb2  6108              STR      r0,[r1,#0x10]         ;1167  ; SDIO_CmdInitStructure
000fb4  4608              MOV      r0,r1                 ;1168
000fb6  f7fffffe          BL       SDIO_SendCommand
000fba  2011              MOVS     r0,#0x11              ;1170
000fbc  f7fffffe          BL       CmdResp1Error
000fc0  4680              MOV      r8,r0                 ;1170
000fc2  f1b80f2a          CMP      r8,#0x2a              ;1172
000fc6  d001              BEQ      |L1.4044|
000fc8  4640              MOV      r0,r8                 ;1174
000fca  e77e              B        |L1.3786|
                  |L1.4044|
000fcc  4847              LDR      r0,|L1.4332|
000fce  6800              LDR      r0,[r0,#0]            ;1177  ; DeviceMode
000fd0  2802              CMP      r0,#2                 ;1177
000fd2  d157              BNE      |L1.4228|
000fd4  e011              B        |L1.4090|
                  |L1.4054|
000fd6  f44f4000          MOV      r0,#0x8000            ;1182
000fda  f7fffffe          BL       SDIO_GetFlagStatus
000fde  b160              CBZ      r0,|L1.4090|
000fe0  f04f0900          MOV      r9,#0                 ;1184
000fe4  e005              B        |L1.4082|
                  |L1.4070|
000fe6  f7fffffe          BL       SDIO_ReadData
000fea  f8450029          STR      r0,[r5,r9,LSL #2]     ;1186
000fee  f1090901          ADD      r9,r9,#1              ;1184
                  |L1.4082|
000ff2  f1b90f08          CMP      r9,#8                 ;1184
000ff6  d3f6              BCC      |L1.4070|
000ff8  3520              ADDS     r5,r5,#0x20           ;1188
                  |L1.4090|
000ffa  483d              LDR      r0,|L1.4336|
000ffc  6b40              LDR      r0,[r0,#0x34]         ;1180
000ffe  f240612a          MOV      r1,#0x62a             ;1180
001002  4008              ANDS     r0,r0,r1              ;1180
001004  2800              CMP      r0,#0                 ;1180
001006  d0e6              BEQ      |L1.4054|
001008  2008              MOVS     r0,#8                 ;1192
00100a  f7fffffe          BL       SDIO_GetFlagStatus
00100e  b130              CBZ      r0,|L1.4126|
001010  2008              MOVS     r0,#8                 ;1194
001012  f7fffffe          BL       SDIO_ClearFlag
001016  f04f0804          MOV      r8,#4                 ;1195
00101a  4640              MOV      r0,r8                 ;1196
00101c  e755              B        |L1.3786|
                  |L1.4126|
00101e  2002              MOVS     r0,#2                 ;1198
001020  f7fffffe          BL       SDIO_GetFlagStatus
001024  b130              CBZ      r0,|L1.4148|
001026  2002              MOVS     r0,#2                 ;1200
001028  f7fffffe          BL       SDIO_ClearFlag
00102c  f04f0802          MOV      r8,#2                 ;1201
001030  4640              MOV      r0,r8                 ;1202
001032  e74a              B        |L1.3786|
                  |L1.4148|
001034  2020              MOVS     r0,#0x20              ;1204
001036  f7fffffe          BL       SDIO_GetFlagStatus
00103a  b130              CBZ      r0,|L1.4170|
00103c  2020              MOVS     r0,#0x20              ;1206
00103e  f7fffffe          BL       SDIO_ClearFlag
001042  f04f0806          MOV      r8,#6                 ;1207
001046  4640              MOV      r0,r8                 ;1208
001048  e73f              B        |L1.3786|
                  |L1.4170|
00104a  f44f7000          MOV      r0,#0x200             ;1210
00104e  f7fffffe          BL       SDIO_GetFlagStatus
001052  b138              CBZ      r0,|L1.4196|
001054  f44f7000          MOV      r0,#0x200             ;1212
001058  f7fffffe          BL       SDIO_ClearFlag
00105c  f04f0807          MOV      r8,#7                 ;1213
001060  4640              MOV      r0,r8                 ;1214
001062  e732              B        |L1.3786|
                  |L1.4196|
001064  e003              B        |L1.4206|
                  |L1.4198|
001066  f7fffffe          BL       SDIO_ReadData
00106a  6028              STR      r0,[r5,#0]            ;1218
00106c  1d2d              ADDS     r5,r5,#4              ;1219
                  |L1.4206|
00106e  f44f1000          MOV      r0,#0x200000          ;1216
001072  f7fffffe          BL       SDIO_GetFlagStatus
001076  2800              CMP      r0,#0                 ;1216
001078  d1f5              BNE      |L1.4198|
00107a  f24050ff          MOV      r0,#0x5ff             ;1223
00107e  f7fffffe          BL       SDIO_ClearFlag
001082  e058              B        |L1.4406|
                  |L1.4228|
001084  4819              LDR      r0,|L1.4332|
001086  6800              LDR      r0,[r0,#0]            ;1225  ; DeviceMode
001088  2801              CMP      r0,#1                 ;1225
00108a  d133              BNE      |L1.4340|
00108c  2101              MOVS     r1,#1                 ;1227
00108e  f248302a          MOV      r0,#0x832a            ;1227
001092  f7fffffe          BL       SDIO_ITConfig
001096  bf00              NOP                            ;1228
                  |L1.4248|
001098  480e              LDR      r0,|L1.4308|
00109a  6800              LDR      r0,[r0,#0]            ;1228  ; TransferEnd
00109c  b918              CBNZ     r0,|L1.4262|
00109e  480c              LDR      r0,|L1.4304|
0010a0  7800              LDRB     r0,[r0,#0]            ;1228  ; TransferError
0010a2  282a              CMP      r0,#0x2a              ;1228
0010a4  d0f8              BEQ      |L1.4248|
                  |L1.4262|
0010a6  480a              LDR      r0,|L1.4304|
0010a8  7800              LDRB     r0,[r0,#0]            ;1230  ; TransferError
0010aa  282a              CMP      r0,#0x2a              ;1230
0010ac  d043              BEQ      |L1.4406|
0010ae  4808              LDR      r0,|L1.4304|
0010b0  7800              LDRB     r0,[r0,#0]            ;1232  ; TransferError
0010b2  e70a              B        |L1.3786|
                  |L1.4276|
                          DCD      SDIO_CmdInitStructure
                  |L1.4280|
                          DCD      0x80100000
                  |L1.4284|
                          DCD      CardType
                  |L1.4288|
                          DCD      SDIO_InitStructure
                  |L1.4292|
                          DCD      SDCardInfo
                  |L1.4296|
                          DCD      ||RCA||
                  |L1.4300|
                          DCD      0x40011c00
                  |L1.4304|
                          DCD      TransferError
                  |L1.4308|
                          DCD      TransferEnd
                  |L1.4312|
                          DCD      TotalNumberOfBytes
                  |L1.4316|
                          DCD      0x000fffff
                  |L1.4320|
                          DCD      SDIO_DataInitStructure
                  |L1.4324|
                          DCD      StopCondition
                  |L1.4328|
                          DCD      DestBuffer
                  |L1.4332|
                          DCD      DeviceMode
                  |L1.4336|
                          DCD      0x40018000
                  |L1.4340|
0010f4  48f8              LDR      r0,|L1.5336|
0010f6  6800              LDR      r0,[r0,#0]            ;1235  ; DeviceMode
0010f8  b9e8              CBNZ     r0,|L1.4406|
0010fa  2101              MOVS     r1,#1                 ;1237
0010fc  f240302a          MOV      r0,#0x32a             ;1237
001100  f7fffffe          BL       SDIO_ITConfig
001104  2001              MOVS     r0,#1                 ;1238
001106  f7fffffe          BL       SDIO_DMACmd
00110a  4621              MOV      r1,r4                 ;1239
00110c  4630              MOV      r0,r6                 ;1239
00110e  f7fffffe          BL       SD_LowLevel_DMA_RxConfig
001112  bf00              NOP                            ;1240
                  |L1.4372|
001114  f7fffffe          BL       SD_DMAEndOfTransferStatus
001118  b930              CBNZ     r0,|L1.4392|
00111a  48f0              LDR      r0,|L1.5340|
00111c  6800              LDR      r0,[r0,#0]            ;1240  ; TransferEnd
00111e  b918              CBNZ     r0,|L1.4392|
001120  48ef              LDR      r0,|L1.5344|
001122  7800              LDRB     r0,[r0,#0]            ;1240  ; TransferError
001124  282a              CMP      r0,#0x2a              ;1240
001126  d0f5              BEQ      |L1.4372|
                  |L1.4392|
001128  48ed              LDR      r0,|L1.5344|
00112a  7800              LDRB     r0,[r0,#0]            ;1242  ; TransferError
00112c  282a              CMP      r0,#0x2a              ;1242
00112e  d002              BEQ      |L1.4406|
001130  48eb              LDR      r0,|L1.5344|
001132  7800              LDRB     r0,[r0,#0]            ;1244  ; TransferError
001134  e6c9              B        |L1.3786|
                  |L1.4406|
001136  4640              MOV      r0,r8                 ;1247
001138  e6c7              B        |L1.3786|
;;;1249   
                          ENDP

                  SD_ReadMultiBlocks PROC
;;;1257     */
;;;1258   SD_Error SD_ReadMultiBlocks(uint8_t *readbuff, uint32_t ReadAddr, uint16_t BlockSize, uint32_t NumberOfBlocks)
00113a  e92d5ff0          PUSH     {r4-r12,lr}
;;;1259   {
00113e  4607              MOV      r7,r0
001140  4689              MOV      r9,r1
001142  4614              MOV      r4,r2
001144  461d              MOV      r5,r3
;;;1260     SD_Error errorstatus = SD_OK;
001146  f04f082a          MOV      r8,#0x2a
;;;1261     uint32_t count = 0, *tempbuff = (uint32_t *)readbuff;
00114a  f04f0a00          MOV      r10,#0
00114e  463e              MOV      r6,r7
;;;1262     uint8_t power = 0;
001150  f04f0b00          MOV      r11,#0
;;;1263   
;;;1264     if (NULL == readbuff)
001154  b927              CBNZ     r7,|L1.4448|
;;;1265     {
;;;1266       errorstatus = SD_INVALID_PARAMETER;
001156  f04f0826          MOV      r8,#0x26
;;;1267       return(errorstatus);
00115a  4640              MOV      r0,r8
                  |L1.4444|
;;;1268     }
;;;1269   
;;;1270     TransferError = SD_OK;
;;;1271     TransferEnd = 0;
;;;1272     TotalNumberOfBytes = 0;
;;;1273   
;;;1274     /*!< Clear all DPSM configuration */
;;;1275     SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
;;;1276     SDIO_DataInitStructure.SDIO_DataLength = 0;
;;;1277     SDIO_DataInitStructure.SDIO_DataBlockSize = SDIO_DataBlockSize_1b;
;;;1278     SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToCard;
;;;1279     SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
;;;1280     SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Disable;
;;;1281     SDIO_DataConfig(&SDIO_DataInitStructure);
;;;1282     SDIO_DMACmd(DISABLE);
;;;1283   
;;;1284     if (SDIO_GetResponse(SDIO_RESP1) & SD_CARD_LOCKED)
;;;1285     {
;;;1286       errorstatus = SD_LOCK_UNLOCK_FAILED;
;;;1287       return(errorstatus);
;;;1288     }
;;;1289   
;;;1290     if (CardType == SDIO_HIGH_CAPACITY_SD_CARD)
;;;1291     {
;;;1292       BlockSize = 512;
;;;1293       ReadAddr /= 512;
;;;1294     }
;;;1295     
;;;1296     if ((BlockSize > 0) && (BlockSize <= 2048) && (0 == (BlockSize & (BlockSize - 1))))
;;;1297     {
;;;1298       power = convert_from_bytes_to_power_of_two(BlockSize);
;;;1299   
;;;1300       /*!< Set Block Size for Card */
;;;1301       SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) BlockSize;
;;;1302       SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_BLOCKLEN;
;;;1303       SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1304       SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1305       SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1306       SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1307   
;;;1308       errorstatus = CmdResp1Error(SD_CMD_SET_BLOCKLEN);
;;;1309   
;;;1310       if (SD_OK != errorstatus)
;;;1311       {
;;;1312         return(errorstatus);
;;;1313       }
;;;1314     }
;;;1315     else
;;;1316     {
;;;1317       errorstatus = SD_INVALID_PARAMETER;
;;;1318       return(errorstatus);
;;;1319     }
;;;1320   
;;;1321     if (NumberOfBlocks > 1)
;;;1322     {
;;;1323       /*!< Common to all modes */
;;;1324       if (NumberOfBlocks * BlockSize > SD_MAX_DATA_LENGTH)
;;;1325       {
;;;1326         errorstatus = SD_INVALID_PARAMETER;
;;;1327         return(errorstatus);
;;;1328       }
;;;1329   
;;;1330       TotalNumberOfBytes = NumberOfBlocks * BlockSize;
;;;1331       StopCondition = 1;
;;;1332       DestBuffer = (uint32_t *)readbuff;
;;;1333   
;;;1334       SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
;;;1335       SDIO_DataInitStructure.SDIO_DataLength = NumberOfBlocks * BlockSize;
;;;1336       SDIO_DataInitStructure.SDIO_DataBlockSize = (uint32_t) power << 4;
;;;1337       SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToSDIO;
;;;1338       SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
;;;1339       SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
;;;1340       SDIO_DataConfig(&SDIO_DataInitStructure);
;;;1341   
;;;1342       /*!< Send CMD18 READ_MULT_BLOCK with argument data address */
;;;1343       SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)ReadAddr;
;;;1344       SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_READ_MULT_BLOCK;
;;;1345       SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1346       SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1347       SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1348       SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1349   
;;;1350       errorstatus = CmdResp1Error(SD_CMD_READ_MULT_BLOCK);
;;;1351   
;;;1352       if (errorstatus != SD_OK)
;;;1353       {
;;;1354         return(errorstatus);
;;;1355       }
;;;1356   
;;;1357       if (DeviceMode == SD_POLLING_MODE)
;;;1358       {
;;;1359         /*!< Polling mode */
;;;1360         while (!(SDIO->STA &(SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DATAEND | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_STBITERR)))
;;;1361         {
;;;1362           if (SDIO_GetFlagStatus(SDIO_FLAG_RXFIFOHF) != RESET)
;;;1363           {
;;;1364             for (count = 0; count < SD_HALFFIFO; count++)
;;;1365             {
;;;1366               *(tempbuff + count) = SDIO_ReadData();
;;;1367             }
;;;1368             tempbuff += SD_HALFFIFO;
;;;1369           }
;;;1370         }
;;;1371   
;;;1372         if (SDIO_GetFlagStatus(SDIO_FLAG_DTIMEOUT) != RESET)
;;;1373         {
;;;1374           SDIO_ClearFlag(SDIO_FLAG_DTIMEOUT);
;;;1375           errorstatus = SD_DATA_TIMEOUT;
;;;1376           return(errorstatus);
;;;1377         }
;;;1378         else if (SDIO_GetFlagStatus(SDIO_FLAG_DCRCFAIL) != RESET)
;;;1379         {
;;;1380           SDIO_ClearFlag(SDIO_FLAG_DCRCFAIL);
;;;1381           errorstatus = SD_DATA_CRC_FAIL;
;;;1382           return(errorstatus);
;;;1383         }
;;;1384         else if (SDIO_GetFlagStatus(SDIO_FLAG_RXOVERR) != RESET)
;;;1385         {
;;;1386           SDIO_ClearFlag(SDIO_FLAG_RXOVERR);
;;;1387           errorstatus = SD_RX_OVERRUN;
;;;1388           return(errorstatus);
;;;1389         }
;;;1390         else if (SDIO_GetFlagStatus(SDIO_FLAG_STBITERR) != RESET)
;;;1391         {
;;;1392           SDIO_ClearFlag(SDIO_FLAG_STBITERR);
;;;1393           errorstatus = SD_START_BIT_ERR;
;;;1394           return(errorstatus);
;;;1395         }
;;;1396         while (SDIO_GetFlagStatus(SDIO_FLAG_RXDAVL) != RESET)
;;;1397         {
;;;1398           *tempbuff = SDIO_ReadData();
;;;1399           tempbuff++;
;;;1400         }
;;;1401   
;;;1402         if (SDIO_GetFlagStatus(SDIO_FLAG_DATAEND) != RESET)
;;;1403         {
;;;1404           /*!< In Case Of SD-CARD Send Command STOP_TRANSMISSION */
;;;1405           if ((SDIO_STD_CAPACITY_SD_CARD_V1_1 == CardType) || (SDIO_HIGH_CAPACITY_SD_CARD == CardType) || (SDIO_STD_CAPACITY_SD_CARD_V2_0 == CardType))
;;;1406           {
;;;1407             /*!< Send CMD12 STOP_TRANSMISSION */
;;;1408             SDIO_CmdInitStructure.SDIO_Argument = 0x0;
;;;1409             SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_STOP_TRANSMISSION;
;;;1410             SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1411             SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1412             SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1413             SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1414   
;;;1415             errorstatus = CmdResp1Error(SD_CMD_STOP_TRANSMISSION);
;;;1416   
;;;1417             if (errorstatus != SD_OK)
;;;1418             {
;;;1419               return(errorstatus);
;;;1420             }
;;;1421           }
;;;1422         }
;;;1423         /*!< Clear all the static flags */
;;;1424         SDIO_ClearFlag(SDIO_STATIC_FLAGS);
;;;1425       }
;;;1426       else if (DeviceMode == SD_INTERRUPT_MODE)
;;;1427       {
;;;1428         SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND | SDIO_IT_RXOVERR | SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR, ENABLE);
;;;1429         while ((TransferEnd == 0) && (TransferError == SD_OK))
;;;1430         {}
;;;1431         if (TransferError != SD_OK)
;;;1432         {
;;;1433           return(TransferError);
;;;1434         }
;;;1435       }
;;;1436       else if (DeviceMode == SD_DMA_MODE)
;;;1437       {
;;;1438         SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND | SDIO_IT_RXOVERR | SDIO_IT_STBITERR, ENABLE);
;;;1439         SDIO_DMACmd(ENABLE);
;;;1440         SD_LowLevel_DMA_RxConfig((uint32_t *)readbuff, (NumberOfBlocks * BlockSize));
;;;1441         while ((SD_DMAEndOfTransferStatus() == RESET) && (TransferEnd == 0) && (TransferError == SD_OK))
;;;1442         {}
;;;1443         if (TransferError != SD_OK)
;;;1444         {
;;;1445           return(TransferError);
;;;1446         }
;;;1447       }
;;;1448     }
;;;1449     return(errorstatus);
;;;1450   }
00115c  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.4448|
001160  202a              MOVS     r0,#0x2a              ;1270
001162  49df              LDR      r1,|L1.5344|
001164  7008              STRB     r0,[r1,#0]            ;1270
001166  2000              MOVS     r0,#0                 ;1271
001168  49dc              LDR      r1,|L1.5340|
00116a  6008              STR      r0,[r1,#0]            ;1271  ; TransferEnd
00116c  49dd              LDR      r1,|L1.5348|
00116e  6008              STR      r0,[r1,#0]            ;1272  ; TotalNumberOfBytes
001170  48dd              LDR      r0,|L1.5352|
001172  49de              LDR      r1,|L1.5356|
001174  6008              STR      r0,[r1,#0]            ;1275  ; SDIO_DataInitStructure
001176  2000              MOVS     r0,#0                 ;1276
001178  6048              STR      r0,[r1,#4]            ;1276  ; SDIO_DataInitStructure
00117a  6088              STR      r0,[r1,#8]            ;1277  ; SDIO_DataInitStructure
00117c  60c8              STR      r0,[r1,#0xc]          ;1278  ; SDIO_DataInitStructure
00117e  6108              STR      r0,[r1,#0x10]         ;1279  ; SDIO_DataInitStructure
001180  6148              STR      r0,[r1,#0x14]         ;1280  ; SDIO_DataInitStructure
001182  4608              MOV      r0,r1                 ;1281
001184  f7fffffe          BL       SDIO_DataConfig
001188  2000              MOVS     r0,#0                 ;1282
00118a  f7fffffe          BL       SDIO_DMACmd
00118e  2000              MOVS     r0,#0                 ;1284
001190  f7fffffe          BL       SDIO_GetResponse
001194  f0007000          AND      r0,r0,#0x2000000      ;1284
001198  b118              CBZ      r0,|L1.4514|
00119a  f04f080e          MOV      r8,#0xe               ;1286
00119e  4640              MOV      r0,r8                 ;1287
0011a0  e7dc              B        |L1.4444|
                  |L1.4514|
0011a2  48d3              LDR      r0,|L1.5360|
0011a4  6800              LDR      r0,[r0,#0]            ;1290  ; CardType
0011a6  2802              CMP      r0,#2                 ;1290
0011a8  d102              BNE      |L1.4528|
0011aa  0204              LSLS     r4,r0,#8              ;1292
0011ac  ea4f2959          LSR      r9,r9,#9              ;1293
                  |L1.4528|
0011b0  2c00              CMP      r4,#0                 ;1296
0011b2  dd21              BLE      |L1.4600|
0011b4  f5b46f00          CMP      r4,#0x800             ;1296
0011b8  dc1e              BGT      |L1.4600|
0011ba  1e60              SUBS     r0,r4,#1              ;1296
0011bc  4020              ANDS     r0,r0,r4              ;1296
0011be  b9d8              CBNZ     r0,|L1.4600|
0011c0  4620              MOV      r0,r4                 ;1298
0011c2  f7fffffe          BL       convert_from_bytes_to_power_of_two
0011c6  4683              MOV      r11,r0                ;1298
0011c8  48ca              LDR      r0,|L1.5364|
0011ca  6004              STR      r4,[r0,#0]            ;1301  ; SDIO_CmdInitStructure
0011cc  2010              MOVS     r0,#0x10              ;1302
0011ce  49c9              LDR      r1,|L1.5364|
0011d0  6048              STR      r0,[r1,#4]            ;1302  ; SDIO_CmdInitStructure
0011d2  2040              MOVS     r0,#0x40              ;1303
0011d4  6088              STR      r0,[r1,#8]            ;1303  ; SDIO_CmdInitStructure
0011d6  2000              MOVS     r0,#0                 ;1304
0011d8  60c8              STR      r0,[r1,#0xc]          ;1304  ; SDIO_CmdInitStructure
0011da  f44f6080          MOV      r0,#0x400             ;1305
0011de  6108              STR      r0,[r1,#0x10]         ;1305  ; SDIO_CmdInitStructure
0011e0  4608              MOV      r0,r1                 ;1306
0011e2  f7fffffe          BL       SDIO_SendCommand
0011e6  2010              MOVS     r0,#0x10              ;1308
0011e8  f7fffffe          BL       CmdResp1Error
0011ec  4680              MOV      r8,r0                 ;1308
0011ee  f1b80f2a          CMP      r8,#0x2a              ;1310
0011f2  d005              BEQ      |L1.4608|
0011f4  4640              MOV      r0,r8                 ;1312
0011f6  e7b1              B        |L1.4444|
                  |L1.4600|
0011f8  f04f0826          MOV      r8,#0x26              ;1317
0011fc  4640              MOV      r0,r8                 ;1318
0011fe  e7ad              B        |L1.4444|
                  |L1.4608|
001200  2d01              CMP      r5,#1                 ;1321
001202  d970              BLS      |L1.4838|
001204  fb05f004          MUL      r0,r5,r4              ;1324
001208  f1b07f00          CMP      r0,#0x2000000         ;1324
00120c  d303              BCC      |L1.4630|
00120e  f04f0826          MOV      r8,#0x26              ;1326
001212  4640              MOV      r0,r8                 ;1327
001214  e7a2              B        |L1.4444|
                  |L1.4630|
001216  fb05f004          MUL      r0,r5,r4              ;1330
00121a  49b2              LDR      r1,|L1.5348|
00121c  6008              STR      r0,[r1,#0]            ;1330  ; TotalNumberOfBytes
00121e  2001              MOVS     r0,#1                 ;1331
001220  49b5              LDR      r1,|L1.5368|
001222  6008              STR      r0,[r1,#0]            ;1331  ; StopCondition
001224  48b5              LDR      r0,|L1.5372|
001226  6007              STR      r7,[r0,#0]            ;1332  ; DestBuffer
001228  48af              LDR      r0,|L1.5352|
00122a  49b0              LDR      r1,|L1.5356|
00122c  6008              STR      r0,[r1,#0]            ;1334  ; SDIO_DataInitStructure
00122e  fb05f004          MUL      r0,r5,r4              ;1335
001232  6048              STR      r0,[r1,#4]            ;1335  ; SDIO_DataInitStructure
001234  ea4f100b          LSL      r0,r11,#4             ;1336
001238  6088              STR      r0,[r1,#8]            ;1336  ; SDIO_DataInitStructure
00123a  2002              MOVS     r0,#2                 ;1337
00123c  60c8              STR      r0,[r1,#0xc]          ;1337  ; SDIO_DataInitStructure
00123e  2000              MOVS     r0,#0                 ;1338
001240  6108              STR      r0,[r1,#0x10]         ;1338  ; SDIO_DataInitStructure
001242  2001              MOVS     r0,#1                 ;1339
001244  6148              STR      r0,[r1,#0x14]         ;1339  ; SDIO_DataInitStructure
001246  4608              MOV      r0,r1                 ;1340
001248  f7fffffe          BL       SDIO_DataConfig
00124c  48a9              LDR      r0,|L1.5364|
00124e  f8c09000          STR      r9,[r0,#0]            ;1343  ; SDIO_CmdInitStructure
001252  2012              MOVS     r0,#0x12              ;1344
001254  49a7              LDR      r1,|L1.5364|
001256  6048              STR      r0,[r1,#4]            ;1344  ; SDIO_CmdInitStructure
001258  2040              MOVS     r0,#0x40              ;1345
00125a  6088              STR      r0,[r1,#8]            ;1345  ; SDIO_CmdInitStructure
00125c  2000              MOVS     r0,#0                 ;1346
00125e  60c8              STR      r0,[r1,#0xc]          ;1346  ; SDIO_CmdInitStructure
001260  f44f6080          MOV      r0,#0x400             ;1347
001264  6108              STR      r0,[r1,#0x10]         ;1347  ; SDIO_CmdInitStructure
001266  4608              MOV      r0,r1                 ;1348
001268  f7fffffe          BL       SDIO_SendCommand
00126c  2012              MOVS     r0,#0x12              ;1350
00126e  f7fffffe          BL       CmdResp1Error
001272  4680              MOV      r8,r0                 ;1350
001274  f1b80f2a          CMP      r8,#0x2a              ;1352
001278  d001              BEQ      |L1.4734|
00127a  4640              MOV      r0,r8                 ;1354
00127c  e76e              B        |L1.4444|
                  |L1.4734|
00127e  4896              LDR      r0,|L1.5336|
001280  6800              LDR      r0,[r0,#0]            ;1357  ; DeviceMode
001282  2802              CMP      r0,#2                 ;1357
001284  d17b              BNE      |L1.4990|
001286  e011              B        |L1.4780|
                  |L1.4744|
001288  f44f4000          MOV      r0,#0x8000            ;1362
00128c  f7fffffe          BL       SDIO_GetFlagStatus
001290  b160              CBZ      r0,|L1.4780|
001292  f04f0a00          MOV      r10,#0                ;1364
001296  e005              B        |L1.4772|
                  |L1.4760|
001298  f7fffffe          BL       SDIO_ReadData
00129c  f846002a          STR      r0,[r6,r10,LSL #2]    ;1366
0012a0  f10a0a01          ADD      r10,r10,#1            ;1364
                  |L1.4772|
0012a4  f1ba0f08          CMP      r10,#8                ;1364
0012a8  d3f6              BCC      |L1.4760|
0012aa  3620              ADDS     r6,r6,#0x20           ;1368
                  |L1.4780|
0012ac  4894              LDR      r0,|L1.5376|
0012ae  6b40              LDR      r0,[r0,#0x34]         ;1360
0012b0  f240312a          MOV      r1,#0x32a             ;1360
0012b4  4008              ANDS     r0,r0,r1              ;1360
0012b6  2800              CMP      r0,#0                 ;1360
0012b8  d0e6              BEQ      |L1.4744|
0012ba  2008              MOVS     r0,#8                 ;1372
0012bc  f7fffffe          BL       SDIO_GetFlagStatus
0012c0  b130              CBZ      r0,|L1.4816|
0012c2  2008              MOVS     r0,#8                 ;1374
0012c4  f7fffffe          BL       SDIO_ClearFlag
0012c8  f04f0804          MOV      r8,#4                 ;1375
0012cc  4640              MOV      r0,r8                 ;1376
0012ce  e745              B        |L1.4444|
                  |L1.4816|
0012d0  2002              MOVS     r0,#2                 ;1378
0012d2  f7fffffe          BL       SDIO_GetFlagStatus
0012d6  b138              CBZ      r0,|L1.4840|
0012d8  2002              MOVS     r0,#2                 ;1380
0012da  f7fffffe          BL       SDIO_ClearFlag
0012de  f04f0802          MOV      r8,#2                 ;1381
0012e2  4640              MOV      r0,r8                 ;1382
0012e4  e73a              B        |L1.4444|
                  |L1.4838|
0012e6  e08a              B        |L1.5118|
                  |L1.4840|
0012e8  2020              MOVS     r0,#0x20              ;1384
0012ea  f7fffffe          BL       SDIO_GetFlagStatus
0012ee  b130              CBZ      r0,|L1.4862|
0012f0  2020              MOVS     r0,#0x20              ;1386
0012f2  f7fffffe          BL       SDIO_ClearFlag
0012f6  f04f0806          MOV      r8,#6                 ;1387
0012fa  4640              MOV      r0,r8                 ;1388
0012fc  e72e              B        |L1.4444|
                  |L1.4862|
0012fe  f44f7000          MOV      r0,#0x200             ;1390
001302  f7fffffe          BL       SDIO_GetFlagStatus
001306  b138              CBZ      r0,|L1.4888|
001308  f44f7000          MOV      r0,#0x200             ;1392
00130c  f7fffffe          BL       SDIO_ClearFlag
001310  f04f0807          MOV      r8,#7                 ;1393
001314  4640              MOV      r0,r8                 ;1394
001316  e721              B        |L1.4444|
                  |L1.4888|
001318  e003              B        |L1.4898|
                  |L1.4890|
00131a  f7fffffe          BL       SDIO_ReadData
00131e  6030              STR      r0,[r6,#0]            ;1398
001320  1d36              ADDS     r6,r6,#4              ;1399
                  |L1.4898|
001322  f44f1000          MOV      r0,#0x200000          ;1396
001326  f7fffffe          BL       SDIO_GetFlagStatus
00132a  2800              CMP      r0,#0                 ;1396
00132c  d1f5              BNE      |L1.4890|
00132e  f44f7080          MOV      r0,#0x100             ;1402
001332  f7fffffe          BL       SDIO_GetFlagStatus
001336  b318              CBZ      r0,|L1.4992|
001338  486d              LDR      r0,|L1.5360|
00133a  6800              LDR      r0,[r0,#0]            ;1405  ; CardType
00133c  b138              CBZ      r0,|L1.4942|
00133e  486c              LDR      r0,|L1.5360|
001340  6800              LDR      r0,[r0,#0]            ;1405  ; CardType
001342  2802              CMP      r0,#2                 ;1405
001344  d003              BEQ      |L1.4942|
001346  486a              LDR      r0,|L1.5360|
001348  6800              LDR      r0,[r0,#0]            ;1405  ; CardType
00134a  2801              CMP      r0,#1                 ;1405
00134c  d118              BNE      |L1.4992|
                  |L1.4942|
00134e  2000              MOVS     r0,#0                 ;1408
001350  4968              LDR      r1,|L1.5364|
001352  6008              STR      r0,[r1,#0]            ;1408  ; SDIO_CmdInitStructure
001354  200c              MOVS     r0,#0xc               ;1409
001356  6048              STR      r0,[r1,#4]            ;1409  ; SDIO_CmdInitStructure
001358  2040              MOVS     r0,#0x40              ;1410
00135a  6088              STR      r0,[r1,#8]            ;1410  ; SDIO_CmdInitStructure
00135c  2000              MOVS     r0,#0                 ;1411
00135e  60c8              STR      r0,[r1,#0xc]          ;1411  ; SDIO_CmdInitStructure
001360  f44f6080          MOV      r0,#0x400             ;1412
001364  6108              STR      r0,[r1,#0x10]         ;1412  ; SDIO_CmdInitStructure
001366  4608              MOV      r0,r1                 ;1413
001368  f7fffffe          BL       SDIO_SendCommand
00136c  200c              MOVS     r0,#0xc               ;1415
00136e  f7fffffe          BL       CmdResp1Error
001372  4680              MOV      r8,r0                 ;1415
001374  f1b80f2a          CMP      r8,#0x2a              ;1417
001378  d002              BEQ      |L1.4992|
00137a  4640              MOV      r0,r8                 ;1419
00137c  e6ee              B        |L1.4444|
                  |L1.4990|
00137e  e004              B        |L1.5002|
                  |L1.4992|
001380  f24050ff          MOV      r0,#0x5ff             ;1424
001384  f7fffffe          BL       SDIO_ClearFlag
001388  e039              B        |L1.5118|
                  |L1.5002|
00138a  4853              LDR      r0,|L1.5336|
00138c  6800              LDR      r0,[r0,#0]            ;1426  ; DeviceMode
00138e  2801              CMP      r0,#1                 ;1426
001390  d113              BNE      |L1.5050|
001392  2101              MOVS     r1,#1                 ;1428
001394  f248302a          MOV      r0,#0x832a            ;1428
001398  f7fffffe          BL       SDIO_ITConfig
00139c  bf00              NOP                            ;1429
                  |L1.5022|
00139e  484f              LDR      r0,|L1.5340|
0013a0  6800              LDR      r0,[r0,#0]            ;1429  ; TransferEnd
0013a2  b918              CBNZ     r0,|L1.5036|
0013a4  484e              LDR      r0,|L1.5344|
0013a6  7800              LDRB     r0,[r0,#0]            ;1429  ; TransferError
0013a8  282a              CMP      r0,#0x2a              ;1429
0013aa  d0f8              BEQ      |L1.5022|
                  |L1.5036|
0013ac  484c              LDR      r0,|L1.5344|
0013ae  7800              LDRB     r0,[r0,#0]            ;1431  ; TransferError
0013b0  282a              CMP      r0,#0x2a              ;1431
0013b2  d024              BEQ      |L1.5118|
0013b4  484a              LDR      r0,|L1.5344|
0013b6  7800              LDRB     r0,[r0,#0]            ;1433  ; TransferError
0013b8  e6d0              B        |L1.4444|
                  |L1.5050|
0013ba  4847              LDR      r0,|L1.5336|
0013bc  6800              LDR      r0,[r0,#0]            ;1436  ; DeviceMode
0013be  b9f0              CBNZ     r0,|L1.5118|
0013c0  2101              MOVS     r1,#1                 ;1438
0013c2  f240302a          MOV      r0,#0x32a             ;1438
0013c6  f7fffffe          BL       SDIO_ITConfig
0013ca  2001              MOVS     r0,#1                 ;1439
0013cc  f7fffffe          BL       SDIO_DMACmd
0013d0  fb05f104          MUL      r1,r5,r4              ;1440
0013d4  4638              MOV      r0,r7                 ;1440
0013d6  f7fffffe          BL       SD_LowLevel_DMA_RxConfig
0013da  bf00              NOP                            ;1441
                  |L1.5084|
0013dc  f7fffffe          BL       SD_DMAEndOfTransferStatus
0013e0  b930              CBNZ     r0,|L1.5104|
0013e2  483e              LDR      r0,|L1.5340|
0013e4  6800              LDR      r0,[r0,#0]            ;1441  ; TransferEnd
0013e6  b918              CBNZ     r0,|L1.5104|
0013e8  483d              LDR      r0,|L1.5344|
0013ea  7800              LDRB     r0,[r0,#0]            ;1441  ; TransferError
0013ec  282a              CMP      r0,#0x2a              ;1441
0013ee  d0f5              BEQ      |L1.5084|
                  |L1.5104|
0013f0  483b              LDR      r0,|L1.5344|
0013f2  7800              LDRB     r0,[r0,#0]            ;1443  ; TransferError
0013f4  282a              CMP      r0,#0x2a              ;1443
0013f6  d002              BEQ      |L1.5118|
0013f8  4839              LDR      r0,|L1.5344|
0013fa  7800              LDRB     r0,[r0,#0]            ;1445  ; TransferError
0013fc  e6ae              B        |L1.4444|
                  |L1.5118|
0013fe  4640              MOV      r0,r8                 ;1449
001400  e6ac              B        |L1.4444|
;;;1451   
                          ENDP

                  IsCardProgramming PROC
;;;2848     */
;;;2849   static SD_Error IsCardProgramming(uint8_t *pstatus)
001402  b57c              PUSH     {r2-r6,lr}
;;;2850   {
001404  4604              MOV      r4,r0
;;;2851     SD_Error errorstatus = SD_OK;
001406  252a              MOVS     r5,#0x2a
;;;2852     __IO uint32_t respR1 = 0, status = 0;
001408  2000              MOVS     r0,#0
00140a  9001              STR      r0,[sp,#4]
00140c  9000              STR      r0,[sp,#0]
;;;2853   
;;;2854     SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
00140e  483d              LDR      r0,|L1.5380|
001410  8800              LDRH     r0,[r0,#0]  ; RCA
001412  0400              LSLS     r0,r0,#16
001414  4937              LDR      r1,|L1.5364|
001416  6008              STR      r0,[r1,#0]  ; SDIO_CmdInitStructure
;;;2855     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SEND_STATUS;
001418  200d              MOVS     r0,#0xd
00141a  6048              STR      r0,[r1,#4]  ; SDIO_CmdInitStructure
;;;2856     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
00141c  2040              MOVS     r0,#0x40
00141e  6088              STR      r0,[r1,#8]  ; SDIO_CmdInitStructure
;;;2857     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
001420  2000              MOVS     r0,#0
001422  60c8              STR      r0,[r1,#0xc]  ; SDIO_CmdInitStructure
;;;2858     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
001424  f44f6080          MOV      r0,#0x400
001428  6108              STR      r0,[r1,#0x10]  ; SDIO_CmdInitStructure
;;;2859     SDIO_SendCommand(&SDIO_CmdInitStructure);
00142a  4608              MOV      r0,r1
00142c  f7fffffe          BL       SDIO_SendCommand
;;;2860   
;;;2861     status = SDIO->STA;
001430  4833              LDR      r0,|L1.5376|
001432  6b40              LDR      r0,[r0,#0x34]
001434  9000              STR      r0,[sp,#0]
;;;2862     while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)))
001436  e002              B        |L1.5182|
                  |L1.5176|
;;;2863     {
;;;2864       status = SDIO->STA;
001438  4831              LDR      r0,|L1.5376|
00143a  6b40              LDR      r0,[r0,#0x34]
00143c  9000              STR      r0,[sp,#0]
                  |L1.5182|
00143e  9800              LDR      r0,[sp,#0]            ;2862
001440  f0000045          AND      r0,r0,#0x45           ;2862
001444  2800              CMP      r0,#0                 ;2862
001446  d0f7              BEQ      |L1.5176|
;;;2865     }
;;;2866   
;;;2867     if (status & SDIO_FLAG_CTIMEOUT)
001448  9800              LDR      r0,[sp,#0]
00144a  f0000004          AND      r0,r0,#4
00144e  b128              CBZ      r0,|L1.5212|
;;;2868     {
;;;2869       errorstatus = SD_CMD_RSP_TIMEOUT;
001450  2503              MOVS     r5,#3
;;;2870       SDIO_ClearFlag(SDIO_FLAG_CTIMEOUT);
001452  2004              MOVS     r0,#4
001454  f7fffffe          BL       SDIO_ClearFlag
;;;2871       return(errorstatus);
001458  4628              MOV      r0,r5
                  |L1.5210|
;;;2872     }
;;;2873     else if (status & SDIO_FLAG_CCRCFAIL)
;;;2874     {
;;;2875       errorstatus = SD_CMD_CRC_FAIL;
;;;2876       SDIO_ClearFlag(SDIO_FLAG_CCRCFAIL);
;;;2877       return(errorstatus);
;;;2878     }
;;;2879   
;;;2880     status = (uint32_t)SDIO_GetCommandResponse();
;;;2881   
;;;2882     /*!< Check response received is of desired command */
;;;2883     if (status != SD_CMD_SEND_STATUS)
;;;2884     {
;;;2885       errorstatus = SD_ILLEGAL_CMD;
;;;2886       return(errorstatus);
;;;2887     }
;;;2888   
;;;2889     /*!< Clear all the static flags */
;;;2890     SDIO_ClearFlag(SDIO_STATIC_FLAGS);
;;;2891   
;;;2892   
;;;2893     /*!< We have received response, retrieve it for analysis  */
;;;2894     respR1 = SDIO_GetResponse(SDIO_RESP1);
;;;2895   
;;;2896     /*!< Find out card status */
;;;2897     *pstatus = (uint8_t) ((respR1 >> 9) & 0x0000000F);
;;;2898   
;;;2899     if ((respR1 & SD_OCR_ERRORBITS) == SD_ALLZERO)
;;;2900     {
;;;2901       return(errorstatus);
;;;2902     }
;;;2903   
;;;2904     if (respR1 & SD_OCR_ADDR_OUT_OF_RANGE)
;;;2905     {
;;;2906       return(SD_ADDR_OUT_OF_RANGE);
;;;2907     }
;;;2908   
;;;2909     if (respR1 & SD_OCR_ADDR_MISALIGNED)
;;;2910     {
;;;2911       return(SD_ADDR_MISALIGNED);
;;;2912     }
;;;2913   
;;;2914     if (respR1 & SD_OCR_BLOCK_LEN_ERR)
;;;2915     {
;;;2916       return(SD_BLOCK_LEN_ERR);
;;;2917     }
;;;2918   
;;;2919     if (respR1 & SD_OCR_ERASE_SEQ_ERR)
;;;2920     {
;;;2921       return(SD_ERASE_SEQ_ERR);
;;;2922     }
;;;2923   
;;;2924     if (respR1 & SD_OCR_BAD_ERASE_PARAM)
;;;2925     {
;;;2926       return(SD_BAD_ERASE_PARAM);
;;;2927     }
;;;2928   
;;;2929     if (respR1 & SD_OCR_WRITE_PROT_VIOLATION)
;;;2930     {
;;;2931       return(SD_WRITE_PROT_VIOLATION);
;;;2932     }
;;;2933   
;;;2934     if (respR1 & SD_OCR_LOCK_UNLOCK_FAILED)
;;;2935     {
;;;2936       return(SD_LOCK_UNLOCK_FAILED);
;;;2937     }
;;;2938   
;;;2939     if (respR1 & SD_OCR_COM_CRC_FAILED)
;;;2940     {
;;;2941       return(SD_COM_CRC_FAILED);
;;;2942     }
;;;2943   
;;;2944     if (respR1 & SD_OCR_ILLEGAL_CMD)
;;;2945     {
;;;2946       return(SD_ILLEGAL_CMD);
;;;2947     }
;;;2948   
;;;2949     if (respR1 & SD_OCR_CARD_ECC_FAILED)
;;;2950     {
;;;2951       return(SD_CARD_ECC_FAILED);
;;;2952     }
;;;2953   
;;;2954     if (respR1 & SD_OCR_CC_ERROR)
;;;2955     {
;;;2956       return(SD_CC_ERROR);
;;;2957     }
;;;2958   
;;;2959     if (respR1 & SD_OCR_GENERAL_UNKNOWN_ERROR)
;;;2960     {
;;;2961       return(SD_GENERAL_UNKNOWN_ERROR);
;;;2962     }
;;;2963   
;;;2964     if (respR1 & SD_OCR_STREAM_READ_UNDERRUN)
;;;2965     {
;;;2966       return(SD_STREAM_READ_UNDERRUN);
;;;2967     }
;;;2968   
;;;2969     if (respR1 & SD_OCR_STREAM_WRITE_OVERRUN)
;;;2970     {
;;;2971       return(SD_STREAM_WRITE_OVERRUN);
;;;2972     }
;;;2973   
;;;2974     if (respR1 & SD_OCR_CID_CSD_OVERWRIETE)
;;;2975     {
;;;2976       return(SD_CID_CSD_OVERWRITE);
;;;2977     }
;;;2978   
;;;2979     if (respR1 & SD_OCR_WP_ERASE_SKIP)
;;;2980     {
;;;2981       return(SD_WP_ERASE_SKIP);
;;;2982     }
;;;2983   
;;;2984     if (respR1 & SD_OCR_CARD_ECC_DISABLED)
;;;2985     {
;;;2986       return(SD_CARD_ECC_DISABLED);
;;;2987     }
;;;2988   
;;;2989     if (respR1 & SD_OCR_ERASE_RESET)
;;;2990     {
;;;2991       return(SD_ERASE_RESET);
;;;2992     }
;;;2993   
;;;2994     if (respR1 & SD_OCR_AKE_SEQ_ERROR)
;;;2995     {
;;;2996       return(SD_AKE_SEQ_ERROR);
;;;2997     }
;;;2998   
;;;2999     return(errorstatus);
;;;3000   }
00145a  bd7c              POP      {r2-r6,pc}
                  |L1.5212|
00145c  9800              LDR      r0,[sp,#0]            ;2873
00145e  f0000001          AND      r0,r0,#1              ;2873
001462  b128              CBZ      r0,|L1.5232|
001464  2501              MOVS     r5,#1                 ;2875
001466  2001              MOVS     r0,#1                 ;2876
001468  f7fffffe          BL       SDIO_ClearFlag
00146c  4628              MOV      r0,r5                 ;2877
00146e  e7f4              B        |L1.5210|
                  |L1.5232|
001470  f7fffffe          BL       SDIO_GetCommandResponse
001474  9000              STR      r0,[sp,#0]            ;2880
001476  9800              LDR      r0,[sp,#0]            ;2883
001478  280d              CMP      r0,#0xd               ;2883
00147a  d002              BEQ      |L1.5250|
00147c  2510              MOVS     r5,#0x10              ;2885
00147e  4628              MOV      r0,r5                 ;2886
001480  e7eb              B        |L1.5210|
                  |L1.5250|
001482  f24050ff          MOV      r0,#0x5ff             ;2890
001486  f7fffffe          BL       SDIO_ClearFlag
00148a  2000              MOVS     r0,#0                 ;2894
00148c  f7fffffe          BL       SDIO_GetResponse
001490  9001              STR      r0,[sp,#4]            ;2894
001492  9801              LDR      r0,[sp,#4]            ;2897
001494  f3c02043          UBFX     r0,r0,#9,#4           ;2897
001498  7020              STRB     r0,[r4,#0]            ;2897
00149a  491b              LDR      r1,|L1.5384|
00149c  9801              LDR      r0,[sp,#4]            ;2899
00149e  4008              ANDS     r0,r0,r1              ;2899
0014a0  b908              CBNZ     r0,|L1.5286|
0014a2  4628              MOV      r0,r5                 ;2901
0014a4  e7d9              B        |L1.5210|
                  |L1.5286|
0014a6  9801              LDR      r0,[sp,#4]            ;2904
0014a8  f0004000          AND      r0,r0,#0x80000000     ;2904
0014ac  b108              CBZ      r0,|L1.5298|
0014ae  201c              MOVS     r0,#0x1c              ;2906
0014b0  e7d3              B        |L1.5210|
                  |L1.5298|
0014b2  9801              LDR      r0,[sp,#4]            ;2909
0014b4  f0004080          AND      r0,r0,#0x40000000     ;2909
0014b8  b108              CBZ      r0,|L1.5310|
0014ba  2009              MOVS     r0,#9                 ;2911
0014bc  e7cd              B        |L1.5210|
                  |L1.5310|
0014be  9801              LDR      r0,[sp,#4]            ;2914
0014c0  f0005000          AND      r0,r0,#0x20000000     ;2914
0014c4  b108              CBZ      r0,|L1.5322|
0014c6  200a              MOVS     r0,#0xa               ;2916
0014c8  e7c7              B        |L1.5210|
                  |L1.5322|
0014ca  9801              LDR      r0,[sp,#4]            ;2919
0014cc  f0005080          AND      r0,r0,#0x10000000     ;2919
0014d0  b1e0              CBZ      r0,|L1.5388|
0014d2  200b              MOVS     r0,#0xb               ;2921
0014d4  e7c1              B        |L1.5210|
0014d6  0000              DCW      0x0000
                  |L1.5336|
                          DCD      DeviceMode
                  |L1.5340|
                          DCD      TransferEnd
                  |L1.5344|
                          DCD      TransferError
                  |L1.5348|
                          DCD      TotalNumberOfBytes
                  |L1.5352|
                          DCD      0x000fffff
                  |L1.5356|
                          DCD      SDIO_DataInitStructure
                  |L1.5360|
                          DCD      CardType
                  |L1.5364|
                          DCD      SDIO_CmdInitStructure
                  |L1.5368|
                          DCD      StopCondition
                  |L1.5372|
                          DCD      DestBuffer
                  |L1.5376|
                          DCD      0x40018000
                  |L1.5380|
                          DCD      ||RCA||
                  |L1.5384|
                          DCD      0xfdffe008
                  |L1.5388|
00150c  9801              LDR      r0,[sp,#4]            ;2924
00150e  f0006000          AND      r0,r0,#0x8000000      ;2924
001512  b108              CBZ      r0,|L1.5400|
001514  200c              MOVS     r0,#0xc               ;2926
001516  e7a0              B        |L1.5210|
                  |L1.5400|
001518  9801              LDR      r0,[sp,#4]            ;2929
00151a  f0006080          AND      r0,r0,#0x4000000      ;2929
00151e  b108              CBZ      r0,|L1.5412|
001520  200d              MOVS     r0,#0xd               ;2931
001522  e79a              B        |L1.5210|
                  |L1.5412|
001524  9801              LDR      r0,[sp,#4]            ;2934
001526  f0007080          AND      r0,r0,#0x1000000      ;2934
00152a  b108              CBZ      r0,|L1.5424|
00152c  200e              MOVS     r0,#0xe               ;2936
00152e  e794              B        |L1.5210|
                  |L1.5424|
001530  9801              LDR      r0,[sp,#4]            ;2939
001532  f4000000          AND      r0,r0,#0x800000       ;2939
001536  b108              CBZ      r0,|L1.5436|
001538  200f              MOVS     r0,#0xf               ;2941
00153a  e78e              B        |L1.5210|
                  |L1.5436|
00153c  9801              LDR      r0,[sp,#4]            ;2944
00153e  f4000080          AND      r0,r0,#0x400000       ;2944
001542  b108              CBZ      r0,|L1.5448|
001544  2010              MOVS     r0,#0x10              ;2946
001546  e788              B        |L1.5210|
                  |L1.5448|
001548  9801              LDR      r0,[sp,#4]            ;2949
00154a  f4001000          AND      r0,r0,#0x200000       ;2949
00154e  b108              CBZ      r0,|L1.5460|
001550  2011              MOVS     r0,#0x11              ;2951
001552  e782              B        |L1.5210|
                  |L1.5460|
001554  9801              LDR      r0,[sp,#4]            ;2954
001556  f4001080          AND      r0,r0,#0x100000       ;2954
00155a  b108              CBZ      r0,|L1.5472|
00155c  2012              MOVS     r0,#0x12              ;2956
00155e  e77c              B        |L1.5210|
                  |L1.5472|
001560  9801              LDR      r0,[sp,#4]            ;2959
001562  f4002000          AND      r0,r0,#0x80000        ;2959
001566  b108              CBZ      r0,|L1.5484|
001568  2013              MOVS     r0,#0x13              ;2961
00156a  e776              B        |L1.5210|
                  |L1.5484|
00156c  9801              LDR      r0,[sp,#4]            ;2964
00156e  f4002080          AND      r0,r0,#0x40000        ;2964
001572  b108              CBZ      r0,|L1.5496|
001574  2014              MOVS     r0,#0x14              ;2966
001576  e770              B        |L1.5210|
                  |L1.5496|
001578  9801              LDR      r0,[sp,#4]            ;2969
00157a  f4003000          AND      r0,r0,#0x20000        ;2969
00157e  b108              CBZ      r0,|L1.5508|
001580  2015              MOVS     r0,#0x15              ;2971
001582  e76a              B        |L1.5210|
                  |L1.5508|
001584  9801              LDR      r0,[sp,#4]            ;2974
001586  f4003080          AND      r0,r0,#0x10000        ;2974
00158a  b108              CBZ      r0,|L1.5520|
00158c  2016              MOVS     r0,#0x16              ;2976
00158e  e764              B        |L1.5210|
                  |L1.5520|
001590  9801              LDR      r0,[sp,#4]            ;2979
001592  f4004000          AND      r0,r0,#0x8000         ;2979
001596  b108              CBZ      r0,|L1.5532|
001598  2017              MOVS     r0,#0x17              ;2981
00159a  e75e              B        |L1.5210|
                  |L1.5532|
00159c  9801              LDR      r0,[sp,#4]            ;2984
00159e  f4004080          AND      r0,r0,#0x4000         ;2984
0015a2  b108              CBZ      r0,|L1.5544|
0015a4  2018              MOVS     r0,#0x18              ;2986
0015a6  e758              B        |L1.5210|
                  |L1.5544|
0015a8  9801              LDR      r0,[sp,#4]            ;2989
0015aa  f4005000          AND      r0,r0,#0x2000         ;2989
0015ae  b108              CBZ      r0,|L1.5556|
0015b0  2019              MOVS     r0,#0x19              ;2991
0015b2  e752              B        |L1.5210|
                  |L1.5556|
0015b4  9801              LDR      r0,[sp,#4]            ;2994
0015b6  f0000008          AND      r0,r0,#8              ;2994
0015ba  b108              CBZ      r0,|L1.5568|
0015bc  201a              MOVS     r0,#0x1a              ;2996
0015be  e74c              B        |L1.5210|
                  |L1.5568|
0015c0  4628              MOV      r0,r5                 ;2999
0015c2  e74a              B        |L1.5210|
;;;3001   
                          ENDP

                  SD_WriteBlock PROC
;;;1458     */
;;;1459   SD_Error SD_WriteBlock(uint32_t *writebuff, uint32_t WriteAddr, uint16_t BlockSize)
0015c4  e92d5fff          PUSH     {r0-r12,lr}
;;;1460   {
0015c8  4681              MOV      r9,r0
0015ca  468a              MOV      r10,r1
0015cc  4614              MOV      r4,r2
;;;1461     SD_Error errorstatus = SD_OK;
0015ce  252a              MOVS     r5,#0x2a
;;;1462     uint8_t  power = 0, cardstate = 0;
0015d0  2000              MOVS     r0,#0
0015d2  9003              STR      r0,[sp,#0xc]
0015d4  9002              STR      r0,[sp,#8]
;;;1463     uint32_t timeout = 0, bytestransferred = 0;
0015d6  4683              MOV      r11,r0
0015d8  2600              MOVS     r6,#0
;;;1464     uint32_t cardstatus = 0, count = 0, restwords = 0;
0015da  9001              STR      r0,[sp,#4]
0015dc  2700              MOVS     r7,#0
0015de  9000              STR      r0,[sp,#0]
;;;1465     uint32_t *tempbuff = (uint32_t *)writebuff;
0015e0  46c8              MOV      r8,r9
;;;1466   
;;;1467     if (writebuff == NULL)
0015e2  f1b90f00          CMP      r9,#0
0015e6  d104              BNE      |L1.5618|
;;;1468     {
;;;1469       errorstatus = SD_INVALID_PARAMETER;
0015e8  2526              MOVS     r5,#0x26
;;;1470       return(errorstatus);
0015ea  4628              MOV      r0,r5
                  |L1.5612|
;;;1471     }
;;;1472   
;;;1473     TransferError = SD_OK;
;;;1474     TransferEnd = 0;
;;;1475     TotalNumberOfBytes = 0;
;;;1476   
;;;1477     SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
;;;1478     SDIO_DataInitStructure.SDIO_DataLength = 0;
;;;1479     SDIO_DataInitStructure.SDIO_DataBlockSize = SDIO_DataBlockSize_1b;
;;;1480     SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToCard;
;;;1481     SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
;;;1482     SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Disable;
;;;1483     SDIO_DataConfig(&SDIO_DataInitStructure);
;;;1484     SDIO_DMACmd(DISABLE);
;;;1485   
;;;1486     if (SDIO_GetResponse(SDIO_RESP1) & SD_CARD_LOCKED)
;;;1487     {
;;;1488       errorstatus = SD_LOCK_UNLOCK_FAILED;
;;;1489       return(errorstatus);
;;;1490     }
;;;1491   
;;;1492     if (CardType == SDIO_HIGH_CAPACITY_SD_CARD)
;;;1493     {
;;;1494       BlockSize = 512;
;;;1495       WriteAddr /= 512;
;;;1496     }
;;;1497     
;;;1498     /*!< Set the block size, both on controller and card */
;;;1499     if ((BlockSize > 0) && (BlockSize <= 2048) && ((BlockSize & (BlockSize - 1)) == 0))
;;;1500     {
;;;1501       power = convert_from_bytes_to_power_of_two(BlockSize);
;;;1502   
;;;1503       SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) BlockSize;
;;;1504       SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_BLOCKLEN;
;;;1505       SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1506       SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1507       SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1508       SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1509   
;;;1510       errorstatus = CmdResp1Error(SD_CMD_SET_BLOCKLEN);
;;;1511   
;;;1512       if (errorstatus != SD_OK)
;;;1513       {
;;;1514         return(errorstatus);
;;;1515       }
;;;1516     }
;;;1517     else
;;;1518     {
;;;1519       errorstatus = SD_INVALID_PARAMETER;
;;;1520       return(errorstatus);
;;;1521     }
;;;1522   
;;;1523     /*!< Wait till card is ready for data Added */
;;;1524     SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) (RCA << 16);
;;;1525     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SEND_STATUS;
;;;1526     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1527     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1528     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1529     SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1530   
;;;1531     errorstatus = CmdResp1Error(SD_CMD_SEND_STATUS);
;;;1532   
;;;1533     if (errorstatus != SD_OK)
;;;1534     {
;;;1535       return(errorstatus);
;;;1536     }
;;;1537   
;;;1538     cardstatus = SDIO_GetResponse(SDIO_RESP1);
;;;1539   
;;;1540     timeout = SD_DATATIMEOUT;
;;;1541   
;;;1542     while (((cardstatus & 0x00000100) == 0) && (timeout > 0))
;;;1543     {
;;;1544       timeout--;
;;;1545       SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) (RCA << 16);
;;;1546       SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SEND_STATUS;
;;;1547       SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1548       SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1549       SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1550       SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1551   
;;;1552       errorstatus = CmdResp1Error(SD_CMD_SEND_STATUS);
;;;1553   
;;;1554       if (errorstatus != SD_OK)
;;;1555       {
;;;1556         return(errorstatus);
;;;1557       }
;;;1558       cardstatus = SDIO_GetResponse(SDIO_RESP1);
;;;1559     }
;;;1560   
;;;1561     if (timeout == 0)
;;;1562     {
;;;1563       return(SD_ERROR);
;;;1564     }
;;;1565   
;;;1566     /*!< Send CMD24 WRITE_SINGLE_BLOCK */
;;;1567     SDIO_CmdInitStructure.SDIO_Argument = WriteAddr;
;;;1568     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_WRITE_SINGLE_BLOCK;
;;;1569     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1570     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1571     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1572     SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1573   
;;;1574     errorstatus = CmdResp1Error(SD_CMD_WRITE_SINGLE_BLOCK);
;;;1575   
;;;1576     if (errorstatus != SD_OK)
;;;1577     {
;;;1578       return(errorstatus);
;;;1579     }
;;;1580   
;;;1581     TotalNumberOfBytes = BlockSize;
;;;1582     StopCondition = 0;
;;;1583     SrcBuffer = (uint32_t *)writebuff;
;;;1584   
;;;1585     SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
;;;1586     SDIO_DataInitStructure.SDIO_DataLength = BlockSize;
;;;1587     SDIO_DataInitStructure.SDIO_DataBlockSize = (uint32_t) power << 4;
;;;1588     SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToCard;
;;;1589     SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
;;;1590     SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
;;;1591     SDIO_DataConfig(&SDIO_DataInitStructure);
;;;1592   
;;;1593     /*!< In case of single data block transfer no need of stop command at all */
;;;1594     if (DeviceMode == SD_POLLING_MODE)
;;;1595     {
;;;1596       while (!(SDIO->STA & (SDIO_FLAG_DBCKEND | SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_STBITERR)))
;;;1597       {
;;;1598         if (SDIO_GetFlagStatus(SDIO_FLAG_TXFIFOHE) != RESET)
;;;1599         {
;;;1600           if ((TotalNumberOfBytes - bytestransferred) < 32)
;;;1601           {
;;;1602             restwords = ((TotalNumberOfBytes - bytestransferred) % 4 == 0) ? ((TotalNumberOfBytes - bytestransferred) / 4) : (( TotalNumberOfBytes -  bytestransferred) / 4 + 1);
;;;1603   
;;;1604             for (count = 0; count < restwords; count++, tempbuff++, bytestransferred += 4)
;;;1605             {
;;;1606               SDIO_WriteData(*tempbuff);
;;;1607             }
;;;1608           }
;;;1609           else
;;;1610           {
;;;1611             for (count = 0; count < 8; count++)
;;;1612             {
;;;1613               SDIO_WriteData(*(tempbuff + count));
;;;1614             }
;;;1615             tempbuff += 8;
;;;1616             bytestransferred += 32;
;;;1617           }
;;;1618         }
;;;1619       }
;;;1620       if (SDIO_GetFlagStatus(SDIO_FLAG_DTIMEOUT) != RESET)
;;;1621       {
;;;1622         SDIO_ClearFlag(SDIO_FLAG_DTIMEOUT);
;;;1623         errorstatus = SD_DATA_TIMEOUT;
;;;1624         return(errorstatus);
;;;1625       }
;;;1626       else if (SDIO_GetFlagStatus(SDIO_FLAG_DCRCFAIL) != RESET)
;;;1627       {
;;;1628         SDIO_ClearFlag(SDIO_FLAG_DCRCFAIL);
;;;1629         errorstatus = SD_DATA_CRC_FAIL;
;;;1630         return(errorstatus);
;;;1631       }
;;;1632       else if (SDIO_GetFlagStatus(SDIO_FLAG_TXUNDERR) != RESET)
;;;1633       {
;;;1634         SDIO_ClearFlag(SDIO_FLAG_TXUNDERR);
;;;1635         errorstatus = SD_TX_UNDERRUN;
;;;1636         return(errorstatus);
;;;1637       }
;;;1638       else if (SDIO_GetFlagStatus(SDIO_FLAG_STBITERR) != RESET)
;;;1639       {
;;;1640         SDIO_ClearFlag(SDIO_FLAG_STBITERR);
;;;1641         errorstatus = SD_START_BIT_ERR;
;;;1642         return(errorstatus);
;;;1643       }
;;;1644     }
;;;1645     else if (DeviceMode == SD_INTERRUPT_MODE)
;;;1646     {
;;;1647       SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND | SDIO_FLAG_TXFIFOHE | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR, ENABLE);
;;;1648       while ((TransferEnd == 0) && (TransferError == SD_OK))
;;;1649       {}
;;;1650       if (TransferError != SD_OK)
;;;1651       {
;;;1652         return(TransferError);
;;;1653       }
;;;1654     }
;;;1655     else if (DeviceMode == SD_DMA_MODE)
;;;1656     {
;;;1657       SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR, ENABLE);
;;;1658       SD_LowLevel_DMA_TxConfig((uint32_t *)writebuff, BlockSize);
;;;1659       SDIO_DMACmd(ENABLE);
;;;1660       while ((SD_DMAEndOfTransferStatus() == RESET) && (TransferEnd == 0) && (TransferError == SD_OK))
;;;1661       {}
;;;1662       if (TransferError != SD_OK)
;;;1663       {
;;;1664         return(TransferError);
;;;1665       }
;;;1666     }
;;;1667   
;;;1668     /*!< Clear all the static flags */
;;;1669     SDIO_ClearFlag(SDIO_STATIC_FLAGS);
;;;1670   
;;;1671     /*!< Wait till the card is in programming state */
;;;1672     errorstatus = IsCardProgramming(&cardstate);
;;;1673   
;;;1674     while ((errorstatus == SD_OK) && ((cardstate == SD_CARD_PROGRAMMING) || (cardstate == SD_CARD_RECEIVING)))
;;;1675     {
;;;1676       errorstatus = IsCardProgramming(&cardstate);
;;;1677     }
;;;1678   
;;;1679     return(errorstatus);
;;;1680   }
0015ec  b004              ADD      sp,sp,#0x10
0015ee  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.5618|
0015f2  202a              MOVS     r0,#0x2a              ;1473
0015f4  49fe              LDR      r1,|L1.6640|
0015f6  7008              STRB     r0,[r1,#0]            ;1473
0015f8  2000              MOVS     r0,#0                 ;1474
0015fa  49fe              LDR      r1,|L1.6644|
0015fc  6008              STR      r0,[r1,#0]            ;1474  ; TransferEnd
0015fe  49fe              LDR      r1,|L1.6648|
001600  6008              STR      r0,[r1,#0]            ;1475  ; TotalNumberOfBytes
001602  48fe              LDR      r0,|L1.6652|
001604  49fe              LDR      r1,|L1.6656|
001606  6008              STR      r0,[r1,#0]            ;1477  ; SDIO_DataInitStructure
001608  2000              MOVS     r0,#0                 ;1478
00160a  6048              STR      r0,[r1,#4]            ;1478  ; SDIO_DataInitStructure
00160c  6088              STR      r0,[r1,#8]            ;1479  ; SDIO_DataInitStructure
00160e  60c8              STR      r0,[r1,#0xc]          ;1480  ; SDIO_DataInitStructure
001610  6108              STR      r0,[r1,#0x10]         ;1481  ; SDIO_DataInitStructure
001612  6148              STR      r0,[r1,#0x14]         ;1482  ; SDIO_DataInitStructure
001614  4608              MOV      r0,r1                 ;1483
001616  f7fffffe          BL       SDIO_DataConfig
00161a  2000              MOVS     r0,#0                 ;1484
00161c  f7fffffe          BL       SDIO_DMACmd
001620  2000              MOVS     r0,#0                 ;1486
001622  f7fffffe          BL       SDIO_GetResponse
001626  f0007000          AND      r0,r0,#0x2000000      ;1486
00162a  b110              CBZ      r0,|L1.5682|
00162c  250e              MOVS     r5,#0xe               ;1488
00162e  4628              MOV      r0,r5                 ;1489
001630  e7dc              B        |L1.5612|
                  |L1.5682|
001632  48f4              LDR      r0,|L1.6660|
001634  6800              LDR      r0,[r0,#0]            ;1492  ; CardType
001636  2802              CMP      r0,#2                 ;1492
001638  d102              BNE      |L1.5696|
00163a  0204              LSLS     r4,r0,#8              ;1494
00163c  ea4f2a5a          LSR      r10,r10,#9            ;1495
                  |L1.5696|
001640  2c00              CMP      r4,#0                 ;1499
001642  dd20              BLE      |L1.5766|
001644  f5b46f00          CMP      r4,#0x800             ;1499
001648  dc1d              BGT      |L1.5766|
00164a  1e60              SUBS     r0,r4,#1              ;1499
00164c  4020              ANDS     r0,r0,r4              ;1499
00164e  b9d0              CBNZ     r0,|L1.5766|
001650  4620              MOV      r0,r4                 ;1501
001652  f7fffffe          BL       convert_from_bytes_to_power_of_two
001656  9003              STR      r0,[sp,#0xc]          ;1501
001658  48eb              LDR      r0,|L1.6664|
00165a  6004              STR      r4,[r0,#0]            ;1503  ; SDIO_CmdInitStructure
00165c  2010              MOVS     r0,#0x10              ;1504
00165e  49ea              LDR      r1,|L1.6664|
001660  6048              STR      r0,[r1,#4]            ;1504  ; SDIO_CmdInitStructure
001662  2040              MOVS     r0,#0x40              ;1505
001664  6088              STR      r0,[r1,#8]            ;1505  ; SDIO_CmdInitStructure
001666  2000              MOVS     r0,#0                 ;1506
001668  60c8              STR      r0,[r1,#0xc]          ;1506  ; SDIO_CmdInitStructure
00166a  f44f6080          MOV      r0,#0x400             ;1507
00166e  6108              STR      r0,[r1,#0x10]         ;1507  ; SDIO_CmdInitStructure
001670  4608              MOV      r0,r1                 ;1508
001672  f7fffffe          BL       SDIO_SendCommand
001676  2010              MOVS     r0,#0x10              ;1510
001678  f7fffffe          BL       CmdResp1Error
00167c  4605              MOV      r5,r0                 ;1510
00167e  2d2a              CMP      r5,#0x2a              ;1512
001680  d004              BEQ      |L1.5772|
001682  4628              MOV      r0,r5                 ;1514
001684  e7b2              B        |L1.5612|
                  |L1.5766|
001686  2526              MOVS     r5,#0x26              ;1519
001688  4628              MOV      r0,r5                 ;1520
00168a  e7af              B        |L1.5612|
                  |L1.5772|
00168c  48df              LDR      r0,|L1.6668|
00168e  8800              LDRH     r0,[r0,#0]            ;1524  ; RCA
001690  0400              LSLS     r0,r0,#16             ;1524
001692  49dd              LDR      r1,|L1.6664|
001694  6008              STR      r0,[r1,#0]            ;1524  ; SDIO_CmdInitStructure
001696  200d              MOVS     r0,#0xd               ;1525
001698  6048              STR      r0,[r1,#4]            ;1525  ; SDIO_CmdInitStructure
00169a  2040              MOVS     r0,#0x40              ;1526
00169c  6088              STR      r0,[r1,#8]            ;1526  ; SDIO_CmdInitStructure
00169e  2000              MOVS     r0,#0                 ;1527
0016a0  60c8              STR      r0,[r1,#0xc]          ;1527  ; SDIO_CmdInitStructure
0016a2  f44f6080          MOV      r0,#0x400             ;1528
0016a6  6108              STR      r0,[r1,#0x10]         ;1528  ; SDIO_CmdInitStructure
0016a8  4608              MOV      r0,r1                 ;1529
0016aa  f7fffffe          BL       SDIO_SendCommand
0016ae  200d              MOVS     r0,#0xd               ;1531
0016b0  f7fffffe          BL       CmdResp1Error
0016b4  4605              MOV      r5,r0                 ;1531
0016b6  2d2a              CMP      r5,#0x2a              ;1533
0016b8  d001              BEQ      |L1.5822|
0016ba  4628              MOV      r0,r5                 ;1535
0016bc  e796              B        |L1.5612|
                  |L1.5822|
0016be  2000              MOVS     r0,#0                 ;1538
0016c0  f7fffffe          BL       SDIO_GetResponse
0016c4  9001              STR      r0,[sp,#4]            ;1538
0016c6  f8dfb334          LDR      r11,|L1.6652|
0016ca  e01e              B        |L1.5898|
                  |L1.5836|
0016cc  f1ab0b01          SUB      r11,r11,#1            ;1544
0016d0  48ce              LDR      r0,|L1.6668|
0016d2  8800              LDRH     r0,[r0,#0]            ;1545  ; RCA
0016d4  0400              LSLS     r0,r0,#16             ;1545
0016d6  49cc              LDR      r1,|L1.6664|
0016d8  6008              STR      r0,[r1,#0]            ;1545  ; SDIO_CmdInitStructure
0016da  200d              MOVS     r0,#0xd               ;1546
0016dc  6048              STR      r0,[r1,#4]            ;1546  ; SDIO_CmdInitStructure
0016de  2040              MOVS     r0,#0x40              ;1547
0016e0  6088              STR      r0,[r1,#8]            ;1547  ; SDIO_CmdInitStructure
0016e2  2000              MOVS     r0,#0                 ;1548
0016e4  60c8              STR      r0,[r1,#0xc]          ;1548  ; SDIO_CmdInitStructure
0016e6  f44f6080          MOV      r0,#0x400             ;1549
0016ea  6108              STR      r0,[r1,#0x10]         ;1549  ; SDIO_CmdInitStructure
0016ec  4608              MOV      r0,r1                 ;1550
0016ee  f7fffffe          BL       SDIO_SendCommand
0016f2  200d              MOVS     r0,#0xd               ;1552
0016f4  f7fffffe          BL       CmdResp1Error
0016f8  4605              MOV      r5,r0                 ;1552
0016fa  2d2a              CMP      r5,#0x2a              ;1554
0016fc  d001              BEQ      |L1.5890|
0016fe  4628              MOV      r0,r5                 ;1556
001700  e774              B        |L1.5612|
                  |L1.5890|
001702  2000              MOVS     r0,#0                 ;1558
001704  f7fffffe          BL       SDIO_GetResponse
001708  9001              STR      r0,[sp,#4]            ;1558
                  |L1.5898|
00170a  9801              LDR      r0,[sp,#4]            ;1542
00170c  f4007080          AND      r0,r0,#0x100          ;1542
001710  b910              CBNZ     r0,|L1.5912|
001712  f1bb0f00          CMP      r11,#0                ;1542
001716  d1d9              BNE      |L1.5836|
                  |L1.5912|
001718  f1bb0f00          CMP      r11,#0                ;1561
00171c  d101              BNE      |L1.5922|
00171e  2029              MOVS     r0,#0x29              ;1563
001720  e764              B        |L1.5612|
                  |L1.5922|
001722  48b9              LDR      r0,|L1.6664|
001724  f8c0a000          STR      r10,[r0,#0]           ;1567  ; SDIO_CmdInitStructure
001728  2018              MOVS     r0,#0x18              ;1568
00172a  49b7              LDR      r1,|L1.6664|
00172c  6048              STR      r0,[r1,#4]            ;1568  ; SDIO_CmdInitStructure
00172e  2040              MOVS     r0,#0x40              ;1569
001730  6088              STR      r0,[r1,#8]            ;1569  ; SDIO_CmdInitStructure
001732  2000              MOVS     r0,#0                 ;1570
001734  60c8              STR      r0,[r1,#0xc]          ;1570  ; SDIO_CmdInitStructure
001736  f44f6080          MOV      r0,#0x400             ;1571
00173a  6108              STR      r0,[r1,#0x10]         ;1571  ; SDIO_CmdInitStructure
00173c  4608              MOV      r0,r1                 ;1572
00173e  f7fffffe          BL       SDIO_SendCommand
001742  2018              MOVS     r0,#0x18              ;1574
001744  f7fffffe          BL       CmdResp1Error
001748  4605              MOV      r5,r0                 ;1574
00174a  2d2a              CMP      r5,#0x2a              ;1576
00174c  d001              BEQ      |L1.5970|
00174e  4628              MOV      r0,r5                 ;1578
001750  e74c              B        |L1.5612|
                  |L1.5970|
001752  48a9              LDR      r0,|L1.6648|
001754  6004              STR      r4,[r0,#0]            ;1581  ; TotalNumberOfBytes
001756  2000              MOVS     r0,#0                 ;1582
001758  49ad              LDR      r1,|L1.6672|
00175a  6008              STR      r0,[r1,#0]            ;1582  ; StopCondition
00175c  48ad              LDR      r0,|L1.6676|
00175e  f8c09000          STR      r9,[r0,#0]            ;1583  ; SrcBuffer
001762  48a6              LDR      r0,|L1.6652|
001764  49a6              LDR      r1,|L1.6656|
001766  6008              STR      r0,[r1,#0]            ;1585  ; SDIO_DataInitStructure
001768  4608              MOV      r0,r1                 ;1586
00176a  6044              STR      r4,[r0,#4]            ;1586  ; SDIO_DataInitStructure
00176c  9803              LDR      r0,[sp,#0xc]          ;1587
00176e  0100              LSLS     r0,r0,#4              ;1587
001770  6088              STR      r0,[r1,#8]            ;1587  ; SDIO_DataInitStructure
001772  2000              MOVS     r0,#0                 ;1588
001774  60c8              STR      r0,[r1,#0xc]          ;1588  ; SDIO_DataInitStructure
001776  6108              STR      r0,[r1,#0x10]         ;1589  ; SDIO_DataInitStructure
001778  2001              MOVS     r0,#1                 ;1590
00177a  6148              STR      r0,[r1,#0x14]         ;1590  ; SDIO_DataInitStructure
00177c  4608              MOV      r0,r1                 ;1591
00177e  f7fffffe          BL       SDIO_DataConfig
001782  48a5              LDR      r0,|L1.6680|
001784  6800              LDR      r0,[r0,#0]            ;1594  ; DeviceMode
001786  2802              CMP      r0,#2                 ;1594
001788  d166              BNE      |L1.6232|
00178a  e034              B        |L1.6134|
                  |L1.6028|
00178c  f44f4080          MOV      r0,#0x4000            ;1598
001790  f7fffffe          BL       SDIO_GetFlagStatus
001794  b378              CBZ      r0,|L1.6134|
001796  4898              LDR      r0,|L1.6648|
001798  6800              LDR      r0,[r0,#0]            ;1600  ; TotalNumberOfBytes
00179a  1b80              SUBS     r0,r0,r6              ;1600
00179c  2820              CMP      r0,#0x20              ;1600
00179e  d21e              BCS      |L1.6110|
0017a0  4895              LDR      r0,|L1.6648|
0017a2  7800              LDRB     r0,[r0,#0]            ;1602  ; TotalNumberOfBytes
0017a4  1b80              SUBS     r0,r0,r6              ;1602
0017a6  f0000003          AND      r0,r0,#3              ;1602
0017aa  b920              CBNZ     r0,|L1.6070|
0017ac  4892              LDR      r0,|L1.6648|
0017ae  6800              LDR      r0,[r0,#0]            ;1602  ; TotalNumberOfBytes
0017b0  1b80              SUBS     r0,r0,r6              ;1602
0017b2  0880              LSRS     r0,r0,#2              ;1602
0017b4  e004              B        |L1.6080|
                  |L1.6070|
0017b6  4890              LDR      r0,|L1.6648|
0017b8  6800              LDR      r0,[r0,#0]            ;1602  ; TotalNumberOfBytes
0017ba  1b80              SUBS     r0,r0,r6              ;1602
0017bc  0880              LSRS     r0,r0,#2              ;1602
0017be  1c40              ADDS     r0,r0,#1              ;1602
                  |L1.6080|
0017c0  9000              STR      r0,[sp,#0]            ;1602
0017c2  2700              MOVS     r7,#0                 ;1604
0017c4  e007              B        |L1.6102|
                  |L1.6086|
0017c6  f8d80000          LDR      r0,[r8,#0]            ;1606
0017ca  f7fffffe          BL       SDIO_WriteData
0017ce  1c7f              ADDS     r7,r7,#1              ;1604
0017d0  f1080804          ADD      r8,r8,#4              ;1604
0017d4  1d36              ADDS     r6,r6,#4              ;1604
                  |L1.6102|
0017d6  9800              LDR      r0,[sp,#0]            ;1604
0017d8  4287              CMP      r7,r0                 ;1604
0017da  d20c              BCS      |L1.6134|
0017dc  e7f3              B        |L1.6086|
                  |L1.6110|
0017de  2700              MOVS     r7,#0                 ;1611
0017e0  e004              B        |L1.6124|
                  |L1.6114|
0017e2  f8580027          LDR      r0,[r8,r7,LSL #2]     ;1613
0017e6  f7fffffe          BL       SDIO_WriteData
0017ea  1c7f              ADDS     r7,r7,#1              ;1611
                  |L1.6124|
0017ec  2f08              CMP      r7,#8                 ;1611
0017ee  d3f8              BCC      |L1.6114|
0017f0  f1080820          ADD      r8,r8,#0x20           ;1615
0017f4  3620              ADDS     r6,r6,#0x20           ;1616
                  |L1.6134|
0017f6  4889              LDR      r0,|L1.6684|
0017f8  6b40              LDR      r0,[r0,#0x34]         ;1596
0017fa  f240611a          MOV      r1,#0x61a             ;1596
0017fe  4008              ANDS     r0,r0,r1              ;1596
001800  2800              CMP      r0,#0                 ;1596
001802  d0c3              BEQ      |L1.6028|
001804  2008              MOVS     r0,#8                 ;1620
001806  f7fffffe          BL       SDIO_GetFlagStatus
00180a  b128              CBZ      r0,|L1.6168|
00180c  2008              MOVS     r0,#8                 ;1622
00180e  f7fffffe          BL       SDIO_ClearFlag
001812  2504              MOVS     r5,#4                 ;1623
001814  4628              MOV      r0,r5                 ;1624
001816  e6e9              B        |L1.5612|
                  |L1.6168|
001818  2002              MOVS     r0,#2                 ;1626
00181a  f7fffffe          BL       SDIO_GetFlagStatus
00181e  b128              CBZ      r0,|L1.6188|
001820  2002              MOVS     r0,#2                 ;1628
001822  f7fffffe          BL       SDIO_ClearFlag
001826  2502              MOVS     r5,#2                 ;1629
001828  4628              MOV      r0,r5                 ;1630
00182a  e6df              B        |L1.5612|
                  |L1.6188|
00182c  2010              MOVS     r0,#0x10              ;1632
00182e  f7fffffe          BL       SDIO_GetFlagStatus
001832  b128              CBZ      r0,|L1.6208|
001834  2010              MOVS     r0,#0x10              ;1634
001836  f7fffffe          BL       SDIO_ClearFlag
00183a  2505              MOVS     r5,#5                 ;1635
00183c  4628              MOV      r0,r5                 ;1636
00183e  e6d5              B        |L1.5612|
                  |L1.6208|
001840  f44f7000          MOV      r0,#0x200             ;1638
001844  f7fffffe          BL       SDIO_GetFlagStatus
001848  b3f0              CBZ      r0,|L1.6344|
00184a  f44f7000          MOV      r0,#0x200             ;1640
00184e  f7fffffe          BL       SDIO_ClearFlag
001852  2507              MOVS     r5,#7                 ;1641
001854  4628              MOV      r0,r5                 ;1642
001856  e6c9              B        |L1.5612|
                  |L1.6232|
001858  486f              LDR      r0,|L1.6680|
00185a  6800              LDR      r0,[r0,#0]            ;1645  ; DeviceMode
00185c  2801              CMP      r0,#1                 ;1645
00185e  d113              BNE      |L1.6280|
001860  2101              MOVS     r1,#1                 ;1647
001862  f244301a          MOV      r0,#0x431a            ;1647
001866  f7fffffe          BL       SDIO_ITConfig
00186a  bf00              NOP                            ;1648
                  |L1.6252|
00186c  4861              LDR      r0,|L1.6644|
00186e  6800              LDR      r0,[r0,#0]            ;1648  ; TransferEnd
001870  b918              CBNZ     r0,|L1.6266|
001872  485f              LDR      r0,|L1.6640|
001874  7800              LDRB     r0,[r0,#0]            ;1648  ; TransferError
001876  282a              CMP      r0,#0x2a              ;1648
001878  d0f8              BEQ      |L1.6252|
                  |L1.6266|
00187a  485d              LDR      r0,|L1.6640|
00187c  7800              LDRB     r0,[r0,#0]            ;1650  ; TransferError
00187e  282a              CMP      r0,#0x2a              ;1650
001880  d025              BEQ      |L1.6350|
001882  485b              LDR      r0,|L1.6640|
001884  7800              LDRB     r0,[r0,#0]            ;1652  ; TransferError
001886  e6b1              B        |L1.5612|
                  |L1.6280|
001888  4863              LDR      r0,|L1.6680|
00188a  6800              LDR      r0,[r0,#0]            ;1655  ; DeviceMode
00188c  b9e0              CBNZ     r0,|L1.6344|
00188e  2101              MOVS     r1,#1                 ;1657
001890  f240301a          MOV      r0,#0x31a             ;1657
001894  f7fffffe          BL       SDIO_ITConfig
001898  4621              MOV      r1,r4                 ;1658
00189a  4648              MOV      r0,r9                 ;1658
00189c  f7fffffe          BL       SD_LowLevel_DMA_TxConfig
0018a0  2001              MOVS     r0,#1                 ;1659
0018a2  f7fffffe          BL       SDIO_DMACmd
0018a6  bf00              NOP                            ;1660
                  |L1.6312|
0018a8  f7fffffe          BL       SD_DMAEndOfTransferStatus
0018ac  b930              CBNZ     r0,|L1.6332|
0018ae  4851              LDR      r0,|L1.6644|
0018b0  6800              LDR      r0,[r0,#0]            ;1660  ; TransferEnd
0018b2  b918              CBNZ     r0,|L1.6332|
0018b4  484e              LDR      r0,|L1.6640|
0018b6  7800              LDRB     r0,[r0,#0]            ;1660  ; TransferError
0018b8  282a              CMP      r0,#0x2a              ;1660
0018ba  d0f5              BEQ      |L1.6312|
                  |L1.6332|
0018bc  484c              LDR      r0,|L1.6640|
0018be  7800              LDRB     r0,[r0,#0]            ;1662  ; TransferError
0018c0  282a              CMP      r0,#0x2a              ;1662
0018c2  d004              BEQ      |L1.6350|
0018c4  484a              LDR      r0,|L1.6640|
0018c6  e000              B        |L1.6346|
                  |L1.6344|
0018c8  e001              B        |L1.6350|
                  |L1.6346|
0018ca  7800              LDRB     r0,[r0,#0]            ;1664  ; TransferError
0018cc  e68e              B        |L1.5612|
                  |L1.6350|
0018ce  f24050ff          MOV      r0,#0x5ff             ;1669
0018d2  f7fffffe          BL       SDIO_ClearFlag
0018d6  a802              ADD      r0,sp,#8              ;1672
0018d8  f7fffffe          BL       IsCardProgramming
0018dc  4605              MOV      r5,r0                 ;1672
0018de  e003              B        |L1.6376|
                  |L1.6368|
0018e0  a802              ADD      r0,sp,#8              ;1676
0018e2  f7fffffe          BL       IsCardProgramming
0018e6  4605              MOV      r5,r0                 ;1676
                  |L1.6376|
0018e8  2d2a              CMP      r5,#0x2a              ;1674
0018ea  d107              BNE      |L1.6396|
0018ec  f89d0008          LDRB     r0,[sp,#8]            ;1674
0018f0  2807              CMP      r0,#7                 ;1674
0018f2  d0f5              BEQ      |L1.6368|
0018f4  f89d0008          LDRB     r0,[sp,#8]            ;1674
0018f8  2806              CMP      r0,#6                 ;1674
0018fa  d0f1              BEQ      |L1.6368|
                  |L1.6396|
0018fc  4628              MOV      r0,r5                 ;1679
0018fe  e675              B        |L1.5612|
;;;1681   
                          ENDP

                  SD_WriteMultiBlocks PROC
;;;1689     */
;;;1690   SD_Error SD_WriteMultiBlocks(uint8_t *writebuff, uint32_t WriteAddr, uint16_t BlockSize, uint32_t NumberOfBlocks)
001900  e92d4ffe          PUSH     {r1-r11,lr}
;;;1691   {
001904  4681              MOV      r9,r0
001906  468a              MOV      r10,r1
001908  4614              MOV      r4,r2
00190a  461e              MOV      r6,r3
;;;1692     SD_Error errorstatus = SD_OK;
00190c  252a              MOVS     r5,#0x2a
;;;1693     uint8_t  power = 0, cardstate = 0;
00190e  f04f0b00          MOV      r11,#0
001912  2000              MOVS     r0,#0
001914  9002              STR      r0,[sp,#8]
;;;1694     uint32_t bytestransferred = 0;
001916  2700              MOVS     r7,#0
;;;1695     uint32_t restwords = 0;
001918  9001              STR      r0,[sp,#4]
;;;1696     uint32_t *tempbuff = (uint32_t *)writebuff;
00191a  46c8              MOV      r8,r9
;;;1697     __IO uint32_t count = 0;
00191c  9000              STR      r0,[sp,#0]
;;;1698     
;;;1699     if (writebuff == NULL)
00191e  f1b90f00          CMP      r9,#0
001922  d103              BNE      |L1.6444|
;;;1700     {
;;;1701       errorstatus = SD_INVALID_PARAMETER;
001924  2526              MOVS     r5,#0x26
;;;1702       return(errorstatus);
001926  4628              MOV      r0,r5
                  |L1.6440|
;;;1703     }
;;;1704   
;;;1705     TransferError = SD_OK;
;;;1706     TransferEnd = 0;
;;;1707     TotalNumberOfBytes = 0;
;;;1708   
;;;1709     SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
;;;1710     SDIO_DataInitStructure.SDIO_DataLength = 0;
;;;1711     SDIO_DataInitStructure.SDIO_DataBlockSize = SDIO_DataBlockSize_1b;
;;;1712     SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToCard;
;;;1713     SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
;;;1714     SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Disable;
;;;1715     SDIO_DataConfig(&SDIO_DataInitStructure);
;;;1716     SDIO_DMACmd(DISABLE);
;;;1717   
;;;1718     if (SDIO_GetResponse(SDIO_RESP1) & SD_CARD_LOCKED)
;;;1719     {
;;;1720       errorstatus = SD_LOCK_UNLOCK_FAILED;
;;;1721       return(errorstatus);
;;;1722     }
;;;1723   
;;;1724     if (CardType == SDIO_HIGH_CAPACITY_SD_CARD)
;;;1725     {
;;;1726       BlockSize = 512;
;;;1727       WriteAddr /= 512;
;;;1728     }
;;;1729     
;;;1730     /*!< Set the block size, both on controller and card */
;;;1731     if ((BlockSize > 0) && (BlockSize <= 2048) && ((BlockSize & (BlockSize - 1)) == 0))
;;;1732     {
;;;1733       power = convert_from_bytes_to_power_of_two(BlockSize);
;;;1734   
;;;1735       SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) BlockSize;
;;;1736       SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_BLOCKLEN;
;;;1737       SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1738       SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1739       SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1740       SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1741   
;;;1742       errorstatus = CmdResp1Error(SD_CMD_SET_BLOCKLEN);
;;;1743   
;;;1744       if (errorstatus != SD_OK)
;;;1745       {
;;;1746         return(errorstatus);
;;;1747       }
;;;1748     }
;;;1749     else
;;;1750     {
;;;1751       errorstatus = SD_INVALID_PARAMETER;
;;;1752       return(errorstatus);
;;;1753     }
;;;1754   
;;;1755     /*!< Wait till card is ready for data Added */
;;;1756     SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) (RCA << 16);
;;;1757     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SEND_STATUS;
;;;1758     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1759     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1760     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1761     SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1762   
;;;1763     errorstatus = CmdResp1Error(SD_CMD_SEND_STATUS);
;;;1764   
;;;1765     if (errorstatus != SD_OK)
;;;1766     {
;;;1767       return(errorstatus);
;;;1768     }
;;;1769   
;;;1770     if (NumberOfBlocks > 1)
;;;1771     {
;;;1772       /*!< Common to all modes */
;;;1773       if (NumberOfBlocks * BlockSize > SD_MAX_DATA_LENGTH)
;;;1774       {
;;;1775         errorstatus = SD_INVALID_PARAMETER;
;;;1776         return(errorstatus);
;;;1777       }
;;;1778   
;;;1779       if ((SDIO_STD_CAPACITY_SD_CARD_V1_1 == CardType) || (SDIO_STD_CAPACITY_SD_CARD_V2_0 == CardType) || (SDIO_HIGH_CAPACITY_SD_CARD == CardType))
;;;1780       {
;;;1781         /*!< To improve performance */
;;;1782         SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) (RCA << 16);
;;;1783         SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
;;;1784         SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1785         SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1786         SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1787         SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1788   
;;;1789   
;;;1790         errorstatus = CmdResp1Error(SD_CMD_APP_CMD);
;;;1791   
;;;1792         if (errorstatus != SD_OK)
;;;1793         {
;;;1794           return(errorstatus);
;;;1795         }
;;;1796         /*!< To improve performance */
;;;1797         SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)NumberOfBlocks;
;;;1798         SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_BLOCK_COUNT;
;;;1799         SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1800         SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1801         SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1802         SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1803   
;;;1804         errorstatus = CmdResp1Error(SD_CMD_SET_BLOCK_COUNT);
;;;1805   
;;;1806         if (errorstatus != SD_OK)
;;;1807         {
;;;1808           return(errorstatus);
;;;1809         }
;;;1810       }
;;;1811   
;;;1812       /*!< Send CMD25 WRITE_MULT_BLOCK with argument data address */
;;;1813       SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)WriteAddr;
;;;1814       SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_WRITE_MULT_BLOCK;
;;;1815       SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1816       SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1817       SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1818       SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1819   
;;;1820       errorstatus = CmdResp1Error(SD_CMD_WRITE_MULT_BLOCK);
;;;1821   
;;;1822       if (SD_OK != errorstatus)
;;;1823       {
;;;1824         return(errorstatus);
;;;1825       }
;;;1826   
;;;1827       TotalNumberOfBytes = NumberOfBlocks * BlockSize;
;;;1828       StopCondition = 1;
;;;1829       SrcBuffer = (uint32_t *)writebuff;
;;;1830   
;;;1831       SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
;;;1832       SDIO_DataInitStructure.SDIO_DataLength = NumberOfBlocks * BlockSize;
;;;1833       SDIO_DataInitStructure.SDIO_DataBlockSize = (uint32_t) power << 4;
;;;1834       SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToCard;
;;;1835       SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
;;;1836       SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
;;;1837       SDIO_DataConfig(&SDIO_DataInitStructure);
;;;1838   
;;;1839       if (DeviceMode == SD_POLLING_MODE)
;;;1840       {
;;;1841         while (!(SDIO->STA & (SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DATAEND | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_STBITERR)))
;;;1842         {
;;;1843           if (SDIO_GetFlagStatus(SDIO_FLAG_TXFIFOHE) != RESET)
;;;1844           {
;;;1845             if (!((TotalNumberOfBytes - bytestransferred) < SD_HALFFIFOBYTES))
;;;1846             {
;;;1847               for (count = 0; count < SD_HALFFIFO; count++)
;;;1848               {
;;;1849                 SDIO_WriteData(*(tempbuff + count));
;;;1850               }
;;;1851               tempbuff += SD_HALFFIFO;
;;;1852               bytestransferred += SD_HALFFIFOBYTES;
;;;1853             }
;;;1854             else
;;;1855             {
;;;1856               restwords = ((TotalNumberOfBytes - bytestransferred) % 4 == 0) ? ((TotalNumberOfBytes - bytestransferred) / 4) :
;;;1857                           ((TotalNumberOfBytes - bytestransferred) / 4 + 1);
;;;1858   
;;;1859               for (count = 0; count < restwords; count++, tempbuff++, bytestransferred += 4)
;;;1860               {
;;;1861                 SDIO_WriteData(*tempbuff);
;;;1862               }
;;;1863             }
;;;1864           }
;;;1865         }
;;;1866   
;;;1867         if (SDIO_GetFlagStatus(SDIO_FLAG_DTIMEOUT) != RESET)
;;;1868         {
;;;1869           SDIO_ClearFlag(SDIO_FLAG_DTIMEOUT);
;;;1870           errorstatus = SD_DATA_TIMEOUT;
;;;1871           return(errorstatus);
;;;1872         }
;;;1873         else if (SDIO_GetFlagStatus(SDIO_FLAG_DCRCFAIL) != RESET)
;;;1874         {
;;;1875           SDIO_ClearFlag(SDIO_FLAG_DCRCFAIL);
;;;1876           errorstatus = SD_DATA_CRC_FAIL;
;;;1877           return(errorstatus);
;;;1878         }
;;;1879         else if (SDIO_GetFlagStatus(SDIO_FLAG_TXUNDERR) != RESET)
;;;1880         {
;;;1881           SDIO_ClearFlag(SDIO_FLAG_TXUNDERR);
;;;1882           errorstatus = SD_TX_UNDERRUN;
;;;1883           return(errorstatus);
;;;1884         }
;;;1885         else if (SDIO_GetFlagStatus(SDIO_FLAG_STBITERR) != RESET)
;;;1886         {
;;;1887           SDIO_ClearFlag(SDIO_FLAG_STBITERR);
;;;1888           errorstatus = SD_START_BIT_ERR;
;;;1889           return(errorstatus);
;;;1890         }
;;;1891   
;;;1892         if (SDIO_GetFlagStatus(SDIO_FLAG_DATAEND) != RESET)
;;;1893         {
;;;1894          if ((SDIO_STD_CAPACITY_SD_CARD_V1_1 == CardType) || (SDIO_STD_CAPACITY_SD_CARD_V2_0 == CardType) || (SDIO_HIGH_CAPACITY_SD_CARD == CardType))
;;;1895           {
;;;1896             /*!< Send CMD12 STOP_TRANSMISSION */
;;;1897             SDIO_CmdInitStructure.SDIO_Argument = 0x0;
;;;1898             SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_STOP_TRANSMISSION;
;;;1899             SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1900             SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1901             SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1902             SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1903   
;;;1904   
;;;1905             errorstatus = CmdResp1Error(SD_CMD_STOP_TRANSMISSION);
;;;1906   
;;;1907             if (errorstatus != SD_OK)
;;;1908             {
;;;1909               return(errorstatus);
;;;1910             }
;;;1911           }
;;;1912         }
;;;1913       }
;;;1914       else if (DeviceMode == SD_INTERRUPT_MODE)
;;;1915       {
;;;1916         SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND | SDIO_IT_TXFIFOHE | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR, ENABLE);
;;;1917         while ((TransferEnd == 0) && (TransferError == SD_OK))
;;;1918         {}
;;;1919         if (TransferError != SD_OK)
;;;1920         {
;;;1921           return(TransferError);
;;;1922         }
;;;1923       }
;;;1924       else if (DeviceMode == SD_DMA_MODE)
;;;1925       {
;;;1926         SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR, ENABLE);
;;;1927         SDIO_DMACmd(ENABLE);
;;;1928         SD_LowLevel_DMA_TxConfig((uint32_t *)writebuff, (NumberOfBlocks * BlockSize));
;;;1929         while ((SD_DMAEndOfTransferStatus() == RESET) && (TransferEnd == 0) && (TransferError == SD_OK))
;;;1930         {}
;;;1931         if (TransferError != SD_OK)
;;;1932         {
;;;1933           return(TransferError);
;;;1934         }
;;;1935       }
;;;1936     }
;;;1937     /*!< Clear all the static flags */
;;;1938     SDIO_ClearFlag(SDIO_STATIC_FLAGS);
;;;1939     
;;;1940     /*!< Add some delay before checking the Card Status */
;;;1941     for(count = 0; count < 0xFFFF; count++)
;;;1942     {
;;;1943     }
;;;1944     /*!< Wait till the card is in programming state */
;;;1945     errorstatus = IsCardProgramming(&cardstate);
;;;1946   
;;;1947     while ((errorstatus == SD_OK) && ((cardstate == SD_CARD_PROGRAMMING) || (cardstate == SD_CARD_RECEIVING)))
;;;1948     {
;;;1949       errorstatus = IsCardProgramming(&cardstate);
;;;1950     }
;;;1951   
;;;1952     return(errorstatus);
;;;1953   }
001928  e8bd8ffe          POP      {r1-r11,pc}
                  |L1.6444|
00192c  202a              MOVS     r0,#0x2a              ;1705
00192e  4930              LDR      r1,|L1.6640|
001930  7008              STRB     r0,[r1,#0]            ;1705
001932  2000              MOVS     r0,#0                 ;1706
001934  492f              LDR      r1,|L1.6644|
001936  6008              STR      r0,[r1,#0]            ;1706  ; TransferEnd
001938  492f              LDR      r1,|L1.6648|
00193a  6008              STR      r0,[r1,#0]            ;1707  ; TotalNumberOfBytes
00193c  482f              LDR      r0,|L1.6652|
00193e  4930              LDR      r1,|L1.6656|
001940  6008              STR      r0,[r1,#0]            ;1709  ; SDIO_DataInitStructure
001942  2000              MOVS     r0,#0                 ;1710
001944  6048              STR      r0,[r1,#4]            ;1710  ; SDIO_DataInitStructure
001946  6088              STR      r0,[r1,#8]            ;1711  ; SDIO_DataInitStructure
001948  60c8              STR      r0,[r1,#0xc]          ;1712  ; SDIO_DataInitStructure
00194a  6108              STR      r0,[r1,#0x10]         ;1713  ; SDIO_DataInitStructure
00194c  6148              STR      r0,[r1,#0x14]         ;1714  ; SDIO_DataInitStructure
00194e  4608              MOV      r0,r1                 ;1715
001950  f7fffffe          BL       SDIO_DataConfig
001954  2000              MOVS     r0,#0                 ;1716
001956  f7fffffe          BL       SDIO_DMACmd
00195a  2000              MOVS     r0,#0                 ;1718
00195c  f7fffffe          BL       SDIO_GetResponse
001960  f0007000          AND      r0,r0,#0x2000000      ;1718
001964  b110              CBZ      r0,|L1.6508|
001966  250e              MOVS     r5,#0xe               ;1720
001968  4628              MOV      r0,r5                 ;1721
00196a  e7dd              B        |L1.6440|
                  |L1.6508|
00196c  4825              LDR      r0,|L1.6660|
00196e  6800              LDR      r0,[r0,#0]            ;1724  ; CardType
001970  2802              CMP      r0,#2                 ;1724
001972  d102              BNE      |L1.6522|
001974  0204              LSLS     r4,r0,#8              ;1726
001976  ea4f2a5a          LSR      r10,r10,#9            ;1727
                  |L1.6522|
00197a  2c00              CMP      r4,#0                 ;1731
00197c  dd20              BLE      |L1.6592|
00197e  f5b46f00          CMP      r4,#0x800             ;1731
001982  dc1d              BGT      |L1.6592|
001984  1e60              SUBS     r0,r4,#1              ;1731
001986  4020              ANDS     r0,r0,r4              ;1731
001988  b9d0              CBNZ     r0,|L1.6592|
00198a  4620              MOV      r0,r4                 ;1733
00198c  f7fffffe          BL       convert_from_bytes_to_power_of_two
001990  4683              MOV      r11,r0                ;1733
001992  481d              LDR      r0,|L1.6664|
001994  6004              STR      r4,[r0,#0]            ;1735  ; SDIO_CmdInitStructure
001996  2010              MOVS     r0,#0x10              ;1736
001998  491b              LDR      r1,|L1.6664|
00199a  6048              STR      r0,[r1,#4]            ;1736  ; SDIO_CmdInitStructure
00199c  2040              MOVS     r0,#0x40              ;1737
00199e  6088              STR      r0,[r1,#8]            ;1737  ; SDIO_CmdInitStructure
0019a0  2000              MOVS     r0,#0                 ;1738
0019a2  60c8              STR      r0,[r1,#0xc]          ;1738  ; SDIO_CmdInitStructure
0019a4  f44f6080          MOV      r0,#0x400             ;1739
0019a8  6108              STR      r0,[r1,#0x10]         ;1739  ; SDIO_CmdInitStructure
0019aa  4608              MOV      r0,r1                 ;1740
0019ac  f7fffffe          BL       SDIO_SendCommand
0019b0  2010              MOVS     r0,#0x10              ;1742
0019b2  f7fffffe          BL       CmdResp1Error
0019b6  4605              MOV      r5,r0                 ;1742
0019b8  2d2a              CMP      r5,#0x2a              ;1744
0019ba  d004              BEQ      |L1.6598|
0019bc  4628              MOV      r0,r5                 ;1746
0019be  e7b3              B        |L1.6440|
                  |L1.6592|
0019c0  2526              MOVS     r5,#0x26              ;1751
0019c2  4628              MOV      r0,r5                 ;1752
0019c4  e7b0              B        |L1.6440|
                  |L1.6598|
0019c6  4811              LDR      r0,|L1.6668|
0019c8  8800              LDRH     r0,[r0,#0]            ;1756  ; RCA
0019ca  0400              LSLS     r0,r0,#16             ;1756
0019cc  490e              LDR      r1,|L1.6664|
0019ce  6008              STR      r0,[r1,#0]            ;1756  ; SDIO_CmdInitStructure
0019d0  200d              MOVS     r0,#0xd               ;1757
0019d2  6048              STR      r0,[r1,#4]            ;1757  ; SDIO_CmdInitStructure
0019d4  2040              MOVS     r0,#0x40              ;1758
0019d6  6088              STR      r0,[r1,#8]            ;1758  ; SDIO_CmdInitStructure
0019d8  2000              MOVS     r0,#0                 ;1759
0019da  60c8              STR      r0,[r1,#0xc]          ;1759  ; SDIO_CmdInitStructure
0019dc  f44f6080          MOV      r0,#0x400             ;1760
0019e0  6108              STR      r0,[r1,#0x10]         ;1760  ; SDIO_CmdInitStructure
0019e2  4608              MOV      r0,r1                 ;1761
0019e4  f7fffffe          BL       SDIO_SendCommand
0019e8  200d              MOVS     r0,#0xd               ;1763
0019ea  f7fffffe          BL       CmdResp1Error
0019ee  e017              B        |L1.6688|
                  |L1.6640|
                          DCD      TransferError
                  |L1.6644|
                          DCD      TransferEnd
                  |L1.6648|
                          DCD      TotalNumberOfBytes
                  |L1.6652|
                          DCD      0x000fffff
                  |L1.6656|
                          DCD      SDIO_DataInitStructure
                  |L1.6660|
                          DCD      CardType
                  |L1.6664|
                          DCD      SDIO_CmdInitStructure
                  |L1.6668|
                          DCD      ||RCA||
                  |L1.6672|
                          DCD      StopCondition
                  |L1.6676|
                          DCD      SrcBuffer
                  |L1.6680|
                          DCD      DeviceMode
                  |L1.6684|
                          DCD      0x40018000
                  |L1.6688|
001a20  4605              MOV      r5,r0                 ;1763
001a22  2d2a              CMP      r5,#0x2a              ;1765
001a24  d001              BEQ      |L1.6698|
001a26  4628              MOV      r0,r5                 ;1767
001a28  e77e              B        |L1.6440|
                  |L1.6698|
001a2a  2e01              CMP      r6,#1                 ;1770
001a2c  d97a              BLS      |L1.6948|
001a2e  fb06f004          MUL      r0,r6,r4              ;1773
001a32  f1b07f00          CMP      r0,#0x2000000         ;1773
001a36  d302              BCC      |L1.6718|
001a38  2526              MOVS     r5,#0x26              ;1775
001a3a  4628              MOV      r0,r5                 ;1776
001a3c  e774              B        |L1.6440|
                  |L1.6718|
001a3e  48fe              LDR      r0,|L1.7736|
001a40  6800              LDR      r0,[r0,#0]            ;1779  ; CardType
001a42  b138              CBZ      r0,|L1.6740|
001a44  48fc              LDR      r0,|L1.7736|
001a46  6800              LDR      r0,[r0,#0]            ;1779  ; CardType
001a48  2801              CMP      r0,#1                 ;1779
001a4a  d003              BEQ      |L1.6740|
001a4c  48fa              LDR      r0,|L1.7736|
001a4e  6800              LDR      r0,[r0,#0]            ;1779  ; CardType
001a50  2802              CMP      r0,#2                 ;1779
001a52  d12f              BNE      |L1.6836|
                  |L1.6740|
001a54  48f9              LDR      r0,|L1.7740|
001a56  8800              LDRH     r0,[r0,#0]            ;1782  ; RCA
001a58  0400              LSLS     r0,r0,#16             ;1782
001a5a  49f9              LDR      r1,|L1.7744|
001a5c  6008              STR      r0,[r1,#0]            ;1782  ; SDIO_CmdInitStructure
001a5e  2037              MOVS     r0,#0x37              ;1783
001a60  6048              STR      r0,[r1,#4]            ;1783  ; SDIO_CmdInitStructure
001a62  2040              MOVS     r0,#0x40              ;1784
001a64  6088              STR      r0,[r1,#8]            ;1784  ; SDIO_CmdInitStructure
001a66  2000              MOVS     r0,#0                 ;1785
001a68  60c8              STR      r0,[r1,#0xc]          ;1785  ; SDIO_CmdInitStructure
001a6a  f44f6080          MOV      r0,#0x400             ;1786
001a6e  6108              STR      r0,[r1,#0x10]         ;1786  ; SDIO_CmdInitStructure
001a70  4608              MOV      r0,r1                 ;1787
001a72  f7fffffe          BL       SDIO_SendCommand
001a76  2037              MOVS     r0,#0x37              ;1790
001a78  f7fffffe          BL       CmdResp1Error
001a7c  4605              MOV      r5,r0                 ;1790
001a7e  2d2a              CMP      r5,#0x2a              ;1792
001a80  d001              BEQ      |L1.6790|
001a82  4628              MOV      r0,r5                 ;1794
001a84  e750              B        |L1.6440|
                  |L1.6790|
001a86  48ee              LDR      r0,|L1.7744|
001a88  6006              STR      r6,[r0,#0]            ;1797  ; SDIO_CmdInitStructure
001a8a  2017              MOVS     r0,#0x17              ;1798
001a8c  49ec              LDR      r1,|L1.7744|
001a8e  6048              STR      r0,[r1,#4]            ;1798  ; SDIO_CmdInitStructure
001a90  2040              MOVS     r0,#0x40              ;1799
001a92  6088              STR      r0,[r1,#8]            ;1799  ; SDIO_CmdInitStructure
001a94  2000              MOVS     r0,#0                 ;1800
001a96  60c8              STR      r0,[r1,#0xc]          ;1800  ; SDIO_CmdInitStructure
001a98  f44f6080          MOV      r0,#0x400             ;1801
001a9c  6108              STR      r0,[r1,#0x10]         ;1801  ; SDIO_CmdInitStructure
001a9e  4608              MOV      r0,r1                 ;1802
001aa0  f7fffffe          BL       SDIO_SendCommand
001aa4  2017              MOVS     r0,#0x17              ;1804
001aa6  f7fffffe          BL       CmdResp1Error
001aaa  4605              MOV      r5,r0                 ;1804
001aac  2d2a              CMP      r5,#0x2a              ;1806
001aae  d001              BEQ      |L1.6836|
001ab0  4628              MOV      r0,r5                 ;1808
001ab2  e739              B        |L1.6440|
                  |L1.6836|
001ab4  48e2              LDR      r0,|L1.7744|
001ab6  f8c0a000          STR      r10,[r0,#0]           ;1813  ; SDIO_CmdInitStructure
001aba  2019              MOVS     r0,#0x19              ;1814
001abc  49e0              LDR      r1,|L1.7744|
001abe  6048              STR      r0,[r1,#4]            ;1814  ; SDIO_CmdInitStructure
001ac0  2040              MOVS     r0,#0x40              ;1815
001ac2  6088              STR      r0,[r1,#8]            ;1815  ; SDIO_CmdInitStructure
001ac4  2000              MOVS     r0,#0                 ;1816
001ac6  60c8              STR      r0,[r1,#0xc]          ;1816  ; SDIO_CmdInitStructure
001ac8  f44f6080          MOV      r0,#0x400             ;1817
001acc  6108              STR      r0,[r1,#0x10]         ;1817  ; SDIO_CmdInitStructure
001ace  4608              MOV      r0,r1                 ;1818
001ad0  f7fffffe          BL       SDIO_SendCommand
001ad4  2019              MOVS     r0,#0x19              ;1820
001ad6  f7fffffe          BL       CmdResp1Error
001ada  4605              MOV      r5,r0                 ;1820
001adc  2d2a              CMP      r5,#0x2a              ;1822
001ade  d001              BEQ      |L1.6884|
001ae0  4628              MOV      r0,r5                 ;1824
001ae2  e721              B        |L1.6440|
                  |L1.6884|
001ae4  fb06f004          MUL      r0,r6,r4              ;1827
001ae8  49d6              LDR      r1,|L1.7748|
001aea  6008              STR      r0,[r1,#0]            ;1827  ; TotalNumberOfBytes
001aec  2001              MOVS     r0,#1                 ;1828
001aee  49d6              LDR      r1,|L1.7752|
001af0  6008              STR      r0,[r1,#0]            ;1828  ; StopCondition
001af2  48d6              LDR      r0,|L1.7756|
001af4  f8c09000          STR      r9,[r0,#0]            ;1829  ; SrcBuffer
001af8  48d5              LDR      r0,|L1.7760|
001afa  49d6              LDR      r1,|L1.7764|
001afc  6008              STR      r0,[r1,#0]            ;1831  ; SDIO_DataInitStructure
001afe  fb06f004          MUL      r0,r6,r4              ;1832
001b02  6048              STR      r0,[r1,#4]            ;1832  ; SDIO_DataInitStructure
001b04  ea4f100b          LSL      r0,r11,#4             ;1833
001b08  6088              STR      r0,[r1,#8]            ;1833  ; SDIO_DataInitStructure
001b0a  2000              MOVS     r0,#0                 ;1834
001b0c  60c8              STR      r0,[r1,#0xc]          ;1834  ; SDIO_DataInitStructure
001b0e  6108              STR      r0,[r1,#0x10]         ;1835  ; SDIO_DataInitStructure
001b10  2001              MOVS     r0,#1                 ;1836
001b12  6148              STR      r0,[r1,#0x14]         ;1836  ; SDIO_DataInitStructure
001b14  4608              MOV      r0,r1                 ;1837
001b16  f7fffffe          BL       SDIO_DataConfig
001b1a  48cf              LDR      r0,|L1.7768|
001b1c  6800              LDR      r0,[r0,#0]            ;1839  ; DeviceMode
001b1e  2802              CMP      r0,#2                 ;1839
001b20  d170              BNE      |L1.7172|
001b22  e03e              B        |L1.7074|
                  |L1.6948|
001b24  e0d1              B        |L1.7370|
                  |L1.6950|
001b26  f44f4080          MOV      r0,#0x4000            ;1843
001b2a  f7fffffe          BL       SDIO_GetFlagStatus
001b2e  b3c0              CBZ      r0,|L1.7074|
001b30  48c4              LDR      r0,|L1.7748|
001b32  6800              LDR      r0,[r0,#0]            ;1845  ; TotalNumberOfBytes
001b34  1bc0              SUBS     r0,r0,r7              ;1845
001b36  2820              CMP      r0,#0x20              ;1845
001b38  d311              BCC      |L1.7006|
001b3a  2000              MOVS     r0,#0                 ;1847
001b3c  9000              STR      r0,[sp,#0]            ;1847
001b3e  e007              B        |L1.6992|
                  |L1.6976|
001b40  9900              LDR      r1,[sp,#0]            ;1849
001b42  f8580021          LDR      r0,[r8,r1,LSL #2]     ;1849
001b46  f7fffffe          BL       SDIO_WriteData
001b4a  9800              LDR      r0,[sp,#0]            ;1847
001b4c  1c40              ADDS     r0,r0,#1              ;1847
001b4e  9000              STR      r0,[sp,#0]            ;1847
                  |L1.6992|
001b50  9800              LDR      r0,[sp,#0]            ;1847
001b52  2808              CMP      r0,#8                 ;1847
001b54  d3f4              BCC      |L1.6976|
001b56  f1080820          ADD      r8,r8,#0x20           ;1851
001b5a  3720              ADDS     r7,r7,#0x20           ;1852
001b5c  e021              B        |L1.7074|
                  |L1.7006|
001b5e  48b9              LDR      r0,|L1.7748|
001b60  7800              LDRB     r0,[r0,#0]            ;1856  ; TotalNumberOfBytes
001b62  1bc0              SUBS     r0,r0,r7              ;1856
001b64  f0000003          AND      r0,r0,#3              ;1856
001b68  b920              CBNZ     r0,|L1.7028|
001b6a  48b6              LDR      r0,|L1.7748|
001b6c  6800              LDR      r0,[r0,#0]            ;1856  ; TotalNumberOfBytes
001b6e  1bc0              SUBS     r0,r0,r7              ;1856
001b70  0880              LSRS     r0,r0,#2              ;1856
001b72  e004              B        |L1.7038|
                  |L1.7028|
001b74  48b3              LDR      r0,|L1.7748|
001b76  6800              LDR      r0,[r0,#0]            ;1857  ; TotalNumberOfBytes
001b78  1bc0              SUBS     r0,r0,r7              ;1857
001b7a  0880              LSRS     r0,r0,#2              ;1857
001b7c  1c40              ADDS     r0,r0,#1              ;1857
                  |L1.7038|
001b7e  9001              STR      r0,[sp,#4]            ;1857
001b80  2000              MOVS     r0,#0                 ;1859
001b82  9000              STR      r0,[sp,#0]            ;1859
001b84  e009              B        |L1.7066|
                  |L1.7046|
001b86  f8d80000          LDR      r0,[r8,#0]            ;1861
001b8a  f7fffffe          BL       SDIO_WriteData
001b8e  9800              LDR      r0,[sp,#0]            ;1859
001b90  1c40              ADDS     r0,r0,#1              ;1859
001b92  9000              STR      r0,[sp,#0]            ;1859
001b94  f1080804          ADD      r8,r8,#4              ;1859
001b98  1d3f              ADDS     r7,r7,#4              ;1859
                  |L1.7066|
001b9a  e9dd1000          LDRD     r1,r0,[sp,#0]         ;1859
001b9e  4281              CMP      r1,r0                 ;1859
001ba0  d3f1              BCC      |L1.7046|
                  |L1.7074|
001ba2  48ae              LDR      r0,|L1.7772|
001ba4  6b40              LDR      r0,[r0,#0x34]         ;1841
001ba6  f240311a          MOV      r1,#0x31a             ;1841
001baa  4008              ANDS     r0,r0,r1              ;1841
001bac  2800              CMP      r0,#0                 ;1841
001bae  d0ba              BEQ      |L1.6950|
001bb0  2008              MOVS     r0,#8                 ;1867
001bb2  f7fffffe          BL       SDIO_GetFlagStatus
001bb6  b128              CBZ      r0,|L1.7108|
001bb8  2008              MOVS     r0,#8                 ;1869
001bba  f7fffffe          BL       SDIO_ClearFlag
001bbe  2504              MOVS     r5,#4                 ;1870
001bc0  4628              MOV      r0,r5                 ;1871
001bc2  e6b1              B        |L1.6440|
                  |L1.7108|
001bc4  2002              MOVS     r0,#2                 ;1873
001bc6  f7fffffe          BL       SDIO_GetFlagStatus
001bca  b128              CBZ      r0,|L1.7128|
001bcc  2002              MOVS     r0,#2                 ;1875
001bce  f7fffffe          BL       SDIO_ClearFlag
001bd2  2502              MOVS     r5,#2                 ;1876
001bd4  4628              MOV      r0,r5                 ;1877
001bd6  e6a7              B        |L1.6440|
                  |L1.7128|
001bd8  2010              MOVS     r0,#0x10              ;1879
001bda  f7fffffe          BL       SDIO_GetFlagStatus
001bde  b128              CBZ      r0,|L1.7148|
001be0  2010              MOVS     r0,#0x10              ;1881
001be2  f7fffffe          BL       SDIO_ClearFlag
001be6  2505              MOVS     r5,#5                 ;1882
001be8  4628              MOV      r0,r5                 ;1883
001bea  e69d              B        |L1.6440|
                  |L1.7148|
001bec  f44f7000          MOV      r0,#0x200             ;1885
001bf0  f7fffffe          BL       SDIO_GetFlagStatus
001bf4  b138              CBZ      r0,|L1.7174|
001bf6  f44f7000          MOV      r0,#0x200             ;1887
001bfa  f7fffffe          BL       SDIO_ClearFlag
001bfe  2507              MOVS     r5,#7                 ;1888
001c00  4628              MOV      r0,r5                 ;1889
001c02  e691              B        |L1.6440|
                  |L1.7172|
001c04  e027              B        |L1.7254|
                  |L1.7174|
001c06  f44f7080          MOV      r0,#0x100             ;1892
001c0a  f7fffffe          BL       SDIO_GetFlagStatus
001c0e  2800              CMP      r0,#0                 ;1892
001c10  d05b              BEQ      |L1.7370|
001c12  4889              LDR      r0,|L1.7736|
001c14  6800              LDR      r0,[r0,#0]            ;1894  ; CardType
001c16  b138              CBZ      r0,|L1.7208|
001c18  4887              LDR      r0,|L1.7736|
001c1a  6800              LDR      r0,[r0,#0]            ;1894  ; CardType
001c1c  2801              CMP      r0,#1                 ;1894
001c1e  d003              BEQ      |L1.7208|
001c20  4885              LDR      r0,|L1.7736|
001c22  6800              LDR      r0,[r0,#0]            ;1894  ; CardType
001c24  2802              CMP      r0,#2                 ;1894
001c26  d150              BNE      |L1.7370|
                  |L1.7208|
001c28  2000              MOVS     r0,#0                 ;1897
001c2a  4985              LDR      r1,|L1.7744|
001c2c  6008              STR      r0,[r1,#0]            ;1897  ; SDIO_CmdInitStructure
001c2e  200c              MOVS     r0,#0xc               ;1898
001c30  6048              STR      r0,[r1,#4]            ;1898  ; SDIO_CmdInitStructure
001c32  2040              MOVS     r0,#0x40              ;1899
001c34  6088              STR      r0,[r1,#8]            ;1899  ; SDIO_CmdInitStructure
001c36  2000              MOVS     r0,#0                 ;1900
001c38  60c8              STR      r0,[r1,#0xc]          ;1900  ; SDIO_CmdInitStructure
001c3a  f44f6080          MOV      r0,#0x400             ;1901
001c3e  6108              STR      r0,[r1,#0x10]         ;1901  ; SDIO_CmdInitStructure
001c40  4608              MOV      r0,r1                 ;1902
001c42  f7fffffe          BL       SDIO_SendCommand
001c46  200c              MOVS     r0,#0xc               ;1905
001c48  f7fffffe          BL       CmdResp1Error
001c4c  4605              MOV      r5,r0                 ;1905
001c4e  2d2a              CMP      r5,#0x2a              ;1907
001c50  d03b              BEQ      |L1.7370|
001c52  4628              MOV      r0,r5                 ;1909
001c54  e668              B        |L1.6440|
                  |L1.7254|
001c56  4880              LDR      r0,|L1.7768|
001c58  6800              LDR      r0,[r0,#0]            ;1914  ; DeviceMode
001c5a  2801              CMP      r0,#1                 ;1914
001c5c  d113              BNE      |L1.7302|
001c5e  2101              MOVS     r1,#1                 ;1916
001c60  f244301a          MOV      r0,#0x431a            ;1916
001c64  f7fffffe          BL       SDIO_ITConfig
001c68  bf00              NOP                            ;1917
                  |L1.7274|
001c6a  487d              LDR      r0,|L1.7776|
001c6c  6800              LDR      r0,[r0,#0]            ;1917  ; TransferEnd
001c6e  b918              CBNZ     r0,|L1.7288|
001c70  487c              LDR      r0,|L1.7780|
001c72  7800              LDRB     r0,[r0,#0]            ;1917  ; TransferError
001c74  282a              CMP      r0,#0x2a              ;1917
001c76  d0f8              BEQ      |L1.7274|
                  |L1.7288|
001c78  487a              LDR      r0,|L1.7780|
001c7a  7800              LDRB     r0,[r0,#0]            ;1919  ; TransferError
001c7c  282a              CMP      r0,#0x2a              ;1919
001c7e  d024              BEQ      |L1.7370|
001c80  4878              LDR      r0,|L1.7780|
001c82  7800              LDRB     r0,[r0,#0]            ;1921  ; TransferError
001c84  e650              B        |L1.6440|
                  |L1.7302|
001c86  4874              LDR      r0,|L1.7768|
001c88  6800              LDR      r0,[r0,#0]            ;1924  ; DeviceMode
001c8a  b9f0              CBNZ     r0,|L1.7370|
001c8c  2101              MOVS     r1,#1                 ;1926
001c8e  f240301a          MOV      r0,#0x31a             ;1926
001c92  f7fffffe          BL       SDIO_ITConfig
001c96  2001              MOVS     r0,#1                 ;1927
001c98  f7fffffe          BL       SDIO_DMACmd
001c9c  fb06f104          MUL      r1,r6,r4              ;1928
001ca0  4648              MOV      r0,r9                 ;1928
001ca2  f7fffffe          BL       SD_LowLevel_DMA_TxConfig
001ca6  bf00              NOP                            ;1929
                  |L1.7336|
001ca8  f7fffffe          BL       SD_DMAEndOfTransferStatus
001cac  b930              CBNZ     r0,|L1.7356|
001cae  486c              LDR      r0,|L1.7776|
001cb0  6800              LDR      r0,[r0,#0]            ;1929  ; TransferEnd
001cb2  b918              CBNZ     r0,|L1.7356|
001cb4  486b              LDR      r0,|L1.7780|
001cb6  7800              LDRB     r0,[r0,#0]            ;1929  ; TransferError
001cb8  282a              CMP      r0,#0x2a              ;1929
001cba  d0f5              BEQ      |L1.7336|
                  |L1.7356|
001cbc  4869              LDR      r0,|L1.7780|
001cbe  7800              LDRB     r0,[r0,#0]            ;1931  ; TransferError
001cc0  282a              CMP      r0,#0x2a              ;1931
001cc2  d002              BEQ      |L1.7370|
001cc4  4867              LDR      r0,|L1.7780|
001cc6  7800              LDRB     r0,[r0,#0]            ;1933  ; TransferError
001cc8  e62e              B        |L1.6440|
                  |L1.7370|
001cca  f24050ff          MOV      r0,#0x5ff             ;1938
001cce  f7fffffe          BL       SDIO_ClearFlag
001cd2  2000              MOVS     r0,#0                 ;1941
001cd4  9000              STR      r0,[sp,#0]            ;1941
001cd6  e002              B        |L1.7390|
                  |L1.7384|
001cd8  9800              LDR      r0,[sp,#0]            ;1941
001cda  1c40              ADDS     r0,r0,#1              ;1941
001cdc  9000              STR      r0,[sp,#0]            ;1941
                  |L1.7390|
001cde  f64f71ff          MOV      r1,#0xffff            ;1941
001ce2  9800              LDR      r0,[sp,#0]            ;1941
001ce4  4288              CMP      r0,r1                 ;1941
001ce6  d3f7              BCC      |L1.7384|
001ce8  a802              ADD      r0,sp,#8              ;1945
001cea  f7fffffe          BL       IsCardProgramming
001cee  4605              MOV      r5,r0                 ;1945
001cf0  e003              B        |L1.7418|
                  |L1.7410|
001cf2  a802              ADD      r0,sp,#8              ;1949
001cf4  f7fffffe          BL       IsCardProgramming
001cf8  4605              MOV      r5,r0                 ;1949
                  |L1.7418|
001cfa  2d2a              CMP      r5,#0x2a              ;1947
001cfc  d107              BNE      |L1.7438|
001cfe  f89d0008          LDRB     r0,[sp,#8]            ;1947
001d02  2807              CMP      r0,#7                 ;1947
001d04  d0f5              BEQ      |L1.7410|
001d06  f89d0008          LDRB     r0,[sp,#8]            ;1947
001d0a  2806              CMP      r0,#6                 ;1947
001d0c  d0f1              BEQ      |L1.7410|
                  |L1.7438|
001d0e  4628              MOV      r0,r5                 ;1952
001d10  e60a              B        |L1.6440|
;;;1954   
                          ENDP

                  SD_GetTransferState PROC
;;;1962     */
;;;1963   SDTransferState SD_GetTransferState(void)
001d12  4852              LDR      r0,|L1.7772|
;;;1964   {
;;;1965     if (SDIO->STA & (SDIO_FLAG_TXACT | SDIO_FLAG_RXACT))
001d14  6b40              LDR      r0,[r0,#0x34]
001d16  f4005040          AND      r0,r0,#0x3000
001d1a  b108              CBZ      r0,|L1.7456|
;;;1966     {
;;;1967       return(SD_TRANSFER_BUSY);
001d1c  2001              MOVS     r0,#1
                  |L1.7454|
;;;1968     }
;;;1969     else
;;;1970     {
;;;1971       return(SD_TRANSFER_OK);
;;;1972     }
;;;1973   }
001d1e  4770              BX       lr
                  |L1.7456|
001d20  2000              MOVS     r0,#0                 ;1971
001d22  e7fc              B        |L1.7454|
;;;1974   
                          ENDP

                  SD_StopTransfer PROC
;;;1979     */
;;;1980   SD_Error SD_StopTransfer(void)
001d24  b510              PUSH     {r4,lr}
;;;1981   {
;;;1982     SD_Error errorstatus = SD_OK;
001d26  242a              MOVS     r4,#0x2a
;;;1983   
;;;1984     /*!< Send CMD12 STOP_TRANSMISSION  */
;;;1985     SDIO_CmdInitStructure.SDIO_Argument = 0x0;
001d28  2000              MOVS     r0,#0
001d2a  4945              LDR      r1,|L1.7744|
001d2c  6008              STR      r0,[r1,#0]  ; SDIO_CmdInitStructure
;;;1986     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_STOP_TRANSMISSION;
001d2e  200c              MOVS     r0,#0xc
001d30  6048              STR      r0,[r1,#4]  ; SDIO_CmdInitStructure
;;;1987     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
001d32  2040              MOVS     r0,#0x40
001d34  6088              STR      r0,[r1,#8]  ; SDIO_CmdInitStructure
;;;1988     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
001d36  2000              MOVS     r0,#0
001d38  60c8              STR      r0,[r1,#0xc]  ; SDIO_CmdInitStructure
;;;1989     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
001d3a  f44f6080          MOV      r0,#0x400
001d3e  6108              STR      r0,[r1,#0x10]  ; SDIO_CmdInitStructure
;;;1990     SDIO_SendCommand(&SDIO_CmdInitStructure);
001d40  4608              MOV      r0,r1
001d42  f7fffffe          BL       SDIO_SendCommand
;;;1991   
;;;1992     errorstatus = CmdResp1Error(SD_CMD_STOP_TRANSMISSION);
001d46  200c              MOVS     r0,#0xc
001d48  f7fffffe          BL       CmdResp1Error
001d4c  4604              MOV      r4,r0
;;;1993   
;;;1994     return(errorstatus);
001d4e  4620              MOV      r0,r4
;;;1995   }
001d50  bd10              POP      {r4,pc}
;;;1996   
                          ENDP

                  SD_Erase PROC
;;;2002     */
;;;2003   SD_Error SD_Erase(uint32_t startaddr, uint32_t endaddr)
001d52  e92d41fc          PUSH     {r2-r8,lr}
;;;2004   {
001d56  4605              MOV      r5,r0
001d58  460e              MOV      r6,r1
;;;2005     SD_Error errorstatus = SD_OK;
001d5a  242a              MOVS     r4,#0x2a
;;;2006     uint32_t delay = 0;
001d5c  2700              MOVS     r7,#0
;;;2007     __IO uint32_t maxdelay = 0;
001d5e  2000              MOVS     r0,#0
001d60  9001              STR      r0,[sp,#4]
;;;2008     uint8_t cardstate = 0;
001d62  9000              STR      r0,[sp,#0]
;;;2009   
;;;2010     /*!< Check if the card coomnd class supports erase command */
;;;2011     if (((CSD_Tab[1] >> 20) & SD_CCCC_ERASE) == 0)
001d64  4840              LDR      r0,|L1.7784|
001d66  6840              LDR      r0,[r0,#4]  ; CSD_Tab
001d68  2120              MOVS     r1,#0x20
001d6a  ea015010          AND      r0,r1,r0,LSR #20
001d6e  b918              CBNZ     r0,|L1.7544|
;;;2012     {
;;;2013       errorstatus = SD_REQUEST_NOT_APPLICABLE;
001d70  2425              MOVS     r4,#0x25
;;;2014       return(errorstatus);
001d72  4620              MOV      r0,r4
                  |L1.7540|
;;;2015     }
;;;2016   
;;;2017     maxdelay = 120000 / ((SDIO->CLKCR & 0xFF) + 2);
;;;2018   
;;;2019     if (SDIO_GetResponse(SDIO_RESP1) & SD_CARD_LOCKED)
;;;2020     {
;;;2021       errorstatus = SD_LOCK_UNLOCK_FAILED;
;;;2022       return(errorstatus);
;;;2023     }
;;;2024   
;;;2025     if (CardType == SDIO_HIGH_CAPACITY_SD_CARD)
;;;2026     {
;;;2027       startaddr /= 512;
;;;2028       endaddr /= 512;
;;;2029     }
;;;2030     
;;;2031     /*!< According to sd-card spec 1.0 ERASE_GROUP_START (CMD32) and erase_group_end(CMD33) */
;;;2032     if ((SDIO_STD_CAPACITY_SD_CARD_V1_1 == CardType) || (SDIO_STD_CAPACITY_SD_CARD_V2_0 == CardType) || (SDIO_HIGH_CAPACITY_SD_CARD == CardType))
;;;2033     {
;;;2034       /*!< Send CMD32 SD_ERASE_GRP_START with argument as addr  */
;;;2035       SDIO_CmdInitStructure.SDIO_Argument = startaddr;
;;;2036       SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SD_ERASE_GRP_START;
;;;2037       SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;2038       SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;2039       SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;2040       SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;2041   
;;;2042       errorstatus = CmdResp1Error(SD_CMD_SD_ERASE_GRP_START);
;;;2043       if (errorstatus != SD_OK)
;;;2044       {
;;;2045         return(errorstatus);
;;;2046       }
;;;2047   
;;;2048       /*!< Send CMD33 SD_ERASE_GRP_END with argument as addr  */
;;;2049       SDIO_CmdInitStructure.SDIO_Argument = endaddr;
;;;2050       SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SD_ERASE_GRP_END;
;;;2051       SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;2052       SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;2053       SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;2054       SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;2055   
;;;2056       errorstatus = CmdResp1Error(SD_CMD_SD_ERASE_GRP_END);
;;;2057       if (errorstatus != SD_OK)
;;;2058       {
;;;2059         return(errorstatus);
;;;2060       }
;;;2061     }
;;;2062   
;;;2063     /*!< Send CMD38 ERASE */
;;;2064     SDIO_CmdInitStructure.SDIO_Argument = 0;
;;;2065     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_ERASE;
;;;2066     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;2067     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;2068     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;2069     SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;2070   
;;;2071     errorstatus = CmdResp1Error(SD_CMD_ERASE);
;;;2072   
;;;2073     if (errorstatus != SD_OK)
;;;2074     {
;;;2075       return(errorstatus);
;;;2076     }
;;;2077   
;;;2078     for (delay = 0; delay < maxdelay; delay++)
;;;2079     {}
;;;2080   
;;;2081     /*!< Wait till the card is in programming state */
;;;2082     errorstatus = IsCardProgramming(&cardstate);
;;;2083   
;;;2084     while ((errorstatus == SD_OK) && ((SD_CARD_PROGRAMMING == cardstate) || (SD_CARD_RECEIVING == cardstate)))
;;;2085     {
;;;2086       errorstatus = IsCardProgramming(&cardstate);
;;;2087     }
;;;2088   
;;;2089     return(errorstatus);
;;;2090   }
001d74  e8bd81fc          POP      {r2-r8,pc}
                  |L1.7544|
001d78  4838              LDR      r0,|L1.7772|
001d7a  6840              LDR      r0,[r0,#4]            ;2017
001d7c  b2c0              UXTB     r0,r0                 ;2017
001d7e  1c80              ADDS     r0,r0,#2              ;2017
001d80  493a              LDR      r1,|L1.7788|
001d82  fbb1f0f0          UDIV     r0,r1,r0              ;2017
001d86  9001              STR      r0,[sp,#4]            ;2017
001d88  2000              MOVS     r0,#0                 ;2019
001d8a  f7fffffe          BL       SDIO_GetResponse
001d8e  f0007000          AND      r0,r0,#0x2000000      ;2019
001d92  b110              CBZ      r0,|L1.7578|
001d94  240e              MOVS     r4,#0xe               ;2021
001d96  4620              MOV      r0,r4                 ;2022
001d98  e7ec              B        |L1.7540|
                  |L1.7578|
001d9a  4827              LDR      r0,|L1.7736|
001d9c  6800              LDR      r0,[r0,#0]            ;2025  ; CardType
001d9e  2802              CMP      r0,#2                 ;2025
001da0  d101              BNE      |L1.7590|
001da2  0a6d              LSRS     r5,r5,#9              ;2027
001da4  0a76              LSRS     r6,r6,#9              ;2028
                  |L1.7590|
001da6  4824              LDR      r0,|L1.7736|
001da8  6800              LDR      r0,[r0,#0]            ;2032  ; CardType
001daa  b138              CBZ      r0,|L1.7612|
001dac  4822              LDR      r0,|L1.7736|
001dae  6800              LDR      r0,[r0,#0]            ;2032  ; CardType
001db0  2801              CMP      r0,#1                 ;2032
001db2  d003              BEQ      |L1.7612|
001db4  4820              LDR      r0,|L1.7736|
001db6  6800              LDR      r0,[r0,#0]            ;2032  ; CardType
001db8  2802              CMP      r0,#2                 ;2032
001dba  d12d              BNE      |L1.7704|
                  |L1.7612|
001dbc  4820              LDR      r0,|L1.7744|
001dbe  6005              STR      r5,[r0,#0]            ;2035  ; SDIO_CmdInitStructure
001dc0  2020              MOVS     r0,#0x20              ;2036
001dc2  491f              LDR      r1,|L1.7744|
001dc4  6048              STR      r0,[r1,#4]            ;2036  ; SDIO_CmdInitStructure
001dc6  2040              MOVS     r0,#0x40              ;2037
001dc8  6088              STR      r0,[r1,#8]            ;2037  ; SDIO_CmdInitStructure
001dca  2000              MOVS     r0,#0                 ;2038
001dcc  60c8              STR      r0,[r1,#0xc]          ;2038  ; SDIO_CmdInitStructure
001dce  f44f6080          MOV      r0,#0x400             ;2039
001dd2  6108              STR      r0,[r1,#0x10]         ;2039  ; SDIO_CmdInitStructure
001dd4  4608              MOV      r0,r1                 ;2040
001dd6  f7fffffe          BL       SDIO_SendCommand
001dda  2020              MOVS     r0,#0x20              ;2042
001ddc  f7fffffe          BL       CmdResp1Error
001de0  4604              MOV      r4,r0                 ;2042
001de2  2c2a              CMP      r4,#0x2a              ;2043
001de4  d001              BEQ      |L1.7658|
001de6  4620              MOV      r0,r4                 ;2045
001de8  e7c4              B        |L1.7540|
                  |L1.7658|
001dea  4815              LDR      r0,|L1.7744|
001dec  6006              STR      r6,[r0,#0]            ;2049  ; SDIO_CmdInitStructure
001dee  2021              MOVS     r0,#0x21              ;2050
001df0  4913              LDR      r1,|L1.7744|
001df2  6048              STR      r0,[r1,#4]            ;2050  ; SDIO_CmdInitStructure
001df4  2040              MOVS     r0,#0x40              ;2051
001df6  6088              STR      r0,[r1,#8]            ;2051  ; SDIO_CmdInitStructure
001df8  2000              MOVS     r0,#0                 ;2052
001dfa  60c8              STR      r0,[r1,#0xc]          ;2052  ; SDIO_CmdInitStructure
001dfc  f44f6080          MOV      r0,#0x400             ;2053
001e00  6108              STR      r0,[r1,#0x10]         ;2053  ; SDIO_CmdInitStructure
001e02  4608              MOV      r0,r1                 ;2054
001e04  f7fffffe          BL       SDIO_SendCommand
001e08  2021              MOVS     r0,#0x21              ;2056
001e0a  f7fffffe          BL       CmdResp1Error
001e0e  4604              MOV      r4,r0                 ;2056
001e10  2c2a              CMP      r4,#0x2a              ;2057
001e12  d001              BEQ      |L1.7704|
001e14  4620              MOV      r0,r4                 ;2059
001e16  e7ad              B        |L1.7540|
                  |L1.7704|
001e18  2000              MOVS     r0,#0                 ;2064
001e1a  4909              LDR      r1,|L1.7744|
001e1c  6008              STR      r0,[r1,#0]            ;2064  ; SDIO_CmdInitStructure
001e1e  2026              MOVS     r0,#0x26              ;2065
001e20  6048              STR      r0,[r1,#4]            ;2065  ; SDIO_CmdInitStructure
001e22  2040              MOVS     r0,#0x40              ;2066
001e24  6088              STR      r0,[r1,#8]            ;2066  ; SDIO_CmdInitStructure
001e26  2000              MOVS     r0,#0                 ;2067
001e28  60c8              STR      r0,[r1,#0xc]          ;2067  ; SDIO_CmdInitStructure
001e2a  f44f6080          MOV      r0,#0x400             ;2068
001e2e  6108              STR      r0,[r1,#0x10]         ;2068  ; SDIO_CmdInitStructure
001e30  4608              MOV      r0,r1                 ;2069
001e32  f7fffffe          BL       SDIO_SendCommand
001e36  e01b              B        |L1.7792|
                  |L1.7736|
                          DCD      CardType
                  |L1.7740|
                          DCD      ||RCA||
                  |L1.7744|
                          DCD      SDIO_CmdInitStructure
                  |L1.7748|
                          DCD      TotalNumberOfBytes
                  |L1.7752|
                          DCD      StopCondition
                  |L1.7756|
                          DCD      SrcBuffer
                  |L1.7760|
                          DCD      0x000fffff
                  |L1.7764|
                          DCD      SDIO_DataInitStructure
                  |L1.7768|
                          DCD      DeviceMode
                  |L1.7772|
                          DCD      0x40018000
                  |L1.7776|
                          DCD      TransferEnd
                  |L1.7780|
                          DCD      TransferError
                  |L1.7784|
                          DCD      CSD_Tab
                  |L1.7788|
                          DCD      0x0001d4c0
                  |L1.7792|
001e70  2026              MOVS     r0,#0x26              ;2071
001e72  f7fffffe          BL       CmdResp1Error
001e76  4604              MOV      r4,r0                 ;2071
001e78  2c2a              CMP      r4,#0x2a              ;2073
001e7a  d001              BEQ      |L1.7808|
001e7c  4620              MOV      r0,r4                 ;2075
001e7e  e779              B        |L1.7540|
                  |L1.7808|
001e80  2700              MOVS     r7,#0                 ;2078
001e82  e000              B        |L1.7814|
                  |L1.7812|
001e84  1c7f              ADDS     r7,r7,#1              ;2078
                  |L1.7814|
001e86  9801              LDR      r0,[sp,#4]            ;2078
001e88  4287              CMP      r7,r0                 ;2078
001e8a  d3fb              BCC      |L1.7812|
001e8c  4668              MOV      r0,sp                 ;2082
001e8e  f7fffffe          BL       IsCardProgramming
001e92  4604              MOV      r4,r0                 ;2082
001e94  e003              B        |L1.7838|
                  |L1.7830|
001e96  4668              MOV      r0,sp                 ;2086
001e98  f7fffffe          BL       IsCardProgramming
001e9c  4604              MOV      r4,r0                 ;2086
                  |L1.7838|
001e9e  2c2a              CMP      r4,#0x2a              ;2084
001ea0  d107              BNE      |L1.7858|
001ea2  f89d0000          LDRB     r0,[sp,#0]            ;2084
001ea6  2807              CMP      r0,#7                 ;2084
001ea8  d0f5              BEQ      |L1.7830|
001eaa  f89d0000          LDRB     r0,[sp,#0]            ;2084
001eae  2806              CMP      r0,#6                 ;2084
001eb0  d0f1              BEQ      |L1.7830|
                  |L1.7858|
001eb2  4620              MOV      r0,r4                 ;2089
001eb4  e75e              B        |L1.7540|
;;;2091   
                          ENDP

                  SD_SendSDStatus PROC
;;;2133     */
;;;2134   SD_Error SD_SendSDStatus(uint32_t *psdstatus)
001eb6  b570              PUSH     {r4-r6,lr}
;;;2135   {
001eb8  4604              MOV      r4,r0
;;;2136     SD_Error errorstatus = SD_OK;
001eba  262a              MOVS     r6,#0x2a
;;;2137     uint32_t count = 0;
001ebc  2500              MOVS     r5,#0
;;;2138   
;;;2139     if (SDIO_GetResponse(SDIO_RESP1) & SD_CARD_LOCKED)
001ebe  2000              MOVS     r0,#0
001ec0  f7fffffe          BL       SDIO_GetResponse
001ec4  f0007000          AND      r0,r0,#0x2000000
001ec8  b110              CBZ      r0,|L1.7888|
;;;2140     {
;;;2141       errorstatus = SD_LOCK_UNLOCK_FAILED;
001eca  260e              MOVS     r6,#0xe
;;;2142       return(errorstatus);
001ecc  4630              MOV      r0,r6
                  |L1.7886|
;;;2143     }
;;;2144   
;;;2145     /*!< Set block size for card if it is not equal to current block size for card. */
;;;2146     SDIO_CmdInitStructure.SDIO_Argument = 64;
;;;2147     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_BLOCKLEN;
;;;2148     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;2149     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;2150     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;2151     SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;2152   
;;;2153     errorstatus = CmdResp1Error(SD_CMD_SET_BLOCKLEN);
;;;2154   
;;;2155     if (errorstatus != SD_OK)
;;;2156     {
;;;2157       return(errorstatus);
;;;2158     }
;;;2159   
;;;2160     /*!< CMD55 */
;;;2161     SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
;;;2162     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
;;;2163     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;2164     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;2165     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;2166     SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;2167     errorstatus = CmdResp1Error(SD_CMD_APP_CMD);
;;;2168   
;;;2169     if (errorstatus != SD_OK)
;;;2170     {
;;;2171       return(errorstatus);
;;;2172     }
;;;2173   
;;;2174     SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
;;;2175     SDIO_DataInitStructure.SDIO_DataLength = 64;
;;;2176     SDIO_DataInitStructure.SDIO_DataBlockSize = SDIO_DataBlockSize_64b;
;;;2177     SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToSDIO;
;;;2178     SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
;;;2179     SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
;;;2180     SDIO_DataConfig(&SDIO_DataInitStructure);
;;;2181   
;;;2182     /*!< Send ACMD13 SD_APP_STAUS  with argument as card's RCA.*/
;;;2183     SDIO_CmdInitStructure.SDIO_Argument = 0;
;;;2184     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SD_APP_STAUS;
;;;2185     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;2186     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;2187     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;2188     SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;2189     errorstatus = CmdResp1Error(SD_CMD_SD_APP_STAUS);
;;;2190   
;;;2191     if (errorstatus != SD_OK)
;;;2192     {
;;;2193       return(errorstatus);
;;;2194     }
;;;2195   
;;;2196     while (!(SDIO->STA &(SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND | SDIO_FLAG_STBITERR)))
;;;2197     {
;;;2198       if (SDIO_GetFlagStatus(SDIO_FLAG_RXFIFOHF) != RESET)
;;;2199       {
;;;2200         for (count = 0; count < 8; count++)
;;;2201         {
;;;2202           *(psdstatus + count) = SDIO_ReadData();
;;;2203         }
;;;2204         psdstatus += 8;
;;;2205       }
;;;2206     }
;;;2207   
;;;2208     if (SDIO_GetFlagStatus(SDIO_FLAG_DTIMEOUT) != RESET)
;;;2209     {
;;;2210       SDIO_ClearFlag(SDIO_FLAG_DTIMEOUT);
;;;2211       errorstatus = SD_DATA_TIMEOUT;
;;;2212       return(errorstatus);
;;;2213     }
;;;2214     else if (SDIO_GetFlagStatus(SDIO_FLAG_DCRCFAIL) != RESET)
;;;2215     {
;;;2216       SDIO_ClearFlag(SDIO_FLAG_DCRCFAIL);
;;;2217       errorstatus = SD_DATA_CRC_FAIL;
;;;2218       return(errorstatus);
;;;2219     }
;;;2220     else if (SDIO_GetFlagStatus(SDIO_FLAG_RXOVERR) != RESET)
;;;2221     {
;;;2222       SDIO_ClearFlag(SDIO_FLAG_RXOVERR);
;;;2223       errorstatus = SD_RX_OVERRUN;
;;;2224       return(errorstatus);
;;;2225     }
;;;2226     else if (SDIO_GetFlagStatus(SDIO_FLAG_STBITERR) != RESET)
;;;2227     {
;;;2228       SDIO_ClearFlag(SDIO_FLAG_STBITERR);
;;;2229       errorstatus = SD_START_BIT_ERR;
;;;2230       return(errorstatus);
;;;2231     }
;;;2232   
;;;2233     while (SDIO_GetFlagStatus(SDIO_FLAG_RXDAVL) != RESET)
;;;2234     {
;;;2235       *psdstatus = SDIO_ReadData();
;;;2236       psdstatus++;
;;;2237     }
;;;2238   
;;;2239     /*!< Clear all the static status flags*/
;;;2240     SDIO_ClearFlag(SDIO_STATIC_FLAGS);
;;;2241     psdstatus -= 16;
;;;2242     for (count = 0; count < 16; count++)
;;;2243     {
;;;2244       psdstatus[count] = ((psdstatus[count] & SD_0TO7BITS) << 24) |((psdstatus[count] & SD_8TO15BITS) << 8) |
;;;2245                          ((psdstatus[count] & SD_16TO23BITS) >> 8) |((psdstatus[count] & SD_24TO31BITS) >> 24);
;;;2246     }
;;;2247     return(errorstatus);
;;;2248   }
001ece  bd70              POP      {r4-r6,pc}
                  |L1.7888|
001ed0  2040              MOVS     r0,#0x40              ;2146
001ed2  49eb              LDR      r1,|L1.8832|
001ed4  6008              STR      r0,[r1,#0]            ;2146  ; SDIO_CmdInitStructure
001ed6  2010              MOVS     r0,#0x10              ;2147
001ed8  6048              STR      r0,[r1,#4]            ;2147  ; SDIO_CmdInitStructure
001eda  2040              MOVS     r0,#0x40              ;2148
001edc  6088              STR      r0,[r1,#8]            ;2148  ; SDIO_CmdInitStructure
001ede  2000              MOVS     r0,#0                 ;2149
001ee0  60c8              STR      r0,[r1,#0xc]          ;2149  ; SDIO_CmdInitStructure
001ee2  f44f6080          MOV      r0,#0x400             ;2150
001ee6  6108              STR      r0,[r1,#0x10]         ;2150  ; SDIO_CmdInitStructure
001ee8  4608              MOV      r0,r1                 ;2151
001eea  f7fffffe          BL       SDIO_SendCommand
001eee  2010              MOVS     r0,#0x10              ;2153
001ef0  f7fffffe          BL       CmdResp1Error
001ef4  4606              MOV      r6,r0                 ;2153
001ef6  2e2a              CMP      r6,#0x2a              ;2155
001ef8  d001              BEQ      |L1.7934|
001efa  4630              MOV      r0,r6                 ;2157
001efc  e7e7              B        |L1.7886|
                  |L1.7934|
001efe  48e1              LDR      r0,|L1.8836|
001f00  8800              LDRH     r0,[r0,#0]            ;2161  ; RCA
001f02  0400              LSLS     r0,r0,#16             ;2161
001f04  49de              LDR      r1,|L1.8832|
001f06  6008              STR      r0,[r1,#0]            ;2161  ; SDIO_CmdInitStructure
001f08  2037              MOVS     r0,#0x37              ;2162
001f0a  6048              STR      r0,[r1,#4]            ;2162  ; SDIO_CmdInitStructure
001f0c  2040              MOVS     r0,#0x40              ;2163
001f0e  6088              STR      r0,[r1,#8]            ;2163  ; SDIO_CmdInitStructure
001f10  2000              MOVS     r0,#0                 ;2164
001f12  60c8              STR      r0,[r1,#0xc]          ;2164  ; SDIO_CmdInitStructure
001f14  f44f6080          MOV      r0,#0x400             ;2165
001f18  6108              STR      r0,[r1,#0x10]         ;2165  ; SDIO_CmdInitStructure
001f1a  4608              MOV      r0,r1                 ;2166
001f1c  f7fffffe          BL       SDIO_SendCommand
001f20  2037              MOVS     r0,#0x37              ;2167
001f22  f7fffffe          BL       CmdResp1Error
001f26  4606              MOV      r6,r0                 ;2167
001f28  2e2a              CMP      r6,#0x2a              ;2169
001f2a  d001              BEQ      |L1.7984|
001f2c  4630              MOV      r0,r6                 ;2171
001f2e  e7ce              B        |L1.7886|
                  |L1.7984|
001f30  48d5              LDR      r0,|L1.8840|
001f32  49d6              LDR      r1,|L1.8844|
001f34  6008              STR      r0,[r1,#0]            ;2174  ; SDIO_DataInitStructure
001f36  2040              MOVS     r0,#0x40              ;2175
001f38  6048              STR      r0,[r1,#4]            ;2175  ; SDIO_DataInitStructure
001f3a  2060              MOVS     r0,#0x60              ;2176
001f3c  6088              STR      r0,[r1,#8]            ;2176  ; SDIO_DataInitStructure
001f3e  2002              MOVS     r0,#2                 ;2177
001f40  60c8              STR      r0,[r1,#0xc]          ;2177  ; SDIO_DataInitStructure
001f42  2000              MOVS     r0,#0                 ;2178
001f44  6108              STR      r0,[r1,#0x10]         ;2178  ; SDIO_DataInitStructure
001f46  2001              MOVS     r0,#1                 ;2179
001f48  6148              STR      r0,[r1,#0x14]         ;2179  ; SDIO_DataInitStructure
001f4a  4608              MOV      r0,r1                 ;2180
001f4c  f7fffffe          BL       SDIO_DataConfig
001f50  2000              MOVS     r0,#0                 ;2183
001f52  49cb              LDR      r1,|L1.8832|
001f54  6008              STR      r0,[r1,#0]            ;2183  ; SDIO_CmdInitStructure
001f56  200d              MOVS     r0,#0xd               ;2184
001f58  6048              STR      r0,[r1,#4]            ;2184  ; SDIO_CmdInitStructure
001f5a  2040              MOVS     r0,#0x40              ;2185
001f5c  6088              STR      r0,[r1,#8]            ;2185  ; SDIO_CmdInitStructure
001f5e  2000              MOVS     r0,#0                 ;2186
001f60  60c8              STR      r0,[r1,#0xc]          ;2186  ; SDIO_CmdInitStructure
001f62  f44f6080          MOV      r0,#0x400             ;2187
001f66  6108              STR      r0,[r1,#0x10]         ;2187  ; SDIO_CmdInitStructure
001f68  4608              MOV      r0,r1                 ;2188
001f6a  f7fffffe          BL       SDIO_SendCommand
001f6e  200d              MOVS     r0,#0xd               ;2189
001f70  f7fffffe          BL       CmdResp1Error
001f74  4606              MOV      r6,r0                 ;2189
001f76  2e2a              CMP      r6,#0x2a              ;2191
001f78  d001              BEQ      |L1.8062|
001f7a  4630              MOV      r0,r6                 ;2193
001f7c  e7a7              B        |L1.7886|
                  |L1.8062|
001f7e  e00e              B        |L1.8094|
                  |L1.8064|
001f80  f44f4000          MOV      r0,#0x8000            ;2198
001f84  f7fffffe          BL       SDIO_GetFlagStatus
001f88  b148              CBZ      r0,|L1.8094|
001f8a  2500              MOVS     r5,#0                 ;2200
001f8c  e004              B        |L1.8088|
                  |L1.8078|
001f8e  f7fffffe          BL       SDIO_ReadData
001f92  f8440025          STR      r0,[r4,r5,LSL #2]     ;2202
001f96  1c6d              ADDS     r5,r5,#1              ;2200
                  |L1.8088|
001f98  2d08              CMP      r5,#8                 ;2200
001f9a  d3f8              BCC      |L1.8078|
001f9c  3420              ADDS     r4,r4,#0x20           ;2204
                  |L1.8094|
001f9e  48bc              LDR      r0,|L1.8848|
001fa0  6b40              LDR      r0,[r0,#0x34]         ;2196
001fa2  f240612a          MOV      r1,#0x62a             ;2196
001fa6  4008              ANDS     r0,r0,r1              ;2196
001fa8  2800              CMP      r0,#0                 ;2196
001faa  d0e9              BEQ      |L1.8064|
001fac  2008              MOVS     r0,#8                 ;2208
001fae  f7fffffe          BL       SDIO_GetFlagStatus
001fb2  b128              CBZ      r0,|L1.8128|
001fb4  2008              MOVS     r0,#8                 ;2210
001fb6  f7fffffe          BL       SDIO_ClearFlag
001fba  2604              MOVS     r6,#4                 ;2211
001fbc  4630              MOV      r0,r6                 ;2212
001fbe  e786              B        |L1.7886|
                  |L1.8128|
001fc0  2002              MOVS     r0,#2                 ;2214
001fc2  f7fffffe          BL       SDIO_GetFlagStatus
001fc6  b128              CBZ      r0,|L1.8148|
001fc8  2002              MOVS     r0,#2                 ;2216
001fca  f7fffffe          BL       SDIO_ClearFlag
001fce  2602              MOVS     r6,#2                 ;2217
001fd0  4630              MOV      r0,r6                 ;2218
001fd2  e77c              B        |L1.7886|
                  |L1.8148|
001fd4  2020              MOVS     r0,#0x20              ;2220
001fd6  f7fffffe          BL       SDIO_GetFlagStatus
001fda  b128              CBZ      r0,|L1.8168|
001fdc  2020              MOVS     r0,#0x20              ;2222
001fde  f7fffffe          BL       SDIO_ClearFlag
001fe2  2606              MOVS     r6,#6                 ;2223
001fe4  4630              MOV      r0,r6                 ;2224
001fe6  e772              B        |L1.7886|
                  |L1.8168|
001fe8  f44f7000          MOV      r0,#0x200             ;2226
001fec  f7fffffe          BL       SDIO_GetFlagStatus
001ff0  b130              CBZ      r0,|L1.8192|
001ff2  f44f7000          MOV      r0,#0x200             ;2228
001ff6  f7fffffe          BL       SDIO_ClearFlag
001ffa  2607              MOVS     r6,#7                 ;2229
001ffc  4630              MOV      r0,r6                 ;2230
001ffe  e766              B        |L1.7886|
                  |L1.8192|
002000  e003              B        |L1.8202|
                  |L1.8194|
002002  f7fffffe          BL       SDIO_ReadData
002006  6020              STR      r0,[r4,#0]            ;2235
002008  1d24              ADDS     r4,r4,#4              ;2236
                  |L1.8202|
00200a  f44f1000          MOV      r0,#0x200000          ;2233
00200e  f7fffffe          BL       SDIO_GetFlagStatus
002012  2800              CMP      r0,#0                 ;2233
002014  d1f5              BNE      |L1.8194|
002016  f24050ff          MOV      r0,#0x5ff             ;2240
00201a  f7fffffe          BL       SDIO_ClearFlag
00201e  3c40              SUBS     r4,r4,#0x40           ;2241
002020  2500              MOVS     r5,#0                 ;2242
002022  e015              B        |L1.8272|
                  |L1.8228|
002024  f8140025          LDRB     r0,[r4,r5,LSL #2]     ;2244
002028  0600              LSLS     r0,r0,#24             ;2244
00202a  f8341025          LDRH     r1,[r4,r5,LSL #2]     ;2244
00202e  f401417f          AND      r1,r1,#0xff00         ;2244
002032  ea402001          ORR      r0,r0,r1,LSL #8       ;2244
002036  f8541025          LDR      r1,[r4,r5,LSL #2]     ;2244
00203a  f401017f          AND      r1,r1,#0xff0000       ;2244
00203e  ea402011          ORR      r0,r0,r1,LSR #8       ;2244
002042  f8541025          LDR      r1,[r4,r5,LSL #2]     ;2244
002046  ea406011          ORR      r0,r0,r1,LSR #24      ;2244
00204a  f8440025          STR      r0,[r4,r5,LSL #2]     ;2244
00204e  1c6d              ADDS     r5,r5,#1              ;2242
                  |L1.8272|
002050  2d10              CMP      r5,#0x10              ;2242
002052  d3e7              BCC      |L1.8228|
002054  4630              MOV      r0,r6                 ;2247
002056  e73a              B        |L1.7886|
;;;2249   
                          ENDP

                  SD_ProcessIRQSrc PROC
;;;2254     */
;;;2255   SD_Error SD_ProcessIRQSrc(void)
002058  b570              PUSH     {r4-r6,lr}
;;;2256   {
;;;2257     uint32_t count = 0, restwords = 0;
00205a  2400              MOVS     r4,#0
00205c  2500              MOVS     r5,#0
;;;2258   
;;;2259     if (DeviceMode == SD_INTERRUPT_MODE)
00205e  488d              LDR      r0,|L1.8852|
002060  6800              LDR      r0,[r0,#0]  ; DeviceMode
002062  2801              CMP      r0,#1
002064  d167              BNE      |L1.8502|
;;;2260     {
;;;2261       if (SDIO_GetITStatus(SDIO_IT_RXFIFOHF) != RESET)
002066  03c0              LSLS     r0,r0,#15
002068  f7fffffe          BL       SDIO_GetITStatus
00206c  b1a8              CBZ      r0,|L1.8346|
;;;2262       {
;;;2263         for (count = 0; count < SD_HALFFIFO; count++)
00206e  bf00              NOP      
002070  e006              B        |L1.8320|
                  |L1.8306|
;;;2264         {
;;;2265           *(DestBuffer + count) = SDIO_ReadData();
002072  f7fffffe          BL       SDIO_ReadData
002076  4988              LDR      r1,|L1.8856|
002078  6809              LDR      r1,[r1,#0]  ; DestBuffer
00207a  f8410024          STR      r0,[r1,r4,LSL #2]
00207e  1c64              ADDS     r4,r4,#1              ;2263
                  |L1.8320|
002080  2c08              CMP      r4,#8                 ;2263
002082  d3f6              BCC      |L1.8306|
;;;2266         }
;;;2267         DestBuffer += SD_HALFFIFO;
002084  4884              LDR      r0,|L1.8856|
002086  6800              LDR      r0,[r0,#0]  ; DestBuffer
002088  3020              ADDS     r0,r0,#0x20
00208a  4983              LDR      r1,|L1.8856|
00208c  6008              STR      r0,[r1,#0]  ; DestBuffer
;;;2268         NumberOfBytes += SD_HALFFIFOBYTES;
00208e  4883              LDR      r0,|L1.8860|
002090  6800              LDR      r0,[r0,#0]  ; NumberOfBytes
002092  3020              ADDS     r0,r0,#0x20
002094  4981              LDR      r1,|L1.8860|
002096  6008              STR      r0,[r1,#0]  ; NumberOfBytes
002098  e04d              B        |L1.8502|
                  |L1.8346|
;;;2269       }
;;;2270       else if (SDIO_GetITStatus(SDIO_IT_TXFIFOHE) != RESET)
00209a  f44f4080          MOV      r0,#0x4000
00209e  f7fffffe          BL       SDIO_GetITStatus
0020a2  2800              CMP      r0,#0
0020a4  d047              BEQ      |L1.8502|
;;;2271       {
;;;2272         if ((TotalNumberOfBytes - NumberOfBytes) < SD_HALFFIFOBYTES)
0020a6  487e              LDR      r0,|L1.8864|
0020a8  6800              LDR      r0,[r0,#0]  ; TotalNumberOfBytes
0020aa  497c              LDR      r1,|L1.8860|
0020ac  6809              LDR      r1,[r1,#0]  ; NumberOfBytes
0020ae  1a40              SUBS     r0,r0,r1
0020b0  2820              CMP      r0,#0x20
0020b2  d22b              BCS      |L1.8460|
;;;2273         {
;;;2274           restwords = ((TotalNumberOfBytes - NumberOfBytes) %  4 == 0) ?
0020b4  487a              LDR      r0,|L1.8864|
0020b6  7800              LDRB     r0,[r0,#0]  ; TotalNumberOfBytes
0020b8  4978              LDR      r1,|L1.8860|
0020ba  6809              LDR      r1,[r1,#0]  ; NumberOfBytes
0020bc  1a40              SUBS     r0,r0,r1
0020be  f0000003          AND      r0,r0,#3
0020c2  b930              CBNZ     r0,|L1.8402|
;;;2275                       ((TotalNumberOfBytes - NumberOfBytes) / 4) :
0020c4  4876              LDR      r0,|L1.8864|
0020c6  6800              LDR      r0,[r0,#0]  ; TotalNumberOfBytes
0020c8  4974              LDR      r1,|L1.8860|
0020ca  6809              LDR      r1,[r1,#0]  ; NumberOfBytes
0020cc  1a40              SUBS     r0,r0,r1
0020ce  0880              LSRS     r0,r0,#2
0020d0  e006              B        |L1.8416|
                  |L1.8402|
;;;2276                       ((TotalNumberOfBytes - NumberOfBytes) / 4 + 1);
0020d2  4873              LDR      r0,|L1.8864|
0020d4  6800              LDR      r0,[r0,#0]  ; TotalNumberOfBytes
0020d6  4971              LDR      r1,|L1.8860|
0020d8  6809              LDR      r1,[r1,#0]  ; NumberOfBytes
0020da  1a40              SUBS     r0,r0,r1
0020dc  0880              LSRS     r0,r0,#2
0020de  1c40              ADDS     r0,r0,#1
                  |L1.8416|
0020e0  4605              MOV      r5,r0
;;;2277   
;;;2278           for (count = 0; count < restwords;  count++, SrcBuffer++, NumberOfBytes += 4)
0020e2  2400              MOVS     r4,#0
0020e4  e00f              B        |L1.8454|
                  |L1.8422|
;;;2279           {
;;;2280             SDIO_WriteData(*SrcBuffer);
0020e6  496f              LDR      r1,|L1.8868|
0020e8  6809              LDR      r1,[r1,#0]  ; SrcBuffer
0020ea  6808              LDR      r0,[r1,#0]
0020ec  f7fffffe          BL       SDIO_WriteData
0020f0  1c64              ADDS     r4,r4,#1              ;2278
0020f2  486c              LDR      r0,|L1.8868|
0020f4  6800              LDR      r0,[r0,#0]            ;2278  ; SrcBuffer
0020f6  1d00              ADDS     r0,r0,#4              ;2278
0020f8  496a              LDR      r1,|L1.8868|
0020fa  6008              STR      r0,[r1,#0]            ;2278  ; SrcBuffer
0020fc  4867              LDR      r0,|L1.8860|
0020fe  6800              LDR      r0,[r0,#0]            ;2278  ; NumberOfBytes
002100  1d00              ADDS     r0,r0,#4              ;2278
002102  4966              LDR      r1,|L1.8860|
002104  6008              STR      r0,[r1,#0]            ;2278  ; NumberOfBytes
                  |L1.8454|
002106  42ac              CMP      r4,r5                 ;2278
002108  d3ed              BCC      |L1.8422|
00210a  e014              B        |L1.8502|
                  |L1.8460|
;;;2281           }
;;;2282         }
;;;2283         else
;;;2284         {
;;;2285           for (count = 0; count < SD_HALFFIFO; count++)
00210c  2400              MOVS     r4,#0
00210e  e006              B        |L1.8478|
                  |L1.8464|
;;;2286           {
;;;2287             SDIO_WriteData(*(SrcBuffer + count));
002110  4964              LDR      r1,|L1.8868|
002112  6809              LDR      r1,[r1,#0]  ; SrcBuffer
002114  f8510024          LDR      r0,[r1,r4,LSL #2]
002118  f7fffffe          BL       SDIO_WriteData
00211c  1c64              ADDS     r4,r4,#1              ;2285
                  |L1.8478|
00211e  2c08              CMP      r4,#8                 ;2285
002120  d3f6              BCC      |L1.8464|
;;;2288           }
;;;2289   
;;;2290           SrcBuffer += SD_HALFFIFO;
002122  4860              LDR      r0,|L1.8868|
002124  6800              LDR      r0,[r0,#0]  ; SrcBuffer
002126  3020              ADDS     r0,r0,#0x20
002128  495e              LDR      r1,|L1.8868|
00212a  6008              STR      r0,[r1,#0]  ; SrcBuffer
;;;2291           NumberOfBytes += SD_HALFFIFOBYTES;
00212c  485b              LDR      r0,|L1.8860|
00212e  6800              LDR      r0,[r0,#0]  ; NumberOfBytes
002130  3020              ADDS     r0,r0,#0x20
002132  495a              LDR      r1,|L1.8860|
002134  6008              STR      r0,[r1,#0]  ; NumberOfBytes
                  |L1.8502|
;;;2292         }
;;;2293       }
;;;2294     }
;;;2295   
;;;2296     if (SDIO_GetITStatus(SDIO_IT_DATAEND) != RESET)
002136  f44f7080          MOV      r0,#0x100
00213a  f7fffffe          BL       SDIO_GetITStatus
00213e  b3d8              CBZ      r0,|L1.8632|
;;;2297     {
;;;2298       if (DeviceMode != SD_DMA_MODE)
002140  4854              LDR      r0,|L1.8852|
002142  6800              LDR      r0,[r0,#0]  ; DeviceMode
002144  b1d0              CBZ      r0,|L1.8572|
;;;2299       {
;;;2300         while ((SDIO_GetFlagStatus(SDIO_FLAG_RXDAVL) != RESET)  &&  (NumberOfBytes < TotalNumberOfBytes))
002146  e00e              B        |L1.8550|
                  |L1.8520|
;;;2301         {
;;;2302           *DestBuffer = SDIO_ReadData();
002148  f7fffffe          BL       SDIO_ReadData
00214c  4952              LDR      r1,|L1.8856|
00214e  6809              LDR      r1,[r1,#0]  ; DestBuffer
002150  6008              STR      r0,[r1,#0]
;;;2303           DestBuffer++;
002152  4851              LDR      r0,|L1.8856|
002154  6800              LDR      r0,[r0,#0]  ; DestBuffer
002156  1d00              ADDS     r0,r0,#4
002158  494f              LDR      r1,|L1.8856|
00215a  6008              STR      r0,[r1,#0]  ; DestBuffer
;;;2304           NumberOfBytes += 4;
00215c  484f              LDR      r0,|L1.8860|
00215e  6800              LDR      r0,[r0,#0]  ; NumberOfBytes
002160  1d00              ADDS     r0,r0,#4
002162  494e              LDR      r1,|L1.8860|
002164  6008              STR      r0,[r1,#0]  ; NumberOfBytes
                  |L1.8550|
002166  f44f1000          MOV      r0,#0x200000          ;2300
00216a  f7fffffe          BL       SDIO_GetFlagStatus
00216e  b128              CBZ      r0,|L1.8572|
002170  484a              LDR      r0,|L1.8860|
002172  6800              LDR      r0,[r0,#0]            ;2300  ; NumberOfBytes
002174  494a              LDR      r1,|L1.8864|
002176  6809              LDR      r1,[r1,#0]            ;2300  ; TotalNumberOfBytes
002178  4288              CMP      r0,r1                 ;2300
00217a  d3e5              BCC      |L1.8520|
                  |L1.8572|
;;;2305         }
;;;2306       }
;;;2307   
;;;2308       if (StopCondition == 1)
00217c  484a              LDR      r0,|L1.8872|
00217e  6800              LDR      r0,[r0,#0]  ; StopCondition
002180  2801              CMP      r0,#1
002182  d104              BNE      |L1.8590|
;;;2309       {
;;;2310         TransferError = SD_StopTransfer();
002184  f7fffffe          BL       SD_StopTransfer
002188  4948              LDR      r1,|L1.8876|
00218a  7008              STRB     r0,[r1,#0]
00218c  e002              B        |L1.8596|
                  |L1.8590|
;;;2311       }
;;;2312       else
;;;2313       {
;;;2314         TransferError = SD_OK;
00218e  202a              MOVS     r0,#0x2a
002190  4946              LDR      r1,|L1.8876|
002192  7008              STRB     r0,[r1,#0]
                  |L1.8596|
;;;2315       }
;;;2316       SDIO_ClearITPendingBit(SDIO_IT_DATAEND);
002194  f44f7080          MOV      r0,#0x100
002198  f7fffffe          BL       SDIO_ClearITPendingBit
;;;2317       SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND |
00219c  2100              MOVS     r1,#0
00219e  f24c303a          MOV      r0,#0xc33a
0021a2  f7fffffe          BL       SDIO_ITConfig
;;;2318                     SDIO_IT_TXFIFOHE | SDIO_IT_RXFIFOHF | SDIO_IT_TXUNDERR |
;;;2319                     SDIO_IT_RXOVERR | SDIO_IT_STBITERR, DISABLE);
;;;2320       TransferEnd = 1;
0021a6  2001              MOVS     r0,#1
0021a8  4941              LDR      r1,|L1.8880|
0021aa  6008              STR      r0,[r1,#0]  ; TransferEnd
;;;2321       NumberOfBytes = 0;
0021ac  2000              MOVS     r0,#0
0021ae  493b              LDR      r1,|L1.8860|
0021b0  6008              STR      r0,[r1,#0]  ; NumberOfBytes
;;;2322       return(TransferError);
0021b2  483e              LDR      r0,|L1.8876|
0021b4  7800              LDRB     r0,[r0,#0]  ; TransferError
                  |L1.8630|
;;;2323     }
;;;2324   
;;;2325     if (SDIO_GetITStatus(SDIO_IT_DCRCFAIL) != RESET)
;;;2326     {
;;;2327       SDIO_ClearITPendingBit(SDIO_IT_DCRCFAIL);
;;;2328       SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND |
;;;2329                     SDIO_IT_TXFIFOHE | SDIO_IT_RXFIFOHF | SDIO_IT_TXUNDERR |
;;;2330                     SDIO_IT_RXOVERR | SDIO_IT_STBITERR, DISABLE);
;;;2331       NumberOfBytes = 0;
;;;2332       TransferError = SD_DATA_CRC_FAIL;
;;;2333       return(SD_DATA_CRC_FAIL);
;;;2334     }
;;;2335   
;;;2336     if (SDIO_GetITStatus(SDIO_IT_DTIMEOUT) != RESET)
;;;2337     {
;;;2338       SDIO_ClearITPendingBit(SDIO_IT_DTIMEOUT);
;;;2339       SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND |
;;;2340                     SDIO_IT_TXFIFOHE | SDIO_IT_RXFIFOHF | SDIO_IT_TXUNDERR |
;;;2341                     SDIO_IT_RXOVERR | SDIO_IT_STBITERR, DISABLE);
;;;2342       NumberOfBytes = 0;
;;;2343       TransferError = SD_DATA_TIMEOUT;
;;;2344       return(SD_DATA_TIMEOUT);
;;;2345     }
;;;2346   
;;;2347     if (SDIO_GetITStatus(SDIO_IT_RXOVERR) != RESET)
;;;2348     {
;;;2349       SDIO_ClearITPendingBit(SDIO_IT_RXOVERR);
;;;2350       SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND |
;;;2351                     SDIO_IT_TXFIFOHE | SDIO_IT_RXFIFOHF | SDIO_IT_TXUNDERR |
;;;2352                     SDIO_IT_RXOVERR | SDIO_IT_STBITERR, DISABLE);
;;;2353       NumberOfBytes = 0;
;;;2354       TransferError = SD_RX_OVERRUN;
;;;2355       return(SD_RX_OVERRUN);
;;;2356     }
;;;2357   
;;;2358     if (SDIO_GetITStatus(SDIO_IT_TXUNDERR) != RESET)
;;;2359     {
;;;2360       SDIO_ClearITPendingBit(SDIO_IT_TXUNDERR);
;;;2361       SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND |
;;;2362                     SDIO_IT_TXFIFOHE | SDIO_IT_RXFIFOHF | SDIO_IT_TXUNDERR |
;;;2363                     SDIO_IT_RXOVERR | SDIO_IT_STBITERR, DISABLE);
;;;2364       NumberOfBytes = 0;
;;;2365       TransferError = SD_TX_UNDERRUN;
;;;2366       return(SD_TX_UNDERRUN);
;;;2367     }
;;;2368   
;;;2369     if (SDIO_GetITStatus(SDIO_IT_STBITERR) != RESET)
;;;2370     {
;;;2371       SDIO_ClearITPendingBit(SDIO_IT_STBITERR);
;;;2372       SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND |
;;;2373                     SDIO_IT_TXFIFOHE | SDIO_IT_RXFIFOHF | SDIO_IT_TXUNDERR |
;;;2374                     SDIO_IT_RXOVERR | SDIO_IT_STBITERR, DISABLE);
;;;2375       NumberOfBytes = 0;
;;;2376       TransferError = SD_START_BIT_ERR;
;;;2377       return(SD_START_BIT_ERR);
;;;2378     }
;;;2379   
;;;2380     return(SD_OK);
;;;2381   }
0021b6  bd70              POP      {r4-r6,pc}
                  |L1.8632|
0021b8  e7ff              B        |L1.8634|
                  |L1.8634|
0021ba  2002              MOVS     r0,#2                 ;2325
0021bc  f7fffffe          BL       SDIO_GetITStatus
0021c0  b170              CBZ      r0,|L1.8672|
0021c2  2002              MOVS     r0,#2                 ;2327
0021c4  f7fffffe          BL       SDIO_ClearITPendingBit
0021c8  2100              MOVS     r1,#0                 ;2328
0021ca  f24c303a          MOV      r0,#0xc33a            ;2328
0021ce  f7fffffe          BL       SDIO_ITConfig
0021d2  2000              MOVS     r0,#0                 ;2331
0021d4  4931              LDR      r1,|L1.8860|
0021d6  6008              STR      r0,[r1,#0]            ;2331  ; NumberOfBytes
0021d8  2002              MOVS     r0,#2                 ;2332
0021da  4934              LDR      r1,|L1.8876|
0021dc  7008              STRB     r0,[r1,#0]            ;2332
0021de  e7ea              B        |L1.8630|
                  |L1.8672|
0021e0  2008              MOVS     r0,#8                 ;2336
0021e2  f7fffffe          BL       SDIO_GetITStatus
0021e6  b170              CBZ      r0,|L1.8710|
0021e8  2008              MOVS     r0,#8                 ;2338
0021ea  f7fffffe          BL       SDIO_ClearITPendingBit
0021ee  2100              MOVS     r1,#0                 ;2339
0021f0  f24c303a          MOV      r0,#0xc33a            ;2339
0021f4  f7fffffe          BL       SDIO_ITConfig
0021f8  2000              MOVS     r0,#0                 ;2342
0021fa  4928              LDR      r1,|L1.8860|
0021fc  6008              STR      r0,[r1,#0]            ;2342  ; NumberOfBytes
0021fe  2004              MOVS     r0,#4                 ;2343
002200  492a              LDR      r1,|L1.8876|
002202  7008              STRB     r0,[r1,#0]            ;2343
002204  e7d7              B        |L1.8630|
                  |L1.8710|
002206  2020              MOVS     r0,#0x20              ;2347
002208  f7fffffe          BL       SDIO_GetITStatus
00220c  b170              CBZ      r0,|L1.8748|
00220e  2020              MOVS     r0,#0x20              ;2349
002210  f7fffffe          BL       SDIO_ClearITPendingBit
002214  2100              MOVS     r1,#0                 ;2350
002216  f24c303a          MOV      r0,#0xc33a            ;2350
00221a  f7fffffe          BL       SDIO_ITConfig
00221e  2000              MOVS     r0,#0                 ;2353
002220  491e              LDR      r1,|L1.8860|
002222  6008              STR      r0,[r1,#0]            ;2353  ; NumberOfBytes
002224  2006              MOVS     r0,#6                 ;2354
002226  4921              LDR      r1,|L1.8876|
002228  7008              STRB     r0,[r1,#0]            ;2354
00222a  e7c4              B        |L1.8630|
                  |L1.8748|
00222c  2010              MOVS     r0,#0x10              ;2358
00222e  f7fffffe          BL       SDIO_GetITStatus
002232  b170              CBZ      r0,|L1.8786|
002234  2010              MOVS     r0,#0x10              ;2360
002236  f7fffffe          BL       SDIO_ClearITPendingBit
00223a  2100              MOVS     r1,#0                 ;2361
00223c  f24c303a          MOV      r0,#0xc33a            ;2361
002240  f7fffffe          BL       SDIO_ITConfig
002244  2000              MOVS     r0,#0                 ;2364
002246  4915              LDR      r1,|L1.8860|
002248  6008              STR      r0,[r1,#0]            ;2364  ; NumberOfBytes
00224a  2005              MOVS     r0,#5                 ;2365
00224c  4917              LDR      r1,|L1.8876|
00224e  7008              STRB     r0,[r1,#0]            ;2365
002250  e7b1              B        |L1.8630|
                  |L1.8786|
002252  f44f7000          MOV      r0,#0x200             ;2369
002256  f7fffffe          BL       SDIO_GetITStatus
00225a  b178              CBZ      r0,|L1.8828|
00225c  f44f7000          MOV      r0,#0x200             ;2371
002260  f7fffffe          BL       SDIO_ClearITPendingBit
002264  2100              MOVS     r1,#0                 ;2372
002266  f24c303a          MOV      r0,#0xc33a            ;2372
00226a  f7fffffe          BL       SDIO_ITConfig
00226e  2000              MOVS     r0,#0                 ;2375
002270  490a              LDR      r1,|L1.8860|
002272  6008              STR      r0,[r1,#0]            ;2375  ; NumberOfBytes
002274  2007              MOVS     r0,#7                 ;2376
002276  490d              LDR      r1,|L1.8876|
002278  7008              STRB     r0,[r1,#0]            ;2376
00227a  e79c              B        |L1.8630|
                  |L1.8828|
00227c  202a              MOVS     r0,#0x2a              ;2380
00227e  e79a              B        |L1.8630|
;;;2382   
                          ENDP

                  |L1.8832|
                          DCD      SDIO_CmdInitStructure
                  |L1.8836|
                          DCD      ||RCA||
                  |L1.8840|
                          DCD      0x000fffff
                  |L1.8844|
                          DCD      SDIO_DataInitStructure
                  |L1.8848|
                          DCD      0x40018000
                  |L1.8852|
                          DCD      DeviceMode
                  |L1.8856|
                          DCD      DestBuffer
                  |L1.8860|
                          DCD      NumberOfBytes
                  |L1.8864|
                          DCD      TotalNumberOfBytes
                  |L1.8868|
                          DCD      SrcBuffer
                  |L1.8872|
                          DCD      StopCondition
                  |L1.8876|
                          DCD      TransferError
                  |L1.8880|
                          DCD      TransferEnd

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  CSD_Tab
                          %        16
                  CID_Tab
                          %        16
                  SDCardInfo
                          %        80
                  SDIO_InitStructure
                          %        24
                  SDIO_CmdInitStructure
                          %        20
                  SDIO_DataInitStructure
                          %        24

                          AREA ||.data||, DATA, ALIGN=2

                  CardType
                          DCD      0x00000000
                  ||RCA||
                          DCD      0x00000000
                  DeviceMode
                          DCD      0x00000002
                  TotalNumberOfBytes
                          DCD      0x00000000
                  StopCondition
                          DCD      0x00000000
                  SrcBuffer
                          DCD      0x00000000
                  DestBuffer
                          DCD      0x00000000
                  TransferError
00001c  2a000000          DCB      0x2a,0x00,0x00,0x00
                  TransferEnd
                          DCD      0x00000000
                  NumberOfBytes
                          DCD      0x00000000
