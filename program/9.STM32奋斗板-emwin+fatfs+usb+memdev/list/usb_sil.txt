; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\usb_sil.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\usb_sil.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\FWlib\inc -I.\user -I.\CM3 -I.\MALLOC -I.\TFT -I.\EMWIN\EMWIN_INC -I.\EMWIN\DEMO -I.\PNG -I.\FATFS -I.\SDIO -I.\USB\inc -I.\USBCFG\inc -IE:\material\GUI\STM32·Ü¶·°å-emwin+fatfs+usb+memdev\RTE -Id:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.1.0\Device\Include -Id:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=515 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\usb_sil.crf USB\src\usb_sil.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  USB_SIL_Init PROC
;;;34     *******************************************************************************/
;;;35     uint32_t USB_SIL_Init(void)
000000  2000              MOVS     r0,#0
;;;36     {
;;;37     #ifndef STM32F10X_CL
;;;38       
;;;39       /* USB interrupts initialization */
;;;40       /* clear pending interrupts */
;;;41       _SetISTR(0);
000002  491d              LDR      r1,|L1.120|
000004  6008              STR      r0,[r1,#0]
;;;42       wInterrupt_Mask = IMR_MSK;
000006  f44f4004          MOV      r0,#0x8400
00000a  491c              LDR      r1,|L1.124|
00000c  8008              STRH     r0,[r1,#0]
;;;43       /* set interrupts mask */
;;;44       _SetCNTR(wInterrupt_Mask);
00000e  4608              MOV      r0,r1
000010  8800              LDRH     r0,[r0,#0]  ; wInterrupt_Mask
000012  4919              LDR      r1,|L1.120|
000014  1f09              SUBS     r1,r1,#4
000016  6008              STR      r0,[r1,#0]
;;;45       
;;;46     #else
;;;47       
;;;48       /* Perform OTG Device initialization procedure (including EP0 init) */
;;;49       OTG_DEV_Init();
;;;50       
;;;51     #endif /* STM32F10X_CL */
;;;52     
;;;53       return 0;
000018  2000              MOVS     r0,#0
;;;54     }
00001a  4770              BX       lr
;;;55     
                          ENDP

                  USB_SIL_Write PROC
;;;65     *******************************************************************************/
;;;66     uint32_t USB_SIL_Write(uint8_t bEpAddr, uint8_t* pBufferPointer, uint32_t wBufferSize)
00001c  e92d41f0          PUSH     {r4-r8,lr}
;;;67     {
000020  4604              MOV      r4,r0
000022  460e              MOV      r6,r1
000024  4615              MOV      r5,r2
;;;68     #ifndef STM32F10X_CL
;;;69     
;;;70       /* Use the memory interface function to write to the selected endpoint */
;;;71       UserToPMABufferCopy(pBufferPointer, GetEPTxAddr(bEpAddr & 0x7F), wBufferSize);
000026  f004007f          AND      r0,r4,#0x7f
00002a  f7fffffe          BL       GetEPTxAddr
00002e  4607              MOV      r7,r0
000030  b2aa              UXTH     r2,r5
000032  4639              MOV      r1,r7
000034  4630              MOV      r0,r6
000036  f7fffffe          BL       UserToPMABufferCopy
;;;72     
;;;73       /* Update the data length in the control register */
;;;74       SetEPTxCount((bEpAddr & 0x7F), wBufferSize);
00003a  b2a9              UXTH     r1,r5
00003c  f004007f          AND      r0,r4,#0x7f
000040  f7fffffe          BL       SetEPTxCount
;;;75       
;;;76     #else
;;;77       
;;;78        /* Use the PCD interface layer function to write to the selected endpoint */
;;;79        PCD_EP_Write (bEpAddr, pBufferPointer, wBufferSize); 
;;;80        
;;;81     #endif /* STM32F10X_CL */
;;;82     
;;;83       return 0;
000044  2000              MOVS     r0,#0
;;;84     }
000046  e8bd81f0          POP      {r4-r8,pc}
;;;85     
                          ENDP

                  USB_SIL_Read PROC
;;;94     *******************************************************************************/
;;;95     uint32_t USB_SIL_Read(uint8_t bEpAddr, uint8_t* pBufferPointer)
00004a  e92d41f0          PUSH     {r4-r8,lr}
;;;96     {
00004e  4604              MOV      r4,r0
000050  460e              MOV      r6,r1
;;;97       uint32_t DataLength = 0;
000052  2500              MOVS     r5,#0
;;;98     
;;;99     #ifndef STM32F10X_CL
;;;100    
;;;101      /* Get the number of received data on the selected Endpoint */
;;;102      DataLength = GetEPRxCount(bEpAddr & 0x7F);
000054  f004007f          AND      r0,r4,#0x7f
000058  f7fffffe          BL       GetEPRxCount
00005c  4605              MOV      r5,r0
;;;103      
;;;104      /* Use the memory interface function to write to the selected endpoint */
;;;105      PMAToUserBufferCopy(pBufferPointer, GetEPRxAddr(bEpAddr & 0x7F), DataLength);
00005e  f004007f          AND      r0,r4,#0x7f
000062  f7fffffe          BL       GetEPRxAddr
000066  4607              MOV      r7,r0
000068  462a              MOV      r2,r5
00006a  4639              MOV      r1,r7
00006c  4630              MOV      r0,r6
00006e  f7fffffe          BL       PMAToUserBufferCopy
;;;106    
;;;107    #else
;;;108      
;;;109      USB_OTG_EP *ep;
;;;110    
;;;111      /* Get the structure pointer of the selected Endpoint */
;;;112      ep = PCD_GetOutEP(bEpAddr);
;;;113      
;;;114      /* Get the number of received data */
;;;115      DataLength = ep->xfer_len;
;;;116      
;;;117      /* Use the PCD interface layer function to read the selected endpoint */
;;;118      PCD_EP_Read (bEpAddr, pBufferPointer, DataLength);
;;;119      
;;;120    #endif /* STM32F10X_CL */
;;;121    
;;;122      /* Return the number of received data */
;;;123      return DataLength;
000072  4628              MOV      r0,r5
;;;124    }
000074  e8bd81f0          POP      {r4-r8,pc}
;;;125    
                          ENDP

                  |L1.120|
                          DCD      0x40005c44
                  |L1.124|
                          DCD      wInterrupt_Mask
