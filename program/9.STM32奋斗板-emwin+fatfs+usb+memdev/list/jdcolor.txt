; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\jdcolor.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\jdcolor.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -I.\GUI\AntiAlias -I.\GUI\Config -I.\GUI\ConvertColor -I.\GUI\ConvertMono -I.\GUI\Core -I.\GUI\Font -I.\GUI\GUI_X -I.\GUI\JPEG -I.\GUI\LCDDriver -I.\GUI\MemDev -I.\GUI\MultiLayer -I.\GUI\Widget -I.\GUI\WM -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\INC\ST\STM32F10x -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\jdcolor.crf GUI\JPEG\jdcolor.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  build_ycc_rgb_table PROC
;;;69     LOCAL(void)
;;;70     build_ycc_rgb_table (j_decompress_ptr cinfo)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;71     {
000004  4605              MOV      r5,r0
;;;72       my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
000006  f8d541c8          LDR      r4,[r5,#0x1c8]
;;;73       int i;
;;;74       INT32 x;
;;;75       SHIFT_TEMPS
;;;76     
;;;77       cconvert->Cr_r_tab = (int *)
00000a  6868              LDR      r0,[r5,#4]
00000c  f44f6280          MOV      r2,#0x400
000010  f04f0101          MOV      r1,#1
000014  6803              LDR      r3,[r0,#0]
000016  4628              MOV      r0,r5
000018  4798              BLX      r3
00001a  60a0              STR      r0,[r4,#8]
;;;78         (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
;;;79     				(MAXJSAMPLE+1) * SIZEOF(int));
;;;80       cconvert->Cb_b_tab = (int *)
00001c  6868              LDR      r0,[r5,#4]
00001e  f44f6280          MOV      r2,#0x400
000022  2101              MOVS     r1,#1
000024  6803              LDR      r3,[r0,#0]
000026  4628              MOV      r0,r5
000028  4798              BLX      r3
00002a  60e0              STR      r0,[r4,#0xc]
;;;81         (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
;;;82     				(MAXJSAMPLE+1) * SIZEOF(int));
;;;83       cconvert->Cr_g_tab = (INT32 *)
00002c  6868              LDR      r0,[r5,#4]
00002e  f44f6280          MOV      r2,#0x400
000032  2101              MOVS     r1,#1
000034  6803              LDR      r3,[r0,#0]
000036  4628              MOV      r0,r5
000038  4798              BLX      r3
00003a  6120              STR      r0,[r4,#0x10]
;;;84         (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
;;;85     				(MAXJSAMPLE+1) * SIZEOF(INT32));
;;;86       cconvert->Cb_g_tab = (INT32 *)
00003c  6868              LDR      r0,[r5,#4]
00003e  f44f6280          MOV      r2,#0x400
000042  2101              MOVS     r1,#1
000044  6803              LDR      r3,[r0,#0]
000046  4628              MOV      r0,r5
000048  4798              BLX      r3
00004a  6160              STR      r0,[r4,#0x14]
;;;87         (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
;;;88     				(MAXJSAMPLE+1) * SIZEOF(INT32));
;;;89     
;;;90       for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
00004c  f04f0600          MOV      r6,#0
000050  f06f077f          MVN      r7,#0x7f
000054  e025              B        |L1.162|
                  |L1.86|
;;;91         /* i is the actual input pixel value, in the range 0..MAXJSAMPLE */
;;;92         /* The Cb or Cr value we are thinking of is x = i - CENTERJSAMPLE */
;;;93         /* Cr=>R value is nearest int to 1.40200 * x */
;;;94         cconvert->Cr_r_tab[i] = (int)
000056  49f7              LDR      r1,|L1.1076|
000058  fb07f001          MUL      r0,r7,r1
00005c  f5004000          ADD      r0,r0,#0x8000
000060  ea4f4020          ASR      r0,r0,#16
000064  68a1              LDR      r1,[r4,#8]
000066  f8410026          STR      r0,[r1,r6,LSL #2]
;;;95     		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
;;;96         /* Cb=>B value is nearest int to 1.77200 * x */
;;;97         cconvert->Cb_b_tab[i] = (int)
00006a  49f3              LDR      r1,|L1.1080|
00006c  fb07f001          MUL      r0,r7,r1
000070  f5004000          ADD      r0,r0,#0x8000
000074  ea4f4020          ASR      r0,r0,#16
000078  68e1              LDR      r1,[r4,#0xc]
00007a  f8410026          STR      r0,[r1,r6,LSL #2]
;;;98     		    RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
;;;99         /* Cr=>G value is scaled-up -0.71414 * x */
;;;100        cconvert->Cr_g_tab[i] = (- FIX(0.71414)) * x;
00007e  48ef              LDR      r0,|L1.1084|
000080  fb07f000          MUL      r0,r7,r0
000084  6921              LDR      r1,[r4,#0x10]
000086  f8410026          STR      r0,[r1,r6,LSL #2]
;;;101        /* Cb=>G value is scaled-up -0.34414 * x */
;;;102        /* We also add in ONE_HALF so that need not do it in inner loop */
;;;103        cconvert->Cb_g_tab[i] = (- FIX(0.34414)) * x + ONE_HALF;
00008a  49ed              LDR      r1,|L1.1088|
00008c  fb07f001          MUL      r0,r7,r1
000090  f5004000          ADD      r0,r0,#0x8000
000094  6961              LDR      r1,[r4,#0x14]
000096  f8410026          STR      r0,[r1,r6,LSL #2]
00009a  f1060601          ADD      r6,r6,#1              ;90
00009e  f1070701          ADD      r7,r7,#1              ;90
                  |L1.162|
0000a2  2eff              CMP      r6,#0xff              ;90
0000a4  ddd7              BLE      |L1.86|
;;;104      }
;;;105    }
0000a6  e8bd81f0          POP      {r4-r8,pc}
;;;106    
                          ENDP

                  ycc_rgb_convert PROC
;;;119    METHODDEF(void)
;;;120    ycc_rgb_convert (j_decompress_ptr cinfo,
0000aa  e92d4ff0          PUSH     {r4-r11,lr}
;;;121    		 JSAMPIMAGE input_buf, JDIMENSION input_row,
;;;122    		 JSAMPARRAY output_buf, int num_rows)
;;;123    {
0000ae  b087              SUB      sp,sp,#0x1c
0000b0  4604              MOV      r4,r0
0000b2  461f              MOV      r7,r3
;;;124      my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
0000b4  f8d431c8          LDR      r3,[r4,#0x1c8]
;;;125      register int y, cb, cr;
;;;126      register JSAMPROW outptr;
;;;127      register JSAMPROW inptr0, inptr1, inptr2;
;;;128      register JDIMENSION col;
;;;129      JDIMENSION num_cols = cinfo->output_width;
0000b8  f8d4b070          LDR      r11,[r4,#0x70]
0000bc  f8cdb010          STR      r11,[sp,#0x10]
;;;130      /* copy these pointers into registers if possible */
;;;131      register JSAMPLE * range_limit = cinfo->sample_range_limit;
0000c0  f8d49144          LDR      r9,[r4,#0x144]
;;;132      register int * Crrtab = cconvert->Cr_r_tab;
0000c4  f8d3b008          LDR      r11,[r3,#8]
0000c8  f8cdb00c          STR      r11,[sp,#0xc]
;;;133      register int * Cbbtab = cconvert->Cb_b_tab;
0000cc  f8d3b00c          LDR      r11,[r3,#0xc]
0000d0  f8cdb008          STR      r11,[sp,#8]
;;;134      register INT32 * Crgtab = cconvert->Cr_g_tab;
0000d4  f8d3b010          LDR      r11,[r3,#0x10]
0000d8  f8cdb004          STR      r11,[sp,#4]
;;;135      register INT32 * Cbgtab = cconvert->Cb_g_tab;
0000dc  f8d3b014          LDR      r11,[r3,#0x14]
0000e0  f8cdb000          STR      r11,[sp,#0]
;;;136      SHIFT_TEMPS
;;;137    
;;;138      while (--num_rows >= 0) {
0000e4  e048              B        |L1.376|
                  |L1.230|
;;;139        inptr0 = input_buf[0][input_row];
0000e6  f8d1b000          LDR      r11,[r1,#0]
0000ea  f85ba022          LDR      r10,[r11,r2,LSL #2]
;;;140        inptr1 = input_buf[1][input_row];
0000ee  f8d1b004          LDR      r11,[r1,#4]
0000f2  f85bb022          LDR      r11,[r11,r2,LSL #2]
0000f6  f8cdb018          STR      r11,[sp,#0x18]
;;;141        inptr2 = input_buf[2][input_row];
0000fa  f8d1b008          LDR      r11,[r1,#8]
0000fe  f85bb022          LDR      r11,[r11,r2,LSL #2]
000102  f8cdb014          STR      r11,[sp,#0x14]
;;;142        input_row++;
000106  f1020201          ADD      r2,r2,#1
;;;143        outptr = *output_buf++;
00010a  cf40              LDM      r7!,{r6}
;;;144        for (col = 0; col < num_cols; col++) {
00010c  f04f0000          MOV      r0,#0
000110  e02e              B        |L1.368|
                  |L1.274|
;;;145          y  = GETJSAMPLE(inptr0[col]);
000112  f81a5000          LDRB     r5,[r10,r0]
;;;146          cb = GETJSAMPLE(inptr1[col]);
000116  f8ddb018          LDR      r11,[sp,#0x18]
00011a  f81bc000          LDRB     r12,[r11,r0]
;;;147          cr = GETJSAMPLE(inptr2[col]);
00011e  f8ddb014          LDR      r11,[sp,#0x14]
000122  f81b8000          LDRB     r8,[r11,r0]
;;;148          /* Range-limiting is essential due to noise introduced by DCT losses. */
;;;149          outptr[RGB_RED] =   range_limit[y + Crrtab[cr]];
000126  f8ddb00c          LDR      r11,[sp,#0xc]
00012a  f85bb028          LDR      r11,[r11,r8,LSL #2]
00012e  44ab              ADD      r11,r11,r5
000130  f819b00b          LDRB     r11,[r9,r11]
000134  f886b000          STRB     r11,[r6,#0]
;;;150          outptr[RGB_GREEN] = range_limit[y +
000138  f8ddb000          LDR      r11,[sp,#0]
00013c  f85be02c          LDR      lr,[r11,r12,LSL #2]
000140  f8ddb004          LDR      r11,[sp,#4]
000144  f85bb028          LDR      r11,[r11,r8,LSL #2]
000148  44f3              ADD      r11,r11,lr
00014a  eb054b2b          ADD      r11,r5,r11,ASR #16
00014e  f819b00b          LDRB     r11,[r9,r11]
000152  f886b001          STRB     r11,[r6,#1]
;;;151    			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
;;;152    						 SCALEBITS))];
;;;153          outptr[RGB_BLUE] =  range_limit[y + Cbbtab[cb]];
000156  f8ddb008          LDR      r11,[sp,#8]
00015a  f85bb02c          LDR      r11,[r11,r12,LSL #2]
00015e  44ab              ADD      r11,r11,r5
000160  f819b00b          LDRB     r11,[r9,r11]
000164  f886b002          STRB     r11,[r6,#2]
;;;154          outptr += RGB_PIXELSIZE;
000168  f1060603          ADD      r6,r6,#3
00016c  f1000001          ADD      r0,r0,#1              ;144
                  |L1.368|
000170  f8ddb010          LDR      r11,[sp,#0x10]        ;144
000174  4558              CMP      r0,r11                ;144
000176  d3cc              BCC      |L1.274|
                  |L1.376|
000178  f8ddb040          LDR      r11,[sp,#0x40]        ;138
00017c  f1bb0b01          SUBS     r11,r11,#1            ;138
000180  f8cdb040          STR      r11,[sp,#0x40]        ;138
000184  d5af              BPL      |L1.230|
;;;155        }
;;;156      }
;;;157    }
000186  b007              ADD      sp,sp,#0x1c
000188  e8bd8ff0          POP      {r4-r11,pc}
;;;158    
                          ENDP

                  null_convert PROC
;;;168    METHODDEF(void)
;;;169    null_convert (j_decompress_ptr cinfo,
00018c  e92d47f0          PUSH     {r4-r10,lr}
;;;170    	      JSAMPIMAGE input_buf, JDIMENSION input_row,
;;;171    	      JSAMPARRAY output_buf, int num_rows)
;;;172    {
000190  4604              MOV      r4,r0
000192  f8dd8020          LDR      r8,[sp,#0x20]
;;;173      register JSAMPROW inptr, outptr;
;;;174      register JDIMENSION count;
;;;175      register int num_components = cinfo->num_components;
000196  f8d4c024          LDR      r12,[r4,#0x24]
;;;176      JDIMENSION num_cols = cinfo->output_width;
00019a  f8d49070          LDR      r9,[r4,#0x70]
;;;177      int ci;
;;;178    
;;;179      while (--num_rows >= 0) {
00019e  e01d              B        |L1.476|
                  |L1.416|
;;;180        for (ci = 0; ci < num_components; ci++) {
0001a0  f04f0000          MOV      r0,#0
0001a4  e014              B        |L1.464|
                  |L1.422|
;;;181          inptr = input_buf[ci][input_row];
0001a6  f851a020          LDR      r10,[r1,r0,LSL #2]
0001aa  f85a6022          LDR      r6,[r10,r2,LSL #2]
;;;182          outptr = output_buf[0] + ci;
0001ae  f8d3a000          LDR      r10,[r3,#0]
0001b2  eb0a0700          ADD      r7,r10,r0
;;;183          for (count = num_cols; count > 0; count--) {
0001b6  464d              MOV      r5,r9
0001b8  e006              B        |L1.456|
                  |L1.442|
;;;184    	*outptr = *inptr++;	/* needn't bother with GETJSAMPLE() here */
0001ba  f816ab01          LDRB     r10,[r6],#1
0001be  f887a000          STRB     r10,[r7,#0]
;;;185    	outptr += num_components;
0001c2  4467              ADD      r7,r7,r12
0001c4  f1a50501          SUB      r5,r5,#1              ;183
                  |L1.456|
0001c8  2d00              CMP      r5,#0                 ;183
0001ca  d1f6              BNE      |L1.442|
0001cc  f1000001          ADD      r0,r0,#1              ;180
                  |L1.464|
0001d0  4560              CMP      r0,r12                ;180
0001d2  dbe8              BLT      |L1.422|
;;;186          }
;;;187        }
;;;188        input_row++;
0001d4  f1020201          ADD      r2,r2,#1
;;;189        output_buf++;
0001d8  f1030304          ADD      r3,r3,#4
                  |L1.476|
0001dc  f1a80a01          SUB      r10,r8,#1             ;179
0001e0  f1ba0800          SUBS     r8,r10,#0             ;179
0001e4  dadc              BGE      |L1.416|
;;;190      }
;;;191    }
0001e6  e8bd87f0          POP      {r4-r10,pc}
;;;192    
                          ENDP

                  grayscale_convert PROC
;;;200    METHODDEF(void)
;;;201    grayscale_convert (j_decompress_ptr cinfo,
0001ea  e92d41fc          PUSH     {r2-r8,lr}
;;;202    		   JSAMPIMAGE input_buf, JDIMENSION input_row,
;;;203    		   JSAMPARRAY output_buf, int num_rows)
;;;204    {
0001ee  4604              MOV      r4,r0
0001f0  460d              MOV      r5,r1
0001f2  4616              MOV      r6,r2
0001f4  461f              MOV      r7,r3
0001f6  f8dd8020          LDR      r8,[sp,#0x20]
;;;205      jcopy_sample_rows(input_buf[0], (int) input_row, output_buf, 0,
0001fa  6f20              LDR      r0,[r4,#0x70]
0001fc  e9cd8000          STRD     r8,r0,[sp,#0]
000200  f04f0300          MOV      r3,#0
000204  463a              MOV      r2,r7
000206  4631              MOV      r1,r6
000208  6828              LDR      r0,[r5,#0]
00020a  f7fffffe          BL       jcopy_sample_rows
;;;206    		    num_rows, cinfo->output_width);
;;;207    }
00020e  e8bd81fc          POP      {r2-r8,pc}
;;;208    
                          ENDP

                  gray_rgb_convert PROC
;;;216    METHODDEF(void)
;;;217    gray_rgb_convert (j_decompress_ptr cinfo,
000212  e92d47f0          PUSH     {r4-r10,lr}
;;;218    		  JSAMPIMAGE input_buf, JDIMENSION input_row,
;;;219    		  JSAMPARRAY output_buf, int num_rows)
;;;220    {
000216  4604              MOV      r4,r0
000218  460d              MOV      r5,r1
00021a  9f08              LDR      r7,[sp,#0x20]
;;;221      register JSAMPROW inptr, outptr;
;;;222      register JDIMENSION col;
;;;223      JDIMENSION num_cols = cinfo->output_width;
00021c  f8d4c070          LDR      r12,[r4,#0x70]
;;;224    
;;;225      while (--num_rows >= 0) {
000220  e018              B        |L1.596|
                  |L1.546|
;;;226        inptr = input_buf[0][input_row++];
000222  4690              MOV      r8,r2
000224  f1020201          ADD      r2,r2,#1
000228  f8d5a000          LDR      r10,[r5,#0]
00022c  f85a6028          LDR      r6,[r10,r8,LSL #2]
;;;227        outptr = *output_buf++;
000230  cb01              LDM      r3!,{r0}
;;;228        for (col = 0; col < num_cols; col++) {
000232  f04f0100          MOV      r1,#0
000236  e00b              B        |L1.592|
                  |L1.568|
;;;229          /* We can dispense with GETJSAMPLE() here */
;;;230          outptr[RGB_RED] = outptr[RGB_GREEN] = outptr[RGB_BLUE] = inptr[col];
000238  f8168001          LDRB     r8,[r6,r1]
00023c  f8808002          STRB     r8,[r0,#2]
000240  f8808001          STRB     r8,[r0,#1]
000244  f8808000          STRB     r8,[r0,#0]
;;;231          outptr += RGB_PIXELSIZE;
000248  f1000003          ADD      r0,r0,#3
00024c  f1010101          ADD      r1,r1,#1              ;228
                  |L1.592|
000250  4561              CMP      r1,r12                ;228
000252  d3f1              BCC      |L1.568|
                  |L1.596|
000254  f1a70801          SUB      r8,r7,#1              ;225
000258  f1b80700          SUBS     r7,r8,#0              ;225
00025c  dae1              BGE      |L1.546|
;;;232        }
;;;233      }
;;;234    }
00025e  e8bd87f0          POP      {r4-r10,pc}
;;;235    
                          ENDP

                  ycck_cmyk_convert PROC
;;;244    METHODDEF(void)
;;;245    ycck_cmyk_convert (j_decompress_ptr cinfo,
000262  e92d4ff0          PUSH     {r4-r11,lr}
;;;246    		   JSAMPIMAGE input_buf, JDIMENSION input_row,
;;;247    		   JSAMPARRAY output_buf, int num_rows)
;;;248    {
000266  b088              SUB      sp,sp,#0x20
000268  4604              MOV      r4,r0
00026a  461f              MOV      r7,r3
;;;249      my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
00026c  f8d451c8          LDR      r5,[r4,#0x1c8]
;;;250      register int y, cb, cr;
;;;251      register JSAMPROW outptr;
;;;252      register JSAMPROW inptr0, inptr1, inptr2, inptr3;
;;;253      register JDIMENSION col;
;;;254      JDIMENSION num_cols = cinfo->output_width;
000270  f8d4b070          LDR      r11,[r4,#0x70]
000274  f8cdb010          STR      r11,[sp,#0x10]
;;;255      /* copy these pointers into registers if possible */
;;;256      register JSAMPLE * range_limit = cinfo->sample_range_limit;
000278  f8d49144          LDR      r9,[r4,#0x144]
;;;257      register int * Crrtab = cconvert->Cr_r_tab;
00027c  f8d5b008          LDR      r11,[r5,#8]
000280  f8cdb00c          STR      r11,[sp,#0xc]
;;;258      register int * Cbbtab = cconvert->Cb_b_tab;
000284  f8d5b00c          LDR      r11,[r5,#0xc]
000288  f8cdb008          STR      r11,[sp,#8]
;;;259      register INT32 * Crgtab = cconvert->Cr_g_tab;
00028c  f8d5b010          LDR      r11,[r5,#0x10]
000290  f8cdb004          STR      r11,[sp,#4]
;;;260      register INT32 * Cbgtab = cconvert->Cb_g_tab;
000294  f8d5b014          LDR      r11,[r5,#0x14]
000298  f8cdb000          STR      r11,[sp,#0]
;;;261      SHIFT_TEMPS
;;;262    
;;;263      while (--num_rows >= 0) {
00029c  e05a              B        |L1.852|
                  |L1.670|
;;;264        inptr0 = input_buf[0][input_row];
00029e  f8d1b000          LDR      r11,[r1,#0]
0002a2  f85ba022          LDR      r10,[r11,r2,LSL #2]
;;;265        inptr1 = input_buf[1][input_row];
0002a6  f8d1b004          LDR      r11,[r1,#4]
0002aa  f85bb022          LDR      r11,[r11,r2,LSL #2]
0002ae  f8cdb01c          STR      r11,[sp,#0x1c]
;;;266        inptr2 = input_buf[2][input_row];
0002b2  f8d1b008          LDR      r11,[r1,#8]
0002b6  f85bb022          LDR      r11,[r11,r2,LSL #2]
0002ba  f8cdb018          STR      r11,[sp,#0x18]
;;;267        inptr3 = input_buf[3][input_row];
0002be  f8d1b00c          LDR      r11,[r1,#0xc]
0002c2  f85bb022          LDR      r11,[r11,r2,LSL #2]
0002c6  f8cdb014          STR      r11,[sp,#0x14]
;;;268        input_row++;
0002ca  f1020201          ADD      r2,r2,#1
;;;269        outptr = *output_buf++;
0002ce  cf08              LDM      r7!,{r3}
;;;270        for (col = 0; col < num_cols; col++) {
0002d0  f04f0000          MOV      r0,#0
0002d4  e03a              B        |L1.844|
                  |L1.726|
;;;271          y  = GETJSAMPLE(inptr0[col]);
0002d6  f81a6000          LDRB     r6,[r10,r0]
;;;272          cb = GETJSAMPLE(inptr1[col]);
0002da  f8ddb01c          LDR      r11,[sp,#0x1c]
0002de  f81bc000          LDRB     r12,[r11,r0]
;;;273          cr = GETJSAMPLE(inptr2[col]);
0002e2  f8ddb018          LDR      r11,[sp,#0x18]
0002e6  f81b8000          LDRB     r8,[r11,r0]
;;;274          /* Range-limiting is essential due to noise introduced by DCT losses. */
;;;275          outptr[0] = range_limit[MAXJSAMPLE - (y + Crrtab[cr])];	/* red */
0002ea  f8ddb00c          LDR      r11,[sp,#0xc]
0002ee  f85bb028          LDR      r11,[r11,r8,LSL #2]
0002f2  44b3              ADD      r11,r11,r6
0002f4  f1cb0bff          RSB      r11,r11,#0xff
0002f8  f819b00b          LDRB     r11,[r9,r11]
0002fc  f883b000          STRB     r11,[r3,#0]
;;;276          outptr[1] = range_limit[MAXJSAMPLE - (y +			/* green */
000300  f8ddb000          LDR      r11,[sp,#0]
000304  f85be02c          LDR      lr,[r11,r12,LSL #2]
000308  f8ddb004          LDR      r11,[sp,#4]
00030c  f85bb028          LDR      r11,[r11,r8,LSL #2]
000310  44f3              ADD      r11,r11,lr
000312  eb064b2b          ADD      r11,r6,r11,ASR #16
000316  f1cb0bff          RSB      r11,r11,#0xff
00031a  f819b00b          LDRB     r11,[r9,r11]
00031e  f883b001          STRB     r11,[r3,#1]
;;;277    			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
;;;278    						 SCALEBITS)))];
;;;279          outptr[2] = range_limit[MAXJSAMPLE - (y + Cbbtab[cb])];	/* blue */
000322  f8ddb008          LDR      r11,[sp,#8]
000326  f85bb02c          LDR      r11,[r11,r12,LSL #2]
00032a  44b3              ADD      r11,r11,r6
00032c  f1cb0bff          RSB      r11,r11,#0xff
000330  f819b00b          LDRB     r11,[r9,r11]
000334  f883b002          STRB     r11,[r3,#2]
;;;280          /* K passes through unchanged */
;;;281          outptr[3] = inptr3[col];	/* don't need GETJSAMPLE here */
000338  f8ddb014          LDR      r11,[sp,#0x14]
00033c  f81bb000          LDRB     r11,[r11,r0]
000340  f883b003          STRB     r11,[r3,#3]
;;;282          outptr += 4;
000344  f1030304          ADD      r3,r3,#4
000348  f1000001          ADD      r0,r0,#1              ;270
                  |L1.844|
00034c  f8ddb010          LDR      r11,[sp,#0x10]        ;270
000350  4558              CMP      r0,r11                ;270
000352  d3c0              BCC      |L1.726|
                  |L1.852|
000354  f8ddb044          LDR      r11,[sp,#0x44]        ;263
000358  f1bb0b01          SUBS     r11,r11,#1            ;263
00035c  f8cdb044          STR      r11,[sp,#0x44]        ;263
000360  d59d              BPL      |L1.670|
;;;283        }
;;;284      }
;;;285    }
000362  b008              ADD      sp,sp,#0x20
000364  e8bd8ff0          POP      {r4-r11,pc}
;;;286    
                          ENDP

                  start_pass_dcolor PROC
;;;292    METHODDEF(void)
;;;293    start_pass_dcolor (j_decompress_ptr cinfo)
000368  bf00              NOP      
;;;294    {
;;;295      GUI_USE_PARA(cinfo);
;;;296      /* no work needed */
;;;297    }
00036a  4770              BX       lr
;;;298    
                          ENDP

                  jinit_color_deconverter PROC
;;;304    GLOBAL(void)
;;;305    jinit_color_deconverter (j_decompress_ptr cinfo)
00036c  b570              PUSH     {r4-r6,lr}
;;;306    {
00036e  4604              MOV      r4,r0
;;;307      my_cconvert_ptr cconvert;
;;;308      int ci;
;;;309    
;;;310      cconvert = (my_cconvert_ptr)
000370  6860              LDR      r0,[r4,#4]
000372  f04f0218          MOV      r2,#0x18
000376  f04f0101          MOV      r1,#1
00037a  6803              LDR      r3,[r0,#0]
00037c  4620              MOV      r0,r4
00037e  4798              BLX      r3
000380  4605              MOV      r5,r0
;;;311        (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
;;;312    				SIZEOF(my_color_deconverter));
;;;313      cinfo->cconvert = (struct jpeg_color_deconverter *) cconvert;
000382  f8c451c8          STR      r5,[r4,#0x1c8]
;;;314      cconvert->pub.start_pass = start_pass_dcolor;
000386  482f              LDR      r0,|L1.1092|
000388  6028              STR      r0,[r5,#0]
;;;315    
;;;316      /* Make sure num_components agrees with jpeg_color_space */
;;;317      switch (cinfo->jpeg_color_space) {
00038a  f8940028          LDRB     r0,[r4,#0x28]
00038e  2806              CMP      r0,#6
000390  d22a              BCS      |L1.1000|
000392  e8dff000          TBB      [pc,r0]
000396  2903              DCB      0x29,0x03
000398  0f101c1d          DCB      0x0f,0x10,0x1c,0x1d
;;;318      case JCS_GRAYSCALE:
;;;319        if (cinfo->num_components != 1)
00039c  6a60              LDR      r0,[r4,#0x24]
00039e  2801              CMP      r0,#1
0003a0  d007              BEQ      |L1.946|
;;;320          ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
0003a2  f04f000a          MOV      r0,#0xa
0003a6  6821              LDR      r1,[r4,#0]
0003a8  6148              STR      r0,[r1,#0x14]
0003aa  6820              LDR      r0,[r4,#0]
0003ac  6801              LDR      r1,[r0,#0]
0003ae  4620              MOV      r0,r4
0003b0  4788              BLX      r1
                  |L1.946|
;;;321        break;
0003b2  e025              B        |L1.1024|
;;;322    
;;;323      case JCS_RGB:
;;;324      case JCS_YCbCr:
0003b4  bf00              NOP      
;;;325        if (cinfo->num_components != 3)
0003b6  6a60              LDR      r0,[r4,#0x24]
0003b8  2803              CMP      r0,#3
0003ba  d007              BEQ      |L1.972|
;;;326          ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
0003bc  f04f000a          MOV      r0,#0xa
0003c0  6821              LDR      r1,[r4,#0]
0003c2  6148              STR      r0,[r1,#0x14]
0003c4  6820              LDR      r0,[r4,#0]
0003c6  6801              LDR      r1,[r0,#0]
0003c8  4620              MOV      r0,r4
0003ca  4788              BLX      r1
                  |L1.972|
;;;327        break;
0003cc  e018              B        |L1.1024|
;;;328    
;;;329      case JCS_CMYK:
;;;330      case JCS_YCCK:
0003ce  bf00              NOP      
;;;331        if (cinfo->num_components != 4)
0003d0  6a60              LDR      r0,[r4,#0x24]
0003d2  2804              CMP      r0,#4
0003d4  d007              BEQ      |L1.998|
;;;332          ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
0003d6  f04f000a          MOV      r0,#0xa
0003da  6821              LDR      r1,[r4,#0]
0003dc  6148              STR      r0,[r1,#0x14]
0003de  6820              LDR      r0,[r4,#0]
0003e0  6801              LDR      r1,[r0,#0]
0003e2  4620              MOV      r0,r4
0003e4  4788              BLX      r1
                  |L1.998|
;;;333        break;
0003e6  e00b              B        |L1.1024|
                  |L1.1000|
;;;334    
;;;335      default:			/* JCS_UNKNOWN can be anything */
;;;336        if (cinfo->num_components < 1)
0003e8  6a60              LDR      r0,[r4,#0x24]
0003ea  2801              CMP      r0,#1
0003ec  da07              BGE      |L1.1022|
;;;337          ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
0003ee  f04f000a          MOV      r0,#0xa
0003f2  6821              LDR      r1,[r4,#0]
0003f4  6148              STR      r0,[r1,#0x14]
0003f6  6820              LDR      r0,[r4,#0]
0003f8  6801              LDR      r1,[r0,#0]
0003fa  4620              MOV      r0,r4
0003fc  4788              BLX      r1
                  |L1.1022|
;;;338        break;
0003fe  bf00              NOP      
                  |L1.1024|
000400  bf00              NOP                            ;321
;;;339      }
;;;340    
;;;341      /* Set out_color_components and conversion method based on requested space.
;;;342       * Also clear the component_needed flags for any unused components,
;;;343       * so that earlier pipeline stages can avoid useless computation.
;;;344       */
;;;345    
;;;346      switch (cinfo->out_color_space) {
000402  f8940029          LDRB     r0,[r4,#0x29]
000406  2801              CMP      r0,#1
000408  d004              BEQ      |L1.1044|
00040a  2802              CMP      r0,#2
00040c  d038              BEQ      |L1.1152|
00040e  2804              CMP      r0,#4
000410  d179              BNE      |L1.1286|
000412  e05a              B        |L1.1226|
                  |L1.1044|
;;;347      case JCS_GRAYSCALE:
;;;348        cinfo->out_color_components = 1;
000414  f04f0001          MOV      r0,#1
000418  67a0              STR      r0,[r4,#0x78]
;;;349        if (cinfo->jpeg_color_space == JCS_GRAYSCALE ||
00041a  f8940028          LDRB     r0,[r4,#0x28]
00041e  2801              CMP      r0,#1
000420  d003              BEQ      |L1.1066|
;;;350    	cinfo->jpeg_color_space == JCS_YCbCr) {
000422  f8940028          LDRB     r0,[r4,#0x28]
000426  2803              CMP      r0,#3
000428  d121              BNE      |L1.1134|
                  |L1.1066|
;;;351          cconvert->pub.color_convert = grayscale_convert;
00042a  4807              LDR      r0,|L1.1096|
00042c  6068              STR      r0,[r5,#4]
;;;352          /* For color->grayscale conversion, only the Y (0) component is needed */
;;;353          for (ci = 1; ci < cinfo->num_components; ci++)
00042e  f04f0601          MOV      r6,#1
000432  e018              B        |L1.1126|
                  |L1.1076|
                          DCD      0x000166e9
                  |L1.1080|
                          DCD      0x0001c5a2
                  |L1.1084|
                          DCD      0xffff492e
                  |L1.1088|
                          DCD      0xffffa7e6
                  |L1.1092|
                          DCD      start_pass_dcolor
                  |L1.1096|
                          DCD      grayscale_convert
                  |L1.1100|
;;;354    	cinfo->comp_info[ci].component_needed = FALSE;
00044c  f04f0000          MOV      r0,#0
000450  ebc602c6          RSB      r2,r6,r6,LSL #3
000454  eb020242          ADD      r2,r2,r2,LSL #1
000458  f8d410d8          LDR      r1,[r4,#0xd8]
00045c  eb010182          ADD      r1,r1,r2,LSL #2
000460  6308              STR      r0,[r1,#0x30]
000462  f1060601          ADD      r6,r6,#1              ;353
                  |L1.1126|
000466  6a60              LDR      r0,[r4,#0x24]         ;353
000468  42b0              CMP      r0,r6                 ;353
00046a  dcef              BGT      |L1.1100|
00046c  e007              B        |L1.1150|
                  |L1.1134|
;;;355        } else
;;;356          ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
00046e  f04f001b          MOV      r0,#0x1b
000472  6821              LDR      r1,[r4,#0]
000474  6148              STR      r0,[r1,#0x14]
000476  6820              LDR      r0,[r4,#0]
000478  6801              LDR      r1,[r0,#0]
00047a  4620              MOV      r0,r4
00047c  4788              BLX      r1
                  |L1.1150|
;;;357        break;
00047e  e056              B        |L1.1326|
                  |L1.1152|
;;;358    
;;;359      case JCS_RGB:
;;;360        cinfo->out_color_components = RGB_PIXELSIZE;
000480  f04f0003          MOV      r0,#3
000484  67a0              STR      r0,[r4,#0x78]
;;;361        if (cinfo->jpeg_color_space == JCS_YCbCr) {
000486  f8940028          LDRB     r0,[r4,#0x28]
00048a  2803              CMP      r0,#3
00048c  d105              BNE      |L1.1178|
;;;362          cconvert->pub.color_convert = ycc_rgb_convert;
00048e  482d              LDR      r0,|L1.1348|
000490  6068              STR      r0,[r5,#4]
;;;363          build_ycc_rgb_table(cinfo);
000492  4620              MOV      r0,r4
000494  f7fffffe          BL       build_ycc_rgb_table
000498  e016              B        |L1.1224|
                  |L1.1178|
;;;364        } else if (cinfo->jpeg_color_space == JCS_GRAYSCALE) {
00049a  f8940028          LDRB     r0,[r4,#0x28]
00049e  2801              CMP      r0,#1
0004a0  d102              BNE      |L1.1192|
;;;365          cconvert->pub.color_convert = gray_rgb_convert;
0004a2  4829              LDR      r0,|L1.1352|
0004a4  6068              STR      r0,[r5,#4]
0004a6  e00f              B        |L1.1224|
                  |L1.1192|
;;;366        } else if (cinfo->jpeg_color_space == JCS_RGB && RGB_PIXELSIZE == 3) {
0004a8  f8940028          LDRB     r0,[r4,#0x28]
0004ac  2802              CMP      r0,#2
0004ae  d103              BNE      |L1.1208|
0004b0  bf00              NOP      
;;;367          cconvert->pub.color_convert = null_convert;
0004b2  4826              LDR      r0,|L1.1356|
0004b4  6068              STR      r0,[r5,#4]
0004b6  e007              B        |L1.1224|
                  |L1.1208|
;;;368        } else
;;;369          ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
0004b8  f04f001b          MOV      r0,#0x1b
0004bc  6821              LDR      r1,[r4,#0]
0004be  6148              STR      r0,[r1,#0x14]
0004c0  6820              LDR      r0,[r4,#0]
0004c2  6801              LDR      r1,[r0,#0]
0004c4  4620              MOV      r0,r4
0004c6  4788              BLX      r1
                  |L1.1224|
;;;370        break;
0004c8  e031              B        |L1.1326|
                  |L1.1226|
;;;371    
;;;372      case JCS_CMYK:
;;;373        cinfo->out_color_components = 4;
0004ca  f04f0004          MOV      r0,#4
0004ce  67a0              STR      r0,[r4,#0x78]
;;;374        if (cinfo->jpeg_color_space == JCS_YCCK) {
0004d0  f8940028          LDRB     r0,[r4,#0x28]
0004d4  2805              CMP      r0,#5
0004d6  d105              BNE      |L1.1252|
;;;375          cconvert->pub.color_convert = ycck_cmyk_convert;
0004d8  481d              LDR      r0,|L1.1360|
0004da  6068              STR      r0,[r5,#4]
;;;376          build_ycc_rgb_table(cinfo);
0004dc  4620              MOV      r0,r4
0004de  f7fffffe          BL       build_ycc_rgb_table
0004e2  e00f              B        |L1.1284|
                  |L1.1252|
;;;377        } else if (cinfo->jpeg_color_space == JCS_CMYK) {
0004e4  f8940028          LDRB     r0,[r4,#0x28]
0004e8  2804              CMP      r0,#4
0004ea  d103              BNE      |L1.1268|
;;;378          cconvert->pub.color_convert = null_convert;
0004ec  4817              LDR      r0,|L1.1356|
0004ee  6068              STR      r0,[r5,#4]
0004f0  e008              B        |L1.1284|
0004f2  e008              B        |L1.1286|
                  |L1.1268|
;;;379        } else
;;;380          ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
0004f4  f04f001b          MOV      r0,#0x1b
0004f8  6821              LDR      r1,[r4,#0]
0004fa  6148              STR      r0,[r1,#0x14]
0004fc  6820              LDR      r0,[r4,#0]
0004fe  6801              LDR      r1,[r0,#0]
000500  4620              MOV      r0,r4
000502  4788              BLX      r1
                  |L1.1284|
;;;381        break;
000504  e013              B        |L1.1326|
                  |L1.1286|
;;;382    
;;;383      default:
;;;384        /* Permit null conversion to same output space */
;;;385        if (cinfo->out_color_space == cinfo->jpeg_color_space) {
000506  f8940029          LDRB     r0,[r4,#0x29]
00050a  f8941028          LDRB     r1,[r4,#0x28]
00050e  4288              CMP      r0,r1
000510  d104              BNE      |L1.1308|
;;;386          cinfo->out_color_components = cinfo->num_components;
000512  6a60              LDR      r0,[r4,#0x24]
000514  67a0              STR      r0,[r4,#0x78]
;;;387          cconvert->pub.color_convert = null_convert;
000516  480d              LDR      r0,|L1.1356|
000518  6068              STR      r0,[r5,#4]
00051a  e007              B        |L1.1324|
                  |L1.1308|
;;;388        } else			/* unsupported non-null conversion */
;;;389          ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
00051c  f04f001b          MOV      r0,#0x1b
000520  6821              LDR      r1,[r4,#0]
000522  6148              STR      r0,[r1,#0x14]
000524  6820              LDR      r0,[r4,#0]
000526  6801              LDR      r1,[r0,#0]
000528  4620              MOV      r0,r4
00052a  4788              BLX      r1
                  |L1.1324|
;;;390        break;
00052c  bf00              NOP      
                  |L1.1326|
00052e  bf00              NOP                            ;357
;;;391      }
;;;392    
;;;393      if (cinfo->quantize_colors)
000530  6d60              LDR      r0,[r4,#0x54]
000532  b118              CBZ      r0,|L1.1340|
;;;394        cinfo->output_components = 1; /* single colormapped output component */
000534  f04f0001          MOV      r0,#1
000538  67e0              STR      r0,[r4,#0x7c]
00053a  e001              B        |L1.1344|
                  |L1.1340|
;;;395      else
;;;396        cinfo->output_components = cinfo->out_color_components;
00053c  6fa0              LDR      r0,[r4,#0x78]
00053e  67e0              STR      r0,[r4,#0x7c]
                  |L1.1344|
;;;397    }
000540  bd70              POP      {r4-r6,pc}
                          ENDP

000542  0000              DCW      0x0000
                  |L1.1348|
                          DCD      ycc_rgb_convert
                  |L1.1352|
                          DCD      gray_rgb_convert
                  |L1.1356|
                          DCD      null_convert
                  |L1.1360|
                          DCD      ycck_cmyk_convert
