; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\memory.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\memory.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\FWlib\inc -I.\user -I.\CM3 -I.\MALLOC -I.\TFT -I.\EMWIN\EMWIN_INC -I.\EMWIN\DEMO -I.\PNG -I.\FATFS -I.\SDIO -I.\USB\inc -I.\USBCFG\inc -IE:\material\GUI\STM32·Ü¶·°å-emwin+fatfs+usb+memdev\RTE -Id:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.1.0\Device\Include -Id:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=515 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\memory.crf USBCFG\scr\memory.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  Read_Memory PROC
;;;57     *******************************************************************************/
;;;58     void Read_Memory(uint8_t lun, uint32_t Memory_Offset, uint32_t Transfer_Length)
000000  b570              PUSH     {r4-r6,lr}
;;;59     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;60       static uint32_t Offset, Length;
;;;61     
;;;62       if (TransferState == TXFR_IDLE )
000008  4878              LDR      r0,|L1.492|
00000a  7800              LDRB     r0,[r0,#0]  ; TransferState
00000c  b970              CBNZ     r0,|L1.44|
;;;63       {
;;;64         Offset = Memory_Offset * Mass_Block_Size[lun];
00000e  4878              LDR      r0,|L1.496|
000010  f8500024          LDR      r0,[r0,r4,LSL #2]
000014  4368              MULS     r0,r5,r0
000016  4977              LDR      r1,|L1.500|
000018  6008              STR      r0,[r1,#0]  ; Offset
;;;65         Length = Transfer_Length * Mass_Block_Size[lun];
00001a  4875              LDR      r0,|L1.496|
00001c  f8500024          LDR      r0,[r0,r4,LSL #2]
000020  4370              MULS     r0,r6,r0
000022  4975              LDR      r1,|L1.504|
000024  6008              STR      r0,[r1,#0]  ; Length
;;;66         TransferState = TXFR_ONGOING;
000026  2001              MOVS     r0,#1
000028  4970              LDR      r1,|L1.492|
00002a  7008              STRB     r0,[r1,#0]
                  |L1.44|
;;;67       }
;;;68     
;;;69       if (TransferState == TXFR_ONGOING )
00002c  486f              LDR      r0,|L1.492|
00002e  7800              LDRB     r0,[r0,#0]  ; TransferState
000030  2801              CMP      r0,#1
000032  d146              BNE      |L1.194|
;;;70       {
;;;71         if (!Block_Read_count)
000034  4871              LDR      r0,|L1.508|
000036  6800              LDR      r0,[r0,#0]  ; Block_Read_count
000038  b9c0              CBNZ     r0,|L1.108|
;;;72         {
;;;73           MAL_Read(lun ,
00003a  486d              LDR      r0,|L1.496|
00003c  f8300024          LDRH     r0,[r0,r4,LSL #2]
000040  b283              UXTH     r3,r0
000042  4a6f              LDR      r2,|L1.512|
000044  486b              LDR      r0,|L1.500|
000046  6801              LDR      r1,[r0,#0]  ; Offset
000048  4620              MOV      r0,r4
00004a  f7fffffe          BL       MAL_Read
;;;74                    Offset ,
;;;75                    Data_Buffer,
;;;76                    Mass_Block_Size[lun]);
;;;77     
;;;78           USB_SIL_Write(EP1_IN, (uint8_t *)Data_Buffer, BULK_MAX_PACKET_SIZE);
00004e  2240              MOVS     r2,#0x40
000050  496b              LDR      r1,|L1.512|
000052  2081              MOVS     r0,#0x81
000054  f7fffffe          BL       USB_SIL_Write
;;;79     
;;;80           Block_Read_count = Mass_Block_Size[lun] - BULK_MAX_PACKET_SIZE;
000058  4865              LDR      r0,|L1.496|
00005a  f8500024          LDR      r0,[r0,r4,LSL #2]
00005e  3840              SUBS     r0,r0,#0x40
000060  4966              LDR      r1,|L1.508|
000062  6008              STR      r0,[r1,#0]  ; Block_Read_count
;;;81           Block_offset = BULK_MAX_PACKET_SIZE;
000064  2040              MOVS     r0,#0x40
000066  4967              LDR      r1,|L1.516|
000068  6008              STR      r0,[r1,#0]  ; Block_offset
00006a  e011              B        |L1.144|
                  |L1.108|
;;;82         }
;;;83         else
;;;84         {
;;;85           USB_SIL_Write(EP1_IN, (uint8_t *)Data_Buffer + Block_offset, BULK_MAX_PACKET_SIZE);
00006c  4864              LDR      r0,|L1.512|
00006e  4a65              LDR      r2,|L1.516|
000070  6812              LDR      r2,[r2,#0]  ; Block_offset
000072  1881              ADDS     r1,r0,r2
000074  2240              MOVS     r2,#0x40
000076  2081              MOVS     r0,#0x81
000078  f7fffffe          BL       USB_SIL_Write
;;;86     
;;;87           Block_Read_count -= BULK_MAX_PACKET_SIZE;
00007c  485f              LDR      r0,|L1.508|
00007e  6800              LDR      r0,[r0,#0]  ; Block_Read_count
000080  3840              SUBS     r0,r0,#0x40
000082  495e              LDR      r1,|L1.508|
000084  6008              STR      r0,[r1,#0]  ; Block_Read_count
;;;88           Block_offset += BULK_MAX_PACKET_SIZE;
000086  485f              LDR      r0,|L1.516|
000088  6800              LDR      r0,[r0,#0]  ; Block_offset
00008a  3040              ADDS     r0,r0,#0x40
00008c  495d              LDR      r1,|L1.516|
00008e  6008              STR      r0,[r1,#0]  ; Block_offset
                  |L1.144|
;;;89         }
;;;90     
;;;91         SetEPTxCount(ENDP1, BULK_MAX_PACKET_SIZE);
000090  2140              MOVS     r1,#0x40
000092  2001              MOVS     r0,#1
000094  f7fffffe          BL       SetEPTxCount
;;;92     #ifndef USE_STM3210C_EVAL
;;;93         SetEPTxStatus(ENDP1, EP_TX_VALID);
000098  2130              MOVS     r1,#0x30
00009a  2001              MOVS     r0,#1
00009c  f7fffffe          BL       SetEPTxStatus
;;;94     #endif    
;;;95         Offset += BULK_MAX_PACKET_SIZE;
0000a0  4854              LDR      r0,|L1.500|
0000a2  6800              LDR      r0,[r0,#0]  ; Offset
0000a4  3040              ADDS     r0,r0,#0x40
0000a6  4953              LDR      r1,|L1.500|
0000a8  6008              STR      r0,[r1,#0]  ; Offset
;;;96         Length -= BULK_MAX_PACKET_SIZE;
0000aa  4853              LDR      r0,|L1.504|
0000ac  6800              LDR      r0,[r0,#0]  ; Length
0000ae  3840              SUBS     r0,r0,#0x40
0000b0  4951              LDR      r1,|L1.504|
0000b2  6008              STR      r0,[r1,#0]  ; Length
;;;97     
;;;98         CSW.dDataResidue -= BULK_MAX_PACKET_SIZE;
0000b4  4854              LDR      r0,|L1.520|
0000b6  6880              LDR      r0,[r0,#8]  ; CSW
0000b8  3840              SUBS     r0,r0,#0x40
0000ba  4953              LDR      r1,|L1.520|
0000bc  6088              STR      r0,[r1,#8]  ; CSW
;;;99         Led_RW_ON();
0000be  f7fffffe          BL       Led_RW_ON
                  |L1.194|
;;;100      }
;;;101      if (Length == 0)
0000c2  484d              LDR      r0,|L1.504|
0000c4  6800              LDR      r0,[r0,#0]  ; Length
0000c6  b970              CBNZ     r0,|L1.230|
;;;102      {
;;;103        Block_Read_count = 0;
0000c8  2000              MOVS     r0,#0
0000ca  494c              LDR      r1,|L1.508|
0000cc  6008              STR      r0,[r1,#0]  ; Block_Read_count
;;;104        Block_offset = 0;
0000ce  494d              LDR      r1,|L1.516|
0000d0  6008              STR      r0,[r1,#0]  ; Block_offset
;;;105        Offset = 0;
0000d2  4948              LDR      r1,|L1.500|
0000d4  6008              STR      r0,[r1,#0]  ; Offset
;;;106        Bot_State = BOT_DATA_IN_LAST;
0000d6  2003              MOVS     r0,#3
0000d8  494c              LDR      r1,|L1.524|
0000da  7008              STRB     r0,[r1,#0]
;;;107        TransferState = TXFR_IDLE;
0000dc  2000              MOVS     r0,#0
0000de  4943              LDR      r1,|L1.492|
0000e0  7008              STRB     r0,[r1,#0]
;;;108        Led_RW_OFF();
0000e2  f7fffffe          BL       Led_RW_OFF
                  |L1.230|
;;;109      }
;;;110    }
0000e6  bd70              POP      {r4-r6,pc}
;;;111    
                          ENDP

                  Write_Memory PROC
;;;118    *******************************************************************************/
;;;119    void Write_Memory (uint8_t lun, uint32_t Memory_Offset, uint32_t Transfer_Length)
0000e8  e92d41f0          PUSH     {r4-r8,lr}
;;;120    {
0000ec  4604              MOV      r4,r0
0000ee  460d              MOV      r5,r1
0000f0  4616              MOV      r6,r2
;;;121    
;;;122      static uint32_t W_Offset, W_Length;
;;;123    
;;;124      uint32_t temp =  Counter + 64;
0000f2  4847              LDR      r0,|L1.528|
0000f4  6800              LDR      r0,[r0,#0]  ; Counter
0000f6  f1000740          ADD      r7,r0,#0x40
;;;125    
;;;126      if (TransferState == TXFR_IDLE )
0000fa  483c              LDR      r0,|L1.492|
0000fc  7800              LDRB     r0,[r0,#0]  ; TransferState
0000fe  b970              CBNZ     r0,|L1.286|
;;;127      {
;;;128        W_Offset = Memory_Offset * Mass_Block_Size[lun];
000100  483b              LDR      r0,|L1.496|
000102  f8500024          LDR      r0,[r0,r4,LSL #2]
000106  4368              MULS     r0,r5,r0
000108  4942              LDR      r1,|L1.532|
00010a  6008              STR      r0,[r1,#0]  ; W_Offset
;;;129        W_Length = Transfer_Length * Mass_Block_Size[lun];
00010c  4838              LDR      r0,|L1.496|
00010e  f8500024          LDR      r0,[r0,r4,LSL #2]
000112  4370              MULS     r0,r6,r0
000114  4940              LDR      r1,|L1.536|
000116  6008              STR      r0,[r1,#0]  ; W_Length
;;;130        TransferState = TXFR_ONGOING;
000118  2001              MOVS     r0,#1
00011a  4934              LDR      r1,|L1.492|
00011c  7008              STRB     r0,[r1,#0]
                  |L1.286|
;;;131      }
;;;132    
;;;133      if (TransferState == TXFR_ONGOING )
00011e  4833              LDR      r0,|L1.492|
000120  7800              LDRB     r0,[r0,#0]  ; TransferState
000122  2801              CMP      r0,#1
000124  d14e              BNE      |L1.452|
;;;134      {
;;;135    
;;;136        for (Idx = 0 ; Counter < temp; Counter++)
000126  2000              MOVS     r0,#0
000128  493c              LDR      r1,|L1.540|
00012a  6008              STR      r0,[r1,#0]  ; Idx
00012c  e010              B        |L1.336|
                  |L1.302|
;;;137        {
;;;138          *((uint8_t *)Data_Buffer + Counter) = Bulk_Data_Buff[Idx++];
00012e  483b              LDR      r0,|L1.540|
000130  6801              LDR      r1,[r0,#0]  ; Idx
000132  6800              LDR      r0,[r0,#0]  ; Idx
000134  1c40              ADDS     r0,r0,#1
000136  4a39              LDR      r2,|L1.540|
000138  6010              STR      r0,[r2,#0]  ; Idx
00013a  4839              LDR      r0,|L1.544|
00013c  5c41              LDRB     r1,[r0,r1]
00013e  4830              LDR      r0,|L1.512|
000140  4a33              LDR      r2,|L1.528|
000142  6812              LDR      r2,[r2,#0]  ; Counter
000144  5481              STRB     r1,[r0,r2]
000146  4832              LDR      r0,|L1.528|
000148  6800              LDR      r0,[r0,#0]            ;136  ; Counter
00014a  1c40              ADDS     r0,r0,#1              ;136
00014c  4930              LDR      r1,|L1.528|
00014e  6008              STR      r0,[r1,#0]            ;136  ; Counter
                  |L1.336|
000150  482f              LDR      r0,|L1.528|
000152  6800              LDR      r0,[r0,#0]            ;136  ; Counter
000154  42b8              CMP      r0,r7                 ;136
000156  d3ea              BCC      |L1.302|
;;;139        }
;;;140    
;;;141        W_Offset += Data_Len;
000158  482e              LDR      r0,|L1.532|
00015a  6800              LDR      r0,[r0,#0]  ; W_Offset
00015c  4931              LDR      r1,|L1.548|
00015e  8809              LDRH     r1,[r1,#0]  ; Data_Len
000160  4408              ADD      r0,r0,r1
000162  492c              LDR      r1,|L1.532|
000164  6008              STR      r0,[r1,#0]  ; W_Offset
;;;142        W_Length -= Data_Len;
000166  482c              LDR      r0,|L1.536|
000168  6800              LDR      r0,[r0,#0]  ; W_Length
00016a  492e              LDR      r1,|L1.548|
00016c  8809              LDRH     r1,[r1,#0]  ; Data_Len
00016e  1a40              SUBS     r0,r0,r1
000170  4929              LDR      r1,|L1.536|
000172  6008              STR      r0,[r1,#0]  ; W_Length
;;;143    
;;;144        if (!(W_Length % Mass_Block_Size[lun]))
000174  481e              LDR      r0,|L1.496|
000176  f8500024          LDR      r0,[r0,r4,LSL #2]
00017a  6809              LDR      r1,[r1,#0]  ; W_Length
00017c  fbb1f2f0          UDIV     r2,r1,r0
000180  fb001012          MLS      r0,r0,r2,r1
000184  b980              CBNZ     r0,|L1.424|
;;;145        {
;;;146          Counter = 0;
000186  2000              MOVS     r0,#0
000188  4921              LDR      r1,|L1.528|
00018a  6008              STR      r0,[r1,#0]  ; Counter
;;;147          MAL_Write(lun ,
00018c  4818              LDR      r0,|L1.496|
00018e  f8300024          LDRH     r0,[r0,r4,LSL #2]
000192  b283              UXTH     r3,r0
000194  4816              LDR      r0,|L1.496|
000196  f8500024          LDR      r0,[r0,r4,LSL #2]
00019a  4a1e              LDR      r2,|L1.532|
00019c  6812              LDR      r2,[r2,#0]  ; W_Offset
00019e  1a11              SUBS     r1,r2,r0
0001a0  4a17              LDR      r2,|L1.512|
0001a2  4620              MOV      r0,r4
0001a4  f7fffffe          BL       MAL_Write
                  |L1.424|
;;;148                    W_Offset - Mass_Block_Size[lun],
;;;149                    Data_Buffer,
;;;150                    Mass_Block_Size[lun]);
;;;151        }
;;;152    
;;;153        CSW.dDataResidue -= Data_Len;
0001a8  4817              LDR      r0,|L1.520|
0001aa  6880              LDR      r0,[r0,#8]  ; CSW
0001ac  491d              LDR      r1,|L1.548|
0001ae  8809              LDRH     r1,[r1,#0]  ; Data_Len
0001b0  1a40              SUBS     r0,r0,r1
0001b2  4915              LDR      r1,|L1.520|
0001b4  6088              STR      r0,[r1,#8]  ; CSW
;;;154      #ifndef STM32F10X_CL
;;;155        SetEPRxStatus(ENDP2, EP_RX_VALID); /* enable the next transaction*/   
0001b6  f44f5140          MOV      r1,#0x3000
0001ba  2002              MOVS     r0,#2
0001bc  f7fffffe          BL       SetEPRxStatus
;;;156      #endif /* STM32F10X_CL */
;;;157    
;;;158        Led_RW_ON();
0001c0  f7fffffe          BL       Led_RW_ON
                  |L1.452|
;;;159      }
;;;160    
;;;161      if ((W_Length == 0) || (Bot_State == BOT_CSW_Send))
0001c4  4814              LDR      r0,|L1.536|
0001c6  6800              LDR      r0,[r0,#0]  ; W_Length
0001c8  b118              CBZ      r0,|L1.466|
0001ca  4810              LDR      r0,|L1.524|
0001cc  7800              LDRB     r0,[r0,#0]  ; Bot_State
0001ce  2804              CMP      r0,#4
0001d0  d10a              BNE      |L1.488|
                  |L1.466|
;;;162      {
;;;163        Counter = 0;
0001d2  2000              MOVS     r0,#0
0001d4  490e              LDR      r1,|L1.528|
0001d6  6008              STR      r0,[r1,#0]  ; Counter
;;;164        Set_CSW (CSW_CMD_PASSED, SEND_CSW_ENABLE);
0001d8  2101              MOVS     r1,#1
0001da  f7fffffe          BL       Set_CSW
;;;165        TransferState = TXFR_IDLE;
0001de  2000              MOVS     r0,#0
0001e0  4902              LDR      r1,|L1.492|
0001e2  7008              STRB     r0,[r1,#0]
;;;166        Led_RW_OFF();
0001e4  f7fffffe          BL       Led_RW_OFF
                  |L1.488|
;;;167      }
;;;168    }
0001e8  e8bd81f0          POP      {r4-r8,pc}
;;;169    /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/
                          ENDP

                  |L1.492|
                          DCD      TransferState
                  |L1.496|
                          DCD      Mass_Block_Size
                  |L1.500|
                          DCD      Offset
                  |L1.504|
                          DCD      Length
                  |L1.508|
                          DCD      Block_Read_count
                  |L1.512|
                          DCD      Data_Buffer
                  |L1.516|
                          DCD      Block_offset
                  |L1.520|
                          DCD      ||CSW||
                  |L1.524|
                          DCD      Bot_State
                  |L1.528|
                          DCD      Counter
                  |L1.532|
                          DCD      W_Offset
                  |L1.536|
                          DCD      W_Length
                  |L1.540|
                          DCD      Idx
                  |L1.544|
                          DCD      Bulk_Data_Buff
                  |L1.548|
                          DCD      Data_Len

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  Data_Buffer
                          %        512

                          AREA ||.data||, DATA, ALIGN=2

                  Block_Read_count
                          DCD      0x00000000
                  Block_offset
                          DCD      0x00000000
                  Counter
                          DCD      0x00000000
                  Idx
                          DCD      0x00000000
                  TransferState
000010  00000000          DCB      0x00,0x00,0x00,0x00
                  Offset
                          DCD      0x00000000
                  Length
                          DCD      0x00000000
                  W_Offset
                          DCD      0x00000000
                  W_Length
                          DCD      0x00000000
