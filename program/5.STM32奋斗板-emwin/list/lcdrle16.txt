; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\lcdrle16.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\lcdrle16.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -I.\GUI\AntiAlias -I.\GUI\Config -I.\GUI\ConvertColor -I.\GUI\ConvertMono -I.\GUI\Core -I.\GUI\Font -I.\GUI\GUI_X -I.\GUI\JPEG -I.\GUI\LCDDriver -I.\GUI\MemDev -I.\GUI\MultiLayer -I.\GUI\Widget -I.\GUI\WM -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\INC\ST\STM32F10x -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\lcdrle16.crf GUI\Core\LCDRLE16.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _Read16 PROC
;;;51     */
;;;52     static U16 _Read16(const U8 GUI_UNI_PTR ** ppData) {
000000  4602              MOV      r2,r0
;;;53       const U8 GUI_UNI_PTR * pData;
;;;54       U16  Value;
;;;55       pData = *ppData;
000002  6811              LDR      r1,[r2,#0]
;;;56       Value = *pData;
000004  7808              LDRB     r0,[r1,#0]
;;;57       Value |= (U16)(*(pData + 1) << 8);
000006  784b              LDRB     r3,[r1,#1]
000008  ea402003          ORR      r0,r0,r3,LSL #8
;;;58       pData += 2;
00000c  f1010102          ADD      r1,r1,#2
;;;59       *ppData = pData;
000010  6011              STR      r1,[r2,#0]
;;;60       return Value;
;;;61     }
000012  4770              BX       lr
;;;62     
                          ENDP

                  _GetPixelIndex PROC
;;;66     */
;;;67     static LCD_PIXELINDEX _GetPixelIndex(const U8 GUI_UNI_PTR ** ppPixel) {
000014  b570              PUSH     {r4-r6,lr}
000016  4604              MOV      r4,r0
;;;68       U16 Data = _Read16(ppPixel);
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       _Read16
00001e  4605              MOV      r5,r0
;;;69       if ((_DisplayMode == 565) && (_DisplaySwapRB == _BitmapSwapRB)) {
000020  48b2              LDR      r0,|L1.748|
000022  6800              LDR      r0,[r0,#0]  ; _DisplayMode
000024  f5a07100          SUB      r1,r0,#0x200
000028  3935              SUBS     r1,r1,#0x35
00002a  d107              BNE      |L1.60|
00002c  48b0              LDR      r0,|L1.752|
00002e  7800              LDRB     r0,[r0,#0]  ; _DisplaySwapRB
000030  49b0              LDR      r1,|L1.756|
000032  7809              LDRB     r1,[r1,#0]  ; _BitmapSwapRB
000034  4288              CMP      r0,r1
000036  d101              BNE      |L1.60|
;;;70         return (LCD_PIXELINDEX)Data;
000038  4628              MOV      r0,r5
                  |L1.58|
;;;71       }
;;;72       if (_BitmapSwapRB) {
;;;73         return LCD_Color2Index(LCD_Index2Color_M565(Data));
;;;74       }
;;;75       return LCD_Color2Index(LCD_Index2Color_565(Data));
;;;76     }
00003a  bd70              POP      {r4-r6,pc}
                  |L1.60|
00003c  48ad              LDR      r0,|L1.756|
00003e  7800              LDRB     r0,[r0,#0]            ;72  ; _BitmapSwapRB
000040  b138              CBZ      r0,|L1.82|
000042  4628              MOV      r0,r5                 ;73
000044  f7fffffe          BL       LCD_Index2Color_M565
000048  4606              MOV      r6,r0                 ;73
00004a  f7fffffe          BL       LCD_Color2Index
00004e  b280              UXTH     r0,r0                 ;73
000050  e7f3              B        |L1.58|
                  |L1.82|
000052  4628              MOV      r0,r5                 ;75
000054  f7fffffe          BL       LCD_Index2Color_565
000058  4606              MOV      r6,r0                 ;75
00005a  f7fffffe          BL       LCD_Color2Index
00005e  b280              UXTH     r0,r0                 ;75
000060  e7eb              B        |L1.58|
;;;77     
                          ENDP

                  _DrawBitmap_RLE PROC
;;;81     */
;;;82     static void _DrawBitmap_RLE(int x0, int y0, int xsize, int ysize, const U8 GUI_UNI_PTR * pPixel, int xMag, int yMag) {
000062  e92d4fff          PUSH     {r0-r11,lr}
000066  b089              SUB      sp,sp,#0x24
000068  4607              MOV      r7,r0
00006a  460e              MOV      r6,r1
00006c  4692              MOV      r10,r2
00006e  e9ddb817          LDRD     r11,r8,[sp,#0x5c]
;;;83       LCD_PIXELINDEX OldColorIndex, PixelIndex;
;;;84       int xi, y, xL, yL;
;;;85       const U8 GUI_UNI_PTR * pPixelOrg;
;;;86       char NoTrans, IsMagnified;
;;;87       pPixelOrg     = pPixel;
000072  9816              LDR      r0,[sp,#0x58]
000074  9004              STR      r0,[sp,#0x10]
;;;88       NoTrans       = !(GUI_Context.DrawMode & LCD_DRAWMODE_TRANS);
000076  48a0              LDR      r0,|L1.760|
000078  7c00              LDRB     r0,[r0,#0x10]  ; GUI_Context
00007a  f04f0101          MOV      r1,#1
00007e  ea210050          BIC      r0,r1,r0,LSR #1
000082  9003              STR      r0,[sp,#0xc]
;;;89       IsMagnified   = ((yMag | xMag) != 1);
000084  ea48000b          ORR      r0,r8,r11
000088  2801              CMP      r0,#1
00008a  d001              BEQ      |L1.144|
00008c  4608              MOV      r0,r1
00008e  e001              B        |L1.148|
                  |L1.144|
000090  f04f0000          MOV      r0,#0
                  |L1.148|
000094  9002              STR      r0,[sp,#8]
;;;90       OldColorIndex = LCD_ACOLORINDEX[1];
000096  4898              LDR      r0,|L1.760|
000098  8840              LDRH     r0,[r0,#2]  ; GUI_Context
00009a  9008              STR      r0,[sp,#0x20]
;;;91       _DisplayMode   = LCD_GetFixedPaletteEx(GUI_Context.SelLayer);
00009c  4996              LDR      r1,|L1.760|
00009e  7c48              LDRB     r0,[r1,#0x11]  ; GUI_Context
0000a0  f7fffffe          BL       LCD_GetFixedPaletteEx
0000a4  4991              LDR      r1,|L1.748|
0000a6  6008              STR      r0,[r1,#0]  ; _DisplayMode
;;;92       _DisplaySwapRB = LCD_GetSwapRBEx(GUI_Context.SelLayer);
0000a8  4993              LDR      r1,|L1.760|
0000aa  7c48              LDRB     r0,[r1,#0x11]  ; GUI_Context
0000ac  f7fffffe          BL       LCD_GetSwapRBEx
0000b0  498f              LDR      r1,|L1.752|
0000b2  7008              STRB     r0,[r1,#0]
;;;93      /* Check if we can limit the number of lines due to clipping) */
;;;94       if (yMag == 1) {
0000b4  f1b80f01          CMP      r8,#1
0000b8  d10f              BNE      |L1.218|
;;;95         if (ysize > GUI_Context.ClipRect.y1 - y0 + 1) {
0000ba  488f              LDR      r0,|L1.760|
0000bc  f9b0000e          LDRSH    r0,[r0,#0xe]
0000c0  1b80              SUBS     r0,r0,r6
0000c2  1c40              ADDS     r0,r0,#1
0000c4  990c              LDR      r1,[sp,#0x30]
0000c6  4288              CMP      r0,r1
0000c8  da07              BGE      |L1.218|
;;;96           ysize = GUI_Context.ClipRect.y1 - y0 + 1;
0000ca  488b              LDR      r0,|L1.760|
0000cc  f9b0000e          LDRSH    r0,[r0,#0xe]
0000d0  eba00006          SUB      r0,r0,r6
0000d4  f1000001          ADD      r0,r0,#1
0000d8  900c              STR      r0,[sp,#0x30]
                  |L1.218|
;;;97         }
;;;98       }
;;;99       /* Init variables for looping */
;;;100      xi = y = 0;
0000da  f04f0400          MOV      r4,#0
0000de  4625              MOV      r5,r4
;;;101      /* Check if we can use the cache to save some unnecessary iterations */
;;;102      if (!IsMagnified) {
0000e0  9802              LDR      r0,[sp,#8]
0000e2  b998              CBNZ     r0,|L1.268|
;;;103        int yDiff = GUI_Context.ClipRect.y0 - y0;
0000e4  4984              LDR      r1,|L1.760|
0000e6  f9b1100a          LDRSH    r1,[r1,#0xa]  ; GUI_Context
0000ea  eba10006          SUB      r0,r1,r6
;;;104        if ((_Cache.pPixelStart == pPixel) && (yDiff > _Cache.y)) {
0000ee  4983              LDR      r1,|L1.764|
0000f0  68c9              LDR      r1,[r1,#0xc]  ; _Cache
0000f2  9a16              LDR      r2,[sp,#0x58]
0000f4  4291              CMP      r1,r2
0000f6  d108              BNE      |L1.266|
0000f8  4980              LDR      r1,|L1.764|
0000fa  6849              LDR      r1,[r1,#4]  ; _Cache
0000fc  4281              CMP      r1,r0
0000fe  da04              BGE      |L1.266|
;;;105          /* Accept cache values */
;;;106          y      = _Cache.y;
000100  497e              LDR      r1,|L1.764|
000102  684d              LDR      r5,[r1,#4]  ; _Cache
;;;107          xi     = _Cache.x;
000104  680c              LDR      r4,[r1,#0]  ; _Cache
;;;108          pPixel = _Cache.pPixel;
000106  6889              LDR      r1,[r1,#8]  ; _Cache
000108  9116              STR      r1,[sp,#0x58]
                  |L1.266|
;;;109        }
;;;110      }
00010a  bf00              NOP      
                  |L1.268|
;;;111      /* Init values for caching */
;;;112      _Cache.pPixel = _Cache.pPixelStart = pPixelOrg;
00010c  497b              LDR      r1,|L1.764|
00010e  9804              LDR      r0,[sp,#0x10]
000110  60c8              STR      r0,[r1,#0xc]  ; _Cache
000112  6088              STR      r0,[r1,#8]  ; _Cache
;;;113      _Cache.x = _Cache.y = 0;
000114  f04f0000          MOV      r0,#0
000118  6048              STR      r0,[r1,#4]  ; _Cache
00011a  6008              STR      r0,[r1,#0]  ; _Cache
;;;114      /* Repeat until we have reached bottom */
;;;115      for (; y < ysize; ) {
00011c  e0a9              B        |L1.626|
                  |L1.286|
;;;116        U8 NumCompressedPixels = *pPixel++;
00011e  9816              LDR      r0,[sp,#0x58]
000120  7800              LDRB     r0,[r0,#0]
000122  9001              STR      r0,[sp,#4]
000124  9816              LDR      r0,[sp,#0x58]
000126  f1000001          ADD      r0,r0,#1
00012a  9016              STR      r0,[sp,#0x58]
;;;117        if (NumCompressedPixels) {
00012c  9801              LDR      r0,[sp,#4]
00012e  2800              CMP      r0,#0
000130  d049              BEQ      |L1.454|
;;;118          PixelIndex = _GetPixelIndex(&pPixel);
000132  a816              ADD      r0,sp,#0x58
000134  f7fffffe          BL       _GetPixelIndex
000138  9007              STR      r0,[sp,#0x1c]
;;;119          /* Save cache info */
;;;120          _Cache.pPixel = pPixel - 3;
00013a  9816              LDR      r0,[sp,#0x58]
00013c  f1a00003          SUB      r0,r0,#3
000140  496e              LDR      r1,|L1.764|
000142  6088              STR      r0,[r1,#8]  ; _Cache
;;;121          _Cache.x      = xi;
000144  4608              MOV      r0,r1
000146  6004              STR      r4,[r0,#0]  ; _Cache
;;;122          _Cache.y      = y;
000148  6045              STR      r5,[r0,#4]  ; _Cache
;;;123          LCD_ACOLORINDEX[1] = PixelIndex;
00014a  496b              LDR      r1,|L1.760|
00014c  9807              LDR      r0,[sp,#0x1c]
00014e  8048              STRH     r0,[r1,#2]
;;;124          while (NumCompressedPixels) {
000150  e035              B        |L1.446|
                  |L1.338|
;;;125            int xi1 = xi + NumCompressedPixels;
000152  9801              LDR      r0,[sp,#4]
000154  eb040900          ADD      r9,r4,r0
;;;126            if (xi1 >= xsize) {
000158  45d1              CMP      r9,r10
00015a  db00              BLT      |L1.350|
;;;127              xi1 = xsize;
00015c  46d1              MOV      r9,r10
                  |L1.350|
;;;128            }
;;;129            NumCompressedPixels -= (xi1 - xi);
00015e  eba90104          SUB      r1,r9,r4
000162  9801              LDR      r0,[sp,#4]
000164  eba00001          SUB      r0,r0,r1
000168  b2c0              UXTB     r0,r0
00016a  9001              STR      r0,[sp,#4]
;;;130            if (PixelIndex || NoTrans) {  /* Skip transparent pixels */
00016c  9807              LDR      r0,[sp,#0x1c]
00016e  b908              CBNZ     r0,|L1.372|
000170  9803              LDR      r0,[sp,#0xc]
000172  b1e0              CBZ      r0,|L1.430|
                  |L1.372|
;;;131              if (IsMagnified) {
000174  9802              LDR      r0,[sp,#8]
000176  b198              CBZ      r0,|L1.416|
;;;132                xL = xMag * xi + x0;
000178  fb0b7004          MLA      r0,r11,r4,r7
00017c  9006              STR      r0,[sp,#0x18]
;;;133                yL = yMag * y + y0;
00017e  fb086005          MLA      r0,r8,r5,r6
000182  9005              STR      r0,[sp,#0x14]
;;;134                LCD_FillRect(xL, yL, xL + xMag * (xi1 - xi) -1 , yL + yMag - 1);
000184  9805              LDR      r0,[sp,#0x14]
000186  4440              ADD      r0,r0,r8
000188  1e43              SUBS     r3,r0,#1
00018a  eba90104          SUB      r1,r9,r4
00018e  9806              LDR      r0,[sp,#0x18]
000190  fb0b0001          MLA      r0,r11,r1,r0
000194  1e42              SUBS     r2,r0,#1
000196  e9dd1005          LDRD     r1,r0,[sp,#0x14]
00019a  f7fffffe          BL       LCD_FillRect
00019e  e006              B        |L1.430|
                  |L1.416|
;;;135              } else {
;;;136                LCD_DrawHLine(x0 + xi, y + y0, xi1 + x0 - 1);
0001a0  eb090307          ADD      r3,r9,r7
0001a4  1e5a              SUBS     r2,r3,#1
0001a6  19a9              ADDS     r1,r5,r6
0001a8  1938              ADDS     r0,r7,r4
0001aa  f7fffffe          BL       LCD_DrawHLine
                  |L1.430|
;;;137              }
;;;138            }
;;;139            xi = xi1;
0001ae  464c              MOV      r4,r9
;;;140            if (xi1 == xsize) {
0001b0  45d1              CMP      r9,r10
0001b2  d103              BNE      |L1.444|
;;;141              y++;
0001b4  f1050501          ADD      r5,r5,#1
;;;142              xi = 0;
0001b8  f04f0400          MOV      r4,#0
                  |L1.444|
;;;143            }
;;;144          }
0001bc  bf00              NOP      
                  |L1.446|
0001be  9801              LDR      r0,[sp,#4]            ;124
0001c0  2800              CMP      r0,#0                 ;124
0001c2  d1c6              BNE      |L1.338|
0001c4  e054              B        |L1.624|
                  |L1.454|
;;;145        } else {
;;;146          U8 NumPixels = *pPixel++;
0001c6  9816              LDR      r0,[sp,#0x58]
0001c8  7800              LDRB     r0,[r0,#0]
0001ca  9000              STR      r0,[sp,#0]
0001cc  9816              LDR      r0,[sp,#0x58]
0001ce  f1000001          ADD      r0,r0,#1
0001d2  9016              STR      r0,[sp,#0x58]
;;;147          do {
0001d4  bf00              NOP      
                  |L1.470|
;;;148            PixelIndex = _GetPixelIndex(&pPixel);
0001d6  a816              ADD      r0,sp,#0x58
0001d8  f7fffffe          BL       _GetPixelIndex
0001dc  9007              STR      r0,[sp,#0x1c]
;;;149            if (PixelIndex || NoTrans) {  /* Skip transparent pixels */
0001de  9807              LDR      r0,[sp,#0x1c]
0001e0  b908              CBNZ     r0,|L1.486|
0001e2  9803              LDR      r0,[sp,#0xc]
0001e4  b378              CBZ      r0,|L1.582|
                  |L1.486|
;;;150              int x = x0 + xi;
0001e6  eb070904          ADD      r9,r7,r4
;;;151              if (IsMagnified) {
0001ea  9802              LDR      r0,[sp,#8]
0001ec  b198              CBZ      r0,|L1.534|
;;;152                LCD_SetColorIndex(PixelIndex);
0001ee  9807              LDR      r0,[sp,#0x1c]
0001f0  f7fffffe          BL       LCD_SetColorIndex
;;;153                xL = xMag * xi + x0;
0001f4  fb0b7004          MLA      r0,r11,r4,r7
0001f8  9006              STR      r0,[sp,#0x18]
;;;154                yL = yMag * y + y0;
0001fa  fb086005          MLA      r0,r8,r5,r6
0001fe  9005              STR      r0,[sp,#0x14]
;;;155                LCD_FillRect(xL, yL, xL + xMag - 1 , yL + yMag - 1);
000200  9805              LDR      r0,[sp,#0x14]
000202  4440              ADD      r0,r0,r8
000204  1e43              SUBS     r3,r0,#1
000206  9806              LDR      r0,[sp,#0x18]
000208  4458              ADD      r0,r0,r11
00020a  1e42              SUBS     r2,r0,#1
00020c  e9dd1005          LDRD     r1,r0,[sp,#0x14]
000210  f7fffffe          BL       LCD_FillRect
000214  e016              B        |L1.580|
                  |L1.534|
;;;156              } else {
;;;157                if ((y + y0) >= GUI_Context.ClipRect.y0) {
000216  19a9              ADDS     r1,r5,r6
000218  4837              LDR      r0,|L1.760|
00021a  f9b0000a          LDRSH    r0,[r0,#0xa]
00021e  4281              CMP      r1,r0
000220  db10              BLT      |L1.580|
;;;158                  if (x >= GUI_Context.ClipRect.x0) {
000222  4835              LDR      r0,|L1.760|
000224  f9b00008          LDRSH    r0,[r0,#8]  ; GUI_Context
000228  4548              CMP      r0,r9
00022a  dc0b              BGT      |L1.580|
;;;159                    if (x <= GUI_Context.ClipRect.x1) {
00022c  4832              LDR      r0,|L1.760|
00022e  f9b0000c          LDRSH    r0,[r0,#0xc]
000232  4548              CMP      r0,r9
000234  db06              BLT      |L1.580|
;;;160                      LCDDEV_L0_SetPixelIndex(x, y + y0, PixelIndex);
000236  19a9              ADDS     r1,r5,r6
000238  482f              LDR      r0,|L1.760|
00023a  6c80              LDR      r0,[r0,#0x48]  ; GUI_Context
00023c  6a43              LDR      r3,[r0,#0x24]
00023e  4648              MOV      r0,r9
000240  9a07              LDR      r2,[sp,#0x1c]
000242  4798              BLX      r3
                  |L1.580|
;;;161                    }
;;;162                  }
;;;163                }
;;;164              }
;;;165            }
000244  bf00              NOP      
                  |L1.582|
;;;166            if (++xi >= xsize) {
000246  1c60              ADDS     r0,r4,#1
000248  4604              MOV      r4,r0
00024a  4550              CMP      r0,r10
00024c  db07              BLT      |L1.606|
;;;167              y++;
00024e  f1050501          ADD      r5,r5,#1
;;;168              xi = 0;
000252  f04f0400          MOV      r4,#0
;;;169              if (y >= ysize) {
000256  980c              LDR      r0,[sp,#0x30]
000258  4285              CMP      r5,r0
00025a  db00              BLT      |L1.606|
;;;170                break;
00025c  e006              B        |L1.620|
                  |L1.606|
;;;171              }
;;;172            }
;;;173          } while (--NumPixels);
00025e  9800              LDR      r0,[sp,#0]
000260  f1a00001          SUB      r0,r0,#1
000264  f01000ff          ANDS     r0,r0,#0xff
000268  9000              STR      r0,[sp,#0]
00026a  d1b4              BNE      |L1.470|
                  |L1.620|
00026c  bf00              NOP                            ;170
;;;174        }
00026e  bf00              NOP      
                  |L1.624|
;;;175      }
000270  bf00              NOP      
                  |L1.626|
000272  980c              LDR      r0,[sp,#0x30]         ;115
000274  4285              CMP      r5,r0                 ;115
000276  f6ffaf52          BLT      |L1.286|
;;;176      LCD_ACOLORINDEX[1] = OldColorIndex;
00027a  491f              LDR      r1,|L1.760|
00027c  9808              LDR      r0,[sp,#0x20]
00027e  8048              STRH     r0,[r1,#2]
;;;177    }
000280  b00d              ADD      sp,sp,#0x34
000282  e8bd8ff0          POP      {r4-r11,pc}
;;;178    
                          ENDP

                  _DrawBitmap_RLE16 PROC
;;;182    */
;;;183    static void _DrawBitmap_RLE16(int x0, int y0, int xsize, int ysize, const U8 GUI_UNI_PTR * pPixel, const LCD_LOGPALETTE GUI_UNI_PTR * pLogPal, int xMag, int yMag) {
000286  e92d4ffe          PUSH     {r1-r11,lr}
00028a  4604              MOV      r4,r0
00028c  460d              MOV      r5,r1
00028e  4616              MOV      r6,r2
000290  461f              MOV      r7,r3
000292  e9ddab0e          LDRD     r10,r11,[sp,#0x38]
000296  e9dd890c          LDRD     r8,r9,[sp,#0x30]
;;;184      GUI_USE_PARA(pLogPal);
00029a  bf00              NOP      
;;;185      _BitmapSwapRB = 0;
00029c  f04f0000          MOV      r0,#0
0002a0  4914              LDR      r1,|L1.756|
0002a2  7008              STRB     r0,[r1,#0]
;;;186      _DrawBitmap_RLE(x0, y0, xsize, ysize, pPixel, xMag, yMag);
0002a4  463b              MOV      r3,r7
0002a6  4632              MOV      r2,r6
0002a8  4629              MOV      r1,r5
0002aa  4620              MOV      r0,r4
0002ac  e88d0d00          STM      sp,{r8,r10,r11}
0002b0  f7fffffe          BL       _DrawBitmap_RLE
;;;187    }
0002b4  e8bd8ffe          POP      {r1-r11,pc}
;;;188    
                          ENDP

                  _DrawBitmap_RLEM16 PROC
;;;192    */
;;;193    static void _DrawBitmap_RLEM16(int x0, int y0, int xsize, int ysize, const U8 GUI_UNI_PTR * pPixel, const LCD_LOGPALETTE GUI_UNI_PTR * pLogPal, int xMag, int yMag) {
0002b8  e92d4ffe          PUSH     {r1-r11,lr}
0002bc  4604              MOV      r4,r0
0002be  460d              MOV      r5,r1
0002c0  4616              MOV      r6,r2
0002c2  461f              MOV      r7,r3
0002c4  e9ddab0e          LDRD     r10,r11,[sp,#0x38]
0002c8  e9dd890c          LDRD     r8,r9,[sp,#0x30]
;;;194      GUI_USE_PARA(pLogPal);
0002cc  bf00              NOP      
;;;195      _BitmapSwapRB = 1;
0002ce  f04f0001          MOV      r0,#1
0002d2  4908              LDR      r1,|L1.756|
0002d4  7008              STRB     r0,[r1,#0]
;;;196      _DrawBitmap_RLE(x0, y0, xsize, ysize, pPixel, xMag, yMag);
0002d6  463b              MOV      r3,r7
0002d8  4632              MOV      r2,r6
0002da  4629              MOV      r1,r5
0002dc  4620              MOV      r0,r4
0002de  e88d0d00          STM      sp,{r8,r10,r11}
0002e2  f7fffffe          BL       _DrawBitmap_RLE
;;;197    }
0002e6  e8bd8ffe          POP      {r1-r11,pc}
;;;198    
                          ENDP

0002ea  0000              DCW      0x0000
                  |L1.748|
                          DCD      _DisplayMode
                  |L1.752|
                          DCD      _DisplaySwapRB
                  |L1.756|
                          DCD      _BitmapSwapRB
                  |L1.760|
                          DCD      GUI_Context
                  |L1.764|
                          DCD      _Cache

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  _Cache
                          %        16

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  GUI_BitmapMethodsRLE16
                          DCD      _DrawBitmap_RLE16
                          DCD      0x00000000
                  GUI_BitmapMethodsRLEM16
                          DCD      _DrawBitmap_RLEM16
                          DCD      0x00000000

                          AREA ||.data||, DATA, ALIGN=2

                  _DisplayMode
                          DCD      0x00000000
                  _DisplaySwapRB
000004  00                DCB      0x00
                  _BitmapSwapRB
000005  00                DCB      0x00
