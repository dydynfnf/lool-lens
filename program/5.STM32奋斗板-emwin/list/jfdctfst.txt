; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\jfdctfst.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\jfdctfst.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -I.\GUI\AntiAlias -I.\GUI\Config -I.\GUI\ConvertColor -I.\GUI\ConvertMono -I.\GUI\Core -I.\GUI\Font -I.\GUI\GUI_X -I.\GUI\JPEG -I.\GUI\LCDDriver -I.\GUI\MemDev -I.\GUI\MultiLayer -I.\GUI\Widget -I.\GUI\WM -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\INC\ST\STM32F10x -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\jfdctfst.crf GUI\JPEG\jfdctfst.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=1

                  jpeg_fdct_ifast PROC
;;;113    GLOBAL(void)
;;;114    jpeg_fdct_ifast (DCTELEM * data)
000000  e92d4ff1          PUSH     {r0,r4-r11,lr}
;;;115    {
000004  b089              SUB      sp,sp,#0x24
;;;116      DCTELEM tmp0, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7;
;;;117      DCTELEM tmp10, tmp11, tmp12, tmp13;
;;;118      DCTELEM z1, z2, z3, z4, z5, z11, z13;
;;;119      DCTELEM *dataptr;
;;;120      int ctr;
;;;121      SHIFT_TEMPS
;;;122    
;;;123      /* Pass 1: process rows. */
;;;124    
;;;125      dataptr = data;
000006  9809              LDR      r0,[sp,#0x24]
;;;126      for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
000008  f04f0b07          MOV      r11,#7
00000c  f8cdb000          STR      r11,[sp,#0]
000010  e0b1              B        |L1.374|
                  |L1.18|
;;;127        tmp0 = dataptr[0] + dataptr[7];
000012  f8d0e01c          LDR      lr,[r0,#0x1c]
000016  f8d0b000          LDR      r11,[r0,#0]
00001a  eb0b040e          ADD      r4,r11,lr
;;;128        tmp7 = dataptr[0] - dataptr[7];
00001e  f8d0e01c          LDR      lr,[r0,#0x1c]
000022  f8d0b000          LDR      r11,[r0,#0]
000026  ebab010e          SUB      r1,r11,lr
;;;129        tmp1 = dataptr[1] + dataptr[6];
00002a  f8d0e018          LDR      lr,[r0,#0x18]
00002e  f8d0b004          LDR      r11,[r0,#4]
000032  eb0b050e          ADD      r5,r11,lr
;;;130        tmp6 = dataptr[1] - dataptr[6];
000036  f8d0e018          LDR      lr,[r0,#0x18]
00003a  f8d0b004          LDR      r11,[r0,#4]
00003e  ebab080e          SUB      r8,r11,lr
;;;131        tmp2 = dataptr[2] + dataptr[5];
000042  f8d0e014          LDR      lr,[r0,#0x14]
000046  f8d0b008          LDR      r11,[r0,#8]
00004a  eb0b060e          ADD      r6,r11,lr
;;;132        tmp5 = dataptr[2] - dataptr[5];
00004e  f8d0e014          LDR      lr,[r0,#0x14]
000052  f8d0b008          LDR      r11,[r0,#8]
000056  ebab0c0e          SUB      r12,r11,lr
;;;133        tmp3 = dataptr[3] + dataptr[4];
00005a  e9d0be03          LDRD     r11,lr,[r0,#0xc]
00005e  eb0b070e          ADD      r7,r11,lr
;;;134        tmp4 = dataptr[3] - dataptr[4];
000062  e9d0be03          LDRD     r11,lr,[r0,#0xc]
000066  ebab0b0e          SUB      r11,r11,lr
00006a  f8cdb020          STR      r11,[sp,#0x20]
;;;135        
;;;136        /* Even part */
;;;137        
;;;138        tmp10 = tmp0 + tmp3;	/* phase 2 */
00006e  eb040207          ADD      r2,r4,r7
;;;139        tmp13 = tmp0 - tmp3;
000072  eba40307          SUB      r3,r4,r7
;;;140        tmp11 = tmp1 + tmp2;
000076  eb050906          ADD      r9,r5,r6
;;;141        tmp12 = tmp1 - tmp2;
00007a  eba50a06          SUB      r10,r5,r6
;;;142        
;;;143        dataptr[0] = tmp10 + tmp11; /* phase 3 */
00007e  eb020b09          ADD      r11,r2,r9
000082  f8c0b000          STR      r11,[r0,#0]
;;;144        dataptr[4] = tmp10 - tmp11;
000086  eba20b09          SUB      r11,r2,r9
00008a  f8c0b010          STR      r11,[r0,#0x10]
;;;145        
;;;146        z1 = MULTIPLY(tmp12 + tmp13, FIX_0_707106781); /* c4 */
00008e  eb0a0b03          ADD      r11,r10,r3
000092  f04f0eb5          MOV      lr,#0xb5
000096  fb0bfb0e          MUL      r11,r11,lr
00009a  ea4f2b2b          ASR      r11,r11,#8
00009e  f8cdb01c          STR      r11,[sp,#0x1c]
;;;147        dataptr[2] = tmp13 + z1;	/* phase 5 */
0000a2  f8ddb01c          LDR      r11,[sp,#0x1c]
0000a6  449b              ADD      r11,r11,r3
0000a8  f8c0b008          STR      r11,[r0,#8]
;;;148        dataptr[6] = tmp13 - z1;
0000ac  f8ddb01c          LDR      r11,[sp,#0x1c]
0000b0  eba30b0b          SUB      r11,r3,r11
0000b4  f8c0b018          STR      r11,[r0,#0x18]
;;;149        
;;;150        /* Odd part */
;;;151    
;;;152        tmp10 = tmp4 + tmp5;	/* phase 2 */
0000b8  f8ddb020          LDR      r11,[sp,#0x20]
0000bc  eb0b020c          ADD      r2,r11,r12
;;;153        tmp11 = tmp5 + tmp6;
0000c0  eb0c0908          ADD      r9,r12,r8
;;;154        tmp12 = tmp6 + tmp7;
0000c4  eb080a01          ADD      r10,r8,r1
;;;155    
;;;156        /* The rotator is modified from fig 4-8 to avoid extra negations. */
;;;157        z5 = MULTIPLY(tmp10 - tmp12, FIX_0_382683433); /* c6 */
0000c8  eba20b0a          SUB      r11,r2,r10
0000cc  f04f0e62          MOV      lr,#0x62
0000d0  fb0bfb0e          MUL      r11,r11,lr
0000d4  ea4f2b2b          ASR      r11,r11,#8
0000d8  f8cdb00c          STR      r11,[sp,#0xc]
;;;158        z2 = MULTIPLY(tmp10, FIX_0_541196100) + z5; /* c2-c6 */
0000dc  f04f0b8b          MOV      r11,#0x8b
0000e0  fb02fe0b          MUL      lr,r2,r11
0000e4  f8ddb00c          LDR      r11,[sp,#0xc]
0000e8  eb0b2b2e          ADD      r11,r11,lr,ASR #8
0000ec  f8cdb018          STR      r11,[sp,#0x18]
;;;159        z4 = MULTIPLY(tmp12, FIX_1_306562965) + z5; /* c2+c6 */
0000f0  f44f7ba7          MOV      r11,#0x14e
0000f4  fb0afe0b          MUL      lr,r10,r11
0000f8  f8ddb00c          LDR      r11,[sp,#0xc]
0000fc  eb0b2b2e          ADD      r11,r11,lr,ASR #8
000100  f8cdb010          STR      r11,[sp,#0x10]
;;;160        z3 = MULTIPLY(tmp11, FIX_0_707106781); /* c4 */
000104  f04f0bb5          MOV      r11,#0xb5
000108  fb09fb0b          MUL      r11,r9,r11
00010c  ea4f2b2b          ASR      r11,r11,#8
000110  f8cdb014          STR      r11,[sp,#0x14]
;;;161    
;;;162        z11 = tmp7 + z3;		/* phase 5 */
000114  f8ddb014          LDR      r11,[sp,#0x14]
000118  448b              ADD      r11,r11,r1
00011a  f8cdb008          STR      r11,[sp,#8]
;;;163        z13 = tmp7 - z3;
00011e  f8ddb014          LDR      r11,[sp,#0x14]
000122  eba10b0b          SUB      r11,r1,r11
000126  f8cdb004          STR      r11,[sp,#4]
;;;164    
;;;165        dataptr[5] = z13 + z2;	/* phase 6 */
00012a  f8dde018          LDR      lr,[sp,#0x18]
00012e  f8ddb004          LDR      r11,[sp,#4]
000132  44f3              ADD      r11,r11,lr
000134  f8c0b014          STR      r11,[r0,#0x14]
;;;166        dataptr[3] = z13 - z2;
000138  f8dde018          LDR      lr,[sp,#0x18]
00013c  f8ddb004          LDR      r11,[sp,#4]
000140  ebab0b0e          SUB      r11,r11,lr
000144  f8c0b00c          STR      r11,[r0,#0xc]
;;;167        dataptr[1] = z11 + z4;
000148  f8dde010          LDR      lr,[sp,#0x10]
00014c  f8ddb008          LDR      r11,[sp,#8]
000150  44f3              ADD      r11,r11,lr
000152  f8c0b004          STR      r11,[r0,#4]
;;;168        dataptr[7] = z11 - z4;
000156  f8dde010          LDR      lr,[sp,#0x10]
00015a  f8ddb008          LDR      r11,[sp,#8]
00015e  ebab0b0e          SUB      r11,r11,lr
000162  f8c0b01c          STR      r11,[r0,#0x1c]
;;;169    
;;;170        dataptr += DCTSIZE;		/* advance pointer to next row */
000166  f1000020          ADD      r0,r0,#0x20
00016a  f8ddb000          LDR      r11,[sp,#0]           ;126
00016e  f1ab0b01          SUB      r11,r11,#1            ;126
000172  f8cdb000          STR      r11,[sp,#0]           ;126
                  |L1.374|
000176  f8ddb000          LDR      r11,[sp,#0]           ;126
00017a  f1bb0f00          CMP      r11,#0                ;126
00017e  f6bfaf48          BGE      |L1.18|
;;;171      }
;;;172    
;;;173      /* Pass 2: process columns. */
;;;174    
;;;175      dataptr = data;
000182  9809              LDR      r0,[sp,#0x24]
;;;176      for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
000184  f04f0b07          MOV      r11,#7
000188  f8cdb000          STR      r11,[sp,#0]
00018c  e0b5              B        |L1.762|
                  |L1.398|
;;;177        tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*7];
00018e  f8d0e0e0          LDR      lr,[r0,#0xe0]
000192  f8d0b000          LDR      r11,[r0,#0]
000196  eb0b040e          ADD      r4,r11,lr
;;;178        tmp7 = dataptr[DCTSIZE*0] - dataptr[DCTSIZE*7];
00019a  f8d0e0e0          LDR      lr,[r0,#0xe0]
00019e  f8d0b000          LDR      r11,[r0,#0]
0001a2  ebab010e          SUB      r1,r11,lr
;;;179        tmp1 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*6];
0001a6  f8d0e0c0          LDR      lr,[r0,#0xc0]
0001aa  f8d0b020          LDR      r11,[r0,#0x20]
0001ae  eb0b050e          ADD      r5,r11,lr
;;;180        tmp6 = dataptr[DCTSIZE*1] - dataptr[DCTSIZE*6];
0001b2  f8d0e0c0          LDR      lr,[r0,#0xc0]
0001b6  f8d0b020          LDR      r11,[r0,#0x20]
0001ba  ebab080e          SUB      r8,r11,lr
;;;181        tmp2 = dataptr[DCTSIZE*2] + dataptr[DCTSIZE*5];
0001be  f8d0e0a0          LDR      lr,[r0,#0xa0]
0001c2  f8d0b040          LDR      r11,[r0,#0x40]
0001c6  eb0b060e          ADD      r6,r11,lr
;;;182        tmp5 = dataptr[DCTSIZE*2] - dataptr[DCTSIZE*5];
0001ca  f8d0e0a0          LDR      lr,[r0,#0xa0]
0001ce  f8d0b040          LDR      r11,[r0,#0x40]
0001d2  ebab0c0e          SUB      r12,r11,lr
;;;183        tmp3 = dataptr[DCTSIZE*3] + dataptr[DCTSIZE*4];
0001d6  f8d0e080          LDR      lr,[r0,#0x80]
0001da  f8d0b060          LDR      r11,[r0,#0x60]
0001de  eb0b070e          ADD      r7,r11,lr
;;;184        tmp4 = dataptr[DCTSIZE*3] - dataptr[DCTSIZE*4];
0001e2  f8d0e080          LDR      lr,[r0,#0x80]
0001e6  f8d0b060          LDR      r11,[r0,#0x60]
0001ea  ebab0b0e          SUB      r11,r11,lr
0001ee  f8cdb020          STR      r11,[sp,#0x20]
;;;185        
;;;186        /* Even part */
;;;187        
;;;188        tmp10 = tmp0 + tmp3;	/* phase 2 */
0001f2  eb040207          ADD      r2,r4,r7
;;;189        tmp13 = tmp0 - tmp3;
0001f6  eba40307          SUB      r3,r4,r7
;;;190        tmp11 = tmp1 + tmp2;
0001fa  eb050906          ADD      r9,r5,r6
;;;191        tmp12 = tmp1 - tmp2;
0001fe  eba50a06          SUB      r10,r5,r6
;;;192        
;;;193        dataptr[DCTSIZE*0] = tmp10 + tmp11; /* phase 3 */
000202  eb020b09          ADD      r11,r2,r9
000206  f8c0b000          STR      r11,[r0,#0]
;;;194        dataptr[DCTSIZE*4] = tmp10 - tmp11;
00020a  eba20b09          SUB      r11,r2,r9
00020e  f8c0b080          STR      r11,[r0,#0x80]
;;;195        
;;;196        z1 = MULTIPLY(tmp12 + tmp13, FIX_0_707106781); /* c4 */
000212  eb0a0b03          ADD      r11,r10,r3
000216  f04f0eb5          MOV      lr,#0xb5
00021a  fb0bfb0e          MUL      r11,r11,lr
00021e  ea4f2b2b          ASR      r11,r11,#8
000222  f8cdb01c          STR      r11,[sp,#0x1c]
;;;197        dataptr[DCTSIZE*2] = tmp13 + z1; /* phase 5 */
000226  f8ddb01c          LDR      r11,[sp,#0x1c]
00022a  449b              ADD      r11,r11,r3
00022c  f8c0b040          STR      r11,[r0,#0x40]
;;;198        dataptr[DCTSIZE*6] = tmp13 - z1;
000230  f8ddb01c          LDR      r11,[sp,#0x1c]
000234  eba30b0b          SUB      r11,r3,r11
000238  f8c0b0c0          STR      r11,[r0,#0xc0]
;;;199        
;;;200        /* Odd part */
;;;201    
;;;202        tmp10 = tmp4 + tmp5;	/* phase 2 */
00023c  f8ddb020          LDR      r11,[sp,#0x20]
000240  eb0b020c          ADD      r2,r11,r12
;;;203        tmp11 = tmp5 + tmp6;
000244  eb0c0908          ADD      r9,r12,r8
;;;204        tmp12 = tmp6 + tmp7;
000248  eb080a01          ADD      r10,r8,r1
;;;205    
;;;206        /* The rotator is modified from fig 4-8 to avoid extra negations. */
;;;207        z5 = MULTIPLY(tmp10 - tmp12, FIX_0_382683433); /* c6 */
00024c  eba20b0a          SUB      r11,r2,r10
000250  f04f0e62          MOV      lr,#0x62
000254  fb0bfb0e          MUL      r11,r11,lr
000258  ea4f2b2b          ASR      r11,r11,#8
00025c  f8cdb00c          STR      r11,[sp,#0xc]
;;;208        z2 = MULTIPLY(tmp10, FIX_0_541196100) + z5; /* c2-c6 */
000260  f04f0b8b          MOV      r11,#0x8b
000264  fb02fe0b          MUL      lr,r2,r11
000268  f8ddb00c          LDR      r11,[sp,#0xc]
00026c  eb0b2b2e          ADD      r11,r11,lr,ASR #8
000270  f8cdb018          STR      r11,[sp,#0x18]
;;;209        z4 = MULTIPLY(tmp12, FIX_1_306562965) + z5; /* c2+c6 */
000274  f44f7ba7          MOV      r11,#0x14e
000278  fb0afe0b          MUL      lr,r10,r11
00027c  f8ddb00c          LDR      r11,[sp,#0xc]
000280  eb0b2b2e          ADD      r11,r11,lr,ASR #8
000284  f8cdb010          STR      r11,[sp,#0x10]
;;;210        z3 = MULTIPLY(tmp11, FIX_0_707106781); /* c4 */
000288  f04f0bb5          MOV      r11,#0xb5
00028c  fb09fb0b          MUL      r11,r9,r11
000290  ea4f2b2b          ASR      r11,r11,#8
000294  f8cdb014          STR      r11,[sp,#0x14]
;;;211    
;;;212        z11 = tmp7 + z3;		/* phase 5 */
000298  f8ddb014          LDR      r11,[sp,#0x14]
00029c  448b              ADD      r11,r11,r1
00029e  f8cdb008          STR      r11,[sp,#8]
;;;213        z13 = tmp7 - z3;
0002a2  f8ddb014          LDR      r11,[sp,#0x14]
0002a6  eba10b0b          SUB      r11,r1,r11
0002aa  f8cdb004          STR      r11,[sp,#4]
;;;214    
;;;215        dataptr[DCTSIZE*5] = z13 + z2; /* phase 6 */
0002ae  f8dde018          LDR      lr,[sp,#0x18]
0002b2  f8ddb004          LDR      r11,[sp,#4]
0002b6  44f3              ADD      r11,r11,lr
0002b8  f8c0b0a0          STR      r11,[r0,#0xa0]
;;;216        dataptr[DCTSIZE*3] = z13 - z2;
0002bc  f8dde018          LDR      lr,[sp,#0x18]
0002c0  f8ddb004          LDR      r11,[sp,#4]
0002c4  ebab0b0e          SUB      r11,r11,lr
0002c8  f8c0b060          STR      r11,[r0,#0x60]
;;;217        dataptr[DCTSIZE*1] = z11 + z4;
0002cc  f8dde010          LDR      lr,[sp,#0x10]
0002d0  f8ddb008          LDR      r11,[sp,#8]
0002d4  44f3              ADD      r11,r11,lr
0002d6  f8c0b020          STR      r11,[r0,#0x20]
;;;218        dataptr[DCTSIZE*7] = z11 - z4;
0002da  f8dde010          LDR      lr,[sp,#0x10]
0002de  f8ddb008          LDR      r11,[sp,#8]
0002e2  ebab0b0e          SUB      r11,r11,lr
0002e6  f8c0b0e0          STR      r11,[r0,#0xe0]
;;;219    
;;;220        dataptr++;			/* advance pointer to next column */
0002ea  f1000004          ADD      r0,r0,#4
0002ee  f8ddb000          LDR      r11,[sp,#0]           ;176
0002f2  f1ab0b01          SUB      r11,r11,#1            ;176
0002f6  f8cdb000          STR      r11,[sp,#0]           ;176
                  |L1.762|
0002fa  f8ddb000          LDR      r11,[sp,#0]           ;176
0002fe  f1bb0f00          CMP      r11,#0                ;176
000302  f6bfaf44          BGE      |L1.398|
;;;221      }
;;;222    }
000306  b00a              ADD      sp,sp,#0x28
000308  e8bd8ff0          POP      {r4-r11,pc}
;;;223    
                          ENDP

