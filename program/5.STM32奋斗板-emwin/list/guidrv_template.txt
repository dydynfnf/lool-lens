; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\guidrv_template.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\guidrv_template.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\FWlib\inc -I.\user -I.\CM3 -I.\MALLOC -I.\TFT -I.\EMWIN\EMWIN_INC -I.\EMWIN\DEMO -IE:\material\GUI\5.STM32·Ü¶·°å-emwin\RTE -Id:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.1.0\Device\Include -Id:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=515 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\guidrv_template.crf EMWIN\EMWIN_Config\GUIDRV_Template.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _SetPixelIndex PROC
;;;131    */
;;;132    static void _SetPixelIndex(GUI_DEVICE * pDevice, int x, int y, int PixelIndex) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4607              MOV      r7,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
00000a  461e              MOV      r6,r3
;;;133      #ifdef WIN32
;;;134        LCDSIM_SetPixelIndex(x, y, PixelIndex, pDevice->LayerIndex);
;;;135      #else
;;;136        //
;;;137        // Convert logical into physical coordinates (Dep. on LCDConf.h)
;;;138        //
;;;139        #if (LCD_MIRROR_X == 1) || (LCD_MIRROR_Y == 1) || (LCD_SWAP_XY == 1)
;;;140          int xPhys, yPhys;
;;;141    
;;;142          xPhys = LOG2PHYS_X(x, y);
;;;143          yPhys = LOG2PHYS_Y(x, y);
;;;144        #else
;;;145          #define xPhys x
;;;146          #define yPhys y
;;;147        #endif
;;;148        GUI_USE_PARA(pDevice);
;;;149        GUI_USE_PARA(x);
;;;150        GUI_USE_PARA(y);
;;;151        GUI_USE_PARA(PixelIndex);
;;;152        {
;;;153          //
;;;154          // Write into hardware ... Adapt to your system
;;;155          //
;;;156          // TBD by customer...
;;;157          //
;;;158    		TFT_DrawPoint(x,y,PixelIndex);
00000c  b2b2              UXTH     r2,r6
00000e  b2a9              UXTH     r1,r5
000010  b2a0              UXTH     r0,r4
000012  f7fffffe          BL       TFT_DrawPoint
;;;159        }
;;;160        #if (LCD_MIRROR_X == 0) && (LCD_MIRROR_Y == 0) && (LCD_SWAP_XY == 0)
;;;161          #undef xPhys
;;;162          #undef yPhys
;;;163        #endif
;;;164      #endif
;;;165    }
000016  e8bd81f0          POP      {r4-r8,pc}
;;;166    
                          ENDP

                  _GetPixelIndex PROC
;;;175    */
;;;176    static unsigned int _GetPixelIndex(GUI_DEVICE * pDevice, int x, int y) {
00001a  e92d41f0          PUSH     {r4-r8,lr}
00001e  4607              MOV      r7,r0
000020  460c              MOV      r4,r1
000022  4615              MOV      r5,r2
;;;177      unsigned int PixelIndex;
;;;178      #ifdef WIN32
;;;179        PixelIndex = LCDSIM_GetPixelIndex(x, y, pDevice->LayerIndex);
;;;180      #else
;;;181        //
;;;182        // Convert logical into physical coordinates (Dep. on LCDConf.h)
;;;183        //
;;;184        #if (LCD_MIRROR_X == 1) || (LCD_MIRROR_Y == 1) || (LCD_SWAP_XY == 1)
;;;185          int xPhys, yPhys;
;;;186    
;;;187          xPhys = LOG2PHYS_X(x, y);
;;;188          yPhys = LOG2PHYS_Y(x, y);
;;;189        #else
;;;190          #define xPhys x
;;;191          #define yPhys y
;;;192        #endif
;;;193        GUI_USE_PARA(pDevice);
;;;194        GUI_USE_PARA(x);
;;;195        GUI_USE_PARA(y);
;;;196        {
;;;197          //
;;;198          // Write into hardware ... Adapt to your system
;;;199          //
;;;200          // TBD by customer...
;;;201          //
;;;202          PixelIndex = TFT_ReadPoint(x,y);
000024  b2a9              UXTH     r1,r5
000026  b2a0              UXTH     r0,r4
000028  f7fffffe          BL       TFT_ReadPoint
00002c  4606              MOV      r6,r0
;;;203        }
;;;204        #if (LCD_MIRROR_X == 0) && (LCD_MIRROR_Y == 0) && (LCD_SWAP_XY == 0)
;;;205          #undef xPhys
;;;206          #undef yPhys
;;;207        #endif
;;;208      #endif
;;;209      return PixelIndex;
00002e  4630              MOV      r0,r6
;;;210    }
000030  e8bd81f0          POP      {r4-r8,pc}
;;;211    
                          ENDP

                  _XorPixel PROC
;;;215    */
;;;216    static void _XorPixel(GUI_DEVICE * pDevice, int x, int y) {
000034  e92d41f0          PUSH     {r4-r8,lr}
000038  4604              MOV      r4,r0
00003a  460d              MOV      r5,r1
00003c  4616              MOV      r6,r2
;;;217      LCD_PIXELINDEX PixelIndex;
;;;218      LCD_PIXELINDEX IndexMask;
;;;219    
;;;220      PixelIndex = _GetPixelIndex(pDevice, x, y);
00003e  4632              MOV      r2,r6
000040  4629              MOV      r1,r5
000042  4620              MOV      r0,r4
000044  f7fffffe          BL       _GetPixelIndex
000048  4607              MOV      r7,r0
;;;221      IndexMask  = pDevice->pColorConvAPI->pfGetIndexMask();
00004a  6921              LDR      r1,[r4,#0x10]
00004c  6888              LDR      r0,[r1,#8]
00004e  4780              BLX      r0
000050  4680              MOV      r8,r0
;;;222      _SetPixelIndex(pDevice, x, y, PixelIndex ^ IndexMask);
000052  ea870308          EOR      r3,r7,r8
000056  4632              MOV      r2,r6
000058  4629              MOV      r1,r5
00005a  4620              MOV      r0,r4
00005c  f7fffffe          BL       _SetPixelIndex
;;;223    }
000060  e8bd81f0          POP      {r4-r8,pc}
;;;224    
                          ENDP

                  _FillRect PROC
;;;228    */
;;;229    static void _FillRect(GUI_DEVICE * pDevice, int x0, int y0, int x1, int y1) {
000064  e92d4ff8          PUSH     {r3-r11,lr}
000068  4681              MOV      r9,r0
00006a  460d              MOV      r5,r1
00006c  4614              MOV      r4,r2
00006e  461e              MOV      r6,r3
000070  f8dd8028          LDR      r8,[sp,#0x28]
;;;230      LCD_PIXELINDEX PixelIndex;
;;;231      int x;
;;;232    
;;;233      PixelIndex = LCD__GetColorIndex();
000074  48fe              LDR      r0,|L1.1136|
000076  6800              LDR      r0,[r0,#0]  ; GUI_pContext
000078  6bc0              LDR      r0,[r0,#0x3c]
00007a  f8d0a000          LDR      r10,[r0,#0]
;;;234      if (GUI_pContext->DrawMode & LCD_DRAWMODE_XOR) {
00007e  48fc              LDR      r0,|L1.1136|
000080  6800              LDR      r0,[r0,#0]  ; GUI_pContext
000082  7c00              LDRB     r0,[r0,#0x10]
000084  f0000001          AND      r0,r0,#1
000088  b170              CBZ      r0,|L1.168|
;;;235        for (; y0 <= y1; y0++) {
00008a  e00a              B        |L1.162|
                  |L1.140|
;;;236          for (x = x0; x <= x1; x++) {
00008c  462f              MOV      r7,r5
00008e  e005              B        |L1.156|
                  |L1.144|
;;;237            _XorPixel(pDevice, x, y0);
000090  4622              MOV      r2,r4
000092  4639              MOV      r1,r7
000094  4648              MOV      r0,r9
000096  f7fffffe          BL       _XorPixel
00009a  1c7f              ADDS     r7,r7,#1              ;236
                  |L1.156|
00009c  42b7              CMP      r7,r6                 ;236
00009e  ddf7              BLE      |L1.144|
0000a0  1c64              ADDS     r4,r4,#1              ;235
                  |L1.162|
0000a2  4544              CMP      r4,r8                 ;235
0000a4  ddf2              BLE      |L1.140|
0000a6  e009              B        |L1.188|
                  |L1.168|
;;;238          }
;;;239        }
;;;240      } 
;;;241      else {
;;;242    	  TFT_Fill(x0,y0,x1,y1,PixelIndex); 
0000a8  fa1ff08a          UXTH     r0,r10
0000ac  fa1ff388          UXTH     r3,r8
0000b0  b2b2              UXTH     r2,r6
0000b2  b2a1              UXTH     r1,r4
0000b4  9000              STR      r0,[sp,#0]
0000b6  b2a8              UXTH     r0,r5
0000b8  f7fffffe          BL       TFT_Fill
                  |L1.188|
;;;243      }
;;;244    }
0000bc  e8bd8ff8          POP      {r3-r11,pc}
;;;245    
                          ENDP

                  _DrawHLine PROC
;;;249    */
;;;250    static void _DrawHLine(GUI_DEVICE * pDevice, int x0, int y, int x1) {
0000c0  b5f8              PUSH     {r3-r7,lr}
0000c2  4605              MOV      r5,r0
0000c4  460e              MOV      r6,r1
0000c6  4614              MOV      r4,r2
0000c8  461f              MOV      r7,r3
;;;251      _FillRect(pDevice, x0, y, x1, y);
0000ca  463b              MOV      r3,r7
0000cc  4622              MOV      r2,r4
0000ce  4631              MOV      r1,r6
0000d0  4628              MOV      r0,r5
0000d2  9400              STR      r4,[sp,#0]
0000d4  f7fffffe          BL       _FillRect
;;;252    }
0000d8  bdf8              POP      {r3-r7,pc}
;;;253    
                          ENDP

                  _DrawVLine PROC
;;;257    */
;;;258    static void _DrawVLine(GUI_DEVICE * pDevice, int x, int y0, int y1) {
0000da  b5f8              PUSH     {r3-r7,lr}
0000dc  4606              MOV      r6,r0
0000de  460c              MOV      r4,r1
0000e0  4617              MOV      r7,r2
0000e2  461d              MOV      r5,r3
;;;259      _FillRect(pDevice, x, y0, x, y1);
0000e4  4623              MOV      r3,r4
0000e6  463a              MOV      r2,r7
0000e8  4621              MOV      r1,r4
0000ea  4630              MOV      r0,r6
0000ec  9500              STR      r5,[sp,#0]
0000ee  f7fffffe          BL       _FillRect
;;;260    }
0000f2  bdf8              POP      {r3-r7,pc}
;;;261    
                          ENDP

                  _DrawBitLine1BPP PROC
;;;265    */
;;;266    static void _DrawBitLine1BPP(GUI_DEVICE * pDevice, int x, int y, U8 const * p, int Diff, int xsize, const LCD_PIXELINDEX * pTrans) {
0000f4  e92d4ffe          PUSH     {r1-r11,lr}
0000f8  4682              MOV      r10,r0
0000fa  460c              MOV      r4,r1
0000fc  4617              MOV      r7,r2
0000fe  461d              MOV      r5,r3
000100  e9dd680c          LDRD     r6,r8,[sp,#0x30]
;;;267      LCD_PIXELINDEX IndexMask, Index0, Index1, Pixel;
;;;268    	
;;;269    	u32 x1=x+xsize;
000104  eb040008          ADD      r0,r4,r8
000108  9000              STR      r0,[sp,#0]
;;;270    	LCD_WR_REG(0x002A);				    
00010a  202a              MOVS     r0,#0x2a
00010c  f7fffffe          BL       LCD_WR_REG
;;;271    	LCD_WR_Data(x>>8);	    			//ÆðÊ¼µØÖ·X
000110  f3c4200f          UBFX     r0,r4,#8,#16
000114  f7fffffe          BL       LCD_WR_Data
;;;272    	LCD_WR_Data(x);	    			
000118  b2a0              UXTH     r0,r4
00011a  f7fffffe          BL       LCD_WR_Data
;;;273    	LCD_WR_Data(x1>>8);	    			//½áÊøµØÖ·X
00011e  9800              LDR      r0,[sp,#0]
000120  f3c0200f          UBFX     r0,r0,#8,#16
000124  f7fffffe          BL       LCD_WR_Data
;;;274    	LCD_WR_Data(x1);	    			    
000128  9900              LDR      r1,[sp,#0]
00012a  b288              UXTH     r0,r1
00012c  f7fffffe          BL       LCD_WR_Data
;;;275        LCD_WR_REG(0x002b);	
000130  202b              MOVS     r0,#0x2b
000132  f7fffffe          BL       LCD_WR_REG
;;;276    	LCD_WR_Data(y>>8);	    			//ÆðÊ¼µØÖ·Y
000136  f3c7200f          UBFX     r0,r7,#8,#16
00013a  f7fffffe          BL       LCD_WR_Data
;;;277    	LCD_WR_Data(y);	    			    
00013e  b2b8              UXTH     r0,r7
000140  f7fffffe          BL       LCD_WR_Data
;;;278    	LCD_WR_Data(y>>8);	    			//½áÊøµØÖ·Y
000144  f3c7200f          UBFX     r0,r7,#8,#16
000148  f7fffffe          BL       LCD_WR_Data
;;;279    	LCD_WR_Data(y);	    			
00014c  b2b8              UXTH     r0,r7
00014e  f7fffffe          BL       LCD_WR_Data
;;;280    	LCD_WR_REG(0x2c);
000152  202c              MOVS     r0,#0x2c
000154  f7fffffe          BL       LCD_WR_REG
;;;281    
;;;282      Index0 = *(pTrans + 0);
000158  980e              LDR      r0,[sp,#0x38]
00015a  6800              LDR      r0,[r0,#0]
00015c  9002              STR      r0,[sp,#8]
;;;283      Index1 = *(pTrans + 1);
00015e  980e              LDR      r0,[sp,#0x38]
000160  6840              LDR      r0,[r0,#4]
000162  9001              STR      r0,[sp,#4]
;;;284      x += Diff;
000164  4434              ADD      r4,r4,r6
;;;285      switch (GUI_pContext->DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
000166  48c2              LDR      r0,|L1.1136|
000168  6800              LDR      r0,[r0,#0]  ; GUI_pContext
00016a  7c00              LDRB     r0,[r0,#0x10]
00016c  f0000003          AND      r0,r0,#3
000170  b130              CBZ      r0,|L1.384|
000172  2801              CMP      r0,#1
000174  d036              BEQ      |L1.484|
000176  2802              CMP      r0,#2
000178  d01a              BEQ      |L1.432|
00017a  2803              CMP      r0,#3
00017c  d157              BNE      |L1.558|
00017e  e030              B        |L1.482|
                  |L1.384|
;;;286      case 0:
;;;287        do {
000180  bf00              NOP      
                  |L1.386|
;;;288          LCD_WR_Data((*p & (0x80 >> Diff)) ? Index1 : Index0);//modified 
000182  7829              LDRB     r1,[r5,#0]
000184  2280              MOVS     r2,#0x80
000186  4132              ASRS     r2,r2,r6
000188  4011              ANDS     r1,r1,r2
00018a  b109              CBZ      r1,|L1.400|
00018c  9901              LDR      r1,[sp,#4]
00018e  e000              B        |L1.402|
                  |L1.400|
000190  9902              LDR      r1,[sp,#8]
                  |L1.402|
000192  b288              UXTH     r0,r1
000194  f7fffffe          BL       LCD_WR_Data
;;;289          if (++Diff == 8) {
000198  1c70              ADDS     r0,r6,#1
00019a  4606              MOV      r6,r0
00019c  2808              CMP      r0,#8
00019e  d101              BNE      |L1.420|
;;;290            Diff = 0;
0001a0  2600              MOVS     r6,#0
;;;291            p++;
0001a2  1c6d              ADDS     r5,r5,#1
                  |L1.420|
;;;292          }
;;;293        } while (--xsize);
0001a4  f1a80001          SUB      r0,r8,#1
0001a8  ea5f0800          MOVS     r8,r0
0001ac  d1e9              BNE      |L1.386|
;;;294        break;
0001ae  e03e              B        |L1.558|
                  |L1.432|
;;;295      case LCD_DRAWMODE_TRANS:
;;;296        do {
0001b0  bf00              NOP      
                  |L1.434|
;;;297          if (*p & (0x80 >> Diff))
0001b2  7828              LDRB     r0,[r5,#0]
0001b4  2180              MOVS     r1,#0x80
0001b6  4131              ASRS     r1,r1,r6
0001b8  4008              ANDS     r0,r0,r1
0001ba  b128              CBZ      r0,|L1.456|
;;;298            _SetPixelIndex(pDevice, x, y, Index1);
0001bc  463a              MOV      r2,r7
0001be  4621              MOV      r1,r4
0001c0  4650              MOV      r0,r10
0001c2  9b01              LDR      r3,[sp,#4]
0001c4  f7fffffe          BL       _SetPixelIndex
                  |L1.456|
;;;299          x++;
0001c8  1c64              ADDS     r4,r4,#1
;;;300          if (++Diff == 8) {
0001ca  1c70              ADDS     r0,r6,#1
0001cc  4606              MOV      r6,r0
0001ce  2808              CMP      r0,#8
0001d0  d101              BNE      |L1.470|
;;;301            Diff = 0;
0001d2  2600              MOVS     r6,#0
;;;302            p++;
0001d4  1c6d              ADDS     r5,r5,#1
                  |L1.470|
;;;303          }
;;;304        } while (--xsize);
0001d6  f1a80001          SUB      r0,r8,#1
0001da  ea5f0800          MOVS     r8,r0
0001de  d1e8              BNE      |L1.434|
;;;305        break;
0001e0  e025              B        |L1.558|
                  |L1.482|
;;;306      case LCD_DRAWMODE_XOR | LCD_DRAWMODE_TRANS:
;;;307      case LCD_DRAWMODE_XOR:
0001e2  bf00              NOP      
                  |L1.484|
;;;308        IndexMask = pDevice->pColorConvAPI->pfGetIndexMask();
0001e4  f8da1010          LDR      r1,[r10,#0x10]
0001e8  6888              LDR      r0,[r1,#8]
0001ea  4780              BLX      r0
0001ec  4681              MOV      r9,r0
;;;309        do {
0001ee  bf00              NOP      
                  |L1.496|
;;;310          if (*p & (0x80 >> Diff)) {
0001f0  7828              LDRB     r0,[r5,#0]
0001f2  2180              MOVS     r1,#0x80
0001f4  4131              ASRS     r1,r1,r6
0001f6  4008              ANDS     r0,r0,r1
0001f8  b160              CBZ      r0,|L1.532|
;;;311            Pixel = _GetPixelIndex(pDevice, x, y);
0001fa  463a              MOV      r2,r7
0001fc  4621              MOV      r1,r4
0001fe  4650              MOV      r0,r10
000200  f7fffffe          BL       _GetPixelIndex
000204  4683              MOV      r11,r0
;;;312            _SetPixelIndex(pDevice, x, y, Pixel ^ IndexMask);
000206  ea8b0309          EOR      r3,r11,r9
00020a  463a              MOV      r2,r7
00020c  4621              MOV      r1,r4
00020e  4650              MOV      r0,r10
000210  f7fffffe          BL       _SetPixelIndex
                  |L1.532|
;;;313          }
;;;314          x++;
000214  1c64              ADDS     r4,r4,#1
;;;315          if (++Diff == 8) {
000216  1c70              ADDS     r0,r6,#1
000218  4606              MOV      r6,r0
00021a  2808              CMP      r0,#8
00021c  d101              BNE      |L1.546|
;;;316            Diff = 0;
00021e  2600              MOVS     r6,#0
;;;317            p++;
000220  1c6d              ADDS     r5,r5,#1
                  |L1.546|
;;;318          }
;;;319        } while (--xsize);
000222  f1a80001          SUB      r0,r8,#1
000226  ea5f0800          MOVS     r8,r0
00022a  d1e1              BNE      |L1.496|
;;;320        break;
00022c  bf00              NOP      
                  |L1.558|
00022e  bf00              NOP                            ;294
;;;321      }
;;;322    }
000230  e8bd8ffe          POP      {r1-r11,pc}
;;;323    
                          ENDP

                  _DrawBitLine2BPP PROC
;;;327    */
;;;328    static void  _DrawBitLine2BPP(GUI_DEVICE * pDevice, int x, int y, U8 const * p, int Diff, int xsize, const LCD_PIXELINDEX * pTrans) {
000234  e92d4fff          PUSH     {r0-r11,lr}
000238  b083              SUB      sp,sp,#0xc
00023a  460f              MOV      r7,r1
00023c  4691              MOV      r9,r2
00023e  4698              MOV      r8,r3
000240  e9ddab11          LDRD     r10,r11,[sp,#0x44]
;;;329      LCD_PIXELINDEX Pixels, PixelIndex;
;;;330      int CurrentPixel, Shift, Index;
;;;331    	
;;;332    	u32 x1=x+xsize;
000244  eb07000a          ADD      r0,r7,r10
000248  9000              STR      r0,[sp,#0]
;;;333    	LCD_WR_REG(0x002A);				    
00024a  202a              MOVS     r0,#0x2a
00024c  f7fffffe          BL       LCD_WR_REG
;;;334    	LCD_WR_Data(x>>8);	    			//ÆðÊ¼µØÖ·X
000250  f3c7200f          UBFX     r0,r7,#8,#16
000254  f7fffffe          BL       LCD_WR_Data
;;;335    	LCD_WR_Data(x);	    			
000258  b2b8              UXTH     r0,r7
00025a  f7fffffe          BL       LCD_WR_Data
;;;336    	LCD_WR_Data(x1>>8);	    			//½áÊøµØÖ·X
00025e  9800              LDR      r0,[sp,#0]
000260  f3c0200f          UBFX     r0,r0,#8,#16
000264  f7fffffe          BL       LCD_WR_Data
;;;337    	LCD_WR_Data(x1);	    			    
000268  9900              LDR      r1,[sp,#0]
00026a  b288              UXTH     r0,r1
00026c  f7fffffe          BL       LCD_WR_Data
;;;338        LCD_WR_REG(0x002b);	
000270  202b              MOVS     r0,#0x2b
000272  f7fffffe          BL       LCD_WR_REG
;;;339    	LCD_WR_Data(y>>8);	    			//ÆðÊ¼µØÖ·Y
000276  f3c9200f          UBFX     r0,r9,#8,#16
00027a  f7fffffe          BL       LCD_WR_Data
;;;340    	LCD_WR_Data(y);	    			    
00027e  fa1ff089          UXTH     r0,r9
000282  f7fffffe          BL       LCD_WR_Data
;;;341    	LCD_WR_Data(y>>8);	    			//½áÊøµØÖ·Y
000286  f3c9200f          UBFX     r0,r9,#8,#16
00028a  f7fffffe          BL       LCD_WR_Data
;;;342    	LCD_WR_Data(y);	    			
00028e  fa1ff089          UXTH     r0,r9
000292  f7fffffe          BL       LCD_WR_Data
;;;343    	LCD_WR_REG(0x2c);
000296  202c              MOVS     r0,#0x2c
000298  f7fffffe          BL       LCD_WR_REG
;;;344    
;;;345      Pixels = *p;
00029c  f8980000          LDRB     r0,[r8,#0]
0002a0  9002              STR      r0,[sp,#8]
;;;346      CurrentPixel = Diff;
0002a2  9e10              LDR      r6,[sp,#0x40]
;;;347      x += Diff;
0002a4  9e10              LDR      r6,[sp,#0x40]
0002a6  4437              ADD      r7,r7,r6
;;;348      switch (GUI_pContext->DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
0002a8  4871              LDR      r0,|L1.1136|
0002aa  6800              LDR      r0,[r0,#0]  ; GUI_pContext
0002ac  7c00              LDRB     r0,[r0,#0x10]
0002ae  f0000003          AND      r0,r0,#3
0002b2  b110              CBZ      r0,|L1.698|
0002b4  2802              CMP      r0,#2
0002b6  d144              BNE      |L1.834|
0002b8  e044              B        |L1.836|
                  |L1.698|
;;;349      case 0:
;;;350        if (pTrans) {
0002ba  f1bb0f00          CMP      r11,#0
0002be  d022              BEQ      |L1.774|
;;;351          do {
0002c0  bf00              NOP      
                  |L1.706|
;;;352            Shift = (3 - CurrentPixel) << 1;
0002c2  f1c60003          RSB      r0,r6,#3
0002c6  0044              LSLS     r4,r0,#1
;;;353            Index = (Pixels & (0xC0 >> (6 - Shift))) >> Shift;
0002c8  f1c40106          RSB      r1,r4,#6
0002cc  20c0              MOVS     r0,#0xc0
0002ce  4108              ASRS     r0,r0,r1
0002d0  9902              LDR      r1,[sp,#8]
0002d2  4008              ANDS     r0,r0,r1
0002d4  fa20f504          LSR      r5,r0,r4
;;;354            PixelIndex = *(pTrans + Index);
0002d8  f85b1025          LDR      r1,[r11,r5,LSL #2]
0002dc  9101              STR      r1,[sp,#4]
;;;355            LCD_WR_Data(PixelIndex);//modified 
0002de  9901              LDR      r1,[sp,#4]
0002e0  b288              UXTH     r0,r1
0002e2  f7fffffe          BL       LCD_WR_Data
;;;356            if (++CurrentPixel == 4) {
0002e6  1c70              ADDS     r0,r6,#1
0002e8  4606              MOV      r6,r0
0002ea  2804              CMP      r0,#4
0002ec  d105              BNE      |L1.762|
;;;357              CurrentPixel = 0;
0002ee  2600              MOVS     r6,#0
;;;358              Pixels = *(++p);
0002f0  f1080001          ADD      r0,r8,#1
0002f4  4680              MOV      r8,r0
0002f6  7800              LDRB     r0,[r0,#0]
0002f8  9002              STR      r0,[sp,#8]
                  |L1.762|
;;;359            }
;;;360          } while (--xsize);
0002fa  f1aa0001          SUB      r0,r10,#1
0002fe  ea5f0a00          MOVS     r10,r0
000302  d1de              BNE      |L1.706|
000304  e01d              B        |L1.834|
                  |L1.774|
;;;361        } else {
;;;362          do {
000306  bf00              NOP      
                  |L1.776|
;;;363            Shift = (3 - CurrentPixel) << 1;
000308  f1c60003          RSB      r0,r6,#3
00030c  0044              LSLS     r4,r0,#1
;;;364            Index = (Pixels & (0xC0 >> (6 - Shift))) >> Shift;
00030e  f1c40106          RSB      r1,r4,#6
000312  20c0              MOVS     r0,#0xc0
000314  4108              ASRS     r0,r0,r1
000316  9902              LDR      r1,[sp,#8]
000318  4008              ANDS     r0,r0,r1
00031a  fa20f504          LSR      r5,r0,r4
;;;365            LCD_WR_Data(Index);//modified 
00031e  b2a8              UXTH     r0,r5
000320  f7fffffe          BL       LCD_WR_Data
;;;366            if (++CurrentPixel == 4) {
000324  1c70              ADDS     r0,r6,#1
000326  4606              MOV      r6,r0
000328  2804              CMP      r0,#4
00032a  d105              BNE      |L1.824|
;;;367              CurrentPixel = 0;
00032c  2600              MOVS     r6,#0
;;;368              Pixels = *(++p);
00032e  f1080001          ADD      r0,r8,#1
000332  4680              MOV      r8,r0
000334  7800              LDRB     r0,[r0,#0]
000336  9002              STR      r0,[sp,#8]
                  |L1.824|
;;;369            }
;;;370          } while (--xsize);
000338  f1aa0001          SUB      r0,r10,#1
00033c  ea5f0a00          MOVS     r10,r0
000340  d1e2              BNE      |L1.776|
                  |L1.834|
;;;371        }
;;;372        break;
000342  e04d              B        |L1.992|
                  |L1.836|
;;;373      case LCD_DRAWMODE_TRANS:
;;;374        if (pTrans) {
000344  f1bb0f00          CMP      r11,#0
000348  d026              BEQ      |L1.920|
;;;375          do {
00034a  bf00              NOP      
                  |L1.844|
;;;376            Shift = (3 - CurrentPixel) << 1;
00034c  f1c60003          RSB      r0,r6,#3
000350  0044              LSLS     r4,r0,#1
;;;377            Index = (Pixels & (0xC0 >> (6 - Shift))) >> Shift;
000352  f1c40106          RSB      r1,r4,#6
000356  20c0              MOVS     r0,#0xc0
000358  4108              ASRS     r0,r0,r1
00035a  9902              LDR      r1,[sp,#8]
00035c  4008              ANDS     r0,r0,r1
00035e  fa20f504          LSR      r5,r0,r4
;;;378            if (Index) {
000362  b145              CBZ      r5,|L1.886|
;;;379              PixelIndex = *(pTrans + Index);
000364  f85b0025          LDR      r0,[r11,r5,LSL #2]
000368  9001              STR      r0,[sp,#4]
;;;380              _SetPixelIndex(pDevice, x, y, PixelIndex);
00036a  464a              MOV      r2,r9
00036c  4639              MOV      r1,r7
00036e  9b01              LDR      r3,[sp,#4]
000370  9803              LDR      r0,[sp,#0xc]
000372  f7fffffe          BL       _SetPixelIndex
                  |L1.886|
;;;381            }
;;;382            x++;
000376  1c7f              ADDS     r7,r7,#1
;;;383            if (++CurrentPixel == 4) {
000378  1c70              ADDS     r0,r6,#1
00037a  4606              MOV      r6,r0
00037c  2804              CMP      r0,#4
00037e  d105              BNE      |L1.908|
;;;384              CurrentPixel = 0;
000380  2600              MOVS     r6,#0
;;;385              Pixels = *(++p);
000382  f1080001          ADD      r0,r8,#1
000386  4680              MOV      r8,r0
000388  7800              LDRB     r0,[r0,#0]
00038a  9002              STR      r0,[sp,#8]
                  |L1.908|
;;;386            }
;;;387          } while (--xsize);
00038c  f1aa0001          SUB      r0,r10,#1
000390  ea5f0a00          MOVS     r10,r0
000394  d1da              BNE      |L1.844|
000396  e022              B        |L1.990|
                  |L1.920|
;;;388        } else {
;;;389          do {
000398  bf00              NOP      
                  |L1.922|
;;;390            Shift = (3 - CurrentPixel) << 1;
00039a  f1c60003          RSB      r0,r6,#3
00039e  0044              LSLS     r4,r0,#1
;;;391            Index = (Pixels & (0xC0 >> (6 - Shift))) >> Shift;
0003a0  f1c40106          RSB      r1,r4,#6
0003a4  20c0              MOVS     r0,#0xc0
0003a6  4108              ASRS     r0,r0,r1
0003a8  9902              LDR      r1,[sp,#8]
0003aa  4008              ANDS     r0,r0,r1
0003ac  fa20f504          LSR      r5,r0,r4
;;;392            if (Index) {
0003b0  b12d              CBZ      r5,|L1.958|
;;;393              _SetPixelIndex(pDevice, x, y, Index);
0003b2  462b              MOV      r3,r5
0003b4  464a              MOV      r2,r9
0003b6  4639              MOV      r1,r7
0003b8  9803              LDR      r0,[sp,#0xc]
0003ba  f7fffffe          BL       _SetPixelIndex
                  |L1.958|
;;;394            }
;;;395            x++;
0003be  1c7f              ADDS     r7,r7,#1
;;;396            if (++CurrentPixel == 4) {
0003c0  1c70              ADDS     r0,r6,#1
0003c2  4606              MOV      r6,r0
0003c4  2804              CMP      r0,#4
0003c6  d105              BNE      |L1.980|
;;;397              CurrentPixel = 0;
0003c8  2600              MOVS     r6,#0
;;;398              Pixels = *(++p);
0003ca  f1080001          ADD      r0,r8,#1
0003ce  4680              MOV      r8,r0
0003d0  7800              LDRB     r0,[r0,#0]
0003d2  9002              STR      r0,[sp,#8]
                  |L1.980|
;;;399            }
;;;400          } while (--xsize);
0003d4  f1aa0001          SUB      r0,r10,#1
0003d8  ea5f0a00          MOVS     r10,r0
0003dc  d1dd              BNE      |L1.922|
                  |L1.990|
;;;401        }
;;;402        break;
0003de  bf00              NOP      
                  |L1.992|
0003e0  bf00              NOP                            ;372
;;;403      }
;;;404    }
0003e2  b007              ADD      sp,sp,#0x1c
0003e4  e8bd8ff0          POP      {r4-r11,pc}
;;;405    
                          ENDP

                  _DrawBitLine4BPP PROC
;;;409    */
;;;410    static void  _DrawBitLine4BPP(GUI_DEVICE * pDevice, int x, int y, U8 const * p, int Diff, int xsize, const LCD_PIXELINDEX * pTrans) {
0003e8  e92d4fff          PUSH     {r0-r11,lr}
0003ec  b083              SUB      sp,sp,#0xc
0003ee  460f              MOV      r7,r1
0003f0  4691              MOV      r9,r2
0003f2  4698              MOV      r8,r3
0003f4  e9ddab11          LDRD     r10,r11,[sp,#0x44]
;;;411      LCD_PIXELINDEX Pixels, PixelIndex;
;;;412      int CurrentPixel, Shift, Index;
;;;413    	
;;;414    	u32 x1=x+xsize;
0003f8  eb07000a          ADD      r0,r7,r10
0003fc  9000              STR      r0,[sp,#0]
;;;415    	LCD_WR_REG(0x002A);				    
0003fe  202a              MOVS     r0,#0x2a
000400  f7fffffe          BL       LCD_WR_REG
;;;416    	LCD_WR_Data(x>>8);	    			//ÆðÊ¼µØÖ·X
000404  f3c7200f          UBFX     r0,r7,#8,#16
000408  f7fffffe          BL       LCD_WR_Data
;;;417    	LCD_WR_Data(x);	    			
00040c  b2b8              UXTH     r0,r7
00040e  f7fffffe          BL       LCD_WR_Data
;;;418    	LCD_WR_Data(x1>>8);	    			//½áÊøµØÖ·X
000412  9800              LDR      r0,[sp,#0]
000414  f3c0200f          UBFX     r0,r0,#8,#16
000418  f7fffffe          BL       LCD_WR_Data
;;;419    	LCD_WR_Data(x1);	    			    
00041c  9900              LDR      r1,[sp,#0]
00041e  b288              UXTH     r0,r1
000420  f7fffffe          BL       LCD_WR_Data
;;;420        LCD_WR_REG(0x002b);	
000424  202b              MOVS     r0,#0x2b
000426  f7fffffe          BL       LCD_WR_REG
;;;421    	LCD_WR_Data(y>>8);	    			//ÆðÊ¼µØÖ·Y
00042a  f3c9200f          UBFX     r0,r9,#8,#16
00042e  f7fffffe          BL       LCD_WR_Data
;;;422    	LCD_WR_Data(y);	    			    
000432  fa1ff089          UXTH     r0,r9
000436  f7fffffe          BL       LCD_WR_Data
;;;423    	LCD_WR_Data(y>>8);	    			//½áÊøµØÖ·Y
00043a  f3c9200f          UBFX     r0,r9,#8,#16
00043e  f7fffffe          BL       LCD_WR_Data
;;;424    	LCD_WR_Data(y);	    			
000442  fa1ff089          UXTH     r0,r9
000446  f7fffffe          BL       LCD_WR_Data
;;;425    	LCD_WR_REG(0x2c);
00044a  202c              MOVS     r0,#0x2c
00044c  f7fffffe          BL       LCD_WR_REG
;;;426    
;;;427      Pixels = *p;
000450  f8980000          LDRB     r0,[r8,#0]
000454  9002              STR      r0,[sp,#8]
;;;428      CurrentPixel = Diff;
000456  9e10              LDR      r6,[sp,#0x40]
;;;429      x += Diff;
000458  9e10              LDR      r6,[sp,#0x40]
00045a  4437              ADD      r7,r7,r6
;;;430      switch (GUI_pContext->DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
00045c  4804              LDR      r0,|L1.1136|
00045e  6800              LDR      r0,[r0,#0]  ; GUI_pContext
000460  7c00              LDRB     r0,[r0,#0x10]
000462  f0000003          AND      r0,r0,#3
000466  b128              CBZ      r0,|L1.1140|
000468  2802              CMP      r0,#2
00046a  d147              BNE      |L1.1276|
00046c  e047              B        |L1.1278|
00046e  0000              DCW      0x0000
                  |L1.1136|
                          DCD      GUI_pContext
                  |L1.1140|
;;;431      case 0:
;;;432        if (pTrans) {
000474  f1bb0f00          CMP      r11,#0
000478  d022              BEQ      |L1.1216|
;;;433          do {
00047a  bf00              NOP      
                  |L1.1148|
;;;434            Shift = (1 - CurrentPixel) << 2;
00047c  f1c60001          RSB      r0,r6,#1
000480  0084              LSLS     r4,r0,#2
;;;435            Index = (Pixels & (0xF0 >> (4 - Shift))) >> Shift;
000482  f1c40104          RSB      r1,r4,#4
000486  20f0              MOVS     r0,#0xf0
000488  4108              ASRS     r0,r0,r1
00048a  9902              LDR      r1,[sp,#8]
00048c  4008              ANDS     r0,r0,r1
00048e  fa20f504          LSR      r5,r0,r4
;;;436            PixelIndex = *(pTrans + Index);
000492  f85b1025          LDR      r1,[r11,r5,LSL #2]
000496  9101              STR      r1,[sp,#4]
;;;437            LCD_WR_Data(PixelIndex);//modified 
000498  9901              LDR      r1,[sp,#4]
00049a  b288              UXTH     r0,r1
00049c  f7fffffe          BL       LCD_WR_Data
;;;438            if (++CurrentPixel == 2) {
0004a0  1c70              ADDS     r0,r6,#1
0004a2  4606              MOV      r6,r0
0004a4  2802              CMP      r0,#2
0004a6  d105              BNE      |L1.1204|
;;;439              CurrentPixel = 0;
0004a8  2600              MOVS     r6,#0
;;;440              Pixels = *(++p);
0004aa  f1080001          ADD      r0,r8,#1
0004ae  4680              MOV      r8,r0
0004b0  7800              LDRB     r0,[r0,#0]
0004b2  9002              STR      r0,[sp,#8]
                  |L1.1204|
;;;441            }
;;;442          } while (--xsize);
0004b4  f1aa0001          SUB      r0,r10,#1
0004b8  ea5f0a00          MOVS     r10,r0
0004bc  d1de              BNE      |L1.1148|
0004be  e01d              B        |L1.1276|
                  |L1.1216|
;;;443        } else {
;;;444          do {
0004c0  bf00              NOP      
                  |L1.1218|
;;;445            Shift = (1 - CurrentPixel) << 2;
0004c2  f1c60001          RSB      r0,r6,#1
0004c6  0084              LSLS     r4,r0,#2
;;;446            Index = (Pixels & (0xF0 >> (4 - Shift))) >> Shift;
0004c8  f1c40104          RSB      r1,r4,#4
0004cc  20f0              MOVS     r0,#0xf0
0004ce  4108              ASRS     r0,r0,r1
0004d0  9902              LDR      r1,[sp,#8]
0004d2  4008              ANDS     r0,r0,r1
0004d4  fa20f504          LSR      r5,r0,r4
;;;447            LCD_WR_Data(Index);//modified 
0004d8  b2a8              UXTH     r0,r5
0004da  f7fffffe          BL       LCD_WR_Data
;;;448            if (++CurrentPixel == 2) {
0004de  1c70              ADDS     r0,r6,#1
0004e0  4606              MOV      r6,r0
0004e2  2802              CMP      r0,#2
0004e4  d105              BNE      |L1.1266|
;;;449              CurrentPixel = 0;
0004e6  2600              MOVS     r6,#0
;;;450              Pixels = *(++p);
0004e8  f1080001          ADD      r0,r8,#1
0004ec  4680              MOV      r8,r0
0004ee  7800              LDRB     r0,[r0,#0]
0004f0  9002              STR      r0,[sp,#8]
                  |L1.1266|
;;;451            }
;;;452          } while (--xsize);
0004f2  f1aa0001          SUB      r0,r10,#1
0004f6  ea5f0a00          MOVS     r10,r0
0004fa  d1e2              BNE      |L1.1218|
                  |L1.1276|
;;;453        }
;;;454        break;
0004fc  e04d              B        |L1.1434|
                  |L1.1278|
;;;455      case LCD_DRAWMODE_TRANS:
;;;456        if (pTrans) {
0004fe  f1bb0f00          CMP      r11,#0
000502  d026              BEQ      |L1.1362|
;;;457          do {
000504  bf00              NOP      
                  |L1.1286|
;;;458            Shift = (1 - CurrentPixel) << 2;
000506  f1c60001          RSB      r0,r6,#1
00050a  0084              LSLS     r4,r0,#2
;;;459            Index = (Pixels & (0xF0 >> (4 - Shift))) >> Shift;
00050c  f1c40104          RSB      r1,r4,#4
000510  20f0              MOVS     r0,#0xf0
000512  4108              ASRS     r0,r0,r1
000514  9902              LDR      r1,[sp,#8]
000516  4008              ANDS     r0,r0,r1
000518  fa20f504          LSR      r5,r0,r4
;;;460            if (Index) {
00051c  b145              CBZ      r5,|L1.1328|
;;;461              PixelIndex = *(pTrans + Index);
00051e  f85b0025          LDR      r0,[r11,r5,LSL #2]
000522  9001              STR      r0,[sp,#4]
;;;462              _SetPixelIndex(pDevice, x, y, PixelIndex);
000524  464a              MOV      r2,r9
000526  4639              MOV      r1,r7
000528  9b01              LDR      r3,[sp,#4]
00052a  9803              LDR      r0,[sp,#0xc]
00052c  f7fffffe          BL       _SetPixelIndex
                  |L1.1328|
;;;463            }
;;;464            x++;
000530  1c7f              ADDS     r7,r7,#1
;;;465            if (++CurrentPixel == 2) {
000532  1c70              ADDS     r0,r6,#1
000534  4606              MOV      r6,r0
000536  2802              CMP      r0,#2
000538  d105              BNE      |L1.1350|
;;;466              CurrentPixel = 0;
00053a  2600              MOVS     r6,#0
;;;467              Pixels = *(++p);
00053c  f1080001          ADD      r0,r8,#1
000540  4680              MOV      r8,r0
000542  7800              LDRB     r0,[r0,#0]
000544  9002              STR      r0,[sp,#8]
                  |L1.1350|
;;;468            }
;;;469          } while (--xsize);
000546  f1aa0001          SUB      r0,r10,#1
00054a  ea5f0a00          MOVS     r10,r0
00054e  d1da              BNE      |L1.1286|
000550  e022              B        |L1.1432|
                  |L1.1362|
;;;470        } else {
;;;471          do {
000552  bf00              NOP      
                  |L1.1364|
;;;472            Shift = (1 - CurrentPixel) << 2;
000554  f1c60001          RSB      r0,r6,#1
000558  0084              LSLS     r4,r0,#2
;;;473            Index = (Pixels & (0xF0 >> (4 - Shift))) >> Shift;
00055a  f1c40104          RSB      r1,r4,#4
00055e  20f0              MOVS     r0,#0xf0
000560  4108              ASRS     r0,r0,r1
000562  9902              LDR      r1,[sp,#8]
000564  4008              ANDS     r0,r0,r1
000566  fa20f504          LSR      r5,r0,r4
;;;474            if (Index) {
00056a  b12d              CBZ      r5,|L1.1400|
;;;475              _SetPixelIndex(pDevice, x, y, Index);
00056c  462b              MOV      r3,r5
00056e  464a              MOV      r2,r9
000570  4639              MOV      r1,r7
000572  9803              LDR      r0,[sp,#0xc]
000574  f7fffffe          BL       _SetPixelIndex
                  |L1.1400|
;;;476            }
;;;477            x++;
000578  1c7f              ADDS     r7,r7,#1
;;;478            if (++CurrentPixel == 2) {
00057a  1c70              ADDS     r0,r6,#1
00057c  4606              MOV      r6,r0
00057e  2802              CMP      r0,#2
000580  d105              BNE      |L1.1422|
;;;479              CurrentPixel = 0;
000582  2600              MOVS     r6,#0
;;;480              Pixels = *(++p);
000584  f1080001          ADD      r0,r8,#1
000588  4680              MOV      r8,r0
00058a  7800              LDRB     r0,[r0,#0]
00058c  9002              STR      r0,[sp,#8]
                  |L1.1422|
;;;481            }
;;;482          } while (--xsize);
00058e  f1aa0001          SUB      r0,r10,#1
000592  ea5f0a00          MOVS     r10,r0
000596  d1dd              BNE      |L1.1364|
                  |L1.1432|
;;;483        }
;;;484        break;
000598  bf00              NOP      
                  |L1.1434|
00059a  bf00              NOP                            ;454
;;;485      }
;;;486    }
00059c  b007              ADD      sp,sp,#0x1c
00059e  e8bd8ff0          POP      {r4-r11,pc}
;;;487    
                          ENDP

                  _DrawBitLine8BPP PROC
;;;491    */
;;;492    static void  _DrawBitLine8BPP(GUI_DEVICE * pDevice, int x, int y, U8 const * p, int xsize, const LCD_PIXELINDEX * pTrans) {
0005a2  e92d5ff0          PUSH     {r4-r12,lr}
0005a6  4683              MOV      r11,r0
0005a8  460e              MOV      r6,r1
0005aa  4690              MOV      r8,r2
0005ac  461c              MOV      r4,r3
0005ae  e9dd590a          LDRD     r5,r9,[sp,#0x28]
;;;493      LCD_PIXELINDEX Pixel;
;;;494    	
;;;495    	u32 x1=x+xsize;
0005b2  eb060a05          ADD      r10,r6,r5
;;;496    	LCD_WR_REG(0x002A);				    
0005b6  202a              MOVS     r0,#0x2a
0005b8  f7fffffe          BL       LCD_WR_REG
;;;497    	LCD_WR_Data(x>>8);	    			//ÆðÊ¼µØÖ·X
0005bc  f3c6200f          UBFX     r0,r6,#8,#16
0005c0  f7fffffe          BL       LCD_WR_Data
;;;498    	LCD_WR_Data(x);	    			
0005c4  b2b0              UXTH     r0,r6
0005c6  f7fffffe          BL       LCD_WR_Data
;;;499    	LCD_WR_Data(x1>>8);	    			//½áÊøµØÖ·X
0005ca  f3ca200f          UBFX     r0,r10,#8,#16
0005ce  f7fffffe          BL       LCD_WR_Data
;;;500    	LCD_WR_Data(x1);	    			    
0005d2  fa1ff08a          UXTH     r0,r10
0005d6  f7fffffe          BL       LCD_WR_Data
;;;501        LCD_WR_REG(0x002b);	
0005da  202b              MOVS     r0,#0x2b
0005dc  f7fffffe          BL       LCD_WR_REG
;;;502    	LCD_WR_Data(y>>8);	    			//ÆðÊ¼µØÖ·Y
0005e0  f3c8200f          UBFX     r0,r8,#8,#16
0005e4  f7fffffe          BL       LCD_WR_Data
;;;503    	LCD_WR_Data(y);	    			    
0005e8  fa1ff088          UXTH     r0,r8
0005ec  f7fffffe          BL       LCD_WR_Data
;;;504    	LCD_WR_Data(y>>8);	    			//½áÊøµØÖ·Y
0005f0  f3c8200f          UBFX     r0,r8,#8,#16
0005f4  f7fffffe          BL       LCD_WR_Data
;;;505    	LCD_WR_Data(y);	    			
0005f8  fa1ff088          UXTH     r0,r8
0005fc  f7fffffe          BL       LCD_WR_Data
;;;506    	LCD_WR_REG(0x2c);
000600  202c              MOVS     r0,#0x2c
000602  f7fffffe          BL       LCD_WR_REG
;;;507    
;;;508      switch (GUI_pContext->DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
000606  48fa              LDR      r0,|L1.2544|
000608  6800              LDR      r0,[r0,#0]  ; GUI_pContext
00060a  7c00              LDRB     r0,[r0,#0x10]
00060c  f0000003          AND      r0,r0,#3
000610  b110              CBZ      r0,|L1.1560|
000612  2802              CMP      r0,#2
000614  d13c              BNE      |L1.1680|
000616  e019              B        |L1.1612|
                  |L1.1560|
;;;509      case 0:
;;;510        if (pTrans) {
000618  f1b90f00          CMP      r9,#0
00061c  d00c              BEQ      |L1.1592|
;;;511          for (; xsize > 0; xsize--, x++, p++) {
00061e  e008              B        |L1.1586|
                  |L1.1568|
;;;512            Pixel = *p;
000620  7827              LDRB     r7,[r4,#0]
;;;513            LCD_WR_Data(*(pTrans + Pixel));//modified 
000622  f8391027          LDRH     r1,[r9,r7,LSL #2]
000626  b288              UXTH     r0,r1
000628  f7fffffe          BL       LCD_WR_Data
00062c  1e6d              SUBS     r5,r5,#1              ;511
00062e  1c76              ADDS     r6,r6,#1              ;511
000630  1c64              ADDS     r4,r4,#1              ;511
                  |L1.1586|
000632  2d00              CMP      r5,#0                 ;511
000634  dcf4              BGT      |L1.1568|
000636  e008              B        |L1.1610|
                  |L1.1592|
;;;514          }
;;;515        } else {
;;;516          for (; xsize > 0; xsize--, x++, p++) {
000638  e005              B        |L1.1606|
                  |L1.1594|
;;;517            LCD_WR_Data(*p);//modified 
00063a  7820              LDRB     r0,[r4,#0]
00063c  f7fffffe          BL       LCD_WR_Data
000640  1e6d              SUBS     r5,r5,#1              ;516
000642  1c76              ADDS     r6,r6,#1              ;516
000644  1c64              ADDS     r4,r4,#1              ;516
                  |L1.1606|
000646  2d00              CMP      r5,#0                 ;516
000648  dcf7              BGT      |L1.1594|
                  |L1.1610|
;;;518          }
;;;519        }
;;;520        break;
00064a  e021              B        |L1.1680|
                  |L1.1612|
;;;521      case LCD_DRAWMODE_TRANS:
;;;522        if (pTrans) {
00064c  f1b90f00          CMP      r9,#0
000650  d00f              BEQ      |L1.1650|
;;;523          for (; xsize > 0; xsize--, x++, p++) {
000652  e00b              B        |L1.1644|
                  |L1.1620|
;;;524            Pixel = *p;
000654  7827              LDRB     r7,[r4,#0]
;;;525            if (Pixel) {
000656  b137              CBZ      r7,|L1.1638|
;;;526              _SetPixelIndex(pDevice, x, y, *(pTrans + Pixel));
000658  f8593027          LDR      r3,[r9,r7,LSL #2]
00065c  4642              MOV      r2,r8
00065e  4631              MOV      r1,r6
000660  4658              MOV      r0,r11
000662  f7fffffe          BL       _SetPixelIndex
                  |L1.1638|
000666  1e6d              SUBS     r5,r5,#1              ;523
000668  1c76              ADDS     r6,r6,#1              ;523
00066a  1c64              ADDS     r4,r4,#1              ;523
                  |L1.1644|
00066c  2d00              CMP      r5,#0                 ;523
00066e  dcf1              BGT      |L1.1620|
000670  e00d              B        |L1.1678|
                  |L1.1650|
;;;527            }
;;;528          }
;;;529        } else {
;;;530          for (; xsize > 0; xsize--, x++, p++) {
000672  e00a              B        |L1.1674|
                  |L1.1652|
;;;531            Pixel = *p;
000674  7827              LDRB     r7,[r4,#0]
;;;532            if (Pixel) {
000676  b12f              CBZ      r7,|L1.1668|
;;;533              _SetPixelIndex(pDevice, x, y, Pixel);
000678  463b              MOV      r3,r7
00067a  4642              MOV      r2,r8
00067c  4631              MOV      r1,r6
00067e  4658              MOV      r0,r11
000680  f7fffffe          BL       _SetPixelIndex
                  |L1.1668|
000684  1e6d              SUBS     r5,r5,#1              ;530
000686  1c76              ADDS     r6,r6,#1              ;530
000688  1c64              ADDS     r4,r4,#1              ;530
                  |L1.1674|
00068a  2d00              CMP      r5,#0                 ;530
00068c  dcf2              BGT      |L1.1652|
                  |L1.1678|
;;;534            }
;;;535          }
;;;536        }
;;;537        break;
00068e  bf00              NOP      
                  |L1.1680|
000690  bf00              NOP                            ;520
;;;538      }
;;;539    }
000692  e8bd9ff0          POP      {r4-r12,pc}
;;;540    
                          ENDP

                  _DrawBitLine16BPP PROC
;;;548    */
;;;549    static void _DrawBitLine16BPP(GUI_DEVICE * pDevice, int x, int y, U16 const * p, int xsize) 
000696  e92d47f0          PUSH     {r4-r10,lr}
;;;550    {
00069a  4682              MOV      r10,r0
00069c  460d              MOV      r5,r1
00069e  4614              MOV      r4,r2
0006a0  461e              MOV      r6,r3
0006a2  9f08              LDR      r7,[sp,#0x20]
;;;551      	u32 i,x1;
;;;552    	x1=x+xsize;
0006a4  eb050907          ADD      r9,r5,r7
;;;553    	
;;;554    	LCD_WR_REG(0x002A);				    
0006a8  202a              MOVS     r0,#0x2a
0006aa  f7fffffe          BL       LCD_WR_REG
;;;555    	LCD_WR_Data(x>>8);	    			//ÆðÊ¼µØÖ·X
0006ae  f3c5200f          UBFX     r0,r5,#8,#16
0006b2  f7fffffe          BL       LCD_WR_Data
;;;556    	LCD_WR_Data(x);	    			
0006b6  b2a8              UXTH     r0,r5
0006b8  f7fffffe          BL       LCD_WR_Data
;;;557    	LCD_WR_Data(x1>>8);	    			//½áÊøµØÖ·X
0006bc  f3c9200f          UBFX     r0,r9,#8,#16
0006c0  f7fffffe          BL       LCD_WR_Data
;;;558    	LCD_WR_Data(x1);	    			    
0006c4  fa1ff089          UXTH     r0,r9
0006c8  f7fffffe          BL       LCD_WR_Data
;;;559        LCD_WR_REG(0x002b);	
0006cc  202b              MOVS     r0,#0x2b
0006ce  f7fffffe          BL       LCD_WR_REG
;;;560    	LCD_WR_Data(y>>8);	    			//ÆðÊ¼µØÖ·Y
0006d2  f3c4200f          UBFX     r0,r4,#8,#16
0006d6  f7fffffe          BL       LCD_WR_Data
;;;561    	LCD_WR_Data(y);	    			    
0006da  b2a0              UXTH     r0,r4
0006dc  f7fffffe          BL       LCD_WR_Data
;;;562    	LCD_WR_Data(y>>8);	    			//½áÊøµØÖ·Y
0006e0  f3c4200f          UBFX     r0,r4,#8,#16
0006e4  f7fffffe          BL       LCD_WR_Data
;;;563    	LCD_WR_Data(y);	    			
0006e8  b2a0              UXTH     r0,r4
0006ea  f7fffffe          BL       LCD_WR_Data
;;;564    	LCD_WR_REG(0x2c);
0006ee  202c              MOVS     r0,#0x2c
0006f0  f7fffffe          BL       LCD_WR_REG
;;;565    
;;;566    	for(i=0;i<xsize;i++)
0006f4  f04f0800          MOV      r8,#0
0006f8  e005              B        |L1.1798|
                  |L1.1786|
;;;567    	{
;;;568    		LCD_WR_Data(*p);
0006fa  8830              LDRH     r0,[r6,#0]
0006fc  f7fffffe          BL       LCD_WR_Data
;;;569    		p++;		
000700  1cb6              ADDS     r6,r6,#2
000702  f1080801          ADD      r8,r8,#1              ;566
                  |L1.1798|
000706  45b8              CMP      r8,r7                 ;566
000708  d3f7              BCC      |L1.1786|
;;;570    	}
;;;571    }
00070a  e8bd87f0          POP      {r4-r10,pc}
;;;572    
                          ENDP

                  _DrawBitLine32BPP PROC
;;;580    */
;;;581    static void _DrawBitLine32BPP(GUI_DEVICE * pDevice, int x, int y, U32 const * p, int xsize) {
00070e  e92d41f0          PUSH     {r4-r8,lr}
000712  4607              MOV      r7,r0
000714  460d              MOV      r5,r1
000716  4690              MOV      r8,r2
000718  461c              MOV      r4,r3
00071a  9e06              LDR      r6,[sp,#0x18]
;;;582      for (;xsize > 0; xsize--, x++, p++) {
00071c  e008              B        |L1.1840|
                  |L1.1822|
;;;583        _SetPixelIndex(pDevice, x, y, *p);
00071e  4642              MOV      r2,r8
000720  4629              MOV      r1,r5
000722  4638              MOV      r0,r7
000724  6823              LDR      r3,[r4,#0]
000726  f7fffffe          BL       _SetPixelIndex
00072a  1e76              SUBS     r6,r6,#1              ;582
00072c  1c6d              ADDS     r5,r5,#1              ;582
00072e  1d24              ADDS     r4,r4,#4              ;582
                  |L1.1840|
000730  2e00              CMP      r6,#0                 ;582
000732  dcf4              BGT      |L1.1822|
;;;584      }
;;;585    }
000734  e8bd81f0          POP      {r4-r8,pc}
;;;586    
                          ENDP

                  _DrawBitmap PROC
;;;590    */
;;;591    static void _DrawBitmap(GUI_DEVICE * pDevice, int x0, int y0,
000738  e92d4fff          PUSH     {r0-r11,lr}
;;;592                           int xSize, int ySize,
;;;593                           int BitsPerPixel, 
;;;594                           int BytesPerLine,
;;;595                           const U8 * pData, int Diff,
;;;596                           const LCD_PIXELINDEX * pTrans) {
00073c  b083              SUB      sp,sp,#0xc
00073e  4615              MOV      r5,r2
000740  461e              MOV      r6,r3
000742  e9ddba14          LDRD     r11,r10,[sp,#0x50]
000746  e9dd9712          LDRD     r9,r7,[sp,#0x48]
00074a  f8dd8040          LDR      r8,[sp,#0x40]
;;;597      int i;
;;;598    
;;;599      switch (BitsPerPixel) {
00074e  9811              LDR      r0,[sp,#0x44]
000750  2808              CMP      r0,#8
000752  d03f              BEQ      |L1.2004|
000754  dc06              BGT      |L1.1892|
000756  2801              CMP      r0,#1
000758  d009              BEQ      |L1.1902|
00075a  2802              CMP      r0,#2
00075c  d018              BEQ      |L1.1936|
00075e  2804              CMP      r0,#4
000760  d163              BNE      |L1.2090|
000762  e026              B        |L1.1970|
                  |L1.1892|
000764  2810              CMP      r0,#0x10
000766  d044              BEQ      |L1.2034|
000768  2820              CMP      r0,#0x20
00076a  d15e              BNE      |L1.2090|
00076c  e04f              B        |L1.2062|
                  |L1.1902|
;;;600      case 1:
;;;601        for (i = 0; i < ySize; i++) {
00076e  2400              MOVS     r4,#0
000770  e00b              B        |L1.1930|
                  |L1.1906|
;;;602          _DrawBitLine1BPP(pDevice, x0, i + y0, pData, Diff, xSize, pTrans);
000772  1962              ADDS     r2,r4,r5
000774  463b              MOV      r3,r7
000776  e9cdb600          STRD     r11,r6,[sp,#0]
00077a  f8cda008          STR      r10,[sp,#8]
00077e  e9dd0103          LDRD     r0,r1,[sp,#0xc]
000782  f7fffffe          BL       _DrawBitLine1BPP
;;;603          pData += BytesPerLine;
000786  444f              ADD      r7,r7,r9
000788  1c64              ADDS     r4,r4,#1              ;601
                  |L1.1930|
00078a  4544              CMP      r4,r8                 ;601
00078c  dbf1              BLT      |L1.1906|
;;;604        }
;;;605        break;
00078e  e04c              B        |L1.2090|
                  |L1.1936|
;;;606      case 2:
;;;607        for (i = 0; i < ySize; i++) {
000790  2400              MOVS     r4,#0
000792  e00b              B        |L1.1964|
                  |L1.1940|
;;;608          _DrawBitLine2BPP(pDevice, x0, i + y0, pData, Diff, xSize, pTrans);
000794  1962              ADDS     r2,r4,r5
000796  463b              MOV      r3,r7
000798  e9cdb600          STRD     r11,r6,[sp,#0]
00079c  f8cda008          STR      r10,[sp,#8]
0007a0  e9dd0103          LDRD     r0,r1,[sp,#0xc]
0007a4  f7fffffe          BL       _DrawBitLine2BPP
;;;609          pData += BytesPerLine;
0007a8  444f              ADD      r7,r7,r9
0007aa  1c64              ADDS     r4,r4,#1              ;607
                  |L1.1964|
0007ac  4544              CMP      r4,r8                 ;607
0007ae  dbf1              BLT      |L1.1940|
;;;610        }
;;;611        break;
0007b0  e03b              B        |L1.2090|
                  |L1.1970|
;;;612      case 4:
;;;613        for (i = 0; i < ySize; i++) {
0007b2  2400              MOVS     r4,#0
0007b4  e00b              B        |L1.1998|
                  |L1.1974|
;;;614          _DrawBitLine4BPP(pDevice, x0, i + y0, pData, Diff, xSize, pTrans);
0007b6  1962              ADDS     r2,r4,r5
0007b8  463b              MOV      r3,r7
0007ba  e9cdb600          STRD     r11,r6,[sp,#0]
0007be  f8cda008          STR      r10,[sp,#8]
0007c2  e9dd0103          LDRD     r0,r1,[sp,#0xc]
0007c6  f7fffffe          BL       _DrawBitLine4BPP
;;;615          pData += BytesPerLine;
0007ca  444f              ADD      r7,r7,r9
0007cc  1c64              ADDS     r4,r4,#1              ;613
                  |L1.1998|
0007ce  4544              CMP      r4,r8                 ;613
0007d0  dbf1              BLT      |L1.1974|
;;;616        }
;;;617        break;
0007d2  e02a              B        |L1.2090|
                  |L1.2004|
;;;618      case 8:
;;;619        for (i = 0; i < ySize; i++) {
0007d4  2400              MOVS     r4,#0
0007d6  e009              B        |L1.2028|
                  |L1.2008|
;;;620          _DrawBitLine8BPP(pDevice, x0, i + y0, pData, xSize, pTrans);
0007d8  1962              ADDS     r2,r4,r5
0007da  463b              MOV      r3,r7
0007dc  e9cd6a00          STRD     r6,r10,[sp,#0]
0007e0  e9dd0103          LDRD     r0,r1,[sp,#0xc]
0007e4  f7fffffe          BL       _DrawBitLine8BPP
;;;621          pData += BytesPerLine;
0007e8  444f              ADD      r7,r7,r9
0007ea  1c64              ADDS     r4,r4,#1              ;619
                  |L1.2028|
0007ec  4544              CMP      r4,r8                 ;619
0007ee  dbf3              BLT      |L1.2008|
;;;622        }
;;;623        break;
0007f0  e01b              B        |L1.2090|
                  |L1.2034|
;;;624      //
;;;625      // Only required for 16bpp color depth of target. Should be removed otherwise.
;;;626      //
;;;627      case 16:
;;;628        for (i = 0; i < ySize; i++) {
0007f2  2400              MOVS     r4,#0
0007f4  e008              B        |L1.2056|
                  |L1.2038|
;;;629          _DrawBitLine16BPP(pDevice, x0, i + y0, (const U16 *)pData, xSize);
0007f6  1962              ADDS     r2,r4,r5
0007f8  463b              MOV      r3,r7
0007fa  9600              STR      r6,[sp,#0]
0007fc  e9dd0103          LDRD     r0,r1,[sp,#0xc]
000800  f7fffffe          BL       _DrawBitLine16BPP
;;;630          pData += BytesPerLine;
000804  444f              ADD      r7,r7,r9
000806  1c64              ADDS     r4,r4,#1              ;628
                  |L1.2056|
000808  4544              CMP      r4,r8                 ;628
00080a  dbf4              BLT      |L1.2038|
;;;631        }
;;;632        break;
00080c  e00d              B        |L1.2090|
                  |L1.2062|
;;;633      //
;;;634      // Only required for 32bpp color depth of target. Should be removed otherwise.
;;;635      //
;;;636      case 32:
;;;637        for (i = 0; i < ySize; i++) {
00080e  2400              MOVS     r4,#0
000810  e008              B        |L1.2084|
                  |L1.2066|
;;;638          _DrawBitLine32BPP(pDevice, x0, i + y0, (const U32 *)pData, xSize);
000812  1962              ADDS     r2,r4,r5
000814  463b              MOV      r3,r7
000816  9600              STR      r6,[sp,#0]
000818  e9dd0103          LDRD     r0,r1,[sp,#0xc]
00081c  f7fffffe          BL       _DrawBitLine32BPP
;;;639          pData += BytesPerLine;
000820  444f              ADD      r7,r7,r9
000822  1c64              ADDS     r4,r4,#1              ;637
                  |L1.2084|
000824  4544              CMP      r4,r8                 ;637
000826  dbf4              BLT      |L1.2066|
;;;640        }
;;;641        break;
000828  bf00              NOP      
                  |L1.2090|
00082a  bf00              NOP                            ;605
;;;642      }
;;;643    }
00082c  b007              ADD      sp,sp,#0x1c
00082e  e8bd8ff0          POP      {r4-r11,pc}
;;;644    
                          ENDP

                  _InitOnce PROC
;;;654    */
;;;655    static int _InitOnce(GUI_DEVICE * pDevice) {
000832  b570              PUSH     {r4-r6,lr}
000834  4604              MOV      r4,r0
;;;656      DRIVER_CONTEXT_TEMPLATE * pContext;
;;;657    
;;;658      if (pDevice->u.pContext == NULL) {
000836  68a0              LDR      r0,[r4,#8]
000838  b958              CBNZ     r0,|L1.2130|
;;;659        pDevice->u.pContext = GUI_ALLOC_GetFixedBlock(sizeof(DRIVER_CONTEXT_TEMPLATE));
00083a  201c              MOVS     r0,#0x1c
00083c  f7fffffe          BL       GUI_ALLOC_GetFixedBlock
000840  60a0              STR      r0,[r4,#8]
;;;660        pContext = (DRIVER_CONTEXT_TEMPLATE *)pDevice->u.pContext;
000842  68a5              LDR      r5,[r4,#8]
;;;661        pContext->BitsPerPixel = LCD__GetBPP(pDevice->pColorConvAPI->pfGetIndexMask());
000844  6921              LDR      r1,[r4,#0x10]
000846  6888              LDR      r0,[r1,#8]
000848  4780              BLX      r0
00084a  4606              MOV      r6,r0
00084c  f7fffffe          BL       LCD__GetBPP
000850  61a8              STR      r0,[r5,#0x18]
                  |L1.2130|
;;;662      }
;;;663      return pDevice->u.pContext ? 0 : 1;
000852  68a0              LDR      r0,[r4,#8]
000854  b908              CBNZ     r0,|L1.2138|
000856  2001              MOVS     r0,#1
                  |L1.2136|
;;;664    }
000858  bd70              POP      {r4-r6,pc}
                  |L1.2138|
00085a  2000              MOVS     r0,#0                 ;663
00085c  e7fc              B        |L1.2136|
;;;665    
                          ENDP

                  _GetDevProp PROC
;;;669    */
;;;670    static I32 _GetDevProp(GUI_DEVICE * pDevice, int Index) {
00085e  4603              MOV      r3,r0
000860  460a              MOV      r2,r1
;;;671      DRIVER_CONTEXT_TEMPLATE * pContext;
;;;672    
;;;673      pContext = (DRIVER_CONTEXT_TEMPLATE *)pDevice->u.pContext;
000862  6899              LDR      r1,[r3,#8]
;;;674      switch (Index) {
000864  2a0f              CMP      r2,#0xf
000866  d21f              BCS      |L1.2216|
000868  e8dff002          TBB      [pc,r2]
00086c  1e080a0c          DCB      0x1e,0x08,0x0a,0x0c
000870  0e1e1e1e          DCB      0x0e,0x1e,0x1e,0x1e
000874  10121416          DCB      0x10,0x12,0x14,0x16
000878  181a1c00          DCB      0x18,0x1a,0x1c,0x00
;;;675      case LCD_DEVCAP_XSIZE:
;;;676        return pContext->xSize;
00087c  6848              LDR      r0,[r1,#4]
                  |L1.2174|
;;;677      case LCD_DEVCAP_YSIZE:
;;;678        return pContext->ySize;
;;;679      case LCD_DEVCAP_VXSIZE:
;;;680        return pContext->vxSize;
;;;681      case LCD_DEVCAP_VYSIZE:
;;;682        return pContext->vySize;
;;;683      case LCD_DEVCAP_BITSPERPIXEL:
;;;684        return pContext->BitsPerPixel;
;;;685      case LCD_DEVCAP_NUMCOLORS:
;;;686        return 0;
;;;687      case LCD_DEVCAP_XMAG:
;;;688        return 1;
;;;689      case LCD_DEVCAP_YMAG:
;;;690        return 1;
;;;691      case LCD_DEVCAP_MIRROR_X:
;;;692        return 0;
;;;693      case LCD_DEVCAP_MIRROR_Y:
;;;694        return 0;
;;;695      case LCD_DEVCAP_SWAP_XY:
;;;696        return 0;
;;;697      }
;;;698      return -1;
;;;699    }
00087e  4770              BX       lr
000880  6888              LDR      r0,[r1,#8]            ;678
000882  e7fc              B        |L1.2174|
000884  68c8              LDR      r0,[r1,#0xc]          ;680
000886  e7fa              B        |L1.2174|
000888  6908              LDR      r0,[r1,#0x10]         ;682
00088a  e7f8              B        |L1.2174|
00088c  6988              LDR      r0,[r1,#0x18]         ;684
00088e  e7f6              B        |L1.2174|
000890  2000              MOVS     r0,#0                 ;686
000892  e7f4              B        |L1.2174|
000894  2001              MOVS     r0,#1                 ;688
000896  e7f2              B        |L1.2174|
000898  2001              MOVS     r0,#1                 ;690
00089a  e7f0              B        |L1.2174|
00089c  2000              MOVS     r0,#0                 ;692
00089e  e7ee              B        |L1.2174|
0008a0  2000              MOVS     r0,#0                 ;694
0008a2  e7ec              B        |L1.2174|
0008a4  2000              MOVS     r0,#0                 ;696
0008a6  e7ea              B        |L1.2174|
                  |L1.2216|
0008a8  f04f30ff          MOV      r0,#0xffffffff        ;698
0008ac  e7e7              B        |L1.2174|
;;;700    
                          ENDP

                  _GetDevData PROC
;;;704    */
;;;705    static void * _GetDevData(GUI_DEVICE * pDevice, int Index) {
0008ae  4602              MOV      r2,r0
;;;706      GUI_USE_PARA(pDevice);
;;;707      #if GUI_SUPPORT_MEMDEV
;;;708        switch (Index) {
0008b0  2901              CMP      r1,#1
0008b2  d101              BNE      |L1.2232|
;;;709        case LCD_DEVDATA_MEMDEV:
;;;710          return (void *)&GUI_MEMDEV_DEVICE_16; // TBD: Has to be adapted to the right memory device depending on the used color depth!
0008b4  484f              LDR      r0,|L1.2548|
                  |L1.2230|
;;;711        }
;;;712      #else
;;;713        GUI_USE_PARA(Index);
;;;714      #endif
;;;715      return NULL;
;;;716    }
0008b6  4770              BX       lr
                  |L1.2232|
0008b8  2000              MOVS     r0,#0                 ;715
0008ba  e7fc              B        |L1.2230|
;;;717    
                          ENDP

                  _GetRect PROC
;;;721    */
;;;722    static void _GetRect(GUI_DEVICE * pDevice, LCD_RECT * pRect) {
0008bc  6882              LDR      r2,[r0,#8]
;;;723      DRIVER_CONTEXT_TEMPLATE * pContext;
;;;724    
;;;725      pContext = (DRIVER_CONTEXT_TEMPLATE *)pDevice->u.pContext;
;;;726      pRect->x0 = 0;
0008be  2300              MOVS     r3,#0
0008c0  800b              STRH     r3,[r1,#0]
;;;727      pRect->y0 = 0;
0008c2  804b              STRH     r3,[r1,#2]
;;;728      pRect->x1 = pContext->vxSize - 1;
0008c4  8993              LDRH     r3,[r2,#0xc]
0008c6  1e5b              SUBS     r3,r3,#1
0008c8  b21b              SXTH     r3,r3
0008ca  808b              STRH     r3,[r1,#4]
;;;729      pRect->y1 = pContext->vySize - 1;
0008cc  8a13              LDRH     r3,[r2,#0x10]
0008ce  1e5b              SUBS     r3,r3,#1
0008d0  b21b              SXTH     r3,r3
0008d2  80cb              STRH     r3,[r1,#6]
;;;730    }
0008d4  4770              BX       lr
;;;731    
                          ENDP

                  _SetOrg PROC
;;;735    */
;;;736    static void _SetOrg(GUI_DEVICE * pDevice, int x, int y) {
0008d6  b57c              PUSH     {r2-r6,lr}
0008d8  4604              MOV      r4,r0
0008da  460d              MOV      r5,r1
0008dc  4616              MOV      r6,r2
;;;737      LCD_X_SETORG_INFO Data = {0};
0008de  2000              MOVS     r0,#0
0008e0  9000              STR      r0,[sp,#0]
0008e2  9001              STR      r0,[sp,#4]
;;;738    
;;;739      Data.xPos = x;
0008e4  9500              STR      r5,[sp,#0]
;;;740      Data.yPos = y;
0008e6  9601              STR      r6,[sp,#4]
;;;741      LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_SETORG, (void *)&Data);
0008e8  466a              MOV      r2,sp
0008ea  2103              MOVS     r1,#3
0008ec  69a0              LDR      r0,[r4,#0x18]
0008ee  f7fffffe          BL       LCD_X_DisplayDriver
;;;742    }
0008f2  bd7c              POP      {r2-r6,pc}
;;;743    
                          ENDP

                  _SetVRAMAddr PROC
;;;753    */
;;;754    static void _SetVRAMAddr(GUI_DEVICE * pDevice, void * pVRAM) {
0008f4  b5f8              PUSH     {r3-r7,lr}
0008f6  4604              MOV      r4,r0
0008f8  460d              MOV      r5,r1
;;;755      DRIVER_CONTEXT_TEMPLATE * pContext;
;;;756      LCD_X_SETVRAMADDR_INFO Data = {0};
0008fa  2000              MOVS     r0,#0
0008fc  9000              STR      r0,[sp,#0]
;;;757    
;;;758      _InitOnce(pDevice);
0008fe  4620              MOV      r0,r4
000900  f7fffffe          BL       _InitOnce
;;;759      if (pDevice->u.pContext) {
000904  68a0              LDR      r0,[r4,#8]
000906  b138              CBZ      r0,|L1.2328|
;;;760        pContext = (DRIVER_CONTEXT_TEMPLATE *)pDevice->u.pContext;
000908  68a6              LDR      r6,[r4,#8]
;;;761        pContext->VRAMAddr = (U32)pVRAM;
00090a  6035              STR      r5,[r6,#0]
;;;762        Data.pVRAM = pVRAM;
00090c  9500              STR      r5,[sp,#0]
;;;763        LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_SETVRAMADDR, (void *)&Data);
00090e  466a              MOV      r2,sp
000910  2102              MOVS     r1,#2
000912  69a0              LDR      r0,[r4,#0x18]
000914  f7fffffe          BL       LCD_X_DisplayDriver
                  |L1.2328|
;;;764      }
;;;765    }
000918  bdf8              POP      {r3-r7,pc}
;;;766    
                          ENDP

                  _SetVSize PROC
;;;770    */
;;;771    static void _SetVSize(GUI_DEVICE * pDevice, int xSize, int ySize) {
00091a  e92d41f0          PUSH     {r4-r8,lr}
00091e  4605              MOV      r5,r0
000920  460e              MOV      r6,r1
000922  4617              MOV      r7,r2
;;;772      DRIVER_CONTEXT_TEMPLATE * pContext;
;;;773    
;;;774      _InitOnce(pDevice);
000924  4628              MOV      r0,r5
000926  f7fffffe          BL       _InitOnce
;;;775      if (pDevice->u.pContext) {
00092a  68a8              LDR      r0,[r5,#8]
00092c  b118              CBZ      r0,|L1.2358|
;;;776        pContext = (DRIVER_CONTEXT_TEMPLATE *)pDevice->u.pContext;
00092e  68ac              LDR      r4,[r5,#8]
;;;777        pContext->vxSize = xSize;
000930  60e6              STR      r6,[r4,#0xc]
;;;778        pContext->vySize = ySize;
000932  6127              STR      r7,[r4,#0x10]
;;;779        pContext->vxSizePhys = xSize;
000934  6166              STR      r6,[r4,#0x14]
                  |L1.2358|
;;;780      }
;;;781    }
000936  e8bd81f0          POP      {r4-r8,pc}
;;;782    
                          ENDP

                  _SetSize PROC
;;;786    */
;;;787    static void _SetSize(GUI_DEVICE * pDevice, int xSize, int ySize) {
00093a  e92d41fc          PUSH     {r2-r8,lr}
00093e  4605              MOV      r5,r0
000940  460e              MOV      r6,r1
000942  4617              MOV      r7,r2
;;;788      DRIVER_CONTEXT_TEMPLATE * pContext;
;;;789      LCD_X_SETSIZE_INFO Data = {0};
000944  2000              MOVS     r0,#0
000946  9000              STR      r0,[sp,#0]
000948  9001              STR      r0,[sp,#4]
;;;790    
;;;791      _InitOnce(pDevice);
00094a  4628              MOV      r0,r5
00094c  f7fffffe          BL       _InitOnce
;;;792      if (pDevice->u.pContext) {
000950  68a8              LDR      r0,[r5,#8]
000952  b178              CBZ      r0,|L1.2420|
;;;793        pContext = (DRIVER_CONTEXT_TEMPLATE *)pDevice->u.pContext;
000954  68ac              LDR      r4,[r5,#8]
;;;794        pContext->vxSizePhys = (pContext->vxSizePhys == 0) ? xSize : pContext->vxSizePhys;
000956  6960              LDR      r0,[r4,#0x14]
000958  b908              CBNZ     r0,|L1.2398|
00095a  4630              MOV      r0,r6
00095c  e000              B        |L1.2400|
                  |L1.2398|
00095e  6960              LDR      r0,[r4,#0x14]
                  |L1.2400|
000960  6160              STR      r0,[r4,#0x14]
;;;795        pContext->xSize = xSize;
000962  6066              STR      r6,[r4,#4]
;;;796        pContext->ySize = ySize;
000964  60a7              STR      r7,[r4,#8]
;;;797        Data.xSize = xSize;
000966  9600              STR      r6,[sp,#0]
;;;798        Data.ySize = ySize;
000968  9701              STR      r7,[sp,#4]
;;;799        LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_SETSIZE, (void *)&Data);
00096a  466a              MOV      r2,sp
00096c  2107              MOVS     r1,#7
00096e  69a8              LDR      r0,[r5,#0x18]
000970  f7fffffe          BL       LCD_X_DisplayDriver
                  |L1.2420|
;;;800      }
;;;801    }
000974  e8bd81fc          POP      {r2-r8,pc}
;;;802    /*********************************************************************
                          ENDP

                  _Init PROC
;;;805    */
;;;806    static int  _Init(GUI_DEVICE * pDevice) {
000978  b570              PUSH     {r4-r6,lr}
00097a  4604              MOV      r4,r0
;;;807      int r;
;;;808    
;;;809      r = _InitOnce(pDevice);
00097c  4620              MOV      r0,r4
00097e  f7fffffe          BL       _InitOnce
000982  4605              MOV      r5,r0
;;;810      r |= LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_INITCONTROLLER, NULL);
000984  2200              MOVS     r2,#0
000986  2101              MOVS     r1,#1
000988  69a0              LDR      r0,[r4,#0x18]
00098a  f7fffffe          BL       LCD_X_DisplayDriver
00098e  4305              ORRS     r5,r5,r0
;;;811      return r;
000990  4628              MOV      r0,r5
;;;812    }
000992  bd70              POP      {r4-r6,pc}
;;;813    
                          ENDP

                  _On PROC
;;;817    */
;;;818    static void _On (GUI_DEVICE * pDevice) {
000994  b510              PUSH     {r4,lr}
000996  4604              MOV      r4,r0
;;;819      LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_ON, NULL);
000998  2200              MOVS     r2,#0
00099a  2105              MOVS     r1,#5
00099c  69a0              LDR      r0,[r4,#0x18]
00099e  f7fffffe          BL       LCD_X_DisplayDriver
;;;820    }
0009a2  bd10              POP      {r4,pc}
;;;821    
                          ENDP

                  _Off PROC
;;;825    */
;;;826    static void _Off (GUI_DEVICE * pDevice) {
0009a4  b510              PUSH     {r4,lr}
0009a6  4604              MOV      r4,r0
;;;827      LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_OFF, NULL);
0009a8  2200              MOVS     r2,#0
0009aa  2106              MOVS     r1,#6
0009ac  69a0              LDR      r0,[r4,#0x18]
0009ae  f7fffffe          BL       LCD_X_DisplayDriver
;;;828    }
0009b2  bd10              POP      {r4,pc}
;;;829    
                          ENDP

                  _SetLUTEntry PROC
;;;833    */
;;;834    static void _SetLUTEntry(GUI_DEVICE * pDevice, U8 Pos, LCD_COLOR Color) {
0009b4  b57c              PUSH     {r2-r6,lr}
0009b6  4604              MOV      r4,r0
0009b8  460d              MOV      r5,r1
0009ba  4616              MOV      r6,r2
;;;835      LCD_X_SETLUTENTRY_INFO Data = {0};
0009bc  2000              MOVS     r0,#0
0009be  9000              STR      r0,[sp,#0]
0009c0  9001              STR      r0,[sp,#4]
;;;836    
;;;837      Data.Pos   = Pos;
0009c2  f88d5004          STRB     r5,[sp,#4]
;;;838      Data.Color = Color;
0009c6  9600              STR      r6,[sp,#0]
;;;839      LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_SETLUTENTRY, (void *)&Data);
0009c8  466a              MOV      r2,sp
0009ca  2104              MOVS     r1,#4
0009cc  69a0              LDR      r0,[r4,#0x18]
0009ce  f7fffffe          BL       LCD_X_DisplayDriver
;;;840    }
0009d2  bd7c              POP      {r2-r6,pc}
;;;841    
                          ENDP

                  _GetDevFunc PROC
;;;845    */
;;;846    static void (* _GetDevFunc(GUI_DEVICE ** ppDevice, int Index))(void) {
0009d4  4602              MOV      r2,r0
;;;847      GUI_USE_PARA(ppDevice);
;;;848      switch (Index) {
0009d6  f1a10009          SUB      r0,r1,#9
0009da  2808              CMP      r0,#8
0009dc  d21a              BCS      |L1.2580|
0009de  e8dff000          TBB      [pc,r0]
0009e2  040d              DCB      0x04,0x0d
0009e4  0f111913          DCB      0x0f,0x11,0x19,0x13
0009e8  1517              DCB      0x15,0x17
;;;849      case LCD_DEVFUNC_SET_VRAM_ADDR:
;;;850        return (void (*)(void))_SetVRAMAddr;
0009ea  4803              LDR      r0,|L1.2552|
                  |L1.2540|
;;;851      case LCD_DEVFUNC_SET_VSIZE:
;;;852        return (void (*)(void))_SetVSize;
;;;853      case LCD_DEVFUNC_SET_SIZE:
;;;854        return (void (*)(void))_SetSize;
;;;855      case LCD_DEVFUNC_INIT:
;;;856        return (void (*)(void))_Init;
;;;857      case LCD_DEVFUNC_ON:
;;;858        return (void (*)(void))_On;
;;;859      case LCD_DEVFUNC_OFF:
;;;860        return (void (*)(void))_Off;
;;;861      case LCD_DEVFUNC_SETLUTENTRY:
;;;862        return (void (*)(void))_SetLUTEntry;
;;;863      }
;;;864      return NULL;
;;;865    }
0009ec  4770              BX       lr
0009ee  0000              DCW      0x0000
                  |L1.2544|
                          DCD      GUI_pContext
                  |L1.2548|
                          DCD      GUI_MEMDEV_DEVICE_16
                  |L1.2552|
                          DCD      _SetVRAMAddr
0009fc  4806              LDR      r0,|L1.2584|
0009fe  e7f5              B        |L1.2540|
000a00  4806              LDR      r0,|L1.2588|
000a02  e7f3              B        |L1.2540|
000a04  4806              LDR      r0,|L1.2592|
000a06  e7f1              B        |L1.2540|
000a08  4806              LDR      r0,|L1.2596|
000a0a  e7ef              B        |L1.2540|
000a0c  4806              LDR      r0,|L1.2600|
000a0e  e7ed              B        |L1.2540|
000a10  4806              LDR      r0,|L1.2604|
000a12  e7eb              B        |L1.2540|
                  |L1.2580|
000a14  2000              MOVS     r0,#0                 ;864
000a16  e7e9              B        |L1.2540|
;;;866    
                          ENDP

                  |L1.2584|
                          DCD      _SetVSize
                  |L1.2588|
                          DCD      _SetSize
                  |L1.2592|
                          DCD      _Init
                  |L1.2596|
                          DCD      _On
                  |L1.2600|
                          DCD      _Off
                  |L1.2604|
                          DCD      _SetLUTEntry

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  GUIDRV_Template_API
                          DCD      0x00000000
                          DCD      _DrawBitmap
                          DCD      _DrawHLine
                          DCD      _DrawVLine
                          DCD      _FillRect
                          DCD      _GetPixelIndex
                          DCD      _SetPixelIndex
                          DCD      _XorPixel
                          DCD      _SetOrg
                          DCD      _GetDevFunc
                          DCD      _GetDevProp
                          DCD      _GetDevData
                          DCD      _GetRect
