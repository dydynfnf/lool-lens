; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\lcdp565_index2color.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\lcdp565_index2color.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -I.\GUI\AntiAlias -I.\GUI\Config -I.\GUI\ConvertColor -I.\GUI\ConvertMono -I.\GUI\Core -I.\GUI\Font -I.\GUI\GUI_X -I.\GUI\JPEG -I.\GUI\LCDDriver -I.\GUI\MemDev -I.\GUI\MultiLayer -I.\GUI\Widget -I.\GUI\WM -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\INC\ST\STM32F10x -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\lcdp565_index2color.crf GUI\Core\LCDP565_Index2Color.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=1

                  LCD_Index2Color_565 PROC
;;;48     */
;;;49     LCD_COLOR LCD_Index2Color_565(int Index) {
000000  b530              PUSH     {r4,r5,lr}
000002  4601              MOV      r1,r0
;;;50       unsigned int r,g,b;
;;;51       /* Seperate the color masks */
;;;52       r = Index                                  & R_MASK;
000004  f001041f          AND      r4,r1,#0x1f
;;;53       g = (Index >> R_BITS)                      & G_MASK;
000008  f3c11245          UBFX     r2,r1,#5,#6
;;;54       b = ((unsigned)Index >> (R_BITS + G_BITS)) & B_MASK;
00000c  f3c123c4          UBFX     r3,r1,#11,#5
;;;55       /* Convert the color masks */
;;;56       r = r * 255 / R_MASK;
000010  ebc42004          RSB      r0,r4,r4,LSL #8
000014  f04f051f          MOV      r5,#0x1f
000018  fbb0f4f5          UDIV     r4,r0,r5
;;;57       g = g * 255 / G_MASK;
00001c  ebc22002          RSB      r0,r2,r2,LSL #8
000020  f04f053f          MOV      r5,#0x3f
000024  fbb0f2f5          UDIV     r2,r0,r5
;;;58       b = b * 255 / B_MASK;
000028  ebc32003          RSB      r0,r3,r3,LSL #8
00002c  f04f051f          MOV      r5,#0x1f
000030  fbb0f3f5          UDIV     r3,r0,r5
;;;59       return r + (g<<8) + (((U32)b)<<16);
000034  eb042002          ADD      r0,r4,r2,LSL #8
000038  eb004003          ADD      r0,r0,r3,LSL #16
;;;60     }
00003c  bd30              POP      {r4,r5,pc}
;;;61     
                          ENDP

