; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\button.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\button.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -I.\GUI\AntiAlias -I.\GUI\Config -I.\GUI\ConvertColor -I.\GUI\ConvertMono -I.\GUI\Core -I.\GUI\Font -I.\GUI\GUI_X -I.\GUI\JPEG -I.\GUI\LCDDriver -I.\GUI\MemDev -I.\GUI\MultiLayer -I.\GUI\Widget -I.\GUI\WM -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\INC\ST\STM32F10x -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\button.crf GUI\Widget\BUTTON.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _Paint PROC
;;;120    */
;;;121    static void _Paint(BUTTON_Obj* pObj, BUTTON_Handle hObj) {
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  b087              SUB      sp,sp,#0x1c
000006  4604              MOV      r4,r0
000008  4688              MOV      r8,r1
;;;122      const char* s = NULL;
00000a  f04f0b00          MOV      r11,#0
;;;123      unsigned int Index;
;;;124      int State, PressedState, ColorIndex;
;;;125      GUI_RECT rClient, rInside;
;;;126      State = pObj->Widget.State;
00000e  f8b49026          LDRH     r9,[r4,#0x26]
;;;127      PressedState = (State & BUTTON_STATE_PRESSED) ? 1 : 0;
000012  f3c92500          UBFX     r5,r9,#8,#1
;;;128      ColorIndex   = (WM__IsEnabled(hObj)) ? PressedState : 2;
000016  4640              MOV      r0,r8
000018  f7fffffe          BL       WM__IsEnabled
00001c  b108              CBZ      r0,|L1.34|
00001e  4628              MOV      r0,r5
000020  e001              B        |L1.38|
                  |L1.34|
000022  f04f0002          MOV      r0,#2
                  |L1.38|
000026  4606              MOV      r6,r0
;;;129      GUI_SetFont(pObj->Props.pFont);
000028  6c60              LDR      r0,[r4,#0x44]
00002a  f7fffffe          BL       GUI_SetFont
;;;130      GUI_DEBUG_LOG("BUTTON: Paint(..)\n");
;;;131      if (pObj->hpText) {
00002e  f8b4004c          LDRH     r0,[r4,#0x4c]
000032  b120              CBZ      r0,|L1.62|
;;;132        s = (const char*) GUI_ALLOC_h2p(pObj->hpText);
000034  f9b4004c          LDRSH    r0,[r4,#0x4c]
000038  f7fffffe          BL       GUI_ALLOC_h2p
00003c  4683              MOV      r11,r0
                  |L1.62|
;;;133      }
;;;134      GUI_GetClientRect(&rClient);
00003e  a805              ADD      r0,sp,#0x14
000040  f7fffffe          BL       GUI_GetClientRect
;;;135      /* Start drawing */
;;;136      rInside = rClient;
000044  e9dd0105          LDRD     r0,r1,[sp,#0x14]
000048  e9cd0103          STRD     r0,r1,[sp,#0xc]
;;;137    /* Draw the 3D effect (if configured) */
;;;138      #if BUTTON_USE_3D
;;;139      {
;;;140        int EffectSize;
;;;141        if ((PressedState) == 0) {
00004c  b92d              CBNZ     r5,|L1.90|
;;;142          pObj->Widget.pEffect->pfDrawUp();  /* _WIDGET_EFFECT_3D_DrawUp(); */
00004e  6a21              LDR      r1,[r4,#0x20]
000050  6808              LDR      r0,[r1,#0]
000052  4780              BLX      r0
;;;143          EffectSize = pObj->Widget.pEffect->EffectSize;
000054  6a20              LDR      r0,[r4,#0x20]
000056  6947              LDR      r7,[r0,#0x14]
000058  e00e              B        |L1.120|
                  |L1.90|
;;;144        } else {
;;;145          LCD_SetColor(0x000000);
00005a  2000              MOVS     r0,#0
00005c  f7fffffe          BL       LCD_SetColor
;;;146          GUI_DrawRect(rClient.y0, rClient.x0, rClient.x1, rClient.y1);
000060  f9bd301a          LDRSH    r3,[sp,#0x1a]
000064  f9bd2018          LDRSH    r2,[sp,#0x18]
000068  f9bd1014          LDRSH    r1,[sp,#0x14]
00006c  f9bd0016          LDRSH    r0,[sp,#0x16]
000070  f7fffffe          BL       GUI_DrawRect
;;;147          EffectSize = 1;
000074  f04f0701          MOV      r7,#1
                  |L1.120|
;;;148        }
;;;149        GUI__ReduceRect(&rInside, &rInside, EffectSize); 
000078  463a              MOV      r2,r7
00007a  a903              ADD      r1,sp,#0xc
00007c  a803              ADD      r0,sp,#0xc
00007e  f7fffffe          BL       GUI__ReduceRect
;;;150      }
;;;151      #endif
;;;152      /* Draw background */
;;;153      LCD_SetBkColor (pObj->Props.aBkColor[ColorIndex]);
000082  f1040128          ADD      r1,r4,#0x28
000086  f8510026          LDR      r0,[r1,r6,LSL #2]
00008a  f7fffffe          BL       LCD_SetBkColor
;;;154      LCD_SetColor   (pObj->Props.aTextColor[ColorIndex]);
00008e  f1040134          ADD      r1,r4,#0x34
000092  f8510026          LDR      r0,[r1,r6,LSL #2]
000096  f7fffffe          BL       LCD_SetColor
;;;155      WM_SetUserClipRect(&rInside);
00009a  a803              ADD      r0,sp,#0xc
00009c  f7fffffe          BL       WM_SetUserClipRect
;;;156      GUI_Clear();
0000a0  f7fffffe          BL       GUI_Clear
;;;157      /* Draw bitmap.
;;;158         If we have only one, we will use it.
;;;159         If we have to we will use the second one (Index 1) for the pressed state
;;;160      */
;;;161      if (ColorIndex < 2) {
0000a4  2e02              CMP      r6,#2
0000a6  da0a              BGE      |L1.190|
;;;162        Index = (pObj->ahDrawObj[BUTTON_BI_PRESSED] && PressedState) ? BUTTON_BI_PRESSED : BUTTON_BI_UNPRESSED;
0000a8  2050              MOVS     r0,#0x50
0000aa  5b00              LDRH     r0,[r0,r4]
0000ac  b118              CBZ      r0,|L1.182|
0000ae  b115              CBZ      r5,|L1.182|
0000b0  f04f0001          MOV      r0,#1
0000b4  e001              B        |L1.186|
                  |L1.182|
0000b6  f04f0000          MOV      r0,#0
                  |L1.186|
0000ba  4682              MOV      r10,r0
0000bc  e008              B        |L1.208|
                  |L1.190|
;;;163      } else {
;;;164        Index = pObj->ahDrawObj[BUTTON_BI_DISABLED] ? BUTTON_BI_DISABLED : BUTTON_BI_UNPRESSED;
0000be  2052              MOVS     r0,#0x52
0000c0  5b00              LDRH     r0,[r0,r4]
0000c2  b110              CBZ      r0,|L1.202|
0000c4  f04f0002          MOV      r0,#2
0000c8  e001              B        |L1.206|
                  |L1.202|
0000ca  f04f0000          MOV      r0,#0
                  |L1.206|
0000ce  4682              MOV      r10,r0
                  |L1.208|
;;;165      }
;;;166      GUI_DRAW__Draw(pObj->ahDrawObj[Index], 0, 0);
0000d0  f104014e          ADD      r1,r4,#0x4e
0000d4  f931001a          LDRSH    r0,[r1,r10,LSL #1]
0000d8  2200              MOVS     r2,#0
0000da  4611              MOV      r1,r2
0000dc  f7fffffe          BL       GUI_DRAW__Draw
;;;167    /* Draw the actual button (background and text) */  
;;;168      {
;;;169        GUI_RECT r;
;;;170        r = rInside;
0000e0  e9dd0103          LDRD     r0,r1,[sp,#0xc]
0000e4  e9cd0101          STRD     r0,r1,[sp,#4]
;;;171        #if BUTTON_USE_3D
;;;172          if (PressedState) {
0000e8  b125              CBZ      r5,|L1.244|
;;;173            GUI_MoveRect(&r, BUTTON_3D_MOVE_X,BUTTON_3D_MOVE_Y);
0000ea  2201              MOVS     r2,#1
0000ec  4611              MOV      r1,r2
0000ee  a801              ADD      r0,sp,#4
0000f0  f7fffffe          BL       GUI_MoveRect
                  |L1.244|
;;;174          }
;;;175        #endif
;;;176        GUI_SetTextMode(GUI_TM_TRANS);
0000f4  2002              MOVS     r0,#2
0000f6  f7fffffe          BL       GUI_SetTextMode
;;;177        GUI_DispStringInRect(s, &r, pObj->Props.Align);
0000fa  f9b42048          LDRSH    r2,[r4,#0x48]
0000fe  a901              ADD      r1,sp,#4
000100  4658              MOV      r0,r11
000102  f7fffffe          BL       GUI_DispStringInRect
;;;178      }
;;;179      /* Draw focus */
;;;180      if (State & BUTTON_STATE_FOCUS) {
000106  f0190f01          TST      r9,#1
00010a  d006              BEQ      |L1.282|
;;;181        LCD_SetColor(pObj->Props.FocusColor);
00010c  6c20              LDR      r0,[r4,#0x40]
00010e  f7fffffe          BL       LCD_SetColor
;;;182        GUI_DrawFocusRect(&rClient, 2);
000112  2102              MOVS     r1,#2
000114  a805              ADD      r0,sp,#0x14
000116  f7fffffe          BL       GUI_DrawFocusRect
                  |L1.282|
;;;183      }
;;;184      WM_SetUserClipRect(NULL);
00011a  2000              MOVS     r0,#0
00011c  f7fffffe          BL       WM_SetUserClipRect
;;;185    }
000120  b007              ADD      sp,sp,#0x1c
000122  e8bd8ff0          POP      {r4-r11,pc}
;;;186    
                          ENDP

                  _Delete PROC
;;;192    */
;;;193    static void _Delete(BUTTON_Obj* pObj) {
000126  b510              PUSH     {r4,lr}
000128  4604              MOV      r4,r0
;;;194      GUI_ALLOC_FreePtr(&pObj->hpText);
00012a  f104004c          ADD      r0,r4,#0x4c
00012e  f7fffffe          BL       GUI_ALLOC_FreePtr
;;;195      GUI_ALLOC_FreePtrArray(pObj->ahDrawObj, GUI_COUNTOF(pObj->ahDrawObj));
000132  2103              MOVS     r1,#3
000134  f104004e          ADD      r0,r4,#0x4e
000138  f7fffffe          BL       GUI_ALLOC_FreePtrArray
;;;196    }
00013c  bd10              POP      {r4,pc}
;;;197    
                          ENDP

                  _OnButtonPressed PROC
;;;201    */
;;;202    static void _OnButtonPressed(BUTTON_Handle hObj, BUTTON_Obj* pObj) {
00013e  b570              PUSH     {r4-r6,lr}
000140  4605              MOV      r5,r0
000142  460c              MOV      r4,r1
;;;203      WIDGET_OrState(hObj, BUTTON_STATE_PRESSED);
000144  f44f7180          MOV      r1,#0x100
000148  4628              MOV      r0,r5
00014a  f7fffffe          BL       WIDGET_OrState
;;;204      if (pObj->Widget.Win.Status & WM_SF_ISVIS) {
00014e  8ba0              LDRH     r0,[r4,#0x1c]
000150  f0100f02          TST      r0,#2
000154  d003              BEQ      |L1.350|
;;;205        WM_NotifyParent(hObj, WM_NOTIFICATION_CLICKED);
000156  2101              MOVS     r1,#1
000158  4628              MOV      r0,r5
00015a  f7fffffe          BL       WM_NotifyParent
                  |L1.350|
;;;206      }
;;;207    }
00015e  bd70              POP      {r4-r6,pc}
;;;208    
                          ENDP

                  _OnButtonReleased PROC
;;;212    */
;;;213    static void _OnButtonReleased(BUTTON_Handle hObj, BUTTON_Obj* pObj, int Notification) {
000160  b570              PUSH     {r4-r6,lr}
000162  4606              MOV      r6,r0
000164  460c              MOV      r4,r1
000166  4615              MOV      r5,r2
;;;214      WIDGET_AndState(hObj, BUTTON_STATE_PRESSED);
000168  f44f7180          MOV      r1,#0x100
00016c  4630              MOV      r0,r6
00016e  f7fffffe          BL       WIDGET_AndState
;;;215      if (Notification == WM_NOTIFICATION_RELEASED) {
000172  2d02              CMP      r5,#2
000174  d103              BNE      |L1.382|
;;;216        GUI_DEBUG_LOG("BUTTON: Hit\n");
;;;217        GUI_StoreKey(pObj->Widget.Id);
000176  f9b40024          LDRSH    r0,[r4,#0x24]
00017a  f7fffffe          BL       GUI_StoreKey
                  |L1.382|
;;;218      }
;;;219      if (pObj->Widget.Win.Status & WM_SF_ISVIS) {
00017e  8ba0              LDRH     r0,[r4,#0x1c]
000180  f0100f02          TST      r0,#2
000184  d003              BEQ      |L1.398|
;;;220        WM_NotifyParent(hObj, Notification);
000186  4629              MOV      r1,r5
000188  4630              MOV      r0,r6
00018a  f7fffffe          BL       WM_NotifyParent
                  |L1.398|
;;;221      }
;;;222    }
00018e  bd70              POP      {r4-r6,pc}
;;;223    
                          ENDP

                  _OnTouch PROC
;;;227    */
;;;228    static void _OnTouch(BUTTON_Handle hObj, BUTTON_Obj* pObj, WM_MESSAGE*pMsg) {
000190  e92d41f0          PUSH     {r4-r8,lr}
000194  4606              MOV      r6,r0
000196  460c              MOV      r4,r1
000198  4615              MOV      r5,r2
;;;229      const GUI_PID_STATE* pState = (const GUI_PID_STATE*)pMsg->Data.p;
00019a  68af              LDR      r7,[r5,#8]
;;;230    #if BUTTON_REACT_ON_LEVEL
;;;231      if (!pMsg->Data.p) {  /* Mouse moved out */
;;;232        _OnButtonReleased(hObj, pObj, WM_NOTIFICATION_MOVED_OUT);
;;;233      } else if ((!pState->Pressed) && (pObj->Widget.State & BUTTON_STATE_PRESSED)) {
;;;234        _OnButtonReleased(hObj, pObj, WM_NOTIFICATION_MOVED_OUT);
;;;235      }
;;;236    #else
;;;237      if (pMsg->Data.p) {  /* Something happened in our area (pressed or released) */
00019c  68a8              LDR      r0,[r5,#8]
00019e  b1a0              CBZ      r0,|L1.458|
;;;238        if (pState->Pressed) {
0001a0  7a38              LDRB     r0,[r7,#8]
0001a2  b140              CBZ      r0,|L1.438|
;;;239          if ((pObj->Widget.State & BUTTON_STATE_PRESSED) == 0){   
0001a4  8ce0              LDRH     r0,[r4,#0x26]
0001a6  f4107f80          TST      r0,#0x100
0001aa  d113              BNE      |L1.468|
;;;240            _OnButtonPressed(hObj, pObj);
0001ac  4621              MOV      r1,r4
0001ae  4630              MOV      r0,r6
0001b0  f7fffffe          BL       _OnButtonPressed
0001b4  e00e              B        |L1.468|
                  |L1.438|
;;;241          }
;;;242        } else {
;;;243          /* React only if button was pressed before ... avoid problems with moving / hiding windows above (such as dropdown) */
;;;244          if (pObj->Widget.State & BUTTON_STATE_PRESSED) {   
0001b6  8ce0              LDRH     r0,[r4,#0x26]
0001b8  f4107f80          TST      r0,#0x100
0001bc  d00a              BEQ      |L1.468|
;;;245            _OnButtonReleased(hObj, pObj, WM_NOTIFICATION_RELEASED);
0001be  2202              MOVS     r2,#2
0001c0  4621              MOV      r1,r4
0001c2  4630              MOV      r0,r6
0001c4  f7fffffe          BL       _OnButtonReleased
0001c8  e004              B        |L1.468|
                  |L1.458|
;;;246          }
;;;247        }
;;;248      } else {
;;;249        _OnButtonReleased(hObj, pObj, WM_NOTIFICATION_MOVED_OUT);
0001ca  2203              MOVS     r2,#3
0001cc  4621              MOV      r1,r4
0001ce  4630              MOV      r0,r6
0001d0  f7fffffe          BL       _OnButtonReleased
                  |L1.468|
;;;250      }
;;;251    #endif
;;;252    }
0001d4  e8bd81f0          POP      {r4-r8,pc}
;;;253    
                          ENDP

                  BUTTON_Callback PROC
;;;305    */
;;;306    void BUTTON_Callback(WM_MESSAGE *pMsg) {
0001d8  e92d41f0          PUSH     {r4-r8,lr}
0001dc  4604              MOV      r4,r0
;;;307      int PressedCnt, Key;
;;;308      BUTTON_Handle hObj = pMsg->hWin;
0001de  f9b47004          LDRSH    r7,[r4,#4]
;;;309      BUTTON_Obj * pObj = (BUTTON_Obj *)GUI_ALLOC_h2p(hObj); /* Don't use use WIDGET_H2P because WIDGET_INIT_ID() has not be called at this point */
0001e2  4638              MOV      r0,r7
0001e4  f7fffffe          BL       GUI_ALLOC_h2p
0001e8  4680              MOV      r8,r0
;;;310      /* Let widget handle the standard messages */
;;;311      if (WIDGET_HandleActive(hObj, pMsg) == 0) {
0001ea  4621              MOV      r1,r4
0001ec  4638              MOV      r0,r7
0001ee  f7fffffe          BL       WIDGET_HandleActive
0001f2  b908              CBNZ     r0,|L1.504|
                  |L1.500|
;;;312        return;
;;;313      }
;;;314      switch (pMsg->MsgId) {
;;;315    #if BUTTON_REACT_ON_LEVEL
;;;316      case WM_PID_STATE_CHANGED:
;;;317        _OnPidStateChange(hObj, pObj, pMsg);
;;;318        return;      /* Message handled. Do not call WM_DefaultProc, because the window may have been destroyed */
;;;319    #endif
;;;320      case WM_TOUCH:
;;;321        _OnTouch(hObj, pObj, pMsg);
;;;322        return;      /* Message handled. Do not call WM_DefaultProc, because the window may have been destroyed */
;;;323      case WM_PAINT:
;;;324        GUI_DEBUG_LOG("BUTTON: _BUTTON_Callback(WM_PAINT)\n");
;;;325        _Paint(pObj, hObj);
;;;326        return;
;;;327      case WM_DELETE:
;;;328        GUI_DEBUG_LOG("BUTTON: _BUTTON_Callback(WM_DELETE)\n");
;;;329        _Delete(pObj);
;;;330        break;       /* No return here ... WM_DefaultProc needs to be called */
;;;331      case WM_KEY:
;;;332        PressedCnt = ((WM_KEY_INFO*)(pMsg->Data.p))->PressedCnt;
;;;333        Key        = ((WM_KEY_INFO*)(pMsg->Data.p))->Key;
;;;334        switch (Key) {
;;;335        case GUI_KEY_ENTER:
;;;336          if (PressedCnt > 0) {
;;;337            _OnButtonPressed(hObj, pObj);
;;;338            _OnButtonReleased(hObj, pObj, WM_NOTIFICATION_RELEASED);
;;;339            return;
;;;340          }
;;;341          break;
;;;342        case GUI_KEY_SPACE:
;;;343          if (PressedCnt > 0) {
;;;344            _OnButtonPressed(hObj, pObj);
;;;345          } else {
;;;346            _OnButtonReleased(hObj, pObj, WM_NOTIFICATION_RELEASED);
;;;347          }
;;;348          return;
;;;349        }
;;;350      }
;;;351      WM_DefaultProc(pMsg);
;;;352    }
0001f4  e8bd81f0          POP      {r4-r8,pc}
                  |L1.504|
0001f8  6820              LDR      r0,[r4,#0]            ;314
0001fa  280b              CMP      r0,#0xb               ;314
0001fc  d011              BEQ      |L1.546|
0001fe  280c              CMP      r0,#0xc               ;314
000200  d004              BEQ      |L1.524|
000202  280e              CMP      r0,#0xe               ;314
000204  d011              BEQ      |L1.554|
000206  280f              CMP      r0,#0xf               ;314
000208  d134              BNE      |L1.628|
00020a  e005              B        |L1.536|
                  |L1.524|
00020c  4622              MOV      r2,r4                 ;321
00020e  4641              MOV      r1,r8                 ;321
000210  4638              MOV      r0,r7                 ;321
000212  f7fffffe          BL       _OnTouch
000216  e7ed              B        |L1.500|
                  |L1.536|
000218  4639              MOV      r1,r7                 ;325
00021a  4640              MOV      r0,r8                 ;325
00021c  f7fffffe          BL       _Paint
000220  e7e8              B        |L1.500|
                  |L1.546|
000222  4640              MOV      r0,r8                 ;329
000224  f7fffffe          BL       _Delete
000228  e024              B        |L1.628|
                  |L1.554|
00022a  68a0              LDR      r0,[r4,#8]            ;332
00022c  6845              LDR      r5,[r0,#4]            ;332
00022e  68a0              LDR      r0,[r4,#8]            ;333
000230  6806              LDR      r6,[r0,#0]            ;333
000232  2e0d              CMP      r6,#0xd               ;334
000234  d002              BEQ      |L1.572|
000236  2e20              CMP      r6,#0x20              ;334
000238  d11a              BNE      |L1.624|
00023a  e00c              B        |L1.598|
                  |L1.572|
00023c  2d00              CMP      r5,#0                 ;336
00023e  dd09              BLE      |L1.596|
000240  4641              MOV      r1,r8                 ;337
000242  4638              MOV      r0,r7                 ;337
000244  f7fffffe          BL       _OnButtonPressed
000248  2202              MOVS     r2,#2                 ;338
00024a  4641              MOV      r1,r8                 ;338
00024c  4638              MOV      r0,r7                 ;338
00024e  f7fffffe          BL       _OnButtonReleased
000252  e7cf              B        |L1.500|
                  |L1.596|
000254  e00c              B        |L1.624|
                  |L1.598|
000256  2d00              CMP      r5,#0                 ;343
000258  dd04              BLE      |L1.612|
00025a  4641              MOV      r1,r8                 ;344
00025c  4638              MOV      r0,r7                 ;344
00025e  f7fffffe          BL       _OnButtonPressed
000262  e004              B        |L1.622|
                  |L1.612|
000264  2202              MOVS     r2,#2                 ;346
000266  4641              MOV      r1,r8                 ;346
000268  4638              MOV      r0,r7                 ;346
00026a  f7fffffe          BL       _OnButtonReleased
                  |L1.622|
00026e  e7c1              B        |L1.500|
                  |L1.624|
000270  bf00              NOP                            ;341
000272  bf00              NOP                            ;314
                  |L1.628|
000274  bf00              NOP                            ;330
000276  4620              MOV      r0,r4                 ;351
000278  f7fffffe          BL       WM_DefaultProc
00027c  bf00              NOP      
00027e  e7b9              B        |L1.500|
;;;353    
                          ENDP

                  BUTTON_CreateEx PROC
;;;363    */
;;;364    BUTTON_Handle BUTTON_CreateEx(int x0, int y0, int xsize, int ysize, WM_HWIN hParent, int WinFlags, int ExFlags, int Id) {
000280  e92d4fff          PUSH     {r0-r11,lr}
000284  b085              SUB      sp,sp,#0x14
000286  4606              MOV      r6,r0
000288  460f              MOV      r7,r1
00028a  4690              MOV      r8,r2
00028c  e9ddab13          LDRD     r10,r11,[sp,#0x4c]
000290  f8dd9048          LDR      r9,[sp,#0x48]
;;;365      BUTTON_Handle hObj;
;;;366      GUI_USE_PARA(ExFlags);
000294  bf00              NOP      
;;;367      /* Create the window */
;;;368      WM_LOCK();
;;;369      hObj = WM_CreateWindowAsChild(x0, y0, xsize, ysize, hParent, WinFlags, BUTTON_Callback,
000296  f04f0134          MOV      r1,#0x34
00029a  f2af02c3          ADR      r2,BUTTON_Callback + 1
00029e  fa1ff08a          UXTH     r0,r10
0002a2  e9cd9000          STRD     r9,r0,[sp,#0]
0002a6  e9cd2102          STRD     r2,r1,[sp,#8]
0002aa  4642              MOV      r2,r8
0002ac  4639              MOV      r1,r7
0002ae  4630              MOV      r0,r6
0002b0  9b08              LDR      r3,[sp,#0x20]
0002b2  f7fffffe          BL       WM_CreateWindowAsChild
0002b6  4604              MOV      r4,r0
;;;370                                    sizeof(BUTTON_Obj) - sizeof(WM_Obj));
;;;371      if (hObj) {
0002b8  b184              CBZ      r4,|L1.732|
;;;372        BUTTON_Obj * pObj = (BUTTON_Obj *)GUI_ALLOC_h2p(hObj); /* Don't use use WIDGET_H2P because WIDGET_INIT_ID() has not be called at this point */
0002ba  4620              MOV      r0,r4
0002bc  f7fffffe          BL       GUI_ALLOC_h2p
0002c0  4605              MOV      r5,r0
;;;373        /* init widget specific variables */
;;;374        WIDGET__Init(&pObj->Widget, Id, WIDGET_STATE_FOCUSSABLE);
0002c2  f04f0210          MOV      r2,#0x10
0002c6  4628              MOV      r0,r5
0002c8  9915              LDR      r1,[sp,#0x54]
0002ca  f7fffffe          BL       WIDGET__Init
;;;375        /* init member variables */
;;;376        BUTTON_INIT_ID(pObj);
;;;377        pObj->Props = BUTTON__DefaultProps;
0002ce  2224              MOVS     r2,#0x24
0002d0  493e              LDR      r1,|L1.972|
0002d2  f1050028          ADD      r0,r5,#0x28
0002d6  f7fffffe          BL       __aeabi_memcpy4
;;;378      } else {
0002da  bf00              NOP      
                  |L1.732|
;;;379        GUI_DEBUG_ERROROUT_IF(hObj==0, "BUTTON_Create failed")
;;;380      }
;;;381      WM_UNLOCK();
;;;382      return hObj;
0002dc  4620              MOV      r0,r4
;;;383    }
0002de  b009              ADD      sp,sp,#0x24
0002e0  e8bd8ff0          POP      {r4-r11,pc}
;;;384    
                          ENDP

                  BUTTON_SetText PROC
;;;395    */
;;;396    void BUTTON_SetText(BUTTON_Handle hObj, const char* s) {
0002e4  b570              PUSH     {r4-r6,lr}
0002e6  4604              MOV      r4,r0
0002e8  460d              MOV      r5,r1
;;;397      if (hObj) {
0002ea  b16c              CBZ      r4,|L1.776|
;;;398        BUTTON_Obj* pObj;
;;;399        WM_LOCK();
;;;400        pObj = BUTTON_H2P(hObj);
0002ec  4620              MOV      r0,r4
0002ee  f7fffffe          BL       GUI_ALLOC_h2p
0002f2  4606              MOV      r6,r0
;;;401        if (GUI__SetText(&pObj->hpText, s)) {
0002f4  4629              MOV      r1,r5
0002f6  f106004c          ADD      r0,r6,#0x4c
0002fa  f7fffffe          BL       GUI__SetText
0002fe  b110              CBZ      r0,|L1.774|
;;;402          BUTTON_Invalidate(hObj);
000300  4620              MOV      r0,r4
000302  f7fffffe          BL       WM_InvalidateWindow
                  |L1.774|
;;;403        }
;;;404        WM_UNLOCK();
;;;405      }
000306  bf00              NOP      
                  |L1.776|
;;;406    }
000308  bd70              POP      {r4-r6,pc}
;;;407    
                          ENDP

                  BUTTON_SetFont PROC
;;;411    */
;;;412    void BUTTON_SetFont(BUTTON_Handle hObj, const GUI_FONT GUI_UNI_PTR * pfont) {
00030a  b570              PUSH     {r4-r6,lr}
00030c  4604              MOV      r4,r0
00030e  460d              MOV      r5,r1
;;;413      if (hObj) {
000310  b144              CBZ      r4,|L1.804|
;;;414        BUTTON_Obj* pObj;
;;;415        WM_LOCK();
;;;416        pObj = BUTTON_H2P(hObj);
000312  4620              MOV      r0,r4
000314  f7fffffe          BL       GUI_ALLOC_h2p
000318  4606              MOV      r6,r0
;;;417        pObj->Props.pFont = pfont;
00031a  6475              STR      r5,[r6,#0x44]
;;;418        BUTTON_Invalidate(hObj);
00031c  4620              MOV      r0,r4
00031e  f7fffffe          BL       WM_InvalidateWindow
;;;419        WM_UNLOCK();
;;;420      }
000322  bf00              NOP      
                  |L1.804|
;;;421    }
000324  bd70              POP      {r4-r6,pc}
;;;422    
                          ENDP

                  BUTTON_SetBkColor PROC
;;;426    */
;;;427    void BUTTON_SetBkColor(BUTTON_Handle hObj,unsigned int Index, GUI_COLOR Color) {
000326  e92d41f0          PUSH     {r4-r8,lr}
00032a  4605              MOV      r5,r0
00032c  460c              MOV      r4,r1
00032e  4616              MOV      r6,r2
;;;428      if (hObj && (Index <= 2)) {
000330  b16d              CBZ      r5,|L1.846|
000332  2c02              CMP      r4,#2
000334  d80b              BHI      |L1.846|
;;;429        BUTTON_Obj* pObj;
;;;430        WM_LOCK();
;;;431        pObj = BUTTON_H2P(hObj);
000336  4628              MOV      r0,r5
000338  f7fffffe          BL       GUI_ALLOC_h2p
00033c  4607              MOV      r7,r0
;;;432        pObj->Props.aBkColor[Index] = Color;
00033e  f1070028          ADD      r0,r7,#0x28
000342  f8406024          STR      r6,[r0,r4,LSL #2]
;;;433        BUTTON_Invalidate(hObj);
000346  4628              MOV      r0,r5
000348  f7fffffe          BL       WM_InvalidateWindow
;;;434        WM_UNLOCK();
;;;435      }
00034c  bf00              NOP      
                  |L1.846|
;;;436    }
00034e  e8bd81f0          POP      {r4-r8,pc}
;;;437    
                          ENDP

                  BUTTON_SetTextColor PROC
;;;441    */
;;;442    void BUTTON_SetTextColor(BUTTON_Handle hObj,unsigned int Index, GUI_COLOR Color) {
000352  e92d41f0          PUSH     {r4-r8,lr}
000356  4605              MOV      r5,r0
000358  460c              MOV      r4,r1
00035a  4616              MOV      r6,r2
;;;443      if (hObj && (Index <= 2)) {
00035c  b16d              CBZ      r5,|L1.890|
00035e  2c02              CMP      r4,#2
000360  d80b              BHI      |L1.890|
;;;444        BUTTON_Obj* pObj;
;;;445        WM_LOCK();
;;;446        pObj = BUTTON_H2P(hObj);
000362  4628              MOV      r0,r5
000364  f7fffffe          BL       GUI_ALLOC_h2p
000368  4607              MOV      r7,r0
;;;447        pObj->Props.aTextColor[Index] = Color;
00036a  f1070034          ADD      r0,r7,#0x34
00036e  f8406024          STR      r6,[r0,r4,LSL #2]
;;;448        BUTTON_Invalidate(hObj);
000372  4628              MOV      r0,r5
000374  f7fffffe          BL       WM_InvalidateWindow
;;;449        WM_UNLOCK();
;;;450      }
000378  bf00              NOP      
                  |L1.890|
;;;451    }
00037a  e8bd81f0          POP      {r4-r8,pc}
;;;452    
                          ENDP

                  BUTTON_SetState PROC
;;;456    */
;;;457    void BUTTON_SetState(BUTTON_Handle hObj, int State) {
00037e  b570              PUSH     {r4-r6,lr}
000380  4604              MOV      r4,r0
000382  460d              MOV      r5,r1
;;;458      WIDGET_SetState(hObj, State);
000384  4629              MOV      r1,r5
000386  4620              MOV      r0,r4
000388  f7fffffe          BL       WIDGET_SetState
;;;459    }
00038c  bd70              POP      {r4-r6,pc}
;;;460    
                          ENDP

                  BUTTON_SetPressed PROC
;;;464    */
;;;465    void BUTTON_SetPressed(BUTTON_Handle hObj, int State) {
00038e  b570              PUSH     {r4-r6,lr}
000390  4605              MOV      r5,r0
000392  460c              MOV      r4,r1
;;;466      if (State) {
000394  b12c              CBZ      r4,|L1.930|
;;;467        WIDGET_OrState(hObj, BUTTON_STATE_PRESSED);
000396  f44f7180          MOV      r1,#0x100
00039a  4628              MOV      r0,r5
00039c  f7fffffe          BL       WIDGET_OrState
0003a0  e004              B        |L1.940|
                  |L1.930|
;;;468      } else {
;;;469        WIDGET_AndState(hObj, BUTTON_STATE_PRESSED);
0003a2  f44f7180          MOV      r1,#0x100
0003a6  4628              MOV      r0,r5
0003a8  f7fffffe          BL       WIDGET_AndState
                  |L1.940|
;;;470      }
;;;471    }
0003ac  bd70              POP      {r4-r6,pc}
;;;472    
                          ENDP

                  BUTTON_SetFocussable PROC
;;;476    */
;;;477    void BUTTON_SetFocussable(BUTTON_Handle hObj, int State) {
0003ae  b570              PUSH     {r4-r6,lr}
0003b0  4605              MOV      r5,r0
0003b2  460c              MOV      r4,r1
;;;478      if (State) {
0003b4  b124              CBZ      r4,|L1.960|
;;;479        WIDGET_OrState(hObj, WIDGET_STATE_FOCUSSABLE);
0003b6  2110              MOVS     r1,#0x10
0003b8  4628              MOV      r0,r5
0003ba  f7fffffe          BL       WIDGET_OrState
0003be  e003              B        |L1.968|
                  |L1.960|
;;;480      } else {
;;;481        WIDGET_AndState(hObj, WIDGET_STATE_FOCUSSABLE);
0003c0  2110              MOVS     r1,#0x10
0003c2  4628              MOV      r0,r5
0003c4  f7fffffe          BL       WIDGET_AndState
                  |L1.968|
;;;482      }
;;;483    }
0003c8  bd70              POP      {r4-r6,pc}
;;;484    
                          ENDP

0003ca  0000              DCW      0x0000
                  |L1.972|
                          DCD      BUTTON__DefaultProps

                          AREA ||.data||, DATA, ALIGN=2

                  BUTTON__DefaultProps
                          DCD      0x00aaaaaa
                          DCD      0x00ffffff
                          DCD      0x00d3d3d3
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00404040
                          DCD      0x00000000
                          DCD      GUI_Font13_1
000020  000e              DCW      0x000e
000022  0000              DCB      0x00,0x00
