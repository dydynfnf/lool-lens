; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\gui_uc.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\gui_uc.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -I.\GUI\AntiAlias -I.\GUI\Config -I.\GUI\ConvertColor -I.\GUI\ConvertMono -I.\GUI\Core -I.\GUI\Font -I.\GUI\GUI_X -I.\GUI\JPEG -I.\GUI\LCDDriver -I.\GUI\MemDev -I.\GUI\MultiLayer -I.\GUI\Widget -I.\GUI\WM -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\INC\ST\STM32F10x -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\gui_uc.crf GUI\Core\GUI_UC.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=1

                  GUI_UC_GetCharSize PROC
;;;31     */
;;;32     int GUI_UC_GetCharSize(const char GUI_UNI_PTR * s) {
000000  4601              MOV      r1,r0
;;;33       #if GUI_SUPPORT_UNICODE
;;;34         int r;
;;;35         GUI_LOCK();
;;;36         r =  GUI_Context.pUC_API->pfGetCharSize(s);
;;;37         GUI_UNLOCK();
;;;38         return r;
;;;39       #else
;;;40         return 1;
000002  f04f0001          MOV      r0,#1
;;;41       #endif
;;;42     }
000006  4770              BX       lr
;;;43     
                          ENDP

                  GUI_UC_GetCharCode PROC
;;;47     */
;;;48     U16 GUI_UC_GetCharCode(const char GUI_UNI_PTR * s) {
000008  4601              MOV      r1,r0
;;;49       #if GUI_SUPPORT_UNICODE
;;;50         U16 r;
;;;51         GUI_LOCK();
;;;52         r =  GUI_Context.pUC_API->pfGetCharCode(s);
;;;53         GUI_UNLOCK();
;;;54         return r;
;;;55       #else
;;;56         return *(const U8 GUI_UNI_PTR *)s;
00000a  7808              LDRB     r0,[r1,#0]
;;;57       #endif
;;;58     }
00000c  4770              BX       lr
;;;59     
                          ENDP

                  GUI_UC_Encode PROC
;;;63     */
;;;64     int GUI_UC_Encode(char* s, U16 Char) {
00000e  4602              MOV      r2,r0
;;;65       #if GUI_COMPILER_SUPPORTS_FP
;;;66         #if GUI_SUPPORT_UNICODE
;;;67           int r;
;;;68           GUI_LOCK();
;;;69           r = GUI_Context.pUC_API->pfEncode(s, Char);
;;;70           GUI_UNLOCK();
;;;71           return r;
;;;72         #else
;;;73           *s = (U8)(Char);
000010  7011              STRB     r1,[r2,#0]
;;;74           return Char;
000012  4608              MOV      r0,r1
;;;75         #endif
;;;76       #else
;;;77         GUI_USE_PARA(s);
;;;78         GUI_USE_PARA(Char);
;;;79         return 0;
;;;80       #endif
;;;81     }
000014  4770              BX       lr
;;;82     
                          ENDP

                  GUI_UC__CalcSizeOfChar PROC
;;;86     */
;;;87     int GUI_UC__CalcSizeOfChar(U16 Char) {
000016  4601              MOV      r1,r0
;;;88       #if GUI_SUPPORT_UNICODE
;;;89         return GUI_Context.pUC_API->pfCalcSizeOfChar(Char);
;;;90       #else
;;;91         return 1;
000018  f04f0001          MOV      r0,#1
;;;92       #endif
;;;93     }
00001c  4770              BX       lr
;;;94     
                          ENDP

                  GUI_UC__GetCharCodeInc PROC
;;;98     */
;;;99     U16 GUI_UC__GetCharCodeInc(const char GUI_UNI_PTR ** ps) {
00001e  4601              MOV      r1,r0
;;;100      const char GUI_UNI_PTR * s;
;;;101      U16 r;
;;;102      s   = *ps;
000020  680a              LDR      r2,[r1,#0]
;;;103      #if GUI_SUPPORT_UNICODE
;;;104        r   = GUI_UC__GetCharCode(s);
;;;105        s  += GUI_UC__GetCharSize(s);
;;;106      #else
;;;107        r   = *s;
000022  7810              LDRB     r0,[r2,#0]
;;;108        s  += 1;
000024  f1020201          ADD      r2,r2,#1
;;;109      #endif
;;;110      *ps = s;
000028  600a              STR      r2,[r1,#0]
;;;111      return r;
;;;112    }
00002a  4770              BX       lr
;;;113    
                          ENDP

                  GUI_UC__NumChars2NumBytes PROC
;;;117    */
;;;118    int GUI_UC__NumChars2NumBytes(const char GUI_UNI_PTR * s, int NumChars) {
00002c  b530              PUSH     {r4,r5,lr}
00002e  4602              MOV      r2,r0
000030  460b              MOV      r3,r1
;;;119      int CharSize, NumBytes = 0;
000032  f04f0000          MOV      r0,#0
;;;120      while (NumChars--) {
000036  e003              B        |L1.64|
                  |L1.56|
;;;121        #if GUI_SUPPORT_UNICODE
;;;122          CharSize = GUI_UC__GetCharSize(s);
;;;123        #else
;;;124          CharSize = 1;
000038  f04f0101          MOV      r1,#1
;;;125        #endif
;;;126        s += CharSize;    
00003c  440a              ADD      r2,r2,r1
;;;127        NumBytes += CharSize;
00003e  4408              ADD      r0,r0,r1
                  |L1.64|
000040  001c              MOVS     r4,r3                 ;120
000042  f1a30301          SUB      r3,r3,#1              ;120
000046  d1f7              BNE      |L1.56|
;;;128      }
;;;129      return NumBytes;
;;;130    }
000048  bd30              POP      {r4,r5,pc}
;;;131    
                          ENDP

                  GUI_UC__NumBytes2NumChars PROC
;;;135    */
;;;136    int GUI_UC__NumBytes2NumChars(const char GUI_UNI_PTR * s, int NumBytes) {
00004a  b530              PUSH     {r4,r5,lr}
00004c  4604              MOV      r4,r0
;;;137      int CharSize, Chars = 0, Bytes = 0;
00004e  f04f0000          MOV      r0,#0
000052  4603              MOV      r3,r0
;;;138      while (NumBytes > Bytes) {
000054  e004              B        |L1.96|
                  |L1.86|
;;;139        #if GUI_SUPPORT_UNICODE
;;;140          CharSize = GUI_UC__GetCharSize(s + Bytes);
;;;141        #else
;;;142          CharSize = 1;
000056  f04f0201          MOV      r2,#1
;;;143        #endif
;;;144        Bytes += CharSize;
00005a  4413              ADD      r3,r3,r2
;;;145        Chars++;
00005c  f1000001          ADD      r0,r0,#1
                  |L1.96|
000060  4299              CMP      r1,r3                 ;138
000062  dcf8              BGT      |L1.86|
;;;146      }
;;;147      return Chars;
;;;148    }
000064  bd30              POP      {r4,r5,pc}
;;;149    
                          ENDP

