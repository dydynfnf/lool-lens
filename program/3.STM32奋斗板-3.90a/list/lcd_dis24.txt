; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\lcd_dis24.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\lcd_dis24.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -I.\GUI\AntiAlias -I.\GUI\Config -I.\GUI\ConvertColor -I.\GUI\ConvertMono -I.\GUI\Core -I.\GUI\Font -I.\GUI\GUI_X -I.\GUI\JPEG -I.\GUI\LCDDriver -I.\GUI\MemDev -I.\GUI\MultiLayer -I.\GUI\Widget -I.\GUI\WM -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\INC\ST\STM32F10x -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\lcd_dis24.crf TFT\lcd_dis24.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  Delay PROC
;;;49     ****************************************************************************/ 
;;;50     void Delay(__IO uint32_t nCount)
000000  e001              B        |L1.6|
                  |L1.2|
;;;51     {
;;;52       for(; nCount != 0; nCount--);
000002  f1a00001          SUB      r0,r0,#1
                  |L1.6|
000006  2800              CMP      r0,#0
000008  d1fb              BNE      |L1.2|
;;;53     }
00000a  4770              BX       lr
;;;54     /****************************************************************************
                          ENDP

                  LCD_WR_REG PROC
;;;61     ****************************************************************************/ 
;;;62     void LCD_WR_REG(u16 index)
00000c  f04f41c0          MOV      r1,#0x60000000
;;;63     {
;;;64     	*(__IO uint16_t *) (Bank1_LCD_C)= index;
000010  8008              STRH     r0,[r1,#0]
;;;65     
;;;66     }
000012  4770              BX       lr
;;;67     
                          ENDP

                  LCD_WR_CMD PROC
;;;75     ****************************************************************************/ 
;;;76     void LCD_WR_CMD(u16 index,u16 val)
000014  f04f42c0          MOV      r2,#0x60000000
;;;77     {	
;;;78     	*(__IO uint16_t *) (Bank1_LCD_C)= index;	
000018  8010              STRH     r0,[r2,#0]
;;;79     	*(__IO uint16_t *) (Bank1_LCD_D)= val;
00001a  4af7              LDR      r2,|L1.1016|
00001c  8011              STRH     r1,[r2,#0]
;;;80     }
00001e  4770              BX       lr
;;;81     
                          ENDP

                  LCD_RD_Data PROC
;;;89     ****************************************************************************/ 
;;;90     u16 LCD_RD_Data(void){
000020  f04f0000          MOV      r0,#0
;;;91     	u16 a=0;
;;;92     	a=*(__IO uint16_t *) (Bank1_LCD_D);   //读出的实际16位像素数据	  
000024  49f4              LDR      r1,|L1.1016|
000026  8808              LDRH     r0,[r1,#0]
;;;93     	return(a);	
;;;94     }
000028  4770              BX       lr
;;;95     
                          ENDP

                  LCD_WR_Data PROC
;;;103    ****************************************************************************/ 
;;;104    void    LCD_WR_Data(u16 val)
00002a  49f3              LDR      r1,|L1.1016|
;;;105    {   
;;;106    	*(__IO uint16_t *) (Bank1_LCD_D)= val; 	
00002c  8008              STRH     r0,[r1,#0]
;;;107    }
00002e  4770              BX       lr
;;;108    
                          ENDP

                  LCD_WR_Data_8 PROC
;;;109     void LCD_WR_Data_8(u16 val)
000030  49f1              LDR      r1,|L1.1016|
;;;110    {
;;;111    	*(__IO uint16_t *) (Bank1_LCD_D)= val;
000032  8008              STRH     r0,[r1,#0]
;;;112    }
000034  4770              BX       lr
;;;113    /****************************************************************************
                          ENDP

                  LCD_init PROC
;;;115    ****************************************************************************/ 
;;;116    void LCD_init(void)
000036  b510              PUSH     {r4,lr}
;;;117    {
;;;118    	GPIO_ResetBits(GPIOE, GPIO_Pin_1);
000038  2102              MOVS     r1,#2
00003a  48f0              LDR      r0,|L1.1020|
00003c  f7fffffe          BL       GPIO_ResetBits
;;;119        Delay(0xAFFFF);					   
000040  48ef              LDR      r0,|L1.1024|
000042  f7fffffe          BL       Delay
;;;120        GPIO_SetBits(GPIOE, GPIO_Pin_1 );		 	 
000046  2102              MOVS     r1,#2
000048  48ec              LDR      r0,|L1.1020|
00004a  f7fffffe          BL       GPIO_SetBits
;;;121    	Delay(0xAFFFF);
00004e  48ec              LDR      r0,|L1.1024|
000050  f7fffffe          BL       Delay
;;;122    
;;;123        LCD_WR_REG(0x00E2);	        //PLL 倍频到120M   PLL=10*36/3=120M
000054  20e2              MOVS     r0,#0xe2
000056  f7fffffe          BL       LCD_WR_REG
;;;124    	LCD_WR_Data(0x0023);	    //N=0x36 for 6.5M, 0x23 for 10M crystal
00005a  2023              MOVS     r0,#0x23
00005c  f7fffffe          BL       LCD_WR_Data
;;;125    	LCD_WR_Data(0x0002);
000060  2002              MOVS     r0,#2
000062  f7fffffe          BL       LCD_WR_Data
;;;126    	LCD_WR_Data(0x0004);
000066  2004              MOVS     r0,#4
000068  f7fffffe          BL       LCD_WR_Data
;;;127    	
;;;128    	LCD_WR_REG(0x00E0);         
00006c  20e0              MOVS     r0,#0xe0
00006e  f7fffffe          BL       LCD_WR_REG
;;;129    	LCD_WR_Data(0x0001);
000072  2001              MOVS     r0,#1
000074  f7fffffe          BL       LCD_WR_Data
;;;130    	Delay(0xAFFF);
000078  f64a70ff          MOV      r0,#0xafff
00007c  f7fffffe          BL       Delay
;;;131    	LCD_WR_REG(0x00E0);
000080  20e0              MOVS     r0,#0xe0
000082  f7fffffe          BL       LCD_WR_REG
;;;132    	LCD_WR_Data(0x0003);		// PLL 使能  PLL作为时钟
000086  2003              MOVS     r0,#3
000088  f7fffffe          BL       LCD_WR_Data
;;;133    	Delay(0xAFFF);
00008c  f64a70ff          MOV      r0,#0xafff
000090  f7fffffe          BL       Delay
;;;134    	LCD_WR_REG(0x0001);         // 软件复位
000094  2001              MOVS     r0,#1
000096  f7fffffe          BL       LCD_WR_REG
;;;135    	Delay(0xAFFF);
00009a  f64a70ff          MOV      r0,#0xafff
00009e  f7fffffe          BL       Delay
;;;136    	LCD_WR_REG(0xE6);
0000a2  20e6              MOVS     r0,#0xe6
0000a4  f7fffffe          BL       LCD_WR_REG
;;;137    	LCD_WR_Data(0x04);
0000a8  2004              MOVS     r0,#4
0000aa  f7fffffe          BL       LCD_WR_Data
;;;138    	LCD_WR_Data(0x93);
0000ae  2093              MOVS     r0,#0x93
0000b0  f7fffffe          BL       LCD_WR_Data
;;;139    	LCD_WR_Data(0xE0);
0000b4  20e0              MOVS     r0,#0xe0
0000b6  f7fffffe          BL       LCD_WR_Data
;;;140    
;;;141    	LCD_WR_REG(0x00B0);	        //设置LCD模式
0000ba  20b0              MOVS     r0,#0xb0
0000bc  f7fffffe          BL       LCD_WR_REG
;;;142    	LCD_WR_Data(0x0000);
0000c0  2000              MOVS     r0,#0
0000c2  f7fffffe          BL       LCD_WR_Data
;;;143    	LCD_WR_Data(0x0000);
0000c6  2000              MOVS     r0,#0
0000c8  f7fffffe          BL       LCD_WR_Data
;;;144    	LCD_WR_Data((HDP>>8)&0X00FF);  //Set HDP
0000cc  48cd              LDR      r0,|L1.1028|
0000ce  6800              LDR      r0,[r0,#0]  ; HDP
0000d0  f3c02007          UBFX     r0,r0,#8,#8
0000d4  f7fffffe          BL       LCD_WR_Data
;;;145    	LCD_WR_Data(HDP&0X00FF);
0000d8  49ca              LDR      r1,|L1.1028|
0000da  6809              LDR      r1,[r1,#0]  ; HDP
0000dc  b2c8              UXTB     r0,r1
0000de  f7fffffe          BL       LCD_WR_Data
;;;146        LCD_WR_Data((VDP>>8)&0X00FF);  //Set VDP
0000e2  48c9              LDR      r0,|L1.1032|
0000e4  6800              LDR      r0,[r0,#0]  ; VDP
0000e6  f3c02007          UBFX     r0,r0,#8,#8
0000ea  f7fffffe          BL       LCD_WR_Data
;;;147    	LCD_WR_Data(VDP&0X00FF);
0000ee  49c6              LDR      r1,|L1.1032|
0000f0  6809              LDR      r1,[r1,#0]  ; VDP
0000f2  b2c8              UXTB     r0,r1
0000f4  f7fffffe          BL       LCD_WR_Data
;;;148        LCD_WR_Data(0x0000);
0000f8  2000              MOVS     r0,#0
0000fa  f7fffffe          BL       LCD_WR_Data
;;;149    
;;;150    	LCD_WR_REG(0x00B4);	//HSYNC
0000fe  20b4              MOVS     r0,#0xb4
000100  f7fffffe          BL       LCD_WR_REG
;;;151    	LCD_WR_Data((HT>>8)&0X00FF);  //Set HT
000104  48c1              LDR      r0,|L1.1036|
000106  6800              LDR      r0,[r0,#0]  ; HT
000108  f3c02007          UBFX     r0,r0,#8,#8
00010c  f7fffffe          BL       LCD_WR_Data
;;;152    	LCD_WR_Data(HT&0X00FF);
000110  49be              LDR      r1,|L1.1036|
000112  6809              LDR      r1,[r1,#0]  ; HT
000114  b2c8              UXTB     r0,r1
000116  f7fffffe          BL       LCD_WR_Data
;;;153    	LCD_WR_Data((HPS>>8)&0X00FF);  //Set HPS
00011a  48bd              LDR      r0,|L1.1040|
00011c  6800              LDR      r0,[r0,#0]  ; HPS
00011e  f3c02007          UBFX     r0,r0,#8,#8
000122  f7fffffe          BL       LCD_WR_Data
;;;154    	LCD_WR_Data(HPS&0X00FF);
000126  49ba              LDR      r1,|L1.1040|
000128  6809              LDR      r1,[r1,#0]  ; HPS
00012a  b2c8              UXTB     r0,r1
00012c  f7fffffe          BL       LCD_WR_Data
;;;155    	LCD_WR_Data(HPW);			   //Set HPW
000130  48b8              LDR      r0,|L1.1044|
000132  7800              LDRB     r0,[r0,#0]  ; HPW
000134  f7fffffe          BL       LCD_WR_Data
;;;156    	LCD_WR_Data((LPS>>8)&0X00FF);  //Set HPS
000138  48b7              LDR      r0,|L1.1048|
00013a  6800              LDR      r0,[r0,#0]  ; LPS
00013c  f3c02007          UBFX     r0,r0,#8,#8
000140  f7fffffe          BL       LCD_WR_Data
;;;157    	LCD_WR_Data(LPS&0X00FF);
000144  49b4              LDR      r1,|L1.1048|
000146  6809              LDR      r1,[r1,#0]  ; LPS
000148  b2c8              UXTB     r0,r1
00014a  f7fffffe          BL       LCD_WR_Data
;;;158    	LCD_WR_Data(0x0000);
00014e  2000              MOVS     r0,#0
000150  f7fffffe          BL       LCD_WR_Data
;;;159    
;;;160    	LCD_WR_REG(0x00B6);	//VSYNC
000154  20b6              MOVS     r0,#0xb6
000156  f7fffffe          BL       LCD_WR_REG
;;;161    	LCD_WR_Data((VT>>8)&0X00FF);   //Set VT
00015a  48b0              LDR      r0,|L1.1052|
00015c  6800              LDR      r0,[r0,#0]  ; VT
00015e  f3c02007          UBFX     r0,r0,#8,#8
000162  f7fffffe          BL       LCD_WR_Data
;;;162    	LCD_WR_Data(VT&0X00FF);
000166  49ad              LDR      r1,|L1.1052|
000168  6809              LDR      r1,[r1,#0]  ; VT
00016a  b2c8              UXTB     r0,r1
00016c  f7fffffe          BL       LCD_WR_Data
;;;163    	LCD_WR_Data((VPS>>8)&0X00FF);  //Set VPS
000170  48ab              LDR      r0,|L1.1056|
000172  6800              LDR      r0,[r0,#0]  ; VPS
000174  f3c02007          UBFX     r0,r0,#8,#8
000178  f7fffffe          BL       LCD_WR_Data
;;;164    	LCD_WR_Data(VPS&0X00FF);
00017c  49a8              LDR      r1,|L1.1056|
00017e  6809              LDR      r1,[r1,#0]  ; VPS
000180  b2c8              UXTB     r0,r1
000182  f7fffffe          BL       LCD_WR_Data
;;;165    	LCD_WR_Data(VPW);			   //Set VPW
000186  48a7              LDR      r0,|L1.1060|
000188  7800              LDRB     r0,[r0,#0]  ; VPW
00018a  f7fffffe          BL       LCD_WR_Data
;;;166    	LCD_WR_Data((FPS>>8)&0X00FF);  //Set FPS
00018e  48a6              LDR      r0,|L1.1064|
000190  6800              LDR      r0,[r0,#0]  ; FPS
000192  f3c02007          UBFX     r0,r0,#8,#8
000196  f7fffffe          BL       LCD_WR_Data
;;;167    	LCD_WR_Data(FPS&0X00FF);
00019a  49a3              LDR      r1,|L1.1064|
00019c  6809              LDR      r1,[r1,#0]  ; FPS
00019e  b2c8              UXTB     r0,r1
0001a0  f7fffffe          BL       LCD_WR_Data
;;;168    
;;;169    	LCD_WR_REG(0x00BA);
0001a4  20ba              MOVS     r0,#0xba
0001a6  f7fffffe          BL       LCD_WR_REG
;;;170    	LCD_WR_Data(0x000D);    //GPIO[3:0] out 1
0001aa  200d              MOVS     r0,#0xd
0001ac  f7fffffe          BL       LCD_WR_Data
;;;171    
;;;172    	LCD_WR_REG(0x00B8);
0001b0  20b8              MOVS     r0,#0xb8
0001b2  f7fffffe          BL       LCD_WR_REG
;;;173    	LCD_WR_Data(0x0007);    //GPIO3=input, GPIO[2:0]=output
0001b6  2007              MOVS     r0,#7
0001b8  f7fffffe          BL       LCD_WR_Data
;;;174    	LCD_WR_Data(0x0001);    //GPIO0 normal
0001bc  2001              MOVS     r0,#1
0001be  f7fffffe          BL       LCD_WR_Data
;;;175    
;;;176    	LCD_WR_REG(0x0036);            //rotation
0001c2  2036              MOVS     r0,#0x36
0001c4  f7fffffe          BL       LCD_WR_REG
;;;177    	LCD_WR_Data(0x0000);
0001c8  2000              MOVS     r0,#0
0001ca  f7fffffe          BL       LCD_WR_Data
;;;178    
;;;179    
;;;180    	LCD_WR_REG(0x00F0);             //16位  565模式
0001ce  20f0              MOVS     r0,#0xf0
0001d0  f7fffffe          BL       LCD_WR_REG
;;;181    	LCD_WR_Data(0x0003);
0001d4  2003              MOVS     r0,#3
0001d6  f7fffffe          BL       LCD_WR_Data
;;;182    
;;;183    
;;;184    	Delay(0xAFFF);
0001da  f64a70ff          MOV      r0,#0xafff
0001de  f7fffffe          BL       Delay
;;;185    
;;;186    	//LCD_clear();
;;;187    	LCD_WR_REG(0x0029); //display on
0001e2  2029              MOVS     r0,#0x29
0001e4  f7fffffe          BL       LCD_WR_REG
;;;188    
;;;189    	LCD_WR_REG(0x00BE); //set PWM for B/L
0001e8  20be              MOVS     r0,#0xbe
0001ea  f7fffffe          BL       LCD_WR_REG
;;;190    	LCD_WR_Data(0x0006);
0001ee  2006              MOVS     r0,#6
0001f0  f7fffffe          BL       LCD_WR_Data
;;;191    	LCD_WR_Data(0x00ff);
0001f4  20ff              MOVS     r0,#0xff
0001f6  f7fffffe          BL       LCD_WR_Data
;;;192    	
;;;193    	LCD_WR_Data(0x0001);
0001fa  2001              MOVS     r0,#1
0001fc  f7fffffe          BL       LCD_WR_Data
;;;194    	LCD_WR_Data(0x00f0);
000200  20f0              MOVS     r0,#0xf0
000202  f7fffffe          BL       LCD_WR_Data
;;;195    	LCD_WR_Data(0x0000);
000206  2000              MOVS     r0,#0
000208  f7fffffe          BL       LCD_WR_Data
;;;196    	LCD_WR_Data(0x0000);
00020c  2000              MOVS     r0,#0
00020e  f7fffffe          BL       LCD_WR_Data
;;;197    
;;;198    	LCD_WR_REG(0x00d0);//设置动态背光控制配置 
000212  20d0              MOVS     r0,#0xd0
000214  f7fffffe          BL       LCD_WR_REG
;;;199    	LCD_WR_Data(0x000d);
000218  200d              MOVS     r0,#0xd
00021a  f7fffffe          BL       LCD_WR_Data
;;;200    
;;;201       			
;;;202    
;;;203    }
00021e  bd10              POP      {r4,pc}
;;;204    
                          ENDP

                  TFT_CLEAR PROC
;;;207    ****************************************************************************/ 
;;;208    void TFT_CLEAR(u16 x,u16 y,u32 len,u32 wid)
000220  b570              PUSH     {r4-r6,lr}
;;;209    {                    
000222  4605              MOV      r5,r0
000224  460c              MOV      r4,r1
;;;210        u32 w;
;;;211    
;;;212    	LCD_WR_REG(0x002A);	
000226  f04f002a          MOV      r0,#0x2a
00022a  f7fffffe          BL       LCD_WR_REG
;;;213    	LCD_WR_Data(x>>8);	    
00022e  1228              ASRS     r0,r5,#8
000230  f7fffffe          BL       LCD_WR_Data
;;;214    	LCD_WR_Data(x);
000234  4628              MOV      r0,r5
000236  f7fffffe          BL       LCD_WR_Data
;;;215    	LCD_WR_Data((len-1)>>8);	    
00023a  1e51              SUBS     r1,r2,#1
00023c  f3c1200f          UBFX     r0,r1,#8,#16
000240  f7fffffe          BL       LCD_WR_Data
;;;216    	LCD_WR_Data((len-1));
000244  1e51              SUBS     r1,r2,#1
000246  b288              UXTH     r0,r1
000248  f7fffffe          BL       LCD_WR_Data
;;;217        LCD_WR_REG(0x002b);	
00024c  202b              MOVS     r0,#0x2b
00024e  f7fffffe          BL       LCD_WR_REG
;;;218    	LCD_WR_Data(y>>8);	    
000252  1220              ASRS     r0,r4,#8
000254  f7fffffe          BL       LCD_WR_Data
;;;219    	LCD_WR_Data(y);
000258  4620              MOV      r0,r4
00025a  f7fffffe          BL       LCD_WR_Data
;;;220    	LCD_WR_Data((wid-1)>>8);	    
00025e  1e59              SUBS     r1,r3,#1
000260  f3c1200f          UBFX     r0,r1,#8,#16
000264  f7fffffe          BL       LCD_WR_Data
;;;221    	LCD_WR_Data((wid-1));
000268  1e59              SUBS     r1,r3,#1
00026a  b288              UXTH     r0,r1
00026c  f7fffffe          BL       LCD_WR_Data
;;;222    	LCD_WR_REG(0x002c);
000270  202c              MOVS     r0,#0x2c
000272  f7fffffe          BL       LCD_WR_REG
;;;223    	w=(len-x)*(wid-y);
000276  eba20005          SUB      r0,r2,r5
00027a  eba30104          SUB      r1,r3,r4
00027e  fb00f601          MUL      r6,r0,r1
;;;224    	while(w--) LCD_WR_Data(0xffff);
000282  e003              B        |L1.652|
                  |L1.644|
000284  f64f70ff          MOV      r0,#0xffff
000288  f7fffffe          BL       LCD_WR_Data
                  |L1.652|
00028c  0030              MOVS     r0,r6
00028e  f1a60601          SUB      r6,r6,#1
000292  d1f7              BNE      |L1.644|
;;;225    }   
000294  bd70              POP      {r4-r6,pc}
;;;226    
                          ENDP

                  TFT_DrawPoint PROC
;;;229    ****************************************************************************/ 
;;;230    void TFT_DrawPoint(u16 x,u16 y, u16 color)
000296  b510              PUSH     {r4,lr}
;;;231    {								       
000298  4604              MOV      r4,r0
00029a  460b              MOV      r3,r1
;;;232    	LCD_WR_REG(0x002A);				    
00029c  f04f002a          MOV      r0,#0x2a
0002a0  f7fffffe          BL       LCD_WR_REG
;;;233    	LCD_WR_Data(x>>8);	    			//起始地址X
0002a4  1220              ASRS     r0,r4,#8
0002a6  f7fffffe          BL       LCD_WR_Data
;;;234    	LCD_WR_Data(x);	    			
0002aa  4620              MOV      r0,r4
0002ac  f7fffffe          BL       LCD_WR_Data
;;;235    	LCD_WR_Data(x>>8);	    			//结束地址X
0002b0  1220              ASRS     r0,r4,#8
0002b2  f7fffffe          BL       LCD_WR_Data
;;;236    	LCD_WR_Data(x);	    			    
0002b6  4620              MOV      r0,r4
0002b8  f7fffffe          BL       LCD_WR_Data
;;;237        LCD_WR_REG(0x002b);	
0002bc  202b              MOVS     r0,#0x2b
0002be  f7fffffe          BL       LCD_WR_REG
;;;238    	LCD_WR_Data(y>>8);	    			//起始地址Y
0002c2  1218              ASRS     r0,r3,#8
0002c4  f7fffffe          BL       LCD_WR_Data
;;;239    	LCD_WR_Data(y);	    			    
0002c8  4618              MOV      r0,r3
0002ca  f7fffffe          BL       LCD_WR_Data
;;;240    	LCD_WR_Data(y>>8);	    			//结束地址Y
0002ce  1218              ASRS     r0,r3,#8
0002d0  f7fffffe          BL       LCD_WR_Data
;;;241    	LCD_WR_Data(y);	    			
0002d4  4618              MOV      r0,r3
0002d6  f7fffffe          BL       LCD_WR_Data
;;;242    	LCD_WR_REG(0x2c);
0002da  202c              MOVS     r0,#0x2c
0002dc  f7fffffe          BL       LCD_WR_REG
;;;243    	LCD_WR_Data(color); 	   	
0002e0  4610              MOV      r0,r2
0002e2  f7fffffe          BL       LCD_WR_Data
;;;244    }
0002e6  bd10              POP      {r4,pc}
;;;245    
                          ENDP

                  TFT_ReadPoint PROC
;;;248    ****************************************************************************/ 
;;;249    u16 TFT_ReadPoint(u16 x,u16 y)
0002e8  b500              PUSH     {lr}
;;;250    {								       
0002ea  4603              MOV      r3,r0
0002ec  460a              MOV      r2,r1
;;;251    	LCD_WR_REG(0x002A);				    
0002ee  f04f002a          MOV      r0,#0x2a
0002f2  f7fffffe          BL       LCD_WR_REG
;;;252    	LCD_WR_Data(x>>8);	    			//起始地址X
0002f6  1218              ASRS     r0,r3,#8
0002f8  f7fffffe          BL       LCD_WR_Data
;;;253    	LCD_WR_Data(x);	    			
0002fc  4618              MOV      r0,r3
0002fe  f7fffffe          BL       LCD_WR_Data
;;;254    	LCD_WR_Data(x>>8);	    			//结束地址X
000302  1218              ASRS     r0,r3,#8
000304  f7fffffe          BL       LCD_WR_Data
;;;255    	LCD_WR_Data(x);	    			    
000308  4618              MOV      r0,r3
00030a  f7fffffe          BL       LCD_WR_Data
;;;256        LCD_WR_REG(0x002b);	
00030e  202b              MOVS     r0,#0x2b
000310  f7fffffe          BL       LCD_WR_REG
;;;257    	LCD_WR_Data(y>>8);	    			//起始地址Y
000314  1210              ASRS     r0,r2,#8
000316  f7fffffe          BL       LCD_WR_Data
;;;258    	LCD_WR_Data(y);	    			    
00031a  4610              MOV      r0,r2
00031c  f7fffffe          BL       LCD_WR_Data
;;;259    	LCD_WR_Data(y>>8);	    			//结束地址Y
000320  1210              ASRS     r0,r2,#8
000322  f7fffffe          BL       LCD_WR_Data
;;;260    	LCD_WR_Data(y);	    			
000326  4610              MOV      r0,r2
000328  f7fffffe          BL       LCD_WR_Data
;;;261    	LCD_WR_REG(0x2e);
00032c  202e              MOVS     r0,#0x2e
00032e  f7fffffe          BL       LCD_WR_REG
;;;262    	return(LCD_RD_Data()); 	   	
000332  f7fffffe          BL       LCD_RD_Data
;;;263    }
000336  bd00              POP      {pc}
;;;264    
                          ENDP

                  TFT_HLine PROC
;;;267    ****************************************************************************/ 
;;;268    void TFT_HLine(u16 x0,u16 y,u16 x1,u16 color)
000338  b5f0              PUSH     {r4-r7,lr}
;;;269    {	
00033a  4605              MOV      r5,r0
00033c  460c              MOV      r4,r1
;;;270    	u32 i,point_count;							       
;;;271    	LCD_WR_REG(0x002A);				    
00033e  f04f002a          MOV      r0,#0x2a
000342  f7fffffe          BL       LCD_WR_REG
;;;272    	LCD_WR_Data(x0>>8);	    			//起始地址X
000346  1228              ASRS     r0,r5,#8
000348  f7fffffe          BL       LCD_WR_Data
;;;273    	LCD_WR_Data(x0);	    			
00034c  4628              MOV      r0,r5
00034e  f7fffffe          BL       LCD_WR_Data
;;;274    	LCD_WR_Data(x1>>8);	    			//结束地址X
000352  1210              ASRS     r0,r2,#8
000354  f7fffffe          BL       LCD_WR_Data
;;;275    	LCD_WR_Data(x1);	    			    
000358  4610              MOV      r0,r2
00035a  f7fffffe          BL       LCD_WR_Data
;;;276        LCD_WR_REG(0x002b);	
00035e  202b              MOVS     r0,#0x2b
000360  f7fffffe          BL       LCD_WR_REG
;;;277    	LCD_WR_Data(y>>8);	    			//起始地址Y
000364  1220              ASRS     r0,r4,#8
000366  f7fffffe          BL       LCD_WR_Data
;;;278    	LCD_WR_Data(y);	    			    
00036a  4620              MOV      r0,r4
00036c  f7fffffe          BL       LCD_WR_Data
;;;279    	LCD_WR_Data(y>>8);	    			//结束地址Y
000370  1220              ASRS     r0,r4,#8
000372  f7fffffe          BL       LCD_WR_Data
;;;280    	LCD_WR_Data(y);	    			
000376  4620              MOV      r0,r4
000378  f7fffffe          BL       LCD_WR_Data
;;;281    	LCD_WR_REG(0x2c);
00037c  202c              MOVS     r0,#0x2c
00037e  f7fffffe          BL       LCD_WR_REG
;;;282    	point_count=x1-x0+1;
000382  eba20005          SUB      r0,r2,r5
000386  f1000701          ADD      r7,r0,#1
;;;283    	for(i=0;i<=point_count;i++)
00038a  f04f0600          MOV      r6,#0
00038e  e004              B        |L1.922|
                  |L1.912|
;;;284    	{
;;;285    		LCD_WR_Data(color); 	 
000390  4618              MOV      r0,r3
000392  f7fffffe          BL       LCD_WR_Data
000396  f1060601          ADD      r6,r6,#1              ;283
                  |L1.922|
00039a  42be              CMP      r6,r7                 ;283
00039c  d9f8              BLS      |L1.912|
;;;286    	} 
;;;287    }
00039e  bdf0              POP      {r4-r7,pc}
;;;288    
                          ENDP

                  TFT_VLine PROC
;;;291    ****************************************************************************/ 
;;;292    void TFT_VLine(u16 x,u16 y0,u16 y1,u16 color)
0003a0  b5f0              PUSH     {r4-r7,lr}
;;;293    {	
0003a2  4605              MOV      r5,r0
0003a4  460c              MOV      r4,r1
;;;294    	u32 i,point_count;							       
;;;295    	LCD_WR_REG(0x002A);				    
0003a6  f04f002a          MOV      r0,#0x2a
0003aa  f7fffffe          BL       LCD_WR_REG
;;;296    	LCD_WR_Data(x>>8);	    			//起始地址X
0003ae  1228              ASRS     r0,r5,#8
0003b0  f7fffffe          BL       LCD_WR_Data
;;;297    	LCD_WR_Data(x);	    			
0003b4  4628              MOV      r0,r5
0003b6  f7fffffe          BL       LCD_WR_Data
;;;298    	LCD_WR_Data(x>>8);	    			//结束地址X
0003ba  1228              ASRS     r0,r5,#8
0003bc  f7fffffe          BL       LCD_WR_Data
;;;299    	LCD_WR_Data(x);	    			    
0003c0  4628              MOV      r0,r5
0003c2  f7fffffe          BL       LCD_WR_Data
;;;300        LCD_WR_REG(0x002b);	
0003c6  202b              MOVS     r0,#0x2b
0003c8  f7fffffe          BL       LCD_WR_REG
;;;301    	LCD_WR_Data(y0>>8);	    			//起始地址Y
0003cc  1220              ASRS     r0,r4,#8
0003ce  f7fffffe          BL       LCD_WR_Data
;;;302    	LCD_WR_Data(y0);	    			    
0003d2  4620              MOV      r0,r4
0003d4  f7fffffe          BL       LCD_WR_Data
;;;303    	LCD_WR_Data(y1>>8);	    			//结束地址Y
0003d8  1210              ASRS     r0,r2,#8
0003da  f7fffffe          BL       LCD_WR_Data
;;;304    	LCD_WR_Data(y1);	    			
0003de  4610              MOV      r0,r2
0003e0  f7fffffe          BL       LCD_WR_Data
;;;305    	LCD_WR_REG(0x2c);
0003e4  202c              MOVS     r0,#0x2c
0003e6  f7fffffe          BL       LCD_WR_REG
;;;306    	point_count=y1-y0+1;
0003ea  eba20004          SUB      r0,r2,r4
0003ee  f1000701          ADD      r7,r0,#1
;;;307    	for(i=0;i<=point_count;i++)
0003f2  f04f0600          MOV      r6,#0
0003f6  e01e              B        |L1.1078|
                  |L1.1016|
                          DCD      0x60020000
                  |L1.1020|
                          DCD      0x40011800
                  |L1.1024|
                          DCD      0x000affff
                  |L1.1028|
                          DCD      HDP
                  |L1.1032|
                          DCD      VDP
                  |L1.1036|
                          DCD      ||HT||
                  |L1.1040|
                          DCD      HPS
                  |L1.1044|
                          DCD      HPW
                  |L1.1048|
                          DCD      LPS
                  |L1.1052|
                          DCD      ||VT||
                  |L1.1056|
                          DCD      VPS
                  |L1.1060|
                          DCD      VPW
                  |L1.1064|
                          DCD      ||FPS||
                  |L1.1068|
;;;308    	{
;;;309    		LCD_WR_Data(color); 	 
00042c  4618              MOV      r0,r3
00042e  f7fffffe          BL       LCD_WR_Data
000432  f1060601          ADD      r6,r6,#1              ;307
                  |L1.1078|
000436  42be              CMP      r6,r7                 ;307
000438  d9f8              BLS      |L1.1068|
;;;310    	} 
;;;311    }
00043a  bdf0              POP      {r4-r7,pc}
;;;312    
                          ENDP

                  TFT_Fill PROC
;;;315    ****************************************************************************/ 
;;;316    void TFT_Fill(u16 x0,u16 y0, u16 x1, u16 y1, u16 color)
00043c  e92d41f0          PUSH     {r4-r8,lr}
;;;317    {	
000440  4605              MOV      r5,r0
000442  460c              MOV      r4,r1
000444  9f06              LDR      r7,[sp,#0x18]
;;;318    	u32 i,point_count;						       
;;;319    	LCD_WR_REG(0x002A);				    
000446  f04f002a          MOV      r0,#0x2a
00044a  f7fffffe          BL       LCD_WR_REG
;;;320    	LCD_WR_Data(x0>>8);	    			//起始地址X
00044e  1228              ASRS     r0,r5,#8
000450  f7fffffe          BL       LCD_WR_Data
;;;321    	LCD_WR_Data(x0);	    			
000454  4628              MOV      r0,r5
000456  f7fffffe          BL       LCD_WR_Data
;;;322    	LCD_WR_Data(x1>>8);	    			//结束地址X
00045a  1210              ASRS     r0,r2,#8
00045c  f7fffffe          BL       LCD_WR_Data
;;;323    	LCD_WR_Data(x1);	    			    
000460  4610              MOV      r0,r2
000462  f7fffffe          BL       LCD_WR_Data
;;;324        LCD_WR_REG(0x002b);	
000466  202b              MOVS     r0,#0x2b
000468  f7fffffe          BL       LCD_WR_REG
;;;325    	LCD_WR_Data(y0>>8);	    			//起始地址Y
00046c  1220              ASRS     r0,r4,#8
00046e  f7fffffe          BL       LCD_WR_Data
;;;326    	LCD_WR_Data(y0);	    			    
000472  4620              MOV      r0,r4
000474  f7fffffe          BL       LCD_WR_Data
;;;327    	LCD_WR_Data(y1>>8);	    			//结束地址Y
000478  1218              ASRS     r0,r3,#8
00047a  f7fffffe          BL       LCD_WR_Data
;;;328    	LCD_WR_Data(y1);	    			
00047e  4618              MOV      r0,r3
000480  f7fffffe          BL       LCD_WR_Data
;;;329    	LCD_WR_REG(0x2c);
000484  202c              MOVS     r0,#0x2c
000486  f7fffffe          BL       LCD_WR_REG
;;;330    	point_count=(x1-x0+1)*(y1-y0+1);
00048a  eba20005          SUB      r0,r2,r5
00048e  f1000001          ADD      r0,r0,#1
000492  eba30104          SUB      r1,r3,r4
000496  f1010101          ADD      r1,r1,#1
00049a  fb00f801          MUL      r8,r0,r1
;;;331    	for(i=0;i<=point_count;i++)
00049e  f04f0600          MOV      r6,#0
0004a2  e004              B        |L1.1198|
                  |L1.1188|
;;;332    	{
;;;333    		LCD_WR_Data(color); 	 
0004a4  4638              MOV      r0,r7
0004a6  f7fffffe          BL       LCD_WR_Data
0004aa  f1060601          ADD      r6,r6,#1              ;331
                  |L1.1198|
0004ae  4546              CMP      r6,r8                 ;331
0004b0  d9f8              BLS      |L1.1188|
;;;334    	}	
;;;335    }
0004b2  e8bd81f0          POP      {r4-r8,pc}
;;;336    
                          ENDP

                  TFT_ShowBmp PROC
;;;344    ****************************************************************************/ 
;;;345    void TFT_ShowBmp(u16 x,u16 y,u16 lenth,u16 wide,const u8 *p)
0004b6  e92d41f0          PUSH     {r4-r8,lr}
;;;346    {      
0004ba  4604              MOV      r4,r0
0004bc  460d              MOV      r5,r1
0004be  9f06              LDR      r7,[sp,#0x18]
;;;347        u32 size,temp; 
;;;348        //设定一个图片所占的窗口大小 
;;;349    	
;;;350    	LCD_WR_REG(0x002A);				    
0004c0  f04f002a          MOV      r0,#0x2a
0004c4  f7fffffe          BL       LCD_WR_REG
;;;351    	LCD_WR_Data(x>>8);	    			//起始地址X
0004c8  1220              ASRS     r0,r4,#8
0004ca  f7fffffe          BL       LCD_WR_Data
;;;352    	LCD_WR_Data(x&0x00ff);
0004ce  b2e0              UXTB     r0,r4
0004d0  f7fffffe          BL       LCD_WR_Data
;;;353    	LCD_WR_Data(((u16)x+lenth-1)>>8);	    		//结束地址X
0004d4  18a1              ADDS     r1,r4,r2
0004d6  1e49              SUBS     r1,r1,#1
0004d8  f3c1200f          UBFX     r0,r1,#8,#16
0004dc  f7fffffe          BL       LCD_WR_Data
;;;354    	LCD_WR_Data(((u16)x+lenth-1)&0x00ff);
0004e0  18a1              ADDS     r1,r4,r2
0004e2  1e49              SUBS     r1,r1,#1
0004e4  b2c8              UXTB     r0,r1
0004e6  f7fffffe          BL       LCD_WR_Data
;;;355        LCD_WR_REG(0x002b);	
0004ea  202b              MOVS     r0,#0x2b
0004ec  f7fffffe          BL       LCD_WR_REG
;;;356    	LCD_WR_Data(y>>8);	    			//起始地址Y
0004f0  1228              ASRS     r0,r5,#8
0004f2  f7fffffe          BL       LCD_WR_Data
;;;357    	LCD_WR_Data(y&0x00ff);
0004f6  b2e8              UXTB     r0,r5
0004f8  f7fffffe          BL       LCD_WR_Data
;;;358    	LCD_WR_Data((y+wide-1)>>8);	    	 	//结束地址Y
0004fc  18e9              ADDS     r1,r5,r3
0004fe  1e49              SUBS     r1,r1,#1
000500  f3c1200f          UBFX     r0,r1,#8,#16
000504  f7fffffe          BL       LCD_WR_Data
;;;359    	LCD_WR_Data((y+wide-1)&0x00ff);
000508  18e9              ADDS     r1,r5,r3
00050a  1e49              SUBS     r1,r1,#1
00050c  b2c8              UXTB     r0,r1
00050e  f7fffffe          BL       LCD_WR_Data
;;;360    	LCD_WR_REG(0x2c);	 
000512  202c              MOVS     r0,#0x2c
000514  f7fffffe          BL       LCD_WR_REG
;;;361    	temp=(u32)lenth*wide*2;
000518  fb02f003          MUL      r0,r2,r3
00051c  ea4f0840          LSL      r8,r0,#1
;;;362    	for(size=0;size<temp;size++)LCD_WR_Data_8(p[size]); 
000520  f04f0600          MOV      r6,#0
000524  e004              B        |L1.1328|
                  |L1.1318|
000526  5db8              LDRB     r0,[r7,r6]
000528  f7fffffe          BL       LCD_WR_Data_8
00052c  f1060601          ADD      r6,r6,#1
                  |L1.1328|
000530  4546              CMP      r6,r8
000532  d3f8              BCC      |L1.1318|
;;;363    }         
000534  e8bd81f0          POP      {r4-r8,pc}
;;;364    
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  HDP
                          DCD      0x0000031f
                  ||HT||
                          DCD      0x000004b0
                  HPS
                          DCD      0x0000005d
                  HPW
00000c  28000000          DCB      0x28,0x00,0x00,0x00
                  LPS
                          DCD      0x0000002e
                  VDP
                          DCD      0x000001df
                  ||VT||
                          DCD      0x0000029e
                  VPS
                          DCD      0x0000002b
                  VPW
000020  14000000          DCB      0x14,0x00,0x00,0x00
                  ||FPS||
                          DCD      0x00000017
