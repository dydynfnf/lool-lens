; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\guicirc.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\guicirc.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -I.\GUI\AntiAlias -I.\GUI\Config -I.\GUI\ConvertColor -I.\GUI\ConvertMono -I.\GUI\Core -I.\GUI\Font -I.\GUI\GUI_X -I.\GUI\JPEG -I.\GUI\LCDDriver -I.\GUI\MemDev -I.\GUI\MultiLayer -I.\GUI\Widget -I.\GUI\WM -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\INC\ST\STM32F10x -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\guicirc.crf GUI\Core\GUICirc.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  Draw8Point PROC
;;;46     */
;;;47     static void Draw8Point(int x0,int y0, int xoff, int yoff) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
00000a  461c              MOV      r4,r3
;;;48       LCD_HL_DrawPixel(x0+xoff,y0+yoff);
00000c  eb060104          ADD      r1,r6,r4
000010  eb050007          ADD      r0,r5,r7
000014  4bfe              LDR      r3,|L1.1040|
000016  6d9b              LDR      r3,[r3,#0x58]  ; GUI_Context
000018  685a              LDR      r2,[r3,#4]
00001a  4790              BLX      r2
;;;49       LCD_HL_DrawPixel(x0-xoff,y0+yoff);
00001c  1931              ADDS     r1,r6,r4
00001e  1be8              SUBS     r0,r5,r7
000020  4bfb              LDR      r3,|L1.1040|
000022  6d9b              LDR      r3,[r3,#0x58]  ; GUI_Context
000024  685a              LDR      r2,[r3,#4]
000026  4790              BLX      r2
;;;50       LCD_HL_DrawPixel(x0+yoff,y0+xoff);
000028  19f1              ADDS     r1,r6,r7
00002a  1928              ADDS     r0,r5,r4
00002c  4bf8              LDR      r3,|L1.1040|
00002e  6d9b              LDR      r3,[r3,#0x58]  ; GUI_Context
000030  685a              LDR      r2,[r3,#4]
000032  4790              BLX      r2
;;;51       LCD_HL_DrawPixel(x0+yoff,y0-xoff);
000034  1bf1              SUBS     r1,r6,r7
000036  1928              ADDS     r0,r5,r4
000038  4bf5              LDR      r3,|L1.1040|
00003a  6d9b              LDR      r3,[r3,#0x58]  ; GUI_Context
00003c  685a              LDR      r2,[r3,#4]
00003e  4790              BLX      r2
;;;52       if (yoff) {
000040  b1bc              CBZ      r4,|L1.114|
;;;53         LCD_HL_DrawPixel(x0+xoff,y0-yoff);
000042  1b31              SUBS     r1,r6,r4
000044  19e8              ADDS     r0,r5,r7
000046  4bf2              LDR      r3,|L1.1040|
000048  6d9b              LDR      r3,[r3,#0x58]  ; GUI_Context
00004a  685a              LDR      r2,[r3,#4]
00004c  4790              BLX      r2
;;;54         LCD_HL_DrawPixel(x0-xoff,y0-yoff);
00004e  1b31              SUBS     r1,r6,r4
000050  1be8              SUBS     r0,r5,r7
000052  4bef              LDR      r3,|L1.1040|
000054  6d9b              LDR      r3,[r3,#0x58]  ; GUI_Context
000056  685a              LDR      r2,[r3,#4]
000058  4790              BLX      r2
;;;55         LCD_HL_DrawPixel(x0-yoff,y0+xoff);
00005a  19f1              ADDS     r1,r6,r7
00005c  1b28              SUBS     r0,r5,r4
00005e  4bec              LDR      r3,|L1.1040|
000060  6d9b              LDR      r3,[r3,#0x58]  ; GUI_Context
000062  685a              LDR      r2,[r3,#4]
000064  4790              BLX      r2
;;;56         LCD_HL_DrawPixel(x0-yoff,y0-xoff);
000066  1bf1              SUBS     r1,r6,r7
000068  1b28              SUBS     r0,r5,r4
00006a  4be9              LDR      r3,|L1.1040|
00006c  6d9b              LDR      r3,[r3,#0x58]  ; GUI_Context
00006e  685a              LDR      r2,[r3,#4]
000070  4790              BLX      r2
                  |L1.114|
;;;57       }
;;;58     }
000072  e8bd81f0          POP      {r4-r8,pc}
;;;59     
                          ENDP

                  GL_DrawCircle PROC
;;;69     */
;;;70     void GL_DrawCircle(int x0, int y0, int r) {
000076  e92d47f0          PUSH     {r4-r10,lr}
00007a  4607              MOV      r7,r0
00007c  4688              MOV      r8,r1
00007e  4614              MOV      r4,r2
;;;71       I32 i;
;;;72       int imax = ((I32)((I32)r*707))/1000+1;
000080  f24020c3          MOV      r0,#0x2c3
000084  fb04f000          MUL      r0,r4,r0
000088  f44f717a          MOV      r1,#0x3e8
00008c  fb90f0f1          SDIV     r0,r0,r1
000090  f1000901          ADD      r9,r0,#1
;;;73       I32 sqmax = (I32)r*(I32)r+(I32)r/2;
000094  eb0471d4          ADD      r1,r4,r4,LSR #31
000098  ea4f0161          ASR      r1,r1,#1
00009c  fb041a04          MLA      r10,r4,r4,r1
;;;74       I32 y=r;
0000a0  4626              MOV      r6,r4
;;;75       Draw8Point(x0,y0,r,0);
0000a2  f04f0300          MOV      r3,#0
0000a6  4622              MOV      r2,r4
0000a8  4641              MOV      r1,r8
0000aa  4638              MOV      r0,r7
0000ac  f7fffffe          BL       Draw8Point
;;;76       for (i=1; i<= imax; i++) {
0000b0  f04f0501          MOV      r5,#1
0000b4  e015              B        |L1.226|
                  |L1.182|
;;;77         if ((i*i+y*y) >sqmax) {
0000b6  fb05f005          MUL      r0,r5,r5
0000ba  fb060006          MLA      r0,r6,r6,r0
0000be  4550              CMP      r0,r10
0000c0  dd07              BLE      |L1.210|
;;;78           Draw8Point(x0,y0,i,y);
0000c2  4633              MOV      r3,r6
0000c4  462a              MOV      r2,r5
0000c6  4641              MOV      r1,r8
0000c8  4638              MOV      r0,r7
0000ca  f7fffffe          BL       Draw8Point
;;;79           y--;
0000ce  f1a60601          SUB      r6,r6,#1
                  |L1.210|
;;;80         }
;;;81         Draw8Point(x0,y0,i,y);
0000d2  4633              MOV      r3,r6
0000d4  462a              MOV      r2,r5
0000d6  4641              MOV      r1,r8
0000d8  4638              MOV      r0,r7
0000da  f7fffffe          BL       Draw8Point
0000de  f1050501          ADD      r5,r5,#1              ;76
                  |L1.226|
0000e2  454d              CMP      r5,r9                 ;76
0000e4  dde7              BLE      |L1.182|
;;;82       }
;;;83     }
0000e6  e8bd87f0          POP      {r4-r10,pc}
;;;84     
                          ENDP

                  GUI_DrawCircle PROC
;;;88     */
;;;89     void GUI_DrawCircle(int x0, int y0, int r) {
0000ea  b57c              PUSH     {r2-r6,lr}
0000ec  4606              MOV      r6,r0
0000ee  460d              MOV      r5,r1
0000f0  4614              MOV      r4,r2
;;;90       #if (GUI_WINSUPPORT)
;;;91         GUI_RECT Rect;
;;;92       #endif
;;;93       GUI_LOCK();
;;;94       #if (GUI_WINSUPPORT)
;;;95         WM_ADDORG(x0,y0);
0000f2  48c7              LDR      r0,|L1.1040|
0000f4  6c00              LDR      r0,[r0,#0x40]  ; GUI_Context
0000f6  4406              ADD      r6,r6,r0
0000f8  48c5              LDR      r0,|L1.1040|
0000fa  6c40              LDR      r0,[r0,#0x44]  ; GUI_Context
0000fc  4405              ADD      r5,r5,r0
;;;96         Rect.x0 = x0-r;
0000fe  eba60004          SUB      r0,r6,r4
000102  b200              SXTH     r0,r0
000104  f8ad0000          STRH     r0,[sp,#0]
;;;97         Rect.x1 = x0+r;
000108  eb060004          ADD      r0,r6,r4
00010c  b200              SXTH     r0,r0
00010e  f8ad0004          STRH     r0,[sp,#4]
;;;98         Rect.y0 = y0-r;
000112  eba50004          SUB      r0,r5,r4
000116  b200              SXTH     r0,r0
000118  f8ad0002          STRH     r0,[sp,#2]
;;;99         Rect.y1 = y0+r;
00011c  eb050004          ADD      r0,r5,r4
000120  b200              SXTH     r0,r0
000122  f8ad0006          STRH     r0,[sp,#6]
;;;100        WM_ITERATE_START(&Rect); {
000126  4668              MOV      r0,sp
000128  f7fffffe          BL       WM__InitIVRSearch
00012c  b148              CBZ      r0,|L1.322|
00012e  bf00              NOP      
                  |L1.304|
;;;101      #endif
;;;102        GL_DrawCircle( x0, y0, r);
000130  4622              MOV      r2,r4
000132  4629              MOV      r1,r5
000134  4630              MOV      r0,r6
000136  f7fffffe          BL       GL_DrawCircle
;;;103      #if (GUI_WINSUPPORT)
;;;104        } WM_ITERATE_END();
00013a  f7fffffe          BL       WM__GetNextIVR
00013e  2800              CMP      r0,#0
000140  d1f6              BNE      |L1.304|
                  |L1.322|
;;;105      #endif
;;;106      GUI_UNLOCK();
;;;107    }
000142  bd7c              POP      {r2-r6,pc}
;;;108    
                          ENDP

                  GL_FillCircle PROC
;;;112    */
;;;113    void GL_FillCircle(int x0, int y0, int r) {
000144  e92d47f0          PUSH     {r4-r10,lr}
000148  4605              MOV      r5,r0
00014a  4688              MOV      r8,r1
00014c  4616              MOV      r6,r2
;;;114      I32 i;
;;;115      int imax = ((I32)((I32)r*707))/1000+1;
00014e  f24020c3          MOV      r0,#0x2c3
000152  fb06f000          MUL      r0,r6,r0
000156  f44f717a          MOV      r1,#0x3e8
00015a  fb90f0f1          SDIV     r0,r0,r1
00015e  f1000901          ADD      r9,r0,#1
;;;116      I32 sqmax = (I32)r*(I32)r+(I32)r/2;
000162  eb0671d6          ADD      r1,r6,r6,LSR #31
000166  ea4f0161          ASR      r1,r1,#1
00016a  fb061a06          MLA      r10,r6,r6,r1
;;;117      I32 x=r;
00016e  4634              MOV      r4,r6
;;;118      LCD_HL_DrawHLine(x0-r,y0,x0+r);
000170  eb050206          ADD      r2,r5,r6
000174  eba50006          SUB      r0,r5,r6
000178  49a5              LDR      r1,|L1.1040|
00017a  6d89              LDR      r1,[r1,#0x58]  ; GUI_Context
00017c  680b              LDR      r3,[r1,#0]
00017e  4641              MOV      r1,r8
000180  4798              BLX      r3
;;;119      for (i=1; i<= imax; i++) {
000182  f04f0701          MOV      r7,#1
000186  e043              B        |L1.528|
                  |L1.392|
;;;120        if ((i*i+x*x) >sqmax) {
000188  fb07f007          MUL      r0,r7,r7
00018c  fb040004          MLA      r0,r4,r4,r0
000190  4550              CMP      r0,r10
000192  dd25              BLE      |L1.480|
;;;121          /* draw lines from outside */
;;;122          if (x>imax) {
000194  454c              CMP      r4,r9
000196  dd21              BLE      |L1.476|
;;;123            LCD_HL_DrawHLine (x0-i+1,y0+x, x0+i-1);
000198  eb050c07          ADD      r12,r5,r7
00019c  f1ac0201          SUB      r2,r12,#1
0001a0  eb080104          ADD      r1,r8,r4
0001a4  eba50c07          SUB      r12,r5,r7
0001a8  f10c0001          ADD      r0,r12,#1
0001ac  f8dfc260          LDR      r12,|L1.1040|
0001b0  f8dcc058          LDR      r12,[r12,#0x58]  ; GUI_Context
0001b4  f8dc3000          LDR      r3,[r12,#0]
0001b8  4798              BLX      r3
;;;124            LCD_HL_DrawHLine (x0-i+1,y0-x, x0+i-1);
0001ba  eb050c07          ADD      r12,r5,r7
0001be  f1ac0201          SUB      r2,r12,#1
0001c2  eba80104          SUB      r1,r8,r4
0001c6  eba50c07          SUB      r12,r5,r7
0001ca  f10c0001          ADD      r0,r12,#1
0001ce  f8dfc240          LDR      r12,|L1.1040|
0001d2  f8dcc058          LDR      r12,[r12,#0x58]  ; GUI_Context
0001d6  f8dc3000          LDR      r3,[r12,#0]
0001da  4798              BLX      r3
                  |L1.476|
;;;125          }
;;;126          x--;
0001dc  f1a40401          SUB      r4,r4,#1
                  |L1.480|
;;;127        }
;;;128        /* draw lines from inside (center) */
;;;129        LCD_HL_DrawHLine(x0-x,y0+i, x0+x);
0001e0  192a              ADDS     r2,r5,r4
0001e2  eb080107          ADD      r1,r8,r7
0001e6  1b28              SUBS     r0,r5,r4
0001e8  f8dfc224          LDR      r12,|L1.1040|
0001ec  f8dcc058          LDR      r12,[r12,#0x58]  ; GUI_Context
0001f0  f8dc3000          LDR      r3,[r12,#0]
0001f4  4798              BLX      r3
;;;130        LCD_HL_DrawHLine(x0-x,y0-i, x0+x);
0001f6  192a              ADDS     r2,r5,r4
0001f8  eba80107          SUB      r1,r8,r7
0001fc  1b28              SUBS     r0,r5,r4
0001fe  f8dfc210          LDR      r12,|L1.1040|
000202  f8dcc058          LDR      r12,[r12,#0x58]  ; GUI_Context
000206  f8dc3000          LDR      r3,[r12,#0]
00020a  4798              BLX      r3
00020c  f1070701          ADD      r7,r7,#1              ;119
                  |L1.528|
000210  454f              CMP      r7,r9                 ;119
000212  ddb9              BLE      |L1.392|
;;;131      }
;;;132    }
000214  e8bd87f0          POP      {r4-r10,pc}
;;;133    
                          ENDP

                  GUI_FillCircle PROC
;;;137    */
;;;138    void GUI_FillCircle(int x0, int y0, int r) {
000218  b570              PUSH     {r4-r6,lr}
00021a  4604              MOV      r4,r0
00021c  460d              MOV      r5,r1
00021e  4616              MOV      r6,r2
;;;139      GUI_LOCK();
;;;140      #if (GUI_WINSUPPORT)
;;;141        WM_ADDORG(x0,y0);
000220  487b              LDR      r0,|L1.1040|
000222  6c00              LDR      r0,[r0,#0x40]  ; GUI_Context
000224  4404              ADD      r4,r4,r0
000226  487a              LDR      r0,|L1.1040|
000228  6c40              LDR      r0,[r0,#0x44]  ; GUI_Context
00022a  4405              ADD      r5,r5,r0
;;;142        WM_ITERATE_START(NULL); {
00022c  f04f0000          MOV      r0,#0
000230  f7fffffe          BL       WM__InitIVRSearch
000234  b148              CBZ      r0,|L1.586|
000236  bf00              NOP      
                  |L1.568|
;;;143      #endif
;;;144      GL_FillCircle(x0,y0,r);
000238  4632              MOV      r2,r6
00023a  4629              MOV      r1,r5
00023c  4620              MOV      r0,r4
00023e  f7fffffe          BL       GL_FillCircle
;;;145      #if (GUI_WINSUPPORT)
;;;146        } WM_ITERATE_END();
000242  f7fffffe          BL       WM__GetNextIVR
000246  2800              CMP      r0,#0
000248  d1f6              BNE      |L1.568|
                  |L1.586|
;;;147      #endif
;;;148      GUI_UNLOCK();
;;;149    }
00024a  bd70              POP      {r4-r6,pc}
;;;150    
                          ENDP

                  GL_FillEllipse PROC
;;;171    */
;;;172    void GL_FillEllipse(int x0, int y0, int rx, int ry) {
00024c  e92d4ffe          PUSH     {r1-r11,lr}
000250  4680              MOV      r8,r0
000252  4689              MOV      r9,r1
000254  4616              MOV      r6,r2
000256  461c              MOV      r4,r3
;;;173      I32 OutConst, Sum, SumY;
;;;174      int x,y;
;;;175      U32 _rx = rx;
000258  46b2              MOV      r10,r6
;;;176      U32 _ry = ry;
00025a  46a3              MOV      r11,r4
;;;177      OutConst = _rx*_rx*_ry*_ry  /* Constant as explaint above */
00025c  fb0af00a          MUL      r0,r10,r10
000260  fb00f00b          MUL      r0,r0,r11
000264  fb00f10b          MUL      r1,r0,r11
000268  fb0af00a          MUL      r0,r10,r10
00026c  fb00f00b          MUL      r0,r0,r11
000270  eb010050          ADD      r0,r1,r0,LSR #1
000274  9002              STR      r0,[sp,#8]
;;;178                +(_rx*_rx*_ry>>1); /* To compensate for rounding */
;;;179      x = rx;
000276  4635              MOV      r5,r6
;;;180      for (y=0; y<=ry; y++) {
000278  f04f0700          MOV      r7,#0
00027c  e038              B        |L1.752|
                  |L1.638|
;;;181        SumY =((I32)(rx*rx))*((I32)(y*y)); /* Does not change in loop */
00027e  fb06f006          MUL      r0,r6,r6
000282  fb07f107          MUL      r1,r7,r7
000286  4348              MULS     r0,r1,r0
000288  9000              STR      r0,[sp,#0]
;;;182        while (Sum = SumY + ((I32)(ry*ry))*((I32)(x*x)),
00028a  e001              B        |L1.656|
                  |L1.652|
;;;183               (x>0) && (Sum>OutConst))
;;;184        {
;;;185          x--;
00028c  f1a50501          SUB      r5,r5,#1
                  |L1.656|
000290  fb04f004          MUL      r0,r4,r4              ;182
000294  fb05f105          MUL      r1,r5,r5              ;182
000298  9a00              LDR      r2,[sp,#0]            ;182
00029a  fb002001          MLA      r0,r0,r1,r2           ;182
00029e  9001              STR      r0,[sp,#4]            ;182
0002a0  2d00              CMP      r5,#0                 ;183
0002a2  dd05              BLE      |L1.688|
0002a4  e9dd0101          LDRD     r0,r1,[sp,#4]         ;183
0002a8  4288              CMP      r0,r1                 ;183
0002aa  dd01              BLE      |L1.688|
0002ac  2001              MOVS     r0,#1                 ;183
0002ae  e000              B        |L1.690|
                  |L1.688|
0002b0  2000              MOVS     r0,#0                 ;183
                  |L1.690|
0002b2  2800              CMP      r0,#0                 ;183
0002b4  d1ea              BNE      |L1.652|
;;;186        }
;;;187        LCD_HL_DrawHLine(x0-x, y0+y, x0+x);
0002b6  eb080205          ADD      r2,r8,r5
0002ba  eb090107          ADD      r1,r9,r7
0002be  eba80005          SUB      r0,r8,r5
0002c2  f8dfc14c          LDR      r12,|L1.1040|
0002c6  f8dcc058          LDR      r12,[r12,#0x58]  ; GUI_Context
0002ca  f8dc3000          LDR      r3,[r12,#0]
0002ce  4798              BLX      r3
;;;188        if (y)
0002d0  b167              CBZ      r7,|L1.748|
;;;189          LCD_HL_DrawHLine(x0-x, y0-y, x0+x);
0002d2  eb080205          ADD      r2,r8,r5
0002d6  eba90107          SUB      r1,r9,r7
0002da  eba80005          SUB      r0,r8,r5
0002de  f8dfc130          LDR      r12,|L1.1040|
0002e2  f8dcc058          LDR      r12,[r12,#0x58]  ; GUI_Context
0002e6  f8dc3000          LDR      r3,[r12,#0]
0002ea  4798              BLX      r3
                  |L1.748|
0002ec  f1070701          ADD      r7,r7,#1              ;180
                  |L1.752|
0002f0  42a7              CMP      r7,r4                 ;180
0002f2  ddc4              BLE      |L1.638|
;;;190      }
;;;191    }
0002f4  e8bd8ffe          POP      {r1-r11,pc}
;;;192    
                          ENDP

                  GUI_FillEllipse PROC
;;;196    */
;;;197    void GUI_FillEllipse(int x0, int y0, int rx, int ry) {
0002f8  e92d41fc          PUSH     {r2-r8,lr}
0002fc  4604              MOV      r4,r0
0002fe  460d              MOV      r5,r1
000300  4616              MOV      r6,r2
000302  461f              MOV      r7,r3
;;;198      #if (GUI_WINSUPPORT)
;;;199        GUI_RECT r;
;;;200      #endif
;;;201      GUI_LOCK();
;;;202      #if (GUI_WINSUPPORT)
;;;203        WM_ADDORG(x0,y0);
000304  4842              LDR      r0,|L1.1040|
000306  6c00              LDR      r0,[r0,#0x40]  ; GUI_Context
000308  4404              ADD      r4,r4,r0
00030a  4841              LDR      r0,|L1.1040|
00030c  6c40              LDR      r0,[r0,#0x44]  ; GUI_Context
00030e  4405              ADD      r5,r5,r0
;;;204        /* Calc rectangle in order to avoid unnecessary drawing ops. */
;;;205        r.x0 = x0-rx; r.x1 = x0+rx; r.y0 = y0-ry; r.y1 = y0+ry;
000310  eba40006          SUB      r0,r4,r6
000314  b200              SXTH     r0,r0
000316  f8ad0000          STRH     r0,[sp,#0]
00031a  eb040006          ADD      r0,r4,r6
00031e  b200              SXTH     r0,r0
000320  f8ad0004          STRH     r0,[sp,#4]
000324  eba50007          SUB      r0,r5,r7
000328  b200              SXTH     r0,r0
00032a  f8ad0002          STRH     r0,[sp,#2]
00032e  eb050007          ADD      r0,r5,r7
000332  b200              SXTH     r0,r0
000334  f8ad0006          STRH     r0,[sp,#6]
;;;206        WM_ITERATE_START(&r); {
000338  4668              MOV      r0,sp
00033a  f7fffffe          BL       WM__InitIVRSearch
00033e  b150              CBZ      r0,|L1.854|
000340  bf00              NOP      
                  |L1.834|
;;;207      #endif
;;;208      GL_FillEllipse (x0,y0, rx, ry);
000342  463b              MOV      r3,r7
000344  4632              MOV      r2,r6
000346  4629              MOV      r1,r5
000348  4620              MOV      r0,r4
00034a  f7fffffe          BL       GL_FillEllipse
;;;209      #if (GUI_WINSUPPORT)
;;;210        } WM_ITERATE_END();
00034e  f7fffffe          BL       WM__GetNextIVR
000352  2800              CMP      r0,#0
000354  d1f5              BNE      |L1.834|
                  |L1.854|
;;;211      #endif
;;;212      GUI_UNLOCK();
;;;213    }
000356  e8bd81fc          POP      {r2-r8,pc}
;;;214    
                          ENDP

                  GL_DrawEllipse PROC
;;;218    */
;;;219    void GL_DrawEllipse(int x0, int y0, int rx, int ry) {
00035a  e92d5fff          PUSH     {r0-r12,lr}
00035e  4605              MOV      r5,r0
000360  460e              MOV      r6,r1
000362  4691              MOV      r9,r2
000364  461f              MOV      r7,r3
;;;220      I32 OutConst, Sum, SumY;
;;;221      int x,y;
;;;222      int xOld;
;;;223      U32 _rx = rx;
000366  46cb              MOV      r11,r9
;;;224      U32 _ry = ry;
000368  9700              STR      r7,[sp,#0]
;;;225      OutConst = _rx*_rx*_ry*_ry  /* Constant as explaint above */
00036a  fb0bf00b          MUL      r0,r11,r11
00036e  9f00              LDR      r7,[sp,#0]
000370  fb00f007          MUL      r0,r0,r7
000374  fb00f107          MUL      r1,r0,r7
000378  fb0bf00b          MUL      r0,r11,r11
00037c  fb00f007          MUL      r0,r0,r7
000380  eb010050          ADD      r0,r1,r0,LSR #1
000384  9003              STR      r0,[sp,#0xc]
;;;226                +(_rx*_rx*_ry>>1); /* To compensate for rounding */
;;;227      xOld = x = rx;
000386  46c8              MOV      r8,r9
000388  46ca              MOV      r10,r9
;;;228      for (y=0; y<=ry; y++) {
00038a  f04f0400          MOV      r4,#0
00038e  e055              B        |L1.1084|
                  |L1.912|
;;;229        if (y==ry) {
000390  42bc              CMP      r4,r7
000392  d102              BNE      |L1.922|
;;;230          x=0;
000394  f04f0800          MOV      r8,#0
000398  e01c              B        |L1.980|
                  |L1.922|
;;;231        } else {
;;;232          SumY =((I32)(rx*rx))*((I32)(y*y)); /* Does not change in loop */
00039a  fb09f009          MUL      r0,r9,r9
00039e  fb04f104          MUL      r1,r4,r4
0003a2  4348              MULS     r0,r1,r0
0003a4  9001              STR      r0,[sp,#4]
;;;233          while (Sum = SumY + ((I32)(ry*ry))*((I32)(x*x)),
0003a6  e001              B        |L1.940|
                  |L1.936|
;;;234                 (x>0) && (Sum>OutConst)) x--;
0003a8  f1a80801          SUB      r8,r8,#1
                  |L1.940|
0003ac  fb07f007          MUL      r0,r7,r7              ;233
0003b0  fb08f108          MUL      r1,r8,r8              ;233
0003b4  9a01              LDR      r2,[sp,#4]            ;233
0003b6  fb002001          MLA      r0,r0,r1,r2           ;233
0003ba  9002              STR      r0,[sp,#8]            ;233
0003bc  f1b80f00          CMP      r8,#0
0003c0  dd05              BLE      |L1.974|
0003c2  e9dd0102          LDRD     r0,r1,[sp,#8]
0003c6  4288              CMP      r0,r1
0003c8  dd01              BLE      |L1.974|
0003ca  2001              MOVS     r0,#1
0003cc  e000              B        |L1.976|
                  |L1.974|
0003ce  2000              MOVS     r0,#0
                  |L1.976|
0003d0  2800              CMP      r0,#0
0003d2  d1e9              BNE      |L1.936|
                  |L1.980|
;;;235        }
;;;236        /* Since we draw lines, we can not draw on the first
;;;237            iteration
;;;238        */
;;;239        if (y) {
0003d4  b37c              CBZ      r4,|L1.1078|
;;;240          GL_DrawLine1(x0-xOld,y0-y+1,x0-x,y0-y);
0003d6  1b33              SUBS     r3,r6,r4
0003d8  eba50208          SUB      r2,r5,r8
0003dc  eba60c04          SUB      r12,r6,r4
0003e0  f10c0101          ADD      r1,r12,#1
0003e4  eba5000a          SUB      r0,r5,r10
0003e8  f7fffffe          BL       GL_DrawLine1
;;;241          GL_DrawLine1(x0-xOld,y0+y-1,x0-x,y0+y);
0003ec  1933              ADDS     r3,r6,r4
0003ee  eba50208          SUB      r2,r5,r8
0003f2  eb060c04          ADD      r12,r6,r4
0003f6  f1ac0101          SUB      r1,r12,#1
0003fa  eba5000a          SUB      r0,r5,r10
0003fe  f7fffffe          BL       GL_DrawLine1
;;;242          GL_DrawLine1(x0+xOld,y0-y+1,x0+x,y0-y);
000402  1b33              SUBS     r3,r6,r4
000404  eb050208          ADD      r2,r5,r8
000408  eba60c04          SUB      r12,r6,r4
00040c  e002              B        |L1.1044|
00040e  0000              DCW      0x0000
                  |L1.1040|
                          DCD      GUI_Context
                  |L1.1044|
000414  f10c0101          ADD      r1,r12,#1
000418  eb05000a          ADD      r0,r5,r10
00041c  f7fffffe          BL       GL_DrawLine1
;;;243          GL_DrawLine1(x0+xOld,y0+y-1,x0+x,y0+y);
000420  1933              ADDS     r3,r6,r4
000422  eb050208          ADD      r2,r5,r8
000426  eb060c04          ADD      r12,r6,r4
00042a  f1ac0101          SUB      r1,r12,#1
00042e  eb05000a          ADD      r0,r5,r10
000432  f7fffffe          BL       GL_DrawLine1
                  |L1.1078|
;;;244        }
;;;245        xOld = x;
000436  46c2              MOV      r10,r8
000438  f1040401          ADD      r4,r4,#1              ;228
                  |L1.1084|
00043c  42bc              CMP      r4,r7                 ;228
00043e  dda7              BLE      |L1.912|
;;;246      }
;;;247    }
000440  e8bd9fff          POP      {r0-r12,pc}
;;;248    
                          ENDP

                  GUI_DrawEllipse PROC
;;;252    */
;;;253    void GUI_DrawEllipse(int x0, int y0, int rx, int ry) {
000444  e92d41fc          PUSH     {r2-r8,lr}
000448  4604              MOV      r4,r0
00044a  460d              MOV      r5,r1
00044c  4616              MOV      r6,r2
00044e  461f              MOV      r7,r3
;;;254      #if (GUI_WINSUPPORT)
;;;255        GUI_RECT r;
;;;256      #endif
;;;257      GUI_LOCK();
;;;258      #if (GUI_WINSUPPORT)
;;;259        WM_ADDORG(x0,y0);
000450  4815              LDR      r0,|L1.1192|
000452  6c00              LDR      r0,[r0,#0x40]  ; GUI_Context
000454  4404              ADD      r4,r4,r0
000456  4814              LDR      r0,|L1.1192|
000458  6c40              LDR      r0,[r0,#0x44]  ; GUI_Context
00045a  4405              ADD      r5,r5,r0
;;;260      /* Calc rectangle in order to avoid unnecessary drawing ops. */
;;;261        r.x0 = x0-rx; r.x1 = x0+rx; r.y0 = y0-ry; r.y1 = y0+ry;
00045c  eba40006          SUB      r0,r4,r6
000460  b200              SXTH     r0,r0
000462  f8ad0000          STRH     r0,[sp,#0]
000466  eb040006          ADD      r0,r4,r6
00046a  b200              SXTH     r0,r0
00046c  f8ad0004          STRH     r0,[sp,#4]
000470  eba50007          SUB      r0,r5,r7
000474  b200              SXTH     r0,r0
000476  f8ad0002          STRH     r0,[sp,#2]
00047a  eb050007          ADD      r0,r5,r7
00047e  b200              SXTH     r0,r0
000480  f8ad0006          STRH     r0,[sp,#6]
;;;262        WM_ITERATE_START(&r); {
000484  4668              MOV      r0,sp
000486  f7fffffe          BL       WM__InitIVRSearch
00048a  b150              CBZ      r0,|L1.1186|
00048c  bf00              NOP      
                  |L1.1166|
;;;263      #endif
;;;264      GL_DrawEllipse(x0, y0, rx, ry);
00048e  463b              MOV      r3,r7
000490  4632              MOV      r2,r6
000492  4629              MOV      r1,r5
000494  4620              MOV      r0,r4
000496  f7fffffe          BL       GL_DrawEllipse
;;;265      #if (GUI_WINSUPPORT)
;;;266        } WM_ITERATE_END();
00049a  f7fffffe          BL       WM__GetNextIVR
00049e  2800              CMP      r0,#0
0004a0  d1f5              BNE      |L1.1166|
                  |L1.1186|
;;;267      #endif
;;;268      GUI_UNLOCK();
;;;269    }
0004a2  e8bd81fc          POP      {r2-r8,pc}
;;;270    
                          ENDP

0004a6  0000              DCW      0x0000
                  |L1.1192|
                          DCD      GUI_Context
