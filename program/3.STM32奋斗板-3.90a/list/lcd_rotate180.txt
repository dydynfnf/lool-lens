; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\lcd_rotate180.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\lcd_rotate180.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -I.\GUI\AntiAlias -I.\GUI\Config -I.\GUI\ConvertColor -I.\GUI\ConvertMono -I.\GUI\Core -I.\GUI\Font -I.\GUI\GUI_X -I.\GUI\JPEG -I.\GUI\LCDDriver -I.\GUI\MemDev -I.\GUI\MultiLayer -I.\GUI\Widget -I.\GUI\WM -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\INC\ST\STM32F10x -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\lcd_rotate180.crf GUI\Core\LCD_Rotate180.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _DrawBitLine1BPP PROC
;;;37     */
;;;38     static void  _DrawBitLine1BPP(int x, int y, U8 const GUI_UNI_PTR *p, int Diff, int xsize, const LCD_PIXELINDEX*pTrans) {
000000  e92d4ff8          PUSH     {r3-r11,lr}
000004  4606              MOV      r6,r0
000006  4689              MOV      r9,r1
000008  4615              MOV      r5,r2
00000a  461c              MOV      r4,r3
00000c  e9dd780a          LDRD     r7,r8,[sp,#0x28]
;;;39       LCD_PIXELINDEX Index0 = *(pTrans+0);
000010  f8b80000          LDRH     r0,[r8,#0]
000014  9000              STR      r0,[sp,#0]
;;;40       LCD_PIXELINDEX Index1 = *(pTrans+1);
000016  f8b8a002          LDRH     r10,[r8,#2]
;;;41       x -= Diff;
00001a  eba60604          SUB      r6,r6,r4
;;;42       switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
00001e  48ef              LDR      r0,|L1.988|
000020  7b00              LDRB     r0,[r0,#0xc]  ; GUI_Context
000022  f0100003          ANDS     r0,r0,#3
000026  d004              BEQ      |L1.50|
000028  2801              CMP      r0,#1
00002a  d041              BEQ      |L1.176|
00002c  2802              CMP      r0,#2
00002e  d166              BNE      |L1.254|
000030  e020              B        |L1.116|
                  |L1.50|
;;;43       case 0:
;;;44         do {
000032  bf00              NOP      
                  |L1.52|
;;;45           LCDDEV_L0_SetPixelIndex(x--, y, (*p & (0x80 >> Diff)) ? Index1 : Index0);
000034  7829              LDRB     r1,[r5,#0]
000036  f04f0c80          MOV      r12,#0x80
00003a  fa4cfc04          ASR      r12,r12,r4
00003e  ea110f0c          TST      r1,r12
000042  d001              BEQ      |L1.72|
000044  4651              MOV      r1,r10
000046  e000              B        |L1.74|
                  |L1.72|
000048  9900              LDR      r1,[sp,#0]
                  |L1.74|
00004a  460a              MOV      r2,r1
00004c  4630              MOV      r0,r6
00004e  1e76              SUBS     r6,r6,#1
000050  49e2              LDR      r1,|L1.988|
000052  6c89              LDR      r1,[r1,#0x48]  ; GUI_Context
000054  6a4b              LDR      r3,[r1,#0x24]
000056  4649              MOV      r1,r9
000058  4798              BLX      r3
;;;46     			if (++Diff == 8) {
00005a  1c60              ADDS     r0,r4,#1
00005c  4604              MOV      r4,r0
00005e  2808              CMP      r0,#8
000060  d103              BNE      |L1.106|
;;;47             Diff = 0;
000062  f04f0400          MOV      r4,#0
;;;48     				p++;
000066  f1050501          ADD      r5,r5,#1
                  |L1.106|
;;;49     			}
;;;50     		} while (--xsize);
00006a  f1a70001          SUB      r0,r7,#1
00006e  0007              MOVS     r7,r0
000070  d1e0              BNE      |L1.52|
;;;51         break;
000072  e044              B        |L1.254|
                  |L1.116|
;;;52       case LCD_DRAWMODE_TRANS:
;;;53         do {
000074  bf00              NOP      
                  |L1.118|
;;;54       		if (*p & (0x80 >> Diff))
000076  7828              LDRB     r0,[r5,#0]
000078  2180              MOVS     r1,#0x80
00007a  fa41f104          ASR      r1,r1,r4
00007e  4208              TST      r0,r1
000080  d006              BEQ      |L1.144|
;;;55             LCDDEV_L0_SetPixelIndex(x, y, Index1);
000082  48d6              LDR      r0,|L1.988|
000084  6c80              LDR      r0,[r0,#0x48]  ; GUI_Context
000086  4652              MOV      r2,r10
000088  4649              MOV      r1,r9
00008a  6a43              LDR      r3,[r0,#0x24]
00008c  4630              MOV      r0,r6
00008e  4798              BLX      r3
                  |L1.144|
;;;56           x--;
000090  f1a60601          SUB      r6,r6,#1
;;;57     			if (++Diff == 8) {
000094  f1040001          ADD      r0,r4,#1
000098  4604              MOV      r4,r0
00009a  2808              CMP      r0,#8
00009c  d103              BNE      |L1.166|
;;;58             Diff = 0;
00009e  f04f0400          MOV      r4,#0
;;;59     				p++;
0000a2  f1050501          ADD      r5,r5,#1
                  |L1.166|
;;;60     			}
;;;61     		} while (--xsize);
0000a6  f1a70001          SUB      r0,r7,#1
0000aa  0007              MOVS     r7,r0
0000ac  d1e3              BNE      |L1.118|
;;;62         break;
0000ae  e026              B        |L1.254|
                  |L1.176|
;;;63       case LCD_DRAWMODE_XOR:;
;;;64         do {
0000b0  bf00              NOP      
                  |L1.178|
;;;65       		if (*p & (0x80 >> Diff)) {
0000b2  7828              LDRB     r0,[r5,#0]
0000b4  2180              MOVS     r1,#0x80
0000b6  fa41f104          ASR      r1,r1,r4
0000ba  4208              TST      r0,r1
0000bc  d00f              BEQ      |L1.222|
;;;66             int Pixel = LCD_L0_GetPixelIndex(x, y);
0000be  4649              MOV      r1,r9
0000c0  4630              MOV      r0,r6
0000c2  f7fffffe          BL       LCD_L0_GetPixelIndex
0000c6  4683              MOV      r11,r0
;;;67             LCDDEV_L0_SetPixelIndex(x, y, LCD_NUM_COLORS - 1 - Pixel);
0000c8  f64f70ff          MOV      r0,#0xffff
0000cc  eba0020b          SUB      r2,r0,r11
0000d0  48c2              LDR      r0,|L1.988|
0000d2  6c80              LDR      r0,[r0,#0x48]  ; GUI_Context
0000d4  4649              MOV      r1,r9
0000d6  6a43              LDR      r3,[r0,#0x24]
0000d8  4630              MOV      r0,r6
0000da  4798              BLX      r3
;;;68           }
0000dc  bf00              NOP      
                  |L1.222|
;;;69           x--;
0000de  f1a60601          SUB      r6,r6,#1
;;;70     			if (++Diff == 8) {
0000e2  f1040001          ADD      r0,r4,#1
0000e6  4604              MOV      r4,r0
0000e8  2808              CMP      r0,#8
0000ea  d103              BNE      |L1.244|
;;;71             Diff = 0;
0000ec  f04f0400          MOV      r4,#0
;;;72     				p++;
0000f0  f1050501          ADD      r5,r5,#1
                  |L1.244|
;;;73     			}
;;;74     		} while (--xsize);
0000f4  f1a70001          SUB      r0,r7,#1
0000f8  0007              MOVS     r7,r0
0000fa  d1da              BNE      |L1.178|
;;;75         break;
0000fc  bf00              NOP      
                  |L1.254|
0000fe  bf00              NOP                            ;51
;;;76     	}
;;;77     }
000100  e8bd8ff8          POP      {r3-r11,pc}
;;;78     
                          ENDP

                  _DrawBitmap PROC
;;;85     */
;;;86     static void _DrawBitmap(int x0, int y0,
000104  e92d5ffc          PUSH     {r2-r12,lr}
;;;87                            int xsize, int ysize,
;;;88                            int BitsPerPixel, 
;;;89                            int BytesPerLine,
;;;90                            const U8 GUI_UNI_PTR * pData, int Diff,
;;;91                            const LCD_PIXELINDEX* pTrans)
;;;92     {
000108  4681              MOV      r9,r0
00010a  460d              MOV      r5,r1
00010c  4616              MOV      r6,r2
00010e  461f              MOV      r7,r3
000110  f8ddb040          LDR      r11,[sp,#0x40]
000114  f8dda030          LDR      r10,[sp,#0x30]
000118  f8dd8038          LDR      r8,[sp,#0x38]
;;;93       int i;
;;;94       /* Use _DrawBitLineXBPP */
;;;95       for (i = 0; i < ysize; i++) {
00011c  f04f0400          MOV      r4,#0
000120  e010              B        |L1.324|
                  |L1.290|
;;;96         switch (BitsPerPixel) {
000122  f1ba0f01          CMP      r10,#1
000126  d108              BNE      |L1.314|
;;;97         case 1:
;;;98           _DrawBitLine1BPP(x0, y0 - i, pData, Diff, xsize, pTrans);
000128  1b29              SUBS     r1,r5,r4
00012a  e9cd6b00          STRD     r6,r11,[sp,#0]
00012e  4642              MOV      r2,r8
000130  4648              MOV      r0,r9
000132  9b0f              LDR      r3,[sp,#0x3c]
000134  f7fffffe          BL       _DrawBitLine1BPP
;;;99           break;
000138  bf00              NOP      
                  |L1.314|
00013a  bf00              NOP      
;;;100        }
;;;101        pData += BytesPerLine;
00013c  980d              LDR      r0,[sp,#0x34]
00013e  4480              ADD      r8,r8,r0
000140  f1040401          ADD      r4,r4,#1              ;95
                  |L1.324|
000144  42bc              CMP      r4,r7                 ;95
000146  dbec              BLT      |L1.290|
;;;102      }
;;;103    }
000148  e8bd9ffc          POP      {r2-r12,pc}
;;;104    
                          ENDP

                  _Rect2TextRect PROC
;;;112    */
;;;113    static void _Rect2TextRect(GUI_RECT * pRect) {
00014c  bf00              NOP      
;;;114      GUI_USE_PARA(pRect);
;;;115      /* nothing to do in case of rotating text by 180 degrees */
;;;116    }
00014e  4770              BX       lr
;;;117    
                          ENDP

                  _TransformPoint180 PROC
;;;126    */
;;;127    static void _TransformPoint180(int * pXPos, int * pYPos) {
000150  e92d47fc          PUSH     {r2-r10,lr}
000154  4604              MOV      r4,r0
000156  460d              MOV      r5,r1
;;;128      GUI_RECT ClientRect = {0};
000158  f04f0000          MOV      r0,#0
00015c  9000              STR      r0,[sp,#0]
00015e  9001              STR      r0,[sp,#4]
;;;129      int xPos, yPos, xNumPixel, yNumPixel;
;;;130      /* Get the client rectangle */
;;;131      #if GUI_WINSUPPORT
;;;132        WM_GetWindowRect(&ClientRect);
000160  4668              MOV      r0,sp
000162  f7fffffe          BL       WM_GetWindowRect
;;;133      #else
;;;134        GUI_GetClientRect(&ClientRect);
;;;135      #endif
;;;136      xNumPixel = LCD_GetXSize() - 1;
000166  f7fffffe          BL       LCD_GetXSize
00016a  f1a00801          SUB      r8,r0,#1
;;;137      yNumPixel = LCD_GetYSize() - 1;
00016e  f7fffffe          BL       LCD_GetYSize
000172  f1a00901          SUB      r9,r0,#1
;;;138      if (ClientRect.x1 > xNumPixel) {
000176  f9bd0004          LDRSH    r0,[sp,#4]
00017a  4540              CMP      r0,r8
00017c  dd03              BLE      |L1.390|
;;;139        ClientRect.x1 = xNumPixel;
00017e  fa0ff088          SXTH     r0,r8
000182  f8ad0004          STRH     r0,[sp,#4]
                  |L1.390|
;;;140      }
;;;141      if (ClientRect.y1 > yNumPixel) {
000186  f9bd0006          LDRSH    r0,[sp,#6]
00018a  4548              CMP      r0,r9
00018c  dd03              BLE      |L1.406|
;;;142        ClientRect.y1 = yNumPixel;
00018e  fa0ff089          SXTH     r0,r9
000192  f8ad0006          STRH     r0,[sp,#6]
                  |L1.406|
;;;143      }
;;;144      /* Save old positions */
;;;145      xPos = *pXPos;
000196  6826              LDR      r6,[r4,#0]
;;;146      yPos = *pYPos;
000198  682f              LDR      r7,[r5,#0]
;;;147      /* Handle rotation of text rectangle */
;;;148      *pXPos = ClientRect.x0 + GUI_RectDispString.x1 - (xPos - GUI_RectDispString.x0);
00019a  f9bd0000          LDRSH    r0,[sp,#0]
00019e  4990              LDR      r1,|L1.992|
0001a0  f9b11004          LDRSH    r1,[r1,#4]  ; GUI_RectDispString
0001a4  4408              ADD      r0,r0,r1
0001a6  498e              LDR      r1,|L1.992|
0001a8  f9b11000          LDRSH    r1,[r1,#0]  ; GUI_RectDispString
0001ac  eba60101          SUB      r1,r6,r1
0001b0  eba00001          SUB      r0,r0,r1
0001b4  6020              STR      r0,[r4,#0]
;;;149      *pYPos = ClientRect.y0 + GUI_RectDispString.y1 - (yPos - GUI_RectDispString.y0);
0001b6  f9bd0002          LDRSH    r0,[sp,#2]
0001ba  4989              LDR      r1,|L1.992|
0001bc  f9b11006          LDRSH    r1,[r1,#6]  ; GUI_RectDispString
0001c0  4408              ADD      r0,r0,r1
0001c2  4987              LDR      r1,|L1.992|
0001c4  f9b11002          LDRSH    r1,[r1,#2]  ; GUI_RectDispString
0001c8  eba70101          SUB      r1,r7,r1
0001cc  eba00001          SUB      r0,r0,r1
0001d0  6028              STR      r0,[r5,#0]
;;;150    }
0001d2  e8bd87fc          POP      {r2-r10,pc}
;;;151    
                          ENDP

                  _DrawBitmap180 PROC
;;;155    */
;;;156    static void _DrawBitmap180(int x0, int y0, int xsize, int ysize, int xMul, int yMul,
0001d6  e92d4fff          PUSH     {r0-r11,lr}
;;;157                               int BitsPerPixel, int BytesPerLine,
;;;158                               const U8 GUI_UNI_PTR * pPixel, const LCD_PIXELINDEX* pTrans)
;;;159    {
0001da  b08b              SUB      sp,sp,#0x2c
0001dc  4614              MOV      r4,r2
0001de  461d              MOV      r5,r3
0001e0  f8dda060          LDR      r10,[sp,#0x60]
0001e4  f8dd8070          LDR      r8,[sp,#0x70]
0001e8  9f1a              LDR      r7,[sp,#0x68]
;;;160      U8  Data = 0;
0001ea  f04f0000          MOV      r0,#0
0001ee  900a              STR      r0,[sp,#0x28]
;;;161      int x1, y1;
;;;162      /* Handle the optional Y-magnification */
;;;163      y1 = y0 + ysize - 1;
0001f0  980c              LDR      r0,[sp,#0x30]
0001f2  4428              ADD      r0,r0,r5
0001f4  f1a00001          SUB      r0,r0,#1
0001f8  9008              STR      r0,[sp,#0x20]
;;;164      x1 = x0 + xsize - 1;
0001fa  980b              LDR      r0,[sp,#0x2c]
0001fc  4420              ADD      r0,r0,r4
0001fe  f1a00001          SUB      r0,r0,#1
000202  9009              STR      r0,[sp,#0x24]
;;;165      /* Rotate positions */
;;;166      _TransformPoint180(&x0, &y0);
000204  a90c              ADD      r1,sp,#0x30
000206  a80b              ADD      r0,sp,#0x2c
000208  f7fffffe          BL       _TransformPoint180
;;;167      _TransformPoint180(&x1, &y1);
00020c  a908              ADD      r1,sp,#0x20
00020e  a809              ADD      r0,sp,#0x24
000210  f7fffffe          BL       _TransformPoint180
;;;168      /*  Handle BITMAP without magnification */
;;;169      if ((xMul == 1) && (yMul == 1)) {
000214  f1ba0f01          CMP      r10,#1
000218  d16a              BNE      |L1.752|
00021a  9819              LDR      r0,[sp,#0x64]
00021c  2801              CMP      r0,#1
00021e  d167              BNE      |L1.752|
;;;170        int Diff;
;;;171        /* Clip top */
;;;172        if (y0 > GUI_Context.ClipRect.y1) {
000220  486e              LDR      r0,|L1.988|
000222  f9b0000a          LDRSH    r0,[r0,#0xa]
000226  990c              LDR      r1,[sp,#0x30]
000228  4288              CMP      r0,r1
00022a  da0f              BGE      |L1.588|
;;;173          int Diff = y0 - GUI_Context.ClipRect.y1;
00022c  496b              LDR      r1,|L1.988|
00022e  f9b1100a          LDRSH    r1,[r1,#0xa]  ; GUI_Context
000232  9a0c              LDR      r2,[sp,#0x30]
000234  eba20001          SUB      r0,r2,r1
;;;174          y0       = GUI_Context.ClipRect.y1;
000238  4968              LDR      r1,|L1.988|
00023a  f9b1100a          LDRSH    r1,[r1,#0xa]
00023e  910c              STR      r1,[sp,#0x30]
;;;175          pPixel  += Diff * BytesPerLine;
000240  991b              LDR      r1,[sp,#0x6c]
000242  fb008801          MLA      r8,r0,r1,r8
;;;176          ysize   -= Diff;
000246  eba50500          SUB      r5,r5,r0
;;;177        }
00024a  bf00              NOP      
                  |L1.588|
;;;178        /* Clip bottom */
;;;179        if (y1 < GUI_Context.ClipRect.y0) {
00024c  4863              LDR      r0,|L1.988|
00024e  f9b00006          LDRSH    r0,[r0,#6]
000252  9908              LDR      r1,[sp,#0x20]
000254  4288              CMP      r0,r1
000256  dd08              BLE      |L1.618|
;;;180          int Diff = GUI_Context.ClipRect.y0 - y1;
000258  4960              LDR      r1,|L1.988|
00025a  f9b11006          LDRSH    r1,[r1,#6]  ; GUI_Context
00025e  9a08              LDR      r2,[sp,#0x20]
000260  eba10002          SUB      r0,r1,r2
;;;181          ysize -= Diff;
000264  eba50500          SUB      r5,r5,r0
;;;182        }
000268  bf00              NOP      
                  |L1.618|
;;;183        if (ysize <= 0) {
00026a  2d00              CMP      r5,#0
00026c  dc02              BGT      |L1.628|
                  |L1.622|
;;;184    		  return;
;;;185        }
;;;186        /* Clip right side */
;;;187        if (x1 < GUI_Context.ClipRect.x0) {
;;;188          int Diff = GUI_Context.ClipRect.x0 - x1;
;;;189          xsize   -= Diff;
;;;190        }
;;;191        /* Clip left side */
;;;192        Diff = 0;
;;;193        if (x0 > GUI_Context.ClipRect.x1) {
;;;194          Diff   = x0 - GUI_Context.ClipRect.x1;
;;;195    			xsize -= Diff;
;;;196    			switch (BitsPerPixel) {
;;;197    			case 1:
;;;198      			pPixel += (Diff >> 3); x0 += (Diff >> 3) << 3; Diff &= 7;
;;;199    				break;
;;;200    			}
;;;201        }
;;;202        if (xsize <= 0) {
;;;203    		  return;
;;;204        }
;;;205        _DrawBitmap(x0, y0, xsize, ysize, BitsPerPixel, BytesPerLine, pPixel, Diff, pTrans);
;;;206      } else {
;;;207        /* Handle BITMAP with magnification */
;;;208        int x, y;
;;;209        int yi;
;;;210        int Shift = 8 - BitsPerPixel;
;;;211        for (y = y0, yi = 0; yi < ysize; yi++, y -= yMul, pPixel += BytesPerLine) {
;;;212          int yMax = y + yMul - 1;
;;;213          /* Draw if within clip area (Optimization ... "if" is not required !) */
;;;214          if ((yMax >= GUI_Context.ClipRect.y0) && (y <= GUI_Context.ClipRect.y1)) {
;;;215            int BitsLeft = 0;
;;;216            int xi;
;;;217            const U8 GUI_UNI_PTR * pDataLine = pPixel;
;;;218            for (x = x0, xi = 0; xi < xsize; xi++, x -= xMul) {
;;;219              U8  Index;
;;;220              if (!BitsLeft) {
;;;221                Data = *pDataLine++;
;;;222                BitsLeft =8;
;;;223              }
;;;224              Index = Data >> Shift;
;;;225              Data    <<= BitsPerPixel;
;;;226              BitsLeft -= BitsPerPixel;
;;;227              if (Index || ((GUI_Context.DrawMode & LCD_DRAWMODE_TRANS) == 0)) {
;;;228                LCD_PIXELINDEX OldColor = LCD_COLORINDEX;
;;;229                if (pTrans) {
;;;230                  LCD_COLORINDEX = *(pTrans + Index);
;;;231                } else {
;;;232                  LCD_COLORINDEX = Index;
;;;233                }
;;;234                LCD_FillRect(x - xMul + 1, y, x, yMax);
;;;235                LCD_COLORINDEX = OldColor;
;;;236              }
;;;237            }
;;;238          }
;;;239        }
;;;240      }
;;;241    }
00026e  b00f              ADD      sp,sp,#0x3c
000270  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.628|
000274  4859              LDR      r0,|L1.988|
000276  f9b00004          LDRSH    r0,[r0,#4]            ;187  ; GUI_Context
00027a  9909              LDR      r1,[sp,#0x24]         ;187
00027c  4288              CMP      r0,r1                 ;187
00027e  dd08              BLE      |L1.658|
000280  4956              LDR      r1,|L1.988|
000282  f9b11004          LDRSH    r1,[r1,#4]            ;188  ; GUI_Context
000286  9a09              LDR      r2,[sp,#0x24]         ;188
000288  eba10002          SUB      r0,r1,r2              ;188
00028c  eba40400          SUB      r4,r4,r0              ;189
000290  bf00              NOP                            ;190
                  |L1.658|
000292  f04f0600          MOV      r6,#0                 ;192
000296  4851              LDR      r0,|L1.988|
000298  f9b00008          LDRSH    r0,[r0,#8]            ;193
00029c  990b              LDR      r1,[sp,#0x2c]         ;193
00029e  4288              CMP      r0,r1                 ;193
0002a0  da15              BGE      |L1.718|
0002a2  484e              LDR      r0,|L1.988|
0002a4  f9b00008          LDRSH    r0,[r0,#8]            ;194
0002a8  990b              LDR      r1,[sp,#0x2c]         ;194
0002aa  eba10600          SUB      r6,r1,r0              ;194
0002ae  eba40406          SUB      r4,r4,r6              ;195
0002b2  2f01              CMP      r7,#1                 ;196
0002b4  d10a              BNE      |L1.716|
0002b6  eb0808e6          ADD      r8,r8,r6,ASR #3       ;198
0002ba  ea4f00e6          ASR      r0,r6,#3              ;198
0002be  990b              LDR      r1,[sp,#0x2c]         ;198
0002c0  eb0100c0          ADD      r0,r1,r0,LSL #3       ;198
0002c4  900b              STR      r0,[sp,#0x2c]         ;198
0002c6  f0060607          AND      r6,r6,#7              ;198
0002ca  bf00              NOP                            ;199
                  |L1.716|
0002cc  bf00              NOP                            ;199
                  |L1.718|
0002ce  2c00              CMP      r4,#0                 ;202
0002d0  dc00              BGT      |L1.724|
0002d2  e7cc              B        |L1.622|
                  |L1.724|
0002d4  991b              LDR      r1,[sp,#0x6c]         ;205
0002d6  981d              LDR      r0,[sp,#0x74]         ;205
0002d8  462b              MOV      r3,r5                 ;205
0002da  4622              MOV      r2,r4                 ;205
0002dc  e9cd8602          STRD     r8,r6,[sp,#8]         ;205
0002e0  e9cd7100          STRD     r7,r1,[sp,#0]         ;205
0002e4  9004              STR      r0,[sp,#0x10]         ;205
0002e6  e9dd010b          LDRD     r0,r1,[sp,#0x2c]      ;205
0002ea  f7fffffe          BL       _DrawBitmap
0002ee  e072              B        |L1.982|
                  |L1.752|
0002f0  f1c70008          RSB      r0,r7,#8              ;210
0002f4  9006              STR      r0,[sp,#0x18]         ;210
0002f6  9e0c              LDR      r6,[sp,#0x30]         ;211
0002f8  f04f0000          MOV      r0,#0                 ;211
0002fc  9007              STR      r0,[sp,#0x1c]         ;211
0002fe  e066              B        |L1.974|
                  |L1.768|
000300  9819              LDR      r0,[sp,#0x64]         ;212
000302  4430              ADD      r0,r0,r6              ;212
000304  f1a00001          SUB      r0,r0,#1              ;212
000308  9005              STR      r0,[sp,#0x14]         ;212
00030a  4834              LDR      r0,|L1.988|
00030c  f9b01006          LDRSH    r1,[r0,#6]            ;214
000310  9805              LDR      r0,[sp,#0x14]         ;214
000312  4281              CMP      r1,r0                 ;214
000314  dc52              BGT      |L1.956|
000316  4831              LDR      r0,|L1.988|
000318  f9b0000a          LDRSH    r0,[r0,#0xa]          ;214
00031c  42b0              CMP      r0,r6                 ;214
00031e  db4d              BLT      |L1.956|
000320  f04f0000          MOV      r0,#0                 ;215
000324  9004              STR      r0,[sp,#0x10]         ;215
000326  f8cd8008          STR      r8,[sp,#8]            ;217
00032a  f8ddb02c          LDR      r11,[sp,#0x2c]        ;218
00032e  9003              STR      r0,[sp,#0xc]          ;218
000330  e040              B        |L1.948|
                  |L1.818|
000332  9804              LDR      r0,[sp,#0x10]         ;220
000334  b948              CBNZ     r0,|L1.842|
000336  9802              LDR      r0,[sp,#8]            ;221
000338  7800              LDRB     r0,[r0,#0]            ;221
00033a  900a              STR      r0,[sp,#0x28]         ;221
00033c  9802              LDR      r0,[sp,#8]            ;221
00033e  f1000001          ADD      r0,r0,#1              ;221
000342  9002              STR      r0,[sp,#8]            ;221
000344  f04f0008          MOV      r0,#8                 ;222
000348  9004              STR      r0,[sp,#0x10]         ;222
                  |L1.842|
00034a  9906              LDR      r1,[sp,#0x18]         ;224
00034c  980a              LDR      r0,[sp,#0x28]         ;224
00034e  fa40f901          ASR      r9,r0,r1              ;224
000352  980a              LDR      r0,[sp,#0x28]         ;225
000354  fa00f007          LSL      r0,r0,r7              ;225
000358  b2c0              UXTB     r0,r0                 ;225
00035a  900a              STR      r0,[sp,#0x28]         ;225
00035c  9804              LDR      r0,[sp,#0x10]         ;226
00035e  eba00007          SUB      r0,r0,r7              ;226
000362  9004              STR      r0,[sp,#0x10]         ;226
000364  f1b90f00          CMP      r9,#0                 ;227
000368  d104              BNE      |L1.884|
00036a  481c              LDR      r0,|L1.988|
00036c  7b00              LDRB     r0,[r0,#0xc]          ;227  ; GUI_Context
00036e  f0100f02          TST      r0,#2                 ;227
000372  d119              BNE      |L1.936|
                  |L1.884|
000374  4819              LDR      r0,|L1.988|
000376  8840              LDRH     r0,[r0,#2]            ;228  ; GUI_Context
000378  9001              STR      r0,[sp,#4]            ;228
00037a  981d              LDR      r0,[sp,#0x74]         ;229
00037c  b128              CBZ      r0,|L1.906|
00037e  981d              LDR      r0,[sp,#0x74]         ;230
000380  f8300019          LDRH     r0,[r0,r9,LSL #1]     ;230
000384  4915              LDR      r1,|L1.988|
000386  8048              STRH     r0,[r1,#2]            ;230
000388  e002              B        |L1.912|
                  |L1.906|
00038a  4814              LDR      r0,|L1.988|
00038c  f8a09002          STRH     r9,[r0,#2]            ;232
                  |L1.912|
000390  ebab010a          SUB      r1,r11,r10            ;234
000394  1c48              ADDS     r0,r1,#1              ;234
000396  465a              MOV      r2,r11                ;234
000398  4631              MOV      r1,r6                 ;234
00039a  9b05              LDR      r3,[sp,#0x14]         ;234
00039c  f7fffffe          BL       LCD_FillRect
0003a0  490e              LDR      r1,|L1.988|
0003a2  9801              LDR      r0,[sp,#4]            ;235
0003a4  8048              STRH     r0,[r1,#2]            ;235
0003a6  bf00              NOP                            ;236
                  |L1.936|
0003a8  9803              LDR      r0,[sp,#0xc]          ;218
0003aa  f1000001          ADD      r0,r0,#1              ;218
0003ae  9003              STR      r0,[sp,#0xc]          ;218
0003b0  ebab0b0a          SUB      r11,r11,r10           ;218
                  |L1.948|
0003b4  9803              LDR      r0,[sp,#0xc]          ;218
0003b6  42a0              CMP      r0,r4                 ;218
0003b8  dbbb              BLT      |L1.818|
0003ba  bf00              NOP                            ;238
                  |L1.956|
0003bc  9807              LDR      r0,[sp,#0x1c]         ;211
0003be  f1000001          ADD      r0,r0,#1              ;211
0003c2  9007              STR      r0,[sp,#0x1c]         ;211
0003c4  9819              LDR      r0,[sp,#0x64]         ;211
0003c6  eba60600          SUB      r6,r6,r0              ;211
0003ca  981b              LDR      r0,[sp,#0x6c]         ;211
0003cc  4480              ADD      r8,r8,r0              ;211
                  |L1.974|
0003ce  9807              LDR      r0,[sp,#0x1c]         ;211
0003d0  42a8              CMP      r0,r5                 ;211
0003d2  db95              BLT      |L1.768|
0003d4  bf00              NOP                            ;240
                  |L1.982|
0003d6  bf00              NOP      
0003d8  e749              B        |L1.622|
;;;242    
                          ENDP

0003da  0000              DCW      0x0000
                  |L1.988|
                          DCD      GUI_Context
                  |L1.992|
                          DCD      GUI_RectDispString

                          AREA ||.data||, DATA, ALIGN=2

                  LCD_APIList180
                          DCD      _DrawBitmap180
                          DCD      _Rect2TextRect
