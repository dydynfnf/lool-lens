; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\lcd.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\lcd.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -I.\GUI\AntiAlias -I.\GUI\Config -I.\GUI\ConvertColor -I.\GUI\ConvertMono -I.\GUI\Core -I.\GUI\Font -I.\GUI\GUI_X -I.\GUI\JPEG -I.\GUI\LCDDriver -I.\GUI\MemDev -I.\GUI\MultiLayer -I.\GUI\Widget -I.\GUI\WM -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\INC\ST\STM32F10x -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\lcd.crf GUI\Core\LCD.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _GetColorIndex PROC
;;;60     */
;;;61     static int _GetColorIndex(int i)  /* i is 0 or 1 */ {
000000  4601              MOV      r1,r0
;;;62       return  (GUI_Context.DrawMode & LCD_DRAWMODE_REV) ? i-1 : i;
000002  48fa              LDR      r0,|L1.1004|
000004  7b00              LDRB     r0,[r0,#0xc]  ; GUI_Context
000006  f0100f04          TST      r0,#4
00000a  d001              BEQ      |L1.16|
00000c  1e48              SUBS     r0,r1,#1
                  |L1.14|
;;;63     }
00000e  4770              BX       lr
                  |L1.16|
000010  4608              MOV      r0,r1                 ;62
000012  e7fc              B        |L1.14|
;;;64     
                          ENDP

                  LCD_SetColorIndex PROC
;;;74     */
;;;75     void LCD_SetColorIndex(int Index) {
000014  b510              PUSH     {r4,lr}
000016  4604              MOV      r4,r0
;;;76       LCD_ACOLORINDEX[_GetColorIndex(1)] = Index;
000018  f04f0001          MOV      r0,#1
00001c  f7fffffe          BL       _GetColorIndex
000020  49f2              LDR      r1,|L1.1004|
000022  f8214010          STRH     r4,[r1,r0,LSL #1]
;;;77     }
000026  bd10              POP      {r4,pc}
;;;78     
                          ENDP

                  LCD_SetBkColorIndex PROC
;;;82     */
;;;83     void LCD_SetBkColorIndex(int Index) {
000028  b510              PUSH     {r4,lr}
00002a  4604              MOV      r4,r0
;;;84       LCD_ACOLORINDEX[_GetColorIndex(0)] = Index;
00002c  f04f0000          MOV      r0,#0
000030  f7fffffe          BL       _GetColorIndex
000034  49ed              LDR      r1,|L1.1004|
000036  f8214010          STRH     r4,[r1,r0,LSL #1]
;;;85     }
00003a  bd10              POP      {r4,pc}
;;;86     
                          ENDP

                  LCD_SetDrawMode PROC
;;;90     */
;;;91     LCD_DRAWMODE LCD_SetDrawMode(LCD_DRAWMODE dm) {
00003c  b510              PUSH     {r4,lr}
00003e  4601              MOV      r1,r0
;;;92       LCD_DRAWMODE OldDM = GUI_Context.DrawMode;
000040  4aea              LDR      r2,|L1.1004|
000042  7b10              LDRB     r0,[r2,#0xc]  ; GUI_Context
;;;93       if ((GUI_Context.DrawMode^dm) & LCD_DRAWMODE_REV) {
000044  7b12              LDRB     r2,[r2,#0xc]  ; GUI_Context
000046  ea820201          EOR      r2,r2,r1
00004a  f0120f04          TST      r2,#4
00004e  d007              BEQ      |L1.96|
;;;94         LCD_PIXELINDEX temp = LCD_BKCOLORINDEX;
000050  4be6              LDR      r3,|L1.1004|
000052  881a              LDRH     r2,[r3,#0]  ; GUI_Context
;;;95         LCD_BKCOLORINDEX    = LCD_COLORINDEX;
000054  885b              LDRH     r3,[r3,#2]  ; GUI_Context
000056  4ce5              LDR      r4,|L1.1004|
000058  8023              STRH     r3,[r4,#0]
;;;96         LCD_COLORINDEX = temp;
00005a  4623              MOV      r3,r4
00005c  805a              STRH     r2,[r3,#2]
;;;97       }
00005e  bf00              NOP      
                  |L1.96|
;;;98       GUI_Context.DrawMode = dm;
000060  4be2              LDR      r3,|L1.1004|
000062  7319              STRB     r1,[r3,#0xc]
;;;99       return OldDM;
;;;100    }
000064  bd10              POP      {r4,pc}
;;;101    
                          ENDP

                  LCD_DrawPixel PROC
;;;105    */
;;;106    void LCD_DrawPixel(int x, int y) {
000066  b570              PUSH     {r4-r6,lr}
000068  4604              MOV      r4,r0
00006a  460d              MOV      r5,r1
;;;107      RETURN_IF_Y_OUT();
00006c  48df              LDR      r0,|L1.1004|
00006e  f9b00006          LDRSH    r0,[r0,#6]
000072  42a8              CMP      r0,r5
000074  dd00              BLE      |L1.120|
                  |L1.118|
;;;108      RETURN_IF_X_OUT();
;;;109      if (GUI_Context.DrawMode & LCD_DRAWMODE_XOR) {
;;;110        LCDDEV_L0_XorPixel(x, y);
;;;111      } else {
;;;112        LCDDEV_L0_SetPixelIndex(x, y, LCD_COLORINDEX);
;;;113      }
;;;114    }
000076  bd70              POP      {r4-r6,pc}
                  |L1.120|
000078  48dc              LDR      r0,|L1.1004|
00007a  f9b0000a          LDRSH    r0,[r0,#0xa]          ;107
00007e  42a8              CMP      r0,r5                 ;107
000080  da00              BGE      |L1.132|
000082  e7f8              B        |L1.118|
                  |L1.132|
000084  48d9              LDR      r0,|L1.1004|
000086  f9b00004          LDRSH    r0,[r0,#4]            ;108  ; GUI_Context
00008a  42a0              CMP      r0,r4                 ;108
00008c  dd00              BLE      |L1.144|
00008e  e7f2              B        |L1.118|
                  |L1.144|
000090  48d6              LDR      r0,|L1.1004|
000092  f9b00008          LDRSH    r0,[r0,#8]            ;108
000096  42a0              CMP      r0,r4                 ;108
000098  da00              BGE      |L1.156|
00009a  e7ec              B        |L1.118|
                  |L1.156|
00009c  48d3              LDR      r0,|L1.1004|
00009e  7b00              LDRB     r0,[r0,#0xc]          ;109  ; GUI_Context
0000a0  f0100f01          TST      r0,#1                 ;109
0000a4  d006              BEQ      |L1.180|
0000a6  48d1              LDR      r0,|L1.1004|
0000a8  6c80              LDR      r0,[r0,#0x48]         ;110  ; GUI_Context
0000aa  4629              MOV      r1,r5                 ;110
0000ac  6a82              LDR      r2,[r0,#0x28]         ;110
0000ae  4620              MOV      r0,r4                 ;110
0000b0  4790              BLX      r2                    ;110
0000b2  e006              B        |L1.194|
                  |L1.180|
0000b4  48cd              LDR      r0,|L1.1004|
0000b6  8842              LDRH     r2,[r0,#2]            ;112  ; GUI_Context
0000b8  6c80              LDR      r0,[r0,#0x48]         ;112  ; GUI_Context
0000ba  4629              MOV      r1,r5                 ;112
0000bc  6a43              LDR      r3,[r0,#0x24]         ;112
0000be  4620              MOV      r0,r4                 ;112
0000c0  4798              BLX      r3                    ;112
                  |L1.194|
0000c2  bf00              NOP      
0000c4  e7d7              B        |L1.118|
;;;115    
                          ENDP

                  LCD_DrawHLine PROC
;;;119    */
;;;120    void LCD_DrawHLine(int x0, int y,  int x1) {
0000c6  b570              PUSH     {r4-r6,lr}
0000c8  4604              MOV      r4,r0
0000ca  460d              MOV      r5,r1
0000cc  4616              MOV      r6,r2
;;;121      /* Perform clipping and check if there is something to do */
;;;122      RETURN_IF_Y_OUT();
0000ce  48c7              LDR      r0,|L1.1004|
0000d0  f9b00006          LDRSH    r0,[r0,#6]
0000d4  42a8              CMP      r0,r5
0000d6  dd00              BLE      |L1.218|
                  |L1.216|
;;;123      CLIP_X();
;;;124      if (x1<x0)
;;;125        return;
;;;126      /* Call driver to draw */
;;;127      LCDDEV_L0_DrawHLine(x0, y, x1);
;;;128    }
0000d8  bd70              POP      {r4-r6,pc}
                  |L1.218|
0000da  48c4              LDR      r0,|L1.1004|
0000dc  f9b0000a          LDRSH    r0,[r0,#0xa]          ;122
0000e0  42a8              CMP      r0,r5                 ;122
0000e2  da00              BGE      |L1.230|
0000e4  e7f8              B        |L1.216|
                  |L1.230|
0000e6  48c1              LDR      r0,|L1.1004|
0000e8  f9b00004          LDRSH    r0,[r0,#4]            ;123  ; GUI_Context
0000ec  42a0              CMP      r0,r4                 ;123
0000ee  dd02              BLE      |L1.246|
0000f0  48be              LDR      r0,|L1.1004|
0000f2  f9b04004          LDRSH    r4,[r0,#4]            ;123  ; GUI_Context
                  |L1.246|
0000f6  48bd              LDR      r0,|L1.1004|
0000f8  f9b00008          LDRSH    r0,[r0,#8]            ;123
0000fc  42b0              CMP      r0,r6                 ;123
0000fe  da02              BGE      |L1.262|
000100  48ba              LDR      r0,|L1.1004|
000102  f9b06008          LDRSH    r6,[r0,#8]            ;123
                  |L1.262|
000106  42a6              CMP      r6,r4                 ;124
000108  da00              BGE      |L1.268|
00010a  e7e5              B        |L1.216|
                  |L1.268|
00010c  48b7              LDR      r0,|L1.1004|
00010e  6c80              LDR      r0,[r0,#0x48]         ;127  ; GUI_Context
000110  4632              MOV      r2,r6                 ;127
000112  4629              MOV      r1,r5                 ;127
000114  6903              LDR      r3,[r0,#0x10]         ;127
000116  4620              MOV      r0,r4                 ;127
000118  4798              BLX      r3                    ;127
00011a  bf00              NOP      
00011c  e7dc              B        |L1.216|
;;;129    
                          ENDP

                  LCD_FillRect PROC
;;;133    */
;;;134    void LCD_FillRect(int x0, int y0, int x1, int y1) {
00011e  e92d41f0          PUSH     {r4-r8,lr}
000122  4604              MOV      r4,r0
000124  460d              MOV      r5,r1
000126  4616              MOV      r6,r2
000128  461f              MOV      r7,r3
;;;135      /* Perform clipping and check if there is something to do */
;;;136      CLIP_X();
00012a  48b0              LDR      r0,|L1.1004|
00012c  f9b00004          LDRSH    r0,[r0,#4]  ; GUI_Context
000130  42a0              CMP      r0,r4
000132  dd02              BLE      |L1.314|
000134  48ad              LDR      r0,|L1.1004|
000136  f9b04004          LDRSH    r4,[r0,#4]  ; GUI_Context
                  |L1.314|
00013a  48ac              LDR      r0,|L1.1004|
00013c  f9b00008          LDRSH    r0,[r0,#8]
000140  42b0              CMP      r0,r6
000142  da02              BGE      |L1.330|
000144  48a9              LDR      r0,|L1.1004|
000146  f9b06008          LDRSH    r6,[r0,#8]
                  |L1.330|
;;;137      if (x1<x0)
00014a  42a6              CMP      r6,r4
00014c  da01              BGE      |L1.338|
                  |L1.334|
;;;138        return;
;;;139      CLIP_Y();
;;;140      if (y1<y0)
;;;141        return;
;;;142      /* Call driver to draw */
;;;143      LCDDEV_L0_FillRect(x0,y0,x1,y1);
;;;144    }
00014e  e8bd81f0          POP      {r4-r8,pc}
                  |L1.338|
000152  48a6              LDR      r0,|L1.1004|
000154  f9b00006          LDRSH    r0,[r0,#6]            ;139
000158  42a8              CMP      r0,r5                 ;139
00015a  dd02              BLE      |L1.354|
00015c  48a3              LDR      r0,|L1.1004|
00015e  f9b05006          LDRSH    r5,[r0,#6]            ;139
                  |L1.354|
000162  48a2              LDR      r0,|L1.1004|
000164  f9b0000a          LDRSH    r0,[r0,#0xa]          ;139
000168  42b8              CMP      r0,r7                 ;139
00016a  da02              BGE      |L1.370|
00016c  489f              LDR      r0,|L1.1004|
00016e  f9b0700a          LDRSH    r7,[r0,#0xa]          ;139
                  |L1.370|
000172  42af              CMP      r7,r5                 ;140
000174  da00              BGE      |L1.376|
000176  e7ea              B        |L1.334|
                  |L1.376|
000178  489c              LDR      r0,|L1.1004|
00017a  6c80              LDR      r0,[r0,#0x48]         ;143  ; GUI_Context
00017c  463b              MOV      r3,r7                 ;143
00017e  4632              MOV      r2,r6                 ;143
000180  4629              MOV      r1,r5                 ;143
000182  f8d0c018          LDR      r12,[r0,#0x18]        ;143
000186  4620              MOV      r0,r4                 ;143
000188  47e0              BLX      r12                   ;143
00018a  bf00              NOP      
00018c  e7df              B        |L1.334|
;;;145    
                          ENDP

                  LCD_DrawBitmap PROC
;;;149    */
;;;150    void LCD_DrawBitmap(int x0, int y0, int xsize, int ysize, int xMul, int yMul,
00018e  e92d4fff          PUSH     {r0-r11,lr}
;;;151                           int BitsPerPixel, int BytesPerLine,
;;;152                           const U8 GUI_UNI_PTR * pPixel, const LCD_PIXELINDEX* pTrans)
;;;153    {
000192  b08b              SUB      sp,sp,#0x2c
000194  4605              MOV      r5,r0
000196  4690              MOV      r8,r2
000198  461f              MOV      r7,r3
00019a  f8dda060          LDR      r10,[sp,#0x60]
00019e  f8dd9068          LDR      r9,[sp,#0x68]
0001a2  9e1c              LDR      r6,[sp,#0x70]
;;;154      U8  Data = 0;
0001a4  f04f0000          MOV      r0,#0
0001a8  900a              STR      r0,[sp,#0x28]
;;;155      int x1, y1;
;;;156      /* Handle rotation if necessary */
;;;157      #if GUI_SUPPORT_ROTATION
;;;158      if (GUI_pLCD_APIList) {
0001aa  4891              LDR      r0,|L1.1008|
0001ac  6800              LDR      r0,[r0,#0]  ; GUI_pLCD_APIList
0001ae  b198              CBZ      r0,|L1.472|
;;;159        GUI_pLCD_APIList->pfDrawBitmap(x0, y0, xsize, ysize, xMul, yMul, BitsPerPixel, BytesPerLine, pPixel, pTrans);
0001b0  991b              LDR      r1,[sp,#0x6c]
0001b2  981d              LDR      r0,[sp,#0x74]
0001b4  e9cd9102          STRD     r9,r1,[sp,#8]
0001b8  e9cd6004          STRD     r6,r0,[sp,#0x10]
0001bc  9819              LDR      r0,[sp,#0x64]
0001be  e9cda000          STRD     r10,r0,[sp,#0]
0001c2  488b              LDR      r0,|L1.1008|
0001c4  6800              LDR      r0,[r0,#0]  ; GUI_pLCD_APIList
0001c6  463b              MOV      r3,r7
0001c8  4642              MOV      r2,r8
0001ca  6804              LDR      r4,[r0,#0]
0001cc  4628              MOV      r0,r5
0001ce  990c              LDR      r1,[sp,#0x30]
0001d0  47a0              BLX      r4
                  |L1.466|
;;;160        return;
;;;161      }
;;;162      #endif
;;;163      /* Handle the optional Y-magnification */
;;;164      y1 = y0 + ysize - 1;
;;;165      x1 = x0 + xsize - 1;
;;;166    /*  Handle BITMAP without magnification */
;;;167      if ((xMul | yMul) == 1) {
;;;168        int Diff;
;;;169        /*  Clip y0 (top) */
;;;170        Diff = GUI_Context.ClipRect.y0 - y0;
;;;171        if (Diff > 0) {
;;;172          ysize -= Diff;
;;;173          if (ysize <= 0) {
;;;174    		    return;
;;;175          }
;;;176          y0     = GUI_Context.ClipRect.y0;
;;;177          #if GUI_SUPPORT_LARGE_BITMAPS                       /* Required only for 16 bit CPUs if some bitmaps are >64kByte */
;;;178            pPixel += (U32)     Diff * (U32)     BytesPerLine;
;;;179          #else
;;;180            pPixel += (unsigned)Diff * (unsigned)BytesPerLine;
;;;181          #endif
;;;182        }
;;;183        /*  Clip y1 (bottom) */
;;;184        Diff = y1 - GUI_Context.ClipRect.y1;
;;;185        if (Diff > 0) {
;;;186          ysize -= Diff;
;;;187          if (ysize <= 0) {
;;;188    		    return;
;;;189          }
;;;190        }
;;;191        /*        Clip right side    */
;;;192        Diff = x1 - GUI_Context.ClipRect.x1;
;;;193        if (Diff > 0) {
;;;194          xsize -= Diff;
;;;195        }
;;;196        /*        Clip left side ... (The difficult side ...)    */
;;;197        Diff = 0;
;;;198        if (x0 < GUI_Context.ClipRect.x0) {
;;;199          Diff = GUI_Context.ClipRect.x0 - x0;
;;;200    			xsize -= Diff;
;;;201    			switch (BitsPerPixel) {
;;;202    			case 1:
;;;203      			pPixel+= (Diff>>3); x0 += (Diff>>3)<<3; Diff &=7;
;;;204    				break;
;;;205    			case 2:
;;;206    	  		pPixel+= (Diff>>2); x0 += (Diff>>2)<<2; Diff &=3;
;;;207    				break;
;;;208    			case 4:
;;;209    				pPixel+= (Diff>>1); x0 += (Diff>>1)<<1; Diff &=1;
;;;210    				break;
;;;211    			case 8:
;;;212    				pPixel+= Diff;      x0 += Diff; Diff=0;
;;;213    				break;
;;;214    			case 16:
;;;215    				pPixel+= (Diff<<1); x0 += Diff; Diff=0;
;;;216    				break;
;;;217    			}
;;;218        }
;;;219        if (xsize <=0) {
;;;220    		  return;
;;;221        }
;;;222        LCDDEV_L0_DrawBitmap   (x0,y0, xsize, ysize, BitsPerPixel, BytesPerLine, pPixel, Diff, pTrans);
;;;223      } else {
;;;224        /**** Handle BITMAP with magnification ***/
;;;225        int x,y;
;;;226        int yi;
;;;227        int Shift = 8-BitsPerPixel;
;;;228        for (y=y0, yi=0; yi<ysize; yi++, y+= yMul, pPixel+=BytesPerLine) {
;;;229          int yMax = y+yMul-1;
;;;230          /* Draw if within clip area (Optimization ... "if" is not required !) */
;;;231          if ((yMax >= GUI_Context.ClipRect.y0) && (y <= GUI_Context.ClipRect.y1)) {
;;;232            int BitsLeft =0;
;;;233            int xi;
;;;234            const U8 GUI_UNI_PTR * pDataLine = pPixel;
;;;235            for (x=x0, xi=0; xi<xsize; xi++, x+=xMul) {
;;;236              U8  Index;
;;;237              if (!BitsLeft) {
;;;238                Data = *pDataLine++;
;;;239                BitsLeft =8;
;;;240              }
;;;241              Index = Data>>Shift;
;;;242              Data    <<= BitsPerPixel;
;;;243              BitsLeft -= BitsPerPixel;
;;;244              if (Index || ((GUI_Context.DrawMode & LCD_DRAWMODE_TRANS) ==0)) {
;;;245                LCD_PIXELINDEX  OldColor = LCD_COLORINDEX;
;;;246                if (pTrans) {
;;;247                  LCD_COLORINDEX = *(pTrans+Index);
;;;248                } else {
;;;249                  LCD_COLORINDEX = Index;
;;;250                }
;;;251                LCD_FillRect(x,y, x+xMul-1, yMax);
;;;252                LCD_COLORINDEX = OldColor;
;;;253              }
;;;254            }
;;;255          }
;;;256        }
;;;257      }
;;;258    }
0001d2  b00f              ADD      sp,sp,#0x3c
0001d4  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.472|
0001d8  980c              LDR      r0,[sp,#0x30]         ;164
0001da  4438              ADD      r0,r0,r7              ;164
0001dc  f1a00001          SUB      r0,r0,#1              ;164
0001e0  9008              STR      r0,[sp,#0x20]         ;164
0001e2  eb050008          ADD      r0,r5,r8              ;165
0001e6  f1a00001          SUB      r0,r0,#1              ;165
0001ea  9009              STR      r0,[sp,#0x24]         ;165
0001ec  9819              LDR      r0,[sp,#0x64]         ;167
0001ee  ea4a0000          ORR      r0,r10,r0             ;167
0001f2  2801              CMP      r0,#1                 ;167
0001f4  d175              BNE      |L1.738|
0001f6  487d              LDR      r0,|L1.1004|
0001f8  f9b01006          LDRSH    r1,[r0,#6]            ;170
0001fc  980c              LDR      r0,[sp,#0x30]         ;170
0001fe  eba10400          SUB      r4,r1,r0              ;170
000202  2c00              CMP      r4,#0                 ;171
000204  dd0b              BLE      |L1.542|
000206  eba70704          SUB      r7,r7,r4              ;172
00020a  2f00              CMP      r7,#0                 ;173
00020c  dc00              BGT      |L1.528|
00020e  e7e0              B        |L1.466|
                  |L1.528|
000210  4876              LDR      r0,|L1.1004|
000212  f9b00006          LDRSH    r0,[r0,#6]            ;176
000216  900c              STR      r0,[sp,#0x30]         ;176
000218  981b              LDR      r0,[sp,#0x6c]         ;180
00021a  fb046600          MLA      r6,r4,r0,r6           ;180
                  |L1.542|
00021e  4873              LDR      r0,|L1.1004|
000220  f9b0100a          LDRSH    r1,[r0,#0xa]          ;184
000224  9808              LDR      r0,[sp,#0x20]         ;184
000226  eba00401          SUB      r4,r0,r1              ;184
00022a  2c00              CMP      r4,#0                 ;185
00022c  dd04              BLE      |L1.568|
00022e  eba70704          SUB      r7,r7,r4              ;186
000232  2f00              CMP      r7,#0                 ;187
000234  dc00              BGT      |L1.568|
000236  e7cc              B        |L1.466|
                  |L1.568|
000238  486c              LDR      r0,|L1.1004|
00023a  f9b01008          LDRSH    r1,[r0,#8]            ;192
00023e  9809              LDR      r0,[sp,#0x24]         ;192
000240  eba00401          SUB      r4,r0,r1              ;192
000244  2c00              CMP      r4,#0                 ;193
000246  dd01              BLE      |L1.588|
000248  eba80804          SUB      r8,r8,r4              ;194
                  |L1.588|
00024c  f04f0400          MOV      r4,#0                 ;197
000250  4866              LDR      r0,|L1.1004|
000252  f9b00004          LDRSH    r0,[r0,#4]            ;198  ; GUI_Context
000256  42a8              CMP      r0,r5                 ;198
000258  dd3f              BLE      |L1.730|
00025a  4864              LDR      r0,|L1.1004|
00025c  f9b00004          LDRSH    r0,[r0,#4]            ;199  ; GUI_Context
000260  eba00405          SUB      r4,r0,r5              ;199
000264  eba80804          SUB      r8,r8,r4              ;200
000268  f1b90f04          CMP      r9,#4                 ;201
00026c  d020              BEQ      |L1.688|
00026e  dc06              BGT      |L1.638|
000270  f1b90f01          CMP      r9,#1                 ;201
000274  d00a              BEQ      |L1.652|
000276  f1b90f02          CMP      r9,#2                 ;201
00027a  d12d              BNE      |L1.728|
00027c  e00f              B        |L1.670|
                  |L1.638|
00027e  f1b90f08          CMP      r9,#8                 ;201
000282  d01e              BEQ      |L1.706|
000284  f1b90f10          CMP      r9,#0x10              ;201
000288  d126              BNE      |L1.728|
00028a  e01f              B        |L1.716|
                  |L1.652|
00028c  eb0606e4          ADD      r6,r6,r4,ASR #3       ;203
000290  ea4f00e4          ASR      r0,r4,#3              ;203
000294  eb0505c0          ADD      r5,r5,r0,LSL #3       ;203
000298  f0040407          AND      r4,r4,#7              ;203
00029c  e01c              B        |L1.728|
                  |L1.670|
00029e  eb0606a4          ADD      r6,r6,r4,ASR #2       ;206
0002a2  ea4f00a4          ASR      r0,r4,#2              ;206
0002a6  eb050580          ADD      r5,r5,r0,LSL #2       ;206
0002aa  f0040403          AND      r4,r4,#3              ;206
0002ae  e013              B        |L1.728|
                  |L1.688|
0002b0  eb060664          ADD      r6,r6,r4,ASR #1       ;209
0002b4  ea4f0064          ASR      r0,r4,#1              ;209
0002b8  eb050540          ADD      r5,r5,r0,LSL #1       ;209
0002bc  f0040401          AND      r4,r4,#1              ;209
0002c0  e00a              B        |L1.728|
                  |L1.706|
0002c2  4426              ADD      r6,r6,r4              ;212
0002c4  4425              ADD      r5,r5,r4              ;212
0002c6  f04f0400          MOV      r4,#0                 ;212
0002ca  e005              B        |L1.728|
                  |L1.716|
0002cc  eb060644          ADD      r6,r6,r4,LSL #1       ;215
0002d0  4425              ADD      r5,r5,r4              ;215
0002d2  f04f0400          MOV      r4,#0                 ;215
0002d6  bf00              NOP                            ;216
                  |L1.728|
0002d8  bf00              NOP                            ;204
                  |L1.730|
0002da  f1b80f00          CMP      r8,#0                 ;219
0002de  dc01              BGT      |L1.740|
0002e0  e777              B        |L1.466|
                  |L1.738|
0002e2  e010              B        |L1.774|
                  |L1.740|
0002e4  991b              LDR      r1,[sp,#0x6c]         ;222
0002e6  981d              LDR      r0,[sp,#0x74]         ;222
0002e8  e9cd9100          STRD     r9,r1,[sp,#0]         ;222
0002ec  e9cd6402          STRD     r6,r4,[sp,#8]         ;222
0002f0  9004              STR      r0,[sp,#0x10]         ;222
0002f2  483e              LDR      r0,|L1.1004|
0002f4  6c80              LDR      r0,[r0,#0x48]         ;222  ; GUI_Context
0002f6  463b              MOV      r3,r7                 ;222
0002f8  4642              MOV      r2,r8                 ;222
0002fa  f8d0c00c          LDR      r12,[r0,#0xc]         ;222
0002fe  4628              MOV      r0,r5                 ;222
000300  990c              LDR      r1,[sp,#0x30]         ;222
000302  47e0              BLX      r12                   ;222
000304  e070              B        |L1.1000|
                  |L1.774|
000306  f1c90008          RSB      r0,r9,#8              ;227
00030a  9005              STR      r0,[sp,#0x14]         ;227
00030c  9c0c              LDR      r4,[sp,#0x30]         ;228
00030e  f04f0000          MOV      r0,#0                 ;228
000312  9006              STR      r0,[sp,#0x18]         ;228
000314  e064              B        |L1.992|
                  |L1.790|
000316  9819              LDR      r0,[sp,#0x64]         ;229
000318  4420              ADD      r0,r0,r4              ;229
00031a  f1a00001          SUB      r0,r0,#1              ;229
00031e  9004              STR      r0,[sp,#0x10]         ;229
000320  4832              LDR      r0,|L1.1004|
000322  f9b01006          LDRSH    r1,[r0,#6]            ;231
000326  9804              LDR      r0,[sp,#0x10]         ;231
000328  4281              CMP      r1,r0                 ;231
00032a  dc51              BGT      |L1.976|
00032c  482f              LDR      r0,|L1.1004|
00032e  f9b0000a          LDRSH    r0,[r0,#0xa]          ;231
000332  42a0              CMP      r0,r4                 ;231
000334  db4c              BLT      |L1.976|
000336  f04f0000          MOV      r0,#0                 ;232
00033a  9003              STR      r0,[sp,#0xc]          ;232
00033c  9601              STR      r6,[sp,#4]            ;234
00033e  9507              STR      r5,[sp,#0x1c]         ;235
000340  9002              STR      r0,[sp,#8]            ;235
000342  e041              B        |L1.968|
                  |L1.836|
000344  9803              LDR      r0,[sp,#0xc]          ;237
000346  b948              CBNZ     r0,|L1.860|
000348  9801              LDR      r0,[sp,#4]            ;238
00034a  7800              LDRB     r0,[r0,#0]            ;238
00034c  900a              STR      r0,[sp,#0x28]         ;238
00034e  9801              LDR      r0,[sp,#4]            ;238
000350  f1000001          ADD      r0,r0,#1              ;238
000354  9001              STR      r0,[sp,#4]            ;238
000356  f04f0008          MOV      r0,#8                 ;239
00035a  9003              STR      r0,[sp,#0xc]          ;239
                  |L1.860|
00035c  9905              LDR      r1,[sp,#0x14]         ;241
00035e  980a              LDR      r0,[sp,#0x28]         ;241
000360  fa40fb01          ASR      r11,r0,r1             ;241
000364  980a              LDR      r0,[sp,#0x28]         ;242
000366  fa00f009          LSL      r0,r0,r9              ;242
00036a  b2c0              UXTB     r0,r0                 ;242
00036c  900a              STR      r0,[sp,#0x28]         ;242
00036e  9803              LDR      r0,[sp,#0xc]          ;243
000370  eba00009          SUB      r0,r0,r9              ;243
000374  9003              STR      r0,[sp,#0xc]          ;243
000376  f1bb0f00          CMP      r11,#0                ;244
00037a  d104              BNE      |L1.902|
00037c  481b              LDR      r0,|L1.1004|
00037e  7b00              LDRB     r0,[r0,#0xc]          ;244  ; GUI_Context
000380  f0100f02          TST      r0,#2                 ;244
000384  d119              BNE      |L1.954|
                  |L1.902|
000386  4819              LDR      r0,|L1.1004|
000388  8840              LDRH     r0,[r0,#2]            ;245  ; GUI_Context
00038a  9000              STR      r0,[sp,#0]            ;245
00038c  981d              LDR      r0,[sp,#0x74]         ;246
00038e  b128              CBZ      r0,|L1.924|
000390  981d              LDR      r0,[sp,#0x74]         ;247
000392  f830001b          LDRH     r0,[r0,r11,LSL #1]    ;247
000396  4915              LDR      r1,|L1.1004|
000398  8048              STRH     r0,[r1,#2]            ;247
00039a  e002              B        |L1.930|
                  |L1.924|
00039c  4813              LDR      r0,|L1.1004|
00039e  f8a0b002          STRH     r11,[r0,#2]           ;249
                  |L1.930|
0003a2  9807              LDR      r0,[sp,#0x1c]         ;251
0003a4  4450              ADD      r0,r0,r10             ;251
0003a6  1e42              SUBS     r2,r0,#1              ;251
0003a8  4621              MOV      r1,r4                 ;251
0003aa  9b04              LDR      r3,[sp,#0x10]         ;251
0003ac  9807              LDR      r0,[sp,#0x1c]         ;251
0003ae  f7fffffe          BL       LCD_FillRect
0003b2  490e              LDR      r1,|L1.1004|
0003b4  9800              LDR      r0,[sp,#0]            ;252
0003b6  8048              STRH     r0,[r1,#2]            ;252
0003b8  bf00              NOP                            ;253
                  |L1.954|
0003ba  9802              LDR      r0,[sp,#8]            ;235
0003bc  f1000001          ADD      r0,r0,#1              ;235
0003c0  9002              STR      r0,[sp,#8]            ;235
0003c2  9807              LDR      r0,[sp,#0x1c]         ;235
0003c4  4450              ADD      r0,r0,r10             ;235
0003c6  9007              STR      r0,[sp,#0x1c]         ;235
                  |L1.968|
0003c8  9802              LDR      r0,[sp,#8]            ;235
0003ca  4540              CMP      r0,r8                 ;235
0003cc  dbba              BLT      |L1.836|
0003ce  bf00              NOP                            ;255
                  |L1.976|
0003d0  9806              LDR      r0,[sp,#0x18]         ;228
0003d2  f1000001          ADD      r0,r0,#1              ;228
0003d6  9006              STR      r0,[sp,#0x18]         ;228
0003d8  9819              LDR      r0,[sp,#0x64]         ;228
0003da  4404              ADD      r4,r4,r0              ;228
0003dc  981b              LDR      r0,[sp,#0x6c]         ;228
0003de  4406              ADD      r6,r6,r0              ;228
                  |L1.992|
0003e0  9806              LDR      r0,[sp,#0x18]         ;228
0003e2  42b8              CMP      r0,r7                 ;228
0003e4  db97              BLT      |L1.790|
0003e6  bf00              NOP                            ;257
                  |L1.1000|
0003e8  bf00              NOP      
0003ea  e6f2              B        |L1.466|
                  |L1.1004|
                          DCD      GUI_Context
                  |L1.1008|
                          DCD      GUI_pLCD_APIList
                          ENDP

                  LCD_SetClipRectMax PROC
;;;263    */
;;;264    void LCD_SetClipRectMax(void) {
0003f4  b510              PUSH     {r4,lr}
;;;265      LCDDEV_L0_GetRect(&GUI_Context.ClipRect);
0003f6  4828              LDR      r0,|L1.1176|
0003f8  6c80              LDR      r0,[r0,#0x48]  ; GUI_Context
0003fa  6a01              LDR      r1,[r0,#0x20]
0003fc  4826              LDR      r0,|L1.1176|
0003fe  1d00              ADDS     r0,r0,#4
000400  4788              BLX      r1
;;;266    }
000402  bd10              POP      {r4,pc}
;;;267    
                          ENDP

                  LCD_Init PROC
;;;271    */
;;;272    int LCD_Init(void) {
000404  b510              PUSH     {r4,lr}
;;;273      int r = 0;
000406  f04f0400          MOV      r4,#0
;;;274      GUI_DEBUG_LOG("\nLCD_Init...");
;;;275      LCD_SetClipRectMax();
00040a  f7fffffe          BL       LCD_SetClipRectMax
;;;276      r |= LCD_L0_Init();
00040e  f7fffffe          BL       LCD_L0_Init
000412  ea400404          ORR      r4,r0,r4
;;;277      #if GUI_NUM_LAYERS > 1
;;;278        r |= LCD_L0_1_Init();
;;;279      #endif
;;;280      #if GUI_NUM_LAYERS > 2
;;;281        r |= LCD_L0_2_Init();
;;;282      #endif
;;;283      #if GUI_NUM_LAYERS > 3
;;;284        r |= LCD_L0_3_Init();
;;;285      #endif
;;;286      #if GUI_NUM_LAYERS > 4
;;;287        r |= LCD_L0_4_Init();
;;;288      #endif
;;;289      LCD_InitLUT();
000416  f7fffffe          BL       LCD_InitLUT
;;;290      {
;;;291      #if GUI_NUM_LAYERS > 1
;;;292        int i;
;;;293        for (i = GUI_NUM_LAYERS - 1; i >= 0; i--) {
;;;294          GUI_SelectLayer(i);
;;;295      #else
;;;296        {
;;;297      #endif
;;;298          #if (GUI_DEFAULT_BKCOLOR != GUI_INVALID_COLOR)
;;;299            /* Clear video memory */
;;;300            LCD_SetDrawMode(GUI_DRAWMODE_REV);
00041a  2004              MOVS     r0,#4
00041c  f7fffffe          BL       LCD_SetDrawMode
;;;301            LCD_FillRect(0,0, GUI_XMAX, GUI_YMAX);
000420  f64073ff          MOV      r3,#0xfff
000424  461a              MOV      r2,r3
000426  2100              MOVS     r1,#0
000428  4608              MOV      r0,r1
00042a  f7fffffe          BL       LCD_FillRect
;;;302            LCD_SetDrawMode(0);
00042e  2000              MOVS     r0,#0
000430  f7fffffe          BL       LCD_SetDrawMode
;;;303          #endif
;;;304        }
;;;305      }
;;;306      /* Switch LCD on */
;;;307      LCD_On();
000434  f7fffffe          BL       LCD_L0_On
;;;308      return r;
000438  4620              MOV      r0,r4
;;;309    }
00043a  bd10              POP      {r4,pc}
;;;310    
                          ENDP

                  LCD_Color2Index PROC
;;;314    */
;;;315    int LCD_Color2Index(LCD_COLOR Color) {
00043c  b510              PUSH     {r4,lr}
00043e  4604              MOV      r4,r0
;;;316      return LCDDEV_L0_Color2Index(Color);
000440  4815              LDR      r0,|L1.1176|
000442  6c80              LDR      r0,[r0,#0x48]  ; GUI_Context
000444  6801              LDR      r1,[r0,#0]
000446  4620              MOV      r0,r4
000448  4788              BLX      r1
;;;317    }
00044a  bd10              POP      {r4,pc}
;;;318    
                          ENDP

                  LCD_Index2Color PROC
;;;322    */
;;;323    LCD_COLOR LCD_Index2Color(int Index) {
00044c  b510              PUSH     {r4,lr}
00044e  4604              MOV      r4,r0
;;;324      return LCDDEV_L0_Index2Color(Index);
000450  4811              LDR      r0,|L1.1176|
000452  6c80              LDR      r0,[r0,#0x48]  ; GUI_Context
000454  6841              LDR      r1,[r0,#4]
000456  4620              MOV      r0,r4
000458  4788              BLX      r1
;;;325    }
00045a  bd10              POP      {r4,pc}
;;;326    
                          ENDP

                  LCD_SetBkColor PROC
;;;330    */
;;;331    void LCD_SetBkColor(GUI_COLOR color) {
00045c  b570              PUSH     {r4-r6,lr}
00045e  4604              MOV      r4,r0
;;;332      if (GUI_Context.BkColor != color) {
000460  480d              LDR      r0,|L1.1176|
000462  6b40              LDR      r0,[r0,#0x34]  ; GUI_Context
000464  42a0              CMP      r0,r4
000466  d007              BEQ      |L1.1144|
;;;333        GUI_Context.BkColor = color;
000468  480b              LDR      r0,|L1.1176|
00046a  6344              STR      r4,[r0,#0x34]  ; GUI_Context
;;;334        LCD_SetBkColorIndex(LCD_Color2Index(color));
00046c  4620              MOV      r0,r4
00046e  f7fffffe          BL       LCD_Color2Index
000472  4605              MOV      r5,r0
000474  f7fffffe          BL       LCD_SetBkColorIndex
                  |L1.1144|
;;;335      }
;;;336    }
000478  bd70              POP      {r4-r6,pc}
;;;337    
                          ENDP

                  LCD_SetColor PROC
;;;341    */
;;;342    void LCD_SetColor(GUI_COLOR color) {
00047a  b570              PUSH     {r4-r6,lr}
00047c  4604              MOV      r4,r0
;;;343      if (GUI_Context.Color != color) {
00047e  4806              LDR      r0,|L1.1176|
000480  6b00              LDR      r0,[r0,#0x30]  ; GUI_Context
000482  42a0              CMP      r0,r4
000484  d007              BEQ      |L1.1174|
;;;344        GUI_Context.Color = color;
000486  4804              LDR      r0,|L1.1176|
000488  6304              STR      r4,[r0,#0x30]  ; GUI_Context
;;;345        LCD_SetColorIndex(LCD_Color2Index(color));
00048a  4620              MOV      r0,r4
00048c  f7fffffe          BL       LCD_Color2Index
000490  4605              MOV      r5,r0
000492  f7fffffe          BL       LCD_SetColorIndex
                  |L1.1174|
;;;346      }
;;;347    }
000496  bd70              POP      {r4-r6,pc}
;;;348    
                          ENDP

                  |L1.1176|
                          DCD      GUI_Context
