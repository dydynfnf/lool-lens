; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\lcdp222.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\lcdp222.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -I.\GUI\AntiAlias -I.\GUI\Config -I.\GUI\ConvertColor -I.\GUI\ConvertMono -I.\GUI\Core -I.\GUI\Font -I.\GUI\GUI_X -I.\GUI\JPEG -I.\GUI\LCDDriver -I.\GUI\MemDev -I.\GUI\MultiLayer -I.\GUI\Widget -I.\GUI\WM -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\INC\ST\STM32F10x -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\lcdp222.crf GUI\ConvertColor\LCDP222.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=1

                  LCD_Color2Index_222 PROC
;;;31     */
;;;32     unsigned LCD_Color2Index_222(LCD_COLOR Color) {
000000  b530              PUSH     {r4,r5,lr}
000002  4601              MOV      r1,r0
;;;33       int r,g,b;
;;;34       r = ((Color&255)      +0x2a)/0x55;
000004  b2c8              UXTB     r0,r1
000006  f100002a          ADD      r0,r0,#0x2a
00000a  f04f0555          MOV      r5,#0x55
00000e  fbb0f2f5          UDIV     r2,r0,r5
;;;35       g = (((Color>>8)&255) +0x2a)/0x55;
000012  f3c12007          UBFX     r0,r1,#8,#8
000016  f100002a          ADD      r0,r0,#0x2a
00001a  fbb0f3f5          UDIV     r3,r0,r5
;;;36       b = (((Color>>16)&255)+0x2a)/0x55;
00001e  f3c14007          UBFX     r0,r1,#16,#8
000022  f100002a          ADD      r0,r0,#0x2a
000026  fbb0f4f5          UDIV     r4,r0,r5
;;;37       return r+(g<<2)+(b<<4);
00002a  eb020083          ADD      r0,r2,r3,LSL #2
00002e  eb001004          ADD      r0,r0,r4,LSL #4
;;;38     }
000032  bd30              POP      {r4,r5,pc}
;;;39     
                          ENDP

                  LCD_Index2Color_222 PROC
;;;43     */
;;;44     LCD_COLOR LCD_Index2Color_222(int Index) {
000034  b510              PUSH     {r4,lr}
000036  4601              MOV      r1,r0
;;;45       U16P r,g,b;
;;;46       r = ((Index>>0)&3)*0x55;
000038  f0010003          AND      r0,r1,#3
00003c  eb001000          ADD      r0,r0,r0,LSL #4
000040  eb000280          ADD      r2,r0,r0,LSL #2
;;;47       g = ((Index>>2)&3)*0x55;
000044  f3c10081          UBFX     r0,r1,#2,#2
000048  eb001000          ADD      r0,r0,r0,LSL #4
00004c  eb000380          ADD      r3,r0,r0,LSL #2
;;;48       b = (Index>>4)    *0x55;
000050  ea4f1021          ASR      r0,r1,#4
000054  eb001000          ADD      r0,r0,r0,LSL #4
000058  eb000480          ADD      r4,r0,r0,LSL #2
;;;49       return (((U32)b)<<16)|(g<<8)|r;
00005c  ea4f4004          LSL      r0,r4,#16
000060  ea402003          ORR      r0,r0,r3,LSL #8
000064  ea400002          ORR      r0,r0,r2
;;;50     }
000068  bd10              POP      {r4,pc}
;;;51     
                          ENDP

                  LCD_GetIndexMask_222 PROC
;;;55     */
;;;56     unsigned LCD_GetIndexMask_222(void) {
00006a  203f              MOVS     r0,#0x3f
;;;57       return 0x0003f;
;;;58     }
00006c  4770              BX       lr
;;;59     
                          ENDP

                  LCD_Color2Index_M222 PROC
;;;69     */
;;;70     unsigned LCD_Color2Index_M222(LCD_COLOR Color) {
00006e  b530              PUSH     {r4,r5,lr}
000070  4601              MOV      r1,r0
;;;71       int r,g,b;
;;;72       r = ((Color&255)      +0x2a)/0x55;
000072  b2c8              UXTB     r0,r1
000074  f100002a          ADD      r0,r0,#0x2a
000078  f04f0555          MOV      r5,#0x55
00007c  fbb0f2f5          UDIV     r2,r0,r5
;;;73       g = (((Color>>8)&255) +0x2a)/0x55;
000080  f3c12007          UBFX     r0,r1,#8,#8
000084  f100002a          ADD      r0,r0,#0x2a
000088  fbb0f3f5          UDIV     r3,r0,r5
;;;74       b = (((Color>>16)&255)+0x2a)/0x55;
00008c  f3c14007          UBFX     r0,r1,#16,#8
000090  f100002a          ADD      r0,r0,#0x2a
000094  fbb0f4f5          UDIV     r4,r0,r5
;;;75       return b+(g<<2)+(r<<4);
000098  eb040083          ADD      r0,r4,r3,LSL #2
00009c  eb001002          ADD      r0,r0,r2,LSL #4
;;;76     }
0000a0  bd30              POP      {r4,r5,pc}
;;;77     
                          ENDP

                  LCD_Index2Color_M222 PROC
;;;81     */
;;;82     LCD_COLOR LCD_Index2Color_M222(int Index) {
0000a2  b510              PUSH     {r4,lr}
0000a4  4601              MOV      r1,r0
;;;83       U16P r,g,b;
;;;84       r = ((Index>>0)&3)*0x55;
0000a6  f0010003          AND      r0,r1,#3
0000aa  eb001000          ADD      r0,r0,r0,LSL #4
0000ae  eb000280          ADD      r2,r0,r0,LSL #2
;;;85       g = ((Index>>2)&3)*0x55;
0000b2  f3c10081          UBFX     r0,r1,#2,#2
0000b6  eb001000          ADD      r0,r0,r0,LSL #4
0000ba  eb000380          ADD      r3,r0,r0,LSL #2
;;;86       b = (Index>>4)    *0x55;
0000be  ea4f1021          ASR      r0,r1,#4
0000c2  eb001000          ADD      r0,r0,r0,LSL #4
0000c6  eb000080          ADD      r0,r0,r0,LSL #2
0000ca  b284              UXTH     r4,r0
;;;87       return (((U32)r)<<16)|(g<<8)|b;
0000cc  ea4f4002          LSL      r0,r2,#16
0000d0  ea402003          ORR      r0,r0,r3,LSL #8
0000d4  ea400004          ORR      r0,r0,r4
;;;88     }
0000d8  bd10              POP      {r4,pc}
;;;89     
                          ENDP

                  LCD_GetIndexMask_M222 PROC
;;;93     */
;;;94     unsigned LCD_GetIndexMask_M222(void) {
0000da  203f              MOVS     r0,#0x3f
;;;95       return 0x003f;
;;;96     }
0000dc  4770              BX       lr
;;;97     
                          ENDP

