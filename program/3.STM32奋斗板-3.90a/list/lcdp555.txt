; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\lcdp555.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\lcdp555.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -I.\GUI\AntiAlias -I.\GUI\Config -I.\GUI\ConvertColor -I.\GUI\ConvertMono -I.\GUI\Core -I.\GUI\Font -I.\GUI\GUI_X -I.\GUI\JPEG -I.\GUI\LCDDriver -I.\GUI\MemDev -I.\GUI\MultiLayer -I.\GUI\Widget -I.\GUI\WM -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\INC\ST\STM32F10x -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\lcdp555.crf GUI\ConvertColor\LCDP555.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=1

                  LCD_Color2Index_555 PROC
;;;48     */
;;;49     unsigned LCD_Color2Index_555(LCD_COLOR Color) {
000000  b510              PUSH     {r4,lr}
000002  4601              MOV      r1,r0
;;;50       int r,g,b;
;;;51       r = (Color>> (8  - R_BITS)) & R_MASK;
000004  f3c104c4          UBFX     r4,r1,#3,#5
;;;52       g = (Color>> (16 - G_BITS)) & G_MASK;
000008  f3c122c4          UBFX     r2,r1,#11,#5
;;;53       b = (Color>> (24 - B_BITS)) & B_MASK;
00000c  f3c143c4          UBFX     r3,r1,#19,#5
;;;54       return r + (g << R_BITS) + (b << (G_BITS + R_BITS));
000010  eb041042          ADD      r0,r4,r2,LSL #5
000014  eb002083          ADD      r0,r0,r3,LSL #10
;;;55     }
000018  bd10              POP      {r4,pc}
;;;56     
                          ENDP

                  LCD_Index2Color_555 PROC
;;;60     */
;;;61     LCD_COLOR LCD_Index2Color_555(int Index) {
00001a  b530              PUSH     {r4,r5,lr}
00001c  4601              MOV      r1,r0
;;;62       unsigned int r,g,b;
;;;63       /* Seperate the color masks */
;;;64       r = Index                                  & R_MASK;
00001e  f001041f          AND      r4,r1,#0x1f
;;;65       g = (Index >> R_BITS)                      & G_MASK;
000022  f3c11244          UBFX     r2,r1,#5,#5
;;;66       b = ((unsigned)Index >> (R_BITS + G_BITS)) & B_MASK;
000026  f3c12384          UBFX     r3,r1,#10,#5
;;;67       /* Convert the color masks */
;;;68       r = r * 255 / R_MASK;
00002a  ebc42004          RSB      r0,r4,r4,LSL #8
00002e  f04f051f          MOV      r5,#0x1f
000032  fbb0f4f5          UDIV     r4,r0,r5
;;;69       g = g * 255 / G_MASK;
000036  ebc22002          RSB      r0,r2,r2,LSL #8
00003a  fbb0f2f5          UDIV     r2,r0,r5
;;;70       b = b * 255 / B_MASK;
00003e  ebc32003          RSB      r0,r3,r3,LSL #8
000042  fbb0f3f5          UDIV     r3,r0,r5
;;;71       return r + (g<<8) + (((U32)b)<<16);
000046  eb042002          ADD      r0,r4,r2,LSL #8
00004a  eb004003          ADD      r0,r0,r3,LSL #16
;;;72     }
00004e  bd30              POP      {r4,r5,pc}
;;;73     
                          ENDP

                  LCD_GetIndexMask_555 PROC
;;;77     */
;;;78     unsigned LCD_GetIndexMask_555(void) {
000050  f64770ff          MOV      r0,#0x7fff
;;;79       return 0x7fff;
;;;80     }
000054  4770              BX       lr
;;;81     
                          ENDP

