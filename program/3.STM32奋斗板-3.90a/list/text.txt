; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\text.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\text.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -I.\GUI\AntiAlias -I.\GUI\Config -I.\GUI\ConvertColor -I.\GUI\ConvertMono -I.\GUI\Core -I.\GUI\Font -I.\GUI\GUI_X -I.\GUI\JPEG -I.\GUI\LCDDriver -I.\GUI\MemDev -I.\GUI\MultiLayer -I.\GUI\Widget -I.\GUI\WM -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\INC\ST\STM32F10x -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\text.crf GUI\Widget\TEXT.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _FreeAttached PROC
;;;64     */
;;;65     static void _FreeAttached(TEXT_Obj* pObj) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;66       GUI_ALLOC_FreePtr(&pObj->hpText);
000004  f1040028          ADD      r0,r4,#0x28
000008  f7fffffe          BL       GUI_ALLOC_FreePtr
;;;67     }
00000c  bd10              POP      {r4,pc}
;;;68     
                          ENDP

                  _Paint PROC
;;;72     */
;;;73     static void _Paint(TEXT_Handle hObj, TEXT_Obj* pObj) {
00000e  b57c              PUSH     {r2-r6,lr}
000010  4605              MOV      r5,r0
000012  460c              MOV      r4,r1
;;;74       const char * s;
;;;75       GUI_RECT Rect;
;;;76       GUI_USE_PARA(hObj);
000014  bf00              NOP      
;;;77       LCD_SetColor(pObj->TextColor);
000016  6b60              LDR      r0,[r4,#0x34]
000018  f7fffffe          BL       LCD_SetColor
;;;78       GUI_SetFont    (pObj->pFont);
00001c  6ae0              LDR      r0,[r4,#0x2c]
00001e  f7fffffe          BL       GUI_SetFont
;;;79       /* Fill with parents background color */
;;;80       #if !TEXT_SUPPORT_TRANSPARENCY   /* Not needed any more, since window is transparent*/
;;;81         if (pObj->BkColor == GUI_INVALID_COLOR) {
;;;82           LCD_SetBkColor(WIDGET__GetBkColor(hObj));
;;;83         } else {
;;;84           LCD_SetBkColor(pObj->BkColor);
;;;85         }
;;;86         GUI_Clear();
;;;87       #else
;;;88         if (!WM_GetHasTrans(hObj)) {
000022  4628              MOV      r0,r5
000024  f7fffffe          BL       WM_GetHasTrans
000028  b920              CBNZ     r0,|L1.52|
;;;89           LCD_SetBkColor(pObj->BkColor);
00002a  6ba0              LDR      r0,[r4,#0x38]
00002c  f7fffffe          BL       LCD_SetBkColor
;;;90           GUI_Clear();
000030  f7fffffe          BL       GUI_Clear
                  |L1.52|
;;;91         }
;;;92       #endif
;;;93       /* Show the text */
;;;94       if (pObj->hpText) {
000034  8d20              LDRH     r0,[r4,#0x28]
000036  b188              CBZ      r0,|L1.92|
;;;95         s = (const char*) GUI_ALLOC_h2p(pObj->hpText);
000038  f9b40028          LDRSH    r0,[r4,#0x28]
00003c  f7fffffe          BL       GUI_ALLOC_h2p
000040  4606              MOV      r6,r0
;;;96         GUI_SetTextMode(GUI_TM_TRANS);
000042  f04f0002          MOV      r0,#2
000046  f7fffffe          BL       GUI_SetTextMode
;;;97         WM_GetClientRect(&Rect);
00004a  4668              MOV      r0,sp
00004c  f7fffffe          BL       WM_GetClientRect
;;;98         GUI_DispStringInRect(s, &Rect, pObj->Align);
000050  f9b42030          LDRSH    r2,[r4,#0x30]
000054  4669              MOV      r1,sp
000056  4630              MOV      r0,r6
000058  f7fffffe          BL       GUI_DispStringInRect
                  |L1.92|
;;;99       }
;;;100    }
00005c  bd7c              POP      {r2-r6,pc}
;;;101    
                          ENDP

                  _Delete PROC
;;;105    */
;;;106    static void _Delete(TEXT_Obj* pObj) {
00005e  b510              PUSH     {r4,lr}
000060  4604              MOV      r4,r0
;;;107      /* Delete attached objects (if any) */
;;;108      GUI_DEBUG_LOG("TEXT: Delete() Deleting attached items");
;;;109      _FreeAttached(pObj);
000062  4620              MOV      r0,r4
000064  f7fffffe          BL       _FreeAttached
;;;110    }
000068  bd10              POP      {r4,pc}
;;;111    
                          ENDP

                  _TEXT_Callback PROC
;;;115    */
;;;116    static void _TEXT_Callback (WM_MESSAGE*pMsg) {
00006a  b570              PUSH     {r4-r6,lr}
00006c  4604              MOV      r4,r0
;;;117      TEXT_Handle hObj = pMsg->hWin;
00006e  f9b45004          LDRSH    r5,[r4,#4]
;;;118      TEXT_Obj* pObj = TEXT_H2P(hObj);
000072  4628              MOV      r0,r5
000074  f7fffffe          BL       GUI_ALLOC_h2p
000078  4606              MOV      r6,r0
;;;119      /* Let widget handle the standard messages */
;;;120      if (WIDGET_HandleActive(hObj, pMsg) == 0) {
00007a  4621              MOV      r1,r4
00007c  4628              MOV      r0,r5
00007e  f7fffffe          BL       WIDGET_HandleActive
000082  b900              CBNZ     r0,|L1.134|
                  |L1.132|
;;;121        return;
;;;122      }
;;;123      switch (pMsg->MsgId) {
;;;124      case WM_PAINT:
;;;125        GUI_DEBUG_LOG("TEXT: _Callback(WM_PAINT)\n");
;;;126        _Paint(hObj, pObj);
;;;127        return;
;;;128      case WM_DELETE:
;;;129        GUI_DEBUG_LOG("TEXT: _Callback(WM_DELETE)\n");
;;;130        _Delete(pObj);
;;;131        break;       /* No return here ... WM_DefaultProc needs to be called */
;;;132      }
;;;133      WM_DefaultProc(pMsg);
;;;134    }
000084  bd70              POP      {r4-r6,pc}
                  |L1.134|
000086  6820              LDR      r0,[r4,#0]            ;123
000088  280b              CMP      r0,#0xb               ;123
00008a  d006              BEQ      |L1.154|
00008c  280f              CMP      r0,#0xf               ;123
00008e  d108              BNE      |L1.162|
000090  4631              MOV      r1,r6                 ;126
000092  4628              MOV      r0,r5                 ;126
000094  f7fffffe          BL       _Paint
000098  e7f4              B        |L1.132|
                  |L1.154|
00009a  4630              MOV      r0,r6                 ;130
00009c  f7fffffe          BL       _Delete
0000a0  bf00              NOP                            ;131
                  |L1.162|
0000a2  bf00              NOP                            ;131
0000a4  4620              MOV      r0,r4                 ;133
0000a6  f7fffffe          BL       WM_DefaultProc
0000aa  bf00              NOP      
0000ac  e7ea              B        |L1.132|
;;;135    
                          ENDP

                  TEXT_CreateEx PROC
;;;149    */
;;;150    TEXT_Handle TEXT_CreateEx(int x0, int y0, int xsize, int ysize, WM_HWIN hParent,
0000ae  e92d4fff          PUSH     {r0-r11,lr}
;;;151                              int WinFlags, int ExFlags, int Id, const char* pText)
;;;152    {
0000b2  b085              SUB      sp,sp,#0x14
0000b4  4681              MOV      r9,r0
0000b6  468a              MOV      r10,r1
0000b8  4693              MOV      r11,r2
0000ba  9f13              LDR      r7,[sp,#0x4c]
0000bc  9d16              LDR      r5,[sp,#0x58]
;;;153      TEXT_Handle hObj;
;;;154      /* Create the window */
;;;155      #if TEXT_SUPPORT_TRANSPARENCY
;;;156        WinFlags |= WM_CF_HASTRANS;
0000be  f0470701          ORR      r7,r7,#1
;;;157      #endif
;;;158      hObj = WM_CreateWindowAsChild(x0, y0, xsize, ysize, hParent, WinFlags, _TEXT_Callback,
0000c2  f04f021c          MOV      r2,#0x1c
0000c6  4b24              LDR      r3,|L1.344|
0000c8  b2b8              UXTH     r0,r7
0000ca  9912              LDR      r1,[sp,#0x48]
0000cc  e9cd3202          STRD     r3,r2,[sp,#8]
0000d0  e9cd1000          STRD     r1,r0,[sp,#0]
0000d4  465a              MOV      r2,r11
0000d6  4651              MOV      r1,r10
0000d8  4648              MOV      r0,r9
0000da  9b08              LDR      r3,[sp,#0x20]
0000dc  f7fffffe          BL       WM_CreateWindowAsChild
0000e0  4680              MOV      r8,r0
;;;159                                    sizeof(TEXT_Obj) - sizeof(WM_Obj));
;;;160      if (hObj) {
0000e2  f1b80f00          CMP      r8,#0
0000e6  d02a              BEQ      |L1.318|
;;;161        TEXT_Obj* pObj;
;;;162        WM_HMEM hMem = 0;
0000e8  f04f0600          MOV      r6,#0
;;;163        WM_LOCK();
;;;164        pObj = TEXT_H2P(hObj);
0000ec  4640              MOV      r0,r8
0000ee  f7fffffe          BL       GUI_ALLOC_h2p
0000f2  4604              MOV      r4,r0
;;;165        /* init widget specific variables */
;;;166        WIDGET__Init(&pObj->Widget, Id, 0);
0000f4  4632              MOV      r2,r6
0000f6  4620              MOV      r0,r4
0000f8  9915              LDR      r1,[sp,#0x54]
0000fa  f7fffffe          BL       WIDGET__Init
;;;167        /* init member variables */
;;;168        TEXT_INIT_ID(pObj);
;;;169        if (pText) {
0000fe  b185              CBZ      r5,|L1.290|
;;;170          hMem = GUI_ALLOC_AllocZero(strlen(pText) + 1);
000100  4628              MOV      r0,r5
000102  f7fffffe          BL       strlen
000106  1c40              ADDS     r0,r0,#1
000108  b200              SXTH     r0,r0
00010a  9004              STR      r0,[sp,#0x10]
00010c  f7fffffe          BL       GUI_ALLOC_AllocZero
000110  4606              MOV      r6,r0
;;;171          if (hMem) {
000112  b136              CBZ      r6,|L1.290|
;;;172            strcpy((char*) GUI_ALLOC_h2p(hMem), pText);
000114  4630              MOV      r0,r6
000116  f7fffffe          BL       GUI_ALLOC_h2p
00011a  4629              MOV      r1,r5
00011c  9004              STR      r0,[sp,#0x10]
00011e  f7fffffe          BL       strcpy
                  |L1.290|
;;;173          }
;;;174        }
;;;175        pObj->hpText = hMem;
000122  8526              STRH     r6,[r4,#0x28]
;;;176        pObj->Align  = ExFlags;
000124  9814              LDR      r0,[sp,#0x50]
000126  b200              SXTH     r0,r0
000128  8620              STRH     r0,[r4,#0x30]
;;;177        pObj->pFont  = _pDefaultFont;
00012a  480c              LDR      r0,|L1.348|
00012c  6800              LDR      r0,[r0,#0]  ; _pDefaultFont
00012e  62e0              STR      r0,[r4,#0x2c]
;;;178        pObj->BkColor = GUI_INVALID_COLOR;
000130  f06f4070          MVN      r0,#0xf0000000
000134  63a0              STR      r0,[r4,#0x38]
;;;179        pObj->TextColor = _DefaultTextColor;
000136  480a              LDR      r0,|L1.352|
000138  6800              LDR      r0,[r0,#0]  ; _DefaultTextColor
00013a  6360              STR      r0,[r4,#0x34]
;;;180        WM_UNLOCK();
;;;181      } else {
00013c  bf00              NOP      
                  |L1.318|
;;;182        GUI_DEBUG_ERROROUT_IF(hObj==0, "TEXT_Create failed")
;;;183      }
;;;184      return hObj;
00013e  4640              MOV      r0,r8
;;;185    }
000140  b009              ADD      sp,sp,#0x24
000142  e8bd8ff0          POP      {r4-r11,pc}
;;;186    
                          ENDP

                  TEXT_SetDefaultFont PROC
;;;196    */
;;;197    void TEXT_SetDefaultFont(const GUI_FONT GUI_UNI_PTR * pFont) {
000146  4905              LDR      r1,|L1.348|
;;;198      _pDefaultFont = pFont;
000148  6008              STR      r0,[r1,#0]  ; _pDefaultFont
;;;199    }
00014a  4770              BX       lr
;;;200    
                          ENDP

                  TEXT_SetDefaultTextColor PROC
;;;204    */
;;;205    void TEXT_SetDefaultTextColor(GUI_COLOR Color) {
00014c  4904              LDR      r1,|L1.352|
;;;206      _DefaultTextColor = Color;
00014e  6008              STR      r0,[r1,#0]  ; _DefaultTextColor
;;;207    }
000150  4770              BX       lr
;;;208    
                          ENDP

                  TEXT_GetDefaultFont PROC
;;;212    */
;;;213    const GUI_FONT GUI_UNI_PTR * TEXT_GetDefaultFont(void) {
000152  4802              LDR      r0,|L1.348|
;;;214      return _pDefaultFont;
000154  6800              LDR      r0,[r0,#0]  ; _pDefaultFont
;;;215    }
000156  4770              BX       lr
;;;216    
                          ENDP

                  |L1.344|
                          DCD      _TEXT_Callback
                  |L1.348|
                          DCD      _pDefaultFont
                  |L1.352|
                          DCD      _DefaultTextColor

                          AREA ||.data||, DATA, ALIGN=2

                  _pDefaultFont
                          DCD      GUI_Font13_1
                  _DefaultTextColor
                          DCD      0x00000000
