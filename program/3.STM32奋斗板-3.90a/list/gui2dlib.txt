; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\gui2dlib.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\gui2dlib.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -I.\GUI\AntiAlias -I.\GUI\Config -I.\GUI\ConvertColor -I.\GUI\ConvertMono -I.\GUI\Core -I.\GUI\Font -I.\GUI\GUI_X -I.\GUI\JPEG -I.\GUI\LCDDriver -I.\GUI\MemDev -I.\GUI\MultiLayer -I.\GUI\Widget -I.\GUI\WM -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\INC\ST\STM32F10x -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\gui2dlib.crf GUI\Core\GUI2DLib.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _SwapInt PROC
;;;42     */
;;;43     static void _SwapInt(int* pa, int* pb) {
000000  6802              LDR      r2,[r0,#0]
;;;44       int t;
;;;45       t = *pa;
;;;46       *pa = *pb;
000002  680b              LDR      r3,[r1,#0]
000004  6003              STR      r3,[r0,#0]
;;;47       *pb = t;
000006  600a              STR      r2,[r1,#0]
;;;48     }
000008  4770              BX       lr
;;;49     
                          ENDP

                  Abs PROC
;;;53     */
;;;54     static int Abs(int v) {
00000a  4601              MOV      r1,r0
;;;55       return ABS(v);
00000c  2900              CMP      r1,#0
00000e  dd01              BLE      |L1.20|
000010  4608              MOV      r0,r1
                  |L1.18|
;;;56     }
000012  4770              BX       lr
                  |L1.20|
000014  4248              RSBS     r0,r1,#0              ;55
000016  e7fc              B        |L1.18|
;;;57     
                          ENDP

                  GUI_sin PROC
;;;105    */
;;;106    int GUI_sin(int angle) {
000018  b570              PUSH     {r4-r6,lr}
00001a  4601              MOV      r1,r0
;;;107      char IsNeg =0;
00001c  f04f0500          MOV      r5,#0
;;;108      int i;
;;;109    	U16 Faktor;
;;;110      U32 t;
;;;111      angle &= ((1<<12)-1);  /* reduce to 0-360 degrees */
000020  f3c1010b          UBFX     r1,r1,#0,#12
;;;112      if (angle> 2* GUI_90DEG) {
000024  f5b16f00          CMP      r1,#0x800
000028  dd03              BLE      |L1.50|
;;;113        angle -= 2* GUI_90DEG;
00002a  f5a16100          SUB      r1,r1,#0x800
;;;114        IsNeg =1;
00002e  f04f0501          MOV      r5,#1
                  |L1.50|
;;;115      }
;;;116      if (angle> GUI_90DEG) {  /* between 90-180 */
000032  f5b16f80          CMP      r1,#0x400
000036  dd01              BLE      |L1.60|
;;;117        angle = 2*GUI_90DEG-angle;   /* use sine symetry */
000038  f5c16100          RSB      r1,r1,#0x800
                  |L1.60|
;;;118      }
;;;119      /* Now angle is reduced to 0° <= <= 90° */
;;;120    #if 0
;;;121      angle >>=2;    /* make sure we do not exceed 16 bits in calculations */
;;;122      i = angle>>4;
;;;123      Faktor = (1<<4)-(angle&((1<<4)-1));
;;;124      r = aSin[i]*Faktor;
;;;125      if (Faktor !=(1<<4)) {
;;;126        r += aSin[i+1]*((1<<4)-Faktor);
;;;127      }
;;;128      r = (r+(1<<3)) >>4;   /* divide,incl. rounding */
;;;129    #else
;;;130      i = angle>>6;
00003c  ea4f14a1          ASR      r4,r1,#6
;;;131      {
;;;132        Faktor = (U16)((1<<6)-(angle&((1<<6)-1)));
000040  f001003f          AND      r0,r1,#0x3f
000044  f1c00240          RSB      r2,r0,#0x40
;;;133        t = aSin[i]*(U32)Faktor;
000048  48f9              LDR      r0,|L1.1072|
00004a  f8300014          LDRH     r0,[r0,r4,LSL #1]
00004e  fb00f302          MUL      r3,r0,r2
;;;134        if (Faktor !=(1<<6)) {
000052  2a40              CMP      r2,#0x40
000054  d008              BEQ      |L1.104|
;;;135          t += aSin[i+1]*((1<<6)-Faktor);
000056  4ef6              LDR      r6,|L1.1072|
000058  f1040001          ADD      r0,r4,#1
00005c  f8360010          LDRH     r0,[r6,r0,LSL #1]
000060  f1c20640          RSB      r6,r2,#0x40
000064  fb003306          MLA      r3,r0,r6,r3
                  |L1.104|
;;;136        }
;;;137    	}
;;;138      t = (t+(1<<5)) >>6;   /* divide,incl. rounding */
000068  f1030020          ADD      r0,r3,#0x20
00006c  ea4f1390          LSR      r3,r0,#6
;;;139    #endif
;;;140      return (IsNeg) ? 0-t : t;
000070  b10d              CBZ      r5,|L1.118|
000072  4258              RSBS     r0,r3,#0
                  |L1.116|
;;;141    }
000074  bd70              POP      {r4-r6,pc}
                  |L1.118|
000076  4618              MOV      r0,r3                 ;140
000078  e7fc              B        |L1.116|
;;;142    
                          ENDP

                  GUI_cos PROC
;;;146    */
;;;147    int GUI_cos(int angle) {
00007a  b510              PUSH     {r4,lr}
00007c  4604              MOV      r4,r0
;;;148      return GUI_sin(angle+GUI_90DEG);
00007e  f5046080          ADD      r0,r4,#0x400
000082  f7fffffe          BL       GUI_sin
;;;149    }
000086  bd10              POP      {r4,pc}
;;;150    
                          ENDP

                  _atan0_45 PROC
;;;182    */
;;;183    static int _atan0_45(int q) {
000088  b530              PUSH     {r4,r5,lr}
00008a  4601              MOV      r1,r0
;;;184      int r;
;;;185      int i, Faktor;
;;;186      /* Now angle is reduced to 0° <= <= 90° ==>  0 <= <= 256*/
;;;187      q >>=2;    /* make sure we do not exceed 16 bits in calculations */
00008c  ea4f01a1          ASR      r1,r1,#2
;;;188      i = q>>4;
000090  ea4f1321          ASR      r3,r1,#4
;;;189      Faktor = (1<<4)-(q&((1<<4)-1));
000094  f001040f          AND      r4,r1,#0xf
000098  f1c40210          RSB      r2,r4,#0x10
;;;190      r = aTan[i]*Faktor;
00009c  4ce5              LDR      r4,|L1.1076|
00009e  f9344013          LDRSH    r4,[r4,r3,LSL #1]
0000a2  fb04f002          MUL      r0,r4,r2
;;;191      if (Faktor !=(1<<4)) {
0000a6  2a10              CMP      r2,#0x10
0000a8  d008              BEQ      |L1.188|
;;;192        r += aTan[i+1]*((1<<4)-Faktor);
0000aa  4de2              LDR      r5,|L1.1076|
0000ac  f1030401          ADD      r4,r3,#1
0000b0  f9354014          LDRSH    r4,[r5,r4,LSL #1]
0000b4  f1c20510          RSB      r5,r2,#0x10
0000b8  fb040005          MLA      r0,r4,r5,r0
                  |L1.188|
;;;193      }
;;;194      r = (r+(1<<3))/(1<<4);   /* divide  incl. rounding */
0000bc  f1000408          ADD      r4,r0,#8
0000c0  ea4f75e4          ASR      r5,r4,#31
0000c4  eb047515          ADD      r5,r4,r5,LSR #28
0000c8  ea4f1025          ASR      r0,r5,#4
;;;195      return r;
;;;196    }
0000cc  bd30              POP      {r4,r5,pc}
;;;197    
                          ENDP

                  _atan2 PROC
;;;201    */
;;;202    static int _atan2(I32 x, I32 y) {
0000ce  e92d41f0          PUSH     {r4-r8,lr}
0000d2  4605              MOV      r5,r0
0000d4  460c              MOV      r4,r1
;;;203      U8 q =0;
0000d6  f04f0600          MOV      r6,#0
;;;204      int angle;
;;;205    /* first make sure we are in angle between 0 and 45° */
;;;206      if (x<0) {
0000da  2d00              CMP      r5,#0
0000dc  da03              BGE      |L1.230|
;;;207        q=1;
0000de  f04f0601          MOV      r6,#1
;;;208        x=-x;
0000e2  f1c50500          RSB      r5,r5,#0
                  |L1.230|
;;;209      }
;;;210      if (y<0) {
0000e6  2c00              CMP      r4,#0
0000e8  da03              BGE      |L1.242|
;;;211        q |= (1<<1);
0000ea  f0460602          ORR      r6,r6,#2
;;;212        y=-y;
0000ee  f1c40400          RSB      r4,r4,#0
                  |L1.242|
;;;213      }
;;;214      if (y>x) {
0000f2  42ac              CMP      r4,r5
0000f4  dd05              BLE      |L1.258|
;;;215        int t = y;
0000f6  4620              MOV      r0,r4
;;;216        y=x;
0000f8  462c              MOV      r4,r5
;;;217        x=t;
0000fa  4605              MOV      r5,r0
;;;218        q |= (1<<2);  
0000fc  f0460604          ORR      r6,r6,#4
;;;219      }
000100  bf00              NOP      
                  |L1.258|
;;;220      y <<=10;
000102  ea4f2484          LSL      r4,r4,#10
;;;221      y += (x/2);
000106  4628              MOV      r0,r5
000108  eb0571d0          ADD      r1,r5,r0,LSR #31
00010c  eb040461          ADD      r4,r4,r1,ASR #1
;;;222      y /= x;
000110  fb94f4f5          SDIV     r4,r4,r5
;;;223      angle = _atan0_45(y);
000114  4620              MOV      r0,r4
000116  f7fffffe          BL       _atan0_45
00011a  4607              MOV      r7,r0
;;;224      if (q&(1<<2)) { /* y/x reverse ? */
00011c  f0160f04          TST      r6,#4
000120  d001              BEQ      |L1.294|
;;;225        angle = GUI_90DEG-angle;
000122  f5c76780          RSB      r7,r7,#0x400
                  |L1.294|
;;;226      }
;;;227      if (q&1) {  /* xreverse ? */
000126  f0160f01          TST      r6,#1
00012a  d001              BEQ      |L1.304|
;;;228        angle = GUI_180DEG-angle;
00012c  f5c76700          RSB      r7,r7,#0x800
                  |L1.304|
;;;229      }
;;;230      if (q&(1<<1)) { /* y-reverse ? */
000130  f0160f02          TST      r6,#2
000134  d001              BEQ      |L1.314|
;;;231        angle = GUI_360DEG-angle;
000136  f5c75780          RSB      r7,r7,#0x1000
                  |L1.314|
;;;232      }
;;;233      return angle;
00013a  4638              MOV      r0,r7
;;;234    }
00013c  e8bd81f0          POP      {r4-r8,pc}
;;;235    
                          ENDP

                  _SetLineColor PROC
;;;239    */
;;;240    static int _SetLineColor(int i) {
000140  4601              MOV      r1,r0
;;;241      switch (GUI_Context.LineStyle) {
000142  48bd              LDR      r0,|L1.1080|
000144  7d80              LDRB     r0,[r0,#0x16]  ; GUI_Context
000146  2801              CMP      r0,#1
000148  d006              BEQ      |L1.344|
00014a  2802              CMP      r0,#2
00014c  d014              BEQ      |L1.376|
00014e  2803              CMP      r0,#3
000150  d021              BEQ      |L1.406|
000152  2804              CMP      r0,#4
000154  d149              BNE      |L1.490|
000156  e030              B        |L1.442|
                  |L1.344|
;;;242      case GUI_LS_DASH:
;;;243        i = (i+6)%16;
000158  f1010006          ADD      r0,r1,#6
00015c  ea4f72e0          ASR      r2,r0,#31
000160  eb007212          ADD      r2,r0,r2,LSR #28
000164  ea4f1222          ASR      r2,r2,#4
000168  eba01102          SUB      r1,r0,r2,LSL #4
;;;244        return (i<12);
00016c  290c              CMP      r1,#0xc
00016e  da01              BGE      |L1.372|
000170  2001              MOVS     r0,#1
                  |L1.370|
;;;245      case GUI_LS_DOT:
;;;246        i %= 4;
;;;247        return (i<2);
;;;248      case GUI_LS_DASHDOT:
;;;249        i %= 20;
;;;250        if (i<12)
;;;251          return 1;
;;;252        else if ((i>=16) && (i<18))
;;;253          return 1;
;;;254        return 0;
;;;255      case GUI_LS_DASHDOTDOT:
;;;256        i %= 24;
;;;257        if (i<12)
;;;258          return 1;
;;;259        else if ((i>=16) && (i<18))
;;;260          return 1;
;;;261        else if ((i>=20) && (i<22))
;;;262          return 1;
;;;263        else 
;;;264          return 0;
;;;265      }
;;;266      return 0;
;;;267    }
000172  4770              BX       lr
                  |L1.372|
000174  2000              MOVS     r0,#0                 ;244
000176  e7fc              B        |L1.370|
                  |L1.376|
000178  4608              MOV      r0,r1                 ;246
00017a  ea4f72e1          ASR      r2,r1,#31             ;246
00017e  eb017292          ADD      r2,r1,r2,LSR #30      ;246
000182  ea4f02a2          ASR      r2,r2,#2              ;246
000186  eba10182          SUB      r1,r1,r2,LSL #2       ;246
00018a  2902              CMP      r1,#2                 ;247
00018c  da01              BGE      |L1.402|
00018e  2001              MOVS     r0,#1                 ;247
000190  e7ef              B        |L1.370|
                  |L1.402|
000192  2000              MOVS     r0,#0                 ;247
000194  e7ed              B        |L1.370|
                  |L1.406|
000196  f04f0014          MOV      r0,#0x14              ;249
00019a  fb91f2f0          SDIV     r2,r1,r0              ;249
00019e  fb001112          MLS      r1,r0,r2,r1           ;249
0001a2  290c              CMP      r1,#0xc               ;250
0001a4  da01              BGE      |L1.426|
0001a6  2001              MOVS     r0,#1                 ;251
0001a8  e7e3              B        |L1.370|
                  |L1.426|
0001aa  2910              CMP      r1,#0x10              ;252
0001ac  db03              BLT      |L1.438|
0001ae  2912              CMP      r1,#0x12              ;252
0001b0  da01              BGE      |L1.438|
0001b2  2001              MOVS     r0,#1                 ;253
0001b4  e7dd              B        |L1.370|
                  |L1.438|
0001b6  2000              MOVS     r0,#0                 ;254
0001b8  e7db              B        |L1.370|
                  |L1.442|
0001ba  f04f0018          MOV      r0,#0x18              ;256
0001be  fb91f2f0          SDIV     r2,r1,r0              ;256
0001c2  fb001112          MLS      r1,r0,r2,r1           ;256
0001c6  290c              CMP      r1,#0xc               ;257
0001c8  da01              BGE      |L1.462|
0001ca  2001              MOVS     r0,#1                 ;258
0001cc  e7d1              B        |L1.370|
                  |L1.462|
0001ce  2910              CMP      r1,#0x10              ;259
0001d0  db03              BLT      |L1.474|
0001d2  2912              CMP      r1,#0x12              ;259
0001d4  da01              BGE      |L1.474|
0001d6  2001              MOVS     r0,#1                 ;260
0001d8  e7cb              B        |L1.370|
                  |L1.474|
0001da  2914              CMP      r1,#0x14              ;261
0001dc  db03              BLT      |L1.486|
0001de  2916              CMP      r1,#0x16              ;261
0001e0  da01              BGE      |L1.486|
0001e2  2001              MOVS     r0,#1                 ;262
0001e4  e7c5              B        |L1.370|
                  |L1.486|
0001e6  2000              MOVS     r0,#0                 ;264
0001e8  e7c3              B        |L1.370|
                  |L1.490|
0001ea  2000              MOVS     r0,#0                 ;266
0001ec  e7c1              B        |L1.370|
;;;268    
                          ENDP

                  _CalcOrto PROC
;;;283    */
;;;284    static void _CalcOrto(int xDiff, int yDiff, I32 r, int*px, int*py) {
0001ee  e92d5ff0          PUSH     {r4-r12,lr}
0001f2  4681              MOV      r9,r0
0001f4  468a              MOV      r10,r1
0001f6  4616              MOV      r6,r2
0001f8  461f              MOV      r7,r3
0001fa  f8ddb028          LDR      r11,[sp,#0x28]
;;;285      I32 x,y;
;;;286    /*
;;;287      int Angle = _atan2(xDiff, yDiff);
;;;288    */
;;;289    #if 0
;;;290      double Angle = atan2(xDiff, yDiff);
;;;291      x = (int)(-r*cos(Angle));
;;;292      y = (int)(r*sin(Angle));
;;;293    #else
;;;294      int Angle = _atan2(xDiff, yDiff);
0001fe  4651              MOV      r1,r10
000200  4648              MOV      r0,r9
000202  f7fffffe          BL       _atan2
000206  4680              MOV      r8,r0
;;;295      Angle+= GUI_90DEG;
000208  f5086880          ADD      r8,r8,#0x400
;;;296      x = ( r*(I32)GUI_cos(Angle));
00020c  4640              MOV      r0,r8
00020e  f7fffffe          BL       GUI_cos
000212  fb00f406          MUL      r4,r0,r6
;;;297      y = ( r*(I32)GUI_sin(Angle));
000216  4640              MOV      r0,r8
000218  f7fffffe          BL       GUI_sin
00021c  fb00f506          MUL      r5,r0,r6
;;;298    #endif
;;;299      x = (x<0) ? -((-x+512)>>10) : ((x+512)>>10);
000220  2c00              CMP      r4,#0
000222  da06              BGE      |L1.562|
000224  f5c47000          RSB      r0,r4,#0x200
000228  ea4f20a0          ASR      r0,r0,#10
00022c  f1c00000          RSB      r0,r0,#0
000230  e003              B        |L1.570|
                  |L1.562|
000232  f5047000          ADD      r0,r4,#0x200
000236  ea4f20a0          ASR      r0,r0,#10
                  |L1.570|
00023a  4604              MOV      r4,r0
;;;300      y = (y<0) ? -((-y+512)>>10) : ((y+512)>>10);
00023c  2d00              CMP      r5,#0
00023e  da06              BGE      |L1.590|
000240  f5c57000          RSB      r0,r5,#0x200
000244  ea4f20a0          ASR      r0,r0,#10
000248  f1c00000          RSB      r0,r0,#0
00024c  e003              B        |L1.598|
                  |L1.590|
00024e  f5057000          ADD      r0,r5,#0x200
000252  ea4f20a0          ASR      r0,r0,#10
                  |L1.598|
000256  4605              MOV      r5,r0
;;;301      *px = x;
000258  603c              STR      r4,[r7,#0]
;;;302      *py = y;
00025a  f8cb5000          STR      r5,[r11,#0]
;;;303    }
00025e  e8bd9ff0          POP      {r4-r12,pc}
;;;304    
                          ENDP

                  GL_DrawPoint PROC
;;;663    */
;;;664    void GL_DrawPoint(int x, int y) {
000262  b570              PUSH     {r4-r6,lr}
000264  4604              MOV      r4,r0
000266  460d              MOV      r5,r1
;;;665      if (GUI_Context.PenSize == 1) {
000268  4873              LDR      r0,|L1.1080|
00026a  7d00              LDRB     r0,[r0,#0x14]  ; GUI_Context
00026c  2801              CMP      r0,#1
00026e  d106              BNE      |L1.638|
;;;666        LCD_HL_DrawPixel(x, y);
000270  4871              LDR      r0,|L1.1080|
000272  6d80              LDR      r0,[r0,#0x58]  ; GUI_Context
000274  4629              MOV      r1,r5
000276  6842              LDR      r2,[r0,#4]
000278  4620              MOV      r0,r4
00027a  4790              BLX      r2
00027c  e009              B        |L1.658|
                  |L1.638|
;;;667      } else {
;;;668        GL_FillCircle(x, y, (GUI_Context.PenSize - 1) / 2);
00027e  486e              LDR      r0,|L1.1080|
000280  7d00              LDRB     r0,[r0,#0x14]  ; GUI_Context
000282  1e46              SUBS     r6,r0,#1
000284  eb0670d6          ADD      r0,r6,r6,LSR #31
000288  1042              ASRS     r2,r0,#1
00028a  4629              MOV      r1,r5
00028c  4620              MOV      r0,r4
00028e  f7fffffe          BL       GL_FillCircle
                  |L1.658|
;;;669      }
;;;670    }
000292  bd70              POP      {r4-r6,pc}
;;;671    
                          ENDP

                  _DrawLineEnd PROC
;;;317    */
;;;318    static void _DrawLineEnd(int x0, int y0) {
000294  b570              PUSH     {r4-r6,lr}
000296  4604              MOV      r4,r0
000298  460d              MOV      r5,r1
;;;319      switch (GUI_Context.PenShape) {
00029a  4867              LDR      r0,|L1.1080|
00029c  7d40              LDRB     r0,[r0,#0x15]  ; GUI_Context
00029e  b110              CBZ      r0,|L1.678|
0002a0  2801              CMP      r0,#1
0002a2  d106              BNE      |L1.690|
0002a4  e004              B        |L1.688|
                  |L1.678|
;;;320      case GUI_PS_ROUND:
;;;321        GL_DrawPoint(x0,y0);
0002a6  4629              MOV      r1,r5
0002a8  4620              MOV      r0,r4
0002aa  f7fffffe          BL       GL_DrawPoint
;;;322        break;
0002ae  e000              B        |L1.690|
                  |L1.688|
;;;323      case GUI_PS_FLAT:
;;;324        break;
0002b0  bf00              NOP      
                  |L1.690|
0002b2  bf00              NOP                            ;322
;;;325      }
;;;326    }
0002b4  bd70              POP      {r4-r6,pc}
;;;327    
                          ENDP

                  GL_DrawLine1 PROC
;;;588    */
;;;589    void GL_DrawLine1(int x0, int y0, int x1, int y1) {
0002b6  e92d41ff          PUSH     {r0-r8,lr}
0002ba  b082              SUB      sp,sp,#8
;;;590      int xdiff = x1-x0;
0002bc  9902              LDR      r1,[sp,#8]
0002be  9804              LDR      r0,[sp,#0x10]
0002c0  eba00001          SUB      r0,r0,r1
0002c4  9001              STR      r0,[sp,#4]
;;;591      int ydiff = y1-y0;
0002c6  9903              LDR      r1,[sp,#0xc]
0002c8  9805              LDR      r0,[sp,#0x14]
0002ca  eba00001          SUB      r0,r0,r1
0002ce  9000              STR      r0,[sp,#0]
;;;592      int xdiffby2;
;;;593      int i;
;;;594      char Swapped =0;
0002d0  f04f0700          MOV      r7,#0
;;;595    /* check if no line */
;;;596      if (!(xdiff|ydiff)) {
0002d4  e9dd1000          LDRD     r1,r0,[sp,#0]
0002d8  4308              ORRS     r0,r0,r1
0002da  d106              BNE      |L1.746|
;;;597        GL_DrawPoint(x0,y0);
0002dc  e9dd0102          LDRD     r0,r1,[sp,#8]
0002e0  f7fffffe          BL       GL_DrawPoint
                  |L1.740|
;;;598        return;
;;;599      }
;;;600    #if 0
;;;601    /* check if horizontal line */
;;;602      if (!xdiff) {
;;;603        GL_DrawVLine(x0,y0,y1);
;;;604        return;
;;;605      }
;;;606    /* check if vertical line */
;;;607      if (!ydiff) {
;;;608        GL_DrawHLine(y0,x0,x1);
;;;609        return;
;;;610      }
;;;611    #endif
;;;612    /* check if we swap x and y for calculation */
;;;613      if (Abs(xdiff) < Abs(ydiff)) {
;;;614        _SwapInt(&xdiff,&ydiff);
;;;615        _SwapInt(&x0,&y0);
;;;616        _SwapInt(&x1,&y1);
;;;617        Swapped =1;
;;;618      }
;;;619    /* make sure line direction is positive */
;;;620      if (xdiff!=Abs(xdiff)) {
;;;621        xdiff = -xdiff;
;;;622        ydiff = -ydiff;
;;;623        _SwapInt(&x0,&x1);
;;;624        _SwapInt(&y0,&y1);
;;;625      }
;;;626      xdiffby2 = xdiff/2;
;;;627      if (ydiff<0)
;;;628        xdiffby2 = -xdiffby2;
;;;629    /* Draw pixel by pixel solid*/
;;;630      if (GUI_Context.LineStyle == GUI_LS_SOLID) {
;;;631        for (i=0; i<=xdiff; i++) {
;;;632          I32 l = ((I32)ydiff)*i+xdiffby2;
;;;633          int y = (ABS(l)<32767) ? (y0 + ((int)l)/xdiff) : (y0 + l/xdiff);
;;;634          if (!Swapped)
;;;635            LCD_HL_DrawPixel(x0+i, y);
;;;636          else
;;;637            LCD_HL_DrawPixel(y, x0+i);
;;;638        }
;;;639    /* Draw pixel by pixel with fill style */
;;;640      } else {
;;;641        for (i=0; i<=xdiff; i++) {
;;;642          long l = ((long)ydiff)*i+xdiffby2;
;;;643          int y = (ABS(l)<32767) ? (y0 + ((int)l)/xdiff) : (y0 + l/xdiff);
;;;644          if (!_SetLineColor(i)) {
;;;645            if (!Swapped)
;;;646              LCD_HL_DrawPixel(x0+i, y);
;;;647            else
;;;648              LCD_HL_DrawPixel(y, x0+i);
;;;649          }
;;;650        }
;;;651      }
;;;652    }
0002e4  b006              ADD      sp,sp,#0x18
0002e6  e8bd81f0          POP      {r4-r8,pc}
                  |L1.746|
0002ea  9801              LDR      r0,[sp,#4]            ;613
0002ec  f7fffffe          BL       Abs
0002f0  4606              MOV      r6,r0                 ;613
0002f2  9800              LDR      r0,[sp,#0]            ;613
0002f4  f7fffffe          BL       Abs
0002f8  4286              CMP      r6,r0                 ;613
0002fa  da0d              BGE      |L1.792|
0002fc  4669              MOV      r1,sp                 ;614
0002fe  a801              ADD      r0,sp,#4              ;614
000300  f7fffffe          BL       _SwapInt
000304  a903              ADD      r1,sp,#0xc            ;615
000306  a802              ADD      r0,sp,#8              ;615
000308  f7fffffe          BL       _SwapInt
00030c  a905              ADD      r1,sp,#0x14           ;616
00030e  a804              ADD      r0,sp,#0x10           ;616
000310  f7fffffe          BL       _SwapInt
000314  f04f0701          MOV      r7,#1                 ;617
                  |L1.792|
000318  9801              LDR      r0,[sp,#4]            ;620
00031a  f7fffffe          BL       Abs
00031e  9901              LDR      r1,[sp,#4]            ;620
000320  4288              CMP      r0,r1                 ;620
000322  d00f              BEQ      |L1.836|
000324  9801              LDR      r0,[sp,#4]            ;621
000326  f1c00000          RSB      r0,r0,#0              ;621
00032a  9001              STR      r0,[sp,#4]            ;621
00032c  9800              LDR      r0,[sp,#0]            ;622
00032e  f1c00000          RSB      r0,r0,#0              ;622
000332  9000              STR      r0,[sp,#0]            ;622
000334  a904              ADD      r1,sp,#0x10           ;623
000336  a802              ADD      r0,sp,#8              ;623
000338  f7fffffe          BL       _SwapInt
00033c  a905              ADD      r1,sp,#0x14           ;624
00033e  a803              ADD      r0,sp,#0xc            ;624
000340  f7fffffe          BL       _SwapInt
                  |L1.836|
000344  9801              LDR      r0,[sp,#4]            ;626
000346  eb0071d0          ADD      r1,r0,r0,LSR #31      ;626
00034a  ea4f0561          ASR      r5,r1,#1              ;626
00034e  9800              LDR      r0,[sp,#0]            ;627
000350  2800              CMP      r0,#0                 ;627
000352  da01              BGE      |L1.856|
000354  f1c50500          RSB      r5,r5,#0              ;628
                  |L1.856|
000358  4837              LDR      r0,|L1.1080|
00035a  7d80              LDRB     r0,[r0,#0x16]         ;630  ; GUI_Context
00035c  bb80              CBNZ     r0,|L1.960|
00035e  f04f0400          MOV      r4,#0                 ;631
000362  e029              B        |L1.952|
                  |L1.868|
000364  9800              LDR      r0,[sp,#0]            ;632
000366  fb005604          MLA      r6,r0,r4,r5           ;632
00036a  2e00              CMP      r6,#0                 ;633
00036c  dd01              BLE      |L1.882|
00036e  4630              MOV      r0,r6                 ;633
000370  e000              B        |L1.884|
                  |L1.882|
000372  4270              RSBS     r0,r6,#0              ;633
                  |L1.884|
000374  f64771ff          MOV      r1,#0x7fff            ;633
000378  4288              CMP      r0,r1                 ;633
00037a  da05              BGE      |L1.904|
00037c  9801              LDR      r0,[sp,#4]            ;633
00037e  fb96f0f0          SDIV     r0,r6,r0              ;633
000382  9903              LDR      r1,[sp,#0xc]          ;633
000384  4408              ADD      r0,r0,r1              ;633
000386  e004              B        |L1.914|
                  |L1.904|
000388  9801              LDR      r0,[sp,#4]            ;633
00038a  fb96f0f0          SDIV     r0,r6,r0              ;633
00038e  9903              LDR      r1,[sp,#0xc]          ;633
000390  4408              ADD      r0,r0,r1              ;633
                  |L1.914|
000392  4680              MOV      r8,r0                 ;633
000394  b93f              CBNZ     r7,|L1.934|
000396  9902              LDR      r1,[sp,#8]            ;635
000398  1908              ADDS     r0,r1,r4              ;635
00039a  4927              LDR      r1,|L1.1080|
00039c  6d89              LDR      r1,[r1,#0x58]         ;635  ; GUI_Context
00039e  684a              LDR      r2,[r1,#4]            ;635
0003a0  4641              MOV      r1,r8                 ;635
0003a2  4790              BLX      r2                    ;635
0003a4  e006              B        |L1.948|
                  |L1.934|
0003a6  9802              LDR      r0,[sp,#8]            ;637
0003a8  1901              ADDS     r1,r0,r4              ;637
0003aa  4823              LDR      r0,|L1.1080|
0003ac  6d80              LDR      r0,[r0,#0x58]         ;637  ; GUI_Context
0003ae  6842              LDR      r2,[r0,#4]            ;637
0003b0  4640              MOV      r0,r8                 ;637
0003b2  4790              BLX      r2                    ;637
                  |L1.948|
0003b4  f1040401          ADD      r4,r4,#1              ;631
                  |L1.952|
0003b8  9801              LDR      r0,[sp,#4]            ;631
0003ba  4284              CMP      r4,r0                 ;631
0003bc  ddd2              BLE      |L1.868|
0003be  e034              B        |L1.1066|
                  |L1.960|
0003c0  e7ff              B        |L1.962|
                  |L1.962|
0003c2  f04f0400          MOV      r4,#0                 ;641
0003c6  e02d              B        |L1.1060|
                  |L1.968|
0003c8  9800              LDR      r0,[sp,#0]            ;642
0003ca  fb005604          MLA      r6,r0,r4,r5           ;642
0003ce  2e00              CMP      r6,#0                 ;643
0003d0  dd01              BLE      |L1.982|
0003d2  4630              MOV      r0,r6                 ;643
0003d4  e000              B        |L1.984|
                  |L1.982|
0003d6  4270              RSBS     r0,r6,#0              ;643
                  |L1.984|
0003d8  f64771ff          MOV      r1,#0x7fff            ;643
0003dc  4288              CMP      r0,r1                 ;643
0003de  da05              BGE      |L1.1004|
0003e0  9801              LDR      r0,[sp,#4]            ;643
0003e2  fb96f0f0          SDIV     r0,r6,r0              ;643
0003e6  9903              LDR      r1,[sp,#0xc]          ;643
0003e8  4408              ADD      r0,r0,r1              ;643
0003ea  e004              B        |L1.1014|
                  |L1.1004|
0003ec  9801              LDR      r0,[sp,#4]            ;643
0003ee  fb96f0f0          SDIV     r0,r6,r0              ;643
0003f2  9903              LDR      r1,[sp,#0xc]          ;643
0003f4  4408              ADD      r0,r0,r1              ;643
                  |L1.1014|
0003f6  4680              MOV      r8,r0                 ;643
0003f8  4620              MOV      r0,r4                 ;644
0003fa  f7fffffe          BL       _SetLineColor
0003fe  b978              CBNZ     r0,|L1.1056|
000400  b93f              CBNZ     r7,|L1.1042|
000402  9902              LDR      r1,[sp,#8]            ;646
000404  1908              ADDS     r0,r1,r4              ;646
000406  490c              LDR      r1,|L1.1080|
000408  6d89              LDR      r1,[r1,#0x58]         ;646  ; GUI_Context
00040a  684a              LDR      r2,[r1,#4]            ;646
00040c  4641              MOV      r1,r8                 ;646
00040e  4790              BLX      r2                    ;646
000410  e006              B        |L1.1056|
                  |L1.1042|
000412  9802              LDR      r0,[sp,#8]            ;648
000414  1901              ADDS     r1,r0,r4              ;648
000416  4808              LDR      r0,|L1.1080|
000418  6d80              LDR      r0,[r0,#0x58]         ;648  ; GUI_Context
00041a  6842              LDR      r2,[r0,#4]            ;648
00041c  4640              MOV      r0,r8                 ;648
00041e  4790              BLX      r2                    ;648
                  |L1.1056|
000420  f1040401          ADD      r4,r4,#1              ;641
                  |L1.1060|
000424  9801              LDR      r0,[sp,#4]            ;641
000426  4284              CMP      r4,r0                 ;641
000428  ddce              BLE      |L1.968|
                  |L1.1066|
00042a  bf00              NOP      
00042c  e75a              B        |L1.740|
00042e  0000              DCW      0x0000
                  |L1.1072|
                          DCD      aSin
                  |L1.1076|
                          DCD      aTan
                  |L1.1080|
                          DCD      GUI_Context
                          ENDP

                  GL_DrawLine PROC
;;;337    */
;;;338    void GL_DrawLine(int x0, int y0, int x1, int y1) {
00043c  e92d4ff0          PUSH     {r4-r11,lr}
000440  b089              SUB      sp,sp,#0x24
000442  4606              MOV      r6,r0
000444  460f              MOV      r7,r1
000446  4614              MOV      r4,r2
000448  461d              MOV      r5,r3
;;;339      if (GUI_Context.PenSize ==1) {
00044a  48fe              LDR      r0,|L1.2116|
00044c  7d00              LDRB     r0,[r0,#0x14]  ; GUI_Context
00044e  2801              CMP      r0,#1
000450  d106              BNE      |L1.1120|
;;;340        GL_DrawLine1(x0,y0,x1,y1);
000452  462b              MOV      r3,r5
000454  4622              MOV      r2,r4
000456  4639              MOV      r1,r7
000458  4630              MOV      r0,r6
00045a  f7fffffe          BL       GL_DrawLine1
00045e  e085              B        |L1.1388|
                  |L1.1120|
;;;341      } else {
;;;342        int xdiff, ydiff;
;;;343        xdiff = x0-x1;
000460  eba60004          SUB      r0,r6,r4
000464  9008              STR      r0,[sp,#0x20]
;;;344        ydiff = y0-y1;
000466  eba70005          SUB      r0,r7,r5
00046a  9007              STR      r0,[sp,#0x1c]
;;;345        if (xdiff | ydiff) {    
00046c  e9dd1007          LDRD     r1,r0,[sp,#0x1c]
000470  4308              ORRS     r0,r0,r1
000472  d07a              BEQ      |L1.1386|
;;;346          GUI_POINT Poly[4];
;;;347          int xOff, yOff;
;;;348          int xOffP, yOffP, xOffM, yOffM;
;;;349          _CalcOrto(x0-x1,y0-y1, (I32)(GUI_Context.PenSize-1), &xOff, &yOff);
000474  a801              ADD      r0,sp,#4
000476  4bf3              LDR      r3,|L1.2116|
000478  9000              STR      r0,[sp,#0]
00047a  7d1b              LDRB     r3,[r3,#0x14]  ; GUI_Context
00047c  1e5a              SUBS     r2,r3,#1
00047e  1b79              SUBS     r1,r7,r5
000480  1b30              SUBS     r0,r6,r4
000482  ab02              ADD      r3,sp,#8
000484  f7fffffe          BL       _CalcOrto
;;;350      /* Do rounding for offsets */
;;;351          if (xOff >0) {
000488  9802              LDR      r0,[sp,#8]
00048a  2800              CMP      r0,#0
00048c  dd0c              BLE      |L1.1192|
;;;352            xOffP = (xOff+1)/2;
00048e  9902              LDR      r1,[sp,#8]
000490  f1010001          ADD      r0,r1,#1
000494  eb0071d0          ADD      r1,r0,r0,LSR #31
000498  ea4f0861          ASR      r8,r1,#1
;;;353            xOffM =  xOff   /2;
00049c  9802              LDR      r0,[sp,#8]
00049e  eb0071d0          ADD      r1,r0,r0,LSR #31
0004a2  ea4f0a61          ASR      r10,r1,#1
0004a6  e00b              B        |L1.1216|
                  |L1.1192|
;;;354          } else {
;;;355            xOffP =   xOff/2;
0004a8  9802              LDR      r0,[sp,#8]
0004aa  eb0071d0          ADD      r1,r0,r0,LSR #31
0004ae  ea4f0861          ASR      r8,r1,#1
;;;356            xOffM =  (xOff-1)   /2;
0004b2  9902              LDR      r1,[sp,#8]
0004b4  f1a10001          SUB      r0,r1,#1
0004b8  eb0071d0          ADD      r1,r0,r0,LSR #31
0004bc  ea4f0a61          ASR      r10,r1,#1
                  |L1.1216|
;;;357          }
;;;358          if (yOff >0) {
0004c0  9801              LDR      r0,[sp,#4]
0004c2  2800              CMP      r0,#0
0004c4  dd0c              BLE      |L1.1248|
;;;359            yOffP = (yOff+1)/2;
0004c6  9901              LDR      r1,[sp,#4]
0004c8  f1010001          ADD      r0,r1,#1
0004cc  eb0071d0          ADD      r1,r0,r0,LSR #31
0004d0  ea4f0961          ASR      r9,r1,#1
;;;360            yOffM =  yOff   /2;
0004d4  9801              LDR      r0,[sp,#4]
0004d6  eb0071d0          ADD      r1,r0,r0,LSR #31
0004da  ea4f0b61          ASR      r11,r1,#1
0004de  e00b              B        |L1.1272|
                  |L1.1248|
;;;361          } else {
;;;362            yOffP =   yOff/2;
0004e0  9801              LDR      r0,[sp,#4]
0004e2  eb0071d0          ADD      r1,r0,r0,LSR #31
0004e6  ea4f0961          ASR      r9,r1,#1
;;;363            yOffM =  (yOff-1)   /2;
0004ea  9901              LDR      r1,[sp,#4]
0004ec  f1a10001          SUB      r0,r1,#1
0004f0  eb0071d0          ADD      r1,r0,r0,LSR #31
0004f4  ea4f0b61          ASR      r11,r1,#1
                  |L1.1272|
;;;364          }
;;;365          Poly[0].x = x0+xOffP;
0004f8  eb060008          ADD      r0,r6,r8
0004fc  b200              SXTH     r0,r0
0004fe  f8ad000c          STRH     r0,[sp,#0xc]
;;;366          Poly[0].y = y0+yOffP;
000502  eb070009          ADD      r0,r7,r9
000506  b200              SXTH     r0,r0
000508  f8ad000e          STRH     r0,[sp,#0xe]
;;;367          Poly[1].x = x0-xOffM; 
00050c  eba6000a          SUB      r0,r6,r10
000510  b200              SXTH     r0,r0
000512  f8ad0010          STRH     r0,[sp,#0x10]
;;;368          Poly[1].y = y0-yOffM; 
000516  eba7000b          SUB      r0,r7,r11
00051a  b201              SXTH     r1,r0
00051c  f8ad1012          STRH     r1,[sp,#0x12]
;;;369          Poly[2].x = x1-xOffM;
000520  eba4000a          SUB      r0,r4,r10
000524  b200              SXTH     r0,r0
000526  f8ad0014          STRH     r0,[sp,#0x14]
;;;370          Poly[2].y = y1-yOffM;
00052a  eba5000b          SUB      r0,r5,r11
00052e  b201              SXTH     r1,r0
000530  f8ad1016          STRH     r1,[sp,#0x16]
;;;371          Poly[3].x = x1+xOffP; 
000534  eb040008          ADD      r0,r4,r8
000538  b200              SXTH     r0,r0
00053a  f8ad0018          STRH     r0,[sp,#0x18]
;;;372          Poly[3].y = y1+yOffP;
00053e  eb050009          ADD      r0,r5,r9
000542  b201              SXTH     r1,r0
000544  f8ad101a          STRH     r1,[sp,#0x1a]
;;;373          GL_FillPolygon(&Poly[0], 4, 0,0);
000548  f04f0300          MOV      r3,#0
00054c  461a              MOV      r2,r3
00054e  f04f0104          MOV      r1,#4
000552  a803              ADD      r0,sp,#0xc
000554  f7fffffe          BL       GL_FillPolygon
;;;374          _DrawLineEnd(x0,y0);
000558  4639              MOV      r1,r7
00055a  4630              MOV      r0,r6
00055c  f7fffffe          BL       _DrawLineEnd
;;;375          _DrawLineEnd(x1,y1);
000560  4629              MOV      r1,r5
000562  4620              MOV      r0,r4
000564  f7fffffe          BL       _DrawLineEnd
;;;376        }
000568  bf00              NOP      
                  |L1.1386|
;;;377      }
00056a  bf00              NOP      
                  |L1.1388|
;;;378    }
00056c  b009              ADD      sp,sp,#0x24
00056e  e8bd8ff0          POP      {r4-r11,pc}
;;;379    
                          ENDP

                  GUI_DrawLine PROC
;;;383    */
;;;384    void GUI_DrawLine(int x0, int y0, int x1, int y1) {
000572  e92d41f0          PUSH     {r4-r8,lr}
000576  4604              MOV      r4,r0
000578  460d              MOV      r5,r1
00057a  4616              MOV      r6,r2
00057c  461f              MOV      r7,r3
;;;385      GUI_LOCK();
;;;386      #if (GUI_WINSUPPORT)
;;;387        WM_ADDORG(x0,y0);
00057e  48b1              LDR      r0,|L1.2116|
000580  6c00              LDR      r0,[r0,#0x40]  ; GUI_Context
000582  4404              ADD      r4,r4,r0
000584  48af              LDR      r0,|L1.2116|
000586  6c40              LDR      r0,[r0,#0x44]  ; GUI_Context
000588  4405              ADD      r5,r5,r0
;;;388        WM_ADDORG(x1,y1);
00058a  48ae              LDR      r0,|L1.2116|
00058c  6c00              LDR      r0,[r0,#0x40]  ; GUI_Context
00058e  4406              ADD      r6,r6,r0
000590  48ac              LDR      r0,|L1.2116|
000592  6c40              LDR      r0,[r0,#0x44]  ; GUI_Context
000594  4407              ADD      r7,r7,r0
;;;389        WM_ITERATE_START(NULL); {
000596  f04f0000          MOV      r0,#0
00059a  f7fffffe          BL       WM__InitIVRSearch
00059e  b150              CBZ      r0,|L1.1462|
0005a0  bf00              NOP      
                  |L1.1442|
;;;390      #endif
;;;391      GL_DrawLine (x0, y0, x1, y1);
0005a2  463b              MOV      r3,r7
0005a4  4632              MOV      r2,r6
0005a6  4629              MOV      r1,r5
0005a8  4620              MOV      r0,r4
0005aa  f7fffffe          BL       GL_DrawLine
;;;392      #if (GUI_WINSUPPORT)
;;;393        } WM_ITERATE_END();
0005ae  f7fffffe          BL       WM__GetNextIVR
0005b2  2800              CMP      r0,#0
0005b4  d1f5              BNE      |L1.1442|
                  |L1.1462|
;;;394      #endif
;;;395      GUI_UNLOCK();
;;;396    }
0005b6  e8bd81f0          POP      {r4-r8,pc}
;;;397    
                          ENDP

                  GL_DrawLineTo PROC
;;;469    */
;;;470    void GL_DrawLineTo(int x, int y) {
0005ba  b570              PUSH     {r4-r6,lr}
0005bc  4604              MOV      r4,r0
0005be  460d              MOV      r5,r1
;;;471      GL_DrawLine (GUI_Context.DrawPosX, GUI_Context.DrawPosY, x, y); 
0005c0  4aa0              LDR      r2,|L1.2116|
0005c2  f9b21028          LDRSH    r1,[r2,#0x28]  ; GUI_Context
0005c6  f9b20026          LDRSH    r0,[r2,#0x26]  ; GUI_Context
0005ca  462b              MOV      r3,r5
0005cc  4622              MOV      r2,r4
0005ce  f7fffffe          BL       GL_DrawLine
;;;472      GUI_Context.DrawPosX = x;
0005d2  b220              SXTH     r0,r4
0005d4  499b              LDR      r1,|L1.2116|
0005d6  84c8              STRH     r0,[r1,#0x26]
;;;473      GUI_Context.DrawPosY = y;
0005d8  b228              SXTH     r0,r5
0005da  8508              STRH     r0,[r1,#0x28]
;;;474    }
0005dc  bd70              POP      {r4-r6,pc}
;;;475    
                          ENDP

                  GL_MoveTo PROC
;;;516    */
;;;517    void GL_MoveTo(int x, int y) {
0005de  b202              SXTH     r2,r0
;;;518      GUI_Context.DrawPosX = x;
0005e0  4b98              LDR      r3,|L1.2116|
0005e2  84da              STRH     r2,[r3,#0x26]
;;;519      GUI_Context.DrawPosY = y;
0005e4  b20a              SXTH     r2,r1
0005e6  851a              STRH     r2,[r3,#0x28]
;;;520    }
0005e8  4770              BX       lr
;;;521    
                          ENDP

                  GL_DrawPolygon PROC
;;;401    */
;;;402    void GL_DrawPolygon(const GUI_POINT*pPoints, int NumPoints, int x0, int y0) {
0005ea  e92d41f0          PUSH     {r4-r8,lr}
0005ee  4604              MOV      r4,r0
0005f0  4688              MOV      r8,r1
0005f2  4616              MOV      r6,r2
0005f4  461f              MOV      r7,r3
;;;403      const GUI_POINT* pPoint = pPoints;
0005f6  4625              MOV      r5,r4
;;;404      GL_MoveTo(pPoint->x+x0, pPoint->y+y0);
0005f8  f9b52002          LDRSH    r2,[r5,#2]
0005fc  eb020107          ADD      r1,r2,r7
000600  f9b52000          LDRSH    r2,[r5,#0]
000604  eb020006          ADD      r0,r2,r6
000608  f7fffffe          BL       GL_MoveTo
;;;405      while (--NumPoints >0) {
00060c  e00b              B        |L1.1574|
                  |L1.1550|
;;;406        pPoint++;
00060e  f1050504          ADD      r5,r5,#4
;;;407        GL_DrawLineTo(pPoint->x+x0, pPoint->y+y0);
000612  f9b52002          LDRSH    r2,[r5,#2]
000616  eb020107          ADD      r1,r2,r7
00061a  f9b52000          LDRSH    r2,[r5,#0]
00061e  eb020006          ADD      r0,r2,r6
000622  f7fffffe          BL       GL_DrawLineTo
                  |L1.1574|
000626  f1a80001          SUB      r0,r8,#1              ;405
00062a  f1b00800          SUBS     r8,r0,#0              ;405
00062e  dcee              BGT      |L1.1550|
;;;408      }
;;;409      /* Now draw closing line unless it has already been closed */
;;;410      if ( (pPoint->x != pPoints->x)
000630  f9b50000          LDRSH    r0,[r5,#0]
000634  f9b41000          LDRSH    r1,[r4,#0]
000638  4288              CMP      r0,r1
00063a  d105              BNE      |L1.1608|
;;;411         ||(pPoint->y != pPoints->y))
00063c  f9b50002          LDRSH    r0,[r5,#2]
000640  f9b41002          LDRSH    r1,[r4,#2]
000644  4288              CMP      r0,r1
000646  d007              BEQ      |L1.1624|
                  |L1.1608|
;;;412      {
;;;413        GL_DrawLineTo(pPoints->x+x0, pPoints->y+y0);
000648  f9b42002          LDRSH    r2,[r4,#2]
00064c  19d1              ADDS     r1,r2,r7
00064e  f9b42000          LDRSH    r2,[r4,#0]
000652  1990              ADDS     r0,r2,r6
000654  f7fffffe          BL       GL_DrawLineTo
                  |L1.1624|
;;;414      }
;;;415    }
000658  e8bd81f0          POP      {r4-r8,pc}
;;;416    
                          ENDP

                  GUI_DrawPolygon PROC
;;;420    */
;;;421    void GUI_DrawPolygon(const GUI_POINT* pPoints, int NumPoints, int x0, int y0) {
00065c  e92d41f0          PUSH     {r4-r8,lr}
000660  4606              MOV      r6,r0
000662  460f              MOV      r7,r1
000664  4614              MOV      r4,r2
000666  461d              MOV      r5,r3
;;;422      GUI_LOCK();
;;;423      #if (GUI_WINSUPPORT)
;;;424        WM_ADDORG(x0,y0);
000668  4876              LDR      r0,|L1.2116|
00066a  6c00              LDR      r0,[r0,#0x40]  ; GUI_Context
00066c  4404              ADD      r4,r4,r0
00066e  4875              LDR      r0,|L1.2116|
000670  6c40              LDR      r0,[r0,#0x44]  ; GUI_Context
000672  4405              ADD      r5,r5,r0
;;;425        WM_ITERATE_START(NULL); {
000674  f04f0000          MOV      r0,#0
000678  f7fffffe          BL       WM__InitIVRSearch
00067c  b150              CBZ      r0,|L1.1684|
00067e  bf00              NOP      
                  |L1.1664|
;;;426      #endif
;;;427      GL_DrawPolygon (pPoints, NumPoints, x0, y0);
000680  462b              MOV      r3,r5
000682  4622              MOV      r2,r4
000684  4639              MOV      r1,r7
000686  4630              MOV      r0,r6
000688  f7fffffe          BL       GL_DrawPolygon
;;;428      #if (GUI_WINSUPPORT)
;;;429        } WM_ITERATE_END();
00068c  f7fffffe          BL       WM__GetNextIVR
000690  2800              CMP      r0,#0
000692  d1f5              BNE      |L1.1664|
                  |L1.1684|
;;;430      #endif
;;;431      GUI_UNLOCK();
;;;432    }
000694  e8bd81f0          POP      {r4-r8,pc}
;;;433    
                          ENDP

                  GL_DrawLineRelNM PROC
;;;443    */
;;;444    static void GL_DrawLineRelNM(int dx, int dy) {
000698  b570              PUSH     {r4-r6,lr}
00069a  4604              MOV      r4,r0
00069c  460d              MOV      r5,r1
;;;445      GL_DrawLine (GUI_Context.DrawPosX,    GUI_Context.DrawPosY, 
00069e  4e69              LDR      r6,|L1.2116|
0006a0  f9b66028          LDRSH    r6,[r6,#0x28]  ; GUI_Context
0006a4  eb060305          ADD      r3,r6,r5
0006a8  4e66              LDR      r6,|L1.2116|
0006aa  f9b66026          LDRSH    r6,[r6,#0x26]  ; GUI_Context
0006ae  eb060204          ADD      r2,r6,r4
0006b2  4e64              LDR      r6,|L1.2116|
0006b4  f9b61028          LDRSH    r1,[r6,#0x28]  ; GUI_Context
0006b8  f9b60026          LDRSH    r0,[r6,#0x26]  ; GUI_Context
0006bc  f7fffffe          BL       GL_DrawLine
;;;446                   GUI_Context.DrawPosX+dx, GUI_Context.DrawPosY+dy); 
;;;447    }
0006c0  bd70              POP      {r4-r6,pc}
;;;448    
                          ENDP

                  GUI_MoveRel PROC
;;;505    */
;;;506    void GUI_MoveRel(int dx, int dy) { /*tbd: GL_LinePos. */
0006c2  4a60              LDR      r2,|L1.2116|
;;;507      GUI_LOCK();
;;;508      GUI_Context.DrawPosX += dx;
0006c4  8cd2              LDRH     r2,[r2,#0x26]  ; GUI_Context
0006c6  4402              ADD      r2,r2,r0
0006c8  b212              SXTH     r2,r2
0006ca  4b5e              LDR      r3,|L1.2116|
0006cc  84da              STRH     r2,[r3,#0x26]
;;;509      GUI_Context.DrawPosY += dy;
0006ce  461a              MOV      r2,r3
0006d0  8d12              LDRH     r2,[r2,#0x28]  ; GUI_Context
0006d2  440a              ADD      r2,r2,r1
0006d4  b212              SXTH     r2,r2
0006d6  851a              STRH     r2,[r3,#0x28]
;;;510      GUI_UNLOCK();
;;;511    }
0006d8  4770              BX       lr
;;;512    
                          ENDP

                  GUI_DrawLineRel PROC
;;;452    */
;;;453    void GUI_DrawLineRel(int dx, int dy) {
0006da  b570              PUSH     {r4-r6,lr}
0006dc  4604              MOV      r4,r0
0006de  460d              MOV      r5,r1
;;;454      GUI_LOCK();
;;;455      #if (GUI_WINSUPPORT)
;;;456        WM_ITERATE_START(NULL); {
0006e0  f04f0000          MOV      r0,#0
0006e4  f7fffffe          BL       WM__InitIVRSearch
0006e8  b140              CBZ      r0,|L1.1788|
0006ea  bf00              NOP      
                  |L1.1772|
;;;457      #endif
;;;458      GL_DrawLineRelNM(dx,dy);
0006ec  4629              MOV      r1,r5
0006ee  4620              MOV      r0,r4
0006f0  f7fffffe          BL       GL_DrawLineRelNM
;;;459      #if (GUI_WINSUPPORT)
;;;460        } WM_ITERATE_END();
0006f4  f7fffffe          BL       WM__GetNextIVR
0006f8  2800              CMP      r0,#0
0006fa  d1f7              BNE      |L1.1772|
                  |L1.1788|
;;;461      #endif
;;;462      GUI_MoveRel(dx,dy);
0006fc  4629              MOV      r1,r5
0006fe  4620              MOV      r0,r4
000700  f7fffffe          BL       GUI_MoveRel
;;;463      GUI_UNLOCK();
;;;464    }
000704  bd70              POP      {r4-r6,pc}
;;;465    
                          ENDP

                  GL_DrawLineToNM PROC
;;;479    */
;;;480    static void GL_DrawLineToNM(int x, int y) {
000706  b570              PUSH     {r4-r6,lr}
000708  4604              MOV      r4,r0
00070a  460d              MOV      r5,r1
;;;481      GL_DrawLine (GUI_Context.DrawPosX, GUI_Context.DrawPosY, x, y); 
00070c  4a4d              LDR      r2,|L1.2116|
00070e  f9b21028          LDRSH    r1,[r2,#0x28]  ; GUI_Context
000712  f9b20026          LDRSH    r0,[r2,#0x26]  ; GUI_Context
000716  462b              MOV      r3,r5
000718  4622              MOV      r2,r4
00071a  f7fffffe          BL       GL_DrawLine
;;;482    }
00071e  bd70              POP      {r4-r6,pc}
;;;483    
                          ENDP

                  GUI_DrawLineTo PROC
;;;487    */
;;;488    void GUI_DrawLineTo(int x, int y) {
000720  b570              PUSH     {r4-r6,lr}
000722  4604              MOV      r4,r0
000724  460d              MOV      r5,r1
;;;489      GUI_LOCK();
;;;490      #if (GUI_WINSUPPORT)
;;;491        WM_ADDORG(x,y);
000726  4847              LDR      r0,|L1.2116|
000728  6c00              LDR      r0,[r0,#0x40]  ; GUI_Context
00072a  4404              ADD      r4,r4,r0
00072c  4845              LDR      r0,|L1.2116|
00072e  6c40              LDR      r0,[r0,#0x44]  ; GUI_Context
000730  4405              ADD      r5,r5,r0
;;;492        WM_ITERATE_START(NULL); {
000732  f04f0000          MOV      r0,#0
000736  f7fffffe          BL       WM__InitIVRSearch
00073a  b140              CBZ      r0,|L1.1870|
00073c  bf00              NOP      
                  |L1.1854|
;;;493      #endif
;;;494      GL_DrawLineToNM(x,y);
00073e  4629              MOV      r1,r5
000740  4620              MOV      r0,r4
000742  f7fffffe          BL       GL_DrawLineToNM
;;;495      #if (GUI_WINSUPPORT)
;;;496        } WM_ITERATE_END();
000746  f7fffffe          BL       WM__GetNextIVR
00074a  2800              CMP      r0,#0
00074c  d1f7              BNE      |L1.1854|
                  |L1.1870|
;;;497      #endif
;;;498      GL_MoveTo(x,y);
00074e  4629              MOV      r1,r5
000750  4620              MOV      r0,r4
000752  f7fffffe          BL       GL_MoveTo
;;;499      GUI_UNLOCK();
;;;500    }
000756  bd70              POP      {r4-r6,pc}
;;;501    
                          ENDP

                  GUI_MoveTo PROC
;;;525    */
;;;526    void GUI_MoveTo(int x, int y) {
000758  b530              PUSH     {r4,r5,lr}
00075a  4605              MOV      r5,r0
00075c  460c              MOV      r4,r1
;;;527      GUI_LOCK();
;;;528      #if (GUI_WINSUPPORT)
;;;529        WM_ADDORG(x,y);
00075e  4839              LDR      r0,|L1.2116|
000760  6c00              LDR      r0,[r0,#0x40]  ; GUI_Context
000762  4405              ADD      r5,r5,r0
000764  4837              LDR      r0,|L1.2116|
000766  6c40              LDR      r0,[r0,#0x44]  ; GUI_Context
000768  4404              ADD      r4,r4,r0
;;;530      #endif
;;;531      GL_MoveTo(x,y);
00076a  4621              MOV      r1,r4
00076c  4628              MOV      r0,r5
00076e  f7fffffe          BL       GL_MoveTo
;;;532      GUI_UNLOCK();
;;;533    }
000772  bd30              POP      {r4,r5,pc}
;;;534    
                          ENDP

                  _DrawRect PROC
;;;544    */
;;;545    static void _DrawRect(int x0, int y0, int x1, int y1) {
000774  e92d41f0          PUSH     {r4-r8,lr}
000778  4607              MOV      r7,r0
00077a  460d              MOV      r5,r1
00077c  4616              MOV      r6,r2
00077e  461c              MOV      r4,r3
;;;546      LCD_DrawHLine(x0, y0, x1);
000780  4632              MOV      r2,r6
000782  4629              MOV      r1,r5
000784  4638              MOV      r0,r7
000786  f7fffffe          BL       LCD_DrawHLine
;;;547      LCD_DrawHLine(x0, y1, x1);
00078a  4632              MOV      r2,r6
00078c  4621              MOV      r1,r4
00078e  4638              MOV      r0,r7
000790  f7fffffe          BL       LCD_DrawHLine
;;;548      LCD_DrawVLine(x0, y0 + 1, y1 - 1);
000794  1e62              SUBS     r2,r4,#1
000796  1c69              ADDS     r1,r5,#1
000798  4638              MOV      r0,r7
00079a  f7fffffe          BL       LCD_DrawVLine
;;;549      LCD_DrawVLine(x1, y0 + 1, y1 - 1);
00079e  1e62              SUBS     r2,r4,#1
0007a0  1c69              ADDS     r1,r5,#1
0007a2  4630              MOV      r0,r6
0007a4  f7fffffe          BL       LCD_DrawVLine
;;;550    }
0007a8  e8bd81f0          POP      {r4-r8,pc}
;;;551    
                          ENDP

                  GUI_DrawRect PROC
;;;555    */
;;;556    void GUI_DrawRect(int x0, int y0, int x1, int y1) {
0007ac  e92d41fc          PUSH     {r2-r8,lr}
0007b0  4605              MOV      r5,r0
0007b2  460e              MOV      r6,r1
0007b4  4617              MOV      r7,r2
0007b6  4698              MOV      r8,r3
;;;557      #if (GUI_WINSUPPORT)
;;;558        int Off;
;;;559        GUI_RECT r;
;;;560      #endif
;;;561      GUI_LOCK();
;;;562      #if (GUI_WINSUPPORT)
;;;563        Off = GUI_Context.PenSize -1;
0007b8  4822              LDR      r0,|L1.2116|
0007ba  7d00              LDRB     r0,[r0,#0x14]  ; GUI_Context
0007bc  f1a00401          SUB      r4,r0,#1
;;;564        WM_ADDORG(x0,y0);
0007c0  4820              LDR      r0,|L1.2116|
0007c2  6c00              LDR      r0,[r0,#0x40]  ; GUI_Context
0007c4  4405              ADD      r5,r5,r0
0007c6  481f              LDR      r0,|L1.2116|
0007c8  6c40              LDR      r0,[r0,#0x44]  ; GUI_Context
0007ca  4406              ADD      r6,r6,r0
;;;565        WM_ADDORG(x1,y1);
0007cc  481d              LDR      r0,|L1.2116|
0007ce  6c00              LDR      r0,[r0,#0x40]  ; GUI_Context
0007d0  4407              ADD      r7,r7,r0
0007d2  481c              LDR      r0,|L1.2116|
0007d4  6c40              LDR      r0,[r0,#0x44]  ; GUI_Context
0007d6  4480              ADD      r8,r8,r0
;;;566        r.x0 = x0 - Off;
0007d8  eba50004          SUB      r0,r5,r4
0007dc  b200              SXTH     r0,r0
0007de  f8ad0000          STRH     r0,[sp,#0]
;;;567        r.x1 = x1 + Off;
0007e2  eb070004          ADD      r0,r7,r4
0007e6  b200              SXTH     r0,r0
0007e8  f8ad0004          STRH     r0,[sp,#4]
;;;568        r.y0 = y0 - Off;
0007ec  eba60004          SUB      r0,r6,r4
0007f0  b200              SXTH     r0,r0
0007f2  f8ad0002          STRH     r0,[sp,#2]
;;;569        r.y1 = y1 + Off;
0007f6  eb080004          ADD      r0,r8,r4
0007fa  b200              SXTH     r0,r0
0007fc  f8ad0006          STRH     r0,[sp,#6]
;;;570        WM_ITERATE_START(&r); {
000800  4668              MOV      r0,sp
000802  f7fffffe          BL       WM__InitIVRSearch
000806  b150              CBZ      r0,|L1.2078|
000808  bf00              NOP      
                  |L1.2058|
;;;571      #endif
;;;572      _DrawRect(x0, y0, x1, y1);
00080a  4643              MOV      r3,r8
00080c  463a              MOV      r2,r7
00080e  4631              MOV      r1,r6
000810  4628              MOV      r0,r5
000812  f7fffffe          BL       _DrawRect
;;;573      #if (GUI_WINSUPPORT)
;;;574        } WM_ITERATE_END();
000816  f7fffffe          BL       WM__GetNextIVR
00081a  2800              CMP      r0,#0
00081c  d1f5              BNE      |L1.2058|
                  |L1.2078|
;;;575      #endif
;;;576      GUI_UNLOCK();
;;;577    }
00081e  e8bd81fc          POP      {r2-r8,pc}
;;;578    
                          ENDP

                  GUI_DrawPoint PROC
;;;675    */
;;;676    void GUI_DrawPoint(int x, int y) {
000822  b570              PUSH     {r4-r6,lr}
000824  4604              MOV      r4,r0
000826  460d              MOV      r5,r1
;;;677      GUI_LOCK();
;;;678      #if (GUI_WINSUPPORT)
;;;679        WM_ADDORG(x, y);
000828  4806              LDR      r0,|L1.2116|
00082a  6c00              LDR      r0,[r0,#0x40]  ; GUI_Context
00082c  4404              ADD      r4,r4,r0
00082e  4805              LDR      r0,|L1.2116|
000830  6c40              LDR      r0,[r0,#0x44]  ; GUI_Context
000832  4405              ADD      r5,r5,r0
;;;680        WM_ITERATE_START(NULL); {
000834  f04f0000          MOV      r0,#0
000838  f7fffffe          BL       WM__InitIVRSearch
00083c  b158              CBZ      r0,|L1.2134|
00083e  bf00              NOP      
                  |L1.2112|
;;;681      #endif
;;;682      GL_DrawPoint(x, y);
000840  4629              MOV      r1,r5
000842  e001              B        |L1.2120|
                  |L1.2116|
                          DCD      GUI_Context
                  |L1.2120|
000848  4620              MOV      r0,r4
00084a  f7fffffe          BL       GL_DrawPoint
;;;683      #if (GUI_WINSUPPORT)
;;;684        } WM_ITERATE_END();
00084e  f7fffffe          BL       WM__GetNextIVR
000852  2800              CMP      r0,#0
000854  d1f4              BNE      |L1.2112|
                  |L1.2134|
;;;685      #endif
;;;686      GUI_UNLOCK();
;;;687    }
000856  bd70              POP      {r4-r6,pc}
;;;688    
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=1

                  aSin
000000  00000064          DCW      0x0000,0x0064
000004  00c80129          DCW      0x00c8,0x0129
000008  018801e3          DCW      0x0188,0x01e3
00000c  0239028a          DCW      0x0239,0x028a
000010  02d40318          DCW      0x02d4,0x0318
000014  03530387          DCW      0x0353,0x0387
000018  03b203d4          DCW      0x03b2,0x03d4
00001c  03ec03fb          DCW      0x03ec,0x03fb
000020  0400              DCW      0x0400
                  aTan
000022  0000              DCW      0x0000
000024  00290051          DCW      0x0029,0x0051
000028  007900a0          DCW      0x0079,0x00a0
00002c  00c500ea          DCW      0x00c5,0x00ea
000030  010d012e          DCW      0x010d,0x012e
000034  014e016c          DCW      0x014e,0x016c
000038  018901a3          DCW      0x0189,0x01a3
00003c  01bd01d5          DCW      0x01bd,0x01d5
000040  01eb0200          DCW      0x01eb,0x0200
