; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\radio.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\radio.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -I.\GUI\AntiAlias -I.\GUI\Config -I.\GUI\ConvertColor -I.\GUI\ConvertMono -I.\GUI\Core -I.\GUI\Font -I.\GUI\GUI_X -I.\GUI\JPEG -I.\GUI\LCDDriver -I.\GUI\MemDev -I.\GUI\MultiLayer -I.\GUI\Widget -I.\GUI\WM -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\INC\ST\STM32F10x -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\radio.crf GUI\Widget\RADIO.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _ResizeRect PROC
;;;107    */
;;;108    static void _ResizeRect(GUI_RECT* pDest, const GUI_RECT* pSrc, int Diff) {
000000  884b              LDRH     r3,[r1,#2]
;;;109      pDest->y0 = pSrc->y0 - Diff;
000002  eba30302          SUB      r3,r3,r2
000006  b21b              SXTH     r3,r3
000008  8043              STRH     r3,[r0,#2]
;;;110      pDest->y1 = pSrc->y1 + Diff;
00000a  88cb              LDRH     r3,[r1,#6]
00000c  4413              ADD      r3,r3,r2
00000e  b21b              SXTH     r3,r3
000010  80c3              STRH     r3,[r0,#6]
;;;111      pDest->x0 = pSrc->x0 - Diff;
000012  880b              LDRH     r3,[r1,#0]
000014  eba30302          SUB      r3,r3,r2
000018  b21b              SXTH     r3,r3
00001a  8003              STRH     r3,[r0,#0]
;;;112      pDest->x1 = pSrc->x1 + Diff;
00001c  888b              LDRH     r3,[r1,#4]
00001e  4413              ADD      r3,r3,r2
000020  b21b              SXTH     r3,r3
000022  8083              STRH     r3,[r0,#4]
;;;113    }
000024  4770              BX       lr
;;;114    
                          ENDP

                  _OnPaint PROC
;;;124    */
;;;125    static void _OnPaint(RADIO_Handle hObj, RADIO_Obj* pObj) {
000026  e92d4ff3          PUSH     {r0,r1,r4-r11,lr}
00002a  b08d              SUB      sp,sp,#0x34
00002c  460c              MOV      r4,r1
;;;126      const GUI_BITMAP* pBmRadio;
;;;127      const GUI_BITMAP* pBmCheck;
;;;128      const char* pText;
;;;129      GUI_FONTINFO FontInfo;
;;;130      GUI_RECT Rect, r, rFocus = {0};
00002e  f04f0000          MOV      r0,#0
000032  9005              STR      r0,[sp,#0x14]
000034  9006              STR      r0,[sp,#0x18]
;;;131      int i, y, HasFocus, FontDistY;
;;;132      U8 SpaceAbove, CHeight, FocusBorder;
;;;133    
;;;134      /* Init some data */
;;;135      WIDGET__GetClientRect(&pObj->Widget, &rFocus);
000036  a905              ADD      r1,sp,#0x14
000038  4620              MOV      r0,r4
00003a  f7fffffe          BL       WIDGET__GetClientRect
;;;136      HasFocus  = (pObj->Widget.State & WIDGET_STATE_FOCUS) ? 1 : 0;
00003e  8ce0              LDRH     r0,[r4,#0x26]
000040  f0000b01          AND      r11,r0,#1
;;;137      pBmRadio  = pObj->apBmRadio[WM__IsEnabled(hObj)];
000044  980d              LDR      r0,[sp,#0x34]
000046  f7fffffe          BL       WM__IsEnabled
00004a  f1040128          ADD      r1,r4,#0x28
00004e  f8516020          LDR      r6,[r1,r0,LSL #2]
;;;138      pBmCheck  = pObj->pBmCheck;
000052  f8d4a030          LDR      r10,[r4,#0x30]
;;;139      rFocus.x1 = pBmRadio->XSize + RADIO_BORDER * 2 - 1;
000056  8830              LDRH     r0,[r6,#0]
000058  f1000003          ADD      r0,r0,#3
00005c  b200              SXTH     r0,r0
00005e  f8ad0018          STRH     r0,[sp,#0x18]
;;;140      rFocus.y1 = pObj->Height + ((pObj->NumItems - 1) * pObj->Spacing) - 1;
000062  8fa1              LDRH     r1,[r4,#0x3c]
000064  8fe0              LDRH     r0,[r4,#0x3e]
000066  f1a00001          SUB      r0,r0,#1
00006a  8f62              LDRH     r2,[r4,#0x3a]
00006c  fb001002          MLA      r0,r0,r2,r1
000070  f1a00001          SUB      r0,r0,#1
000074  b200              SXTH     r0,r0
000076  f8ad001a          STRH     r0,[sp,#0x1a]
;;;141    
;;;142      /* Select font and text color */
;;;143      LCD_SetColor(pObj->TextColor);
00007a  6ca0              LDR      r0,[r4,#0x48]
00007c  f7fffffe          BL       LCD_SetColor
;;;144      GUI_SetFont(pObj->pFont);
000080  6ce0              LDR      r0,[r4,#0x4c]
000082  f7fffffe          BL       GUI_SetFont
;;;145      GUI_SetTextMode(GUI_TM_TRANS);
000086  2002              MOVS     r0,#2
000088  f7fffffe          BL       GUI_SetTextMode
;;;146    
;;;147      /* Get font infos */
;;;148      GUI_GetFontInfo(pObj->pFont, &FontInfo);
00008c  a90b              ADD      r1,sp,#0x2c
00008e  6ce0              LDR      r0,[r4,#0x4c]
000090  f7fffffe          BL       GUI_GetFontInfo
;;;149      FontDistY   = GUI_GetFontDistY();
000094  f7fffffe          BL       GUI_GetFontDistY
000098  9004              STR      r0,[sp,#0x10]
;;;150      CHeight     = FontInfo.CHeight;
00009a  f89d9030          LDRB     r9,[sp,#0x30]
;;;151      SpaceAbove  = FontInfo.Baseline - CHeight;
00009e  f89d002e          LDRB     r0,[sp,#0x2e]
0000a2  eba00009          SUB      r0,r0,r9
0000a6  b2c0              UXTB     r0,r0
0000a8  9003              STR      r0,[sp,#0xc]
;;;152      Rect.x0     = pBmRadio->XSize + RADIO_BORDER * 2 + 2;
0000aa  8830              LDRH     r0,[r6,#0]
0000ac  f1000006          ADD      r0,r0,#6
0000b0  b200              SXTH     r0,r0
0000b2  f8ad0024          STRH     r0,[sp,#0x24]
;;;153      Rect.y0     = (CHeight <= pObj->Height) ? ((pObj->Height - CHeight) / 2) : 0;
0000b6  8fa1              LDRH     r1,[r4,#0x3c]
0000b8  4549              CMP      r1,r9
0000ba  db07              BLT      |L1.204|
0000bc  8fa1              LDRH     r1,[r4,#0x3c]
0000be  eba10009          SUB      r0,r1,r9
0000c2  eb0071d0          ADD      r1,r0,r0,LSR #31
0000c6  ea4f0161          ASR      r1,r1,#1
0000ca  e001              B        |L1.208|
                  |L1.204|
0000cc  f04f0100          MOV      r1,#0
                  |L1.208|
0000d0  b209              SXTH     r1,r1
0000d2  f8ad1026          STRH     r1,[sp,#0x26]
;;;154      Rect.y1     = Rect.y0 + CHeight - 1;
0000d6  f8bd0026          LDRH     r0,[sp,#0x26]
0000da  4448              ADD      r0,r0,r9
0000dc  f1a00001          SUB      r0,r0,#1
0000e0  b200              SXTH     r0,r0
0000e2  f8ad002a          STRH     r0,[sp,#0x2a]
;;;155      FocusBorder = (FontDistY <= 12) ? 2 : 3;
0000e6  9804              LDR      r0,[sp,#0x10]
0000e8  280c              CMP      r0,#0xc
0000ea  dc02              BGT      |L1.242|
0000ec  f04f0002          MOV      r0,#2
0000f0  e001              B        |L1.246|
                  |L1.242|
0000f2  f04f0003          MOV      r0,#3
                  |L1.246|
0000f6  9002              STR      r0,[sp,#8]
;;;156      if (Rect.y0 < FocusBorder) {
0000f8  f9bd1026          LDRSH    r1,[sp,#0x26]
0000fc  9802              LDR      r0,[sp,#8]
0000fe  4281              CMP      r1,r0
000100  da03              BGE      |L1.266|
;;;157        FocusBorder = Rect.y0;
000102  f8bd0026          LDRH     r0,[sp,#0x26]
000106  b2c0              UXTB     r0,r0
000108  9002              STR      r0,[sp,#8]
                  |L1.266|
;;;158      }
;;;159    
;;;160      /* Clear inside ... Just in case      */
;;;161      /* Fill with parents background color */
;;;162    #if WM_SUPPORT_TRANSPARENCY
;;;163      if (!WM_GetHasTrans(hObj))
00010a  980d              LDR      r0,[sp,#0x34]
00010c  f7fffffe          BL       WM_GetHasTrans
000110  b968              CBNZ     r0,|L1.302|
;;;164    #endif
;;;165      {
;;;166        if (pObj->BkColor != GUI_INVALID_COLOR) {
000112  f06f4170          MVN      r1,#0xf0000000
000116  6c60              LDR      r0,[r4,#0x44]
000118  4288              CMP      r0,r1
00011a  d003              BEQ      |L1.292|
;;;167          LCD_SetBkColor(pObj->BkColor);
00011c  6c60              LDR      r0,[r4,#0x44]
00011e  f7fffffe          BL       LCD_SetBkColor
000122  e002              B        |L1.298|
                  |L1.292|
;;;168        } else {
;;;169          LCD_SetBkColor(RADIO_DEFAULT_BKCOLOR);
000124  48f2              LDR      r0,|L1.1264|
000126  f7fffffe          BL       LCD_SetBkColor
                  |L1.298|
;;;170        }
;;;171        GUI_Clear();
00012a  f7fffffe          BL       GUI_Clear
                  |L1.302|
;;;172      }
;;;173    
;;;174      /* Iterate over all items */
;;;175      for (i = 0; i < pObj->NumItems; i++) {
00012e  f04f0500          MOV      r5,#0
000132  e058              B        |L1.486|
                  |L1.308|
;;;176        y = i * pObj->Spacing;
000134  8f60              LDRH     r0,[r4,#0x3a]
000136  fb00f805          MUL      r8,r0,r5
;;;177        /* Draw the radio button bitmap */
;;;178        GUI_DrawBitmap(pBmRadio, RADIO_BORDER, RADIO_BORDER + y);
00013a  f1080202          ADD      r2,r8,#2
00013e  2102              MOVS     r1,#2
000140  4630              MOV      r0,r6
000142  f7fffffe          BL       GUI_DrawBitmap
;;;179        /* Draw the check bitmap */
;;;180        if (pObj->Sel == i) {
000146  f9b40038          LDRSH    r0,[r4,#0x38]
00014a  42a8              CMP      r0,r5
00014c  d116              BNE      |L1.380|
;;;181          GUI_DrawBitmap(pBmCheck, RADIO_BORDER +  (pBmRadio->XSize - pBmCheck->XSize) / 2, 
00014e  8870              LDRH     r0,[r6,#2]
000150  f8ba3002          LDRH     r3,[r10,#2]
000154  1ac0              SUBS     r0,r0,r3
000156  9001              STR      r0,[sp,#4]
000158  eb0070d0          ADD      r0,r0,r0,LSR #31
00015c  1040              ASRS     r0,r0,#1
00015e  1c80              ADDS     r0,r0,#2
000160  eb000208          ADD      r2,r0,r8
000164  8830              LDRH     r0,[r6,#0]
000166  f8ba3000          LDRH     r3,[r10,#0]
00016a  1ac0              SUBS     r0,r0,r3
00016c  9000              STR      r0,[sp,#0]
00016e  eb0070d0          ADD      r0,r0,r0,LSR #31
000172  1040              ASRS     r0,r0,#1
000174  1c81              ADDS     r1,r0,#2
000176  4650              MOV      r0,r10
000178  f7fffffe          BL       GUI_DrawBitmap
                  |L1.380|
;;;182                                   RADIO_BORDER + ((pBmRadio->YSize - pBmCheck->YSize) / 2) + y);
;;;183        }
;;;184        /* Draw text if available */
;;;185        pText = (const char*)GUI_ARRAY_GetpItem(&pObj->TextArray, i);
00017c  4629              MOV      r1,r5
00017e  f1040034          ADD      r0,r4,#0x34
000182  f7fffffe          BL       GUI_ARRAY_GetpItem
000186  4607              MOV      r7,r0
;;;186        if (pText) {
000188  b35f              CBZ      r7,|L1.482|
;;;187          if (*pText) {
00018a  7838              LDRB     r0,[r7,#0]
00018c  b348              CBZ      r0,|L1.482|
;;;188            r = Rect;
00018e  e9dd0109          LDRD     r0,r1,[sp,#0x24]
000192  e9cd0107          STRD     r0,r1,[sp,#0x1c]
;;;189            r.x1 = r.x0 + GUI_GetStringDistX(pText) - 2;
000196  4638              MOV      r0,r7
000198  f7fffffe          BL       GUI_GetStringDistX
00019c  f8bd101c          LDRH     r1,[sp,#0x1c]
0001a0  4408              ADD      r0,r0,r1
0001a2  f1a00002          SUB      r0,r0,#2
0001a6  b200              SXTH     r0,r0
0001a8  f8ad0020          STRH     r0,[sp,#0x20]
;;;190            GUI_MoveRect(&r, 0, y);
0001ac  4642              MOV      r2,r8
0001ae  f04f0100          MOV      r1,#0
0001b2  a807              ADD      r0,sp,#0x1c
0001b4  f7fffffe          BL       GUI_MoveRect
;;;191            GUI_DispStringAt(pText, r.x0, r.y0 - SpaceAbove);
0001b8  f9bd301e          LDRSH    r3,[sp,#0x1e]
0001bc  9803              LDR      r0,[sp,#0xc]
0001be  1a1a              SUBS     r2,r3,r0
0001c0  f9bd101c          LDRSH    r1,[sp,#0x1c]
0001c4  4638              MOV      r0,r7
0001c6  f7fffffe          BL       GUI_DispStringAt
;;;192            /* Calculate focus rect */
;;;193            if (HasFocus && (pObj->Sel == i)) {
0001ca  f1bb0f00          CMP      r11,#0
0001ce  d008              BEQ      |L1.482|
0001d0  f9b40038          LDRSH    r0,[r4,#0x38]
0001d4  42a8              CMP      r0,r5
0001d6  d104              BNE      |L1.482|
;;;194              _ResizeRect(&rFocus, &r, FocusBorder);
0001d8  a907              ADD      r1,sp,#0x1c
0001da  a805              ADD      r0,sp,#0x14
0001dc  9a02              LDR      r2,[sp,#8]
0001de  f7fffffe          BL       _ResizeRect
                  |L1.482|
0001e2  f1050501          ADD      r5,r5,#1              ;175
                  |L1.486|
0001e6  8fe0              LDRH     r0,[r4,#0x3e]         ;175
0001e8  42a8              CMP      r0,r5                 ;175
0001ea  dca3              BGT      |L1.308|
;;;195            }
;;;196          }
;;;197        }
;;;198      }
;;;199    
;;;200      /* Draw the focus rect */
;;;201      if (HasFocus) {
0001ec  f1bb0f00          CMP      r11,#0
0001f0  d007              BEQ      |L1.514|
;;;202        LCD_SetColor(GUI_BLACK);
0001f2  2000              MOVS     r0,#0
0001f4  f7fffffe          BL       LCD_SetColor
;;;203        WIDGET__DrawFocusRect(&pObj->Widget, &rFocus, 0);
0001f8  2200              MOVS     r2,#0
0001fa  a905              ADD      r1,sp,#0x14
0001fc  4620              MOV      r0,r4
0001fe  f7fffffe          BL       WIDGET__DrawFocusRect
                  |L1.514|
;;;204      }
;;;205    }
000202  b00f              ADD      sp,sp,#0x3c
000204  e8bd8ff0          POP      {r4-r11,pc}
;;;206    
                          ENDP

                  RADIO__SetValue PROC
;;;308    */
;;;309    void RADIO__SetValue(RADIO_Handle hObj, RADIO_Obj* pObj, int v) {
000208  b570              PUSH     {r4-r6,lr}
00020a  4606              MOV      r6,r0
00020c  460c              MOV      r4,r1
00020e  4615              MOV      r5,r2
;;;310      if (v >= pObj->NumItems) {
000210  8fe0              LDRH     r0,[r4,#0x3e]
000212  42a8              CMP      r0,r5
000214  dc02              BGT      |L1.540|
;;;311        v = (int)pObj->NumItems - 1;
000216  8fe0              LDRH     r0,[r4,#0x3e]
000218  f1a00501          SUB      r5,r0,#1
                  |L1.540|
;;;312      }
;;;313      if (v != pObj->Sel) {
00021c  f9b40038          LDRSH    r0,[r4,#0x38]
000220  42a8              CMP      r0,r5
000222  d008              BEQ      |L1.566|
;;;314        pObj->Sel = v;
000224  b228              SXTH     r0,r5
000226  8720              STRH     r0,[r4,#0x38]
;;;315        WM_InvalidateWindow(hObj);
000228  4630              MOV      r0,r6
00022a  f7fffffe          BL       WM_InvalidateWindow
;;;316        WM_NotifyParent(hObj, WM_NOTIFICATION_VALUE_CHANGED);
00022e  2105              MOVS     r1,#5
000230  4630              MOV      r0,r6
000232  f7fffffe          BL       WM_NotifyParent
                  |L1.566|
;;;317      }
;;;318    }
000236  bd70              POP      {r4-r6,pc}
;;;319    
                          ENDP

                  RADIO_SetValue PROC
;;;423    */
;;;424    void RADIO_SetValue(RADIO_Handle hObj, int v) {
000238  b570              PUSH     {r4-r6,lr}
00023a  4605              MOV      r5,r0
00023c  460c              MOV      r4,r1
;;;425      if (hObj) {
00023e  b1d5              CBZ      r5,|L1.630|
;;;426        RADIO_Obj* pObj;
;;;427        WM_LOCK();
;;;428        pObj = RADIO_H2P(hObj);
000240  4628              MOV      r0,r5
000242  f7fffffe          BL       GUI_ALLOC_h2p
000246  4606              MOV      r6,r0
;;;429        if (pObj->GroupId && RADIO__pfHandleSetValue) {
000248  f8960040          LDRB     r0,[r6,#0x40]
00024c  b148              CBZ      r0,|L1.610|
00024e  48a9              LDR      r0,|L1.1268|
000250  6800              LDR      r0,[r0,#0]  ; RADIO__pfHandleSetValue
000252  b130              CBZ      r0,|L1.610|
;;;430          (*RADIO__pfHandleSetValue)(hObj, pObj, v);
000254  4622              MOV      r2,r4
000256  4631              MOV      r1,r6
000258  4628              MOV      r0,r5
00025a  4ba6              LDR      r3,|L1.1268|
00025c  681b              LDR      r3,[r3,#0]  ; RADIO__pfHandleSetValue
00025e  4798              BLX      r3
000260  e008              B        |L1.628|
                  |L1.610|
;;;431        } else {
;;;432          if (v < 0) {
000262  2c00              CMP      r4,#0
000264  da01              BGE      |L1.618|
;;;433            v = 0;
000266  f04f0400          MOV      r4,#0
                  |L1.618|
;;;434          }
;;;435          RADIO__SetValue(hObj, pObj, v);
00026a  4622              MOV      r2,r4
00026c  4631              MOV      r1,r6
00026e  4628              MOV      r0,r5
000270  f7fffffe          BL       RADIO__SetValue
                  |L1.628|
;;;436        }
;;;437        WM_UNLOCK();
;;;438      }
000274  bf00              NOP      
                  |L1.630|
;;;439    }
000276  bd70              POP      {r4-r6,pc}
;;;440    
                          ENDP

                  _OnTouch PROC
;;;210    */
;;;211    static void _OnTouch(RADIO_Handle hObj, RADIO_Obj* pObj, WM_MESSAGE*pMsg) {
000278  e92d5ff0          PUSH     {r4-r12,lr}
00027c  4682              MOV      r10,r0
00027e  460c              MOV      r4,r1
000280  4616              MOV      r6,r2
;;;212      int Notification;
;;;213      int Hit = 0;
000282  f04f0b00          MOV      r11,#0
;;;214      GUI_PID_STATE* pState = (GUI_PID_STATE*)pMsg->Data.p;
000286  f8d68008          LDR      r8,[r6,#8]
;;;215      if (pMsg->Data.p) {  /* Something happened in our area (pressed or released) */
00028a  68b0              LDR      r0,[r6,#8]
00028c  b300              CBZ      r0,|L1.720|
;;;216        if (pState->Pressed) {
00028e  f8980008          LDRB     r0,[r8,#8]
000292  b1c0              CBZ      r0,|L1.710|
;;;217          int y, Sel;
;;;218          y   = pState->y;
000294  f8d87004          LDR      r7,[r8,#4]
;;;219          Sel = y   / pObj->Spacing;
000298  8f60              LDRH     r0,[r4,#0x3a]
00029a  fb97f9f0          SDIV     r9,r7,r0
;;;220          y  -= Sel * pObj->Spacing;
00029e  8f60              LDRH     r0,[r4,#0x3a]
0002a0  fb097710          MLS      r7,r9,r0,r7
;;;221          if (y <= pObj->Height) {
0002a4  8fa0              LDRH     r0,[r4,#0x3c]
0002a6  42b8              CMP      r0,r7
0002a8  db03              BLT      |L1.690|
;;;222            RADIO_SetValue(hObj, Sel);
0002aa  4649              MOV      r1,r9
0002ac  4650              MOV      r0,r10
0002ae  f7fffffe          BL       RADIO_SetValue
                  |L1.690|
;;;223          }
;;;224          if (WM_IsFocussable(hObj)) {
0002b2  4650              MOV      r0,r10
0002b4  f7fffffe          BL       WM_IsFocussable
0002b8  b110              CBZ      r0,|L1.704|
;;;225            WM_SetFocus(hObj);
0002ba  4650              MOV      r0,r10
0002bc  f7fffffe          BL       WM_SetFocus
                  |L1.704|
;;;226          }
;;;227          Notification = WM_NOTIFICATION_CLICKED;
0002c0  f04f0501          MOV      r5,#1
;;;228        } else {
0002c4  e006              B        |L1.724|
                  |L1.710|
;;;229          Hit = 1;
0002c6  f04f0b01          MOV      r11,#1
;;;230          Notification = WM_NOTIFICATION_RELEASED;
0002ca  f04f0502          MOV      r5,#2
0002ce  e001              B        |L1.724|
                  |L1.720|
;;;231        }
;;;232      } else {
;;;233        Notification = WM_NOTIFICATION_MOVED_OUT;
0002d0  f04f0503          MOV      r5,#3
                  |L1.724|
;;;234      }
;;;235      WM_NotifyParent(hObj, Notification);
0002d4  4629              MOV      r1,r5
0002d6  4650              MOV      r0,r10
0002d8  f7fffffe          BL       WM_NotifyParent
;;;236      if (Hit == 1) {
0002dc  f1bb0f01          CMP      r11,#1
0002e0  d103              BNE      |L1.746|
;;;237        GUI_DEBUG_LOG("RADIO: Hit\n");
;;;238        GUI_StoreKey(pObj->Widget.Id);
0002e2  f9b40024          LDRSH    r0,[r4,#0x24]
0002e6  f7fffffe          BL       GUI_StoreKey
                  |L1.746|
;;;239      }
;;;240    }
0002ea  e8bd9ff0          POP      {r4-r12,pc}
;;;241    
                          ENDP

                  RADIO_AddValue PROC
;;;393    */
;;;394    void RADIO_AddValue(RADIO_Handle hObj, int Add) {
0002ee  b570              PUSH     {r4-r6,lr}
0002f0  4604              MOV      r4,r0
0002f2  460d              MOV      r5,r1
;;;395      if (hObj) {
0002f4  b15c              CBZ      r4,|L1.782|
;;;396        RADIO_Obj* pObj;
;;;397        WM_LOCK();
;;;398        pObj = RADIO_H2P(hObj);
0002f6  4620              MOV      r0,r4
0002f8  f7fffffe          BL       GUI_ALLOC_h2p
0002fc  4606              MOV      r6,r0
;;;399        RADIO_SetValue(hObj, pObj->Sel + Add);
0002fe  f9b60038          LDRSH    r0,[r6,#0x38]
000302  eb000105          ADD      r1,r0,r5
000306  4620              MOV      r0,r4
000308  f7fffffe          BL       RADIO_SetValue
;;;400        WM_UNLOCK();
;;;401      }
00030c  bf00              NOP      
                  |L1.782|
;;;402    }
00030e  bd70              POP      {r4-r6,pc}
;;;403    
                          ENDP

                  RADIO_Dec PROC
;;;407    */
;;;408    void RADIO_Dec(RADIO_Handle hObj) {
000310  b510              PUSH     {r4,lr}
000312  4604              MOV      r4,r0
;;;409      RADIO_AddValue(hObj, -1);
000314  f04f31ff          MOV      r1,#0xffffffff
000318  4620              MOV      r0,r4
00031a  f7fffffe          BL       RADIO_AddValue
;;;410    }
00031e  bd10              POP      {r4,pc}
;;;411    
                          ENDP

                  RADIO_Inc PROC
;;;415    */
;;;416    void RADIO_Inc(RADIO_Handle hObj) {
000320  b510              PUSH     {r4,lr}
000322  4604              MOV      r4,r0
;;;417      RADIO_AddValue(hObj,  1);
000324  f04f0101          MOV      r1,#1
000328  4620              MOV      r0,r4
00032a  f7fffffe          BL       RADIO_AddValue
;;;418    }
00032e  bd10              POP      {r4,pc}
;;;419    
                          ENDP

                  _OnKey PROC
;;;245    */
;;;246    static void  _OnKey(RADIO_Handle hObj, WM_MESSAGE* pMsg) {
000330  b570              PUSH     {r4-r6,lr}
000332  4606              MOV      r6,r0
000334  460c              MOV      r4,r1
;;;247      WM_KEY_INFO* pKeyInfo;
;;;248      pKeyInfo = (WM_KEY_INFO*)(pMsg->Data.p);
000336  68a5              LDR      r5,[r4,#8]
;;;249      if (pKeyInfo->PressedCnt > 0) {
000338  6868              LDR      r0,[r5,#4]
00033a  2800              CMP      r0,#0
00033c  dd15              BLE      |L1.874|
;;;250        switch (pKeyInfo->Key) {
00033e  6828              LDR      r0,[r5,#0]
000340  2810              CMP      r0,#0x10
000342  d00b              BEQ      |L1.860|
000344  2811              CMP      r0,#0x11
000346  d00a              BEQ      |L1.862|
000348  2812              CMP      r0,#0x12
00034a  d002              BEQ      |L1.850|
00034c  2813              CMP      r0,#0x13
00034e  d10a              BNE      |L1.870|
000350  e000              B        |L1.852|
                  |L1.850|
;;;251        case GUI_KEY_RIGHT:
;;;252        case GUI_KEY_DOWN:
000352  bf00              NOP      
                  |L1.852|
;;;253          RADIO_Inc(hObj);
000354  4630              MOV      r0,r6
000356  f7fffffe          BL       RADIO_Inc
;;;254          break;                    /* Send to parent by not doing anything */
00035a  e005              B        |L1.872|
                  |L1.860|
;;;255        case GUI_KEY_LEFT:
;;;256        case GUI_KEY_UP:
00035c  bf00              NOP      
                  |L1.862|
;;;257          RADIO_Dec(hObj);
00035e  4630              MOV      r0,r6
000360  f7fffffe          BL       RADIO_Dec
;;;258          break;                    /* Send to parent by not doing anything */
000364  e000              B        |L1.872|
                  |L1.870|
;;;259        default:
;;;260          return;
;;;261        }
;;;262      }
;;;263    }
000366  bd70              POP      {r4-r6,pc}
                  |L1.872|
000368  bf00              NOP                            ;254
                  |L1.874|
00036a  bf00              NOP      
00036c  e7fb              B        |L1.870|
;;;264    
                          ENDP

                  _RADIO_Callback PROC
;;;268    */
;;;269    static void _RADIO_Callback (WM_MESSAGE* pMsg) {
00036e  b570              PUSH     {r4-r6,lr}
000370  4604              MOV      r4,r0
;;;270      RADIO_Handle hObj;
;;;271      RADIO_Obj*   pObj;
;;;272      hObj = pMsg->hWin;
000372  f9b46004          LDRSH    r6,[r4,#4]
;;;273      pObj = RADIO_H2P(hObj);
000376  4630              MOV      r0,r6
000378  f7fffffe          BL       GUI_ALLOC_h2p
00037c  4605              MOV      r5,r0
;;;274      /* Let widget handle the standard messages */
;;;275      if (WIDGET_HandleActive(hObj, pMsg) == 0) {
00037e  4621              MOV      r1,r4
000380  4630              MOV      r0,r6
000382  f7fffffe          BL       WIDGET_HandleActive
000386  b900              CBNZ     r0,|L1.906|
                  |L1.904|
;;;276        return;
;;;277      }
;;;278      switch (pMsg->MsgId) {
;;;279      case WM_PAINT:
;;;280        GUI_DEBUG_LOG("RADIO: _Callback(WM_PAINT)\n");
;;;281        _OnPaint(hObj, pObj);
;;;282        return;
;;;283      case WM_GET_RADIOGROUP:
;;;284        pMsg->Data.v = pObj->GroupId;
;;;285        return;
;;;286      case WM_TOUCH:
;;;287        _OnTouch(hObj, pObj, pMsg);
;;;288        break;
;;;289      case WM_KEY:
;;;290        _OnKey(hObj, pMsg);
;;;291        break;
;;;292      case WM_DELETE:
;;;293        GUI_ARRAY_Delete(&pObj->TextArray);
;;;294        break;
;;;295      }
;;;296      WM_DefaultProc(pMsg);
;;;297    }
000388  bd70              POP      {r4-r6,pc}
                  |L1.906|
00038a  6820              LDR      r0,[r4,#0]            ;278
00038c  280e              CMP      r0,#0xe               ;278
00038e  d019              BEQ      |L1.964|
000390  dc04              BGT      |L1.924|
000392  280b              CMP      r0,#0xb               ;278
000394  d01b              BEQ      |L1.974|
000396  280c              CMP      r0,#0xc               ;278
000398  d11e              BNE      |L1.984|
00039a  e00d              B        |L1.952|
                  |L1.924|
00039c  280f              CMP      r0,#0xf               ;278
00039e  d002              BEQ      |L1.934|
0003a0  282b              CMP      r0,#0x2b              ;278
0003a2  d119              BNE      |L1.984|
0003a4  e004              B        |L1.944|
                  |L1.934|
0003a6  4629              MOV      r1,r5                 ;281
0003a8  4630              MOV      r0,r6                 ;281
0003aa  f7fffffe          BL       _OnPaint
0003ae  e7eb              B        |L1.904|
                  |L1.944|
0003b0  f8950040          LDRB     r0,[r5,#0x40]         ;284
0003b4  60a0              STR      r0,[r4,#8]            ;284
0003b6  e7e7              B        |L1.904|
                  |L1.952|
0003b8  4622              MOV      r2,r4                 ;287
0003ba  4629              MOV      r1,r5                 ;287
0003bc  4630              MOV      r0,r6                 ;287
0003be  f7fffffe          BL       _OnTouch
0003c2  e009              B        |L1.984|
                  |L1.964|
0003c4  4621              MOV      r1,r4                 ;290
0003c6  4630              MOV      r0,r6                 ;290
0003c8  f7fffffe          BL       _OnKey
0003cc  e004              B        |L1.984|
                  |L1.974|
0003ce  f1050034          ADD      r0,r5,#0x34           ;293
0003d2  f7fffffe          BL       GUI_ARRAY_Delete
0003d6  bf00              NOP                            ;294
                  |L1.984|
0003d8  bf00              NOP                            ;288
0003da  4620              MOV      r0,r4                 ;296
0003dc  f7fffffe          BL       WM_DefaultProc
0003e0  bf00              NOP      
0003e2  e7d1              B        |L1.904|
;;;298    
                          ENDP

                  RADIO_CreateEx PROC
;;;333    */
;;;334    RADIO_Handle RADIO_CreateEx(int x0, int y0, int xSize, int ySize, WM_HWIN hParent,
0003e4  e92d4fff          PUSH     {r0-r11,lr}
;;;335                                int WinFlags, int ExFlags, int Id, int NumItems, int Spacing)
;;;336    {
0003e8  b085              SUB      sp,sp,#0x14
0003ea  4691              MOV      r9,r2
0003ec  f8ddb050          LDR      r11,[sp,#0x50]
0003f0  f8dda048          LDR      r10,[sp,#0x48]
0003f4  e9dd5616          LDRD     r5,r6,[sp,#0x58]
;;;337      RADIO_Handle hObj;
;;;338      int Height, i;
;;;339      /* Calculate helper variables */
;;;340      Height   = RADIO__apDefaultImage[0]->YSize + RADIO_BORDER * 2;
0003f8  483f              LDR      r0,|L1.1272|
0003fa  6800              LDR      r0,[r0,#0]  ; RADIO__apDefaultImage
0003fc  8840              LDRH     r0,[r0,#2]
0003fe  f1000004          ADD      r0,r0,#4
000402  9004              STR      r0,[sp,#0x10]
;;;341      Spacing  = (Spacing  <= 0) ? 20 : Spacing;
000404  2e00              CMP      r6,#0
000406  dc02              BGT      |L1.1038|
000408  f04f0014          MOV      r0,#0x14
00040c  e000              B        |L1.1040|
                  |L1.1038|
00040e  4630              MOV      r0,r6
                  |L1.1040|
000410  4606              MOV      r6,r0
;;;342      NumItems = (NumItems <= 0) ?  2 : NumItems;
000412  2d00              CMP      r5,#0
000414  dc02              BGT      |L1.1052|
000416  f04f0002          MOV      r0,#2
00041a  e000              B        |L1.1054|
                  |L1.1052|
00041c  4628              MOV      r0,r5
                  |L1.1054|
00041e  4605              MOV      r5,r0
;;;343      if (ySize == 0) {
000420  9808              LDR      r0,[sp,#0x20]
000422  b928              CBNZ     r0,|L1.1072|
;;;344        ySize  = Height + ((NumItems - 1) * Spacing);
000424  f1a50101          SUB      r1,r5,#1
000428  9804              LDR      r0,[sp,#0x10]
00042a  fb010006          MLA      r0,r1,r6,r0
00042e  9008              STR      r0,[sp,#0x20]
                  |L1.1072|
;;;345      }
;;;346      if (xSize == 0) {
000430  f1b90f00          CMP      r9,#0
000434  d104              BNE      |L1.1088|
;;;347        xSize  = RADIO__apDefaultImage[0]->XSize + RADIO_BORDER * 2;
000436  4830              LDR      r0,|L1.1272|
000438  6800              LDR      r0,[r0,#0]  ; RADIO__apDefaultImage
00043a  8800              LDRH     r0,[r0,#0]
00043c  f1000904          ADD      r9,r0,#4
                  |L1.1088|
;;;348      }
;;;349    #if WM_SUPPORT_TRANSPARENCY
;;;350      WinFlags |= WM_CF_HASTRANS;
000440  9813              LDR      r0,[sp,#0x4c]
000442  f0400001          ORR      r0,r0,#1
000446  9013              STR      r0,[sp,#0x4c]
;;;351    #endif
;;;352      /* Create the window */
;;;353      hObj = WM_CreateWindowAsChild(x0, y0, xSize, ySize, hParent, WinFlags, _RADIO_Callback, sizeof(RADIO_Obj) - sizeof(WM_Obj));
000448  f04f0130          MOV      r1,#0x30
00044c  4a2b              LDR      r2,|L1.1276|
00044e  9813              LDR      r0,[sp,#0x4c]
000450  b280              UXTH     r0,r0
000452  e9cda000          STRD     r10,r0,[sp,#0]
000456  e9cd2102          STRD     r2,r1,[sp,#8]
00045a  464a              MOV      r2,r9
00045c  9b08              LDR      r3,[sp,#0x20]
00045e  e9dd0105          LDRD     r0,r1,[sp,#0x14]
000462  f7fffffe          BL       WM_CreateWindowAsChild
000466  4607              MOV      r7,r0
;;;354      if (hObj) {
000468  b387              CBZ      r7,|L1.1228|
;;;355        RADIO_Obj* pObj;
;;;356        WM_LOCK();
;;;357        pObj = RADIO_H2P(hObj);
00046a  4638              MOV      r0,r7
00046c  f7fffffe          BL       GUI_ALLOC_h2p
000470  4604              MOV      r4,r0
;;;358        /* Init sub-classes */
;;;359        GUI_ARRAY_CREATE(&pObj->TextArray);
;;;360        for (i = 0; i < NumItems; i++) {
000472  f04f0800          MOV      r8,#0
000476  e007              B        |L1.1160|
                  |L1.1144|
;;;361          GUI_ARRAY_AddItem(&pObj->TextArray, NULL, 0);
000478  2200              MOVS     r2,#0
00047a  4611              MOV      r1,r2
00047c  f1040034          ADD      r0,r4,#0x34
000480  f7fffffe          BL       GUI_ARRAY_AddItem
000484  f1080801          ADD      r8,r8,#1              ;360
                  |L1.1160|
000488  45a8              CMP      r8,r5                 ;360
00048a  dbf5              BLT      |L1.1144|
;;;362        }
;;;363        /* Init widget specific variables */
;;;364        ExFlags &= RADIO_TEXTPOS_LEFT;
00048c  f40b7b80          AND      r11,r11,#0x100
;;;365        WIDGET__Init(&pObj->Widget, Id, WIDGET_STATE_FOCUSSABLE | ExFlags);
000490  f04b0210          ORR      r2,r11,#0x10
000494  4620              MOV      r0,r4
000496  9915              LDR      r1,[sp,#0x54]
000498  f7fffffe          BL       WIDGET__Init
;;;366        /* Init member variables */
;;;367        RADIO_INIT_ID(pObj);
;;;368        pObj->apBmRadio[0] = RADIO__apDefaultImage[0];
00049c  4816              LDR      r0,|L1.1272|
00049e  6800              LDR      r0,[r0,#0]  ; RADIO__apDefaultImage
0004a0  62a0              STR      r0,[r4,#0x28]
;;;369        pObj->apBmRadio[1] = RADIO__apDefaultImage[1];
0004a2  4815              LDR      r0,|L1.1272|
0004a4  6841              LDR      r1,[r0,#4]  ; RADIO__apDefaultImage
0004a6  62e1              STR      r1,[r4,#0x2c]
;;;370        pObj->pBmCheck     = RADIO__pDefaultImageCheck;
0004a8  4815              LDR      r0,|L1.1280|
0004aa  6800              LDR      r0,[r0,#0]  ; RADIO__pDefaultImageCheck
0004ac  6320              STR      r0,[r4,#0x30]
;;;371        pObj->pFont        = RADIO__pDefaultFont;
0004ae  4815              LDR      r0,|L1.1284|
0004b0  6800              LDR      r0,[r0,#0]  ; RADIO__pDefaultFont
0004b2  64e0              STR      r0,[r4,#0x4c]
;;;372        pObj->TextColor    = RADIO__DefaultTextColor;
0004b4  4814              LDR      r0,|L1.1288|
0004b6  6800              LDR      r0,[r0,#0]  ; RADIO__DefaultTextColor
0004b8  64a0              STR      r0,[r4,#0x48]
;;;373        pObj->BkColor      = WM_GetBkColor(hParent);
0004ba  4650              MOV      r0,r10
0004bc  f7fffffe          BL       WM_GetBkColor
0004c0  6460              STR      r0,[r4,#0x44]
;;;374        pObj->NumItems     = NumItems;
0004c2  87e5              STRH     r5,[r4,#0x3e]
;;;375        pObj->Spacing      = Spacing;
0004c4  8766              STRH     r6,[r4,#0x3a]
;;;376        pObj->Height       = Height;
0004c6  9804              LDR      r0,[sp,#0x10]
0004c8  87a0              STRH     r0,[r4,#0x3c]
;;;377        WM_UNLOCK();
;;;378      } else {
0004ca  bf00              NOP      
                  |L1.1228|
;;;379        GUI_DEBUG_ERROROUT_IF(hObj==0, "RADIO_Create failed")
;;;380      }
;;;381      return hObj;
0004cc  4638              MOV      r0,r7
;;;382    }
0004ce  b009              ADD      sp,sp,#0x24
0004d0  e8bd8ff0          POP      {r4-r11,pc}
;;;383    
                          ENDP

                  RADIO_GetValue PROC
;;;450    */
;;;451    int RADIO_GetValue(RADIO_Handle hObj) {
0004d4  b570              PUSH     {r4-r6,lr}
0004d6  4604              MOV      r4,r0
;;;452      int r = 0;
0004d8  f04f0500          MOV      r5,#0
;;;453      if (hObj) {
0004dc  b134              CBZ      r4,|L1.1260|
;;;454        RADIO_Obj* pObj;
;;;455        WM_LOCK();
;;;456        pObj = RADIO_H2P(hObj);
0004de  4620              MOV      r0,r4
0004e0  f7fffffe          BL       GUI_ALLOC_h2p
0004e4  4606              MOV      r6,r0
;;;457        r = pObj->Sel;
0004e6  f9b65038          LDRSH    r5,[r6,#0x38]
;;;458        WM_UNLOCK();
;;;459      }
0004ea  bf00              NOP      
                  |L1.1260|
;;;460      return r;
0004ec  4628              MOV      r0,r5
;;;461    }
0004ee  bd70              POP      {r4-r6,pc}
;;;462    
                          ENDP

                  |L1.1264|
                          DCD      0x00c0c0c0
                  |L1.1268|
                          DCD      RADIO__pfHandleSetValue
                  |L1.1272|
                          DCD      RADIO__apDefaultImage
                  |L1.1276|
                          DCD      _RADIO_Callback
                  |L1.1280|
                          DCD      RADIO__pDefaultImageCheck
                  |L1.1284|
                          DCD      RADIO__pDefaultFont
                  |L1.1288|
                          DCD      RADIO__DefaultTextColor

                          AREA ||.data||, DATA, ALIGN=2

                  RADIO__DefaultTextColor
                          DCD      0x00000000
                  RADIO__pDefaultFont
                          DCD      GUI_Font13_1
                  RADIO__apDefaultImage
                          DCD      RADIO__abmRadio
                          DCD      RADIO__abmRadio+0x14
                  RADIO__pDefaultImageCheck
                          DCD      RADIO__bmCheck
                  RADIO__pfHandleSetValue
                          DCD      0x00000000
