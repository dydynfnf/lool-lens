; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\stm32f10x_exti.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\stm32f10x_exti.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -I.\GUI\AntiAlias -I.\GUI\Config -I.\GUI\ConvertColor -I.\GUI\ConvertMono -I.\GUI\Core -I.\GUI\Font -I.\GUI\GUI_X -I.\GUI\JPEG -I.\GUI\LCDDriver -I.\GUI\MemDev -I.\GUI\MultiLayer -I.\GUI\Widget -I.\GUI\WM -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\INC\ST\STM32F10x -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\stm32f10x_exti.crf FWlib\SRC\stm32f10x_exti.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  EXTI_DeInit PROC
;;;84       */
;;;85     void EXTI_DeInit(void)
000000  f04f0000          MOV      r0,#0
;;;86     {
;;;87       EXTI->IMR = 0x00000000;
000004  494a              LDR      r1,|L1.304|
000006  6008              STR      r0,[r1,#0]
;;;88       EXTI->EMR = 0x00000000;
000008  f1010104          ADD      r1,r1,#4
00000c  6008              STR      r0,[r1,#0]
;;;89       EXTI->RTSR = 0x00000000; 
00000e  f1010104          ADD      r1,r1,#4
000012  6008              STR      r0,[r1,#0]
;;;90       EXTI->FTSR = 0x00000000; 
000014  f1010104          ADD      r1,r1,#4
000018  6008              STR      r0,[r1,#0]
;;;91       EXTI->PR = 0x000FFFFF;
00001a  4846              LDR      r0,|L1.308|
00001c  4946              LDR      r1,|L1.312|
00001e  6008              STR      r0,[r1,#0]
;;;92     }
000020  4770              BX       lr
;;;93     
                          ENDP

                  EXTI_Init PROC
;;;100      */
;;;101    void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
000022  f04f0100          MOV      r1,#0
;;;102    {
;;;103      uint32_t tmp = 0;
;;;104    
;;;105      /* Check the parameters */
;;;106      assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
;;;107      assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
;;;108      assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
;;;109      assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));
;;;110    
;;;111      tmp = (uint32_t)EXTI_BASE;
000026  4942              LDR      r1,|L1.304|
;;;112         
;;;113      if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
000028  7982              LDRB     r2,[r0,#6]
00002a  2a00              CMP      r2,#0
00002c  d040              BEQ      |L1.176|
;;;114      {
;;;115        /* Clear EXTI line configuration */
;;;116        EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
00002e  460a              MOV      r2,r1
000030  6812              LDR      r2,[r2,#0]
000032  6803              LDR      r3,[r0,#0]
000034  ea220203          BIC      r2,r2,r3
000038  460b              MOV      r3,r1
00003a  601a              STR      r2,[r3,#0]
;;;117        EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
00003c  f1010204          ADD      r2,r1,#4
000040  6812              LDR      r2,[r2,#0]
000042  6803              LDR      r3,[r0,#0]
000044  ea220203          BIC      r2,r2,r3
000048  f1010304          ADD      r3,r1,#4
00004c  601a              STR      r2,[r3,#0]
;;;118        
;;;119        tmp += EXTI_InitStruct->EXTI_Mode;
00004e  7902              LDRB     r2,[r0,#4]
000050  4411              ADD      r1,r1,r2
;;;120    
;;;121        *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
000052  680a              LDR      r2,[r1,#0]
000054  6803              LDR      r3,[r0,#0]
000056  ea420203          ORR      r2,r2,r3
00005a  600a              STR      r2,[r1,#0]
;;;122    
;;;123        /* Clear Rising Falling edge configuration */
;;;124        EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
00005c  4a37              LDR      r2,|L1.316|
00005e  6812              LDR      r2,[r2,#0]
000060  6803              LDR      r3,[r0,#0]
000062  ea220203          BIC      r2,r2,r3
000066  4b35              LDR      r3,|L1.316|
000068  601a              STR      r2,[r3,#0]
;;;125        EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
00006a  f1030204          ADD      r2,r3,#4
00006e  6812              LDR      r2,[r2,#0]
000070  6803              LDR      r3,[r0,#0]
000072  ea220203          BIC      r2,r2,r3
000076  4b32              LDR      r3,|L1.320|
000078  601a              STR      r2,[r3,#0]
;;;126        
;;;127        /* Select the trigger for the selected external interrupts */
;;;128        if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
00007a  7942              LDRB     r2,[r0,#5]
00007c  2a10              CMP      r2,#0x10
00007e  d10e              BNE      |L1.158|
;;;129        {
;;;130          /* Rising Falling edge */
;;;131          EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
000080  4a2e              LDR      r2,|L1.316|
000082  6812              LDR      r2,[r2,#0]
000084  6803              LDR      r3,[r0,#0]
000086  ea420203          ORR      r2,r2,r3
00008a  4b2c              LDR      r3,|L1.316|
00008c  601a              STR      r2,[r3,#0]
;;;132          EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
00008e  4a2c              LDR      r2,|L1.320|
000090  6812              LDR      r2,[r2,#0]
000092  6803              LDR      r3,[r0,#0]
000094  ea420203          ORR      r2,r2,r3
000098  4b29              LDR      r3,|L1.320|
00009a  601a              STR      r2,[r3,#0]
00009c  e00f              B        |L1.190|
                  |L1.158|
;;;133        }
;;;134        else
;;;135        {
;;;136          tmp = (uint32_t)EXTI_BASE;
00009e  4924              LDR      r1,|L1.304|
;;;137          tmp += EXTI_InitStruct->EXTI_Trigger;
0000a0  7942              LDRB     r2,[r0,#5]
0000a2  4411              ADD      r1,r1,r2
;;;138    
;;;139          *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
0000a4  680a              LDR      r2,[r1,#0]
0000a6  6803              LDR      r3,[r0,#0]
0000a8  ea420203          ORR      r2,r2,r3
0000ac  600a              STR      r2,[r1,#0]
0000ae  e006              B        |L1.190|
                  |L1.176|
;;;140        }
;;;141      }
;;;142      else
;;;143      {
;;;144        tmp += EXTI_InitStruct->EXTI_Mode;
0000b0  7902              LDRB     r2,[r0,#4]
0000b2  4411              ADD      r1,r1,r2
;;;145    
;;;146        /* Disable the selected external lines */
;;;147        *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
0000b4  680a              LDR      r2,[r1,#0]
0000b6  6803              LDR      r3,[r0,#0]
0000b8  ea220203          BIC      r2,r2,r3
0000bc  600a              STR      r2,[r1,#0]
                  |L1.190|
;;;148      }
;;;149    }
0000be  4770              BX       lr
;;;150    
                          ENDP

                  EXTI_StructInit PROC
;;;156      */
;;;157    void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
0000c0  f04f0100          MOV      r1,#0
;;;158    {
;;;159      EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
0000c4  6001              STR      r1,[r0,#0]
;;;160      EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
0000c6  7101              STRB     r1,[r0,#4]
;;;161      EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
0000c8  f04f010c          MOV      r1,#0xc
0000cc  7141              STRB     r1,[r0,#5]
;;;162      EXTI_InitStruct->EXTI_LineCmd = DISABLE;
0000ce  f04f0100          MOV      r1,#0
0000d2  7181              STRB     r1,[r0,#6]
;;;163    }
0000d4  4770              BX       lr
;;;164    
                          ENDP

                  EXTI_GenerateSWInterrupt PROC
;;;170      */
;;;171    void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
0000d6  491b              LDR      r1,|L1.324|
;;;172    {
;;;173      /* Check the parameters */
;;;174      assert_param(IS_EXTI_LINE(EXTI_Line));
;;;175      
;;;176      EXTI->SWIER |= EXTI_Line;
0000d8  6809              LDR      r1,[r1,#0]
0000da  ea410100          ORR      r1,r1,r0
0000de  4a19              LDR      r2,|L1.324|
0000e0  6011              STR      r1,[r2,#0]
;;;177    }
0000e2  4770              BX       lr
;;;178    
                          ENDP

                  EXTI_GetFlagStatus PROC
;;;185      */
;;;186    FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
0000e4  4601              MOV      r1,r0
;;;187    {
;;;188      FlagStatus bitstatus = RESET;
0000e6  f04f0000          MOV      r0,#0
;;;189      /* Check the parameters */
;;;190      assert_param(IS_GET_EXTI_LINE(EXTI_Line));
;;;191      
;;;192      if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
0000ea  4a13              LDR      r2,|L1.312|
0000ec  6812              LDR      r2,[r2,#0]
0000ee  420a              TST      r2,r1
0000f0  d002              BEQ      |L1.248|
;;;193      {
;;;194        bitstatus = SET;
0000f2  f04f0001          MOV      r0,#1
0000f6  e001              B        |L1.252|
                  |L1.248|
;;;195      }
;;;196      else
;;;197      {
;;;198        bitstatus = RESET;
0000f8  f04f0000          MOV      r0,#0
                  |L1.252|
;;;199      }
;;;200      return bitstatus;
;;;201    }
0000fc  4770              BX       lr
;;;202    
                          ENDP

                  EXTI_ClearFlag PROC
;;;208      */
;;;209    void EXTI_ClearFlag(uint32_t EXTI_Line)
0000fe  490e              LDR      r1,|L1.312|
;;;210    {
;;;211      /* Check the parameters */
;;;212      assert_param(IS_EXTI_LINE(EXTI_Line));
;;;213      
;;;214      EXTI->PR = EXTI_Line;
000100  6008              STR      r0,[r1,#0]
;;;215    }
000102  4770              BX       lr
;;;216    
                          ENDP

                  EXTI_GetITStatus PROC
;;;223      */
;;;224    ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
000104  4601              MOV      r1,r0
;;;225    {
;;;226      ITStatus bitstatus = RESET;
000106  f04f0000          MOV      r0,#0
;;;227      uint32_t enablestatus = 0;
00010a  4602              MOV      r2,r0
;;;228      /* Check the parameters */
;;;229      assert_param(IS_GET_EXTI_LINE(EXTI_Line));
;;;230      
;;;231      enablestatus =  EXTI->IMR & EXTI_Line;
00010c  4b08              LDR      r3,|L1.304|
00010e  681b              LDR      r3,[r3,#0]
000110  ea030201          AND      r2,r3,r1
;;;232      if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
000114  4b08              LDR      r3,|L1.312|
000116  681b              LDR      r3,[r3,#0]
000118  420b              TST      r3,r1
00011a  d003              BEQ      |L1.292|
00011c  b112              CBZ      r2,|L1.292|
;;;233      {
;;;234        bitstatus = SET;
00011e  f04f0001          MOV      r0,#1
000122  e001              B        |L1.296|
                  |L1.292|
;;;235      }
;;;236      else
;;;237      {
;;;238        bitstatus = RESET;
000124  f04f0000          MOV      r0,#0
                  |L1.296|
;;;239      }
;;;240      return bitstatus;
;;;241    }
000128  4770              BX       lr
;;;242    
                          ENDP

                  EXTI_ClearITPendingBit PROC
;;;248      */
;;;249    void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
00012a  4903              LDR      r1,|L1.312|
;;;250    {
;;;251      /* Check the parameters */
;;;252      assert_param(IS_EXTI_LINE(EXTI_Line));
;;;253      
;;;254      EXTI->PR = EXTI_Line;
00012c  6008              STR      r0,[r1,#0]
;;;255    }
00012e  4770              BX       lr
;;;256    
                          ENDP

                  |L1.304|
                          DCD      0x40010400
                  |L1.308|
                          DCD      0x000fffff
                  |L1.312|
                          DCD      0x40010414
                  |L1.316|
                          DCD      0x40010408
                  |L1.320|
                          DCD      0x4001040c
                  |L1.324|
                          DCD      0x40010410
