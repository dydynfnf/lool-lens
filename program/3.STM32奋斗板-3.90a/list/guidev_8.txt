; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\guidev_8.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\guidev_8.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -I.\GUI\AntiAlias -I.\GUI\Config -I.\GUI\ConvertColor -I.\GUI\ConvertMono -I.\GUI\Core -I.\GUI\Font -I.\GUI\GUI_X -I.\GUI\JPEG -I.\GUI\LCDDriver -I.\GUI\MemDev -I.\GUI\MultiLayer -I.\GUI\Widget -I.\GUI\WM -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\INC\ST\STM32F10x -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\guidev_8.crf GUI\MemDev\GUIDEV_8.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _XY2PTR PROC
;;;73     */
;;;74     static PIXELINDEX* _XY2PTR(int x, int y) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
;;;75       GUI_MEMDEV* pDev = GUI_MEMDEV_H2P(GUI_Context.hDevData);
000008  49fe              LDR      r1,|L1.1028|
00000a  f9b1004c          LDRSH    r0,[r1,#0x4c]  ; GUI_Context
00000e  f7fffffe          BL       GUI_ALLOC_h2p
000012  4604              MOV      r4,r0
;;;76       U8 *pData = (U8*)(pDev + 1);
000014  f104072c          ADD      r7,r4,#0x2c
;;;77       #if GUI_DEBUG_LEVEL >= GUI_DEBUG_LEVEL_CHECK_ALL
;;;78         if ((x >= pDev->x0+pDev->XSize) | (x<pDev->x0) | (y >= pDev->y0+pDev->YSize) | (y<pDev->y0)) {
;;;79           GUI_DEBUG_ERROROUT2("_XY2PTR: parameters out of bounds",x,y);
;;;80         }
;;;81       #endif
;;;82       pData += (GUI_ALLOC_DATATYPE_U)(y - pDev->y0) * (GUI_ALLOC_DATATYPE_U)pDev->BytesPerLine;
000018  8860              LDRH     r0,[r4,#2]
00001a  eba60000          SUB      r0,r6,r0
00001e  b280              UXTH     r0,r0
000020  68e1              LDR      r1,[r4,#0xc]
000022  b289              UXTH     r1,r1
000024  fb007701          MLA      r7,r0,r1,r7
;;;83       return ((PIXELINDEX*)pData) + x - pDev->x0;
000028  eb070005          ADD      r0,r7,r5
00002c  f9b41000          LDRSH    r1,[r4,#0]
000030  eba00001          SUB      r0,r0,r1
;;;84     }
000034  e8bd81f0          POP      {r4-r8,pc}
;;;85     
                          ENDP

                  _DrawBitLine1BPP PROC
;;;89     */
;;;90     static void _DrawBitLine1BPP(GUI_USAGE* pUsage, int x, int y, const U8 GUI_UNI_PTR * p, int Diff, unsigned int xsize,
000038  e92d4fff          PUSH     {r0-r11,lr}
;;;91                                  const LCD_PIXELINDEX* pTrans, GUI_MEMDEV* pDev, PIXELINDEX* pDest)
;;;92     {
00003c  b081              SUB      sp,sp,#4
00003e  4681              MOV      r9,r0
000040  468a              MOV      r10,r1
000042  4698              MOV      r8,r3
000044  9e12              LDR      r6,[sp,#0x48]
000046  9d0f              LDR      r5,[sp,#0x3c]
;;;93       PIXELINDEX Index1;
;;;94       PIXELINDEX IndexMask;
;;;95       unsigned pixels;
;;;96       unsigned PixelCnt;
;;;97       PixelCnt = 8 - Diff;
000048  980e              LDR      r0,[sp,#0x38]
00004a  f1c00408          RSB      r4,r0,#8
;;;98       pixels = LCD_aMirror[*p] >> Diff;
00004e  f8980000          LDRB     r0,[r8,#0]
000052  49ed              LDR      r1,|L1.1032|
000054  5c08              LDRB     r0,[r1,r0]
000056  990e              LDR      r1,[sp,#0x38]
000058  fa40f701          ASR      r7,r0,r1
;;;99     
;;;100      GUI_DEBUG_ERROROUT3_IF( x < pDev->x0, "GUIDEV.c: DrawBitLine1BPP, Act= %d, Border= %d, Clip= %d", x,pDev->x0, GUI_Context.ClipRect.x0);
;;;101    
;;;102      switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
00005c  48e9              LDR      r0,|L1.1028|
00005e  7b00              LDRB     r0,[r0,#0xc]  ; GUI_Context
000060  f0100003          ANDS     r0,r0,#3
000064  d004              BEQ      |L1.112|
000066  2801              CMP      r0,#1
000068  d06d              BEQ      |L1.326|
00006a  2802              CMP      r0,#2
00006c  d17d              BNE      |L1.362|
00006e  e020              B        |L1.178|
                  |L1.112|
;;;103      case 0:    /* Write mode */
;;;104        do {
000070  bf00              NOP      
                  |L1.114|
;;;105          /* Prepare loop */
;;;106          if (PixelCnt > xsize) {
000072  42ac              CMP      r4,r5
000074  d900              BLS      |L1.120|
;;;107            PixelCnt = xsize;
000076  462c              MOV      r4,r5
                  |L1.120|
;;;108          }
;;;109          xsize -= PixelCnt;
000078  eba50504          SUB      r5,r5,r4
;;;110          /* Write as many pixels as we are allowed to and have loaded in this inner loop */
;;;111          do {
00007c  bf00              NOP      
                  |L1.126|
;;;112            *pDest++ = *(pTrans + (pixels & 1));
00007e  f0070101          AND      r1,r7,#1
000082  9810              LDR      r0,[sp,#0x40]
000084  f8300011          LDRH     r0,[r0,r1,LSL #1]
000088  f8060b01          STRB     r0,[r6],#1
;;;113            pixels >>= 1;
00008c  ea4f0757          LSR      r7,r7,#1
;;;114          } while (--PixelCnt);
000090  f1a40001          SUB      r0,r4,#1
000094  0004              MOVS     r4,r0
000096  d1f2              BNE      |L1.126|
;;;115          /* Check if an other Source byte needs to be loaded */
;;;116          if (xsize == 0) {
000098  b915              CBNZ     r5,|L1.160|
                  |L1.154|
;;;117            return;
;;;118          }
;;;119          PixelCnt = 8;
;;;120          pixels = LCD_aMirror[*++p];
;;;121        } while (1);
;;;122      case LCD_DRAWMODE_TRANS:
;;;123        Index1 = *(pTrans + 1);
;;;124        do {
;;;125          /* Prepare loop */
;;;126          if (PixelCnt > xsize) {
;;;127            PixelCnt = xsize;
;;;128          }
;;;129          xsize -= PixelCnt;
;;;130          if (pUsage) {
;;;131            do {
;;;132              if (pixels == 0) {      /* Early out optimization; not required */
;;;133                pDest += PixelCnt;
;;;134                x     += PixelCnt;
;;;135                break;
;;;136              }
;;;137              if ((pixels & 1)) {
;;;138                GUI_USAGE_AddPixel(pUsage, x, y);
;;;139                *pDest = Index1;
;;;140              }
;;;141              x++;
;;;142              pDest++;
;;;143              if (--PixelCnt == 0) {
;;;144                break;
;;;145              }
;;;146              pixels >>= 1;
;;;147            } while (1);
;;;148          } else {
;;;149            do {
;;;150              if (pixels == 0) {      /* Early out optimization; not required */
;;;151                pDest += PixelCnt;
;;;152                break;
;;;153              }
;;;154              if ((pixels & 1)) {
;;;155                *pDest = Index1;
;;;156              }
;;;157              pDest++;
;;;158              if (--PixelCnt == 0) {
;;;159                break;
;;;160              }
;;;161              pixels >>= 1;
;;;162            } while (1);
;;;163          }
;;;164          /* Check if an other Source byte needs to be loaded */
;;;165          if (xsize == 0) {
;;;166            return;
;;;167          }
;;;168          PixelCnt = 8;
;;;169          pixels = LCD_aMirror[*(++p)];
;;;170        } while (1);
;;;171      case LCD_DRAWMODE_XOR:
;;;172        IndexMask = pDev->pfGetIndexMask();
;;;173        do {
;;;174          /* Prepare loop */
;;;175          if (PixelCnt > xsize) {
;;;176            PixelCnt = xsize;
;;;177          }
;;;178          xsize -= PixelCnt;
;;;179          /* Write as many pixels as we are allowed to and have loaded in this inner loop */
;;;180          do {
;;;181            if ((pixels & 1)) {
;;;182              *pDest ^= IndexMask;
;;;183            }
;;;184            *pDest++;
;;;185            pixels >>= 1;
;;;186          } while (--PixelCnt);
;;;187          /* Check if an other Source byte needs to be loaded */
;;;188          if (xsize == 0) {
;;;189            return;
;;;190          }
;;;191          PixelCnt = 8;
;;;192          pixels = LCD_aMirror[*(++p)];
;;;193        } while (1);
;;;194      }
;;;195    }
00009a  b005              ADD      sp,sp,#0x14
00009c  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.160|
0000a0  f04f0408          MOV      r4,#8                 ;119
0000a4  f1080001          ADD      r0,r8,#1              ;120
0000a8  4680              MOV      r8,r0                 ;120
0000aa  7800              LDRB     r0,[r0,#0]            ;120
0000ac  49d6              LDR      r1,|L1.1032|
0000ae  5c0f              LDRB     r7,[r1,r0]            ;120
0000b0  e7df              B        |L1.114|
                  |L1.178|
0000b2  9810              LDR      r0,[sp,#0x40]         ;123
0000b4  8840              LDRH     r0,[r0,#2]            ;123
0000b6  f0000bff          AND      r11,r0,#0xff          ;123
0000ba  bf00              NOP                            ;124
                  |L1.188|
0000bc  42ac              CMP      r4,r5                 ;126
0000be  d900              BLS      |L1.194|
0000c0  462c              MOV      r4,r5                 ;127
                  |L1.194|
0000c2  eba50504          SUB      r5,r5,r4              ;129
0000c6  f1b90f00          CMP      r9,#0                 ;130
0000ca  d01d              BEQ      |L1.264|
0000cc  bf00              NOP                            ;131
                  |L1.206|
0000ce  b917              CBNZ     r7,|L1.214|
0000d0  4426              ADD      r6,r6,r4              ;133
0000d2  44a2              ADD      r10,r10,r4            ;134
0000d4  e017              B        |L1.262|
                  |L1.214|
0000d6  f0170f01          TST      r7,#1                 ;137
0000da  d008              BEQ      |L1.238|
0000dc  f8d90008          LDR      r0,[r9,#8]            ;138
0000e0  6803              LDR      r3,[r0,#0]            ;138
0000e2  4651              MOV      r1,r10                ;138
0000e4  4648              MOV      r0,r9                 ;138
0000e6  9a03              LDR      r2,[sp,#0xc]          ;138
0000e8  4798              BLX      r3                    ;138
0000ea  f886b000          STRB     r11,[r6,#0]           ;139
                  |L1.238|
0000ee  f10a0a01          ADD      r10,r10,#1            ;141
0000f2  f1060601          ADD      r6,r6,#1              ;142
0000f6  f1a40001          SUB      r0,r4,#1              ;143
0000fa  0004              MOVS     r4,r0                 ;143
0000fc  d100              BNE      |L1.256|
0000fe  e002              B        |L1.262|
                  |L1.256|
000100  ea4f0757          LSR      r7,r7,#1              ;146
000104  e7e3              B        |L1.206|
                  |L1.262|
000106  e013              B        |L1.304|
                  |L1.264|
000108  bf00              NOP                            ;149
                  |L1.266|
00010a  b90f              CBNZ     r7,|L1.272|
00010c  4426              ADD      r6,r6,r4              ;151
00010e  e00e              B        |L1.302|
                  |L1.272|
000110  f0170f01          TST      r7,#1                 ;154
000114  d001              BEQ      |L1.282|
000116  f886b000          STRB     r11,[r6,#0]           ;155
                  |L1.282|
00011a  f1060601          ADD      r6,r6,#1              ;157
00011e  f1a40001          SUB      r0,r4,#1              ;158
000122  0004              MOVS     r4,r0                 ;158
000124  d100              BNE      |L1.296|
000126  e002              B        |L1.302|
                  |L1.296|
000128  ea4f0757          LSR      r7,r7,#1              ;161
00012c  e7ed              B        |L1.266|
                  |L1.302|
00012e  bf00              NOP                            ;152
                  |L1.304|
000130  b905              CBNZ     r5,|L1.308|
000132  e7b2              B        |L1.154|
                  |L1.308|
000134  f04f0408          MOV      r4,#8                 ;168
000138  f1080001          ADD      r0,r8,#1              ;169
00013c  4680              MOV      r8,r0                 ;169
00013e  7800              LDRB     r0,[r0,#0]            ;169
000140  49b1              LDR      r1,|L1.1032|
000142  5c0f              LDRB     r7,[r1,r0]            ;169
000144  e7ba              B        |L1.188|
                  |L1.326|
000146  9911              LDR      r1,[sp,#0x44]         ;172
000148  6a48              LDR      r0,[r1,#0x24]         ;172
00014a  4780              BLX      r0                    ;172
00014c  b2c0              UXTB     r0,r0                 ;172
00014e  9000              STR      r0,[sp,#0]            ;172
000150  bf00              NOP                            ;173
                  |L1.338|
000152  42ac              CMP      r4,r5                 ;175
000154  d900              BLS      |L1.344|
000156  462c              MOV      r4,r5                 ;176
                  |L1.344|
000158  eba50504          SUB      r5,r5,r4              ;178
00015c  bf00              NOP                            ;180
                  |L1.350|
00015e  f0170f01          TST      r7,#1                 ;181
000162  d006              BEQ      |L1.370|
000164  7830              LDRB     r0,[r6,#0]            ;182
000166  9900              LDR      r1,[sp,#0]            ;182
000168  e000              B        |L1.364|
                  |L1.362|
00016a  e015              B        |L1.408|
                  |L1.364|
00016c  ea800001          EOR      r0,r0,r1              ;182
000170  7030              STRB     r0,[r6,#0]            ;182
                  |L1.370|
000172  f1060601          ADD      r6,r6,#1              ;184
000176  ea4f0757          LSR      r7,r7,#1              ;185
00017a  f1a40001          SUB      r0,r4,#1              ;186
00017e  0004              MOVS     r4,r0                 ;186
000180  d1ed              BNE      |L1.350|
000182  b905              CBNZ     r5,|L1.390|
000184  e789              B        |L1.154|
                  |L1.390|
000186  f04f0408          MOV      r4,#8                 ;191
00018a  f1080001          ADD      r0,r8,#1              ;192
00018e  4680              MOV      r8,r0                 ;192
000190  7800              LDRB     r0,[r0,#0]            ;192
000192  499d              LDR      r1,|L1.1032|
000194  5c0f              LDRB     r7,[r1,r0]            ;192
000196  e7dc              B        |L1.338|
                  |L1.408|
000198  bf00              NOP      
00019a  e77e              B        |L1.154|
;;;196    
                          ENDP

                  _DrawBitLine2BPP PROC
;;;200    */
;;;201    static void _DrawBitLine2BPP(GUI_USAGE* pUsage, int x, int y, const U8 GUI_UNI_PTR * p, int Diff, int xsize,
00019c  e92d5fff          PUSH     {r0-r12,lr}
;;;202                                 const LCD_PIXELINDEX* pTrans, PIXELINDEX* pDest)
;;;203    {
0001a0  4681              MOV      r9,r0
0001a2  468a              MOV      r10,r1
0001a4  4698              MOV      r8,r3
0001a6  e9ddb610          LDRD     r11,r6,[sp,#0x40]
0001aa  9c0f              LDR      r4,[sp,#0x3c]
;;;204      U8 pixels;
;;;205      U8  PixelCnt;
;;;206      PixelCnt = 4 - Diff;
0001ac  980e              LDR      r0,[sp,#0x38]
0001ae  f1c00004          RSB      r0,r0,#4
0001b2  b2c5              UXTB     r5,r0
;;;207      pixels = (*p) << (Diff << 1);
0001b4  f8980000          LDRB     r0,[r8,#0]
0001b8  990e              LDR      r1,[sp,#0x38]
0001ba  ea4f0141          LSL      r1,r1,#1
0001be  fa00f001          LSL      r0,r0,r1
0001c2  b2c7              UXTB     r7,r0
;;;208      switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
0001c4  488f              LDR      r0,|L1.1028|
0001c6  7b00              LDRB     r0,[r0,#0xc]  ; GUI_Context
0001c8  f0100003          ANDS     r0,r0,#3
0001cc  d004              BEQ      |L1.472|
0001ce  2801              CMP      r0,#1
0001d0  d050              BEQ      |L1.628|
0001d2  2802              CMP      r0,#2
0001d4  d170              BNE      |L1.696|
0001d6  e01e              B        |L1.534|
                  |L1.472|
;;;209      case 0:    /* Write mode */
;;;210      PixelLoopWrite:
0001d8  bf00              NOP      
                  |L1.474|
;;;211        if (PixelCnt > xsize) {
0001da  42a5              CMP      r5,r4
0001dc  dd00              BLE      |L1.480|
;;;212          PixelCnt = xsize;
0001de  b2e5              UXTB     r5,r4
                  |L1.480|
;;;213        }
;;;214        xsize -= PixelCnt;
0001e0  eba40405          SUB      r4,r4,r5
;;;215        do {
0001e4  bf00              NOP      
                  |L1.486|
;;;216          *pDest++ = *(pTrans + (pixels >> 6));
0001e6  ea4f10a7          ASR      r0,r7,#6
0001ea  f83b0010          LDRH     r0,[r11,r0,LSL #1]
0001ee  f8060b01          STRB     r0,[r6],#1
;;;217          pixels <<= 2;
0001f2  ea4f6087          LSL      r0,r7,#26
0001f6  ea4f6710          LSR      r7,r0,#24
;;;218        } while (--PixelCnt);
0001fa  f1a50001          SUB      r0,r5,#1
0001fe  b2c0              UXTB     r0,r0
000200  0005              MOVS     r5,r0
000202  d1f0              BNE      |L1.486|
;;;219        if (xsize) {
000204  b134              CBZ      r4,|L1.532|
;;;220          PixelCnt = 4;
000206  f04f0504          MOV      r5,#4
;;;221          pixels = *(++p);
00020a  f1080001          ADD      r0,r8,#1
00020e  4680              MOV      r8,r0
000210  7807              LDRB     r7,[r0,#0]
;;;222          goto PixelLoopWrite;
000212  e7e2              B        |L1.474|
                  |L1.532|
;;;223        }
;;;224        break;
000214  e050              B        |L1.696|
                  |L1.534|
;;;225      case LCD_DRAWMODE_TRANS:
;;;226      PixelLoopTrans:
000216  bf00              NOP      
                  |L1.536|
;;;227        if (PixelCnt > xsize)
000218  42a5              CMP      r5,r4
00021a  dd00              BLE      |L1.542|
;;;228          PixelCnt = xsize;
00021c  b2e5              UXTB     r5,r4
                  |L1.542|
;;;229        xsize -= PixelCnt;
00021e  eba40405          SUB      r4,r4,r5
;;;230        do {
000222  bf00              NOP      
                  |L1.548|
;;;231          if (pixels & 0xc0) {
000224  f0170fc0          TST      r7,#0xc0
000228  d00e              BEQ      |L1.584|
;;;232            *pDest = *(pTrans + (pixels >> 6));
00022a  ea4f10a7          ASR      r0,r7,#6
00022e  f83b0010          LDRH     r0,[r11,r0,LSL #1]
000232  7030              STRB     r0,[r6,#0]
;;;233            if (pUsage) {
000234  f1b90f00          CMP      r9,#0
000238  d006              BEQ      |L1.584|
;;;234              GUI_USAGE_AddPixel(pUsage, x, y);
00023a  f8d90008          LDR      r0,[r9,#8]
00023e  6803              LDR      r3,[r0,#0]
000240  4651              MOV      r1,r10
000242  4648              MOV      r0,r9
000244  9a02              LDR      r2,[sp,#8]
000246  4798              BLX      r3
                  |L1.584|
;;;235            }
;;;236          }
;;;237          pDest++;
000248  f1060601          ADD      r6,r6,#1
;;;238          x++;
00024c  f10a0a01          ADD      r10,r10,#1
;;;239          pixels <<= 2;
000250  ea4f6087          LSL      r0,r7,#26
000254  ea4f6710          LSR      r7,r0,#24
;;;240        } while (--PixelCnt);
000258  f1a50001          SUB      r0,r5,#1
00025c  b2c0              UXTB     r0,r0
00025e  0005              MOVS     r5,r0
000260  d1e0              BNE      |L1.548|
;;;241        if (xsize) {
000262  b134              CBZ      r4,|L1.626|
;;;242          PixelCnt = 4;
000264  f04f0504          MOV      r5,#4
;;;243          pixels = *(++p);
000268  f1080001          ADD      r0,r8,#1
00026c  4680              MOV      r8,r0
00026e  7807              LDRB     r7,[r0,#0]
;;;244          goto PixelLoopTrans;
000270  e7d2              B        |L1.536|
                  |L1.626|
;;;245        }
;;;246        break;
000272  e021              B        |L1.696|
                  |L1.628|
;;;247      case LCD_DRAWMODE_XOR:;
;;;248      PixelLoopXor:
000274  bf00              NOP      
                  |L1.630|
;;;249        if (PixelCnt > xsize)
000276  42a5              CMP      r5,r4
000278  dd00              BLE      |L1.636|
;;;250          PixelCnt = xsize;
00027a  b2e5              UXTB     r5,r4
                  |L1.636|
;;;251        xsize -= PixelCnt;
00027c  eba40405          SUB      r4,r4,r5
;;;252        do {
000280  bf00              NOP      
                  |L1.642|
;;;253          if ((pixels & 0xc0))
000282  f0170fc0          TST      r7,#0xc0
000286  d003              BEQ      |L1.656|
;;;254            *pDest ^= 255;
000288  7830              LDRB     r0,[r6,#0]
00028a  f08000ff          EOR      r0,r0,#0xff
00028e  7030              STRB     r0,[r6,#0]
                  |L1.656|
;;;255          pDest++;
000290  f1060601          ADD      r6,r6,#1
;;;256          pixels <<= 2;
000294  ea4f6087          LSL      r0,r7,#26
000298  ea4f6710          LSR      r7,r0,#24
;;;257        } while (--PixelCnt);
00029c  f1a50001          SUB      r0,r5,#1
0002a0  b2c0              UXTB     r0,r0
0002a2  0005              MOVS     r5,r0
0002a4  d1ed              BNE      |L1.642|
;;;258        if (xsize) {
0002a6  b134              CBZ      r4,|L1.694|
;;;259          PixelCnt = 4;
0002a8  f04f0504          MOV      r5,#4
;;;260          pixels = *(++p);
0002ac  f1080001          ADD      r0,r8,#1
0002b0  4680              MOV      r8,r0
0002b2  7807              LDRB     r7,[r0,#0]
;;;261          goto PixelLoopXor;
0002b4  e7df              B        |L1.630|
                  |L1.694|
;;;262        }
;;;263        break;
0002b6  bf00              NOP      
                  |L1.696|
0002b8  bf00              NOP                            ;224
;;;264      }
;;;265    }
0002ba  e8bd9fff          POP      {r0-r12,pc}
;;;266    
                          ENDP

                  _DrawBitLine4BPP PROC
;;;270    */
;;;271    static void _DrawBitLine4BPP(GUI_USAGE* pUsage, int x, int y, const U8 GUI_UNI_PTR * p, int Diff, int xsize,
0002be  e92d4fff          PUSH     {r0-r11,lr}
;;;272                                 const LCD_PIXELINDEX* pTrans, PIXELINDEX* pDest)
;;;273    {
0002c2  b081              SUB      sp,sp,#4
0002c4  4607              MOV      r7,r0
0002c6  468a              MOV      r10,r1
0002c8  4699              MOV      r9,r3
0002ca  e9ddb60e          LDRD     r11,r6,[sp,#0x38]
0002ce  e9dd8410          LDRD     r8,r4,[sp,#0x40]
;;;274      U8 pixels;
;;;275      U8 PixelCnt;
;;;276      PixelCnt = 2 - Diff;
0002d2  f1cb0002          RSB      r0,r11,#2
0002d6  b2c0              UXTB     r0,r0
0002d8  9000              STR      r0,[sp,#0]
;;;277      pixels = (*p) << (Diff << 2);
0002da  f8990000          LDRB     r0,[r9,#0]
0002de  ea4f018b          LSL      r1,r11,#2
0002e2  fa00f001          LSL      r0,r0,r1
0002e6  b2c5              UXTB     r5,r0
;;;278      switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
0002e8  4846              LDR      r0,|L1.1028|
0002ea  7b00              LDRB     r0,[r0,#0xc]  ; GUI_Context
0002ec  f0100003          ANDS     r0,r0,#3
0002f0  d004              BEQ      |L1.764|
0002f2  2801              CMP      r0,#1
0002f4  d07e              BEQ      |L1.1012|
0002f6  2802              CMP      r0,#2
0002f8  d132              BNE      |L1.864|
0002fa  e032              B        |L1.866|
                  |L1.764|
;;;279    /*
;;;280              * Write mode *
;;;281    */
;;;282      case 0:
;;;283        /* Draw incomplete bytes to the left of center area */
;;;284        if (Diff) {
0002fc  f1bb0f00          CMP      r11,#0
000300  d00c              BEQ      |L1.796|
;;;285          *pDest = *(pTrans + (pixels >> 4));
000302  ea4f1025          ASR      r0,r5,#4
000306  f8380010          LDRH     r0,[r8,r0,LSL #1]
00030a  7020              STRB     r0,[r4,#0]
;;;286          pDest++;
00030c  f1040401          ADD      r4,r4,#1
;;;287          xsize--;
000310  f1a60601          SUB      r6,r6,#1
;;;288          pixels = *++p;
000314  f1090001          ADD      r0,r9,#1
000318  4681              MOV      r9,r0
00031a  7805              LDRB     r5,[r0,#0]
                  |L1.796|
;;;289        }
;;;290        /* Draw center area (2 pixels in one byte) */
;;;291        if (xsize >= 2) {
00031c  2e02              CMP      r6,#2
00031e  db19              BLT      |L1.852|
;;;292          int i = xsize >> 1;
000320  ea4f0066          ASR      r0,r6,#1
;;;293          xsize &= 1;
000324  f0060601          AND      r6,r6,#1
;;;294          do {
000328  bf00              NOP      
                  |L1.810|
;;;295            *pDest     = *(pTrans + (pixels >> 4));   /* Draw 1. (left) pixel */
00032a  ea4f1125          ASR      r1,r5,#4
00032e  f8381011          LDRH     r1,[r8,r1,LSL #1]
000332  7021              STRB     r1,[r4,#0]
;;;296            *(pDest+1) = *(pTrans + (pixels & 15));   /* Draw 2. (right) pixel */
000334  f005010f          AND      r1,r5,#0xf
000338  f8381011          LDRH     r1,[r8,r1,LSL #1]
00033c  7061              STRB     r1,[r4,#1]
;;;297            pDest += 2;
00033e  f1040402          ADD      r4,r4,#2
;;;298            pixels = *++p;
000342  f1090101          ADD      r1,r9,#1
000346  4689              MOV      r9,r1
000348  780d              LDRB     r5,[r1,#0]
;;;299          } while (--i);
00034a  f1a00101          SUB      r1,r0,#1
00034e  0008              MOVS     r0,r1
000350  d1eb              BNE      |L1.810|
;;;300        }
000352  bf00              NOP      
                  |L1.852|
;;;301        /* Draw incomplete bytes to the right of center area */
;;;302        if (xsize) {
000354  b126              CBZ      r6,|L1.864|
;;;303          *pDest = * (pTrans + (pixels >> 4));
000356  ea4f1025          ASR      r0,r5,#4
00035a  f8380010          LDRH     r0,[r8,r0,LSL #1]
00035e  7020              STRB     r0,[r4,#0]
                  |L1.864|
;;;304        }
;;;305        break;
000360  e085              B        |L1.1134|
                  |L1.866|
;;;306    /*
;;;307              * Transparent draw mode *
;;;308    */
;;;309      case LCD_DRAWMODE_TRANS:
;;;310        /* Draw incomplete bytes to the left of center area */
;;;311        if (Diff) {
000362  f1bb0f00          CMP      r11,#0
000366  d018              BEQ      |L1.922|
;;;312          if (pixels & 0xF0) {
000368  f0150ff0          TST      r5,#0xf0
00036c  d00b              BEQ      |L1.902|
;;;313            *pDest = *(pTrans + (pixels >> 4));
00036e  ea4f1025          ASR      r0,r5,#4
000372  f8380010          LDRH     r0,[r8,r0,LSL #1]
000376  7020              STRB     r0,[r4,#0]
;;;314            if (pUsage) {
000378  b12f              CBZ      r7,|L1.902|
;;;315              GUI_USAGE_AddPixel(pUsage, x, y);
00037a  68b8              LDR      r0,[r7,#8]
00037c  6803              LDR      r3,[r0,#0]
00037e  4651              MOV      r1,r10
000380  4638              MOV      r0,r7
000382  9a03              LDR      r2,[sp,#0xc]
000384  4798              BLX      r3
                  |L1.902|
;;;316            }
;;;317          }
;;;318          pDest++;
000386  f1040401          ADD      r4,r4,#1
;;;319          x++;
00038a  f10a0a01          ADD      r10,r10,#1
;;;320          xsize--;
00038e  f1a60601          SUB      r6,r6,#1
;;;321          pixels = *++p;
000392  f1090001          ADD      r0,r9,#1
000396  4681              MOV      r9,r0
000398  7805              LDRB     r5,[r0,#0]
                  |L1.922|
;;;322        }
;;;323        /* Draw center area (2 pixels in one byte) */
;;;324        while (xsize >= 2) {
00039a  e027              B        |L1.1004|
                  |L1.924|
;;;325          /* Draw 1. (left) pixel */
;;;326          if (pixels & 0xF0) {
00039c  f0150ff0          TST      r5,#0xf0
0003a0  d00b              BEQ      |L1.954|
;;;327            *pDest = *(pTrans + (pixels >> 4));
0003a2  ea4f1025          ASR      r0,r5,#4
0003a6  f8380010          LDRH     r0,[r8,r0,LSL #1]
0003aa  7020              STRB     r0,[r4,#0]
;;;328            if (pUsage) {
0003ac  b12f              CBZ      r7,|L1.954|
;;;329              GUI_USAGE_AddPixel(pUsage, x, y);
0003ae  68b8              LDR      r0,[r7,#8]
0003b0  6803              LDR      r3,[r0,#0]
0003b2  4651              MOV      r1,r10
0003b4  4638              MOV      r0,r7
0003b6  9a03              LDR      r2,[sp,#0xc]
0003b8  4798              BLX      r3
                  |L1.954|
;;;330            }
;;;331          }
;;;332          /* Draw 2. (right) pixel */
;;;333          if (pixels &= 15) {
0003ba  f005000f          AND      r0,r5,#0xf
0003be  0005              MOVS     r5,r0
0003c0  d00a              BEQ      |L1.984|
;;;334            *(pDest + 1) = *(pTrans + pixels);
0003c2  f8380015          LDRH     r0,[r8,r5,LSL #1]
0003c6  7060              STRB     r0,[r4,#1]
;;;335            if (pUsage) {
0003c8  b137              CBZ      r7,|L1.984|
;;;336              GUI_USAGE_AddPixel(pUsage, x + 1, y);
0003ca  68b8              LDR      r0,[r7,#8]
0003cc  6803              LDR      r3,[r0,#0]
0003ce  f10a0101          ADD      r1,r10,#1
0003d2  4638              MOV      r0,r7
0003d4  9a03              LDR      r2,[sp,#0xc]
0003d6  4798              BLX      r3
                  |L1.984|
;;;337            }
;;;338          }
;;;339          pDest += 2;
0003d8  f1040402          ADD      r4,r4,#2
;;;340          x += 2;
0003dc  f10a0a02          ADD      r10,r10,#2
;;;341          xsize -= 2;
0003e0  f1a60602          SUB      r6,r6,#2
;;;342          pixels = *++p;
0003e4  f1090001          ADD      r0,r9,#1
0003e8  4681              MOV      r9,r0
0003ea  7805              LDRB     r5,[r0,#0]
                  |L1.1004|
0003ec  2e02              CMP      r6,#2                 ;324
0003ee  dad5              BGE      |L1.924|
;;;343        }
;;;344        /* Draw incomplete bytes to the right of center area */
;;;345        if (xsize) {
0003f0  b1a6              CBZ      r6,|L1.1052|
;;;346          if (pixels >>= 4) {
0003f2  e000              B        |L1.1014|
                  |L1.1012|
0003f4  e013              B        |L1.1054|
                  |L1.1014|
0003f6  ea4f1025          ASR      r0,r5,#4
0003fa  0005              MOVS     r5,r0
0003fc  d00e              BEQ      |L1.1052|
;;;347            *pDest = *(pTrans + pixels);
0003fe  f8380015          LDRH     r0,[r8,r5,LSL #1]
000402  e003              B        |L1.1036|
                  |L1.1028|
                          DCD      GUI_Context
                  |L1.1032|
                          DCD      LCD_aMirror
                  |L1.1036|
00040c  7020              STRB     r0,[r4,#0]
;;;348            if (pUsage) {
00040e  b12f              CBZ      r7,|L1.1052|
;;;349              GUI_USAGE_AddPixel(pUsage, x, y);
000410  68b8              LDR      r0,[r7,#8]
000412  6803              LDR      r3,[r0,#0]
000414  4651              MOV      r1,r10
000416  4638              MOV      r0,r7
000418  9a03              LDR      r2,[sp,#0xc]
00041a  4798              BLX      r3
                  |L1.1052|
;;;350            }
;;;351          }
;;;352        }
;;;353        break;
00041c  e027              B        |L1.1134|
                  |L1.1054|
;;;354      case LCD_DRAWMODE_XOR:;
;;;355      PixelLoopXor:
00041e  bf00              NOP      
                  |L1.1056|
;;;356        if (PixelCnt > xsize)
000420  9800              LDR      r0,[sp,#0]
000422  42b0              CMP      r0,r6
000424  dd01              BLE      |L1.1066|
;;;357          PixelCnt = xsize;
000426  b2f0              UXTB     r0,r6
000428  9000              STR      r0,[sp,#0]
                  |L1.1066|
;;;358        xsize -= PixelCnt;
00042a  9800              LDR      r0,[sp,#0]
00042c  eba60600          SUB      r6,r6,r0
;;;359        do {
000430  bf00              NOP      
                  |L1.1074|
;;;360          if ((pixels & 0xc0)) {
000432  f0150fc0          TST      r5,#0xc0
000436  d003              BEQ      |L1.1088|
;;;361            *pDest ^= 255;
000438  7820              LDRB     r0,[r4,#0]
00043a  f08000ff          EOR      r0,r0,#0xff
00043e  7020              STRB     r0,[r4,#0]
                  |L1.1088|
;;;362          }
;;;363          pDest++;
000440  f1040401          ADD      r4,r4,#1
;;;364          pixels <<= 4;
000444  ea4f7005          LSL      r0,r5,#28
000448  ea4f6510          LSR      r5,r0,#24
;;;365        } while (--PixelCnt);
00044c  9800              LDR      r0,[sp,#0]
00044e  f1a00001          SUB      r0,r0,#1
000452  f01000ff          ANDS     r0,r0,#0xff
000456  9000              STR      r0,[sp,#0]
000458  d1eb              BNE      |L1.1074|
;;;366        if (xsize) {
00045a  b13e              CBZ      r6,|L1.1132|
;;;367          PixelCnt = 2;
00045c  f04f0002          MOV      r0,#2
000460  9000              STR      r0,[sp,#0]
;;;368          pixels = *(++p);
000462  f1090001          ADD      r0,r9,#1
000466  4681              MOV      r9,r0
000468  7805              LDRB     r5,[r0,#0]
;;;369          goto PixelLoopXor;
00046a  e7d9              B        |L1.1056|
                  |L1.1132|
;;;370        }
;;;371        break;
00046c  bf00              NOP      
                  |L1.1134|
00046e  bf00              NOP                            ;305
;;;372      }
;;;373    }
000470  b005              ADD      sp,sp,#0x14
000472  e8bd8ff0          POP      {r4-r11,pc}
;;;374    
                          ENDP

                  _DrawBitLine8BPP PROC
;;;378    */
;;;379    static void _DrawBitLine8BPP(GUI_USAGE* pUsage, int x, int y, const U8 GUI_UNI_PTR * pSrc, int xsize,
000476  e92d47f0          PUSH     {r4-r10,lr}
;;;380                                 const LCD_PIXELINDEX* pTrans, PIXELINDEX* pDest) {
00047a  4606              MOV      r6,r0
00047c  460f              MOV      r7,r1
00047e  4692              MOV      r10,r2
000480  461c              MOV      r4,r3
000482  e9dd8908          LDRD     r8,r9,[sp,#0x20]
000486  9d0a              LDR      r5,[sp,#0x28]
;;;381      switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
000488  48fe              LDR      r0,|L1.2180|
00048a  7b00              LDRB     r0,[r0,#0xc]  ; GUI_Context
00048c  f0100003          ANDS     r0,r0,#3
000490  d002              BEQ      |L1.1176|
000492  2802              CMP      r0,#2
000494  d129              BNE      |L1.1258|
000496  e00e              B        |L1.1206|
                  |L1.1176|
;;;382      case 0:    /* Write mode */
;;;383        do {
000498  bf00              NOP      
                  |L1.1178|
;;;384          *pDest = *(pTrans + *pSrc);
00049a  7820              LDRB     r0,[r4,#0]
00049c  f8390010          LDRH     r0,[r9,r0,LSL #1]
0004a0  7028              STRB     r0,[r5,#0]
;;;385          pDest++;
0004a2  f1050501          ADD      r5,r5,#1
;;;386          pSrc++;
0004a6  f1040401          ADD      r4,r4,#1
;;;387        } while (--xsize);
0004aa  f1a80001          SUB      r0,r8,#1
0004ae  ea5f0800          MOVS     r8,r0
0004b2  d1f2              BNE      |L1.1178|
;;;388        break;
0004b4  e019              B        |L1.1258|
                  |L1.1206|
;;;389      case LCD_DRAWMODE_TRANS:
;;;390        do {
0004b6  bf00              NOP      
                  |L1.1208|
;;;391          if (*pSrc) {
0004b8  7820              LDRB     r0,[r4,#0]
0004ba  b150              CBZ      r0,|L1.1234|
;;;392            *pDest = *(pTrans + *pSrc);
0004bc  7820              LDRB     r0,[r4,#0]
0004be  f8390010          LDRH     r0,[r9,r0,LSL #1]
0004c2  7028              STRB     r0,[r5,#0]
;;;393            if (pUsage) {
0004c4  b12e              CBZ      r6,|L1.1234|
;;;394              GUI_USAGE_AddPixel(pUsage, x, y);
0004c6  68b0              LDR      r0,[r6,#8]
0004c8  4652              MOV      r2,r10
0004ca  4639              MOV      r1,r7
0004cc  6803              LDR      r3,[r0,#0]
0004ce  4630              MOV      r0,r6
0004d0  4798              BLX      r3
                  |L1.1234|
;;;395            }
;;;396          }
;;;397          x++;
0004d2  f1070701          ADD      r7,r7,#1
;;;398          pDest++;
0004d6  f1050501          ADD      r5,r5,#1
;;;399          pSrc++;
0004da  f1040401          ADD      r4,r4,#1
;;;400        } while (--xsize);
0004de  f1a80001          SUB      r0,r8,#1
0004e2  ea5f0800          MOVS     r8,r0
0004e6  d1e7              BNE      |L1.1208|
;;;401        break;
0004e8  bf00              NOP      
                  |L1.1258|
0004ea  bf00              NOP                            ;388
;;;402      }
;;;403    }
0004ec  e8bd87f0          POP      {r4-r10,pc}
;;;404    
                          ENDP

                  _DrawBitLine8BPP_DDB PROC
;;;420    */
;;;421    static void _DrawBitLine8BPP_DDB(GUI_USAGE* pUsage, int x, int y, const U8 GUI_UNI_PTR * pSrc, int xsize, PIXELINDEX* pDest) {
0004f0  e92d47f0          PUSH     {r4-r10,lr}
0004f4  4605              MOV      r5,r0
0004f6  460f              MOV      r7,r1
0004f8  4691              MOV      r9,r2
0004fa  461c              MOV      r4,r3
0004fc  e9dd8608          LDRD     r8,r6,[sp,#0x20]
;;;422      switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
000500  48e0              LDR      r0,|L1.2180|
000502  7b00              LDRB     r0,[r0,#0xc]  ; GUI_Context
000504  f0100003          ANDS     r0,r0,#3
000508  d002              BEQ      |L1.1296|
00050a  2802              CMP      r0,#2
00050c  d11e              BNE      |L1.1356|
00050e  e005              B        |L1.1308|
                  |L1.1296|
;;;423      case 0:    /* Write mode */
;;;424        #if GUI_UNI_PTR_USED
;;;425          _Memcopy(pDest, pSrc, xsize);
;;;426        #else
;;;427          memcpy(pDest, pSrc, xsize);
000510  4642              MOV      r2,r8
000512  4621              MOV      r1,r4
000514  4630              MOV      r0,r6
000516  f7fffffe          BL       __aeabi_memcpy
;;;428        #endif
;;;429        break;
00051a  e017              B        |L1.1356|
                  |L1.1308|
;;;430      case LCD_DRAWMODE_TRANS:
;;;431        do {
00051c  bf00              NOP      
                  |L1.1310|
;;;432          if (*pSrc) {
00051e  7820              LDRB     r0,[r4,#0]
000520  b140              CBZ      r0,|L1.1332|
;;;433            *pDest = *pSrc;
000522  7820              LDRB     r0,[r4,#0]
000524  7030              STRB     r0,[r6,#0]
;;;434            if (pUsage) {
000526  b12d              CBZ      r5,|L1.1332|
;;;435              GUI_USAGE_AddPixel(pUsage, x, y);
000528  68a8              LDR      r0,[r5,#8]
00052a  464a              MOV      r2,r9
00052c  4639              MOV      r1,r7
00052e  6803              LDR      r3,[r0,#0]
000530  4628              MOV      r0,r5
000532  4798              BLX      r3
                  |L1.1332|
;;;436            }
;;;437          }
;;;438          x++;
000534  f1070701          ADD      r7,r7,#1
;;;439          pDest++;
000538  f1060601          ADD      r6,r6,#1
;;;440          pSrc++;
00053c  f1040401          ADD      r4,r4,#1
;;;441        } while (--xsize);
000540  f1a80001          SUB      r0,r8,#1
000544  ea5f0800          MOVS     r8,r0
000548  d1e9              BNE      |L1.1310|
;;;442        break;
00054a  bf00              NOP      
                  |L1.1356|
00054c  bf00              NOP                            ;429
;;;443      }
;;;444    }
00054e  e8bd87f0          POP      {r4-r10,pc}
;;;445    
                          ENDP

                  _DrawBitmap PROC
;;;449    */
;;;450    static void _DrawBitmap(int x0, int y0, int xsize, int ysize,
000552  e92d4fff          PUSH     {r0-r11,lr}
;;;451                            int BitsPerPixel, int BytesPerLine,
;;;452                            const U8 GUI_UNI_PTR * pData, int Diff, const LCD_PIXELINDEX* pTrans)
;;;453    {
000556  b087              SUB      sp,sp,#0x1c
000558  460e              MOV      r6,r1
00055a  4617              MOV      r7,r2
00055c  4699              MOV      r9,r3
00055e  e9dda817          LDRD     r10,r8,[sp,#0x5c]
;;;454      int i;
;;;455      GUI_MEMDEV* pDev   = GUI_MEMDEV_H2P(GUI_Context.hDevData);
000562  49c8              LDR      r1,|L1.2180|
000564  f9b1004c          LDRSH    r0,[r1,#0x4c]  ; GUI_Context
000568  f7fffffe          BL       GUI_ALLOC_h2p
00056c  4683              MOV      r11,r0
;;;456      GUI_USAGE*  pUsage = (pDev->hUsage) ? GUI_USAGE_H2P(pDev->hUsage) : 0;
00056e  f8bb0018          LDRH     r0,[r11,#0x18]
000572  b120              CBZ      r0,|L1.1406|
000574  f9bb0018          LDRSH    r0,[r11,#0x18]
000578  f7fffffe          BL       GUI_ALLOC_h2p
00057c  e001              B        |L1.1410|
                  |L1.1406|
00057e  f04f0000          MOV      r0,#0
                  |L1.1410|
000582  9006              STR      r0,[sp,#0x18]
;;;457      unsigned    BytesPerLineDest;
;;;458      PIXELINDEX* pDest;
;;;459      BytesPerLineDest = pDev->BytesPerLine;
000584  f8db000c          LDR      r0,[r11,#0xc]
000588  9005              STR      r0,[sp,#0x14]
;;;460      x0 += Diff;
00058a  9807              LDR      r0,[sp,#0x1c]
00058c  4450              ADD      r0,r0,r10
00058e  9007              STR      r0,[sp,#0x1c]
;;;461      /* Mark all affected pixels dirty unless transparency is set */
;;;462      if (pUsage) {
000590  9806              LDR      r0,[sp,#0x18]
000592  b160              CBZ      r0,|L1.1454|
;;;463        if ((GUI_Context.DrawMode & LCD_DRAWMODE_TRANS) == 0) {
000594  48bb              LDR      r0,|L1.2180|
000596  7b00              LDRB     r0,[r0,#0xc]  ; GUI_Context
000598  f0100f02          TST      r0,#2
00059c  d107              BNE      |L1.1454|
;;;464          GUI_USAGE_AddRect(pUsage, x0, y0 , xsize, ysize);
00059e  463b              MOV      r3,r7
0005a0  4632              MOV      r2,r6
0005a2  f8cd9000          STR      r9,[sp,#0]
0005a6  e9dd0106          LDRD     r0,r1,[sp,#0x18]
0005aa  f7fffffe          BL       GUI_USAGE_AddRect
                  |L1.1454|
;;;465        }
;;;466      }
;;;467      pDest = _XY2PTR(x0, y0);
0005ae  4631              MOV      r1,r6
0005b0  9807              LDR      r0,[sp,#0x1c]
0005b2  f7fffffe          BL       _XY2PTR
0005b6  4605              MOV      r5,r0
;;;468    #if BITSPERPIXEL == 16
;;;469      /* handle 16 bpp bitmaps in high color modes, but only without palette */
;;;470      if (BitsPerPixel == 16) {
;;;471        for (i = 0; i < ysize; i++) {
;;;472          _DrawBitLine16BPP_DDB(pUsage, x0, i + y0, (const U16*)pData, xsize, pDest);
;;;473          pData += BytesPerLine;
;;;474          pDest = (PIXELINDEX*)((U8*)pDest + BytesPerLineDest); 
;;;475        }
;;;476        return;
;;;477      }
;;;478    #endif
;;;479      /* Handle 8 bpp bitmaps seperately as we have different routine bitmaps with or without palette */
;;;480      if (BitsPerPixel == 8) {
0005b8  9814              LDR      r0,[sp,#0x50]
0005ba  2808              CMP      r0,#8
0005bc  d124              BNE      |L1.1544|
;;;481        for (i = 0; i < ysize; i++) {
0005be  f04f0400          MOV      r4,#0
0005c2  e01c              B        |L1.1534|
                  |L1.1476|
;;;482          if (pTrans) {
0005c4  f1b80f00          CMP      r8,#0
0005c8  d009              BEQ      |L1.1502|
;;;483            _DrawBitLine8BPP(pUsage, x0, i + y0, pData, xsize, pTrans, pDest);
0005ca  19a2              ADDS     r2,r4,r6
0005cc  e9cd7800          STRD     r7,r8,[sp,#0]
0005d0  9502              STR      r5,[sp,#8]
0005d2  9b16              LDR      r3,[sp,#0x58]
0005d4  e9dd0106          LDRD     r0,r1,[sp,#0x18]
0005d8  f7fffffe          BL       _DrawBitLine8BPP
0005dc  e007              B        |L1.1518|
                  |L1.1502|
;;;484          } else {
;;;485            _DrawBitLine8BPP_DDB(pUsage, x0, i + y0, pData, xsize, pDest);
0005de  19a2              ADDS     r2,r4,r6
0005e0  e9cd7500          STRD     r7,r5,[sp,#0]
0005e4  9b16              LDR      r3,[sp,#0x58]
0005e6  e9dd0106          LDRD     r0,r1,[sp,#0x18]
0005ea  f7fffffe          BL       _DrawBitLine8BPP_DDB
                  |L1.1518|
;;;486          }
;;;487          pData += BytesPerLine;
0005ee  e9dd1015          LDRD     r1,r0,[sp,#0x54]
0005f2  4408              ADD      r0,r0,r1
0005f4  9016              STR      r0,[sp,#0x58]
;;;488          pDest = (PIXELINDEX*)((U8*)pDest + BytesPerLineDest); 
0005f6  9805              LDR      r0,[sp,#0x14]
0005f8  4405              ADD      r5,r5,r0
0005fa  f1040401          ADD      r4,r4,#1              ;481
                  |L1.1534|
0005fe  454c              CMP      r4,r9                 ;481
000600  dbe0              BLT      |L1.1476|
                  |L1.1538|
;;;489        }
;;;490        return;
;;;491      }
;;;492      /* Use aID for bitmaps without palette */
;;;493      if (!pTrans) {
;;;494        pTrans = aID;
;;;495      }
;;;496      for (i = 0; i < ysize; i++) {
;;;497        switch (BitsPerPixel) {
;;;498        case 1:
;;;499          _DrawBitLine1BPP(pUsage, x0, i + y0, pData, Diff, xsize, pTrans, pDev, pDest);
;;;500          break;
;;;501        case 2:
;;;502          _DrawBitLine2BPP(pUsage, x0, i + y0, pData, Diff, xsize, pTrans, pDest);
;;;503          break;
;;;504        case 4:
;;;505          _DrawBitLine4BPP(pUsage, x0, i + y0, pData, Diff, xsize, pTrans, pDest);
;;;506          break;
;;;507        }
;;;508        pData += BytesPerLine;
;;;509        pDest = (PIXELINDEX*)((U8*)pDest + BytesPerLineDest); 
;;;510      }
;;;511    }
000602  b00b              ADD      sp,sp,#0x2c
000604  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.1544|
000608  f1b80f00          CMP      r8,#0                 ;493
00060c  d101              BNE      |L1.1554|
00060e  f8df8278          LDR      r8,|L1.2184|
                  |L1.1554|
000612  f04f0400          MOV      r4,#0                 ;496
000616  e032              B        |L1.1662|
                  |L1.1560|
000618  9814              LDR      r0,[sp,#0x50]         ;497
00061a  2801              CMP      r0,#1                 ;497
00061c  d004              BEQ      |L1.1576|
00061e  2802              CMP      r0,#2                 ;497
000620  d00e              BEQ      |L1.1600|
000622  2804              CMP      r0,#4                 ;497
000624  d122              BNE      |L1.1644|
000626  e016              B        |L1.1622|
                  |L1.1576|
000628  19a2              ADDS     r2,r4,r6              ;499
00062a  e9cd8b02          STRD     r8,r11,[sp,#8]        ;499
00062e  e9cda700          STRD     r10,r7,[sp,#0]        ;499
000632  9504              STR      r5,[sp,#0x10]         ;499
000634  9b16              LDR      r3,[sp,#0x58]         ;499
000636  e9dd0106          LDRD     r0,r1,[sp,#0x18]      ;499
00063a  f7fffffe          BL       _DrawBitLine1BPP
00063e  e015              B        |L1.1644|
                  |L1.1600|
000640  19a2              ADDS     r2,r4,r6              ;502
000642  e9cda700          STRD     r10,r7,[sp,#0]        ;502
000646  e9cd8502          STRD     r8,r5,[sp,#8]         ;502
00064a  9b16              LDR      r3,[sp,#0x58]         ;502
00064c  e9dd0106          LDRD     r0,r1,[sp,#0x18]      ;502
000650  f7fffffe          BL       _DrawBitLine2BPP
000654  e00a              B        |L1.1644|
                  |L1.1622|
000656  19a2              ADDS     r2,r4,r6              ;505
000658  e9cda700          STRD     r10,r7,[sp,#0]        ;505
00065c  e9cd8502          STRD     r8,r5,[sp,#8]         ;505
000660  9b16              LDR      r3,[sp,#0x58]         ;505
000662  e9dd0106          LDRD     r0,r1,[sp,#0x18]      ;505
000666  f7fffffe          BL       _DrawBitLine4BPP
00066a  bf00              NOP                            ;506
                  |L1.1644|
00066c  bf00              NOP                            ;500
00066e  e9dd1015          LDRD     r1,r0,[sp,#0x54]      ;508
000672  4408              ADD      r0,r0,r1              ;508
000674  9016              STR      r0,[sp,#0x58]         ;508
000676  9805              LDR      r0,[sp,#0x14]         ;509
000678  4405              ADD      r5,r5,r0              ;509
00067a  f1040401          ADD      r4,r4,#1              ;496
                  |L1.1662|
00067e  454c              CMP      r4,r9                 ;496
000680  dbca              BLT      |L1.1560|
000682  bf00              NOP      
000684  e7bd              B        |L1.1538|
;;;512    
                          ENDP

                  _FillRect PROC
;;;516    */
;;;517    static void _FillRect(int x0, int y0, int x1, int y1) {
000686  e92d4ffe          PUSH     {r1-r11,lr}
00068a  4606              MOV      r6,r0
00068c  460c              MOV      r4,r1
00068e  4693              MOV      r11,r2
000690  461f              MOV      r7,r3
;;;518      unsigned BytesPerLine;
;;;519      int Len;
;;;520      GUI_MEMDEV* pDev   = GUI_MEMDEV_H2P(GUI_Context.hDevData);
000692  497c              LDR      r1,|L1.2180|
000694  f9b1004c          LDRSH    r0,[r1,#0x4c]  ; GUI_Context
000698  f7fffffe          BL       GUI_ALLOC_h2p
00069c  4605              MOV      r5,r0
;;;521      PIXELINDEX* pData  = _XY2PTR(x0, y0);
00069e  4621              MOV      r1,r4
0006a0  4630              MOV      r0,r6
0006a2  f7fffffe          BL       _XY2PTR
0006a6  4681              MOV      r9,r0
;;;522      BytesPerLine = pDev->BytesPerLine;
0006a8  68e8              LDR      r0,[r5,#0xc]
0006aa  9002              STR      r0,[sp,#8]
;;;523      Len = x1 - x0 + 1;
0006ac  ebab0006          SUB      r0,r11,r6
0006b0  f1000801          ADD      r8,r0,#1
;;;524      /* Mark rectangle as modified */
;;;525      if (pDev->hUsage) {
0006b4  8b28              LDRH     r0,[r5,#0x18]
0006b6  b168              CBZ      r0,|L1.1748|
;;;526        GUI_USAGE_AddRect(GUI_USAGE_H2P(pDev->hUsage), x0, y0, Len, y1 - y0 + 1);
0006b8  f9b50018          LDRSH    r0,[r5,#0x18]
0006bc  f7fffffe          BL       GUI_ALLOC_h2p
0006c0  4682              MOV      r10,r0
0006c2  1b38              SUBS     r0,r7,r4
0006c4  1c40              ADDS     r0,r0,#1
0006c6  4643              MOV      r3,r8
0006c8  4622              MOV      r2,r4
0006ca  4631              MOV      r1,r6
0006cc  9000              STR      r0,[sp,#0]
0006ce  4650              MOV      r0,r10
0006d0  f7fffffe          BL       GUI_USAGE_AddRect
                  |L1.1748|
;;;527      }
;;;528      /* Do the drawing */
;;;529      for (; y0 <= y1; y0++) {
0006d4  e025              B        |L1.1826|
                  |L1.1750|
;;;530        if (GUI_Context.DrawMode & LCD_DRAWMODE_XOR) {
0006d6  486b              LDR      r0,|L1.2180|
0006d8  7b00              LDRB     r0,[r0,#0xc]  ; GUI_Context
0006da  f0100f01          TST      r0,#1
0006de  d015              BEQ      |L1.1804|
;;;531          int RemPixels;
;;;532          PIXELINDEX* pDest;
;;;533          PIXELINDEX IndexMask;
;;;534          RemPixels = Len;
0006e0  f8cd8004          STR      r8,[sp,#4]
;;;535          pDest  = pData;
0006e4  46ca              MOV      r10,r9
;;;536          IndexMask = pDev->pfGetIndexMask();
0006e6  6a68              LDR      r0,[r5,#0x24]
0006e8  4780              BLX      r0
0006ea  b2c0              UXTB     r0,r0
0006ec  9000              STR      r0,[sp,#0]
;;;537          do {
0006ee  bf00              NOP      
                  |L1.1776|
;;;538            *pDest = *pDest ^ IndexMask;
0006f0  f89a0000          LDRB     r0,[r10,#0]
0006f4  9900              LDR      r1,[sp,#0]
0006f6  ea800001          EOR      r0,r0,r1
0006fa  f88a0000          STRB     r0,[r10,#0]
;;;539            pDest++;
0006fe  f10a0a01          ADD      r10,r10,#1
;;;540          } while (--RemPixels);
000702  9801              LDR      r0,[sp,#4]
000704  1e40              SUBS     r0,r0,#1
000706  9001              STR      r0,[sp,#4]
000708  d1f2              BNE      |L1.1776|
;;;541        } else {  /* Fill */
00070a  e006              B        |L1.1818|
                  |L1.1804|
;;;542          #if BITSPERPIXEL == 8
;;;543            GUI_MEMSET(pData, LCD_COLORINDEX, Len);
00070c  485d              LDR      r0,|L1.2180|
00070e  8840              LDRH     r0,[r0,#2]  ; GUI_Context
000710  b2c1              UXTB     r1,r0
000712  4642              MOV      r2,r8
000714  4648              MOV      r0,r9
000716  f7fffffe          BL       GUI__memset
                  |L1.1818|
;;;544          #elif BITSPERPIXEL == 16
;;;545            GUI__memset16(pData, LCD_COLORINDEX, Len);
;;;546          #else
;;;547            #error Unsupported
;;;548          #endif
;;;549        }
;;;550        pData = (PIXELINDEX*)((U8*)pData + BytesPerLine); 
00071a  9802              LDR      r0,[sp,#8]
00071c  4481              ADD      r9,r9,r0
00071e  f1040401          ADD      r4,r4,#1              ;529
                  |L1.1826|
000722  42bc              CMP      r4,r7                 ;529
000724  ddd7              BLE      |L1.1750|
;;;551      }
;;;552    }
000726  e8bd8ffe          POP      {r1-r11,pc}
;;;553    
                          ENDP

                  _DrawHLine PROC
;;;557    */
;;;558    static void _DrawHLine(int x0, int y, int x1) {
00072a  b570              PUSH     {r4-r6,lr}
00072c  4605              MOV      r5,r0
00072e  460c              MOV      r4,r1
000730  4616              MOV      r6,r2
;;;559      _FillRect(x0, y, x1, y);
000732  4623              MOV      r3,r4
000734  4632              MOV      r2,r6
000736  4621              MOV      r1,r4
000738  4628              MOV      r0,r5
00073a  f7fffffe          BL       _FillRect
;;;560    }
00073e  bd70              POP      {r4-r6,pc}
;;;561    
                          ENDP

                  _DrawVLine PROC
;;;565    */
;;;566    static void _DrawVLine(int x , int y0, int y1) {
000740  e92d4ff8          PUSH     {r3-r11,lr}
000744  4683              MOV      r11,r0
000746  460d              MOV      r5,r1
000748  4616              MOV      r6,r2
;;;567      GUI_MEMDEV* pDev   = GUI_MEMDEV_H2P(GUI_Context.hDevData);
00074a  494e              LDR      r1,|L1.2180|
00074c  f9b1004c          LDRSH    r0,[r1,#0x4c]  ; GUI_Context
000750  f7fffffe          BL       GUI_ALLOC_h2p
000754  4607              MOV      r7,r0
;;;568      GUI_USAGE_h hUsage = pDev->hUsage; 
000756  f9b78018          LDRSH    r8,[r7,#0x18]
;;;569      GUI_USAGE*  pUsage = hUsage ? GUI_USAGE_H2P(hUsage) : NULL;
00075a  f1b80f00          CMP      r8,#0
00075e  d003              BEQ      |L1.1896|
000760  4640              MOV      r0,r8
000762  f7fffffe          BL       GUI_ALLOC_h2p
000766  e001              B        |L1.1900|
                  |L1.1896|
000768  f04f0000          MOV      r0,#0
                  |L1.1900|
00076c  4681              MOV      r9,r0
;;;570      PIXELINDEX* pData  = _XY2PTR(x, y0);
00076e  4629              MOV      r1,r5
000770  4658              MOV      r0,r11
000772  f7fffffe          BL       _XY2PTR
000776  4604              MOV      r4,r0
;;;571      unsigned BytesPerLine = pDev->BytesPerLine;
000778  f8d7a00c          LDR      r10,[r7,#0xc]
;;;572    
;;;573      if (GUI_Context.DrawMode & LCD_DRAWMODE_XOR) {
00077c  4841              LDR      r0,|L1.2180|
00077e  7b00              LDRB     r0,[r0,#0xc]  ; GUI_Context
000780  f0100f01          TST      r0,#1
000784  d01b              BEQ      |L1.1982|
;;;574        PIXELINDEX IndexMask;
;;;575        IndexMask = pDev->pfGetIndexMask();
000786  6a78              LDR      r0,[r7,#0x24]
000788  4780              BLX      r0
00078a  b2c0              UXTB     r0,r0
00078c  9000              STR      r0,[sp,#0]
;;;576        do {
00078e  bf00              NOP      
                  |L1.1936|
;;;577          if (hUsage) {
000790  f1b80f00          CMP      r8,#0
000794  d006              BEQ      |L1.1956|
;;;578            GUI_USAGE_AddPixel(pUsage, x, y0);
000796  f8d90008          LDR      r0,[r9,#8]
00079a  462a              MOV      r2,r5
00079c  4659              MOV      r1,r11
00079e  6803              LDR      r3,[r0,#0]
0007a0  4648              MOV      r0,r9
0007a2  4798              BLX      r3
                  |L1.1956|
;;;579          }
;;;580          *pData = *pData ^ IndexMask;
0007a4  7820              LDRB     r0,[r4,#0]
0007a6  9900              LDR      r1,[sp,#0]
0007a8  ea800001          EOR      r0,r0,r1
0007ac  7020              STRB     r0,[r4,#0]
;;;581          pData = (PIXELINDEX*)((U8*)pData + pDev->BytesPerLine); /* Same as "pData += pDev->BytesPerLine >> 1;", Just more efficient */
0007ae  68f8              LDR      r0,[r7,#0xc]
0007b0  4404              ADD      r4,r4,r0
;;;582        } while (++y0 <= y1);
0007b2  f1050001          ADD      r0,r5,#1
0007b6  4605              MOV      r5,r0
0007b8  42b0              CMP      r0,r6
0007ba  dde9              BLE      |L1.1936|
;;;583      } else {
0007bc  e022              B        |L1.2052|
                  |L1.1982|
;;;584        if (hUsage) {
0007be  f1b80f00          CMP      r8,#0
0007c2  d011              BEQ      |L1.2024|
;;;585          do {
0007c4  bf00              NOP      
                  |L1.1990|
;;;586            GUI_USAGE_AddPixel(pUsage, x, y0);
0007c6  f8d90008          LDR      r0,[r9,#8]
0007ca  462a              MOV      r2,r5
0007cc  4659              MOV      r1,r11
0007ce  6803              LDR      r3,[r0,#0]
0007d0  4648              MOV      r0,r9
0007d2  4798              BLX      r3
;;;587            *pData = LCD_COLORINDEX;
0007d4  482b              LDR      r0,|L1.2180|
0007d6  8840              LDRH     r0,[r0,#2]  ; GUI_Context
0007d8  7020              STRB     r0,[r4,#0]
;;;588            pData = (PIXELINDEX*)((U8*)pData + BytesPerLine); /* Same as "pData += pDev->BytesPerLine >> 1;", Just more efficient */
0007da  4454              ADD      r4,r4,r10
;;;589          } while (++y0 <= y1);
0007dc  f1050001          ADD      r0,r5,#1
0007e0  4605              MOV      r5,r0
0007e2  42b0              CMP      r0,r6
0007e4  ddef              BLE      |L1.1990|
0007e6  e00d              B        |L1.2052|
                  |L1.2024|
;;;590        } else {
;;;591          unsigned NumPixels;
;;;592          NumPixels = y1 - y0 + 1;
0007e8  eba60105          SUB      r1,r6,r5
0007ec  f1010001          ADD      r0,r1,#1
;;;593          do {
0007f0  bf00              NOP      
                  |L1.2034|
;;;594            *pData = LCD_COLORINDEX;
0007f2  4924              LDR      r1,|L1.2180|
0007f4  8849              LDRH     r1,[r1,#2]  ; GUI_Context
0007f6  7021              STRB     r1,[r4,#0]
;;;595            pData = (PIXELINDEX*)((U8*)pData + BytesPerLine); /* Same as "pData += pDev->BytesPerLine >> 1;", Just more efficient */
0007f8  4454              ADD      r4,r4,r10
;;;596          } while (--NumPixels);
0007fa  f1a00101          SUB      r1,r0,#1
0007fe  0008              MOVS     r0,r1
000800  d1f7              BNE      |L1.2034|
;;;597        }
000802  bf00              NOP      
                  |L1.2052|
;;;598      }
;;;599    }
000804  e8bd8ff8          POP      {r3-r11,pc}
;;;600    
                          ENDP

                  _SetPixelIndex PROC
;;;604    */
;;;605    static void _SetPixelIndex(int x, int y, int Index) {
000808  e92d5ff0          PUSH     {r4-r12,lr}
00080c  4604              MOV      r4,r0
00080e  460d              MOV      r5,r1
000810  4616              MOV      r6,r2
;;;606      GUI_MEMDEV* pDev = GUI_MEMDEV_H2P(GUI_Context.hDevData);
000812  491c              LDR      r1,|L1.2180|
000814  f9b1004c          LDRSH    r0,[r1,#0x4c]  ; GUI_Context
000818  f7fffffe          BL       GUI_ALLOC_h2p
00081c  4680              MOV      r8,r0
;;;607      GUI_USAGE_h hUsage = pDev->hUsage; 
00081e  f9b87018          LDRSH    r7,[r8,#0x18]
;;;608      PIXELINDEX* pData = _XY2PTR(x, y);
000822  4629              MOV      r1,r5
000824  4620              MOV      r0,r4
000826  f7fffffe          BL       _XY2PTR
00082a  4681              MOV      r9,r0
;;;609      *pData = Index;
00082c  f8896000          STRB     r6,[r9,#0]
;;;610      if (hUsage) {
000830  b16f              CBZ      r7,|L1.2126|
;;;611        GUI_USAGE_AddPixel(GUI_USAGE_H2P(hUsage), x, y);
000832  4638              MOV      r0,r7
000834  f7fffffe          BL       GUI_ALLOC_h2p
000838  4683              MOV      r11,r0
00083a  4638              MOV      r0,r7
00083c  f7fffffe          BL       GUI_ALLOC_h2p
000840  6880              LDR      r0,[r0,#8]
000842  462a              MOV      r2,r5
000844  4621              MOV      r1,r4
000846  f8d0a000          LDR      r10,[r0,#0]
00084a  4658              MOV      r0,r11
00084c  47d0              BLX      r10
                  |L1.2126|
;;;612      }
;;;613    }
00084e  e8bd9ff0          POP      {r4-r12,pc}
;;;614    
                          ENDP

                  _XorPixel PROC
;;;618    */
;;;619    static void _XorPixel(int x, int y) {
000852  e92d5ff0          PUSH     {r4-r12,lr}
000856  4604              MOV      r4,r0
000858  460d              MOV      r5,r1
;;;620      PIXELINDEX IndexMask;
;;;621      GUI_MEMDEV* pDev = GUI_MEMDEV_H2P(GUI_Context.hDevData);
00085a  490a              LDR      r1,|L1.2180|
00085c  f9b1004c          LDRSH    r0,[r1,#0x4c]  ; GUI_Context
000860  f7fffffe          BL       GUI_ALLOC_h2p
000864  4606              MOV      r6,r0
;;;622      GUI_USAGE_h hUsage = pDev->hUsage; 
000866  f9b67018          LDRSH    r7,[r6,#0x18]
;;;623      PIXELINDEX* pData = _XY2PTR(x, y);
00086a  4629              MOV      r1,r5
00086c  4620              MOV      r0,r4
00086e  f7fffffe          BL       _XY2PTR
000872  4680              MOV      r8,r0
;;;624      IndexMask = pDev->pfGetIndexMask();
000874  6a70              LDR      r0,[r6,#0x24]
000876  4780              BLX      r0
000878  f00009ff          AND      r9,r0,#0xff
;;;625      *pData = *pData ^ IndexMask;
00087c  f8980000          LDRB     r0,[r8,#0]
000880  e004              B        |L1.2188|
000882  0000              DCW      0x0000
                  |L1.2180|
                          DCD      GUI_Context
                  |L1.2184|
                          DCD      aID
                  |L1.2188|
00088c  ea800009          EOR      r0,r0,r9
000890  f8880000          STRB     r0,[r8,#0]
;;;626      if (hUsage) {
000894  b16f              CBZ      r7,|L1.2226|
;;;627        GUI_USAGE_AddPixel(GUI_USAGE_H2P(hUsage), x, y);
000896  4638              MOV      r0,r7
000898  f7fffffe          BL       GUI_ALLOC_h2p
00089c  4683              MOV      r11,r0
00089e  4638              MOV      r0,r7
0008a0  f7fffffe          BL       GUI_ALLOC_h2p
0008a4  6880              LDR      r0,[r0,#8]
0008a6  462a              MOV      r2,r5
0008a8  4621              MOV      r1,r4
0008aa  f8d0a000          LDR      r10,[r0,#0]
0008ae  4658              MOV      r0,r11
0008b0  47d0              BLX      r10
                  |L1.2226|
;;;628      }
;;;629    }
0008b2  e8bd9ff0          POP      {r4-r12,pc}
;;;630    
                          ENDP

                  _GetPixelIndex PROC
;;;634    */
;;;635    static unsigned int _GetPixelIndex(int x, int y) {
0008b6  b570              PUSH     {r4-r6,lr}
0008b8  4604              MOV      r4,r0
0008ba  460d              MOV      r5,r1
;;;636      PIXELINDEX* pData = _XY2PTR(x, y);
0008bc  4629              MOV      r1,r5
0008be  4620              MOV      r0,r4
0008c0  f7fffffe          BL       _XY2PTR
0008c4  4606              MOV      r6,r0
;;;637      return *pData;
0008c6  7830              LDRB     r0,[r6,#0]
;;;638    }
0008c8  bd70              POP      {r4-r6,pc}
;;;639    
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  aID
000000  00000001          DCW      0x0000,0x0001
000004  00020003          DCW      0x0002,0x0003
000008  00040005          DCW      0x0004,0x0005
00000c  00060007          DCW      0x0006,0x0007
000010  00080009          DCW      0x0008,0x0009
000014  000a000b          DCW      0x000a,0x000b
000018  000c000d          DCW      0x000c,0x000d
00001c  000e000f          DCW      0x000e,0x000f
                  GUI_MEMDEV__APIList8
                          DCD      GUI_MEMDEV__Color2Index
                          DCD      GUI_MEMDEV__Index2Color
                          DCD      GUI_MEMDEV__GetIndexMask
                          DCD      _DrawBitmap
                          DCD      _DrawHLine
                          DCD      _DrawVLine
                          DCD      _FillRect
                          DCD      _GetPixelIndex
                          DCD      GUI_MEMDEV__GetRect
                          DCD      _SetPixelIndex
                          DCD      _XorPixel
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000008
