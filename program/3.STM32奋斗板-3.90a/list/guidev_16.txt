; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\guidev_16.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\guidev_16.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -I.\GUI\AntiAlias -I.\GUI\Config -I.\GUI\ConvertColor -I.\GUI\ConvertMono -I.\GUI\Core -I.\GUI\Font -I.\GUI\GUI_X -I.\GUI\JPEG -I.\GUI\LCDDriver -I.\GUI\MemDev -I.\GUI\MultiLayer -I.\GUI\Widget -I.\GUI\WM -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\INC\ST\STM32F10x -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\guidev_16.crf GUI\MemDev\GUIDEV_16.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _DrawBitLine16BPP_DDB PROC
;;;48     */
;;;49     static void _DrawBitLine16BPP_DDB(GUI_USAGE* pUsage, int x, int y, const U16 *pSrc, int xsize, PIXELINDEX* pDest) {
000000  e92d47f0          PUSH     {r4-r10,lr}
000004  4605              MOV      r5,r0
000006  460f              MOV      r7,r1
000008  4691              MOV      r9,r2
00000a  461c              MOV      r4,r3
00000c  e9dd8608          LDRD     r8,r6,[sp,#0x20]
;;;50       switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
000010  48fc              LDR      r0,|L1.1028|
000012  7b00              LDRB     r0,[r0,#0xc]  ; GUI_Context
000014  f0100003          ANDS     r0,r0,#3
000018  d002              BEQ      |L1.32|
00001a  2802              CMP      r0,#2
00001c  d11f              BNE      |L1.94|
00001e  e006              B        |L1.46|
                  |L1.32|
;;;51       case 0:    /* Write mode */
;;;52         memcpy(pDest, pSrc, xsize * 2);
000020  ea4f0248          LSL      r2,r8,#1
000024  4621              MOV      r1,r4
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       __aeabi_memcpy
;;;53         break;
00002c  e017              B        |L1.94|
                  |L1.46|
;;;54       case LCD_DRAWMODE_TRANS:
;;;55         do {
00002e  bf00              NOP      
                  |L1.48|
;;;56           if (*pSrc) {
000030  8820              LDRH     r0,[r4,#0]
000032  b140              CBZ      r0,|L1.70|
;;;57             *pDest = *pSrc;
000034  8820              LDRH     r0,[r4,#0]
000036  8030              STRH     r0,[r6,#0]
;;;58             if (pUsage) {
000038  b12d              CBZ      r5,|L1.70|
;;;59               GUI_USAGE_AddPixel(pUsage, x, y);
00003a  68a8              LDR      r0,[r5,#8]
00003c  464a              MOV      r2,r9
00003e  4639              MOV      r1,r7
000040  6803              LDR      r3,[r0,#0]
000042  4628              MOV      r0,r5
000044  4798              BLX      r3
                  |L1.70|
;;;60             }
;;;61           }
;;;62           x++;
000046  f1070701          ADD      r7,r7,#1
;;;63           pDest++;
00004a  f1060602          ADD      r6,r6,#2
;;;64           pSrc++;
00004e  f1040402          ADD      r4,r4,#2
;;;65         } while (--xsize);
000052  f1a80001          SUB      r0,r8,#1
000056  ea5f0800          MOVS     r8,r0
00005a  d1e9              BNE      |L1.48|
;;;66         break;
00005c  bf00              NOP      
                  |L1.94|
00005e  bf00              NOP                            ;53
;;;67       }
;;;68     }
000060  e8bd87f0          POP      {r4-r10,pc}
;;;69     
                          ENDP

                  _XY2PTR PROC
;;;73     */
;;;74     static PIXELINDEX* _XY2PTR(int x, int y) {
000064  e92d41f0          PUSH     {r4-r8,lr}
000068  4605              MOV      r5,r0
00006a  460e              MOV      r6,r1
;;;75       GUI_MEMDEV* pDev = GUI_MEMDEV_H2P(GUI_Context.hDevData);
00006c  49e5              LDR      r1,|L1.1028|
00006e  f9b1004c          LDRSH    r0,[r1,#0x4c]  ; GUI_Context
000072  f7fffffe          BL       GUI_ALLOC_h2p
000076  4604              MOV      r4,r0
;;;76       U8 *pData = (U8*)(pDev + 1);
000078  f104072c          ADD      r7,r4,#0x2c
;;;77       #if GUI_DEBUG_LEVEL >= GUI_DEBUG_LEVEL_CHECK_ALL
;;;78         if ((x >= pDev->x0+pDev->XSize) | (x<pDev->x0) | (y >= pDev->y0+pDev->YSize) | (y<pDev->y0)) {
;;;79           GUI_DEBUG_ERROROUT2("_XY2PTR: parameters out of bounds",x,y);
;;;80         }
;;;81       #endif
;;;82       pData += (GUI_ALLOC_DATATYPE_U)(y - pDev->y0) * (GUI_ALLOC_DATATYPE_U)pDev->BytesPerLine;
00007c  8860              LDRH     r0,[r4,#2]
00007e  eba60000          SUB      r0,r6,r0
000082  b280              UXTH     r0,r0
000084  68e1              LDR      r1,[r4,#0xc]
000086  b289              UXTH     r1,r1
000088  fb007701          MLA      r7,r0,r1,r7
;;;83       return ((PIXELINDEX*)pData) + x - pDev->x0;
00008c  eb070045          ADD      r0,r7,r5,LSL #1
000090  f9b41000          LDRSH    r1,[r4,#0]
000094  eba00041          SUB      r0,r0,r1,LSL #1
;;;84     }
000098  e8bd81f0          POP      {r4-r8,pc}
;;;85     
                          ENDP

                  _DrawBitLine1BPP PROC
;;;89     */
;;;90     static void _DrawBitLine1BPP(GUI_USAGE* pUsage, int x, int y, const U8 GUI_UNI_PTR * p, int Diff, unsigned int xsize,
00009c  e92d4fff          PUSH     {r0-r11,lr}
;;;91                                  const LCD_PIXELINDEX* pTrans, GUI_MEMDEV* pDev, PIXELINDEX* pDest)
;;;92     {
0000a0  b081              SUB      sp,sp,#4
0000a2  4681              MOV      r9,r0
0000a4  468a              MOV      r10,r1
0000a6  4698              MOV      r8,r3
0000a8  9e12              LDR      r6,[sp,#0x48]
0000aa  9d0f              LDR      r5,[sp,#0x3c]
;;;93       PIXELINDEX Index1;
;;;94       PIXELINDEX IndexMask;
;;;95       unsigned pixels;
;;;96       unsigned PixelCnt;
;;;97       PixelCnt = 8 - Diff;
0000ac  980e              LDR      r0,[sp,#0x38]
0000ae  f1c00408          RSB      r4,r0,#8
;;;98       pixels = LCD_aMirror[*p] >> Diff;
0000b2  f8980000          LDRB     r0,[r8,#0]
0000b6  49d4              LDR      r1,|L1.1032|
0000b8  5c08              LDRB     r0,[r1,r0]
0000ba  990e              LDR      r1,[sp,#0x38]
0000bc  fa40f701          ASR      r7,r0,r1
;;;99     
;;;100      GUI_DEBUG_ERROROUT3_IF( x < pDev->x0, "GUIDEV.c: DrawBitLine1BPP, Act= %d, Border= %d, Clip= %d", x,pDev->x0, GUI_Context.ClipRect.x0);
;;;101    
;;;102      switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
0000c0  48d0              LDR      r0,|L1.1028|
0000c2  7b00              LDRB     r0,[r0,#0xc]  ; GUI_Context
0000c4  f0100003          ANDS     r0,r0,#3
0000c8  d004              BEQ      |L1.212|
0000ca  2801              CMP      r0,#1
0000cc  d06e              BEQ      |L1.428|
0000ce  2802              CMP      r0,#2
0000d0  d17e              BNE      |L1.464|
0000d2  e020              B        |L1.278|
                  |L1.212|
;;;103      case 0:    /* Write mode */
;;;104        do {
0000d4  bf00              NOP      
                  |L1.214|
;;;105          /* Prepare loop */
;;;106          if (PixelCnt > xsize) {
0000d6  42ac              CMP      r4,r5
0000d8  d900              BLS      |L1.220|
;;;107            PixelCnt = xsize;
0000da  462c              MOV      r4,r5
                  |L1.220|
;;;108          }
;;;109          xsize -= PixelCnt;
0000dc  eba50504          SUB      r5,r5,r4
;;;110          /* Write as many pixels as we are allowed to and have loaded in this inner loop */
;;;111          do {
0000e0  bf00              NOP      
                  |L1.226|
;;;112            *pDest++ = *(pTrans + (pixels & 1));
0000e2  f0070101          AND      r1,r7,#1
0000e6  9810              LDR      r0,[sp,#0x40]
0000e8  f8300011          LDRH     r0,[r0,r1,LSL #1]
0000ec  f8260b02          STRH     r0,[r6],#2
;;;113            pixels >>= 1;
0000f0  ea4f0757          LSR      r7,r7,#1
;;;114          } while (--PixelCnt);
0000f4  f1a40001          SUB      r0,r4,#1
0000f8  0004              MOVS     r4,r0
0000fa  d1f2              BNE      |L1.226|
;;;115          /* Check if an other Source byte needs to be loaded */
;;;116          if (xsize == 0) {
0000fc  b915              CBNZ     r5,|L1.260|
                  |L1.254|
;;;117            return;
;;;118          }
;;;119          PixelCnt = 8;
;;;120          pixels = LCD_aMirror[*++p];
;;;121        } while (1);
;;;122      case LCD_DRAWMODE_TRANS:
;;;123        Index1 = *(pTrans + 1);
;;;124        do {
;;;125          /* Prepare loop */
;;;126          if (PixelCnt > xsize) {
;;;127            PixelCnt = xsize;
;;;128          }
;;;129          xsize -= PixelCnt;
;;;130          if (pUsage) {
;;;131            do {
;;;132              if (pixels == 0) {      /* Early out optimization; not required */
;;;133                pDest += PixelCnt;
;;;134                x     += PixelCnt;
;;;135                break;
;;;136              }
;;;137              if ((pixels & 1)) {
;;;138                GUI_USAGE_AddPixel(pUsage, x, y);
;;;139                *pDest = Index1;
;;;140              }
;;;141              x++;
;;;142              pDest++;
;;;143              if (--PixelCnt == 0) {
;;;144                break;
;;;145              }
;;;146              pixels >>= 1;
;;;147            } while (1);
;;;148          } else {
;;;149            do {
;;;150              if (pixels == 0) {      /* Early out optimization; not required */
;;;151                pDest += PixelCnt;
;;;152                break;
;;;153              }
;;;154              if ((pixels & 1)) {
;;;155                *pDest = Index1;
;;;156              }
;;;157              pDest++;
;;;158              if (--PixelCnt == 0) {
;;;159                break;
;;;160              }
;;;161              pixels >>= 1;
;;;162            } while (1);
;;;163          }
;;;164          /* Check if an other Source byte needs to be loaded */
;;;165          if (xsize == 0) {
;;;166            return;
;;;167          }
;;;168          PixelCnt = 8;
;;;169          pixels = LCD_aMirror[*(++p)];
;;;170        } while (1);
;;;171      case LCD_DRAWMODE_XOR:
;;;172        IndexMask = pDev->pfGetIndexMask();
;;;173        do {
;;;174          /* Prepare loop */
;;;175          if (PixelCnt > xsize) {
;;;176            PixelCnt = xsize;
;;;177          }
;;;178          xsize -= PixelCnt;
;;;179          /* Write as many pixels as we are allowed to and have loaded in this inner loop */
;;;180          do {
;;;181            if ((pixels & 1)) {
;;;182              *pDest ^= IndexMask;
;;;183            }
;;;184            *pDest++;
;;;185            pixels >>= 1;
;;;186          } while (--PixelCnt);
;;;187          /* Check if an other Source byte needs to be loaded */
;;;188          if (xsize == 0) {
;;;189            return;
;;;190          }
;;;191          PixelCnt = 8;
;;;192          pixels = LCD_aMirror[*(++p)];
;;;193        } while (1);
;;;194      }
;;;195    }
0000fe  b005              ADD      sp,sp,#0x14
000100  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.260|
000104  f04f0408          MOV      r4,#8                 ;119
000108  f1080001          ADD      r0,r8,#1              ;120
00010c  4680              MOV      r8,r0                 ;120
00010e  7800              LDRB     r0,[r0,#0]            ;120
000110  49bd              LDR      r1,|L1.1032|
000112  5c0f              LDRB     r7,[r1,r0]            ;120
000114  e7df              B        |L1.214|
                  |L1.278|
000116  9810              LDR      r0,[sp,#0x40]         ;123
000118  f8b0b002          LDRH     r11,[r0,#2]           ;123
00011c  bf00              NOP                            ;124
                  |L1.286|
00011e  42ac              CMP      r4,r5                 ;126
000120  d900              BLS      |L1.292|
000122  462c              MOV      r4,r5                 ;127
                  |L1.292|
000124  eba50504          SUB      r5,r5,r4              ;129
000128  f1b90f00          CMP      r9,#0                 ;130
00012c  d01e              BEQ      |L1.364|
00012e  bf00              NOP                            ;131
                  |L1.304|
000130  b91f              CBNZ     r7,|L1.314|
000132  eb060644          ADD      r6,r6,r4,LSL #1       ;133
000136  44a2              ADD      r10,r10,r4            ;134
000138  e017              B        |L1.362|
                  |L1.314|
00013a  f0170f01          TST      r7,#1                 ;137
00013e  d008              BEQ      |L1.338|
000140  f8d90008          LDR      r0,[r9,#8]            ;138
000144  6803              LDR      r3,[r0,#0]            ;138
000146  4651              MOV      r1,r10                ;138
000148  4648              MOV      r0,r9                 ;138
00014a  9a03              LDR      r2,[sp,#0xc]          ;138
00014c  4798              BLX      r3                    ;138
00014e  f8a6b000          STRH     r11,[r6,#0]           ;139
                  |L1.338|
000152  f10a0a01          ADD      r10,r10,#1            ;141
000156  f1060602          ADD      r6,r6,#2              ;142
00015a  f1a40001          SUB      r0,r4,#1              ;143
00015e  0004              MOVS     r4,r0                 ;143
000160  d100              BNE      |L1.356|
000162  e002              B        |L1.362|
                  |L1.356|
000164  ea4f0757          LSR      r7,r7,#1              ;146
000168  e7e2              B        |L1.304|
                  |L1.362|
00016a  e014              B        |L1.406|
                  |L1.364|
00016c  bf00              NOP                            ;149
                  |L1.366|
00016e  b917              CBNZ     r7,|L1.374|
000170  eb060644          ADD      r6,r6,r4,LSL #1       ;151
000174  e00e              B        |L1.404|
                  |L1.374|
000176  f0170f01          TST      r7,#1                 ;154
00017a  d001              BEQ      |L1.384|
00017c  f8a6b000          STRH     r11,[r6,#0]           ;155
                  |L1.384|
000180  f1060602          ADD      r6,r6,#2              ;157
000184  f1a40001          SUB      r0,r4,#1              ;158
000188  0004              MOVS     r4,r0                 ;158
00018a  d100              BNE      |L1.398|
00018c  e002              B        |L1.404|
                  |L1.398|
00018e  ea4f0757          LSR      r7,r7,#1              ;161
000192  e7ec              B        |L1.366|
                  |L1.404|
000194  bf00              NOP                            ;152
                  |L1.406|
000196  b905              CBNZ     r5,|L1.410|
000198  e7b1              B        |L1.254|
                  |L1.410|
00019a  f04f0408          MOV      r4,#8                 ;168
00019e  f1080001          ADD      r0,r8,#1              ;169
0001a2  4680              MOV      r8,r0                 ;169
0001a4  7800              LDRB     r0,[r0,#0]            ;169
0001a6  4998              LDR      r1,|L1.1032|
0001a8  5c0f              LDRB     r7,[r1,r0]            ;169
0001aa  e7b8              B        |L1.286|
                  |L1.428|
0001ac  9911              LDR      r1,[sp,#0x44]         ;172
0001ae  6a48              LDR      r0,[r1,#0x24]         ;172
0001b0  4780              BLX      r0                    ;172
0001b2  b280              UXTH     r0,r0                 ;172
0001b4  9000              STR      r0,[sp,#0]            ;172
0001b6  bf00              NOP                            ;173
                  |L1.440|
0001b8  42ac              CMP      r4,r5                 ;175
0001ba  d900              BLS      |L1.446|
0001bc  462c              MOV      r4,r5                 ;176
                  |L1.446|
0001be  eba50504          SUB      r5,r5,r4              ;178
0001c2  bf00              NOP                            ;180
                  |L1.452|
0001c4  f0170f01          TST      r7,#1                 ;181
0001c8  d006              BEQ      |L1.472|
0001ca  8830              LDRH     r0,[r6,#0]            ;182
0001cc  9900              LDR      r1,[sp,#0]            ;182
0001ce  e000              B        |L1.466|
                  |L1.464|
0001d0  e015              B        |L1.510|
                  |L1.466|
0001d2  ea800001          EOR      r0,r0,r1              ;182
0001d6  8030              STRH     r0,[r6,#0]            ;182
                  |L1.472|
0001d8  f1060602          ADD      r6,r6,#2              ;184
0001dc  ea4f0757          LSR      r7,r7,#1              ;185
0001e0  f1a40001          SUB      r0,r4,#1              ;186
0001e4  0004              MOVS     r4,r0                 ;186
0001e6  d1ed              BNE      |L1.452|
0001e8  b905              CBNZ     r5,|L1.492|
0001ea  e788              B        |L1.254|
                  |L1.492|
0001ec  f04f0408          MOV      r4,#8                 ;191
0001f0  f1080001          ADD      r0,r8,#1              ;192
0001f4  4680              MOV      r8,r0                 ;192
0001f6  7800              LDRB     r0,[r0,#0]            ;192
0001f8  4983              LDR      r1,|L1.1032|
0001fa  5c0f              LDRB     r7,[r1,r0]            ;192
0001fc  e7dc              B        |L1.440|
                  |L1.510|
0001fe  bf00              NOP      
000200  e77d              B        |L1.254|
;;;196    
                          ENDP

                  _DrawBitLine2BPP PROC
;;;200    */
;;;201    static void _DrawBitLine2BPP(GUI_USAGE* pUsage, int x, int y, const U8 GUI_UNI_PTR * p, int Diff, int xsize,
000202  e92d5fff          PUSH     {r0-r12,lr}
;;;202                                 const LCD_PIXELINDEX* pTrans, PIXELINDEX* pDest)
;;;203    {
000206  4681              MOV      r9,r0
000208  468a              MOV      r10,r1
00020a  4698              MOV      r8,r3
00020c  e9ddb610          LDRD     r11,r6,[sp,#0x40]
000210  9c0f              LDR      r4,[sp,#0x3c]
;;;204      U8 pixels;
;;;205      U8  PixelCnt;
;;;206      PixelCnt = 4 - Diff;
000212  980e              LDR      r0,[sp,#0x38]
000214  f1c00004          RSB      r0,r0,#4
000218  b2c5              UXTB     r5,r0
;;;207      pixels = (*p) << (Diff << 1);
00021a  f8980000          LDRB     r0,[r8,#0]
00021e  990e              LDR      r1,[sp,#0x38]
000220  ea4f0141          LSL      r1,r1,#1
000224  fa00f001          LSL      r0,r0,r1
000228  b2c7              UXTB     r7,r0
;;;208      switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
00022a  4876              LDR      r0,|L1.1028|
00022c  7b00              LDRB     r0,[r0,#0xc]  ; GUI_Context
00022e  f0100003          ANDS     r0,r0,#3
000232  d004              BEQ      |L1.574|
000234  2801              CMP      r0,#1
000236  d050              BEQ      |L1.730|
000238  2802              CMP      r0,#2
00023a  d170              BNE      |L1.798|
00023c  e01e              B        |L1.636|
                  |L1.574|
;;;209      case 0:    /* Write mode */
;;;210      PixelLoopWrite:
00023e  bf00              NOP      
                  |L1.576|
;;;211        if (PixelCnt > xsize) {
000240  42a5              CMP      r5,r4
000242  dd00              BLE      |L1.582|
;;;212          PixelCnt = xsize;
000244  b2e5              UXTB     r5,r4
                  |L1.582|
;;;213        }
;;;214        xsize -= PixelCnt;
000246  eba40405          SUB      r4,r4,r5
;;;215        do {
00024a  bf00              NOP      
                  |L1.588|
;;;216          *pDest++ = *(pTrans + (pixels >> 6));
00024c  ea4f10a7          ASR      r0,r7,#6
000250  f83b0010          LDRH     r0,[r11,r0,LSL #1]
000254  f8260b02          STRH     r0,[r6],#2
;;;217          pixels <<= 2;
000258  ea4f6087          LSL      r0,r7,#26
00025c  ea4f6710          LSR      r7,r0,#24
;;;218        } while (--PixelCnt);
000260  f1a50001          SUB      r0,r5,#1
000264  b2c0              UXTB     r0,r0
000266  0005              MOVS     r5,r0
000268  d1f0              BNE      |L1.588|
;;;219        if (xsize) {
00026a  b134              CBZ      r4,|L1.634|
;;;220          PixelCnt = 4;
00026c  f04f0504          MOV      r5,#4
;;;221          pixels = *(++p);
000270  f1080001          ADD      r0,r8,#1
000274  4680              MOV      r8,r0
000276  7807              LDRB     r7,[r0,#0]
;;;222          goto PixelLoopWrite;
000278  e7e2              B        |L1.576|
                  |L1.634|
;;;223        }
;;;224        break;
00027a  e050              B        |L1.798|
                  |L1.636|
;;;225      case LCD_DRAWMODE_TRANS:
;;;226      PixelLoopTrans:
00027c  bf00              NOP      
                  |L1.638|
;;;227        if (PixelCnt > xsize)
00027e  42a5              CMP      r5,r4
000280  dd00              BLE      |L1.644|
;;;228          PixelCnt = xsize;
000282  b2e5              UXTB     r5,r4
                  |L1.644|
;;;229        xsize -= PixelCnt;
000284  eba40405          SUB      r4,r4,r5
;;;230        do {
000288  bf00              NOP      
                  |L1.650|
;;;231          if (pixels & 0xc0) {
00028a  f0170fc0          TST      r7,#0xc0
00028e  d00e              BEQ      |L1.686|
;;;232            *pDest = *(pTrans + (pixels >> 6));
000290  ea4f10a7          ASR      r0,r7,#6
000294  f83b0010          LDRH     r0,[r11,r0,LSL #1]
000298  8030              STRH     r0,[r6,#0]
;;;233            if (pUsage) {
00029a  f1b90f00          CMP      r9,#0
00029e  d006              BEQ      |L1.686|
;;;234              GUI_USAGE_AddPixel(pUsage, x, y);
0002a0  f8d90008          LDR      r0,[r9,#8]
0002a4  6803              LDR      r3,[r0,#0]
0002a6  4651              MOV      r1,r10
0002a8  4648              MOV      r0,r9
0002aa  9a02              LDR      r2,[sp,#8]
0002ac  4798              BLX      r3
                  |L1.686|
;;;235            }
;;;236          }
;;;237          pDest++;
0002ae  f1060602          ADD      r6,r6,#2
;;;238          x++;
0002b2  f10a0a01          ADD      r10,r10,#1
;;;239          pixels <<= 2;
0002b6  ea4f6087          LSL      r0,r7,#26
0002ba  ea4f6710          LSR      r7,r0,#24
;;;240        } while (--PixelCnt);
0002be  f1a50001          SUB      r0,r5,#1
0002c2  b2c0              UXTB     r0,r0
0002c4  0005              MOVS     r5,r0
0002c6  d1e0              BNE      |L1.650|
;;;241        if (xsize) {
0002c8  b134              CBZ      r4,|L1.728|
;;;242          PixelCnt = 4;
0002ca  f04f0504          MOV      r5,#4
;;;243          pixels = *(++p);
0002ce  f1080001          ADD      r0,r8,#1
0002d2  4680              MOV      r8,r0
0002d4  7807              LDRB     r7,[r0,#0]
;;;244          goto PixelLoopTrans;
0002d6  e7d2              B        |L1.638|
                  |L1.728|
;;;245        }
;;;246        break;
0002d8  e021              B        |L1.798|
                  |L1.730|
;;;247      case LCD_DRAWMODE_XOR:;
;;;248      PixelLoopXor:
0002da  bf00              NOP      
                  |L1.732|
;;;249        if (PixelCnt > xsize)
0002dc  42a5              CMP      r5,r4
0002de  dd00              BLE      |L1.738|
;;;250          PixelCnt = xsize;
0002e0  b2e5              UXTB     r5,r4
                  |L1.738|
;;;251        xsize -= PixelCnt;
0002e2  eba40405          SUB      r4,r4,r5
;;;252        do {
0002e6  bf00              NOP      
                  |L1.744|
;;;253          if ((pixels & 0xc0))
0002e8  f0170fc0          TST      r7,#0xc0
0002ec  d003              BEQ      |L1.758|
;;;254            *pDest ^= 255;
0002ee  8830              LDRH     r0,[r6,#0]
0002f0  f08000ff          EOR      r0,r0,#0xff
0002f4  8030              STRH     r0,[r6,#0]
                  |L1.758|
;;;255          pDest++;
0002f6  f1060602          ADD      r6,r6,#2
;;;256          pixels <<= 2;
0002fa  ea4f6087          LSL      r0,r7,#26
0002fe  ea4f6710          LSR      r7,r0,#24
;;;257        } while (--PixelCnt);
000302  f1a50001          SUB      r0,r5,#1
000306  b2c0              UXTB     r0,r0
000308  0005              MOVS     r5,r0
00030a  d1ed              BNE      |L1.744|
;;;258        if (xsize) {
00030c  b134              CBZ      r4,|L1.796|
;;;259          PixelCnt = 4;
00030e  f04f0504          MOV      r5,#4
;;;260          pixels = *(++p);
000312  f1080001          ADD      r0,r8,#1
000316  4680              MOV      r8,r0
000318  7807              LDRB     r7,[r0,#0]
;;;261          goto PixelLoopXor;
00031a  e7df              B        |L1.732|
                  |L1.796|
;;;262        }
;;;263        break;
00031c  bf00              NOP      
                  |L1.798|
00031e  bf00              NOP                            ;224
;;;264      }
;;;265    }
000320  e8bd9fff          POP      {r0-r12,pc}
;;;266    
                          ENDP

                  _DrawBitLine4BPP PROC
;;;270    */
;;;271    static void _DrawBitLine4BPP(GUI_USAGE* pUsage, int x, int y, const U8 GUI_UNI_PTR * p, int Diff, int xsize,
000324  e92d4fff          PUSH     {r0-r11,lr}
;;;272                                 const LCD_PIXELINDEX* pTrans, PIXELINDEX* pDest)
;;;273    {
000328  b081              SUB      sp,sp,#4
00032a  4607              MOV      r7,r0
00032c  468a              MOV      r10,r1
00032e  4699              MOV      r9,r3
000330  e9ddb60e          LDRD     r11,r6,[sp,#0x38]
000334  e9dd8410          LDRD     r8,r4,[sp,#0x40]
;;;274      U8 pixels;
;;;275      U8 PixelCnt;
;;;276      PixelCnt = 2 - Diff;
000338  f1cb0002          RSB      r0,r11,#2
00033c  b2c0              UXTB     r0,r0
00033e  9000              STR      r0,[sp,#0]
;;;277      pixels = (*p) << (Diff << 2);
000340  f8990000          LDRB     r0,[r9,#0]
000344  ea4f018b          LSL      r1,r11,#2
000348  fa00f001          LSL      r0,r0,r1
00034c  b2c5              UXTB     r5,r0
;;;278      switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
00034e  482d              LDR      r0,|L1.1028|
000350  7b00              LDRB     r0,[r0,#0xc]  ; GUI_Context
000352  f0100003          ANDS     r0,r0,#3
000356  d004              BEQ      |L1.866|
000358  2801              CMP      r0,#1
00035a  d07c              BEQ      |L1.1110|
00035c  2802              CMP      r0,#2
00035e  d132              BNE      |L1.966|
000360  e032              B        |L1.968|
                  |L1.866|
;;;279    /*
;;;280              * Write mode *
;;;281    */
;;;282      case 0:
;;;283        /* Draw incomplete bytes to the left of center area */
;;;284        if (Diff) {
000362  f1bb0f00          CMP      r11,#0
000366  d00c              BEQ      |L1.898|
;;;285          *pDest = *(pTrans + (pixels >> 4));
000368  ea4f1025          ASR      r0,r5,#4
00036c  f8380010          LDRH     r0,[r8,r0,LSL #1]
000370  8020              STRH     r0,[r4,#0]
;;;286          pDest++;
000372  f1040402          ADD      r4,r4,#2
;;;287          xsize--;
000376  f1a60601          SUB      r6,r6,#1
;;;288          pixels = *++p;
00037a  f1090001          ADD      r0,r9,#1
00037e  4681              MOV      r9,r0
000380  7805              LDRB     r5,[r0,#0]
                  |L1.898|
;;;289        }
;;;290        /* Draw center area (2 pixels in one byte) */
;;;291        if (xsize >= 2) {
000382  2e02              CMP      r6,#2
000384  db19              BLT      |L1.954|
;;;292          int i = xsize >> 1;
000386  ea4f0066          ASR      r0,r6,#1
;;;293          xsize &= 1;
00038a  f0060601          AND      r6,r6,#1
;;;294          do {
00038e  bf00              NOP      
                  |L1.912|
;;;295            *pDest     = *(pTrans + (pixels >> 4));   /* Draw 1. (left) pixel */
000390  ea4f1125          ASR      r1,r5,#4
000394  f8381011          LDRH     r1,[r8,r1,LSL #1]
000398  8021              STRH     r1,[r4,#0]
;;;296            *(pDest+1) = *(pTrans + (pixels & 15));   /* Draw 2. (right) pixel */
00039a  f005010f          AND      r1,r5,#0xf
00039e  f8381011          LDRH     r1,[r8,r1,LSL #1]
0003a2  8061              STRH     r1,[r4,#2]
;;;297            pDest += 2;
0003a4  f1040404          ADD      r4,r4,#4
;;;298            pixels = *++p;
0003a8  f1090101          ADD      r1,r9,#1
0003ac  4689              MOV      r9,r1
0003ae  780d              LDRB     r5,[r1,#0]
;;;299          } while (--i);
0003b0  f1a00101          SUB      r1,r0,#1
0003b4  0008              MOVS     r0,r1
0003b6  d1eb              BNE      |L1.912|
;;;300        }
0003b8  bf00              NOP      
                  |L1.954|
;;;301        /* Draw incomplete bytes to the right of center area */
;;;302        if (xsize) {
0003ba  b126              CBZ      r6,|L1.966|
;;;303          *pDest = * (pTrans + (pixels >> 4));
0003bc  ea4f1025          ASR      r0,r5,#4
0003c0  f8380010          LDRH     r0,[r8,r0,LSL #1]
0003c4  8020              STRH     r0,[r4,#0]
                  |L1.966|
;;;304        }
;;;305        break;
0003c6  e085              B        |L1.1236|
                  |L1.968|
;;;306    /*
;;;307              * Transparent draw mode *
;;;308    */
;;;309      case LCD_DRAWMODE_TRANS:
;;;310        /* Draw incomplete bytes to the left of center area */
;;;311        if (Diff) {
0003c8  f1bb0f00          CMP      r11,#0
0003cc  d018              BEQ      |L1.1024|
;;;312          if (pixels & 0xF0) {
0003ce  f0150ff0          TST      r5,#0xf0
0003d2  d00b              BEQ      |L1.1004|
;;;313            *pDest = *(pTrans + (pixels >> 4));
0003d4  ea4f1025          ASR      r0,r5,#4
0003d8  f8380010          LDRH     r0,[r8,r0,LSL #1]
0003dc  8020              STRH     r0,[r4,#0]
;;;314            if (pUsage) {
0003de  b12f              CBZ      r7,|L1.1004|
;;;315              GUI_USAGE_AddPixel(pUsage, x, y);
0003e0  68b8              LDR      r0,[r7,#8]
0003e2  6803              LDR      r3,[r0,#0]
0003e4  4651              MOV      r1,r10
0003e6  4638              MOV      r0,r7
0003e8  9a03              LDR      r2,[sp,#0xc]
0003ea  4798              BLX      r3
                  |L1.1004|
;;;316            }
;;;317          }
;;;318          pDest++;
0003ec  f1040402          ADD      r4,r4,#2
;;;319          x++;
0003f0  f10a0a01          ADD      r10,r10,#1
;;;320          xsize--;
0003f4  f1a60601          SUB      r6,r6,#1
;;;321          pixels = *++p;
0003f8  f1090001          ADD      r0,r9,#1
0003fc  4681              MOV      r9,r0
0003fe  7805              LDRB     r5,[r0,#0]
                  |L1.1024|
;;;322        }
;;;323        /* Draw center area (2 pixels in one byte) */
;;;324        while (xsize >= 2) {
000400  e02e              B        |L1.1120|
000402  0000              DCW      0x0000
                  |L1.1028|
                          DCD      GUI_Context
                  |L1.1032|
                          DCD      LCD_aMirror
                  |L1.1036|
;;;325          /* Draw 1. (left) pixel */
;;;326          if (pixels & 0xF0) {
00040c  f0150ff0          TST      r5,#0xf0
000410  d00b              BEQ      |L1.1066|
;;;327            *pDest = *(pTrans + (pixels >> 4));
000412  ea4f1025          ASR      r0,r5,#4
000416  f8380010          LDRH     r0,[r8,r0,LSL #1]
00041a  8020              STRH     r0,[r4,#0]
;;;328            if (pUsage) {
00041c  b12f              CBZ      r7,|L1.1066|
;;;329              GUI_USAGE_AddPixel(pUsage, x, y);
00041e  68b8              LDR      r0,[r7,#8]
000420  6803              LDR      r3,[r0,#0]
000422  4651              MOV      r1,r10
000424  4638              MOV      r0,r7
000426  9a03              LDR      r2,[sp,#0xc]
000428  4798              BLX      r3
                  |L1.1066|
;;;330            }
;;;331          }
;;;332          /* Draw 2. (right) pixel */
;;;333          if (pixels &= 15) {
00042a  f005000f          AND      r0,r5,#0xf
00042e  0005              MOVS     r5,r0
000430  d00a              BEQ      |L1.1096|
;;;334            *(pDest + 1) = *(pTrans + pixels);
000432  f8380015          LDRH     r0,[r8,r5,LSL #1]
000436  8060              STRH     r0,[r4,#2]
;;;335            if (pUsage) {
000438  b137              CBZ      r7,|L1.1096|
;;;336              GUI_USAGE_AddPixel(pUsage, x + 1, y);
00043a  68b8              LDR      r0,[r7,#8]
00043c  6803              LDR      r3,[r0,#0]
00043e  f10a0101          ADD      r1,r10,#1
000442  4638              MOV      r0,r7
000444  9a03              LDR      r2,[sp,#0xc]
000446  4798              BLX      r3
                  |L1.1096|
;;;337            }
;;;338          }
;;;339          pDest += 2;
000448  f1040404          ADD      r4,r4,#4
;;;340          x += 2;
00044c  f10a0a02          ADD      r10,r10,#2
;;;341          xsize -= 2;
000450  f1a60602          SUB      r6,r6,#2
;;;342          pixels = *++p;
000454  e000              B        |L1.1112|
                  |L1.1110|
000456  e015              B        |L1.1156|
                  |L1.1112|
000458  f1090001          ADD      r0,r9,#1
00045c  4681              MOV      r9,r0
00045e  7805              LDRB     r5,[r0,#0]
                  |L1.1120|
000460  2e02              CMP      r6,#2                 ;324
000462  dad3              BGE      |L1.1036|
;;;343        }
;;;344        /* Draw incomplete bytes to the right of center area */
;;;345        if (xsize) {
000464  b16e              CBZ      r6,|L1.1154|
;;;346          if (pixels >>= 4) {
000466  ea4f1025          ASR      r0,r5,#4
00046a  0005              MOVS     r5,r0
00046c  d009              BEQ      |L1.1154|
;;;347            *pDest = *(pTrans + pixels);
00046e  f8380015          LDRH     r0,[r8,r5,LSL #1]
000472  8020              STRH     r0,[r4,#0]
;;;348            if (pUsage) {
000474  b12f              CBZ      r7,|L1.1154|
;;;349              GUI_USAGE_AddPixel(pUsage, x, y);
000476  68b8              LDR      r0,[r7,#8]
000478  6803              LDR      r3,[r0,#0]
00047a  4651              MOV      r1,r10
00047c  4638              MOV      r0,r7
00047e  9a03              LDR      r2,[sp,#0xc]
000480  4798              BLX      r3
                  |L1.1154|
;;;350            }
;;;351          }
;;;352        }
;;;353        break;
000482  e027              B        |L1.1236|
                  |L1.1156|
;;;354      case LCD_DRAWMODE_XOR:;
;;;355      PixelLoopXor:
000484  bf00              NOP      
                  |L1.1158|
;;;356        if (PixelCnt > xsize)
000486  9800              LDR      r0,[sp,#0]
000488  42b0              CMP      r0,r6
00048a  dd01              BLE      |L1.1168|
;;;357          PixelCnt = xsize;
00048c  b2f0              UXTB     r0,r6
00048e  9000              STR      r0,[sp,#0]
                  |L1.1168|
;;;358        xsize -= PixelCnt;
000490  9800              LDR      r0,[sp,#0]
000492  eba60600          SUB      r6,r6,r0
;;;359        do {
000496  bf00              NOP      
                  |L1.1176|
;;;360          if ((pixels & 0xc0)) {
000498  f0150fc0          TST      r5,#0xc0
00049c  d003              BEQ      |L1.1190|
;;;361            *pDest ^= 255;
00049e  8820              LDRH     r0,[r4,#0]
0004a0  f08000ff          EOR      r0,r0,#0xff
0004a4  8020              STRH     r0,[r4,#0]
                  |L1.1190|
;;;362          }
;;;363          pDest++;
0004a6  f1040402          ADD      r4,r4,#2
;;;364          pixels <<= 4;
0004aa  ea4f7005          LSL      r0,r5,#28
0004ae  ea4f6510          LSR      r5,r0,#24
;;;365        } while (--PixelCnt);
0004b2  9800              LDR      r0,[sp,#0]
0004b4  f1a00001          SUB      r0,r0,#1
0004b8  f01000ff          ANDS     r0,r0,#0xff
0004bc  9000              STR      r0,[sp,#0]
0004be  d1eb              BNE      |L1.1176|
;;;366        if (xsize) {
0004c0  b13e              CBZ      r6,|L1.1234|
;;;367          PixelCnt = 2;
0004c2  f04f0002          MOV      r0,#2
0004c6  9000              STR      r0,[sp,#0]
;;;368          pixels = *(++p);
0004c8  f1090001          ADD      r0,r9,#1
0004cc  4681              MOV      r9,r0
0004ce  7805              LDRB     r5,[r0,#0]
;;;369          goto PixelLoopXor;
0004d0  e7d9              B        |L1.1158|
                  |L1.1234|
;;;370        }
;;;371        break;
0004d2  bf00              NOP      
                  |L1.1236|
0004d4  bf00              NOP                            ;305
;;;372      }
;;;373    }
0004d6  b005              ADD      sp,sp,#0x14
0004d8  e8bd8ff0          POP      {r4-r11,pc}
;;;374    
                          ENDP

                  _DrawBitLine8BPP PROC
;;;378    */
;;;379    static void _DrawBitLine8BPP(GUI_USAGE* pUsage, int x, int y, const U8 GUI_UNI_PTR * pSrc, int xsize,
0004dc  e92d47f0          PUSH     {r4-r10,lr}
;;;380                                 const LCD_PIXELINDEX* pTrans, PIXELINDEX* pDest) {
0004e0  4606              MOV      r6,r0
0004e2  460f              MOV      r7,r1
0004e4  4692              MOV      r10,r2
0004e6  461c              MOV      r4,r3
0004e8  e9dd8908          LDRD     r8,r9,[sp,#0x20]
0004ec  9d0a              LDR      r5,[sp,#0x28]
;;;381      switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
0004ee  48fd              LDR      r0,|L1.2276|
0004f0  7b00              LDRB     r0,[r0,#0xc]  ; GUI_Context
0004f2  f0100003          ANDS     r0,r0,#3
0004f6  d002              BEQ      |L1.1278|
0004f8  2802              CMP      r0,#2
0004fa  d129              BNE      |L1.1360|
0004fc  e00e              B        |L1.1308|
                  |L1.1278|
;;;382      case 0:    /* Write mode */
;;;383        do {
0004fe  bf00              NOP      
                  |L1.1280|
;;;384          *pDest = *(pTrans + *pSrc);
000500  7820              LDRB     r0,[r4,#0]
000502  f8390010          LDRH     r0,[r9,r0,LSL #1]
000506  8028              STRH     r0,[r5,#0]
;;;385          pDest++;
000508  f1050502          ADD      r5,r5,#2
;;;386          pSrc++;
00050c  f1040401          ADD      r4,r4,#1
;;;387        } while (--xsize);
000510  f1a80001          SUB      r0,r8,#1
000514  ea5f0800          MOVS     r8,r0
000518  d1f2              BNE      |L1.1280|
;;;388        break;
00051a  e019              B        |L1.1360|
                  |L1.1308|
;;;389      case LCD_DRAWMODE_TRANS:
;;;390        do {
00051c  bf00              NOP      
                  |L1.1310|
;;;391          if (*pSrc) {
00051e  7820              LDRB     r0,[r4,#0]
000520  b150              CBZ      r0,|L1.1336|
;;;392            *pDest = *(pTrans + *pSrc);
000522  7820              LDRB     r0,[r4,#0]
000524  f8390010          LDRH     r0,[r9,r0,LSL #1]
000528  8028              STRH     r0,[r5,#0]
;;;393            if (pUsage) {
00052a  b12e              CBZ      r6,|L1.1336|
;;;394              GUI_USAGE_AddPixel(pUsage, x, y);
00052c  68b0              LDR      r0,[r6,#8]
00052e  4652              MOV      r2,r10
000530  4639              MOV      r1,r7
000532  6803              LDR      r3,[r0,#0]
000534  4630              MOV      r0,r6
000536  4798              BLX      r3
                  |L1.1336|
;;;395            }
;;;396          }
;;;397          x++;
000538  f1070701          ADD      r7,r7,#1
;;;398          pDest++;
00053c  f1050502          ADD      r5,r5,#2
;;;399          pSrc++;
000540  f1040401          ADD      r4,r4,#1
;;;400        } while (--xsize);
000544  f1a80001          SUB      r0,r8,#1
000548  ea5f0800          MOVS     r8,r0
00054c  d1e7              BNE      |L1.1310|
;;;401        break;
00054e  bf00              NOP      
                  |L1.1360|
000550  bf00              NOP                            ;388
;;;402      }
;;;403    }
000552  e8bd87f0          POP      {r4-r10,pc}
;;;404    
                          ENDP

                  _DrawBitLine8BPP_DDB PROC
;;;420    */
;;;421    static void _DrawBitLine8BPP_DDB(GUI_USAGE* pUsage, int x, int y, const U8 GUI_UNI_PTR * pSrc, int xsize, PIXELINDEX* pDest) {
000556  e92d47f0          PUSH     {r4-r10,lr}
00055a  4605              MOV      r5,r0
00055c  460f              MOV      r7,r1
00055e  4691              MOV      r9,r2
000560  461c              MOV      r4,r3
000562  e9dd8608          LDRD     r8,r6,[sp,#0x20]
;;;422      switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
000566  48df              LDR      r0,|L1.2276|
000568  7b00              LDRB     r0,[r0,#0xc]  ; GUI_Context
00056a  f0100003          ANDS     r0,r0,#3
00056e  d002              BEQ      |L1.1398|
000570  2802              CMP      r0,#2
000572  d11e              BNE      |L1.1458|
000574  e005              B        |L1.1410|
                  |L1.1398|
;;;423      case 0:    /* Write mode */
;;;424        #if GUI_UNI_PTR_USED
;;;425          _Memcopy(pDest, pSrc, xsize);
;;;426        #else
;;;427          memcpy(pDest, pSrc, xsize);
000576  4642              MOV      r2,r8
000578  4621              MOV      r1,r4
00057a  4630              MOV      r0,r6
00057c  f7fffffe          BL       __aeabi_memcpy
;;;428        #endif
;;;429        break;
000580  e017              B        |L1.1458|
                  |L1.1410|
;;;430      case LCD_DRAWMODE_TRANS:
;;;431        do {
000582  bf00              NOP      
                  |L1.1412|
;;;432          if (*pSrc) {
000584  7820              LDRB     r0,[r4,#0]
000586  b140              CBZ      r0,|L1.1434|
;;;433            *pDest = *pSrc;
000588  7820              LDRB     r0,[r4,#0]
00058a  8030              STRH     r0,[r6,#0]
;;;434            if (pUsage) {
00058c  b12d              CBZ      r5,|L1.1434|
;;;435              GUI_USAGE_AddPixel(pUsage, x, y);
00058e  68a8              LDR      r0,[r5,#8]
000590  464a              MOV      r2,r9
000592  4639              MOV      r1,r7
000594  6803              LDR      r3,[r0,#0]
000596  4628              MOV      r0,r5
000598  4798              BLX      r3
                  |L1.1434|
;;;436            }
;;;437          }
;;;438          x++;
00059a  f1070701          ADD      r7,r7,#1
;;;439          pDest++;
00059e  f1060602          ADD      r6,r6,#2
;;;440          pSrc++;
0005a2  f1040401          ADD      r4,r4,#1
;;;441        } while (--xsize);
0005a6  f1a80001          SUB      r0,r8,#1
0005aa  ea5f0800          MOVS     r8,r0
0005ae  d1e9              BNE      |L1.1412|
;;;442        break;
0005b0  bf00              NOP      
                  |L1.1458|
0005b2  bf00              NOP                            ;429
;;;443      }
;;;444    }
0005b4  e8bd87f0          POP      {r4-r10,pc}
;;;445    
                          ENDP

                  _DrawBitmap PROC
;;;449    */
;;;450    static void _DrawBitmap(int x0, int y0, int xsize, int ysize,
0005b8  e92d4fff          PUSH     {r0-r11,lr}
;;;451                            int BitsPerPixel, int BytesPerLine,
;;;452                            const U8 GUI_UNI_PTR * pData, int Diff, const LCD_PIXELINDEX* pTrans)
;;;453    {
0005bc  b089              SUB      sp,sp,#0x24
0005be  460e              MOV      r6,r1
0005c0  4617              MOV      r7,r2
0005c2  4699              MOV      r9,r3
0005c4  e9ddab18          LDRD     r10,r11,[sp,#0x60]
0005c8  f8dd8068          LDR      r8,[sp,#0x68]
;;;454      int i;
;;;455      GUI_MEMDEV* pDev   = GUI_MEMDEV_H2P(GUI_Context.hDevData);
0005cc  49c5              LDR      r1,|L1.2276|
0005ce  f9b1004c          LDRSH    r0,[r1,#0x4c]  ; GUI_Context
0005d2  f7fffffe          BL       GUI_ALLOC_h2p
0005d6  9008              STR      r0,[sp,#0x20]
;;;456      GUI_USAGE*  pUsage = (pDev->hUsage) ? GUI_USAGE_H2P(pDev->hUsage) : 0;
0005d8  9808              LDR      r0,[sp,#0x20]
0005da  8b00              LDRH     r0,[r0,#0x18]
0005dc  b128              CBZ      r0,|L1.1514|
0005de  9908              LDR      r1,[sp,#0x20]
0005e0  f9b10018          LDRSH    r0,[r1,#0x18]
0005e4  f7fffffe          BL       GUI_ALLOC_h2p
0005e8  e001              B        |L1.1518|
                  |L1.1514|
0005ea  f04f0000          MOV      r0,#0
                  |L1.1518|
0005ee  9007              STR      r0,[sp,#0x1c]
;;;457      unsigned    BytesPerLineDest;
;;;458      PIXELINDEX* pDest;
;;;459      BytesPerLineDest = pDev->BytesPerLine;
0005f0  9808              LDR      r0,[sp,#0x20]
0005f2  68c0              LDR      r0,[r0,#0xc]
0005f4  9006              STR      r0,[sp,#0x18]
;;;460      x0 += Diff;
0005f6  9809              LDR      r0,[sp,#0x24]
0005f8  4458              ADD      r0,r0,r11
0005fa  9009              STR      r0,[sp,#0x24]
;;;461      /* Mark all affected pixels dirty unless transparency is set */
;;;462      if (pUsage) {
0005fc  9807              LDR      r0,[sp,#0x1c]
0005fe  b160              CBZ      r0,|L1.1562|
;;;463        if ((GUI_Context.DrawMode & LCD_DRAWMODE_TRANS) == 0) {
000600  48b8              LDR      r0,|L1.2276|
000602  7b00              LDRB     r0,[r0,#0xc]  ; GUI_Context
000604  f0100f02          TST      r0,#2
000608  d107              BNE      |L1.1562|
;;;464          GUI_USAGE_AddRect(pUsage, x0, y0 , xsize, ysize);
00060a  463b              MOV      r3,r7
00060c  4632              MOV      r2,r6
00060e  f8cd9000          STR      r9,[sp,#0]
000612  9909              LDR      r1,[sp,#0x24]
000614  9807              LDR      r0,[sp,#0x1c]
000616  f7fffffe          BL       GUI_USAGE_AddRect
                  |L1.1562|
;;;465        }
;;;466      }
;;;467      pDest = _XY2PTR(x0, y0);
00061a  4631              MOV      r1,r6
00061c  9809              LDR      r0,[sp,#0x24]
00061e  f7fffffe          BL       _XY2PTR
000622  4605              MOV      r5,r0
;;;468    #if BITSPERPIXEL == 16
;;;469      /* handle 16 bpp bitmaps in high color modes, but only without palette */
;;;470      if (BitsPerPixel == 16) {
000624  9816              LDR      r0,[sp,#0x58]
000626  2810              CMP      r0,#0x10
000628  d115              BNE      |L1.1622|
;;;471        for (i = 0; i < ysize; i++) {
00062a  f04f0400          MOV      r4,#0
00062e  e00d              B        |L1.1612|
                  |L1.1584|
;;;472          _DrawBitLine16BPP_DDB(pUsage, x0, i + y0, (const U16*)pData, xsize, pDest);
000630  19a2              ADDS     r2,r4,r6
000632  4653              MOV      r3,r10
000634  e9cd7500          STRD     r7,r5,[sp,#0]
000638  9909              LDR      r1,[sp,#0x24]
00063a  9807              LDR      r0,[sp,#0x1c]
00063c  f7fffffe          BL       _DrawBitLine16BPP_DDB
;;;473          pData += BytesPerLine;
000640  9817              LDR      r0,[sp,#0x5c]
000642  4482              ADD      r10,r10,r0
;;;474          pDest = (PIXELINDEX*)((U8*)pDest + BytesPerLineDest); 
000644  9806              LDR      r0,[sp,#0x18]
000646  4405              ADD      r5,r5,r0
000648  f1040401          ADD      r4,r4,#1              ;471
                  |L1.1612|
00064c  454c              CMP      r4,r9                 ;471
00064e  dbef              BLT      |L1.1584|
                  |L1.1616|
;;;475        }
;;;476        return;
;;;477      }
;;;478    #endif
;;;479      /* Handle 8 bpp bitmaps seperately as we have different routine bitmaps with or without palette */
;;;480      if (BitsPerPixel == 8) {
;;;481        for (i = 0; i < ysize; i++) {
;;;482          if (pTrans) {
;;;483            _DrawBitLine8BPP(pUsage, x0, i + y0, pData, xsize, pTrans, pDest);
;;;484          } else {
;;;485            _DrawBitLine8BPP_DDB(pUsage, x0, i + y0, pData, xsize, pDest);
;;;486          }
;;;487          pData += BytesPerLine;
;;;488          pDest = (PIXELINDEX*)((U8*)pDest + BytesPerLineDest); 
;;;489        }
;;;490        return;
;;;491      }
;;;492      /* Use aID for bitmaps without palette */
;;;493      if (!pTrans) {
;;;494        pTrans = aID;
;;;495      }
;;;496      for (i = 0; i < ysize; i++) {
;;;497        switch (BitsPerPixel) {
;;;498        case 1:
;;;499          _DrawBitLine1BPP(pUsage, x0, i + y0, pData, Diff, xsize, pTrans, pDev, pDest);
;;;500          break;
;;;501        case 2:
;;;502          _DrawBitLine2BPP(pUsage, x0, i + y0, pData, Diff, xsize, pTrans, pDest);
;;;503          break;
;;;504        case 4:
;;;505          _DrawBitLine4BPP(pUsage, x0, i + y0, pData, Diff, xsize, pTrans, pDest);
;;;506          break;
;;;507        }
;;;508        pData += BytesPerLine;
;;;509        pDest = (PIXELINDEX*)((U8*)pDest + BytesPerLineDest); 
;;;510      }
;;;511    }
000650  b00d              ADD      sp,sp,#0x34
000652  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.1622|
000656  9816              LDR      r0,[sp,#0x58]         ;480
000658  2808              CMP      r0,#8                 ;480
00065a  d120              BNE      |L1.1694|
00065c  f04f0400          MOV      r4,#0                 ;481
000660  e01a              B        |L1.1688|
                  |L1.1634|
000662  f1b80f00          CMP      r8,#0                 ;482
000666  d009              BEQ      |L1.1660|
000668  19a2              ADDS     r2,r4,r6              ;483
00066a  4653              MOV      r3,r10                ;483
00066c  e9cd7800          STRD     r7,r8,[sp,#0]         ;483
000670  9502              STR      r5,[sp,#8]            ;483
000672  9909              LDR      r1,[sp,#0x24]         ;483
000674  9807              LDR      r0,[sp,#0x1c]         ;483
000676  f7fffffe          BL       _DrawBitLine8BPP
00067a  e007              B        |L1.1676|
                  |L1.1660|
00067c  19a2              ADDS     r2,r4,r6              ;485
00067e  4653              MOV      r3,r10                ;485
000680  e9cd7500          STRD     r7,r5,[sp,#0]         ;485
000684  9909              LDR      r1,[sp,#0x24]         ;485
000686  9807              LDR      r0,[sp,#0x1c]         ;485
000688  f7fffffe          BL       _DrawBitLine8BPP_DDB
                  |L1.1676|
00068c  9817              LDR      r0,[sp,#0x5c]         ;487
00068e  4482              ADD      r10,r10,r0            ;487
000690  9806              LDR      r0,[sp,#0x18]         ;488
000692  4405              ADD      r5,r5,r0              ;488
000694  f1040401          ADD      r4,r4,#1              ;481
                  |L1.1688|
000698  454c              CMP      r4,r9                 ;481
00069a  dbe2              BLT      |L1.1634|
00069c  e7d8              B        |L1.1616|
                  |L1.1694|
00069e  f1b80f00          CMP      r8,#0                 ;493
0006a2  d101              BNE      |L1.1704|
0006a4  f8df8240          LDR      r8,|L1.2280|
                  |L1.1704|
0006a8  f04f0400          MOV      r4,#0                 ;496
0006ac  e031              B        |L1.1810|
                  |L1.1710|
0006ae  9816              LDR      r0,[sp,#0x58]         ;497
0006b0  2801              CMP      r0,#1                 ;497
0006b2  d004              BEQ      |L1.1726|
0006b4  2802              CMP      r0,#2                 ;497
0006b6  d00f              BEQ      |L1.1752|
0006b8  2804              CMP      r0,#4                 ;497
0006ba  d123              BNE      |L1.1796|
0006bc  e017              B        |L1.1774|
                  |L1.1726|
0006be  9808              LDR      r0,[sp,#0x20]         ;499
0006c0  19a2              ADDS     r2,r4,r6              ;499
0006c2  4653              MOV      r3,r10                ;499
0006c4  e9cdb700          STRD     r11,r7,[sp,#0]        ;499
0006c8  e9cd8002          STRD     r8,r0,[sp,#8]         ;499
0006cc  9504              STR      r5,[sp,#0x10]         ;499
0006ce  9909              LDR      r1,[sp,#0x24]         ;499
0006d0  9807              LDR      r0,[sp,#0x1c]         ;499
0006d2  f7fffffe          BL       _DrawBitLine1BPP
0006d6  e015              B        |L1.1796|
                  |L1.1752|
0006d8  19a2              ADDS     r2,r4,r6              ;502
0006da  4653              MOV      r3,r10                ;502
0006dc  e9cdb700          STRD     r11,r7,[sp,#0]        ;502
0006e0  e9cd8502          STRD     r8,r5,[sp,#8]         ;502
0006e4  9909              LDR      r1,[sp,#0x24]         ;502
0006e6  9807              LDR      r0,[sp,#0x1c]         ;502
0006e8  f7fffffe          BL       _DrawBitLine2BPP
0006ec  e00a              B        |L1.1796|
                  |L1.1774|
0006ee  19a2              ADDS     r2,r4,r6              ;505
0006f0  4653              MOV      r3,r10                ;505
0006f2  e9cdb700          STRD     r11,r7,[sp,#0]        ;505
0006f6  e9cd8502          STRD     r8,r5,[sp,#8]         ;505
0006fa  9909              LDR      r1,[sp,#0x24]         ;505
0006fc  9807              LDR      r0,[sp,#0x1c]         ;505
0006fe  f7fffffe          BL       _DrawBitLine4BPP
000702  bf00              NOP                            ;506
                  |L1.1796|
000704  bf00              NOP                            ;500
000706  9817              LDR      r0,[sp,#0x5c]         ;508
000708  4482              ADD      r10,r10,r0            ;508
00070a  9806              LDR      r0,[sp,#0x18]         ;509
00070c  4405              ADD      r5,r5,r0              ;509
00070e  f1040401          ADD      r4,r4,#1              ;496
                  |L1.1810|
000712  454c              CMP      r4,r9                 ;496
000714  dbcb              BLT      |L1.1710|
000716  bf00              NOP      
000718  e79a              B        |L1.1616|
;;;512    
                          ENDP

                  _FillRect PROC
;;;516    */
;;;517    static void _FillRect(int x0, int y0, int x1, int y1) {
00071a  e92d4ffe          PUSH     {r1-r11,lr}
00071e  4606              MOV      r6,r0
000720  460c              MOV      r4,r1
000722  4693              MOV      r11,r2
000724  461f              MOV      r7,r3
;;;518      unsigned BytesPerLine;
;;;519      int Len;
;;;520      GUI_MEMDEV* pDev   = GUI_MEMDEV_H2P(GUI_Context.hDevData);
000726  496f              LDR      r1,|L1.2276|
000728  f9b1004c          LDRSH    r0,[r1,#0x4c]  ; GUI_Context
00072c  f7fffffe          BL       GUI_ALLOC_h2p
000730  4605              MOV      r5,r0
;;;521      PIXELINDEX* pData  = _XY2PTR(x0, y0);
000732  4621              MOV      r1,r4
000734  4630              MOV      r0,r6
000736  f7fffffe          BL       _XY2PTR
00073a  4681              MOV      r9,r0
;;;522      BytesPerLine = pDev->BytesPerLine;
00073c  68e8              LDR      r0,[r5,#0xc]
00073e  9002              STR      r0,[sp,#8]
;;;523      Len = x1 - x0 + 1;
000740  ebab0006          SUB      r0,r11,r6
000744  f1000801          ADD      r8,r0,#1
;;;524      /* Mark rectangle as modified */
;;;525      if (pDev->hUsage) {
000748  8b28              LDRH     r0,[r5,#0x18]
00074a  b168              CBZ      r0,|L1.1896|
;;;526        GUI_USAGE_AddRect(GUI_USAGE_H2P(pDev->hUsage), x0, y0, Len, y1 - y0 + 1);
00074c  f9b50018          LDRSH    r0,[r5,#0x18]
000750  f7fffffe          BL       GUI_ALLOC_h2p
000754  4682              MOV      r10,r0
000756  1b38              SUBS     r0,r7,r4
000758  1c40              ADDS     r0,r0,#1
00075a  4643              MOV      r3,r8
00075c  4622              MOV      r2,r4
00075e  4631              MOV      r1,r6
000760  9000              STR      r0,[sp,#0]
000762  4650              MOV      r0,r10
000764  f7fffffe          BL       GUI_USAGE_AddRect
                  |L1.1896|
;;;527      }
;;;528      /* Do the drawing */
;;;529      for (; y0 <= y1; y0++) {
000768  e024              B        |L1.1972|
                  |L1.1898|
;;;530        if (GUI_Context.DrawMode & LCD_DRAWMODE_XOR) {
00076a  485e              LDR      r0,|L1.2276|
00076c  7b00              LDRB     r0,[r0,#0xc]  ; GUI_Context
00076e  f0100f01          TST      r0,#1
000772  d015              BEQ      |L1.1952|
;;;531          int RemPixels;
;;;532          PIXELINDEX* pDest;
;;;533          PIXELINDEX IndexMask;
;;;534          RemPixels = Len;
000774  f8cd8004          STR      r8,[sp,#4]
;;;535          pDest  = pData;
000778  46ca              MOV      r10,r9
;;;536          IndexMask = pDev->pfGetIndexMask();
00077a  6a68              LDR      r0,[r5,#0x24]
00077c  4780              BLX      r0
00077e  b280              UXTH     r0,r0
000780  9000              STR      r0,[sp,#0]
;;;537          do {
000782  bf00              NOP      
                  |L1.1924|
;;;538            *pDest = *pDest ^ IndexMask;
000784  f8ba0000          LDRH     r0,[r10,#0]
000788  9900              LDR      r1,[sp,#0]
00078a  ea800001          EOR      r0,r0,r1
00078e  f8aa0000          STRH     r0,[r10,#0]
;;;539            pDest++;
000792  f10a0a02          ADD      r10,r10,#2
;;;540          } while (--RemPixels);
000796  9801              LDR      r0,[sp,#4]
000798  1e40              SUBS     r0,r0,#1
00079a  9001              STR      r0,[sp,#4]
00079c  d1f2              BNE      |L1.1924|
;;;541        } else {  /* Fill */
00079e  e005              B        |L1.1964|
                  |L1.1952|
;;;542          #if BITSPERPIXEL == 8
;;;543            GUI_MEMSET(pData, LCD_COLORINDEX, Len);
;;;544          #elif BITSPERPIXEL == 16
;;;545            GUI__memset16(pData, LCD_COLORINDEX, Len);
0007a0  4850              LDR      r0,|L1.2276|
0007a2  8841              LDRH     r1,[r0,#2]  ; GUI_Context
0007a4  4642              MOV      r2,r8
0007a6  4648              MOV      r0,r9
0007a8  f7fffffe          BL       GUI__memset16
                  |L1.1964|
;;;546          #else
;;;547            #error Unsupported
;;;548          #endif
;;;549        }
;;;550        pData = (PIXELINDEX*)((U8*)pData + BytesPerLine); 
0007ac  9802              LDR      r0,[sp,#8]
0007ae  4481              ADD      r9,r9,r0
0007b0  f1040401          ADD      r4,r4,#1              ;529
                  |L1.1972|
0007b4  42bc              CMP      r4,r7                 ;529
0007b6  ddd8              BLE      |L1.1898|
;;;551      }
;;;552    }
0007b8  e8bd8ffe          POP      {r1-r11,pc}
;;;553    
                          ENDP

                  _DrawHLine PROC
;;;557    */
;;;558    static void _DrawHLine(int x0, int y, int x1) {
0007bc  b570              PUSH     {r4-r6,lr}
0007be  4605              MOV      r5,r0
0007c0  460c              MOV      r4,r1
0007c2  4616              MOV      r6,r2
;;;559      _FillRect(x0, y, x1, y);
0007c4  4623              MOV      r3,r4
0007c6  4632              MOV      r2,r6
0007c8  4621              MOV      r1,r4
0007ca  4628              MOV      r0,r5
0007cc  f7fffffe          BL       _FillRect
;;;560    }
0007d0  bd70              POP      {r4-r6,pc}
;;;561    
                          ENDP

                  _DrawVLine PROC
;;;565    */
;;;566    static void _DrawVLine(int x , int y0, int y1) {
0007d2  e92d4ff8          PUSH     {r3-r11,lr}
0007d6  4683              MOV      r11,r0
0007d8  460d              MOV      r5,r1
0007da  4616              MOV      r6,r2
;;;567      GUI_MEMDEV* pDev   = GUI_MEMDEV_H2P(GUI_Context.hDevData);
0007dc  4941              LDR      r1,|L1.2276|
0007de  f9b1004c          LDRSH    r0,[r1,#0x4c]  ; GUI_Context
0007e2  f7fffffe          BL       GUI_ALLOC_h2p
0007e6  4607              MOV      r7,r0
;;;568      GUI_USAGE_h hUsage = pDev->hUsage; 
0007e8  f9b78018          LDRSH    r8,[r7,#0x18]
;;;569      GUI_USAGE*  pUsage = hUsage ? GUI_USAGE_H2P(hUsage) : NULL;
0007ec  f1b80f00          CMP      r8,#0
0007f0  d003              BEQ      |L1.2042|
0007f2  4640              MOV      r0,r8
0007f4  f7fffffe          BL       GUI_ALLOC_h2p
0007f8  e001              B        |L1.2046|
                  |L1.2042|
0007fa  f04f0000          MOV      r0,#0
                  |L1.2046|
0007fe  4681              MOV      r9,r0
;;;570      PIXELINDEX* pData  = _XY2PTR(x, y0);
000800  4629              MOV      r1,r5
000802  4658              MOV      r0,r11
000804  f7fffffe          BL       _XY2PTR
000808  4604              MOV      r4,r0
;;;571      unsigned BytesPerLine = pDev->BytesPerLine;
00080a  f8d7a00c          LDR      r10,[r7,#0xc]
;;;572    
;;;573      if (GUI_Context.DrawMode & LCD_DRAWMODE_XOR) {
00080e  4835              LDR      r0,|L1.2276|
000810  7b00              LDRB     r0,[r0,#0xc]  ; GUI_Context
000812  f0100f01          TST      r0,#1
000816  d01b              BEQ      |L1.2128|
;;;574        PIXELINDEX IndexMask;
;;;575        IndexMask = pDev->pfGetIndexMask();
000818  6a78              LDR      r0,[r7,#0x24]
00081a  4780              BLX      r0
00081c  b280              UXTH     r0,r0
00081e  9000              STR      r0,[sp,#0]
;;;576        do {
000820  bf00              NOP      
                  |L1.2082|
;;;577          if (hUsage) {
000822  f1b80f00          CMP      r8,#0
000826  d006              BEQ      |L1.2102|
;;;578            GUI_USAGE_AddPixel(pUsage, x, y0);
000828  f8d90008          LDR      r0,[r9,#8]
00082c  462a              MOV      r2,r5
00082e  4659              MOV      r1,r11
000830  6803              LDR      r3,[r0,#0]
000832  4648              MOV      r0,r9
000834  4798              BLX      r3
                  |L1.2102|
;;;579          }
;;;580          *pData = *pData ^ IndexMask;
000836  8820              LDRH     r0,[r4,#0]
000838  9900              LDR      r1,[sp,#0]
00083a  ea800001          EOR      r0,r0,r1
00083e  8020              STRH     r0,[r4,#0]
;;;581          pData = (PIXELINDEX*)((U8*)pData + pDev->BytesPerLine); /* Same as "pData += pDev->BytesPerLine >> 1;", Just more efficient */
000840  68f8              LDR      r0,[r7,#0xc]
000842  4404              ADD      r4,r4,r0
;;;582        } while (++y0 <= y1);
000844  f1050001          ADD      r0,r5,#1
000848  4605              MOV      r5,r0
00084a  42b0              CMP      r0,r6
00084c  dde9              BLE      |L1.2082|
;;;583      } else {
00084e  e022              B        |L1.2198|
                  |L1.2128|
;;;584        if (hUsage) {
000850  f1b80f00          CMP      r8,#0
000854  d011              BEQ      |L1.2170|
;;;585          do {
000856  bf00              NOP      
                  |L1.2136|
;;;586            GUI_USAGE_AddPixel(pUsage, x, y0);
000858  f8d90008          LDR      r0,[r9,#8]
00085c  462a              MOV      r2,r5
00085e  4659              MOV      r1,r11
000860  6803              LDR      r3,[r0,#0]
000862  4648              MOV      r0,r9
000864  4798              BLX      r3
;;;587            *pData = LCD_COLORINDEX;
000866  481f              LDR      r0,|L1.2276|
000868  8840              LDRH     r0,[r0,#2]  ; GUI_Context
00086a  8020              STRH     r0,[r4,#0]
;;;588            pData = (PIXELINDEX*)((U8*)pData + BytesPerLine); /* Same as "pData += pDev->BytesPerLine >> 1;", Just more efficient */
00086c  4454              ADD      r4,r4,r10
;;;589          } while (++y0 <= y1);
00086e  f1050001          ADD      r0,r5,#1
000872  4605              MOV      r5,r0
000874  42b0              CMP      r0,r6
000876  ddef              BLE      |L1.2136|
000878  e00d              B        |L1.2198|
                  |L1.2170|
;;;590        } else {
;;;591          unsigned NumPixels;
;;;592          NumPixels = y1 - y0 + 1;
00087a  eba60105          SUB      r1,r6,r5
00087e  f1010001          ADD      r0,r1,#1
;;;593          do {
000882  bf00              NOP      
                  |L1.2180|
;;;594            *pData = LCD_COLORINDEX;
000884  4917              LDR      r1,|L1.2276|
000886  8849              LDRH     r1,[r1,#2]  ; GUI_Context
000888  8021              STRH     r1,[r4,#0]
;;;595            pData = (PIXELINDEX*)((U8*)pData + BytesPerLine); /* Same as "pData += pDev->BytesPerLine >> 1;", Just more efficient */
00088a  4454              ADD      r4,r4,r10
;;;596          } while (--NumPixels);
00088c  f1a00101          SUB      r1,r0,#1
000890  0008              MOVS     r0,r1
000892  d1f7              BNE      |L1.2180|
;;;597        }
000894  bf00              NOP      
                  |L1.2198|
;;;598      }
;;;599    }
000896  e8bd8ff8          POP      {r3-r11,pc}
;;;600    
                          ENDP

                  _SetPixelIndex PROC
;;;604    */
;;;605    static void _SetPixelIndex(int x, int y, int Index) {
00089a  e92d5ff0          PUSH     {r4-r12,lr}
00089e  4604              MOV      r4,r0
0008a0  460d              MOV      r5,r1
0008a2  4616              MOV      r6,r2
;;;606      GUI_MEMDEV* pDev = GUI_MEMDEV_H2P(GUI_Context.hDevData);
0008a4  490f              LDR      r1,|L1.2276|
0008a6  f9b1004c          LDRSH    r0,[r1,#0x4c]  ; GUI_Context
0008aa  f7fffffe          BL       GUI_ALLOC_h2p
0008ae  4680              MOV      r8,r0
;;;607      GUI_USAGE_h hUsage = pDev->hUsage; 
0008b0  f9b87018          LDRSH    r7,[r8,#0x18]
;;;608      PIXELINDEX* pData = _XY2PTR(x, y);
0008b4  4629              MOV      r1,r5
0008b6  4620              MOV      r0,r4
0008b8  f7fffffe          BL       _XY2PTR
0008bc  4681              MOV      r9,r0
;;;609      *pData = Index;
0008be  f8a96000          STRH     r6,[r9,#0]
;;;610      if (hUsage) {
0008c2  b16f              CBZ      r7,|L1.2272|
;;;611        GUI_USAGE_AddPixel(GUI_USAGE_H2P(hUsage), x, y);
0008c4  4638              MOV      r0,r7
0008c6  f7fffffe          BL       GUI_ALLOC_h2p
0008ca  4683              MOV      r11,r0
0008cc  4638              MOV      r0,r7
0008ce  f7fffffe          BL       GUI_ALLOC_h2p
0008d2  6880              LDR      r0,[r0,#8]
0008d4  462a              MOV      r2,r5
0008d6  4621              MOV      r1,r4
0008d8  f8d0a000          LDR      r10,[r0,#0]
0008dc  4658              MOV      r0,r11
0008de  47d0              BLX      r10
                  |L1.2272|
;;;612      }
;;;613    }
0008e0  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.2276|
                          DCD      GUI_Context
                  |L1.2280|
                          DCD      aID
                          ENDP

                  _XorPixel PROC
;;;618    */
;;;619    static void _XorPixel(int x, int y) {
0008ec  e92d5ff0          PUSH     {r4-r12,lr}
0008f0  4604              MOV      r4,r0
0008f2  460d              MOV      r5,r1
;;;620      PIXELINDEX IndexMask;
;;;621      GUI_MEMDEV* pDev = GUI_MEMDEV_H2P(GUI_Context.hDevData);
0008f4  4918              LDR      r1,|L1.2392|
0008f6  f9b1004c          LDRSH    r0,[r1,#0x4c]  ; GUI_Context
0008fa  f7fffffe          BL       GUI_ALLOC_h2p
0008fe  4606              MOV      r6,r0
;;;622      GUI_USAGE_h hUsage = pDev->hUsage; 
000900  f9b67018          LDRSH    r7,[r6,#0x18]
;;;623      PIXELINDEX* pData = _XY2PTR(x, y);
000904  4629              MOV      r1,r5
000906  4620              MOV      r0,r4
000908  f7fffffe          BL       _XY2PTR
00090c  4680              MOV      r8,r0
;;;624      IndexMask = pDev->pfGetIndexMask();
00090e  6a70              LDR      r0,[r6,#0x24]
000910  4780              BLX      r0
000912  fa1ff980          UXTH     r9,r0
;;;625      *pData = *pData ^ IndexMask;
000916  f8b80000          LDRH     r0,[r8,#0]
00091a  ea800009          EOR      r0,r0,r9
00091e  f8a80000          STRH     r0,[r8,#0]
;;;626      if (hUsage) {
000922  b16f              CBZ      r7,|L1.2368|
;;;627        GUI_USAGE_AddPixel(GUI_USAGE_H2P(hUsage), x, y);
000924  4638              MOV      r0,r7
000926  f7fffffe          BL       GUI_ALLOC_h2p
00092a  4683              MOV      r11,r0
00092c  4638              MOV      r0,r7
00092e  f7fffffe          BL       GUI_ALLOC_h2p
000932  6880              LDR      r0,[r0,#8]
000934  462a              MOV      r2,r5
000936  4621              MOV      r1,r4
000938  f8d0a000          LDR      r10,[r0,#0]
00093c  4658              MOV      r0,r11
00093e  47d0              BLX      r10
                  |L1.2368|
;;;628      }
;;;629    }
000940  e8bd9ff0          POP      {r4-r12,pc}
;;;630    
                          ENDP

                  _GetPixelIndex PROC
;;;634    */
;;;635    static unsigned int _GetPixelIndex(int x, int y) {
000944  b570              PUSH     {r4-r6,lr}
000946  4604              MOV      r4,r0
000948  460d              MOV      r5,r1
;;;636      PIXELINDEX* pData = _XY2PTR(x, y);
00094a  4629              MOV      r1,r5
00094c  4620              MOV      r0,r4
00094e  f7fffffe          BL       _XY2PTR
000952  4606              MOV      r6,r0
;;;637      return *pData;
000954  8830              LDRH     r0,[r6,#0]
;;;638    }
000956  bd70              POP      {r4-r6,pc}
;;;639    
                          ENDP

                  |L1.2392|
                          DCD      GUI_Context

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  aID
000000  00000001          DCW      0x0000,0x0001
000004  00020003          DCW      0x0002,0x0003
000008  00040005          DCW      0x0004,0x0005
00000c  00060007          DCW      0x0006,0x0007
000010  00080009          DCW      0x0008,0x0009
000014  000a000b          DCW      0x000a,0x000b
000018  000c000d          DCW      0x000c,0x000d
00001c  000e000f          DCW      0x000e,0x000f
                  GUI_MEMDEV__APIList16
                          DCD      GUI_MEMDEV__Color2Index
                          DCD      GUI_MEMDEV__Index2Color
                          DCD      GUI_MEMDEV__GetIndexMask
                          DCD      _DrawBitmap
                          DCD      _DrawHLine
                          DCD      _DrawVLine
                          DCD      _FillRect
                          DCD      _GetPixelIndex
                          DCD      GUI_MEMDEV__GetRect
                          DCD      _SetPixelIndex
                          DCD      _XorPixel
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000010
