; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\guidev_1.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\guidev_1.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -I.\GUI\AntiAlias -I.\GUI\Config -I.\GUI\ConvertColor -I.\GUI\ConvertMono -I.\GUI\Core -I.\GUI\Font -I.\GUI\GUI_X -I.\GUI\JPEG -I.\GUI\LCDDriver -I.\GUI\MemDev -I.\GUI\MultiLayer -I.\GUI\Widget -I.\GUI\WM -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\INC\ST\STM32F10x -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\guidev_1.crf GUI\MemDev\GUIDEV_1.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _XY2PTR_BITOFFSET PROC
;;;70     */
;;;71     static U8* _XY2PTR_BITOFFSET(int x, int y, int* pBitOffset) {
000000  e92d47f0          PUSH     {r4-r10,lr}
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4617              MOV      r7,r2
;;;72       GUI_ALLOC_DATATYPE_U Offset;
;;;73       GUI_MEMDEV* pDev;
;;;74       U8* pData;
;;;75       pDev  = GUI_MEMDEV_H2P(GUI_Context.hDevData);
00000a  49f9              LDR      r1,|L1.1008|
00000c  f9b1004c          LDRSH    r0,[r1,#0x4c]  ; GUI_Context
000010  f7fffffe          BL       GUI_ALLOC_h2p
000014  4606              MOV      r6,r0
;;;76       pData = (U8*)(pDev + 1);
000016  f106092c          ADD      r9,r6,#0x2c
;;;77       #if GUI_DEBUG_LEVEL >= GUI_DEBUG_LEVEL_CHECK_ALL
;;;78         if ((x >= pDev->x0+pDev->XSize) | (x<pDev->x0) | (y >= pDev->y0+pDev->YSize) | (y<pDev->y0)) {
;;;79           GUI_DEBUG_ERROROUT2("_XY2PTR: parameters out of bounds", x, y);
;;;80         }
;;;81       #endif
;;;82       x -= pDev->x0;
00001a  f9b60000          LDRSH    r0,[r6,#0]
00001e  eba40400          SUB      r4,r4,r0
;;;83       y -= pDev->y0;
000022  f9b60002          LDRSH    r0,[r6,#2]
000026  eba50500          SUB      r5,r5,r0
;;;84       Offset = (GUI_ALLOC_DATATYPE_U)(y) * (GUI_ALLOC_DATATYPE_U)(pDev->BytesPerLine) + (x >> 3);
00002a  68f0              LDR      r0,[r6,#0xc]
00002c  fb00f005          MUL      r0,r0,r5
000030  eb0000e4          ADD      r0,r0,r4,ASR #3
000034  fa1ff880          UXTH     r8,r0
;;;85       if (pBitOffset) {
000038  b127              CBZ      r7,|L1.68|
;;;86         *pBitOffset = 7 - (x & 7);
00003a  f0040007          AND      r0,r4,#7
00003e  f1c00007          RSB      r0,r0,#7
000042  6038              STR      r0,[r7,#0]
                  |L1.68|
;;;87       }
;;;88       return pData + Offset;
000044  eb090008          ADD      r0,r9,r8
;;;89     }
000048  e8bd87f0          POP      {r4-r10,pc}
;;;90     
                          ENDP

                  _DrawBitLine1BPP PROC
;;;94     */
;;;95     static void _DrawBitLine1BPP(GUI_USAGE* pUsage, int x, int y, const U8 GUI_UNI_PTR * p, int Diff, unsigned int xsize,
00004c  e92d4ff8          PUSH     {r3-r11,lr}
;;;96                                  const LCD_PIXELINDEX* pTrans, GUI_MEMDEV* pDev, PIXELINDEX* pDest)
;;;97     {
000050  4682              MOV      r10,r0
000052  460f              MOV      r7,r1
000054  4693              MOV      r11,r2
000056  4698              MOV      r8,r3
000058  f8dd9034          LDR      r9,[sp,#0x34]
00005c  9c0b              LDR      r4,[sp,#0x2c]
;;;98       PIXELINDEX pixels;
;;;99       PIXELINDEX Index1;
;;;100      unsigned int PixelCnt;
;;;101      GUI_USE_PARA(pUsage);
00005e  bf00              NOP      
;;;102      PixelCnt = 8 - (Diff & 7);
000060  980a              LDR      r0,[sp,#0x28]
000062  f0000007          AND      r0,r0,#7
000066  f1c00508          RSB      r5,r0,#8
;;;103      pixels = (*p) << (Diff & 7);
00006a  f8980000          LDRB     r0,[r8,#0]
00006e  990a              LDR      r1,[sp,#0x28]
000070  f0010107          AND      r1,r1,#7
000074  fa00f001          LSL      r0,r0,r1
000078  b2c6              UXTB     r6,r0
;;;104      GUI_DEBUG_ERROROUT3_IF( x < pDev->x0, "GUIDEV.c: DrawBitLine1BPP, Act= %d, Border= %d, Clip= %d"
;;;105                        ,x,pDev->x0, GUI_Context.ClipRect.x0);
;;;106      switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
00007a  48dd              LDR      r0,|L1.1008|
00007c  7b00              LDRB     r0,[r0,#0xc]  ; GUI_Context
00007e  f0100003          ANDS     r0,r0,#3
000082  d004              BEQ      |L1.142|
000084  2801              CMP      r0,#1
000086  d054              BEQ      |L1.306|
000088  2802              CMP      r0,#2
00008a  d17a              BNE      |L1.386|
00008c  e024              B        |L1.216|
                  |L1.142|
;;;107      case 0:    /* Write mode */
;;;108        do {
00008e  bf00              NOP      
                  |L1.144|
;;;109          /* Prepare loop */
;;;110          if (PixelCnt > xsize) {
000090  42a5              CMP      r5,r4
000092  d900              BLS      |L1.150|
;;;111            PixelCnt = xsize;
000094  4625              MOV      r5,r4
                  |L1.150|
;;;112          }
;;;113          xsize -= PixelCnt;
000096  eba40405          SUB      r4,r4,r5
;;;114          /* Write as many pixels as we are allowed to and have loaded in this inner loop */
;;;115          do {
00009a  bf00              NOP      
                  |L1.156|
;;;116            (*pDev->pAPIList->pfSetPixelIndex)(x++, y, *(pTrans + ((U8)pixels >> 7)));
00009c  ea4f1ce6          ASR      r12,r6,#7
0000a0  990c              LDR      r1,[sp,#0x30]
0000a2  f831201c          LDRH     r2,[r1,r12,LSL #1]
0000a6  4638              MOV      r0,r7
0000a8  1c7f              ADDS     r7,r7,#1
0000aa  f8d91028          LDR      r1,[r9,#0x28]
0000ae  6a4b              LDR      r3,[r1,#0x24]
0000b0  4659              MOV      r1,r11
0000b2  4798              BLX      r3
;;;117            pixels <<= 1;
0000b4  ea4f6046          LSL      r0,r6,#25
0000b8  ea4f6610          LSR      r6,r0,#24
;;;118          } while (--PixelCnt);
0000bc  f1a50001          SUB      r0,r5,#1
0000c0  0005              MOVS     r5,r0
0000c2  d1eb              BNE      |L1.156|
;;;119          /* Check if an other Source byte needs to be loaded */
;;;120          if (xsize == 0) {
0000c4  b90c              CBNZ     r4,|L1.202|
                  |L1.198|
;;;121            return;
;;;122          }
;;;123          PixelCnt = 8;
;;;124          pixels = *(++p);
;;;125        } while (1);
;;;126      case LCD_DRAWMODE_TRANS:
;;;127        Index1 = *(pTrans + 1);
;;;128        do {
;;;129          /* Prepare loop */
;;;130          if (PixelCnt > xsize) {
;;;131            PixelCnt = xsize;
;;;132          }
;;;133          xsize -= PixelCnt;
;;;134          while (pixels) {
;;;135            if ((pixels & 0x80)) {
;;;136              (*pDev->pAPIList->pfSetPixelIndex)(x, y, Index1);
;;;137            }
;;;138            x++;
;;;139            pixels <<= 1;
;;;140            if (--PixelCnt == 0) {
;;;141              break;
;;;142            }
;;;143          }
;;;144          /* Check if an other Source byte needs to be loaded */
;;;145          if (xsize == 0) {
;;;146            return;
;;;147          }
;;;148          x += PixelCnt;
;;;149          PixelCnt = 8;
;;;150          pixels = *(++p);
;;;151        } while (1);
;;;152      case LCD_DRAWMODE_XOR:;
;;;153      PixelLoopXor:
;;;154        if (PixelCnt > xsize) {
;;;155          PixelCnt = xsize;
;;;156        }
;;;157        xsize -= PixelCnt;
;;;158        do {
;;;159          if ((pixels & 0x80)) {
;;;160            (*pDev->pAPIList->pfXorPixel)(x, y);
;;;161          }
;;;162          x++;
;;;163          pDest++;
;;;164          pixels <<= 1;
;;;165        } while (--PixelCnt);
;;;166        if (xsize) {
;;;167          PixelCnt = 8;
;;;168          pixels = *(++p);
;;;169          goto PixelLoopXor;
;;;170        }
;;;171        break;
;;;172      }
;;;173    }
0000c6  e8bd8ff8          POP      {r3-r11,pc}
                  |L1.202|
0000ca  f04f0508          MOV      r5,#8                 ;123
0000ce  f1080001          ADD      r0,r8,#1              ;124
0000d2  4680              MOV      r8,r0                 ;124
0000d4  7806              LDRB     r6,[r0,#0]            ;124
0000d6  e7db              B        |L1.144|
                  |L1.216|
0000d8  980c              LDR      r0,[sp,#0x30]         ;127
0000da  8840              LDRH     r0,[r0,#2]            ;127
0000dc  b2c0              UXTB     r0,r0                 ;127
0000de  9000              STR      r0,[sp,#0]            ;127
0000e0  bf00              NOP                            ;128
                  |L1.226|
0000e2  42a5              CMP      r5,r4                 ;130
0000e4  d900              BLS      |L1.232|
0000e6  4625              MOV      r5,r4                 ;131
                  |L1.232|
0000e8  eba40405          SUB      r4,r4,r5              ;133
0000ec  e014              B        |L1.280|
                  |L1.238|
0000ee  f0160f80          TST      r6,#0x80              ;135
0000f2  d006              BEQ      |L1.258|
0000f4  f8d90028          LDR      r0,[r9,#0x28]         ;136
0000f8  6a43              LDR      r3,[r0,#0x24]         ;136
0000fa  4659              MOV      r1,r11                ;136
0000fc  4638              MOV      r0,r7                 ;136
0000fe  9a00              LDR      r2,[sp,#0]            ;136
000100  4798              BLX      r3                    ;136
                  |L1.258|
000102  f1070701          ADD      r7,r7,#1              ;138
000106  ea4f6046          LSL      r0,r6,#25             ;139
00010a  ea4f6610          LSR      r6,r0,#24             ;139
00010e  f1a50001          SUB      r0,r5,#1              ;140
000112  0005              MOVS     r5,r0                 ;140
000114  d100              BNE      |L1.280|
000116  e001              B        |L1.284|
                  |L1.280|
000118  2e00              CMP      r6,#0                 ;134
00011a  d1e8              BNE      |L1.238|
                  |L1.284|
00011c  bf00              NOP                            ;141
00011e  b904              CBNZ     r4,|L1.290|
000120  e7d1              B        |L1.198|
                  |L1.290|
000122  442f              ADD      r7,r7,r5              ;148
000124  f04f0508          MOV      r5,#8                 ;149
000128  f1080001          ADD      r0,r8,#1              ;150
00012c  4680              MOV      r8,r0                 ;150
00012e  7806              LDRB     r6,[r0,#0]            ;150
000130  e7d7              B        |L1.226|
                  |L1.306|
000132  bf00              NOP                            ;153
                  |L1.308|
000134  42a5              CMP      r5,r4                 ;154
000136  d900              BLS      |L1.314|
000138  4625              MOV      r5,r4                 ;155
                  |L1.314|
00013a  eba40405          SUB      r4,r4,r5              ;157
00013e  bf00              NOP                            ;158
                  |L1.320|
000140  f0160f80          TST      r6,#0x80              ;159
000144  d005              BEQ      |L1.338|
000146  f8d90028          LDR      r0,[r9,#0x28]         ;160
00014a  4659              MOV      r1,r11                ;160
00014c  6a82              LDR      r2,[r0,#0x28]         ;160
00014e  4638              MOV      r0,r7                 ;160
000150  4790              BLX      r2                    ;160
                  |L1.338|
000152  f1070701          ADD      r7,r7,#1              ;162
000156  980e              LDR      r0,[sp,#0x38]         ;163
000158  f1000001          ADD      r0,r0,#1              ;163
00015c  900e              STR      r0,[sp,#0x38]         ;163
00015e  ea4f6046          LSL      r0,r6,#25             ;164
000162  ea4f6610          LSR      r6,r0,#24             ;164
000166  f1a50001          SUB      r0,r5,#1              ;165
00016a  0005              MOVS     r5,r0                 ;165
00016c  d1e8              BNE      |L1.320|
00016e  b13c              CBZ      r4,|L1.384|
000170  f04f0508          MOV      r5,#8                 ;167
000174  f1080001          ADD      r0,r8,#1              ;168
000178  4680              MOV      r8,r0                 ;168
00017a  7806              LDRB     r6,[r0,#0]            ;168
00017c  e7da              B        |L1.308|
00017e  e000              B        |L1.386|
                  |L1.384|
000180  bf00              NOP                            ;171
                  |L1.386|
000182  bf00              NOP                            ;171
000184  bf00              NOP      
000186  e79e              B        |L1.198|
;;;174    
                          ENDP

                  _DrawBitLine2BPP PROC
;;;178    */
;;;179    static void _DrawBitLine2BPP(GUI_USAGE* pUsage, int x, int y, const U8 GUI_UNI_PTR * p, int Diff, int xsize,
000188  e92d5fff          PUSH     {r0-r12,lr}
;;;180                                 const LCD_PIXELINDEX* pTrans, GUI_MEMDEV* pDev, PIXELINDEX* pDest)
;;;181    {
00018c  4681              MOV      r9,r0
00018e  460f              MOV      r7,r1
000190  4698              MOV      r8,r3
000192  f8ddb044          LDR      r11,[sp,#0x44]
000196  e9dda40e          LDRD     r10,r4,[sp,#0x38]
;;;182      U8 pixels;
;;;183      U8  PixelCnt;
;;;184      GUI_USE_PARA(pUsage);
00019a  bf00              NOP      
;;;185      GUI_USE_PARA(pDest);
00019c  9812              LDR      r0,[sp,#0x48]
00019e  9012              STR      r0,[sp,#0x48]
;;;186      PixelCnt = 4 - (Diff & 3);
0001a0  f00a0003          AND      r0,r10,#3
0001a4  f1c00504          RSB      r5,r0,#4
;;;187      pixels = (*p) << ((Diff & 3) << 1);
0001a8  f8980000          LDRB     r0,[r8,#0]
0001ac  ea4f718a          LSL      r1,r10,#30
0001b0  ea4f7151          LSR      r1,r1,#29
0001b4  fa00f001          LSL      r0,r0,r1
0001b8  b2c6              UXTB     r6,r0
;;;188      switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
0001ba  488d              LDR      r0,|L1.1008|
0001bc  7b00              LDRB     r0,[r0,#0xc]  ; GUI_Context
0001be  f0100003          ANDS     r0,r0,#3
0001c2  d002              BEQ      |L1.458|
0001c4  2802              CMP      r0,#2
0001c6  d14d              BNE      |L1.612|
0001c8  e024              B        |L1.532|
                  |L1.458|
;;;189      case 0:    /* Write mode */
;;;190      PixelLoopWrite:
0001ca  bf00              NOP      
                  |L1.460|
;;;191        if (PixelCnt > xsize) {
0001cc  42a5              CMP      r5,r4
0001ce  dd00              BLE      |L1.466|
;;;192          PixelCnt = xsize;
0001d0  b2e5              UXTB     r5,r4
                  |L1.466|
;;;193        }
;;;194        xsize -= PixelCnt;
0001d2  eba40405          SUB      r4,r4,r5
;;;195        do {
0001d6  bf00              NOP      
                  |L1.472|
;;;196          (*pDev->pAPIList->pfSetPixelIndex)(x++, y, *(pTrans + (pixels >> 6)));
0001d8  ea4f1ca6          ASR      r12,r6,#6
0001dc  9910              LDR      r1,[sp,#0x40]
0001de  f831201c          LDRH     r2,[r1,r12,LSL #1]
0001e2  4638              MOV      r0,r7
0001e4  1c7f              ADDS     r7,r7,#1
0001e6  f8db1028          LDR      r1,[r11,#0x28]
0001ea  6a4b              LDR      r3,[r1,#0x24]
0001ec  9902              LDR      r1,[sp,#8]
0001ee  4798              BLX      r3
;;;197          pixels <<= 2;
0001f0  ea4f6086          LSL      r0,r6,#26
0001f4  ea4f6610          LSR      r6,r0,#24
;;;198        } while (--PixelCnt);
0001f8  f1a50001          SUB      r0,r5,#1
0001fc  b2c0              UXTB     r0,r0
0001fe  0005              MOVS     r5,r0
000200  d1ea              BNE      |L1.472|
;;;199        if (xsize) {
000202  b134              CBZ      r4,|L1.530|
;;;200          PixelCnt = 4;
000204  f04f0504          MOV      r5,#4
;;;201          pixels = *(++p);
000208  f1080001          ADD      r0,r8,#1
00020c  4680              MOV      r8,r0
00020e  7806              LDRB     r6,[r0,#0]
;;;202          goto PixelLoopWrite;
000210  e7dc              B        |L1.460|
                  |L1.530|
;;;203        }
;;;204        break;
000212  e027              B        |L1.612|
                  |L1.532|
;;;205      case LCD_DRAWMODE_TRANS:
;;;206      PixelLoopTrans:
000214  bf00              NOP      
                  |L1.534|
;;;207        if (PixelCnt > xsize)
000216  42a5              CMP      r5,r4
000218  dd00              BLE      |L1.540|
;;;208          PixelCnt = xsize;
00021a  b2e5              UXTB     r5,r4
                  |L1.540|
;;;209        xsize -= PixelCnt;
00021c  eba40405          SUB      r4,r4,r5
;;;210        do {
000220  bf00              NOP      
                  |L1.546|
;;;211          if (pixels & 0xc0) {
000222  f0160fc0          TST      r6,#0xc0
000226  d009              BEQ      |L1.572|
;;;212            (*pDev->pAPIList->pfSetPixelIndex)(x, y, *(pTrans + (pixels >> 6)));
000228  11b1              ASRS     r1,r6,#6
00022a  9810              LDR      r0,[sp,#0x40]
00022c  f8302011          LDRH     r2,[r0,r1,LSL #1]
000230  f8db0028          LDR      r0,[r11,#0x28]
000234  6a43              LDR      r3,[r0,#0x24]
000236  4638              MOV      r0,r7
000238  9902              LDR      r1,[sp,#8]
00023a  4798              BLX      r3
                  |L1.572|
;;;213          }
;;;214          x++;
00023c  f1070701          ADD      r7,r7,#1
;;;215          pixels <<= 2;
000240  ea4f6086          LSL      r0,r6,#26
000244  ea4f6610          LSR      r6,r0,#24
;;;216        } while (--PixelCnt);
000248  f1a50001          SUB      r0,r5,#1
00024c  b2c0              UXTB     r0,r0
00024e  0005              MOVS     r5,r0
000250  d1e7              BNE      |L1.546|
;;;217        if (xsize) {
000252  b134              CBZ      r4,|L1.610|
;;;218          PixelCnt = 4;
000254  f04f0504          MOV      r5,#4
;;;219          pixels = *(++p);
000258  f1080001          ADD      r0,r8,#1
00025c  4680              MOV      r8,r0
00025e  7806              LDRB     r6,[r0,#0]
;;;220          goto PixelLoopTrans;
000260  e7d9              B        |L1.534|
                  |L1.610|
;;;221        }
;;;222        break;
000262  bf00              NOP      
                  |L1.612|
000264  bf00              NOP                            ;204
;;;223      }
;;;224    }
000266  e8bd9fff          POP      {r0-r12,pc}
;;;225    
                          ENDP

                  _DrawBitLine4BPP PROC
;;;229    */
;;;230    static void _DrawBitLine4BPP(GUI_USAGE* pUsage, int x, int y, const U8 GUI_UNI_PTR * p, int Diff, int xsize,
00026a  e92d4fff          PUSH     {r0-r11,lr}
;;;231                                 const LCD_PIXELINDEX* pTrans, GUI_MEMDEV* pDev, PIXELINDEX* pDest)
;;;232    {
00026e  b081              SUB      sp,sp,#4
000270  4683              MOV      r11,r0
000272  460d              MOV      r5,r1
000274  4699              MOV      r9,r3
000276  e9dda60e          LDRD     r10,r6,[sp,#0x38]
00027a  e9dd7810          LDRD     r7,r8,[sp,#0x40]
;;;233      U8 pixels;
;;;234      GUI_USE_PARA(pUsage);
00027e  bf00              NOP      
;;;235      GUI_USE_PARA(pDest);
000280  9812              LDR      r0,[sp,#0x48]
000282  9012              STR      r0,[sp,#0x48]
;;;236      pixels = (*p) << ((Diff & 1) << 2);
000284  f8990000          LDRB     r0,[r9,#0]
000288  ea4f71ca          LSL      r1,r10,#31
00028c  ea4f7151          LSR      r1,r1,#29
000290  fa00f001          LSL      r0,r0,r1
000294  b2c4              UXTB     r4,r0
;;;237      switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
000296  4856              LDR      r0,|L1.1008|
000298  7b00              LDRB     r0,[r0,#0xc]  ; GUI_Context
00029a  f0100003          ANDS     r0,r0,#3
00029e  d002              BEQ      |L1.678|
0002a0  2802              CMP      r0,#2
0002a2  d144              BNE      |L1.814|
0002a4  e044              B        |L1.816|
                  |L1.678|
;;;238    /*
;;;239              * Write mode *
;;;240    */
;;;241      case 0:
;;;242        /* Draw incomplete bytes to the left of center area */
;;;243        if (Diff) {
0002a6  f1ba0f00          CMP      r10,#0
0002aa  d00f              BEQ      |L1.716|
;;;244          (*pDev->pAPIList->pfSetPixelIndex)(x++, y, *(pTrans + (pixels >> 4)));
0002ac  1121              ASRS     r1,r4,#4
0002ae  f8372011          LDRH     r2,[r7,r1,LSL #1]
0002b2  4628              MOV      r0,r5
0002b4  1c6d              ADDS     r5,r5,#1
0002b6  f8d81028          LDR      r1,[r8,#0x28]
0002ba  6a4b              LDR      r3,[r1,#0x24]
0002bc  9903              LDR      r1,[sp,#0xc]
0002be  4798              BLX      r3
;;;245          xsize--;
0002c0  f1a60601          SUB      r6,r6,#1
;;;246          pixels = *++p;
0002c4  f1090001          ADD      r0,r9,#1
0002c8  4681              MOV      r9,r0
0002ca  7804              LDRB     r4,[r0,#0]
                  |L1.716|
;;;247        }
;;;248        /* Draw center area (2 pixels in one byte) */
;;;249        if (xsize >= 2) {
0002cc  2e02              CMP      r6,#2
0002ce  db23              BLT      |L1.792|
;;;250          int i = xsize >> 1;
0002d0  ea4f0066          ASR      r0,r6,#1
0002d4  9000              STR      r0,[sp,#0]
;;;251          xsize &= 1;
0002d6  f0060601          AND      r6,r6,#1
;;;252          do {
0002da  bf00              NOP      
                  |L1.732|
;;;253            (*pDev->pAPIList->pfSetPixelIndex)(x++, y, *(pTrans + (pixels >>  4)));
0002dc  1121              ASRS     r1,r4,#4
0002de  f8372011          LDRH     r2,[r7,r1,LSL #1]
0002e2  4628              MOV      r0,r5
0002e4  1c6d              ADDS     r5,r5,#1
0002e6  f8d81028          LDR      r1,[r8,#0x28]
0002ea  6a4b              LDR      r3,[r1,#0x24]
0002ec  9903              LDR      r1,[sp,#0xc]
0002ee  4798              BLX      r3
;;;254            (*pDev->pAPIList->pfSetPixelIndex)(x++, y, *(pTrans + (pixels  & 15)));
0002f0  f004010f          AND      r1,r4,#0xf
0002f4  f8372011          LDRH     r2,[r7,r1,LSL #1]
0002f8  4628              MOV      r0,r5
0002fa  1c6d              ADDS     r5,r5,#1
0002fc  f8d81028          LDR      r1,[r8,#0x28]
000300  6a4b              LDR      r3,[r1,#0x24]
000302  9903              LDR      r1,[sp,#0xc]
000304  4798              BLX      r3
;;;255            pixels = *++p;
000306  f1090001          ADD      r0,r9,#1
00030a  4681              MOV      r9,r0
00030c  7804              LDRB     r4,[r0,#0]
;;;256          } while (--i);
00030e  9800              LDR      r0,[sp,#0]
000310  1e40              SUBS     r0,r0,#1
000312  9000              STR      r0,[sp,#0]
000314  d1e2              BNE      |L1.732|
;;;257        }
000316  bf00              NOP      
                  |L1.792|
;;;258        /* Draw incomplete bytes to the right of center area */
;;;259        if (xsize) {
000318  b14e              CBZ      r6,|L1.814|
;;;260          (*pDev->pAPIList->pfSetPixelIndex)(x++, y, *(pTrans + (pixels >> 4)));
00031a  1121              ASRS     r1,r4,#4
00031c  f8372011          LDRH     r2,[r7,r1,LSL #1]
000320  4628              MOV      r0,r5
000322  1c6d              ADDS     r5,r5,#1
000324  f8d81028          LDR      r1,[r8,#0x28]
000328  6a4b              LDR      r3,[r1,#0x24]
00032a  9903              LDR      r1,[sp,#0xc]
00032c  4798              BLX      r3
                  |L1.814|
;;;261        }
;;;262        break;
00032e  e047              B        |L1.960|
                  |L1.816|
;;;263    /*
;;;264              * Transparent draw mode *
;;;265    */
;;;266      case LCD_DRAWMODE_TRANS:
;;;267        /* Draw incomplete bytes to the left of center area */
;;;268        if (Diff) {
000330  f1ba0f00          CMP      r10,#0
000334  d013              BEQ      |L1.862|
;;;269          if (pixels & 0xF0) {
000336  f0140ff0          TST      r4,#0xf0
00033a  d008              BEQ      |L1.846|
;;;270            (*pDev->pAPIList->pfSetPixelIndex)(x, y, *(pTrans + (pixels >> 4)));
00033c  1120              ASRS     r0,r4,#4
00033e  f8372010          LDRH     r2,[r7,r0,LSL #1]
000342  f8d80028          LDR      r0,[r8,#0x28]
000346  6a43              LDR      r3,[r0,#0x24]
000348  4628              MOV      r0,r5
00034a  9903              LDR      r1,[sp,#0xc]
00034c  4798              BLX      r3
                  |L1.846|
;;;271          }
;;;272          x++;
00034e  f1050501          ADD      r5,r5,#1
;;;273          xsize--;
000352  f1a60601          SUB      r6,r6,#1
;;;274          pixels = *++p;
000356  f1090001          ADD      r0,r9,#1
00035a  4681              MOV      r9,r0
00035c  7804              LDRB     r4,[r0,#0]
                  |L1.862|
;;;275        }
;;;276        /* Draw center area (2 pixels in one byte) */
;;;277        while (xsize >= 2) {
00035e  e01f              B        |L1.928|
                  |L1.864|
;;;278          /* Draw 1. (left) pixel */
;;;279          if (pixels & 0xF0) {
000360  f0140ff0          TST      r4,#0xf0
000364  d008              BEQ      |L1.888|
;;;280            (*pDev->pAPIList->pfSetPixelIndex)(x, y, *(pTrans + (pixels >> 4)));
000366  1120              ASRS     r0,r4,#4
000368  f8372010          LDRH     r2,[r7,r0,LSL #1]
00036c  f8d80028          LDR      r0,[r8,#0x28]
000370  6a43              LDR      r3,[r0,#0x24]
000372  4628              MOV      r0,r5
000374  9903              LDR      r1,[sp,#0xc]
000376  4798              BLX      r3
                  |L1.888|
;;;281          }
;;;282          /* Draw 2. (right) pixel */
;;;283          if (pixels &= 15) {
000378  f004000f          AND      r0,r4,#0xf
00037c  0004              MOVS     r4,r0
00037e  d007              BEQ      |L1.912|
;;;284            (*pDev->pAPIList->pfSetPixelIndex)(x + 1, y, *(pTrans + pixels));
000380  f8372014          LDRH     r2,[r7,r4,LSL #1]
000384  f8d80028          LDR      r0,[r8,#0x28]
000388  6a43              LDR      r3,[r0,#0x24]
00038a  1c68              ADDS     r0,r5,#1
00038c  9903              LDR      r1,[sp,#0xc]
00038e  4798              BLX      r3
                  |L1.912|
;;;285          }
;;;286          x += 2;
000390  f1050502          ADD      r5,r5,#2
;;;287          xsize -= 2;
000394  f1a60602          SUB      r6,r6,#2
;;;288          pixels = *++p;
000398  f1090001          ADD      r0,r9,#1
00039c  4681              MOV      r9,r0
00039e  7804              LDRB     r4,[r0,#0]
                  |L1.928|
0003a0  2e02              CMP      r6,#2                 ;277
0003a2  dadd              BGE      |L1.864|
;;;289        }
;;;290        /* Draw incomplete bytes to the right of center area */
;;;291        if (xsize) {
0003a4  b15e              CBZ      r6,|L1.958|
;;;292          if (pixels >>= 4) {
0003a6  ea4f1024          ASR      r0,r4,#4
0003aa  0004              MOVS     r4,r0
0003ac  d007              BEQ      |L1.958|
;;;293            (*pDev->pAPIList->pfSetPixelIndex)(x, y, *(pTrans + pixels));
0003ae  f8372014          LDRH     r2,[r7,r4,LSL #1]
0003b2  f8d80028          LDR      r0,[r8,#0x28]
0003b6  6a43              LDR      r3,[r0,#0x24]
0003b8  4628              MOV      r0,r5
0003ba  9903              LDR      r1,[sp,#0xc]
0003bc  4798              BLX      r3
                  |L1.958|
;;;294          }
;;;295        }
;;;296        break;
0003be  bf00              NOP      
                  |L1.960|
0003c0  bf00              NOP                            ;262
;;;297      }
;;;298    }
0003c2  b005              ADD      sp,sp,#0x14
0003c4  e8bd8ff0          POP      {r4-r11,pc}
;;;299    
                          ENDP

                  _DrawBitLine8BPP PROC
;;;303    */
;;;304    static void _DrawBitLine8BPP(GUI_USAGE* pUsage, int x, int y, const U8 GUI_UNI_PTR * pSrc, int xsize,
0003c8  e92d5ff0          PUSH     {r4-r12,lr}
;;;305                                 const LCD_PIXELINDEX* pTrans, GUI_MEMDEV* pDev, PIXELINDEX* pDest) {
0003cc  4606              MOV      r6,r0
0003ce  460d              MOV      r5,r1
0003d0  4617              MOV      r7,r2
0003d2  461c              MOV      r4,r3
0003d4  e9ddab0c          LDRD     r10,r11,[sp,#0x30]
0003d8  e9dd890a          LDRD     r8,r9,[sp,#0x28]
;;;306      GUI_USE_PARA(pUsage);
0003dc  bf00              NOP      
;;;307      GUI_USE_PARA(pDest);
0003de  bf00              NOP      
;;;308      switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
0003e0  4803              LDR      r0,|L1.1008|
0003e2  7b00              LDRB     r0,[r0,#0xc]  ; GUI_Context
0003e4  f0100003          ANDS     r0,r0,#3
0003e8  d004              BEQ      |L1.1012|
0003ea  2802              CMP      r0,#2
0003ec  d12b              BNE      |L1.1094|
0003ee  e014              B        |L1.1050|
                  |L1.1008|
                          DCD      GUI_Context
                  |L1.1012|
;;;309      case 0:    /* Write mode */
;;;310        do {
0003f4  bf00              NOP      
                  |L1.1014|
;;;311          (*pDev->pAPIList->pfSetPixelIndex)(x++, y, *(pTrans + *pSrc));
0003f6  7821              LDRB     r1,[r4,#0]
0003f8  f8392011          LDRH     r2,[r9,r1,LSL #1]
0003fc  4628              MOV      r0,r5
0003fe  1c6d              ADDS     r5,r5,#1
000400  f8da1028          LDR      r1,[r10,#0x28]
000404  6a4b              LDR      r3,[r1,#0x24]
000406  4639              MOV      r1,r7
000408  4798              BLX      r3
;;;312          pSrc++;
00040a  f1040401          ADD      r4,r4,#1
;;;313        } while (--xsize);
00040e  f1a80001          SUB      r0,r8,#1
000412  ea5f0800          MOVS     r8,r0
000416  d1ee              BNE      |L1.1014|
;;;314        break;
000418  e015              B        |L1.1094|
                  |L1.1050|
;;;315      case LCD_DRAWMODE_TRANS:
;;;316        do {
00041a  bf00              NOP      
                  |L1.1052|
;;;317          if (*pSrc) {
00041c  7820              LDRB     r0,[r4,#0]
00041e  b140              CBZ      r0,|L1.1074|
;;;318            (*pDev->pAPIList->pfSetPixelIndex)(x, y, *(pTrans + *pSrc));
000420  7820              LDRB     r0,[r4,#0]
000422  f8392010          LDRH     r2,[r9,r0,LSL #1]
000426  f8da0028          LDR      r0,[r10,#0x28]
00042a  4639              MOV      r1,r7
00042c  6a43              LDR      r3,[r0,#0x24]
00042e  4628              MOV      r0,r5
000430  4798              BLX      r3
                  |L1.1074|
;;;319          }
;;;320          x++;
000432  f1050501          ADD      r5,r5,#1
;;;321          pSrc++;
000436  f1040401          ADD      r4,r4,#1
;;;322        } while (--xsize);
00043a  f1a80001          SUB      r0,r8,#1
00043e  ea5f0800          MOVS     r8,r0
000442  d1eb              BNE      |L1.1052|
;;;323        break;
000444  bf00              NOP      
                  |L1.1094|
000446  bf00              NOP                            ;314
;;;324      }
;;;325    }
000448  e8bd9ff0          POP      {r4-r12,pc}
;;;326    
                          ENDP

                  _DrawBitLine8BPP_DDB PROC
;;;330    */
;;;331    static void _DrawBitLine8BPP_DDB(GUI_USAGE* pUsage, int x, int y, const U8 GUI_UNI_PTR * pSrc, int xsize, GUI_MEMDEV* pDev, PIXELINDEX* pDest) {
00044c  e92d47f0          PUSH     {r4-r10,lr}
000450  4606              MOV      r6,r0
000452  460d              MOV      r5,r1
000454  4617              MOV      r7,r2
000456  461c              MOV      r4,r3
000458  e9dd9a09          LDRD     r9,r10,[sp,#0x24]
00045c  f8dd8020          LDR      r8,[sp,#0x20]
;;;332      GUI_USE_PARA(pUsage);
000460  bf00              NOP      
;;;333      GUI_USE_PARA(pDest);
000462  bf00              NOP      
;;;334      switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
000464  48fe              LDR      r0,|L1.2144|
000466  7b00              LDRB     r0,[r0,#0xc]  ; GUI_Context
000468  f0100003          ANDS     r0,r0,#3
00046c  d002              BEQ      |L1.1140|
00046e  2802              CMP      r0,#2
000470  d125              BNE      |L1.1214|
000472  e010              B        |L1.1174|
                  |L1.1140|
;;;335      case 0:    /* Write mode */
;;;336        do {
000474  bf00              NOP      
                  |L1.1142|
;;;337          (*pDev->pAPIList->pfSetPixelIndex)(x++, y, *pSrc);
000476  7822              LDRB     r2,[r4,#0]
000478  4628              MOV      r0,r5
00047a  1c6d              ADDS     r5,r5,#1
00047c  f8d91028          LDR      r1,[r9,#0x28]
000480  6a4b              LDR      r3,[r1,#0x24]
000482  4639              MOV      r1,r7
000484  4798              BLX      r3
;;;338          pSrc++;
000486  f1040401          ADD      r4,r4,#1
;;;339        } while (--xsize);
00048a  f1a80001          SUB      r0,r8,#1
00048e  ea5f0800          MOVS     r8,r0
000492  d1f0              BNE      |L1.1142|
;;;340        break;
000494  e013              B        |L1.1214|
                  |L1.1174|
;;;341      case LCD_DRAWMODE_TRANS:
;;;342        do {
000496  bf00              NOP      
                  |L1.1176|
;;;343          if (*pSrc) {
000498  7820              LDRB     r0,[r4,#0]
00049a  b130              CBZ      r0,|L1.1194|
;;;344            (*pDev->pAPIList->pfSetPixelIndex)(x, y, *pSrc);
00049c  7822              LDRB     r2,[r4,#0]
00049e  f8d90028          LDR      r0,[r9,#0x28]
0004a2  4639              MOV      r1,r7
0004a4  6a43              LDR      r3,[r0,#0x24]
0004a6  4628              MOV      r0,r5
0004a8  4798              BLX      r3
                  |L1.1194|
;;;345          }
;;;346          x++;
0004aa  f1050501          ADD      r5,r5,#1
;;;347          pSrc++;
0004ae  f1040401          ADD      r4,r4,#1
;;;348        } while (--xsize);
0004b2  f1a80001          SUB      r0,r8,#1
0004b6  ea5f0800          MOVS     r8,r0
0004ba  d1ed              BNE      |L1.1176|
;;;349        break;
0004bc  bf00              NOP      
                  |L1.1214|
0004be  bf00              NOP                            ;340
;;;350      }
;;;351    }
0004c0  e8bd87f0          POP      {r4-r10,pc}
;;;352    
                          ENDP

                  _DrawBitmap PROC
;;;356    */
;;;357    static void _DrawBitmap(int x0, int y0, int xsize, int ysize,
0004c4  e92d4fff          PUSH     {r0-r11,lr}
;;;358                            int BitsPerPixel, int BytesPerLine,
;;;359                            const U8 GUI_UNI_PTR * pData, int Diff, const LCD_PIXELINDEX* pTrans)
;;;360    {
0004c8  b087              SUB      sp,sp,#0x1c
0004ca  460f              MOV      r7,r1
0004cc  4690              MOV      r8,r2
0004ce  469a              MOV      r10,r3
0004d0  e9ddb917          LDRD     r11,r9,[sp,#0x5c]
;;;361      int i;
;;;362      GUI_MEMDEV* pDev   = GUI_MEMDEV_H2P(GUI_Context.hDevData);
0004d4  49e2              LDR      r1,|L1.2144|
0004d6  f9b1004c          LDRSH    r0,[r1,#0x4c]  ; GUI_Context
0004da  f7fffffe          BL       GUI_ALLOC_h2p
0004de  4606              MOV      r6,r0
;;;363      GUI_USAGE*  pUsage = (pDev->hUsage) ? GUI_USAGE_H2P(pDev->hUsage) : 0;
0004e0  8b30              LDRH     r0,[r6,#0x18]
0004e2  b120              CBZ      r0,|L1.1262|
0004e4  f9b60018          LDRSH    r0,[r6,#0x18]
0004e8  f7fffffe          BL       GUI_ALLOC_h2p
0004ec  e001              B        |L1.1266|
                  |L1.1262|
0004ee  f04f0000          MOV      r0,#0
                  |L1.1266|
0004f2  9006              STR      r0,[sp,#0x18]
;;;364      unsigned    BytesPerLineDest;
;;;365      PIXELINDEX* pDest;
;;;366      BytesPerLineDest = pDev->BytesPerLine;
0004f4  68f0              LDR      r0,[r6,#0xc]
0004f6  9005              STR      r0,[sp,#0x14]
;;;367      x0 += Diff;
0004f8  9807              LDR      r0,[sp,#0x1c]
0004fa  4458              ADD      r0,r0,r11
0004fc  9007              STR      r0,[sp,#0x1c]
;;;368      /* Mark all affected pixels dirty unless transparency is set */
;;;369      if (pUsage) {
0004fe  9806              LDR      r0,[sp,#0x18]
000500  b160              CBZ      r0,|L1.1308|
;;;370        if ((GUI_Context.DrawMode & LCD_DRAWMODE_TRANS) == 0) {
000502  48d7              LDR      r0,|L1.2144|
000504  7b00              LDRB     r0,[r0,#0xc]  ; GUI_Context
000506  f0100f02          TST      r0,#2
00050a  d107              BNE      |L1.1308|
;;;371          GUI_USAGE_AddRect(pUsage, x0, y0 , xsize, ysize);
00050c  4643              MOV      r3,r8
00050e  463a              MOV      r2,r7
000510  f8cda000          STR      r10,[sp,#0]
000514  e9dd0106          LDRD     r0,r1,[sp,#0x18]
000518  f7fffffe          BL       GUI_USAGE_AddRect
                  |L1.1308|
;;;372        }
;;;373      }
;;;374      pDest = _XY2PTR_BITOFFSET(x0, y0, 0);
00051c  2200              MOVS     r2,#0
00051e  4639              MOV      r1,r7
000520  9807              LDR      r0,[sp,#0x1c]
000522  f7fffffe          BL       _XY2PTR_BITOFFSET
000526  4605              MOV      r5,r0
;;;375    #if BITSPERPIXEL == 16
;;;376      /* handle 16 bpp bitmaps in high color modes, but only without palette */
;;;377      if (BitsPerPixel == 16) {
;;;378        for (i = 0; i < ysize; i++) {
;;;379          _DrawBitLine16BPP_DDB(pUsage, x0, i + y0, (const U16*)pData, xsize, pDev, pDest);
;;;380          pData += BytesPerLine;
;;;381          pDest = (PIXELINDEX*)((U8*)pDest + BytesPerLineDest); 
;;;382        }
;;;383        return;
;;;384      }
;;;385    #endif
;;;386      /* Handle 8 bpp bitmaps seperately as we have different routine bitmaps with or without palette */
;;;387      if (BitsPerPixel == 8) {
000528  9814              LDR      r0,[sp,#0x50]
00052a  2808              CMP      r0,#8
00052c  d126              BNE      |L1.1404|
;;;388        for (i = 0; i < ysize; i++) {
00052e  f04f0400          MOV      r4,#0
000532  e01e              B        |L1.1394|
                  |L1.1332|
;;;389          if (pTrans) {
000534  f1b90f00          CMP      r9,#0
000538  d00a              BEQ      |L1.1360|
;;;390            _DrawBitLine8BPP(pUsage, x0, i + y0, pData, xsize, pTrans, pDev, pDest);
00053a  19e2              ADDS     r2,r4,r7
00053c  e9cd8900          STRD     r8,r9,[sp,#0]
000540  e9cd6502          STRD     r6,r5,[sp,#8]
000544  9b16              LDR      r3,[sp,#0x58]
000546  e9dd0106          LDRD     r0,r1,[sp,#0x18]
00054a  f7fffffe          BL       _DrawBitLine8BPP
00054e  e008              B        |L1.1378|
                  |L1.1360|
;;;391          } else {
;;;392            _DrawBitLine8BPP_DDB(pUsage, x0, i + y0, pData, xsize, pDev, pDest);
000550  19e2              ADDS     r2,r4,r7
000552  e9cd8600          STRD     r8,r6,[sp,#0]
000556  9502              STR      r5,[sp,#8]
000558  9b16              LDR      r3,[sp,#0x58]
00055a  e9dd0106          LDRD     r0,r1,[sp,#0x18]
00055e  f7fffffe          BL       _DrawBitLine8BPP_DDB
                  |L1.1378|
;;;393          }
;;;394          pData += BytesPerLine;
000562  e9dd1015          LDRD     r1,r0,[sp,#0x54]
000566  4408              ADD      r0,r0,r1
000568  9016              STR      r0,[sp,#0x58]
;;;395          pDest = (PIXELINDEX*)((U8*)pDest + BytesPerLineDest); 
00056a  9805              LDR      r0,[sp,#0x14]
00056c  4405              ADD      r5,r5,r0
00056e  f1040401          ADD      r4,r4,#1              ;388
                  |L1.1394|
000572  4554              CMP      r4,r10                ;388
000574  dbde              BLT      |L1.1332|
                  |L1.1398|
;;;396        }
;;;397        return;
;;;398      }
;;;399      /* Use aID for bitmaps without palette */
;;;400      if (!pTrans) {
;;;401        pTrans = aID;
;;;402      }
;;;403      for (i = 0; i < ysize; i++) {
;;;404        switch (BitsPerPixel) {
;;;405        case 1:
;;;406          _DrawBitLine1BPP(pUsage, x0, i + y0, pData, Diff, xsize, pTrans, pDev, pDest);
;;;407          break;
;;;408        case 2:
;;;409          _DrawBitLine2BPP(pUsage, x0, i + y0, pData, Diff, xsize, pTrans, pDev, pDest);
;;;410          break;
;;;411        case 4:
;;;412          _DrawBitLine4BPP(pUsage, x0, i + y0, pData, Diff, xsize, pTrans, pDev, pDest);
;;;413          break;
;;;414        }
;;;415        pData += BytesPerLine;
;;;416        pDest = (PIXELINDEX*)((U8*)pDest + BytesPerLineDest); 
;;;417      }
;;;418    }
000576  b00b              ADD      sp,sp,#0x2c
000578  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.1404|
00057c  f1b90f00          CMP      r9,#0                 ;400
000580  d101              BNE      |L1.1414|
000582  f8df92e0          LDR      r9,|L1.2148|
                  |L1.1414|
000586  f04f0400          MOV      r4,#0                 ;403
00058a  e034              B        |L1.1526|
                  |L1.1420|
00058c  9814              LDR      r0,[sp,#0x50]         ;404
00058e  2801              CMP      r0,#1                 ;404
000590  d004              BEQ      |L1.1436|
000592  2802              CMP      r0,#2                 ;404
000594  d00e              BEQ      |L1.1460|
000596  2804              CMP      r0,#4                 ;404
000598  d124              BNE      |L1.1508|
00059a  e017              B        |L1.1484|
                  |L1.1436|
00059c  19e2              ADDS     r2,r4,r7              ;406
00059e  e9cdb800          STRD     r11,r8,[sp,#0]        ;406
0005a2  e9cd9602          STRD     r9,r6,[sp,#8]         ;406
0005a6  9504              STR      r5,[sp,#0x10]         ;406
0005a8  9b16              LDR      r3,[sp,#0x58]         ;406
0005aa  e9dd0106          LDRD     r0,r1,[sp,#0x18]      ;406
0005ae  f7fffffe          BL       _DrawBitLine1BPP
0005b2  e017              B        |L1.1508|
                  |L1.1460|
0005b4  19e2              ADDS     r2,r4,r7              ;409
0005b6  e9cdb800          STRD     r11,r8,[sp,#0]        ;409
0005ba  e9cd9602          STRD     r9,r6,[sp,#8]         ;409
0005be  9504              STR      r5,[sp,#0x10]         ;409
0005c0  9b16              LDR      r3,[sp,#0x58]         ;409
0005c2  e9dd0106          LDRD     r0,r1,[sp,#0x18]      ;409
0005c6  f7fffffe          BL       _DrawBitLine2BPP
0005ca  e00b              B        |L1.1508|
                  |L1.1484|
0005cc  19e2              ADDS     r2,r4,r7              ;412
0005ce  e9cdb800          STRD     r11,r8,[sp,#0]        ;412
0005d2  e9cd9602          STRD     r9,r6,[sp,#8]         ;412
0005d6  9504              STR      r5,[sp,#0x10]         ;412
0005d8  9b16              LDR      r3,[sp,#0x58]         ;412
0005da  e9dd0106          LDRD     r0,r1,[sp,#0x18]      ;412
0005de  f7fffffe          BL       _DrawBitLine4BPP
0005e2  bf00              NOP                            ;413
                  |L1.1508|
0005e4  bf00              NOP                            ;407
0005e6  e9dd1015          LDRD     r1,r0,[sp,#0x54]      ;415
0005ea  4408              ADD      r0,r0,r1              ;415
0005ec  9016              STR      r0,[sp,#0x58]         ;415
0005ee  9805              LDR      r0,[sp,#0x14]         ;416
0005f0  4405              ADD      r5,r5,r0              ;416
0005f2  f1040401          ADD      r4,r4,#1              ;403
                  |L1.1526|
0005f6  4554              CMP      r4,r10                ;403
0005f8  dbc8              BLT      |L1.1420|
0005fa  bf00              NOP      
0005fc  e7bb              B        |L1.1398|
;;;419    
                          ENDP

                  _FillRect PROC
;;;423    */
;;;424    static void _FillRect(int x0, int y0, int x1, int y1) {
0005fe  e92d5fff          PUSH     {r0-r12,lr}
000602  4680              MOV      r8,r0
000604  460e              MOV      r6,r1
000606  4693              MOV      r11,r2
000608  4699              MOV      r9,r3
;;;425      GUI_MEMDEV* pDev = GUI_MEMDEV_H2P(GUI_Context.hDevData);
00060a  4995              LDR      r1,|L1.2144|
00060c  f9b1004c          LDRSH    r0,[r1,#0x4c]  ; GUI_Context
000610  f7fffffe          BL       GUI_ALLOC_h2p
000614  9003              STR      r0,[sp,#0xc]
;;;426      U8* pData;
;;;427      int Bit, Len;
;;;428      int RemPixels;
;;;429      Len = x1 - x0 + 1;
000616  ebab0008          SUB      r0,r11,r8
00061a  f1000001          ADD      r0,r0,#1
00061e  9001              STR      r0,[sp,#4]
;;;430      /* Mark rectangle as modified */
;;;431      if (pDev->hUsage) {
000620  9803              LDR      r0,[sp,#0xc]
000622  8b00              LDRH     r0,[r0,#0x18]
000624  b178              CBZ      r0,|L1.1606|
;;;432        GUI_USAGE_AddRect(GUI_USAGE_H2P(pDev->hUsage), x0, y0, Len, y1 - y0 + 1);
000626  9903              LDR      r1,[sp,#0xc]
000628  f9b10018          LDRSH    r0,[r1,#0x18]
00062c  f7fffffe          BL       GUI_ALLOC_h2p
000630  4607              MOV      r7,r0
000632  eba90006          SUB      r0,r9,r6
000636  1c40              ADDS     r0,r0,#1
000638  9000              STR      r0,[sp,#0]
00063a  4632              MOV      r2,r6
00063c  4641              MOV      r1,r8
00063e  4638              MOV      r0,r7
000640  9b01              LDR      r3,[sp,#4]
000642  f7fffffe          BL       GUI_USAGE_AddRect
                  |L1.1606|
;;;433      }
;;;434      /* Do the drawing */
;;;435      for (; y0 <= y1; y0++) {
000646  e0a2              B        |L1.1934|
                  |L1.1608|
;;;436        pData = _XY2PTR_BITOFFSET(x0, y0, &Bit);
000648  aa02              ADD      r2,sp,#8
00064a  4631              MOV      r1,r6
00064c  4640              MOV      r0,r8
00064e  f7fffffe          BL       _XY2PTR_BITOFFSET
000652  4604              MOV      r4,r0
;;;437        RemPixels = Len;
000654  9d01              LDR      r5,[sp,#4]
;;;438        if (GUI_Context.DrawMode & LCD_DRAWMODE_XOR) {
000656  4882              LDR      r0,|L1.2144|
000658  7b00              LDRB     r0,[r0,#0xc]  ; GUI_Context
00065a  f0100f01          TST      r0,#1
00065e  d040              BEQ      |L1.1762|
;;;439          if (Bit < 7) {
000660  9802              LDR      r0,[sp,#8]
000662  2807              CMP      r0,#7
000664  da15              BGE      |L1.1682|
;;;440            while ((Bit >= 0) && RemPixels--) {
000666  e00b              B        |L1.1664|
                  |L1.1640|
;;;441              *pData ^= 1 << (Bit--);
000668  7820              LDRB     r0,[r4,#0]
00066a  9a02              LDR      r2,[sp,#8]
00066c  f1a20101          SUB      r1,r2,#1
000670  9102              STR      r1,[sp,#8]
000672  f04f0101          MOV      r1,#1
000676  fa01f102          LSL      r1,r1,r2
00067a  ea800001          EOR      r0,r0,r1
00067e  7020              STRB     r0,[r4,#0]
                  |L1.1664|
000680  9802              LDR      r0,[sp,#8]            ;440
000682  2800              CMP      r0,#0                 ;440
000684  db03              BLT      |L1.1678|
000686  0028              MOVS     r0,r5                 ;440
000688  f1a50501          SUB      r5,r5,#1              ;440
00068c  d1ec              BNE      |L1.1640|
                  |L1.1678|
;;;442            }
;;;443            pData++;
00068e  f1040401          ADD      r4,r4,#1
                  |L1.1682|
;;;444          }
;;;445          if (RemPixels > 0) {
000692  2d00              CMP      r5,#0
000694  dd79              BLE      |L1.1930|
;;;446            int NumBytes = RemPixels >> 3;
000696  ea4f00e5          ASR      r0,r5,#3
;;;447            if (NumBytes > 0) {
00069a  2800              CMP      r0,#0
00069c  dd0c              BLE      |L1.1720|
;;;448              RemPixels -= NumBytes << 3;
00069e  eba505c0          SUB      r5,r5,r0,LSL #3
;;;449              do {
0006a2  bf00              NOP      
                  |L1.1700|
;;;450                *pData ^= *pData;
0006a4  7821              LDRB     r1,[r4,#0]
0006a6  ea810101          EOR      r1,r1,r1
0006aa  7021              STRB     r1,[r4,#0]
;;;451                pData++;
0006ac  f1040401          ADD      r4,r4,#1
;;;452              } while (--NumBytes);
0006b0  f1a00101          SUB      r1,r0,#1
0006b4  0008              MOVS     r0,r1
0006b6  d1f5              BNE      |L1.1700|
                  |L1.1720|
;;;453            }
;;;454            Bit = 7;
0006b8  f04f0107          MOV      r1,#7
0006bc  9102              STR      r1,[sp,#8]
;;;455            while (RemPixels--) {
0006be  e00b              B        |L1.1752|
                  |L1.1728|
;;;456              *pData ^= 1 << (Bit--);
0006c0  7821              LDRB     r1,[r4,#0]
0006c2  9b02              LDR      r3,[sp,#8]
0006c4  f1a30201          SUB      r2,r3,#1
0006c8  9202              STR      r2,[sp,#8]
0006ca  f04f0201          MOV      r2,#1
0006ce  fa02f203          LSL      r2,r2,r3
0006d2  ea810102          EOR      r1,r1,r2
0006d6  7021              STRB     r1,[r4,#0]
                  |L1.1752|
0006d8  0029              MOVS     r1,r5                 ;455
0006da  f1a50501          SUB      r5,r5,#1              ;455
0006de  d1ef              BNE      |L1.1728|
;;;457            }
;;;458          }
0006e0  e053              B        |L1.1930|
                  |L1.1762|
;;;459        } else {  /* Fill */
;;;460          int Color, FillByte;
;;;461          Color    = (LCD_COLORINDEX & 1);
0006e2  485f              LDR      r0,|L1.2144|
0006e4  8840              LDRH     r0,[r0,#2]  ; GUI_Context
0006e6  f0000a01          AND      r10,r0,#1
;;;462          FillByte = (-Color) & 0xFF;
0006ea  f1ca0000          RSB      r0,r10,#0
0006ee  b2c0              UXTB     r0,r0
0006f0  9000              STR      r0,[sp,#0]
;;;463          if (Bit < 7) {
0006f2  9802              LDR      r0,[sp,#8]
0006f4  2807              CMP      r0,#7
0006f6  da1c              BGE      |L1.1842|
;;;464            while ((Bit >= 0) && RemPixels--) {
0006f8  e012              B        |L1.1824|
                  |L1.1786|
;;;465              *pData &= ~(1 << Bit);
0006fa  7820              LDRB     r0,[r4,#0]
0006fc  f04f0101          MOV      r1,#1
000700  9a02              LDR      r2,[sp,#8]
000702  fa01f102          LSL      r1,r1,r2
000706  ea200001          BIC      r0,r0,r1
00070a  7020              STRB     r0,[r4,#0]
;;;466              *pData |= Color << (Bit--);
00070c  7820              LDRB     r0,[r4,#0]
00070e  9a02              LDR      r2,[sp,#8]
000710  f1a20101          SUB      r1,r2,#1
000714  9102              STR      r1,[sp,#8]
000716  fa0af102          LSL      r1,r10,r2
00071a  ea400001          ORR      r0,r0,r1
00071e  7020              STRB     r0,[r4,#0]
                  |L1.1824|
000720  9802              LDR      r0,[sp,#8]            ;464
000722  2800              CMP      r0,#0                 ;464
000724  db03              BLT      |L1.1838|
000726  0028              MOVS     r0,r5                 ;464
000728  f1a50501          SUB      r5,r5,#1              ;464
00072c  d1e5              BNE      |L1.1786|
                  |L1.1838|
;;;467            }
;;;468            pData++;
00072e  f1040401          ADD      r4,r4,#1
                  |L1.1842|
;;;469          }
;;;470          if (RemPixels > 0) {
000732  2d00              CMP      r5,#0
000734  dd28              BLE      |L1.1928|
;;;471            int NumBytes = RemPixels >> 3;
000736  ea4f07e5          ASR      r7,r5,#3
;;;472            if (NumBytes > 0) {
00073a  2f00              CMP      r7,#0
00073c  dd08              BLE      |L1.1872|
;;;473              GUI_MEMSET(pData, FillByte, NumBytes);
00073e  463a              MOV      r2,r7
000740  9800              LDR      r0,[sp,#0]
000742  b2c1              UXTB     r1,r0
000744  4620              MOV      r0,r4
000746  f7fffffe          BL       GUI__memset
;;;474              pData += NumBytes;
00074a  443c              ADD      r4,r4,r7
;;;475              RemPixels -= NumBytes << 3;
00074c  eba505c7          SUB      r5,r5,r7,LSL #3
                  |L1.1872|
;;;476            }
;;;477            Bit = 7;
000750  f04f0007          MOV      r0,#7
000754  9002              STR      r0,[sp,#8]
;;;478            while (RemPixels--) {
000756  e012              B        |L1.1918|
                  |L1.1880|
;;;479              *pData &= ~(1 << Bit);
000758  7820              LDRB     r0,[r4,#0]
00075a  f04f0101          MOV      r1,#1
00075e  9a02              LDR      r2,[sp,#8]
000760  fa01f102          LSL      r1,r1,r2
000764  ea200001          BIC      r0,r0,r1
000768  7020              STRB     r0,[r4,#0]
;;;480              *pData |= Color << (Bit--);
00076a  7820              LDRB     r0,[r4,#0]
00076c  9a02              LDR      r2,[sp,#8]
00076e  f1a20101          SUB      r1,r2,#1
000772  9102              STR      r1,[sp,#8]
000774  fa0af102          LSL      r1,r10,r2
000778  ea400001          ORR      r0,r0,r1
00077c  7020              STRB     r0,[r4,#0]
                  |L1.1918|
00077e  0028              MOVS     r0,r5                 ;478
000780  f1a50501          SUB      r5,r5,#1              ;478
000784  d1e8              BNE      |L1.1880|
;;;481            }
;;;482          }
000786  bf00              NOP      
                  |L1.1928|
;;;483        }
000788  bf00              NOP      
                  |L1.1930|
00078a  f1060601          ADD      r6,r6,#1              ;435
                  |L1.1934|
00078e  454e              CMP      r6,r9                 ;435
000790  f77faf5a          BLE      |L1.1608|
;;;484      }
;;;485    }
000794  e8bd9fff          POP      {r0-r12,pc}
;;;486    
                          ENDP

                  _DrawHLine PROC
;;;490    */
;;;491    static void _DrawHLine(int x0, int y, int x1) {
000798  b570              PUSH     {r4-r6,lr}
00079a  4605              MOV      r5,r0
00079c  460c              MOV      r4,r1
00079e  4616              MOV      r6,r2
;;;492      _FillRect(x0, y, x1, y);
0007a0  4623              MOV      r3,r4
0007a2  4632              MOV      r2,r6
0007a4  4621              MOV      r1,r4
0007a6  4628              MOV      r0,r5
0007a8  f7fffffe          BL       _FillRect
;;;493    }
0007ac  bd70              POP      {r4-r6,pc}
;;;494    
                          ENDP

                  _DrawVLine PROC
;;;498    */
;;;499    static void _DrawVLine(int x , int y0, int y1) {
0007ae  e92d5ffc          PUSH     {r2-r12,lr}
0007b2  4682              MOV      r10,r0
0007b4  460e              MOV      r6,r1
0007b6  4617              MOV      r7,r2
;;;500      GUI_MEMDEV* pDev   = GUI_MEMDEV_H2P(GUI_Context.hDevData);
0007b8  4929              LDR      r1,|L1.2144|
0007ba  f9b1004c          LDRSH    r0,[r1,#0x4c]  ; GUI_Context
0007be  f7fffffe          BL       GUI_ALLOC_h2p
0007c2  4680              MOV      r8,r0
;;;501      GUI_USAGE_h hUsage = pDev->hUsage; 
0007c4  f9b8b018          LDRSH    r11,[r8,#0x18]
;;;502      GUI_USAGE*  pUsage = hUsage ? GUI_USAGE_H2P(hUsage) : NULL;
0007c8  f1bb0f00          CMP      r11,#0
0007cc  d003              BEQ      |L1.2006|
0007ce  4658              MOV      r0,r11
0007d0  f7fffffe          BL       GUI_ALLOC_h2p
0007d4  e001              B        |L1.2010|
                  |L1.2006|
0007d6  f04f0000          MOV      r0,#0
                  |L1.2010|
0007da  4605              MOV      r5,r0
;;;503      U8* pData;
;;;504      int Bit, Mask;
;;;505      pData = _XY2PTR_BITOFFSET(x, y0, &Bit);
0007dc  aa01              ADD      r2,sp,#4
0007de  4631              MOV      r1,r6
0007e0  4650              MOV      r0,r10
0007e2  f7fffffe          BL       _XY2PTR_BITOFFSET
0007e6  4604              MOV      r4,r0
;;;506      Mask  = (1 << Bit);
0007e8  f04f0001          MOV      r0,#1
0007ec  9901              LDR      r1,[sp,#4]
0007ee  fa00f901          LSL      r9,r0,r1
;;;507      if (GUI_Context.DrawMode & LCD_DRAWMODE_XOR) {
0007f2  481b              LDR      r0,|L1.2144|
0007f4  7b00              LDRB     r0,[r0,#0xc]  ; GUI_Context
0007f6  f0100f01          TST      r0,#1
0007fa  d014              BEQ      |L1.2086|
;;;508        do {
0007fc  bf00              NOP      
                  |L1.2046|
;;;509          *pData ^= Mask;
0007fe  7820              LDRB     r0,[r4,#0]
000800  ea800009          EOR      r0,r0,r9
000804  7020              STRB     r0,[r4,#0]
;;;510          if (pUsage) {
000806  b12d              CBZ      r5,|L1.2068|
;;;511            GUI_USAGE_AddPixel(pUsage, x, y0);
000808  68a8              LDR      r0,[r5,#8]
00080a  4632              MOV      r2,r6
00080c  4651              MOV      r1,r10
00080e  6803              LDR      r3,[r0,#0]
000810  4628              MOV      r0,r5
000812  4798              BLX      r3
                  |L1.2068|
;;;512          }
;;;513          pData += pDev->BytesPerLine;
000814  f8d8000c          LDR      r0,[r8,#0xc]
000818  4404              ADD      r4,r4,r0
;;;514        } while (++y0 <= y1);
00081a  f1060001          ADD      r0,r6,#1
00081e  4606              MOV      r6,r0
000820  42b8              CMP      r0,r7
000822  ddec              BLE      |L1.2046|
000824  e026              B        |L1.2164|
                  |L1.2086|
;;;515      } else {
;;;516        int Pixel;
;;;517        Pixel = (LCD_COLORINDEX & 1) << Bit;
000826  480e              LDR      r0,|L1.2144|
000828  8840              LDRH     r0,[r0,#2]  ; GUI_Context
00082a  f0000001          AND      r0,r0,#1
00082e  9901              LDR      r1,[sp,#4]
000830  fa00f001          LSL      r0,r0,r1
000834  9000              STR      r0,[sp,#0]
;;;518        do {
000836  bf00              NOP      
                  |L1.2104|
;;;519          *pData &= ~Mask;
000838  7820              LDRB     r0,[r4,#0]
00083a  ea200009          BIC      r0,r0,r9
00083e  7020              STRB     r0,[r4,#0]
;;;520          *pData |= Pixel;
000840  7820              LDRB     r0,[r4,#0]
000842  9900              LDR      r1,[sp,#0]
000844  ea400001          ORR      r0,r0,r1
000848  7020              STRB     r0,[r4,#0]
;;;521          if (pUsage) {
00084a  b12d              CBZ      r5,|L1.2136|
;;;522            GUI_USAGE_AddPixel(pUsage, x, y0);
00084c  68a8              LDR      r0,[r5,#8]
00084e  4632              MOV      r2,r6
000850  4651              MOV      r1,r10
000852  6803              LDR      r3,[r0,#0]
000854  4628              MOV      r0,r5
000856  4798              BLX      r3
                  |L1.2136|
;;;523          }
;;;524          pData += pDev->BytesPerLine;
000858  f8d8000c          LDR      r0,[r8,#0xc]
00085c  4404              ADD      r4,r4,r0
;;;525        } while (++y0 <= y1);
00085e  e003              B        |L1.2152|
                  |L1.2144|
                          DCD      GUI_Context
                  |L1.2148|
                          DCD      aID
                  |L1.2152|
000868  f1060001          ADD      r0,r6,#1
00086c  4606              MOV      r6,r0
00086e  42b8              CMP      r0,r7
000870  dde2              BLE      |L1.2104|
;;;526      }
000872  bf00              NOP      
                  |L1.2164|
;;;527    }
000874  e8bd9ffc          POP      {r2-r12,pc}
;;;528    
                          ENDP

                  _SetPixelIndex PROC
;;;532    */
;;;533    static void _SetPixelIndex(int x, int y, int Index) {
000878  e92d4ff8          PUSH     {r3-r11,lr}
00087c  4606              MOV      r6,r0
00087e  460f              MOV      r7,r1
000880  4690              MOV      r8,r2
;;;534      GUI_MEMDEV* pDev = GUI_MEMDEV_H2P(GUI_Context.hDevData);
000882  4937              LDR      r1,|L1.2400|
000884  f9b1004c          LDRSH    r0,[r1,#0x4c]  ; GUI_Context
000888  f7fffffe          BL       GUI_ALLOC_h2p
00088c  4605              MOV      r5,r0
;;;535      U8* pData;
;;;536      int Bit;
;;;537      pData   = _XY2PTR_BITOFFSET(x, y, &Bit);
00088e  466a              MOV      r2,sp
000890  4639              MOV      r1,r7
000892  4630              MOV      r0,r6
000894  f7fffffe          BL       _XY2PTR_BITOFFSET
000898  4604              MOV      r4,r0
;;;538      *pData &= ~(1 << Bit);
00089a  7820              LDRB     r0,[r4,#0]
00089c  f04f0101          MOV      r1,#1
0008a0  9a00              LDR      r2,[sp,#0]
0008a2  fa01f102          LSL      r1,r1,r2
0008a6  ea200001          BIC      r0,r0,r1
0008aa  7020              STRB     r0,[r4,#0]
;;;539      *pData |= (Index & 1) << Bit;
0008ac  7820              LDRB     r0,[r4,#0]
0008ae  f0080101          AND      r1,r8,#1
0008b2  9a00              LDR      r2,[sp,#0]
0008b4  fa01f102          LSL      r1,r1,r2
0008b8  ea400001          ORR      r0,r0,r1
0008bc  7020              STRB     r0,[r4,#0]
;;;540      if (pDev->hUsage) {
0008be  8b28              LDRH     r0,[r5,#0x18]
0008c0  b178              CBZ      r0,|L1.2274|
;;;541        GUI_USAGE_AddPixel(GUI_USAGE_H2P(pDev->hUsage), x, y);
0008c2  f9b50018          LDRSH    r0,[r5,#0x18]
0008c6  f7fffffe          BL       GUI_ALLOC_h2p
0008ca  4682              MOV      r10,r0
0008cc  f9b50018          LDRSH    r0,[r5,#0x18]
0008d0  f7fffffe          BL       GUI_ALLOC_h2p
0008d4  6880              LDR      r0,[r0,#8]
0008d6  463a              MOV      r2,r7
0008d8  4631              MOV      r1,r6
0008da  f8d09000          LDR      r9,[r0,#0]
0008de  4650              MOV      r0,r10
0008e0  47c8              BLX      r9
                  |L1.2274|
;;;542      }
;;;543    }
0008e2  e8bd8ff8          POP      {r3-r11,pc}
;;;544    
                          ENDP

                  _XorPixel PROC
;;;548    */
;;;549    static void _XorPixel(int x, int y) {
0008e6  e92d43f8          PUSH     {r3-r9,lr}
0008ea  4605              MOV      r5,r0
0008ec  460e              MOV      r6,r1
;;;550      GUI_MEMDEV* pDev = GUI_MEMDEV_H2P(GUI_Context.hDevData);
0008ee  491c              LDR      r1,|L1.2400|
0008f0  f9b1004c          LDRSH    r0,[r1,#0x4c]  ; GUI_Context
0008f4  f7fffffe          BL       GUI_ALLOC_h2p
0008f8  4604              MOV      r4,r0
;;;551      U8* pData;
;;;552      int Bit;
;;;553      pData   = _XY2PTR_BITOFFSET(x, y, &Bit);
0008fa  466a              MOV      r2,sp
0008fc  4631              MOV      r1,r6
0008fe  4628              MOV      r0,r5
000900  f7fffffe          BL       _XY2PTR_BITOFFSET
000904  4607              MOV      r7,r0
;;;554      *pData ^= (1 << Bit);
000906  7838              LDRB     r0,[r7,#0]
000908  f04f0101          MOV      r1,#1
00090c  9a00              LDR      r2,[sp,#0]
00090e  fa01f102          LSL      r1,r1,r2
000912  ea800001          EOR      r0,r0,r1
000916  7038              STRB     r0,[r7,#0]
;;;555      if (pDev->hUsage) {
000918  8b20              LDRH     r0,[r4,#0x18]
00091a  b178              CBZ      r0,|L1.2364|
;;;556        GUI_USAGE_AddPixel(GUI_USAGE_H2P(pDev->hUsage), x, y);
00091c  f9b40018          LDRSH    r0,[r4,#0x18]
000920  f7fffffe          BL       GUI_ALLOC_h2p
000924  4681              MOV      r9,r0
000926  f9b40018          LDRSH    r0,[r4,#0x18]
00092a  f7fffffe          BL       GUI_ALLOC_h2p
00092e  6880              LDR      r0,[r0,#8]
000930  4632              MOV      r2,r6
000932  4629              MOV      r1,r5
000934  f8d08000          LDR      r8,[r0,#0]
000938  4648              MOV      r0,r9
00093a  47c0              BLX      r8
                  |L1.2364|
;;;557      }
;;;558    }
00093c  e8bd83f8          POP      {r3-r9,pc}
;;;559    
                          ENDP

                  _GetPixelIndex PROC
;;;563    */
;;;564    static unsigned int _GetPixelIndex(int x, int y) {
000940  b5f8              PUSH     {r3-r7,lr}
000942  4604              MOV      r4,r0
000944  460d              MOV      r5,r1
;;;565      U8* pData;
;;;566      int Bit;
;;;567      pData = _XY2PTR_BITOFFSET(x, y, &Bit);
000946  466a              MOV      r2,sp
000948  4629              MOV      r1,r5
00094a  4620              MOV      r0,r4
00094c  f7fffffe          BL       _XY2PTR_BITOFFSET
000950  4606              MOV      r6,r0
;;;568      return (*pData >> Bit) & 1;
000952  7830              LDRB     r0,[r6,#0]
000954  9900              LDR      r1,[sp,#0]
000956  fa40f001          ASR      r0,r0,r1
00095a  f0000001          AND      r0,r0,#1
;;;569    }
00095e  bdf8              POP      {r3-r7,pc}
;;;570    
                          ENDP

                  |L1.2400|
                          DCD      GUI_Context

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  aID
000000  00000001          DCW      0x0000,0x0001
000004  00020003          DCW      0x0002,0x0003
000008  00040005          DCW      0x0004,0x0005
00000c  00060007          DCW      0x0006,0x0007
000010  00080009          DCW      0x0008,0x0009
000014  000a000b          DCW      0x000a,0x000b
000018  000c000d          DCW      0x000c,0x000d
00001c  000e000f          DCW      0x000e,0x000f
                  GUI_MEMDEV__APIList1
                          DCD      GUI_MEMDEV__Color2Index
                          DCD      GUI_MEMDEV__Index2Color
                          DCD      GUI_MEMDEV__GetIndexMask
                          DCD      _DrawBitmap
                          DCD      _DrawHLine
                          DCD      _DrawVLine
                          DCD      _FillRect
                          DCD      _GetPixelIndex
                          DCD      GUI_MEMDEV__GetRect
                          DCD      _SetPixelIndex
                          DCD      _XorPixel
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000001
