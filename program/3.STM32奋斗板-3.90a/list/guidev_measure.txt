; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\guidev_measure.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\guidev_measure.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -I.\GUI\AntiAlias -I.\GUI\Config -I.\GUI\ConvertColor -I.\GUI\ConvertMono -I.\GUI\Core -I.\GUI\Font -I.\GUI\GUI_X -I.\GUI\JPEG -I.\GUI\LCDDriver -I.\GUI\MemDev -I.\GUI\MultiLayer -I.\GUI\Widget -I.\GUI\WM -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\INC\ST\STM32F10x -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\guidev_measure.crf GUI\MemDev\GUIDEV_Measure.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _MarkPixel PROC
;;;69     */
;;;70     static void _MarkPixel(int x, int y) {
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;71       GUI_MEASDEV* pDev = (GUI_MEASDEV*)(GUI_MEMDEV_H2P(GUI_Context.hDevData));
000006  49e2              LDR      r1,|L1.912|
000008  f9b1004c          LDRSH    r0,[r1,#0x4c]  ; GUI_Context
00000c  f7fffffe          BL       GUI_ALLOC_h2p
000010  4604              MOV      r4,r0
;;;72       if (x < pDev->rUsed.x0)
000012  f9b40000          LDRSH    r0,[r4,#0]
000016  42a8              CMP      r0,r5
000018  dd01              BLE      |L1.30|
;;;73         pDev->rUsed.x0 = x;
00001a  b228              SXTH     r0,r5
00001c  8020              STRH     r0,[r4,#0]
                  |L1.30|
;;;74       if (x > pDev->rUsed.x1)
00001e  f9b40004          LDRSH    r0,[r4,#4]
000022  42a8              CMP      r0,r5
000024  da01              BGE      |L1.42|
;;;75         pDev->rUsed.x1 = x;
000026  b228              SXTH     r0,r5
000028  80a0              STRH     r0,[r4,#4]
                  |L1.42|
;;;76       if (y < pDev->rUsed.y0)
00002a  f9b40002          LDRSH    r0,[r4,#2]
00002e  42b0              CMP      r0,r6
000030  dd01              BLE      |L1.54|
;;;77         pDev->rUsed.y0 = y;
000032  b230              SXTH     r0,r6
000034  8060              STRH     r0,[r4,#2]
                  |L1.54|
;;;78       if (y > pDev->rUsed.y1)
000036  f9b40006          LDRSH    r0,[r4,#6]
00003a  42b0              CMP      r0,r6
00003c  da01              BGE      |L1.66|
;;;79         pDev->rUsed.y1 = y;
00003e  b230              SXTH     r0,r6
000040  80e0              STRH     r0,[r4,#6]
                  |L1.66|
;;;80     }
000042  bd70              POP      {r4-r6,pc}
;;;81     
                          ENDP

                  _MarkRect PROC
;;;85     */
;;;86     static void _MarkRect(int x0, int y0, int x1, int y1) {
000044  e92d41f0          PUSH     {r4-r8,lr}
000048  4606              MOV      r6,r0
00004a  4688              MOV      r8,r1
00004c  4617              MOV      r7,r2
00004e  461d              MOV      r5,r3
;;;87       GUI_MEASDEV* pDev = (GUI_MEASDEV*)(GUI_MEMDEV_H2P(GUI_Context.hDevData));
000050  49cf              LDR      r1,|L1.912|
000052  f9b1004c          LDRSH    r0,[r1,#0x4c]  ; GUI_Context
000056  f7fffffe          BL       GUI_ALLOC_h2p
00005a  4604              MOV      r4,r0
;;;88       if (x0 < pDev->rUsed.x0)
00005c  f9b40000          LDRSH    r0,[r4,#0]
000060  42b0              CMP      r0,r6
000062  dd01              BLE      |L1.104|
;;;89         pDev->rUsed.x0 = x0;
000064  b230              SXTH     r0,r6
000066  8020              STRH     r0,[r4,#0]
                  |L1.104|
;;;90       if (x1 > pDev->rUsed.x1)
000068  f9b40004          LDRSH    r0,[r4,#4]
00006c  42b8              CMP      r0,r7
00006e  da01              BGE      |L1.116|
;;;91         pDev->rUsed.x1 = x1;
000070  b238              SXTH     r0,r7
000072  80a0              STRH     r0,[r4,#4]
                  |L1.116|
;;;92       if (y1 < pDev->rUsed.y0)
000074  f9b40002          LDRSH    r0,[r4,#2]
000078  42a8              CMP      r0,r5
00007a  dd02              BLE      |L1.130|
;;;93         pDev->rUsed.y0 = y0;
00007c  fa0ff088          SXTH     r0,r8
000080  8060              STRH     r0,[r4,#2]
                  |L1.130|
;;;94       if (y1 > pDev->rUsed.y1)
000082  f9b40006          LDRSH    r0,[r4,#6]
000086  42a8              CMP      r0,r5
000088  da01              BGE      |L1.142|
;;;95         pDev->rUsed.y1 = y1;
00008a  b228              SXTH     r0,r5
00008c  80e0              STRH     r0,[r4,#6]
                  |L1.142|
;;;96     }
00008e  e8bd81f0          POP      {r4-r8,pc}
;;;97     
                          ENDP

                  _DrawBitmap PROC
;;;101    */
;;;102    static void _DrawBitmap(int x0, int y0, int xsize, int ysize,
000092  e92d5ff0          PUSH     {r4-r12,lr}
;;;103                           int BitsPerPixel, int BytesPerLine,
;;;104                           const U8 GUI_UNI_PTR * pData, int Diff,
;;;105                           const LCD_PIXELINDEX* pTrans)
;;;106    {
000096  4604              MOV      r4,r0
000098  460d              MOV      r5,r1
00009a  4616              MOV      r6,r2
00009c  461f              MOV      r7,r3
00009e  e9ddab0c          LDRD     r10,r11,[sp,#0x30]
0000a2  e9dd890a          LDRD     r8,r9,[sp,#0x28]
;;;107      GUI_USE_PARA(BitsPerPixel);
0000a6  bf00              NOP      
;;;108      GUI_USE_PARA(BytesPerLine);
0000a8  bf00              NOP      
;;;109      GUI_USE_PARA(pData);
0000aa  bf00              NOP      
;;;110      GUI_USE_PARA(Diff);
0000ac  bf00              NOP      
;;;111      GUI_USE_PARA(pTrans);
0000ae  980e              LDR      r0,[sp,#0x38]
0000b0  900e              STR      r0,[sp,#0x38]
;;;112      _MarkRect(x0, y0, x0 + xsize - 1, y0 + ysize - 1);
0000b2  eb050007          ADD      r0,r5,r7
0000b6  f1a00301          SUB      r3,r0,#1
0000ba  eb040006          ADD      r0,r4,r6
0000be  f1a00201          SUB      r2,r0,#1
0000c2  4629              MOV      r1,r5
0000c4  4620              MOV      r0,r4
0000c6  f7fffffe          BL       _MarkRect
;;;113    }
0000ca  e8bd9ff0          POP      {r4-r12,pc}
;;;114    
                          ENDP

                  _DrawHLine PROC
;;;118    */
;;;119    static void _DrawHLine(int x0, int y,  int x1) {
0000ce  b570              PUSH     {r4-r6,lr}
0000d0  4605              MOV      r5,r0
0000d2  460c              MOV      r4,r1
0000d4  4616              MOV      r6,r2
;;;120      _MarkRect(x0, y, x1, y);
0000d6  4623              MOV      r3,r4
0000d8  4632              MOV      r2,r6
0000da  4621              MOV      r1,r4
0000dc  4628              MOV      r0,r5
0000de  f7fffffe          BL       _MarkRect
;;;121    }
0000e2  bd70              POP      {r4-r6,pc}
;;;122    
                          ENDP

                  _DrawVLine PROC
;;;126    */
;;;127    static void _DrawVLine(int x , int y0,  int y1) {
0000e4  b570              PUSH     {r4-r6,lr}
0000e6  4604              MOV      r4,r0
0000e8  460e              MOV      r6,r1
0000ea  4615              MOV      r5,r2
;;;128      _MarkRect(x, y0, x, y1);
0000ec  462b              MOV      r3,r5
0000ee  4622              MOV      r2,r4
0000f0  4631              MOV      r1,r6
0000f2  4620              MOV      r0,r4
0000f4  f7fffffe          BL       _MarkRect
;;;129    }
0000f8  bd70              POP      {r4-r6,pc}
;;;130    
                          ENDP

                  _SetPixelIndex PROC
;;;134    */
;;;135    static void _SetPixelIndex(int x, int y, int Index) {
0000fa  b570              PUSH     {r4-r6,lr}
0000fc  4605              MOV      r5,r0
0000fe  460e              MOV      r6,r1
000100  4614              MOV      r4,r2
;;;136      GUI_USE_PARA(Index);
000102  bf00              NOP      
;;;137      _MarkPixel(x, y);
000104  4631              MOV      r1,r6
000106  4628              MOV      r0,r5
000108  f7fffffe          BL       _MarkPixel
;;;138    }
00010c  bd70              POP      {r4-r6,pc}
;;;139    
                          ENDP

                  _XorPixel PROC
;;;143    */
;;;144    static void _XorPixel(int x, int y) {
00010e  b570              PUSH     {r4-r6,lr}
000110  4604              MOV      r4,r0
000112  460d              MOV      r5,r1
;;;145      _MarkPixel(x, y);
000114  4629              MOV      r1,r5
000116  4620              MOV      r0,r4
000118  f7fffffe          BL       _MarkPixel
;;;146    }
00011c  bd70              POP      {r4-r6,pc}
;;;147    
                          ENDP

                  _GetPixelIndex PROC
;;;151    */
;;;152    static unsigned int _GetPixelIndex(int x, int y) { 
00011e  4602              MOV      r2,r0
;;;153      GUI_USE_PARA(x);
000120  bf00              NOP      
;;;154      GUI_USE_PARA(y);
000122  bf00              NOP      
;;;155      return 0;
000124  f04f0000          MOV      r0,#0
;;;156    }
000128  4770              BX       lr
;;;157    
                          ENDP

                  _FillRect PROC
;;;161    */
;;;162    static void _FillRect(int x0, int y0, int x1, int y1) {
00012a  e92d41f0          PUSH     {r4-r8,lr}
00012e  4604              MOV      r4,r0
000130  460d              MOV      r5,r1
000132  4616              MOV      r6,r2
000134  461f              MOV      r7,r3
;;;163      _MarkRect(x0, y0, x1, y1);
000136  463b              MOV      r3,r7
000138  4632              MOV      r2,r6
00013a  4629              MOV      r1,r5
00013c  4620              MOV      r0,r4
00013e  f7fffffe          BL       _MarkRect
;;;164    }
000142  e8bd81f0          POP      {r4-r8,pc}
;;;165    
                          ENDP

                  _GetRect PROC
;;;169    */
;;;170    static void _GetRect(LCD_RECT* pRect) {
000146  4993              LDR      r1,|L1.916|
;;;171      pRect->x0 = pRect->y0 = -4095;
000148  8041              STRH     r1,[r0,#2]
00014a  8001              STRH     r1,[r0,#0]
;;;172      pRect->x1 = pRect->y1 =  4095;
00014c  f64071ff          MOV      r1,#0xfff
000150  80c1              STRH     r1,[r0,#6]
000152  8081              STRH     r1,[r0,#4]
;;;173    }
000154  4770              BX       lr
;;;174    
                          ENDP

                  _Color2Index PROC
;;;178    */
;;;179    static unsigned int _Color2Index(LCD_COLOR Color) {
000156  b570              PUSH     {r4-r6,lr}
000158  4604              MOV      r4,r0
;;;180      GUI_MEASDEV* pDev = GUI_MEASDEV_H2P(GUI_Context.hDevData);
00015a  498d              LDR      r1,|L1.912|
00015c  f9b1004c          LDRSH    r0,[r1,#0x4c]  ; GUI_Context
000160  f7fffffe          BL       GUI_ALLOC_h2p
000164  4605              MOV      r5,r0
;;;181      return pDev->pfColor2Index(Color);
000166  4620              MOV      r0,r4
000168  68a9              LDR      r1,[r5,#8]
00016a  4788              BLX      r1
;;;182    }
00016c  bd70              POP      {r4-r6,pc}
;;;183    
                          ENDP

                  _Index2Color PROC
;;;187    */
;;;188    static LCD_COLOR _Index2Color(int Index) {
00016e  b570              PUSH     {r4-r6,lr}
000170  4604              MOV      r4,r0
;;;189      GUI_MEASDEV* pDev = GUI_MEASDEV_H2P(GUI_Context.hDevData);
000172  4987              LDR      r1,|L1.912|
000174  f9b1004c          LDRSH    r0,[r1,#0x4c]  ; GUI_Context
000178  f7fffffe          BL       GUI_ALLOC_h2p
00017c  4605              MOV      r5,r0
;;;190      return pDev->pfIndex2Color(Index);
00017e  4620              MOV      r0,r4
000180  68e9              LDR      r1,[r5,#0xc]
000182  4788              BLX      r1
;;;191    }
000184  bd70              POP      {r4-r6,pc}
;;;192    
                          ENDP

                  _GetIndexMask PROC
;;;196    */
;;;197    static unsigned int _GetIndexMask(void) {
000186  b510              PUSH     {r4,lr}
;;;198      GUI_MEASDEV* pDev = GUI_MEASDEV_H2P(GUI_Context.hDevData);
000188  4981              LDR      r1,|L1.912|
00018a  f9b1004c          LDRSH    r0,[r1,#0x4c]  ; GUI_Context
00018e  f7fffffe          BL       GUI_ALLOC_h2p
000192  4604              MOV      r4,r0
;;;199      return pDev->pfGetIndexMask();
000194  6920              LDR      r0,[r4,#0x10]
000196  4780              BLX      r0
;;;200    }
000198  bd10              POP      {r4,pc}
;;;201    
                          ENDP

                  _CalcPolyRect PROC
;;;205    */
;;;206    static void _CalcPolyRect(GUI_RECT *pr, const GUI_POINT* paPoint, int NumPoints) {
00019a  e92d43f0          PUSH     {r4-r9,lr}
00019e  4614              MOV      r4,r2
;;;207      int i;
;;;208      int xMin, xMax, yMin, yMax;
;;;209      xMin = GUI_XMAX;
0001a0  f64078ff          MOV      r8,#0xfff
;;;210      yMin = GUI_YMAX;
0001a4  4647              MOV      r7,r8
;;;211      xMax = GUI_XMIN;
0001a6  4e7b              LDR      r6,|L1.916|
;;;212      yMax = GUI_YMIN;
0001a8  46b4              MOV      r12,r6
;;;213      for (i = 0; i  <NumPoints; i++) {
0001aa  f04f0500          MOV      r5,#0
0001ae  e013              B        |L1.472|
                  |L1.432|
;;;214        int x = paPoint->x;
0001b0  f9b12000          LDRSH    r2,[r1,#0]
;;;215        int y = paPoint->y;
0001b4  f9b13002          LDRSH    r3,[r1,#2]
;;;216        if (xMin > x)
0001b8  4590              CMP      r8,r2
0001ba  dd00              BLE      |L1.446|
;;;217          xMin = x;
0001bc  4690              MOV      r8,r2
                  |L1.446|
;;;218        if (xMax < x)
0001be  4296              CMP      r6,r2
0001c0  da00              BGE      |L1.452|
;;;219          xMax = x;
0001c2  4616              MOV      r6,r2
                  |L1.452|
;;;220        if (yMin > y)
0001c4  429f              CMP      r7,r3
0001c6  dd00              BLE      |L1.458|
;;;221          yMin = y;
0001c8  461f              MOV      r7,r3
                  |L1.458|
;;;222        if (yMax < y)
0001ca  459c              CMP      r12,r3
0001cc  da00              BGE      |L1.464|
;;;223          yMax = y;
0001ce  469c              MOV      r12,r3
                  |L1.464|
;;;224        paPoint++;
0001d0  f1010104          ADD      r1,r1,#4
0001d4  f1050501          ADD      r5,r5,#1              ;213
                  |L1.472|
0001d8  42a5              CMP      r5,r4                 ;213
0001da  dbe9              BLT      |L1.432|
;;;225      }
;;;226      pr->x0 = xMin;
0001dc  fa0ff288          SXTH     r2,r8
0001e0  8002              STRH     r2,[r0,#0]
;;;227      pr->x1 = xMax;
0001e2  b232              SXTH     r2,r6
0001e4  8082              STRH     r2,[r0,#4]
;;;228      pr->y0 = yMin;
0001e6  b23a              SXTH     r2,r7
0001e8  8042              STRH     r2,[r0,#2]
;;;229      pr->y1 = yMax;
0001ea  fa0ff28c          SXTH     r2,r12
0001ee  80c2              STRH     r2,[r0,#6]
;;;230    }
0001f0  e8bd83f0          POP      {r4-r9,pc}
;;;231    
                          ENDP

                  _FillPolygon PROC
;;;235    */
;;;236    static void _FillPolygon(const GUI_POINT* paPoint, int NumPoints, int x0, int y0) {
0001f4  e92d41fc          PUSH     {r2-r8,lr}
0001f8  4604              MOV      r4,r0
0001fa  460d              MOV      r5,r1
0001fc  4616              MOV      r6,r2
0001fe  461f              MOV      r7,r3
;;;237      GUI_RECT r;
;;;238      _CalcPolyRect(&r, paPoint, NumPoints);
000200  462a              MOV      r2,r5
000202  4621              MOV      r1,r4
000204  4668              MOV      r0,sp
000206  f7fffffe          BL       _CalcPolyRect
;;;239      GUI_MoveRect(&r, x0, y0);
00020a  463a              MOV      r2,r7
00020c  4631              MOV      r1,r6
00020e  4668              MOV      r0,sp
000210  f7fffffe          BL       GUI_MoveRect
;;;240      _MarkRect(r.x0, r.y0, r.x1, r.y1);
000214  f9bd3006          LDRSH    r3,[sp,#6]
000218  f9bd2004          LDRSH    r2,[sp,#4]
00021c  f9bd1002          LDRSH    r1,[sp,#2]
000220  f9bd0000          LDRSH    r0,[sp,#0]
000224  f7fffffe          BL       _MarkRect
;;;241    }
000228  e8bd81fc          POP      {r2-r8,pc}
;;;242    
                          ENDP

                  _FillPolygonAA PROC
;;;246    */
;;;247    static void _FillPolygonAA(const GUI_POINT* paPoint, int NumPoints, int x0, int y0) {
00022c  e92d41fc          PUSH     {r2-r8,lr}
000230  4604              MOV      r4,r0
000232  460d              MOV      r5,r1
000234  4616              MOV      r6,r2
000236  461f              MOV      r7,r3
;;;248      #if GUI_SUPPORT_AA
;;;249        GUI_RECT r;
;;;250        _CalcPolyRect(&r, paPoint, NumPoints);
000238  462a              MOV      r2,r5
00023a  4621              MOV      r1,r4
00023c  4668              MOV      r0,sp
00023e  f7fffffe          BL       _CalcPolyRect
;;;251        GUI_MoveRect(&r, x0, y0);
000242  463a              MOV      r2,r7
000244  4631              MOV      r1,r6
000246  4668              MOV      r0,sp
000248  f7fffffe          BL       GUI_MoveRect
;;;252        if (GUI_Context.AA_HiResEnable) {
00024c  4850              LDR      r0,|L1.912|
00024e  f890005d          LDRB     r0,[r0,#0x5d]  ; GUI_Context
000252  b398              CBZ      r0,|L1.700|
;;;253          r.x0 /= GUI_Context.AA_Factor;
000254  f9bd0000          LDRSH    r0,[sp,#0]
000258  494d              LDR      r1,|L1.912|
00025a  f891105c          LDRB     r1,[r1,#0x5c]  ; GUI_Context
00025e  fb90f0f1          SDIV     r0,r0,r1
000262  b200              SXTH     r0,r0
000264  f8ad0000          STRH     r0,[sp,#0]
;;;254          r.y0 /= GUI_Context.AA_Factor;
000268  f9bd0002          LDRSH    r0,[sp,#2]
00026c  4948              LDR      r1,|L1.912|
00026e  f891105c          LDRB     r1,[r1,#0x5c]  ; GUI_Context
000272  fb90f0f1          SDIV     r0,r0,r1
000276  b200              SXTH     r0,r0
000278  f8ad0002          STRH     r0,[sp,#2]
;;;255          r.x1 = (r.x1 + GUI_Context.AA_Factor - 1) / GUI_Context.AA_Factor;
00027c  f9bd0004          LDRSH    r0,[sp,#4]
000280  4943              LDR      r1,|L1.912|
000282  f891105c          LDRB     r1,[r1,#0x5c]  ; GUI_Context
000286  4408              ADD      r0,r0,r1
000288  f1a00001          SUB      r0,r0,#1
00028c  4940              LDR      r1,|L1.912|
00028e  f891105c          LDRB     r1,[r1,#0x5c]  ; GUI_Context
000292  fb90f0f1          SDIV     r0,r0,r1
000296  b200              SXTH     r0,r0
000298  f8ad0004          STRH     r0,[sp,#4]
;;;256          r.y1 = (r.y1 + GUI_Context.AA_Factor - 1) / GUI_Context.AA_Factor;
00029c  f9bd0006          LDRSH    r0,[sp,#6]
0002a0  493b              LDR      r1,|L1.912|
0002a2  f891105c          LDRB     r1,[r1,#0x5c]  ; GUI_Context
0002a6  4408              ADD      r0,r0,r1
0002a8  f1a00001          SUB      r0,r0,#1
0002ac  4938              LDR      r1,|L1.912|
0002ae  f891105c          LDRB     r1,[r1,#0x5c]  ; GUI_Context
0002b2  fb90f0f1          SDIV     r0,r0,r1
0002b6  b200              SXTH     r0,r0
0002b8  f8ad0006          STRH     r0,[sp,#6]
                  |L1.700|
;;;257        }
;;;258        _MarkRect(r.x0, r.y0, r.x1, r.y1);
0002bc  f9bd3006          LDRSH    r3,[sp,#6]
0002c0  f9bd2004          LDRSH    r2,[sp,#4]
0002c4  f9bd1002          LDRSH    r1,[sp,#2]
0002c8  f9bd0000          LDRSH    r0,[sp,#0]
0002cc  f7fffffe          BL       _MarkRect
;;;259      #else
;;;260        GUI_USE_PARA(paPoint);
;;;261        GUI_USE_PARA(NumPoints);
;;;262        GUI_USE_PARA(x0);
;;;263        GUI_USE_PARA(y0);
;;;264      #endif
;;;265    }
0002d0  e8bd81fc          POP      {r2-r8,pc}
;;;266    
                          ENDP

                  GUI_MEASDEV_Delete PROC
;;;297    */
;;;298    void GUI_MEASDEV_Delete(GUI_MEASDEV_Handle hMemDev) {
0002d4  b510              PUSH     {r4,lr}
0002d6  4604              MOV      r4,r0
;;;299      /* Make sure memory device is not used */
;;;300      if ((GUI_Context.hDevData = hMemDev) != 0) {
0002d8  482d              LDR      r0,|L1.912|
0002da  f8a0404c          STRH     r4,[r0,#0x4c]
0002de  b10c              CBZ      r4,|L1.740|
;;;301    	  GUI_SelectLCD();
0002e0  f7fffffe          BL       GUI_SelectLCD
                  |L1.740|
;;;302      }
;;;303      GUI_ALLOC_Free(hMemDev);
0002e4  4620              MOV      r0,r4
0002e6  f7fffffe          BL       GUI_ALLOC_Free
;;;304    }
0002ea  bd10              POP      {r4,pc}
;;;305    
                          ENDP

                  GUI_MEASDEV_ClearRect PROC
;;;309    */
;;;310    void GUI_MEASDEV_ClearRect(GUI_MEASDEV_Handle hMemDev) {
0002ec  b570              PUSH     {r4-r6,lr}
0002ee  4605              MOV      r5,r0
;;;311      if (hMemDev) {
0002f0  b165              CBZ      r5,|L1.780|
;;;312        GUI_MEASDEV* pDevData;
;;;313        GUI_LOCK();
;;;314        pDevData = (GUI_MEASDEV*)GUI_ALLOC_h2p(hMemDev);
0002f2  4628              MOV      r0,r5
0002f4  f7fffffe          BL       GUI_ALLOC_h2p
0002f8  4604              MOV      r4,r0
;;;315        pDevData->rUsed.x0 = GUI_XMAX;
0002fa  f64070ff          MOV      r0,#0xfff
0002fe  8020              STRH     r0,[r4,#0]
;;;316        pDevData->rUsed.y0 = GUI_YMAX;
000300  8060              STRH     r0,[r4,#2]
;;;317        pDevData->rUsed.x1 = GUI_XMIN;
000302  f24f0001          MOV      r0,#0xf001
000306  80a0              STRH     r0,[r4,#4]
;;;318        pDevData->rUsed.y1 = GUI_YMIN;
000308  80e0              STRH     r0,[r4,#6]
;;;319        GUI_UNLOCK();
;;;320      } 
00030a  bf00              NOP      
                  |L1.780|
;;;321    }
00030c  bd70              POP      {r4-r6,pc}
;;;322    
                          ENDP

                  GUI_MEASDEV_Create PROC
;;;326    */
;;;327    GUI_MEASDEV_Handle GUI_MEASDEV_Create(void) {
00030e  b570              PUSH     {r4-r6,lr}
;;;328      int MemSize;
;;;329      GUI_MEASDEV_Handle hMemDev;
;;;330      MemSize = sizeof(GUI_MEASDEV);
000310  f04f0414          MOV      r4,#0x14
;;;331      hMemDev = GUI_ALLOC_AllocZero(MemSize);
000314  4620              MOV      r0,r4
000316  f7fffffe          BL       GUI_ALLOC_AllocZero
00031a  4605              MOV      r5,r0
;;;332      if (hMemDev) {
00031c  b17d              CBZ      r5,|L1.830|
;;;333        GUI_MEASDEV* pDevData;
;;;334        GUI_LOCK();
;;;335        pDevData = (GUI_MEASDEV*)GUI_ALLOC_h2p(hMemDev);
00031e  4628              MOV      r0,r5
000320  f7fffffe          BL       GUI_ALLOC_h2p
000324  4606              MOV      r6,r0
;;;336        pDevData->pfColor2Index = GUI_Context.pDeviceAPI->pfColor2Index;    
000326  481a              LDR      r0,|L1.912|
000328  6c80              LDR      r0,[r0,#0x48]  ; GUI_Context
00032a  6800              LDR      r0,[r0,#0]
00032c  60b0              STR      r0,[r6,#8]
;;;337        pDevData->pfIndex2Color = GUI_Context.pDeviceAPI->pfIndex2Color;
00032e  4818              LDR      r0,|L1.912|
000330  6c80              LDR      r0,[r0,#0x48]  ; GUI_Context
000332  6840              LDR      r0,[r0,#4]
000334  60f0              STR      r0,[r6,#0xc]
;;;338        GUI_MEASDEV_ClearRect(hMemDev);
000336  4628              MOV      r0,r5
000338  f7fffffe          BL       GUI_MEASDEV_ClearRect
;;;339        GUI_UNLOCK();
;;;340      } else {
00033c  bf00              NOP      
                  |L1.830|
;;;341        GUI_DEBUG_WARN("GUI_MEASDEV_Create: Alloc failed");
;;;342      }
;;;343      return hMemDev;
00033e  4628              MOV      r0,r5
;;;344    }
000340  bd70              POP      {r4-r6,pc}
;;;345    
                          ENDP

                  GUI_MEASDEV_Select PROC
;;;349    */
;;;350    void GUI_MEASDEV_Select(GUI_MEASDEV_Handle hMem) {
000342  b510              PUSH     {r4,lr}
000344  4604              MOV      r4,r0
;;;351      if (hMem == 0) {
000346  b914              CBNZ     r4,|L1.846|
;;;352        GUI_SelectLCD();
000348  f7fffffe          BL       GUI_SelectLCD
00034c  e00c              B        |L1.872|
                  |L1.846|
;;;353      } else {
;;;354        #if GUI_WINSUPPORT
;;;355          WM_Deactivate();
00034e  f7fffffe          BL       WM_Deactivate
;;;356        #endif
;;;357        GUI_Context.hDevData     = hMem;
000352  480f              LDR      r0,|L1.912|
000354  f8a0404c          STRH     r4,[r0,#0x4c]
;;;358        GUI_Context.pDeviceAPI   = &_APIList;
000358  480f              LDR      r0,|L1.920|
00035a  490d              LDR      r1,|L1.912|
00035c  6488              STR      r0,[r1,#0x48]  ; GUI_Context
;;;359        GUI_Context.pClipRect_HL = NULL;
00035e  f04f0000          MOV      r0,#0
000362  6108              STR      r0,[r1,#0x10]  ; GUI_Context
;;;360        LCD_SetClipRectMax();
000364  f7fffffe          BL       LCD_SetClipRectMax
                  |L1.872|
;;;361      }
;;;362    }
000368  bd10              POP      {r4,pc}
;;;363    
                          ENDP

                  GUI_MEASDEV_GetRect PROC
;;;367    */
;;;368    void GUI_MEASDEV_GetRect(GUI_MEASDEV_Handle hMem, GUI_RECT* pRect) {
00036a  b570              PUSH     {r4-r6,lr}
00036c  4606              MOV      r6,r0
00036e  460c              MOV      r4,r1
;;;369      if (hMem) {
000370  b16e              CBZ      r6,|L1.910|
;;;370        GUI_MEASDEV* pDev;
;;;371        GUI_LOCK();
;;;372        pDev = (GUI_MEASDEV*)GUI_ALLOC_h2p(hMem);
000372  4630              MOV      r0,r6
000374  f7fffffe          BL       GUI_ALLOC_h2p
000378  4605              MOV      r5,r0
;;;373        if (pRect) {
00037a  b13c              CBZ      r4,|L1.908|
;;;374          pRect->x0 = pDev->rUsed.x0;
00037c  8828              LDRH     r0,[r5,#0]
00037e  8020              STRH     r0,[r4,#0]
;;;375          pRect->y0 = pDev->rUsed.y0;
000380  8868              LDRH     r0,[r5,#2]
000382  8060              STRH     r0,[r4,#2]
;;;376          pRect->x1 = pDev->rUsed.x1;
000384  88a8              LDRH     r0,[r5,#4]
000386  80a0              STRH     r0,[r4,#4]
;;;377          pRect->y1 = pDev->rUsed.y1;
000388  88e8              LDRH     r0,[r5,#6]
00038a  80e0              STRH     r0,[r4,#6]
                  |L1.908|
;;;378        }
;;;379        GUI_UNLOCK();
;;;380      }
00038c  bf00              NOP      
                  |L1.910|
;;;381    }
00038e  bd70              POP      {r4-r6,pc}
;;;382    
                          ENDP

                  |L1.912|
                          DCD      GUI_Context
                  |L1.916|
                          DCD      0xfffff001
                  |L1.920|
                          DCD      _APIList

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  _APIList
                          DCD      _Color2Index
                          DCD      _Index2Color
                          DCD      _GetIndexMask
                          DCD      _DrawBitmap
                          DCD      _DrawHLine
                          DCD      _DrawVLine
                          DCD      _FillRect
                          DCD      _GetPixelIndex
                          DCD      _GetRect
                          DCD      _SetPixelIndex
                          DCD      _XorPixel
                          DCD      0x00000000
                          DCD      _FillPolygon
                          DCD      _FillPolygonAA
                          DCD      0x00000000
                          DCD      0x00000000
