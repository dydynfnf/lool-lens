; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\editbin.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\editbin.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -I.\GUI\AntiAlias -I.\GUI\Config -I.\GUI\ConvertColor -I.\GUI\ConvertMono -I.\GUI\Core -I.\GUI\Font -I.\GUI\GUI_X -I.\GUI\JPEG -I.\GUI\LCDDriver -I.\GUI\MemDev -I.\GUI\MultiLayer -I.\GUI\Widget -I.\GUI\WM -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\INC\ST\STM32F10x -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\editbin.crf GUI\Widget\EDITBin.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _BinChar2Int PROC
;;;38     */
;;;39     static int _BinChar2Int(int Char) {
000000  4601              MOV      r1,r0
;;;40       if ((Char >= '0') && (Char <= '1'))
000002  2930              CMP      r1,#0x30
000004  db04              BLT      |L1.16|
000006  2931              CMP      r1,#0x31
000008  dc02              BGT      |L1.16|
;;;41         return Char - '0';
00000a  f1a10030          SUB      r0,r1,#0x30
                  |L1.14|
;;;42       return -1;
;;;43     }
00000e  4770              BX       lr
                  |L1.16|
000010  f04f30ff          MOV      r0,#0xffffffff        ;42
000014  e7fb              B        |L1.14|
;;;44     
                          ENDP

                  _GetNumDigits PROC
;;;48     */
;;;49     static int _GetNumDigits(U32 Value) {
000016  4601              MOV      r1,r0
;;;50       int Ret;
;;;51       for (Ret = 0; Value; Value >>= 1, Ret++);
000018  f04f0000          MOV      r0,#0
00001c  e003              B        |L1.38|
                  |L1.30|
00001e  ea4f0151          LSR      r1,r1,#1
000022  f1000001          ADD      r0,r0,#1
                  |L1.38|
000026  2900              CMP      r1,#0
000028  d1f9              BNE      |L1.30|
;;;52       return Ret;
;;;53     }
00002a  4770              BX       lr
;;;54     
                          ENDP

                  _UpdateBuffer PROC
;;;58     */
;;;59     static void _UpdateBuffer(EDIT_Handle hObj) {
00002c  b538              PUSH     {r3-r5,lr}
00002e  4605              MOV      r5,r0
;;;60       char * s;
;;;61       EDIT_Obj * pObj;
;;;62       pObj = EDIT_H2P(hObj); /* The GUI needs not to be locked here. This function is called only from EDIT_AddKey which has already locked the GUI */
000030  4628              MOV      r0,r5
000032  f7fffffe          BL       GUI_ALLOC_h2p
000036  4604              MOV      r4,r0
;;;63       s = (char*) GUI_ALLOC_h2p(pObj->hpText);
000038  f9b40028          LDRSH    r0,[r4,#0x28]
00003c  f7fffffe          BL       GUI_ALLOC_h2p
000040  9000              STR      r0,[sp,#0]
;;;64       GUI_AddBin(pObj->CurrentValue, pObj->MaxLen, &s);
000042  8d62              LDRH     r2,[r4,#0x2a]
000044  b2d1              UXTB     r1,r2
000046  466a              MOV      r2,sp
000048  6be0              LDR      r0,[r4,#0x3c]
00004a  f7fffffe          BL       GUI_AddBin
;;;65     }
00004e  bd38              POP      {r3-r5,pc}
;;;66     
                          ENDP

                  _EditBin PROC
;;;70     */
;;;71     static void _EditBin(U8 Bit, EDIT_Obj* pObj, EDIT_Handle hObj) {
000050  e92d47f0          PUSH     {r4-r10,lr}
000054  4605              MOV      r5,r0
000056  460c              MOV      r4,r1
000058  4616              MOV      r6,r2
;;;72       int Pos = pObj->MaxLen - pObj->CursorPos - 1;   /* Bit position */
00005a  f9b4002a          LDRSH    r0,[r4,#0x2a]
00005e  6c21              LDR      r1,[r4,#0x40]
000060  eba00001          SUB      r0,r0,r1
000064  f1a00701          SUB      r7,r0,#1
;;;73       U32 AndMask = ~(1   << Pos);
000068  f04f0001          MOV      r0,#1
00006c  fa00f007          LSL      r0,r0,r7
000070  ea6f0900          MVN      r9,r0
;;;74       U32 OrMask  =   Bit << Pos;
000074  fa05fa07          LSL      r10,r5,r7
;;;75       I32 Result  = pObj->CurrentValue & AndMask;
000078  6be0              LDR      r0,[r4,#0x3c]
00007a  ea000809          AND      r8,r0,r9
;;;76       Result     |= OrMask;
00007e  ea48080a          ORR      r8,r8,r10
;;;77       EDIT_SetValue(hObj, Result);
000082  4641              MOV      r1,r8
000084  4630              MOV      r0,r6
000086  f7fffffe          BL       EDIT_SetValue
;;;78     }
00008a  e8bd87f0          POP      {r4-r10,pc}
;;;79     
                          ENDP

                  _GetCurrentBit PROC
;;;83     */
;;;84     static U8 _GetCurrentBit(EDIT_Obj* pObj) {
00008e  b530              PUSH     {r4,r5,lr}
000090  4601              MOV      r1,r0
;;;85       int Pos = pObj->MaxLen - pObj->CursorPos - 1;   /* Bit position */
000092  f9b1402a          LDRSH    r4,[r1,#0x2a]
000096  6c0d              LDR      r5,[r1,#0x40]
000098  eba40405          SUB      r4,r4,r5
00009c  f1a40201          SUB      r2,r4,#1
;;;86       U32 AndMask = 1 << Pos;
0000a0  f04f0401          MOV      r4,#1
0000a4  fa04f302          LSL      r3,r4,r2
;;;87       U8 Bit = (pObj->CurrentValue & AndMask) >> Pos;
0000a8  6bcc              LDR      r4,[r1,#0x3c]
0000aa  ea040403          AND      r4,r4,r3
0000ae  fa24f402          LSR      r4,r4,r2
0000b2  b2e0              UXTB     r0,r4
;;;88       return Bit;
;;;89     }
0000b4  bd30              POP      {r4,r5,pc}
;;;90     
                          ENDP

                  _AddKeyBin PROC
;;;100    */
;;;101    static void _AddKeyBin(EDIT_Handle hObj, int Key) {
0000b6  e92d41f0          PUSH     {r4-r8,lr}
0000ba  4606              MOV      r6,r0
0000bc  460d              MOV      r5,r1
;;;102      EDIT_Obj * pObj;
;;;103      pObj = EDIT_H2P(hObj); /* The GUI needs not to be locked here. This function is called only from EDIT_AddKey which has already locked the GUI */
0000be  4630              MOV      r0,r6
0000c0  f7fffffe          BL       GUI_ALLOC_h2p
0000c4  4604              MOV      r4,r0
;;;104      if (pObj) {
0000c6  2c00              CMP      r4,#0
0000c8  d047              BEQ      |L1.346|
;;;105        switch (Key) {
0000ca  2d10              CMP      r5,#0x10
0000cc  d02a              BEQ      |L1.292|
0000ce  2d11              CMP      r5,#0x11
0000d0  d004              BEQ      |L1.220|
0000d2  2d12              CMP      r5,#0x12
0000d4  d020              BEQ      |L1.280|
0000d6  2d13              CMP      r5,#0x13
0000d8  d12a              BNE      |L1.304|
0000da  e00e              B        |L1.250|
                  |L1.220|
;;;106        case GUI_KEY_UP:
;;;107          {
;;;108            int Bit = _GetCurrentBit(pObj) + 1;
0000dc  4620              MOV      r0,r4
0000de  f7fffffe          BL       _GetCurrentBit
0000e2  f1000701          ADD      r7,r0,#1
;;;109            if (Bit > 1) {
0000e6  2f01              CMP      r7,#1
0000e8  dd01              BLE      |L1.238|
;;;110              Bit = 0;
0000ea  f04f0700          MOV      r7,#0
                  |L1.238|
;;;111            }
;;;112            _EditBin(Bit, pObj, hObj);
0000ee  4632              MOV      r2,r6
0000f0  4621              MOV      r1,r4
0000f2  b2f8              UXTB     r0,r7
0000f4  f7fffffe          BL       _EditBin
;;;113          }
;;;114          break;
0000f8  e02b              B        |L1.338|
                  |L1.250|
;;;115        case GUI_KEY_DOWN:
;;;116          {
;;;117            int Bit = _GetCurrentBit(pObj) - 1;
0000fa  4620              MOV      r0,r4
0000fc  f7fffffe          BL       _GetCurrentBit
000100  f1a00701          SUB      r7,r0,#1
;;;118            if (Bit < 0) {
000104  2f00              CMP      r7,#0
000106  da01              BGE      |L1.268|
;;;119              Bit = 1;
000108  f04f0701          MOV      r7,#1
                  |L1.268|
;;;120            }
;;;121            _EditBin(Bit, pObj, hObj);
00010c  4632              MOV      r2,r6
00010e  4621              MOV      r1,r4
000110  b2f8              UXTB     r0,r7
000112  f7fffffe          BL       _EditBin
;;;122          }
;;;123          break;
000116  e01c              B        |L1.338|
                  |L1.280|
;;;124        case GUI_KEY_RIGHT:
;;;125          EDIT__SetCursorPos(pObj, pObj->CursorPos + 1);
000118  6c20              LDR      r0,[r4,#0x40]
00011a  1c41              ADDS     r1,r0,#1
00011c  4620              MOV      r0,r4
00011e  f7fffffe          BL       EDIT__SetCursorPos
;;;126          break;
000122  e016              B        |L1.338|
                  |L1.292|
;;;127        case GUI_KEY_LEFT:
;;;128          EDIT__SetCursorPos(pObj, pObj->CursorPos - 1);
000124  6c20              LDR      r0,[r4,#0x40]
000126  1e41              SUBS     r1,r0,#1
000128  4620              MOV      r0,r4
00012a  f7fffffe          BL       EDIT__SetCursorPos
;;;129          break;
00012e  e010              B        |L1.338|
                  |L1.304|
;;;130        default:
;;;131          {
;;;132            int Bit = _BinChar2Int(Key);
000130  4628              MOV      r0,r5
000132  f7fffffe          BL       _BinChar2Int
000136  4607              MOV      r7,r0
;;;133            if (Bit >= 0) {
000138  2f00              CMP      r7,#0
00013a  db09              BLT      |L1.336|
;;;134              _EditBin(Bit, pObj, hObj);
00013c  4632              MOV      r2,r6
00013e  4621              MOV      r1,r4
000140  b2f8              UXTB     r0,r7
000142  f7fffffe          BL       _EditBin
;;;135              EDIT__SetCursorPos(pObj, pObj->CursorPos + 1);
000146  6c20              LDR      r0,[r4,#0x40]
000148  1c41              ADDS     r1,r0,#1
00014a  4620              MOV      r0,r4
00014c  f7fffffe          BL       EDIT__SetCursorPos
                  |L1.336|
;;;136            }
;;;137          }
;;;138          break;
000150  bf00              NOP      
                  |L1.338|
000152  bf00              NOP                            ;114
;;;139        }
;;;140        _UpdateBuffer(hObj);
000154  4630              MOV      r0,r6
000156  f7fffffe          BL       _UpdateBuffer
                  |L1.346|
;;;141      }
;;;142    }
00015a  e8bd81f0          POP      {r4-r8,pc}
;;;143    
                          ENDP

                  EDIT_SetBinMode PROC
;;;153    */
;;;154    void EDIT_SetBinMode(EDIT_Handle hEdit, U32 Value, U32 Min, U32 Max) {
00015e  e92d47f0          PUSH     {r4-r10,lr}
000162  4607              MOV      r7,r0
000164  4688              MOV      r8,r1
000166  4691              MOV      r9,r2
000168  461e              MOV      r6,r3
;;;155      EDIT_Obj* pObj;
;;;156      int MaxLen;
;;;157      WM_LOCK();
;;;158      if (hEdit) {
00016a  b36f              CBZ      r7,|L1.456|
;;;159        pObj = EDIT_H2P(hEdit);
00016c  4638              MOV      r0,r7
00016e  f7fffffe          BL       GUI_ALLOC_h2p
000172  4604              MOV      r4,r0
;;;160        pObj->pfAddKeyEx    = _AddKeyBin;
000174  4815              LDR      r0,|L1.460|
000176  64e0              STR      r0,[r4,#0x4c]
;;;161        pObj->pfUpdateBuffer = _UpdateBuffer;
000178  4815              LDR      r0,|L1.464|
00017a  6520              STR      r0,[r4,#0x50]
;;;162        pObj->CurrentValue = Value;
00017c  f8c4803c          STR      r8,[r4,#0x3c]
;;;163        pObj->CursorPos = 0;
000180  f04f0000          MOV      r0,#0
000184  6420              STR      r0,[r4,#0x40]
;;;164        MaxLen = pObj->MaxLen;
000186  f9b4502a          LDRSH    r5,[r4,#0x2a]
;;;165        if (MaxLen <= 0 ) {
00018a  2d00              CMP      r5,#0
00018c  dc03              BGT      |L1.406|
;;;166          MaxLen = _GetNumDigits(Max);
00018e  4630              MOV      r0,r6
000190  f7fffffe          BL       _GetNumDigits
000194  4605              MOV      r5,r0
                  |L1.406|
;;;167        }
;;;168        if (MaxLen > 32) {
000196  2d20              CMP      r5,#0x20
000198  dd01              BLE      |L1.414|
;;;169          MaxLen = 32;
00019a  f04f0520          MOV      r5,#0x20
                  |L1.414|
;;;170        }
;;;171        if (MaxLen != pObj->MaxLen) {
00019e  f9b4002a          LDRSH    r0,[r4,#0x2a]
0001a2  42a8              CMP      r0,r5
0001a4  d003              BEQ      |L1.430|
;;;172          EDIT_SetMaxLen(hEdit, MaxLen);
0001a6  4629              MOV      r1,r5
0001a8  4638              MOV      r0,r7
0001aa  f7fffffe          BL       EDIT_SetMaxLen
                  |L1.430|
;;;173        }
;;;174        pObj->Min = Min;
0001ae  f8c49030          STR      r9,[r4,#0x30]
;;;175        pObj->Max = Max;
0001b2  6366              STR      r6,[r4,#0x34]
;;;176        pObj->EditMode = GUI_EDIT_MODE_OVERWRITE;
0001b4  f04f0001          MOV      r0,#1
0001b8  f8840048          STRB     r0,[r4,#0x48]
;;;177        _UpdateBuffer(hEdit);
0001bc  4638              MOV      r0,r7
0001be  f7fffffe          BL       _UpdateBuffer
;;;178        WM_Invalidate(hEdit);
0001c2  4638              MOV      r0,r7
0001c4  f7fffffe          BL       WM_InvalidateWindow
                  |L1.456|
;;;179      }
;;;180      WM_UNLOCK();
;;;181    }
0001c8  e8bd87f0          POP      {r4-r10,pc}
;;;182    
                          ENDP

                  |L1.460|
                          DCD      _AddKeyBin
                  |L1.464|
                          DCD      _UpdateBuffer
