; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\stm32f10x_fsmc.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\stm32f10x_fsmc.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -I.\GUI\AntiAlias -I.\GUI\Config -I.\GUI\ConvertColor -I.\GUI\ConvertMono -I.\GUI\Core -I.\GUI\Font -I.\GUI\GUI_X -I.\GUI\JPEG -I.\GUI\LCDDriver -I.\GUI\MemDev -I.\GUI\MultiLayer -I.\GUI\Widget -I.\GUI\WM -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\INC\ST\STM32F10x -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\stm32f10x_fsmc.crf FWlib\SRC\stm32f10x_fsmc.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  FSMC_NORSRAMDeInit PROC
;;;101      */
;;;102    void FSMC_NORSRAMDeInit(uint32_t FSMC_Bank)
000000  b930              CBNZ     r0,|L1.16|
;;;103    {
;;;104      /* Check the parameter */
;;;105      assert_param(IS_FSMC_NORSRAM_BANK(FSMC_Bank));
;;;106      
;;;107      /* FSMC_Bank1_NORSRAM1 */
;;;108      if(FSMC_Bank == FSMC_Bank1_NORSRAM1)
;;;109      {
;;;110        FSMC_Bank1->BTCR[FSMC_Bank] = 0x000030DB;    
000002  f24301db          MOV      r1,#0x30db
000006  f04f4220          MOV      r2,#0xa0000000
00000a  f8421020          STR      r1,[r2,r0,LSL #2]
00000e  e005              B        |L1.28|
                  |L1.16|
;;;111      }
;;;112      /* FSMC_Bank1_NORSRAM2,  FSMC_Bank1_NORSRAM3 or FSMC_Bank1_NORSRAM4 */
;;;113      else
;;;114      {   
;;;115        FSMC_Bank1->BTCR[FSMC_Bank] = 0x000030D2; 
000010  f24301d2          MOV      r1,#0x30d2
000014  f04f4220          MOV      r2,#0xa0000000
000018  f8421020          STR      r1,[r2,r0,LSL #2]
                  |L1.28|
;;;116      }
;;;117      FSMC_Bank1->BTCR[FSMC_Bank + 1] = 0x0FFFFFFF;
00001c  f06f4270          MVN      r2,#0xf0000000
000020  f1000101          ADD      r1,r0,#1
000024  f04f4320          MOV      r3,#0xa0000000
000028  f8432021          STR      r2,[r3,r1,LSL #2]
;;;118      FSMC_Bank1E->BWTR[FSMC_Bank] = 0x0FFFFFFF;  
00002c  4611              MOV      r1,r2
00002e  461a              MOV      r2,r3
000030  eb020280          ADD      r2,r2,r0,LSL #2
000034  f8c21104          STR      r1,[r2,#0x104]
;;;119    }
000038  4770              BX       lr
;;;120    
                          ENDP

                  FSMC_NANDDeInit PROC
;;;128      */
;;;129    void FSMC_NANDDeInit(uint32_t FSMC_Bank)
00003a  2810              CMP      r0,#0x10
;;;130    {
;;;131      /* Check the parameter */
;;;132      assert_param(IS_FSMC_NAND_BANK(FSMC_Bank));
;;;133      
;;;134      if(FSMC_Bank == FSMC_Bank2_NAND)
00003c  d10c              BNE      |L1.88|
;;;135      {
;;;136        /* Set the FSMC_Bank2 registers to their reset values */
;;;137        FSMC_Bank2->PCR2 = 0x00000018;
00003e  f04f0118          MOV      r1,#0x18
000042  f04f4220          MOV      r2,#0xa0000000
000046  6611              STR      r1,[r2,#0x60]
;;;138        FSMC_Bank2->SR2 = 0x00000040;
000048  f04f0140          MOV      r1,#0x40
00004c  6651              STR      r1,[r2,#0x64]
;;;139        FSMC_Bank2->PMEM2 = 0xFCFCFCFC;
00004e  f04f31fc          MOV      r1,#0xfcfcfcfc
000052  6691              STR      r1,[r2,#0x68]
;;;140        FSMC_Bank2->PATT2 = 0xFCFCFCFC;  
000054  66d1              STR      r1,[r2,#0x6c]
000056  e011              B        |L1.124|
                  |L1.88|
;;;141      }
;;;142      /* FSMC_Bank3_NAND */  
;;;143      else
;;;144      {
;;;145        /* Set the FSMC_Bank3 registers to their reset values */
;;;146        FSMC_Bank3->PCR3 = 0x00000018;
000058  f04f0118          MOV      r1,#0x18
00005c  4af6              LDR      r2,|L1.1080|
00005e  6011              STR      r1,[r2,#0]
;;;147        FSMC_Bank3->SR3 = 0x00000040;
000060  f04f0140          MOV      r1,#0x40
000064  f04f4220          MOV      r2,#0xa0000000
000068  f8c21084          STR      r1,[r2,#0x84]
;;;148        FSMC_Bank3->PMEM3 = 0xFCFCFCFC;
00006c  f04f31fc          MOV      r1,#0xfcfcfcfc
000070  4af2              LDR      r2,|L1.1084|
000072  6011              STR      r1,[r2,#0]
;;;149        FSMC_Bank3->PATT3 = 0xFCFCFCFC; 
000074  f04f4220          MOV      r2,#0xa0000000
000078  f8c2108c          STR      r1,[r2,#0x8c]
                  |L1.124|
;;;150      }  
;;;151    }
00007c  4770              BX       lr
;;;152    
                          ENDP

                  FSMC_PCCARDDeInit PROC
;;;157      */
;;;158    void FSMC_PCCARDDeInit(void)
00007e  f04f0018          MOV      r0,#0x18
;;;159    {
;;;160      /* Set the FSMC_Bank4 registers to their reset values */
;;;161      FSMC_Bank4->PCR4 = 0x00000018; 
000082  49ef              LDR      r1,|L1.1088|
000084  6008              STR      r0,[r1,#0]
;;;162      FSMC_Bank4->SR4 = 0x00000000;	
000086  f04f0000          MOV      r0,#0
00008a  f04f4120          MOV      r1,#0xa0000000
00008e  f8c100a4          STR      r0,[r1,#0xa4]
;;;163      FSMC_Bank4->PMEM4 = 0xFCFCFCFC;
000092  f04f30fc          MOV      r0,#0xfcfcfcfc
000096  49eb              LDR      r1,|L1.1092|
000098  6008              STR      r0,[r1,#0]
;;;164      FSMC_Bank4->PATT4 = 0xFCFCFCFC;
00009a  f1010104          ADD      r1,r1,#4
00009e  6008              STR      r0,[r1,#0]
;;;165      FSMC_Bank4->PIO4 = 0xFCFCFCFC;
0000a0  f1010104          ADD      r1,r1,#4
0000a4  6008              STR      r0,[r1,#0]
;;;166    }
0000a6  4770              BX       lr
;;;167    
                          ENDP

                  FSMC_NORSRAMInit PROC
;;;175      */
;;;176    void FSMC_NORSRAMInit(FSMC_NORSRAMInitTypeDef* FSMC_NORSRAMInitStruct)
0000a8  e9d01201          LDRD     r1,r2,[r0,#4]
;;;177    { 
;;;178      /* Check the parameters */
;;;179      assert_param(IS_FSMC_NORSRAM_BANK(FSMC_NORSRAMInitStruct->FSMC_Bank));
;;;180      assert_param(IS_FSMC_MUX(FSMC_NORSRAMInitStruct->FSMC_DataAddressMux));
;;;181      assert_param(IS_FSMC_MEMORY(FSMC_NORSRAMInitStruct->FSMC_MemoryType));
;;;182      assert_param(IS_FSMC_MEMORY_WIDTH(FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth));
;;;183      assert_param(IS_FSMC_BURSTMODE(FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode));
;;;184      assert_param(IS_FSMC_ASYNWAIT(FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait));
;;;185      assert_param(IS_FSMC_WAIT_POLARITY(FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity));
;;;186      assert_param(IS_FSMC_WRAP_MODE(FSMC_NORSRAMInitStruct->FSMC_WrapMode));
;;;187      assert_param(IS_FSMC_WAIT_SIGNAL_ACTIVE(FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive));
;;;188      assert_param(IS_FSMC_WRITE_OPERATION(FSMC_NORSRAMInitStruct->FSMC_WriteOperation));
;;;189      assert_param(IS_FSMC_WAITE_SIGNAL(FSMC_NORSRAMInitStruct->FSMC_WaitSignal));
;;;190      assert_param(IS_FSMC_EXTENDED_MODE(FSMC_NORSRAMInitStruct->FSMC_ExtendedMode));
;;;191      assert_param(IS_FSMC_WRITE_BURST(FSMC_NORSRAMInitStruct->FSMC_WriteBurst));  
;;;192      assert_param(IS_FSMC_ADDRESS_SETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime));
;;;193      assert_param(IS_FSMC_ADDRESS_HOLD_TIME(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime));
;;;194      assert_param(IS_FSMC_DATASETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime));
;;;195      assert_param(IS_FSMC_TURNAROUND_TIME(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration));
;;;196      assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision));
;;;197      assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency));
;;;198      assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode)); 
;;;199      
;;;200      /* Bank1 NOR/SRAM control register configuration */ 
;;;201      FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
0000ac  ea410102          ORR      r1,r1,r2
0000b0  68c2              LDR      r2,[r0,#0xc]
0000b2  ea410102          ORR      r1,r1,r2
0000b6  6902              LDR      r2,[r0,#0x10]
0000b8  ea410102          ORR      r1,r1,r2
0000bc  6942              LDR      r2,[r0,#0x14]
0000be  ea410102          ORR      r1,r1,r2
0000c2  6982              LDR      r2,[r0,#0x18]
0000c4  ea410102          ORR      r1,r1,r2
0000c8  69c2              LDR      r2,[r0,#0x1c]
0000ca  ea410102          ORR      r1,r1,r2
0000ce  6a02              LDR      r2,[r0,#0x20]
0000d0  ea410102          ORR      r1,r1,r2
0000d4  6a42              LDR      r2,[r0,#0x24]
0000d6  ea410102          ORR      r1,r1,r2
0000da  6a82              LDR      r2,[r0,#0x28]
0000dc  ea410102          ORR      r1,r1,r2
0000e0  6ac2              LDR      r2,[r0,#0x2c]
0000e2  ea410102          ORR      r1,r1,r2
0000e6  6b02              LDR      r2,[r0,#0x30]
0000e8  ea410102          ORR      r1,r1,r2
0000ec  f04f4320          MOV      r3,#0xa0000000
0000f0  6802              LDR      r2,[r0,#0]
0000f2  f8431022          STR      r1,[r3,r2,LSL #2]
;;;202                (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
;;;203                FSMC_NORSRAMInitStruct->FSMC_MemoryType |
;;;204                FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
;;;205                FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
;;;206                FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
;;;207                FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
;;;208                FSMC_NORSRAMInitStruct->FSMC_WrapMode |
;;;209                FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
;;;210                FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
;;;211                FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
;;;212                FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
;;;213                FSMC_NORSRAMInitStruct->FSMC_WriteBurst;
;;;214    
;;;215      if(FSMC_NORSRAMInitStruct->FSMC_MemoryType == FSMC_MemoryType_NOR)
0000f6  6881              LDR      r1,[r0,#8]
0000f8  2908              CMP      r1,#8
0000fa  d108              BNE      |L1.270|
;;;216      {
;;;217        FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] |= (uint32_t)BCR_FACCEN_Set;
0000fc  461a              MOV      r2,r3
0000fe  6801              LDR      r1,[r0,#0]
000100  f8521021          LDR      r1,[r2,r1,LSL #2]
000104  f0410140          ORR      r1,r1,#0x40
000108  6802              LDR      r2,[r0,#0]
00010a  f8431022          STR      r1,[r3,r2,LSL #2]
                  |L1.270|
;;;218      }
;;;219      
;;;220      /* Bank1 NOR/SRAM timing register configuration */
;;;221      FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
00010e  6b41              LDR      r1,[r0,#0x34]
000110  6809              LDR      r1,[r1,#0]
000112  6b42              LDR      r2,[r0,#0x34]
000114  6852              LDR      r2,[r2,#4]
000116  ea411102          ORR      r1,r1,r2,LSL #4
00011a  6b42              LDR      r2,[r0,#0x34]
00011c  6892              LDR      r2,[r2,#8]
00011e  ea412102          ORR      r1,r1,r2,LSL #8
000122  6b42              LDR      r2,[r0,#0x34]
000124  68d2              LDR      r2,[r2,#0xc]
000126  ea414102          ORR      r1,r1,r2,LSL #16
00012a  6b42              LDR      r2,[r0,#0x34]
00012c  6912              LDR      r2,[r2,#0x10]
00012e  ea415102          ORR      r1,r1,r2,LSL #20
000132  6b42              LDR      r2,[r0,#0x34]
000134  6952              LDR      r2,[r2,#0x14]
000136  ea416102          ORR      r1,r1,r2,LSL #24
00013a  6b42              LDR      r2,[r0,#0x34]
00013c  6992              LDR      r2,[r2,#0x18]
00013e  ea410102          ORR      r1,r1,r2
000142  6802              LDR      r2,[r0,#0]
000144  f1020201          ADD      r2,r2,#1
000148  f04f4320          MOV      r3,#0xa0000000
00014c  f8431022          STR      r1,[r3,r2,LSL #2]
;;;222                (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
;;;223                (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
;;;224                (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
;;;225                (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration << 16) |
;;;226                (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision << 20) |
;;;227                (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency << 24) |
;;;228                 FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode;
;;;229                
;;;230        
;;;231      /* Bank1 NOR/SRAM timing register for write configuration, if extended mode is used */
;;;232      if(FSMC_NORSRAMInitStruct->FSMC_ExtendedMode == FSMC_ExtendedMode_Enable)
000150  6ac1              LDR      r1,[r0,#0x2c]
000152  f5b14f80          CMP      r1,#0x4000
000156  d11b              BNE      |L1.400|
;;;233      {
;;;234        assert_param(IS_FSMC_ADDRESS_SETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime));
;;;235        assert_param(IS_FSMC_ADDRESS_HOLD_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime));
;;;236        assert_param(IS_FSMC_DATASETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime));
;;;237        assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision));
;;;238        assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency));
;;;239        assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode));
;;;240        FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
000158  6b81              LDR      r1,[r0,#0x38]
00015a  6809              LDR      r1,[r1,#0]
00015c  6b82              LDR      r2,[r0,#0x38]
00015e  6852              LDR      r2,[r2,#4]
000160  ea411102          ORR      r1,r1,r2,LSL #4
000164  6b82              LDR      r2,[r0,#0x38]
000166  6892              LDR      r2,[r2,#8]
000168  ea412102          ORR      r1,r1,r2,LSL #8
00016c  6b82              LDR      r2,[r0,#0x38]
00016e  6912              LDR      r2,[r2,#0x10]
000170  ea415102          ORR      r1,r1,r2,LSL #20
000174  6b82              LDR      r2,[r0,#0x38]
000176  6952              LDR      r2,[r2,#0x14]
000178  ea416102          ORR      r1,r1,r2,LSL #24
00017c  6b82              LDR      r2,[r0,#0x38]
00017e  6992              LDR      r2,[r2,#0x18]
000180  ea410102          ORR      r1,r1,r2
000184  6802              LDR      r2,[r0,#0]
000186  eb030282          ADD      r2,r3,r2,LSL #2
00018a  f8c21104          STR      r1,[r2,#0x104]
00018e  e008              B        |L1.418|
                  |L1.400|
;;;241                  (uint32_t)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
;;;242                  (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime << 4 )|
;;;243                  (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime << 8) |
;;;244                  (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision << 20) |
;;;245                  (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency << 24) |
;;;246                   FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode;
;;;247      }
;;;248      else
;;;249      {
;;;250        FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 0x0FFFFFFF;
000190  f06f4170          MVN      r1,#0xf0000000
000194  f04f4320          MOV      r3,#0xa0000000
000198  6802              LDR      r2,[r0,#0]
00019a  eb030282          ADD      r2,r3,r2,LSL #2
00019e  f8c21104          STR      r1,[r2,#0x104]
                  |L1.418|
;;;251      }
;;;252    }
0001a2  4770              BX       lr
;;;253    
                          ENDP

                  FSMC_NANDInit PROC
;;;261      */
;;;262    void FSMC_NANDInit(FSMC_NANDInitTypeDef* FSMC_NANDInitStruct)
0001a4  b530              PUSH     {r4,r5,lr}
;;;263    {
;;;264      uint32_t tmppcr = 0x00000000, tmppmem = 0x00000000, tmppatt = 0x00000000; 
0001a6  f04f0100          MOV      r1,#0
0001aa  460a              MOV      r2,r1
0001ac  460b              MOV      r3,r1
;;;265        
;;;266      /* Check the parameters */
;;;267      assert_param( IS_FSMC_NAND_BANK(FSMC_NANDInitStruct->FSMC_Bank));
;;;268      assert_param( IS_FSMC_WAIT_FEATURE(FSMC_NANDInitStruct->FSMC_Waitfeature));
;;;269      assert_param( IS_FSMC_MEMORY_WIDTH(FSMC_NANDInitStruct->FSMC_MemoryDataWidth));
;;;270      assert_param( IS_FSMC_ECC_STATE(FSMC_NANDInitStruct->FSMC_ECC));
;;;271      assert_param( IS_FSMC_ECCPAGE_SIZE(FSMC_NANDInitStruct->FSMC_ECCPageSize));
;;;272      assert_param( IS_FSMC_TCLR_TIME(FSMC_NANDInitStruct->FSMC_TCLRSetupTime));
;;;273      assert_param( IS_FSMC_TAR_TIME(FSMC_NANDInitStruct->FSMC_TARSetupTime));
;;;274      assert_param(IS_FSMC_SETUP_TIME(FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime));
;;;275      assert_param(IS_FSMC_WAIT_TIME(FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime));
;;;276      assert_param(IS_FSMC_HOLD_TIME(FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime));
;;;277      assert_param(IS_FSMC_HIZ_TIME(FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime));
;;;278      assert_param(IS_FSMC_SETUP_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime));
;;;279      assert_param(IS_FSMC_WAIT_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime));
;;;280      assert_param(IS_FSMC_HOLD_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime));
;;;281      assert_param(IS_FSMC_HIZ_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime));
;;;282      
;;;283      /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
;;;284      tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
0001ae  6844              LDR      r4,[r0,#4]
0001b0  f0440408          ORR      r4,r4,#8
0001b4  6885              LDR      r5,[r0,#8]
0001b6  ea440405          ORR      r4,r4,r5
0001ba  68c5              LDR      r5,[r0,#0xc]
0001bc  ea440405          ORR      r4,r4,r5
0001c0  6905              LDR      r5,[r0,#0x10]
0001c2  ea440405          ORR      r4,r4,r5
0001c6  6945              LDR      r5,[r0,#0x14]
0001c8  ea442445          ORR      r4,r4,r5,LSL #9
0001cc  6985              LDR      r5,[r0,#0x18]
0001ce  ea443145          ORR      r1,r4,r5,LSL #13
;;;285                PCR_MemoryType_NAND |
;;;286                FSMC_NANDInitStruct->FSMC_MemoryDataWidth |
;;;287                FSMC_NANDInitStruct->FSMC_ECC |
;;;288                FSMC_NANDInitStruct->FSMC_ECCPageSize |
;;;289                (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
;;;290                (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
;;;291                
;;;292      /* Set tmppmem value according to FSMC_CommonSpaceTimingStructure parameters */
;;;293      tmppmem = (uint32_t)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
0001d2  69c4              LDR      r4,[r0,#0x1c]
0001d4  6824              LDR      r4,[r4,#0]
0001d6  69c5              LDR      r5,[r0,#0x1c]
0001d8  686d              LDR      r5,[r5,#4]
0001da  ea442405          ORR      r4,r4,r5,LSL #8
0001de  69c5              LDR      r5,[r0,#0x1c]
0001e0  68ad              LDR      r5,[r5,#8]
0001e2  ea444405          ORR      r4,r4,r5,LSL #16
0001e6  69c5              LDR      r5,[r0,#0x1c]
0001e8  68ed              LDR      r5,[r5,#0xc]
0001ea  ea446205          ORR      r2,r4,r5,LSL #24
;;;294                (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
;;;295                (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
;;;296                (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
;;;297                
;;;298      /* Set tmppatt value according to FSMC_AttributeSpaceTimingStructure parameters */
;;;299      tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
0001ee  6a04              LDR      r4,[r0,#0x20]
0001f0  6824              LDR      r4,[r4,#0]
0001f2  6a05              LDR      r5,[r0,#0x20]
0001f4  686d              LDR      r5,[r5,#4]
0001f6  ea442405          ORR      r4,r4,r5,LSL #8
0001fa  6a05              LDR      r5,[r0,#0x20]
0001fc  68ad              LDR      r5,[r5,#8]
0001fe  ea444405          ORR      r4,r4,r5,LSL #16
000202  6a05              LDR      r5,[r0,#0x20]
000204  68ed              LDR      r5,[r5,#0xc]
000206  ea446305          ORR      r3,r4,r5,LSL #24
;;;300                (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
;;;301                (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
;;;302                (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);
;;;303      
;;;304      if(FSMC_NANDInitStruct->FSMC_Bank == FSMC_Bank2_NAND)
00020a  6804              LDR      r4,[r0,#0]
00020c  2c10              CMP      r4,#0x10
00020e  d105              BNE      |L1.540|
;;;305      {
;;;306        /* FSMC_Bank2_NAND registers configuration */
;;;307        FSMC_Bank2->PCR2 = tmppcr;
000210  f04f4420          MOV      r4,#0xa0000000
000214  6621              STR      r1,[r4,#0x60]
;;;308        FSMC_Bank2->PMEM2 = tmppmem;
000216  66a2              STR      r2,[r4,#0x68]
;;;309        FSMC_Bank2->PATT2 = tmppatt;
000218  66e3              STR      r3,[r4,#0x6c]
00021a  e007              B        |L1.556|
                  |L1.540|
;;;310      }
;;;311      else
;;;312      {
;;;313        /* FSMC_Bank3_NAND registers configuration */
;;;314        FSMC_Bank3->PCR3 = tmppcr;
00021c  4c86              LDR      r4,|L1.1080|
00021e  6021              STR      r1,[r4,#0]
;;;315        FSMC_Bank3->PMEM3 = tmppmem;
000220  f04f4420          MOV      r4,#0xa0000000
000224  f8c42088          STR      r2,[r4,#0x88]
;;;316        FSMC_Bank3->PATT3 = tmppatt;
000228  4c87              LDR      r4,|L1.1096|
00022a  6023              STR      r3,[r4,#0]
                  |L1.556|
;;;317      }
;;;318    }
00022c  bd30              POP      {r4,r5,pc}
;;;319    
                          ENDP

                  FSMC_PCCARDInit PROC
;;;327      */
;;;328    void FSMC_PCCARDInit(FSMC_PCCARDInitTypeDef* FSMC_PCCARDInitStruct)
00022e  6801              LDR      r1,[r0,#0]
;;;329    {
;;;330      /* Check the parameters */
;;;331      assert_param(IS_FSMC_WAIT_FEATURE(FSMC_PCCARDInitStruct->FSMC_Waitfeature));
;;;332      assert_param(IS_FSMC_TCLR_TIME(FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime));
;;;333      assert_param(IS_FSMC_TAR_TIME(FSMC_PCCARDInitStruct->FSMC_TARSetupTime));
;;;334     
;;;335      assert_param(IS_FSMC_SETUP_TIME(FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime));
;;;336      assert_param(IS_FSMC_WAIT_TIME(FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime));
;;;337      assert_param(IS_FSMC_HOLD_TIME(FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime));
;;;338      assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime));
;;;339      
;;;340      assert_param(IS_FSMC_SETUP_TIME(FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime));
;;;341      assert_param(IS_FSMC_WAIT_TIME(FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime));
;;;342      assert_param(IS_FSMC_HOLD_TIME(FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime));
;;;343      assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime));
;;;344      assert_param(IS_FSMC_SETUP_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime));
;;;345      assert_param(IS_FSMC_WAIT_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime));
;;;346      assert_param(IS_FSMC_HOLD_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime));
;;;347      assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime));
;;;348      
;;;349      /* Set the PCR4 register value according to FSMC_PCCARDInitStruct parameters */
;;;350      FSMC_Bank4->PCR4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_Waitfeature |
000230  f0410110          ORR      r1,r1,#0x10
000234  6842              LDR      r2,[r0,#4]
000236  ea412142          ORR      r1,r1,r2,LSL #9
00023a  6882              LDR      r2,[r0,#8]
00023c  ea413142          ORR      r1,r1,r2,LSL #13
000240  4a7f              LDR      r2,|L1.1088|
000242  6011              STR      r1,[r2,#0]
;;;351                         FSMC_MemoryDataWidth_16b |  
;;;352                         (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
;;;353                         (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
;;;354                
;;;355      /* Set PMEM4 register value according to FSMC_CommonSpaceTimingStructure parameters */
;;;356      FSMC_Bank4->PMEM4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
000244  68c1              LDR      r1,[r0,#0xc]
000246  6809              LDR      r1,[r1,#0]
000248  68c2              LDR      r2,[r0,#0xc]
00024a  6852              LDR      r2,[r2,#4]
00024c  ea412102          ORR      r1,r1,r2,LSL #8
000250  68c2              LDR      r2,[r0,#0xc]
000252  6892              LDR      r2,[r2,#8]
000254  ea414102          ORR      r1,r1,r2,LSL #16
000258  68c2              LDR      r2,[r0,#0xc]
00025a  68d2              LDR      r2,[r2,#0xc]
00025c  ea416102          ORR      r1,r1,r2,LSL #24
000260  4a78              LDR      r2,|L1.1092|
000262  6011              STR      r1,[r2,#0]
;;;357                          (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
;;;358                          (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
;;;359                          (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
;;;360                
;;;361      /* Set PATT4 register value according to FSMC_AttributeSpaceTimingStructure parameters */
;;;362      FSMC_Bank4->PATT4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
000264  6901              LDR      r1,[r0,#0x10]
000266  6809              LDR      r1,[r1,#0]
000268  6902              LDR      r2,[r0,#0x10]
00026a  6852              LDR      r2,[r2,#4]
00026c  ea412102          ORR      r1,r1,r2,LSL #8
000270  6902              LDR      r2,[r0,#0x10]
000272  6892              LDR      r2,[r2,#8]
000274  ea414102          ORR      r1,r1,r2,LSL #16
000278  6902              LDR      r2,[r0,#0x10]
00027a  68d2              LDR      r2,[r2,#0xc]
00027c  ea416102          ORR      r1,r1,r2,LSL #24
000280  4a72              LDR      r2,|L1.1100|
000282  6011              STR      r1,[r2,#0]
;;;363                          (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
;;;364                          (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
;;;365                          (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
;;;366                
;;;367      /* Set PIO4 register value according to FSMC_IOSpaceTimingStructure parameters */
;;;368      FSMC_Bank4->PIO4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime |
000284  6941              LDR      r1,[r0,#0x14]
000286  6809              LDR      r1,[r1,#0]
000288  6942              LDR      r2,[r0,#0x14]
00028a  6852              LDR      r2,[r2,#4]
00028c  ea412102          ORR      r1,r1,r2,LSL #8
000290  6942              LDR      r2,[r0,#0x14]
000292  6892              LDR      r2,[r2,#8]
000294  ea414102          ORR      r1,r1,r2,LSL #16
000298  6942              LDR      r2,[r0,#0x14]
00029a  68d2              LDR      r2,[r2,#0xc]
00029c  ea416102          ORR      r1,r1,r2,LSL #24
0002a0  f04f4220          MOV      r2,#0xa0000000
0002a4  f8c210b0          STR      r1,[r2,#0xb0]
;;;369                         (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
;;;370                         (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
;;;371                         (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime << 24);             
;;;372    }
0002a8  4770              BX       lr
;;;373    
                          ENDP

                  FSMC_NORSRAMStructInit PROC
;;;379      */
;;;380    void FSMC_NORSRAMStructInit(FSMC_NORSRAMInitTypeDef* FSMC_NORSRAMInitStruct)
0002aa  f04f0100          MOV      r1,#0
;;;381    {  
;;;382      /* Reset NOR/SRAM Init structure parameters values */
;;;383      FSMC_NORSRAMInitStruct->FSMC_Bank = FSMC_Bank1_NORSRAM1;
0002ae  6001              STR      r1,[r0,#0]
;;;384      FSMC_NORSRAMInitStruct->FSMC_DataAddressMux = FSMC_DataAddressMux_Enable;
0002b0  f04f0102          MOV      r1,#2
0002b4  6041              STR      r1,[r0,#4]
;;;385      FSMC_NORSRAMInitStruct->FSMC_MemoryType = FSMC_MemoryType_SRAM;
0002b6  f04f0100          MOV      r1,#0
0002ba  6081              STR      r1,[r0,#8]
;;;386      FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_8b;
0002bc  60c1              STR      r1,[r0,#0xc]
;;;387      FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode = FSMC_BurstAccessMode_Disable;
0002be  6101              STR      r1,[r0,#0x10]
;;;388      FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait = FSMC_AsynchronousWait_Disable;
0002c0  6141              STR      r1,[r0,#0x14]
;;;389      FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity = FSMC_WaitSignalPolarity_Low;
0002c2  6181              STR      r1,[r0,#0x18]
;;;390      FSMC_NORSRAMInitStruct->FSMC_WrapMode = FSMC_WrapMode_Disable;
0002c4  61c1              STR      r1,[r0,#0x1c]
;;;391      FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
0002c6  6201              STR      r1,[r0,#0x20]
;;;392      FSMC_NORSRAMInitStruct->FSMC_WriteOperation = FSMC_WriteOperation_Enable;
0002c8  f44f5180          MOV      r1,#0x1000
0002cc  6241              STR      r1,[r0,#0x24]
;;;393      FSMC_NORSRAMInitStruct->FSMC_WaitSignal = FSMC_WaitSignal_Enable;
0002ce  f44f5100          MOV      r1,#0x2000
0002d2  6281              STR      r1,[r0,#0x28]
;;;394      FSMC_NORSRAMInitStruct->FSMC_ExtendedMode = FSMC_ExtendedMode_Disable;
0002d4  f04f0100          MOV      r1,#0
0002d8  62c1              STR      r1,[r0,#0x2c]
;;;395      FSMC_NORSRAMInitStruct->FSMC_WriteBurst = FSMC_WriteBurst_Disable;
0002da  6301              STR      r1,[r0,#0x30]
;;;396      FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime = 0xF;
0002dc  f04f010f          MOV      r1,#0xf
0002e0  6b42              LDR      r2,[r0,#0x34]
0002e2  6011              STR      r1,[r2,#0]
;;;397      FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime = 0xF;
0002e4  6b42              LDR      r2,[r0,#0x34]
0002e6  6051              STR      r1,[r2,#4]
;;;398      FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime = 0xFF;
0002e8  f04f01ff          MOV      r1,#0xff
0002ec  6b42              LDR      r2,[r0,#0x34]
0002ee  6091              STR      r1,[r2,#8]
;;;399      FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration = 0xF;
0002f0  f04f010f          MOV      r1,#0xf
0002f4  6b42              LDR      r2,[r0,#0x34]
0002f6  60d1              STR      r1,[r2,#0xc]
;;;400      FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision = 0xF;
0002f8  6b42              LDR      r2,[r0,#0x34]
0002fa  6111              STR      r1,[r2,#0x10]
;;;401      FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency = 0xF;
0002fc  6b42              LDR      r2,[r0,#0x34]
0002fe  6151              STR      r1,[r2,#0x14]
;;;402      FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode = FSMC_AccessMode_A; 
000300  f04f0100          MOV      r1,#0
000304  6b42              LDR      r2,[r0,#0x34]
000306  6191              STR      r1,[r2,#0x18]
;;;403      FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime = 0xF;
000308  f04f010f          MOV      r1,#0xf
00030c  6b82              LDR      r2,[r0,#0x38]
00030e  6011              STR      r1,[r2,#0]
;;;404      FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime = 0xF;
000310  6b82              LDR      r2,[r0,#0x38]
000312  6051              STR      r1,[r2,#4]
;;;405      FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime = 0xFF;
000314  f04f01ff          MOV      r1,#0xff
000318  6b82              LDR      r2,[r0,#0x38]
00031a  6091              STR      r1,[r2,#8]
;;;406      FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_BusTurnAroundDuration = 0xF;
00031c  f04f010f          MOV      r1,#0xf
000320  6b82              LDR      r2,[r0,#0x38]
000322  60d1              STR      r1,[r2,#0xc]
;;;407      FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision = 0xF;
000324  6b82              LDR      r2,[r0,#0x38]
000326  6111              STR      r1,[r2,#0x10]
;;;408      FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency = 0xF;
000328  6b82              LDR      r2,[r0,#0x38]
00032a  6151              STR      r1,[r2,#0x14]
;;;409      FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode = FSMC_AccessMode_A;
00032c  f04f0100          MOV      r1,#0
000330  6b82              LDR      r2,[r0,#0x38]
000332  6191              STR      r1,[r2,#0x18]
;;;410    }
000334  4770              BX       lr
;;;411    
                          ENDP

                  FSMC_NANDStructInit PROC
;;;417      */
;;;418    void FSMC_NANDStructInit(FSMC_NANDInitTypeDef* FSMC_NANDInitStruct)
000336  f04f0110          MOV      r1,#0x10
;;;419    { 
;;;420      /* Reset NAND Init structure parameters values */
;;;421      FSMC_NANDInitStruct->FSMC_Bank = FSMC_Bank2_NAND;
00033a  6001              STR      r1,[r0,#0]
;;;422      FSMC_NANDInitStruct->FSMC_Waitfeature = FSMC_Waitfeature_Disable;
00033c  f04f0100          MOV      r1,#0
000340  6041              STR      r1,[r0,#4]
;;;423      FSMC_NANDInitStruct->FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_8b;
000342  6081              STR      r1,[r0,#8]
;;;424      FSMC_NANDInitStruct->FSMC_ECC = FSMC_ECC_Disable;
000344  60c1              STR      r1,[r0,#0xc]
;;;425      FSMC_NANDInitStruct->FSMC_ECCPageSize = FSMC_ECCPageSize_256Bytes;
000346  6101              STR      r1,[r0,#0x10]
;;;426      FSMC_NANDInitStruct->FSMC_TCLRSetupTime = 0x0;
000348  6141              STR      r1,[r0,#0x14]
;;;427      FSMC_NANDInitStruct->FSMC_TARSetupTime = 0x0;
00034a  6181              STR      r1,[r0,#0x18]
;;;428      FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime = 0xFC;
00034c  f04f01fc          MOV      r1,#0xfc
000350  69c2              LDR      r2,[r0,#0x1c]
000352  6011              STR      r1,[r2,#0]
;;;429      FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
000354  69c2              LDR      r2,[r0,#0x1c]
000356  6051              STR      r1,[r2,#4]
;;;430      FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
000358  69c2              LDR      r2,[r0,#0x1c]
00035a  6091              STR      r1,[r2,#8]
;;;431      FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
00035c  69c2              LDR      r2,[r0,#0x1c]
00035e  60d1              STR      r1,[r2,#0xc]
;;;432      FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime = 0xFC;
000360  6a02              LDR      r2,[r0,#0x20]
000362  6011              STR      r1,[r2,#0]
;;;433      FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
000364  6a02              LDR      r2,[r0,#0x20]
000366  6051              STR      r1,[r2,#4]
;;;434      FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
000368  6a02              LDR      r2,[r0,#0x20]
00036a  6091              STR      r1,[r2,#8]
;;;435      FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;	  
00036c  6a02              LDR      r2,[r0,#0x20]
00036e  60d1              STR      r1,[r2,#0xc]
;;;436    }
000370  4770              BX       lr
;;;437    
                          ENDP

                  FSMC_PCCARDStructInit PROC
;;;443      */
;;;444    void FSMC_PCCARDStructInit(FSMC_PCCARDInitTypeDef* FSMC_PCCARDInitStruct)
000372  f04f0100          MOV      r1,#0
;;;445    {
;;;446      /* Reset PCCARD Init structure parameters values */
;;;447      FSMC_PCCARDInitStruct->FSMC_Waitfeature = FSMC_Waitfeature_Disable;
000376  6001              STR      r1,[r0,#0]
;;;448      FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime = 0x0;
000378  6041              STR      r1,[r0,#4]
;;;449      FSMC_PCCARDInitStruct->FSMC_TARSetupTime = 0x0;
00037a  6081              STR      r1,[r0,#8]
;;;450      FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime = 0xFC;
00037c  f04f01fc          MOV      r1,#0xfc
000380  68c2              LDR      r2,[r0,#0xc]
000382  6011              STR      r1,[r2,#0]
;;;451      FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
000384  68c2              LDR      r2,[r0,#0xc]
000386  6051              STR      r1,[r2,#4]
;;;452      FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
000388  68c2              LDR      r2,[r0,#0xc]
00038a  6091              STR      r1,[r2,#8]
;;;453      FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
00038c  68c2              LDR      r2,[r0,#0xc]
00038e  60d1              STR      r1,[r2,#0xc]
;;;454      FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime = 0xFC;
000390  6902              LDR      r2,[r0,#0x10]
000392  6011              STR      r1,[r2,#0]
;;;455      FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
000394  6902              LDR      r2,[r0,#0x10]
000396  6051              STR      r1,[r2,#4]
;;;456      FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
000398  6902              LDR      r2,[r0,#0x10]
00039a  6091              STR      r1,[r2,#8]
;;;457      FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;	
00039c  6902              LDR      r2,[r0,#0x10]
00039e  60d1              STR      r1,[r2,#0xc]
;;;458      FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime = 0xFC;
0003a0  6942              LDR      r2,[r0,#0x14]
0003a2  6011              STR      r1,[r2,#0]
;;;459      FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
0003a4  6942              LDR      r2,[r0,#0x14]
0003a6  6051              STR      r1,[r2,#4]
;;;460      FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
0003a8  6942              LDR      r2,[r0,#0x14]
0003aa  6091              STR      r1,[r2,#8]
;;;461      FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
0003ac  6942              LDR      r2,[r0,#0x14]
0003ae  60d1              STR      r1,[r2,#0xc]
;;;462    }
0003b0  4770              BX       lr
;;;463    
                          ENDP

                  FSMC_NORSRAMCmd PROC
;;;474      */
;;;475    void FSMC_NORSRAMCmd(uint32_t FSMC_Bank, FunctionalState NewState)
0003b2  b151              CBZ      r1,|L1.970|
;;;476    {
;;;477      assert_param(IS_FSMC_NORSRAM_BANK(FSMC_Bank));
;;;478      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;479      
;;;480      if (NewState != DISABLE)
;;;481      {
;;;482        /* Enable the selected NOR/SRAM Bank by setting the PBKEN bit in the BCRx register */
;;;483        FSMC_Bank1->BTCR[FSMC_Bank] |= BCR_MBKEN_Set;
0003b4  f04f4220          MOV      r2,#0xa0000000
0003b8  f8522020          LDR      r2,[r2,r0,LSL #2]
0003bc  f0420201          ORR      r2,r2,#1
0003c0  f04f4320          MOV      r3,#0xa0000000
0003c4  f8432020          STR      r2,[r3,r0,LSL #2]
0003c8  e00a              B        |L1.992|
                  |L1.970|
;;;484      }
;;;485      else
;;;486      {
;;;487        /* Disable the selected NOR/SRAM Bank by clearing the PBKEN bit in the BCRx register */
;;;488        FSMC_Bank1->BTCR[FSMC_Bank] &= BCR_MBKEN_Reset;
0003ca  f04f4220          MOV      r2,#0xa0000000
0003ce  f8522020          LDR      r2,[r2,r0,LSL #2]
0003d2  4b1f              LDR      r3,|L1.1104|
0003d4  ea020203          AND      r2,r2,r3
0003d8  f04f4320          MOV      r3,#0xa0000000
0003dc  f8432020          STR      r2,[r3,r0,LSL #2]
                  |L1.992|
;;;489      }
;;;490    }
0003e0  4770              BX       lr
;;;491    
                          ENDP

                  FSMC_NANDCmd PROC
;;;500      */
;;;501    void FSMC_NANDCmd(uint32_t FSMC_Bank, FunctionalState NewState)
0003e2  b199              CBZ      r1,|L1.1036|
;;;502    {
;;;503      assert_param(IS_FSMC_NAND_BANK(FSMC_Bank));
;;;504      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;505      
;;;506      if (NewState != DISABLE)
;;;507      {
;;;508        /* Enable the selected NAND Bank by setting the PBKEN bit in the PCRx register */
;;;509        if(FSMC_Bank == FSMC_Bank2_NAND)
0003e4  2810              CMP      r0,#0x10
0003e6  d108              BNE      |L1.1018|
;;;510        {
;;;511          FSMC_Bank2->PCR2 |= PCR_PBKEN_Set;
0003e8  f04f4220          MOV      r2,#0xa0000000
0003ec  6e12              LDR      r2,[r2,#0x60]
0003ee  f0420204          ORR      r2,r2,#4
0003f2  f04f4320          MOV      r3,#0xa0000000
0003f6  661a              STR      r2,[r3,#0x60]
0003f8  e01d              B        |L1.1078|
                  |L1.1018|
;;;512        }
;;;513        else
;;;514        {
;;;515          FSMC_Bank3->PCR3 |= PCR_PBKEN_Set;
0003fa  4a0f              LDR      r2,|L1.1080|
0003fc  6812              LDR      r2,[r2,#0]
0003fe  f0420204          ORR      r2,r2,#4
000402  f04f4320          MOV      r3,#0xa0000000
000406  f8c32080          STR      r2,[r3,#0x80]
00040a  e014              B        |L1.1078|
                  |L1.1036|
;;;516        }
;;;517      }
;;;518      else
;;;519      {
;;;520        /* Disable the selected NAND Bank by clearing the PBKEN bit in the PCRx register */
;;;521        if(FSMC_Bank == FSMC_Bank2_NAND)
00040c  2810              CMP      r0,#0x10
00040e  d109              BNE      |L1.1060|
;;;522        {
;;;523          FSMC_Bank2->PCR2 &= PCR_PBKEN_Reset;
000410  f04f4220          MOV      r2,#0xa0000000
000414  6e12              LDR      r2,[r2,#0x60]
000416  4b0f              LDR      r3,|L1.1108|
000418  ea020203          AND      r2,r2,r3
00041c  f04f4320          MOV      r3,#0xa0000000
000420  661a              STR      r2,[r3,#0x60]
000422  e008              B        |L1.1078|
                  |L1.1060|
;;;524        }
;;;525        else
;;;526        {
;;;527          FSMC_Bank3->PCR3 &= PCR_PBKEN_Reset;
000424  4a04              LDR      r2,|L1.1080|
000426  6812              LDR      r2,[r2,#0]
000428  4b0a              LDR      r3,|L1.1108|
00042a  ea020203          AND      r2,r2,r3
00042e  f04f4320          MOV      r3,#0xa0000000
000432  f8c32080          STR      r2,[r3,#0x80]
                  |L1.1078|
;;;528        }
;;;529      }
;;;530    }
000436  4770              BX       lr
                  |L1.1080|
                          DCD      0xa0000080
                  |L1.1084|
                          DCD      0xa0000088
                  |L1.1088|
                          DCD      0xa00000a0
                  |L1.1092|
                          DCD      0xa00000a8
                  |L1.1096|
                          DCD      0xa000008c
                  |L1.1100|
                          DCD      0xa00000ac
                  |L1.1104|
                          DCD      0x000ffffe
                  |L1.1108|
                          DCD      0x000ffffb
                          ENDP

                  FSMC_PCCARDCmd PROC
;;;537      */
;;;538    void FSMC_PCCARDCmd(FunctionalState NewState)
000458  b140              CBZ      r0,|L1.1132|
;;;539    {
;;;540      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;541      
;;;542      if (NewState != DISABLE)
;;;543      {
;;;544        /* Enable the PCCARD Bank by setting the PBKEN bit in the PCR4 register */
;;;545        FSMC_Bank4->PCR4 |= PCR_PBKEN_Set;
00045a  4984              LDR      r1,|L1.1644|
00045c  6809              LDR      r1,[r1,#0]
00045e  f0410104          ORR      r1,r1,#4
000462  f04f4220          MOV      r2,#0xa0000000
000466  f8c210a0          STR      r1,[r2,#0xa0]
00046a  e008              B        |L1.1150|
                  |L1.1132|
;;;546      }
;;;547      else
;;;548      {
;;;549        /* Disable the PCCARD Bank by clearing the PBKEN bit in the PCR4 register */
;;;550        FSMC_Bank4->PCR4 &= PCR_PBKEN_Reset;
00046c  497f              LDR      r1,|L1.1644|
00046e  6809              LDR      r1,[r1,#0]
000470  4a7f              LDR      r2,|L1.1648|
000472  ea010102          AND      r1,r1,r2
000476  f04f4220          MOV      r2,#0xa0000000
00047a  f8c210a0          STR      r1,[r2,#0xa0]
                  |L1.1150|
;;;551      }
;;;552    }
00047e  4770              BX       lr
;;;553    
                          ENDP

                  FSMC_NANDECCCmd PROC
;;;563      */
;;;564    void FSMC_NANDECCCmd(uint32_t FSMC_Bank, FunctionalState NewState)
000480  b199              CBZ      r1,|L1.1194|
;;;565    {
;;;566      assert_param(IS_FSMC_NAND_BANK(FSMC_Bank));
;;;567      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;568      
;;;569      if (NewState != DISABLE)
;;;570      {
;;;571        /* Enable the selected NAND Bank ECC function by setting the ECCEN bit in the PCRx register */
;;;572        if(FSMC_Bank == FSMC_Bank2_NAND)
000482  2810              CMP      r0,#0x10
000484  d108              BNE      |L1.1176|
;;;573        {
;;;574          FSMC_Bank2->PCR2 |= PCR_ECCEN_Set;
000486  f04f4220          MOV      r2,#0xa0000000
00048a  6e12              LDR      r2,[r2,#0x60]
00048c  f0420240          ORR      r2,r2,#0x40
000490  f04f4320          MOV      r3,#0xa0000000
000494  661a              STR      r2,[r3,#0x60]
000496  e01d              B        |L1.1236|
                  |L1.1176|
;;;575        }
;;;576        else
;;;577        {
;;;578          FSMC_Bank3->PCR3 |= PCR_ECCEN_Set;
000498  4a76              LDR      r2,|L1.1652|
00049a  6812              LDR      r2,[r2,#0]
00049c  f0420240          ORR      r2,r2,#0x40
0004a0  f04f4320          MOV      r3,#0xa0000000
0004a4  f8c32080          STR      r2,[r3,#0x80]
0004a8  e014              B        |L1.1236|
                  |L1.1194|
;;;579        }
;;;580      }
;;;581      else
;;;582      {
;;;583        /* Disable the selected NAND Bank ECC function by clearing the ECCEN bit in the PCRx register */
;;;584        if(FSMC_Bank == FSMC_Bank2_NAND)
0004aa  2810              CMP      r0,#0x10
0004ac  d109              BNE      |L1.1218|
;;;585        {
;;;586          FSMC_Bank2->PCR2 &= PCR_ECCEN_Reset;
0004ae  f04f4220          MOV      r2,#0xa0000000
0004b2  6e12              LDR      r2,[r2,#0x60]
0004b4  4b70              LDR      r3,|L1.1656|
0004b6  ea020203          AND      r2,r2,r3
0004ba  f04f4320          MOV      r3,#0xa0000000
0004be  661a              STR      r2,[r3,#0x60]
0004c0  e008              B        |L1.1236|
                  |L1.1218|
;;;587        }
;;;588        else
;;;589        {
;;;590          FSMC_Bank3->PCR3 &= PCR_ECCEN_Reset;
0004c2  4a6c              LDR      r2,|L1.1652|
0004c4  6812              LDR      r2,[r2,#0]
0004c6  4b6c              LDR      r3,|L1.1656|
0004c8  ea020203          AND      r2,r2,r3
0004cc  f04f4320          MOV      r3,#0xa0000000
0004d0  f8c32080          STR      r2,[r3,#0x80]
                  |L1.1236|
;;;591        }
;;;592      }
;;;593    }
0004d4  4770              BX       lr
;;;594    
                          ENDP

                  FSMC_GetECC PROC
;;;602      */
;;;603    uint32_t FSMC_GetECC(uint32_t FSMC_Bank)
0004d6  4601              MOV      r1,r0
;;;604    {
;;;605      uint32_t eccval = 0x00000000;
0004d8  f04f0000          MOV      r0,#0
;;;606      
;;;607      if(FSMC_Bank == FSMC_Bank2_NAND)
0004dc  2910              CMP      r1,#0x10
0004de  d103              BNE      |L1.1256|
;;;608      {
;;;609        /* Get the ECCR2 register value */
;;;610        eccval = FSMC_Bank2->ECCR2;
0004e0  f04f4220          MOV      r2,#0xa0000000
0004e4  6f50              LDR      r0,[r2,#0x74]
0004e6  e001              B        |L1.1260|
                  |L1.1256|
;;;611      }
;;;612      else
;;;613      {
;;;614        /* Get the ECCR3 register value */
;;;615        eccval = FSMC_Bank3->ECCR3;
0004e8  4a64              LDR      r2,|L1.1660|
0004ea  6810              LDR      r0,[r2,#0]
                  |L1.1260|
;;;616      }
;;;617      /* Return the error correction code value */
;;;618      return(eccval);
;;;619    }
0004ec  4770              BX       lr
;;;620    
                          ENDP

                  FSMC_ITConfig PROC
;;;636      */
;;;637    void FSMC_ITConfig(uint32_t FSMC_Bank, uint32_t FSMC_IT, FunctionalState NewState)
0004ee  b510              PUSH     {r4,lr}
;;;638    {
;;;639      assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
;;;640      assert_param(IS_FSMC_IT(FSMC_IT));	
;;;641      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;642      
;;;643      if (NewState != DISABLE)
0004f0  b1fa              CBZ      r2,|L1.1330|
;;;644      {
;;;645        /* Enable the selected FSMC_Bank2 interrupts */
;;;646        if(FSMC_Bank == FSMC_Bank2_NAND)
0004f2  2810              CMP      r0,#0x10
0004f4  d108              BNE      |L1.1288|
;;;647        {
;;;648          FSMC_Bank2->SR2 |= FSMC_IT;
0004f6  f04f4320          MOV      r3,#0xa0000000
0004fa  6e5b              LDR      r3,[r3,#0x64]
0004fc  ea430301          ORR      r3,r3,r1
000500  f04f4420          MOV      r4,#0xa0000000
000504  6663              STR      r3,[r4,#0x64]
000506  e033              B        |L1.1392|
                  |L1.1288|
;;;649        }
;;;650        /* Enable the selected FSMC_Bank3 interrupts */
;;;651        else if (FSMC_Bank == FSMC_Bank3_NAND)
000508  f5b07f80          CMP      r0,#0x100
00050c  d108              BNE      |L1.1312|
;;;652        {
;;;653          FSMC_Bank3->SR3 |= FSMC_IT;
00050e  4b5c              LDR      r3,|L1.1664|
000510  681b              LDR      r3,[r3,#0]
000512  ea430301          ORR      r3,r3,r1
000516  f04f4420          MOV      r4,#0xa0000000
00051a  f8c43084          STR      r3,[r4,#0x84]
00051e  e027              B        |L1.1392|
                  |L1.1312|
;;;654        }
;;;655        /* Enable the selected FSMC_Bank4 interrupts */
;;;656        else
;;;657        {
;;;658          FSMC_Bank4->SR4 |= FSMC_IT;    
000520  4b58              LDR      r3,|L1.1668|
000522  681b              LDR      r3,[r3,#0]
000524  ea430301          ORR      r3,r3,r1
000528  f04f4420          MOV      r4,#0xa0000000
00052c  f8c430a4          STR      r3,[r4,#0xa4]
000530  e01e              B        |L1.1392|
                  |L1.1330|
;;;659        }
;;;660      }
;;;661      else
;;;662      {
;;;663        /* Disable the selected FSMC_Bank2 interrupts */
;;;664        if(FSMC_Bank == FSMC_Bank2_NAND)
000532  2810              CMP      r0,#0x10
000534  d108              BNE      |L1.1352|
;;;665        {
;;;666          
;;;667          FSMC_Bank2->SR2 &= (uint32_t)~FSMC_IT;
000536  f04f4320          MOV      r3,#0xa0000000
00053a  6e5b              LDR      r3,[r3,#0x64]
00053c  ea230301          BIC      r3,r3,r1
000540  f04f4420          MOV      r4,#0xa0000000
000544  6663              STR      r3,[r4,#0x64]
000546  e013              B        |L1.1392|
                  |L1.1352|
;;;668        }
;;;669        /* Disable the selected FSMC_Bank3 interrupts */
;;;670        else if (FSMC_Bank == FSMC_Bank3_NAND)
000548  f5b07f80          CMP      r0,#0x100
00054c  d108              BNE      |L1.1376|
;;;671        {
;;;672          FSMC_Bank3->SR3 &= (uint32_t)~FSMC_IT;
00054e  4b4c              LDR      r3,|L1.1664|
000550  681b              LDR      r3,[r3,#0]
000552  ea230301          BIC      r3,r3,r1
000556  f04f4420          MOV      r4,#0xa0000000
00055a  f8c43084          STR      r3,[r4,#0x84]
00055e  e007              B        |L1.1392|
                  |L1.1376|
;;;673        }
;;;674        /* Disable the selected FSMC_Bank4 interrupts */
;;;675        else
;;;676        {
;;;677          FSMC_Bank4->SR4 &= (uint32_t)~FSMC_IT;    
000560  4b48              LDR      r3,|L1.1668|
000562  681b              LDR      r3,[r3,#0]
000564  ea230301          BIC      r3,r3,r1
000568  f04f4420          MOV      r4,#0xa0000000
00056c  f8c430a4          STR      r3,[r4,#0xa4]
                  |L1.1392|
;;;678        }
;;;679      }
;;;680    }
000570  bd10              POP      {r4,pc}
;;;681    
                          ENDP

                  FSMC_GetFlagStatus PROC
;;;696      */
;;;697    FlagStatus FSMC_GetFlagStatus(uint32_t FSMC_Bank, uint32_t FSMC_FLAG)
000572  b510              PUSH     {r4,lr}
;;;698    {
000574  4602              MOV      r2,r0
;;;699      FlagStatus bitstatus = RESET;
000576  f04f0000          MOV      r0,#0
;;;700      uint32_t tmpsr = 0x00000000;
00057a  4603              MOV      r3,r0
;;;701      
;;;702      /* Check the parameters */
;;;703      assert_param(IS_FSMC_GETFLAG_BANK(FSMC_Bank));
;;;704      assert_param(IS_FSMC_GET_FLAG(FSMC_FLAG));
;;;705      
;;;706      if(FSMC_Bank == FSMC_Bank2_NAND)
00057c  2a10              CMP      r2,#0x10
00057e  d103              BNE      |L1.1416|
;;;707      {
;;;708        tmpsr = FSMC_Bank2->SR2;
000580  f04f4420          MOV      r4,#0xa0000000
000584  6e63              LDR      r3,[r4,#0x64]
000586  e007              B        |L1.1432|
                  |L1.1416|
;;;709      }  
;;;710      else if(FSMC_Bank == FSMC_Bank3_NAND)
000588  f5b27f80          CMP      r2,#0x100
00058c  d102              BNE      |L1.1428|
;;;711      {
;;;712        tmpsr = FSMC_Bank3->SR3;
00058e  4c3c              LDR      r4,|L1.1664|
000590  6823              LDR      r3,[r4,#0]
000592  e001              B        |L1.1432|
                  |L1.1428|
;;;713      }
;;;714      /* FSMC_Bank4_PCCARD*/
;;;715      else
;;;716      {
;;;717        tmpsr = FSMC_Bank4->SR4;
000594  4c3b              LDR      r4,|L1.1668|
000596  6823              LDR      r3,[r4,#0]
                  |L1.1432|
;;;718      } 
;;;719      
;;;720      /* Get the flag status */
;;;721      if ((tmpsr & FSMC_FLAG) != (uint16_t)RESET )
000598  420b              TST      r3,r1
00059a  d002              BEQ      |L1.1442|
;;;722      {
;;;723        bitstatus = SET;
00059c  f04f0001          MOV      r0,#1
0005a0  e001              B        |L1.1446|
                  |L1.1442|
;;;724      }
;;;725      else
;;;726      {
;;;727        bitstatus = RESET;
0005a2  f04f0000          MOV      r0,#0
                  |L1.1446|
;;;728      }
;;;729      /* Return the flag status */
;;;730      return bitstatus;
;;;731    }
0005a6  bd10              POP      {r4,pc}
;;;732    
                          ENDP

                  FSMC_ClearFlag PROC
;;;746      */
;;;747    void FSMC_ClearFlag(uint32_t FSMC_Bank, uint32_t FSMC_FLAG)
0005a8  2810              CMP      r0,#0x10
;;;748    {
;;;749     /* Check the parameters */
;;;750      assert_param(IS_FSMC_GETFLAG_BANK(FSMC_Bank));
;;;751      assert_param(IS_FSMC_CLEAR_FLAG(FSMC_FLAG)) ;
;;;752        
;;;753      if(FSMC_Bank == FSMC_Bank2_NAND)
0005aa  d108              BNE      |L1.1470|
;;;754      {
;;;755        FSMC_Bank2->SR2 &= ~FSMC_FLAG; 
0005ac  f04f4220          MOV      r2,#0xa0000000
0005b0  6e52              LDR      r2,[r2,#0x64]
0005b2  ea220201          BIC      r2,r2,r1
0005b6  f04f4320          MOV      r3,#0xa0000000
0005ba  665a              STR      r2,[r3,#0x64]
0005bc  e013              B        |L1.1510|
                  |L1.1470|
;;;756      }  
;;;757      else if(FSMC_Bank == FSMC_Bank3_NAND)
0005be  f5b07f80          CMP      r0,#0x100
0005c2  d108              BNE      |L1.1494|
;;;758      {
;;;759        FSMC_Bank3->SR3 &= ~FSMC_FLAG;
0005c4  4a2e              LDR      r2,|L1.1664|
0005c6  6812              LDR      r2,[r2,#0]
0005c8  ea220201          BIC      r2,r2,r1
0005cc  f04f4320          MOV      r3,#0xa0000000
0005d0  f8c32084          STR      r2,[r3,#0x84]
0005d4  e007              B        |L1.1510|
                  |L1.1494|
;;;760      }
;;;761      /* FSMC_Bank4_PCCARD*/
;;;762      else
;;;763      {
;;;764        FSMC_Bank4->SR4 &= ~FSMC_FLAG;
0005d6  4a2b              LDR      r2,|L1.1668|
0005d8  6812              LDR      r2,[r2,#0]
0005da  ea220201          BIC      r2,r2,r1
0005de  f04f4320          MOV      r3,#0xa0000000
0005e2  f8c320a4          STR      r2,[r3,#0xa4]
                  |L1.1510|
;;;765      }
;;;766    }
0005e6  4770              BX       lr
;;;767    
                          ENDP

                  FSMC_GetITStatus PROC
;;;781      */
;;;782    ITStatus FSMC_GetITStatus(uint32_t FSMC_Bank, uint32_t FSMC_IT)
0005e8  b570              PUSH     {r4-r6,lr}
;;;783    {
0005ea  4602              MOV      r2,r0
;;;784      ITStatus bitstatus = RESET;
0005ec  f04f0000          MOV      r0,#0
;;;785      uint32_t tmpsr = 0x0, itstatus = 0x0, itenable = 0x0; 
0005f0  4603              MOV      r3,r0
0005f2  4604              MOV      r4,r0
0005f4  4605              MOV      r5,r0
;;;786      
;;;787      /* Check the parameters */
;;;788      assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
;;;789      assert_param(IS_FSMC_GET_IT(FSMC_IT));
;;;790      
;;;791      if(FSMC_Bank == FSMC_Bank2_NAND)
0005f6  2a10              CMP      r2,#0x10
0005f8  d103              BNE      |L1.1538|
;;;792      {
;;;793        tmpsr = FSMC_Bank2->SR2;
0005fa  f04f4620          MOV      r6,#0xa0000000
0005fe  6e73              LDR      r3,[r6,#0x64]
000600  e007              B        |L1.1554|
                  |L1.1538|
;;;794      }  
;;;795      else if(FSMC_Bank == FSMC_Bank3_NAND)
000602  f5b27f80          CMP      r2,#0x100
000606  d102              BNE      |L1.1550|
;;;796      {
;;;797        tmpsr = FSMC_Bank3->SR3;
000608  4e1d              LDR      r6,|L1.1664|
00060a  6833              LDR      r3,[r6,#0]
00060c  e001              B        |L1.1554|
                  |L1.1550|
;;;798      }
;;;799      /* FSMC_Bank4_PCCARD*/
;;;800      else
;;;801      {
;;;802        tmpsr = FSMC_Bank4->SR4;
00060e  4e1d              LDR      r6,|L1.1668|
000610  6833              LDR      r3,[r6,#0]
                  |L1.1554|
;;;803      } 
;;;804      
;;;805      itstatus = tmpsr & FSMC_IT;
000612  ea030401          AND      r4,r3,r1
;;;806      
;;;807      itenable = tmpsr & (FSMC_IT >> 3);
000616  ea0305d1          AND      r5,r3,r1,LSR #3
;;;808      if ((itstatus != (uint32_t)RESET)  && (itenable != (uint32_t)RESET))
00061a  b11c              CBZ      r4,|L1.1572|
00061c  b115              CBZ      r5,|L1.1572|
;;;809      {
;;;810        bitstatus = SET;
00061e  f04f0001          MOV      r0,#1
000622  e001              B        |L1.1576|
                  |L1.1572|
;;;811      }
;;;812      else
;;;813      {
;;;814        bitstatus = RESET;
000624  f04f0000          MOV      r0,#0
                  |L1.1576|
;;;815      }
;;;816      return bitstatus; 
;;;817    }
000628  bd70              POP      {r4-r6,pc}
;;;818    
                          ENDP

                  FSMC_ClearITPendingBit PROC
;;;832      */
;;;833    void FSMC_ClearITPendingBit(uint32_t FSMC_Bank, uint32_t FSMC_IT)
00062a  2810              CMP      r0,#0x10
;;;834    {
;;;835      /* Check the parameters */
;;;836      assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
;;;837      assert_param(IS_FSMC_IT(FSMC_IT));
;;;838        
;;;839      if(FSMC_Bank == FSMC_Bank2_NAND)
00062c  d108              BNE      |L1.1600|
;;;840      {
;;;841        FSMC_Bank2->SR2 &= ~(FSMC_IT >> 3); 
00062e  f04f4220          MOV      r2,#0xa0000000
000632  6e52              LDR      r2,[r2,#0x64]
000634  ea2202d1          BIC      r2,r2,r1,LSR #3
000638  f04f4320          MOV      r3,#0xa0000000
00063c  665a              STR      r2,[r3,#0x64]
00063e  e013              B        |L1.1640|
                  |L1.1600|
;;;842      }  
;;;843      else if(FSMC_Bank == FSMC_Bank3_NAND)
000640  f5b07f80          CMP      r0,#0x100
000644  d108              BNE      |L1.1624|
;;;844      {
;;;845        FSMC_Bank3->SR3 &= ~(FSMC_IT >> 3);
000646  4a0e              LDR      r2,|L1.1664|
000648  6812              LDR      r2,[r2,#0]
00064a  ea2202d1          BIC      r2,r2,r1,LSR #3
00064e  f04f4320          MOV      r3,#0xa0000000
000652  f8c32084          STR      r2,[r3,#0x84]
000656  e007              B        |L1.1640|
                  |L1.1624|
;;;846      }
;;;847      /* FSMC_Bank4_PCCARD*/
;;;848      else
;;;849      {
;;;850        FSMC_Bank4->SR4 &= ~(FSMC_IT >> 3);
000658  4a0a              LDR      r2,|L1.1668|
00065a  6812              LDR      r2,[r2,#0]
00065c  ea2202d1          BIC      r2,r2,r1,LSR #3
000660  f04f4320          MOV      r3,#0xa0000000
000664  f8c320a4          STR      r2,[r3,#0xa4]
                  |L1.1640|
;;;851      }
;;;852    }
000668  4770              BX       lr
;;;853    
                          ENDP

00066a  0000              DCW      0x0000
                  |L1.1644|
                          DCD      0xa00000a0
                  |L1.1648|
                          DCD      0x000ffffb
                  |L1.1652|
                          DCD      0xa0000080
                  |L1.1656|
                          DCD      0x000fffbf
                  |L1.1660|
                          DCD      0xa0000094
                  |L1.1664|
                          DCD      0xa0000084
                  |L1.1668|
                          DCD      0xa00000a4
