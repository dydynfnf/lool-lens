; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\slider.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\slider.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -I.\GUI\AntiAlias -I.\GUI\Config -I.\GUI\ConvertColor -I.\GUI\ConvertMono -I.\GUI\Core -I.\GUI\Font -I.\GUI\GUI_X -I.\GUI\JPEG -I.\GUI\LCDDriver -I.\GUI\MemDev -I.\GUI\MultiLayer -I.\GUI\Widget -I.\GUI\WM -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\INC\ST\STM32F10x -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\slider.crf GUI\Widget\SLIDER.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _Paint PROC
;;;121    */
;;;122    static void _Paint(SLIDER_Obj* pObj, WM_HWIN hObj) {
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  b089              SUB      sp,sp,#0x24
000006  4604              MOV      r4,r0
000008  468a              MOV      r10,r1
;;;123      GUI_RECT r, rFocus, rSlider, rSlot;
;;;124      int x0, xsize, i, Range, NumTicks;
;;;125      WIDGET__GetClientRect(&pObj->Widget, &rFocus);
00000a  a905              ADD      r1,sp,#0x14
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       WIDGET__GetClientRect
;;;126      GUI__ReduceRect(&r, &rFocus, 1);
000012  2201              MOVS     r2,#1
000014  a905              ADD      r1,sp,#0x14
000016  a807              ADD      r0,sp,#0x1c
000018  f7fffffe          BL       GUI__ReduceRect
;;;127      NumTicks = pObj->NumTicks;
00001c  6ca5              LDR      r5,[r4,#0x48]
;;;128      xsize    = r.x1 - r.x0  + 1 - pObj->Width;
00001e  f9bd0020          LDRSH    r0,[sp,#0x20]
000022  f9bd101c          LDRSH    r1,[sp,#0x1c]
000026  eba00001          SUB      r0,r0,r1
00002a  f1000001          ADD      r0,r0,#1
00002e  f9b4104c          LDRSH    r1,[r4,#0x4c]
000032  eba00701          SUB      r7,r0,r1
;;;129      x0       = r.x0 + pObj->Width / 2;
000036  f9b4004c          LDRSH    r0,[r4,#0x4c]
00003a  eb0071d0          ADD      r1,r0,r0,LSR #31
00003e  f9bd201c          LDRSH    r2,[sp,#0x1c]
000042  eb020661          ADD      r6,r2,r1,ASR #1
;;;130      Range    = pObj->Max - pObj->Min;
000046  e9d4100e          LDRD     r1,r0,[r4,#0x38]
00004a  eba00901          SUB      r9,r0,r1
;;;131      if (Range == 0) {
00004e  f1b90f00          CMP      r9,#0
000052  d101              BNE      |L1.88|
;;;132        Range = 1;
000054  f04f0901          MOV      r9,#1
                  |L1.88|
;;;133      }
;;;134      /* Fill with parents background color */
;;;135      #if !SLIDER_SUPPORT_TRANSPARENCY   /* Not needed any more, since window is transparent*/
;;;136        if (pObj->aBkColor[0] == GUI_INVALID_COLOR) {
;;;137          LCD_SetBkColor(WIDGET__GetBkColor(hObj));
;;;138        } else {
;;;139          LCD_SetBkColor(pObj->aBkColor[0]);
;;;140        }
;;;141        GUI_Clear();
;;;142      #else
;;;143        if (!WM_GetHasTrans(hObj)) {
000058  4650              MOV      r0,r10
00005a  f7fffffe          BL       WM_GetHasTrans
00005e  b920              CBNZ     r0,|L1.106|
;;;144          LCD_SetBkColor(pObj->aBkColor[0]);
000060  6aa0              LDR      r0,[r4,#0x28]
000062  f7fffffe          BL       LCD_SetBkColor
;;;145          GUI_Clear();
000066  f7fffffe          BL       GUI_Clear
                  |L1.106|
;;;146        }
;;;147      #endif
;;;148      /* Calculate Slider position */
;;;149      rSlider    = r;
00006a  e9dd0107          LDRD     r0,r1,[sp,#0x1c]
00006e  e9cd0103          STRD     r0,r1,[sp,#0xc]
;;;150      rSlider.y0 = 5;
000072  f04f0005          MOV      r0,#5
000076  f8ad000e          STRH     r0,[sp,#0xe]
;;;151      rSlider.x0 = x0 + (U32)xsize * (U32)(pObj->v - pObj->Min) / Range - pObj->Width / 2;
00007a  6ba2              LDR      r2,[r4,#0x38]
00007c  6c21              LDR      r1,[r4,#0x40]
00007e  eba10102          SUB      r1,r1,r2
000082  fb01f107          MUL      r1,r1,r7
000086  fbb1f1f9          UDIV     r1,r1,r9
00008a  4431              ADD      r1,r1,r6
00008c  f9b4004c          LDRSH    r0,[r4,#0x4c]
000090  eb0072d0          ADD      r2,r0,r0,LSR #31
000094  eba10162          SUB      r1,r1,r2,ASR #1
000098  b209              SXTH     r1,r1
00009a  f8ad100c          STRH     r1,[sp,#0xc]
;;;152      rSlider.x1 = rSlider.x0 + pObj->Width;
00009e  f8bd000c          LDRH     r0,[sp,#0xc]
0000a2  f8b4104c          LDRH     r1,[r4,#0x4c]
0000a6  4408              ADD      r0,r0,r1
0000a8  b200              SXTH     r0,r0
0000aa  f8ad0010          STRH     r0,[sp,#0x10]
;;;153      /* Calculate Slot position */
;;;154      rSlot.x0 = x0;
0000ae  b230              SXTH     r0,r6
0000b0  f8ad0004          STRH     r0,[sp,#4]
;;;155      rSlot.x1 = x0 + xsize;
0000b4  eb060007          ADD      r0,r6,r7
0000b8  b200              SXTH     r0,r0
0000ba  f8ad0008          STRH     r0,[sp,#8]
;;;156      rSlot.y0 = (rSlider.y0 + rSlider.y1) / 2 - 1;
0000be  f9bd100e          LDRSH    r1,[sp,#0xe]
0000c2  f9bd2012          LDRSH    r2,[sp,#0x12]
0000c6  eb010002          ADD      r0,r1,r2
0000ca  eb0071d0          ADD      r1,r0,r0,LSR #31
0000ce  ea4f0161          ASR      r1,r1,#1
0000d2  f1a10101          SUB      r1,r1,#1
0000d6  b209              SXTH     r1,r1
0000d8  f8ad1006          STRH     r1,[sp,#6]
;;;157      rSlot.y1 = rSlot.y0 + 3;
0000dc  f8bd0006          LDRH     r0,[sp,#6]
0000e0  f1000003          ADD      r0,r0,#3
0000e4  b200              SXTH     r0,r0
0000e6  f8ad000a          STRH     r0,[sp,#0xa]
;;;158      WIDGET__EFFECT_DrawDownRect(&pObj->Widget, &rSlot);        /* Draw slot */
0000ea  a901              ADD      r1,sp,#4
0000ec  4620              MOV      r0,r4
0000ee  f7fffffe          BL       WIDGET__EFFECT_DrawDownRect
;;;159      /* Draw the ticks */
;;;160      if (NumTicks < 0) {
0000f2  2d00              CMP      r5,#0
0000f4  da09              BGE      |L1.266|
;;;161        NumTicks = Range + 1;
0000f6  f1090501          ADD      r5,r9,#1
;;;162        if (NumTicks > (xsize / 5)) {
0000fa  f04f0005          MOV      r0,#5
0000fe  fb97f0f0          SDIV     r0,r7,r0
000102  42a8              CMP      r0,r5
000104  da01              BGE      |L1.266|
;;;163          NumTicks = 11;
000106  f04f050b          MOV      r5,#0xb
                  |L1.266|
;;;164        }
;;;165      }
;;;166      if (NumTicks > 1) {
00010a  2d01              CMP      r5,#1
00010c  dd19              BLE      |L1.322|
;;;167        LCD_SetColor(GUI_BLACK);
00010e  2000              MOVS     r0,#0
000110  f7fffffe          BL       LCD_SetColor
;;;168        for (i = 0; i < NumTicks; i++) {
000114  f04f0800          MOV      r8,#0
000118  e011              B        |L1.318|
                  |L1.282|
;;;169          int x = x0 + xsize * i / (NumTicks - 1);
00011a  fb07f008          MUL      r0,r7,r8
00011e  f1a50101          SUB      r1,r5,#1
000122  fb90f0f1          SDIV     r0,r0,r1
000126  eb000b06          ADD      r11,r0,r6
;;;170          WIDGET__DrawVLine(&pObj->Widget, x, 1, 3);
00012a  f04f0303          MOV      r3,#3
00012e  f04f0201          MOV      r2,#1
000132  4659              MOV      r1,r11
000134  4620              MOV      r0,r4
000136  f7fffffe          BL       WIDGET__DrawVLine
00013a  f1080801          ADD      r8,r8,#1              ;168
                  |L1.318|
00013e  45a8              CMP      r8,r5                 ;168
000140  dbeb              BLT      |L1.282|
                  |L1.322|
;;;171        }
;;;172      }
;;;173      /* Draw the slider itself */
;;;174      LCD_SetColor(pObj->aColor[0]);
000142  6b20              LDR      r0,[r4,#0x30]
000144  f7fffffe          BL       LCD_SetColor
;;;175      WIDGET__FillRectEx(&pObj->Widget, &rSlider);
000148  a903              ADD      r1,sp,#0xc
00014a  4620              MOV      r0,r4
00014c  f7fffffe          BL       WIDGET__FillRectEx
;;;176      LCD_SetColor(GUI_BLACK);
000150  2000              MOVS     r0,#0
000152  f7fffffe          BL       LCD_SetColor
;;;177      WIDGET__EFFECT_DrawUpRect(&pObj->Widget, &rSlider);
000156  a903              ADD      r1,sp,#0xc
000158  4620              MOV      r0,r4
00015a  f7fffffe          BL       WIDGET__EFFECT_DrawUpRect
;;;178      /* Draw focus */
;;;179      if (pObj->Widget.State & WIDGET_STATE_FOCUS) {
00015e  8ce0              LDRH     r0,[r4,#0x26]
000160  f0100f01          TST      r0,#1
000164  d007              BEQ      |L1.374|
;;;180        LCD_SetColor(GUI_BLACK);
000166  2000              MOVS     r0,#0
000168  f7fffffe          BL       LCD_SetColor
;;;181        WIDGET__DrawFocusRect(&pObj->Widget, &rFocus, 0);
00016c  2200              MOVS     r2,#0
00016e  a905              ADD      r1,sp,#0x14
000170  4620              MOV      r0,r4
000172  f7fffffe          BL       WIDGET__DrawFocusRect
                  |L1.374|
;;;182      }
;;;183    }
000176  b009              ADD      sp,sp,#0x24
000178  e8bd8ff0          POP      {r4-r11,pc}
;;;184    
                          ENDP

                  _SliderPressed PROC
;;;188    */
;;;189    static void _SliderPressed(SLIDER_Handle hObj, SLIDER_Obj* pObj) {
00017c  b570              PUSH     {r4-r6,lr}
00017e  4605              MOV      r5,r0
000180  460c              MOV      r4,r1
;;;190      WIDGET_OrState(hObj, SLIDER_STATE_PRESSED);
000182  f44f7180          MOV      r1,#0x100
000186  4628              MOV      r0,r5
000188  f7fffffe          BL       WIDGET_OrState
;;;191      if (pObj->Widget.Win.Status & WM_SF_ISVIS) {
00018c  8ba0              LDRH     r0,[r4,#0x1c]
00018e  f0100f02          TST      r0,#2
000192  d003              BEQ      |L1.412|
;;;192        WM_NotifyParent(hObj, WM_NOTIFICATION_CLICKED);
000194  2101              MOVS     r1,#1
000196  4628              MOV      r0,r5
000198  f7fffffe          BL       WM_NotifyParent
                  |L1.412|
;;;193      }
;;;194    }
00019c  bd70              POP      {r4-r6,pc}
;;;195    
                          ENDP

                  _SliderReleased PROC
;;;199    */
;;;200    static void _SliderReleased(SLIDER_Handle hObj, SLIDER_Obj* pObj) {
00019e  b570              PUSH     {r4-r6,lr}
0001a0  4605              MOV      r5,r0
0001a2  460c              MOV      r4,r1
;;;201      WIDGET_AndState(hObj, SLIDER_STATE_PRESSED);
0001a4  f44f7180          MOV      r1,#0x100
0001a8  4628              MOV      r0,r5
0001aa  f7fffffe          BL       WIDGET_AndState
;;;202      if (pObj->Widget.Win.Status & WM_SF_ISVIS) {
0001ae  8ba0              LDRH     r0,[r4,#0x1c]
0001b0  f0100f02          TST      r0,#2
0001b4  d003              BEQ      |L1.446|
;;;203        WM_NotifyParent(hObj, WM_NOTIFICATION_RELEASED);
0001b6  2102              MOVS     r1,#2
0001b8  4628              MOV      r0,r5
0001ba  f7fffffe          BL       WM_NotifyParent
                  |L1.446|
;;;204      }
;;;205    }
0001be  bd70              POP      {r4-r6,pc}
;;;206    
                          ENDP

                  SLIDER_SetValue PROC
;;;411    */
;;;412    void SLIDER_SetValue(SLIDER_Handle hObj, int v) {
0001c0  b570              PUSH     {r4-r6,lr}
0001c2  4606              MOV      r6,r0
0001c4  460d              MOV      r5,r1
;;;413      SLIDER_Obj* pObj;
;;;414      if (hObj) {
0001c6  b1b6              CBZ      r6,|L1.502|
;;;415        WM_LOCK();
;;;416        pObj = SLIDER_H2P(hObj);
0001c8  4630              MOV      r0,r6
0001ca  f7fffffe          BL       GUI_ALLOC_h2p
0001ce  4604              MOV      r4,r0
;;;417        /* Put in min/max range */
;;;418        if (v < pObj->Min) {
0001d0  6ba0              LDR      r0,[r4,#0x38]
0001d2  42a8              CMP      r0,r5
0001d4  dd00              BLE      |L1.472|
;;;419          v = pObj->Min;
0001d6  6ba5              LDR      r5,[r4,#0x38]
                  |L1.472|
;;;420        }
;;;421        if (v > pObj->Max) {
0001d8  6be0              LDR      r0,[r4,#0x3c]
0001da  42a8              CMP      r0,r5
0001dc  da00              BGE      |L1.480|
;;;422          v = pObj->Max;
0001de  6be5              LDR      r5,[r4,#0x3c]
                  |L1.480|
;;;423        }
;;;424        if (pObj->v != v) {
0001e0  6c20              LDR      r0,[r4,#0x40]
0001e2  42a8              CMP      r0,r5
0001e4  d007              BEQ      |L1.502|
;;;425          pObj->v = v;
0001e6  6425              STR      r5,[r4,#0x40]
;;;426          WM_InvalidateWindow(hObj);
0001e8  4630              MOV      r0,r6
0001ea  f7fffffe          BL       WM_InvalidateWindow
;;;427          WM_NotifyParent(hObj, WM_NOTIFICATION_VALUE_CHANGED);
0001ee  2105              MOVS     r1,#5
0001f0  4630              MOV      r0,r6
0001f2  f7fffffe          BL       WM_NotifyParent
                  |L1.502|
;;;428        }
;;;429        WM_UNLOCK();
;;;430      }
;;;431    }
0001f6  bd70              POP      {r4-r6,pc}
;;;432    
                          ENDP

                  _OnTouch PROC
;;;210    */
;;;211    static void _OnTouch(SLIDER_Handle hObj, SLIDER_Obj* pObj, WM_MESSAGE*pMsg) {
0001f8  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
0001fc  460c              MOV      r4,r1
0001fe  4617              MOV      r7,r2
;;;212      const GUI_PID_STATE* pState = (const GUI_PID_STATE*)pMsg->Data.p;
000200  f8d78008          LDR      r8,[r7,#8]
;;;213      if (pMsg->Data.p) {  /* Something happened in our area (pressed or released) */
000204  68b8              LDR      r0,[r7,#8]
000206  2800              CMP      r0,#0
000208  d05f              BEQ      |L1.714|
;;;214        if (pState->Pressed) {
00020a  f8980008          LDRB     r0,[r8,#8]
00020e  2800              CMP      r0,#0
000210  d053              BEQ      |L1.698|
;;;215          int x0, xsize, x, Sel, Range;
;;;216          Range = (pObj->Max - pObj->Min);
000212  e9d4100e          LDRD     r1,r0,[r4,#0x38]
000216  eba00b01          SUB      r11,r0,r1
;;;217          x0    = 1 + pObj->Width / 2;  /* 1 pixel focus rectangle + width of actual slider */
00021a  f9b4004c          LDRSH    r0,[r4,#0x4c]
00021e  eb0071d0          ADD      r1,r0,r0,LSR #31
000222  ea4f0161          ASR      r1,r1,#1
000226  f1010a01          ADD      r10,r1,#1
;;;218          x     = (pObj->Widget.State & WIDGET_STATE_VERTICAL) ? pState->y : pState->x;
00022a  8ce0              LDRH     r0,[r4,#0x26]
00022c  f0100f08          TST      r0,#8
000230  d002              BEQ      |L1.568|
000232  f8d80004          LDR      r0,[r8,#4]
000236  e001              B        |L1.572|
                  |L1.568|
000238  f8d80000          LDR      r0,[r8,#0]
                  |L1.572|
00023c  4605              MOV      r5,r0
;;;219          x    -= x0;
00023e  eba5050a          SUB      r5,r5,r10
;;;220          xsize = WIDGET__GetWindowSizeX(hObj) - 2 * x0;
000242  9800              LDR      r0,[sp,#0]
000244  f7fffffe          BL       WIDGET__GetWindowSizeX
000248  f04f0102          MOV      r1,#2
00024c  fb01091a          MLS      r9,r1,r10,r0
;;;221          if (x <= 0) {
000250  2d00              CMP      r5,#0
000252  dc01              BGT      |L1.600|
;;;222            Sel = pObj->Min;
000254  6ba6              LDR      r6,[r4,#0x38]
000256  e018              B        |L1.650|
                  |L1.600|
;;;223          } else if (x >= xsize) {
000258  454d              CMP      r5,r9
00025a  db01              BLT      |L1.608|
;;;224            Sel = pObj->Max;
00025c  6be6              LDR      r6,[r4,#0x3c]
00025e  e014              B        |L1.650|
                  |L1.608|
;;;225          } else {
;;;226            int Div;
;;;227            Div = xsize ? xsize : 1;     /* Make sure we do not divide by 0, even though xsize should never be 0 in this case anyhow */
000260  f1b90f00          CMP      r9,#0
000264  d001              BEQ      |L1.618|
000266  4649              MOV      r1,r9
000268  e001              B        |L1.622|
                  |L1.618|
00026a  f04f0101          MOV      r1,#1
                  |L1.622|
00026e  4608              MOV      r0,r1
;;;228            Sel = pObj->Min + ((U32)Range * (U32)x + Div / 2) / Div;
000270  4601              MOV      r1,r0
000272  eb0072d1          ADD      r2,r0,r1,LSR #31
000276  ea4f0262          ASR      r2,r2,#1
00027a  fb0b2205          MLA      r2,r11,r5,r2
00027e  fbb2f2f0          UDIV     r2,r2,r0
000282  6ba3              LDR      r3,[r4,#0x38]
000284  eb020603          ADD      r6,r2,r3
;;;229          }
000288  bf00              NOP      
                  |L1.650|
;;;230          if (WM_IsFocussable(hObj)) {
00028a  9800              LDR      r0,[sp,#0]
00028c  f7fffffe          BL       WM_IsFocussable
000290  b110              CBZ      r0,|L1.664|
;;;231            WM_SetFocus(hObj);
000292  9800              LDR      r0,[sp,#0]
000294  f7fffffe          BL       WM_SetFocus
                  |L1.664|
;;;232          }
;;;233          WM_SetCapture(hObj, 1);
000298  2101              MOVS     r1,#1
00029a  9800              LDR      r0,[sp,#0]
00029c  f7fffffe          BL       WM_SetCapture
;;;234          SLIDER_SetValue(hObj, Sel);
0002a0  4631              MOV      r1,r6
0002a2  9800              LDR      r0,[sp,#0]
0002a4  f7fffffe          BL       SLIDER_SetValue
;;;235          if ((pObj->Widget.State & SLIDER_STATE_PRESSED) == 0){   
0002a8  8ce0              LDRH     r0,[r4,#0x26]
0002aa  f4107f80          TST      r0,#0x100
0002ae  d103              BNE      |L1.696|
;;;236            _SliderPressed(hObj, pObj);
0002b0  4621              MOV      r1,r4
0002b2  9800              LDR      r0,[sp,#0]
0002b4  f7fffffe          BL       _SliderPressed
                  |L1.696|
;;;237          }
;;;238        } else {
0002b8  e007              B        |L1.714|
                  |L1.698|
;;;239          /* React only if button was pressed before ... avoid problems with moving / hiding windows above (such as dropdown) */
;;;240          if (pObj->Widget.State & SLIDER_STATE_PRESSED) {   
0002ba  8ce0              LDRH     r0,[r4,#0x26]
0002bc  f4107f80          TST      r0,#0x100
0002c0  d003              BEQ      |L1.714|
;;;241            _SliderReleased(hObj, pObj);
0002c2  4621              MOV      r1,r4
0002c4  9800              LDR      r0,[sp,#0]
0002c6  f7fffffe          BL       _SliderReleased
                  |L1.714|
;;;242          }
;;;243        }
;;;244      }
;;;245    }
0002ca  e8bd8ffe          POP      {r1-r11,pc}
;;;246    
                          ENDP

                  SLIDER_Dec PROC
;;;358    */
;;;359    void SLIDER_Dec(SLIDER_Handle hObj) {
0002ce  b570              PUSH     {r4-r6,lr}
0002d0  4605              MOV      r5,r0
;;;360      SLIDER_Obj* pObj;
;;;361      if (hObj) {
0002d2  b195              CBZ      r5,|L1.762|
;;;362        WM_LOCK();
;;;363        pObj = SLIDER_H2P(hObj);
0002d4  4628              MOV      r0,r5
0002d6  f7fffffe          BL       GUI_ALLOC_h2p
0002da  4604              MOV      r4,r0
;;;364        if (pObj->v > pObj->Min) {
0002dc  6ba1              LDR      r1,[r4,#0x38]
0002de  6c20              LDR      r0,[r4,#0x40]
0002e0  4288              CMP      r0,r1
0002e2  dd0a              BLE      |L1.762|
;;;365          pObj->v--;
0002e4  6c20              LDR      r0,[r4,#0x40]
0002e6  f1a00001          SUB      r0,r0,#1
0002ea  6420              STR      r0,[r4,#0x40]
;;;366          WM_InvalidateWindow(hObj);
0002ec  4628              MOV      r0,r5
0002ee  f7fffffe          BL       WM_InvalidateWindow
;;;367          WM_NotifyParent(hObj, WM_NOTIFICATION_VALUE_CHANGED);
0002f2  2105              MOVS     r1,#5
0002f4  4628              MOV      r0,r5
0002f6  f7fffffe          BL       WM_NotifyParent
                  |L1.762|
;;;368        }
;;;369        WM_UNLOCK();
;;;370      }
;;;371    }
0002fa  bd70              POP      {r4-r6,pc}
;;;372    
                          ENDP

                  SLIDER_Inc PROC
;;;376    */
;;;377    void SLIDER_Inc(SLIDER_Handle hObj) {
0002fc  b570              PUSH     {r4-r6,lr}
0002fe  4605              MOV      r5,r0
;;;378      SLIDER_Obj* pObj;
;;;379      if (hObj) {
000300  b195              CBZ      r5,|L1.808|
;;;380        WM_LOCK();
;;;381        pObj = SLIDER_H2P(hObj);
000302  4628              MOV      r0,r5
000304  f7fffffe          BL       GUI_ALLOC_h2p
000308  4604              MOV      r4,r0
;;;382        if (pObj->v < pObj->Max) {
00030a  e9d4100f          LDRD     r1,r0,[r4,#0x3c]
00030e  4288              CMP      r0,r1
000310  da0a              BGE      |L1.808|
;;;383          pObj->v++;
000312  6c20              LDR      r0,[r4,#0x40]
000314  f1000001          ADD      r0,r0,#1
000318  6420              STR      r0,[r4,#0x40]
;;;384          WM_InvalidateWindow(hObj);
00031a  4628              MOV      r0,r5
00031c  f7fffffe          BL       WM_InvalidateWindow
;;;385          WM_NotifyParent(hObj, WM_NOTIFICATION_VALUE_CHANGED);
000320  2105              MOVS     r1,#5
000322  4628              MOV      r0,r5
000324  f7fffffe          BL       WM_NotifyParent
                  |L1.808|
;;;386        }
;;;387        WM_UNLOCK();
;;;388      }
;;;389    }
000328  bd70              POP      {r4-r6,pc}
;;;390    
                          ENDP

                  _OnKey PROC
;;;250    */
;;;251    static void  _OnKey(SLIDER_Handle hObj, WM_MESSAGE*pMsg) {
00032a  e92d41f0          PUSH     {r4-r8,lr}
00032e  4606              MOV      r6,r0
000330  460c              MOV      r4,r1
;;;252      const WM_KEY_INFO* pKeyInfo;
;;;253      int Key;
;;;254      pKeyInfo = (const WM_KEY_INFO*)(pMsg->Data.p);
000332  68a5              LDR      r5,[r4,#8]
;;;255      Key = pKeyInfo->Key;
000334  682f              LDR      r7,[r5,#0]
;;;256      if (pKeyInfo->PressedCnt > 0) {
000336  6868              LDR      r0,[r5,#4]
000338  2800              CMP      r0,#0
00033a  dd0e              BLE      |L1.858|
;;;257        switch (Key) {
00033c  2f10              CMP      r7,#0x10
00033e  d005              BEQ      |L1.844|
000340  2f12              CMP      r7,#0x12
000342  d107              BNE      |L1.852|
;;;258          case GUI_KEY_RIGHT:
;;;259            SLIDER_Inc(hObj);
000344  4630              MOV      r0,r6
000346  f7fffffe          BL       SLIDER_Inc
;;;260            break;                    /* Send to parent by not doing anything */
00034a  e005              B        |L1.856|
                  |L1.844|
;;;261          case GUI_KEY_LEFT:
;;;262            SLIDER_Dec(hObj);
00034c  4630              MOV      r0,r6
00034e  f7fffffe          BL       SLIDER_Dec
;;;263            break;                    /* Send to parent by not doing anything */
000352  e001              B        |L1.856|
                  |L1.852|
;;;264          default:
;;;265            return;
;;;266        }
;;;267      }
;;;268    }
000354  e8bd81f0          POP      {r4-r8,pc}
                  |L1.856|
000358  bf00              NOP                            ;260
                  |L1.858|
00035a  bf00              NOP      
00035c  e7fa              B        |L1.852|
;;;269    
                          ENDP

                  _SLIDER_Callback PROC
;;;273    */
;;;274    static void _SLIDER_Callback (WM_MESSAGE *pMsg) {
00035e  b570              PUSH     {r4-r6,lr}
000360  4604              MOV      r4,r0
;;;275      SLIDER_Handle hObj;
;;;276      SLIDER_Obj* pObj;
;;;277      hObj = pMsg->hWin;
000362  f9b45004          LDRSH    r5,[r4,#4]
;;;278      pObj = SLIDER_H2P(hObj);
000366  4628              MOV      r0,r5
000368  f7fffffe          BL       GUI_ALLOC_h2p
00036c  4606              MOV      r6,r0
;;;279      /* Let widget handle the standard messages */
;;;280      if (WIDGET_HandleActive(hObj, pMsg) == 0) {
00036e  4621              MOV      r1,r4
000370  4628              MOV      r0,r5
000372  f7fffffe          BL       WIDGET_HandleActive
000376  b900              CBNZ     r0,|L1.890|
                  |L1.888|
;;;281        return;
;;;282      }
;;;283      switch (pMsg->MsgId) {
;;;284      case WM_PAINT:
;;;285        GUI_DEBUG_LOG("SLIDER: _Callback(WM_PAINT)\n");
;;;286        _Paint(pObj, hObj);
;;;287        return;
;;;288      case WM_TOUCH:
;;;289        _OnTouch(hObj, pObj, pMsg);
;;;290        break;
;;;291      case WM_KEY:
;;;292        _OnKey(hObj, pMsg);
;;;293        break;
;;;294      }
;;;295      WM_DefaultProc(pMsg);
;;;296    }
000378  bd70              POP      {r4-r6,pc}
                  |L1.890|
00037a  6820              LDR      r0,[r4,#0]            ;283
00037c  280c              CMP      r0,#0xc               ;283
00037e  d008              BEQ      |L1.914|
000380  280e              CMP      r0,#0xe               ;283
000382  d00c              BEQ      |L1.926|
000384  280f              CMP      r0,#0xf               ;283
000386  d10f              BNE      |L1.936|
000388  4629              MOV      r1,r5                 ;286
00038a  4630              MOV      r0,r6                 ;286
00038c  f7fffffe          BL       _Paint
000390  e7f2              B        |L1.888|
                  |L1.914|
000392  4622              MOV      r2,r4                 ;289
000394  4631              MOV      r1,r6                 ;289
000396  4628              MOV      r0,r5                 ;289
000398  f7fffffe          BL       _OnTouch
00039c  e004              B        |L1.936|
                  |L1.926|
00039e  4621              MOV      r1,r4                 ;292
0003a0  4628              MOV      r0,r5                 ;292
0003a2  f7fffffe          BL       _OnKey
0003a6  bf00              NOP                            ;293
                  |L1.936|
0003a8  bf00              NOP                            ;290
0003aa  4620              MOV      r0,r4                 ;295
0003ac  f7fffffe          BL       WM_DefaultProc
0003b0  bf00              NOP      
0003b2  e7e1              B        |L1.888|
;;;297    
                          ENDP

                  SLIDER_CreateEx PROC
;;;311    */
;;;312    SLIDER_Handle SLIDER_CreateEx(int x0, int y0, int xsize, int ysize, WM_HWIN hParent,
0003b4  e92d4fff          PUSH     {r0-r11,lr}
;;;313                                  int WinFlags, int ExFlags, int Id)
;;;314    {
0003b8  b085              SUB      sp,sp,#0x14
0003ba  4680              MOV      r8,r0
0003bc  4689              MOV      r9,r1
0003be  4692              MOV      r10,r2
0003c0  e9dd5b13          LDRD     r5,r11,[sp,#0x4c]
;;;315      SLIDER_Handle hObj;
;;;316      /* Create the window */
;;;317      WM_LOCK();
;;;318      #if SLIDER_SUPPORT_TRANSPARENCY
;;;319        WinFlags |= WM_CF_HASTRANS;
0003c4  f0450501          ORR      r5,r5,#1
;;;320      #endif
;;;321      hObj = WM_CreateWindowAsChild(x0, y0, xsize, ysize, hParent, WinFlags, _SLIDER_Callback, sizeof(SLIDER_Obj) - sizeof(WM_Obj));
0003c8  f04f0230          MOV      r2,#0x30
0003cc  4b51              LDR      r3,|L1.1300|
0003ce  b2a8              UXTH     r0,r5
0003d0  9912              LDR      r1,[sp,#0x48]
0003d2  e9cd3202          STRD     r3,r2,[sp,#8]
0003d6  e9cd1000          STRD     r1,r0,[sp,#0]
0003da  4652              MOV      r2,r10
0003dc  4649              MOV      r1,r9
0003de  4640              MOV      r0,r8
0003e0  9b08              LDR      r3,[sp,#0x20]
0003e2  f7fffffe          BL       WM_CreateWindowAsChild
0003e6  4606              MOV      r6,r0
;;;322      if (hObj) {
0003e8  b346              CBZ      r6,|L1.1084|
;;;323        SLIDER_Obj* pObj = SLIDER_H2P(hObj);
0003ea  4630              MOV      r0,r6
0003ec  f7fffffe          BL       GUI_ALLOC_h2p
0003f0  4604              MOV      r4,r0
;;;324        U16 InitState;
;;;325        /* Handle SpecialFlags */
;;;326        InitState = WIDGET_STATE_FOCUSSABLE;
0003f2  f04f0710          MOV      r7,#0x10
;;;327        if (ExFlags & SLIDER_CF_VERTICAL) {
0003f6  f01b0f08          TST      r11,#8
0003fa  d001              BEQ      |L1.1024|
;;;328          InitState |= WIDGET_CF_VERTICAL;
0003fc  f0470708          ORR      r7,r7,#8
                  |L1.1024|
;;;329        }
;;;330        /* init widget specific variables */
;;;331        WIDGET__Init(&pObj->Widget, Id, InitState);
000400  463a              MOV      r2,r7
000402  4620              MOV      r0,r4
000404  9915              LDR      r1,[sp,#0x54]
000406  f7fffffe          BL       WIDGET__Init
;;;332        /* init member variables */
;;;333        SLIDER_INIT_ID(pObj);
;;;334        pObj->aBkColor[0] = _DefaultBkColor;
00040a  4843              LDR      r0,|L1.1304|
00040c  6800              LDR      r0,[r0,#0]  ; _DefaultBkColor
00040e  62a0              STR      r0,[r4,#0x28]
;;;335        pObj->aBkColor[1] = SLIDER_BKCOLOR1_DEFAULT;
000410  f06f417f          MVN      r1,#0xff000000
000414  62e1              STR      r1,[r4,#0x2c]
;;;336        pObj->aColor[0]   = SLIDER_COLOR0_DEFAULT;
000416  4841              LDR      r0,|L1.1308|
000418  6320              STR      r0,[r4,#0x30]
;;;337        pObj->aColor[1]   = SLIDER_COLOR1_DEFAULT;
00041a  f04f0100          MOV      r1,#0
00041e  6361              STR      r1,[r4,#0x34]
;;;338        pObj->Width       = 8;
000420  f04f0008          MOV      r0,#8
000424  f8a4004c          STRH     r0,[r4,#0x4c]
;;;339        pObj->Max         = 100;
000428  f04f0064          MOV      r0,#0x64
00042c  63e0              STR      r0,[r4,#0x3c]
;;;340        pObj->Min         = 0;
00042e  f04f0000          MOV      r0,#0
000432  63a0              STR      r0,[r4,#0x38]
;;;341        pObj->NumTicks    = -1;
000434  f04f30ff          MOV      r0,#0xffffffff
000438  64a0              STR      r0,[r4,#0x48]
;;;342      } else {
00043a  bf00              NOP      
                  |L1.1084|
;;;343        GUI_DEBUG_ERROROUT_IF(hObj==0, "SLIDER_Create failed")
;;;344      }
;;;345      WM_UNLOCK();
;;;346      return hObj;
00043c  4630              MOV      r0,r6
;;;347    }
00043e  b009              ADD      sp,sp,#0x24
000440  e8bd8ff0          POP      {r4-r11,pc}
;;;348    
                          ENDP

                  SLIDER_SetWidth PROC
;;;394    */
;;;395    void SLIDER_SetWidth(SLIDER_Handle hObj, int Width) {
000444  b570              PUSH     {r4-r6,lr}
000446  4606              MOV      r6,r0
000448  460d              MOV      r5,r1
;;;396      SLIDER_Obj* pObj;
;;;397      if (hObj) {
00044a  b16e              CBZ      r6,|L1.1128|
;;;398        WM_LOCK();
;;;399        pObj = SLIDER_H2P(hObj);
00044c  4630              MOV      r0,r6
00044e  f7fffffe          BL       GUI_ALLOC_h2p
000452  4604              MOV      r4,r0
;;;400        if (pObj->Width != Width) {
000454  f9b4004c          LDRSH    r0,[r4,#0x4c]
000458  42a8              CMP      r0,r5
00045a  d005              BEQ      |L1.1128|
;;;401          pObj->Width = Width;
00045c  b228              SXTH     r0,r5
00045e  f8a4004c          STRH     r0,[r4,#0x4c]
;;;402          WM_InvalidateWindow(hObj);
000462  4630              MOV      r0,r6
000464  f7fffffe          BL       WM_InvalidateWindow
                  |L1.1128|
;;;403        }
;;;404        WM_UNLOCK();
;;;405      }
;;;406    }
000468  bd70              POP      {r4-r6,pc}
;;;407    
                          ENDP

                  SLIDER_SetRange PROC
;;;436    */
;;;437    void SLIDER_SetRange(SLIDER_Handle hObj, int Min, int Max) {
00046a  e92d41f0          PUSH     {r4-r8,lr}
00046e  4607              MOV      r7,r0
000470  460c              MOV      r4,r1
000472  4616              MOV      r6,r2
;;;438      if (hObj) {
000474  b1a7              CBZ      r7,|L1.1184|
;;;439        SLIDER_Obj* pObj;
;;;440        WM_LOCK();
;;;441        pObj = SLIDER_H2P(hObj);
000476  4638              MOV      r0,r7
000478  f7fffffe          BL       GUI_ALLOC_h2p
00047c  4605              MOV      r5,r0
;;;442        if (Max < Min) {
00047e  42a6              CMP      r6,r4
000480  da00              BGE      |L1.1156|
;;;443          Max = Min;
000482  4626              MOV      r6,r4
                  |L1.1156|
;;;444        }
;;;445        pObj->Min = Min;
000484  63ac              STR      r4,[r5,#0x38]
;;;446        pObj->Max = Max;
000486  63ee              STR      r6,[r5,#0x3c]
;;;447        if (pObj->v < Min) {
000488  6c28              LDR      r0,[r5,#0x40]
00048a  42a0              CMP      r0,r4
00048c  da00              BGE      |L1.1168|
;;;448          pObj->v = Min;
00048e  642c              STR      r4,[r5,#0x40]
                  |L1.1168|
;;;449        }
;;;450        if (pObj->v > Max) {
000490  6c28              LDR      r0,[r5,#0x40]
000492  42b0              CMP      r0,r6
000494  dd00              BLE      |L1.1176|
;;;451          pObj->v = Max;
000496  642e              STR      r6,[r5,#0x40]
                  |L1.1176|
;;;452        }
;;;453        WM_InvalidateWindow(hObj);
000498  4638              MOV      r0,r7
00049a  f7fffffe          BL       WM_InvalidateWindow
;;;454        WM_UNLOCK();
;;;455      }
00049e  bf00              NOP      
                  |L1.1184|
;;;456    }
0004a0  e8bd81f0          POP      {r4-r8,pc}
;;;457    
                          ENDP

                  SLIDER_SetNumTicks PROC
;;;461    */
;;;462    void SLIDER_SetNumTicks(SLIDER_Handle hObj, int NumTicks) {
0004a4  b570              PUSH     {r4-r6,lr}
0004a6  4605              MOV      r5,r0
0004a8  460c              MOV      r4,r1
;;;463      if (hObj && (NumTicks >= 0)) {
0004aa  b155              CBZ      r5,|L1.1218|
0004ac  2c00              CMP      r4,#0
0004ae  db08              BLT      |L1.1218|
;;;464        SLIDER_Obj* pObj;
;;;465        WM_LOCK();
;;;466        pObj = SLIDER_H2P(hObj);
0004b0  4628              MOV      r0,r5
0004b2  f7fffffe          BL       GUI_ALLOC_h2p
0004b6  4606              MOV      r6,r0
;;;467        pObj->NumTicks = NumTicks;
0004b8  64b4              STR      r4,[r6,#0x48]
;;;468        WM_InvalidateWindow(hObj);
0004ba  4628              MOV      r0,r5
0004bc  f7fffffe          BL       WM_InvalidateWindow
;;;469        WM_UNLOCK();
;;;470      }
0004c0  bf00              NOP      
                  |L1.1218|
;;;471    }
0004c2  bd70              POP      {r4-r6,pc}
;;;472    
                          ENDP

                  SLIDER_SetBkColor PROC
;;;476    */
;;;477    void SLIDER_SetBkColor(SLIDER_Handle hObj, GUI_COLOR Color) {
0004c4  b570              PUSH     {r4-r6,lr}
0004c6  4605              MOV      r5,r0
0004c8  460c              MOV      r4,r1
;;;478      if (hObj) {
0004ca  b195              CBZ      r5,|L1.1266|
;;;479        SLIDER_Obj * pObj;
;;;480        WM_LOCK();
;;;481        pObj = SLIDER_H2P(hObj);
0004cc  4628              MOV      r0,r5
0004ce  f7fffffe          BL       GUI_ALLOC_h2p
0004d2  4606              MOV      r6,r0
;;;482        pObj->aBkColor[0] = Color;
0004d4  62b4              STR      r4,[r6,#0x28]
;;;483        #if SLIDER_SUPPORT_TRANSPARENCY
;;;484          if (Color <= 0xFFFFFF) {
0004d6  f1b47f80          CMP      r4,#0x1000000
0004da  d203              BCS      |L1.1252|
;;;485            WM_ClrHasTrans(hObj);
0004dc  4628              MOV      r0,r5
0004de  f7fffffe          BL       WM_ClrHasTrans
0004e2  e002              B        |L1.1258|
                  |L1.1252|
;;;486          } else {
;;;487            WM_SetHasTrans(hObj);
0004e4  4628              MOV      r0,r5
0004e6  f7fffffe          BL       WM_SetHasTrans
                  |L1.1258|
;;;488          }
;;;489        #endif
;;;490        WM_InvalidateWindow(hObj);
0004ea  4628              MOV      r0,r5
0004ec  f7fffffe          BL       WM_InvalidateWindow
;;;491        WM_UNLOCK();
;;;492      }
0004f0  bf00              NOP      
                  |L1.1266|
;;;493    }
0004f2  bd70              POP      {r4-r6,pc}
;;;494    
                          ENDP

                  SLIDER_SetDefaultBkColor PROC
;;;498    */
;;;499    void SLIDER_SetDefaultBkColor(GUI_COLOR Color) {
0004f4  4908              LDR      r1,|L1.1304|
;;;500      _DefaultBkColor = Color;
0004f6  6008              STR      r0,[r1,#0]  ; _DefaultBkColor
;;;501    }
0004f8  4770              BX       lr
;;;502    
                          ENDP

                  SLIDER_GetValue PROC
;;;512    */
;;;513    int SLIDER_GetValue(SLIDER_Handle hObj) {
0004fa  b570              PUSH     {r4-r6,lr}
0004fc  4605              MOV      r5,r0
;;;514      int r = 0;
0004fe  f04f0600          MOV      r6,#0
;;;515      SLIDER_Obj* pObj;
;;;516      if (hObj) {
000502  b125              CBZ      r5,|L1.1294|
;;;517        WM_LOCK();
;;;518        pObj = SLIDER_H2P(hObj);
000504  4628              MOV      r0,r5
000506  f7fffffe          BL       GUI_ALLOC_h2p
00050a  4604              MOV      r4,r0
;;;519        r = pObj->v;
00050c  6c26              LDR      r6,[r4,#0x40]
                  |L1.1294|
;;;520        WM_UNLOCK();
;;;521      }
;;;522      return r;
00050e  4630              MOV      r0,r6
;;;523    }
000510  bd70              POP      {r4-r6,pc}
;;;524    
                          ENDP

000512  0000              DCW      0x0000
                  |L1.1300|
                          DCD      _SLIDER_Callback
                  |L1.1304|
                          DCD      _DefaultBkColor
                  |L1.1308|
                          DCD      0x00c0c0c0

                          AREA ||.data||, DATA, ALIGN=2

                  _DefaultBkColor
                          DCD      0x00c0c0c0
