; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\gui_drawgraph.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\gui_drawgraph.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -I.\GUI\AntiAlias -I.\GUI\Config -I.\GUI\ConvertColor -I.\GUI\ConvertMono -I.\GUI\Core -I.\GUI\Font -I.\GUI\GUI_X -I.\GUI\JPEG -I.\GUI\LCDDriver -I.\GUI\MemDev -I.\GUI\MultiLayer -I.\GUI\Widget -I.\GUI\WM -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\INC\ST\STM32F10x -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\gui_drawgraph.crf GUI\Core\GUI_DrawGraph.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _DrawGraph PROC
;;;32     */
;;;33     static void _DrawGraph(I16 *pay, int NumPoints, int xOff, int yOff) {
000000  e92d5ffc          PUSH     {r2-r12,lr}
000004  4681              MOV      r9,r0
000006  4688              MOV      r8,r1
000008  4614              MOV      r4,r2
00000a  469a              MOV      r10,r3
;;;34       int i;
;;;35       int y0, y1;
;;;36       int yClip0, yClip1;
;;;37       /* Perform high level clipping in x */
;;;38       yClip0 = GUI_Context.pClipRect_HL->y0;
00000c  4845              LDR      r0,|L1.292|
00000e  6900              LDR      r0,[r0,#0x10]  ; GUI_Context
000010  f9b00002          LDRSH    r0,[r0,#2]
000014  9001              STR      r0,[sp,#4]
;;;39       yClip1 = GUI_Context.pClipRect_HL->y1;
000016  4843              LDR      r0,|L1.292|
000018  6900              LDR      r0,[r0,#0x10]  ; GUI_Context
00001a  f9b00006          LDRSH    r0,[r0,#6]
00001e  9000              STR      r0,[sp,#0]
;;;40       i=0;
000020  f04f0500          MOV      r5,#0
;;;41       if (GUI_Context.pClipRect_HL) {
000024  483f              LDR      r0,|L1.292|
000026  6900              LDR      r0,[r0,#0x10]  ; GUI_Context
000028  b1e0              CBZ      r0,|L1.100|
;;;42         if (xOff < GUI_Context.pClipRect_HL->x0)
00002a  483e              LDR      r0,|L1.292|
00002c  6900              LDR      r0,[r0,#0x10]  ; GUI_Context
00002e  f9b00000          LDRSH    r0,[r0,#0]
000032  42a0              CMP      r0,r4
000034  dd05              BLE      |L1.66|
;;;43           i = GUI_Context.pClipRect_HL->x0 - xOff;
000036  483b              LDR      r0,|L1.292|
000038  6900              LDR      r0,[r0,#0x10]  ; GUI_Context
00003a  f9b00000          LDRSH    r0,[r0,#0]
00003e  eba00504          SUB      r5,r0,r4
                  |L1.66|
;;;44         if (xOff+NumPoints-1 > GUI_Context.pClipRect_HL->x1)
000042  eb040008          ADD      r0,r4,r8
000046  1e40              SUBS     r0,r0,#1
000048  4936              LDR      r1,|L1.292|
00004a  6909              LDR      r1,[r1,#0x10]  ; GUI_Context
00004c  f9b11004          LDRSH    r1,[r1,#4]
000050  4288              CMP      r0,r1
000052  dd07              BLE      |L1.100|
;;;45           NumPoints = GUI_Context.pClipRect_HL->x1 - xOff + 1;
000054  4833              LDR      r0,|L1.292|
000056  6900              LDR      r0,[r0,#0x10]  ; GUI_Context
000058  f9b00004          LDRSH    r0,[r0,#4]
00005c  eba00004          SUB      r0,r0,r4
000060  f1000801          ADD      r8,r0,#1
                  |L1.100|
;;;46       }
;;;47       /* Start drawing if there is something left to do after x-clipping */
;;;48       if (i < NumPoints) {
000064  4545              CMP      r5,r8
000066  da3c              BGE      |L1.226|
;;;49         y0 = *(pay + i++) + yOff;
000068  4628              MOV      r0,r5
00006a  f1050501          ADD      r5,r5,#1
00006e  f9390010          LDRSH    r0,[r9,r0,LSL #1]
000072  eb00070a          ADD      r7,r0,r10
;;;50         /* Iterate */
;;;51         for (; i < NumPoints; i++) {
000076  e032              B        |L1.222|
                  |L1.120|
;;;52           /* Perform high level clipping in y */
;;;53           y1 = *(pay + i) + yOff;
000078  f9390015          LDRSH    r0,[r9,r5,LSL #1]
00007c  eb00060a          ADD      r6,r0,r10
;;;54           if ((y0 >= yClip0) || (y1 >= yClip0)) {
000080  9801              LDR      r0,[sp,#4]
000082  4287              CMP      r7,r0
000084  da02              BGE      |L1.140|
000086  9801              LDR      r0,[sp,#4]
000088  4286              CMP      r6,r0
00008a  db25              BLT      |L1.216|
                  |L1.140|
;;;55             if ((y0 <= yClip1) || (y1 <= yClip1)) {
00008c  9800              LDR      r0,[sp,#0]
00008e  4287              CMP      r7,r0
000090  dd02              BLE      |L1.152|
000092  9800              LDR      r0,[sp,#0]
000094  4286              CMP      r6,r0
000096  dc1f              BGT      |L1.216|
                  |L1.152|
;;;56               int y01;
;;;57               y01 = (y1 + y0) / 2;
000098  eb060007          ADD      r0,r6,r7
00009c  eb0071d0          ADD      r1,r0,r0,LSR #31
0000a0  ea4f0b61          ASR      r11,r1,#1
;;;58               if (y0 <= y1) {
0000a4  42b7              CMP      r7,r6
0000a6  dc0b              BGT      |L1.192|
;;;59                 LCD_DrawVLine(i + xOff - 1, y0, y01);
0000a8  1929              ADDS     r1,r5,r4
0000aa  1e48              SUBS     r0,r1,#1
0000ac  465a              MOV      r2,r11
0000ae  4639              MOV      r1,r7
0000b0  f7fffffe          BL       LCD_DrawVLine
;;;60                 LCD_DrawVLine(i + xOff, y01, y1);
0000b4  1928              ADDS     r0,r5,r4
0000b6  4632              MOV      r2,r6
0000b8  4659              MOV      r1,r11
0000ba  f7fffffe          BL       LCD_DrawVLine
0000be  e00a              B        |L1.214|
                  |L1.192|
;;;61               } else {
;;;62                 LCD_DrawVLine(i + xOff - 1, y01, y0);
0000c0  1929              ADDS     r1,r5,r4
0000c2  1e48              SUBS     r0,r1,#1
0000c4  463a              MOV      r2,r7
0000c6  4659              MOV      r1,r11
0000c8  f7fffffe          BL       LCD_DrawVLine
;;;63                 LCD_DrawVLine(i + xOff, y1, y01);
0000cc  1928              ADDS     r0,r5,r4
0000ce  465a              MOV      r2,r11
0000d0  4631              MOV      r1,r6
0000d2  f7fffffe          BL       LCD_DrawVLine
                  |L1.214|
;;;64               }
;;;65             }
0000d6  bf00              NOP      
                  |L1.216|
;;;66           }
;;;67           y0 = y1;
0000d8  4637              MOV      r7,r6
0000da  f1050501          ADD      r5,r5,#1              ;51
                  |L1.222|
0000de  4545              CMP      r5,r8                 ;51
0000e0  dbca              BLT      |L1.120|
                  |L1.226|
;;;68         }
;;;69       }
;;;70     }
0000e2  e8bd9ffc          POP      {r2-r12,pc}
;;;71     
                          ENDP

                  GUI_DrawGraph PROC
;;;81     */  
;;;82     void GUI_DrawGraph(I16 *pay, int NumPoints, int x0, int y0) {
0000e6  e92d41f0          PUSH     {r4-r8,lr}
0000ea  4606              MOV      r6,r0
0000ec  460f              MOV      r7,r1
0000ee  4614              MOV      r4,r2
0000f0  461d              MOV      r5,r3
;;;83       GUI_LOCK();
;;;84       #if (GUI_WINSUPPORT)
;;;85         WM_ADDORG(x0,y0);
0000f2  480c              LDR      r0,|L1.292|
0000f4  6c00              LDR      r0,[r0,#0x40]  ; GUI_Context
0000f6  4404              ADD      r4,r4,r0
0000f8  480a              LDR      r0,|L1.292|
0000fa  6c40              LDR      r0,[r0,#0x44]  ; GUI_Context
0000fc  4405              ADD      r5,r5,r0
;;;86         WM_ITERATE_START(NULL); {
0000fe  f04f0000          MOV      r0,#0
000102  f7fffffe          BL       WM__InitIVRSearch
000106  b150              CBZ      r0,|L1.286|
000108  bf00              NOP      
                  |L1.266|
;;;87       #endif
;;;88       _DrawGraph(pay, NumPoints, x0, y0);
00010a  462b              MOV      r3,r5
00010c  4622              MOV      r2,r4
00010e  4639              MOV      r1,r7
000110  4630              MOV      r0,r6
000112  f7fffffe          BL       _DrawGraph
;;;89       #if (GUI_WINSUPPORT)
;;;90         } WM_ITERATE_END();
000116  f7fffffe          BL       WM__GetNextIVR
00011a  2800              CMP      r0,#0
00011c  d1f5              BNE      |L1.266|
                  |L1.286|
;;;91       #endif
;;;92       GUI_UNLOCK();
;;;93     }
00011e  e8bd81f0          POP      {r4-r8,pc}
;;;94     
                          ENDP

000122  0000              DCW      0x0000
                  |L1.292|
                          DCD      GUI_Context
