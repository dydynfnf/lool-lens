; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\button.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\button.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -I.\GUI\AntiAlias -I.\GUI\Config -I.\GUI\ConvertColor -I.\GUI\ConvertMono -I.\GUI\Core -I.\GUI\Font -I.\GUI\GUI_X -I.\GUI\JPEG -I.\GUI\LCDDriver -I.\GUI\MemDev -I.\GUI\MultiLayer -I.\GUI\Widget -I.\GUI\WM -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\INC\ST\STM32F10x -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\button.crf GUI\Widget\BUTTON.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _Paint PROC
;;;109    */
;;;110    static void _Paint(BUTTON_Obj* pObj, BUTTON_Handle hObj) {
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  b087              SUB      sp,sp,#0x1c
000006  4604              MOV      r4,r0
000008  4688              MOV      r8,r1
;;;111      const char* s = NULL;
00000a  f04f0b00          MOV      r11,#0
;;;112      unsigned int Index;
;;;113      int State, PressedState, ColorIndex;
;;;114      GUI_RECT rClient, rInside;
;;;115      State = pObj->Widget.State;
00000e  f8b49026          LDRH     r9,[r4,#0x26]
;;;116      PressedState = (State & BUTTON_STATE_PRESSED) ? 1 : 0;
000012  f3c92500          UBFX     r5,r9,#8,#1
;;;117      ColorIndex   = (WM__IsEnabled(hObj)) ? PressedState : 2;
000016  4640              MOV      r0,r8
000018  f7fffffe          BL       WM__IsEnabled
00001c  b108              CBZ      r0,|L1.34|
00001e  4628              MOV      r0,r5
000020  e001              B        |L1.38|
                  |L1.34|
000022  f04f0002          MOV      r0,#2
                  |L1.38|
000026  4606              MOV      r6,r0
;;;118      GUI_SetFont(pObj->Props.pFont);
000028  6c20              LDR      r0,[r4,#0x40]
00002a  f7fffffe          BL       GUI_SetFont
;;;119      GUI_DEBUG_LOG("BUTTON: Paint(..)\n");
;;;120      if (pObj->hpText) {
00002e  f8b40048          LDRH     r0,[r4,#0x48]
000032  b120              CBZ      r0,|L1.62|
;;;121        s = (const char*) GUI_ALLOC_h2p(pObj->hpText);
000034  f9b40048          LDRSH    r0,[r4,#0x48]
000038  f7fffffe          BL       GUI_ALLOC_h2p
00003c  4683              MOV      r11,r0
                  |L1.62|
;;;122      }
;;;123      GUI_GetClientRect(&rClient);
00003e  a805              ADD      r0,sp,#0x14
000040  f7fffffe          BL       GUI_GetClientRect
;;;124      /* Start drawing */
;;;125      rInside = rClient;
000044  e9dd0105          LDRD     r0,r1,[sp,#0x14]
000048  e9cd0103          STRD     r0,r1,[sp,#0xc]
;;;126    /* Draw the 3D effect (if configured) */
;;;127      #if BUTTON_USE_3D
;;;128      {
;;;129        int EffectSize;
;;;130        if ((PressedState) == 0) {
00004c  b92d              CBNZ     r5,|L1.90|
;;;131          pObj->Widget.pEffect->pfDrawUp();  /* _WIDGET_EFFECT_3D_DrawUp(); */
00004e  6a21              LDR      r1,[r4,#0x20]
000050  6808              LDR      r0,[r1,#0]
000052  4780              BLX      r0
;;;132          EffectSize = pObj->Widget.pEffect->EffectSize;
000054  6a20              LDR      r0,[r4,#0x20]
000056  6947              LDR      r7,[r0,#0x14]
000058  e00e              B        |L1.120|
                  |L1.90|
;;;133        } else {
;;;134          LCD_SetColor(0x000000);
00005a  2000              MOVS     r0,#0
00005c  f7fffffe          BL       LCD_SetColor
;;;135          GUI_DrawRect(rClient.y0, rClient.x0, rClient.x1, rClient.y1);
000060  f9bd301a          LDRSH    r3,[sp,#0x1a]
000064  f9bd2018          LDRSH    r2,[sp,#0x18]
000068  f9bd1014          LDRSH    r1,[sp,#0x14]
00006c  f9bd0016          LDRSH    r0,[sp,#0x16]
000070  f7fffffe          BL       GUI_DrawRect
;;;136          EffectSize = 1;
000074  f04f0701          MOV      r7,#1
                  |L1.120|
;;;137        }
;;;138        GUI__ReduceRect(&rInside, &rInside, EffectSize); 
000078  463a              MOV      r2,r7
00007a  a903              ADD      r1,sp,#0xc
00007c  a803              ADD      r0,sp,#0xc
00007e  f7fffffe          BL       GUI__ReduceRect
;;;139      }
;;;140      #endif
;;;141      /* Draw background */
;;;142      LCD_SetBkColor (pObj->Props.aBkColor[ColorIndex]);
000082  f1040128          ADD      r1,r4,#0x28
000086  f8510026          LDR      r0,[r1,r6,LSL #2]
00008a  f7fffffe          BL       LCD_SetBkColor
;;;143      LCD_SetColor   (pObj->Props.aTextColor[ColorIndex]);
00008e  f1040134          ADD      r1,r4,#0x34
000092  f8510026          LDR      r0,[r1,r6,LSL #2]
000096  f7fffffe          BL       LCD_SetColor
;;;144      WM_SetUserClipRect(&rInside);
00009a  a803              ADD      r0,sp,#0xc
00009c  f7fffffe          BL       WM_SetUserClipRect
;;;145      GUI_Clear();
0000a0  f7fffffe          BL       GUI_Clear
;;;146      /* Draw bitmap.
;;;147         If we have only one, we will use it.
;;;148         If we have to we will use the second one (Index 1) for the pressed state
;;;149      */
;;;150      if (ColorIndex < 2) {
0000a4  2e02              CMP      r6,#2
0000a6  da0a              BGE      |L1.190|
;;;151        Index = (pObj->ahDrawObj[BUTTON_BI_PRESSED] && PressedState) ? BUTTON_BI_PRESSED : BUTTON_BI_UNPRESSED;
0000a8  204c              MOVS     r0,#0x4c
0000aa  5b00              LDRH     r0,[r0,r4]
0000ac  b118              CBZ      r0,|L1.182|
0000ae  b115              CBZ      r5,|L1.182|
0000b0  f04f0001          MOV      r0,#1
0000b4  e001              B        |L1.186|
                  |L1.182|
0000b6  f04f0000          MOV      r0,#0
                  |L1.186|
0000ba  4682              MOV      r10,r0
0000bc  e008              B        |L1.208|
                  |L1.190|
;;;152      } else {
;;;153        Index = pObj->ahDrawObj[BUTTON_BI_DISABLED] ? BUTTON_BI_DISABLED : BUTTON_BI_UNPRESSED;
0000be  204e              MOVS     r0,#0x4e
0000c0  5b00              LDRH     r0,[r0,r4]
0000c2  b110              CBZ      r0,|L1.202|
0000c4  f04f0002          MOV      r0,#2
0000c8  e001              B        |L1.206|
                  |L1.202|
0000ca  f04f0000          MOV      r0,#0
                  |L1.206|
0000ce  4682              MOV      r10,r0
                  |L1.208|
;;;154      }
;;;155      GUI_DRAW__Draw(pObj->ahDrawObj[Index], 0, 0);
0000d0  f104014a          ADD      r1,r4,#0x4a
0000d4  f931001a          LDRSH    r0,[r1,r10,LSL #1]
0000d8  2200              MOVS     r2,#0
0000da  4611              MOV      r1,r2
0000dc  f7fffffe          BL       GUI_DRAW__Draw
;;;156    /* Draw the actual button (background and text) */  
;;;157      {
;;;158        GUI_RECT r;
;;;159        r = rInside;
0000e0  e9dd0103          LDRD     r0,r1,[sp,#0xc]
0000e4  e9cd0101          STRD     r0,r1,[sp,#4]
;;;160        #if BUTTON_USE_3D
;;;161          if (PressedState) {
0000e8  b125              CBZ      r5,|L1.244|
;;;162            GUI_MoveRect(&r, BUTTON_3D_MOVE_X,BUTTON_3D_MOVE_Y);
0000ea  2201              MOVS     r2,#1
0000ec  4611              MOV      r1,r2
0000ee  a801              ADD      r0,sp,#4
0000f0  f7fffffe          BL       GUI_MoveRect
                  |L1.244|
;;;163          }
;;;164        #endif
;;;165        GUI_SetTextMode(GUI_TM_TRANS);
0000f4  2002              MOVS     r0,#2
0000f6  f7fffffe          BL       GUI_SetTextMode
;;;166        GUI_DispStringInRect(s, &r, pObj->Props.Align);
0000fa  f9b42044          LDRSH    r2,[r4,#0x44]
0000fe  a901              ADD      r1,sp,#4
000100  4658              MOV      r0,r11
000102  f7fffffe          BL       GUI_DispStringInRect
;;;167      }
;;;168      /* Draw focus */
;;;169      if (State & BUTTON_STATE_FOCUS) {
000106  f0190f01          TST      r9,#1
00010a  d006              BEQ      |L1.282|
;;;170        LCD_SetColor(GUI_BLACK);
00010c  2000              MOVS     r0,#0
00010e  f7fffffe          BL       LCD_SetColor
;;;171        GUI_DrawFocusRect(&rClient, 2);
000112  2102              MOVS     r1,#2
000114  a805              ADD      r0,sp,#0x14
000116  f7fffffe          BL       GUI_DrawFocusRect
                  |L1.282|
;;;172      }
;;;173      WM_SetUserClipRect(NULL);
00011a  2000              MOVS     r0,#0
00011c  f7fffffe          BL       WM_SetUserClipRect
;;;174    }
000120  b007              ADD      sp,sp,#0x1c
000122  e8bd8ff0          POP      {r4-r11,pc}
;;;175    
                          ENDP

                  _Delete PROC
;;;181    */
;;;182    static void _Delete(BUTTON_Obj* pObj) {
000126  b510              PUSH     {r4,lr}
000128  4604              MOV      r4,r0
;;;183      GUI_ALLOC_FreePtr(&pObj->hpText);
00012a  f1040048          ADD      r0,r4,#0x48
00012e  f7fffffe          BL       GUI_ALLOC_FreePtr
;;;184      GUI_ALLOC_FreePtr(&pObj->ahDrawObj[0]);
000132  f104004a          ADD      r0,r4,#0x4a
000136  f7fffffe          BL       GUI_ALLOC_FreePtr
;;;185      GUI_ALLOC_FreePtr(&pObj->ahDrawObj[1]);
00013a  f104004c          ADD      r0,r4,#0x4c
00013e  f7fffffe          BL       GUI_ALLOC_FreePtr
;;;186    }
000142  bd10              POP      {r4,pc}
;;;187    
                          ENDP

                  _ButtonPressed PROC
;;;191    */
;;;192    static void _ButtonPressed(BUTTON_Handle hObj, BUTTON_Obj* pObj) {
000144  b570              PUSH     {r4-r6,lr}
000146  4605              MOV      r5,r0
000148  460c              MOV      r4,r1
;;;193      WIDGET_OrState(hObj, BUTTON_STATE_PRESSED);
00014a  f44f7180          MOV      r1,#0x100
00014e  4628              MOV      r0,r5
000150  f7fffffe          BL       WIDGET_OrState
;;;194      if (pObj->Widget.Win.Status & WM_SF_ISVIS) {
000154  8ba0              LDRH     r0,[r4,#0x1c]
000156  f0100f02          TST      r0,#2
00015a  d003              BEQ      |L1.356|
;;;195        WM_NotifyParent(hObj, WM_NOTIFICATION_CLICKED);
00015c  2101              MOVS     r1,#1
00015e  4628              MOV      r0,r5
000160  f7fffffe          BL       WM_NotifyParent
                  |L1.356|
;;;196      }
;;;197    }
000164  bd70              POP      {r4-r6,pc}
;;;198    
                          ENDP

                  _ButtonReleased PROC
;;;202    */
;;;203    static void _ButtonReleased(BUTTON_Handle hObj, BUTTON_Obj* pObj, int Notification) {
000166  b570              PUSH     {r4-r6,lr}
000168  4606              MOV      r6,r0
00016a  460c              MOV      r4,r1
00016c  4615              MOV      r5,r2
;;;204      WIDGET_AndState(hObj, BUTTON_STATE_PRESSED);
00016e  f44f7180          MOV      r1,#0x100
000172  4630              MOV      r0,r6
000174  f7fffffe          BL       WIDGET_AndState
;;;205      if (pObj->Widget.Win.Status & WM_SF_ISVIS) {
000178  8ba0              LDRH     r0,[r4,#0x1c]
00017a  f0100f02          TST      r0,#2
00017e  d003              BEQ      |L1.392|
;;;206        WM_NotifyParent(hObj, Notification);
000180  4629              MOV      r1,r5
000182  4630              MOV      r0,r6
000184  f7fffffe          BL       WM_NotifyParent
                  |L1.392|
;;;207      }
;;;208      if (Notification == WM_NOTIFICATION_RELEASED) {
000188  2d02              CMP      r5,#2
00018a  d103              BNE      |L1.404|
;;;209        GUI_DEBUG_LOG("BUTTON: Hit\n");
;;;210        GUI_StoreKey(pObj->Widget.Id);
00018c  f9b40024          LDRSH    r0,[r4,#0x24]
000190  f7fffffe          BL       GUI_StoreKey
                  |L1.404|
;;;211      }
;;;212    }
000194  bd70              POP      {r4-r6,pc}
;;;213    
                          ENDP

                  _OnTouch PROC
;;;217    */
;;;218    static void _OnTouch(BUTTON_Handle hObj, BUTTON_Obj* pObj, WM_MESSAGE*pMsg) {
000196  e92d41f0          PUSH     {r4-r8,lr}
00019a  4606              MOV      r6,r0
00019c  460c              MOV      r4,r1
00019e  4615              MOV      r5,r2
;;;219      const GUI_PID_STATE* pState = (const GUI_PID_STATE*)pMsg->Data.p;
0001a0  68af              LDR      r7,[r5,#8]
;;;220    #if BUTTON_REACT_ON_LEVEL
;;;221      if (!pMsg->Data.p) {  /* Mouse moved out */
;;;222        _ButtonReleased(hObj, pObj, WM_NOTIFICATION_MOVED_OUT);
;;;223      }
;;;224    #else
;;;225      if (pMsg->Data.p) {  /* Something happened in our area (pressed or released) */
0001a2  68a8              LDR      r0,[r5,#8]
0001a4  b1a0              CBZ      r0,|L1.464|
;;;226        if (pState->Pressed) {
0001a6  7a38              LDRB     r0,[r7,#8]
0001a8  b140              CBZ      r0,|L1.444|
;;;227          if ((pObj->Widget.State & BUTTON_STATE_PRESSED) == 0){   
0001aa  8ce0              LDRH     r0,[r4,#0x26]
0001ac  f4107f80          TST      r0,#0x100
0001b0  d113              BNE      |L1.474|
;;;228           _ButtonPressed(hObj, pObj);
0001b2  4621              MOV      r1,r4
0001b4  4630              MOV      r0,r6
0001b6  f7fffffe          BL       _ButtonPressed
0001ba  e00e              B        |L1.474|
                  |L1.444|
;;;229          }
;;;230        } else {
;;;231          /* React only if button was pressed before ... avoid problems with moving / hiding windows above (such as dropdown) */
;;;232          if (pObj->Widget.State & BUTTON_STATE_PRESSED) {   
0001bc  8ce0              LDRH     r0,[r4,#0x26]
0001be  f4107f80          TST      r0,#0x100
0001c2  d00a              BEQ      |L1.474|
;;;233            _ButtonReleased(hObj, pObj, WM_NOTIFICATION_RELEASED);
0001c4  2202              MOVS     r2,#2
0001c6  4621              MOV      r1,r4
0001c8  4630              MOV      r0,r6
0001ca  f7fffffe          BL       _ButtonReleased
0001ce  e004              B        |L1.474|
                  |L1.464|
;;;234          }
;;;235        }
;;;236      } else {
;;;237        _ButtonReleased(hObj, pObj, WM_NOTIFICATION_MOVED_OUT);
0001d0  2203              MOVS     r2,#3
0001d2  4621              MOV      r1,r4
0001d4  4630              MOV      r0,r6
0001d6  f7fffffe          BL       _ButtonReleased
                  |L1.474|
;;;238      }
;;;239    
;;;240    #endif
;;;241    }
0001da  e8bd81f0          POP      {r4-r8,pc}
;;;242    
                          ENDP

                  BUTTON_Callback PROC
;;;265    */
;;;266    void BUTTON_Callback(WM_MESSAGE *pMsg) {
0001de  b570              PUSH     {r4-r6,lr}
0001e0  4604              MOV      r4,r0
;;;267      BUTTON_Handle hObj = pMsg->hWin;
0001e2  f9b45004          LDRSH    r5,[r4,#4]
;;;268      BUTTON_Obj* pObj = BUTTON_H2P(hObj);
0001e6  4628              MOV      r0,r5
0001e8  f7fffffe          BL       GUI_ALLOC_h2p
0001ec  4606              MOV      r6,r0
;;;269      /* Let widget handle the standard messages */
;;;270      if (WIDGET_HandleActive(hObj, pMsg) == 0) {
0001ee  4621              MOV      r1,r4
0001f0  4628              MOV      r0,r5
0001f2  f7fffffe          BL       WIDGET_HandleActive
0001f6  b900              CBNZ     r0,|L1.506|
                  |L1.504|
;;;271        return;
;;;272      }
;;;273      switch (pMsg->MsgId) {
;;;274    #if BUTTON_REACT_ON_LEVEL
;;;275      case WM_PID_STATE_CHANGED:
;;;276        _OnPidStateChange(hObj, pObj, pMsg);
;;;277        return;      /* Message handled. Do not call WM_DefaultProc, because the window may have been destroyed */
;;;278    #endif
;;;279      case WM_TOUCH:
;;;280        _OnTouch(hObj, pObj, pMsg);
;;;281        return;      /* Message handled. Do not call WM_DefaultProc, because the window may have been destroyed */
;;;282      case WM_PAINT:
;;;283        GUI_DEBUG_LOG("BUTTON: _BUTTON_Callback(WM_PAINT)\n");
;;;284        _Paint(pObj, hObj);
;;;285        return;
;;;286      case WM_DELETE:
;;;287        GUI_DEBUG_LOG("BUTTON: _BUTTON_Callback(WM_DELETE)\n");
;;;288        _Delete(pObj);
;;;289        break;       /* No return here ... WM_DefaultProc needs to be called */
;;;290      #if 0     /* TBD: Button should react to space & Enter */
;;;291      case WM_KEY:
;;;292        {
;;;293          int PressedCnt = ((WM_KEY_INFO*)(pMsg->Data.p))->PressedCnt;
;;;294          int Key = ((WM_KEY_INFO*)(pMsg->Data.p))->Key;
;;;295          if (PressedCnt > 0) {   /* Key pressed? */
;;;296            switch (Key) {
;;;297            case ' ':
;;;298              _ButtonPressed(hObj, pObj);
;;;299              return;
;;;300            }
;;;301          } else {
;;;302            switch (Key) {
;;;303            case ' ':
;;;304              _ButtonReleased(hObj, pObj, WM_NOTIFICATION_RELEASED);
;;;305              return;
;;;306            }
;;;307          }
;;;308        }
;;;309        break;
;;;310      #endif
;;;311      }
;;;312      WM_DefaultProc(pMsg);
;;;313    }
0001f8  bd70              POP      {r4-r6,pc}
                  |L1.506|
0001fa  6820              LDR      r0,[r4,#0]            ;273
0001fc  280b              CMP      r0,#0xb               ;273
0001fe  d00f              BEQ      |L1.544|
000200  280c              CMP      r0,#0xc               ;273
000202  d002              BEQ      |L1.522|
000204  280f              CMP      r0,#0xf               ;273
000206  d10f              BNE      |L1.552|
000208  e005              B        |L1.534|
                  |L1.522|
00020a  4622              MOV      r2,r4                 ;280
00020c  4631              MOV      r1,r6                 ;280
00020e  4628              MOV      r0,r5                 ;280
000210  f7fffffe          BL       _OnTouch
000214  e7f0              B        |L1.504|
                  |L1.534|
000216  4629              MOV      r1,r5                 ;284
000218  4630              MOV      r0,r6                 ;284
00021a  f7fffffe          BL       _Paint
00021e  e7eb              B        |L1.504|
                  |L1.544|
000220  4630              MOV      r0,r6                 ;288
000222  f7fffffe          BL       _Delete
000226  bf00              NOP                            ;289
                  |L1.552|
000228  bf00              NOP                            ;289
00022a  4620              MOV      r0,r4                 ;312
00022c  f7fffffe          BL       WM_DefaultProc
000230  bf00              NOP      
000232  e7e1              B        |L1.504|
;;;314    
                          ENDP

                  BUTTON_CreateEx PROC
;;;324    */
;;;325    BUTTON_Handle BUTTON_CreateEx(int x0, int y0, int xsize, int ysize, WM_HWIN hParent, int WinFlags, int ExFlags, int Id) {
000234  e92d4fff          PUSH     {r0-r11,lr}
000238  b085              SUB      sp,sp,#0x14
00023a  4606              MOV      r6,r0
00023c  460f              MOV      r7,r1
00023e  4690              MOV      r8,r2
000240  e9ddab13          LDRD     r10,r11,[sp,#0x4c]
000244  f8dd9048          LDR      r9,[sp,#0x48]
;;;326      BUTTON_Handle hObj;
;;;327      GUI_USE_PARA(ExFlags);
000248  bf00              NOP      
;;;328      /* Create the window */
;;;329      WM_LOCK();
;;;330      hObj = WM_CreateWindowAsChild(x0, y0, xsize, ysize, hParent, WinFlags, BUTTON_Callback,
00024a  f04f0130          MOV      r1,#0x30
00024e  f2af0271          ADR      r2,BUTTON_Callback + 1
000252  fa1ff08a          UXTH     r0,r10
000256  e9cd9000          STRD     r9,r0,[sp,#0]
00025a  e9cd2102          STRD     r2,r1,[sp,#8]
00025e  4642              MOV      r2,r8
000260  4639              MOV      r1,r7
000262  4630              MOV      r0,r6
000264  9b08              LDR      r3,[sp,#0x20]
000266  f7fffffe          BL       WM_CreateWindowAsChild
00026a  4604              MOV      r4,r0
;;;331                                    sizeof(BUTTON_Obj) - sizeof(WM_Obj));
;;;332      if (hObj) {
00026c  b184              CBZ      r4,|L1.656|
;;;333        BUTTON_Obj* pObj = BUTTON_H2P(hObj);
00026e  4620              MOV      r0,r4
000270  f7fffffe          BL       GUI_ALLOC_h2p
000274  4605              MOV      r5,r0
;;;334        /* init widget specific variables */
;;;335        WIDGET__Init(&pObj->Widget, Id, WIDGET_STATE_FOCUSSABLE);
000276  f04f0210          MOV      r2,#0x10
00027a  4628              MOV      r0,r5
00027c  9915              LDR      r1,[sp,#0x54]
00027e  f7fffffe          BL       WIDGET__Init
;;;336        /* init member variables */
;;;337        BUTTON_INIT_ID(pObj);
;;;338        pObj->Props = BUTTON__DefaultProps;
000282  2220              MOVS     r2,#0x20
000284  493e              LDR      r1,|L1.896|
000286  f1050028          ADD      r0,r5,#0x28
00028a  f7fffffe          BL       __aeabi_memcpy4
;;;339      } else {
00028e  bf00              NOP      
                  |L1.656|
;;;340        GUI_DEBUG_ERROROUT_IF(hObj==0, "BUTTON_Create failed")
;;;341      }
;;;342      WM_UNLOCK();
;;;343      return hObj;
000290  4620              MOV      r0,r4
;;;344    }
000292  b009              ADD      sp,sp,#0x24
000294  e8bd8ff0          POP      {r4-r11,pc}
;;;345    
                          ENDP

                  BUTTON_SetText PROC
;;;356    */
;;;357    void BUTTON_SetText(BUTTON_Handle hObj, const char* s) {
000298  b570              PUSH     {r4-r6,lr}
00029a  4604              MOV      r4,r0
00029c  460d              MOV      r5,r1
;;;358      if (hObj) {
00029e  b16c              CBZ      r4,|L1.700|
;;;359        BUTTON_Obj* pObj;
;;;360        WM_LOCK();
;;;361        pObj = BUTTON_H2P(hObj);
0002a0  4620              MOV      r0,r4
0002a2  f7fffffe          BL       GUI_ALLOC_h2p
0002a6  4606              MOV      r6,r0
;;;362        if (GUI__SetText(&pObj->hpText, s)) {
0002a8  4629              MOV      r1,r5
0002aa  f1060048          ADD      r0,r6,#0x48
0002ae  f7fffffe          BL       GUI__SetText
0002b2  b110              CBZ      r0,|L1.698|
;;;363          BUTTON_Invalidate(hObj);
0002b4  4620              MOV      r0,r4
0002b6  f7fffffe          BL       WM_InvalidateWindow
                  |L1.698|
;;;364        }
;;;365        WM_UNLOCK();
;;;366      }
0002ba  bf00              NOP      
                  |L1.700|
;;;367    }
0002bc  bd70              POP      {r4-r6,pc}
;;;368    
                          ENDP

                  BUTTON_SetFont PROC
;;;372    */
;;;373    void BUTTON_SetFont(BUTTON_Handle hObj, const GUI_FONT GUI_UNI_PTR * pfont) {
0002be  b570              PUSH     {r4-r6,lr}
0002c0  4604              MOV      r4,r0
0002c2  460d              MOV      r5,r1
;;;374      if (hObj) {
0002c4  b144              CBZ      r4,|L1.728|
;;;375        BUTTON_Obj* pObj;
;;;376        WM_LOCK();
;;;377        pObj = BUTTON_H2P(hObj);
0002c6  4620              MOV      r0,r4
0002c8  f7fffffe          BL       GUI_ALLOC_h2p
0002cc  4606              MOV      r6,r0
;;;378        BUTTON_ASSERT_IS_VALID_PTR(pObj);
;;;379        pObj->Props.pFont = pfont;
0002ce  6435              STR      r5,[r6,#0x40]
;;;380        BUTTON_Invalidate(hObj);
0002d0  4620              MOV      r0,r4
0002d2  f7fffffe          BL       WM_InvalidateWindow
;;;381        WM_UNLOCK();
;;;382      }
0002d6  bf00              NOP      
                  |L1.728|
;;;383    }
0002d8  bd70              POP      {r4-r6,pc}
;;;384    
                          ENDP

                  BUTTON_SetBkColor PROC
;;;388    */
;;;389    void BUTTON_SetBkColor(BUTTON_Handle hObj,unsigned int Index, GUI_COLOR Color) {
0002da  e92d41f0          PUSH     {r4-r8,lr}
0002de  4605              MOV      r5,r0
0002e0  460c              MOV      r4,r1
0002e2  4616              MOV      r6,r2
;;;390      if (hObj && (Index <= 2)) {
0002e4  b16d              CBZ      r5,|L1.770|
0002e6  2c02              CMP      r4,#2
0002e8  d80b              BHI      |L1.770|
;;;391        BUTTON_Obj* pObj;
;;;392        WM_LOCK();
;;;393        pObj = BUTTON_H2P(hObj);
0002ea  4628              MOV      r0,r5
0002ec  f7fffffe          BL       GUI_ALLOC_h2p
0002f0  4607              MOV      r7,r0
;;;394        BUTTON_ASSERT_IS_VALID_PTR(pObj);
;;;395        pObj->Props.aBkColor[Index] = Color;
0002f2  f1070028          ADD      r0,r7,#0x28
0002f6  f8406024          STR      r6,[r0,r4,LSL #2]
;;;396        BUTTON_Invalidate(hObj);
0002fa  4628              MOV      r0,r5
0002fc  f7fffffe          BL       WM_InvalidateWindow
;;;397        WM_UNLOCK();
;;;398      }
000300  bf00              NOP      
                  |L1.770|
;;;399    }
000302  e8bd81f0          POP      {r4-r8,pc}
;;;400    
                          ENDP

                  BUTTON_SetTextColor PROC
;;;404    */
;;;405    void BUTTON_SetTextColor(BUTTON_Handle hObj,unsigned int Index, GUI_COLOR Color) {
000306  e92d41f0          PUSH     {r4-r8,lr}
00030a  4605              MOV      r5,r0
00030c  460c              MOV      r4,r1
00030e  4616              MOV      r6,r2
;;;406      if (hObj && (Index <= 2)) {
000310  b16d              CBZ      r5,|L1.814|
000312  2c02              CMP      r4,#2
000314  d80b              BHI      |L1.814|
;;;407        BUTTON_Obj* pObj;
;;;408        WM_LOCK();
;;;409        pObj = BUTTON_H2P(hObj);
000316  4628              MOV      r0,r5
000318  f7fffffe          BL       GUI_ALLOC_h2p
00031c  4607              MOV      r7,r0
;;;410        BUTTON_ASSERT_IS_VALID_PTR(pObj);
;;;411        pObj->Props.aTextColor[Index] = Color;
00031e  f1070034          ADD      r0,r7,#0x34
000322  f8406024          STR      r6,[r0,r4,LSL #2]
;;;412        BUTTON_Invalidate(hObj);
000326  4628              MOV      r0,r5
000328  f7fffffe          BL       WM_InvalidateWindow
;;;413        WM_UNLOCK();
;;;414      }
00032c  bf00              NOP      
                  |L1.814|
;;;415    }
00032e  e8bd81f0          POP      {r4-r8,pc}
;;;416    
                          ENDP

                  BUTTON_SetState PROC
;;;420    */
;;;421    void BUTTON_SetState(BUTTON_Handle hObj, int State) {
000332  b570              PUSH     {r4-r6,lr}
000334  4604              MOV      r4,r0
000336  460d              MOV      r5,r1
;;;422      WIDGET_SetState(hObj, State);
000338  4629              MOV      r1,r5
00033a  4620              MOV      r0,r4
00033c  f7fffffe          BL       WIDGET_SetState
;;;423    }
000340  bd70              POP      {r4-r6,pc}
;;;424    
                          ENDP

                  BUTTON_SetPressed PROC
;;;428    */
;;;429    void BUTTON_SetPressed(BUTTON_Handle hObj, int State) {
000342  b570              PUSH     {r4-r6,lr}
000344  4605              MOV      r5,r0
000346  460c              MOV      r4,r1
;;;430      if (State) {
000348  b12c              CBZ      r4,|L1.854|
;;;431        WIDGET_OrState(hObj, BUTTON_STATE_PRESSED);
00034a  f44f7180          MOV      r1,#0x100
00034e  4628              MOV      r0,r5
000350  f7fffffe          BL       WIDGET_OrState
000354  e004              B        |L1.864|
                  |L1.854|
;;;432      } else {
;;;433        WIDGET_AndState(hObj, BUTTON_STATE_PRESSED);
000356  f44f7180          MOV      r1,#0x100
00035a  4628              MOV      r0,r5
00035c  f7fffffe          BL       WIDGET_AndState
                  |L1.864|
;;;434      }
;;;435    }
000360  bd70              POP      {r4-r6,pc}
;;;436    
                          ENDP

                  BUTTON_SetFocussable PROC
;;;440    */
;;;441    void BUTTON_SetFocussable(BUTTON_Handle hObj, int State) {
000362  b570              PUSH     {r4-r6,lr}
000364  4605              MOV      r5,r0
000366  460c              MOV      r4,r1
;;;442      if (State) {
000368  b124              CBZ      r4,|L1.884|
;;;443        WIDGET_OrState(hObj, WIDGET_STATE_FOCUSSABLE);
00036a  2110              MOVS     r1,#0x10
00036c  4628              MOV      r0,r5
00036e  f7fffffe          BL       WIDGET_OrState
000372  e003              B        |L1.892|
                  |L1.884|
;;;444      } else {
;;;445        WIDGET_AndState(hObj, WIDGET_STATE_FOCUSSABLE);
000374  2110              MOVS     r1,#0x10
000376  4628              MOV      r0,r5
000378  f7fffffe          BL       WIDGET_AndState
                  |L1.892|
;;;446      }
;;;447    }
00037c  bd70              POP      {r4-r6,pc}
;;;448    
                          ENDP

00037e  0000              DCW      0x0000
                  |L1.896|
                          DCD      BUTTON__DefaultProps

                          AREA ||.data||, DATA, ALIGN=2

                  BUTTON__DefaultProps
                          DCD      0x00aaaaaa
                          DCD      0x00ffffff
                          DCD      0x00d3d3d3
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00404040
                          DCD      GUI_Font13_1
00001c  000e              DCW      0x000e
00001e  0000              DCB      0x00,0x00
