; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\checkbox.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\checkbox.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -I.\GUI\AntiAlias -I.\GUI\Config -I.\GUI\ConvertColor -I.\GUI\ConvertMono -I.\GUI\Core -I.\GUI\Font -I.\GUI\GUI_X -I.\GUI\JPEG -I.\GUI\LCDDriver -I.\GUI\MemDev -I.\GUI\MultiLayer -I.\GUI\Widget -I.\GUI\WM -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\INC\ST\STM32F10x -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\checkbox.crf GUI\Widget\CHECKBOX.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _Paint PROC
;;;113    */
;;;114    static void _Paint(CHECKBOX_Obj* pObj, CHECKBOX_Handle hObj) {
000000  e92d47f0          PUSH     {r4-r10,lr}
000004  b086              SUB      sp,sp,#0x18
000006  4604              MOV      r4,r0
000008  4688              MOV      r8,r1
;;;115      GUI_RECT RectBox = {0};
00000a  f04f0000          MOV      r0,#0
00000e  9004              STR      r0,[sp,#0x10]
000010  9005              STR      r0,[sp,#0x14]
;;;116      int ColorIndex, EffectSize;
;;;117      EffectSize = pObj->Widget.pEffect->EffectSize;
000012  6a20              LDR      r0,[r4,#0x20]
000014  6945              LDR      r5,[r0,#0x14]
;;;118      ColorIndex = WM__IsEnabled(hObj);
000016  4640              MOV      r0,r8
000018  f7fffffe          BL       WM__IsEnabled
00001c  4681              MOV      r9,r0
;;;119      /* Clear inside ... Just in case      */
;;;120      /* Fill with parents background color */
;;;121    #if WM_SUPPORT_TRANSPARENCY
;;;122      if (!WM_GetHasTrans(hObj))
00001e  4640              MOV      r0,r8
000020  f7fffffe          BL       WM_GetHasTrans
000024  b980              CBNZ     r0,|L1.72|
;;;123    #endif
;;;124      {
;;;125        if (pObj->Props.BkColor == GUI_INVALID_COLOR) {
000026  f06f4170          MVN      r1,#0xf0000000
00002a  6b60              LDR      r0,[r4,#0x34]
00002c  4288              CMP      r0,r1
00002e  d106              BNE      |L1.62|
;;;126          LCD_SetBkColor(WIDGET__GetBkColor(hObj));
000030  4640              MOV      r0,r8
000032  f7fffffe          BL       WIDGET__GetBkColor
000036  4606              MOV      r6,r0
000038  f7fffffe          BL       LCD_SetBkColor
00003c  e002              B        |L1.68|
                  |L1.62|
;;;127        } else {
;;;128          LCD_SetBkColor(pObj->Props.BkColor);
00003e  6b60              LDR      r0,[r4,#0x34]
000040  f7fffffe          BL       LCD_SetBkColor
                  |L1.68|
;;;129        }
;;;130        GUI_Clear();
000044  f7fffffe          BL       GUI_Clear
                  |L1.72|
;;;131      }
;;;132      /* Get size from bitmap */
;;;133      RectBox.x1 = pObj->Props.apBm[0]->XSize - 1 + 2 * EffectSize;
000048  6c20              LDR      r0,[r4,#0x40]
00004a  8800              LDRH     r0,[r0,#0]
00004c  f1a00001          SUB      r0,r0,#1
000050  f04f0102          MOV      r1,#2
000054  fb010005          MLA      r0,r1,r5,r0
000058  b200              SXTH     r0,r0
00005a  f8ad0014          STRH     r0,[sp,#0x14]
;;;134      RectBox.y1 = pObj->Props.apBm[0]->YSize - 1 + 2 * EffectSize;
00005e  6c20              LDR      r0,[r4,#0x40]
000060  8840              LDRH     r0,[r0,#2]
000062  f1a00001          SUB      r0,r0,#1
000066  fb010005          MLA      r0,r1,r5,r0
00006a  b200              SXTH     r0,r0
00006c  f8ad0016          STRH     r0,[sp,#0x16]
;;;135      WM_SetUserClipRect(&RectBox);
000070  a804              ADD      r0,sp,#0x10
000072  f7fffffe          BL       WM_SetUserClipRect
;;;136      /* Clear inside  ... Just in case */
;;;137      LCD_SetBkColor(pObj->Props.aBkColorBox[ColorIndex]);
000076  f104012c          ADD      r1,r4,#0x2c
00007a  f8510029          LDR      r0,[r1,r9,LSL #2]
00007e  f7fffffe          BL       LCD_SetBkColor
;;;138      GUI_Clear();
000082  f7fffffe          BL       GUI_Clear
;;;139      if (pObj->CurrentState) {
000086  f8940051          LDRB     r0,[r4,#0x51]
00008a  b170              CBZ      r0,|L1.170|
;;;140        int Index = (pObj->CurrentState - 1) * 2 + ColorIndex;
00008c  f8940051          LDRB     r0,[r4,#0x51]
000090  f1a00001          SUB      r0,r0,#1
000094  eb090640          ADD      r6,r9,r0,LSL #1
;;;141        GUI_DrawBitmap(pObj->Props.apBm[Index], EffectSize, EffectSize);
000098  f1040140          ADD      r1,r4,#0x40
00009c  f8510026          LDR      r0,[r1,r6,LSL #2]
0000a0  462a              MOV      r2,r5
0000a2  4629              MOV      r1,r5
0000a4  f7fffffe          BL       GUI_DrawBitmap
;;;142      }
0000a8  bf00              NOP      
                  |L1.170|
;;;143      /* Draw the effect arround the box */
;;;144      WIDGET__EFFECT_DrawDownRect(&pObj->Widget, &RectBox);
0000aa  a904              ADD      r1,sp,#0x10
0000ac  4620              MOV      r0,r4
0000ae  f7fffffe          BL       WIDGET__EFFECT_DrawDownRect
;;;145      WM_SetUserClipRect(NULL);
0000b2  2000              MOVS     r0,#0
0000b4  f7fffffe          BL       WM_SetUserClipRect
;;;146      /* Draw text if needed */
;;;147      if (pObj->hpText) {
0000b8  f8b40052          LDRH     r0,[r4,#0x52]
0000bc  2800              CMP      r0,#0
0000be  d07c              BEQ      |L1.442|
;;;148        const char * s;
;;;149        GUI_RECT RectText;
;;;150        /* Draw the text */
;;;151        s = (const char *) GUI_ALLOC_h2p(pObj->hpText);
0000c0  f9b40052          LDRSH    r0,[r4,#0x52]
0000c4  f7fffffe          BL       GUI_ALLOC_h2p
0000c8  4682              MOV      r10,r0
;;;152        WM_GetClientRect(&RectText);
0000ca  a802              ADD      r0,sp,#8
0000cc  f7fffffe          BL       WM_GetClientRect
;;;153        RectText.x0 += RectBox.x1 + 1 + pObj->Props.Spacing;
0000d0  f8bd0014          LDRH     r0,[sp,#0x14]
0000d4  f1000001          ADD      r0,r0,#1
0000d8  f04f013e          MOV      r1,#0x3e
0000dc  5d09              LDRB     r1,[r1,r4]
0000de  4408              ADD      r0,r0,r1
0000e0  f8bd1008          LDRH     r1,[sp,#8]
0000e4  4408              ADD      r0,r0,r1
0000e6  b200              SXTH     r0,r0
0000e8  f8ad0008          STRH     r0,[sp,#8]
;;;154        GUI_SetTextMode(GUI_TM_TRANS);
0000ec  f04f0002          MOV      r0,#2
0000f0  f7fffffe          BL       GUI_SetTextMode
;;;155        LCD_SetColor(pObj->Props.TextColor);
0000f4  6ba0              LDR      r0,[r4,#0x38]
0000f6  f7fffffe          BL       LCD_SetColor
;;;156        GUI_SetFont(pObj->Props.pFont);
0000fa  6aa0              LDR      r0,[r4,#0x28]
0000fc  f7fffffe          BL       GUI_SetFont
;;;157        GUI_DispStringInRect(s, &RectText, pObj->Props.Align);
000100  f9b4203c          LDRSH    r2,[r4,#0x3c]
000104  a902              ADD      r1,sp,#8
000106  4650              MOV      r0,r10
000108  f7fffffe          BL       GUI_DispStringInRect
;;;158        /* Draw focus rectangle */
;;;159        if (pObj->Widget.State & WIDGET_STATE_FOCUS) {
00010c  8ce0              LDRH     r0,[r4,#0x26]
00010e  f0100f01          TST      r0,#1
000112  d069              BEQ      |L1.488|
;;;160          int xSizeText = GUI_GetStringDistX(s);
000114  4650              MOV      r0,r10
000116  f7fffffe          BL       GUI_GetStringDistX
00011a  4606              MOV      r6,r0
;;;161          int ySizeText = GUI_GetFontSizeY();
00011c  f7fffffe          BL       GUI_GetFontSizeY
000120  4607              MOV      r7,r0
;;;162          GUI_RECT RectFocus = RectText;
000122  e9dd0102          LDRD     r0,r1,[sp,#8]
000126  e9cd0100          STRD     r0,r1,[sp,#0]
;;;163          switch (pObj->Props.Align & ~(GUI_TA_HORIZONTAL)) {
00012a  f9b4003c          LDRSH    r0,[r4,#0x3c]
00012e  f0200003          BIC      r0,r0,#3
000132  2804              CMP      r0,#4
000134  d00d              BEQ      |L1.338|
000136  280c              CMP      r0,#0xc
000138  d113              BNE      |L1.354|
;;;164          case GUI_TA_VCENTER:
;;;165            RectFocus.y0 = (RectText.y1 - ySizeText) / 2;
00013a  f9bd100e          LDRSH    r1,[sp,#0xe]
00013e  eba10007          SUB      r0,r1,r7
000142  eb0071d0          ADD      r1,r0,r0,LSR #31
000146  ea4f0161          ASR      r1,r1,#1
00014a  b209              SXTH     r1,r1
00014c  f8ad1002          STRH     r1,[sp,#2]
;;;166            break;
000150  e007              B        |L1.354|
                  |L1.338|
;;;167          case GUI_TA_BOTTOM:
;;;168            RectFocus.y0 = RectText.y1 - ySizeText;
000152  f8bd000e          LDRH     r0,[sp,#0xe]
000156  eba00007          SUB      r0,r0,r7
00015a  b200              SXTH     r0,r0
00015c  f8ad0002          STRH     r0,[sp,#2]
;;;169            break;
000160  bf00              NOP      
                  |L1.354|
000162  bf00              NOP                            ;166
;;;170          }
;;;171          switch (pObj->Props.Align & ~(GUI_TA_VERTICAL)) {
000164  f9b4003c          LDRSH    r0,[r4,#0x3c]
000168  f020000c          BIC      r0,r0,#0xc
00016c  2801              CMP      r0,#1
00016e  d013              BEQ      |L1.408|
000170  2802              CMP      r0,#2
000172  d120              BNE      |L1.438|
;;;172          case GUI_TA_HCENTER:
;;;173            RectFocus.x0 += ((RectText.x1 - RectText.x0) - xSizeText) / 2;
000174  f9bd100c          LDRSH    r1,[sp,#0xc]
000178  f9bd2008          LDRSH    r2,[sp,#8]
00017c  eba10102          SUB      r1,r1,r2
000180  eba10006          SUB      r0,r1,r6
000184  eb0071d0          ADD      r1,r0,r0,LSR #31
000188  f8bd2000          LDRH     r2,[sp,#0]
00018c  eb020161          ADD      r1,r2,r1,ASR #1
000190  b209              SXTH     r1,r1
000192  f8ad1000          STRH     r1,[sp,#0]
;;;174            break;
000196  e00e              B        |L1.438|
                  |L1.408|
;;;175          case GUI_TA_RIGHT:
;;;176            RectFocus.x0 += (RectText.x1 - RectText.x0) - xSizeText;
000198  f8bd000c          LDRH     r0,[sp,#0xc]
00019c  f8bd1008          LDRH     r1,[sp,#8]
0001a0  eba00001          SUB      r0,r0,r1
0001a4  eba00006          SUB      r0,r0,r6
0001a8  f8bd1000          LDRH     r1,[sp,#0]
0001ac  4408              ADD      r0,r0,r1
0001ae  b200              SXTH     r0,r0
0001b0  f8ad0000          STRH     r0,[sp,#0]
;;;177            break;
0001b4  bf00              NOP      
                  |L1.438|
0001b6  bf00              NOP                            ;174
;;;178          }
;;;179          RectFocus.x1 = RectFocus.x0 + xSizeText;
0001b8  e000              B        |L1.444|
                  |L1.442|
0001ba  e016              B        |L1.490|
                  |L1.444|
0001bc  f8bd0000          LDRH     r0,[sp,#0]
0001c0  4430              ADD      r0,r0,r6
0001c2  b200              SXTH     r0,r0
0001c4  f8ad0004          STRH     r0,[sp,#4]
;;;180          RectFocus.y1 = RectFocus.y0 + ySizeText;
0001c8  f8bd0002          LDRH     r0,[sp,#2]
0001cc  4438              ADD      r0,r0,r7
0001ce  b200              SXTH     r0,r0
0001d0  f8ad0006          STRH     r0,[sp,#6]
;;;181          LCD_SetColor(GUI_BLACK);
0001d4  f04f0000          MOV      r0,#0
0001d8  f7fffffe          BL       LCD_SetColor
;;;182          WIDGET__DrawFocusRect(&pObj->Widget, &RectFocus, 0);
0001dc  2200              MOVS     r2,#0
0001de  4669              MOV      r1,sp
0001e0  4620              MOV      r0,r4
0001e2  f7fffffe          BL       WIDGET__DrawFocusRect
;;;183        }
0001e6  bf00              NOP      
                  |L1.488|
;;;184      }
0001e8  bf00              NOP      
                  |L1.490|
;;;185    }
0001ea  b006              ADD      sp,sp,#0x18
0001ec  e8bd87f0          POP      {r4-r10,pc}
;;;186    
                          ENDP

                  _OnTouch PROC
;;;190    */
;;;191    static void _OnTouch(CHECKBOX_Handle hObj, CHECKBOX_Obj* pObj, WM_MESSAGE*pMsg) {
0001f0  e92d47f0          PUSH     {r4-r10,lr}
0001f4  4606              MOV      r6,r0
0001f6  460c              MOV      r4,r1
0001f8  4615              MOV      r5,r2
;;;192      int Notification = 0;
0001fa  f04f0700          MOV      r7,#0
;;;193      int Hit = 0;
0001fe  46b8              MOV      r8,r7
;;;194      const GUI_PID_STATE* pState = (const GUI_PID_STATE*)pMsg->Data.p;
000200  f8d59008          LDR      r9,[r5,#8]
;;;195      if (pMsg->Data.p) {  /* Something happened in our area (pressed or released) */
000204  68a8              LDR      r0,[r5,#8]
000206  b310              CBZ      r0,|L1.590|
;;;196        if (!WM_HasCaptured(hObj)) {
000208  4630              MOV      r0,r6
00020a  f7fffffe          BL       WM_HasCaptured
00020e  bb00              CBNZ     r0,|L1.594|
;;;197          if (pState->Pressed) {
000210  f8990008          LDRB     r0,[r9,#8]
000214  b1b0              CBZ      r0,|L1.580|
;;;198            WM_SetCapture(hObj, 1);
000216  2101              MOVS     r1,#1
000218  4630              MOV      r0,r6
00021a  f7fffffe          BL       WM_SetCapture
;;;199            pObj->CurrentState = (pObj->CurrentState + 1) % pObj->NumStates;
00021e  f1040450          ADD      r4,r4,#0x50
000222  7860              LDRB     r0,[r4,#1]
000224  f1000001          ADD      r0,r0,#1
000228  7821              LDRB     r1,[r4,#0]
00022a  fb90f2f1          SDIV     r2,r0,r1
00022e  fb010012          MLS      r0,r1,r2,r0
000232  7060              STRB     r0,[r4,#1]
000234  f1a40450          SUB      r4,r4,#0x50
;;;200            WM_Invalidate(hObj);
000238  4630              MOV      r0,r6
00023a  f7fffffe          BL       WM_InvalidateWindow
;;;201            Notification = WM_NOTIFICATION_CLICKED;
00023e  f04f0701          MOV      r7,#1
000242  e006              B        |L1.594|
                  |L1.580|
;;;202          } else {
;;;203            Hit =1;
000244  f04f0801          MOV      r8,#1
;;;204            Notification = WM_NOTIFICATION_RELEASED;
000248  f04f0702          MOV      r7,#2
00024c  e001              B        |L1.594|
                  |L1.590|
;;;205          }
;;;206        }
;;;207      } else {
;;;208        Notification = WM_NOTIFICATION_MOVED_OUT;
00024e  f04f0703          MOV      r7,#3
                  |L1.594|
;;;209      }
;;;210      WM_NotifyParent(hObj, Notification);
000252  4639              MOV      r1,r7
000254  4630              MOV      r0,r6
000256  f7fffffe          BL       WM_NotifyParent
;;;211      if (Hit == 1) {
00025a  f1b80f01          CMP      r8,#1
00025e  d103              BNE      |L1.616|
;;;212        GUI_DEBUG_LOG("CHECKBOX: Hit\n");
;;;213        GUI_StoreKey(pObj->Widget.Id);
000260  f9b40024          LDRSH    r0,[r4,#0x24]
000264  f7fffffe          BL       GUI_StoreKey
                  |L1.616|
;;;214      }
;;;215    }
000268  e8bd87f0          POP      {r4-r10,pc}
;;;216    
                          ENDP

                  _OnKey PROC
;;;220    */
;;;221    static void  _OnKey(CHECKBOX_Handle hObj, CHECKBOX_Obj * pObj, WM_MESSAGE * pMsg) {
00026c  e92d41f0          PUSH     {r4-r8,lr}
000270  4607              MOV      r7,r0
000272  460c              MOV      r4,r1
000274  4616              MOV      r6,r2
;;;222      WM_KEY_INFO * pKeyInfo;
;;;223      if (WM__IsEnabled(hObj)) {
000276  4638              MOV      r0,r7
000278  f7fffffe          BL       WM__IsEnabled
00027c  b1c0              CBZ      r0,|L1.688|
;;;224        pKeyInfo = (WM_KEY_INFO *)(pMsg->Data.p);
00027e  68b5              LDR      r5,[r6,#8]
;;;225        if (pKeyInfo->PressedCnt > 0) {
000280  6868              LDR      r0,[r5,#4]
000282  2800              CMP      r0,#0
000284  dd14              BLE      |L1.688|
;;;226          switch (pKeyInfo->Key) {
000286  6828              LDR      r0,[r5,#0]
000288  2820              CMP      r0,#0x20
00028a  d110              BNE      |L1.686|
;;;227          case GUI_KEY_SPACE:
;;;228            pObj->CurrentState = (pObj->CurrentState + 1) % pObj->NumStates;
00028c  f1040450          ADD      r4,r4,#0x50
000290  7860              LDRB     r0,[r4,#1]
000292  f1000001          ADD      r0,r0,#1
000296  7821              LDRB     r1,[r4,#0]
000298  fb90f2f1          SDIV     r2,r0,r1
00029c  fb010012          MLS      r0,r1,r2,r0
0002a0  7060              STRB     r0,[r4,#1]
0002a2  f1a40450          SUB      r4,r4,#0x50
;;;229            WM_Invalidate(hObj);
0002a6  4638              MOV      r0,r7
0002a8  f7fffffe          BL       WM_InvalidateWindow
;;;230            break;                    /* Send to parent by not doing anything */
0002ac  bf00              NOP      
                  |L1.686|
0002ae  bf00              NOP      
                  |L1.688|
;;;231          }
;;;232        }
;;;233      }
;;;234    }
0002b0  e8bd81f0          POP      {r4-r8,pc}
;;;235    
                          ENDP

                  _CHECKBOX_Callback PROC
;;;239    */
;;;240    static void _CHECKBOX_Callback (WM_MESSAGE *pMsg) {
0002b4  b570              PUSH     {r4-r6,lr}
0002b6  4604              MOV      r4,r0
;;;241      CHECKBOX_Handle hObj;
;;;242      CHECKBOX_Obj* pObj;
;;;243      hObj = pMsg->hWin;
0002b8  f9b45004          LDRSH    r5,[r4,#4]
;;;244      pObj = CHECKBOX_H2P(hObj);
0002bc  4628              MOV      r0,r5
0002be  f7fffffe          BL       GUI_ALLOC_h2p
0002c2  4606              MOV      r6,r0
;;;245      /* Let widget handle the standard messages */
;;;246      if (WIDGET_HandleActive(hObj, pMsg) == 0) {
0002c4  4621              MOV      r1,r4
0002c6  4628              MOV      r0,r5
0002c8  f7fffffe          BL       WIDGET_HandleActive
0002cc  b900              CBNZ     r0,|L1.720|
                  |L1.718|
;;;247        return;
;;;248      }
;;;249      switch (pMsg->MsgId) {
;;;250      case WM_KEY:
;;;251        _OnKey(hObj, pObj, pMsg);
;;;252        break;
;;;253      case WM_PAINT:
;;;254        GUI_DEBUG_LOG("CHECKBOX: _Callback(WM_PAINT)\n");
;;;255        _Paint(pObj, hObj);
;;;256        return;
;;;257      case WM_TOUCH:
;;;258        _OnTouch(hObj, pObj, pMsg);
;;;259        break;
;;;260      }
;;;261      WM_DefaultProc(pMsg);
;;;262    }
0002ce  bd70              POP      {r4-r6,pc}
                  |L1.720|
0002d0  6820              LDR      r0,[r4,#0]            ;249
0002d2  280c              CMP      r0,#0xc               ;249
0002d4  d00f              BEQ      |L1.758|
0002d6  280e              CMP      r0,#0xe               ;249
0002d8  d002              BEQ      |L1.736|
0002da  280f              CMP      r0,#0xf               ;249
0002dc  d111              BNE      |L1.770|
0002de  e005              B        |L1.748|
                  |L1.736|
0002e0  4622              MOV      r2,r4                 ;251
0002e2  4631              MOV      r1,r6                 ;251
0002e4  4628              MOV      r0,r5                 ;251
0002e6  f7fffffe          BL       _OnKey
0002ea  e00a              B        |L1.770|
                  |L1.748|
0002ec  4629              MOV      r1,r5                 ;255
0002ee  4630              MOV      r0,r6                 ;255
0002f0  f7fffffe          BL       _Paint
0002f4  e7eb              B        |L1.718|
                  |L1.758|
0002f6  4622              MOV      r2,r4                 ;258
0002f8  4631              MOV      r1,r6                 ;258
0002fa  4628              MOV      r0,r5                 ;258
0002fc  f7fffffe          BL       _OnTouch
000300  bf00              NOP                            ;259
                  |L1.770|
000302  bf00              NOP                            ;252
000304  4620              MOV      r0,r4                 ;261
000306  f7fffffe          BL       WM_DefaultProc
00030a  bf00              NOP      
00030c  e7df              B        |L1.718|
;;;263    
                          ENDP

                  CHECKBOX_CreateEx PROC
;;;277    */
;;;278    CHECKBOX_Handle CHECKBOX_CreateEx(int x0, int y0, int xsize, int ysize, WM_HWIN hParent,
00030e  e92d5fff          PUSH     {r0-r12,lr}
;;;279                                        int WinFlags, int ExFlags, int Id)
;;;280    {
000312  4681              MOV      r9,r0
000314  468a              MOV      r10,r1
000316  4614              MOV      r4,r2
000318  461d              MOV      r5,r3
00031a  e9ddb80e          LDRD     r11,r8,[sp,#0x38]
;;;281      CHECKBOX_Handle hObj;
;;;282      GUI_USE_PARA(ExFlags);
00031e  9810              LDR      r0,[sp,#0x40]
000320  9010              STR      r0,[sp,#0x40]
;;;283      WM_LOCK();
;;;284      /* Calculate size if needed */
;;;285      if ((xsize == 0) || (ysize == 0)) {
000322  b104              CBZ      r4,|L1.806|
000324  b99d              CBNZ     r5,|L1.846|
                  |L1.806|
;;;286        int EffectSize;
;;;287        EffectSize = WIDGET_GetDefaultEffect()->EffectSize;
000326  f7fffffe          BL       WIDGET_GetDefaultEffect
00032a  6947              LDR      r7,[r0,#0x14]
;;;288        if (xsize == 0) {
00032c  b934              CBNZ     r4,|L1.828|
;;;289          xsize = CHECKBOX__DefaultProps.apBm[0]->XSize + 2 * EffectSize;
00032e  4820              LDR      r0,|L1.944|
000330  6980              LDR      r0,[r0,#0x18]  ; CHECKBOX__DefaultProps
000332  8800              LDRH     r0,[r0,#0]
000334  f04f0102          MOV      r1,#2
000338  fb010407          MLA      r4,r1,r7,r0
                  |L1.828|
;;;290        }
;;;291        if (ysize == 0) {
00033c  b935              CBNZ     r5,|L1.844|
;;;292          ysize = CHECKBOX__DefaultProps.apBm[0]->YSize + 2 * EffectSize;
00033e  481c              LDR      r0,|L1.944|
000340  6980              LDR      r0,[r0,#0x18]  ; CHECKBOX__DefaultProps
000342  8840              LDRH     r0,[r0,#2]
000344  f04f0102          MOV      r1,#2
000348  fb010507          MLA      r5,r1,r7,r0
                  |L1.844|
;;;293        }
;;;294      }
00034c  bf00              NOP      
                  |L1.846|
;;;295    #if WM_SUPPORT_TRANSPARENCY
;;;296      if (CHECKBOX__DefaultProps.BkColor == GUI_INVALID_COLOR) {
00034e  4818              LDR      r0,|L1.944|
000350  68c0              LDR      r0,[r0,#0xc]  ; CHECKBOX__DefaultProps
000352  f06f4170          MVN      r1,#0xf0000000
000356  4288              CMP      r0,r1
000358  d101              BNE      |L1.862|
;;;297        WinFlags |= WM_CF_HASTRANS;
00035a  f0480801          ORR      r8,r8,#1
                  |L1.862|
;;;298      }
;;;299    #endif
;;;300      /* Create the window */
;;;301      hObj = WM_CreateWindowAsChild(x0, y0, xsize, ysize, hParent, WinFlags, _CHECKBOX_Callback,
00035e  2134              MOVS     r1,#0x34
000360  4a14              LDR      r2,|L1.948|
000362  fa1ff088          UXTH     r0,r8
000366  462b              MOV      r3,r5
000368  e9cdb000          STRD     r11,r0,[sp,#0]
00036c  e9cd2102          STRD     r2,r1,[sp,#8]
000370  4622              MOV      r2,r4
000372  4651              MOV      r1,r10
000374  4648              MOV      r0,r9
000376  f7fffffe          BL       WM_CreateWindowAsChild
00037a  4606              MOV      r6,r0
;;;302                                    sizeof(CHECKBOX_Obj) - sizeof(WM_Obj));
;;;303      if (hObj) {
00037c  b1a6              CBZ      r6,|L1.936|
;;;304        CHECKBOX_Obj* pObj = CHECKBOX_H2P(hObj);
00037e  4630              MOV      r0,r6
000380  f7fffffe          BL       GUI_ALLOC_h2p
000384  4607              MOV      r7,r0
;;;305        /* init widget specific variables */
;;;306        WIDGET__Init(&pObj->Widget, Id, WIDGET_STATE_FOCUSSABLE);
000386  f04f0210          MOV      r2,#0x10
00038a  4638              MOV      r0,r7
00038c  9911              LDR      r1,[sp,#0x44]
00038e  f7fffffe          BL       WIDGET__Init
;;;307        CHECKBOX_INIT_ID(pObj);
;;;308        /* init member variables */
;;;309        pObj->Props = CHECKBOX__DefaultProps;
000392  2228              MOVS     r2,#0x28
000394  4906              LDR      r1,|L1.944|
000396  f1070028          ADD      r0,r7,#0x28
00039a  f7fffffe          BL       __aeabi_memcpy4
;;;310        pObj->NumStates   = 2; /* Default behaviour is 2 states: checked and unchecked */
00039e  f04f0002          MOV      r0,#2
0003a2  f8870050          STRB     r0,[r7,#0x50]
;;;311      } else {
0003a6  bf00              NOP      
                  |L1.936|
;;;312        GUI_DEBUG_ERROROUT_IF(hObj==0, "CHECKBOX_Create failed")
;;;313      }
;;;314      WM_UNLOCK();
;;;315      return hObj;
0003a8  4630              MOV      r0,r6
;;;316    }
0003aa  b004              ADD      sp,sp,#0x10
0003ac  e8bd9ff0          POP      {r4-r12,pc}
;;;317    
                          ENDP

                  |L1.944|
                          DCD      CHECKBOX__DefaultProps
                  |L1.948|
                          DCD      _CHECKBOX_Callback

                          AREA ||.data||, DATA, ALIGN=2

                  CHECKBOX__DefaultProps
                          DCD      GUI_Font13_1
                          DCD      0x00808080
                          DCD      0x00ffffff
                          DCD      0x00c0c0c0
                          DCD      0x00000000
000014  000c              DCW      0x000c
000016  0400              DCB      0x04,0x00
                          DCD      CHECKBOX__abmCheck
                          DCD      CHECKBOX__abmCheck+0x14
                          %        8
