; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\listbox.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\listbox.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -I.\GUI\AntiAlias -I.\GUI\Config -I.\GUI\ConvertColor -I.\GUI\ConvertMono -I.\GUI\Core -I.\GUI\Font -I.\GUI\GUI_X -I.\GUI\JPEG -I.\GUI\LCDDriver -I.\GUI\MemDev -I.\GUI\MultiLayer -I.\GUI\Widget -I.\GUI\WM -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\INC\ST\STM32F10x -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\listbox.crf GUI\Widget\LISTBOX.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  LISTBOX__GetpString PROC
;;;151    */
;;;152    const char* LISTBOX__GetpString(const LISTBOX_Obj* pObj, int Index) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
;;;153      const char* s = NULL;
000008  f04f0700          MOV      r7,#0
;;;154      LISTBOX_ITEM* pItem = (LISTBOX_ITEM*)GUI_ARRAY_GetpItem(&pObj->ItemArray, Index);
00000c  4631              MOV      r1,r6
00000e  f1040028          ADD      r0,r4,#0x28
000012  f7fffffe          BL       GUI_ARRAY_GetpItem
000016  4605              MOV      r5,r0
;;;155      if (pItem) {
000018  b10d              CBZ      r5,|L1.30|
;;;156        s = pItem->acText;
00001a  f1050705          ADD      r7,r5,#5
                  |L1.30|
;;;157      }
;;;158      return s;
00001e  4638              MOV      r0,r7
;;;159    }
000020  e8bd81f0          POP      {r4-r8,pc}
;;;160    
                          ENDP

                  LISTBOX_OwnerDraw PROC
;;;323    */
;;;324    int LISTBOX_OwnerDraw(const WIDGET_ITEM_DRAW_INFO* pDrawItemInfo) {
000024  e92d4ff0          PUSH     {r4-r11,lr}
000028  b087              SUB      sp,sp,#0x1c
00002a  4604              MOV      r4,r0
;;;325      switch (pDrawItemInfo->Cmd) {
00002c  6860              LDR      r0,[r4,#4]
00002e  b348              CBZ      r0,|L1.132|
000030  2801              CMP      r0,#1
000032  d002              BEQ      |L1.58|
000034  2802              CMP      r0,#2
000036  d17d              BNE      |L1.308|
000038  e018              B        |L1.108|
                  |L1.58|
;;;326        case WIDGET_ITEM_GET_XSIZE: {
;;;327          LISTBOX_Obj* pObj;
;;;328          const GUI_FONT GUI_UNI_PTR* pOldFont;
;;;329          const char* s;
;;;330          int DistX;
;;;331          pObj = LISTBOX_H2P(pDrawItemInfo->hWin);
00003a  f9b40000          LDRSH    r0,[r4,#0]
00003e  f7fffffe          BL       GUI_ALLOC_h2p
000042  4605              MOV      r5,r0
;;;332          pOldFont = GUI_SetFont(pObj->Props.pFont);
000044  6ca8              LDR      r0,[r5,#0x48]
000046  f7fffffe          BL       GUI_SetFont
00004a  4607              MOV      r7,r0
;;;333          s = LISTBOX__GetpString(pObj, pDrawItemInfo->ItemIndex);
00004c  4628              MOV      r0,r5
00004e  68a1              LDR      r1,[r4,#8]
000050  f7fffffe          BL       LISTBOX__GetpString
000054  4680              MOV      r8,r0
;;;334          DistX = GUI_GetStringDistX(s);
000056  4640              MOV      r0,r8
000058  f7fffffe          BL       GUI_GetStringDistX
00005c  4606              MOV      r6,r0
;;;335          GUI_SetFont(pOldFont);
00005e  4638              MOV      r0,r7
000060  f7fffffe          BL       GUI_SetFont
;;;336          return DistX;
000064  4630              MOV      r0,r6
                  |L1.102|
;;;337        }
;;;338        case WIDGET_ITEM_GET_YSIZE: {
;;;339          LISTBOX_Obj* pObj;
;;;340          pObj = LISTBOX_H2P(pDrawItemInfo->hWin);
;;;341          return GUI_GetYDistOfFont(pObj->Props.pFont) + pObj->ItemSpacing;
;;;342        }
;;;343        case WIDGET_ITEM_DRAW: {
;;;344          LISTBOX_Obj* pObj;
;;;345          LISTBOX_ITEM* pItem;
;;;346          WM_HMEM hItem;
;;;347          GUI_RECT r;
;;;348          int FontDistY;
;;;349          int ItemIndex = pDrawItemInfo->ItemIndex;
;;;350          const char* s;
;;;351          int ColorIndex;
;;;352          char IsDisabled;
;;;353          char IsSelected;
;;;354          pObj = LISTBOX_H2P(pDrawItemInfo->hWin);
;;;355          hItem = GUI_ARRAY_GethItem(&pObj->ItemArray, ItemIndex);
;;;356          pItem = (LISTBOX_ITEM *)GUI_ALLOC_h2p(hItem);
;;;357          WM_GetInsideRect(&r);
;;;358          FontDistY = GUI_GetFontDistY();
;;;359          /* Calculate color index */
;;;360          IsDisabled = (pItem->Status & LISTBOX_ITEM_DISABLED) ? 1 : 0;
;;;361          IsSelected = (pItem->Status & LISTBOX_ITEM_SELECTED) ? 1 : 0;
;;;362          if (pObj->Flags & LISTBOX_SF_MULTISEL) {
;;;363            if (IsDisabled) {
;;;364              ColorIndex = 3;
;;;365            } else {
;;;366              ColorIndex = (IsSelected) ? 2 : 0;
;;;367            }
;;;368          } else {
;;;369            if (IsDisabled) {
;;;370              ColorIndex = 3;
;;;371            } else {
;;;372              if (ItemIndex == pObj->Sel) {
;;;373                ColorIndex = (pObj->Widget.State & WIDGET_STATE_FOCUS) ? 2 : 1;
;;;374              } else {
;;;375                ColorIndex = 0;
;;;376              }
;;;377            }
;;;378          }
;;;379          /* Display item */
;;;380          LCD_SetBkColor(pObj->Props.aBackColor[ColorIndex]);
;;;381          LCD_SetColor  (pObj->Props.aTextColor[ColorIndex]);
;;;382          s = LISTBOX__GetpString(pObj, ItemIndex);
;;;383          GUI_SetTextMode(GUI_TM_TRANS);
;;;384          GUI_Clear();
;;;385          GUI_DispStringAt(s, pDrawItemInfo->x0 + 1, pDrawItemInfo->y0);
;;;386          /* Display focus rectangle */
;;;387          if ((pObj->Flags & LISTBOX_SF_MULTISEL) && (ItemIndex == pObj->Sel)) {
;;;388            GUI_RECT rFocus;
;;;389            rFocus.x0 = pDrawItemInfo->x0;
;;;390            rFocus.y0 = pDrawItemInfo->y0;
;;;391            rFocus.x1 = r.x1;
;;;392            rFocus.y1 = pDrawItemInfo->y0 + FontDistY - 1;
;;;393            LCD_SetColor(GUI_WHITE - pObj->Props.aBackColor[ColorIndex]);
;;;394            GUI_DrawFocusRect(&rFocus, 0);
;;;395          }
;;;396          return 0;
;;;397        }
;;;398      }
;;;399      return 0;
;;;400    }
000066  b007              ADD      sp,sp,#0x1c
000068  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.108|
00006c  f9b40000          LDRSH    r0,[r4,#0]            ;340
000070  f7fffffe          BL       GUI_ALLOC_h2p
000074  4605              MOV      r5,r0                 ;340
000076  6ca8              LDR      r0,[r5,#0x48]         ;341
000078  f7fffffe          BL       GUI_GetYDistOfFont
00007c  f8b51076          LDRH     r1,[r5,#0x76]         ;341
000080  4408              ADD      r0,r0,r1              ;341
000082  e7f0              B        |L1.102|
                  |L1.132|
000084  68a7              LDR      r7,[r4,#8]            ;349
000086  f9b40000          LDRSH    r0,[r4,#0]            ;354
00008a  f7fffffe          BL       GUI_ALLOC_h2p
00008e  4605              MOV      r5,r0                 ;354
000090  4639              MOV      r1,r7                 ;355
000092  f1050028          ADD      r0,r5,#0x28           ;355
000096  f7fffffe          BL       GUI_ARRAY_GethItem
00009a  9006              STR      r0,[sp,#0x18]         ;355
00009c  9806              LDR      r0,[sp,#0x18]         ;356
00009e  f7fffffe          BL       GUI_ALLOC_h2p
0000a2  4680              MOV      r8,r0                 ;356
0000a4  a804              ADD      r0,sp,#0x10           ;357
0000a6  f7fffffe          BL       WM_GetInsideRect
0000aa  f7fffffe          BL       GUI_GetFontDistY
0000ae  4682              MOV      r10,r0                ;358
0000b0  f8980004          LDRB     r0,[r8,#4]            ;360
0000b4  f3c00940          UBFX     r9,r0,#1,#1           ;360
0000b8  f8980004          LDRB     r0,[r8,#4]            ;361
0000bc  f0000b01          AND      r11,r0,#1             ;361
0000c0  f8950074          LDRB     r0,[r5,#0x74]         ;362
0000c4  f0100f04          TST      r0,#4                 ;362
0000c8  d00f              BEQ      |L1.234|
0000ca  f1b90f00          CMP      r9,#0                 ;363
0000ce  d002              BEQ      |L1.214|
0000d0  f04f0603          MOV      r6,#3                 ;364
0000d4  e020              B        |L1.280|
                  |L1.214|
0000d6  f1bb0f00          CMP      r11,#0                ;366
0000da  d002              BEQ      |L1.226|
0000dc  f04f0002          MOV      r0,#2                 ;366
0000e0  e001              B        |L1.230|
                  |L1.226|
0000e2  f04f0000          MOV      r0,#0                 ;366
                  |L1.230|
0000e6  4606              MOV      r6,r0                 ;366
0000e8  e016              B        |L1.280|
                  |L1.234|
0000ea  f1b90f00          CMP      r9,#0                 ;369
0000ee  d002              BEQ      |L1.246|
0000f0  f04f0603          MOV      r6,#3                 ;370
0000f4  e010              B        |L1.280|
                  |L1.246|
0000f6  f9b50072          LDRSH    r0,[r5,#0x72]         ;372
0000fa  42b8              CMP      r0,r7                 ;372
0000fc  d10a              BNE      |L1.276|
0000fe  8ce8              LDRH     r0,[r5,#0x26]         ;373
000100  f0100f01          TST      r0,#1                 ;373
000104  d002              BEQ      |L1.268|
000106  f04f0002          MOV      r0,#2                 ;373
00010a  e001              B        |L1.272|
                  |L1.268|
00010c  f04f0001          MOV      r0,#1                 ;373
                  |L1.272|
000110  4606              MOV      r6,r0                 ;373
000112  e001              B        |L1.280|
                  |L1.276|
000114  f04f0600          MOV      r6,#0                 ;375
                  |L1.280|
000118  f1050150          ADD      r1,r5,#0x50           ;380
00011c  f8510026          LDR      r0,[r1,r6,LSL #2]     ;380
000120  f7fffffe          BL       LCD_SetBkColor
000124  f1050160          ADD      r1,r5,#0x60           ;381
000128  f8510026          LDR      r0,[r1,r6,LSL #2]     ;381
00012c  f7fffffe          BL       LCD_SetColor
000130  4639              MOV      r1,r7                 ;382
000132  e000              B        |L1.310|
                  |L1.308|
000134  e03b              B        |L1.430|
                  |L1.310|
000136  4628              MOV      r0,r5                 ;382
000138  f7fffffe          BL       LISTBOX__GetpString
00013c  9003              STR      r0,[sp,#0xc]          ;382
00013e  2002              MOVS     r0,#2                 ;383
000140  f7fffffe          BL       GUI_SetTextMode
000144  f7fffffe          BL       GUI_Clear
000148  e9d40203          LDRD     r0,r2,[r4,#0xc]       ;385
00014c  1c41              ADDS     r1,r0,#1              ;385
00014e  9803              LDR      r0,[sp,#0xc]          ;385
000150  f7fffffe          BL       GUI_DispStringAt
000154  f8950074          LDRB     r0,[r5,#0x74]         ;387
000158  f0100f04          TST      r0,#4                 ;387
00015c  d025              BEQ      |L1.426|
00015e  f9b50072          LDRSH    r0,[r5,#0x72]         ;387
000162  42b8              CMP      r0,r7                 ;387
000164  d121              BNE      |L1.426|
000166  68e0              LDR      r0,[r4,#0xc]          ;389
000168  b200              SXTH     r0,r0                 ;389
00016a  f8ad0004          STRH     r0,[sp,#4]            ;389
00016e  6920              LDR      r0,[r4,#0x10]         ;390
000170  b200              SXTH     r0,r0                 ;390
000172  f8ad0006          STRH     r0,[sp,#6]            ;390
000176  f8bd0014          LDRH     r0,[sp,#0x14]         ;391
00017a  f8ad0008          STRH     r0,[sp,#8]            ;391
00017e  6920              LDR      r0,[r4,#0x10]         ;392
000180  4450              ADD      r0,r0,r10             ;392
000182  f1a00001          SUB      r0,r0,#1              ;392
000186  b200              SXTH     r0,r0                 ;392
000188  f8ad000a          STRH     r0,[sp,#0xa]          ;392
00018c  f1050150          ADD      r1,r5,#0x50           ;393
000190  f8511026          LDR      r1,[r1,r6,LSL #2]     ;393
000194  f06f427f          MVN      r2,#0xff000000        ;393
000198  eba20001          SUB      r0,r2,r1              ;393
00019c  f7fffffe          BL       LCD_SetColor
0001a0  2100              MOVS     r1,#0                 ;394
0001a2  a801              ADD      r0,sp,#4              ;394
0001a4  f7fffffe          BL       GUI_DrawFocusRect
0001a8  bf00              NOP                            ;395
                  |L1.426|
0001aa  2000              MOVS     r0,#0                 ;396
0001ac  e75b              B        |L1.102|
                  |L1.430|
0001ae  2000              MOVS     r0,#0                 ;399
0001b0  e759              B        |L1.102|
;;;401    
                          ENDP

                  _CallOwnerDraw PROC
;;;119    */
;;;120    static int _CallOwnerDraw(LISTBOX_Handle hObj, const LISTBOX_Obj* pObj, int Cmd, int ItemIndex) {
0001b2  e92d41f0          PUSH     {r4-r8,lr}
0001b6  b086              SUB      sp,sp,#0x18
0001b8  4606              MOV      r6,r0
0001ba  460c              MOV      r4,r1
0001bc  4617              MOV      r7,r2
0001be  4698              MOV      r8,r3
;;;121      WIDGET_ITEM_DRAW_INFO ItemInfo;
;;;122      int r;
;;;123      ItemInfo.Cmd       = Cmd;
0001c0  9702              STR      r7,[sp,#8]
;;;124      ItemInfo.hWin      = hObj;
0001c2  f8ad6004          STRH     r6,[sp,#4]
;;;125      ItemInfo.ItemIndex = ItemIndex;
0001c6  f8cd800c          STR      r8,[sp,#0xc]
;;;126      if (pObj->pfDrawItem) {
0001ca  6ae0              LDR      r0,[r4,#0x2c]
0001cc  b120              CBZ      r0,|L1.472|
;;;127        r = pObj->pfDrawItem(&ItemInfo);
0001ce  a801              ADD      r0,sp,#4
0001d0  6ae1              LDR      r1,[r4,#0x2c]
0001d2  4788              BLX      r1
0001d4  4605              MOV      r5,r0
0001d6  e003              B        |L1.480|
                  |L1.472|
;;;128      } else {
;;;129        r = LISTBOX_OwnerDraw(&ItemInfo);
0001d8  a801              ADD      r0,sp,#4
0001da  f7fffffe          BL       LISTBOX_OwnerDraw
0001de  4605              MOV      r5,r0
                  |L1.480|
;;;130      }
;;;131      return r;
0001e0  4628              MOV      r0,r5
;;;132    }
0001e2  b006              ADD      sp,sp,#0x18
0001e4  e8bd81f0          POP      {r4-r8,pc}
;;;133    
                          ENDP

                  LISTBOX__GetNumItems PROC
;;;140    */
;;;141    unsigned LISTBOX__GetNumItems(const LISTBOX_Obj* pObj) {
0001e8  b510              PUSH     {r4,lr}
0001ea  4604              MOV      r4,r0
;;;142      return GUI_ARRAY_GetNumItems(&pObj->ItemArray);
0001ec  f1040028          ADD      r0,r4,#0x28
0001f0  f7fffffe          BL       GUI_ARRAY_GetNumItems
;;;143    }
0001f4  bd10              POP      {r4,pc}
;;;144    
                          ENDP

                  _GetYSize PROC
;;;164    */
;;;165    static int _GetYSize(LISTBOX_Handle hObj) {
0001f6  b51c              PUSH     {r2-r4,lr}
0001f8  4604              MOV      r4,r0
;;;166      GUI_RECT Rect;
;;;167      WM_GetInsideRectExScrollbar(hObj, &Rect);
0001fa  4669              MOV      r1,sp
0001fc  4620              MOV      r0,r4
0001fe  f7fffffe          BL       WM_GetInsideRectExScrollbar
;;;168      return (Rect.y1 - Rect.y0 + 1);
000202  f9bd0006          LDRSH    r0,[sp,#6]
000206  f9bd1002          LDRSH    r1,[sp,#2]
00020a  1a40              SUBS     r0,r0,r1
00020c  1c40              ADDS     r0,r0,#1
;;;169    }
00020e  bd1c              POP      {r2-r4,pc}
;;;170    
                          ENDP

                  _GetItemSizeX PROC
;;;174    */
;;;175    static int _GetItemSizeX(LISTBOX_Handle hObj, const LISTBOX_Obj* pObj, unsigned Index) {
000210  e92d47f0          PUSH     {r4-r10,lr}
000214  4680              MOV      r8,r0
000216  460d              MOV      r5,r1
000218  4616              MOV      r6,r2
;;;176      LISTBOX_ITEM* pItem;
;;;177      int xSize = 0;
00021a  f04f0700          MOV      r7,#0
;;;178      pItem = (LISTBOX_ITEM*)GUI_ARRAY_GetpItem(&pObj->ItemArray, Index);
00021e  4631              MOV      r1,r6
000220  f1050028          ADD      r0,r5,#0x28
000224  f7fffffe          BL       GUI_ARRAY_GetpItem
000228  4604              MOV      r4,r0
;;;179      if (pItem) {
00022a  b104              CBZ      r4,|L1.558|
;;;180        xSize = pItem->xSize;
00022c  8827              LDRH     r7,[r4,#0]
                  |L1.558|
;;;181      }
;;;182      if (xSize == 0) {
00022e  b97f              CBNZ     r7,|L1.592|
;;;183        const GUI_FONT GUI_UNI_PTR* pOldFont;
;;;184        pOldFont = GUI_SetFont(pObj->Props.pFont);
000230  6ca8              LDR      r0,[r5,#0x48]
000232  f7fffffe          BL       GUI_SetFont
000236  4681              MOV      r9,r0
;;;185        xSize    = _CallOwnerDraw(hObj, pObj, WIDGET_ITEM_GET_XSIZE, Index);
000238  4633              MOV      r3,r6
00023a  f04f0201          MOV      r2,#1
00023e  4629              MOV      r1,r5
000240  4640              MOV      r0,r8
000242  f7fffffe          BL       _CallOwnerDraw
000246  4607              MOV      r7,r0
;;;186        GUI_SetFont(pOldFont);
000248  4648              MOV      r0,r9
00024a  f7fffffe          BL       GUI_SetFont
;;;187      }
00024e  bf00              NOP      
                  |L1.592|
;;;188      if (pItem) {
000250  b104              CBZ      r4,|L1.596|
;;;189        pItem->xSize = xSize;
000252  8027              STRH     r7,[r4,#0]
                  |L1.596|
;;;190      }
;;;191      return xSize;
000254  4638              MOV      r0,r7
;;;192    }
000256  e8bd87f0          POP      {r4-r10,pc}
;;;193    
                          ENDP

                  _GetItemSizeY PROC
;;;197    */
;;;198    static int _GetItemSizeY(LISTBOX_Handle hObj, const LISTBOX_Obj* pObj, unsigned Index) {
00025a  e92d47f0          PUSH     {r4-r10,lr}
00025e  4680              MOV      r8,r0
000260  460d              MOV      r5,r1
000262  4616              MOV      r6,r2
;;;199      LISTBOX_ITEM* pItem;
;;;200      int ySize = 0;
000264  f04f0700          MOV      r7,#0
;;;201      pItem = (LISTBOX_ITEM*)GUI_ARRAY_GetpItem(&pObj->ItemArray, Index);
000268  4631              MOV      r1,r6
00026a  f1050028          ADD      r0,r5,#0x28
00026e  f7fffffe          BL       GUI_ARRAY_GetpItem
000272  4604              MOV      r4,r0
;;;202      if (pItem) {
000274  b104              CBZ      r4,|L1.632|
;;;203        ySize = pItem->ySize;
000276  8867              LDRH     r7,[r4,#2]
                  |L1.632|
;;;204      }
;;;205      if (ySize == 0) {
000278  b97f              CBNZ     r7,|L1.666|
;;;206        const GUI_FONT GUI_UNI_PTR* pOldFont;
;;;207        pOldFont = GUI_SetFont(pObj->Props.pFont);
00027a  6ca8              LDR      r0,[r5,#0x48]
00027c  f7fffffe          BL       GUI_SetFont
000280  4681              MOV      r9,r0
;;;208        ySize    = _CallOwnerDraw(hObj, pObj, WIDGET_ITEM_GET_YSIZE, Index);
000282  4633              MOV      r3,r6
000284  f04f0202          MOV      r2,#2
000288  4629              MOV      r1,r5
00028a  4640              MOV      r0,r8
00028c  f7fffffe          BL       _CallOwnerDraw
000290  4607              MOV      r7,r0
;;;209        GUI_SetFont(pOldFont);
000292  4648              MOV      r0,r9
000294  f7fffffe          BL       GUI_SetFont
;;;210      }
000298  bf00              NOP      
                  |L1.666|
;;;211      if (pItem) {
00029a  b104              CBZ      r4,|L1.670|
;;;212        pItem->ySize = ySize;
00029c  8067              STRH     r7,[r4,#2]
                  |L1.670|
;;;213      }
;;;214      return ySize;
00029e  4638              MOV      r0,r7
;;;215    }
0002a0  e8bd87f0          POP      {r4-r10,pc}
;;;216    
                          ENDP

                  _GetContentsSizeX PROC
;;;220    */
;;;221    static int _GetContentsSizeX(LISTBOX_Handle hObj) {
0002a4  e92d47f0          PUSH     {r4-r10,lr}
0002a8  4607              MOV      r7,r0
;;;222      LISTBOX_Obj* pObj;
;;;223      int i, NumItems, SizeX;
;;;224      int Result = 0;
0002aa  f04f0600          MOV      r6,#0
;;;225      pObj = LISTBOX_H2P(hObj);
0002ae  4638              MOV      r0,r7
0002b0  f7fffffe          BL       GUI_ALLOC_h2p
0002b4  4681              MOV      r9,r0
;;;226      NumItems = LISTBOX__GetNumItems(pObj);
0002b6  4648              MOV      r0,r9
0002b8  f7fffffe          BL       LISTBOX__GetNumItems
0002bc  4680              MOV      r8,r0
;;;227      for (i = 0; i < NumItems; i++) {
0002be  4635              MOV      r5,r6
0002c0  e00a              B        |L1.728|
                  |L1.706|
;;;228        SizeX = _GetItemSizeX(hObj, pObj, i);
0002c2  462a              MOV      r2,r5
0002c4  4649              MOV      r1,r9
0002c6  4638              MOV      r0,r7
0002c8  f7fffffe          BL       _GetItemSizeX
0002cc  4604              MOV      r4,r0
;;;229        if (Result < SizeX) {
0002ce  42a6              CMP      r6,r4
0002d0  da00              BGE      |L1.724|
;;;230          Result = SizeX;
0002d2  4626              MOV      r6,r4
                  |L1.724|
0002d4  f1050501          ADD      r5,r5,#1              ;227
                  |L1.728|
0002d8  4545              CMP      r5,r8                 ;227
0002da  dbf2              BLT      |L1.706|
;;;231        }
;;;232      }
;;;233      return Result;
0002dc  4630              MOV      r0,r6
;;;234    }
0002de  e8bd87f0          POP      {r4-r10,pc}
;;;235    
                          ENDP

                  _GetItemPosY PROC
;;;239    */
;;;240    static int _GetItemPosY(LISTBOX_Handle hObj, const LISTBOX_Obj* pObj, unsigned Index) {
0002e2  e92d41f0          PUSH     {r4-r8,lr}
0002e6  4680              MOV      r8,r0
0002e8  460c              MOV      r4,r1
0002ea  4615              MOV      r5,r2
;;;241      if (Index < LISTBOX__GetNumItems(pObj)) {
0002ec  4620              MOV      r0,r4
0002ee  f7fffffe          BL       LISTBOX__GetNumItems
0002f2  42a8              CMP      r0,r5
0002f4  d914              BLS      |L1.800|
;;;242        if ((int)Index >= pObj->ScrollStateV.v) {
0002f6  6b60              LDR      r0,[r4,#0x34]
0002f8  42a8              CMP      r0,r5
0002fa  dc10              BGT      |L1.798|
;;;243          unsigned i;
;;;244          int PosY = 0;
0002fc  f04f0700          MOV      r7,#0
;;;245          for (i = pObj->ScrollStateV.v; i < Index; i++) {
000300  6b66              LDR      r6,[r4,#0x34]
000302  e007              B        |L1.788|
                  |L1.772|
;;;246            PosY += _GetItemSizeY(hObj, pObj, i);
000304  4632              MOV      r2,r6
000306  4621              MOV      r1,r4
000308  4640              MOV      r0,r8
00030a  f7fffffe          BL       _GetItemSizeY
00030e  4407              ADD      r7,r7,r0
000310  f1060601          ADD      r6,r6,#1              ;245
                  |L1.788|
000314  42ae              CMP      r6,r5                 ;245
000316  d3f5              BCC      |L1.772|
;;;247          }
;;;248          return PosY;
000318  4638              MOV      r0,r7
                  |L1.794|
;;;249        }
;;;250      }
;;;251      return -1;
;;;252    }
00031a  e8bd81f0          POP      {r4-r8,pc}
                  |L1.798|
00031e  bf00              NOP                            ;249
                  |L1.800|
000320  f04f30ff          MOV      r0,#0xffffffff        ;251
000324  e7f9              B        |L1.794|
;;;253    
                          ENDP

                  _IsPartiallyVis PROC
;;;257    */
;;;258    static int _IsPartiallyVis(LISTBOX_Handle hObj, const LISTBOX_Obj* pObj) {
000326  e92d41f0          PUSH     {r4-r8,lr}
00032a  4607              MOV      r7,r0
00032c  460c              MOV      r4,r1
;;;259      int Index;
;;;260      Index = pObj->Sel;
00032e  f9b45072          LDRSH    r5,[r4,#0x72]
;;;261      if (Index < (int)LISTBOX__GetNumItems(pObj)) {
000332  4620              MOV      r0,r4
000334  f7fffffe          BL       LISTBOX__GetNumItems
000338  42a8              CMP      r0,r5
00033a  dd17              BLE      |L1.876|
;;;262        if (Index >= pObj->ScrollStateV.v) {
00033c  6b60              LDR      r0,[r4,#0x34]
00033e  42a8              CMP      r0,r5
000340  dc14              BGT      |L1.876|
;;;263          int y;
;;;264          y  = _GetItemPosY (hObj, pObj, Index);
000342  462a              MOV      r2,r5
000344  4621              MOV      r1,r4
000346  4638              MOV      r0,r7
000348  f7fffffe          BL       _GetItemPosY
00034c  4606              MOV      r6,r0
;;;265          y += _GetItemSizeY(hObj, pObj, Index);
00034e  462a              MOV      r2,r5
000350  4621              MOV      r1,r4
000352  4638              MOV      r0,r7
000354  f7fffffe          BL       _GetItemSizeY
000358  4406              ADD      r6,r6,r0
;;;266          if (y > _GetYSize(hObj)) {
00035a  4638              MOV      r0,r7
00035c  f7fffffe          BL       _GetYSize
000360  42b0              CMP      r0,r6
000362  da02              BGE      |L1.874|
;;;267            return 1;
000364  2001              MOVS     r0,#1
                  |L1.870|
;;;268          }
;;;269        }
;;;270      }
;;;271      return 0;
;;;272    }
000366  e8bd81f0          POP      {r4-r8,pc}
                  |L1.874|
00036a  bf00              NOP                            ;269
                  |L1.876|
00036c  2000              MOVS     r0,#0                 ;271
00036e  e7fa              B        |L1.870|
;;;273    
                          ENDP

                  _GetNumVisItems PROC
;;;280    */
;;;281    static unsigned _GetNumVisItems(const LISTBOX_Obj* pObj, LISTBOX_Handle hObj) {
000370  e92d47f0          PUSH     {r4-r10,lr}
000374  4606              MOV      r6,r0
000376  460f              MOV      r7,r1
;;;282      int NumItems, r = 1;
000378  f04f0801          MOV      r8,#1
;;;283      NumItems = LISTBOX__GetNumItems(pObj);
00037c  4630              MOV      r0,r6
00037e  f7fffffe          BL       LISTBOX__GetNumItems
000382  4605              MOV      r5,r0
;;;284      if (NumItems > 1) {
000384  2d01              CMP      r5,#1
000386  dd21              BLE      |L1.972|
;;;285        int i, ySize, DistY = 0;
000388  f04f0900          MOV      r9,#0
;;;286        ySize = _GetYSize(hObj);
00038c  4638              MOV      r0,r7
00038e  f7fffffe          BL       _GetYSize
000392  4682              MOV      r10,r0
;;;287        for (i = NumItems - 1; i >= 0; i--) {
000394  f1a50401          SUB      r4,r5,#1
000398  e00a              B        |L1.944|
                  |L1.922|
;;;288          DistY += _GetItemSizeY(hObj, pObj, i);
00039a  4622              MOV      r2,r4
00039c  4631              MOV      r1,r6
00039e  4638              MOV      r0,r7
0003a0  f7fffffe          BL       _GetItemSizeY
0003a4  4481              ADD      r9,r9,r0
;;;289          if (DistY > ySize) {
0003a6  45d1              CMP      r9,r10
0003a8  dd00              BLE      |L1.940|
;;;290            break;
0003aa  e003              B        |L1.948|
                  |L1.940|
0003ac  f1a40401          SUB      r4,r4,#1              ;287
                  |L1.944|
0003b0  2c00              CMP      r4,#0                 ;287
0003b2  daf2              BGE      |L1.922|
                  |L1.948|
0003b4  bf00              NOP      
;;;291          }
;;;292        }
;;;293        r = NumItems - i - 1;
0003b6  eba50004          SUB      r0,r5,r4
0003ba  f1a00801          SUB      r8,r0,#1
;;;294        if (r < 1) {
0003be  f1b80f01          CMP      r8,#1
0003c2  da02              BGE      |L1.970|
;;;295          return 1;
0003c4  2001              MOVS     r0,#1
                  |L1.966|
;;;296        }
;;;297      }
;;;298      return r;
;;;299    }
0003c6  e8bd87f0          POP      {r4-r10,pc}
                  |L1.970|
0003ca  bf00              NOP                            ;297
                  |L1.972|
0003cc  4640              MOV      r0,r8                 ;298
0003ce  e7fa              B        |L1.966|
;;;300    
                          ENDP

                  _NotifyOwner PROC
;;;308    */
;;;309    static void _NotifyOwner(WM_HWIN hObj, int Notification) {
0003d0  b5fe              PUSH     {r1-r7,lr}
0003d2  4604              MOV      r4,r0
0003d4  460d              MOV      r5,r1
;;;310      WM_MESSAGE Msg = {0};
0003d6  f04f0000          MOV      r0,#0
0003da  9000              STR      r0,[sp,#0]
0003dc  9001              STR      r0,[sp,#4]
0003de  9002              STR      r0,[sp,#8]
;;;311      WM_HWIN hOwner;
;;;312      LISTBOX_Obj* pObj    = LISTBOX_H2P(hObj);
0003e0  4620              MOV      r0,r4
0003e2  f7fffffe          BL       GUI_ALLOC_h2p
0003e6  4606              MOV      r6,r0
;;;313      hOwner = pObj->hOwner ? pObj->hOwner : WM_GetParent(hObj);
0003e8  f8b60070          LDRH     r0,[r6,#0x70]
0003ec  b110              CBZ      r0,|L1.1012|
0003ee  f9b60070          LDRSH    r0,[r6,#0x70]
0003f2  e002              B        |L1.1018|
                  |L1.1012|
0003f4  4620              MOV      r0,r4
0003f6  f7fffffe          BL       WM_GetParent
                  |L1.1018|
0003fa  4607              MOV      r7,r0
;;;314      Msg.MsgId  = WM_NOTIFY_PARENT;
0003fc  f04f0026          MOV      r0,#0x26
000400  9000              STR      r0,[sp,#0]
;;;315      Msg.Data.v = Notification;
000402  9502              STR      r5,[sp,#8]
;;;316      Msg.hWinSrc= hObj;
000404  f8ad4006          STRH     r4,[sp,#6]
;;;317      WM_SendMessage(hOwner, &Msg);
000408  4669              MOV      r1,sp
00040a  4638              MOV      r0,r7
00040c  f7fffffe          BL       WM_SendMessage
;;;318    }
000410  bdfe              POP      {r1-r7,pc}
;;;319    
                          ENDP

                  _UpdateScrollPos PROC
;;;413    */
;;;414    static int _UpdateScrollPos(LISTBOX_Handle hObj, LISTBOX_Obj* pObj) {
000412  b570              PUSH     {r4-r6,lr}
000414  4605              MOV      r5,r0
000416  460c              MOV      r4,r1
;;;415      int PrevScrollStateV;
;;;416      PrevScrollStateV = pObj->ScrollStateV.v;
000418  6b66              LDR      r6,[r4,#0x34]
;;;417      if (pObj->Sel >= 0) {
00041a  f9b40072          LDRSH    r0,[r4,#0x72]
00041e  2800              CMP      r0,#0
000420  db14              BLT      |L1.1100|
;;;418        /* Check upper limit */
;;;419        if (_IsPartiallyVis(hObj, pObj)) {
000422  4621              MOV      r1,r4
000424  4628              MOV      r0,r5
000426  f7fffffe          BL       _IsPartiallyVis
00042a  b138              CBZ      r0,|L1.1084|
;;;420          pObj->ScrollStateV.v = pObj->Sel - (pObj->ScrollStateV.PageSize - 1);
00042c  f9b41072          LDRSH    r1,[r4,#0x72]
000430  6ba0              LDR      r0,[r4,#0x38]
000432  f1a00001          SUB      r0,r0,#1
000436  eba10100          SUB      r1,r1,r0
00043a  6361              STR      r1,[r4,#0x34]
                  |L1.1084|
;;;421        }
;;;422        /* Check lower limit */
;;;423        if (pObj->Sel < pObj->ScrollStateV.v) {
00043c  f9b41072          LDRSH    r1,[r4,#0x72]
000440  6b60              LDR      r0,[r4,#0x34]
000442  4281              CMP      r1,r0
000444  da02              BGE      |L1.1100|
;;;424          pObj->ScrollStateV.v = pObj->Sel;
000446  f9b41072          LDRSH    r1,[r4,#0x72]
00044a  6361              STR      r1,[r4,#0x34]
                  |L1.1100|
;;;425        }
;;;426      }
;;;427      WM_CheckScrollBounds(&pObj->ScrollStateV);
00044c  f1040030          ADD      r0,r4,#0x30
000450  f7fffffe          BL       WM_CheckScrollBounds
;;;428      WM_CheckScrollBounds(&pObj->ScrollStateH);
000454  f104003c          ADD      r0,r4,#0x3c
000458  f7fffffe          BL       WM_CheckScrollBounds
;;;429      WIDGET__SetScrollState(hObj, &pObj->ScrollStateV, &pObj->ScrollStateH);
00045c  f104023c          ADD      r2,r4,#0x3c
000460  f1040130          ADD      r1,r4,#0x30
000464  4628              MOV      r0,r5
000466  f7fffffe          BL       WIDGET__SetScrollState
;;;430      return pObj->ScrollStateV.v - PrevScrollStateV;
00046a  6b60              LDR      r0,[r4,#0x34]
00046c  1b80              SUBS     r0,r0,r6
;;;431    }
00046e  bd70              POP      {r4-r6,pc}
;;;432    
                          ENDP

                  LISTBOX__InvalidateItemSize PROC
;;;436    */
;;;437    void LISTBOX__InvalidateItemSize(const LISTBOX_Obj* pObj, unsigned Index) {
000470  b570              PUSH     {r4-r6,lr}
000472  4605              MOV      r5,r0
000474  460e              MOV      r6,r1
;;;438      LISTBOX_ITEM* pItem;
;;;439      pItem = (LISTBOX_ITEM*)GUI_ARRAY_GetpItem(&pObj->ItemArray, Index);
000476  4631              MOV      r1,r6
000478  f1050028          ADD      r0,r5,#0x28
00047c  f7fffffe          BL       GUI_ARRAY_GetpItem
000480  4604              MOV      r4,r0
;;;440      if (pItem) {
000482  b11c              CBZ      r4,|L1.1164|
;;;441        pItem->xSize = 0;
000484  f04f0000          MOV      r0,#0
000488  8020              STRH     r0,[r4,#0]
;;;442        pItem->ySize = 0;
00048a  8060              STRH     r0,[r4,#2]
                  |L1.1164|
;;;443      }
;;;444    }
00048c  bd70              POP      {r4-r6,pc}
;;;445    
                          ENDP

                  LISTBOX__InvalidateInsideArea PROC
;;;449    */
;;;450    void LISTBOX__InvalidateInsideArea(LISTBOX_Handle hObj) {
00048e  b51c              PUSH     {r2-r4,lr}
000490  4604              MOV      r4,r0
;;;451      GUI_RECT Rect;
;;;452      WM_GetInsideRectExScrollbar(hObj, &Rect);
000492  4669              MOV      r1,sp
000494  4620              MOV      r0,r4
000496  f7fffffe          BL       WM_GetInsideRectExScrollbar
;;;453      WM_InvalidateRect(hObj, &Rect);
00049a  4669              MOV      r1,sp
00049c  4620              MOV      r0,r4
00049e  f7fffffe          BL       WM_InvalidateRect
;;;454    }
0004a2  bd1c              POP      {r2-r4,pc}
;;;455    
                          ENDP

                  LISTBOX__InvalidateItem PROC
;;;459    */
;;;460    void LISTBOX__InvalidateItem(LISTBOX_Handle hObj, const LISTBOX_Obj* pObj, int Sel) {
0004a4  e92d41fc          PUSH     {r2-r8,lr}
0004a8  4606              MOV      r6,r0
0004aa  460f              MOV      r7,r1
0004ac  4614              MOV      r4,r2
;;;461      if (Sel >= 0) {
0004ae  2c00              CMP      r4,#0
0004b0  db25              BLT      |L1.1278|
;;;462        int ItemPosY;
;;;463        ItemPosY = _GetItemPosY(hObj, pObj, Sel);
0004b2  4622              MOV      r2,r4
0004b4  4639              MOV      r1,r7
0004b6  4630              MOV      r0,r6
0004b8  f7fffffe          BL       _GetItemPosY
0004bc  4605              MOV      r5,r0
;;;464        if (ItemPosY >= 0) {
0004be  2d00              CMP      r5,#0
0004c0  db1c              BLT      |L1.1276|
;;;465          GUI_RECT Rect;
;;;466          int ItemDistY;
;;;467          ItemDistY = _GetItemSizeY(hObj, pObj, Sel);
0004c2  4622              MOV      r2,r4
0004c4  4639              MOV      r1,r7
0004c6  4630              MOV      r0,r6
0004c8  f7fffffe          BL       _GetItemSizeY
0004cc  4680              MOV      r8,r0
;;;468          WM_GetInsideRectExScrollbar(hObj, &Rect);
0004ce  4669              MOV      r1,sp
0004d0  4630              MOV      r0,r6
0004d2  f7fffffe          BL       WM_GetInsideRectExScrollbar
;;;469          Rect.y0 += ItemPosY;
0004d6  f8bd0002          LDRH     r0,[sp,#2]
0004da  4428              ADD      r0,r0,r5
0004dc  b200              SXTH     r0,r0
0004de  f8ad0002          STRH     r0,[sp,#2]
;;;470          Rect.y1  = Rect.y0 + ItemDistY - 1;
0004e2  f8bd0002          LDRH     r0,[sp,#2]
0004e6  4440              ADD      r0,r0,r8
0004e8  f1a00001          SUB      r0,r0,#1
0004ec  b200              SXTH     r0,r0
0004ee  f8ad0006          STRH     r0,[sp,#6]
;;;471          WM_InvalidateRect(hObj, &Rect);
0004f2  4669              MOV      r1,sp
0004f4  4630              MOV      r0,r6
0004f6  f7fffffe          BL       WM_InvalidateRect
;;;472        }
0004fa  bf00              NOP      
                  |L1.1276|
;;;473      }
0004fc  bf00              NOP      
                  |L1.1278|
;;;474    }
0004fe  e8bd81fc          POP      {r2-r8,pc}
;;;475    
                          ENDP

                  LISTBOX__InvalidateItemAndBelow PROC
;;;479    */
;;;480    void LISTBOX__InvalidateItemAndBelow(LISTBOX_Handle hObj, const LISTBOX_Obj* pObj, int Sel) {
000502  e92d41fc          PUSH     {r2-r8,lr}
000506  4606              MOV      r6,r0
000508  460f              MOV      r7,r1
00050a  4614              MOV      r4,r2
;;;481      if (Sel >= 0) {
00050c  2c00              CMP      r4,#0
00050e  db17              BLT      |L1.1344|
;;;482        int ItemPosY;
;;;483        ItemPosY = _GetItemPosY(hObj, pObj, Sel);
000510  4622              MOV      r2,r4
000512  4639              MOV      r1,r7
000514  4630              MOV      r0,r6
000516  f7fffffe          BL       _GetItemPosY
00051a  4605              MOV      r5,r0
;;;484        if (ItemPosY >= 0) {
00051c  2d00              CMP      r5,#0
00051e  db0e              BLT      |L1.1342|
;;;485          GUI_RECT Rect;
;;;486          WM_GetInsideRectExScrollbar(hObj, &Rect);
000520  4669              MOV      r1,sp
000522  4630              MOV      r0,r6
000524  f7fffffe          BL       WM_GetInsideRectExScrollbar
;;;487          Rect.y0 += ItemPosY;
000528  f8bd0002          LDRH     r0,[sp,#2]
00052c  4428              ADD      r0,r0,r5
00052e  b200              SXTH     r0,r0
000530  f8ad0002          STRH     r0,[sp,#2]
;;;488          WM_InvalidateRect(hObj, &Rect);
000534  4669              MOV      r1,sp
000536  4630              MOV      r0,r6
000538  f7fffffe          BL       WM_InvalidateRect
;;;489        }
00053c  bf00              NOP      
                  |L1.1342|
;;;490      }
00053e  bf00              NOP      
                  |L1.1344|
;;;491    }
000540  e8bd81fc          POP      {r2-r8,pc}
;;;492    
                          ENDP

                  LISTBOX__SetScrollbarWidth PROC
;;;496    */
;;;497    void LISTBOX__SetScrollbarWidth(LISTBOX_Handle hObj, const LISTBOX_Obj* pObj) {
000544  e92d41f0          PUSH     {r4-r8,lr}
000548  4606              MOV      r6,r0
00054a  460c              MOV      r4,r1
;;;498      WM_HWIN hBarH, hBarV;
;;;499      int Width;
;;;500      Width = pObj->ScrollbarWidth;
00054c  f8945075          LDRB     r5,[r4,#0x75]
;;;501      if (Width == 0) {
000550  b915              CBNZ     r5,|L1.1368|
;;;502        Width = SCROLLBAR_GetDefaultWidth();
000552  f7fffffe          BL       SCROLLBAR_GetDefaultWidth
000556  4605              MOV      r5,r0
                  |L1.1368|
;;;503      }
;;;504      hBarH = WM_GetDialogItem(hObj, GUI_ID_HSCROLL);
000558  21ff              MOVS     r1,#0xff
00055a  4630              MOV      r0,r6
00055c  f7fffffe          BL       WM_GetDialogItem
000560  4680              MOV      r8,r0
;;;505      hBarV = WM_GetDialogItem(hObj, GUI_ID_VSCROLL);
000562  f04f01fe          MOV      r1,#0xfe
000566  4630              MOV      r0,r6
000568  f7fffffe          BL       WM_GetDialogItem
00056c  4607              MOV      r7,r0
;;;506      SCROLLBAR_SetWidth(hBarH, Width);
00056e  4629              MOV      r1,r5
000570  4640              MOV      r0,r8
000572  f7fffffe          BL       SCROLLBAR_SetWidth
;;;507      SCROLLBAR_SetWidth(hBarV, Width);
000576  4629              MOV      r1,r5
000578  4638              MOV      r0,r7
00057a  f7fffffe          BL       SCROLLBAR_SetWidth
;;;508    }
00057e  e8bd81f0          POP      {r4-r8,pc}
;;;509    
                          ENDP

                  _CalcScrollParas PROC
;;;513    */
;;;514    static int _CalcScrollParas(LISTBOX_Handle hObj) {
000582  b57c              PUSH     {r2-r6,lr}
000584  4605              MOV      r5,r0
;;;515      GUI_RECT Rect;
;;;516      LISTBOX_Obj* pObj = LISTBOX_H2P(hObj);
000586  4628              MOV      r0,r5
000588  f7fffffe          BL       GUI_ALLOC_h2p
00058c  4604              MOV      r4,r0
;;;517      /* Calc vertical scroll parameters */
;;;518      pObj->ScrollStateV.NumItems = LISTBOX__GetNumItems(pObj);
00058e  4620              MOV      r0,r4
000590  f7fffffe          BL       LISTBOX__GetNumItems
000594  6320              STR      r0,[r4,#0x30]
;;;519      pObj->ScrollStateV.PageSize = _GetNumVisItems(pObj, hObj);
000596  4629              MOV      r1,r5
000598  4620              MOV      r0,r4
00059a  f7fffffe          BL       _GetNumVisItems
00059e  63a0              STR      r0,[r4,#0x38]
;;;520      /* Calc horizontal scroll parameters */
;;;521      WM_GetInsideRectExScrollbar(hObj, &Rect);
0005a0  4669              MOV      r1,sp
0005a2  4628              MOV      r0,r5
0005a4  f7fffffe          BL       WM_GetInsideRectExScrollbar
;;;522      pObj->ScrollStateH.NumItems = _GetContentsSizeX(hObj);
0005a8  4628              MOV      r0,r5
0005aa  f7fffffe          BL       _GetContentsSizeX
0005ae  63e0              STR      r0,[r4,#0x3c]
;;;523      pObj->ScrollStateH.PageSize = Rect.x1 - Rect.x0 + 1;
0005b0  f9bd0004          LDRSH    r0,[sp,#4]
0005b4  f9bd1000          LDRSH    r1,[sp,#0]
0005b8  eba00001          SUB      r0,r0,r1
0005bc  f1000001          ADD      r0,r0,#1
0005c0  6460              STR      r0,[r4,#0x44]
;;;524      return _UpdateScrollPos(hObj, pObj);
0005c2  4621              MOV      r1,r4
0005c4  4628              MOV      r0,r5
0005c6  f7fffffe          BL       _UpdateScrollPos
;;;525    }
0005ca  bd7c              POP      {r2-r6,pc}
;;;526    
                          ENDP

                  _ManageAutoScroll PROC
;;;530    */
;;;531    static void _ManageAutoScroll(LISTBOX_Handle hObj) {
0005cc  e92d41fc          PUSH     {r2-r8,lr}
0005d0  4605              MOV      r5,r0
;;;532      char IsRequired;
;;;533      LISTBOX_Obj* pObj = LISTBOX_H2P(hObj);
0005d2  4628              MOV      r0,r5
0005d4  f7fffffe          BL       GUI_ALLOC_h2p
0005d8  4604              MOV      r4,r0
;;;534      if (pObj->Flags & LISTBOX_SF_AUTOSCROLLBAR_V) {
0005da  f8940074          LDRB     r0,[r4,#0x74]
0005de  f0100f02          TST      r0,#2
0005e2  d013              BEQ      |L1.1548|
;;;535        IsRequired = (_GetNumVisItems(pObj, hObj) < LISTBOX__GetNumItems(pObj));
0005e4  4629              MOV      r1,r5
0005e6  4620              MOV      r0,r4
0005e8  f7fffffe          BL       _GetNumVisItems
0005ec  4607              MOV      r7,r0
0005ee  4620              MOV      r0,r4
0005f0  f7fffffe          BL       LISTBOX__GetNumItems
0005f4  4287              CMP      r7,r0
0005f6  d202              BCS      |L1.1534|
0005f8  f04f0001          MOV      r0,#1
0005fc  e001              B        |L1.1538|
                  |L1.1534|
0005fe  f04f0000          MOV      r0,#0
                  |L1.1538|
000602  4606              MOV      r6,r0
;;;536        WM_SetScrollbarV(hObj, IsRequired);
000604  4631              MOV      r1,r6
000606  4628              MOV      r0,r5
000608  f7fffffe          BL       WM_SetScrollbarV
                  |L1.1548|
;;;537      }
;;;538      if (pObj->Flags & LISTBOX_SF_AUTOSCROLLBAR_H) {
00060c  f8940074          LDRB     r0,[r4,#0x74]
000610  f0100f01          TST      r0,#1
000614  d01c              BEQ      |L1.1616|
;;;539        GUI_RECT Rect;
;;;540        int xSize, xSizeContents;
;;;541        xSizeContents = _GetContentsSizeX(hObj);
000616  4628              MOV      r0,r5
000618  f7fffffe          BL       _GetContentsSizeX
00061c  4680              MOV      r8,r0
;;;542        WM_GetInsideRectExScrollbar(hObj, &Rect);
00061e  4669              MOV      r1,sp
000620  4628              MOV      r0,r5
000622  f7fffffe          BL       WM_GetInsideRectExScrollbar
;;;543        xSize = Rect.x1 - Rect.x0 + 1;
000626  f9bd0004          LDRSH    r0,[sp,#4]
00062a  f9bd1000          LDRSH    r1,[sp,#0]
00062e  eba00001          SUB      r0,r0,r1
000632  f1000701          ADD      r7,r0,#1
;;;544        IsRequired = (xSizeContents > xSize);
000636  45b8              CMP      r8,r7
000638  dd02              BLE      |L1.1600|
00063a  f04f0001          MOV      r0,#1
00063e  e001              B        |L1.1604|
                  |L1.1600|
000640  f04f0000          MOV      r0,#0
                  |L1.1604|
000644  4606              MOV      r6,r0
;;;545        WM_SetScrollbarH(hObj, IsRequired);
000646  4631              MOV      r1,r6
000648  4628              MOV      r0,r5
00064a  f7fffffe          BL       WM_SetScrollbarH
;;;546      }
00064e  bf00              NOP      
                  |L1.1616|
;;;547      if (pObj->ScrollbarWidth) {
000650  f8940075          LDRB     r0,[r4,#0x75]
000654  b118              CBZ      r0,|L1.1630|
;;;548        LISTBOX__SetScrollbarWidth(hObj, pObj);
000656  4621              MOV      r1,r4
000658  4628              MOV      r0,r5
00065a  f7fffffe          BL       LISTBOX__SetScrollbarWidth
                  |L1.1630|
;;;549      }
;;;550    }
00065e  e8bd81fc          POP      {r2-r8,pc}
;;;551    
                          ENDP

                  LISTBOX_UpdateScrollers PROC
;;;555    */
;;;556    int LISTBOX_UpdateScrollers(LISTBOX_Handle hObj) {
000662  b510              PUSH     {r4,lr}
000664  4604              MOV      r4,r0
;;;557      _ManageAutoScroll(hObj);
000666  4620              MOV      r0,r4
000668  f7fffffe          BL       _ManageAutoScroll
;;;558      return _CalcScrollParas(hObj);
00066c  4620              MOV      r0,r4
00066e  f7fffffe          BL       _CalcScrollParas
;;;559    }
000672  bd10              POP      {r4,pc}
;;;560    
                          ENDP

                  _Tolower PROC
;;;564    */
;;;565    static int _Tolower(int Key) {
000674  2841              CMP      r0,#0x41
;;;566      if ((Key >= 0x41) && (Key <= 0x5a)) {
000676  db03              BLT      |L1.1664|
000678  285a              CMP      r0,#0x5a
00067a  dc01              BGT      |L1.1664|
;;;567        Key += 0x20;
00067c  f1000020          ADD      r0,r0,#0x20
                  |L1.1664|
;;;568      }
;;;569      return Key;
;;;570    }
000680  4770              BX       lr
;;;571    
                          ENDP

                  _IsAlphaNum PROC
;;;575    */
;;;576    static int _IsAlphaNum(int Key) {
000682  b510              PUSH     {r4,lr}
000684  4604              MOV      r4,r0
;;;577      Key = _Tolower(Key);
000686  4620              MOV      r0,r4
000688  f7fffffe          BL       _Tolower
00068c  4604              MOV      r4,r0
;;;578      if (Key >= 'a' && Key <= 'z') {
00068e  2c61              CMP      r4,#0x61
000690  db03              BLT      |L1.1690|
000692  2c7a              CMP      r4,#0x7a
000694  dc01              BGT      |L1.1690|
;;;579        return 1;
000696  2001              MOVS     r0,#1
                  |L1.1688|
;;;580      }
;;;581      if (Key >= '0' && Key <= '9') {
;;;582        return 1;
;;;583      }
;;;584      return 0;
;;;585    }
000698  bd10              POP      {r4,pc}
                  |L1.1690|
00069a  2c30              CMP      r4,#0x30              ;581
00069c  db03              BLT      |L1.1702|
00069e  2c39              CMP      r4,#0x39              ;581
0006a0  dc01              BGT      |L1.1702|
0006a2  2001              MOVS     r0,#1                 ;582
0006a4  e7f8              B        |L1.1688|
                  |L1.1702|
0006a6  2000              MOVS     r0,#0                 ;584
0006a8  e7f6              B        |L1.1688|
;;;586    
                          ENDP

                  LISTBOX_SetSel PROC
;;;1039   */
;;;1040   void LISTBOX_SetSel (LISTBOX_Handle hObj, int NewSel) {
0006aa  e92d47f0          PUSH     {r4-r10,lr}
0006ae  4607              MOV      r7,r0
0006b0  460c              MOV      r4,r1
;;;1041     if (hObj) {
0006b2  2f00              CMP      r7,#0
0006b4  d04e              BEQ      |L1.1876|
;;;1042       LISTBOX_Obj* pObj;
;;;1043       int MaxSel;
;;;1044       WM_LOCK();
;;;1045       pObj = LISTBOX_H2P(hObj);
0006b6  4638              MOV      r0,r7
0006b8  f7fffffe          BL       GUI_ALLOC_h2p
0006bc  4605              MOV      r5,r0
;;;1046       MaxSel = LISTBOX__GetNumItems(pObj);
0006be  4628              MOV      r0,r5
0006c0  f7fffffe          BL       LISTBOX__GetNumItems
0006c4  4606              MOV      r6,r0
;;;1047       MaxSel = MaxSel ? MaxSel - 1 : 0;
0006c6  b116              CBZ      r6,|L1.1742|
0006c8  f1a60001          SUB      r0,r6,#1
0006cc  e001              B        |L1.1746|
                  |L1.1742|
0006ce  f04f0000          MOV      r0,#0
                  |L1.1746|
0006d2  4606              MOV      r6,r0
;;;1048       if (NewSel > MaxSel) {
0006d4  42b4              CMP      r4,r6
0006d6  dd00              BLE      |L1.1754|
;;;1049         NewSel = MaxSel;
0006d8  4634              MOV      r4,r6
                  |L1.1754|
;;;1050       }
;;;1051       if (NewSel < 0) {
0006da  2c00              CMP      r4,#0
0006dc  da02              BGE      |L1.1764|
;;;1052         NewSel = -1;
0006de  f04f34ff          MOV      r4,#0xffffffff
0006e2  e015              B        |L1.1808|
                  |L1.1764|
;;;1053       } else {
;;;1054         WM_HMEM hItem = GUI_ARRAY_GethItem(&pObj->ItemArray, NewSel);
0006e4  4621              MOV      r1,r4
0006e6  f1050028          ADD      r0,r5,#0x28
0006ea  f7fffffe          BL       GUI_ARRAY_GethItem
0006ee  4680              MOV      r8,r0
;;;1055         if (hItem) {
0006f0  f1b80f00          CMP      r8,#0
0006f4  d00b              BEQ      |L1.1806|
;;;1056           LISTBOX_ITEM* pItem = (LISTBOX_ITEM*)GUI_ALLOC_h2p(hItem);
0006f6  4640              MOV      r0,r8
0006f8  f7fffffe          BL       GUI_ALLOC_h2p
0006fc  4681              MOV      r9,r0
;;;1057           if (pItem->Status & LISTBOX_ITEM_DISABLED) {
0006fe  f8990004          LDRB     r0,[r9,#4]
000702  f0100f02          TST      r0,#2
000706  d001              BEQ      |L1.1804|
;;;1058             NewSel = -1;
000708  f04f34ff          MOV      r4,#0xffffffff
                  |L1.1804|
;;;1059           }
;;;1060         }
00070c  bf00              NOP      
                  |L1.1806|
;;;1061       }
00070e  bf00              NOP      
                  |L1.1808|
;;;1062       if (NewSel != pObj->Sel) {
000710  f9b50072          LDRSH    r0,[r5,#0x72]
000714  42a0              CMP      r0,r4
000716  d01c              BEQ      |L1.1874|
;;;1063         int OldSel;
;;;1064         OldSel    = pObj->Sel;
000718  f9b58072          LDRSH    r8,[r5,#0x72]
;;;1065         pObj->Sel = NewSel;
00071c  b220              SXTH     r0,r4
00071e  f8a50072          STRH     r0,[r5,#0x72]
;;;1066         if (_UpdateScrollPos(hObj, pObj)) {
000722  4629              MOV      r1,r5
000724  4638              MOV      r0,r7
000726  f7fffffe          BL       _UpdateScrollPos
00072a  b118              CBZ      r0,|L1.1844|
;;;1067           LISTBOX__InvalidateInsideArea(hObj);
00072c  4638              MOV      r0,r7
00072e  f7fffffe          BL       LISTBOX__InvalidateInsideArea
000732  e009              B        |L1.1864|
                  |L1.1844|
;;;1068         } else {
;;;1069           LISTBOX__InvalidateItem(hObj, pObj, OldSel);
000734  4642              MOV      r2,r8
000736  4629              MOV      r1,r5
000738  4638              MOV      r0,r7
00073a  f7fffffe          BL       LISTBOX__InvalidateItem
;;;1070           LISTBOX__InvalidateItem(hObj, pObj, NewSel);
00073e  4622              MOV      r2,r4
000740  4629              MOV      r1,r5
000742  4638              MOV      r0,r7
000744  f7fffffe          BL       LISTBOX__InvalidateItem
                  |L1.1864|
;;;1071         }
;;;1072         _NotifyOwner(hObj, WM_NOTIFICATION_SEL_CHANGED);
000748  2104              MOVS     r1,#4
00074a  4638              MOV      r0,r7
00074c  f7fffffe          BL       _NotifyOwner
;;;1073       }
000750  bf00              NOP      
                  |L1.1874|
;;;1074       WM_UNLOCK();
;;;1075     }
000752  bf00              NOP      
                  |L1.1876|
;;;1076   }
000754  e8bd87f0          POP      {r4-r10,pc}
;;;1077   
                          ENDP

                  _SelectByKey PROC
;;;590    */
;;;591    static void _SelectByKey(LISTBOX_Handle hObj, int Key) {
000758  e92d41f0          PUSH     {r4-r8,lr}
00075c  4606              MOV      r6,r0
00075e  460c              MOV      r4,r1
;;;592      unsigned i;
;;;593      LISTBOX_Obj* pObj;
;;;594      pObj = LISTBOX_H2P(hObj);
000760  4630              MOV      r0,r6
000762  f7fffffe          BL       GUI_ALLOC_h2p
000766  4680              MOV      r8,r0
;;;595      Key = _Tolower(Key);
000768  4620              MOV      r0,r4
00076a  f7fffffe          BL       _Tolower
00076e  4604              MOV      r4,r0
;;;596      for (i = 0; i < LISTBOX__GetNumItems(pObj); i++) {
000770  f04f0500          MOV      r5,#0
000774  e010              B        |L1.1944|
                  |L1.1910|
;;;597        const char* s = LISTBOX__GetpString(pObj, i);
000776  4629              MOV      r1,r5
000778  4640              MOV      r0,r8
00077a  f7fffffe          BL       LISTBOX__GetpString
00077e  4607              MOV      r7,r0
;;;598        if (_Tolower(*s) == Key) {
000780  7838              LDRB     r0,[r7,#0]
000782  f7fffffe          BL       _Tolower
000786  42a0              CMP      r0,r4
000788  d104              BNE      |L1.1940|
;;;599          LISTBOX_SetSel(hObj, i);
00078a  4629              MOV      r1,r5
00078c  4630              MOV      r0,r6
00078e  f7fffffe          BL       LISTBOX_SetSel
;;;600          break;
000792  e006              B        |L1.1954|
                  |L1.1940|
000794  f1050501          ADD      r5,r5,#1              ;596
                  |L1.1944|
000798  4640              MOV      r0,r8                 ;596
00079a  f7fffffe          BL       LISTBOX__GetNumItems
00079e  42a8              CMP      r0,r5                 ;596
0007a0  d8e9              BHI      |L1.1910|
                  |L1.1954|
0007a2  bf00              NOP      
;;;601        }
;;;602      }
;;;603    }
0007a4  e8bd81f0          POP      {r4-r8,pc}
;;;604    
                          ENDP

                  _FreeAttached PROC
;;;608    */
;;;609    static void _FreeAttached(LISTBOX_Obj* pObj) {
0007a8  b510              PUSH     {r4,lr}
0007aa  4604              MOV      r4,r0
;;;610      GUI_ARRAY_Delete(&pObj->ItemArray);
0007ac  f1040028          ADD      r0,r4,#0x28
0007b0  f7fffffe          BL       GUI_ARRAY_Delete
;;;611    }
0007b4  bd10              POP      {r4,pc}
;;;612    
                          ENDP

                  _OnPaint PROC
;;;616    */
;;;617    static void _OnPaint(LISTBOX_Handle hObj, LISTBOX_Obj* pObj, WM_MESSAGE* pMsg) {
0007b6  e92d43f0          PUSH     {r4-r9,lr}
0007ba  b08b              SUB      sp,sp,#0x2c
0007bc  4607              MOV      r7,r0
0007be  460c              MOV      r4,r1
0007c0  4690              MOV      r8,r2
;;;618      WIDGET_ITEM_DRAW_INFO ItemInfo;
;;;619      GUI_RECT RectInside, RectItem, ClipRect;
;;;620      int ItemDistY, NumItems, i;
;;;621      NumItems = LISTBOX__GetNumItems(pObj);
0007c2  4620              MOV      r0,r4
0007c4  f7fffffe          BL       LISTBOX__GetNumItems
0007c8  4681              MOV      r9,r0
;;;622      GUI_SetFont(pObj->Props.pFont);
0007ca  6ca0              LDR      r0,[r4,#0x48]
0007cc  f7fffffe          BL       GUI_SetFont
;;;623      /* Calculate clipping rectangle */
;;;624      ClipRect = *(const GUI_RECT*)pMsg->Data.p;
0007d0  f8d80008          LDR      r0,[r8,#8]
0007d4  6801              LDR      r1,[r0,#0]
0007d6  9100              STR      r1,[sp,#0]
0007d8  6840              LDR      r0,[r0,#4]
0007da  9001              STR      r0,[sp,#4]
;;;625      GUI_MoveRect(&ClipRect, -pObj->Widget.Win.Rect.x0, -pObj->Widget.Win.Rect.y0);
0007dc  f9b40002          LDRSH    r0,[r4,#2]
0007e0  4242              RSBS     r2,r0,#0
0007e2  f9b40000          LDRSH    r0,[r4,#0]
0007e6  4241              RSBS     r1,r0,#0
0007e8  4668              MOV      r0,sp
0007ea  f7fffffe          BL       GUI_MoveRect
;;;626      WM_GetInsideRectExScrollbar(hObj, &RectInside);
0007ee  a904              ADD      r1,sp,#0x10
0007f0  4638              MOV      r0,r7
0007f2  f7fffffe          BL       WM_GetInsideRectExScrollbar
;;;627      GUI__IntersectRect(&ClipRect, &RectInside);
0007f6  a904              ADD      r1,sp,#0x10
0007f8  4668              MOV      r0,sp
0007fa  f7fffffe          BL       GUI__IntersectRect
;;;628      RectItem.x0 = ClipRect.x0;
0007fe  f8bd0000          LDRH     r0,[sp,#0]
000802  f8ad0008          STRH     r0,[sp,#8]
;;;629      RectItem.x1 = ClipRect.x1;
000806  f8bd0004          LDRH     r0,[sp,#4]
00080a  f8ad000c          STRH     r0,[sp,#0xc]
;;;630      /* Fill item info structure */
;;;631      ItemInfo.Cmd  = WIDGET_ITEM_DRAW;
00080e  f04f0000          MOV      r0,#0
000812  9007              STR      r0,[sp,#0x1c]
;;;632      ItemInfo.hWin = hObj;
000814  f8ad7018          STRH     r7,[sp,#0x18]
;;;633      ItemInfo.x0   = RectInside.x0 - pObj->ScrollStateH.v;
000818  f9bd1010          LDRSH    r1,[sp,#0x10]
00081c  6c20              LDR      r0,[r4,#0x40]
00081e  eba10000          SUB      r0,r1,r0
000822  9009              STR      r0,[sp,#0x24]
;;;634      ItemInfo.y0   = RectInside.y0;
000824  f9bd0012          LDRSH    r0,[sp,#0x12]
000828  900a              STR      r0,[sp,#0x28]
;;;635      /* Do the drawing */
;;;636      for (i = pObj->ScrollStateV.v; i < NumItems; i++) {
00082a  6b66              LDR      r6,[r4,#0x34]
00082c  e031              B        |L1.2194|
                  |L1.2094|
;;;637        RectItem.y0 = ItemInfo.y0;
00082e  980a              LDR      r0,[sp,#0x28]
000830  b200              SXTH     r0,r0
000832  f8ad000a          STRH     r0,[sp,#0xa]
;;;638        /* Break when all other rows are outside the drawing area */
;;;639        if (RectItem.y0 > ClipRect.y1) {
000836  f9bd000a          LDRSH    r0,[sp,#0xa]
00083a  f9bd1006          LDRSH    r1,[sp,#6]
00083e  4288              CMP      r0,r1
000840  dd00              BLE      |L1.2116|
;;;640          break;
000842  e028              B        |L1.2198|
                  |L1.2116|
;;;641        }
;;;642        ItemDistY = _GetItemSizeY(hObj, pObj, i);
000844  4632              MOV      r2,r6
000846  4621              MOV      r1,r4
000848  4638              MOV      r0,r7
00084a  f7fffffe          BL       _GetItemSizeY
00084e  4605              MOV      r5,r0
;;;643        RectItem.y1 = RectItem.y0 + ItemDistY - 1;
000850  f8bd100a          LDRH     r1,[sp,#0xa]
000854  eb010005          ADD      r0,r1,r5
000858  f1a00001          SUB      r0,r0,#1
00085c  b200              SXTH     r0,r0
00085e  f8ad000e          STRH     r0,[sp,#0xe]
;;;644        /* Make sure that we draw only when row is in drawing area */
;;;645        if (RectItem.y1 >= ClipRect.y0) {
000862  f9bd000e          LDRSH    r0,[sp,#0xe]
000866  f9bd1002          LDRSH    r1,[sp,#2]
00086a  4288              CMP      r0,r1
00086c  db0c              BLT      |L1.2184|
;;;646          /* Set user clip rect */
;;;647          WM_SetUserClipArea(&RectItem);
00086e  a802              ADD      r0,sp,#8
000870  f7fffffe          BL       WM_SetUserClipRect
;;;648          /* Fill item info structure */
;;;649          ItemInfo.ItemIndex = i;
000874  9608              STR      r6,[sp,#0x20]
;;;650          /* Draw item */
;;;651          if (pObj->pfDrawItem) {
000876  6ae0              LDR      r0,[r4,#0x2c]
000878  b118              CBZ      r0,|L1.2178|
;;;652            pObj->pfDrawItem(&ItemInfo);
00087a  a806              ADD      r0,sp,#0x18
00087c  6ae1              LDR      r1,[r4,#0x2c]
00087e  4788              BLX      r1
000880  e002              B        |L1.2184|
                  |L1.2178|
;;;653          } else {
;;;654            LISTBOX_OwnerDraw(&ItemInfo);
000882  a806              ADD      r0,sp,#0x18
000884  f7fffffe          BL       LISTBOX_OwnerDraw
                  |L1.2184|
;;;655          }
;;;656        }
;;;657        ItemInfo.y0 += ItemDistY;
000888  980a              LDR      r0,[sp,#0x28]
00088a  4428              ADD      r0,r0,r5
00088c  900a              STR      r0,[sp,#0x28]
00088e  f1060601          ADD      r6,r6,#1              ;636
                  |L1.2194|
000892  454e              CMP      r6,r9                 ;636
000894  dbcb              BLT      |L1.2094|
                  |L1.2198|
000896  bf00              NOP                            ;640
;;;658      }
;;;659      WM_SetUserClipArea(NULL);
000898  2000              MOVS     r0,#0
00089a  f7fffffe          BL       WM_SetUserClipRect
;;;660      /* Calculate & clear 'data free' area */
;;;661      RectItem.y0 = ItemInfo.y0;
00089e  980a              LDR      r0,[sp,#0x28]
0008a0  b200              SXTH     r0,r0
0008a2  f8ad000a          STRH     r0,[sp,#0xa]
;;;662      RectItem.y1 = RectInside.y1;
0008a6  f8bd0016          LDRH     r0,[sp,#0x16]
0008aa  f8ad000e          STRH     r0,[sp,#0xe]
;;;663      LCD_SetBkColor(pObj->Props.aBackColor[0]);
0008ae  6d20              LDR      r0,[r4,#0x50]
0008b0  f7fffffe          BL       LCD_SetBkColor
;;;664      GUI_ClearRectEx(&RectItem);
0008b4  a802              ADD      r0,sp,#8
0008b6  f7fffffe          BL       GUI_ClearRectEx
;;;665      /* Draw the 3D effect (if configured) */
;;;666      WIDGET__EFFECT_DrawDown(&pObj->Widget);
0008ba  4620              MOV      r0,r4
0008bc  f7fffffe          BL       WIDGET__EFFECT_DrawDown
;;;667    }
0008c0  b00b              ADD      sp,sp,#0x2c
0008c2  e8bd83f0          POP      {r4-r9,pc}
;;;668    
                          ENDP

                  _ToggleMultiSel PROC
;;;672    */
;;;673    static void _ToggleMultiSel(LISTBOX_Handle hObj, LISTBOX_Obj* pObj, int Sel) {
0008c6  e92d41f0          PUSH     {r4-r8,lr}
0008ca  4680              MOV      r8,r0
0008cc  460c              MOV      r4,r1
0008ce  4616              MOV      r6,r2
;;;674      if (pObj->Flags & LISTBOX_SF_MULTISEL) {
0008d0  f8940074          LDRB     r0,[r4,#0x74]
0008d4  f0100f04          TST      r0,#4
0008d8  d01e              BEQ      |L1.2328|
;;;675        WM_HMEM hItem = GUI_ARRAY_GethItem(&pObj->ItemArray, Sel);
0008da  4631              MOV      r1,r6
0008dc  f1040028          ADD      r0,r4,#0x28
0008e0  f7fffffe          BL       GUI_ARRAY_GethItem
0008e4  4607              MOV      r7,r0
;;;676        if (hItem) {
0008e6  b1b7              CBZ      r7,|L1.2326|
;;;677          LISTBOX_ITEM * pItem = (LISTBOX_ITEM *)GUI_ALLOC_h2p(hItem);
0008e8  4638              MOV      r0,r7
0008ea  f7fffffe          BL       GUI_ALLOC_h2p
0008ee  4605              MOV      r5,r0
;;;678          if (!(pItem->Status & LISTBOX_ITEM_DISABLED)) {
0008f0  7928              LDRB     r0,[r5,#4]
0008f2  f0100f02          TST      r0,#2
0008f6  d10d              BNE      |L1.2324|
;;;679            pItem->Status ^= LISTBOX_ITEM_SELECTED;
0008f8  7928              LDRB     r0,[r5,#4]
0008fa  f0800001          EOR      r0,r0,#1
0008fe  7128              STRB     r0,[r5,#4]
;;;680            _NotifyOwner(hObj, WM_NOTIFICATION_SEL_CHANGED);
000900  f04f0104          MOV      r1,#4
000904  4640              MOV      r0,r8
000906  f7fffffe          BL       _NotifyOwner
;;;681            LISTBOX__InvalidateItem(hObj, pObj, Sel);
00090a  4632              MOV      r2,r6
00090c  4621              MOV      r1,r4
00090e  4640              MOV      r0,r8
000910  f7fffffe          BL       LISTBOX__InvalidateItem
                  |L1.2324|
;;;682          }
;;;683        }
000914  bf00              NOP      
                  |L1.2326|
;;;684      }
000916  bf00              NOP      
                  |L1.2328|
;;;685    }
000918  e8bd81f0          POP      {r4-r8,pc}
;;;686    
                          ENDP

                  _GetItemFromPos PROC
;;;690    */
;;;691    static int _GetItemFromPos(LISTBOX_Handle hObj, LISTBOX_Obj* pObj, int x, int y) {
00091c  e92d5ffc          PUSH     {r2-r12,lr}
000920  4681              MOV      r9,r0
000922  460e              MOV      r6,r1
000924  4617              MOV      r7,r2
000926  461c              MOV      r4,r3
;;;692      int Sel = -1;
000928  f04f3aff          MOV      r10,#0xffffffff
;;;693      GUI_RECT Rect;
;;;694      WM_GetInsideRectExScrollbar(hObj, &Rect);
00092c  4669              MOV      r1,sp
00092e  4648              MOV      r0,r9
000930  f7fffffe          BL       WM_GetInsideRectExScrollbar
;;;695      if ((x >= Rect.x0) && (y >= Rect.y0)) {
000934  f9bd0000          LDRSH    r0,[sp,#0]
000938  42b8              CMP      r0,r7
00093a  dc21              BGT      |L1.2432|
00093c  f9bd0002          LDRSH    r0,[sp,#2]
000940  42a0              CMP      r0,r4
000942  dc1d              BGT      |L1.2432|
;;;696        if ((x <= Rect.x1) && (y <= Rect.y1)) {
000944  f9bd0004          LDRSH    r0,[sp,#4]
000948  42b8              CMP      r0,r7
00094a  db19              BLT      |L1.2432|
00094c  f9bd0006          LDRSH    r0,[sp,#6]
000950  42a0              CMP      r0,r4
000952  db15              BLT      |L1.2432|
;;;697          int NumItems = LISTBOX__GetNumItems(pObj);
000954  4630              MOV      r0,r6
000956  f7fffffe          BL       LISTBOX__GetNumItems
00095a  4683              MOV      r11,r0
;;;698          int i, y0 = Rect.y0;
00095c  f9bd8002          LDRSH    r8,[sp,#2]
;;;699          for (i = pObj->ScrollStateV.v; i < NumItems; i++) {
000960  6b75              LDR      r5,[r6,#0x34]
000962  e00a              B        |L1.2426|
                  |L1.2404|
;;;700            if (y >= y0) {
000964  4544              CMP      r4,r8
000966  db00              BLT      |L1.2410|
;;;701              Sel = i;
000968  46aa              MOV      r10,r5
                  |L1.2410|
;;;702            }
;;;703            y0 += _GetItemSizeY(hObj, pObj, i);
00096a  462a              MOV      r2,r5
00096c  4631              MOV      r1,r6
00096e  4648              MOV      r0,r9
000970  f7fffffe          BL       _GetItemSizeY
000974  4480              ADD      r8,r8,r0
000976  f1050501          ADD      r5,r5,#1              ;699
                  |L1.2426|
00097a  455d              CMP      r5,r11                ;699
00097c  dbf2              BLT      |L1.2404|
;;;704          }
;;;705        }
00097e  bf00              NOP      
                  |L1.2432|
;;;706      }
;;;707      return Sel;
000980  4650              MOV      r0,r10
;;;708    }
000982  e8bd9ffc          POP      {r2-r12,pc}
;;;709    
                          ENDP

                  _OnTouch PROC
;;;713    */
;;;714    static void _OnTouch(LISTBOX_Handle hObj, WM_MESSAGE* pMsg) {
000986  b570              PUSH     {r4-r6,lr}
000988  4605              MOV      r5,r0
00098a  460c              MOV      r4,r1
;;;715      const GUI_PID_STATE* pState = (const GUI_PID_STATE*)pMsg->Data.p;
00098c  68a6              LDR      r6,[r4,#8]
;;;716      if (pMsg->Data.p) {  /* Something happened in our area (pressed or released) */
00098e  68a0              LDR      r0,[r4,#8]
000990  b130              CBZ      r0,|L1.2464|
;;;717        if (pState->Pressed == 0) {
000992  7a30              LDRB     r0,[r6,#8]
000994  b940              CBNZ     r0,|L1.2472|
;;;718          _NotifyOwner(hObj, WM_NOTIFICATION_RELEASED);
000996  2102              MOVS     r1,#2
000998  4628              MOV      r0,r5
00099a  f7fffffe          BL       _NotifyOwner
00099e  e003              B        |L1.2472|
                  |L1.2464|
;;;719        }
;;;720      } else {     /* Mouse moved out */
;;;721        _NotifyOwner(hObj, WM_NOTIFICATION_MOVED_OUT);
0009a0  2103              MOVS     r1,#3
0009a2  4628              MOV      r0,r5
0009a4  f7fffffe          BL       _NotifyOwner
                  |L1.2472|
;;;722      }
;;;723    }
0009a8  bd70              POP      {r4-r6,pc}
;;;724    
                          ENDP

                  LISTBOX_GetSel PROC
;;;1081   */
;;;1082   int  LISTBOX_GetSel (LISTBOX_Handle hObj) {
0009aa  b570              PUSH     {r4-r6,lr}
0009ac  4605              MOV      r5,r0
;;;1083     int r = -1;
0009ae  f04f36ff          MOV      r6,#0xffffffff
;;;1084     LISTBOX_Obj* pObj;
;;;1085     if (hObj) {
0009b2  b12d              CBZ      r5,|L1.2496|
;;;1086       WM_LOCK();
;;;1087       pObj = LISTBOX_H2P(hObj);
0009b4  4628              MOV      r0,r5
0009b6  f7fffffe          BL       GUI_ALLOC_h2p
0009ba  4604              MOV      r4,r0
;;;1088       ASSERT_IS_VALID_PTR(pObj);
;;;1089       r = pObj->Sel;
0009bc  f9b46072          LDRSH    r6,[r4,#0x72]
                  |L1.2496|
;;;1090       WM_UNLOCK();
;;;1091     }
;;;1092     return r;
0009c0  4630              MOV      r0,r6
;;;1093   }
0009c2  bd70              POP      {r4-r6,pc}
;;;1094   
                          ENDP

                  _MoveSel PROC
;;;838    */
;;;839    static void _MoveSel(LISTBOX_Handle hObj, int Dir) {
0009c4  e92d5ff0          PUSH     {r4-r12,lr}
0009c8  4681              MOV      r9,r0
0009ca  460f              MOV      r7,r1
;;;840      int Index, NewSel = -1, NumItems;
0009cc  f04f35ff          MOV      r5,#0xffffffff
;;;841      LISTBOX_Obj * pObj;
;;;842      pObj = LISTBOX_H2P(hObj);
0009d0  4648              MOV      r0,r9
0009d2  f7fffffe          BL       GUI_ALLOC_h2p
0009d6  4680              MOV      r8,r0
;;;843      Index = LISTBOX_GetSel(hObj);
0009d8  4648              MOV      r0,r9
0009da  f7fffffe          BL       LISTBOX_GetSel
0009de  4604              MOV      r4,r0
;;;844      NumItems = LISTBOX__GetNumItems(pObj);
0009e0  4640              MOV      r0,r8
0009e2  f7fffffe          BL       LISTBOX__GetNumItems
0009e6  4682              MOV      r10,r0
;;;845      do {
0009e8  bf00              NOP      
                  |L1.2538|
;;;846        WM_HMEM hItem;
;;;847        Index += Dir;
0009ea  443c              ADD      r4,r4,r7
;;;848        if ((Index < 0) || (Index >= NumItems)) {
0009ec  2c00              CMP      r4,#0
0009ee  db01              BLT      |L1.2548|
0009f0  4554              CMP      r4,r10
0009f2  db00              BLT      |L1.2550|
                  |L1.2548|
;;;849          break;
0009f4  e013              B        |L1.2590|
                  |L1.2550|
;;;850        }
;;;851        hItem = GUI_ARRAY_GethItem(&pObj->ItemArray, Index);
0009f6  4621              MOV      r1,r4
0009f8  f1080028          ADD      r0,r8,#0x28
0009fc  f7fffffe          BL       GUI_ARRAY_GethItem
000a00  4606              MOV      r6,r0
;;;852        if (hItem) {
000a02  b156              CBZ      r6,|L1.2586|
;;;853          LISTBOX_ITEM * pItem = (LISTBOX_ITEM *)GUI_ALLOC_h2p(hItem);
000a04  4630              MOV      r0,r6
000a06  f7fffffe          BL       GUI_ALLOC_h2p
000a0a  4683              MOV      r11,r0
;;;854          if (!(pItem->Status & LISTBOX_ITEM_DISABLED)) {
000a0c  f89b0004          LDRB     r0,[r11,#4]
000a10  f0100f02          TST      r0,#2
000a14  d100              BNE      |L1.2584|
;;;855            NewSel = Index;
000a16  4625              MOV      r5,r4
                  |L1.2584|
;;;856          }
;;;857        }
000a18  bf00              NOP      
                  |L1.2586|
;;;858      } while(NewSel < 0);
000a1a  2d00              CMP      r5,#0
000a1c  dbe5              BLT      |L1.2538|
                  |L1.2590|
000a1e  bf00              NOP                            ;849
;;;859      if (NewSel >= 0) {
000a20  2d00              CMP      r5,#0
000a22  db03              BLT      |L1.2604|
;;;860        LISTBOX_SetSel(hObj, NewSel);
000a24  4629              MOV      r1,r5
000a26  4648              MOV      r0,r9
000a28  f7fffffe          BL       LISTBOX_SetSel
                  |L1.2604|
;;;861      }
;;;862    }
000a2c  e8bd9ff0          POP      {r4-r12,pc}
;;;863    
                          ENDP

                  LISTBOX_DecSel PROC
;;;1110   */
;;;1111   void LISTBOX_DecSel      (LISTBOX_Handle hObj) {
000a30  b510              PUSH     {r4,lr}
000a32  4604              MOV      r4,r0
;;;1112     if (hObj) {
000a34  b124              CBZ      r4,|L1.2624|
;;;1113       WM_LOCK();
;;;1114       _MoveSel(hObj, -1);
000a36  f04f31ff          MOV      r1,#0xffffffff
000a3a  4620              MOV      r0,r4
000a3c  f7fffffe          BL       _MoveSel
                  |L1.2624|
;;;1115       WM_UNLOCK();
;;;1116     }
;;;1117   }
000a40  bd10              POP      {r4,pc}
;;;1118   
                          ENDP

                  LISTBOX_IncSel PROC
;;;1098   */
;;;1099   void LISTBOX_IncSel      (LISTBOX_Handle hObj) {
000a42  b510              PUSH     {r4,lr}
000a44  4604              MOV      r4,r0
;;;1100     if (hObj) {
000a46  b11c              CBZ      r4,|L1.2640|
;;;1101       WM_LOCK();
;;;1102       _MoveSel(hObj, 1);
000a48  2101              MOVS     r1,#1
000a4a  4620              MOV      r0,r4
000a4c  f7fffffe          BL       _MoveSel
                  |L1.2640|
;;;1103       WM_UNLOCK();
;;;1104     }
;;;1105   }
000a50  bd10              POP      {r4,pc}
;;;1106   
                          ENDP

                  _AddKey PROC
;;;870    */
;;;871    static int _AddKey(LISTBOX_Handle hObj, int Key) {
000a52  b570              PUSH     {r4-r6,lr}
000a54  4606              MOV      r6,r0
000a56  460d              MOV      r5,r1
;;;872      LISTBOX_Obj* pObj;
;;;873      pObj = LISTBOX_H2P(hObj);
000a58  4630              MOV      r0,r6
000a5a  f7fffffe          BL       GUI_ALLOC_h2p
000a5e  4604              MOV      r4,r0
;;;874      switch (Key) {
000a60  2d12              CMP      r5,#0x12
000a62  d011              BEQ      |L1.2696|
000a64  dc04              BGT      |L1.2672|
000a66  2d10              CMP      r5,#0x10
000a68  d01f              BEQ      |L1.2730|
000a6a  2d11              CMP      r5,#0x11
000a6c  d138              BNE      |L1.2784|
000a6e  e032              B        |L1.2774|
                  |L1.2672|
000a70  2d13              CMP      r5,#0x13
000a72  d02b              BEQ      |L1.2764|
000a74  2d20              CMP      r5,#0x20
000a76  d133              BNE      |L1.2784|
;;;875      case ' ':
;;;876        _ToggleMultiSel(hObj, pObj, pObj->Sel);
000a78  f9b42072          LDRSH    r2,[r4,#0x72]
000a7c  4621              MOV      r1,r4
000a7e  4630              MOV      r0,r6
000a80  f7fffffe          BL       _ToggleMultiSel
;;;877        return 1;               /* Key has been consumed */
000a84  2001              MOVS     r0,#1
                  |L1.2694|
;;;878      case GUI_KEY_RIGHT:
;;;879        if (WM_SetScrollValue(&pObj->ScrollStateH, pObj->ScrollStateH.v + pObj->Props.ScrollStepH)) {
;;;880          LISTBOX_UpdateScrollers(hObj);
;;;881          LISTBOX__InvalidateInsideArea(hObj);
;;;882        }
;;;883        return 1;               /* Key has been consumed */
;;;884      case GUI_KEY_LEFT:
;;;885        if (WM_SetScrollValue(&pObj->ScrollStateH, pObj->ScrollStateH.v - pObj->Props.ScrollStepH)) {
;;;886          LISTBOX_UpdateScrollers(hObj);
;;;887          LISTBOX__InvalidateInsideArea(hObj);
;;;888        }
;;;889        return 1;               /* Key has been consumed */
;;;890      case GUI_KEY_DOWN:
;;;891        LISTBOX_IncSel(hObj);
;;;892        return 1;               /* Key has been consumed */
;;;893      case GUI_KEY_UP:
;;;894        LISTBOX_DecSel(hObj);
;;;895        return 1;               /* Key has been consumed */
;;;896      default:
;;;897        if(_IsAlphaNum(Key)) {
;;;898          _SelectByKey(hObj, Key);
;;;899          return 1;               /* Key has been consumed */
;;;900        }
;;;901      }
;;;902      return 0;
;;;903    }
000a86  bd70              POP      {r4-r6,pc}
                  |L1.2696|
000a88  204c              MOVS     r0,#0x4c              ;879
000a8a  5b00              LDRH     r0,[r0,r4]            ;879
000a8c  6c22              LDR      r2,[r4,#0x40]         ;879
000a8e  1811              ADDS     r1,r2,r0              ;879
000a90  f104003c          ADD      r0,r4,#0x3c           ;879
000a94  f7fffffe          BL       WM_SetScrollValue
000a98  b128              CBZ      r0,|L1.2726|
000a9a  4630              MOV      r0,r6                 ;880
000a9c  f7fffffe          BL       LISTBOX_UpdateScrollers
000aa0  4630              MOV      r0,r6                 ;881
000aa2  f7fffffe          BL       LISTBOX__InvalidateInsideArea
                  |L1.2726|
000aa6  2001              MOVS     r0,#1                 ;883
000aa8  e7ed              B        |L1.2694|
                  |L1.2730|
000aaa  204c              MOVS     r0,#0x4c              ;885
000aac  5b00              LDRH     r0,[r0,r4]            ;885
000aae  6c22              LDR      r2,[r4,#0x40]         ;885
000ab0  1a11              SUBS     r1,r2,r0              ;885
000ab2  f104003c          ADD      r0,r4,#0x3c           ;885
000ab6  f7fffffe          BL       WM_SetScrollValue
000aba  b128              CBZ      r0,|L1.2760|
000abc  4630              MOV      r0,r6                 ;886
000abe  f7fffffe          BL       LISTBOX_UpdateScrollers
000ac2  4630              MOV      r0,r6                 ;887
000ac4  f7fffffe          BL       LISTBOX__InvalidateInsideArea
                  |L1.2760|
000ac8  2001              MOVS     r0,#1                 ;889
000aca  e7dc              B        |L1.2694|
                  |L1.2764|
000acc  4630              MOV      r0,r6                 ;891
000ace  f7fffffe          BL       LISTBOX_IncSel
000ad2  2001              MOVS     r0,#1                 ;892
000ad4  e7d7              B        |L1.2694|
                  |L1.2774|
000ad6  4630              MOV      r0,r6                 ;894
000ad8  f7fffffe          BL       LISTBOX_DecSel
000adc  2001              MOVS     r0,#1                 ;895
000ade  e7d2              B        |L1.2694|
                  |L1.2784|
000ae0  4628              MOV      r0,r5                 ;897
000ae2  f7fffffe          BL       _IsAlphaNum
000ae6  b128              CBZ      r0,|L1.2804|
000ae8  4629              MOV      r1,r5                 ;898
000aea  4630              MOV      r0,r6                 ;898
000aec  f7fffffe          BL       _SelectByKey
000af0  2001              MOVS     r0,#1                 ;899
000af2  e7c8              B        |L1.2694|
                  |L1.2804|
000af4  bf00              NOP                            ;874
000af6  bf00              NOP                            ;874
000af8  2000              MOVS     r0,#0                 ;902
000afa  e7c4              B        |L1.2694|
;;;904    
                          ENDP

                  LISTBOX_AddKey PROC
;;;984    */
;;;985    int LISTBOX_AddKey(LISTBOX_Handle hObj, int Key) {
000afc  b570              PUSH     {r4-r6,lr}
000afe  4604              MOV      r4,r0
000b00  460d              MOV      r5,r1
;;;986      int r = 0;
000b02  f04f0600          MOV      r6,#0
;;;987      if (hObj) {
000b06  b124              CBZ      r4,|L1.2834|
;;;988        WM_LOCK();
;;;989        r = _AddKey(hObj, Key);
000b08  4629              MOV      r1,r5
000b0a  4620              MOV      r0,r4
000b0c  f7fffffe          BL       _AddKey
000b10  4606              MOV      r6,r0
                  |L1.2834|
;;;990        WM_UNLOCK();
;;;991      }
;;;992      return r;
000b12  4630              MOV      r0,r6
;;;993    }
000b14  bd70              POP      {r4-r6,pc}
;;;994    
                          ENDP

                  _LISTBOX_Callback PROC
;;;750    */
;;;751    static void _LISTBOX_Callback(WM_MESSAGE*pMsg) {
000b16  e92d43fe          PUSH     {r1-r9,lr}
000b1a  4604              MOV      r4,r0
;;;752      LISTBOX_Handle hObj = pMsg->hWin;
000b1c  f9b48004          LDRSH    r8,[r4,#4]
;;;753      LISTBOX_Obj* pObj = LISTBOX_H2P(hObj);
000b20  4640              MOV      r0,r8
000b22  f7fffffe          BL       GUI_ALLOC_h2p
000b26  4605              MOV      r5,r0
;;;754      WM_SCROLL_STATE ScrollState;
;;;755      /* Let widget handle the standard messages */
;;;756      if (WIDGET_HandleActive(hObj, pMsg) == 0) {
000b28  4621              MOV      r1,r4
000b2a  4640              MOV      r0,r8
000b2c  f7fffffe          BL       WIDGET_HandleActive
000b30  b950              CBNZ     r0,|L1.2888|
;;;757        /* Owner needs to be informed about focus change */
;;;758        if (pMsg->MsgId == WM_SET_FOCUS) {
000b32  6820              LDR      r0,[r4,#0]
000b34  281f              CMP      r0,#0x1f
000b36  d105              BNE      |L1.2884|
;;;759          if (pMsg->Data.v == 0) {            /* Lost focus ? */
000b38  68a0              LDR      r0,[r4,#8]
000b3a  b918              CBNZ     r0,|L1.2884|
;;;760            _NotifyOwner(hObj, LISTBOX_NOTIFICATION_LOST_FOCUS);
000b3c  210b              MOVS     r1,#0xb
000b3e  4640              MOV      r0,r8
000b40  f7fffffe          BL       _NotifyOwner
                  |L1.2884|
;;;761          }
;;;762        }
;;;763        return;
;;;764      }
;;;765      switch (pMsg->MsgId) {
;;;766      case WM_NOTIFY_PARENT:
;;;767        switch (pMsg->Data.v) {
;;;768        case WM_NOTIFICATION_VALUE_CHANGED:
;;;769          if (pMsg->hWinSrc  == WM_GetScrollbarV(hObj)) {
;;;770            WM_GetScrollState(pMsg->hWinSrc, &ScrollState);
;;;771            pObj->ScrollStateV.v = ScrollState.v;
;;;772            LISTBOX__InvalidateInsideArea(hObj);
;;;773            _NotifyOwner(hObj, WM_NOTIFICATION_SCROLL_CHANGED);
;;;774          } else if (pMsg->hWinSrc == WM_GetScrollbarH(hObj)) {
;;;775            WM_GetScrollState(pMsg->hWinSrc, &ScrollState);
;;;776            pObj->ScrollStateH.v = ScrollState.v;
;;;777            LISTBOX__InvalidateInsideArea(hObj);
;;;778            _NotifyOwner(hObj, WM_NOTIFICATION_SCROLL_CHANGED);
;;;779          }
;;;780          break;
;;;781        case WM_NOTIFICATION_SCROLLBAR_ADDED:
;;;782          LISTBOX_UpdateScrollers(hObj);
;;;783          break;
;;;784        }
;;;785        break;
;;;786      case WM_PAINT:
;;;787        _OnPaint(hObj, pObj, pMsg);
;;;788        break;
;;;789      case WM_PID_STATE_CHANGED:
;;;790        {
;;;791          const WM_PID_STATE_CHANGED_INFO* pInfo = (const WM_PID_STATE_CHANGED_INFO*)pMsg->Data.p;
;;;792          if (pInfo->State) {
;;;793            int Sel;
;;;794            Sel = _GetItemFromPos(hObj, pObj, pInfo->x, pInfo->y);
;;;795            if (Sel >= 0) {
;;;796              _ToggleMultiSel(hObj, pObj, Sel);
;;;797              LISTBOX_SetSel(hObj, Sel);
;;;798            }
;;;799            _NotifyOwner(hObj, WM_NOTIFICATION_CLICKED);
;;;800            return;
;;;801          }
;;;802        }
;;;803        break;
;;;804      case WM_TOUCH:
;;;805        _OnTouch(hObj, pMsg);
;;;806        return;
;;;807    #if GUI_SUPPORT_MOUSE
;;;808      case WM_MOUSEOVER:
;;;809        if (_OnMouseOver(hObj, pObj, pMsg) == 0)
;;;810          return;
;;;811        break;
;;;812    #endif
;;;813      case WM_DELETE:
;;;814        _FreeAttached(pObj);
;;;815        break;       /* No return here ... WM_DefaultProc needs to be called */
;;;816      case WM_KEY:
;;;817        if (((const WM_KEY_INFO*)(pMsg->Data.p))->PressedCnt > 0) {
;;;818          int Key;
;;;819          Key = ((const WM_KEY_INFO*)(pMsg->Data.p))->Key;
;;;820          if (LISTBOX_AddKey(hObj, Key)) {
;;;821            return;
;;;822          }
;;;823        }
;;;824        break;
;;;825      case WM_SIZE:
;;;826        LISTBOX_UpdateScrollers(hObj);
;;;827        WM_InvalidateWindow(hObj);
;;;828        break;
;;;829      }
;;;830      WM_DefaultProc(pMsg);
;;;831    }
000b44  e8bd83fe          POP      {r1-r9,pc}
                  |L1.2888|
000b48  6820              LDR      r0,[r4,#0]            ;765
000b4a  280e              CMP      r0,#0xe               ;765
000b4c  d071              BEQ      |L1.3122|
000b4e  dc06              BGT      |L1.2910|
000b50  2805              CMP      r0,#5                 ;765
000b52  d07c              BEQ      |L1.3150|
000b54  280b              CMP      r0,#0xb               ;765
000b56  d066              BEQ      |L1.3110|
000b58  280c              CMP      r0,#0xc               ;765
000b5a  d17f              BNE      |L1.3164|
000b5c  e05e              B        |L1.3100|
                  |L1.2910|
000b5e  280f              CMP      r0,#0xf               ;765
000b60  d03b              BEQ      |L1.3034|
000b62  2811              CMP      r0,#0x11              ;765
000b64  d03f              BEQ      |L1.3046|
000b66  2826              CMP      r0,#0x26              ;765
000b68  d178              BNE      |L1.3164|
000b6a  68a0              LDR      r0,[r4,#8]            ;767
000b6c  2805              CMP      r0,#5                 ;767
000b6e  d002              BEQ      |L1.2934|
000b70  2806              CMP      r0,#6                 ;767
000b72  d130              BNE      |L1.3030|
000b74  e02b              B        |L1.3022|
                  |L1.2934|
000b76  4640              MOV      r0,r8                 ;769
000b78  f7fffffe          BL       WM_GetScrollbarV
000b7c  f9b41006          LDRSH    r1,[r4,#6]            ;769
000b80  4288              CMP      r0,r1                 ;769
000b82  d10e              BNE      |L1.2978|
000b84  f9b40006          LDRSH    r0,[r4,#6]            ;770
000b88  4669              MOV      r1,sp                 ;770
000b8a  f7fffffe          BL       WM_GetScrollState
000b8e  9901              LDR      r1,[sp,#4]            ;771
000b90  6369              STR      r1,[r5,#0x34]         ;771
000b92  4640              MOV      r0,r8                 ;772
000b94  f7fffffe          BL       LISTBOX__InvalidateInsideArea
000b98  210a              MOVS     r1,#0xa               ;773
000b9a  4640              MOV      r0,r8                 ;773
000b9c  f7fffffe          BL       _NotifyOwner
000ba0  e014              B        |L1.3020|
                  |L1.2978|
000ba2  4640              MOV      r0,r8                 ;774
000ba4  f7fffffe          BL       WM_GetScrollbarH
000ba8  f9b41006          LDRSH    r1,[r4,#6]            ;774
000bac  4288              CMP      r0,r1                 ;774
000bae  d10d              BNE      |L1.3020|
000bb0  f9b40006          LDRSH    r0,[r4,#6]            ;775
000bb4  4669              MOV      r1,sp                 ;775
000bb6  f7fffffe          BL       WM_GetScrollState
000bba  9901              LDR      r1,[sp,#4]            ;776
000bbc  6429              STR      r1,[r5,#0x40]         ;776
000bbe  4640              MOV      r0,r8                 ;777
000bc0  f7fffffe          BL       LISTBOX__InvalidateInsideArea
000bc4  210a              MOVS     r1,#0xa               ;778
000bc6  4640              MOV      r0,r8                 ;778
000bc8  f7fffffe          BL       _NotifyOwner
                  |L1.3020|
000bcc  e003              B        |L1.3030|
                  |L1.3022|
000bce  4640              MOV      r0,r8                 ;782
000bd0  f7fffffe          BL       LISTBOX_UpdateScrollers
000bd4  bf00              NOP                            ;783
                  |L1.3030|
000bd6  bf00              NOP                            ;780
000bd8  e040              B        |L1.3164|
                  |L1.3034|
000bda  4622              MOV      r2,r4                 ;787
000bdc  4629              MOV      r1,r5                 ;787
000bde  4640              MOV      r0,r8                 ;787
000be0  f7fffffe          BL       _OnPaint
000be4  e03a              B        |L1.3164|
                  |L1.3046|
000be6  68a6              LDR      r6,[r4,#8]            ;791
000be8  7a30              LDRB     r0,[r6,#8]            ;792
000bea  b1b0              CBZ      r0,|L1.3098|
000bec  4629              MOV      r1,r5                 ;794
000bee  4640              MOV      r0,r8                 ;794
000bf0  e9d62300          LDRD     r2,r3,[r6,#0]         ;794
000bf4  f7fffffe          BL       _GetItemFromPos
000bf8  4607              MOV      r7,r0                 ;794
000bfa  2f00              CMP      r7,#0                 ;795
000bfc  db08              BLT      |L1.3088|
000bfe  463a              MOV      r2,r7                 ;796
000c00  4629              MOV      r1,r5                 ;796
000c02  4640              MOV      r0,r8                 ;796
000c04  f7fffffe          BL       _ToggleMultiSel
000c08  4639              MOV      r1,r7                 ;797
000c0a  4640              MOV      r0,r8                 ;797
000c0c  f7fffffe          BL       LISTBOX_SetSel
                  |L1.3088|
000c10  2101              MOVS     r1,#1                 ;799
000c12  4640              MOV      r0,r8                 ;799
000c14  f7fffffe          BL       _NotifyOwner
000c18  e794              B        |L1.2884|
                  |L1.3098|
000c1a  e01f              B        |L1.3164|
                  |L1.3100|
000c1c  4621              MOV      r1,r4                 ;805
000c1e  4640              MOV      r0,r8                 ;805
000c20  f7fffffe          BL       _OnTouch
000c24  e78e              B        |L1.2884|
                  |L1.3110|
000c26  4628              MOV      r0,r5                 ;814
000c28  f7fffffe          BL       _FreeAttached
000c2c  e016              B        |L1.3164|
000c2e  e000              B        |L1.3122|
000c30  e00d              B        |L1.3150|
                  |L1.3122|
000c32  68a0              LDR      r0,[r4,#8]            ;817
000c34  6840              LDR      r0,[r0,#4]            ;817
000c36  2800              CMP      r0,#0                 ;817
000c38  dd08              BLE      |L1.3148|
000c3a  68a0              LDR      r0,[r4,#8]            ;819
000c3c  6806              LDR      r6,[r0,#0]            ;819
000c3e  4631              MOV      r1,r6                 ;820
000c40  4640              MOV      r0,r8                 ;820
000c42  f7fffffe          BL       LISTBOX_AddKey
000c46  b100              CBZ      r0,|L1.3146|
000c48  e77c              B        |L1.2884|
                  |L1.3146|
000c4a  bf00              NOP                            ;823
                  |L1.3148|
000c4c  e006              B        |L1.3164|
                  |L1.3150|
000c4e  4640              MOV      r0,r8                 ;826
000c50  f7fffffe          BL       LISTBOX_UpdateScrollers
000c54  4640              MOV      r0,r8                 ;827
000c56  f7fffffe          BL       WM_InvalidateWindow
000c5a  bf00              NOP                            ;828
                  |L1.3164|
000c5c  bf00              NOP                            ;785
000c5e  4620              MOV      r0,r4                 ;830
000c60  f7fffffe          BL       WM_DefaultProc
000c64  bf00              NOP      
000c66  e76d              B        |L1.2884|
;;;832    
                          ENDP

                  LISTBOX_InvalidateItem PROC
;;;952    */
;;;953    void LISTBOX_InvalidateItem(LISTBOX_Handle hObj, int Index) {
000c68  e92d41f0          PUSH     {r4-r8,lr}
000c6c  4606              MOV      r6,r0
000c6e  460c              MOV      r4,r1
;;;954      if (hObj) {
000c70  b356              CBZ      r6,|L1.3272|
;;;955        LISTBOX_Obj* pObj;
;;;956        int NumItems;
;;;957        WM_LOCK();
;;;958        pObj = LISTBOX_H2P(hObj);
000c72  4630              MOV      r0,r6
000c74  f7fffffe          BL       GUI_ALLOC_h2p
000c78  4680              MOV      r8,r0
;;;959        NumItems = LISTBOX__GetNumItems(pObj);
000c7a  4640              MOV      r0,r8
000c7c  f7fffffe          BL       LISTBOX__GetNumItems
000c80  4607              MOV      r7,r0
;;;960        if (Index < NumItems) {
000c82  42bc              CMP      r4,r7
000c84  da1f              BGE      |L1.3270|
;;;961          if (Index < 0) {
000c86  2c00              CMP      r4,#0
000c88  da11              BGE      |L1.3246|
;;;962            int i;
;;;963            for (i = 0; i < NumItems; i++) {
000c8a  f04f0500          MOV      r5,#0
000c8e  e005              B        |L1.3228|
                  |L1.3216|
;;;964              LISTBOX__InvalidateItemSize(pObj, i);
000c90  4629              MOV      r1,r5
000c92  4640              MOV      r0,r8
000c94  f7fffffe          BL       LISTBOX__InvalidateItemSize
000c98  f1050501          ADD      r5,r5,#1              ;963
                  |L1.3228|
000c9c  42bd              CMP      r5,r7                 ;963
000c9e  dbf7              BLT      |L1.3216|
;;;965            }
;;;966            LISTBOX_UpdateScrollers(hObj);
000ca0  4630              MOV      r0,r6
000ca2  f7fffffe          BL       LISTBOX_UpdateScrollers
;;;967            LISTBOX__InvalidateInsideArea(hObj);
000ca6  4630              MOV      r0,r6
000ca8  f7fffffe          BL       LISTBOX__InvalidateInsideArea
;;;968          } else {
000cac  e00b              B        |L1.3270|
                  |L1.3246|
;;;969            LISTBOX__InvalidateItemSize(pObj, Index);
000cae  4621              MOV      r1,r4
000cb0  4640              MOV      r0,r8
000cb2  f7fffffe          BL       LISTBOX__InvalidateItemSize
;;;970            LISTBOX_UpdateScrollers(hObj);
000cb6  4630              MOV      r0,r6
000cb8  f7fffffe          BL       LISTBOX_UpdateScrollers
;;;971            LISTBOX__InvalidateItemAndBelow(hObj, pObj, Index);
000cbc  4622              MOV      r2,r4
000cbe  4641              MOV      r1,r8
000cc0  4630              MOV      r0,r6
000cc2  f7fffffe          BL       LISTBOX__InvalidateItemAndBelow
                  |L1.3270|
;;;972          }
;;;973        }
;;;974        WM_UNLOCK();
;;;975      }
000cc6  bf00              NOP      
                  |L1.3272|
;;;976    }
000cc8  e8bd81f0          POP      {r4-r8,pc}
;;;977    
                          ENDP

                  LISTBOX_AddString PROC
;;;998    */
;;;999    void LISTBOX_AddString(LISTBOX_Handle hObj, const char* s) {
000ccc  e92d41fc          PUSH     {r2-r8,lr}
000cd0  4606              MOV      r6,r0
000cd2  460d              MOV      r5,r1
;;;1000     if (hObj && s) {
000cd4  b396              CBZ      r6,|L1.3388|
000cd6  b38d              CBZ      r5,|L1.3388|
;;;1001       LISTBOX_Obj* pObj;
;;;1002       LISTBOX_ITEM Item = {0, 0};
000cd8  f04f0000          MOV      r0,#0
000cdc  9000              STR      r0,[sp,#0]
000cde  9001              STR      r0,[sp,#4]
;;;1003       WM_LOCK();
;;;1004       pObj = LISTBOX_H2P(hObj);
000ce0  4630              MOV      r0,r6
000ce2  f7fffffe          BL       GUI_ALLOC_h2p
000ce6  4604              MOV      r4,r0
;;;1005       if (GUI_ARRAY_AddItem(&pObj->ItemArray, &Item, sizeof(LISTBOX_ITEM) + strlen(s)) == 0) {
000ce8  4628              MOV      r0,r5
000cea  f7fffffe          BL       strlen
000cee  1d87              ADDS     r7,r0,#6
000cf0  463a              MOV      r2,r7
000cf2  4669              MOV      r1,sp
000cf4  f1040028          ADD      r0,r4,#0x28
000cf8  f7fffffe          BL       GUI_ARRAY_AddItem
000cfc  b9e8              CBNZ     r0,|L1.3386|
;;;1006         unsigned ItemIndex = GUI_ARRAY_GetNumItems(&pObj->ItemArray) - 1;
000cfe  f1040028          ADD      r0,r4,#0x28
000d02  f7fffffe          BL       GUI_ARRAY_GetNumItems
000d06  f1a00701          SUB      r7,r0,#1
;;;1007         LISTBOX_ITEM* pItem= (LISTBOX_ITEM*)GUI_ARRAY_GetpItem(&pObj->ItemArray, ItemIndex);
000d0a  4639              MOV      r1,r7
000d0c  f1040028          ADD      r0,r4,#0x28
000d10  f7fffffe          BL       GUI_ARRAY_GetpItem
000d14  4680              MOV      r8,r0
;;;1008         strcpy(pItem->acText, s);
000d16  4629              MOV      r1,r5
000d18  f1080005          ADD      r0,r8,#5
000d1c  f7fffffe          BL       strcpy
;;;1009         LISTBOX__InvalidateItemSize(pObj, ItemIndex);
000d20  4639              MOV      r1,r7
000d22  4620              MOV      r0,r4
000d24  f7fffffe          BL       LISTBOX__InvalidateItemSize
;;;1010         LISTBOX_UpdateScrollers(hObj);
000d28  4630              MOV      r0,r6
000d2a  f7fffffe          BL       LISTBOX_UpdateScrollers
;;;1011         LISTBOX__InvalidateItem(hObj, pObj, ItemIndex);
000d2e  463a              MOV      r2,r7
000d30  4621              MOV      r1,r4
000d32  4630              MOV      r0,r6
000d34  f7fffffe          BL       LISTBOX__InvalidateItem
;;;1012       }
000d38  bf00              NOP      
                  |L1.3386|
;;;1013       WM_UNLOCK();
;;;1014     }
000d3a  bf00              NOP      
                  |L1.3388|
;;;1015   }
000d3c  e8bd81fc          POP      {r2-r8,pc}
;;;1016   
                          ENDP

                  LISTBOX_SetText PROC
;;;1020   */
;;;1021   void LISTBOX_SetText(LISTBOX_Handle hObj, const GUI_ConstString* ppText) {
000d40  e92d41f0          PUSH     {r4-r8,lr}
000d44  4606              MOV      r6,r0
000d46  460c              MOV      r4,r1
;;;1022     if (hObj) {
000d48  b19e              CBZ      r6,|L1.3442|
;;;1023       int i;
;;;1024       const char* s;
;;;1025       WM_LOCK();
;;;1026       if (ppText) {
000d4a  b164              CBZ      r4,|L1.3430|
;;;1027         for (i = 0; (s = *(ppText+i)) != 0; i++) {
000d4c  f04f0500          MOV      r5,#0
000d50  e005              B        |L1.3422|
                  |L1.3410|
;;;1028           LISTBOX_AddString(hObj, s);
000d52  4639              MOV      r1,r7
000d54  4630              MOV      r0,r6
000d56  f7fffffe          BL       LISTBOX_AddString
000d5a  f1050501          ADD      r5,r5,#1              ;1027
                  |L1.3422|
000d5e  f8547025          LDR      r7,[r4,r5,LSL #2]     ;1027
000d62  2f00              CMP      r7,#0                 ;1027
000d64  d1f5              BNE      |L1.3410|
                  |L1.3430|
;;;1029         }
;;;1030       }
;;;1031       LISTBOX_InvalidateItem(hObj, LISTBOX_ALL_ITEMS);
000d66  f04f31ff          MOV      r1,#0xffffffff
000d6a  4630              MOV      r0,r6
000d6c  f7fffffe          BL       LISTBOX_InvalidateItem
;;;1032       WM_UNLOCK();
;;;1033     }
000d70  bf00              NOP      
                  |L1.3442|
;;;1034   }
000d72  e8bd81f0          POP      {r4-r8,pc}
;;;1035   
                          ENDP

                  LISTBOX_CreateEx PROC
;;;914    */
;;;915    LISTBOX_Handle LISTBOX_CreateEx(int x0, int y0, int xsize, int ysize, WM_HWIN hParent,
000d76  e92d4fff          PUSH     {r0-r11,lr}
;;;916                                    int WinFlags, int ExFlags, int Id, const GUI_ConstString* ppText)
;;;917    {
000d7a  b085              SUB      sp,sp,#0x14
000d7c  4607              MOV      r7,r0
000d7e  4688              MOV      r8,r1
000d80  4691              MOV      r9,r2
000d82  e9ddab13          LDRD     r10,r11,[sp,#0x4c]
000d86  9c16              LDR      r4,[sp,#0x58]
;;;918      LISTBOX_Handle hObj;
;;;919      GUI_USE_PARA(ExFlags);
000d88  bf00              NOP      
;;;920      hObj = WM_CreateWindowAsChild(x0, y0, xsize, ysize, hParent, WinFlags, _LISTBOX_Callback,
000d8a  f04f0258          MOV      r2,#0x58
000d8e  4b16              LDR      r3,|L1.3560|
000d90  fa1ff08a          UXTH     r0,r10
000d94  9912              LDR      r1,[sp,#0x48]
000d96  e9cd3202          STRD     r3,r2,[sp,#8]
000d9a  e9cd1000          STRD     r1,r0,[sp,#0]
000d9e  464a              MOV      r2,r9
000da0  4641              MOV      r1,r8
000da2  4638              MOV      r0,r7
000da4  9b08              LDR      r3,[sp,#0x20]
000da6  f7fffffe          BL       WM_CreateWindowAsChild
000daa  4605              MOV      r5,r0
;;;921                                    sizeof(LISTBOX_Obj) - sizeof(WM_Obj));
;;;922      if (hObj) {
000dac  b1c5              CBZ      r5,|L1.3552|
;;;923        LISTBOX_Obj* pObj;
;;;924        WM_LOCK();
;;;925        pObj = LISTBOX_H2P(hObj);
000dae  4628              MOV      r0,r5
000db0  f7fffffe          BL       GUI_ALLOC_h2p
000db4  4606              MOV      r6,r0
;;;926         /* Init sub-classes */
;;;927        GUI_ARRAY_CREATE(&pObj->ItemArray);
;;;928       /* init widget specific variables */
;;;929        WIDGET__Init(&pObj->Widget, Id, WIDGET_STATE_FOCUSSABLE);
000db6  f04f0210          MOV      r2,#0x10
000dba  4630              MOV      r0,r6
000dbc  9915              LDR      r1,[sp,#0x54]
000dbe  f7fffffe          BL       WIDGET__Init
;;;930        pObj->Props = LISTBOX_DefaultProps;
000dc2  2228              MOVS     r2,#0x28
000dc4  4909              LDR      r1,|L1.3564|
000dc6  f1060048          ADD      r0,r6,#0x48
000dca  f7fffffe          BL       __aeabi_memcpy4
;;;931        if (ppText) {
000dce  b11c              CBZ      r4,|L1.3544|
;;;932          /* init member variables */
;;;933          /* Set non-zero attributes */
;;;934          LISTBOX_SetText(hObj, ppText);
000dd0  4621              MOV      r1,r4
000dd2  4628              MOV      r0,r5
000dd4  f7fffffe          BL       LISTBOX_SetText
                  |L1.3544|
;;;935        }
;;;936        INIT_ID(pObj);
;;;937        LISTBOX_UpdateScrollers(hObj);
000dd8  4628              MOV      r0,r5
000dda  f7fffffe          BL       LISTBOX_UpdateScrollers
;;;938        WM_UNLOCK();
;;;939      }
000dde  bf00              NOP      
                  |L1.3552|
;;;940      return hObj;
000de0  4628              MOV      r0,r5
;;;941    }
000de2  b009              ADD      sp,sp,#0x24
000de4  e8bd8ff0          POP      {r4-r11,pc}
;;;942    
                          ENDP

                  |L1.3560|
                          DCD      _LISTBOX_Callback
                  |L1.3564|
                          DCD      LISTBOX_DefaultProps

                          AREA ||.data||, DATA, ALIGN=2

                  LISTBOX_DefaultProps
                          DCD      GUI_Font13_1
000004  000a              DCW      0x000a
000006  0000              DCB      0x00,0x00
                          DCD      0x00ffffff
                          DCD      0x00808080
                          DCD      0x00ff0000
                          DCD      0x00c0c0c0
                          DCD      0x00000000
                          DCD      0x00ffffff
                          DCD      0x00ffffff
                          DCD      0x00808080
