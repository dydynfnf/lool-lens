; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\lcd_mixcolors256.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\lcd_mixcolors256.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -I.\GUI\AntiAlias -I.\GUI\Config -I.\GUI\ConvertColor -I.\GUI\ConvertMono -I.\GUI\Core -I.\GUI\Font -I.\GUI\GUI_X -I.\GUI\JPEG -I.\GUI\LCDDriver -I.\GUI\MemDev -I.\GUI\MultiLayer -I.\GUI\Widget -I.\GUI\WM -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\INC\ST\STM32F10x -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\lcd_mixcolors256.crf GUI\Core\LCD_MixColors256.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=1

                  LCD_MixColors256 PROC
;;;40     */
;;;41     LCD_COLOR LCD_MixColors256(LCD_COLOR Color, LCD_COLOR BkColor, unsigned Intens) {
000000  b570              PUSH     {r4-r6,lr}
000002  4603              MOV      r3,r0
;;;42       /* Calc Color seperations for FgColor first */
;;;43       U32 R = (Color & 0xff)    * Intens;
000004  b2d8              UXTB     r0,r3
000006  fb00f402          MUL      r4,r0,r2
;;;44       U32 G = (Color & 0xff00)  * Intens;
00000a  f403407f          AND      r0,r3,#0xff00
00000e  fb00f502          MUL      r5,r0,r2
;;;45       U32 B = (Color & 0xff0000)* Intens;
000012  f403007f          AND      r0,r3,#0xff0000
000016  fb00f602          MUL      r6,r0,r2
;;;46       /* Add Color seperations for BkColor */
;;;47       Intens = 256 - Intens;
00001a  f5c27280          RSB      r2,r2,#0x100
;;;48       R += (BkColor & 0xff)     * Intens;
00001e  b2c8              UXTB     r0,r1
000020  fb004402          MLA      r4,r0,r2,r4
;;;49       G += (BkColor & 0xff00)   * Intens;
000024  f401407f          AND      r0,r1,#0xff00
000028  fb005502          MLA      r5,r0,r2,r5
;;;50       B += (BkColor & 0xff0000) * Intens;
00002c  f401007f          AND      r0,r1,#0xff0000
000030  fb006602          MLA      r6,r0,r2,r6
;;;51       R = (R >> 8);
000034  ea4f2414          LSR      r4,r4,#8
;;;52       G = (G >> 8) & 0xff00;
000038  f44f407f          MOV      r0,#0xff00
00003c  ea002515          AND      r5,r0,r5,LSR #8
;;;53       B = (B >> 8) & 0xff0000;
000040  f44f007f          MOV      r0,#0xff0000
000044  ea002616          AND      r6,r0,r6,LSR #8
;;;54       return R + G + B;
000048  eb040005          ADD      r0,r4,r5
00004c  4430              ADD      r0,r0,r6
;;;55     }
00004e  bd70              POP      {r4-r6,pc}
;;;56     
                          ENDP

