; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\wmtouch.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\wmtouch.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -I.\GUI\AntiAlias -I.\GUI\Config -I.\GUI\ConvertColor -I.\GUI\ConvertMono -I.\GUI\Core -I.\GUI\Font -I.\GUI\GUI_X -I.\GUI\JPEG -I.\GUI\LCDDriver -I.\GUI\MemDev -I.\GUI\MultiLayer -I.\GUI\Widget -I.\GUI\WM -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\INC\ST\STM32F10x -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\wmtouch.crf GUI\WM\WMTouch.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  WM__IsInModalArea PROC
;;;45     */
;;;46     int WM__IsInModalArea(WM_HWIN hWin) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;47       if ((WM__CHWinModal.hWin == 0) || WM__IsAncestor(hWin, WM__CHWinModal.hWin) || (hWin == WM__CHWinModal.hWin)) {
000004  4886              LDR      r0,|L1.544|
000006  8880              LDRH     r0,[r0,#4]  ; WM__CHWinModal
000008  b158              CBZ      r0,|L1.34|
00000a  4885              LDR      r0,|L1.544|
00000c  f9b01004          LDRSH    r1,[r0,#4]  ; WM__CHWinModal
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       WM__IsAncestor
000016  b920              CBNZ     r0,|L1.34|
000018  4881              LDR      r0,|L1.544|
00001a  f9b00004          LDRSH    r0,[r0,#4]  ; WM__CHWinModal
00001e  42a0              CMP      r0,r4
000020  d101              BNE      |L1.38|
                  |L1.34|
;;;48         return 1;
000022  2001              MOVS     r0,#1
                  |L1.36|
;;;49       }
;;;50       return 0;
;;;51     }
000024  bd10              POP      {r4,pc}
                  |L1.38|
000026  2000              MOVS     r0,#0                 ;50
000028  e7fc              B        |L1.36|
;;;52     
                          ENDP

                  WM__SendPIDMessage PROC
;;;62     */
;;;63     void WM__SendPIDMessage(WM_HWIN hWin, WM_MESSAGE* pMsg) {
00002a  b53e              PUSH     {r1-r5,lr}
00002c  4604              MOV      r4,r0
00002e  460d              MOV      r5,r1
;;;64       WM_MESSAGE Msg;
;;;65       /* Send message to the affected window */
;;;66       Msg = *pMsg;                 /* Save message as it may be modified in callback (as return value) */
000030  e8950007          LDM      r5,{r0-r2}
000034  e88d0007          STM      sp,{r0-r2}
;;;67       WM__SendMessageIfEnabled(hWin, &Msg);
000038  4669              MOV      r1,sp
00003a  4620              MOV      r0,r4
00003c  f7fffffe          BL       WM__SendMessageIfEnabled
;;;68       /* Send notification to all ancestors.
;;;69          We need to check if the window which has received the last message still exists,
;;;70          since it may have deleted itself and its parent as result of the message.
;;;71       */
;;;72       Msg.hWinSrc = hWin;
000040  f8ad4006          STRH     r4,[sp,#6]
;;;73       Msg.MsgId   = WM_TOUCH_CHILD;
000044  f04f000d          MOV      r0,#0xd
000048  9000              STR      r0,[sp,#0]
;;;74       while (WM_IsWindow(hWin)) {
00004a  e009              B        |L1.96|
                  |L1.76|
;;;75         hWin = WM_GetParent(hWin);
00004c  4620              MOV      r0,r4
00004e  f7fffffe          BL       WM_GetParent
000052  4604              MOV      r4,r0
;;;76         if (hWin) {
000054  b124              CBZ      r4,|L1.96|
;;;77           Msg.Data.p  = pMsg;            /* Needs to be set for each window, as callback is allowed to modify it */
000056  9502              STR      r5,[sp,#8]
;;;78           WM__SendMessageIfEnabled(hWin, &Msg);    /* Send message to the ancestors */
000058  4669              MOV      r1,sp
00005a  4620              MOV      r0,r4
00005c  f7fffffe          BL       WM__SendMessageIfEnabled
                  |L1.96|
000060  4620              MOV      r0,r4                 ;74
000062  f7fffffe          BL       WM_IsWindow
000066  2800              CMP      r0,#0                 ;74
000068  d1f0              BNE      |L1.76|
;;;79         }
;;;80       }
;;;81     }
00006a  bd3e              POP      {r1-r5,pc}
;;;82     
                          ENDP

                  WM__SendTouchMessage PROC
;;;86     */
;;;87     void WM__SendTouchMessage(WM_HWIN hWin, WM_MESSAGE* pMsg) {
00006c  e92d41f0          PUSH     {r4-r8,lr}
000070  4607              MOV      r7,r0
000072  460d              MOV      r5,r1
;;;88       GUI_PID_STATE* pState;
;;;89       pState     = (GUI_PID_STATE*)pMsg->Data.p;
000074  68ac              LDR      r4,[r5,#8]
;;;90       if (pState) {
000076  b184              CBZ      r4,|L1.154|
;;;91         WM_Obj* pWin;
;;;92         pWin       = WM_H2P(hWin);
000078  4638              MOV      r0,r7
00007a  f7fffffe          BL       GUI_ALLOC_h2p
00007e  4606              MOV      r6,r0
;;;93         pState->x -= pWin->Rect.x0;
000080  f9b61000          LDRSH    r1,[r6,#0]
000084  6820              LDR      r0,[r4,#0]
000086  eba00001          SUB      r0,r0,r1
00008a  6020              STR      r0,[r4,#0]
;;;94         pState->y -= pWin->Rect.y0;
00008c  f9b61002          LDRSH    r1,[r6,#2]
000090  6860              LDR      r0,[r4,#4]
000092  eba00001          SUB      r0,r0,r1
000096  6060              STR      r0,[r4,#4]
;;;95       }
000098  bf00              NOP      
                  |L1.154|
;;;96       WM__SendPIDMessage(hWin, pMsg);
00009a  4629              MOV      r1,r5
00009c  4638              MOV      r0,r7
00009e  f7fffffe          BL       WM__SendPIDMessage
;;;97     }
0000a2  e8bd81f0          POP      {r4-r8,pc}
;;;98     
                          ENDP

                  _Screen2Win PROC
;;;108    */
;;;109    static WM_HWIN _Screen2Win(GUI_PID_STATE* pState) {
0000a6  b510              PUSH     {r4,lr}
0000a8  4604              MOV      r4,r0
;;;110      if (WM__hCapture == 0) {
0000aa  485e              LDR      r0,|L1.548|
0000ac  8800              LDRH     r0,[r0,#0]  ; WM__hCapture
0000ae  b920              CBNZ     r0,|L1.186|
;;;111        return WM_Screen2hWin(pState->x, pState->y);
0000b0  e9d40100          LDRD     r0,r1,[r4,#0]
0000b4  f7fffffe          BL       WM_Screen2hWin
                  |L1.184|
;;;112      } 
;;;113      return WM__hCapture;
;;;114    }
0000b8  bd10              POP      {r4,pc}
                  |L1.186|
0000ba  485a              LDR      r0,|L1.548|
0000bc  f9b00000          LDRSH    r0,[r0,#0]            ;113  ; WM__hCapture
0000c0  e7fa              B        |L1.184|
;;;115    
                          ENDP

                  WM_HandlePID PROC
;;;132    */
;;;133    int WM_HandlePID(void) {
0000c2  b530              PUSH     {r4,r5,lr}
0000c4  b08f              SUB      sp,sp,#0x3c
;;;134      int r = 0;
0000c6  f04f0500          MOV      r5,#0
;;;135      WM_MESSAGE Msg;
;;;136      WM_CRITICAL_HANDLE CHWin;
;;;137      GUI_PID_STATE State, StateNew;
;;;138      GUI_PID_GetState(&StateNew);
0000ca  a804              ADD      r0,sp,#0x10
0000cc  f7fffffe          BL       GUI_PID_GetState
;;;139      WM_LOCK();
;;;140      WM__AddCriticalHandle(&CHWin);
0000d0  a80a              ADD      r0,sp,#0x28
0000d2  f7fffffe          BL       WM__AddCriticalHandle
;;;141      if ((WM_PID__StateLast.x != StateNew.x) || (WM_PID__StateLast.y != StateNew.y) || (WM_PID__StateLast.Pressed != StateNew.Pressed)) {
0000d6  4854              LDR      r0,|L1.552|
0000d8  6800              LDR      r0,[r0,#0]  ; WM_PID__StateLast
0000da  9904              LDR      r1,[sp,#0x10]
0000dc  4288              CMP      r0,r1
0000de  d10a              BNE      |L1.246|
0000e0  4851              LDR      r0,|L1.552|
0000e2  6840              LDR      r0,[r0,#4]  ; WM_PID__StateLast
0000e4  9905              LDR      r1,[sp,#0x14]
0000e6  4288              CMP      r0,r1
0000e8  d105              BNE      |L1.246|
0000ea  484f              LDR      r0,|L1.552|
0000ec  7a00              LDRB     r0,[r0,#8]  ; WM_PID__StateLast
0000ee  f89d1018          LDRB     r1,[sp,#0x18]
0000f2  4288              CMP      r0,r1
0000f4  d078              BEQ      |L1.488|
                  |L1.246|
;;;142        #if GUI_SUPPORT_CURSOR
;;;143          GUI_CURSOR_SetPosition(StateNew.x, StateNew.y);
;;;144        #endif
;;;145        CHWin.hWin = _Screen2Win(&StateNew);
0000f6  a804              ADD      r0,sp,#0x10
0000f8  f7fffffe          BL       _Screen2Win
0000fc  f8ad002c          STRH     r0,[sp,#0x2c]
;;;146        if (WM__IsInModalArea(CHWin.hWin)) {
000100  f9bd002c          LDRSH    r0,[sp,#0x2c]
000104  f7fffffe          BL       WM__IsInModalArea
000108  2800              CMP      r0,#0
00010a  d07f              BEQ      |L1.524|
;;;147          /*
;;;148           * Send WM_PID_STATE_CHANGED message if state has changed (just pressed or just released)
;;;149           */
;;;150          if ((WM_PID__StateLast.Pressed != StateNew.Pressed) && CHWin.hWin) {
00010c  4846              LDR      r0,|L1.552|
00010e  7a00              LDRB     r0,[r0,#8]  ; WM_PID__StateLast
000110  f89d1018          LDRB     r1,[sp,#0x18]
000114  4288              CMP      r0,r1
000116  d026              BEQ      |L1.358|
000118  f8bd002c          LDRH     r0,[sp,#0x2c]
00011c  b318              CBZ      r0,|L1.358|
;;;151            WM_PID_STATE_CHANGED_INFO Info;
;;;152            WM_Obj* pWin;
;;;153            pWin = WM_H2P(CHWin.hWin);
00011e  f9bd002c          LDRSH    r0,[sp,#0x2c]
000122  f7fffffe          BL       GUI_ALLOC_h2p
000126  4604              MOV      r4,r0
;;;154            Info.State     = StateNew.Pressed;
000128  f89d0018          LDRB     r0,[sp,#0x18]
00012c  f88d000c          STRB     r0,[sp,#0xc]
;;;155            Info.StatePrev = WM_PID__StateLast.Pressed;
000130  483d              LDR      r0,|L1.552|
000132  7a00              LDRB     r0,[r0,#8]  ; WM_PID__StateLast
000134  f88d000d          STRB     r0,[sp,#0xd]
;;;156            Info.x         = StateNew.x - pWin->Rect.x0;
000138  f9b41000          LDRSH    r1,[r4,#0]
00013c  9804              LDR      r0,[sp,#0x10]
00013e  eba00001          SUB      r0,r0,r1
000142  9001              STR      r0,[sp,#4]
;;;157            Info.y         = StateNew.y - pWin->Rect.y0;
000144  f9b41002          LDRSH    r1,[r4,#2]
000148  9805              LDR      r0,[sp,#0x14]
00014a  eba00001          SUB      r0,r0,r1
00014e  9002              STR      r0,[sp,#8]
;;;158            Msg.Data.p = &Info;
000150  a801              ADD      r0,sp,#4
000152  900e              STR      r0,[sp,#0x38]
;;;159            Msg.MsgId  = WM_PID_STATE_CHANGED;
000154  f04f0011          MOV      r0,#0x11
000158  900c              STR      r0,[sp,#0x30]
;;;160            WM__SendMessageIfEnabled(CHWin.hWin, &Msg);
00015a  f9bd002c          LDRSH    r0,[sp,#0x2c]
00015e  a90c              ADD      r1,sp,#0x30
000160  f7fffffe          BL       WM__SendMessageIfEnabled
;;;161          }
000164  bf00              NOP      
                  |L1.358|
;;;162          /*
;;;163           * Send WM_TOUCH message(s)
;;;164           * Note that we may have to send 2 touch messages.
;;;165           */
;;;166          if (WM_PID__StateLast.Pressed | StateNew.Pressed) {    /* Only if pressed or just released */
000166  4830              LDR      r0,|L1.552|
000168  7a00              LDRB     r0,[r0,#8]  ; WM_PID__StateLast
00016a  f89d1018          LDRB     r1,[sp,#0x18]
00016e  4308              ORRS     r0,r0,r1
000170  d04c              BEQ      |L1.524|
;;;167            Msg.MsgId = WM_TOUCH;
000172  f04f000c          MOV      r0,#0xc
000176  900c              STR      r0,[sp,#0x30]
;;;168            r = 1;
000178  f04f0501          MOV      r5,#1
;;;169            /*
;;;170             * Tell window if it is no longer pressed
;;;171             * This happens for 2 possible reasons:
;;;172             * a) PID is released
;;;173             * b) PID is moved out
;;;174             */
;;;175            if (WM__CHWinLast.hWin != CHWin.hWin) {
00017c  482b              LDR      r0,|L1.556|
00017e  f9b00004          LDRSH    r0,[r0,#4]  ; WM__CHWinLast
000182  f9bd102c          LDRSH    r1,[sp,#0x2c]
000186  4288              CMP      r0,r1
000188  d01f              BEQ      |L1.458|
;;;176              if (WM__CHWinLast.hWin != 0) {
00018a  4828              LDR      r0,|L1.556|
00018c  8880              LDRH     r0,[r0,#4]  ; WM__CHWinLast
00018e  b1e0              CBZ      r0,|L1.458|
;;;177                if (StateNew.Pressed) {
000190  f89d0018          LDRB     r0,[sp,#0x18]
000194  b118              CBZ      r0,|L1.414|
;;;178                  /* Moved out -> no longer in this window
;;;179                   * Send a NULL pointer as data
;;;180                   */
;;;181                  Msg.Data.p = NULL;
000196  f04f0000          MOV      r0,#0
00019a  900e              STR      r0,[sp,#0x38]
00019c  e00b              B        |L1.438|
                  |L1.414|
;;;182                } else {
;;;183                  /* Last window needs to know that it has been "Released"
;;;184                   * Send last coordinates 
;;;185                   */
;;;186                  State.x       = WM_PID__StateLast.x;
00019e  4822              LDR      r0,|L1.552|
0001a0  6800              LDR      r0,[r0,#0]  ; WM_PID__StateLast
0001a2  9007              STR      r0,[sp,#0x1c]
;;;187                  State.y       = WM_PID__StateLast.y;
0001a4  4820              LDR      r0,|L1.552|
0001a6  6840              LDR      r0,[r0,#4]  ; WM_PID__StateLast
0001a8  9008              STR      r0,[sp,#0x20]
;;;188                  State.Pressed = 0;
0001aa  f04f0000          MOV      r0,#0
0001ae  f88d0024          STRB     r0,[sp,#0x24]
;;;189                  Msg.Data.p = (void*)&State;
0001b2  a807              ADD      r0,sp,#0x1c
0001b4  900e              STR      r0,[sp,#0x38]
                  |L1.438|
;;;190                }
;;;191                GUI_DEBUG_LOG1 ("\nSending WM_Touch to LastWindow %d (out of area)", WM__CHWinLast.hWin);
;;;192                WM__SendTouchMessage(WM__CHWinLast.hWin, &Msg);
0001b6  491d              LDR      r1,|L1.556|
0001b8  f9b10004          LDRSH    r0,[r1,#4]  ; WM__CHWinLast
0001bc  a90c              ADD      r1,sp,#0x30
0001be  f7fffffe          BL       WM__SendTouchMessage
;;;193                WM__CHWinLast.hWin = 0;
0001c2  f04f0000          MOV      r0,#0
0001c6  4919              LDR      r1,|L1.556|
0001c8  8088              STRH     r0,[r1,#4]
                  |L1.458|
;;;194              }
;;;195            }
;;;196            /* Sending WM_Touch to current window */
;;;197            if (CHWin.hWin) {
0001ca  f8bd002c          LDRH     r0,[sp,#0x2c]
0001ce  b160              CBZ      r0,|L1.490|
;;;198              /* convert screen into window coordinates */
;;;199              State = StateNew;
0001d0  a804              ADD      r0,sp,#0x10
0001d2  c807              LDM      r0,{r0-r2}
0001d4  ab07              ADD      r3,sp,#0x1c
0001d6  c307              STM      r3!,{r0-r2}
;;;200              /* Remember window */
;;;201              if (State.Pressed) {
0001d8  f89d0024          LDRB     r0,[sp,#0x24]
0001dc  b130              CBZ      r0,|L1.492|
;;;202                WM__CHWinLast.hWin = CHWin.hWin;
0001de  f8bd002c          LDRH     r0,[sp,#0x2c]
0001e2  4912              LDR      r1,|L1.556|
0001e4  8088              STRH     r0,[r1,#4]
0001e6  e00a              B        |L1.510|
                  |L1.488|
0001e8  e014              B        |L1.532|
                  |L1.490|
0001ea  e00f              B        |L1.524|
                  |L1.492|
;;;203              } else {
;;;204                /* Handle automatic capture release */
;;;205                if (WM__CaptureReleaseAuto) {
0001ec  4810              LDR      r0,|L1.560|
0001ee  7800              LDRB     r0,[r0,#0]  ; WM__CaptureReleaseAuto
0001f0  b108              CBZ      r0,|L1.502|
;;;206                  WM_ReleaseCapture();
0001f2  f7fffffe          BL       WM_ReleaseCapture
                  |L1.502|
;;;207                }
;;;208                WM__CHWinLast.hWin = 0;
0001f6  f04f0000          MOV      r0,#0
0001fa  490c              LDR      r1,|L1.556|
0001fc  8088              STRH     r0,[r1,#4]
                  |L1.510|
;;;209              }
;;;210              Msg.Data.p = (void*)&State;
0001fe  a807              ADD      r0,sp,#0x1c
000200  900e              STR      r0,[sp,#0x38]
;;;211              WM__SendTouchMessage(CHWin.hWin, &Msg);
000202  f9bd002c          LDRSH    r0,[sp,#0x2c]
000206  a90c              ADD      r1,sp,#0x30
000208  f7fffffe          BL       WM__SendTouchMessage
                  |L1.524|
;;;212            }
;;;213          }
;;;214          /*
;;;215           * Send WM_MOUSEOVER message
;;;216           */
;;;217          #if GUI_SUPPORT_MOUSE
;;;218          else {
;;;219            /* Send WM_MOUSEOVER Message */
;;;220            if (CHWin.hWin) {
;;;221              /* Do not send messages to disabled windows */
;;;222              if (WM__IsEnabled(CHWin.hWin)) {
;;;223                State      = StateNew;
;;;224                Msg.MsgId  = WM_MOUSEOVER;
;;;225                Msg.Data.p = (void*)&State;
;;;226                WM__SendTouchMessage(CHWin.hWin, &Msg);
;;;227              }
;;;228            }
;;;229          }
;;;230          #endif
;;;231        }
;;;232        /* Store the new state */
;;;233        WM_PID__StateLast = StateNew;
00020c  4806              LDR      r0,|L1.552|
00020e  a904              ADD      r1,sp,#0x10
000210  c90e              LDM      r1,{r1-r3}
000212  c00e              STM      r0!,{r1-r3}
                  |L1.532|
;;;234      }
;;;235      WM__RemoveCriticalHandle(&CHWin);
000214  a80a              ADD      r0,sp,#0x28
000216  f7fffffe          BL       WM__RemoveCriticalHandle
;;;236      WM_UNLOCK();
;;;237      return r;
00021a  4628              MOV      r0,r5
;;;238    }
00021c  b00f              ADD      sp,sp,#0x3c
00021e  bd30              POP      {r4,r5,pc}
;;;239    
                          ENDP

                  |L1.544|
                          DCD      WM__CHWinModal
                  |L1.548|
                          DCD      WM__hCapture
                  |L1.552|
                          DCD      WM_PID__StateLast
                  |L1.556|
                          DCD      WM__CHWinLast
                  |L1.560|
                          DCD      WM__CaptureReleaseAuto

                          AREA ||.data||, DATA, ALIGN=2

                  WM__CHWinModal
                          %        8
                  WM__CHWinLast
                          %        8
