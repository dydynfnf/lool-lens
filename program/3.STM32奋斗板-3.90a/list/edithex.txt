; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\edithex.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\edithex.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -I.\GUI\AntiAlias -I.\GUI\Config -I.\GUI\ConvertColor -I.\GUI\ConvertMono -I.\GUI\Core -I.\GUI\Font -I.\GUI\GUI_X -I.\GUI\JPEG -I.\GUI\LCDDriver -I.\GUI\MemDev -I.\GUI\MultiLayer -I.\GUI\Widget -I.\GUI\WM -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\INC\ST\STM32F10x -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\edithex.crf GUI\Widget\EDITHex.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _HexChar2Int PROC
;;;48     */
;;;49     static int _HexChar2Int(int Char) {
000000  4601              MOV      r1,r0
;;;50       if ((Char >= '0') && (Char <= '9'))
000002  2930              CMP      r1,#0x30
000004  db04              BLT      |L1.16|
000006  2939              CMP      r1,#0x39
000008  dc02              BGT      |L1.16|
;;;51         return Char - '0';
00000a  f1a10030          SUB      r0,r1,#0x30
                  |L1.14|
;;;52       Char &= ~0x20;
;;;53       if ((Char >= 'A') && (Char <= 'F'))
;;;54         return Char - 'A' + 10;
;;;55       return -1;
;;;56     }
00000e  4770              BX       lr
                  |L1.16|
000010  f0210120          BIC      r1,r1,#0x20           ;52
000014  2941              CMP      r1,#0x41              ;53
000016  db04              BLT      |L1.34|
000018  2946              CMP      r1,#0x46              ;53
00001a  dc02              BGT      |L1.34|
00001c  f1a10037          SUB      r0,r1,#0x37           ;54
000020  e7f5              B        |L1.14|
                  |L1.34|
000022  f04f30ff          MOV      r0,#0xffffffff        ;55
000026  e7f2              B        |L1.14|
;;;57     
                          ENDP

                  _UpdateBuffer PROC
;;;61     */
;;;62     static void _UpdateBuffer(EDIT_Handle hObj) {
000028  b538              PUSH     {r3-r5,lr}
00002a  4605              MOV      r5,r0
;;;63       char * s;
;;;64       EDIT_Obj * pObj;
;;;65       pObj = EDIT_H2P(hObj); /* The GUI needs not to be locked here. This function is called only from EDIT_AddKey which has already locked the GUI */
00002c  4628              MOV      r0,r5
00002e  f7fffffe          BL       GUI_ALLOC_h2p
000032  4604              MOV      r4,r0
;;;66       s = (char*) GUI_ALLOC_h2p(pObj->hpText);
000034  f9b40028          LDRSH    r0,[r4,#0x28]
000038  f7fffffe          BL       GUI_ALLOC_h2p
00003c  9000              STR      r0,[sp,#0]
;;;67       GUI_AddHex(pObj->CurrentValue, pObj->MaxLen, &s);
00003e  8d62              LDRH     r2,[r4,#0x2a]
000040  b2d1              UXTB     r1,r2
000042  466a              MOV      r2,sp
000044  6be0              LDR      r0,[r4,#0x3c]
000046  f7fffffe          BL       GUI_AddHex
;;;68     }
00004a  bd38              POP      {r3-r5,pc}
;;;69     
                          ENDP

                  _EditHex PROC
;;;73     */
;;;74     static void _EditHex(int Nibble, EDIT_Obj* pObj, EDIT_Handle hObj) {
00004c  e92d47f0          PUSH     {r4-r10,lr}
000050  4605              MOV      r5,r0
000052  460c              MOV      r4,r1
000054  4616              MOV      r6,r2
;;;75       int Pos = pObj->MaxLen - pObj->CursorPos - 1;   /* Nibble position */
000056  f9b4002a          LDRSH    r0,[r4,#0x2a]
00005a  6c21              LDR      r1,[r4,#0x40]
00005c  eba00001          SUB      r0,r0,r1
000060  f1a00701          SUB      r7,r0,#1
;;;76       U32 AndMask = ~(15     << (Pos << 2));
000064  ea4f0187          LSL      r1,r7,#2
000068  f04f000f          MOV      r0,#0xf
00006c  fa00f001          LSL      r0,r0,r1
000070  ea6f0900          MVN      r9,r0
;;;77       U32 OrMask  =   Nibble << (Pos << 2);
000074  ea4f0087          LSL      r0,r7,#2
000078  fa05fa00          LSL      r10,r5,r0
;;;78       I32 Result  = pObj->CurrentValue & AndMask;
00007c  6be0              LDR      r0,[r4,#0x3c]
00007e  ea000809          AND      r8,r0,r9
;;;79       Result     |= OrMask;
000082  ea48080a          ORR      r8,r8,r10
;;;80       EDIT_SetValue(hObj, Result);
000086  4641              MOV      r1,r8
000088  4630              MOV      r0,r6
00008a  f7fffffe          BL       EDIT_SetValue
;;;81     }
00008e  e8bd87f0          POP      {r4-r10,pc}
;;;82     
                          ENDP

                  _GetNumDigits PROC
;;;99     */
;;;100    static int _GetNumDigits(U32 Value) {
000092  4601              MOV      r1,r0
;;;101      int Ret;
;;;102      for (Ret = 0; Value; Value >>= 4, Ret++);
000094  f04f0000          MOV      r0,#0
000098  e003              B        |L1.162|
                  |L1.154|
00009a  ea4f1111          LSR      r1,r1,#4
00009e  f1000001          ADD      r0,r0,#1
                  |L1.162|
0000a2  2900              CMP      r1,#0
0000a4  d1f9              BNE      |L1.154|
;;;103      return Ret;
;;;104    }
0000a6  4770              BX       lr
;;;105    
                          ENDP

                  _AddPosition PROC
;;;109    */
;;;110    static void _AddPosition(EDIT_Obj* pObj, EDIT_Handle hObj, int Sign) {
0000a8  e92d41f0          PUSH     {r4-r8,lr}
0000ac  4604              MOV      r4,r0
0000ae  460e              MOV      r6,r1
0000b0  4617              MOV      r7,r2
;;;111      int Pos;
;;;112      U32 v;
;;;113      v = 1;
0000b2  f04f0501          MOV      r5,#1
;;;114      Pos = pObj->MaxLen - pObj->CursorPos - 1;
0000b6  f9b4002a          LDRSH    r0,[r4,#0x2a]
0000ba  6c21              LDR      r1,[r4,#0x40]
0000bc  eba00001          SUB      r0,r0,r1
0000c0  f1a00801          SUB      r8,r0,#1
;;;115      while (Pos--) {
0000c4  e001              B        |L1.202|
                  |L1.198|
;;;116        v <<= 4;
0000c6  ea4f1505          LSL      r5,r5,#4
                  |L1.202|
0000ca  ea5f0008          MOVS     r0,r8                 ;115
0000ce  f1a80801          SUB      r8,r8,#1              ;115
0000d2  d1f8              BNE      |L1.198|
;;;117      }
;;;118      if (Sign < 0)
0000d4  2f00              CMP      r7,#0
0000d6  da03              BGE      |L1.224|
;;;119        v = ~v + 1;
0000d8  ea6f0005          MVN      r0,r5
0000dc  f1000501          ADD      r5,r0,#1
                  |L1.224|
;;;120      EDIT_SetValue(hObj, pObj->CurrentValue + v);
0000e0  6be0              LDR      r0,[r4,#0x3c]
0000e2  1941              ADDS     r1,r0,r5
0000e4  4630              MOV      r0,r6
0000e6  f7fffffe          BL       EDIT_SetValue
;;;121    }
0000ea  e8bd81f0          POP      {r4-r8,pc}
;;;122    
                          ENDP

                  _AddKeyHex PROC
;;;132    */
;;;133    static void _AddKeyHex(EDIT_Handle hObj, int Key) {
0000ee  e92d41f0          PUSH     {r4-r8,lr}
0000f2  4605              MOV      r5,r0
0000f4  460e              MOV      r6,r1
;;;134      EDIT_Obj * pObj;
;;;135      pObj = EDIT_H2P(hObj); /* The GUI needs not to be locked here. This function is called only from EDIT_AddKey which has already locked the GUI */
0000f6  4628              MOV      r0,r5
0000f8  f7fffffe          BL       GUI_ALLOC_h2p
0000fc  4604              MOV      r4,r0
;;;136      if (pObj) {
0000fe  b39c              CBZ      r4,|L1.360|
;;;137        switch (Key) {
000100  2e10              CMP      r6,#0x10
000102  d019              BEQ      |L1.312|
000104  2e11              CMP      r6,#0x11
000106  d004              BEQ      |L1.274|
000108  2e12              CMP      r6,#0x12
00010a  d00f              BEQ      |L1.300|
00010c  2e13              CMP      r6,#0x13
00010e  d119              BNE      |L1.324|
000110  e005              B        |L1.286|
                  |L1.274|
;;;138          #if EDIT_HEX_DIGITONLY
;;;139          case GUI_KEY_UP:
;;;140            {
;;;141              int Nibble = (_GetCurrentNibble(pObj) + 1) & 15;
;;;142              _EditHex(Nibble, pObj, hObj);
;;;143            }
;;;144            break;
;;;145          case GUI_KEY_DOWN:
;;;146            {
;;;147              int Nibble = (_GetCurrentNibble(pObj) + 1) & 15;
;;;148              _EditHex(Nibble, pObj, hObj);
;;;149            }
;;;150            break;
;;;151          #else
;;;152          case GUI_KEY_UP:
;;;153            _AddPosition(pObj, hObj, 1);
000112  2201              MOVS     r2,#1
000114  4629              MOV      r1,r5
000116  4620              MOV      r0,r4
000118  f7fffffe          BL       _AddPosition
;;;154            break;
00011c  e023              B        |L1.358|
                  |L1.286|
;;;155          case GUI_KEY_DOWN:
;;;156            _AddPosition(pObj, hObj, -1);
00011e  f04f32ff          MOV      r2,#0xffffffff
000122  4629              MOV      r1,r5
000124  4620              MOV      r0,r4
000126  f7fffffe          BL       _AddPosition
;;;157            break;
00012a  e01c              B        |L1.358|
                  |L1.300|
;;;158          #endif
;;;159          case GUI_KEY_RIGHT:
;;;160            EDIT__SetCursorPos(pObj, pObj->CursorPos + 1);
00012c  6c20              LDR      r0,[r4,#0x40]
00012e  1c41              ADDS     r1,r0,#1
000130  4620              MOV      r0,r4
000132  f7fffffe          BL       EDIT__SetCursorPos
;;;161            break;
000136  e016              B        |L1.358|
                  |L1.312|
;;;162          case GUI_KEY_LEFT:
;;;163            EDIT__SetCursorPos(pObj, pObj->CursorPos - 1);
000138  6c20              LDR      r0,[r4,#0x40]
00013a  1e41              SUBS     r1,r0,#1
00013c  4620              MOV      r0,r4
00013e  f7fffffe          BL       EDIT__SetCursorPos
;;;164            break;
000142  e010              B        |L1.358|
                  |L1.324|
;;;165          default:
;;;166            {
;;;167              int Nibble = _HexChar2Int(Key);
000144  4630              MOV      r0,r6
000146  f7fffffe          BL       _HexChar2Int
00014a  4607              MOV      r7,r0
;;;168              if (Nibble >= 0) {
00014c  2f00              CMP      r7,#0
00014e  db09              BLT      |L1.356|
;;;169                _EditHex(Nibble, pObj, hObj);
000150  462a              MOV      r2,r5
000152  4621              MOV      r1,r4
000154  4638              MOV      r0,r7
000156  f7fffffe          BL       _EditHex
;;;170                EDIT__SetCursorPos(pObj, pObj->CursorPos + 1);
00015a  6c20              LDR      r0,[r4,#0x40]
00015c  1c41              ADDS     r1,r0,#1
00015e  4620              MOV      r0,r4
000160  f7fffffe          BL       EDIT__SetCursorPos
                  |L1.356|
;;;171              }
;;;172            }
;;;173            break;
000164  bf00              NOP      
                  |L1.358|
000166  bf00              NOP                            ;154
                  |L1.360|
;;;174        }
;;;175      }
;;;176      _UpdateBuffer(hObj);
000168  4628              MOV      r0,r5
00016a  f7fffffe          BL       _UpdateBuffer
;;;177    }
00016e  e8bd81f0          POP      {r4-r8,pc}
;;;178    
                          ENDP

                  EDIT_SetHexMode PROC
;;;188    */
;;;189    void EDIT_SetHexMode(EDIT_Handle hEdit, U32 Value, U32 Min, U32 Max) {
000172  e92d47f0          PUSH     {r4-r10,lr}
000176  4607              MOV      r7,r0
000178  4688              MOV      r8,r1
00017a  4691              MOV      r9,r2
00017c  461e              MOV      r6,r3
;;;190      EDIT_Obj* pObj;
;;;191      WM_LOCK();
;;;192      if (hEdit) {
00017e  b377              CBZ      r7,|L1.478|
;;;193        int MaxLen;
;;;194        pObj = EDIT_H2P(hEdit);
000180  4638              MOV      r0,r7
000182  f7fffffe          BL       GUI_ALLOC_h2p
000186  4604              MOV      r4,r0
;;;195        pObj->pfAddKeyEx = _AddKeyHex;
000188  4816              LDR      r0,|L1.484|
00018a  64e0              STR      r0,[r4,#0x4c]
;;;196        pObj->pfUpdateBuffer= _UpdateBuffer;
00018c  4816              LDR      r0,|L1.488|
00018e  6520              STR      r0,[r4,#0x50]
;;;197        pObj->CurrentValue = Value;
000190  f8c4803c          STR      r8,[r4,#0x3c]
;;;198        pObj->CursorPos = 0;
000194  f04f0000          MOV      r0,#0
000198  6420              STR      r0,[r4,#0x40]
;;;199        MaxLen = pObj->MaxLen;
00019a  f9b4502a          LDRSH    r5,[r4,#0x2a]
;;;200        if (MaxLen <= 0 ) {
00019e  2d00              CMP      r5,#0
0001a0  dc03              BGT      |L1.426|
;;;201          MaxLen = _GetNumDigits(Max);
0001a2  4630              MOV      r0,r6
0001a4  f7fffffe          BL       _GetNumDigits
0001a8  4605              MOV      r5,r0
                  |L1.426|
;;;202        }
;;;203        if (MaxLen > 8) {
0001aa  2d08              CMP      r5,#8
0001ac  dd01              BLE      |L1.434|
;;;204          MaxLen = 8;
0001ae  f04f0508          MOV      r5,#8
                  |L1.434|
;;;205        }
;;;206        if (MaxLen != pObj->MaxLen) {
0001b2  f9b4002a          LDRSH    r0,[r4,#0x2a]
0001b6  42a8              CMP      r0,r5
0001b8  d003              BEQ      |L1.450|
;;;207          EDIT_SetMaxLen(hEdit, MaxLen);
0001ba  4629              MOV      r1,r5
0001bc  4638              MOV      r0,r7
0001be  f7fffffe          BL       EDIT_SetMaxLen
                  |L1.450|
;;;208        }
;;;209        pObj->Min = Min;
0001c2  f8c49030          STR      r9,[r4,#0x30]
;;;210        pObj->Max = Max;
0001c6  6366              STR      r6,[r4,#0x34]
;;;211        pObj->EditMode = GUI_EDIT_MODE_OVERWRITE;
0001c8  f04f0001          MOV      r0,#1
0001cc  f8840048          STRB     r0,[r4,#0x48]
;;;212        _UpdateBuffer(hEdit);
0001d0  4638              MOV      r0,r7
0001d2  f7fffffe          BL       _UpdateBuffer
;;;213        WM_Invalidate(hEdit);
0001d6  4638              MOV      r0,r7
0001d8  f7fffffe          BL       WM_InvalidateWindow
;;;214      }
0001dc  bf00              NOP      
                  |L1.478|
;;;215      WM_UNLOCK();
;;;216    }
0001de  e8bd87f0          POP      {r4-r10,pc}
;;;217    
                          ENDP

0001e2  0000              DCW      0x0000
                  |L1.484|
                          DCD      _AddKeyHex
                  |L1.488|
                          DCD      _UpdateBuffer
