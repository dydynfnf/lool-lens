; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\usb_prop.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\usb_prop.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\FWlib\inc -I.\user -I.\CM3 -I.\MALLOC -I.\TFT -I.\EMWIN\EMWIN_INC -I.\EMWIN\DEMO -I.\PNG -I.\FATFS -I.\SDIO -I.\USB\inc -I.\USBCFG\inc -IE:\material\GUI\8.STM32·Ü¶·°å-emwin+fatfs+usb\RTE -Id:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.0.0 -Id:\Keil_v5\ARM\CMSIS\Include -Id:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.0.0\Device\Include -D__UVISION_VERSION=514 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\usb_prop.crf USBCFG\scr\usb_prop.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  MASS_init PROC
;;;111    *******************************************************************************/
;;;112    void MASS_init()
000000  b510              PUSH     {r4,lr}
;;;113    {
;;;114      /* Update the serial number string descriptor with the data from the unique
;;;115      ID*/
;;;116      Get_SerialNum();
000002  f7fffffe          BL       Get_SerialNum
;;;117    
;;;118      pInformation->Current_Configuration = 0;
000006  2000              MOVS     r0,#0
000008  498c              LDR      r1,|L1.572|
00000a  6809              LDR      r1,[r1,#0]  ; pInformation
00000c  7288              STRB     r0,[r1,#0xa]
;;;119    
;;;120      /* Connect the device */
;;;121      PowerOn();
00000e  f7fffffe          BL       PowerOn
;;;122    
;;;123      /* Perform basic device initialization operations */
;;;124      USB_SIL_Init();
000012  f7fffffe          BL       USB_SIL_Init
;;;125    
;;;126      bDeviceState = UNCONNECTED;
000016  2000              MOVS     r0,#0
000018  4989              LDR      r1,|L1.576|
00001a  6008              STR      r0,[r1,#0]  ; bDeviceState
;;;127    }
00001c  bd10              POP      {r4,pc}
;;;128    
                          ENDP

                  MASS_Reset PROC
;;;135    *******************************************************************************/
;;;136    void MASS_Reset()
00001e  b510              PUSH     {r4,lr}
;;;137    {
;;;138      /* Set the device as not configured */
;;;139      Device_Info.Current_Configuration = 0;
000020  2000              MOVS     r0,#0
000022  4988              LDR      r1,|L1.580|
000024  7288              STRB     r0,[r1,#0xa]
;;;140    
;;;141      /* Current Feature initialization */
;;;142      pInformation->Current_Feature = MASS_ConfigDescriptor[7];
000026  4888              LDR      r0,|L1.584|
000028  79c0              LDRB     r0,[r0,#7]  ; MASS_ConfigDescriptor
00002a  4984              LDR      r1,|L1.572|
00002c  6809              LDR      r1,[r1,#0]  ; pInformation
00002e  7248              STRB     r0,[r1,#9]
;;;143    
;;;144    #ifdef STM32F10X_CL   
;;;145      
;;;146      /* EP0 is already configured by USB_SIL_Init() function */
;;;147    
;;;148      /* Init EP1 IN as Bulk endpoint */
;;;149      OTG_DEV_EP_Init(EP1_IN, OTG_DEV_EP_TYPE_BULK, BULK_MAX_PACKET_SIZE);
;;;150      
;;;151      /* Init EP2 OUT as Bulk endpoint */
;;;152      OTG_DEV_EP_Init(EP2_OUT, OTG_DEV_EP_TYPE_BULK, BULK_MAX_PACKET_SIZE); 
;;;153      
;;;154    #else 
;;;155    
;;;156      SetBTABLE(BTABLE_ADDRESS);
000030  2000              MOVS     r0,#0
000032  f7fffffe          BL       SetBTABLE
;;;157    
;;;158      /* Initialize Endpoint 0 */
;;;159      SetEPType(ENDP0, EP_CONTROL);
000036  f44f7100          MOV      r1,#0x200
00003a  2000              MOVS     r0,#0
00003c  f7fffffe          BL       SetEPType
;;;160      SetEPTxStatus(ENDP0, EP_TX_NAK);
000040  2120              MOVS     r1,#0x20
000042  2000              MOVS     r0,#0
000044  f7fffffe          BL       SetEPTxStatus
;;;161      SetEPRxAddr(ENDP0, ENDP0_RXADDR);
000048  2118              MOVS     r1,#0x18
00004a  2000              MOVS     r0,#0
00004c  f7fffffe          BL       SetEPRxAddr
;;;162      SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
000050  487e              LDR      r0,|L1.588|
000052  f890102c          LDRB     r1,[r0,#0x2c]  ; Device_Property
000056  2000              MOVS     r0,#0
000058  f7fffffe          BL       SetEPRxCount
;;;163      SetEPTxAddr(ENDP0, ENDP0_TXADDR);
00005c  2158              MOVS     r1,#0x58
00005e  2000              MOVS     r0,#0
000060  f7fffffe          BL       SetEPTxAddr
;;;164      Clear_Status_Out(ENDP0);
000064  2000              MOVS     r0,#0
000066  f7fffffe          BL       Clear_Status_Out
;;;165      SetEPRxValid(ENDP0);
00006a  2000              MOVS     r0,#0
00006c  f7fffffe          BL       SetEPRxValid
;;;166    
;;;167      /* Initialize Endpoint 1 */
;;;168      SetEPType(ENDP1, EP_BULK);
000070  2100              MOVS     r1,#0
000072  2001              MOVS     r0,#1
000074  f7fffffe          BL       SetEPType
;;;169      SetEPTxAddr(ENDP1, ENDP1_TXADDR);
000078  2198              MOVS     r1,#0x98
00007a  2001              MOVS     r0,#1
00007c  f7fffffe          BL       SetEPTxAddr
;;;170      SetEPTxStatus(ENDP1, EP_TX_NAK);
000080  2120              MOVS     r1,#0x20
000082  2001              MOVS     r0,#1
000084  f7fffffe          BL       SetEPTxStatus
;;;171      SetEPRxStatus(ENDP1, EP_RX_DIS);
000088  2100              MOVS     r1,#0
00008a  2001              MOVS     r0,#1
00008c  f7fffffe          BL       SetEPRxStatus
;;;172    
;;;173      /* Initialize Endpoint 2 */
;;;174      SetEPType(ENDP2, EP_BULK);
000090  2100              MOVS     r1,#0
000092  2002              MOVS     r0,#2
000094  f7fffffe          BL       SetEPType
;;;175      SetEPRxAddr(ENDP2, ENDP2_RXADDR);
000098  21d8              MOVS     r1,#0xd8
00009a  2002              MOVS     r0,#2
00009c  f7fffffe          BL       SetEPRxAddr
;;;176      SetEPRxCount(ENDP2, Device_Property.MaxPacketSize);
0000a0  486a              LDR      r0,|L1.588|
0000a2  f890102c          LDRB     r1,[r0,#0x2c]  ; Device_Property
0000a6  2002              MOVS     r0,#2
0000a8  f7fffffe          BL       SetEPRxCount
;;;177      SetEPRxStatus(ENDP2, EP_RX_VALID);
0000ac  f44f5140          MOV      r1,#0x3000
0000b0  2002              MOVS     r0,#2
0000b2  f7fffffe          BL       SetEPRxStatus
;;;178      SetEPTxStatus(ENDP2, EP_TX_DIS);
0000b6  2100              MOVS     r1,#0
0000b8  2002              MOVS     r0,#2
0000ba  f7fffffe          BL       SetEPTxStatus
;;;179    
;;;180    
;;;181      SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
0000be  4863              LDR      r0,|L1.588|
0000c0  f890102c          LDRB     r1,[r0,#0x2c]  ; Device_Property
0000c4  2000              MOVS     r0,#0
0000c6  f7fffffe          BL       SetEPRxCount
;;;182      SetEPRxValid(ENDP0);
0000ca  2000              MOVS     r0,#0
0000cc  f7fffffe          BL       SetEPRxValid
;;;183    
;;;184      /* Set the device to response on default address */
;;;185      SetDeviceAddress(0);
0000d0  2000              MOVS     r0,#0
0000d2  f7fffffe          BL       SetDeviceAddress
;;;186    #endif /* STM32F10X_CL */
;;;187    
;;;188      bDeviceState = ATTACHED;
0000d6  2001              MOVS     r0,#1
0000d8  4959              LDR      r1,|L1.576|
0000da  6008              STR      r0,[r1,#0]  ; bDeviceState
;;;189    
;;;190      CBW.dSignature = BOT_CBW_SIGNATURE;
0000dc  485c              LDR      r0,|L1.592|
0000de  495d              LDR      r1,|L1.596|
0000e0  6008              STR      r0,[r1,#0]  ; CBW
;;;191      Bot_State = BOT_IDLE;
0000e2  2000              MOVS     r0,#0
0000e4  495c              LDR      r1,|L1.600|
0000e6  7008              STRB     r0,[r1,#0]
;;;192    
;;;193      USB_NotConfigured_LED();
0000e8  f7fffffe          BL       USB_NotConfigured_LED
;;;194    }
0000ec  bd10              POP      {r4,pc}
;;;195    
                          ENDP

                  Mass_Storage_SetConfiguration PROC
;;;202    *******************************************************************************/
;;;203    void Mass_Storage_SetConfiguration(void)
0000ee  b510              PUSH     {r4,lr}
;;;204    {
;;;205      if (pInformation->Current_Configuration != 0)
0000f0  4852              LDR      r0,|L1.572|
0000f2  6800              LDR      r0,[r0,#0]  ; pInformation
0000f4  7a80              LDRB     r0,[r0,#0xa]
0000f6  b158              CBZ      r0,|L1.272|
;;;206      {
;;;207        /* Device configured */
;;;208        bDeviceState = CONFIGURED;
0000f8  2005              MOVS     r0,#5
0000fa  4951              LDR      r1,|L1.576|
0000fc  6008              STR      r0,[r1,#0]  ; bDeviceState
;;;209    
;;;210    #ifdef STM32F10X_CL 
;;;211        /* Init EP1 IN as Bulk endpoint */
;;;212        OTG_DEV_EP_Init(EP1_IN, OTG_DEV_EP_TYPE_BULK, BULK_MAX_PACKET_SIZE);
;;;213      
;;;214        /* Init EP2 OUT as Bulk endpoint */
;;;215        OTG_DEV_EP_Init(EP2_OUT, OTG_DEV_EP_TYPE_BULK, BULK_MAX_PACKET_SIZE);     
;;;216    #else    
;;;217        ClearDTOG_TX(ENDP1);
0000fe  2001              MOVS     r0,#1
000100  f7fffffe          BL       ClearDTOG_TX
;;;218        ClearDTOG_RX(ENDP2);
000104  2002              MOVS     r0,#2
000106  f7fffffe          BL       ClearDTOG_RX
;;;219    #endif /* STM32F10X_CL */
;;;220    
;;;221        Bot_State = BOT_IDLE; /* set the Bot state machine to the IDLE state */
00010a  2000              MOVS     r0,#0
00010c  4952              LDR      r1,|L1.600|
00010e  7008              STRB     r0,[r1,#0]
                  |L1.272|
;;;222      }
;;;223    }
000110  bd10              POP      {r4,pc}
;;;224    
                          ENDP

                  Mass_Storage_ClearFeature PROC
;;;231    *******************************************************************************/
;;;232    void Mass_Storage_ClearFeature(void)
000112  b510              PUSH     {r4,lr}
;;;233    {
;;;234      /* when the host send a CBW with invalid signature or invalid length the two
;;;235         Endpoints (IN & OUT) shall stall until receiving a Mass Storage Reset     */
;;;236      if (CBW.dSignature != BOT_CBW_SIGNATURE)
000114  484f              LDR      r0,|L1.596|
000116  6800              LDR      r0,[r0,#0]  ; CBW
000118  494d              LDR      r1,|L1.592|
00011a  4288              CMP      r0,r1
00011c  d002              BEQ      |L1.292|
;;;237        Bot_Abort(BOTH_DIR);
00011e  2002              MOVS     r0,#2
000120  f7fffffe          BL       Bot_Abort
                  |L1.292|
;;;238    }
000124  bd10              POP      {r4,pc}
;;;239    
                          ENDP

                  Mass_Storage_SetDeviceAddress PROC
;;;246    *******************************************************************************/
;;;247    void Mass_Storage_SetDeviceAddress (void)
000126  2004              MOVS     r0,#4
;;;248    {
;;;249      bDeviceState = ADDRESSED;
000128  4945              LDR      r1,|L1.576|
00012a  6008              STR      r0,[r1,#0]  ; bDeviceState
;;;250    }
00012c  4770              BX       lr
;;;251    /*******************************************************************************
                          ENDP

                  MASS_Status_In PROC
;;;257    *******************************************************************************/
;;;258    void MASS_Status_In(void)
00012e  4770              BX       lr
;;;259    {
;;;260      return;
;;;261    }
;;;262    
                          ENDP

                  MASS_Status_Out PROC
;;;269    *******************************************************************************/
;;;270    void MASS_Status_Out(void)
000130  4770              BX       lr
;;;271    {
;;;272      return;
;;;273    }
;;;274    
                          ENDP

                  Get_Max_Lun PROC
;;;419    *******************************************************************************/
;;;420    uint8_t *Get_Max_Lun(uint16_t Length)
000132  4601              MOV      r1,r0
;;;421    {
;;;422      if (Length == 0)
000134  b929              CBNZ     r1,|L1.322|
;;;423      {
;;;424        pInformation->Ctrl_Info.Usb_wLength = LUN_DATA_LENGTH;
000136  2001              MOVS     r0,#1
000138  4a40              LDR      r2,|L1.572|
00013a  6812              LDR      r2,[r2,#0]  ; pInformation
00013c  8210              STRH     r0,[r2,#0x10]
;;;425        return 0;
00013e  2000              MOVS     r0,#0
                  |L1.320|
;;;426      }
;;;427      else
;;;428      {
;;;429        return((uint8_t*)(&Max_Lun));
;;;430      }
;;;431    }
000140  4770              BX       lr
                  |L1.322|
000142  4846              LDR      r0,|L1.604|
000144  e7fc              B        |L1.320|
;;;432    
                          ENDP

                  MASS_Data_Setup PROC
;;;281    *******************************************************************************/
;;;282    RESULT MASS_Data_Setup(uint8_t RequestNo)
000146  b570              PUSH     {r4-r6,lr}
;;;283    {
000148  4605              MOV      r5,r0
;;;284      uint8_t    *(*CopyRoutine)(uint16_t);
;;;285    
;;;286      CopyRoutine = NULL;
00014a  2400              MOVS     r4,#0
;;;287      if ((Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
00014c  483b              LDR      r0,|L1.572|
00014e  6800              LDR      r0,[r0,#0]  ; pInformation
000150  7800              LDRB     r0,[r0,#0]
000152  f000007f          AND      r0,r0,#0x7f
000156  2821              CMP      r0,#0x21
000158  d111              BNE      |L1.382|
;;;288          && (RequestNo == GET_MAX_LUN) && (pInformation->USBwValue == 0)
00015a  2dfe              CMP      r5,#0xfe
00015c  d10f              BNE      |L1.382|
00015e  4837              LDR      r0,|L1.572|
000160  6800              LDR      r0,[r0,#0]  ; pInformation
000162  8840              LDRH     r0,[r0,#2]
000164  b958              CBNZ     r0,|L1.382|
;;;289          && (pInformation->USBwIndex == 0) && (pInformation->USBwLength == 0x01))
000166  4835              LDR      r0,|L1.572|
000168  6800              LDR      r0,[r0,#0]  ; pInformation
00016a  8880              LDRH     r0,[r0,#4]
00016c  b938              CBNZ     r0,|L1.382|
00016e  4833              LDR      r0,|L1.572|
000170  6800              LDR      r0,[r0,#0]  ; pInformation
000172  88c0              LDRH     r0,[r0,#6]
000174  2801              CMP      r0,#1
000176  d102              BNE      |L1.382|
;;;290      {
;;;291        CopyRoutine = Get_Max_Lun;
000178  f2af0449          ADR      r4,Get_Max_Lun + 1
00017c  e001              B        |L1.386|
                  |L1.382|
;;;292      }
;;;293      else
;;;294      {
;;;295        return USB_UNSUPPORT;
00017e  2002              MOVS     r0,#2
                  |L1.384|
;;;296      }
;;;297    
;;;298      if (CopyRoutine == NULL)
;;;299      {
;;;300        return USB_UNSUPPORT;
;;;301      }
;;;302    
;;;303      pInformation->Ctrl_Info.CopyData = CopyRoutine;
;;;304      pInformation->Ctrl_Info.Usb_wOffset = 0;
;;;305      (*CopyRoutine)(0);
;;;306    
;;;307      return USB_SUCCESS;
;;;308    
;;;309    }
000180  bd70              POP      {r4-r6,pc}
                  |L1.386|
000182  b90c              CBNZ     r4,|L1.392|
000184  2002              MOVS     r0,#2                 ;300
000186  e7fb              B        |L1.384|
                  |L1.392|
000188  482c              LDR      r0,|L1.572|
00018a  6800              LDR      r0,[r0,#0]            ;303  ; pInformation
00018c  6184              STR      r4,[r0,#0x18]         ;303
00018e  2100              MOVS     r1,#0                 ;304
000190  482a              LDR      r0,|L1.572|
000192  6800              LDR      r0,[r0,#0]            ;304  ; pInformation
000194  8241              STRH     r1,[r0,#0x12]         ;304
000196  2000              MOVS     r0,#0                 ;305
000198  47a0              BLX      r4                    ;305
00019a  2000              MOVS     r0,#0                 ;307
00019c  e7f0              B        |L1.384|
;;;310    
                          ENDP

                  MASS_NoData_Setup PROC
;;;317    *******************************************************************************/
;;;318    RESULT MASS_NoData_Setup(uint8_t RequestNo)
00019e  b510              PUSH     {r4,lr}
;;;319    {
0001a0  4604              MOV      r4,r0
;;;320      if ((Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
0001a2  4826              LDR      r0,|L1.572|
0001a4  6800              LDR      r0,[r0,#0]  ; pInformation
0001a6  7800              LDRB     r0,[r0,#0]
0001a8  f000007f          AND      r0,r0,#0x7f
0001ac  2821              CMP      r0,#0x21
0001ae  d11a              BNE      |L1.486|
;;;321          && (RequestNo == MASS_STORAGE_RESET) && (pInformation->USBwValue == 0)
0001b0  2cff              CMP      r4,#0xff
0001b2  d118              BNE      |L1.486|
0001b4  4821              LDR      r0,|L1.572|
0001b6  6800              LDR      r0,[r0,#0]  ; pInformation
0001b8  8840              LDRH     r0,[r0,#2]
0001ba  b9a0              CBNZ     r0,|L1.486|
;;;322          && (pInformation->USBwIndex == 0) && (pInformation->USBwLength == 0x00))
0001bc  481f              LDR      r0,|L1.572|
0001be  6800              LDR      r0,[r0,#0]  ; pInformation
0001c0  8880              LDRH     r0,[r0,#4]
0001c2  b980              CBNZ     r0,|L1.486|
0001c4  481d              LDR      r0,|L1.572|
0001c6  6800              LDR      r0,[r0,#0]  ; pInformation
0001c8  88c0              LDRH     r0,[r0,#6]
0001ca  b960              CBNZ     r0,|L1.486|
;;;323      {
;;;324       #ifdef STM32F10X_CL 
;;;325        /* Init EP1 IN as Bulk endpoint */
;;;326        OTG_DEV_EP_Init(EP1_IN, OTG_DEV_EP_TYPE_BULK, BULK_MAX_PACKET_SIZE);
;;;327      
;;;328        /* Init EP2 OUT as Bulk endpoint */
;;;329        OTG_DEV_EP_Init(EP2_OUT, OTG_DEV_EP_TYPE_BULK, BULK_MAX_PACKET_SIZE);     
;;;330       #else
;;;331        /* Initialize Endpoint 1 */
;;;332        ClearDTOG_TX(ENDP1);
0001cc  2001              MOVS     r0,#1
0001ce  f7fffffe          BL       ClearDTOG_TX
;;;333    
;;;334        /* Initialize Endpoint 2 */
;;;335        ClearDTOG_RX(ENDP2);
0001d2  2002              MOVS     r0,#2
0001d4  f7fffffe          BL       ClearDTOG_RX
;;;336       #endif /* STM32F10X_CL */
;;;337    
;;;338        /*intialise the CBW signature to enable the clear feature*/
;;;339        CBW.dSignature = BOT_CBW_SIGNATURE;
0001d8  481d              LDR      r0,|L1.592|
0001da  491e              LDR      r1,|L1.596|
0001dc  6008              STR      r0,[r1,#0]  ; CBW
;;;340        Bot_State = BOT_IDLE;
0001de  2000              MOVS     r0,#0
0001e0  491d              LDR      r1,|L1.600|
0001e2  7008              STRB     r0,[r1,#0]
                  |L1.484|
;;;341    
;;;342        return USB_SUCCESS;
;;;343      }
;;;344      return USB_UNSUPPORT;
;;;345    }
0001e4  bd10              POP      {r4,pc}
                  |L1.486|
0001e6  2002              MOVS     r0,#2                 ;344
0001e8  e7fc              B        |L1.484|
;;;346    
                          ENDP

                  MASS_Get_Interface_Setting PROC
;;;354    *******************************************************************************/
;;;355    RESULT MASS_Get_Interface_Setting(uint8_t Interface, uint8_t AlternateSetting)
0001ea  4602              MOV      r2,r0
;;;356    {
;;;357      if (AlternateSetting > 0)
0001ec  2900              CMP      r1,#0
0001ee  dd01              BLE      |L1.500|
;;;358      {
;;;359        return USB_UNSUPPORT;/* in this application we don't have AlternateSetting*/
0001f0  2002              MOVS     r0,#2
                  |L1.498|
;;;360      }
;;;361      else if (Interface > 0)
;;;362      {
;;;363        return USB_UNSUPPORT;/*in this application we have only 1 interfaces*/
;;;364      }
;;;365      return USB_SUCCESS;
;;;366    }
0001f2  4770              BX       lr
                  |L1.500|
0001f4  2a00              CMP      r2,#0                 ;361
0001f6  dd01              BLE      |L1.508|
0001f8  2002              MOVS     r0,#2                 ;363
0001fa  e7fa              B        |L1.498|
                  |L1.508|
0001fc  2000              MOVS     r0,#0                 ;365
0001fe  e7f8              B        |L1.498|
;;;367    
                          ENDP

                  MASS_GetDeviceDescriptor PROC
;;;374    *******************************************************************************/
;;;375    uint8_t *MASS_GetDeviceDescriptor(uint16_t Length)
000200  b510              PUSH     {r4,lr}
;;;376    {
000202  4604              MOV      r4,r0
;;;377      return Standard_GetDescriptorData(Length, &Device_Descriptor );
000204  4916              LDR      r1,|L1.608|
000206  4620              MOV      r0,r4
000208  f7fffffe          BL       Standard_GetDescriptorData
;;;378    }
00020c  bd10              POP      {r4,pc}
;;;379    
                          ENDP

                  MASS_GetConfigDescriptor PROC
;;;386    *******************************************************************************/
;;;387    uint8_t *MASS_GetConfigDescriptor(uint16_t Length)
00020e  b510              PUSH     {r4,lr}
;;;388    {
000210  4604              MOV      r4,r0
;;;389      return Standard_GetDescriptorData(Length, &Config_Descriptor );
000212  4914              LDR      r1,|L1.612|
000214  4620              MOV      r0,r4
000216  f7fffffe          BL       Standard_GetDescriptorData
;;;390    }
00021a  bd10              POP      {r4,pc}
;;;391    
                          ENDP

                  MASS_GetStringDescriptor PROC
;;;398    *******************************************************************************/
;;;399    uint8_t *MASS_GetStringDescriptor(uint16_t Length)
00021c  b570              PUSH     {r4-r6,lr}
;;;400    {
00021e  4605              MOV      r5,r0
;;;401      uint8_t wValue0 = pInformation->USBwValue0;
000220  4806              LDR      r0,|L1.572|
000222  6800              LDR      r0,[r0,#0]  ; pInformation
000224  78c4              LDRB     r4,[r0,#3]
;;;402    
;;;403      if (wValue0 > 5)
000226  2c05              CMP      r4,#5
000228  dd01              BLE      |L1.558|
;;;404      {
;;;405        return NULL;
00022a  2000              MOVS     r0,#0
                  |L1.556|
;;;406      }
;;;407      else
;;;408      {
;;;409        return Standard_GetDescriptorData(Length, &String_Descriptor[wValue0]);
;;;410      }
;;;411    }
00022c  bd70              POP      {r4-r6,pc}
                  |L1.558|
00022e  480e              LDR      r0,|L1.616|
000230  eb0001c4          ADD      r1,r0,r4,LSL #3       ;409
000234  4628              MOV      r0,r5                 ;409
000236  f7fffffe          BL       Standard_GetDescriptorData
00023a  e7f7              B        |L1.556|
;;;412    
                          ENDP

                  |L1.572|
                          DCD      pInformation
                  |L1.576|
                          DCD      bDeviceState
                  |L1.580|
                          DCD      Device_Info
                  |L1.584|
                          DCD      MASS_ConfigDescriptor
                  |L1.588|
                          DCD      Device_Property
                  |L1.592|
                          DCD      0x43425355
                  |L1.596|
                          DCD      ||CBW||
                  |L1.600|
                          DCD      Bot_State
                  |L1.604|
                          DCD      Max_Lun
                  |L1.608|
                          DCD      Device_Descriptor
                  |L1.612|
                          DCD      Config_Descriptor
                  |L1.616|
                          DCD      String_Descriptor

                          AREA ||.data||, DATA, ALIGN=2

                  Max_Lun
                          DCD      0x00000000
                  Device_Table
000004  03010000          DCB      0x03,0x01,0x00,0x00
                  Device_Property
                          DCD      MASS_init
                          DCD      MASS_Reset
                          DCD      MASS_Status_In
                          DCD      MASS_Status_Out
                          DCD      MASS_Data_Setup
                          DCD      MASS_NoData_Setup
                          DCD      MASS_Get_Interface_Setting
                          DCD      MASS_GetDeviceDescriptor
                          DCD      MASS_GetConfigDescriptor
                          DCD      MASS_GetStringDescriptor
                          DCD      0x00000000
000034  40000000          DCB      0x40,0x00,0x00,0x00
                  User_Standard_Requests
                          DCD      NOP_Process
                          DCD      Mass_Storage_SetConfiguration
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      Mass_Storage_ClearFeature
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      Mass_Storage_SetDeviceAddress
                  Device_Descriptor
                          DCD      MASS_DeviceDescriptor
000060  0012              DCW      0x0012
000062  0000              DCB      0x00,0x00
                  Config_Descriptor
                          DCD      MASS_ConfigDescriptor
000068  0020              DCW      0x0020
00006a  0000              DCB      0x00,0x00
                  String_Descriptor
                          DCD      MASS_StringLangID
000070  0004              DCW      0x0004
000072  0000              DCB      0x00,0x00
                          DCD      MASS_StringVendor
000078  0026              DCW      0x0026
00007a  0000              DCB      0x00,0x00
                          DCD      MASS_StringProduct
000080  0026              DCW      0x0026
000082  0000              DCB      0x00,0x00
                          DCD      MASS_StringSerial
000088  001a              DCW      0x001a
00008a  0000              DCB      0x00,0x00
                          DCD      MASS_StringInterface
000090  0010              DCW      0x0010
000092  0000              DCB      0x00,0x00
