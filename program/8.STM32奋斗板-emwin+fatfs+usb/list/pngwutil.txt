; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\pngwutil.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\pngwutil.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\FWlib\inc -I.\user -I.\CM3 -I.\MALLOC -I.\TFT -I.\EMWIN\EMWIN_INC -I.\EMWIN\DEMO -I.\PNG -I.\FATFS -I.\SDIO -I.\USB\inc -I.\USBCFG\inc -IE:\material\GUI\8.STM32·Ü¶·°å-emwin+fatfs+usb\RTE -Id:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.0.0 -Id:\Keil_v5\ARM\CMSIS\Include -Id:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.0.0\Device\Include -D__UVISION_VERSION=514 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\pngwutil.crf PNG\pngwutil.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  png_save_uint_32 PROC
;;;19     void PNGAPI
;;;20     png_save_uint_32(png_bytep buf, png_uint_32 i)
000000  0e0a              LSRS     r2,r1,#24
;;;21     {
;;;22        buf[0] = (png_byte)((i >> 24) & 0xff);
000002  7002              STRB     r2,[r0,#0]
;;;23        buf[1] = (png_byte)((i >> 16) & 0xff);
000004  0c0a              LSRS     r2,r1,#16
000006  7042              STRB     r2,[r0,#1]
;;;24        buf[2] = (png_byte)((i >> 8) & 0xff);
000008  0a0a              LSRS     r2,r1,#8
00000a  7082              STRB     r2,[r0,#2]
;;;25        buf[3] = (png_byte)(i & 0xff);
00000c  70c1              STRB     r1,[r0,#3]
;;;26     }
00000e  4770              BX       lr
;;;27     
                          ENDP

                  png_save_int_32 PROC
;;;32     void PNGAPI
;;;33     png_save_int_32(png_bytep buf, png_int_32 i)
000010  0e0a              LSRS     r2,r1,#24
;;;34     {
;;;35        buf[0] = (png_byte)((i >> 24) & 0xff);
000012  7002              STRB     r2,[r0,#0]
;;;36        buf[1] = (png_byte)((i >> 16) & 0xff);
000014  0c0a              LSRS     r2,r1,#16
000016  7042              STRB     r2,[r0,#1]
;;;37        buf[2] = (png_byte)((i >> 8) & 0xff);
000018  0a0a              LSRS     r2,r1,#8
00001a  7082              STRB     r2,[r0,#2]
;;;38        buf[3] = (png_byte)(i & 0xff);
00001c  70c1              STRB     r1,[r0,#3]
;;;39     }
00001e  4770              BX       lr
;;;40     
                          ENDP

                  png_save_uint_16 PROC
;;;45     void PNGAPI
;;;46     png_save_uint_16(png_bytep buf, unsigned int i)
000020  0a0a              LSRS     r2,r1,#8
;;;47     {
;;;48        buf[0] = (png_byte)((i >> 8) & 0xff);
000022  7002              STRB     r2,[r0,#0]
;;;49        buf[1] = (png_byte)(i & 0xff);
000024  7041              STRB     r1,[r0,#1]
;;;50     }
000026  4770              BX       lr
;;;51     
                          ENDP

                  png_write_chunk_end PROC
;;;112    void PNGAPI
;;;113    png_write_chunk_end(png_structp png_ptr)
000028  b538              PUSH     {r3-r5,lr}
;;;114    {
00002a  4604              MOV      r4,r0
;;;115       png_byte buf[4];
;;;116    
;;;117       if(png_ptr == NULL) return;
00002c  b904              CBNZ     r4,|L1.48|
                  |L1.46|
;;;118    
;;;119       /* write the crc */
;;;120       png_save_uint_32(buf, png_ptr->crc);
;;;121    
;;;122       png_write_data(png_ptr, buf, (png_size_t)4);
;;;123    }
00002e  bd38              POP      {r3-r5,pc}
                  |L1.48|
000030  4668              MOV      r0,sp                 ;120
000032  f8d41250          LDR      r1,[r4,#0x250]        ;120
000036  f7fffffe          BL       png_save_uint_32
00003a  2204              MOVS     r2,#4                 ;122
00003c  4669              MOV      r1,sp                 ;122
00003e  4620              MOV      r0,r4                 ;122
000040  f7fffffe          BL       png_write_data
000044  bf00              NOP      
000046  e7f2              B        |L1.46|
;;;124    
                          ENDP

                  png_write_chunk_data PROC
;;;99     void PNGAPI
;;;100    png_write_chunk_data(png_structp png_ptr, png_bytep data, png_size_t length)
000048  b570              PUSH     {r4-r6,lr}
;;;101    {
00004a  4606              MOV      r6,r0
00004c  460c              MOV      r4,r1
00004e  4615              MOV      r5,r2
;;;102       /* write the data, and run the CRC over it */
;;;103       if(png_ptr == NULL) return;
000050  b906              CBNZ     r6,|L1.84|
                  |L1.82|
;;;104       if (data != NULL && length > 0)
;;;105       {
;;;106          png_calculate_crc(png_ptr, data, length);
;;;107          png_write_data(png_ptr, data, length);
;;;108       }
;;;109    }
000052  bd70              POP      {r4-r6,pc}
                  |L1.84|
000054  b154              CBZ      r4,|L1.108|
000056  b14d              CBZ      r5,|L1.108|
000058  462a              MOV      r2,r5                 ;106
00005a  4621              MOV      r1,r4                 ;106
00005c  4630              MOV      r0,r6                 ;106
00005e  f7fffffe          BL       png_calculate_crc
000062  462a              MOV      r2,r5                 ;107
000064  4621              MOV      r1,r4                 ;107
000066  4630              MOV      r0,r6                 ;107
000068  f7fffffe          BL       png_write_data
                  |L1.108|
00006c  bf00              NOP      
00006e  e7f0              B        |L1.82|
;;;110    
                          ENDP

                  png_write_chunk_start PROC
;;;75     void PNGAPI
;;;76     png_write_chunk_start(png_structp png_ptr, png_bytep chunk_name,
000070  b5f8              PUSH     {r3-r7,lr}
;;;77        png_uint_32 length)
;;;78     {
000072  4604              MOV      r4,r0
000074  460e              MOV      r6,r1
000076  4615              MOV      r5,r2
;;;79        png_byte buf[4];
;;;80        png_debug2(0, "Writing %s chunk (%lu bytes)\n", chunk_name, length);
;;;81        if(png_ptr == NULL) return;
000078  b904              CBNZ     r4,|L1.124|
                  |L1.122|
;;;82     
;;;83        /* write the length */
;;;84        png_save_uint_32(buf, length);
;;;85        png_write_data(png_ptr, buf, (png_size_t)4);
;;;86     
;;;87        /* write the chunk name */
;;;88        png_write_data(png_ptr, chunk_name, (png_size_t)4);
;;;89        /* reset the crc and run it over the chunk name */
;;;90        png_reset_crc(png_ptr);
;;;91        png_calculate_crc(png_ptr, chunk_name, (png_size_t)4);
;;;92     }
00007a  bdf8              POP      {r3-r7,pc}
                  |L1.124|
00007c  4629              MOV      r1,r5                 ;84
00007e  4668              MOV      r0,sp                 ;84
000080  f7fffffe          BL       png_save_uint_32
000084  2204              MOVS     r2,#4                 ;85
000086  4669              MOV      r1,sp                 ;85
000088  4620              MOV      r0,r4                 ;85
00008a  f7fffffe          BL       png_write_data
00008e  2204              MOVS     r2,#4                 ;88
000090  4631              MOV      r1,r6                 ;88
000092  4620              MOV      r0,r4                 ;88
000094  f7fffffe          BL       png_write_data
000098  4620              MOV      r0,r4                 ;90
00009a  f7fffffe          BL       png_reset_crc
00009e  2204              MOVS     r2,#4                 ;91
0000a0  4631              MOV      r1,r6                 ;91
0000a2  4620              MOV      r0,r4                 ;91
0000a4  f7fffffe          BL       png_calculate_crc
0000a8  bf00              NOP      
0000aa  e7e6              B        |L1.122|
;;;93     
                          ENDP

                  png_write_chunk PROC
;;;61     void PNGAPI
;;;62     png_write_chunk(png_structp png_ptr, png_bytep chunk_name,
0000ac  e92d41f0          PUSH     {r4-r8,lr}
;;;63        png_bytep data, png_size_t length)
;;;64     {
0000b0  4604              MOV      r4,r0
0000b2  460f              MOV      r7,r1
0000b4  4615              MOV      r5,r2
0000b6  461e              MOV      r6,r3
;;;65        if(png_ptr == NULL) return;
0000b8  b90c              CBNZ     r4,|L1.190|
                  |L1.186|
;;;66        png_write_chunk_start(png_ptr, chunk_name, (png_uint_32)length);
;;;67        png_write_chunk_data(png_ptr, data, length);
;;;68        png_write_chunk_end(png_ptr);
;;;69     }
0000ba  e8bd81f0          POP      {r4-r8,pc}
                  |L1.190|
0000be  4632              MOV      r2,r6                 ;66
0000c0  4639              MOV      r1,r7                 ;66
0000c2  4620              MOV      r0,r4                 ;66
0000c4  f7fffffe          BL       png_write_chunk_start
0000c8  4632              MOV      r2,r6                 ;67
0000ca  4629              MOV      r1,r5                 ;67
0000cc  4620              MOV      r0,r4                 ;67
0000ce  f7fffffe          BL       png_write_chunk_data
0000d2  4620              MOV      r0,r4                 ;68
0000d4  f7fffffe          BL       png_write_chunk_end
0000d8  bf00              NOP      
0000da  e7ee              B        |L1.186|
;;;70     
                          ENDP

                  png_write_sig PROC
;;;131    void /* PRIVATE */
;;;132    png_write_sig(png_structp png_ptr)
0000dc  b51c              PUSH     {r2-r4,lr}
;;;133    {
0000de  4604              MOV      r4,r0
;;;134       png_byte png_signature[8] = {137, 80, 78, 71, 13, 10, 26, 10};
0000e0  a1fc              ADR      r1,|L1.1236|
0000e2  c903              LDM      r1,{r0,r1}
0000e4  e9cd0100          STRD     r0,r1,[sp,#0]
;;;135       /* write the rest of the 8 byte signature */
;;;136       png_write_data(png_ptr, &png_signature[png_ptr->sig_bytes],
0000e8  f894026c          LDRB     r0,[r4,#0x26c]
0000ec  f1c00208          RSB      r2,r0,#8
0000f0  466b              MOV      r3,sp
0000f2  18c1              ADDS     r1,r0,r3
0000f4  4620              MOV      r0,r4
0000f6  f7fffffe          BL       png_write_data
;;;137          (png_size_t)8 - png_ptr->sig_bytes);
;;;138       if(png_ptr->sig_bytes < 3)
0000fa  f894026c          LDRB     r0,[r4,#0x26c]
0000fe  2803              CMP      r0,#3
000100  da05              BGE      |L1.270|
;;;139          png_ptr->mode |= PNG_HAVE_PNG_SIGNATURE;
000102  f8d401a8          LDR      r0,[r4,#0x1a8]
000106  f4405080          ORR      r0,r0,#0x1000
00010a  f8c401a8          STR      r0,[r4,#0x1a8]
                  |L1.270|
;;;140    }
00010e  bd1c              POP      {r2-r4,pc}
;;;141    
                          ENDP

                  png_text_compress PROC
;;;160    static int /* PRIVATE */
;;;161    png_text_compress(png_structp png_ptr,
000110  e92d5ff0          PUSH     {r4-r12,lr}
;;;162            png_charp text, png_size_t text_len, int compression,
;;;163            compression_state *comp)
;;;164    {
000114  4605              MOV      r5,r0
000116  4688              MOV      r8,r1
000118  4617              MOV      r7,r2
00011a  4699              MOV      r9,r3
00011c  9c0a              LDR      r4,[sp,#0x28]
;;;165       int ret;
;;;166    
;;;167       comp->num_output_ptr = 0;
00011e  2000              MOVS     r0,#0
000120  60a0              STR      r0,[r4,#8]
;;;168       comp->max_output_ptr = 0;
000122  60e0              STR      r0,[r4,#0xc]
;;;169       comp->output_ptr = NULL;
000124  6120              STR      r0,[r4,#0x10]
;;;170       comp->input = NULL;
000126  6020              STR      r0,[r4,#0]
;;;171       comp->input_len = 0;
000128  6060              STR      r0,[r4,#4]
;;;172    
;;;173       /* we may just want to pass the text right through */
;;;174       if (compression == PNG_TEXT_COMPRESSION_NONE)
00012a  f1090001          ADD      r0,r9,#1
00012e  b928              CBNZ     r0,|L1.316|
;;;175       {
;;;176           comp->input = text;
000130  f8c48000          STR      r8,[r4,#0]
;;;177           comp->input_len = text_len;
000134  6067              STR      r7,[r4,#4]
;;;178           return((int)text_len);
000136  4638              MOV      r0,r7
                  |L1.312|
;;;179       }
;;;180    
;;;181       if (compression >= PNG_TEXT_COMPRESSION_LAST)
;;;182       {
;;;183    #if !defined(PNG_NO_STDIO) && !defined(_WIN32_WCE)
;;;184          char msg[50];
;;;185          sprintf(msg, "Unknown compression type %d", compression);
;;;186          png_warning(png_ptr, msg);
;;;187    #else
;;;188          png_warning(png_ptr, "Unknown compression type");
;;;189    #endif
;;;190       }
;;;191    
;;;192       /* We can't write the chunk until we find out how much data we have,
;;;193        * which means we need to run the compressor first and save the
;;;194        * output.  This shouldn't be a problem, as the vast majority of
;;;195        * comments should be reasonable, but we will set up an array of
;;;196        * malloc'd pointers to be sure.
;;;197        *
;;;198        * If we knew the application was well behaved, we could simplify this
;;;199        * greatly by assuming we can always malloc an output buffer large
;;;200        * enough to hold the compressed text ((1001 * text_len / 1000) + 12)
;;;201        * and malloc this directly.  The only time this would be a bad idea is
;;;202        * if we can't malloc more than 64K and we have 64K of random input
;;;203        * data, or if the input string is incredibly large (although this
;;;204        * wouldn't cause a failure, just a slowdown due to swapping).
;;;205        */
;;;206    
;;;207       /* set up the compression buffers */
;;;208       png_ptr->zstream.avail_in = (uInt)text_len;
;;;209       png_ptr->zstream.next_in = (Bytef *)text;
;;;210       png_ptr->zstream.avail_out = (uInt)png_ptr->zbuf_size;
;;;211       png_ptr->zstream.next_out = (Bytef *)png_ptr->zbuf;
;;;212    
;;;213       /* this is the same compression loop as in png_write_row() */
;;;214       do
;;;215       {
;;;216          /* compress the data */
;;;217          ret = deflate(&png_ptr->zstream, Z_NO_FLUSH);
;;;218          if (ret != Z_OK)
;;;219          {
;;;220             /* error */
;;;221             if (png_ptr->zstream.msg != NULL)
;;;222                png_error(png_ptr, png_ptr->zstream.msg);
;;;223             else
;;;224                png_error(png_ptr, "zlib error");
;;;225          }
;;;226          /* check to see if we need more room */
;;;227          if (!(png_ptr->zstream.avail_out))
;;;228          {
;;;229             /* make sure the output array has room */
;;;230             if (comp->num_output_ptr >= comp->max_output_ptr)
;;;231             {
;;;232                int old_max;
;;;233    
;;;234                old_max = comp->max_output_ptr;
;;;235                comp->max_output_ptr = comp->num_output_ptr + 4;
;;;236                if (comp->output_ptr != NULL)
;;;237                {
;;;238                   png_charpp old_ptr;
;;;239    
;;;240                   old_ptr = comp->output_ptr;
;;;241                   comp->output_ptr = (png_charpp)png_malloc(png_ptr,
;;;242                      (png_uint_32)(comp->max_output_ptr *
;;;243                      png_sizeof (png_charpp)));
;;;244                   png_memcpy(comp->output_ptr, old_ptr, old_max
;;;245                      * png_sizeof (png_charp));
;;;246                   png_free(png_ptr, old_ptr);
;;;247                }
;;;248                else
;;;249                   comp->output_ptr = (png_charpp)png_malloc(png_ptr,
;;;250                      (png_uint_32)(comp->max_output_ptr *
;;;251                      png_sizeof (png_charp)));
;;;252             }
;;;253    
;;;254             /* save the data */
;;;255             comp->output_ptr[comp->num_output_ptr] = (png_charp)png_malloc(png_ptr,
;;;256                (png_uint_32)png_ptr->zbuf_size);
;;;257             png_memcpy(comp->output_ptr[comp->num_output_ptr], png_ptr->zbuf,
;;;258                png_ptr->zbuf_size);
;;;259             comp->num_output_ptr++;
;;;260    
;;;261             /* and reset the buffer */
;;;262             png_ptr->zstream.avail_out = (uInt)png_ptr->zbuf_size;
;;;263             png_ptr->zstream.next_out = png_ptr->zbuf;
;;;264          }
;;;265       /* continue until we don't have any more to compress */
;;;266       } while (png_ptr->zstream.avail_in);
;;;267    
;;;268       /* finish the compression */
;;;269       do
;;;270       {
;;;271          /* tell zlib we are finished */
;;;272          ret = deflate(&png_ptr->zstream, Z_FINISH);
;;;273    
;;;274          if (ret == Z_OK)
;;;275          {
;;;276             /* check to see if we need more room */
;;;277             if (!(png_ptr->zstream.avail_out))
;;;278             {
;;;279                /* check to make sure our output array has room */
;;;280                if (comp->num_output_ptr >= comp->max_output_ptr)
;;;281                {
;;;282                   int old_max;
;;;283    
;;;284                   old_max = comp->max_output_ptr;
;;;285                   comp->max_output_ptr = comp->num_output_ptr + 4;
;;;286                   if (comp->output_ptr != NULL)
;;;287                   {
;;;288                      png_charpp old_ptr;
;;;289    
;;;290                      old_ptr = comp->output_ptr;
;;;291                      /* This could be optimized to realloc() */
;;;292                      comp->output_ptr = (png_charpp)png_malloc(png_ptr,
;;;293                         (png_uint_32)(comp->max_output_ptr *
;;;294                         png_sizeof (png_charpp)));
;;;295                      png_memcpy(comp->output_ptr, old_ptr,
;;;296                         old_max * png_sizeof (png_charp));
;;;297                      png_free(png_ptr, old_ptr);
;;;298                   }
;;;299                   else
;;;300                      comp->output_ptr = (png_charpp)png_malloc(png_ptr,
;;;301                         (png_uint_32)(comp->max_output_ptr *
;;;302                         png_sizeof (png_charp)));
;;;303                }
;;;304    
;;;305                /* save off the data */
;;;306                comp->output_ptr[comp->num_output_ptr] =
;;;307                   (png_charp)png_malloc(png_ptr, (png_uint_32)png_ptr->zbuf_size);
;;;308                png_memcpy(comp->output_ptr[comp->num_output_ptr], png_ptr->zbuf,
;;;309                   png_ptr->zbuf_size);
;;;310                comp->num_output_ptr++;
;;;311    
;;;312                /* and reset the buffer pointers */
;;;313                png_ptr->zstream.avail_out = (uInt)png_ptr->zbuf_size;
;;;314                png_ptr->zstream.next_out = png_ptr->zbuf;
;;;315             }
;;;316          }
;;;317          else if (ret != Z_STREAM_END)
;;;318          {
;;;319             /* we got an error */
;;;320             if (png_ptr->zstream.msg != NULL)
;;;321                png_error(png_ptr, png_ptr->zstream.msg);
;;;322             else
;;;323                png_error(png_ptr, "zlib error");
;;;324          }
;;;325       } while (ret != Z_STREAM_END);
;;;326    
;;;327       /* text length is number of buffers plus last buffer */
;;;328       text_len = png_ptr->zbuf_size * comp->num_output_ptr;
;;;329       if (png_ptr->zstream.avail_out < png_ptr->zbuf_size)
;;;330          text_len += png_ptr->zbuf_size - (png_size_t)png_ptr->zstream.avail_out;
;;;331    
;;;332       return((int)text_len);
;;;333    }
000138  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.316|
00013c  f1b90f03          CMP      r9,#3                 ;181
000140  db03              BLT      |L1.330|
000142  a1e6              ADR      r1,|L1.1244|
000144  4628              MOV      r0,r5                 ;188
000146  f7fffffe          BL       png_warning
                  |L1.330|
00014a  f44f70dc          MOV      r0,#0x1b8             ;208
00014e  5147              STR      r7,[r0,r5]            ;208
000150  f8c581b4          STR      r8,[r5,#0x1b4]        ;209
000154  f44f70e2          MOV      r0,#0x1c4             ;210
000158  f8d511f0          LDR      r1,[r5,#0x1f0]        ;210
00015c  5141              STR      r1,[r0,r5]            ;210
00015e  1f00              SUBS     r0,r0,#4              ;211
000160  f8d511ec          LDR      r1,[r5,#0x1ec]        ;211
000164  5141              STR      r1,[r0,r5]            ;211
000166  bf00              NOP                            ;214
                  |L1.360|
000168  2100              MOVS     r1,#0                 ;217
00016a  f50570da          ADD      r0,r5,#0x1b4          ;217
00016e  f7fffffe          BL       deflate
000172  4606              MOV      r6,r0                 ;217
000174  b176              CBZ      r6,|L1.404|
000176  f44f70e6          MOV      r0,#0x1cc             ;221
00017a  5940              LDR      r0,[r0,r5]            ;221
00017c  b130              CBZ      r0,|L1.396|
00017e  f44f70e6          MOV      r0,#0x1cc             ;222
000182  5941              LDR      r1,[r0,r5]            ;222
000184  4628              MOV      r0,r5                 ;222
000186  f7fffffe          BL       png_error
00018a  e003              B        |L1.404|
                  |L1.396|
00018c  a1da              ADR      r1,|L1.1272|
00018e  4628              MOV      r0,r5                 ;224
000190  f7fffffe          BL       png_error
                  |L1.404|
000194  f44f70e2          MOV      r0,#0x1c4             ;227
000198  5940              LDR      r0,[r0,r5]            ;227
00019a  2800              CMP      r0,#0                 ;227
00019c  d143              BNE      |L1.550|
00019e  e9d40102          LDRD     r0,r1,[r4,#8]         ;230
0001a2  4288              CMP      r0,r1                 ;230
0001a4  db20              BLT      |L1.488|
0001a6  f8d4a00c          LDR      r10,[r4,#0xc]         ;234
0001aa  68a0              LDR      r0,[r4,#8]            ;235
0001ac  1d00              ADDS     r0,r0,#4              ;235
0001ae  60e0              STR      r0,[r4,#0xc]          ;235
0001b0  6920              LDR      r0,[r4,#0x10]         ;236
0001b2  b190              CBZ      r0,|L1.474|
0001b4  f8d4b010          LDR      r11,[r4,#0x10]        ;240
0001b8  68e0              LDR      r0,[r4,#0xc]          ;241
0001ba  0081              LSLS     r1,r0,#2              ;241
0001bc  4628              MOV      r0,r5                 ;241
0001be  f7fffffe          BL       png_malloc
0001c2  6120              STR      r0,[r4,#0x10]         ;241
0001c4  ea4f028a          LSL      r2,r10,#2             ;244
0001c8  4659              MOV      r1,r11                ;244
0001ca  6920              LDR      r0,[r4,#0x10]         ;244
0001cc  f7fffffe          BL       __aeabi_memcpy4
0001d0  4659              MOV      r1,r11                ;246
0001d2  4628              MOV      r0,r5                 ;246
0001d4  f7fffffe          BL       png_free
0001d8  e005              B        |L1.486|
                  |L1.474|
0001da  68e0              LDR      r0,[r4,#0xc]          ;249
0001dc  0081              LSLS     r1,r0,#2              ;249
0001de  4628              MOV      r0,r5                 ;249
0001e0  f7fffffe          BL       png_malloc
0001e4  6120              STR      r0,[r4,#0x10]         ;249
                  |L1.486|
0001e6  bf00              NOP                            ;252
                  |L1.488|
0001e8  4628              MOV      r0,r5                 ;255
0001ea  f8d511f0          LDR      r1,[r5,#0x1f0]        ;255
0001ee  f7fffffe          BL       png_malloc
0001f2  68a2              LDR      r2,[r4,#8]            ;255
0001f4  6921              LDR      r1,[r4,#0x10]         ;255
0001f6  f8410022          STR      r0,[r1,r2,LSL #2]     ;255
0001fa  f8d4c008          LDR      r12,[r4,#8]           ;257
0001fe  6923              LDR      r3,[r4,#0x10]         ;257
000200  f853002c          LDR      r0,[r3,r12,LSL #2]    ;257
000204  f50571f6          ADD      r1,r5,#0x1ec          ;257
000208  c906              LDM      r1,{r1,r2}            ;257
00020a  f7fffffe          BL       __aeabi_memcpy
00020e  68a0              LDR      r0,[r4,#8]            ;259
000210  1c40              ADDS     r0,r0,#1              ;259
000212  60a0              STR      r0,[r4,#8]            ;259
000214  f44f70e2          MOV      r0,#0x1c4             ;262
000218  f8d511f0          LDR      r1,[r5,#0x1f0]        ;262
00021c  5141              STR      r1,[r0,r5]            ;262
00021e  1f00              SUBS     r0,r0,#4              ;263
000220  f8d511ec          LDR      r1,[r5,#0x1ec]        ;263
000224  5141              STR      r1,[r0,r5]            ;263
                  |L1.550|
000226  f44f70dc          MOV      r0,#0x1b8             ;266
00022a  5940              LDR      r0,[r0,r5]            ;266
00022c  2800              CMP      r0,#0                 ;266
00022e  d19b              BNE      |L1.360|
000230  bf00              NOP                            ;269
                  |L1.562|
000232  2104              MOVS     r1,#4                 ;272
000234  f50570da          ADD      r0,r5,#0x1b4          ;272
000238  f7fffffe          BL       deflate
00023c  4606              MOV      r6,r0                 ;272
00023e  2e00              CMP      r6,#0                 ;274
000240  d149              BNE      |L1.726|
000242  f44f70e2          MOV      r0,#0x1c4             ;277
000246  5940              LDR      r0,[r0,r5]            ;277
000248  2800              CMP      r0,#0                 ;277
00024a  d155              BNE      |L1.760|
00024c  e9d40102          LDRD     r0,r1,[r4,#8]         ;280
000250  4288              CMP      r0,r1                 ;280
000252  db20              BLT      |L1.662|
000254  f8d4a00c          LDR      r10,[r4,#0xc]         ;284
000258  68a0              LDR      r0,[r4,#8]            ;285
00025a  1d00              ADDS     r0,r0,#4              ;285
00025c  60e0              STR      r0,[r4,#0xc]          ;285
00025e  6920              LDR      r0,[r4,#0x10]         ;286
000260  b190              CBZ      r0,|L1.648|
000262  f8d4b010          LDR      r11,[r4,#0x10]        ;290
000266  68e0              LDR      r0,[r4,#0xc]          ;292
000268  0081              LSLS     r1,r0,#2              ;292
00026a  4628              MOV      r0,r5                 ;292
00026c  f7fffffe          BL       png_malloc
000270  6120              STR      r0,[r4,#0x10]         ;292
000272  ea4f028a          LSL      r2,r10,#2             ;295
000276  4659              MOV      r1,r11                ;295
000278  6920              LDR      r0,[r4,#0x10]         ;295
00027a  f7fffffe          BL       __aeabi_memcpy4
00027e  4659              MOV      r1,r11                ;297
000280  4628              MOV      r0,r5                 ;297
000282  f7fffffe          BL       png_free
000286  e005              B        |L1.660|
                  |L1.648|
000288  68e0              LDR      r0,[r4,#0xc]          ;300
00028a  0081              LSLS     r1,r0,#2              ;300
00028c  4628              MOV      r0,r5                 ;300
00028e  f7fffffe          BL       png_malloc
000292  6120              STR      r0,[r4,#0x10]         ;300
                  |L1.660|
000294  bf00              NOP                            ;303
                  |L1.662|
000296  4628              MOV      r0,r5                 ;306
000298  f8d511f0          LDR      r1,[r5,#0x1f0]        ;306
00029c  f7fffffe          BL       png_malloc
0002a0  68a2              LDR      r2,[r4,#8]            ;306
0002a2  6921              LDR      r1,[r4,#0x10]         ;306
0002a4  f8410022          STR      r0,[r1,r2,LSL #2]     ;306
0002a8  f8d4c008          LDR      r12,[r4,#8]           ;308
0002ac  6923              LDR      r3,[r4,#0x10]         ;308
0002ae  f853002c          LDR      r0,[r3,r12,LSL #2]    ;308
0002b2  f50571f6          ADD      r1,r5,#0x1ec          ;308
0002b6  c906              LDM      r1,{r1,r2}            ;308
0002b8  f7fffffe          BL       __aeabi_memcpy
0002bc  68a0              LDR      r0,[r4,#8]            ;310
0002be  1c40              ADDS     r0,r0,#1              ;310
0002c0  60a0              STR      r0,[r4,#8]            ;310
0002c2  f44f70e2          MOV      r0,#0x1c4             ;313
0002c6  f8d511f0          LDR      r1,[r5,#0x1f0]        ;313
0002ca  5141              STR      r1,[r0,r5]            ;313
0002cc  1f00              SUBS     r0,r0,#4              ;314
0002ce  f8d511ec          LDR      r1,[r5,#0x1ec]        ;314
0002d2  5141              STR      r1,[r0,r5]            ;314
0002d4  e010              B        |L1.760|
                  |L1.726|
0002d6  2e01              CMP      r6,#1                 ;317
0002d8  d00e              BEQ      |L1.760|
0002da  f44f70e6          MOV      r0,#0x1cc             ;320
0002de  5940              LDR      r0,[r0,r5]            ;320
0002e0  b130              CBZ      r0,|L1.752|
0002e2  f44f70e6          MOV      r0,#0x1cc             ;321
0002e6  5941              LDR      r1,[r0,r5]            ;321
0002e8  4628              MOV      r0,r5                 ;321
0002ea  f7fffffe          BL       png_error
0002ee  e003              B        |L1.760|
                  |L1.752|
0002f0  a181              ADR      r1,|L1.1272|
0002f2  4628              MOV      r0,r5                 ;323
0002f4  f7fffffe          BL       png_error
                  |L1.760|
0002f8  2e01              CMP      r6,#1                 ;325
0002fa  d19a              BNE      |L1.562|
0002fc  f8d501f0          LDR      r0,[r5,#0x1f0]        ;328
000300  68a1              LDR      r1,[r4,#8]            ;328
000302  fb00f701          MUL      r7,r0,r1              ;328
000306  f44f70e2          MOV      r0,#0x1c4             ;329
00030a  5940              LDR      r0,[r0,r5]            ;329
00030c  f8d511f0          LDR      r1,[r5,#0x1f0]        ;329
000310  4288              CMP      r0,r1                 ;329
000312  d206              BCS      |L1.802|
000314  f44f70e2          MOV      r0,#0x1c4             ;330
000318  5940              LDR      r0,[r0,r5]            ;330
00031a  f8d511f0          LDR      r1,[r5,#0x1f0]        ;330
00031e  1a08              SUBS     r0,r1,r0              ;330
000320  4407              ADD      r7,r7,r0              ;330
                  |L1.802|
000322  4638              MOV      r0,r7                 ;332
000324  e708              B        |L1.312|
;;;334    
                          ENDP

                  png_write_compressed_data_out PROC
;;;336    static void /* PRIVATE */
;;;337    png_write_compressed_data_out(png_structp png_ptr, compression_state *comp)
000326  b570              PUSH     {r4-r6,lr}
;;;338    {
000328  4605              MOV      r5,r0
00032a  460c              MOV      r4,r1
;;;339       int i;
;;;340    
;;;341       /* handle the no-compression case */
;;;342       if (comp->input)
00032c  6820              LDR      r0,[r4,#0]
00032e  b128              CBZ      r0,|L1.828|
;;;343       {
;;;344           png_write_chunk_data(png_ptr, (png_bytep)comp->input,
000330  4628              MOV      r0,r5
000332  e9d41200          LDRD     r1,r2,[r4,#0]
000336  f7fffffe          BL       png_write_chunk_data
                  |L1.826|
;;;345                                (png_size_t)comp->input_len);
;;;346           return;
;;;347       }
;;;348    
;;;349       /* write saved output buffers, if any */
;;;350       for (i = 0; i < comp->num_output_ptr; i++)
;;;351       {
;;;352          png_write_chunk_data(png_ptr,(png_bytep)comp->output_ptr[i],
;;;353             png_ptr->zbuf_size);
;;;354          png_free(png_ptr, comp->output_ptr[i]);
;;;355          comp->output_ptr[i]=NULL;
;;;356       }
;;;357       if (comp->max_output_ptr != 0)
;;;358          png_free(png_ptr, comp->output_ptr);
;;;359          comp->output_ptr=NULL;
;;;360       /* write anything left in zbuf */
;;;361       if (png_ptr->zstream.avail_out < (png_uint_32)png_ptr->zbuf_size)
;;;362          png_write_chunk_data(png_ptr, png_ptr->zbuf,
;;;363             png_ptr->zbuf_size - png_ptr->zstream.avail_out);
;;;364    
;;;365       /* reset zlib for another zTXt/iTXt or image data */
;;;366       deflateReset(&png_ptr->zstream);
;;;367       png_ptr->zstream.data_type = Z_BINARY;
;;;368    }
00033a  bd70              POP      {r4-r6,pc}
                  |L1.828|
00033c  2600              MOVS     r6,#0                 ;350
00033e  e012              B        |L1.870|
                  |L1.832|
000340  6920              LDR      r0,[r4,#0x10]         ;352
000342  f8501026          LDR      r1,[r0,r6,LSL #2]     ;352
000346  4628              MOV      r0,r5                 ;352
000348  f8d521f0          LDR      r2,[r5,#0x1f0]        ;352
00034c  f7fffffe          BL       png_write_chunk_data
000350  6920              LDR      r0,[r4,#0x10]         ;354
000352  f8501026          LDR      r1,[r0,r6,LSL #2]     ;354
000356  4628              MOV      r0,r5                 ;354
000358  f7fffffe          BL       png_free
00035c  2000              MOVS     r0,#0                 ;355
00035e  6921              LDR      r1,[r4,#0x10]         ;355
000360  f8410026          STR      r0,[r1,r6,LSL #2]     ;355
000364  1c76              ADDS     r6,r6,#1              ;350
                  |L1.870|
000366  68a0              LDR      r0,[r4,#8]            ;350
000368  42b0              CMP      r0,r6                 ;350
00036a  dce9              BGT      |L1.832|
00036c  68e0              LDR      r0,[r4,#0xc]          ;357
00036e  b118              CBZ      r0,|L1.888|
000370  4628              MOV      r0,r5                 ;358
000372  6921              LDR      r1,[r4,#0x10]         ;358
000374  f7fffffe          BL       png_free
                  |L1.888|
000378  2000              MOVS     r0,#0                 ;359
00037a  6120              STR      r0,[r4,#0x10]         ;359
00037c  f44f70e2          MOV      r0,#0x1c4             ;361
000380  5940              LDR      r0,[r0,r5]            ;361
000382  f8d511f0          LDR      r1,[r5,#0x1f0]        ;361
000386  4288              CMP      r0,r1                 ;361
000388  d20a              BCS      |L1.928|
00038a  f44f70e2          MOV      r0,#0x1c4             ;362
00038e  5940              LDR      r0,[r0,r5]            ;362
000390  f8d531f0          LDR      r3,[r5,#0x1f0]        ;362
000394  1a1a              SUBS     r2,r3,r0              ;362
000396  4628              MOV      r0,r5                 ;362
000398  f8d511ec          LDR      r1,[r5,#0x1ec]        ;362
00039c  f7fffffe          BL       png_write_chunk_data
                  |L1.928|
0003a0  f50570da          ADD      r0,r5,#0x1b4          ;366
0003a4  f7fffffe          BL       deflateReset
0003a8  2100              MOVS     r1,#0                 ;367
0003aa  f44f70f0          MOV      r0,#0x1e0             ;367
0003ae  5141              STR      r1,[r0,r5]            ;367
0003b0  bf00              NOP      
0003b2  e7c2              B        |L1.826|
;;;369    #endif
                          ENDP

                  png_write_IHDR PROC
;;;375    void /* PRIVATE */
;;;376    png_write_IHDR(png_structp png_ptr, png_uint_32 width, png_uint_32 height,
0003b4  e92d4ff0          PUSH     {r4-r11,lr}
;;;377       int bit_depth, int color_type, int compression_type, int filter_type,
;;;378       int interlace_type)
;;;379    {
0003b8  b089              SUB      sp,sp,#0x24
0003ba  4604              MOV      r4,r0
0003bc  460f              MOV      r7,r1
0003be  4692              MOV      r10,r2
0003c0  461d              MOV      r5,r3
0003c2  e9ddb813          LDRD     r11,r8,[sp,#0x4c]
0003c6  f8dd9054          LDR      r9,[sp,#0x54]
0003ca  9e12              LDR      r6,[sp,#0x48]
;;;380    #ifdef PNG_USE_LOCAL_ARRAYS
;;;381       PNG_IHDR;
;;;382    #endif
;;;383       png_byte buf[13]; /* buffer to store the IHDR info */
;;;384    
;;;385       png_debug(1, "in png_write_IHDR\n");
;;;386       /* Check that we have valid input data from the application info */
;;;387       switch (color_type)
0003cc  2e07              CMP      r6,#7
0003ce  d25c              BCS      |L1.1162|
0003d0  e8dff006          TBB      [pc,r6]
0003d4  045b202c          DCB      0x04,0x5b,0x20,0x2c
0003d8  435b4f00          DCB      0x43,0x5b,0x4f,0x00
;;;388       {
;;;389          case PNG_COLOR_TYPE_GRAY:
;;;390             switch (bit_depth)
0003dc  2d04              CMP      r5,#4
0003de  d00c              BEQ      |L1.1018|
0003e0  dc04              BGT      |L1.1004|
0003e2  2d01              CMP      r5,#1
0003e4  d007              BEQ      |L1.1014|
0003e6  2d02              CMP      r5,#2
0003e8  d10d              BNE      |L1.1030|
0003ea  e005              B        |L1.1016|
                  |L1.1004|
0003ec  2d08              CMP      r5,#8
0003ee  d005              BEQ      |L1.1020|
0003f0  2d10              CMP      r5,#0x10
0003f2  d108              BNE      |L1.1030|
0003f4  e003              B        |L1.1022|
                  |L1.1014|
;;;391             {
;;;392                case 1:
;;;393                case 2:
0003f6  bf00              NOP      
                  |L1.1016|
;;;394                case 4:
0003f8  bf00              NOP      
                  |L1.1018|
;;;395                case 8:
0003fa  bf00              NOP      
                  |L1.1020|
;;;396                case 16: png_ptr->channels = 1; break;
0003fc  bf00              NOP      
                  |L1.1022|
0003fe  2001              MOVS     r0,#1
000400  f884026a          STRB     r0,[r4,#0x26a]
000404  e004              B        |L1.1040|
                  |L1.1030|
;;;397                default: png_error(png_ptr,"Invalid bit depth for grayscale image");
000406  a13f              ADR      r1,|L1.1284|
000408  4620              MOV      r0,r4
00040a  f7fffffe          BL       png_error
00040e  bf00              NOP                            ;390
                  |L1.1040|
000410  bf00              NOP                            ;396
;;;398             }
;;;399             break;
000412  e03f              B        |L1.1172|
;;;400          case PNG_COLOR_TYPE_RGB:
;;;401             if (bit_depth != 8 && bit_depth != 16)
000414  2d08              CMP      r5,#8
000416  d005              BEQ      |L1.1060|
000418  2d10              CMP      r5,#0x10
00041a  d003              BEQ      |L1.1060|
;;;402                png_error(png_ptr, "Invalid bit depth for RGB image");
00041c  a143              ADR      r1,|L1.1324|
00041e  4620              MOV      r0,r4
000420  f7fffffe          BL       png_error
                  |L1.1060|
;;;403             png_ptr->channels = 3;
000424  2003              MOVS     r0,#3
000426  f884026a          STRB     r0,[r4,#0x26a]
;;;404             break;
00042a  e033              B        |L1.1172|
;;;405          case PNG_COLOR_TYPE_PALETTE:
;;;406             switch (bit_depth)
00042c  2d01              CMP      r5,#1
00042e  d006              BEQ      |L1.1086|
000430  2d02              CMP      r5,#2
000432  d005              BEQ      |L1.1088|
000434  2d04              CMP      r5,#4
000436  d004              BEQ      |L1.1090|
000438  2d08              CMP      r5,#8
00043a  d107              BNE      |L1.1100|
00043c  e002              B        |L1.1092|
                  |L1.1086|
;;;407             {
;;;408                case 1:
;;;409                case 2:
00043e  bf00              NOP      
                  |L1.1088|
;;;410                case 4:
000440  bf00              NOP      
                  |L1.1090|
;;;411                case 8: png_ptr->channels = 1; break;
000442  bf00              NOP      
                  |L1.1092|
000444  2001              MOVS     r0,#1
000446  f884026a          STRB     r0,[r4,#0x26a]
00044a  e004              B        |L1.1110|
                  |L1.1100|
;;;412                default: png_error(png_ptr, "Invalid bit depth for paletted image");
00044c  a13f              ADR      r1,|L1.1356|
00044e  4620              MOV      r0,r4
000450  f7fffffe          BL       png_error
000454  bf00              NOP                            ;406
                  |L1.1110|
000456  bf00              NOP                            ;411
;;;413             }
;;;414             break;
000458  e01c              B        |L1.1172|
;;;415          case PNG_COLOR_TYPE_GRAY_ALPHA:
;;;416             if (bit_depth != 8 && bit_depth != 16)
00045a  2d08              CMP      r5,#8
00045c  d005              BEQ      |L1.1130|
00045e  2d10              CMP      r5,#0x10
000460  d003              BEQ      |L1.1130|
;;;417                png_error(png_ptr, "Invalid bit depth for grayscale+alpha image");
000462  a144              ADR      r1,|L1.1396|
000464  4620              MOV      r0,r4
000466  f7fffffe          BL       png_error
                  |L1.1130|
;;;418             png_ptr->channels = 2;
00046a  2002              MOVS     r0,#2
00046c  f884026a          STRB     r0,[r4,#0x26a]
;;;419             break;
000470  e010              B        |L1.1172|
;;;420          case PNG_COLOR_TYPE_RGB_ALPHA:
;;;421             if (bit_depth != 8 && bit_depth != 16)
000472  2d08              CMP      r5,#8
000474  d005              BEQ      |L1.1154|
000476  2d10              CMP      r5,#0x10
000478  d003              BEQ      |L1.1154|
;;;422                png_error(png_ptr, "Invalid bit depth for RGBA image");
00047a  a149              ADR      r1,|L1.1440|
00047c  4620              MOV      r0,r4
00047e  f7fffffe          BL       png_error
                  |L1.1154|
;;;423             png_ptr->channels = 4;
000482  2004              MOVS     r0,#4
000484  f884026a          STRB     r0,[r4,#0x26a]
;;;424             break;
000488  e004              B        |L1.1172|
                  |L1.1162|
;;;425          default:
;;;426             png_error(png_ptr, "Invalid image color type specified");
00048a  a14e              ADR      r1,|L1.1476|
00048c  4620              MOV      r0,r4
00048e  f7fffffe          BL       png_error
000492  bf00              NOP                            ;387
                  |L1.1172|
000494  bf00              NOP                            ;399
;;;427       }
;;;428    
;;;429       if (compression_type != PNG_COMPRESSION_TYPE_BASE)
000496  f1bb0f00          CMP      r11,#0
00049a  d005              BEQ      |L1.1192|
;;;430       {
;;;431          png_warning(png_ptr, "Invalid compression type specified");
00049c  a152              ADR      r1,|L1.1512|
00049e  4620              MOV      r0,r4
0004a0  f7fffffe          BL       png_warning
;;;432          compression_type = PNG_COMPRESSION_TYPE_BASE;
0004a4  f04f0b00          MOV      r11,#0
                  |L1.1192|
;;;433       }
;;;434    
;;;435       /* Write filter_method 64 (intrapixel differencing) only if
;;;436        * 1. Libpng was compiled with PNG_MNG_FEATURES_SUPPORTED and
;;;437        * 2. Libpng did not write a PNG signature (this filter_method is only
;;;438        *    used in PNG datastreams that are embedded in MNG datastreams) and
;;;439        * 3. The application called png_permit_mng_features with a mask that
;;;440        *    included PNG_FLAG_MNG_FILTER_64 and
;;;441        * 4. The filter_method is 64 and
;;;442        * 5. The color_type is RGB or RGBA
;;;443        */
;;;444       if (
0004a8  f894036c          LDRB     r0,[r4,#0x36c]
0004ac  f0000004          AND      r0,r0,#4
0004b0  b158              CBZ      r0,|L1.1226|
0004b2  f8b401a8          LDRH     r0,[r4,#0x1a8]
0004b6  f4005080          AND      r0,r0,#0x1000
0004ba  b930              CBNZ     r0,|L1.1226|
0004bc  2e02              CMP      r6,#2
0004be  d001              BEQ      |L1.1220|
0004c0  2e06              CMP      r6,#6
0004c2  d102              BNE      |L1.1226|
                  |L1.1220|
0004c4  f1b80f40          CMP      r8,#0x40
0004c8  d003              BEQ      |L1.1234|
                  |L1.1226|
;;;445    #if defined(PNG_MNG_FEATURES_SUPPORTED)
;;;446          !((png_ptr->mng_features_permitted & PNG_FLAG_MNG_FILTER_64) &&
;;;447          ((png_ptr->mode&PNG_HAVE_PNG_SIGNATURE) == 0) &&
;;;448          (color_type == PNG_COLOR_TYPE_RGB ||
;;;449           color_type == PNG_COLOR_TYPE_RGB_ALPHA) &&
;;;450          (filter_type == PNG_INTRAPIXEL_DIFFERENCING)) &&
;;;451    #endif
;;;452          filter_type != PNG_FILTER_TYPE_BASE)
0004ca  f1b80f00          CMP      r8,#0
0004ce  d000              BEQ      |L1.1234|
;;;453       {
;;;454          png_warning(png_ptr, "Invalid filter type specified");
0004d0  e09c              B        |L1.1548|
                  |L1.1234|
0004d2  e0a1              B        |L1.1560|
                  |L1.1236|
0004d4  89504e47          DCB      137,"PNG\r\n",26,"\n"
0004d8  0d0a1a0a
                  |L1.1244|
0004dc  556e6b6e          DCB      "Unknown compression type",0
0004e0  6f776e20
0004e4  636f6d70
0004e8  72657373
0004ec  696f6e20
0004f0  74797065
0004f4  00      
0004f5  00                DCB      0
0004f6  00                DCB      0
0004f7  00                DCB      0
                  |L1.1272|
0004f8  7a6c6962          DCB      "zlib error",0
0004fc  20657272
000500  6f7200  
000503  00                DCB      0
                  |L1.1284|
000504  496e7661          DCB      "Invalid bit depth for grayscale image",0
000508  6c696420
00050c  62697420
000510  64657074
000514  6820666f
000518  72206772
00051c  61797363
000520  616c6520
000524  696d6167
000528  6500    
00052a  00                DCB      0
00052b  00                DCB      0
                  |L1.1324|
00052c  496e7661          DCB      "Invalid bit depth for RGB image",0
000530  6c696420
000534  62697420
000538  64657074
00053c  6820666f
000540  72205247
000544  4220696d
000548  61676500
                  |L1.1356|
00054c  496e7661          DCB      "Invalid bit depth for paletted image",0
000550  6c696420
000554  62697420
000558  64657074
00055c  6820666f
000560  72207061
000564  6c657474
000568  65642069
00056c  6d616765
000570  00      
000571  00                DCB      0
000572  00                DCB      0
000573  00                DCB      0
                  |L1.1396|
000574  496e7661          DCB      "Invalid bit depth for grayscale+alpha image",0
000578  6c696420
00057c  62697420
000580  64657074
000584  6820666f
000588  72206772
00058c  61797363
000590  616c652b
000594  616c7068
000598  6120696d
00059c  61676500
                  |L1.1440|
0005a0  496e7661          DCB      "Invalid bit depth for RGBA image",0
0005a4  6c696420
0005a8  62697420
0005ac  64657074
0005b0  6820666f
0005b4  72205247
0005b8  42412069
0005bc  6d616765
0005c0  00      
0005c1  00                DCB      0
0005c2  00                DCB      0
0005c3  00                DCB      0
                  |L1.1476|
0005c4  496e7661          DCB      "Invalid image color type specified",0
0005c8  6c696420
0005cc  696d6167
0005d0  6520636f
0005d4  6c6f7220
0005d8  74797065
0005dc  20737065
0005e0  63696669
0005e4  656400  
0005e7  00                DCB      0
                  |L1.1512|
0005e8  496e7661          DCB      "Invalid compression type specified",0
0005ec  6c696420
0005f0  636f6d70
0005f4  72657373
0005f8  696f6e20
0005fc  74797065
000600  20737065
000604  63696669
000608  656400  
00060b  00                DCB      0
                  |L1.1548|
00060c  a1f9              ADR      r1,|L1.2548|
00060e  4620              MOV      r0,r4
000610  f7fffffe          BL       png_warning
;;;455          filter_type = PNG_FILTER_TYPE_BASE;
000614  f04f0800          MOV      r8,#0
                  |L1.1560|
;;;456       }
;;;457    
;;;458    #ifdef PNG_WRITE_INTERLACING_SUPPORTED
;;;459       if (interlace_type != PNG_INTERLACE_NONE &&
000618  f1b90f00          CMP      r9,#0
00061c  d008              BEQ      |L1.1584|
;;;460          interlace_type != PNG_INTERLACE_ADAM7)
00061e  f1b90f01          CMP      r9,#1
000622  d005              BEQ      |L1.1584|
;;;461       {
;;;462          png_warning(png_ptr, "Invalid interlace type specified");
000624  a1fb              ADR      r1,|L1.2580|
000626  4620              MOV      r0,r4
000628  f7fffffe          BL       png_warning
;;;463          interlace_type = PNG_INTERLACE_ADAM7;
00062c  f04f0901          MOV      r9,#1
                  |L1.1584|
;;;464       }
;;;465    #else
;;;466       interlace_type=PNG_INTERLACE_NONE;
;;;467    #endif
;;;468    
;;;469       /* save off the relevent information */
;;;470       png_ptr->bit_depth = (png_byte)bit_depth;
000630  f204244b          ADD      r4,r4,#0x24b
000634  7725              STRB     r5,[r4,#0x1c]
;;;471       png_ptr->color_type = (png_byte)color_type;
000636  76e6              STRB     r6,[r4,#0x1b]
;;;472       png_ptr->interlaced = (png_byte)interlace_type;
000638  f8849018          STRB     r9,[r4,#0x18]
;;;473    #if defined(PNG_MNG_FEATURES_SUPPORTED)
;;;474       png_ptr->filter_type = (png_byte)filter_type;
00063c  f8848129          STRB     r8,[r4,#0x129]
;;;475    #endif
;;;476       png_ptr->compression_type = (png_byte)compression_type;
000640  f884b14d          STRB     r11,[r4,#0x14d]
;;;477       png_ptr->width = width;
000644  f8447c43          STR      r7,[r4,#-0x43]
;;;478       png_ptr->height = height;
000648  f844ac3f          STR      r10,[r4,#-0x3f]
;;;479    
;;;480       png_ptr->pixel_depth = (png_byte)(bit_depth * png_ptr->channels);
00064c  7fe0              LDRB     r0,[r4,#0x1f]
00064e  4368              MULS     r0,r5,r0
000650  77a0              STRB     r0,[r4,#0x1e]
;;;481       png_ptr->rowbytes = PNG_ROWBYTES(png_ptr->pixel_depth, width);
000652  7fa0              LDRB     r0,[r4,#0x1e]
000654  f2a4244b          SUB      r4,r4,#0x24b
000658  2808              CMP      r0,#8
00065a  db04              BLT      |L1.1638|
00065c  f8940269          LDRB     r0,[r4,#0x269]
000660  08c0              LSRS     r0,r0,#3
000662  4378              MULS     r0,r7,r0
000664  e004              B        |L1.1648|
                  |L1.1638|
000666  f8940269          LDRB     r0,[r4,#0x269]
00066a  4378              MULS     r0,r7,r0
00066c  1dc0              ADDS     r0,r0,#7
00066e  08c0              LSRS     r0,r0,#3
                  |L1.1648|
000670  f8c40218          STR      r0,[r4,#0x218]
;;;482       /* set the usr info, so any transformations can modify it */
;;;483       png_ptr->usr_width = png_ptr->width;
000674  f8d40208          LDR      r0,[r4,#0x208]
000678  f8c40214          STR      r0,[r4,#0x214]
;;;484       png_ptr->usr_bit_depth = png_ptr->bit_depth;
00067c  f8940267          LDRB     r0,[r4,#0x267]
000680  f8840268          STRB     r0,[r4,#0x268]
;;;485       png_ptr->usr_channels = png_ptr->channels;
000684  f894026a          LDRB     r0,[r4,#0x26a]
000688  f884026b          STRB     r0,[r4,#0x26b]
;;;486    
;;;487       /* pack the header information into the buffer */
;;;488       png_save_uint_32(buf, width);
00068c  4639              MOV      r1,r7
00068e  a805              ADD      r0,sp,#0x14
000690  f7fffffe          BL       png_save_uint_32
;;;489       png_save_uint_32(buf + 4, height);
000694  4651              MOV      r1,r10
000696  a806              ADD      r0,sp,#0x18
000698  f7fffffe          BL       png_save_uint_32
;;;490       buf[8] = (png_byte)bit_depth;
00069c  b2e8              UXTB     r0,r5
00069e  f88d001c          STRB     r0,[sp,#0x1c]
;;;491       buf[9] = (png_byte)color_type;
0006a2  b2f0              UXTB     r0,r6
0006a4  f88d001d          STRB     r0,[sp,#0x1d]
;;;492       buf[10] = (png_byte)compression_type;
0006a8  f00b00ff          AND      r0,r11,#0xff
0006ac  f88d001e          STRB     r0,[sp,#0x1e]
;;;493       buf[11] = (png_byte)filter_type;
0006b0  f00800ff          AND      r0,r8,#0xff
0006b4  f88d001f          STRB     r0,[sp,#0x1f]
;;;494       buf[12] = (png_byte)interlace_type;
0006b8  f00900ff          AND      r0,r9,#0xff
0006bc  f88d0020          STRB     r0,[sp,#0x20]
;;;495    
;;;496       /* write the chunk */
;;;497       png_write_chunk(png_ptr, (png_bytep)png_IHDR, buf, (png_size_t)13);
0006c0  230d              MOVS     r3,#0xd
0006c2  aa05              ADD      r2,sp,#0x14
0006c4  49dc              LDR      r1,|L1.2616|
0006c6  4620              MOV      r0,r4
0006c8  f7fffffe          BL       png_write_chunk
;;;498    
;;;499       /* initialize zlib with PNG info */
;;;500       png_ptr->zstream.zalloc = png_zalloc;
0006cc  49db              LDR      r1,|L1.2620|
0006ce  f44f70ea          MOV      r0,#0x1d4
0006d2  5101              STR      r1,[r0,r4]
;;;501       png_ptr->zstream.zfree = png_zfree;
0006d4  49da              LDR      r1,|L1.2624|
0006d6  1d00              ADDS     r0,r0,#4
0006d8  5101              STR      r1,[r0,r4]
;;;502       png_ptr->zstream.opaque = (voidpf)png_ptr;
0006da  1d00              ADDS     r0,r0,#4
0006dc  5104              STR      r4,[r0,r4]
;;;503       if (!(png_ptr->do_filter))
0006de  f8940265          LDRB     r0,[r4,#0x265]
0006e2  b970              CBNZ     r0,|L1.1794|
;;;504       {
;;;505          if (png_ptr->color_type == PNG_COLOR_TYPE_PALETTE ||
0006e4  f8940266          LDRB     r0,[r4,#0x266]
0006e8  2803              CMP      r0,#3
0006ea  d003              BEQ      |L1.1780|
;;;506             png_ptr->bit_depth < 8)
0006ec  f8940267          LDRB     r0,[r4,#0x267]
0006f0  2808              CMP      r0,#8
0006f2  da03              BGE      |L1.1788|
                  |L1.1780|
;;;507             png_ptr->do_filter = PNG_FILTER_NONE;
0006f4  2008              MOVS     r0,#8
0006f6  f8840265          STRB     r0,[r4,#0x265]
0006fa  e002              B        |L1.1794|
                  |L1.1788|
;;;508          else
;;;509             png_ptr->do_filter = PNG_ALL_FILTERS;
0006fc  20f8              MOVS     r0,#0xf8
0006fe  f8840265          STRB     r0,[r4,#0x265]
                  |L1.1794|
;;;510       }
;;;511       if (!(png_ptr->flags & PNG_FLAG_ZLIB_CUSTOM_STRATEGY))
000702  f89401ac          LDRB     r0,[r4,#0x1ac]
000706  f0000001          AND      r0,r0,#1
00070a  b950              CBNZ     r0,|L1.1826|
;;;512       {
;;;513          if (png_ptr->do_filter != PNG_FILTER_NONE)
00070c  f8940265          LDRB     r0,[r4,#0x265]
000710  2808              CMP      r0,#8
000712  d003              BEQ      |L1.1820|
;;;514             png_ptr->zlib_strategy = Z_FILTERED;
000714  2001              MOVS     r0,#1
000716  f8c40204          STR      r0,[r4,#0x204]
00071a  e002              B        |L1.1826|
                  |L1.1820|
;;;515          else
;;;516             png_ptr->zlib_strategy = Z_DEFAULT_STRATEGY;
00071c  2000              MOVS     r0,#0
00071e  f8c40204          STR      r0,[r4,#0x204]
                  |L1.1826|
;;;517       }
;;;518       if (!(png_ptr->flags & PNG_FLAG_ZLIB_CUSTOM_LEVEL))
000722  f89401ac          LDRB     r0,[r4,#0x1ac]
000726  f0000002          AND      r0,r0,#2
00072a  b918              CBNZ     r0,|L1.1844|
;;;519          png_ptr->zlib_level = Z_DEFAULT_COMPRESSION;
00072c  f04f30ff          MOV      r0,#0xffffffff
000730  f8c401f4          STR      r0,[r4,#0x1f4]
                  |L1.1844|
;;;520       if (!(png_ptr->flags & PNG_FLAG_ZLIB_CUSTOM_MEM_LEVEL))
000734  f89401ac          LDRB     r0,[r4,#0x1ac]
000738  f0000004          AND      r0,r0,#4
00073c  b910              CBNZ     r0,|L1.1860|
;;;521          png_ptr->zlib_mem_level = 8;
00073e  2008              MOVS     r0,#8
000740  f8c40200          STR      r0,[r4,#0x200]
                  |L1.1860|
;;;522       if (!(png_ptr->flags & PNG_FLAG_ZLIB_CUSTOM_WINDOW_BITS))
000744  f89401ac          LDRB     r0,[r4,#0x1ac]
000748  f0000008          AND      r0,r0,#8
00074c  b910              CBNZ     r0,|L1.1876|
;;;523          png_ptr->zlib_window_bits = 15;
00074e  200f              MOVS     r0,#0xf
000750  f8c401fc          STR      r0,[r4,#0x1fc]
                  |L1.1876|
;;;524       if (!(png_ptr->flags & PNG_FLAG_ZLIB_CUSTOM_METHOD))
000754  f89401ac          LDRB     r0,[r4,#0x1ac]
000758  f0000010          AND      r0,r0,#0x10
00075c  b910              CBNZ     r0,|L1.1892|
;;;525          png_ptr->zlib_method = 8;
00075e  2008              MOVS     r0,#8
000760  f8c401f8          STR      r0,[r4,#0x1f8]
                  |L1.1892|
;;;526       deflateInit2(&png_ptr->zstream, png_ptr->zlib_level,
000764  2238              MOVS     r2,#0x38
000766  a3b7              ADR      r3,|L1.2628|
000768  f50474fa          ADD      r4,r4,#0x1f4
00076c  e9d40103          LDRD     r0,r1,[r4,#0xc]
000770  e88d000b          STM      sp,{r0,r1,r3}
000774  9203              STR      r2,[sp,#0xc]
000776  e894000e          LDM      r4,{r1-r3}
00077a  f5a474fa          SUB      r4,r4,#0x1f4
00077e  f50470da          ADD      r0,r4,#0x1b4
000782  f7fffffe          BL       deflateInit2_
;;;527          png_ptr->zlib_method, png_ptr->zlib_window_bits,
;;;528          png_ptr->zlib_mem_level, png_ptr->zlib_strategy);
;;;529       png_ptr->zstream.next_out = png_ptr->zbuf;
000786  f44f70e0          MOV      r0,#0x1c0
00078a  f8d411ec          LDR      r1,[r4,#0x1ec]
00078e  5101              STR      r1,[r0,r4]
;;;530       png_ptr->zstream.avail_out = (uInt)png_ptr->zbuf_size;
000790  1d00              ADDS     r0,r0,#4
000792  f8d411f0          LDR      r1,[r4,#0x1f0]
000796  5101              STR      r1,[r0,r4]
;;;531       /* libpng is not interested in zstream.data_type */
;;;532       /* set it to a predefined value, to avoid its evaluation inside zlib */
;;;533       png_ptr->zstream.data_type = Z_BINARY;
000798  2100              MOVS     r1,#0
00079a  f44f70f0          MOV      r0,#0x1e0
00079e  5101              STR      r1,[r0,r4]
;;;534    
;;;535       png_ptr->mode = PNG_HAVE_IHDR;
0007a0  2001              MOVS     r0,#1
0007a2  f8c401a8          STR      r0,[r4,#0x1a8]
;;;536    }
0007a6  b009              ADD      sp,sp,#0x24
0007a8  e8bd8ff0          POP      {r4-r11,pc}
;;;537    
                          ENDP

                  png_write_PLTE PROC
;;;542    void /* PRIVATE */
;;;543    png_write_PLTE(png_structp png_ptr, png_colorp palette, png_uint_32 num_pal)
0007ac  e92d43f8          PUSH     {r3-r9,lr}
;;;544    {
0007b0  4604              MOV      r4,r0
0007b2  4688              MOV      r8,r1
0007b4  4615              MOV      r5,r2
;;;545    #ifdef PNG_USE_LOCAL_ARRAYS
;;;546       PNG_PLTE;
;;;547    #endif
;;;548       png_uint_32 i;
;;;549       png_colorp pal_ptr;
;;;550       png_byte buf[3];
;;;551    
;;;552       png_debug(1, "in png_write_PLTE\n");
;;;553       if ((
0007b6  f894036c          LDRB     r0,[r4,#0x36c]
0007ba  f0000001          AND      r0,r0,#1
0007be  b900              CBNZ     r0,|L1.1986|
;;;554    #if defined(PNG_MNG_FEATURES_SUPPORTED)
;;;555            !(png_ptr->mng_features_permitted & PNG_FLAG_MNG_EMPTY_PLTE) &&
;;;556    #endif
;;;557            num_pal == 0) || num_pal > 256)
0007c0  b115              CBZ      r5,|L1.1992|
                  |L1.1986|
0007c2  f5b57f80          CMP      r5,#0x100
0007c6  d90e              BLS      |L1.2022|
                  |L1.1992|
;;;558       {
;;;559         if (png_ptr->color_type == PNG_COLOR_TYPE_PALETTE)
0007c8  f8940266          LDRB     r0,[r4,#0x266]
0007cc  2803              CMP      r0,#3
0007ce  d104              BNE      |L1.2010|
;;;560         {
;;;561            png_error(png_ptr, "Invalid number of colors in palette");
0007d0  a19e              ADR      r1,|L1.2636|
0007d2  4620              MOV      r0,r4
0007d4  f7fffffe          BL       png_error
0007d8  e005              B        |L1.2022|
                  |L1.2010|
;;;562         }
;;;563         else
;;;564         {
;;;565            png_warning(png_ptr, "Invalid number of colors in palette");
0007da  a19c              ADR      r1,|L1.2636|
0007dc  4620              MOV      r0,r4
0007de  f7fffffe          BL       png_warning
                  |L1.2018|
;;;566            return;
;;;567         }
;;;568       }
;;;569    
;;;570       if (!(png_ptr->color_type&PNG_COLOR_MASK_COLOR))
;;;571       {
;;;572          png_warning(png_ptr,
;;;573            "Ignoring request to write a PLTE chunk in grayscale PNG");
;;;574          return;
;;;575       }
;;;576    
;;;577       png_ptr->num_palette = (png_uint_16)num_pal;
;;;578       png_debug1(3, "num_palette = %d\n", png_ptr->num_palette);
;;;579    
;;;580       png_write_chunk_start(png_ptr, (png_bytep)png_PLTE, num_pal * 3);
;;;581    #ifndef PNG_NO_POINTER_INDEXING
;;;582       for (i = 0, pal_ptr = palette; i < num_pal; i++, pal_ptr++)
;;;583       {
;;;584          buf[0] = pal_ptr->red;
;;;585          buf[1] = pal_ptr->green;
;;;586          buf[2] = pal_ptr->blue;
;;;587          png_write_chunk_data(png_ptr, buf, (png_size_t)3);
;;;588       }
;;;589    #else
;;;590       /* This is a little slower but some buggy compilers need to do this instead */
;;;591       pal_ptr=palette;
;;;592       for (i = 0; i < num_pal; i++)
;;;593       {
;;;594          buf[0] = pal_ptr[i].red;
;;;595          buf[1] = pal_ptr[i].green;
;;;596          buf[2] = pal_ptr[i].blue;
;;;597          png_write_chunk_data(png_ptr, buf, (png_size_t)3);
;;;598       }
;;;599    #endif
;;;600       png_write_chunk_end(png_ptr);
;;;601       png_ptr->mode |= PNG_HAVE_PLTE;
;;;602    }
0007e2  e8bd83f8          POP      {r3-r9,pc}
                  |L1.2022|
0007e6  f8940266          LDRB     r0,[r4,#0x266]        ;570
0007ea  f0000002          AND      r0,r0,#2              ;570
0007ee  b920              CBNZ     r0,|L1.2042|
0007f0  a19f              ADR      r1,|L1.2672|
0007f2  4620              MOV      r0,r4                 ;572
0007f4  f7fffffe          BL       png_warning
0007f8  e7f3              B        |L1.2018|
                  |L1.2042|
0007fa  f8a45258          STRH     r5,[r4,#0x258]        ;577
0007fe  eb050245          ADD      r2,r5,r5,LSL #1       ;580
000802  49a9              LDR      r1,|L1.2728|
000804  4620              MOV      r0,r4                 ;580
000806  f7fffffe          BL       png_write_chunk_start
00080a  2700              MOVS     r7,#0                 ;582
00080c  4646              MOV      r6,r8                 ;582
00080e  e00f              B        |L1.2096|
                  |L1.2064|
000810  7830              LDRB     r0,[r6,#0]            ;584
000812  f88d0000          STRB     r0,[sp,#0]            ;584
000816  7870              LDRB     r0,[r6,#1]            ;585
000818  f88d0001          STRB     r0,[sp,#1]            ;585
00081c  78b0              LDRB     r0,[r6,#2]            ;586
00081e  f88d0002          STRB     r0,[sp,#2]            ;586
000822  2203              MOVS     r2,#3                 ;587
000824  4669              MOV      r1,sp                 ;587
000826  4620              MOV      r0,r4                 ;587
000828  f7fffffe          BL       png_write_chunk_data
00082c  1c7f              ADDS     r7,r7,#1              ;582
00082e  1cf6              ADDS     r6,r6,#3              ;582
                  |L1.2096|
000830  42af              CMP      r7,r5                 ;582
000832  d3ed              BCC      |L1.2064|
000834  4620              MOV      r0,r4                 ;600
000836  f7fffffe          BL       png_write_chunk_end
00083a  f8d401a8          LDR      r0,[r4,#0x1a8]        ;601
00083e  f0400002          ORR      r0,r0,#2              ;601
000842  f8c401a8          STR      r0,[r4,#0x1a8]        ;601
000846  bf00              NOP      
000848  e7cb              B        |L1.2018|
;;;603    
                          ENDP

                  png_write_IDAT PROC
;;;605    void /* PRIVATE */
;;;606    png_write_IDAT(png_structp png_ptr, png_bytep data, png_size_t length)
00084a  e92d41f0          PUSH     {r4-r8,lr}
;;;607    {
00084e  4604              MOV      r4,r0
000850  460d              MOV      r5,r1
000852  4617              MOV      r7,r2
;;;608    #ifdef PNG_USE_LOCAL_ARRAYS
;;;609       PNG_IDAT;
;;;610    #endif
;;;611       png_debug(1, "in png_write_IDAT\n");
;;;612    
;;;613       /* Optimize the CMF field in the zlib stream. */
;;;614       /* This hack of the zlib stream is compliant to the stream specification. */
;;;615       if (!(png_ptr->mode & PNG_HAVE_IDAT) &&
000854  f89401a8          LDRB     r0,[r4,#0x1a8]
000858  f0000004          AND      r0,r0,#4
00085c  2800              CMP      r0,#0
00085e  d158              BNE      |L1.2322|
;;;616           png_ptr->compression_type == PNG_COMPRESSION_TYPE_BASE)
000860  f8940398          LDRB     r0,[r4,#0x398]
000864  2800              CMP      r0,#0
000866  d154              BNE      |L1.2322|
;;;617       {
;;;618          unsigned int z_cmf = data[0];  /* zlib compression method and flags */
000868  782e              LDRB     r6,[r5,#0]
;;;619          if ((z_cmf & 0x0f) == 8 && (z_cmf & 0xf0) <= 0x70)
00086a  f006000f          AND      r0,r6,#0xf
00086e  2808              CMP      r0,#8
000870  d14a              BNE      |L1.2312|
000872  f00600f0          AND      r0,r6,#0xf0
000876  2870              CMP      r0,#0x70
000878  d846              BHI      |L1.2312|
;;;620          {
;;;621             /* Avoid memory underflows and multiplication overflows. */
;;;622             /* The conditions below are practically always satisfied;
;;;623                however, they still must be checked. */
;;;624             if (length >= 2 &&
00087a  2f02              CMP      r7,#2
00087c  d348              BCC      |L1.2320|
;;;625                 png_ptr->height < 16384 && png_ptr->width < 16384)
00087e  f8d4020c          LDR      r0,[r4,#0x20c]
000882  f5b04f80          CMP      r0,#0x4000
000886  d243              BCS      |L1.2320|
000888  f8d40208          LDR      r0,[r4,#0x208]
00088c  f5b04f80          CMP      r0,#0x4000
000890  d23e              BCS      |L1.2320|
;;;626             {
;;;627                png_uint_32 uncompressed_idat_size = png_ptr->height *
000892  f894c26a          LDRB     r12,[r4,#0x26a]
000896  f8d43208          LDR      r3,[r4,#0x208]
00089a  fb03f30c          MUL      r3,r3,r12
00089e  f894c267          LDRB     r12,[r4,#0x267]
0008a2  fb03f30c          MUL      r3,r3,r12
0008a6  330f              ADDS     r3,r3,#0xf
0008a8  08db              LSRS     r3,r3,#3
0008aa  f8d4c20c          LDR      r12,[r4,#0x20c]
0008ae  fb03f20c          MUL      r2,r3,r12
;;;628                   ((png_ptr->width *
;;;629                   png_ptr->channels * png_ptr->bit_depth + 15) >> 3);
;;;630                unsigned int z_cinfo = z_cmf >> 4;
0008b2  0930              LSRS     r0,r6,#4
;;;631                unsigned int half_z_window_size = 1 << (z_cinfo + 7);
0008b4  1dc3              ADDS     r3,r0,#7
0008b6  f04f0c01          MOV      r12,#1
0008ba  fa0cf103          LSL      r1,r12,r3
;;;632                while (uncompressed_idat_size <= half_z_window_size &&
0008be  e001              B        |L1.2244|
                  |L1.2240|
;;;633                       half_z_window_size >= 256)
;;;634                {
;;;635                   z_cinfo--;
0008c0  1e40              SUBS     r0,r0,#1
;;;636                   half_z_window_size >>= 1;
0008c2  0849              LSRS     r1,r1,#1
                  |L1.2244|
0008c4  428a              CMP      r2,r1                 ;632
0008c6  d801              BHI      |L1.2252|
0008c8  29ff              CMP      r1,#0xff              ;633
0008ca  d8f9              BHI      |L1.2240|
                  |L1.2252|
;;;637                }
;;;638                z_cmf = (z_cmf & 0x0f) | (z_cinfo << 4);
0008cc  4633              MOV      r3,r6
0008ce  f360131f          BFI      r3,r0,#4,#28
0008d2  461e              MOV      r6,r3
;;;639                if (data[0] != (png_byte)z_cmf)
0008d4  782b              LDRB     r3,[r5,#0]
0008d6  f0060cff          AND      r12,r6,#0xff
0008da  4563              CMP      r3,r12
0008dc  d013              BEQ      |L1.2310|
;;;640                {
;;;641                   data[0] = (png_byte)z_cmf;
0008de  702e              STRB     r6,[r5,#0]
;;;642                   data[1] &= 0xe0;
0008e0  786b              LDRB     r3,[r5,#1]
0008e2  f00303e0          AND      r3,r3,#0xe0
0008e6  706b              STRB     r3,[r5,#1]
;;;643                   data[1] += (png_byte)(0x1f - ((z_cmf << 8) + data[1]) % 0x1f);
0008e8  786b              LDRB     r3,[r5,#1]
0008ea  eb032306          ADD      r3,r3,r6,LSL #8
0008ee  f04f0c1f          MOV      r12,#0x1f
0008f2  fbb3f8fc          UDIV     r8,r3,r12
0008f6  fb0c3318          MLS      r3,r12,r8,r3
0008fa  f1c3031f          RSB      r3,r3,#0x1f
0008fe  f895c001          LDRB     r12,[r5,#1]
000902  4463              ADD      r3,r3,r12
000904  706b              STRB     r3,[r5,#1]
                  |L1.2310|
;;;644                }
;;;645             }
000906  e003              B        |L1.2320|
                  |L1.2312|
;;;646          }
;;;647          else
;;;648             png_error(png_ptr,
000908  a168              ADR      r1,|L1.2732|
00090a  4620              MOV      r0,r4
00090c  f7fffffe          BL       png_error
                  |L1.2320|
;;;649                "Invalid zlib compression method or flags in IDAT");
;;;650       }
000910  bf00              NOP      
                  |L1.2322|
;;;651    
;;;652       png_write_chunk(png_ptr, (png_bytep)png_IDAT, data, length);
000912  463b              MOV      r3,r7
000914  462a              MOV      r2,r5
000916  4972              LDR      r1,|L1.2784|
000918  4620              MOV      r0,r4
00091a  f7fffffe          BL       png_write_chunk
;;;653       png_ptr->mode |= PNG_HAVE_IDAT;
00091e  f8d401a8          LDR      r0,[r4,#0x1a8]
000922  f0400004          ORR      r0,r0,#4
000926  f8c401a8          STR      r0,[r4,#0x1a8]
;;;654    }
00092a  e8bd81f0          POP      {r4-r8,pc}
;;;655    
                          ENDP

                  png_write_IEND PROC
;;;657    void /* PRIVATE */
;;;658    png_write_IEND(png_structp png_ptr)
00092e  b510              PUSH     {r4,lr}
;;;659    {
000930  4604              MOV      r4,r0
;;;660    #ifdef PNG_USE_LOCAL_ARRAYS
;;;661       PNG_IEND;
;;;662    #endif
;;;663       png_debug(1, "in png_write_IEND\n");
;;;664       png_write_chunk(png_ptr, (png_bytep)png_IEND, png_bytep_NULL,
000932  2300              MOVS     r3,#0
000934  461a              MOV      r2,r3
000936  496b              LDR      r1,|L1.2788|
000938  4620              MOV      r0,r4
00093a  f7fffffe          BL       png_write_chunk
;;;665         (png_size_t)0);
;;;666       png_ptr->mode |= PNG_HAVE_IEND;
00093e  f8d401a8          LDR      r0,[r4,#0x1a8]
000942  f0400010          ORR      r0,r0,#0x10
000946  f8c401a8          STR      r0,[r4,#0x1a8]
;;;667    }
00094a  bd10              POP      {r4,pc}
;;;668    
                          ENDP

                  png_write_gAMA PROC
;;;672    void /* PRIVATE */
;;;673    png_write_gAMA(png_structp png_ptr, double file_gamma)
00094c  e92d4ff8          PUSH     {r3-r11,lr}
;;;674    {
000950  4682              MOV      r10,r0
000952  4614              MOV      r4,r2
000954  461d              MOV      r5,r3
;;;675    #ifdef PNG_USE_LOCAL_ARRAYS
;;;676       PNG_gAMA;
;;;677    #endif
;;;678       png_uint_32 igamma;
;;;679       png_byte buf[4];
;;;680    
;;;681       png_debug(1, "in png_write_gAMA\n");
;;;682       /* file_gamma is saved in 1/100,000ths */
;;;683       igamma = (png_uint_32)(file_gamma * 100000.0 + 0.5);
000956  2200              MOVS     r2,#0
000958  4b63              LDR      r3,|L1.2792|
00095a  4620              MOV      r0,r4
00095c  4629              MOV      r1,r5
00095e  f7fffffe          BL       __aeabi_dmul
000962  4680              MOV      r8,r0
000964  2200              MOVS     r2,#0
000966  4b61              LDR      r3,|L1.2796|
000968  f7fffffe          BL       __aeabi_dadd
00096c  4606              MOV      r6,r0
00096e  f7fffffe          BL       __aeabi_d2uiz
000972  4683              MOV      r11,r0
;;;684       png_save_uint_32(buf, igamma);
000974  4659              MOV      r1,r11
000976  4668              MOV      r0,sp
000978  f7fffffe          BL       png_save_uint_32
;;;685       png_write_chunk(png_ptr, (png_bytep)png_gAMA, buf, (png_size_t)4);
00097c  2304              MOVS     r3,#4
00097e  466a              MOV      r2,sp
000980  495b              LDR      r1,|L1.2800|
000982  4650              MOV      r0,r10
000984  f7fffffe          BL       png_write_chunk
;;;686    }
000988  e8bd8ff8          POP      {r3-r11,pc}
;;;687    #endif
                          ENDP

                  png_write_gAMA_fixed PROC
;;;689    void /* PRIVATE */
;;;690    png_write_gAMA_fixed(png_structp png_ptr, png_fixed_point file_gamma)
00098c  b538              PUSH     {r3-r5,lr}
;;;691    {
00098e  4604              MOV      r4,r0
000990  460d              MOV      r5,r1
;;;692    #ifdef PNG_USE_LOCAL_ARRAYS
;;;693       PNG_gAMA;
;;;694    #endif
;;;695       png_byte buf[4];
;;;696    
;;;697       png_debug(1, "in png_write_gAMA\n");
;;;698       /* file_gamma is saved in 1/100,000ths */
;;;699       png_save_uint_32(buf, (png_uint_32)file_gamma);
000992  4629              MOV      r1,r5
000994  4668              MOV      r0,sp
000996  f7fffffe          BL       png_save_uint_32
;;;700       png_write_chunk(png_ptr, (png_bytep)png_gAMA, buf, (png_size_t)4);
00099a  2304              MOVS     r3,#4
00099c  466a              MOV      r2,sp
00099e  4954              LDR      r1,|L1.2800|
0009a0  4620              MOV      r0,r4
0009a2  f7fffffe          BL       png_write_chunk
;;;701    }
0009a6  bd38              POP      {r3-r5,pc}
;;;702    #endif
                          ENDP

                  png_write_sRGB PROC
;;;707    void /* PRIVATE */
;;;708    png_write_sRGB(png_structp png_ptr, int srgb_intent)
0009a8  b538              PUSH     {r3-r5,lr}
;;;709    {
0009aa  4605              MOV      r5,r0
0009ac  460c              MOV      r4,r1
;;;710    #ifdef PNG_USE_LOCAL_ARRAYS
;;;711       PNG_sRGB;
;;;712    #endif
;;;713       png_byte buf[1];
;;;714    
;;;715       png_debug(1, "in png_write_sRGB\n");
;;;716       if(srgb_intent >= PNG_sRGB_INTENT_LAST)
0009ae  2c04              CMP      r4,#4
0009b0  db03              BLT      |L1.2490|
;;;717             png_warning(png_ptr,
0009b2  a150              ADR      r1,|L1.2804|
0009b4  4628              MOV      r0,r5
0009b6  f7fffffe          BL       png_warning
                  |L1.2490|
;;;718                "Invalid sRGB rendering intent specified");
;;;719       buf[0]=(png_byte)srgb_intent;
0009ba  b2e0              UXTB     r0,r4
0009bc  9000              STR      r0,[sp,#0]
;;;720       png_write_chunk(png_ptr, (png_bytep)png_sRGB, buf, (png_size_t)1);
0009be  2301              MOVS     r3,#1
0009c0  466a              MOV      r2,sp
0009c2  4956              LDR      r1,|L1.2844|
0009c4  4628              MOV      r0,r5
0009c6  f7fffffe          BL       png_write_chunk
;;;721    }
0009ca  bd38              POP      {r3-r5,pc}
;;;722    #endif
                          ENDP

                  png_check_keyword PROC
;;;1204   png_size_t /* PRIVATE */
;;;1205   png_check_keyword(png_structp png_ptr, png_charp key, png_charpp new_key)
0009cc  e92d5ff0          PUSH     {r4-r12,lr}
;;;1206   {
0009d0  4682              MOV      r10,r0
0009d2  4688              MOV      r8,r1
0009d4  4615              MOV      r5,r2
;;;1207      png_size_t key_len;
;;;1208      png_charp kp, dp;
;;;1209      int kflag;
;;;1210      int kwarn=0;
0009d6  f04f0b00          MOV      r11,#0
;;;1211   
;;;1212      png_debug(1, "in png_check_keyword\n");
;;;1213      *new_key = NULL;
0009da  2000              MOVS     r0,#0
0009dc  6028              STR      r0,[r5,#0]
;;;1214   
;;;1215      if (key == NULL || (key_len = png_strlen(key)) == 0)
0009de  f1b80f00          CMP      r8,#0
0009e2  d004              BEQ      |L1.2542|
0009e4  4640              MOV      r0,r8
0009e6  f7fffffe          BL       strlen
0009ea  0007              MOVS     r7,r0
0009ec  d100              BNE      |L1.2544|
                  |L1.2542|
;;;1216      {
;;;1217         png_warning(png_ptr, "zero length keyword");
0009ee  e097              B        |L1.2848|
                  |L1.2544|
0009f0  e09d              B        |L1.2862|
0009f2  0000              DCW      0x0000
                  |L1.2548|
0009f4  496e7661          DCB      "Invalid filter type specified",0
0009f8  6c696420
0009fc  66696c74
000a00  65722074
000a04  79706520
000a08  73706563
000a0c  69666965
000a10  6400    
000a12  00                DCB      0
000a13  00                DCB      0
                  |L1.2580|
000a14  496e7661          DCB      "Invalid interlace type specified",0
000a18  6c696420
000a1c  696e7465
000a20  726c6163
000a24  65207479
000a28  70652073
000a2c  70656369
000a30  66696564
000a34  00      
000a35  00                DCB      0
000a36  00                DCB      0
000a37  00                DCB      0
                  |L1.2616|
                          DCD      png_IHDR
                  |L1.2620|
                          DCD      png_zalloc
                  |L1.2624|
                          DCD      png_zfree
                  |L1.2628|
000a44  312e322e          DCB      "1.2.3",0
000a48  3300    
000a4a  00                DCB      0
000a4b  00                DCB      0
                  |L1.2636|
000a4c  496e7661          DCB      "Invalid number of colors in palette",0
000a50  6c696420
000a54  6e756d62
000a58  6572206f
000a5c  6620636f
000a60  6c6f7273
000a64  20696e20
000a68  70616c65
000a6c  74746500
                  |L1.2672|
000a70  49676e6f          DCB      "Ignoring request to write a PLTE chunk in grayscale PNG"
000a74  72696e67
000a78  20726571
000a7c  75657374
000a80  20746f20
000a84  77726974
000a88  65206120
000a8c  504c5445
000a90  20636875
000a94  6e6b2069
000a98  6e206772
000a9c  61797363
000aa0  616c6520
000aa4  504e47  
000aa7  00                DCB      0
                  |L1.2728|
                          DCD      png_PLTE
                  |L1.2732|
000aac  496e7661          DCB      "Invalid zlib compression method or flags in IDAT",0
000ab0  6c696420
000ab4  7a6c6962
000ab8  20636f6d
000abc  70726573
000ac0  73696f6e
000ac4  206d6574
000ac8  686f6420
000acc  6f722066
000ad0  6c616773
000ad4  20696e20
000ad8  49444154
000adc  00      
000add  00                DCB      0
000ade  00                DCB      0
000adf  00                DCB      0
                  |L1.2784|
                          DCD      png_IDAT
                  |L1.2788|
                          DCD      png_IEND
                  |L1.2792|
                          DCD      0x40f86a00
                  |L1.2796|
                          DCD      0x3fe00000
                  |L1.2800|
                          DCD      png_gAMA
                  |L1.2804|
000af4  496e7661          DCB      "Invalid sRGB rendering intent specified",0
000af8  6c696420
000afc  73524742
000b00  2072656e
000b04  64657269
000b08  6e672069
000b0c  6e74656e
000b10  74207370
000b14  65636966
000b18  69656400
                  |L1.2844|
                          DCD      png_sRGB
                  |L1.2848|
000b20  a1fe              ADR      r1,|L1.3868|
000b22  4650              MOV      r0,r10
000b24  f7fffffe          BL       png_warning
;;;1218         return ((png_size_t)0);
000b28  2000              MOVS     r0,#0
                  |L1.2858|
;;;1219      }
;;;1220   
;;;1221      png_debug1(2, "Keyword to be checked is '%s'\n", key);
;;;1222   
;;;1223      *new_key = (png_charp)png_malloc_warn(png_ptr, (png_uint_32)(key_len + 2));
;;;1224      if (*new_key == NULL)
;;;1225      {
;;;1226         png_warning(png_ptr, "Out of memory while procesing keyword");
;;;1227         return ((png_size_t)0);
;;;1228      }
;;;1229   
;;;1230      /* Replace non-printing characters with a blank and print a warning */
;;;1231      for (kp = key, dp = *new_key; *kp != '\0'; kp++, dp++)
;;;1232      {
;;;1233         if (*kp < 0x20 || (*kp > 0x7E && (png_byte)*kp < 0xA1))
;;;1234         {
;;;1235   #if !defined(PNG_NO_STDIO) && !defined(_WIN32_WCE)
;;;1236            char msg[40];
;;;1237   
;;;1238            sprintf(msg, "invalid keyword character 0x%02X", *kp);
;;;1239            png_warning(png_ptr, msg);
;;;1240   #else
;;;1241            png_warning(png_ptr, "invalid character in keyword");
;;;1242   #endif
;;;1243            *dp = ' ';
;;;1244         }
;;;1245         else
;;;1246         {
;;;1247            *dp = *kp;
;;;1248         }
;;;1249      }
;;;1250      *dp = '\0';
;;;1251   
;;;1252      /* Remove any trailing white space. */
;;;1253      kp = *new_key + key_len - 1;
;;;1254      if (*kp == ' ')
;;;1255      {
;;;1256         png_warning(png_ptr, "trailing spaces removed from keyword");
;;;1257   
;;;1258         while (*kp == ' ')
;;;1259         {
;;;1260           *(kp--) = '\0';
;;;1261           key_len--;
;;;1262         }
;;;1263      }
;;;1264   
;;;1265      /* Remove any leading white space. */
;;;1266      kp = *new_key;
;;;1267      if (*kp == ' ')
;;;1268      {
;;;1269         png_warning(png_ptr, "leading spaces removed from keyword");
;;;1270   
;;;1271         while (*kp == ' ')
;;;1272         {
;;;1273           kp++;
;;;1274           key_len--;
;;;1275         }
;;;1276      }
;;;1277   
;;;1278      png_debug1(2, "Checking for multiple internal spaces in '%s'\n", kp);
;;;1279   
;;;1280      /* Remove multiple internal spaces. */
;;;1281      for (kflag = 0, dp = *new_key; *kp != '\0'; kp++)
;;;1282      {
;;;1283         if (*kp == ' ' && kflag == 0)
;;;1284         {
;;;1285            *(dp++) = *kp;
;;;1286            kflag = 1;
;;;1287         }
;;;1288         else if (*kp == ' ')
;;;1289         {
;;;1290            key_len--;
;;;1291            kwarn=1;
;;;1292         }
;;;1293         else
;;;1294         {
;;;1295            *(dp++) = *kp;
;;;1296            kflag = 0;
;;;1297         }
;;;1298      }
;;;1299      *dp = '\0';
;;;1300      if(kwarn)
;;;1301         png_warning(png_ptr, "extra interior spaces removed from keyword");
;;;1302   
;;;1303      if (key_len == 0)
;;;1304      {
;;;1305         png_free(png_ptr, *new_key);
;;;1306         *new_key=NULL;
;;;1307         png_warning(png_ptr, "Zero length keyword");
;;;1308      }
;;;1309   
;;;1310      if (key_len > 79)
;;;1311      {
;;;1312         png_warning(png_ptr, "keyword length must be 1 - 79 characters");
;;;1313         new_key[79] = '\0';
;;;1314         key_len = 79;
;;;1315      }
;;;1316   
;;;1317      return (key_len);
;;;1318   }
000b2a  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.2862|
000b2e  1cb9              ADDS     r1,r7,#2              ;1223
000b30  4650              MOV      r0,r10                ;1223
000b32  f7fffffe          BL       png_malloc_warn
000b36  6028              STR      r0,[r5,#0]            ;1223
000b38  6828              LDR      r0,[r5,#0]            ;1224
000b3a  b928              CBNZ     r0,|L1.2888|
000b3c  a1fc              ADR      r1,|L1.3888|
000b3e  4650              MOV      r0,r10                ;1226
000b40  f7fffffe          BL       png_warning
000b44  2000              MOVS     r0,#0                 ;1227
000b46  e7f0              B        |L1.2858|
                  |L1.2888|
000b48  4644              MOV      r4,r8                 ;1231
000b4a  682e              LDR      r6,[r5,#0]            ;1231
000b4c  e013              B        |L1.2934|
                  |L1.2894|
000b4e  7820              LDRB     r0,[r4,#0]            ;1233
000b50  2820              CMP      r0,#0x20              ;1233
000b52  db05              BLT      |L1.2912|
000b54  7820              LDRB     r0,[r4,#0]            ;1233
000b56  287e              CMP      r0,#0x7e              ;1233
000b58  dd09              BLE      |L1.2926|
000b5a  7820              LDRB     r0,[r4,#0]            ;1233
000b5c  28a1              CMP      r0,#0xa1              ;1233
000b5e  da06              BGE      |L1.2926|
                  |L1.2912|
000b60  a1fd              ADR      r1,|L1.3928|
000b62  4650              MOV      r0,r10                ;1241
000b64  f7fffffe          BL       png_warning
000b68  2020              MOVS     r0,#0x20              ;1243
000b6a  7030              STRB     r0,[r6,#0]            ;1243
000b6c  e001              B        |L1.2930|
                  |L1.2926|
000b6e  7820              LDRB     r0,[r4,#0]            ;1247
000b70  7030              STRB     r0,[r6,#0]            ;1247
                  |L1.2930|
000b72  1c64              ADDS     r4,r4,#1              ;1231
000b74  1c76              ADDS     r6,r6,#1              ;1231
                  |L1.2934|
000b76  7820              LDRB     r0,[r4,#0]            ;1231
000b78  2800              CMP      r0,#0                 ;1231
000b7a  d1e8              BNE      |L1.2894|
000b7c  7030              STRB     r0,[r6,#0]            ;1250
000b7e  6828              LDR      r0,[r5,#0]            ;1253
000b80  4438              ADD      r0,r0,r7              ;1253
000b82  1e44              SUBS     r4,r0,#1              ;1253
000b84  7820              LDRB     r0,[r4,#0]            ;1254
000b86  2820              CMP      r0,#0x20              ;1254
000b88  d10b              BNE      |L1.2978|
000b8a  a1fb              ADR      r1,|L1.3960|
000b8c  4650              MOV      r0,r10                ;1256
000b8e  f7fffffe          BL       png_warning
000b92  e003              B        |L1.2972|
                  |L1.2964|
000b94  2000              MOVS     r0,#0                 ;1260
000b96  f8040901          STRB     r0,[r4],#-1           ;1260
000b9a  1e7f              SUBS     r7,r7,#1              ;1261
                  |L1.2972|
000b9c  7820              LDRB     r0,[r4,#0]            ;1258
000b9e  2820              CMP      r0,#0x20              ;1258
000ba0  d0f8              BEQ      |L1.2964|
                  |L1.2978|
000ba2  682c              LDR      r4,[r5,#0]            ;1266
000ba4  7820              LDRB     r0,[r4,#0]            ;1267
000ba6  2820              CMP      r0,#0x20              ;1267
000ba8  d109              BNE      |L1.3006|
000baa  a1fd              ADR      r1,|L1.4000|
000bac  4650              MOV      r0,r10                ;1269
000bae  f7fffffe          BL       png_warning
000bb2  e001              B        |L1.3000|
                  |L1.2996|
000bb4  1c64              ADDS     r4,r4,#1              ;1273
000bb6  1e7f              SUBS     r7,r7,#1              ;1274
                  |L1.3000|
000bb8  7820              LDRB     r0,[r4,#0]            ;1271
000bba  2820              CMP      r0,#0x20              ;1271
000bbc  d0fa              BEQ      |L1.2996|
                  |L1.3006|
000bbe  f04f0900          MOV      r9,#0                 ;1281
000bc2  682e              LDR      r6,[r5,#0]            ;1281
000bc4  e018              B        |L1.3064|
                  |L1.3014|
000bc6  7820              LDRB     r0,[r4,#0]            ;1283
000bc8  2820              CMP      r0,#0x20              ;1283
000bca  d108              BNE      |L1.3038|
000bcc  f1b90f00          CMP      r9,#0                 ;1283
000bd0  d105              BNE      |L1.3038|
000bd2  7820              LDRB     r0,[r4,#0]            ;1285
000bd4  f8060b01          STRB     r0,[r6],#1            ;1285
000bd8  f04f0901          MOV      r9,#1                 ;1286
000bdc  e00b              B        |L1.3062|
                  |L1.3038|
000bde  7820              LDRB     r0,[r4,#0]            ;1288
000be0  2820              CMP      r0,#0x20              ;1288
000be2  d103              BNE      |L1.3052|
000be4  1e7f              SUBS     r7,r7,#1              ;1290
000be6  f04f0b01          MOV      r11,#1                ;1291
000bea  e004              B        |L1.3062|
                  |L1.3052|
000bec  7820              LDRB     r0,[r4,#0]            ;1295
000bee  f8060b01          STRB     r0,[r6],#1            ;1295
000bf2  f04f0900          MOV      r9,#0                 ;1296
                  |L1.3062|
000bf6  1c64              ADDS     r4,r4,#1              ;1281
                  |L1.3064|
000bf8  7820              LDRB     r0,[r4,#0]            ;1281
000bfa  2800              CMP      r0,#0                 ;1281
000bfc  d1e3              BNE      |L1.3014|
000bfe  7030              STRB     r0,[r6,#0]            ;1299
000c00  f1bb0f00          CMP      r11,#0                ;1300
000c04  d003              BEQ      |L1.3086|
000c06  a1ef              ADR      r1,|L1.4036|
000c08  4650              MOV      r0,r10                ;1301
000c0a  f7fffffe          BL       png_warning
                  |L1.3086|
000c0e  b94f              CBNZ     r7,|L1.3108|
000c10  4650              MOV      r0,r10                ;1305
000c12  6829              LDR      r1,[r5,#0]            ;1305
000c14  f7fffffe          BL       png_free
000c18  2000              MOVS     r0,#0                 ;1306
000c1a  6028              STR      r0,[r5,#0]            ;1306
000c1c  a1f4              ADR      r1,|L1.4080|
000c1e  4650              MOV      r0,r10                ;1307
000c20  f7fffffe          BL       png_warning
                  |L1.3108|
000c24  2f4f              CMP      r7,#0x4f              ;1310
000c26  d907              BLS      |L1.3128|
000c28  a1f6              ADR      r1,|L1.4100|
000c2a  4650              MOV      r0,r10                ;1312
000c2c  f7fffffe          BL       png_warning
000c30  2000              MOVS     r0,#0                 ;1313
000c32  f8c5013c          STR      r0,[r5,#0x13c]        ;1313
000c36  274f              MOVS     r7,#0x4f              ;1314
                  |L1.3128|
000c38  4638              MOV      r0,r7                 ;1317
000c3a  e776              B        |L1.2858|
;;;1319   #endif
                          ENDP

                  png_write_iCCP PROC
;;;726    void /* PRIVATE */
;;;727    png_write_iCCP(png_structp png_ptr, png_charp name, int compression_type,
000c3c  e92d47f0          PUSH     {r4-r10,lr}
;;;728       png_charp profile, int profile_len)
;;;729    {
000c40  b088              SUB      sp,sp,#0x20
000c42  4682              MOV      r10,r0
000c44  4688              MOV      r8,r1
000c46  4691              MOV      r9,r2
000c48  461c              MOV      r4,r3
000c4a  9d10              LDR      r5,[sp,#0x40]
;;;730    #ifdef PNG_USE_LOCAL_ARRAYS
;;;731       PNG_iCCP;
;;;732    #endif
;;;733       png_size_t name_len;
;;;734       png_charp new_name;
;;;735       compression_state comp;
;;;736       int embedded_profile_len = 0;
000c4c  2700              MOVS     r7,#0
;;;737    
;;;738       png_debug(1, "in png_write_iCCP\n");
;;;739    
;;;740       comp.num_output_ptr = 0;
000c4e  2000              MOVS     r0,#0
000c50  9004              STR      r0,[sp,#0x10]
;;;741       comp.max_output_ptr = 0;
000c52  9005              STR      r0,[sp,#0x14]
;;;742       comp.output_ptr = NULL;
000c54  9006              STR      r0,[sp,#0x18]
;;;743       comp.input = NULL;
000c56  9002              STR      r0,[sp,#8]
;;;744       comp.input_len = 0;
000c58  9003              STR      r0,[sp,#0xc]
;;;745    
;;;746       if (name == NULL || (name_len = png_check_keyword(png_ptr, name,
000c5a  f1b80f00          CMP      r8,#0
000c5e  d006              BEQ      |L1.3182|
000c60  aa07              ADD      r2,sp,#0x1c
000c62  4641              MOV      r1,r8
000c64  4650              MOV      r0,r10
000c66  f7fffffe          BL       png_check_keyword
000c6a  0006              MOVS     r6,r0
000c6c  d106              BNE      |L1.3196|
                  |L1.3182|
;;;747          &new_name)) == 0)
;;;748       {
;;;749          png_warning(png_ptr, "Empty keyword in iCCP chunk");
000c6e  a1f0              ADR      r1,|L1.4144|
000c70  4650              MOV      r0,r10
000c72  f7fffffe          BL       png_warning
                  |L1.3190|
;;;750          return;
;;;751       }
;;;752    
;;;753       if (compression_type != PNG_COMPRESSION_TYPE_BASE)
;;;754          png_warning(png_ptr, "Unknown compression type in iCCP chunk");
;;;755    
;;;756       if (profile == NULL)
;;;757          profile_len = 0;
;;;758    
;;;759       if (profile_len > 3)
;;;760          embedded_profile_len =
;;;761              ((*( (png_bytep)profile  ))<<24) |
;;;762              ((*( (png_bytep)profile+1))<<16) |
;;;763              ((*( (png_bytep)profile+2))<< 8) |
;;;764              ((*( (png_bytep)profile+3))    );
;;;765    
;;;766       if (profile_len < embedded_profile_len)
;;;767         {
;;;768            png_warning(png_ptr,
;;;769              "Embedded profile length too large in iCCP chunk");
;;;770            return;
;;;771         }
;;;772    
;;;773       if (profile_len > embedded_profile_len)
;;;774         {
;;;775            png_warning(png_ptr,
;;;776              "Truncating profile to actual length in iCCP chunk");
;;;777            profile_len = embedded_profile_len;
;;;778         }
;;;779    
;;;780       if (profile_len)
;;;781           profile_len = png_text_compress(png_ptr, profile, (png_size_t)profile_len,
;;;782              PNG_COMPRESSION_TYPE_BASE, &comp);
;;;783    
;;;784       /* make sure we include the NULL after the name and the compression type */
;;;785       png_write_chunk_start(png_ptr, (png_bytep)png_iCCP,
;;;786              (png_uint_32)name_len+profile_len+2);
;;;787       new_name[name_len+1]=0x00;
;;;788       png_write_chunk_data(png_ptr, (png_bytep)new_name, name_len + 2);
;;;789    
;;;790       if (profile_len)
;;;791          png_write_compressed_data_out(png_ptr, &comp);
;;;792    
;;;793       png_write_chunk_end(png_ptr);
;;;794       png_free(png_ptr, new_name);
;;;795    }
000c76  b008              ADD      sp,sp,#0x20
000c78  e8bd87f0          POP      {r4-r10,pc}
                  |L1.3196|
000c7c  f1b90f00          CMP      r9,#0                 ;753
000c80  d003              BEQ      |L1.3210|
000c82  a1f2              ADR      r1,|L1.4172|
000c84  4650              MOV      r0,r10                ;754
000c86  f7fffffe          BL       png_warning
                  |L1.3210|
000c8a  b904              CBNZ     r4,|L1.3214|
000c8c  2500              MOVS     r5,#0                 ;757
                  |L1.3214|
000c8e  2d03              CMP      r5,#3                 ;759
000c90  dd0a              BLE      |L1.3240|
000c92  7820              LDRB     r0,[r4,#0]            ;760
000c94  0600              LSLS     r0,r0,#24             ;760
000c96  7861              LDRB     r1,[r4,#1]            ;760
000c98  ea404001          ORR      r0,r0,r1,LSL #16      ;760
000c9c  78a1              LDRB     r1,[r4,#2]            ;760
000c9e  ea402001          ORR      r0,r0,r1,LSL #8       ;760
000ca2  78e1              LDRB     r1,[r4,#3]            ;760
000ca4  ea400701          ORR      r7,r0,r1              ;760
                  |L1.3240|
000ca8  42bd              CMP      r5,r7                 ;766
000caa  da04              BGE      |L1.3254|
000cac  a1f1              ADR      r1,|L1.4212|
000cae  4650              MOV      r0,r10                ;768
000cb0  f7fffffe          BL       png_warning
000cb4  e7df              B        |L1.3190|
                  |L1.3254|
000cb6  42bd              CMP      r5,r7                 ;773
000cb8  dd04              BLE      |L1.3268|
000cba  a1fa              ADR      r1,|L1.4260|
000cbc  4650              MOV      r0,r10                ;775
000cbe  f7fffffe          BL       png_warning
000cc2  463d              MOV      r5,r7                 ;777
                  |L1.3268|
000cc4  b145              CBZ      r5,|L1.3288|
000cc6  a802              ADD      r0,sp,#8              ;781
000cc8  2300              MOVS     r3,#0                 ;781
000cca  462a              MOV      r2,r5                 ;781
000ccc  4621              MOV      r1,r4                 ;781
000cce  9000              STR      r0,[sp,#0]            ;781
000cd0  4650              MOV      r0,r10                ;781
000cd2  f7fffffe          BL       png_text_compress
000cd6  4605              MOV      r5,r0                 ;781
                  |L1.3288|
000cd8  1970              ADDS     r0,r6,r5              ;785
000cda  1c82              ADDS     r2,r0,#2              ;785
000cdc  49fe              LDR      r1,|L1.4312|
000cde  4650              MOV      r0,r10                ;785
000ce0  f7fffffe          BL       png_write_chunk_start
000ce4  2100              MOVS     r1,#0                 ;787
000ce6  1c70              ADDS     r0,r6,#1              ;787
000ce8  9a07              LDR      r2,[sp,#0x1c]         ;787
000cea  5411              STRB     r1,[r2,r0]            ;787
000cec  1cb2              ADDS     r2,r6,#2              ;788
000cee  4650              MOV      r0,r10                ;788
000cf0  9907              LDR      r1,[sp,#0x1c]         ;788
000cf2  f7fffffe          BL       png_write_chunk_data
000cf6  b11d              CBZ      r5,|L1.3328|
000cf8  a902              ADD      r1,sp,#8              ;791
000cfa  4650              MOV      r0,r10                ;791
000cfc  f7fffffe          BL       png_write_compressed_data_out
                  |L1.3328|
000d00  4650              MOV      r0,r10                ;793
000d02  f7fffffe          BL       png_write_chunk_end
000d06  4650              MOV      r0,r10                ;794
000d08  9907              LDR      r1,[sp,#0x1c]         ;794
000d0a  f7fffffe          BL       png_free
000d0e  bf00              NOP      
000d10  e7b1              B        |L1.3190|
;;;796    #endif
                          ENDP

                  png_write_sPLT PROC
;;;800    void /* PRIVATE */
;;;801    png_write_sPLT(png_structp png_ptr, png_sPLT_tp spalette)
000d12  e92d47ff          PUSH     {r0-r10,lr}
;;;802    {
000d16  4681              MOV      r9,r0
000d18  460d              MOV      r5,r1
;;;803    #ifdef PNG_USE_LOCAL_ARRAYS
;;;804       PNG_sPLT;
;;;805    #endif
;;;806       png_size_t name_len;
;;;807       png_charp new_name;
;;;808       png_byte entrybuf[10];
;;;809       int entry_size = (spalette->depth == 8 ? 6 : 10);
000d1a  7928              LDRB     r0,[r5,#4]
000d1c  2808              CMP      r0,#8
000d1e  d101              BNE      |L1.3364|
000d20  2006              MOVS     r0,#6
000d22  e000              B        |L1.3366|
                  |L1.3364|
000d24  200a              MOVS     r0,#0xa
                  |L1.3366|
000d26  4607              MOV      r7,r0
;;;810       int palette_size = entry_size * spalette->nentries;
000d28  68e8              LDR      r0,[r5,#0xc]
000d2a  fb00f807          MUL      r8,r0,r7
;;;811       png_sPLT_entryp ep;
;;;812    #ifdef PNG_NO_POINTER_INDEXING
;;;813       int i;
;;;814    #endif
;;;815    
;;;816       png_debug(1, "in png_write_sPLT\n");
;;;817       if (spalette->name == NULL || (name_len = png_check_keyword(png_ptr,
000d2e  6828              LDR      r0,[r5,#0]
000d30  b130              CBZ      r0,|L1.3392|
000d32  aa03              ADD      r2,sp,#0xc
000d34  4648              MOV      r0,r9
000d36  6829              LDR      r1,[r5,#0]
000d38  f7fffffe          BL       png_check_keyword
000d3c  0006              MOVS     r6,r0
000d3e  d105              BNE      |L1.3404|
                  |L1.3392|
;;;818          spalette->name, &new_name))==0)
;;;819       {
;;;820          png_warning(png_ptr, "Empty keyword in sPLT chunk");
000d40  a1e6              ADR      r1,|L1.4316|
000d42  4648              MOV      r0,r9
000d44  f7fffffe          BL       png_warning
                  |L1.3400|
;;;821          return;
;;;822       }
;;;823    
;;;824       /* make sure we include the NULL after the name */
;;;825       png_write_chunk_start(png_ptr, (png_bytep)png_sPLT,
;;;826              (png_uint_32)(name_len + 2 + palette_size));
;;;827       png_write_chunk_data(png_ptr, (png_bytep)new_name, name_len + 1);
;;;828       png_write_chunk_data(png_ptr, (png_bytep)&spalette->depth, 1);
;;;829    
;;;830       /* loop through each palette entry, writing appropriately */
;;;831    #ifndef PNG_NO_POINTER_INDEXING
;;;832       for (ep = spalette->entries; ep<spalette->entries+spalette->nentries; ep++)
;;;833       {
;;;834           if (spalette->depth == 8)
;;;835           {
;;;836               entrybuf[0] = (png_byte)ep->red;
;;;837               entrybuf[1] = (png_byte)ep->green;
;;;838               entrybuf[2] = (png_byte)ep->blue;
;;;839               entrybuf[3] = (png_byte)ep->alpha;
;;;840               png_save_uint_16(entrybuf + 4, ep->frequency);
;;;841           }
;;;842           else
;;;843           {
;;;844               png_save_uint_16(entrybuf + 0, ep->red);
;;;845               png_save_uint_16(entrybuf + 2, ep->green);
;;;846               png_save_uint_16(entrybuf + 4, ep->blue);
;;;847               png_save_uint_16(entrybuf + 6, ep->alpha);
;;;848               png_save_uint_16(entrybuf + 8, ep->frequency);
;;;849           }
;;;850           png_write_chunk_data(png_ptr, entrybuf, (png_size_t)entry_size);
;;;851       }
;;;852    #else
;;;853       ep=spalette->entries;
;;;854       for (i=0; i>spalette->nentries; i++)
;;;855       {
;;;856           if (spalette->depth == 8)
;;;857           {
;;;858               entrybuf[0] = (png_byte)ep[i].red;
;;;859               entrybuf[1] = (png_byte)ep[i].green;
;;;860               entrybuf[2] = (png_byte)ep[i].blue;
;;;861               entrybuf[3] = (png_byte)ep[i].alpha;
;;;862               png_save_uint_16(entrybuf + 4, ep[i].frequency);
;;;863           }
;;;864           else
;;;865           {
;;;866               png_save_uint_16(entrybuf + 0, ep[i].red);
;;;867               png_save_uint_16(entrybuf + 2, ep[i].green);
;;;868               png_save_uint_16(entrybuf + 4, ep[i].blue);
;;;869               png_save_uint_16(entrybuf + 6, ep[i].alpha);
;;;870               png_save_uint_16(entrybuf + 8, ep[i].frequency);
;;;871           }
;;;872           png_write_chunk_data(png_ptr, entrybuf, entry_size);
;;;873       }
;;;874    #endif
;;;875    
;;;876       png_write_chunk_end(png_ptr);
;;;877       png_free(png_ptr, new_name);
;;;878    }
000d48  e8bd87ff          POP      {r0-r10,pc}
                  |L1.3404|
000d4c  1cb0              ADDS     r0,r6,#2              ;825
000d4e  eb000208          ADD      r2,r0,r8              ;825
000d52  49e9              LDR      r1,|L1.4344|
000d54  4648              MOV      r0,r9                 ;825
000d56  f7fffffe          BL       png_write_chunk_start
000d5a  1c72              ADDS     r2,r6,#1              ;827
000d5c  4648              MOV      r0,r9                 ;827
000d5e  9903              LDR      r1,[sp,#0xc]          ;827
000d60  f7fffffe          BL       png_write_chunk_data
000d64  2201              MOVS     r2,#1                 ;828
000d66  1d29              ADDS     r1,r5,#4              ;828
000d68  4648              MOV      r0,r9                 ;828
000d6a  f7fffffe          BL       png_write_chunk_data
000d6e  68ac              LDR      r4,[r5,#8]            ;832
000d70  e02f              B        |L1.3538|
                  |L1.3442|
000d72  7928              LDRB     r0,[r5,#4]            ;834
000d74  2808              CMP      r0,#8                 ;834
000d76  d110              BNE      |L1.3482|
000d78  7820              LDRB     r0,[r4,#0]            ;836
000d7a  f88d0000          STRB     r0,[sp,#0]            ;836
000d7e  78a0              LDRB     r0,[r4,#2]            ;837
000d80  f88d0001          STRB     r0,[sp,#1]            ;837
000d84  7920              LDRB     r0,[r4,#4]            ;838
000d86  f88d0002          STRB     r0,[sp,#2]            ;838
000d8a  79a0              LDRB     r0,[r4,#6]            ;839
000d8c  f88d0003          STRB     r0,[sp,#3]            ;839
000d90  8921              LDRH     r1,[r4,#8]            ;840
000d92  a801              ADD      r0,sp,#4              ;840
000d94  f7fffffe          BL       png_save_uint_16
000d98  e015              B        |L1.3526|
                  |L1.3482|
000d9a  8821              LDRH     r1,[r4,#0]            ;844
000d9c  4668              MOV      r0,sp                 ;844
000d9e  f7fffffe          BL       png_save_uint_16
000da2  8861              LDRH     r1,[r4,#2]            ;845
000da4  f10d0002          ADD      r0,sp,#2              ;845
000da8  f7fffffe          BL       png_save_uint_16
000dac  88a1              LDRH     r1,[r4,#4]            ;846
000dae  a801              ADD      r0,sp,#4              ;846
000db0  f7fffffe          BL       png_save_uint_16
000db4  88e1              LDRH     r1,[r4,#6]            ;847
000db6  f10d0006          ADD      r0,sp,#6              ;847
000dba  f7fffffe          BL       png_save_uint_16
000dbe  8921              LDRH     r1,[r4,#8]            ;848
000dc0  a802              ADD      r0,sp,#8              ;848
000dc2  f7fffffe          BL       png_save_uint_16
                  |L1.3526|
000dc6  463a              MOV      r2,r7                 ;850
000dc8  4669              MOV      r1,sp                 ;850
000dca  4648              MOV      r0,r9                 ;850
000dcc  f7fffffe          BL       png_write_chunk_data
000dd0  340a              ADDS     r4,r4,#0xa            ;832
                  |L1.3538|
000dd2  e9d50102          LDRD     r0,r1,[r5,#8]         ;832
000dd6  eb010181          ADD      r1,r1,r1,LSL #2       ;832
000dda  eb000041          ADD      r0,r0,r1,LSL #1       ;832
000dde  42a0              CMP      r0,r4                 ;832
000de0  d8c7              BHI      |L1.3442|
000de2  4648              MOV      r0,r9                 ;876
000de4  f7fffffe          BL       png_write_chunk_end
000de8  4648              MOV      r0,r9                 ;877
000dea  9903              LDR      r1,[sp,#0xc]          ;877
000dec  f7fffffe          BL       png_free
000df0  bf00              NOP      
000df2  e7a9              B        |L1.3400|
;;;879    #endif
                          ENDP

                  png_write_sBIT PROC
;;;883    void /* PRIVATE */
;;;884    png_write_sBIT(png_structp png_ptr, png_color_8p sbit, int color_type)
000df4  e92d43f8          PUSH     {r3-r9,lr}
;;;885    {
000df8  4605              MOV      r5,r0
000dfa  460c              MOV      r4,r1
000dfc  4616              MOV      r6,r2
;;;886    #ifdef PNG_USE_LOCAL_ARRAYS
;;;887       PNG_sBIT;
;;;888    #endif
;;;889       png_byte buf[4];
;;;890       png_size_t size;
;;;891    
;;;892       png_debug(1, "in png_write_sBIT\n");
;;;893       /* make sure we don't depend upon the order of PNG_COLOR_8 */
;;;894       if (color_type & PNG_COLOR_MASK_COLOR)
000dfe  f0060002          AND      r0,r6,#2
000e02  b330              CBZ      r0,|L1.3666|
;;;895       {
;;;896          png_byte maxbits;
;;;897    
;;;898          maxbits = (png_byte)(color_type==PNG_COLOR_TYPE_PALETTE ? 8 :
000e04  2e03              CMP      r6,#3
000e06  d101              BNE      |L1.3596|
000e08  2008              MOVS     r0,#8
000e0a  e001              B        |L1.3600|
                  |L1.3596|
;;;899                    png_ptr->usr_bit_depth);
000e0c  f8950268          LDRB     r0,[r5,#0x268]
                  |L1.3600|
000e10  4680              MOV      r8,r0
;;;900          if (sbit->red == 0 || sbit->red > maxbits ||
000e12  7820              LDRB     r0,[r4,#0]
000e14  b160              CBZ      r0,|L1.3632|
000e16  7820              LDRB     r0,[r4,#0]
000e18  4540              CMP      r0,r8
000e1a  dc09              BGT      |L1.3632|
;;;901              sbit->green == 0 || sbit->green > maxbits ||
000e1c  7860              LDRB     r0,[r4,#1]
000e1e  b138              CBZ      r0,|L1.3632|
000e20  7860              LDRB     r0,[r4,#1]
000e22  4540              CMP      r0,r8
000e24  dc04              BGT      |L1.3632|
;;;902              sbit->blue == 0 || sbit->blue > maxbits)
000e26  78a0              LDRB     r0,[r4,#2]
000e28  b110              CBZ      r0,|L1.3632|
000e2a  78a0              LDRB     r0,[r4,#2]
000e2c  4540              CMP      r0,r8
000e2e  dd05              BLE      |L1.3644|
                  |L1.3632|
;;;903          {
;;;904             png_warning(png_ptr, "Invalid sBIT depth specified");
000e30  a1b2              ADR      r1,|L1.4348|
000e32  4628              MOV      r0,r5
000e34  f7fffffe          BL       png_warning
                  |L1.3640|
;;;905             return;
;;;906          }
;;;907          buf[0] = sbit->red;
;;;908          buf[1] = sbit->green;
;;;909          buf[2] = sbit->blue;
;;;910          size = 3;
;;;911       }
;;;912       else
;;;913       {
;;;914          if (sbit->gray == 0 || sbit->gray > png_ptr->usr_bit_depth)
;;;915          {
;;;916             png_warning(png_ptr, "Invalid sBIT depth specified");
;;;917             return;
;;;918          }
;;;919          buf[0] = sbit->gray;
;;;920          size = 1;
;;;921       }
;;;922    
;;;923       if (color_type & PNG_COLOR_MASK_ALPHA)
;;;924       {
;;;925          if (sbit->alpha == 0 || sbit->alpha > png_ptr->usr_bit_depth)
;;;926          {
;;;927             png_warning(png_ptr, "Invalid sBIT depth specified");
;;;928             return;
;;;929          }
;;;930          buf[size++] = sbit->alpha;
;;;931       }
;;;932    
;;;933       png_write_chunk(png_ptr, (png_bytep)png_sBIT, buf, size);
;;;934    }
000e38  e8bd83f8          POP      {r3-r9,pc}
                  |L1.3644|
000e3c  7820              LDRB     r0,[r4,#0]            ;907
000e3e  f88d0000          STRB     r0,[sp,#0]            ;907
000e42  7860              LDRB     r0,[r4,#1]            ;908
000e44  f88d0001          STRB     r0,[sp,#1]            ;908
000e48  78a0              LDRB     r0,[r4,#2]            ;909
000e4a  f88d0002          STRB     r0,[sp,#2]            ;909
000e4e  2703              MOVS     r7,#3                 ;910
000e50  e00f              B        |L1.3698|
                  |L1.3666|
000e52  78e0              LDRB     r0,[r4,#3]            ;914
000e54  b120              CBZ      r0,|L1.3680|
000e56  78e0              LDRB     r0,[r4,#3]            ;914
000e58  f8951268          LDRB     r1,[r5,#0x268]        ;914
000e5c  4288              CMP      r0,r1                 ;914
000e5e  dd04              BLE      |L1.3690|
                  |L1.3680|
000e60  a1a6              ADR      r1,|L1.4348|
000e62  4628              MOV      r0,r5                 ;916
000e64  f7fffffe          BL       png_warning
000e68  e7e6              B        |L1.3640|
                  |L1.3690|
000e6a  78e0              LDRB     r0,[r4,#3]            ;919
000e6c  f88d0000          STRB     r0,[sp,#0]            ;919
000e70  2701              MOVS     r7,#1                 ;920
                  |L1.3698|
000e72  f0060004          AND      r0,r6,#4              ;923
000e76  b180              CBZ      r0,|L1.3738|
000e78  7920              LDRB     r0,[r4,#4]            ;925
000e7a  b120              CBZ      r0,|L1.3718|
000e7c  7920              LDRB     r0,[r4,#4]            ;925
000e7e  f8951268          LDRB     r1,[r5,#0x268]        ;925
000e82  4288              CMP      r0,r1                 ;925
000e84  dd04              BLE      |L1.3728|
                  |L1.3718|
000e86  a19d              ADR      r1,|L1.4348|
000e88  4628              MOV      r0,r5                 ;927
000e8a  f7fffffe          BL       png_warning
000e8e  e7d3              B        |L1.3640|
                  |L1.3728|
000e90  7922              LDRB     r2,[r4,#4]            ;930
000e92  4638              MOV      r0,r7                 ;930
000e94  1c7f              ADDS     r7,r7,#1              ;930
000e96  f80d2000          STRB     r2,[sp,r0]            ;930
                  |L1.3738|
000e9a  463b              MOV      r3,r7                 ;933
000e9c  466a              MOV      r2,sp                 ;933
000e9e  499f              LDR      r1,|L1.4380|
000ea0  4628              MOV      r0,r5                 ;933
000ea2  f7fffffe          BL       png_write_chunk
000ea6  bf00              NOP      
000ea8  e7c6              B        |L1.3640|
;;;935    #endif
                          ENDP

                  png_write_cHRM PROC
;;;940    void /* PRIVATE */
;;;941    png_write_cHRM(png_structp png_ptr, double white_x, double white_y,
000eaa  e92d5fff          PUSH     {r0-r12,lr}
;;;942       double red_x, double red_y, double green_x, double green_y,
;;;943       double blue_x, double blue_y)
;;;944    {
000eae  b08e              SUB      sp,sp,#0x38
000eb0  4614              MOV      r4,r2
000eb2  461d              MOV      r5,r3
000eb4  ae1c              ADD      r6,sp,#0x70
000eb6  e8960fc0          LDM      r6,{r6-r11}
;;;945    #ifdef PNG_USE_LOCAL_ARRAYS
;;;946       PNG_cHRM;
;;;947    #endif
;;;948       png_byte buf[32];
;;;949       png_uint_32 itemp;
;;;950    
;;;951       png_debug(1, "in png_write_cHRM\n");
;;;952       /* each value is saved in 1/100,000ths */
;;;953       if (white_x < 0 || white_x > 0.8 || white_y < 0 || white_y > 0.8 ||
000eba  2200              MOVS     r2,#0
000ebc  4613              MOV      r3,r2
000ebe  4620              MOV      r0,r4
000ec0  4629              MOV      r1,r5
000ec2  f7fffffe          BL       __aeabi_cdcmple
000ec6  d321              BCC      |L1.3852|
000ec8  4a95              LDR      r2,|L1.4384|
000eca  4b96              LDR      r3,|L1.4388|
000ecc  4620              MOV      r0,r4
000ece  4629              MOV      r1,r5
000ed0  f7fffffe          BL       __aeabi_cdrcmple
000ed4  d31a              BCC      |L1.3852|
000ed6  2200              MOVS     r2,#0
000ed8  4613              MOV      r3,r2
000eda  4630              MOV      r0,r6
000edc  4639              MOV      r1,r7
000ede  f7fffffe          BL       __aeabi_cdcmple
000ee2  d313              BCC      |L1.3852|
000ee4  4a8e              LDR      r2,|L1.4384|
000ee6  4b8f              LDR      r3,|L1.4388|
000ee8  4630              MOV      r0,r6
000eea  4639              MOV      r1,r7
000eec  f7fffffe          BL       __aeabi_cdrcmple
000ef0  d30c              BCC      |L1.3852|
;;;954           white_x + white_y > 1.0)
000ef2  4632              MOV      r2,r6
000ef4  463b              MOV      r3,r7
000ef6  4620              MOV      r0,r4
000ef8  4629              MOV      r1,r5
000efa  f7fffffe          BL       __aeabi_dadd
000efe  2200              MOVS     r2,#0
000f00  4b89              LDR      r3,|L1.4392|
000f02  e9cd0102          STRD     r0,r1,[sp,#8]
000f06  f7fffffe          BL       __aeabi_cdrcmple
000f0a  d205              BCS      |L1.3864|
                  |L1.3852|
;;;955       {
;;;956          png_warning(png_ptr, "Invalid cHRM white point specified");
000f0c  a187              ADR      r1,|L1.4396|
000f0e  980e              LDR      r0,[sp,#0x38]
000f10  f7fffffe          BL       png_warning
;;;957    #if !defined(PNG_NO_CONSOLE_IO)
;;;958          fprintf(stderr,"white_x=%f, white_y=%f\n",white_x, white_y);
;;;959    #endif
;;;960          return;
;;;961       }
;;;962       itemp = (png_uint_32)(white_x * 100000.0 + 0.5);
;;;963       png_save_uint_32(buf, itemp);
;;;964       itemp = (png_uint_32)(white_y * 100000.0 + 0.5);
;;;965       png_save_uint_32(buf + 4, itemp);
;;;966    
;;;967       if (red_x < 0 ||  red_y < 0 || red_x + red_y > 1.0)
;;;968       {
;;;969          png_warning(png_ptr, "Invalid cHRM red point specified");
;;;970          return;
;;;971       }
;;;972       itemp = (png_uint_32)(red_x * 100000.0 + 0.5);
;;;973       png_save_uint_32(buf + 8, itemp);
;;;974       itemp = (png_uint_32)(red_y * 100000.0 + 0.5);
;;;975       png_save_uint_32(buf + 12, itemp);
;;;976    
;;;977       if (green_x < 0 || green_y < 0 || green_x + green_y > 1.0)
;;;978       {
;;;979          png_warning(png_ptr, "Invalid cHRM green point specified");
;;;980          return;
;;;981       }
;;;982       itemp = (png_uint_32)(green_x * 100000.0 + 0.5);
;;;983       png_save_uint_32(buf + 16, itemp);
;;;984       itemp = (png_uint_32)(green_y * 100000.0 + 0.5);
;;;985       png_save_uint_32(buf + 20, itemp);
;;;986    
;;;987       if (blue_x < 0 || blue_y < 0 || blue_x + blue_y > 1.0)
;;;988       {
;;;989          png_warning(png_ptr, "Invalid cHRM blue point specified");
;;;990          return;
;;;991       }
;;;992       itemp = (png_uint_32)(blue_x * 100000.0 + 0.5);
;;;993       png_save_uint_32(buf + 24, itemp);
;;;994       itemp = (png_uint_32)(blue_y * 100000.0 + 0.5);
;;;995       png_save_uint_32(buf + 28, itemp);
;;;996    
;;;997       png_write_chunk(png_ptr, (png_bytep)png_cHRM, buf, (png_size_t)32);
;;;998    }
000f14  b012              ADD      sp,sp,#0x48
000f16  e11b              B        |L1.4432|
                  |L1.3864|
000f18  e11c              B        |L1.4436|
000f1a  0000              DCW      0x0000
                  |L1.3868|
000f1c  7a65726f          DCB      "zero length keyword",0
000f20  206c656e
000f24  67746820
000f28  6b657977
000f2c  6f726400
                  |L1.3888|
000f30  4f757420          DCB      "Out of memory while procesing keyword",0
000f34  6f66206d
000f38  656d6f72
000f3c  79207768
000f40  696c6520
000f44  70726f63
000f48  6573696e
000f4c  67206b65
000f50  79776f72
000f54  6400    
000f56  00                DCB      0
000f57  00                DCB      0
                  |L1.3928|
000f58  696e7661          DCB      "invalid character in keyword",0
000f5c  6c696420
000f60  63686172
000f64  61637465
000f68  7220696e
000f6c  206b6579
000f70  776f7264
000f74  00      
000f75  00                DCB      0
000f76  00                DCB      0
000f77  00                DCB      0
                  |L1.3960|
000f78  74726169          DCB      "trailing spaces removed from keyword",0
000f7c  6c696e67
000f80  20737061
000f84  63657320
000f88  72656d6f
000f8c  76656420
000f90  66726f6d
000f94  206b6579
000f98  776f7264
000f9c  00      
000f9d  00                DCB      0
000f9e  00                DCB      0
000f9f  00                DCB      0
                  |L1.4000|
000fa0  6c656164          DCB      "leading spaces removed from keyword",0
000fa4  696e6720
000fa8  73706163
000fac  65732072
000fb0  656d6f76
000fb4  65642066
000fb8  726f6d20
000fbc  6b657977
000fc0  6f726400
                  |L1.4036|
000fc4  65787472          DCB      "extra interior spaces removed from keyword",0
000fc8  6120696e
000fcc  74657269
000fd0  6f722073
000fd4  70616365
000fd8  73207265
000fdc  6d6f7665
000fe0  64206672
000fe4  6f6d206b
000fe8  6579776f
000fec  726400  
000fef  00                DCB      0
                  |L1.4080|
000ff0  5a65726f          DCB      "Zero length keyword",0
000ff4  206c656e
000ff8  67746820
000ffc  6b657977
001000  6f726400
                  |L1.4100|
001004  6b657977          DCB      "keyword length must be 1 - 79 characters",0
001008  6f726420
00100c  6c656e67
001010  7468206d
001014  75737420
001018  62652031
00101c  202d2037
001020  39206368
001024  61726163
001028  74657273
00102c  00      
00102d  00                DCB      0
00102e  00                DCB      0
00102f  00                DCB      0
                  |L1.4144|
001030  456d7074          DCB      "Empty keyword in iCCP chunk",0
001034  79206b65
001038  79776f72
00103c  6420696e
001040  20694343
001044  50206368
001048  756e6b00
                  |L1.4172|
00104c  556e6b6e          DCB      "Unknown compression type in iCCP chunk",0
001050  6f776e20
001054  636f6d70
001058  72657373
00105c  696f6e20
001060  74797065
001064  20696e20
001068  69434350
00106c  20636875
001070  6e6b00  
001073  00                DCB      0
                  |L1.4212|
001074  456d6265          DCB      "Embedded profile length too large in iCCP chunk",0
001078  64646564
00107c  2070726f
001080  66696c65
001084  206c656e
001088  67746820
00108c  746f6f20
001090  6c617267
001094  6520696e
001098  20694343
00109c  50206368
0010a0  756e6b00
                  |L1.4260|
0010a4  5472756e          DCB      "Truncating profile to actual length in iCCP chunk",0
0010a8  63617469
0010ac  6e672070
0010b0  726f6669
0010b4  6c652074
0010b8  6f206163
0010bc  7475616c
0010c0  206c656e
0010c4  67746820
0010c8  696e2069
0010cc  43435020
0010d0  6368756e
0010d4  6b00    
0010d6  00                DCB      0
0010d7  00                DCB      0
                  |L1.4312|
                          DCD      png_iCCP
                  |L1.4316|
0010dc  456d7074          DCB      "Empty keyword in sPLT chunk",0
0010e0  79206b65
0010e4  79776f72
0010e8  6420696e
0010ec  2073504c
0010f0  54206368
0010f4  756e6b00
                  |L1.4344|
                          DCD      png_sPLT
                  |L1.4348|
0010fc  496e7661          DCB      "Invalid sBIT depth specified",0
001100  6c696420
001104  73424954
001108  20646570
00110c  74682073
001110  70656369
001114  66696564
001118  00      
001119  00                DCB      0
00111a  00                DCB      0
00111b  00                DCB      0
                  |L1.4380|
                          DCD      png_sBIT
                  |L1.4384|
                          DCD      0x9999999a
                  |L1.4388|
                          DCD      0x3fe99999
                  |L1.4392|
                          DCD      0x3ff00000
                  |L1.4396|
00112c  496e7661          DCB      "Invalid cHRM white point specified",0
001130  6c696420
001134  6348524d
001138  20776869
00113c  74652070
001140  6f696e74
001144  20737065
001148  63696669
00114c  656400  
00114f  00                DCB      0
                  |L1.4432|
001150  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.4436|
001154  2200              MOVS     r2,#0                 ;962
001156  4bf8              LDR      r3,|L1.5432|
001158  4620              MOV      r0,r4                 ;962
00115a  4629              MOV      r1,r5                 ;962
00115c  f7fffffe          BL       __aeabi_dmul
001160  2200              MOVS     r2,#0                 ;962
001162  4bf6              LDR      r3,|L1.5436|
001164  e9cd0100          STRD     r0,r1,[sp,#0]         ;962
001168  f7fffffe          BL       __aeabi_dadd
00116c  e9cd0102          STRD     r0,r1,[sp,#8]         ;962
001170  f7fffffe          BL       __aeabi_d2uiz
001174  9005              STR      r0,[sp,#0x14]         ;962
001176  a806              ADD      r0,sp,#0x18           ;963
001178  9905              LDR      r1,[sp,#0x14]         ;963
00117a  f7fffffe          BL       png_save_uint_32
00117e  2200              MOVS     r2,#0                 ;964
001180  4bed              LDR      r3,|L1.5432|
001182  4630              MOV      r0,r6                 ;964
001184  4639              MOV      r1,r7                 ;964
001186  f7fffffe          BL       __aeabi_dmul
00118a  2200              MOVS     r2,#0                 ;964
00118c  4beb              LDR      r3,|L1.5436|
00118e  e9cd0100          STRD     r0,r1,[sp,#0]         ;964
001192  f7fffffe          BL       __aeabi_dadd
001196  e9cd0102          STRD     r0,r1,[sp,#8]         ;964
00119a  f7fffffe          BL       __aeabi_d2uiz
00119e  9005              STR      r0,[sp,#0x14]         ;964
0011a0  a807              ADD      r0,sp,#0x1c           ;965
0011a2  9905              LDR      r1,[sp,#0x14]         ;965
0011a4  f7fffffe          BL       png_save_uint_32
0011a8  2200              MOVS     r2,#0                 ;967
0011aa  4613              MOV      r3,r2                 ;967
0011ac  4640              MOV      r0,r8                 ;967
0011ae  4649              MOV      r1,r9                 ;967
0011b0  f7fffffe          BL       __aeabi_cdcmple
0011b4  d313              BCC      |L1.4574|
0011b6  2200              MOVS     r2,#0                 ;967
0011b8  4613              MOV      r3,r2                 ;967
0011ba  4650              MOV      r0,r10                ;967
0011bc  4659              MOV      r1,r11                ;967
0011be  f7fffffe          BL       __aeabi_cdcmple
0011c2  d30c              BCC      |L1.4574|
0011c4  4652              MOV      r2,r10                ;967
0011c6  465b              MOV      r3,r11                ;967
0011c8  4640              MOV      r0,r8                 ;967
0011ca  4649              MOV      r1,r9                 ;967
0011cc  f7fffffe          BL       __aeabi_dadd
0011d0  2200              MOVS     r2,#0                 ;967
0011d2  4bdb              LDR      r3,|L1.5440|
0011d4  e9cd0102          STRD     r0,r1,[sp,#8]         ;967
0011d8  f7fffffe          BL       __aeabi_cdrcmple
0011dc  d206              BCS      |L1.4588|
                  |L1.4574|
0011de  a1d9              ADR      r1,|L1.5444|
0011e0  980e              LDR      r0,[sp,#0x38]         ;969
0011e2  f7fffffe          BL       png_warning
                  |L1.4582|
0011e6  b012              ADD      sp,sp,#0x48
0011e8  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.4588|
0011ec  2200              MOVS     r2,#0                 ;972
0011ee  4bd2              LDR      r3,|L1.5432|
0011f0  4640              MOV      r0,r8                 ;972
0011f2  4649              MOV      r1,r9                 ;972
0011f4  f7fffffe          BL       __aeabi_dmul
0011f8  2200              MOVS     r2,#0                 ;972
0011fa  4bd0              LDR      r3,|L1.5436|
0011fc  e9cd0100          STRD     r0,r1,[sp,#0]         ;972
001200  f7fffffe          BL       __aeabi_dadd
001204  e9cd0102          STRD     r0,r1,[sp,#8]         ;972
001208  f7fffffe          BL       __aeabi_d2uiz
00120c  9005              STR      r0,[sp,#0x14]         ;972
00120e  a808              ADD      r0,sp,#0x20           ;973
001210  9905              LDR      r1,[sp,#0x14]         ;973
001212  f7fffffe          BL       png_save_uint_32
001216  2200              MOVS     r2,#0                 ;974
001218  4bc7              LDR      r3,|L1.5432|
00121a  4650              MOV      r0,r10                ;974
00121c  4659              MOV      r1,r11                ;974
00121e  f7fffffe          BL       __aeabi_dmul
001222  2200              MOVS     r2,#0                 ;974
001224  4bc5              LDR      r3,|L1.5436|
001226  e9cd0100          STRD     r0,r1,[sp,#0]         ;974
00122a  f7fffffe          BL       __aeabi_dadd
00122e  e9cd0102          STRD     r0,r1,[sp,#8]         ;974
001232  f7fffffe          BL       __aeabi_d2uiz
001236  9005              STR      r0,[sp,#0x14]         ;974
001238  a809              ADD      r0,sp,#0x24           ;975
00123a  9905              LDR      r1,[sp,#0x14]         ;975
00123c  f7fffffe          BL       png_save_uint_32
001240  2200              MOVS     r2,#0                 ;977
001242  4613              MOV      r3,r2                 ;977
001244  e9dd0122          LDRD     r0,r1,[sp,#0x88]      ;977
001248  f7fffffe          BL       __aeabi_cdcmple
00124c  d311              BCC      |L1.4722|
00124e  2200              MOVS     r2,#0                 ;977
001250  4613              MOV      r3,r2                 ;977
001252  e9dd0124          LDRD     r0,r1,[sp,#0x90]      ;977
001256  f7fffffe          BL       __aeabi_cdcmple
00125a  d30a              BCC      |L1.4722|
00125c  a822              ADD      r0,sp,#0x88           ;977
00125e  c80f              LDM      r0,{r0-r3}            ;977
001260  f7fffffe          BL       __aeabi_dadd
001264  2200              MOVS     r2,#0                 ;977
001266  4bb6              LDR      r3,|L1.5440|
001268  e9cd0102          STRD     r0,r1,[sp,#8]         ;977
00126c  f7fffffe          BL       __aeabi_cdrcmple
001270  d204              BCS      |L1.4732|
                  |L1.4722|
001272  a1bd              ADR      r1,|L1.5480|
001274  980e              LDR      r0,[sp,#0x38]         ;979
001276  f7fffffe          BL       png_warning
00127a  e7b4              B        |L1.4582|
                  |L1.4732|
00127c  2200              MOVS     r2,#0                 ;982
00127e  4bae              LDR      r3,|L1.5432|
001280  e9dd0122          LDRD     r0,r1,[sp,#0x88]      ;982
001284  f7fffffe          BL       __aeabi_dmul
001288  2200              MOVS     r2,#0                 ;982
00128a  4bac              LDR      r3,|L1.5436|
00128c  e9cd0100          STRD     r0,r1,[sp,#0]         ;982
001290  f7fffffe          BL       __aeabi_dadd
001294  e9cd0102          STRD     r0,r1,[sp,#8]         ;982
001298  f7fffffe          BL       __aeabi_d2uiz
00129c  9005              STR      r0,[sp,#0x14]         ;982
00129e  a80a              ADD      r0,sp,#0x28           ;983
0012a0  9905              LDR      r1,[sp,#0x14]         ;983
0012a2  f7fffffe          BL       png_save_uint_32
0012a6  2200              MOVS     r2,#0                 ;984
0012a8  4ba3              LDR      r3,|L1.5432|
0012aa  e9dd0124          LDRD     r0,r1,[sp,#0x90]      ;984
0012ae  f7fffffe          BL       __aeabi_dmul
0012b2  2200              MOVS     r2,#0                 ;984
0012b4  4ba1              LDR      r3,|L1.5436|
0012b6  e9cd0100          STRD     r0,r1,[sp,#0]         ;984
0012ba  f7fffffe          BL       __aeabi_dadd
0012be  e9cd0102          STRD     r0,r1,[sp,#8]         ;984
0012c2  f7fffffe          BL       __aeabi_d2uiz
0012c6  9005              STR      r0,[sp,#0x14]         ;984
0012c8  a80b              ADD      r0,sp,#0x2c           ;985
0012ca  9905              LDR      r1,[sp,#0x14]         ;985
0012cc  f7fffffe          BL       png_save_uint_32
0012d0  2200              MOVS     r2,#0                 ;987
0012d2  4613              MOV      r3,r2                 ;987
0012d4  e9dd0126          LDRD     r0,r1,[sp,#0x98]      ;987
0012d8  f7fffffe          BL       __aeabi_cdcmple
0012dc  d311              BCC      |L1.4866|
0012de  2200              MOVS     r2,#0                 ;987
0012e0  4613              MOV      r3,r2                 ;987
0012e2  e9dd0128          LDRD     r0,r1,[sp,#0xa0]      ;987
0012e6  f7fffffe          BL       __aeabi_cdcmple
0012ea  d30a              BCC      |L1.4866|
0012ec  a826              ADD      r0,sp,#0x98           ;987
0012ee  c80f              LDM      r0,{r0-r3}            ;987
0012f0  f7fffffe          BL       __aeabi_dadd
0012f4  2200              MOVS     r2,#0                 ;987
0012f6  4b92              LDR      r3,|L1.5440|
0012f8  e9cd0102          STRD     r0,r1,[sp,#8]         ;987
0012fc  f7fffffe          BL       __aeabi_cdrcmple
001300  d204              BCS      |L1.4876|
                  |L1.4866|
001302  a1a2              ADR      r1,|L1.5516|
001304  980e              LDR      r0,[sp,#0x38]         ;989
001306  f7fffffe          BL       png_warning
00130a  e76c              B        |L1.4582|
                  |L1.4876|
00130c  2200              MOVS     r2,#0                 ;992
00130e  4b8a              LDR      r3,|L1.5432|
001310  e9dd0126          LDRD     r0,r1,[sp,#0x98]      ;992
001314  f7fffffe          BL       __aeabi_dmul
001318  2200              MOVS     r2,#0                 ;992
00131a  4b88              LDR      r3,|L1.5436|
00131c  e9cd0100          STRD     r0,r1,[sp,#0]         ;992
001320  f7fffffe          BL       __aeabi_dadd
001324  e9cd0102          STRD     r0,r1,[sp,#8]         ;992
001328  f7fffffe          BL       __aeabi_d2uiz
00132c  9005              STR      r0,[sp,#0x14]         ;992
00132e  a80c              ADD      r0,sp,#0x30           ;993
001330  9905              LDR      r1,[sp,#0x14]         ;993
001332  f7fffffe          BL       png_save_uint_32
001336  2200              MOVS     r2,#0                 ;994
001338  4b7f              LDR      r3,|L1.5432|
00133a  e9dd0128          LDRD     r0,r1,[sp,#0xa0]      ;994
00133e  f7fffffe          BL       __aeabi_dmul
001342  2200              MOVS     r2,#0                 ;994
001344  4b7d              LDR      r3,|L1.5436|
001346  e9cd0100          STRD     r0,r1,[sp,#0]         ;994
00134a  f7fffffe          BL       __aeabi_dadd
00134e  e9cd0102          STRD     r0,r1,[sp,#8]         ;994
001352  f7fffffe          BL       __aeabi_d2uiz
001356  9005              STR      r0,[sp,#0x14]         ;994
001358  a80d              ADD      r0,sp,#0x34           ;995
00135a  9905              LDR      r1,[sp,#0x14]         ;995
00135c  f7fffffe          BL       png_save_uint_32
001360  2320              MOVS     r3,#0x20              ;997
001362  aa06              ADD      r2,sp,#0x18           ;997
001364  4992              LDR      r1,|L1.5552|
001366  980e              LDR      r0,[sp,#0x38]         ;997
001368  f7fffffe          BL       png_write_chunk
00136c  bf00              NOP      
00136e  e73a              B        |L1.4582|
;;;999    #endif
                          ENDP

                  png_write_cHRM_fixed PROC
;;;1001   void /* PRIVATE */
;;;1002   png_write_cHRM_fixed(png_structp png_ptr, png_fixed_point white_x,
001370  e92d4fff          PUSH     {r0-r11,lr}
;;;1003      png_fixed_point white_y, png_fixed_point red_x, png_fixed_point red_y,
;;;1004      png_fixed_point green_x, png_fixed_point green_y, png_fixed_point blue_x,
;;;1005      png_fixed_point blue_y)
;;;1006   {
001374  b089              SUB      sp,sp,#0x24
001376  460d              MOV      r5,r1
001378  4614              MOV      r4,r2
00137a  461e              MOV      r6,r3
00137c  af16              ADD      r7,sp,#0x58
00137e  e8970f80          LDM      r7,{r7-r11}
;;;1007   #ifdef PNG_USE_LOCAL_ARRAYS
;;;1008      PNG_cHRM;
;;;1009   #endif
;;;1010      png_byte buf[32];
;;;1011   
;;;1012      png_debug(1, "in png_write_cHRM\n");
;;;1013      /* each value is saved in 1/100,000ths */
;;;1014      if (white_x > 80000L || white_y > 80000L || white_x + white_y > 100000L)
001382  488c              LDR      r0,|L1.5556|
001384  4285              CMP      r5,r0
001386  dc05              BGT      |L1.5012|
001388  4284              CMP      r4,r0
00138a  dc03              BGT      |L1.5012|
00138c  1928              ADDS     r0,r5,r4
00138e  498a              LDR      r1,|L1.5560|
001390  4288              CMP      r0,r1
001392  dd06              BLE      |L1.5026|
                  |L1.5012|
;;;1015      {
;;;1016         png_warning(png_ptr, "Invalid fixed cHRM white point specified");
001394  a189              ADR      r1,|L1.5564|
001396  9809              LDR      r0,[sp,#0x24]
001398  f7fffffe          BL       png_warning
                  |L1.5020|
;;;1017   #if !defined(PNG_NO_CONSOLE_IO)
;;;1018         fprintf(stderr,"white_x=%ld, white_y=%ld\n",white_x, white_y);
;;;1019   #endif
;;;1020         return;
;;;1021      }
;;;1022      png_save_uint_32(buf, (png_uint_32)white_x);
;;;1023      png_save_uint_32(buf + 4, (png_uint_32)white_y);
;;;1024   
;;;1025      if (red_x + red_y > 100000L)
;;;1026      {
;;;1027         png_warning(png_ptr, "Invalid cHRM fixed red point specified");
;;;1028         return;
;;;1029      }
;;;1030      png_save_uint_32(buf + 8, (png_uint_32)red_x);
;;;1031      png_save_uint_32(buf + 12, (png_uint_32)red_y);
;;;1032   
;;;1033      if (green_x + green_y > 100000L)
;;;1034      {
;;;1035         png_warning(png_ptr, "Invalid fixed cHRM green point specified");
;;;1036         return;
;;;1037      }
;;;1038      png_save_uint_32(buf + 16, (png_uint_32)green_x);
;;;1039      png_save_uint_32(buf + 20, (png_uint_32)green_y);
;;;1040   
;;;1041      if (blue_x + blue_y > 100000L)
;;;1042      {
;;;1043         png_warning(png_ptr, "Invalid fixed cHRM blue point specified");
;;;1044         return;
;;;1045      }
;;;1046      png_save_uint_32(buf + 24, (png_uint_32)blue_x);
;;;1047      png_save_uint_32(buf + 28, (png_uint_32)blue_y);
;;;1048   
;;;1049      png_write_chunk(png_ptr, (png_bytep)png_cHRM, buf, (png_size_t)32);
;;;1050   }
00139c  b00d              ADD      sp,sp,#0x34
00139e  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.5026|
0013a2  4629              MOV      r1,r5                 ;1022
0013a4  a801              ADD      r0,sp,#4              ;1022
0013a6  f7fffffe          BL       png_save_uint_32
0013aa  4621              MOV      r1,r4                 ;1023
0013ac  a802              ADD      r0,sp,#8              ;1023
0013ae  f7fffffe          BL       png_save_uint_32
0013b2  19f0              ADDS     r0,r6,r7              ;1025
0013b4  4980              LDR      r1,|L1.5560|
0013b6  4288              CMP      r0,r1                 ;1025
0013b8  dd04              BLE      |L1.5060|
0013ba  a18b              ADR      r1,|L1.5608|
0013bc  9809              LDR      r0,[sp,#0x24]         ;1027
0013be  f7fffffe          BL       png_warning
0013c2  e7eb              B        |L1.5020|
                  |L1.5060|
0013c4  4631              MOV      r1,r6                 ;1030
0013c6  a803              ADD      r0,sp,#0xc            ;1030
0013c8  f7fffffe          BL       png_save_uint_32
0013cc  4639              MOV      r1,r7                 ;1031
0013ce  a804              ADD      r0,sp,#0x10           ;1031
0013d0  f7fffffe          BL       png_save_uint_32
0013d4  eb080009          ADD      r0,r8,r9              ;1033
0013d8  4977              LDR      r1,|L1.5560|
0013da  4288              CMP      r0,r1                 ;1033
0013dc  dd04              BLE      |L1.5096|
0013de  a18c              ADR      r1,|L1.5648|
0013e0  9809              LDR      r0,[sp,#0x24]         ;1035
0013e2  f7fffffe          BL       png_warning
0013e6  e7d9              B        |L1.5020|
                  |L1.5096|
0013e8  4641              MOV      r1,r8                 ;1038
0013ea  a805              ADD      r0,sp,#0x14           ;1038
0013ec  f7fffffe          BL       png_save_uint_32
0013f0  4649              MOV      r1,r9                 ;1039
0013f2  a806              ADD      r0,sp,#0x18           ;1039
0013f4  f7fffffe          BL       png_save_uint_32
0013f8  eb0a000b          ADD      r0,r10,r11            ;1041
0013fc  496e              LDR      r1,|L1.5560|
0013fe  4288              CMP      r0,r1                 ;1041
001400  dd04              BLE      |L1.5132|
001402  a18e              ADR      r1,|L1.5692|
001404  9809              LDR      r0,[sp,#0x24]         ;1043
001406  f7fffffe          BL       png_warning
00140a  e7c7              B        |L1.5020|
                  |L1.5132|
00140c  4651              MOV      r1,r10                ;1046
00140e  a807              ADD      r0,sp,#0x1c           ;1046
001410  f7fffffe          BL       png_save_uint_32
001414  4659              MOV      r1,r11                ;1047
001416  a808              ADD      r0,sp,#0x20           ;1047
001418  f7fffffe          BL       png_save_uint_32
00141c  2320              MOVS     r3,#0x20              ;1049
00141e  aa01              ADD      r2,sp,#4              ;1049
001420  4963              LDR      r1,|L1.5552|
001422  9809              LDR      r0,[sp,#0x24]         ;1049
001424  f7fffffe          BL       png_write_chunk
001428  bf00              NOP      
00142a  e7b7              B        |L1.5020|
;;;1051   #endif
                          ENDP

                  png_write_tRNS PROC
;;;1056   void /* PRIVATE */
;;;1057   png_write_tRNS(png_structp png_ptr, png_bytep trans, png_color_16p tran,
00142c  e92d41fc          PUSH     {r2-r8,lr}
;;;1058      int num_trans, int color_type)
;;;1059   {
001430  4605              MOV      r5,r0
001432  4688              MOV      r8,r1
001434  4614              MOV      r4,r2
001436  461e              MOV      r6,r3
001438  9f08              LDR      r7,[sp,#0x20]
;;;1060   #ifdef PNG_USE_LOCAL_ARRAYS
;;;1061      PNG_tRNS;
;;;1062   #endif
;;;1063      png_byte buf[6];
;;;1064   
;;;1065      png_debug(1, "in png_write_tRNS\n");
;;;1066      if (color_type == PNG_COLOR_TYPE_PALETTE)
00143a  2f03              CMP      r7,#3
00143c  d112              BNE      |L1.5220|
;;;1067      {
;;;1068         if (num_trans <= 0 || num_trans > (int)png_ptr->num_palette)
00143e  2e00              CMP      r6,#0
001440  dd03              BLE      |L1.5194|
001442  f8b50258          LDRH     r0,[r5,#0x258]
001446  42b0              CMP      r0,r6
001448  da05              BGE      |L1.5206|
                  |L1.5194|
;;;1069         {
;;;1070            png_warning(png_ptr,"Invalid number of transparent colors specified");
00144a  a186              ADR      r1,|L1.5732|
00144c  4628              MOV      r0,r5
00144e  f7fffffe          BL       png_warning
                  |L1.5202|
;;;1071            return;
;;;1072         }
;;;1073         /* write the chunk out as it is */
;;;1074         png_write_chunk(png_ptr, (png_bytep)png_tRNS, trans, (png_size_t)num_trans);
;;;1075      }
;;;1076      else if (color_type == PNG_COLOR_TYPE_GRAY)
;;;1077      {
;;;1078         /* one 16 bit value */
;;;1079         if(tran->gray >= (1 << png_ptr->bit_depth))
;;;1080         {
;;;1081            png_warning(png_ptr,
;;;1082              "Ignoring attempt to write tRNS chunk out-of-range for bit_depth");
;;;1083            return;
;;;1084         }
;;;1085         png_save_uint_16(buf, tran->gray);
;;;1086         png_write_chunk(png_ptr, (png_bytep)png_tRNS, buf, (png_size_t)2);
;;;1087      }
;;;1088      else if (color_type == PNG_COLOR_TYPE_RGB)
;;;1089      {
;;;1090         /* three 16 bit values */
;;;1091         png_save_uint_16(buf, tran->red);
;;;1092         png_save_uint_16(buf + 2, tran->green);
;;;1093         png_save_uint_16(buf + 4, tran->blue);
;;;1094         if(png_ptr->bit_depth == 8 && (buf[0] | buf[2] | buf[4]))
;;;1095            {
;;;1096               png_warning(png_ptr,
;;;1097                 "Ignoring attempt to write 16-bit tRNS chunk when bit_depth is 8");
;;;1098               return;
;;;1099            }
;;;1100         png_write_chunk(png_ptr, (png_bytep)png_tRNS, buf, (png_size_t)6);
;;;1101      }
;;;1102      else
;;;1103      {
;;;1104         png_warning(png_ptr, "Can't write tRNS with an alpha channel");
;;;1105      }
;;;1106   }
001452  e8bd81fc          POP      {r2-r8,pc}
                  |L1.5206|
001456  4633              MOV      r3,r6                 ;1074
001458  4642              MOV      r2,r8                 ;1074
00145a  498e              LDR      r1,|L1.5780|
00145c  4628              MOV      r0,r5                 ;1074
00145e  f7fffffe          BL       png_write_chunk
001462  e043              B        |L1.5356|
                  |L1.5220|
001464  b9b7              CBNZ     r7,|L1.5268|
001466  8921              LDRH     r1,[r4,#8]            ;1079
001468  f8952267          LDRB     r2,[r5,#0x267]        ;1079
00146c  2001              MOVS     r0,#1                 ;1079
00146e  4090              LSLS     r0,r0,r2              ;1079
001470  4281              CMP      r1,r0                 ;1079
001472  db04              BLT      |L1.5246|
001474  a188              ADR      r1,|L1.5784|
001476  4628              MOV      r0,r5                 ;1081
001478  f7fffffe          BL       png_warning
00147c  e7e9              B        |L1.5202|
                  |L1.5246|
00147e  8921              LDRH     r1,[r4,#8]            ;1085
001480  4668              MOV      r0,sp                 ;1085
001482  f7fffffe          BL       png_save_uint_16
001486  2302              MOVS     r3,#2                 ;1086
001488  466a              MOV      r2,sp                 ;1086
00148a  4982              LDR      r1,|L1.5780|
00148c  4628              MOV      r0,r5                 ;1086
00148e  f7fffffe          BL       png_write_chunk
001492  e02b              B        |L1.5356|
                  |L1.5268|
001494  2f02              CMP      r7,#2                 ;1088
001496  d125              BNE      |L1.5348|
001498  8861              LDRH     r1,[r4,#2]            ;1091
00149a  4668              MOV      r0,sp                 ;1091
00149c  f7fffffe          BL       png_save_uint_16
0014a0  88a1              LDRH     r1,[r4,#4]            ;1092
0014a2  f10d0002          ADD      r0,sp,#2              ;1092
0014a6  f7fffffe          BL       png_save_uint_16
0014aa  88e1              LDRH     r1,[r4,#6]            ;1093
0014ac  a801              ADD      r0,sp,#4              ;1093
0014ae  f7fffffe          BL       png_save_uint_16
0014b2  f8950267          LDRB     r0,[r5,#0x267]        ;1094
0014b6  2808              CMP      r0,#8                 ;1094
0014b8  d10d              BNE      |L1.5334|
0014ba  f89d0000          LDRB     r0,[sp,#0]            ;1094
0014be  f89d1002          LDRB     r1,[sp,#2]            ;1094
0014c2  4308              ORRS     r0,r0,r1              ;1094
0014c4  f89d1004          LDRB     r1,[sp,#4]            ;1094
0014c8  4308              ORRS     r0,r0,r1              ;1094
0014ca  b120              CBZ      r0,|L1.5334|
0014cc  a182              ADR      r1,|L1.5848|
0014ce  4628              MOV      r0,r5                 ;1096
0014d0  f7fffffe          BL       png_warning
0014d4  e7bd              B        |L1.5202|
                  |L1.5334|
0014d6  2306              MOVS     r3,#6                 ;1100
0014d8  466a              MOV      r2,sp                 ;1100
0014da  496e              LDR      r1,|L1.5780|
0014dc  4628              MOV      r0,r5                 ;1100
0014de  f7fffffe          BL       png_write_chunk
0014e2  e003              B        |L1.5356|
                  |L1.5348|
0014e4  a18c              ADR      r1,|L1.5912|
0014e6  4628              MOV      r0,r5                 ;1104
0014e8  f7fffffe          BL       png_warning
                  |L1.5356|
0014ec  bf00              NOP      
0014ee  e7b0              B        |L1.5202|
;;;1107   #endif
                          ENDP

                  png_write_bKGD PROC
;;;1111   void /* PRIVATE */
;;;1112   png_write_bKGD(png_structp png_ptr, png_color_16p back, int color_type)
0014f0  b57c              PUSH     {r2-r6,lr}
;;;1113   {
0014f2  4605              MOV      r5,r0
0014f4  460c              MOV      r4,r1
0014f6  4616              MOV      r6,r2
;;;1114   #ifdef PNG_USE_LOCAL_ARRAYS
;;;1115      PNG_bKGD;
;;;1116   #endif
;;;1117      png_byte buf[6];
;;;1118   
;;;1119      png_debug(1, "in png_write_bKGD\n");
;;;1120      if (color_type == PNG_COLOR_TYPE_PALETTE)
0014f8  2e03              CMP      r6,#3
0014fa  d11b              BNE      |L1.5428|
;;;1121      {
;;;1122         if (
0014fc  f8b50258          LDRH     r0,[r5,#0x258]
001500  b920              CBNZ     r0,|L1.5388|
;;;1123   #if defined(PNG_MNG_FEATURES_SUPPORTED)
;;;1124             (png_ptr->num_palette ||
;;;1125             (!(png_ptr->mng_features_permitted & PNG_FLAG_MNG_EMPTY_PLTE))) &&
001502  f895036c          LDRB     r0,[r5,#0x36c]
001506  f0000001          AND      r0,r0,#1
00150a  b948              CBNZ     r0,|L1.5408|
                  |L1.5388|
;;;1126   #endif
;;;1127            back->index > png_ptr->num_palette)
00150c  7820              LDRB     r0,[r4,#0]
00150e  f8b51258          LDRH     r1,[r5,#0x258]
001512  4288              CMP      r0,r1
001514  dd04              BLE      |L1.5408|
;;;1128         {
;;;1129            png_warning(png_ptr, "Invalid background palette index");
001516  a18a              ADR      r1,|L1.5952|
001518  4628              MOV      r0,r5
00151a  f7fffffe          BL       png_warning
                  |L1.5406|
;;;1130            return;
;;;1131         }
;;;1132         buf[0] = back->index;
;;;1133         png_write_chunk(png_ptr, (png_bytep)png_bKGD, buf, (png_size_t)1);
;;;1134      }
;;;1135      else if (color_type & PNG_COLOR_MASK_COLOR)
;;;1136      {
;;;1137         png_save_uint_16(buf, back->red);
;;;1138         png_save_uint_16(buf + 2, back->green);
;;;1139         png_save_uint_16(buf + 4, back->blue);
;;;1140         if(png_ptr->bit_depth == 8 && (buf[0] | buf[2] | buf[4]))
;;;1141            {
;;;1142               png_warning(png_ptr,
;;;1143                 "Ignoring attempt to write 16-bit bKGD chunk when bit_depth is 8");
;;;1144               return;
;;;1145            }
;;;1146         png_write_chunk(png_ptr, (png_bytep)png_bKGD, buf, (png_size_t)6);
;;;1147      }
;;;1148      else
;;;1149      {
;;;1150         if(back->gray >= (1 << png_ptr->bit_depth))
;;;1151         {
;;;1152            png_warning(png_ptr,
;;;1153              "Ignoring attempt to write bKGD chunk out-of-range for bit_depth");
;;;1154            return;
;;;1155         }
;;;1156         png_save_uint_16(buf, back->gray);
;;;1157         png_write_chunk(png_ptr, (png_bytep)png_bKGD, buf, (png_size_t)2);
;;;1158      }
;;;1159   }
00151e  bd7c              POP      {r2-r6,pc}
                  |L1.5408|
001520  7820              LDRB     r0,[r4,#0]            ;1132
001522  f88d0000          STRB     r0,[sp,#0]            ;1132
001526  2301              MOVS     r3,#1                 ;1133
001528  466a              MOV      r2,sp                 ;1133
00152a  498e              LDR      r1,|L1.5988|
00152c  4628              MOV      r0,r5                 ;1133
00152e  f7fffffe          BL       png_write_chunk
001532  e159              B        |L1.6120|
                  |L1.5428|
001534  e118              B        |L1.5992|
001536  0000              DCW      0x0000
                  |L1.5432|
                          DCD      0x40f86a00
                  |L1.5436|
                          DCD      0x3fe00000
                  |L1.5440|
                          DCD      0x3ff00000
                  |L1.5444|
001544  496e7661          DCB      "Invalid cHRM red point specified",0
001548  6c696420
00154c  6348524d
001550  20726564
001554  20706f69
001558  6e742073
00155c  70656369
001560  66696564
001564  00      
001565  00                DCB      0
001566  00                DCB      0
001567  00                DCB      0
                  |L1.5480|
001568  496e7661          DCB      "Invalid cHRM green point specified",0
00156c  6c696420
001570  6348524d
001574  20677265
001578  656e2070
00157c  6f696e74
001580  20737065
001584  63696669
001588  656400  
00158b  00                DCB      0
                  |L1.5516|
00158c  496e7661          DCB      "Invalid cHRM blue point specified",0
001590  6c696420
001594  6348524d
001598  20626c75
00159c  6520706f
0015a0  696e7420
0015a4  73706563
0015a8  69666965
0015ac  6400    
0015ae  00                DCB      0
0015af  00                DCB      0
                  |L1.5552|
                          DCD      png_cHRM
                  |L1.5556|
                          DCD      0x00013880
                  |L1.5560|
                          DCD      0x000186a0
                  |L1.5564|
0015bc  496e7661          DCB      "Invalid fixed cHRM white point specified",0
0015c0  6c696420
0015c4  66697865
0015c8  64206348
0015cc  524d2077
0015d0  68697465
0015d4  20706f69
0015d8  6e742073
0015dc  70656369
0015e0  66696564
0015e4  00      
0015e5  00                DCB      0
0015e6  00                DCB      0
0015e7  00                DCB      0
                  |L1.5608|
0015e8  496e7661          DCB      "Invalid cHRM fixed red point specified",0
0015ec  6c696420
0015f0  6348524d
0015f4  20666978
0015f8  65642072
0015fc  65642070
001600  6f696e74
001604  20737065
001608  63696669
00160c  656400  
00160f  00                DCB      0
                  |L1.5648|
001610  496e7661          DCB      "Invalid fixed cHRM green point specified",0
001614  6c696420
001618  66697865
00161c  64206348
001620  524d2067
001624  7265656e
001628  20706f69
00162c  6e742073
001630  70656369
001634  66696564
001638  00      
001639  00                DCB      0
00163a  00                DCB      0
00163b  00                DCB      0
                  |L1.5692|
00163c  496e7661          DCB      "Invalid fixed cHRM blue point specified",0
001640  6c696420
001644  66697865
001648  64206348
00164c  524d2062
001650  6c756520
001654  706f696e
001658  74207370
00165c  65636966
001660  69656400
                  |L1.5732|
001664  496e7661          DCB      "Invalid number of transparent colors specified",0
001668  6c696420
00166c  6e756d62
001670  6572206f
001674  66207472
001678  616e7370
00167c  6172656e
001680  7420636f
001684  6c6f7273
001688  20737065
00168c  63696669
001690  656400  
001693  00                DCB      0
                  |L1.5780|
                          DCD      png_tRNS
                  |L1.5784|
001698  49676e6f          DCB      "Ignoring attempt to write tRNS chunk out-of-range for b"
00169c  72696e67
0016a0  20617474
0016a4  656d7074
0016a8  20746f20
0016ac  77726974
0016b0  65207452
0016b4  4e532063
0016b8  68756e6b
0016bc  206f7574
0016c0  2d6f662d
0016c4  72616e67
0016c8  6520666f
0016cc  722062  
0016cf  69745f64          DCB      "it_depth",0
0016d3  65707468
0016d7  00      
                  |L1.5848|
0016d8  49676e6f          DCB      "Ignoring attempt to write 16-bit tRNS chunk when bit_de"
0016dc  72696e67
0016e0  20617474
0016e4  656d7074
0016e8  20746f20
0016ec  77726974
0016f0  65203136
0016f4  2d626974
0016f8  2074524e
0016fc  53206368
001700  756e6b20
001704  7768656e
001708  20626974
00170c  5f6465  
00170f  70746820          DCB      "pth is 8",0
001713  69732038
001717  00      
                  |L1.5912|
001718  43616e27          DCB      "Can't write tRNS with an alpha channel",0
00171c  74207772
001720  69746520
001724  74524e53
001728  20776974
00172c  6820616e
001730  20616c70
001734  68612063
001738  68616e6e
00173c  656c00  
00173f  00                DCB      0
                  |L1.5952|
001740  496e7661          DCB      "Invalid background palette index",0
001744  6c696420
001748  6261636b
00174c  67726f75
001750  6e642070
001754  616c6574
001758  74652069
00175c  6e646578
001760  00      
001761  00                DCB      0
001762  00                DCB      0
001763  00                DCB      0
                  |L1.5988|
                          DCD      png_bKGD
                  |L1.5992|
001768  f0060002          AND      r0,r6,#2              ;1135
00176c  2800              CMP      r0,#0                 ;1135
00176e  d025              BEQ      |L1.6076|
001770  8861              LDRH     r1,[r4,#2]            ;1137
001772  4668              MOV      r0,sp                 ;1137
001774  f7fffffe          BL       png_save_uint_16
001778  88a1              LDRH     r1,[r4,#4]            ;1138
00177a  f10d0002          ADD      r0,sp,#2              ;1138
00177e  f7fffffe          BL       png_save_uint_16
001782  88e1              LDRH     r1,[r4,#6]            ;1139
001784  a801              ADD      r0,sp,#4              ;1139
001786  f7fffffe          BL       png_save_uint_16
00178a  f8950267          LDRB     r0,[r5,#0x267]        ;1140
00178e  2808              CMP      r0,#8                 ;1140
001790  d10d              BNE      |L1.6062|
001792  f89d0000          LDRB     r0,[sp,#0]            ;1140
001796  f89d1002          LDRB     r1,[sp,#2]            ;1140
00179a  4308              ORRS     r0,r0,r1              ;1140
00179c  f89d1004          LDRB     r1,[sp,#4]            ;1140
0017a0  4308              ORRS     r0,r0,r1              ;1140
0017a2  b120              CBZ      r0,|L1.6062|
0017a4  a1ea              ADR      r1,|L1.6992|
0017a6  4628              MOV      r0,r5                 ;1142
0017a8  f7fffffe          BL       png_warning
0017ac  e6b7              B        |L1.5406|
                  |L1.6062|
0017ae  2306              MOVS     r3,#6                 ;1146
0017b0  466a              MOV      r2,sp                 ;1146
0017b2  49f7              LDR      r1,|L1.7056|
0017b4  4628              MOV      r0,r5                 ;1146
0017b6  f7fffffe          BL       png_write_chunk
0017ba  e015              B        |L1.6120|
                  |L1.6076|
0017bc  8921              LDRH     r1,[r4,#8]            ;1150
0017be  f8952267          LDRB     r2,[r5,#0x267]        ;1150
0017c2  2001              MOVS     r0,#1                 ;1150
0017c4  4090              LSLS     r0,r0,r2              ;1150
0017c6  4281              CMP      r1,r0                 ;1150
0017c8  db04              BLT      |L1.6100|
0017ca  a1f2              ADR      r1,|L1.7060|
0017cc  4628              MOV      r0,r5                 ;1152
0017ce  f7fffffe          BL       png_warning
0017d2  e6a4              B        |L1.5406|
                  |L1.6100|
0017d4  8921              LDRH     r1,[r4,#8]            ;1156
0017d6  4668              MOV      r0,sp                 ;1156
0017d8  f7fffffe          BL       png_save_uint_16
0017dc  2302              MOVS     r3,#2                 ;1157
0017de  466a              MOV      r2,sp                 ;1157
0017e0  49eb              LDR      r1,|L1.7056|
0017e2  4628              MOV      r0,r5                 ;1157
0017e4  f7fffffe          BL       png_write_chunk
                  |L1.6120|
0017e8  bf00              NOP      
0017ea  e698              B        |L1.5406|
;;;1160   #endif
                          ENDP

                  png_write_hIST PROC
;;;1164   void /* PRIVATE */
;;;1165   png_write_hIST(png_structp png_ptr, png_uint_16p hist, int num_hist)
0017ec  b5f8              PUSH     {r3-r7,lr}
;;;1166   {
0017ee  4606              MOV      r6,r0
0017f0  460f              MOV      r7,r1
0017f2  4614              MOV      r4,r2
;;;1167   #ifdef PNG_USE_LOCAL_ARRAYS
;;;1168      PNG_hIST;
;;;1169   #endif
;;;1170      int i;
;;;1171      png_byte buf[3];
;;;1172   
;;;1173      png_debug(1, "in png_write_hIST\n");
;;;1174      if (num_hist > (int)png_ptr->num_palette)
0017f4  f8b60258          LDRH     r0,[r6,#0x258]
0017f8  42a0              CMP      r0,r4
0017fa  da04              BGE      |L1.6150|
;;;1175      {
;;;1176         png_debug2(3, "num_hist = %d, num_palette = %d\n", num_hist,
;;;1177            png_ptr->num_palette);
;;;1178         png_warning(png_ptr, "Invalid number of histogram entries specified");
0017fc  a1f5              ADR      r1,|L1.7124|
0017fe  4630              MOV      r0,r6
001800  f7fffffe          BL       png_warning
                  |L1.6148|
;;;1179         return;
;;;1180      }
;;;1181   
;;;1182      png_write_chunk_start(png_ptr, (png_bytep)png_hIST, (png_uint_32)(num_hist * 2));
;;;1183      for (i = 0; i < num_hist; i++)
;;;1184      {
;;;1185         png_save_uint_16(buf, hist[i]);
;;;1186         png_write_chunk_data(png_ptr, buf, (png_size_t)2);
;;;1187      }
;;;1188      png_write_chunk_end(png_ptr);
;;;1189   }
001804  bdf8              POP      {r3-r7,pc}
                  |L1.6150|
001806  0062              LSLS     r2,r4,#1              ;1182
001808  49fe              LDR      r1,|L1.7172|
00180a  4630              MOV      r0,r6                 ;1182
00180c  f7fffffe          BL       png_write_chunk_start
001810  2500              MOVS     r5,#0                 ;1183
001812  e00a              B        |L1.6186|
                  |L1.6164|
001814  f8371015          LDRH     r1,[r7,r5,LSL #1]     ;1185
001818  4668              MOV      r0,sp                 ;1185
00181a  f7fffffe          BL       png_save_uint_16
00181e  2202              MOVS     r2,#2                 ;1186
001820  4669              MOV      r1,sp                 ;1186
001822  4630              MOV      r0,r6                 ;1186
001824  f7fffffe          BL       png_write_chunk_data
001828  1c6d              ADDS     r5,r5,#1              ;1183
                  |L1.6186|
00182a  42a5              CMP      r5,r4                 ;1183
00182c  dbf2              BLT      |L1.6164|
00182e  4630              MOV      r0,r6                 ;1188
001830  f7fffffe          BL       png_write_chunk_end
001834  bf00              NOP      
001836  e7e5              B        |L1.6148|
;;;1190   #endif
                          ENDP

                  png_write_tEXt PROC
;;;1323   void /* PRIVATE */
;;;1324   png_write_tEXt(png_structp png_ptr, png_charp key, png_charp text,
001838  e92d43f8          PUSH     {r3-r9,lr}
;;;1325      png_size_t text_len)
;;;1326   {
00183c  4680              MOV      r8,r0
00183e  460f              MOV      r7,r1
001840  4614              MOV      r4,r2
001842  461d              MOV      r5,r3
;;;1327   #ifdef PNG_USE_LOCAL_ARRAYS
;;;1328      PNG_tEXt;
;;;1329   #endif
;;;1330      png_size_t key_len;
;;;1331      png_charp new_key;
;;;1332   
;;;1333      png_debug(1, "in png_write_tEXt\n");
;;;1334      if (key == NULL || (key_len = png_check_keyword(png_ptr, key, &new_key))==0)
001844  b137              CBZ      r7,|L1.6228|
001846  466a              MOV      r2,sp
001848  4639              MOV      r1,r7
00184a  4640              MOV      r0,r8
00184c  f7fffffe          BL       png_check_keyword
001850  0006              MOVS     r6,r0
001852  d105              BNE      |L1.6240|
                  |L1.6228|
;;;1335      {
;;;1336         png_warning(png_ptr, "Empty keyword in tEXt chunk");
001854  a1ec              ADR      r1,|L1.7176|
001856  4640              MOV      r0,r8
001858  f7fffffe          BL       png_warning
                  |L1.6236|
;;;1337         return;
;;;1338      }
;;;1339   
;;;1340      if (text == NULL || *text == '\0')
;;;1341         text_len = 0;
;;;1342      else
;;;1343         text_len = png_strlen(text);
;;;1344   
;;;1345      /* make sure we include the 0 after the key */
;;;1346      png_write_chunk_start(png_ptr, (png_bytep)png_tEXt, (png_uint_32)key_len+text_len+1);
;;;1347      /*
;;;1348       * We leave it to the application to meet PNG-1.0 requirements on the
;;;1349       * contents of the text.  PNG-1.0 through PNG-1.2 discourage the use of
;;;1350       * any non-Latin-1 characters except for NEWLINE.  ISO PNG will forbid them.
;;;1351       * The NUL character is forbidden by PNG-1.0 through PNG-1.2 and ISO PNG.
;;;1352       */
;;;1353      png_write_chunk_data(png_ptr, (png_bytep)new_key, key_len + 1);
;;;1354      if (text_len)
;;;1355         png_write_chunk_data(png_ptr, (png_bytep)text, text_len);
;;;1356   
;;;1357      png_write_chunk_end(png_ptr);
;;;1358      png_free(png_ptr, new_key);
;;;1359   }
00185c  e8bd83f8          POP      {r3-r9,pc}
                  |L1.6240|
001860  b10c              CBZ      r4,|L1.6246|
001862  7820              LDRB     r0,[r4,#0]            ;1340
001864  b908              CBNZ     r0,|L1.6250|
                  |L1.6246|
001866  2500              MOVS     r5,#0                 ;1341
001868  e003              B        |L1.6258|
                  |L1.6250|
00186a  4620              MOV      r0,r4                 ;1343
00186c  f7fffffe          BL       strlen
001870  4605              MOV      r5,r0                 ;1343
                  |L1.6258|
001872  1970              ADDS     r0,r6,r5              ;1346
001874  1c42              ADDS     r2,r0,#1              ;1346
001876  49eb              LDR      r1,|L1.7204|
001878  4640              MOV      r0,r8                 ;1346
00187a  f7fffffe          BL       png_write_chunk_start
00187e  1c72              ADDS     r2,r6,#1              ;1353
001880  4640              MOV      r0,r8                 ;1353
001882  9900              LDR      r1,[sp,#0]            ;1353
001884  f7fffffe          BL       png_write_chunk_data
001888  b125              CBZ      r5,|L1.6292|
00188a  462a              MOV      r2,r5                 ;1355
00188c  4621              MOV      r1,r4                 ;1355
00188e  4640              MOV      r0,r8                 ;1355
001890  f7fffffe          BL       png_write_chunk_data
                  |L1.6292|
001894  4640              MOV      r0,r8                 ;1357
001896  f7fffffe          BL       png_write_chunk_end
00189a  4640              MOV      r0,r8                 ;1358
00189c  9900              LDR      r1,[sp,#0]            ;1358
00189e  f7fffffe          BL       png_free
0018a2  bf00              NOP      
0018a4  e7da              B        |L1.6236|
;;;1360   #endif
                          ENDP

                  png_write_zTXt PROC
;;;1364   void /* PRIVATE */
;;;1365   png_write_zTXt(png_structp png_ptr, png_charp key, png_charp text,
0018a6  e92d43f0          PUSH     {r4-r9,lr}
;;;1366      png_size_t text_len, int compression)
;;;1367   {
0018aa  b089              SUB      sp,sp,#0x24
0018ac  4681              MOV      r9,r0
0018ae  4688              MOV      r8,r1
0018b0  4614              MOV      r4,r2
0018b2  461e              MOV      r6,r3
0018b4  9f10              LDR      r7,[sp,#0x40]
;;;1368   #ifdef PNG_USE_LOCAL_ARRAYS
;;;1369      PNG_zTXt;
;;;1370   #endif
;;;1371      png_size_t key_len;
;;;1372      char buf[1];
;;;1373      png_charp new_key;
;;;1374      compression_state comp;
;;;1375   
;;;1376      png_debug(1, "in png_write_zTXt\n");
;;;1377   
;;;1378      comp.num_output_ptr = 0;
0018b6  2000              MOVS     r0,#0
0018b8  9004              STR      r0,[sp,#0x10]
;;;1379      comp.max_output_ptr = 0;
0018ba  9005              STR      r0,[sp,#0x14]
;;;1380      comp.output_ptr = NULL;
0018bc  9006              STR      r0,[sp,#0x18]
;;;1381      comp.input = NULL;
0018be  9002              STR      r0,[sp,#8]
;;;1382      comp.input_len = 0;
0018c0  9003              STR      r0,[sp,#0xc]
;;;1383   
;;;1384      if (key == NULL || (key_len = png_check_keyword(png_ptr, key, &new_key))==0)
0018c2  f1b80f00          CMP      r8,#0
0018c6  d006              BEQ      |L1.6358|
0018c8  aa07              ADD      r2,sp,#0x1c
0018ca  4641              MOV      r1,r8
0018cc  4648              MOV      r0,r9
0018ce  f7fffffe          BL       png_check_keyword
0018d2  0005              MOVS     r5,r0
0018d4  d106              BNE      |L1.6372|
                  |L1.6358|
;;;1385      {
;;;1386         png_warning(png_ptr, "Empty keyword in zTXt chunk");
0018d6  a1d4              ADR      r1,|L1.7208|
0018d8  4648              MOV      r0,r9
0018da  f7fffffe          BL       png_warning
                  |L1.6366|
;;;1387         return;
;;;1388      }
;;;1389   
;;;1390      if (text == NULL || *text == '\0' || compression==PNG_TEXT_COMPRESSION_NONE)
;;;1391      {
;;;1392         png_write_tEXt(png_ptr, new_key, text, (png_size_t)0);
;;;1393         png_free(png_ptr, new_key);
;;;1394         return;
;;;1395      }
;;;1396   
;;;1397      text_len = png_strlen(text);
;;;1398   
;;;1399      png_free(png_ptr, new_key);
;;;1400   
;;;1401      /* compute the compressed data; do it now for the length */
;;;1402      text_len = png_text_compress(png_ptr, text, text_len, compression,
;;;1403          &comp);
;;;1404   
;;;1405      /* write start of chunk */
;;;1406      png_write_chunk_start(png_ptr, (png_bytep)png_zTXt, (png_uint_32)
;;;1407         (key_len+text_len+2));
;;;1408      /* write key */
;;;1409      png_write_chunk_data(png_ptr, (png_bytep)key, key_len + 1);
;;;1410      buf[0] = (png_byte)compression;
;;;1411      /* write compression */
;;;1412      png_write_chunk_data(png_ptr, (png_bytep)buf, (png_size_t)1);
;;;1413      /* write the compressed data */
;;;1414      png_write_compressed_data_out(png_ptr, &comp);
;;;1415   
;;;1416      /* close the chunk */
;;;1417      png_write_chunk_end(png_ptr);
;;;1418   }
0018de  b009              ADD      sp,sp,#0x24
0018e0  e8bd83f0          POP      {r4-r9,pc}
                  |L1.6372|
0018e4  b11c              CBZ      r4,|L1.6382|
0018e6  7820              LDRB     r0,[r4,#0]            ;1390
0018e8  b108              CBZ      r0,|L1.6382|
0018ea  1c78              ADDS     r0,r7,#1              ;1390
0018ec  b950              CBNZ     r0,|L1.6404|
                  |L1.6382|
0018ee  2300              MOVS     r3,#0                 ;1392
0018f0  4622              MOV      r2,r4                 ;1392
0018f2  4648              MOV      r0,r9                 ;1392
0018f4  9907              LDR      r1,[sp,#0x1c]         ;1392
0018f6  f7fffffe          BL       png_write_tEXt
0018fa  4648              MOV      r0,r9                 ;1393
0018fc  9907              LDR      r1,[sp,#0x1c]         ;1393
0018fe  f7fffffe          BL       png_free
001902  e7ec              B        |L1.6366|
                  |L1.6404|
001904  4620              MOV      r0,r4                 ;1397
001906  f7fffffe          BL       strlen
00190a  4606              MOV      r6,r0                 ;1397
00190c  4648              MOV      r0,r9                 ;1399
00190e  9907              LDR      r1,[sp,#0x1c]         ;1399
001910  f7fffffe          BL       png_free
001914  a802              ADD      r0,sp,#8              ;1402
001916  463b              MOV      r3,r7                 ;1402
001918  4632              MOV      r2,r6                 ;1402
00191a  4621              MOV      r1,r4                 ;1402
00191c  9000              STR      r0,[sp,#0]            ;1402
00191e  4648              MOV      r0,r9                 ;1402
001920  f7fffffe          BL       png_text_compress
001924  4606              MOV      r6,r0                 ;1402
001926  19a8              ADDS     r0,r5,r6              ;1406
001928  1c82              ADDS     r2,r0,#2              ;1406
00192a  49c6              LDR      r1,|L1.7236|
00192c  4648              MOV      r0,r9                 ;1406
00192e  f7fffffe          BL       png_write_chunk_start
001932  1c6a              ADDS     r2,r5,#1              ;1409
001934  4641              MOV      r1,r8                 ;1409
001936  4648              MOV      r0,r9                 ;1409
001938  f7fffffe          BL       png_write_chunk_data
00193c  b2f8              UXTB     r0,r7                 ;1410
00193e  9008              STR      r0,[sp,#0x20]         ;1410
001940  2201              MOVS     r2,#1                 ;1412
001942  a908              ADD      r1,sp,#0x20           ;1412
001944  4648              MOV      r0,r9                 ;1412
001946  f7fffffe          BL       png_write_chunk_data
00194a  a902              ADD      r1,sp,#8              ;1414
00194c  4648              MOV      r0,r9                 ;1414
00194e  f7fffffe          BL       png_write_compressed_data_out
001952  4648              MOV      r0,r9                 ;1417
001954  f7fffffe          BL       png_write_chunk_end
001958  bf00              NOP      
00195a  e7c0              B        |L1.6366|
;;;1419   #endif
                          ENDP

                  png_write_oFFs PROC
;;;1512   void /* PRIVATE */
;;;1513   png_write_oFFs(png_structp png_ptr, png_int_32 x_offset, png_int_32 y_offset,
00195c  b5fe              PUSH     {r1-r7,lr}
;;;1514      int unit_type)
;;;1515   {
00195e  4606              MOV      r6,r0
001960  460f              MOV      r7,r1
001962  4615              MOV      r5,r2
001964  461c              MOV      r4,r3
;;;1516   #ifdef PNG_USE_LOCAL_ARRAYS
;;;1517      PNG_oFFs;
;;;1518   #endif
;;;1519      png_byte buf[9];
;;;1520   
;;;1521      png_debug(1, "in png_write_oFFs\n");
;;;1522      if (unit_type >= PNG_OFFSET_LAST)
001966  2c02              CMP      r4,#2
001968  db03              BLT      |L1.6514|
;;;1523         png_warning(png_ptr, "Unrecognized unit type for oFFs chunk");
00196a  a1b7              ADR      r1,|L1.7240|
00196c  4630              MOV      r0,r6
00196e  f7fffffe          BL       png_warning
                  |L1.6514|
;;;1524   
;;;1525      png_save_int_32(buf, x_offset);
001972  4639              MOV      r1,r7
001974  4668              MOV      r0,sp
001976  f7fffffe          BL       png_save_int_32
;;;1526      png_save_int_32(buf + 4, y_offset);
00197a  4629              MOV      r1,r5
00197c  a801              ADD      r0,sp,#4
00197e  f7fffffe          BL       png_save_int_32
;;;1527      buf[8] = (png_byte)unit_type;
001982  b2e0              UXTB     r0,r4
001984  f88d0008          STRB     r0,[sp,#8]
;;;1528   
;;;1529      png_write_chunk(png_ptr, (png_bytep)png_oFFs, buf, (png_size_t)9);
001988  2309              MOVS     r3,#9
00198a  466a              MOV      r2,sp
00198c  49b8              LDR      r1,|L1.7280|
00198e  4630              MOV      r0,r6
001990  f7fffffe          BL       png_write_chunk
;;;1530   }
001994  bdfe              POP      {r1-r7,pc}
;;;1531   #endif
                          ENDP

                  png_write_pCAL PROC
;;;1535   void /* PRIVATE */
;;;1536   png_write_pCAL(png_structp png_ptr, png_charp purpose, png_int_32 X0,
001996  e92d4fff          PUSH     {r0-r11,lr}
;;;1537      png_int_32 X1, int type, int nparams, png_charp units, png_charpp params)
;;;1538   {
00199a  b085              SUB      sp,sp,#0x14
00199c  4692              MOV      r10,r2
00199e  f8ddb054          LDR      r11,[sp,#0x54]
0019a2  9d13              LDR      r5,[sp,#0x4c]
;;;1539   #ifdef PNG_USE_LOCAL_ARRAYS
;;;1540      PNG_pCAL;
;;;1541   #endif
;;;1542      png_size_t purpose_len, units_len, total_len;
;;;1543      png_uint_32p params_len;
;;;1544      png_byte buf[10];
;;;1545      png_charp new_purpose;
;;;1546      int i;
;;;1547   
;;;1548      png_debug1(1, "in png_write_pCAL (%d parameters)\n", nparams);
;;;1549      if (type >= PNG_EQUATION_LAST)
0019a4  9812              LDR      r0,[sp,#0x48]
0019a6  2804              CMP      r0,#4
0019a8  db03              BLT      |L1.6578|
;;;1550         png_warning(png_ptr, "Unrecognized equation type for pCAL chunk");
0019aa  a1b2              ADR      r1,|L1.7284|
0019ac  9805              LDR      r0,[sp,#0x14]
0019ae  f7fffffe          BL       png_warning
                  |L1.6578|
;;;1551   
;;;1552      purpose_len = png_check_keyword(png_ptr, purpose, &new_purpose) + 1;
0019b2  aa01              ADD      r2,sp,#4
0019b4  e9dd0105          LDRD     r0,r1,[sp,#0x14]
0019b8  f7fffffe          BL       png_check_keyword
0019bc  1c47              ADDS     r7,r0,#1
;;;1553      png_debug1(3, "pCAL purpose length = %d\n", (int)purpose_len);
;;;1554      units_len = png_strlen(units) + (nparams == 0 ? 0 : 1);
0019be  9814              LDR      r0,[sp,#0x50]
0019c0  f7fffffe          BL       strlen
0019c4  b10d              CBZ      r5,|L1.6602|
0019c6  2101              MOVS     r1,#1
0019c8  e000              B        |L1.6604|
                  |L1.6602|
0019ca  2100              MOVS     r1,#0
                  |L1.6604|
0019cc  eb000801          ADD      r8,r0,r1
;;;1555      png_debug1(3, "pCAL units length = %d\n", (int)units_len);
;;;1556      total_len = purpose_len + units_len + 10;
0019d0  eb070008          ADD      r0,r7,r8
0019d4  f100090a          ADD      r9,r0,#0xa
;;;1557   
;;;1558      params_len = (png_uint_32p)png_malloc(png_ptr, (png_uint_32)(nparams
0019d8  00a9              LSLS     r1,r5,#2
0019da  9805              LDR      r0,[sp,#0x14]
0019dc  f7fffffe          BL       png_malloc
0019e0  4606              MOV      r6,r0
;;;1559         *png_sizeof(png_uint_32)));
;;;1560   
;;;1561      /* Find the length of each parameter, making sure we don't count the
;;;1562         null terminator for the last parameter. */
;;;1563      for (i = 0; i < nparams; i++)
0019e2  2400              MOVS     r4,#0
0019e4  e010              B        |L1.6664|
                  |L1.6630|
;;;1564      {
;;;1565         params_len[i] = png_strlen(params[i]) + (i == nparams - 1 ? 0 : 1);
0019e6  f85b0024          LDR      r0,[r11,r4,LSL #2]
0019ea  f7fffffe          BL       strlen
0019ee  1e69              SUBS     r1,r5,#1
0019f0  42a1              CMP      r1,r4
0019f2  d001              BEQ      |L1.6648|
0019f4  2101              MOVS     r1,#1
0019f6  e000              B        |L1.6650|
                  |L1.6648|
0019f8  2100              MOVS     r1,#0
                  |L1.6650|
0019fa  4408              ADD      r0,r0,r1
0019fc  f8460024          STR      r0,[r6,r4,LSL #2]
;;;1566         png_debug2(3, "pCAL parameter %d length = %lu\n", i, params_len[i]);
;;;1567         total_len += (png_size_t)params_len[i];
001a00  f8560024          LDR      r0,[r6,r4,LSL #2]
001a04  4481              ADD      r9,r9,r0
001a06  1c64              ADDS     r4,r4,#1              ;1563
                  |L1.6664|
001a08  42ac              CMP      r4,r5                 ;1563
001a0a  dbec              BLT      |L1.6630|
;;;1568      }
;;;1569   
;;;1570      png_debug1(3, "pCAL total length = %d\n", (int)total_len);
;;;1571      png_write_chunk_start(png_ptr, (png_bytep)png_pCAL, (png_uint_32)total_len);
001a0c  464a              MOV      r2,r9
001a0e  49a4              LDR      r1,|L1.7328|
001a10  9805              LDR      r0,[sp,#0x14]
001a12  f7fffffe          BL       png_write_chunk_start
;;;1572      png_write_chunk_data(png_ptr, (png_bytep)new_purpose, purpose_len);
001a16  463a              MOV      r2,r7
001a18  9901              LDR      r1,[sp,#4]
001a1a  9805              LDR      r0,[sp,#0x14]
001a1c  f7fffffe          BL       png_write_chunk_data
;;;1573      png_save_int_32(buf, X0);
001a20  4651              MOV      r1,r10
001a22  a802              ADD      r0,sp,#8
001a24  f7fffffe          BL       png_save_int_32
;;;1574      png_save_int_32(buf + 4, X1);
001a28  a803              ADD      r0,sp,#0xc
001a2a  9908              LDR      r1,[sp,#0x20]
001a2c  f7fffffe          BL       png_save_int_32
;;;1575      buf[8] = (png_byte)type;
001a30  9812              LDR      r0,[sp,#0x48]
001a32  b2c0              UXTB     r0,r0
001a34  f88d0010          STRB     r0,[sp,#0x10]
;;;1576      buf[9] = (png_byte)nparams;
001a38  b2e8              UXTB     r0,r5
001a3a  f88d0011          STRB     r0,[sp,#0x11]
;;;1577      png_write_chunk_data(png_ptr, buf, (png_size_t)10);
001a3e  220a              MOVS     r2,#0xa
001a40  a902              ADD      r1,sp,#8
001a42  9805              LDR      r0,[sp,#0x14]
001a44  f7fffffe          BL       png_write_chunk_data
;;;1578      png_write_chunk_data(png_ptr, (png_bytep)units, (png_size_t)units_len);
001a48  4642              MOV      r2,r8
001a4a  9914              LDR      r1,[sp,#0x50]
001a4c  9805              LDR      r0,[sp,#0x14]
001a4e  f7fffffe          BL       png_write_chunk_data
;;;1579   
;;;1580      png_free(png_ptr, new_purpose);
001a52  9901              LDR      r1,[sp,#4]
001a54  9805              LDR      r0,[sp,#0x14]
001a56  f7fffffe          BL       png_free
;;;1581   
;;;1582      for (i = 0; i < nparams; i++)
001a5a  2400              MOVS     r4,#0
001a5c  e007              B        |L1.6766|
                  |L1.6750|
;;;1583      {
;;;1584         png_write_chunk_data(png_ptr, (png_bytep)params[i],
001a5e  f8562024          LDR      r2,[r6,r4,LSL #2]
001a62  f85b1024          LDR      r1,[r11,r4,LSL #2]
001a66  9805              LDR      r0,[sp,#0x14]
001a68  f7fffffe          BL       png_write_chunk_data
001a6c  1c64              ADDS     r4,r4,#1              ;1582
                  |L1.6766|
001a6e  42ac              CMP      r4,r5                 ;1582
001a70  dbf5              BLT      |L1.6750|
;;;1585            (png_size_t)params_len[i]);
;;;1586      }
;;;1587   
;;;1588      png_free(png_ptr, params_len);
001a72  4631              MOV      r1,r6
001a74  9805              LDR      r0,[sp,#0x14]
001a76  f7fffffe          BL       png_free
;;;1589      png_write_chunk_end(png_ptr);
001a7a  9805              LDR      r0,[sp,#0x14]
001a7c  f7fffffe          BL       png_write_chunk_end
;;;1590   }
001a80  b009              ADD      sp,sp,#0x24
001a82  e8bd8ff0          POP      {r4-r11,pc}
;;;1591   #endif
                          ENDP

                  png_write_sCAL_s PROC
;;;1635   void /* PRIVATE */
;;;1636   png_write_sCAL_s(png_structp png_ptr, int unit, png_charp width,
001a86  e92d47f0          PUSH     {r4-r10,lr}
;;;1637      png_charp height)
;;;1638   {
001a8a  b090              SUB      sp,sp,#0x40
001a8c  4682              MOV      r10,r0
001a8e  460f              MOV      r7,r1
001a90  4614              MOV      r4,r2
001a92  461d              MOV      r5,r3
;;;1639   #ifdef PNG_USE_LOCAL_ARRAYS
;;;1640      PNG_sCAL;
;;;1641   #endif
;;;1642      png_byte buf[64];
;;;1643      png_size_t wlen, hlen, total_len;
;;;1644   
;;;1645      png_debug(1, "in png_write_sCAL_s\n");
;;;1646   
;;;1647      wlen = png_strlen(width);
001a94  4620              MOV      r0,r4
001a96  f7fffffe          BL       strlen
001a9a  4606              MOV      r6,r0
;;;1648      hlen = png_strlen(height);
001a9c  4628              MOV      r0,r5
001a9e  f7fffffe          BL       strlen
001aa2  4680              MOV      r8,r0
;;;1649      total_len = wlen + hlen + 2;
001aa4  eb060008          ADD      r0,r6,r8
001aa8  f1000902          ADD      r9,r0,#2
;;;1650      if (total_len > 64)
001aac  f1b90f40          CMP      r9,#0x40
001ab0  d906              BLS      |L1.6848|
;;;1651      {
;;;1652         png_warning(png_ptr, "Can't write sCAL (buffer too small)");
001ab2  a17c              ADR      r1,|L1.7332|
001ab4  4650              MOV      r0,r10
001ab6  f7fffffe          BL       png_warning
                  |L1.6842|
;;;1653         return;
;;;1654      }
;;;1655   
;;;1656      buf[0] = (png_byte)unit;
;;;1657      png_memcpy(buf + 1, width, wlen + 1);      /* append the '\0' here */
;;;1658      png_memcpy(buf + wlen + 2, height, hlen);  /* do NOT append the '\0' here */
;;;1659   
;;;1660      png_debug1(3, "sCAL total length = %u\n", (unsigned int)total_len);
;;;1661      png_write_chunk(png_ptr, (png_bytep)png_sCAL, buf, total_len);
;;;1662   }
001aba  b010              ADD      sp,sp,#0x40
001abc  e8bd87f0          POP      {r4-r10,pc}
                  |L1.6848|
001ac0  b2f8              UXTB     r0,r7                 ;1656
001ac2  f88d0000          STRB     r0,[sp,#0]            ;1656
001ac6  1c72              ADDS     r2,r6,#1              ;1657
001ac8  4621              MOV      r1,r4                 ;1657
001aca  f10d0001          ADD      r0,sp,#1              ;1657
001ace  f7fffffe          BL       __aeabi_memcpy
001ad2  eb0d0106          ADD      r1,sp,r6              ;1658
001ad6  1c88              ADDS     r0,r1,#2              ;1658
001ad8  4642              MOV      r2,r8                 ;1658
001ada  4629              MOV      r1,r5                 ;1658
001adc  f7fffffe          BL       __aeabi_memcpy
001ae0  464b              MOV      r3,r9                 ;1661
001ae2  466a              MOV      r2,sp                 ;1661
001ae4  4978              LDR      r1,|L1.7368|
001ae6  4650              MOV      r0,r10                ;1661
001ae8  f7fffffe          BL       png_write_chunk
001aec  bf00              NOP      
001aee  e7e4              B        |L1.6842|
;;;1663   #endif
                          ENDP

                  png_write_pHYs PROC
;;;1669   void /* PRIVATE */
;;;1670   png_write_pHYs(png_structp png_ptr, png_uint_32 x_pixels_per_unit,
001af0  b5fe              PUSH     {r1-r7,lr}
;;;1671      png_uint_32 y_pixels_per_unit,
;;;1672      int unit_type)
;;;1673   {
001af2  4606              MOV      r6,r0
001af4  460f              MOV      r7,r1
001af6  4615              MOV      r5,r2
001af8  461c              MOV      r4,r3
;;;1674   #ifdef PNG_USE_LOCAL_ARRAYS
;;;1675      PNG_pHYs;
;;;1676   #endif
;;;1677      png_byte buf[9];
;;;1678   
;;;1679      png_debug(1, "in png_write_pHYs\n");
;;;1680      if (unit_type >= PNG_RESOLUTION_LAST)
001afa  2c02              CMP      r4,#2
001afc  db03              BLT      |L1.6918|
;;;1681         png_warning(png_ptr, "Unrecognized unit type for pHYs chunk");
001afe  a173              ADR      r1,|L1.7372|
001b00  4630              MOV      r0,r6
001b02  f7fffffe          BL       png_warning
                  |L1.6918|
;;;1682   
;;;1683      png_save_uint_32(buf, x_pixels_per_unit);
001b06  4639              MOV      r1,r7
001b08  4668              MOV      r0,sp
001b0a  f7fffffe          BL       png_save_uint_32
;;;1684      png_save_uint_32(buf + 4, y_pixels_per_unit);
001b0e  4629              MOV      r1,r5
001b10  a801              ADD      r0,sp,#4
001b12  f7fffffe          BL       png_save_uint_32
;;;1685      buf[8] = (png_byte)unit_type;
001b16  b2e0              UXTB     r0,r4
001b18  f88d0008          STRB     r0,[sp,#8]
;;;1686   
;;;1687      png_write_chunk(png_ptr, (png_bytep)png_pHYs, buf, (png_size_t)9);
001b1c  2309              MOVS     r3,#9
001b1e  466a              MOV      r2,sp
001b20  4974              LDR      r1,|L1.7412|
001b22  4630              MOV      r0,r6
001b24  f7fffffe          BL       png_write_chunk
;;;1688   }
001b28  bdfe              POP      {r1-r7,pc}
;;;1689   #endif
                          ENDP

                  png_write_tIME PROC
;;;1695   void /* PRIVATE */
;;;1696   png_write_tIME(png_structp png_ptr, png_timep mod_time)
001b2a  b57c              PUSH     {r2-r6,lr}
;;;1697   {
001b2c  4605              MOV      r5,r0
001b2e  460c              MOV      r4,r1
;;;1698   #ifdef PNG_USE_LOCAL_ARRAYS
;;;1699      PNG_tIME;
;;;1700   #endif
;;;1701      png_byte buf[7];
;;;1702   
;;;1703      png_debug(1, "in png_write_tIME\n");
;;;1704      if (mod_time->month  > 12 || mod_time->month  < 1 ||
001b30  78a0              LDRB     r0,[r4,#2]
001b32  280c              CMP      r0,#0xc
001b34  dc0a              BGT      |L1.6988|
001b36  78a0              LDRB     r0,[r4,#2]
001b38  2801              CMP      r0,#1
001b3a  db07              BLT      |L1.6988|
;;;1705          mod_time->day    > 31 || mod_time->day    < 1 ||
001b3c  78e0              LDRB     r0,[r4,#3]
001b3e  281f              CMP      r0,#0x1f
001b40  dc04              BGT      |L1.6988|
001b42  78e0              LDRB     r0,[r4,#3]
001b44  2801              CMP      r0,#1
001b46  db01              BLT      |L1.6988|
;;;1706          mod_time->hour   > 23 || mod_time->second > 60)
001b48  7920              LDRB     r0,[r4,#4]
001b4a  e0d5              B        |L1.7416|
                  |L1.6988|
001b4c  e0d9              B        |L1.7426|
001b4e  0000              DCW      0x0000
                  |L1.6992|
001b50  49676e6f          DCB      "Ignoring attempt to write 16-bit bKGD chunk when bit_de"
001b54  72696e67
001b58  20617474
001b5c  656d7074
001b60  20746f20
001b64  77726974
001b68  65203136
001b6c  2d626974
001b70  20624b47
001b74  44206368
001b78  756e6b20
001b7c  7768656e
001b80  20626974
001b84  5f6465  
001b87  70746820          DCB      "pth is 8",0
001b8b  69732038
001b8f  00      
                  |L1.7056|
                          DCD      png_bKGD
                  |L1.7060|
001b94  49676e6f          DCB      "Ignoring attempt to write bKGD chunk out-of-range for b"
001b98  72696e67
001b9c  20617474
001ba0  656d7074
001ba4  20746f20
001ba8  77726974
001bac  6520624b
001bb0  47442063
001bb4  68756e6b
001bb8  206f7574
001bbc  2d6f662d
001bc0  72616e67
001bc4  6520666f
001bc8  722062  
001bcb  69745f64          DCB      "it_depth",0
001bcf  65707468
001bd3  00      
                  |L1.7124|
001bd4  496e7661          DCB      "Invalid number of histogram entries specified",0
001bd8  6c696420
001bdc  6e756d62
001be0  6572206f
001be4  66206869
001be8  73746f67
001bec  72616d20
001bf0  656e7472
001bf4  69657320
001bf8  73706563
001bfc  69666965
001c00  6400    
001c02  00                DCB      0
001c03  00                DCB      0
                  |L1.7172|
                          DCD      png_hIST
                  |L1.7176|
001c08  456d7074          DCB      "Empty keyword in tEXt chunk",0
001c0c  79206b65
001c10  79776f72
001c14  6420696e
001c18  20744558
001c1c  74206368
001c20  756e6b00
                  |L1.7204|
                          DCD      png_tEXt
                  |L1.7208|
001c28  456d7074          DCB      "Empty keyword in zTXt chunk",0
001c2c  79206b65
001c30  79776f72
001c34  6420696e
001c38  207a5458
001c3c  74206368
001c40  756e6b00
                  |L1.7236|
                          DCD      png_zTXt
                  |L1.7240|
001c48  556e7265          DCB      "Unrecognized unit type for oFFs chunk",0
001c4c  636f676e
001c50  697a6564
001c54  20756e69
001c58  74207479
001c5c  70652066
001c60  6f72206f
001c64  46467320
001c68  6368756e
001c6c  6b00    
001c6e  00                DCB      0
001c6f  00                DCB      0
                  |L1.7280|
                          DCD      png_oFFs
                  |L1.7284|
001c74  556e7265          DCB      "Unrecognized equation type for pCAL chunk",0
001c78  636f676e
001c7c  697a6564
001c80  20657175
001c84  6174696f
001c88  6e207479
001c8c  70652066
001c90  6f722070
001c94  43414c20
001c98  6368756e
001c9c  6b00    
001c9e  00                DCB      0
001c9f  00                DCB      0
                  |L1.7328|
                          DCD      png_pCAL
                  |L1.7332|
001ca4  43616e27          DCB      "Can't write sCAL (buffer too small)",0
001ca8  74207772
001cac  69746520
001cb0  7343414c
001cb4  20286275
001cb8  66666572
001cbc  20746f6f
001cc0  20736d61
001cc4  6c6c2900
                  |L1.7368|
                          DCD      png_sCAL
                  |L1.7372|
001ccc  556e7265          DCB      "Unrecognized unit type for pHYs chunk",0
001cd0  636f676e
001cd4  697a6564
001cd8  20756e69
001cdc  74207479
001ce0  70652066
001ce4  6f722070
001ce8  48597320
001cec  6368756e
001cf0  6b00    
001cf2  00                DCB      0
001cf3  00                DCB      0
                  |L1.7412|
                          DCD      png_pHYs
                  |L1.7416|
001cf8  2817              CMP      r0,#0x17
001cfa  dc02              BGT      |L1.7426|
001cfc  79a0              LDRB     r0,[r4,#6]
001cfe  283c              CMP      r0,#0x3c
001d00  dd04              BLE      |L1.7436|
                  |L1.7426|
;;;1707      {
;;;1708         png_warning(png_ptr, "Invalid time specified for tIME chunk");
001d02  a1fa              ADR      r1,|L1.8428|
001d04  4628              MOV      r0,r5
001d06  f7fffffe          BL       png_warning
                  |L1.7434|
;;;1709         return;
;;;1710      }
;;;1711   
;;;1712      png_save_uint_16(buf, mod_time->year);
;;;1713      buf[2] = mod_time->month;
;;;1714      buf[3] = mod_time->day;
;;;1715      buf[4] = mod_time->hour;
;;;1716      buf[5] = mod_time->minute;
;;;1717      buf[6] = mod_time->second;
;;;1718   
;;;1719      png_write_chunk(png_ptr, (png_bytep)png_tIME, buf, (png_size_t)7);
;;;1720   }
001d0a  bd7c              POP      {r2-r6,pc}
                  |L1.7436|
001d0c  8821              LDRH     r1,[r4,#0]            ;1712
001d0e  4668              MOV      r0,sp                 ;1712
001d10  f7fffffe          BL       png_save_uint_16
001d14  78a0              LDRB     r0,[r4,#2]            ;1713
001d16  f88d0002          STRB     r0,[sp,#2]            ;1713
001d1a  78e0              LDRB     r0,[r4,#3]            ;1714
001d1c  f88d0003          STRB     r0,[sp,#3]            ;1714
001d20  7920              LDRB     r0,[r4,#4]            ;1715
001d22  f88d0004          STRB     r0,[sp,#4]            ;1715
001d26  7960              LDRB     r0,[r4,#5]            ;1716
001d28  f88d0005          STRB     r0,[sp,#5]            ;1716
001d2c  79a0              LDRB     r0,[r4,#6]            ;1717
001d2e  f88d0006          STRB     r0,[sp,#6]            ;1717
001d32  2307              MOVS     r3,#7                 ;1719
001d34  466a              MOV      r2,sp                 ;1719
001d36  49f7              LDR      r1,|L1.8468|
001d38  4628              MOV      r0,r5                 ;1719
001d3a  f7fffffe          BL       png_write_chunk
001d3e  bf00              NOP      
001d40  e7e3              B        |L1.7434|
;;;1721   #endif
                          ENDP

                  png_write_start_row PROC
;;;1724   void /* PRIVATE */
;;;1725   png_write_start_row(png_structp png_ptr)
001d42  b570              PUSH     {r4-r6,lr}
;;;1726   {
001d44  4604              MOV      r4,r0
;;;1727   #ifdef PNG_USE_LOCAL_ARRAYS
;;;1728      /* arrays to facilitate easy interlacing - use pass (0 - 6) as index */
;;;1729   
;;;1730      /* start of interlace block */
;;;1731      int png_pass_start[7] = {0, 4, 0, 2, 0, 1, 0};
;;;1732   
;;;1733      /* offset to next interlace block */
;;;1734      int png_pass_inc[7] = {8, 8, 4, 4, 2, 2, 1};
;;;1735   
;;;1736      /* start of interlace block in the y direction */
;;;1737      int png_pass_ystart[7] = {0, 0, 4, 0, 2, 0, 1};
;;;1738   
;;;1739      /* offset to next interlace block in the y direction */
;;;1740      int png_pass_yinc[7] = {8, 8, 8, 4, 4, 2, 2};
;;;1741   #endif
;;;1742   
;;;1743      png_size_t buf_size;
;;;1744   
;;;1745      png_debug(1, "in png_write_start_row\n");
;;;1746      buf_size = (png_size_t)(PNG_ROWBYTES(
001d46  f894026b          LDRB     r0,[r4,#0x26b]
001d4a  f8941268          LDRB     r1,[r4,#0x268]
001d4e  4348              MULS     r0,r1,r0
001d50  2808              CMP      r0,#8
001d52  db09              BLT      |L1.7528|
001d54  f894026b          LDRB     r0,[r4,#0x26b]
001d58  f8941268          LDRB     r1,[r4,#0x268]
001d5c  4348              MULS     r0,r1,r0
001d5e  08c0              LSRS     r0,r0,#3
001d60  f8d41208          LDR      r1,[r4,#0x208]
001d64  4348              MULS     r0,r1,r0
001d66  e009              B        |L1.7548|
                  |L1.7528|
001d68  f894026b          LDRB     r0,[r4,#0x26b]
001d6c  f8941268          LDRB     r1,[r4,#0x268]
001d70  4348              MULS     r0,r1,r0
001d72  f8d41208          LDR      r1,[r4,#0x208]
001d76  4348              MULS     r0,r1,r0
001d78  1dc0              ADDS     r0,r0,#7
001d7a  08c0              LSRS     r0,r0,#3
                  |L1.7548|
001d7c  1c45              ADDS     r5,r0,#1
;;;1747         png_ptr->usr_channels*png_ptr->usr_bit_depth,png_ptr->width)+1);
;;;1748   
;;;1749      /* set up row buffer */
;;;1750      png_ptr->row_buf = (png_bytep)png_malloc(png_ptr, (png_uint_32)buf_size);
001d7e  4629              MOV      r1,r5
001d80  4620              MOV      r0,r4
001d82  f7fffffe          BL       png_malloc
001d86  f8c4022c          STR      r0,[r4,#0x22c]
;;;1751      png_ptr->row_buf[0] = PNG_FILTER_VALUE_NONE;
001d8a  2000              MOVS     r0,#0
001d8c  f8d4122c          LDR      r1,[r4,#0x22c]
001d90  7008              STRB     r0,[r1,#0]
;;;1752   
;;;1753      /* set up filtering buffer, if using this filter */
;;;1754      if (png_ptr->do_filter & PNG_FILTER_SUB)
001d92  f8940265          LDRB     r0,[r4,#0x265]
001d96  f0000010          AND      r0,r0,#0x10
001d9a  b158              CBZ      r0,|L1.7604|
;;;1755      {
;;;1756         png_ptr->sub_row = (png_bytep)png_malloc(png_ptr,
001d9c  f8d40218          LDR      r0,[r4,#0x218]
001da0  1c41              ADDS     r1,r0,#1
001da2  4620              MOV      r0,r4
001da4  f7fffffe          BL       png_malloc
001da8  f8c40230          STR      r0,[r4,#0x230]
;;;1757            (png_ptr->rowbytes + 1));
;;;1758         png_ptr->sub_row[0] = PNG_FILTER_VALUE_SUB;
001dac  2001              MOVS     r0,#1
001dae  f8d41230          LDR      r1,[r4,#0x230]
001db2  7008              STRB     r0,[r1,#0]
                  |L1.7604|
;;;1759      }
;;;1760   
;;;1761      /* We only need to keep the previous row if we are using one of these. */
;;;1762      if (png_ptr->do_filter & (PNG_FILTER_AVG | PNG_FILTER_UP | PNG_FILTER_PAETH))
001db4  f8940265          LDRB     r0,[r4,#0x265]
001db8  f00000e0          AND      r0,r0,#0xe0
001dbc  b3e8              CBZ      r0,|L1.7738|
;;;1763      {
;;;1764        /* set up previous row buffer */
;;;1765         png_ptr->prev_row = (png_bytep)png_malloc(png_ptr, (png_uint_32)buf_size);
001dbe  4629              MOV      r1,r5
001dc0  4620              MOV      r0,r4
001dc2  f7fffffe          BL       png_malloc
001dc6  f8c40228          STR      r0,[r4,#0x228]
;;;1766         png_memset(png_ptr->prev_row, 0, buf_size);
001dca  4629              MOV      r1,r5
001dcc  f8d40228          LDR      r0,[r4,#0x228]
001dd0  f7fffffe          BL       __aeabi_memclr
;;;1767   
;;;1768         if (png_ptr->do_filter & PNG_FILTER_UP)
001dd4  f8940265          LDRB     r0,[r4,#0x265]
001dd8  f0000020          AND      r0,r0,#0x20
001ddc  b158              CBZ      r0,|L1.7670|
;;;1769         {
;;;1770            png_ptr->up_row = (png_bytep )png_malloc(png_ptr,
001dde  f8d40218          LDR      r0,[r4,#0x218]
001de2  1c41              ADDS     r1,r0,#1
001de4  4620              MOV      r0,r4
001de6  f7fffffe          BL       png_malloc
001dea  f8c40234          STR      r0,[r4,#0x234]
;;;1771               (png_ptr->rowbytes + 1));
;;;1772            png_ptr->up_row[0] = PNG_FILTER_VALUE_UP;
001dee  2002              MOVS     r0,#2
001df0  f8d41234          LDR      r1,[r4,#0x234]
001df4  7008              STRB     r0,[r1,#0]
                  |L1.7670|
;;;1773         }
;;;1774   
;;;1775         if (png_ptr->do_filter & PNG_FILTER_AVG)
001df6  f8940265          LDRB     r0,[r4,#0x265]
001dfa  f0000040          AND      r0,r0,#0x40
001dfe  b158              CBZ      r0,|L1.7704|
;;;1776         {
;;;1777            png_ptr->avg_row = (png_bytep)png_malloc(png_ptr,
001e00  f8d40218          LDR      r0,[r4,#0x218]
001e04  1c41              ADDS     r1,r0,#1
001e06  4620              MOV      r0,r4
001e08  f7fffffe          BL       png_malloc
001e0c  f8c40238          STR      r0,[r4,#0x238]
;;;1778               (png_ptr->rowbytes + 1));
;;;1779            png_ptr->avg_row[0] = PNG_FILTER_VALUE_AVG;
001e10  2003              MOVS     r0,#3
001e12  f8d41238          LDR      r1,[r4,#0x238]
001e16  7008              STRB     r0,[r1,#0]
                  |L1.7704|
;;;1780         }
;;;1781   
;;;1782         if (png_ptr->do_filter & PNG_FILTER_PAETH)
001e18  f8940265          LDRB     r0,[r4,#0x265]
001e1c  f0000080          AND      r0,r0,#0x80
001e20  b158              CBZ      r0,|L1.7738|
;;;1783         {
;;;1784            png_ptr->paeth_row = (png_bytep )png_malloc(png_ptr,
001e22  f8d40218          LDR      r0,[r4,#0x218]
001e26  1c41              ADDS     r1,r0,#1
001e28  4620              MOV      r0,r4
001e2a  f7fffffe          BL       png_malloc
001e2e  f8c4023c          STR      r0,[r4,#0x23c]
;;;1785               (png_ptr->rowbytes + 1));
;;;1786            png_ptr->paeth_row[0] = PNG_FILTER_VALUE_PAETH;
001e32  2004              MOVS     r0,#4
001e34  f8d4123c          LDR      r1,[r4,#0x23c]
001e38  7008              STRB     r0,[r1,#0]
                  |L1.7738|
;;;1787         }
;;;1788      }
;;;1789   
;;;1790   #ifdef PNG_WRITE_INTERLACING_SUPPORTED
;;;1791      /* if interlaced, we need to set up width and height of pass */
;;;1792      if (png_ptr->interlaced)
001e3a  f8940263          LDRB     r0,[r4,#0x263]
001e3e  b360              CBZ      r0,|L1.7834|
;;;1793      {
;;;1794         if (!(png_ptr->transformations & PNG_INTERLACE))
001e40  f89401b0          LDRB     r0,[r4,#0x1b0]
001e44  f0000002          AND      r0,r0,#2
001e48  b9f0              CBNZ     r0,|L1.7816|
;;;1795         {
;;;1796            png_ptr->num_rows = (png_ptr->height + png_pass_yinc[0] - 1 -
001e4a  49b3              LDR      r1,|L1.8472|
001e4c  f8d4020c          LDR      r0,[r4,#0x20c]
001e50  6809              LDR      r1,[r1,#0]  ; png_pass_yinc
001e52  4408              ADD      r0,r0,r1
001e54  1e40              SUBS     r0,r0,#1
001e56  49b1              LDR      r1,|L1.8476|
001e58  6809              LDR      r1,[r1,#0]  ; png_pass_ystart
001e5a  1a40              SUBS     r0,r0,r1
001e5c  49ae              LDR      r1,|L1.8472|
001e5e  6809              LDR      r1,[r1,#0]  ; png_pass_yinc
001e60  fbb0f0f1          UDIV     r0,r0,r1
001e64  f8c40210          STR      r0,[r4,#0x210]
;;;1797               png_pass_ystart[0]) / png_pass_yinc[0];
;;;1798            png_ptr->usr_width = (png_ptr->width + png_pass_inc[0] - 1 -
001e68  49ad              LDR      r1,|L1.8480|
001e6a  f8d40208          LDR      r0,[r4,#0x208]
001e6e  6809              LDR      r1,[r1,#0]  ; png_pass_inc
001e70  4408              ADD      r0,r0,r1
001e72  1e40              SUBS     r0,r0,#1
001e74  49ab              LDR      r1,|L1.8484|
001e76  6809              LDR      r1,[r1,#0]  ; png_pass_start
001e78  1a40              SUBS     r0,r0,r1
001e7a  49a9              LDR      r1,|L1.8480|
001e7c  6809              LDR      r1,[r1,#0]  ; png_pass_inc
001e7e  fbb0f0f1          UDIV     r0,r0,r1
001e82  f8c40214          STR      r0,[r4,#0x214]
001e86  e010              B        |L1.7850|
                  |L1.7816|
;;;1799               png_pass_start[0]) / png_pass_inc[0];
;;;1800         }
;;;1801         else
;;;1802         {
;;;1803            png_ptr->num_rows = png_ptr->height;
001e88  f8d4020c          LDR      r0,[r4,#0x20c]
001e8c  f8c40210          STR      r0,[r4,#0x210]
;;;1804            png_ptr->usr_width = png_ptr->width;
001e90  f8d40208          LDR      r0,[r4,#0x208]
001e94  f8c40214          STR      r0,[r4,#0x214]
001e98  e007              B        |L1.7850|
                  |L1.7834|
;;;1805         }
;;;1806      }
;;;1807      else
;;;1808   #endif
;;;1809      {
;;;1810         png_ptr->num_rows = png_ptr->height;
001e9a  f8d4020c          LDR      r0,[r4,#0x20c]
001e9e  f8c40210          STR      r0,[r4,#0x210]
;;;1811         png_ptr->usr_width = png_ptr->width;
001ea2  f8d40208          LDR      r0,[r4,#0x208]
001ea6  f8c40214          STR      r0,[r4,#0x214]
                  |L1.7850|
;;;1812      }
;;;1813      png_ptr->zstream.avail_out = (uInt)png_ptr->zbuf_size;
001eaa  f44f70e2          MOV      r0,#0x1c4
001eae  f8d411f0          LDR      r1,[r4,#0x1f0]
001eb2  5101              STR      r1,[r0,r4]
;;;1814      png_ptr->zstream.next_out = png_ptr->zbuf;
001eb4  1f00              SUBS     r0,r0,#4
001eb6  f8d411ec          LDR      r1,[r4,#0x1ec]
001eba  5101              STR      r1,[r0,r4]
;;;1815   }
001ebc  bd70              POP      {r4-r6,pc}
;;;1816   
                          ENDP

                  png_write_finish_row PROC
;;;1818   void /* PRIVATE */
;;;1819   png_write_finish_row(png_structp png_ptr)
001ebe  b570              PUSH     {r4-r6,lr}
;;;1820   {
001ec0  4604              MOV      r4,r0
;;;1821   #ifdef PNG_USE_LOCAL_ARRAYS
;;;1822      /* arrays to facilitate easy interlacing - use pass (0 - 6) as index */
;;;1823   
;;;1824      /* start of interlace block */
;;;1825      int png_pass_start[7] = {0, 4, 0, 2, 0, 1, 0};
;;;1826   
;;;1827      /* offset to next interlace block */
;;;1828      int png_pass_inc[7] = {8, 8, 4, 4, 2, 2, 1};
;;;1829   
;;;1830      /* start of interlace block in the y direction */
;;;1831      int png_pass_ystart[7] = {0, 0, 4, 0, 2, 0, 1};
;;;1832   
;;;1833      /* offset to next interlace block in the y direction */
;;;1834      int png_pass_yinc[7] = {8, 8, 8, 4, 4, 2, 2};
;;;1835   #endif
;;;1836   
;;;1837      int ret;
;;;1838   
;;;1839      png_debug(1, "in png_write_finish_row\n");
;;;1840      /* next row */
;;;1841      png_ptr->row_number++;
001ec2  f8d40224          LDR      r0,[r4,#0x224]
001ec6  1c40              ADDS     r0,r0,#1
001ec8  f8c40224          STR      r0,[r4,#0x224]
;;;1842   
;;;1843      /* see if we are done */
;;;1844      if (png_ptr->row_number < png_ptr->num_rows)
001ecc  f8d41210          LDR      r1,[r4,#0x210]
001ed0  f8d40224          LDR      r0,[r4,#0x224]
001ed4  4288              CMP      r0,r1
001ed6  d200              BCS      |L1.7898|
                  |L1.7896|
;;;1845         return;
;;;1846   
;;;1847   #ifdef PNG_WRITE_INTERLACING_SUPPORTED
;;;1848      /* if interlaced, go to next pass */
;;;1849      if (png_ptr->interlaced)
;;;1850      {
;;;1851         png_ptr->row_number = 0;
;;;1852         if (png_ptr->transformations & PNG_INTERLACE)
;;;1853         {
;;;1854            png_ptr->pass++;
;;;1855         }
;;;1856         else
;;;1857         {
;;;1858            /* loop until we find a non-zero width or height pass */
;;;1859            do
;;;1860            {
;;;1861               png_ptr->pass++;
;;;1862               if (png_ptr->pass >= 7)
;;;1863                  break;
;;;1864               png_ptr->usr_width = (png_ptr->width +
;;;1865                  png_pass_inc[png_ptr->pass] - 1 -
;;;1866                  png_pass_start[png_ptr->pass]) /
;;;1867                  png_pass_inc[png_ptr->pass];
;;;1868               png_ptr->num_rows = (png_ptr->height +
;;;1869                  png_pass_yinc[png_ptr->pass] - 1 -
;;;1870                  png_pass_ystart[png_ptr->pass]) /
;;;1871                  png_pass_yinc[png_ptr->pass];
;;;1872               if (png_ptr->transformations & PNG_INTERLACE)
;;;1873                  break;
;;;1874            } while (png_ptr->usr_width == 0 || png_ptr->num_rows == 0);
;;;1875   
;;;1876         }
;;;1877   
;;;1878         /* reset the row above the image for the next pass */
;;;1879         if (png_ptr->pass < 7)
;;;1880         {
;;;1881            if (png_ptr->prev_row != NULL)
;;;1882               png_memset(png_ptr->prev_row, 0,
;;;1883                  (png_size_t)(PNG_ROWBYTES(png_ptr->usr_channels*
;;;1884                  png_ptr->usr_bit_depth,png_ptr->width))+1);
;;;1885            return;
;;;1886         }
;;;1887      }
;;;1888   #endif
;;;1889   
;;;1890      /* if we get here, we've just written the last row, so we need
;;;1891         to flush the compressor */
;;;1892      do
;;;1893      {
;;;1894         /* tell the compressor we are done */
;;;1895         ret = deflate(&png_ptr->zstream, Z_FINISH);
;;;1896         /* check for an error */
;;;1897         if (ret == Z_OK)
;;;1898         {
;;;1899            /* check to see if we need more room */
;;;1900            if (!(png_ptr->zstream.avail_out))
;;;1901            {
;;;1902               png_write_IDAT(png_ptr, png_ptr->zbuf, png_ptr->zbuf_size);
;;;1903               png_ptr->zstream.next_out = png_ptr->zbuf;
;;;1904               png_ptr->zstream.avail_out = (uInt)png_ptr->zbuf_size;
;;;1905            }
;;;1906         }
;;;1907         else if (ret != Z_STREAM_END)
;;;1908         {
;;;1909            if (png_ptr->zstream.msg != NULL)
;;;1910               png_error(png_ptr, png_ptr->zstream.msg);
;;;1911            else
;;;1912               png_error(png_ptr, "zlib error");
;;;1913         }
;;;1914      } while (ret != Z_STREAM_END);
;;;1915   
;;;1916      /* write any extra space */
;;;1917      if (png_ptr->zstream.avail_out < png_ptr->zbuf_size)
;;;1918      {
;;;1919         png_write_IDAT(png_ptr, png_ptr->zbuf, png_ptr->zbuf_size -
;;;1920            png_ptr->zstream.avail_out);
;;;1921      }
;;;1922   
;;;1923      deflateReset(&png_ptr->zstream);
;;;1924      png_ptr->zstream.data_type = Z_BINARY;
;;;1925   }
001ed8  bd70              POP      {r4-r6,pc}
                  |L1.7898|
001eda  f8940263          LDRB     r0,[r4,#0x263]        ;1849
001ede  2800              CMP      r0,#0                 ;1849
001ee0  d07e              BEQ      |L1.8160|
001ee2  2000              MOVS     r0,#0                 ;1851
001ee4  f8c40224          STR      r0,[r4,#0x224]        ;1851
001ee8  f89401b0          LDRB     r0,[r4,#0x1b0]        ;1852
001eec  f0000002          AND      r0,r0,#2              ;1852
001ef0  b128              CBZ      r0,|L1.7934|
001ef2  f8940264          LDRB     r0,[r4,#0x264]        ;1854
001ef6  1c40              ADDS     r0,r0,#1              ;1854
001ef8  f8840264          STRB     r0,[r4,#0x264]        ;1854
001efc  e047              B        |L1.8078|
                  |L1.7934|
001efe  bf00              NOP                            ;1859
                  |L1.7936|
001f00  f8940264          LDRB     r0,[r4,#0x264]        ;1861
001f04  1c40              ADDS     r0,r0,#1              ;1861
001f06  f8840264          STRB     r0,[r4,#0x264]        ;1861
001f0a  f8940264          LDRB     r0,[r4,#0x264]        ;1862
001f0e  2807              CMP      r0,#7                 ;1862
001f10  db00              BLT      |L1.7956|
001f12  e03b              B        |L1.8076|
                  |L1.7956|
001f14  f2042445          ADD      r4,r4,#0x245          ;1864
001f18  f8540c3d          LDR      r0,[r4,#-0x3d]        ;1864
001f1c  7fe1              LDRB     r1,[r4,#0x1f]         ;1864
001f1e  4a80              LDR      r2,|L1.8480|
001f20  f8521021          LDR      r1,[r2,r1,LSL #2]     ;1864
001f24  4408              ADD      r0,r0,r1              ;1864
001f26  1e40              SUBS     r0,r0,#1              ;1864
001f28  7fe1              LDRB     r1,[r4,#0x1f]         ;1864
001f2a  4a7e              LDR      r2,|L1.8484|
001f2c  f8521021          LDR      r1,[r2,r1,LSL #2]     ;1864
001f30  1a40              SUBS     r0,r0,r1              ;1864
001f32  7fe1              LDRB     r1,[r4,#0x1f]         ;1864
001f34  4a7a              LDR      r2,|L1.8480|
001f36  f8521021          LDR      r1,[r2,r1,LSL #2]     ;1864
001f3a  fbb0f0f1          UDIV     r0,r0,r1              ;1864
001f3e  f8440c31          STR      r0,[r4,#-0x31]        ;1864
001f42  f8540c39          LDR      r0,[r4,#-0x39]        ;1868
001f46  7fe1              LDRB     r1,[r4,#0x1f]         ;1868
001f48  4a73              LDR      r2,|L1.8472|
001f4a  f8521021          LDR      r1,[r2,r1,LSL #2]     ;1868
001f4e  4408              ADD      r0,r0,r1              ;1868
001f50  1e40              SUBS     r0,r0,#1              ;1868
001f52  7fe1              LDRB     r1,[r4,#0x1f]         ;1868
001f54  4a71              LDR      r2,|L1.8476|
001f56  f8521021          LDR      r1,[r2,r1,LSL #2]     ;1868
001f5a  1a40              SUBS     r0,r0,r1              ;1868
001f5c  7fe1              LDRB     r1,[r4,#0x1f]         ;1868
001f5e  4a6e              LDR      r2,|L1.8472|
001f60  f8521021          LDR      r1,[r2,r1,LSL #2]     ;1868
001f64  fbb0f0f1          UDIV     r0,r0,r1              ;1868
001f68  f8440c35          STR      r0,[r4,#-0x35]        ;1868
001f6c  f8140c95          LDRB     r0,[r4,#-0x95]        ;1872
001f70  f2a42445          SUB      r4,r4,#0x245          ;1872
001f74  f0000002          AND      r0,r0,#2              ;1872
001f78  b100              CBZ      r0,|L1.8060|
001f7a  e007              B        |L1.8076|
                  |L1.8060|
001f7c  f8d40214          LDR      r0,[r4,#0x214]        ;1874
001f80  2800              CMP      r0,#0                 ;1874
001f82  d0bd              BEQ      |L1.7936|
001f84  f8d40210          LDR      r0,[r4,#0x210]        ;1874
001f88  2800              CMP      r0,#0                 ;1874
001f8a  d0b9              BEQ      |L1.7936|
                  |L1.8076|
001f8c  bf00              NOP                            ;1863
                  |L1.8078|
001f8e  f8940264          LDRB     r0,[r4,#0x264]        ;1879
001f92  2807              CMP      r0,#7                 ;1879
001f94  da24              BGE      |L1.8160|
001f96  f8d40228          LDR      r0,[r4,#0x228]        ;1881
001f9a  b1f8              CBZ      r0,|L1.8156|
001f9c  f894226b          LDRB     r2,[r4,#0x26b]        ;1882
001fa0  f8943268          LDRB     r3,[r4,#0x268]        ;1882
001fa4  435a              MULS     r2,r3,r2              ;1882
001fa6  2a08              CMP      r2,#8                 ;1882
001fa8  db09              BLT      |L1.8126|
001faa  f894226b          LDRB     r2,[r4,#0x26b]        ;1883
001fae  f8943268          LDRB     r3,[r4,#0x268]        ;1883
001fb2  435a              MULS     r2,r3,r2              ;1883
001fb4  08d2              LSRS     r2,r2,#3              ;1883
001fb6  f8d43208          LDR      r3,[r4,#0x208]        ;1883
001fba  435a              MULS     r2,r3,r2              ;1883
001fbc  e009              B        |L1.8146|
                  |L1.8126|
001fbe  f894226b          LDRB     r2,[r4,#0x26b]        ;1883
001fc2  f8943268          LDRB     r3,[r4,#0x268]        ;1883
001fc6  435a              MULS     r2,r3,r2              ;1883
001fc8  f8d43208          LDR      r3,[r4,#0x208]        ;1883
001fcc  435a              MULS     r2,r3,r2              ;1883
001fce  1dd2              ADDS     r2,r2,#7              ;1883
001fd0  08d2              LSRS     r2,r2,#3              ;1883
                  |L1.8146|
001fd2  1c51              ADDS     r1,r2,#1              ;1883
001fd4  f8d40228          LDR      r0,[r4,#0x228]        ;1883
001fd8  f7fffffe          BL       __aeabi_memclr
                  |L1.8156|
001fdc  e77c              B        |L1.7896|
001fde  e7ff              B        |L1.8160|
                  |L1.8160|
001fe0  bf00              NOP                            ;1892
                  |L1.8162|
001fe2  2104              MOVS     r1,#4                 ;1895
001fe4  f50470da          ADD      r0,r4,#0x1b4          ;1895
001fe8  f7fffffe          BL       deflate
001fec  4605              MOV      r5,r0                 ;1895
001fee  b99d              CBNZ     r5,|L1.8216|
001ff0  f44f70e2          MOV      r0,#0x1c4             ;1900
001ff4  5900              LDR      r0,[r0,r4]            ;1900
001ff6  bb00              CBNZ     r0,|L1.8250|
001ff8  4620              MOV      r0,r4                 ;1902
001ffa  f50471f6          ADD      r1,r4,#0x1ec          ;1902
001ffe  c906              LDM      r1,{r1,r2}            ;1902
002000  f7fffffe          BL       png_write_IDAT
002004  f44f70e0          MOV      r0,#0x1c0             ;1903
002008  f8d411ec          LDR      r1,[r4,#0x1ec]        ;1903
00200c  5101              STR      r1,[r0,r4]            ;1903
00200e  1d00              ADDS     r0,r0,#4              ;1904
002010  f8d411f0          LDR      r1,[r4,#0x1f0]        ;1904
002014  5101              STR      r1,[r0,r4]            ;1904
002016  e010              B        |L1.8250|
                  |L1.8216|
002018  2d01              CMP      r5,#1                 ;1907
00201a  d00e              BEQ      |L1.8250|
00201c  f44f70e6          MOV      r0,#0x1cc             ;1909
002020  5900              LDR      r0,[r0,r4]            ;1909
002022  b130              CBZ      r0,|L1.8242|
002024  f44f70e6          MOV      r0,#0x1cc             ;1910
002028  5901              LDR      r1,[r0,r4]            ;1910
00202a  4620              MOV      r0,r4                 ;1910
00202c  f7fffffe          BL       png_error
002030  e003              B        |L1.8250|
                  |L1.8242|
002032  493d              LDR      r1,|L1.8488|
002034  4620              MOV      r0,r4                 ;1912
002036  f7fffffe          BL       png_error
                  |L1.8250|
00203a  2d01              CMP      r5,#1                 ;1914
00203c  d1d1              BNE      |L1.8162|
00203e  f44f70e2          MOV      r0,#0x1c4             ;1917
002042  5900              LDR      r0,[r0,r4]            ;1917
002044  f8d411f0          LDR      r1,[r4,#0x1f0]        ;1917
002048  4288              CMP      r0,r1                 ;1917
00204a  d20a              BCS      |L1.8290|
00204c  f44f70e2          MOV      r0,#0x1c4             ;1919
002050  5900              LDR      r0,[r0,r4]            ;1919
002052  f8d431f0          LDR      r3,[r4,#0x1f0]        ;1919
002056  1a1a              SUBS     r2,r3,r0              ;1919
002058  4620              MOV      r0,r4                 ;1919
00205a  f8d411ec          LDR      r1,[r4,#0x1ec]        ;1919
00205e  f7fffffe          BL       png_write_IDAT
                  |L1.8290|
002062  f50470da          ADD      r0,r4,#0x1b4          ;1923
002066  f7fffffe          BL       deflateReset
00206a  2100              MOVS     r1,#0                 ;1924
00206c  f44f70f0          MOV      r0,#0x1e0             ;1924
002070  5101              STR      r1,[r0,r4]            ;1924
002072  bf00              NOP      
002074  e730              B        |L1.7896|
;;;1926   
                          ENDP

                  png_do_write_interlace PROC
;;;1935   void /* PRIVATE */
;;;1936   png_do_write_interlace(png_row_infop row_info, png_bytep row, int pass)
002076  e92d5ff0          PUSH     {r4-r12,lr}
;;;1937   {
00207a  4604              MOV      r4,r0
00207c  460e              MOV      r6,r1
00207e  4615              MOV      r5,r2
;;;1938   #ifdef PNG_USE_LOCAL_ARRAYS
;;;1939      /* arrays to facilitate easy interlacing - use pass (0 - 6) as index */
;;;1940   
;;;1941      /* start of interlace block */
;;;1942      int png_pass_start[7] = {0, 4, 0, 2, 0, 1, 0};
;;;1943   
;;;1944      /* offset to next interlace block */
;;;1945      int png_pass_inc[7] = {8, 8, 4, 4, 2, 2, 1};
;;;1946   #endif
;;;1947   
;;;1948      png_debug(1, "in png_do_write_interlace\n");
;;;1949      /* we don't have to do anything on the last pass (6) */
;;;1950   #if defined(PNG_USELESS_TESTS_SUPPORTED)
;;;1951      if (row != NULL && row_info != NULL && pass < 6)
;;;1952   #else
;;;1953      if (pass < 6)
002080  2d06              CMP      r5,#6
002082  da75              BGE      |L1.8560|
;;;1954   #endif
;;;1955      {
;;;1956         /* each pixel depth is handled separately */
;;;1957         switch (row_info->pixel_depth)
002084  7ae0              LDRB     r0,[r4,#0xb]
002086  2801              CMP      r0,#1
002088  d004              BEQ      |L1.8340|
00208a  2802              CMP      r0,#2
00208c  d04e              BEQ      |L1.8492|
00208e  2804              CMP      r0,#4
002090  d16f              BNE      |L1.8562|
002092  e07b              B        |L1.8588|
                  |L1.8340|
;;;1958         {
;;;1959            case 1:
;;;1960            {
;;;1961               png_bytep sp;
;;;1962               png_bytep dp;
;;;1963               int shift;
;;;1964               int d;
;;;1965               int value;
;;;1966               png_uint_32 i;
;;;1967               png_uint_32 row_width = row_info->width;
002094  f8d48000          LDR      r8,[r4,#0]
;;;1968   
;;;1969               dp = row;
002098  4632              MOV      r2,r6
;;;1970               d = 0;
00209a  2300              MOVS     r3,#0
;;;1971               shift = 7;
00209c  2007              MOVS     r0,#7
;;;1972               for (i = png_pass_start[pass]; i < row_width;
00209e  f8df9084          LDR      r9,|L1.8484|
0020a2  f8591025          LDR      r1,[r9,r5,LSL #2]
0020a6  e01b              B        |L1.8416|
                  |L1.8360|
;;;1973                  i += png_pass_inc[pass])
;;;1974               {
;;;1975                  sp = row + (png_size_t)(i >> 3);
0020a8  eb0607d1          ADD      r7,r6,r1,LSR #3
;;;1976                  value = (int)(*sp >> (7 - (int)(i & 0x07))) & 0x01;
0020ac  f8979000          LDRB     r9,[r7,#0]
0020b0  f0010a07          AND      r10,r1,#7
0020b4  f1ca0a07          RSB      r10,r10,#7
0020b8  fa49f90a          ASR      r9,r9,r10
0020bc  f0090c01          AND      r12,r9,#1
;;;1977                  d |= (value << shift);
0020c0  fa0cf900          LSL      r9,r12,r0
0020c4  ea490303          ORR      r3,r9,r3
;;;1978   
;;;1979                  if (shift == 0)
0020c8  b920              CBNZ     r0,|L1.8404|
;;;1980                  {
;;;1981                     shift = 7;
0020ca  2007              MOVS     r0,#7
;;;1982                     *dp++ = (png_byte)d;
0020cc  f8023b01          STRB     r3,[r2],#1
;;;1983                     d = 0;
0020d0  2300              MOVS     r3,#0
0020d2  e000              B        |L1.8406|
                  |L1.8404|
;;;1984                  }
;;;1985                  else
;;;1986                     shift--;
0020d4  1e40              SUBS     r0,r0,#1
                  |L1.8406|
0020d6  f8df9048          LDR      r9,|L1.8480|
0020da  f8599025          LDR      r9,[r9,r5,LSL #2]     ;1973
0020de  4449              ADD      r1,r1,r9              ;1973
                  |L1.8416|
0020e0  4541              CMP      r1,r8                 ;1972
0020e2  d3e1              BCC      |L1.8360|
;;;1987   
;;;1988               }
;;;1989               if (shift != 7)
0020e4  2807              CMP      r0,#7
0020e6  d000              BEQ      |L1.8426|
;;;1990                  *dp = (png_byte)d;
0020e8  7013              STRB     r3,[r2,#0]
                  |L1.8426|
;;;1991               break;
0020ea  e098              B        |L1.8734|
                  |L1.8428|
0020ec  496e7661          DCB      "Invalid time specified for tIME chunk",0
0020f0  6c696420
0020f4  74696d65
0020f8  20737065
0020fc  63696669
002100  65642066
002104  6f722074
002108  494d4520
00210c  6368756e
002110  6b00    
002112  00                DCB      0
002113  00                DCB      0
                  |L1.8468|
                          DCD      png_tIME
                  |L1.8472|
                          DCD      png_pass_yinc
                  |L1.8476|
                          DCD      png_pass_ystart
                  |L1.8480|
                          DCD      png_pass_inc
                  |L1.8484|
                          DCD      png_pass_start
                  |L1.8488|
                          DCD      ||.text||+0x4f8
                  |L1.8492|
;;;1992            }
;;;1993            case 2:
;;;1994            {
;;;1995               png_bytep sp;
;;;1996               png_bytep dp;
;;;1997               int shift;
;;;1998               int d;
;;;1999               int value;
;;;2000               png_uint_32 i;
;;;2001               png_uint_32 row_width = row_info->width;
00212c  f8d48000          LDR      r8,[r4,#0]
;;;2002   
;;;2003               dp = row;
002130  4632              MOV      r2,r6
;;;2004               shift = 6;
002132  2006              MOVS     r0,#6
;;;2005               d = 0;
002134  2300              MOVS     r3,#0
;;;2006               for (i = png_pass_start[pass]; i < row_width;
002136  f8df94b4          LDR      r9,|L1.9708|
00213a  f8591025          LDR      r1,[r9,r5,LSL #2]
00213e  e01f              B        |L1.8576|
                  |L1.8512|
;;;2007                  i += png_pass_inc[pass])
;;;2008               {
;;;2009                  sp = row + (png_size_t)(i >> 2);
002140  eb060791          ADD      r7,r6,r1,LSR #2
;;;2010                  value = (*sp >> ((3 - (int)(i & 0x03)) << 1)) & 0x03;
002144  f8979000          LDRB     r9,[r7,#0]
002148  f0010a03          AND      r10,r1,#3
00214c  f1ca0a03          RSB      r10,r10,#3
002150  ea4f0a4a          LSL      r10,r10,#1
002154  fa49f90a          ASR      r9,r9,r10
002158  f0090c03          AND      r12,r9,#3
;;;2011                  d |= (value << shift);
00215c  fa0cf900          LSL      r9,r12,r0
002160  ea490303          ORR      r3,r9,r3
;;;2012   
;;;2013                  if (shift == 0)
002164  b930              CBNZ     r0,|L1.8564|
;;;2014                  {
;;;2015                     shift = 6;
002166  2006              MOVS     r0,#6
;;;2016                     *dp++ = (png_byte)d;
002168  f8023b01          STRB     r3,[r2],#1
;;;2017                     d = 0;
00216c  2300              MOVS     r3,#0
00216e  e002              B        |L1.8566|
                  |L1.8560|
002170  e074              B        |L1.8796|
                  |L1.8562|
002172  e039              B        |L1.8680|
                  |L1.8564|
;;;2018                  }
;;;2019                  else
;;;2020                     shift -= 2;
002174  1e80              SUBS     r0,r0,#2
                  |L1.8566|
002176  f8df9478          LDR      r9,|L1.9712|
00217a  f8599025          LDR      r9,[r9,r5,LSL #2]     ;2007
00217e  4449              ADD      r1,r1,r9              ;2007
                  |L1.8576|
002180  4541              CMP      r1,r8                 ;2006
002182  d3dd              BCC      |L1.8512|
;;;2021               }
;;;2022               if (shift != 6)
002184  2806              CMP      r0,#6
002186  d000              BEQ      |L1.8586|
;;;2023                      *dp = (png_byte)d;
002188  7013              STRB     r3,[r2,#0]
                  |L1.8586|
;;;2024               break;
00218a  e048              B        |L1.8734|
                  |L1.8588|
;;;2025            }
;;;2026            case 4:
;;;2027            {
;;;2028               png_bytep sp;
;;;2029               png_bytep dp;
;;;2030               int shift;
;;;2031               int d;
;;;2032               int value;
;;;2033               png_uint_32 i;
;;;2034               png_uint_32 row_width = row_info->width;
00218c  f8d48000          LDR      r8,[r4,#0]
;;;2035   
;;;2036               dp = row;
002190  4632              MOV      r2,r6
;;;2037               shift = 4;
002192  2004              MOVS     r0,#4
;;;2038               d = 0;
002194  2300              MOVS     r3,#0
;;;2039               for (i = png_pass_start[pass]; i < row_width;
002196  f8df9454          LDR      r9,|L1.9708|
00219a  f8591025          LDR      r1,[r9,r5,LSL #2]
00219e  e01d              B        |L1.8668|
                  |L1.8608|
;;;2040                  i += png_pass_inc[pass])
;;;2041               {
;;;2042                  sp = row + (png_size_t)(i >> 1);
0021a0  eb060751          ADD      r7,r6,r1,LSR #1
;;;2043                  value = (*sp >> ((1 - (int)(i & 0x01)) << 2)) & 0x0f;
0021a4  f8979000          LDRB     r9,[r7,#0]
0021a8  f0010a01          AND      r10,r1,#1
0021ac  f1ca0a01          RSB      r10,r10,#1
0021b0  ea4f0a8a          LSL      r10,r10,#2
0021b4  fa49f90a          ASR      r9,r9,r10
0021b8  f0090c0f          AND      r12,r9,#0xf
;;;2044                  d |= (value << shift);
0021bc  fa0cf900          LSL      r9,r12,r0
0021c0  ea490303          ORR      r3,r9,r3
;;;2045   
;;;2046                  if (shift == 0)
0021c4  b920              CBNZ     r0,|L1.8656|
;;;2047                  {
;;;2048                     shift = 4;
0021c6  2004              MOVS     r0,#4
;;;2049                     *dp++ = (png_byte)d;
0021c8  f8023b01          STRB     r3,[r2],#1
;;;2050                     d = 0;
0021cc  2300              MOVS     r3,#0
0021ce  e000              B        |L1.8658|
                  |L1.8656|
;;;2051                  }
;;;2052                  else
;;;2053                     shift -= 4;
0021d0  1f00              SUBS     r0,r0,#4
                  |L1.8658|
0021d2  f8df941c          LDR      r9,|L1.9712|
0021d6  f8599025          LDR      r9,[r9,r5,LSL #2]     ;2040
0021da  4449              ADD      r1,r1,r9              ;2040
                  |L1.8668|
0021dc  4541              CMP      r1,r8                 ;2039
0021de  d3df              BCC      |L1.8608|
;;;2054               }
;;;2055               if (shift != 4)
0021e0  2804              CMP      r0,#4
0021e2  d000              BEQ      |L1.8678|
;;;2056                  *dp = (png_byte)d;
0021e4  7013              STRB     r3,[r2,#0]
                  |L1.8678|
;;;2057               break;
0021e6  e01a              B        |L1.8734|
                  |L1.8680|
;;;2058            }
;;;2059            default:
;;;2060            {
;;;2061               png_bytep sp;
;;;2062               png_bytep dp;
;;;2063               png_uint_32 i;
;;;2064               png_uint_32 row_width = row_info->width;
0021e8  f8d4b000          LDR      r11,[r4,#0]
;;;2065               png_size_t pixel_bytes;
;;;2066   
;;;2067               /* start at the beginning */
;;;2068               dp = row;
0021ec  46b0              MOV      r8,r6
;;;2069               /* find out how many bytes each pixel takes up */
;;;2070               pixel_bytes = (row_info->pixel_depth >> 3);
0021ee  7ae0              LDRB     r0,[r4,#0xb]
0021f0  ea4f0ae0          ASR      r10,r0,#3
;;;2071               /* loop through the row, only looking at the pixels that
;;;2072                  matter */
;;;2073               for (i = png_pass_start[pass]; i < row_width;
0021f4  48fd              LDR      r0,|L1.9708|
0021f6  f8509025          LDR      r9,[r0,r5,LSL #2]
0021fa  e00d              B        |L1.8728|
                  |L1.8700|
;;;2074                  i += png_pass_inc[pass])
;;;2075               {
;;;2076                  /* find out where the original pixel is */
;;;2077                  sp = row + (png_size_t)i * pixel_bytes;
0021fc  fb09670a          MLA      r7,r9,r10,r6
;;;2078                  /* move the pixel */
;;;2079                  if (dp != sp)
002200  45b8              CMP      r8,r7
002202  d004              BEQ      |L1.8718|
;;;2080                     png_memcpy(dp, sp, pixel_bytes);
002204  4652              MOV      r2,r10
002206  4639              MOV      r1,r7
002208  4640              MOV      r0,r8
00220a  f7fffffe          BL       __aeabi_memcpy
                  |L1.8718|
;;;2081                  /* next pixel */
;;;2082                  dp += pixel_bytes;
00220e  44d0              ADD      r8,r8,r10
002210  48f7              LDR      r0,|L1.9712|
002212  f8500025          LDR      r0,[r0,r5,LSL #2]     ;2074
002216  4481              ADD      r9,r9,r0              ;2074
                  |L1.8728|
002218  45d9              CMP      r9,r11                ;2073
00221a  d3ef              BCC      |L1.8700|
;;;2083               }
;;;2084               break;
00221c  bf00              NOP      
                  |L1.8734|
00221e  bf00              NOP                            ;1991
;;;2085            }
;;;2086         }
;;;2087         /* set new row width */
;;;2088         row_info->width = (row_info->width +
002220  49f3              LDR      r1,|L1.9712|
002222  f8511025          LDR      r1,[r1,r5,LSL #2]
002226  6820              LDR      r0,[r4,#0]
002228  4408              ADD      r0,r0,r1
00222a  1e40              SUBS     r0,r0,#1
00222c  49ef              LDR      r1,|L1.9708|
00222e  f8511025          LDR      r1,[r1,r5,LSL #2]
002232  1a40              SUBS     r0,r0,r1
002234  49ee              LDR      r1,|L1.9712|
002236  f8511025          LDR      r1,[r1,r5,LSL #2]
00223a  fbb0f0f1          UDIV     r0,r0,r1
00223e  6020              STR      r0,[r4,#0]
;;;2089            png_pass_inc[pass] - 1 -
;;;2090            png_pass_start[pass]) /
;;;2091            png_pass_inc[pass];
;;;2092            row_info->rowbytes = PNG_ROWBYTES(row_info->pixel_depth,
002240  7ae0              LDRB     r0,[r4,#0xb]
002242  2808              CMP      r0,#8
002244  db04              BLT      |L1.8784|
002246  7ae1              LDRB     r1,[r4,#0xb]
002248  08c9              LSRS     r1,r1,#3
00224a  6820              LDR      r0,[r4,#0]
00224c  4348              MULS     r0,r1,r0
00224e  e004              B        |L1.8794|
                  |L1.8784|
002250  7ae1              LDRB     r1,[r4,#0xb]
002252  6820              LDR      r0,[r4,#0]
002254  4348              MULS     r0,r1,r0
002256  1dc0              ADDS     r0,r0,#7
002258  08c0              LSRS     r0,r0,#3
                  |L1.8794|
00225a  6060              STR      r0,[r4,#4]
                  |L1.8796|
;;;2093               row_info->width);
;;;2094      }
;;;2095   }
00225c  e8bd9ff0          POP      {r4-r12,pc}
;;;2096   #endif
                          ENDP

                  png_write_filtered_row PROC
;;;2718   void /* PRIVATE */
;;;2719   png_write_filtered_row(png_structp png_ptr, png_bytep filtered_row)
002260  b570              PUSH     {r4-r6,lr}
;;;2720   {
002262  4604              MOV      r4,r0
002264  460d              MOV      r5,r1
;;;2721      png_debug(1, "in png_write_filtered_row\n");
;;;2722      png_debug1(2, "filter = %d\n", filtered_row[0]);
;;;2723      /* set up the zlib input buffer */
;;;2724   
;;;2725      png_ptr->zstream.next_in = filtered_row;
002266  f8c451b4          STR      r5,[r4,#0x1b4]
;;;2726      png_ptr->zstream.avail_in = (uInt)png_ptr->row_info.rowbytes + 1;
00226a  f44f7011          MOV      r0,#0x244
00226e  5900              LDR      r0,[r0,r4]
002270  1c40              ADDS     r0,r0,#1
002272  f44f71dc          MOV      r1,#0x1b8
002276  5108              STR      r0,[r1,r4]
;;;2727      /* repeat until we have compressed all the data */
;;;2728      do
002278  bf00              NOP      
                  |L1.8826|
;;;2729      {
;;;2730         int ret; /* return of zlib */
;;;2731   
;;;2732         /* compress the data */
;;;2733         ret = deflate(&png_ptr->zstream, Z_NO_FLUSH);
00227a  2100              MOVS     r1,#0
00227c  f50470da          ADD      r0,r4,#0x1b4
002280  f7fffffe          BL       deflate
002284  4606              MOV      r6,r0
;;;2734         /* check for compression errors */
;;;2735         if (ret != Z_OK)
002286  b176              CBZ      r6,|L1.8870|
;;;2736         {
;;;2737            if (png_ptr->zstream.msg != NULL)
002288  f44f70e6          MOV      r0,#0x1cc
00228c  5900              LDR      r0,[r0,r4]
00228e  b130              CBZ      r0,|L1.8862|
;;;2738               png_error(png_ptr, png_ptr->zstream.msg);
002290  f44f70e6          MOV      r0,#0x1cc
002294  5901              LDR      r1,[r0,r4]
002296  4620              MOV      r0,r4
002298  f7fffffe          BL       png_error
00229c  e003              B        |L1.8870|
                  |L1.8862|
;;;2739            else
;;;2740               png_error(png_ptr, "zlib error");
00229e  49d5              LDR      r1,|L1.9716|
0022a0  4620              MOV      r0,r4
0022a2  f7fffffe          BL       png_error
                  |L1.8870|
;;;2741         }
;;;2742   
;;;2743         /* see if it is time to write another IDAT */
;;;2744         if (!(png_ptr->zstream.avail_out))
0022a6  f44f70e2          MOV      r0,#0x1c4
0022aa  5900              LDR      r0,[r0,r4]
0022ac  b970              CBNZ     r0,|L1.8908|
;;;2745         {
;;;2746            /* write the IDAT and reset the zlib output buffer */
;;;2747            png_write_IDAT(png_ptr, png_ptr->zbuf, png_ptr->zbuf_size);
0022ae  4620              MOV      r0,r4
0022b0  f50471f6          ADD      r1,r4,#0x1ec
0022b4  c906              LDM      r1,{r1,r2}
0022b6  f7fffffe          BL       png_write_IDAT
;;;2748            png_ptr->zstream.next_out = png_ptr->zbuf;
0022ba  f44f70e0          MOV      r0,#0x1c0
0022be  f8d411ec          LDR      r1,[r4,#0x1ec]
0022c2  5101              STR      r1,[r0,r4]
;;;2749            png_ptr->zstream.avail_out = (uInt)png_ptr->zbuf_size;
0022c4  1d00              ADDS     r0,r0,#4
0022c6  f8d411f0          LDR      r1,[r4,#0x1f0]
0022ca  5101              STR      r1,[r0,r4]
                  |L1.8908|
;;;2750         }
;;;2751      /* repeat until all data has been compressed */
;;;2752      } while (png_ptr->zstream.avail_in);
0022cc  f44f70dc          MOV      r0,#0x1b8
0022d0  5900              LDR      r0,[r0,r4]
0022d2  2800              CMP      r0,#0
0022d4  d1d1              BNE      |L1.8826|
;;;2753   
;;;2754      /* swap the current and previous rows */
;;;2755      if (png_ptr->prev_row != NULL)
0022d6  f8d40228          LDR      r0,[r4,#0x228]
0022da  b140              CBZ      r0,|L1.8942|
;;;2756      {
;;;2757         png_bytep tptr;
;;;2758   
;;;2759         tptr = png_ptr->prev_row;
0022dc  f8d40228          LDR      r0,[r4,#0x228]
;;;2760         png_ptr->prev_row = png_ptr->row_buf;
0022e0  f8d4122c          LDR      r1,[r4,#0x22c]
0022e4  f8c41228          STR      r1,[r4,#0x228]
;;;2761         png_ptr->row_buf = tptr;
0022e8  f8c4022c          STR      r0,[r4,#0x22c]
;;;2762      }
0022ec  bf00              NOP      
                  |L1.8942|
;;;2763   
;;;2764      /* finish row - updates counters and flushes zlib if last row */
;;;2765      png_write_finish_row(png_ptr);
0022ee  4620              MOV      r0,r4
0022f0  f7fffffe          BL       png_write_finish_row
;;;2766   
;;;2767   #if defined(PNG_WRITE_FLUSH_SUPPORTED)
;;;2768      png_ptr->flush_rows++;
0022f4  f8d40294          LDR      r0,[r4,#0x294]
0022f8  1c40              ADDS     r0,r0,#1
0022fa  f8c40294          STR      r0,[r4,#0x294]
;;;2769   
;;;2770      if (png_ptr->flush_dist > 0 &&
0022fe  f8d40290          LDR      r0,[r4,#0x290]
002302  b140              CBZ      r0,|L1.8982|
;;;2771          png_ptr->flush_rows >= png_ptr->flush_dist)
002304  f8d41290          LDR      r1,[r4,#0x290]
002308  f8d40294          LDR      r0,[r4,#0x294]
00230c  4288              CMP      r0,r1
00230e  d302              BCC      |L1.8982|
;;;2772      {
;;;2773         png_write_flush(png_ptr);
002310  4620              MOV      r0,r4
002312  f7fffffe          BL       png_write_flush
                  |L1.8982|
;;;2774      }
;;;2775   #endif
;;;2776   }
002316  bd70              POP      {r4-r6,pc}
;;;2777   #endif /* PNG_WRITE_SUPPORTED */
                          ENDP

                  png_write_find_filter PROC
;;;2106   void /* PRIVATE */
;;;2107   png_write_find_filter(png_structp png_ptr, png_row_infop row_info)
002318  b503              PUSH     {r0,r1,lr}
;;;2108   {
00231a  b099              SUB      sp,sp,#0x64
;;;2109      png_bytep prev_row, best_row, row_buf;
;;;2110      png_uint_32 mins, bpp;
;;;2111      png_byte filter_to_do = png_ptr->do_filter;
00231c  9819              LDR      r0,[sp,#0x64]
00231e  f8900265          LDRB     r0,[r0,#0x265]
002322  9013              STR      r0,[sp,#0x4c]
;;;2112      png_uint_32 row_bytes = row_info->rowbytes;
002324  981a              LDR      r0,[sp,#0x68]
002326  6840              LDR      r0,[r0,#4]
002328  9012              STR      r0,[sp,#0x48]
;;;2113   #if defined(PNG_WRITE_WEIGHTED_FILTER_SUPPORTED)
;;;2114      int num_p_filters = (int)png_ptr->num_prev_filters;
00232a  9819              LDR      r0,[sp,#0x64]
00232c  f8900339          LDRB     r0,[r0,#0x339]
002330  9011              STR      r0,[sp,#0x44]
;;;2115   #endif
;;;2116   
;;;2117      png_debug(1, "in png_write_find_filter\n");
;;;2118      /* find out how many bytes offset each pixel is */
;;;2119      bpp = (row_info->pixel_depth + 7) >> 3;
002332  981a              LDR      r0,[sp,#0x68]
002334  7ac0              LDRB     r0,[r0,#0xb]
002336  1dc0              ADDS     r0,r0,#7
002338  10c0              ASRS     r0,r0,#3
00233a  9014              STR      r0,[sp,#0x50]
;;;2120   
;;;2121      prev_row = png_ptr->prev_row;
00233c  9819              LDR      r0,[sp,#0x64]
00233e  f8d00228          LDR      r0,[r0,#0x228]
002342  9018              STR      r0,[sp,#0x60]
;;;2122      best_row = row_buf = png_ptr->row_buf;
002344  9819              LDR      r0,[sp,#0x64]
002346  f8d0022c          LDR      r0,[r0,#0x22c]
00234a  9016              STR      r0,[sp,#0x58]
00234c  9017              STR      r0,[sp,#0x5c]
;;;2123      mins = PNG_MAXSUM;
00234e  f06f4000          MVN      r0,#0x80000000
002352  9015              STR      r0,[sp,#0x54]
;;;2124   
;;;2125      /* The prediction method we use is to find which method provides the
;;;2126       * smallest value when summing the absolute values of the distances
;;;2127       * from zero, using anything >= 128 as negative numbers.  This is known
;;;2128       * as the "minimum sum of absolute differences" heuristic.  Other
;;;2129       * heuristics are the "weighted minimum sum of absolute differences"
;;;2130       * (experimental and can in theory improve compression), and the "zlib
;;;2131       * predictive" method (not implemented yet), which does test compressions
;;;2132       * of lines using different filter methods, and then chooses the
;;;2133       * (series of) filter(s) that give minimum compressed data size (VERY
;;;2134       * computationally expensive).
;;;2135       *
;;;2136       * GRR 980525:  consider also
;;;2137       *   (1) minimum sum of absolute differences from running average (i.e.,
;;;2138       *       keep running sum of non-absolute differences & count of bytes)
;;;2139       *       [track dispersion, too?  restart average if dispersion too large?]
;;;2140       *  (1b) minimum sum of absolute differences from sliding average, probably
;;;2141       *       with window size <= deflate window (usually 32K)
;;;2142       *   (2) minimum sum of squared differences from zero or running average
;;;2143       *       (i.e., ~ root-mean-square approach)
;;;2144       */
;;;2145   
;;;2146   
;;;2147      /* We don't need to test the 'no filter' case if this is the only filter
;;;2148       * that has been chosen, as it doesn't actually do anything to the data.
;;;2149       */
;;;2150      if ((filter_to_do & PNG_FILTER_NONE) &&
002354  9813              LDR      r0,[sp,#0x4c]
002356  f0000008          AND      r0,r0,#8
00235a  2800              CMP      r0,#0
00235c  d073              BEQ      |L1.9286|
;;;2151          filter_to_do != PNG_FILTER_NONE)
00235e  9813              LDR      r0,[sp,#0x4c]
002360  2808              CMP      r0,#8
002362  d070              BEQ      |L1.9286|
;;;2152      {
;;;2153         png_bytep rp;
;;;2154         png_uint_32 sum = 0;
002364  2000              MOVS     r0,#0
002366  900f              STR      r0,[sp,#0x3c]
;;;2155         png_uint_32 i;
;;;2156         int v;
;;;2157   
;;;2158         for (i = 0, rp = row_buf + 1; i < row_bytes; i++, rp++)
002368  900e              STR      r0,[sp,#0x38]
00236a  9816              LDR      r0,[sp,#0x58]
00236c  1c40              ADDS     r0,r0,#1
00236e  9010              STR      r0,[sp,#0x40]
002370  e013              B        |L1.9114|
                  |L1.9074|
;;;2159         {
;;;2160            v = *rp;
002372  9810              LDR      r0,[sp,#0x40]
002374  7800              LDRB     r0,[r0,#0]
002376  900d              STR      r0,[sp,#0x34]
;;;2161            sum += (v < 128) ? v : 256 - v;
002378  980d              LDR      r0,[sp,#0x34]
00237a  2880              CMP      r0,#0x80
00237c  da01              BGE      |L1.9090|
00237e  980d              LDR      r0,[sp,#0x34]
002380  e002              B        |L1.9096|
                  |L1.9090|
002382  980d              LDR      r0,[sp,#0x34]
002384  f5c07080          RSB      r0,r0,#0x100
                  |L1.9096|
002388  990f              LDR      r1,[sp,#0x3c]
00238a  4408              ADD      r0,r0,r1
00238c  900f              STR      r0,[sp,#0x3c]
00238e  980e              LDR      r0,[sp,#0x38]         ;2158
002390  1c40              ADDS     r0,r0,#1              ;2158
002392  900e              STR      r0,[sp,#0x38]         ;2158
002394  9810              LDR      r0,[sp,#0x40]         ;2158
002396  1c40              ADDS     r0,r0,#1              ;2158
002398  9010              STR      r0,[sp,#0x40]         ;2158
                  |L1.9114|
00239a  9912              LDR      r1,[sp,#0x48]         ;2158
00239c  980e              LDR      r0,[sp,#0x38]         ;2158
00239e  4288              CMP      r0,r1                 ;2158
0023a0  d3e7              BCC      |L1.9074|
;;;2162         }
;;;2163   
;;;2164   #if defined(PNG_WRITE_WEIGHTED_FILTER_SUPPORTED)
;;;2165         if (png_ptr->heuristic_method == PNG_FILTER_HEURISTIC_WEIGHTED)
0023a2  9819              LDR      r0,[sp,#0x64]
0023a4  f8900338          LDRB     r0,[r0,#0x338]
0023a8  2802              CMP      r0,#2
0023aa  d149              BNE      |L1.9280|
;;;2166         {
;;;2167            png_uint_32 sumhi, sumlo;
;;;2168            int j;
;;;2169            sumlo = sum & PNG_LOMASK;
0023ac  980f              LDR      r0,[sp,#0x3c]
0023ae  b280              UXTH     r0,r0
0023b0  900b              STR      r0,[sp,#0x2c]
;;;2170            sumhi = (sum >> PNG_HISHIFT) & PNG_HIMASK; /* Gives us some footroom */
0023b2  4991              LDR      r1,|L1.9720|
0023b4  980f              LDR      r0,[sp,#0x3c]
0023b6  ea012090          AND      r0,r1,r0,LSR #10
0023ba  900c              STR      r0,[sp,#0x30]
;;;2171   
;;;2172            /* Reduce the sum if we match any of the previous rows */
;;;2173            for (j = 0; j < num_p_filters; j++)
0023bc  2000              MOVS     r0,#0
0023be  900a              STR      r0,[sp,#0x28]
0023c0  e01c              B        |L1.9212|
                  |L1.9154|
;;;2174            {
;;;2175               if (png_ptr->prev_filters[j] == PNG_FILTER_VALUE_NONE)
0023c2  9819              LDR      r0,[sp,#0x64]
0023c4  f8d0133c          LDR      r1,[r0,#0x33c]
0023c8  980a              LDR      r0,[sp,#0x28]
0023ca  5c08              LDRB     r0,[r1,r0]
0023cc  b998              CBNZ     r0,|L1.9206|
;;;2176               {
;;;2177                  sumlo = (sumlo * png_ptr->filter_weights[j]) >>
0023ce  9819              LDR      r0,[sp,#0x64]
0023d0  f8d01340          LDR      r1,[r0,#0x340]
0023d4  980a              LDR      r0,[sp,#0x28]
0023d6  f8310010          LDRH     r0,[r1,r0,LSL #1]
0023da  990b              LDR      r1,[sp,#0x2c]
0023dc  4348              MULS     r0,r1,r0
0023de  0a00              LSRS     r0,r0,#8
0023e0  900b              STR      r0,[sp,#0x2c]
;;;2178                     PNG_WEIGHT_SHIFT;
;;;2179                  sumhi = (sumhi * png_ptr->filter_weights[j]) >>
0023e2  9819              LDR      r0,[sp,#0x64]
0023e4  f8d01340          LDR      r1,[r0,#0x340]
0023e8  980a              LDR      r0,[sp,#0x28]
0023ea  f8310010          LDRH     r0,[r1,r0,LSL #1]
0023ee  990c              LDR      r1,[sp,#0x30]
0023f0  4348              MULS     r0,r1,r0
0023f2  0a00              LSRS     r0,r0,#8
0023f4  900c              STR      r0,[sp,#0x30]
                  |L1.9206|
0023f6  980a              LDR      r0,[sp,#0x28]         ;2173
0023f8  1c40              ADDS     r0,r0,#1              ;2173
0023fa  900a              STR      r0,[sp,#0x28]         ;2173
                  |L1.9212|
0023fc  9911              LDR      r1,[sp,#0x44]         ;2173
0023fe  980a              LDR      r0,[sp,#0x28]         ;2173
002400  4288              CMP      r0,r1                 ;2173
002402  dbde              BLT      |L1.9154|
;;;2180                     PNG_WEIGHT_SHIFT;
;;;2181               }
;;;2182            }
;;;2183   
;;;2184            /* Factor in the cost of this filter (this is here for completeness,
;;;2185             * but it makes no sense to have a "cost" for the NONE filter, as
;;;2186             * it has the minimum possible computational cost - none).
;;;2187             */
;;;2188            sumlo = (sumlo * png_ptr->filter_costs[PNG_FILTER_VALUE_NONE]) >>
002404  9819              LDR      r0,[sp,#0x64]
002406  f8d00348          LDR      r0,[r0,#0x348]
00240a  8800              LDRH     r0,[r0,#0]
00240c  990b              LDR      r1,[sp,#0x2c]
00240e  4348              MULS     r0,r1,r0
002410  08c0              LSRS     r0,r0,#3
002412  900b              STR      r0,[sp,#0x2c]
;;;2189               PNG_COST_SHIFT;
;;;2190            sumhi = (sumhi * png_ptr->filter_costs[PNG_FILTER_VALUE_NONE]) >>
002414  9819              LDR      r0,[sp,#0x64]
002416  f8d00348          LDR      r0,[r0,#0x348]
00241a  8800              LDRH     r0,[r0,#0]
00241c  990c              LDR      r1,[sp,#0x30]
00241e  4348              MULS     r0,r1,r0
002420  08c0              LSRS     r0,r0,#3
002422  900c              STR      r0,[sp,#0x30]
;;;2191               PNG_COST_SHIFT;
;;;2192   
;;;2193            if (sumhi > PNG_HIMASK)
002424  4974              LDR      r1,|L1.9720|
002426  980c              LDR      r0,[sp,#0x30]
002428  4288              CMP      r0,r1
00242a  d903              BLS      |L1.9268|
;;;2194               sum = PNG_MAXSUM;
00242c  f06f4000          MVN      r0,#0x80000000
002430  900f              STR      r0,[sp,#0x3c]
002432  e004              B        |L1.9278|
                  |L1.9268|
;;;2195            else
;;;2196               sum = (sumhi << PNG_HISHIFT) + sumlo;
002434  e9dd010b          LDRD     r0,r1,[sp,#0x2c]
002438  eb002081          ADD      r0,r0,r1,LSL #10
00243c  900f              STR      r0,[sp,#0x3c]
                  |L1.9278|
;;;2197         }
00243e  bf00              NOP      
                  |L1.9280|
;;;2198   #endif
;;;2199         mins = sum;
002440  980f              LDR      r0,[sp,#0x3c]
002442  9015              STR      r0,[sp,#0x54]
;;;2200      }
002444  bf00              NOP      
                  |L1.9286|
;;;2201   
;;;2202      /* sub filter */
;;;2203      if (filter_to_do == PNG_FILTER_SUB)
002446  9813              LDR      r0,[sp,#0x4c]
002448  2810              CMP      r0,#0x10
00244a  d13c              BNE      |L1.9414|
;;;2204      /* it's the only filter so no testing is needed */
;;;2205      {
;;;2206         png_bytep rp, lp, dp;
;;;2207         png_uint_32 i;
;;;2208         for (i = 0, rp = row_buf + 1, dp = png_ptr->sub_row + 1; i < bpp;
00244c  2000              MOVS     r0,#0
00244e  900d              STR      r0,[sp,#0x34]
002450  9816              LDR      r0,[sp,#0x58]
002452  1c40              ADDS     r0,r0,#1
002454  9010              STR      r0,[sp,#0x40]
002456  9819              LDR      r0,[sp,#0x64]
002458  f8d00230          LDR      r0,[r0,#0x230]
00245c  1c40              ADDS     r0,r0,#1
00245e  900e              STR      r0,[sp,#0x38]
002460  e00c              B        |L1.9340|
                  |L1.9314|
;;;2209              i++, rp++, dp++)
;;;2210         {
;;;2211            *dp = *rp;
002462  9810              LDR      r0,[sp,#0x40]
002464  7801              LDRB     r1,[r0,#0]
002466  980e              LDR      r0,[sp,#0x38]
002468  7001              STRB     r1,[r0,#0]
00246a  980d              LDR      r0,[sp,#0x34]         ;2209
00246c  1c40              ADDS     r0,r0,#1              ;2209
00246e  900d              STR      r0,[sp,#0x34]         ;2209
002470  9810              LDR      r0,[sp,#0x40]         ;2209
002472  1c40              ADDS     r0,r0,#1              ;2209
002474  9010              STR      r0,[sp,#0x40]         ;2209
002476  980e              LDR      r0,[sp,#0x38]         ;2209
002478  1c40              ADDS     r0,r0,#1              ;2209
00247a  900e              STR      r0,[sp,#0x38]         ;2209
                  |L1.9340|
00247c  9914              LDR      r1,[sp,#0x50]         ;2208
00247e  980d              LDR      r0,[sp,#0x34]         ;2208
002480  4288              CMP      r0,r1                 ;2208
002482  d3ee              BCC      |L1.9314|
;;;2212         }
;;;2213         for (lp = row_buf + 1; i < row_bytes;
002484  9816              LDR      r0,[sp,#0x58]
002486  1c40              ADDS     r0,r0,#1
002488  900f              STR      r0,[sp,#0x3c]
00248a  e013              B        |L1.9396|
                  |L1.9356|
;;;2214            i++, rp++, lp++, dp++)
;;;2215         {
;;;2216            *dp = (png_byte)(((int)*rp - (int)*lp) & 0xff);
00248c  9810              LDR      r0,[sp,#0x40]
00248e  7801              LDRB     r1,[r0,#0]
002490  980f              LDR      r0,[sp,#0x3c]
002492  7800              LDRB     r0,[r0,#0]
002494  1a08              SUBS     r0,r1,r0
002496  b2c1              UXTB     r1,r0
002498  980e              LDR      r0,[sp,#0x38]
00249a  7001              STRB     r1,[r0,#0]
00249c  980d              LDR      r0,[sp,#0x34]         ;2214
00249e  1c40              ADDS     r0,r0,#1              ;2214
0024a0  900d              STR      r0,[sp,#0x34]         ;2214
0024a2  9810              LDR      r0,[sp,#0x40]         ;2214
0024a4  1c40              ADDS     r0,r0,#1              ;2214
0024a6  9010              STR      r0,[sp,#0x40]         ;2214
0024a8  980f              LDR      r0,[sp,#0x3c]         ;2214
0024aa  1c40              ADDS     r0,r0,#1              ;2214
0024ac  900f              STR      r0,[sp,#0x3c]         ;2214
0024ae  980e              LDR      r0,[sp,#0x38]         ;2214
0024b0  1c40              ADDS     r0,r0,#1              ;2214
0024b2  900e              STR      r0,[sp,#0x38]         ;2214
                  |L1.9396|
0024b4  9912              LDR      r1,[sp,#0x48]         ;2213
0024b6  980d              LDR      r0,[sp,#0x34]         ;2213
0024b8  4288              CMP      r0,r1                 ;2213
0024ba  d3e7              BCC      |L1.9356|
;;;2217         }
;;;2218         best_row = png_ptr->sub_row;
0024bc  9819              LDR      r0,[sp,#0x64]
0024be  f8d00230          LDR      r0,[r0,#0x230]
0024c2  9017              STR      r0,[sp,#0x5c]
                  |L1.9412|
;;;2219      }
0024c4  e111              B        |L1.9962|
                  |L1.9414|
;;;2220   
;;;2221      else if (filter_to_do & PNG_FILTER_SUB)
0024c6  9813              LDR      r0,[sp,#0x4c]
0024c8  f0000010          AND      r0,r0,#0x10
0024cc  2800              CMP      r0,#0
0024ce  d0f9              BEQ      |L1.9412|
;;;2222      {
;;;2223         png_bytep rp, dp, lp;
;;;2224         png_uint_32 sum = 0, lmins = mins;
0024d0  2000              MOVS     r0,#0
0024d2  900d              STR      r0,[sp,#0x34]
0024d4  9815              LDR      r0,[sp,#0x54]
0024d6  900c              STR      r0,[sp,#0x30]
;;;2225         png_uint_32 i;
;;;2226         int v;
;;;2227   
;;;2228   #if defined(PNG_WRITE_WEIGHTED_FILTER_SUPPORTED)
;;;2229         /* We temporarily increase the "minimum sum" by the factor we
;;;2230          * would reduce the sum of this filter, so that we can do the
;;;2231          * early exit comparison without scaling the sum each time.
;;;2232          */
;;;2233         if (png_ptr->heuristic_method == PNG_FILTER_HEURISTIC_WEIGHTED)
0024d8  9819              LDR      r0,[sp,#0x64]
0024da  f8900338          LDRB     r0,[r0,#0x338]
0024de  2802              CMP      r0,#2
0024e0  d14a              BNE      |L1.9592|
;;;2234         {
;;;2235            int j;
;;;2236            png_uint_32 lmhi, lmlo;
;;;2237            lmlo = lmins & PNG_LOMASK;
0024e2  980c              LDR      r0,[sp,#0x30]
0024e4  b280              UXTH     r0,r0
0024e6  9007              STR      r0,[sp,#0x1c]
;;;2238            lmhi = (lmins >> PNG_HISHIFT) & PNG_HIMASK;
0024e8  4943              LDR      r1,|L1.9720|
0024ea  980c              LDR      r0,[sp,#0x30]
0024ec  ea012090          AND      r0,r1,r0,LSR #10
0024f0  9008              STR      r0,[sp,#0x20]
;;;2239   
;;;2240            for (j = 0; j < num_p_filters; j++)
0024f2  2000              MOVS     r0,#0
0024f4  9009              STR      r0,[sp,#0x24]
0024f6  e01d              B        |L1.9524|
                  |L1.9464|
;;;2241            {
;;;2242               if (png_ptr->prev_filters[j] == PNG_FILTER_VALUE_SUB)
0024f8  9819              LDR      r0,[sp,#0x64]
0024fa  f8d0133c          LDR      r1,[r0,#0x33c]
0024fe  9809              LDR      r0,[sp,#0x24]
002500  5c08              LDRB     r0,[r1,r0]
002502  2801              CMP      r0,#1
002504  d113              BNE      |L1.9518|
;;;2243               {
;;;2244                  lmlo = (lmlo * png_ptr->inv_filter_weights[j]) >>
002506  9819              LDR      r0,[sp,#0x64]
002508  f8d01344          LDR      r1,[r0,#0x344]
00250c  9809              LDR      r0,[sp,#0x24]
00250e  f8310010          LDRH     r0,[r1,r0,LSL #1]
002512  9907              LDR      r1,[sp,#0x1c]
002514  4348              MULS     r0,r1,r0
002516  0a00              LSRS     r0,r0,#8
002518  9007              STR      r0,[sp,#0x1c]
;;;2245                     PNG_WEIGHT_SHIFT;
;;;2246                  lmhi = (lmhi * png_ptr->inv_filter_weights[j]) >>
00251a  9819              LDR      r0,[sp,#0x64]
00251c  f8d01344          LDR      r1,[r0,#0x344]
002520  9809              LDR      r0,[sp,#0x24]
002522  f8310010          LDRH     r0,[r1,r0,LSL #1]
002526  9908              LDR      r1,[sp,#0x20]
002528  4348              MULS     r0,r1,r0
00252a  0a00              LSRS     r0,r0,#8
00252c  9008              STR      r0,[sp,#0x20]
                  |L1.9518|
00252e  9809              LDR      r0,[sp,#0x24]         ;2240
002530  1c40              ADDS     r0,r0,#1              ;2240
002532  9009              STR      r0,[sp,#0x24]         ;2240
                  |L1.9524|
002534  9911              LDR      r1,[sp,#0x44]         ;2240
002536  9809              LDR      r0,[sp,#0x24]         ;2240
002538  4288              CMP      r0,r1                 ;2240
00253a  dbdd              BLT      |L1.9464|
;;;2247                     PNG_WEIGHT_SHIFT;
;;;2248               }
;;;2249            }
;;;2250   
;;;2251            lmlo = (lmlo * png_ptr->inv_filter_costs[PNG_FILTER_VALUE_SUB]) >>
00253c  9819              LDR      r0,[sp,#0x64]
00253e  f8d0034c          LDR      r0,[r0,#0x34c]
002542  8840              LDRH     r0,[r0,#2]
002544  9907              LDR      r1,[sp,#0x1c]
002546  4348              MULS     r0,r1,r0
002548  08c0              LSRS     r0,r0,#3
00254a  9007              STR      r0,[sp,#0x1c]
;;;2252               PNG_COST_SHIFT;
;;;2253            lmhi = (lmhi * png_ptr->inv_filter_costs[PNG_FILTER_VALUE_SUB]) >>
00254c  9819              LDR      r0,[sp,#0x64]
00254e  f8d0034c          LDR      r0,[r0,#0x34c]
002552  8840              LDRH     r0,[r0,#2]
002554  9908              LDR      r1,[sp,#0x20]
002556  4348              MULS     r0,r1,r0
002558  08c0              LSRS     r0,r0,#3
00255a  9008              STR      r0,[sp,#0x20]
;;;2254               PNG_COST_SHIFT;
;;;2255   
;;;2256            if (lmhi > PNG_HIMASK)
00255c  4926              LDR      r1,|L1.9720|
00255e  9808              LDR      r0,[sp,#0x20]
002560  4288              CMP      r0,r1
002562  d903              BLS      |L1.9580|
;;;2257               lmins = PNG_MAXSUM;
002564  f06f4000          MVN      r0,#0x80000000
002568  900c              STR      r0,[sp,#0x30]
00256a  e004              B        |L1.9590|
                  |L1.9580|
;;;2258            else
;;;2259               lmins = (lmhi << PNG_HISHIFT) + lmlo;
00256c  e9dd0107          LDRD     r0,r1,[sp,#0x1c]
002570  eb002081          ADD      r0,r0,r1,LSL #10
002574  900c              STR      r0,[sp,#0x30]
                  |L1.9590|
;;;2260         }
002576  bf00              NOP      
                  |L1.9592|
;;;2261   #endif
;;;2262   
;;;2263         for (i = 0, rp = row_buf + 1, dp = png_ptr->sub_row + 1; i < bpp;
002578  2000              MOVS     r0,#0
00257a  900b              STR      r0,[sp,#0x2c]
00257c  9816              LDR      r0,[sp,#0x58]
00257e  1c40              ADDS     r0,r0,#1
002580  9010              STR      r0,[sp,#0x40]
002582  9819              LDR      r0,[sp,#0x64]
002584  f8d00230          LDR      r0,[r0,#0x230]
002588  1c40              ADDS     r0,r0,#1
00258a  900f              STR      r0,[sp,#0x3c]
00258c  e018              B        |L1.9664|
                  |L1.9614|
;;;2264              i++, rp++, dp++)
;;;2265         {
;;;2266            v = *dp = *rp;
00258e  9810              LDR      r0,[sp,#0x40]
002590  7800              LDRB     r0,[r0,#0]
002592  990f              LDR      r1,[sp,#0x3c]
002594  7008              STRB     r0,[r1,#0]
002596  900a              STR      r0,[sp,#0x28]
;;;2267   
;;;2268            sum += (v < 128) ? v : 256 - v;
002598  980a              LDR      r0,[sp,#0x28]
00259a  2880              CMP      r0,#0x80
00259c  da01              BGE      |L1.9634|
00259e  980a              LDR      r0,[sp,#0x28]
0025a0  e002              B        |L1.9640|
                  |L1.9634|
0025a2  980a              LDR      r0,[sp,#0x28]
0025a4  f5c07080          RSB      r0,r0,#0x100
                  |L1.9640|
0025a8  990d              LDR      r1,[sp,#0x34]
0025aa  4408              ADD      r0,r0,r1
0025ac  900d              STR      r0,[sp,#0x34]
0025ae  980b              LDR      r0,[sp,#0x2c]         ;2264
0025b0  1c40              ADDS     r0,r0,#1              ;2264
0025b2  900b              STR      r0,[sp,#0x2c]         ;2264
0025b4  9810              LDR      r0,[sp,#0x40]         ;2264
0025b6  1c40              ADDS     r0,r0,#1              ;2264
0025b8  9010              STR      r0,[sp,#0x40]         ;2264
0025ba  980f              LDR      r0,[sp,#0x3c]         ;2264
0025bc  1c40              ADDS     r0,r0,#1              ;2264
0025be  900f              STR      r0,[sp,#0x3c]         ;2264
                  |L1.9664|
0025c0  9914              LDR      r1,[sp,#0x50]         ;2263
0025c2  980b              LDR      r0,[sp,#0x2c]         ;2263
0025c4  4288              CMP      r0,r1                 ;2263
0025c6  d3e2              BCC      |L1.9614|
;;;2269         }
;;;2270         for (lp = row_buf + 1; i < row_bytes;
0025c8  9816              LDR      r0,[sp,#0x58]
0025ca  1c40              ADDS     r0,r0,#1
0025cc  900e              STR      r0,[sp,#0x38]
0025ce  e02c              B        |L1.9770|
                  |L1.9680|
;;;2271            i++, rp++, lp++, dp++)
;;;2272         {
;;;2273            v = *dp = (png_byte)(((int)*rp - (int)*lp) & 0xff);
0025d0  9810              LDR      r0,[sp,#0x40]
0025d2  7801              LDRB     r1,[r0,#0]
0025d4  980e              LDR      r0,[sp,#0x38]
0025d6  7800              LDRB     r0,[r0,#0]
0025d8  1a08              SUBS     r0,r1,r0
0025da  b2c1              UXTB     r1,r0
0025dc  980f              LDR      r0,[sp,#0x3c]
0025de  7001              STRB     r1,[r0,#0]
0025e0  910a              STR      r1,[sp,#0x28]
;;;2274   
;;;2275            sum += (v < 128) ? v : 256 - v;
0025e2  980a              LDR      r0,[sp,#0x28]
0025e4  2880              CMP      r0,#0x80
0025e6  da09              BGE      |L1.9724|
0025e8  980a              LDR      r0,[sp,#0x28]
0025ea  e00a              B        |L1.9730|
                  |L1.9708|
                          DCD      png_pass_start
                  |L1.9712|
                          DCD      png_pass_inc
                  |L1.9716|
                          DCD      ||.text||+0x4f8
                  |L1.9720|
                          DCD      0x003fffc0
                  |L1.9724|
0025fc  980a              LDR      r0,[sp,#0x28]
0025fe  f5c07080          RSB      r0,r0,#0x100
                  |L1.9730|
002602  990d              LDR      r1,[sp,#0x34]
002604  4408              ADD      r0,r0,r1
002606  900d              STR      r0,[sp,#0x34]
;;;2276   
;;;2277            if (sum > lmins)  /* We are already worse, don't continue. */
002608  e9dd100c          LDRD     r1,r0,[sp,#0x30]
00260c  4288              CMP      r0,r1
00260e  d900              BLS      |L1.9746|
;;;2278               break;
002610  e00f              B        |L1.9778|
                  |L1.9746|
002612  980b              LDR      r0,[sp,#0x2c]         ;2271
002614  1c40              ADDS     r0,r0,#1              ;2271
002616  900b              STR      r0,[sp,#0x2c]         ;2271
002618  9810              LDR      r0,[sp,#0x40]         ;2271
00261a  1c40              ADDS     r0,r0,#1              ;2271
00261c  9010              STR      r0,[sp,#0x40]         ;2271
00261e  980e              LDR      r0,[sp,#0x38]         ;2271
002620  1c40              ADDS     r0,r0,#1              ;2271
002622  900e              STR      r0,[sp,#0x38]         ;2271
002624  980f              LDR      r0,[sp,#0x3c]         ;2271
002626  1c40              ADDS     r0,r0,#1              ;2271
002628  900f              STR      r0,[sp,#0x3c]         ;2271
                  |L1.9770|
00262a  9912              LDR      r1,[sp,#0x48]         ;2270
00262c  980b              LDR      r0,[sp,#0x2c]         ;2270
00262e  4288              CMP      r0,r1                 ;2270
002630  d3ce              BCC      |L1.9680|
                  |L1.9778|
002632  bf00              NOP      
;;;2279         }
;;;2280   
;;;2281   #if defined(PNG_WRITE_WEIGHTED_FILTER_SUPPORTED)
;;;2282         if (png_ptr->heuristic_method == PNG_FILTER_HEURISTIC_WEIGHTED)
002634  9819              LDR      r0,[sp,#0x64]
002636  f8900338          LDRB     r0,[r0,#0x338]
00263a  2802              CMP      r0,#2
00263c  d14a              BNE      |L1.9940|
;;;2283         {
;;;2284            int j;
;;;2285            png_uint_32 sumhi, sumlo;
;;;2286            sumlo = sum & PNG_LOMASK;
00263e  980d              LDR      r0,[sp,#0x34]
002640  b280              UXTH     r0,r0
002642  9007              STR      r0,[sp,#0x1c]
;;;2287            sumhi = (sum >> PNG_HISHIFT) & PNG_HIMASK;
002644  49fe              LDR      r1,|L1.10816|
002646  980d              LDR      r0,[sp,#0x34]
002648  ea012090          AND      r0,r1,r0,LSR #10
00264c  9008              STR      r0,[sp,#0x20]
;;;2288   
;;;2289            for (j = 0; j < num_p_filters; j++)
00264e  2000              MOVS     r0,#0
002650  9009              STR      r0,[sp,#0x24]
002652  e01d              B        |L1.9872|
                  |L1.9812|
;;;2290            {
;;;2291               if (png_ptr->prev_filters[j] == PNG_FILTER_VALUE_SUB)
002654  9819              LDR      r0,[sp,#0x64]
002656  f8d0133c          LDR      r1,[r0,#0x33c]
00265a  9809              LDR      r0,[sp,#0x24]
00265c  5c08              LDRB     r0,[r1,r0]
00265e  2801              CMP      r0,#1
002660  d113              BNE      |L1.9866|
;;;2292               {
;;;2293                  sumlo = (sumlo * png_ptr->inv_filter_weights[j]) >>
002662  9819              LDR      r0,[sp,#0x64]
002664  f8d01344          LDR      r1,[r0,#0x344]
002668  9809              LDR      r0,[sp,#0x24]
00266a  f8310010          LDRH     r0,[r1,r0,LSL #1]
00266e  9907              LDR      r1,[sp,#0x1c]
002670  4348              MULS     r0,r1,r0
002672  0a00              LSRS     r0,r0,#8
002674  9007              STR      r0,[sp,#0x1c]
;;;2294                     PNG_WEIGHT_SHIFT;
;;;2295                  sumhi = (sumhi * png_ptr->inv_filter_weights[j]) >>
002676  9819              LDR      r0,[sp,#0x64]
002678  f8d01344          LDR      r1,[r0,#0x344]
00267c  9809              LDR      r0,[sp,#0x24]
00267e  f8310010          LDRH     r0,[r1,r0,LSL #1]
002682  9908              LDR      r1,[sp,#0x20]
002684  4348              MULS     r0,r1,r0
002686  0a00              LSRS     r0,r0,#8
002688  9008              STR      r0,[sp,#0x20]
                  |L1.9866|
00268a  9809              LDR      r0,[sp,#0x24]         ;2289
00268c  1c40              ADDS     r0,r0,#1              ;2289
00268e  9009              STR      r0,[sp,#0x24]         ;2289
                  |L1.9872|
002690  9911              LDR      r1,[sp,#0x44]         ;2289
002692  9809              LDR      r0,[sp,#0x24]         ;2289
002694  4288              CMP      r0,r1                 ;2289
002696  dbdd              BLT      |L1.9812|
;;;2296                     PNG_WEIGHT_SHIFT;
;;;2297               }
;;;2298            }
;;;2299   
;;;2300            sumlo = (sumlo * png_ptr->inv_filter_costs[PNG_FILTER_VALUE_SUB]) >>
002698  9819              LDR      r0,[sp,#0x64]
00269a  f8d0034c          LDR      r0,[r0,#0x34c]
00269e  8840              LDRH     r0,[r0,#2]
0026a0  9907              LDR      r1,[sp,#0x1c]
0026a2  4348              MULS     r0,r1,r0
0026a4  08c0              LSRS     r0,r0,#3
0026a6  9007              STR      r0,[sp,#0x1c]
;;;2301               PNG_COST_SHIFT;
;;;2302            sumhi = (sumhi * png_ptr->inv_filter_costs[PNG_FILTER_VALUE_SUB]) >>
0026a8  9819              LDR      r0,[sp,#0x64]
0026aa  f8d0034c          LDR      r0,[r0,#0x34c]
0026ae  8840              LDRH     r0,[r0,#2]
0026b0  9908              LDR      r1,[sp,#0x20]
0026b2  4348              MULS     r0,r1,r0
0026b4  08c0              LSRS     r0,r0,#3
0026b6  9008              STR      r0,[sp,#0x20]
;;;2303               PNG_COST_SHIFT;
;;;2304   
;;;2305            if (sumhi > PNG_HIMASK)
0026b8  49e1              LDR      r1,|L1.10816|
0026ba  9808              LDR      r0,[sp,#0x20]
0026bc  4288              CMP      r0,r1
0026be  d903              BLS      |L1.9928|
;;;2306               sum = PNG_MAXSUM;
0026c0  f06f4000          MVN      r0,#0x80000000
0026c4  900d              STR      r0,[sp,#0x34]
0026c6  e004              B        |L1.9938|
                  |L1.9928|
;;;2307            else
;;;2308               sum = (sumhi << PNG_HISHIFT) + sumlo;
0026c8  e9dd0107          LDRD     r0,r1,[sp,#0x1c]
0026cc  eb002081          ADD      r0,r0,r1,LSL #10
0026d0  900d              STR      r0,[sp,#0x34]
                  |L1.9938|
;;;2309         }
0026d2  bf00              NOP      
                  |L1.9940|
;;;2310   #endif
;;;2311   
;;;2312         if (sum < mins)
0026d4  9915              LDR      r1,[sp,#0x54]
0026d6  980d              LDR      r0,[sp,#0x34]
0026d8  4288              CMP      r0,r1
0026da  d205              BCS      |L1.9960|
;;;2313         {
;;;2314            mins = sum;
0026dc  980d              LDR      r0,[sp,#0x34]
0026de  9015              STR      r0,[sp,#0x54]
;;;2315            best_row = png_ptr->sub_row;
0026e0  9819              LDR      r0,[sp,#0x64]
0026e2  f8d00230          LDR      r0,[r0,#0x230]
0026e6  9017              STR      r0,[sp,#0x5c]
                  |L1.9960|
;;;2316         }
;;;2317      }
0026e8  bf00              NOP      
                  |L1.9962|
;;;2318   
;;;2319      /* up filter */
;;;2320      if (filter_to_do == PNG_FILTER_UP)
0026ea  9813              LDR      r0,[sp,#0x4c]
0026ec  2820              CMP      r0,#0x20
0026ee  d12a              BNE      |L1.10054|
;;;2321      {
;;;2322         png_bytep rp, dp, pp;
;;;2323         png_uint_32 i;
;;;2324   
;;;2325         for (i = 0, rp = row_buf + 1, dp = png_ptr->up_row + 1,
0026f0  2000              MOVS     r0,#0
0026f2  900d              STR      r0,[sp,#0x34]
0026f4  9816              LDR      r0,[sp,#0x58]
0026f6  1c40              ADDS     r0,r0,#1
0026f8  9010              STR      r0,[sp,#0x40]
0026fa  9819              LDR      r0,[sp,#0x64]
0026fc  f8d00234          LDR      r0,[r0,#0x234]
002700  1c40              ADDS     r0,r0,#1
002702  900f              STR      r0,[sp,#0x3c]
;;;2326              pp = prev_row + 1; i < row_bytes;
002704  9818              LDR      r0,[sp,#0x60]
002706  1c40              ADDS     r0,r0,#1
002708  900e              STR      r0,[sp,#0x38]
00270a  e013              B        |L1.10036|
                  |L1.9996|
;;;2327              i++, rp++, pp++, dp++)
;;;2328         {
;;;2329            *dp = (png_byte)(((int)*rp - (int)*pp) & 0xff);
00270c  9810              LDR      r0,[sp,#0x40]
00270e  7801              LDRB     r1,[r0,#0]
002710  980e              LDR      r0,[sp,#0x38]
002712  7800              LDRB     r0,[r0,#0]
002714  1a08              SUBS     r0,r1,r0
002716  b2c1              UXTB     r1,r0
002718  980f              LDR      r0,[sp,#0x3c]
00271a  7001              STRB     r1,[r0,#0]
00271c  980d              LDR      r0,[sp,#0x34]         ;2327
00271e  1c40              ADDS     r0,r0,#1              ;2327
002720  900d              STR      r0,[sp,#0x34]         ;2327
002722  9810              LDR      r0,[sp,#0x40]         ;2327
002724  1c40              ADDS     r0,r0,#1              ;2327
002726  9010              STR      r0,[sp,#0x40]         ;2327
002728  980e              LDR      r0,[sp,#0x38]         ;2327
00272a  1c40              ADDS     r0,r0,#1              ;2327
00272c  900e              STR      r0,[sp,#0x38]         ;2327
00272e  980f              LDR      r0,[sp,#0x3c]         ;2327
002730  1c40              ADDS     r0,r0,#1              ;2327
002732  900f              STR      r0,[sp,#0x3c]         ;2327
                  |L1.10036|
002734  9912              LDR      r1,[sp,#0x48]         ;2326
002736  980d              LDR      r0,[sp,#0x34]         ;2326
002738  4288              CMP      r0,r1                 ;2326
00273a  d3e7              BCC      |L1.9996|
;;;2330         }
;;;2331         best_row = png_ptr->up_row;
00273c  9819              LDR      r0,[sp,#0x64]
00273e  f8d00234          LDR      r0,[r0,#0x234]
002742  9017              STR      r0,[sp,#0x5c]
                  |L1.10052|
;;;2332      }
002744  e0e9              B        |L1.10522|
                  |L1.10054|
;;;2333   
;;;2334      else if (filter_to_do & PNG_FILTER_UP)
002746  9813              LDR      r0,[sp,#0x4c]
002748  f0000020          AND      r0,r0,#0x20
00274c  2800              CMP      r0,#0
00274e  d0f9              BEQ      |L1.10052|
;;;2335      {
;;;2336         png_bytep rp, dp, pp;
;;;2337         png_uint_32 sum = 0, lmins = mins;
002750  2000              MOVS     r0,#0
002752  900d              STR      r0,[sp,#0x34]
002754  9815              LDR      r0,[sp,#0x54]
002756  900c              STR      r0,[sp,#0x30]
;;;2338         png_uint_32 i;
;;;2339         int v;
;;;2340   
;;;2341   
;;;2342   #if defined(PNG_WRITE_WEIGHTED_FILTER_SUPPORTED)
;;;2343         if (png_ptr->heuristic_method == PNG_FILTER_HEURISTIC_WEIGHTED)
002758  9819              LDR      r0,[sp,#0x64]
00275a  f8900338          LDRB     r0,[r0,#0x338]
00275e  2802              CMP      r0,#2
002760  d14a              BNE      |L1.10232|
;;;2344         {
;;;2345            int j;
;;;2346            png_uint_32 lmhi, lmlo;
;;;2347            lmlo = lmins & PNG_LOMASK;
002762  980c              LDR      r0,[sp,#0x30]
002764  b280              UXTH     r0,r0
002766  9007              STR      r0,[sp,#0x1c]
;;;2348            lmhi = (lmins >> PNG_HISHIFT) & PNG_HIMASK;
002768  49b5              LDR      r1,|L1.10816|
00276a  980c              LDR      r0,[sp,#0x30]
00276c  ea012090          AND      r0,r1,r0,LSR #10
002770  9008              STR      r0,[sp,#0x20]
;;;2349   
;;;2350            for (j = 0; j < num_p_filters; j++)
002772  2000              MOVS     r0,#0
002774  9009              STR      r0,[sp,#0x24]
002776  e01d              B        |L1.10164|
                  |L1.10104|
;;;2351            {
;;;2352               if (png_ptr->prev_filters[j] == PNG_FILTER_VALUE_UP)
002778  9819              LDR      r0,[sp,#0x64]
00277a  f8d0133c          LDR      r1,[r0,#0x33c]
00277e  9809              LDR      r0,[sp,#0x24]
002780  5c08              LDRB     r0,[r1,r0]
002782  2802              CMP      r0,#2
002784  d113              BNE      |L1.10158|
;;;2353               {
;;;2354                  lmlo = (lmlo * png_ptr->inv_filter_weights[j]) >>
002786  9819              LDR      r0,[sp,#0x64]
002788  f8d01344          LDR      r1,[r0,#0x344]
00278c  9809              LDR      r0,[sp,#0x24]
00278e  f8310010          LDRH     r0,[r1,r0,LSL #1]
002792  9907              LDR      r1,[sp,#0x1c]
002794  4348              MULS     r0,r1,r0
002796  0a00              LSRS     r0,r0,#8
002798  9007              STR      r0,[sp,#0x1c]
;;;2355                     PNG_WEIGHT_SHIFT;
;;;2356                  lmhi = (lmhi * png_ptr->inv_filter_weights[j]) >>
00279a  9819              LDR      r0,[sp,#0x64]
00279c  f8d01344          LDR      r1,[r0,#0x344]
0027a0  9809              LDR      r0,[sp,#0x24]
0027a2  f8310010          LDRH     r0,[r1,r0,LSL #1]
0027a6  9908              LDR      r1,[sp,#0x20]
0027a8  4348              MULS     r0,r1,r0
0027aa  0a00              LSRS     r0,r0,#8
0027ac  9008              STR      r0,[sp,#0x20]
                  |L1.10158|
0027ae  9809              LDR      r0,[sp,#0x24]         ;2350
0027b0  1c40              ADDS     r0,r0,#1              ;2350
0027b2  9009              STR      r0,[sp,#0x24]         ;2350
                  |L1.10164|
0027b4  9911              LDR      r1,[sp,#0x44]         ;2350
0027b6  9809              LDR      r0,[sp,#0x24]         ;2350
0027b8  4288              CMP      r0,r1                 ;2350
0027ba  dbdd              BLT      |L1.10104|
;;;2357                     PNG_WEIGHT_SHIFT;
;;;2358               }
;;;2359            }
;;;2360   
;;;2361            lmlo = (lmlo * png_ptr->inv_filter_costs[PNG_FILTER_VALUE_UP]) >>
0027bc  9819              LDR      r0,[sp,#0x64]
0027be  f8d0034c          LDR      r0,[r0,#0x34c]
0027c2  8880              LDRH     r0,[r0,#4]
0027c4  9907              LDR      r1,[sp,#0x1c]
0027c6  4348              MULS     r0,r1,r0
0027c8  08c0              LSRS     r0,r0,#3
0027ca  9007              STR      r0,[sp,#0x1c]
;;;2362               PNG_COST_SHIFT;
;;;2363            lmhi = (lmhi * png_ptr->inv_filter_costs[PNG_FILTER_VALUE_UP]) >>
0027cc  9819              LDR      r0,[sp,#0x64]
0027ce  f8d0034c          LDR      r0,[r0,#0x34c]
0027d2  8880              LDRH     r0,[r0,#4]
0027d4  9908              LDR      r1,[sp,#0x20]
0027d6  4348              MULS     r0,r1,r0
0027d8  08c0              LSRS     r0,r0,#3
0027da  9008              STR      r0,[sp,#0x20]
;;;2364               PNG_COST_SHIFT;
;;;2365   
;;;2366            if (lmhi > PNG_HIMASK)
0027dc  4998              LDR      r1,|L1.10816|
0027de  9808              LDR      r0,[sp,#0x20]
0027e0  4288              CMP      r0,r1
0027e2  d903              BLS      |L1.10220|
;;;2367               lmins = PNG_MAXSUM;
0027e4  f06f4000          MVN      r0,#0x80000000
0027e8  900c              STR      r0,[sp,#0x30]
0027ea  e004              B        |L1.10230|
                  |L1.10220|
;;;2368            else
;;;2369               lmins = (lmhi << PNG_HISHIFT) + lmlo;
0027ec  e9dd0107          LDRD     r0,r1,[sp,#0x1c]
0027f0  eb002081          ADD      r0,r0,r1,LSL #10
0027f4  900c              STR      r0,[sp,#0x30]
                  |L1.10230|
;;;2370         }
0027f6  bf00              NOP      
                  |L1.10232|
;;;2371   #endif
;;;2372   
;;;2373         for (i = 0, rp = row_buf + 1, dp = png_ptr->up_row + 1,
0027f8  2000              MOVS     r0,#0
0027fa  900b              STR      r0,[sp,#0x2c]
0027fc  9816              LDR      r0,[sp,#0x58]
0027fe  1c40              ADDS     r0,r0,#1
002800  9010              STR      r0,[sp,#0x40]
002802  9819              LDR      r0,[sp,#0x64]
002804  f8d00234          LDR      r0,[r0,#0x234]
002808  1c40              ADDS     r0,r0,#1
00280a  900f              STR      r0,[sp,#0x3c]
;;;2374              pp = prev_row + 1; i < row_bytes; i++)
00280c  9818              LDR      r0,[sp,#0x60]
00280e  1c40              ADDS     r0,r0,#1
002810  900e              STR      r0,[sp,#0x38]
002812  e022              B        |L1.10330|
                  |L1.10260|
;;;2375         {
;;;2376            v = *dp++ = (png_byte)(((int)*rp++ - (int)*pp++) & 0xff);
002814  9810              LDR      r0,[sp,#0x40]
002816  f8101b01          LDRB     r1,[r0],#1
00281a  9010              STR      r0,[sp,#0x40]
00281c  980e              LDR      r0,[sp,#0x38]
00281e  f8102b01          LDRB     r2,[r0],#1
002822  900e              STR      r0,[sp,#0x38]
002824  1a88              SUBS     r0,r1,r2
002826  b2c0              UXTB     r0,r0
002828  990f              LDR      r1,[sp,#0x3c]
00282a  7008              STRB     r0,[r1,#0]
00282c  900a              STR      r0,[sp,#0x28]
00282e  980f              LDR      r0,[sp,#0x3c]
002830  1c40              ADDS     r0,r0,#1
002832  900f              STR      r0,[sp,#0x3c]
;;;2377   
;;;2378            sum += (v < 128) ? v : 256 - v;
002834  980a              LDR      r0,[sp,#0x28]
002836  2880              CMP      r0,#0x80
002838  da01              BGE      |L1.10302|
00283a  980a              LDR      r0,[sp,#0x28]
00283c  e002              B        |L1.10308|
                  |L1.10302|
00283e  980a              LDR      r0,[sp,#0x28]
002840  f5c07080          RSB      r0,r0,#0x100
                  |L1.10308|
002844  990d              LDR      r1,[sp,#0x34]
002846  4408              ADD      r0,r0,r1
002848  900d              STR      r0,[sp,#0x34]
;;;2379   
;;;2380            if (sum > lmins)  /* We are already worse, don't continue. */
00284a  e9dd100c          LDRD     r1,r0,[sp,#0x30]
00284e  4288              CMP      r0,r1
002850  d900              BLS      |L1.10324|
;;;2381               break;
002852  e006              B        |L1.10338|
                  |L1.10324|
002854  980b              LDR      r0,[sp,#0x2c]         ;2374
002856  1c40              ADDS     r0,r0,#1              ;2374
002858  900b              STR      r0,[sp,#0x2c]         ;2374
                  |L1.10330|
00285a  9912              LDR      r1,[sp,#0x48]         ;2374
00285c  980b              LDR      r0,[sp,#0x2c]         ;2374
00285e  4288              CMP      r0,r1                 ;2374
002860  d3d8              BCC      |L1.10260|
                  |L1.10338|
002862  bf00              NOP      
;;;2382         }
;;;2383   
;;;2384   #if defined(PNG_WRITE_WEIGHTED_FILTER_SUPPORTED)
;;;2385         if (png_ptr->heuristic_method == PNG_FILTER_HEURISTIC_WEIGHTED)
002864  9819              LDR      r0,[sp,#0x64]
002866  f8900338          LDRB     r0,[r0,#0x338]
00286a  2802              CMP      r0,#2
00286c  d14a              BNE      |L1.10500|
;;;2386         {
;;;2387            int j;
;;;2388            png_uint_32 sumhi, sumlo;
;;;2389            sumlo = sum & PNG_LOMASK;
00286e  980d              LDR      r0,[sp,#0x34]
002870  b280              UXTH     r0,r0
002872  9007              STR      r0,[sp,#0x1c]
;;;2390            sumhi = (sum >> PNG_HISHIFT) & PNG_HIMASK;
002874  4972              LDR      r1,|L1.10816|
002876  980d              LDR      r0,[sp,#0x34]
002878  ea012090          AND      r0,r1,r0,LSR #10
00287c  9008              STR      r0,[sp,#0x20]
;;;2391   
;;;2392            for (j = 0; j < num_p_filters; j++)
00287e  2000              MOVS     r0,#0
002880  9009              STR      r0,[sp,#0x24]
002882  e01d              B        |L1.10432|
                  |L1.10372|
;;;2393            {
;;;2394               if (png_ptr->prev_filters[j] == PNG_FILTER_VALUE_UP)
002884  9819              LDR      r0,[sp,#0x64]
002886  f8d0133c          LDR      r1,[r0,#0x33c]
00288a  9809              LDR      r0,[sp,#0x24]
00288c  5c08              LDRB     r0,[r1,r0]
00288e  2802              CMP      r0,#2
002890  d113              BNE      |L1.10426|
;;;2395               {
;;;2396                  sumlo = (sumlo * png_ptr->filter_weights[j]) >>
002892  9819              LDR      r0,[sp,#0x64]
002894  f8d01340          LDR      r1,[r0,#0x340]
002898  9809              LDR      r0,[sp,#0x24]
00289a  f8310010          LDRH     r0,[r1,r0,LSL #1]
00289e  9907              LDR      r1,[sp,#0x1c]
0028a0  4348              MULS     r0,r1,r0
0028a2  0a00              LSRS     r0,r0,#8
0028a4  9007              STR      r0,[sp,#0x1c]
;;;2397                     PNG_WEIGHT_SHIFT;
;;;2398                  sumhi = (sumhi * png_ptr->filter_weights[j]) >>
0028a6  9819              LDR      r0,[sp,#0x64]
0028a8  f8d01340          LDR      r1,[r0,#0x340]
0028ac  9809              LDR      r0,[sp,#0x24]
0028ae  f8310010          LDRH     r0,[r1,r0,LSL #1]
0028b2  9908              LDR      r1,[sp,#0x20]
0028b4  4348              MULS     r0,r1,r0
0028b6  0a00              LSRS     r0,r0,#8
0028b8  9008              STR      r0,[sp,#0x20]
                  |L1.10426|
0028ba  9809              LDR      r0,[sp,#0x24]         ;2392
0028bc  1c40              ADDS     r0,r0,#1              ;2392
0028be  9009              STR      r0,[sp,#0x24]         ;2392
                  |L1.10432|
0028c0  9911              LDR      r1,[sp,#0x44]         ;2392
0028c2  9809              LDR      r0,[sp,#0x24]         ;2392
0028c4  4288              CMP      r0,r1                 ;2392
0028c6  dbdd              BLT      |L1.10372|
;;;2399                     PNG_WEIGHT_SHIFT;
;;;2400               }
;;;2401            }
;;;2402   
;;;2403            sumlo = (sumlo * png_ptr->filter_costs[PNG_FILTER_VALUE_UP]) >>
0028c8  9819              LDR      r0,[sp,#0x64]
0028ca  f8d00348          LDR      r0,[r0,#0x348]
0028ce  8880              LDRH     r0,[r0,#4]
0028d0  9907              LDR      r1,[sp,#0x1c]
0028d2  4348              MULS     r0,r1,r0
0028d4  08c0              LSRS     r0,r0,#3
0028d6  9007              STR      r0,[sp,#0x1c]
;;;2404               PNG_COST_SHIFT;
;;;2405            sumhi = (sumhi * png_ptr->filter_costs[PNG_FILTER_VALUE_UP]) >>
0028d8  9819              LDR      r0,[sp,#0x64]
0028da  f8d00348          LDR      r0,[r0,#0x348]
0028de  8880              LDRH     r0,[r0,#4]
0028e0  9908              LDR      r1,[sp,#0x20]
0028e2  4348              MULS     r0,r1,r0
0028e4  08c0              LSRS     r0,r0,#3
0028e6  9008              STR      r0,[sp,#0x20]
;;;2406               PNG_COST_SHIFT;
;;;2407   
;;;2408            if (sumhi > PNG_HIMASK)
0028e8  4955              LDR      r1,|L1.10816|
0028ea  9808              LDR      r0,[sp,#0x20]
0028ec  4288              CMP      r0,r1
0028ee  d903              BLS      |L1.10488|
;;;2409               sum = PNG_MAXSUM;
0028f0  f06f4000          MVN      r0,#0x80000000
0028f4  900d              STR      r0,[sp,#0x34]
0028f6  e004              B        |L1.10498|
                  |L1.10488|
;;;2410            else
;;;2411               sum = (sumhi << PNG_HISHIFT) + sumlo;
0028f8  e9dd0107          LDRD     r0,r1,[sp,#0x1c]
0028fc  eb002081          ADD      r0,r0,r1,LSL #10
002900  900d              STR      r0,[sp,#0x34]
                  |L1.10498|
;;;2412         }
002902  bf00              NOP      
                  |L1.10500|
;;;2413   #endif
;;;2414   
;;;2415         if (sum < mins)
002904  9915              LDR      r1,[sp,#0x54]
002906  980d              LDR      r0,[sp,#0x34]
002908  4288              CMP      r0,r1
00290a  d205              BCS      |L1.10520|
;;;2416         {
;;;2417            mins = sum;
00290c  980d              LDR      r0,[sp,#0x34]
00290e  9015              STR      r0,[sp,#0x54]
;;;2418            best_row = png_ptr->up_row;
002910  9819              LDR      r0,[sp,#0x64]
002912  f8d00234          LDR      r0,[r0,#0x234]
002916  9017              STR      r0,[sp,#0x5c]
                  |L1.10520|
;;;2419         }
;;;2420      }
002918  bf00              NOP      
                  |L1.10522|
;;;2421   
;;;2422      /* avg filter */
;;;2423      if (filter_to_do == PNG_FILTER_AVG)
00291a  9813              LDR      r0,[sp,#0x4c]
00291c  2840              CMP      r0,#0x40
00291e  d151              BNE      |L1.10692|
;;;2424      {
;;;2425         png_bytep rp, dp, pp, lp;
;;;2426         png_uint_32 i;
;;;2427         for (i = 0, rp = row_buf + 1, dp = png_ptr->avg_row + 1,
002920  2000              MOVS     r0,#0
002922  900c              STR      r0,[sp,#0x30]
002924  9816              LDR      r0,[sp,#0x58]
002926  1c40              ADDS     r0,r0,#1
002928  9010              STR      r0,[sp,#0x40]
00292a  9819              LDR      r0,[sp,#0x64]
00292c  f8d00238          LDR      r0,[r0,#0x238]
002930  1c40              ADDS     r0,r0,#1
002932  900f              STR      r0,[sp,#0x3c]
;;;2428              pp = prev_row + 1; i < bpp; i++)
002934  9818              LDR      r0,[sp,#0x60]
002936  1c40              ADDS     r0,r0,#1
002938  900e              STR      r0,[sp,#0x38]
00293a  e017              B        |L1.10604|
                  |L1.10556|
;;;2429         {
;;;2430            *dp++ = (png_byte)(((int)*rp++ - ((int)*pp++ / 2)) & 0xff);
00293c  9810              LDR      r0,[sp,#0x40]
00293e  f8101b01          LDRB     r1,[r0],#1
002942  9010              STR      r0,[sp,#0x40]
002944  980e              LDR      r0,[sp,#0x38]
002946  7800              LDRB     r0,[r0,#0]
002948  900b              STR      r0,[sp,#0x2c]
00294a  980e              LDR      r0,[sp,#0x38]
00294c  1c40              ADDS     r0,r0,#1
00294e  900e              STR      r0,[sp,#0x38]
002950  980b              LDR      r0,[sp,#0x2c]
002952  eb0070d0          ADD      r0,r0,r0,LSR #31
002956  eba10060          SUB      r0,r1,r0,ASR #1
00295a  b2c1              UXTB     r1,r0
00295c  980f              LDR      r0,[sp,#0x3c]
00295e  7001              STRB     r1,[r0,#0]
002960  980f              LDR      r0,[sp,#0x3c]
002962  1c40              ADDS     r0,r0,#1
002964  900f              STR      r0,[sp,#0x3c]
002966  980c              LDR      r0,[sp,#0x30]         ;2428
002968  1c40              ADDS     r0,r0,#1              ;2428
00296a  900c              STR      r0,[sp,#0x30]         ;2428
                  |L1.10604|
00296c  9914              LDR      r1,[sp,#0x50]         ;2428
00296e  980c              LDR      r0,[sp,#0x30]         ;2428
002970  4288              CMP      r0,r1                 ;2428
002972  d3e3              BCC      |L1.10556|
;;;2431         }
;;;2432         for (lp = row_buf + 1; i < row_bytes; i++)
002974  9816              LDR      r0,[sp,#0x58]
002976  1c40              ADDS     r0,r0,#1
002978  900d              STR      r0,[sp,#0x34]
00297a  e01a              B        |L1.10674|
                  |L1.10620|
;;;2433         {
;;;2434            *dp++ = (png_byte)(((int)*rp++ - (((int)*pp++ + (int)*lp++) / 2))
00297c  980e              LDR      r0,[sp,#0x38]
00297e  f8101b01          LDRB     r1,[r0],#1
002982  900e              STR      r0,[sp,#0x38]
002984  980d              LDR      r0,[sp,#0x34]
002986  f8102b01          LDRB     r2,[r0],#1
00298a  900d              STR      r0,[sp,#0x34]
00298c  1888              ADDS     r0,r1,r2
00298e  900b              STR      r0,[sp,#0x2c]
002990  eb0070d0          ADD      r0,r0,r0,LSR #31
002994  1041              ASRS     r1,r0,#1
002996  9810              LDR      r0,[sp,#0x40]
002998  f8102b01          LDRB     r2,[r0],#1
00299c  9010              STR      r0,[sp,#0x40]
00299e  1a50              SUBS     r0,r2,r1
0029a0  b2c1              UXTB     r1,r0
0029a2  980f              LDR      r0,[sp,#0x3c]
0029a4  7001              STRB     r1,[r0,#0]
0029a6  980f              LDR      r0,[sp,#0x3c]
0029a8  1c40              ADDS     r0,r0,#1
0029aa  900f              STR      r0,[sp,#0x3c]
0029ac  980c              LDR      r0,[sp,#0x30]         ;2432
0029ae  1c40              ADDS     r0,r0,#1              ;2432
0029b0  900c              STR      r0,[sp,#0x30]         ;2432
                  |L1.10674|
0029b2  9912              LDR      r1,[sp,#0x48]         ;2432
0029b4  980c              LDR      r0,[sp,#0x30]         ;2432
0029b6  4288              CMP      r0,r1                 ;2432
0029b8  d3e0              BCC      |L1.10620|
;;;2435                    & 0xff);
;;;2436         }
;;;2437         best_row = png_ptr->avg_row;
0029ba  9819              LDR      r0,[sp,#0x64]
0029bc  f8d00238          LDR      r0,[r0,#0x238]
0029c0  9017              STR      r0,[sp,#0x5c]
                  |L1.10690|
;;;2438      }
0029c2  e121              B        |L1.11272|
                  |L1.10692|
;;;2439   
;;;2440      else if (filter_to_do & PNG_FILTER_AVG)
0029c4  9813              LDR      r0,[sp,#0x4c]
0029c6  f0000040          AND      r0,r0,#0x40
0029ca  2800              CMP      r0,#0
0029cc  d0f9              BEQ      |L1.10690|
;;;2441      {
;;;2442         png_bytep rp, dp, pp, lp;
;;;2443         png_uint_32 sum = 0, lmins = mins;
0029ce  2000              MOVS     r0,#0
0029d0  900c              STR      r0,[sp,#0x30]
0029d2  9815              LDR      r0,[sp,#0x54]
0029d4  900b              STR      r0,[sp,#0x2c]
;;;2444         png_uint_32 i;
;;;2445         int v;
;;;2446   
;;;2447   #if defined(PNG_WRITE_WEIGHTED_FILTER_SUPPORTED)
;;;2448         if (png_ptr->heuristic_method == PNG_FILTER_HEURISTIC_WEIGHTED)
0029d6  9819              LDR      r0,[sp,#0x64]
0029d8  f8900338          LDRB     r0,[r0,#0x338]
0029dc  2802              CMP      r0,#2
0029de  d14e              BNE      |L1.10878|
;;;2449         {
;;;2450            int j;
;;;2451            png_uint_32 lmhi, lmlo;
;;;2452            lmlo = lmins & PNG_LOMASK;
0029e0  980b              LDR      r0,[sp,#0x2c]
0029e2  b280              UXTH     r0,r0
0029e4  9006              STR      r0,[sp,#0x18]
;;;2453            lmhi = (lmins >> PNG_HISHIFT) & PNG_HIMASK;
0029e6  4916              LDR      r1,|L1.10816|
0029e8  980b              LDR      r0,[sp,#0x2c]
0029ea  ea012090          AND      r0,r1,r0,LSR #10
0029ee  9007              STR      r0,[sp,#0x1c]
;;;2454   
;;;2455            for (j = 0; j < num_p_filters; j++)
0029f0  2000              MOVS     r0,#0
0029f2  9008              STR      r0,[sp,#0x20]
0029f4  e01d              B        |L1.10802|
                  |L1.10742|
;;;2456            {
;;;2457               if (png_ptr->prev_filters[j] == PNG_FILTER_VALUE_AVG)
0029f6  9819              LDR      r0,[sp,#0x64]
0029f8  f8d0133c          LDR      r1,[r0,#0x33c]
0029fc  9808              LDR      r0,[sp,#0x20]
0029fe  5c08              LDRB     r0,[r1,r0]
002a00  2803              CMP      r0,#3
002a02  d113              BNE      |L1.10796|
;;;2458               {
;;;2459                  lmlo = (lmlo * png_ptr->inv_filter_weights[j]) >>
002a04  9819              LDR      r0,[sp,#0x64]
002a06  f8d01344          LDR      r1,[r0,#0x344]
002a0a  9808              LDR      r0,[sp,#0x20]
002a0c  f8310010          LDRH     r0,[r1,r0,LSL #1]
002a10  9906              LDR      r1,[sp,#0x18]
002a12  4348              MULS     r0,r1,r0
002a14  0a00              LSRS     r0,r0,#8
002a16  9006              STR      r0,[sp,#0x18]
;;;2460                     PNG_WEIGHT_SHIFT;
;;;2461                  lmhi = (lmhi * png_ptr->inv_filter_weights[j]) >>
002a18  9819              LDR      r0,[sp,#0x64]
002a1a  f8d01344          LDR      r1,[r0,#0x344]
002a1e  9808              LDR      r0,[sp,#0x20]
002a20  f8310010          LDRH     r0,[r1,r0,LSL #1]
002a24  9907              LDR      r1,[sp,#0x1c]
002a26  4348              MULS     r0,r1,r0
002a28  0a00              LSRS     r0,r0,#8
002a2a  9007              STR      r0,[sp,#0x1c]
                  |L1.10796|
002a2c  9808              LDR      r0,[sp,#0x20]         ;2455
002a2e  1c40              ADDS     r0,r0,#1              ;2455
002a30  9008              STR      r0,[sp,#0x20]         ;2455
                  |L1.10802|
002a32  9911              LDR      r1,[sp,#0x44]         ;2455
002a34  9808              LDR      r0,[sp,#0x20]         ;2455
002a36  4288              CMP      r0,r1                 ;2455
002a38  dbdd              BLT      |L1.10742|
;;;2462                     PNG_WEIGHT_SHIFT;
;;;2463               }
;;;2464            }
;;;2465   
;;;2466            lmlo = (lmlo * png_ptr->inv_filter_costs[PNG_FILTER_VALUE_AVG]) >>
002a3a  9819              LDR      r0,[sp,#0x64]
002a3c  e002              B        |L1.10820|
002a3e  0000              DCW      0x0000
                  |L1.10816|
                          DCD      0x003fffc0
                  |L1.10820|
002a44  f8d0034c          LDR      r0,[r0,#0x34c]
002a48  88c0              LDRH     r0,[r0,#6]
002a4a  9906              LDR      r1,[sp,#0x18]
002a4c  4348              MULS     r0,r1,r0
002a4e  08c0              LSRS     r0,r0,#3
002a50  9006              STR      r0,[sp,#0x18]
;;;2467               PNG_COST_SHIFT;
;;;2468            lmhi = (lmhi * png_ptr->inv_filter_costs[PNG_FILTER_VALUE_AVG]) >>
002a52  9819              LDR      r0,[sp,#0x64]
002a54  f8d0034c          LDR      r0,[r0,#0x34c]
002a58  88c0              LDRH     r0,[r0,#6]
002a5a  9907              LDR      r1,[sp,#0x1c]
002a5c  4348              MULS     r0,r1,r0
002a5e  08c0              LSRS     r0,r0,#3
002a60  9007              STR      r0,[sp,#0x1c]
;;;2469               PNG_COST_SHIFT;
;;;2470   
;;;2471            if (lmhi > PNG_HIMASK)
002a62  49fa              LDR      r1,|L1.11852|
002a64  9807              LDR      r0,[sp,#0x1c]
002a66  4288              CMP      r0,r1
002a68  d903              BLS      |L1.10866|
;;;2472               lmins = PNG_MAXSUM;
002a6a  f06f4000          MVN      r0,#0x80000000
002a6e  900b              STR      r0,[sp,#0x2c]
002a70  e004              B        |L1.10876|
                  |L1.10866|
;;;2473            else
;;;2474               lmins = (lmhi << PNG_HISHIFT) + lmlo;
002a72  e9dd0106          LDRD     r0,r1,[sp,#0x18]
002a76  eb002081          ADD      r0,r0,r1,LSL #10
002a7a  900b              STR      r0,[sp,#0x2c]
                  |L1.10876|
;;;2475         }
002a7c  bf00              NOP      
                  |L1.10878|
;;;2476   #endif
;;;2477   
;;;2478         for (i = 0, rp = row_buf + 1, dp = png_ptr->avg_row + 1,
002a7e  2000              MOVS     r0,#0
002a80  900a              STR      r0,[sp,#0x28]
002a82  9816              LDR      r0,[sp,#0x58]
002a84  1c40              ADDS     r0,r0,#1
002a86  9010              STR      r0,[sp,#0x40]
002a88  9819              LDR      r0,[sp,#0x64]
002a8a  f8d00238          LDR      r0,[r0,#0x238]
002a8e  1c40              ADDS     r0,r0,#1
002a90  900f              STR      r0,[sp,#0x3c]
;;;2479              pp = prev_row + 1; i < bpp; i++)
002a92  9818              LDR      r0,[sp,#0x60]
002a94  1c40              ADDS     r0,r0,#1
002a96  900e              STR      r0,[sp,#0x38]
002a98  e023              B        |L1.10978|
                  |L1.10906|
;;;2480         {
;;;2481            v = *dp++ = (png_byte)(((int)*rp++ - ((int)*pp++ / 2)) & 0xff);
002a9a  9810              LDR      r0,[sp,#0x40]
002a9c  f8101b01          LDRB     r1,[r0],#1
002aa0  9010              STR      r0,[sp,#0x40]
002aa2  980e              LDR      r0,[sp,#0x38]
002aa4  7800              LDRB     r0,[r0,#0]
002aa6  9008              STR      r0,[sp,#0x20]
002aa8  980e              LDR      r0,[sp,#0x38]
002aaa  1c40              ADDS     r0,r0,#1
002aac  900e              STR      r0,[sp,#0x38]
002aae  9808              LDR      r0,[sp,#0x20]
002ab0  eb0070d0          ADD      r0,r0,r0,LSR #31
002ab4  eba10060          SUB      r0,r1,r0,ASR #1
002ab8  b2c0              UXTB     r0,r0
002aba  990f              LDR      r1,[sp,#0x3c]
002abc  7008              STRB     r0,[r1,#0]
002abe  9009              STR      r0,[sp,#0x24]
002ac0  980f              LDR      r0,[sp,#0x3c]
002ac2  1c40              ADDS     r0,r0,#1
002ac4  900f              STR      r0,[sp,#0x3c]
;;;2482   
;;;2483            sum += (v < 128) ? v : 256 - v;
002ac6  9809              LDR      r0,[sp,#0x24]
002ac8  2880              CMP      r0,#0x80
002aca  da01              BGE      |L1.10960|
002acc  9809              LDR      r0,[sp,#0x24]
002ace  e002              B        |L1.10966|
                  |L1.10960|
002ad0  9809              LDR      r0,[sp,#0x24]
002ad2  f5c07080          RSB      r0,r0,#0x100
                  |L1.10966|
002ad6  990c              LDR      r1,[sp,#0x30]
002ad8  4408              ADD      r0,r0,r1
002ada  900c              STR      r0,[sp,#0x30]
002adc  980a              LDR      r0,[sp,#0x28]         ;2479
002ade  1c40              ADDS     r0,r0,#1              ;2479
002ae0  900a              STR      r0,[sp,#0x28]         ;2479
                  |L1.10978|
002ae2  9914              LDR      r1,[sp,#0x50]         ;2479
002ae4  980a              LDR      r0,[sp,#0x28]         ;2479
002ae6  4288              CMP      r0,r1                 ;2479
002ae8  d3d7              BCC      |L1.10906|
;;;2484         }
;;;2485         for (lp = row_buf + 1; i < row_bytes; i++)
002aea  9816              LDR      r0,[sp,#0x58]
002aec  1c40              ADDS     r0,r0,#1
002aee  900d              STR      r0,[sp,#0x34]
002af0  e02b              B        |L1.11082|
                  |L1.10994|
;;;2486         {
;;;2487            v = *dp++ =
002af2  980e              LDR      r0,[sp,#0x38]
002af4  f8101b01          LDRB     r1,[r0],#1
002af8  900e              STR      r0,[sp,#0x38]
002afa  980d              LDR      r0,[sp,#0x34]
002afc  f8102b01          LDRB     r2,[r0],#1
002b00  900d              STR      r0,[sp,#0x34]
002b02  1888              ADDS     r0,r1,r2
002b04  9008              STR      r0,[sp,#0x20]
002b06  eb0070d0          ADD      r0,r0,r0,LSR #31
002b0a  1041              ASRS     r1,r0,#1
002b0c  9810              LDR      r0,[sp,#0x40]
002b0e  f8102b01          LDRB     r2,[r0],#1
002b12  9010              STR      r0,[sp,#0x40]
002b14  1a50              SUBS     r0,r2,r1
002b16  b2c1              UXTB     r1,r0
002b18  980f              LDR      r0,[sp,#0x3c]
002b1a  7001              STRB     r1,[r0,#0]
002b1c  9109              STR      r1,[sp,#0x24]
002b1e  980f              LDR      r0,[sp,#0x3c]
002b20  1c40              ADDS     r0,r0,#1
002b22  900f              STR      r0,[sp,#0x3c]
;;;2488             (png_byte)(((int)*rp++ - (((int)*pp++ + (int)*lp++) / 2)) & 0xff);
;;;2489   
;;;2490            sum += (v < 128) ? v : 256 - v;
002b24  9809              LDR      r0,[sp,#0x24]
002b26  2880              CMP      r0,#0x80
002b28  da01              BGE      |L1.11054|
002b2a  9809              LDR      r0,[sp,#0x24]
002b2c  e002              B        |L1.11060|
                  |L1.11054|
002b2e  9809              LDR      r0,[sp,#0x24]
002b30  f5c07080          RSB      r0,r0,#0x100
                  |L1.11060|
002b34  990c              LDR      r1,[sp,#0x30]
002b36  4408              ADD      r0,r0,r1
002b38  900c              STR      r0,[sp,#0x30]
;;;2491   
;;;2492            if (sum > lmins)  /* We are already worse, don't continue. */
002b3a  e9dd100b          LDRD     r1,r0,[sp,#0x2c]
002b3e  4288              CMP      r0,r1
002b40  d900              BLS      |L1.11076|
;;;2493               break;
002b42  e006              B        |L1.11090|
                  |L1.11076|
002b44  980a              LDR      r0,[sp,#0x28]         ;2485
002b46  1c40              ADDS     r0,r0,#1              ;2485
002b48  900a              STR      r0,[sp,#0x28]         ;2485
                  |L1.11082|
002b4a  9912              LDR      r1,[sp,#0x48]         ;2485
002b4c  980a              LDR      r0,[sp,#0x28]         ;2485
002b4e  4288              CMP      r0,r1                 ;2485
002b50  d3cf              BCC      |L1.10994|
                  |L1.11090|
002b52  bf00              NOP      
;;;2494         }
;;;2495   
;;;2496   #if defined(PNG_WRITE_WEIGHTED_FILTER_SUPPORTED)
;;;2497         if (png_ptr->heuristic_method == PNG_FILTER_HEURISTIC_WEIGHTED)
002b54  9819              LDR      r0,[sp,#0x64]
002b56  f8900338          LDRB     r0,[r0,#0x338]
002b5a  2802              CMP      r0,#2
002b5c  d149              BNE      |L1.11250|
;;;2498         {
;;;2499            int j;
;;;2500            png_uint_32 sumhi, sumlo;
;;;2501            sumlo = sum & PNG_LOMASK;
002b5e  980c              LDR      r0,[sp,#0x30]
002b60  b280              UXTH     r0,r0
002b62  9006              STR      r0,[sp,#0x18]
;;;2502            sumhi = (sum >> PNG_HISHIFT) & PNG_HIMASK;
002b64  49b9              LDR      r1,|L1.11852|
002b66  980c              LDR      r0,[sp,#0x30]
002b68  ea012090          AND      r0,r1,r0,LSR #10
002b6c  9007              STR      r0,[sp,#0x1c]
;;;2503   
;;;2504            for (j = 0; j < num_p_filters; j++)
002b6e  2000              MOVS     r0,#0
002b70  9008              STR      r0,[sp,#0x20]
002b72  e01c              B        |L1.11182|
                  |L1.11124|
;;;2505            {
;;;2506               if (png_ptr->prev_filters[j] == PNG_FILTER_VALUE_NONE)
002b74  9819              LDR      r0,[sp,#0x64]
002b76  f8d0133c          LDR      r1,[r0,#0x33c]
002b7a  9808              LDR      r0,[sp,#0x20]
002b7c  5c08              LDRB     r0,[r1,r0]
002b7e  b998              CBNZ     r0,|L1.11176|
;;;2507               {
;;;2508                  sumlo = (sumlo * png_ptr->filter_weights[j]) >>
002b80  9819              LDR      r0,[sp,#0x64]
002b82  f8d01340          LDR      r1,[r0,#0x340]
002b86  9808              LDR      r0,[sp,#0x20]
002b88  f8310010          LDRH     r0,[r1,r0,LSL #1]
002b8c  9906              LDR      r1,[sp,#0x18]
002b8e  4348              MULS     r0,r1,r0
002b90  0a00              LSRS     r0,r0,#8
002b92  9006              STR      r0,[sp,#0x18]
;;;2509                     PNG_WEIGHT_SHIFT;
;;;2510                  sumhi = (sumhi * png_ptr->filter_weights[j]) >>
002b94  9819              LDR      r0,[sp,#0x64]
002b96  f8d01340          LDR      r1,[r0,#0x340]
002b9a  9808              LDR      r0,[sp,#0x20]
002b9c  f8310010          LDRH     r0,[r1,r0,LSL #1]
002ba0  9907              LDR      r1,[sp,#0x1c]
002ba2  4348              MULS     r0,r1,r0
002ba4  0a00              LSRS     r0,r0,#8
002ba6  9007              STR      r0,[sp,#0x1c]
                  |L1.11176|
002ba8  9808              LDR      r0,[sp,#0x20]         ;2504
002baa  1c40              ADDS     r0,r0,#1              ;2504
002bac  9008              STR      r0,[sp,#0x20]         ;2504
                  |L1.11182|
002bae  9911              LDR      r1,[sp,#0x44]         ;2504
002bb0  9808              LDR      r0,[sp,#0x20]         ;2504
002bb2  4288              CMP      r0,r1                 ;2504
002bb4  dbde              BLT      |L1.11124|
;;;2511                     PNG_WEIGHT_SHIFT;
;;;2512               }
;;;2513            }
;;;2514   
;;;2515            sumlo = (sumlo * png_ptr->filter_costs[PNG_FILTER_VALUE_AVG]) >>
002bb6  9819              LDR      r0,[sp,#0x64]
002bb8  f8d00348          LDR      r0,[r0,#0x348]
002bbc  88c0              LDRH     r0,[r0,#6]
002bbe  9906              LDR      r1,[sp,#0x18]
002bc0  4348              MULS     r0,r1,r0
002bc2  08c0              LSRS     r0,r0,#3
002bc4  9006              STR      r0,[sp,#0x18]
;;;2516               PNG_COST_SHIFT;
;;;2517            sumhi = (sumhi * png_ptr->filter_costs[PNG_FILTER_VALUE_AVG]) >>
002bc6  9819              LDR      r0,[sp,#0x64]
002bc8  f8d00348          LDR      r0,[r0,#0x348]
002bcc  88c0              LDRH     r0,[r0,#6]
002bce  9907              LDR      r1,[sp,#0x1c]
002bd0  4348              MULS     r0,r1,r0
002bd2  08c0              LSRS     r0,r0,#3
002bd4  9007              STR      r0,[sp,#0x1c]
;;;2518               PNG_COST_SHIFT;
;;;2519   
;;;2520            if (sumhi > PNG_HIMASK)
002bd6  499d              LDR      r1,|L1.11852|
002bd8  9807              LDR      r0,[sp,#0x1c]
002bda  4288              CMP      r0,r1
002bdc  d903              BLS      |L1.11238|
;;;2521               sum = PNG_MAXSUM;
002bde  f06f4000          MVN      r0,#0x80000000
002be2  900c              STR      r0,[sp,#0x30]
002be4  e004              B        |L1.11248|
                  |L1.11238|
;;;2522            else
;;;2523               sum = (sumhi << PNG_HISHIFT) + sumlo;
002be6  e9dd0106          LDRD     r0,r1,[sp,#0x18]
002bea  eb002081          ADD      r0,r0,r1,LSL #10
002bee  900c              STR      r0,[sp,#0x30]
                  |L1.11248|
;;;2524         }
002bf0  bf00              NOP      
                  |L1.11250|
;;;2525   #endif
;;;2526   
;;;2527         if (sum < mins)
002bf2  9915              LDR      r1,[sp,#0x54]
002bf4  980c              LDR      r0,[sp,#0x30]
002bf6  4288              CMP      r0,r1
002bf8  d205              BCS      |L1.11270|
;;;2528         {
;;;2529            mins = sum;
002bfa  980c              LDR      r0,[sp,#0x30]
002bfc  9015              STR      r0,[sp,#0x54]
;;;2530            best_row = png_ptr->avg_row;
002bfe  9819              LDR      r0,[sp,#0x64]
002c00  f8d00238          LDR      r0,[r0,#0x238]
002c04  9017              STR      r0,[sp,#0x5c]
                  |L1.11270|
;;;2531         }
;;;2532      }
002c06  bf00              NOP      
                  |L1.11272|
;;;2533   
;;;2534      /* Paeth filter */
;;;2535      if (filter_to_do == PNG_FILTER_PAETH)
002c08  9813              LDR      r0,[sp,#0x4c]
002c0a  2880              CMP      r0,#0x80
002c0c  d172              BNE      |L1.11508|
;;;2536      {
;;;2537         png_bytep rp, dp, pp, cp, lp;
;;;2538         png_uint_32 i;
;;;2539         for (i = 0, rp = row_buf + 1, dp = png_ptr->paeth_row + 1,
002c0e  2000              MOVS     r0,#0
002c10  900b              STR      r0,[sp,#0x2c]
002c12  9816              LDR      r0,[sp,#0x58]
002c14  1c40              ADDS     r0,r0,#1
002c16  9010              STR      r0,[sp,#0x40]
002c18  9819              LDR      r0,[sp,#0x64]
002c1a  f8d0023c          LDR      r0,[r0,#0x23c]
002c1e  1c40              ADDS     r0,r0,#1
002c20  900f              STR      r0,[sp,#0x3c]
;;;2540              pp = prev_row + 1; i < bpp; i++)
002c22  9818              LDR      r0,[sp,#0x60]
002c24  1c40              ADDS     r0,r0,#1
002c26  900e              STR      r0,[sp,#0x38]
002c28  e011              B        |L1.11342|
                  |L1.11306|
;;;2541         {
;;;2542            *dp++ = (png_byte)(((int)*rp++ - (int)*pp++) & 0xff);
002c2a  9810              LDR      r0,[sp,#0x40]
002c2c  f8101b01          LDRB     r1,[r0],#1
002c30  9010              STR      r0,[sp,#0x40]
002c32  980e              LDR      r0,[sp,#0x38]
002c34  f8102b01          LDRB     r2,[r0],#1
002c38  900e              STR      r0,[sp,#0x38]
002c3a  1a88              SUBS     r0,r1,r2
002c3c  b2c1              UXTB     r1,r0
002c3e  980f              LDR      r0,[sp,#0x3c]
002c40  7001              STRB     r1,[r0,#0]
002c42  980f              LDR      r0,[sp,#0x3c]
002c44  1c40              ADDS     r0,r0,#1
002c46  900f              STR      r0,[sp,#0x3c]
002c48  980b              LDR      r0,[sp,#0x2c]         ;2540
002c4a  1c40              ADDS     r0,r0,#1              ;2540
002c4c  900b              STR      r0,[sp,#0x2c]         ;2540
                  |L1.11342|
002c4e  9914              LDR      r1,[sp,#0x50]         ;2540
002c50  980b              LDR      r0,[sp,#0x2c]         ;2540
002c52  4288              CMP      r0,r1                 ;2540
002c54  d3e9              BCC      |L1.11306|
;;;2543         }
;;;2544   
;;;2545         for (lp = row_buf + 1, cp = prev_row + 1; i < row_bytes; i++)
002c56  9816              LDR      r0,[sp,#0x58]
002c58  1c40              ADDS     r0,r0,#1
002c5a  900c              STR      r0,[sp,#0x30]
002c5c  9818              LDR      r0,[sp,#0x60]
002c5e  1c40              ADDS     r0,r0,#1
002c60  900d              STR      r0,[sp,#0x34]
002c62  e059              B        |L1.11544|
                  |L1.11364|
;;;2546         {
;;;2547            int a, b, c, pa, pb, pc, p;
;;;2548   
;;;2549            b = *pp++;
002c64  980e              LDR      r0,[sp,#0x38]
002c66  7800              LDRB     r0,[r0,#0]
002c68  9009              STR      r0,[sp,#0x24]
002c6a  980e              LDR      r0,[sp,#0x38]
002c6c  1c40              ADDS     r0,r0,#1
002c6e  900e              STR      r0,[sp,#0x38]
;;;2550            c = *cp++;
002c70  980d              LDR      r0,[sp,#0x34]
002c72  7800              LDRB     r0,[r0,#0]
002c74  9008              STR      r0,[sp,#0x20]
002c76  980d              LDR      r0,[sp,#0x34]
002c78  1c40              ADDS     r0,r0,#1
002c7a  900d              STR      r0,[sp,#0x34]
;;;2551            a = *lp++;
002c7c  980c              LDR      r0,[sp,#0x30]
002c7e  7800              LDRB     r0,[r0,#0]
002c80  900a              STR      r0,[sp,#0x28]
002c82  980c              LDR      r0,[sp,#0x30]
002c84  1c40              ADDS     r0,r0,#1
002c86  900c              STR      r0,[sp,#0x30]
;;;2552   
;;;2553            p = b - c;
002c88  e9dd1008          LDRD     r1,r0,[sp,#0x20]
002c8c  1a40              SUBS     r0,r0,r1
002c8e  9004              STR      r0,[sp,#0x10]
;;;2554            pc = a - c;
002c90  9908              LDR      r1,[sp,#0x20]
002c92  980a              LDR      r0,[sp,#0x28]
002c94  1a40              SUBS     r0,r0,r1
002c96  9005              STR      r0,[sp,#0x14]
;;;2555   
;;;2556   #ifdef PNG_USE_ABS
;;;2557            pa = abs(p);
;;;2558            pb = abs(pc);
;;;2559            pc = abs(p + pc);
;;;2560   #else
;;;2561            pa = p < 0 ? -p : p;
002c98  9804              LDR      r0,[sp,#0x10]
002c9a  2800              CMP      r0,#0
002c9c  da02              BGE      |L1.11428|
002c9e  9804              LDR      r0,[sp,#0x10]
002ca0  4240              RSBS     r0,r0,#0
002ca2  e000              B        |L1.11430|
                  |L1.11428|
002ca4  9804              LDR      r0,[sp,#0x10]
                  |L1.11430|
002ca6  9007              STR      r0,[sp,#0x1c]
;;;2562            pb = pc < 0 ? -pc : pc;
002ca8  9805              LDR      r0,[sp,#0x14]
002caa  2800              CMP      r0,#0
002cac  da02              BGE      |L1.11444|
002cae  9805              LDR      r0,[sp,#0x14]
002cb0  4240              RSBS     r0,r0,#0
002cb2  e000              B        |L1.11446|
                  |L1.11444|
002cb4  9805              LDR      r0,[sp,#0x14]
                  |L1.11446|
002cb6  9006              STR      r0,[sp,#0x18]
;;;2563            pc = (p + pc) < 0 ? -(p + pc) : p + pc;
002cb8  e9dd0104          LDRD     r0,r1,[sp,#0x10]
002cbc  4408              ADD      r0,r0,r1
002cbe  2800              CMP      r0,#0
002cc0  da04              BGE      |L1.11468|
002cc2  e9dd0104          LDRD     r0,r1,[sp,#0x10]
002cc6  4408              ADD      r0,r0,r1
002cc8  4240              RSBS     r0,r0,#0
002cca  e002              B        |L1.11474|
                  |L1.11468|
002ccc  e9dd0104          LDRD     r0,r1,[sp,#0x10]
002cd0  4408              ADD      r0,r0,r1
                  |L1.11474|
002cd2  9005              STR      r0,[sp,#0x14]
;;;2564   #endif
;;;2565   
;;;2566            p = (pa <= pb && pa <=pc) ? a : (pb <= pc) ? b : c;
002cd4  e9dd1006          LDRD     r1,r0,[sp,#0x18]
002cd8  4288              CMP      r0,r1
002cda  dc05              BGT      |L1.11496|
002cdc  9905              LDR      r1,[sp,#0x14]
002cde  9807              LDR      r0,[sp,#0x1c]
002ce0  4288              CMP      r0,r1
002ce2  dc01              BGT      |L1.11496|
002ce4  980a              LDR      r0,[sp,#0x28]
002ce6  e007              B        |L1.11512|
                  |L1.11496|
002ce8  e9dd1005          LDRD     r1,r0,[sp,#0x14]
002cec  4288              CMP      r0,r1
002cee  dc02              BGT      |L1.11510|
002cf0  9809              LDR      r0,[sp,#0x24]
002cf2  e001              B        |L1.11512|
                  |L1.11508|
002cf4  e019              B        |L1.11562|
                  |L1.11510|
002cf6  9808              LDR      r0,[sp,#0x20]
                  |L1.11512|
002cf8  9004              STR      r0,[sp,#0x10]
;;;2567   
;;;2568            *dp++ = (png_byte)(((int)*rp++ - p) & 0xff);
002cfa  9810              LDR      r0,[sp,#0x40]
002cfc  f8101b01          LDRB     r1,[r0],#1
002d00  9010              STR      r0,[sp,#0x40]
002d02  9804              LDR      r0,[sp,#0x10]
002d04  1a08              SUBS     r0,r1,r0
002d06  b2c1              UXTB     r1,r0
002d08  980f              LDR      r0,[sp,#0x3c]
002d0a  7001              STRB     r1,[r0,#0]
002d0c  980f              LDR      r0,[sp,#0x3c]
002d0e  1c40              ADDS     r0,r0,#1
002d10  900f              STR      r0,[sp,#0x3c]
002d12  980b              LDR      r0,[sp,#0x2c]         ;2545
002d14  1c40              ADDS     r0,r0,#1              ;2545
002d16  900b              STR      r0,[sp,#0x2c]         ;2545
                  |L1.11544|
002d18  9912              LDR      r1,[sp,#0x48]         ;2545
002d1a  980b              LDR      r0,[sp,#0x2c]         ;2545
002d1c  4288              CMP      r0,r1                 ;2545
002d1e  d3a1              BCC      |L1.11364|
;;;2569         }
;;;2570         best_row = png_ptr->paeth_row;
002d20  9819              LDR      r0,[sp,#0x64]
002d22  f8d0023c          LDR      r0,[r0,#0x23c]
002d26  9017              STR      r0,[sp,#0x5c]
                  |L1.11560|
;;;2571      }
002d28  e15a              B        |L1.12256|
                  |L1.11562|
;;;2572   
;;;2573      else if (filter_to_do & PNG_FILTER_PAETH)
002d2a  9813              LDR      r0,[sp,#0x4c]
002d2c  f0000080          AND      r0,r0,#0x80
002d30  2800              CMP      r0,#0
002d32  d0f9              BEQ      |L1.11560|
;;;2574      {
;;;2575         png_bytep rp, dp, pp, cp, lp;
;;;2576         png_uint_32 sum = 0, lmins = mins;
002d34  2000              MOVS     r0,#0
002d36  900b              STR      r0,[sp,#0x2c]
002d38  9815              LDR      r0,[sp,#0x54]
002d3a  900a              STR      r0,[sp,#0x28]
;;;2577         png_uint_32 i;
;;;2578         int v;
;;;2579   
;;;2580   #if defined(PNG_WRITE_WEIGHTED_FILTER_SUPPORTED)
;;;2581         if (png_ptr->heuristic_method == PNG_FILTER_HEURISTIC_WEIGHTED)
002d3c  9819              LDR      r0,[sp,#0x64]
002d3e  f8900338          LDRB     r0,[r0,#0x338]
002d42  2802              CMP      r0,#2
002d44  d14a              BNE      |L1.11740|
;;;2582         {
;;;2583            int j;
;;;2584            png_uint_32 lmhi, lmlo;
;;;2585            lmlo = lmins & PNG_LOMASK;
002d46  980a              LDR      r0,[sp,#0x28]
002d48  b280              UXTH     r0,r0
002d4a  9005              STR      r0,[sp,#0x14]
;;;2586            lmhi = (lmins >> PNG_HISHIFT) & PNG_HIMASK;
002d4c  493f              LDR      r1,|L1.11852|
002d4e  980a              LDR      r0,[sp,#0x28]
002d50  ea012090          AND      r0,r1,r0,LSR #10
002d54  9006              STR      r0,[sp,#0x18]
;;;2587   
;;;2588            for (j = 0; j < num_p_filters; j++)
002d56  2000              MOVS     r0,#0
002d58  9007              STR      r0,[sp,#0x1c]
002d5a  e01d              B        |L1.11672|
                  |L1.11612|
;;;2589            {
;;;2590               if (png_ptr->prev_filters[j] == PNG_FILTER_VALUE_PAETH)
002d5c  9819              LDR      r0,[sp,#0x64]
002d5e  f8d0133c          LDR      r1,[r0,#0x33c]
002d62  9807              LDR      r0,[sp,#0x1c]
002d64  5c08              LDRB     r0,[r1,r0]
002d66  2804              CMP      r0,#4
002d68  d113              BNE      |L1.11666|
;;;2591               {
;;;2592                  lmlo = (lmlo * png_ptr->inv_filter_weights[j]) >>
002d6a  9819              LDR      r0,[sp,#0x64]
002d6c  f8d01344          LDR      r1,[r0,#0x344]
002d70  9807              LDR      r0,[sp,#0x1c]
002d72  f8310010          LDRH     r0,[r1,r0,LSL #1]
002d76  9905              LDR      r1,[sp,#0x14]
002d78  4348              MULS     r0,r1,r0
002d7a  0a00              LSRS     r0,r0,#8
002d7c  9005              STR      r0,[sp,#0x14]
;;;2593                     PNG_WEIGHT_SHIFT;
;;;2594                  lmhi = (lmhi * png_ptr->inv_filter_weights[j]) >>
002d7e  9819              LDR      r0,[sp,#0x64]
002d80  f8d01344          LDR      r1,[r0,#0x344]
002d84  9807              LDR      r0,[sp,#0x1c]
002d86  f8310010          LDRH     r0,[r1,r0,LSL #1]
002d8a  9906              LDR      r1,[sp,#0x18]
002d8c  4348              MULS     r0,r1,r0
002d8e  0a00              LSRS     r0,r0,#8
002d90  9006              STR      r0,[sp,#0x18]
                  |L1.11666|
002d92  9807              LDR      r0,[sp,#0x1c]         ;2588
002d94  1c40              ADDS     r0,r0,#1              ;2588
002d96  9007              STR      r0,[sp,#0x1c]         ;2588
                  |L1.11672|
002d98  9911              LDR      r1,[sp,#0x44]         ;2588
002d9a  9807              LDR      r0,[sp,#0x1c]         ;2588
002d9c  4288              CMP      r0,r1                 ;2588
002d9e  dbdd              BLT      |L1.11612|
;;;2595                     PNG_WEIGHT_SHIFT;
;;;2596               }
;;;2597            }
;;;2598   
;;;2599            lmlo = (lmlo * png_ptr->inv_filter_costs[PNG_FILTER_VALUE_PAETH]) >>
002da0  9819              LDR      r0,[sp,#0x64]
002da2  f8d0034c          LDR      r0,[r0,#0x34c]
002da6  8900              LDRH     r0,[r0,#8]
002da8  9905              LDR      r1,[sp,#0x14]
002daa  4348              MULS     r0,r1,r0
002dac  08c0              LSRS     r0,r0,#3
002dae  9005              STR      r0,[sp,#0x14]
;;;2600               PNG_COST_SHIFT;
;;;2601            lmhi = (lmhi * png_ptr->inv_filter_costs[PNG_FILTER_VALUE_PAETH]) >>
002db0  9819              LDR      r0,[sp,#0x64]
002db2  f8d0034c          LDR      r0,[r0,#0x34c]
002db6  8900              LDRH     r0,[r0,#8]
002db8  9906              LDR      r1,[sp,#0x18]
002dba  4348              MULS     r0,r1,r0
002dbc  08c0              LSRS     r0,r0,#3
002dbe  9006              STR      r0,[sp,#0x18]
;;;2602               PNG_COST_SHIFT;
;;;2603   
;;;2604            if (lmhi > PNG_HIMASK)
002dc0  4922              LDR      r1,|L1.11852|
002dc2  9806              LDR      r0,[sp,#0x18]
002dc4  4288              CMP      r0,r1
002dc6  d903              BLS      |L1.11728|
;;;2605               lmins = PNG_MAXSUM;
002dc8  f06f4000          MVN      r0,#0x80000000
002dcc  900a              STR      r0,[sp,#0x28]
002dce  e004              B        |L1.11738|
                  |L1.11728|
;;;2606            else
;;;2607               lmins = (lmhi << PNG_HISHIFT) + lmlo;
002dd0  e9dd0105          LDRD     r0,r1,[sp,#0x14]
002dd4  eb002081          ADD      r0,r0,r1,LSL #10
002dd8  900a              STR      r0,[sp,#0x28]
                  |L1.11738|
;;;2608         }
002dda  bf00              NOP      
                  |L1.11740|
;;;2609   #endif
;;;2610   
;;;2611         for (i = 0, rp = row_buf + 1, dp = png_ptr->paeth_row + 1,
002ddc  2000              MOVS     r0,#0
002dde  9009              STR      r0,[sp,#0x24]
002de0  9816              LDR      r0,[sp,#0x58]
002de2  1c40              ADDS     r0,r0,#1
002de4  9010              STR      r0,[sp,#0x40]
002de6  9819              LDR      r0,[sp,#0x64]
002de8  f8d0023c          LDR      r0,[r0,#0x23c]
002dec  1c40              ADDS     r0,r0,#1
002dee  900f              STR      r0,[sp,#0x3c]
;;;2612              pp = prev_row + 1; i < bpp; i++)
002df0  9818              LDR      r0,[sp,#0x60]
002df2  1c40              ADDS     r0,r0,#1
002df4  900e              STR      r0,[sp,#0x38]
002df6  e01d              B        |L1.11828|
                  |L1.11768|
;;;2613         {
;;;2614            v = *dp++ = (png_byte)(((int)*rp++ - (int)*pp++) & 0xff);
002df8  9810              LDR      r0,[sp,#0x40]
002dfa  f8101b01          LDRB     r1,[r0],#1
002dfe  9010              STR      r0,[sp,#0x40]
002e00  980e              LDR      r0,[sp,#0x38]
002e02  f8102b01          LDRB     r2,[r0],#1
002e06  900e              STR      r0,[sp,#0x38]
002e08  1a88              SUBS     r0,r1,r2
002e0a  b2c0              UXTB     r0,r0
002e0c  990f              LDR      r1,[sp,#0x3c]
002e0e  7008              STRB     r0,[r1,#0]
002e10  9008              STR      r0,[sp,#0x20]
002e12  980f              LDR      r0,[sp,#0x3c]
002e14  1c40              ADDS     r0,r0,#1
002e16  900f              STR      r0,[sp,#0x3c]
;;;2615   
;;;2616            sum += (v < 128) ? v : 256 - v;
002e18  9808              LDR      r0,[sp,#0x20]
002e1a  2880              CMP      r0,#0x80
002e1c  da01              BGE      |L1.11810|
002e1e  9808              LDR      r0,[sp,#0x20]
002e20  e002              B        |L1.11816|
                  |L1.11810|
002e22  9808              LDR      r0,[sp,#0x20]
002e24  f5c07080          RSB      r0,r0,#0x100
                  |L1.11816|
002e28  990b              LDR      r1,[sp,#0x2c]
002e2a  4408              ADD      r0,r0,r1
002e2c  900b              STR      r0,[sp,#0x2c]
002e2e  9809              LDR      r0,[sp,#0x24]         ;2612
002e30  1c40              ADDS     r0,r0,#1              ;2612
002e32  9009              STR      r0,[sp,#0x24]         ;2612
                  |L1.11828|
002e34  9914              LDR      r1,[sp,#0x50]         ;2612
002e36  9809              LDR      r0,[sp,#0x24]         ;2612
002e38  4288              CMP      r0,r1                 ;2612
002e3a  d3dd              BCC      |L1.11768|
;;;2617         }
;;;2618   
;;;2619         for (lp = row_buf + 1, cp = prev_row + 1; i < row_bytes; i++)
002e3c  9816              LDR      r0,[sp,#0x58]
002e3e  1c40              ADDS     r0,r0,#1
002e40  900c              STR      r0,[sp,#0x30]
002e42  9818              LDR      r0,[sp,#0x60]
002e44  1c40              ADDS     r0,r0,#1
002e46  900d              STR      r0,[sp,#0x34]
002e48  e06c              B        |L1.12068|
002e4a  0000              DCW      0x0000
                  |L1.11852|
                          DCD      0x003fffc0
                  |L1.11856|
;;;2620         {
;;;2621            int a, b, c, pa, pb, pc, p;
;;;2622   
;;;2623            b = *pp++;
002e50  980e              LDR      r0,[sp,#0x38]
002e52  7800              LDRB     r0,[r0,#0]
002e54  9006              STR      r0,[sp,#0x18]
002e56  980e              LDR      r0,[sp,#0x38]
002e58  1c40              ADDS     r0,r0,#1
002e5a  900e              STR      r0,[sp,#0x38]
;;;2624            c = *cp++;
002e5c  980d              LDR      r0,[sp,#0x34]
002e5e  7800              LDRB     r0,[r0,#0]
002e60  9005              STR      r0,[sp,#0x14]
002e62  980d              LDR      r0,[sp,#0x34]
002e64  1c40              ADDS     r0,r0,#1
002e66  900d              STR      r0,[sp,#0x34]
;;;2625            a = *lp++;
002e68  980c              LDR      r0,[sp,#0x30]
002e6a  7800              LDRB     r0,[r0,#0]
002e6c  9007              STR      r0,[sp,#0x1c]
002e6e  980c              LDR      r0,[sp,#0x30]
002e70  1c40              ADDS     r0,r0,#1
002e72  900c              STR      r0,[sp,#0x30]
;;;2626   
;;;2627   #ifndef PNG_SLOW_PAETH
;;;2628            p = b - c;
002e74  e9dd1005          LDRD     r1,r0,[sp,#0x14]
002e78  1a40              SUBS     r0,r0,r1
002e7a  9001              STR      r0,[sp,#4]
;;;2629            pc = a - c;
002e7c  9905              LDR      r1,[sp,#0x14]
002e7e  9807              LDR      r0,[sp,#0x1c]
002e80  1a40              SUBS     r0,r0,r1
002e82  9002              STR      r0,[sp,#8]
;;;2630   #ifdef PNG_USE_ABS
;;;2631            pa = abs(p);
;;;2632            pb = abs(pc);
;;;2633            pc = abs(p + pc);
;;;2634   #else
;;;2635            pa = p < 0 ? -p : p;
002e84  9801              LDR      r0,[sp,#4]
002e86  2800              CMP      r0,#0
002e88  da02              BGE      |L1.11920|
002e8a  9801              LDR      r0,[sp,#4]
002e8c  4240              RSBS     r0,r0,#0
002e8e  e000              B        |L1.11922|
                  |L1.11920|
002e90  9801              LDR      r0,[sp,#4]
                  |L1.11922|
002e92  9004              STR      r0,[sp,#0x10]
;;;2636            pb = pc < 0 ? -pc : pc;
002e94  9802              LDR      r0,[sp,#8]
002e96  2800              CMP      r0,#0
002e98  da02              BGE      |L1.11936|
002e9a  9802              LDR      r0,[sp,#8]
002e9c  4240              RSBS     r0,r0,#0
002e9e  e000              B        |L1.11938|
                  |L1.11936|
002ea0  9802              LDR      r0,[sp,#8]
                  |L1.11938|
002ea2  9003              STR      r0,[sp,#0xc]
;;;2637            pc = (p + pc) < 0 ? -(p + pc) : p + pc;
002ea4  e9dd0101          LDRD     r0,r1,[sp,#4]
002ea8  4408              ADD      r0,r0,r1
002eaa  2800              CMP      r0,#0
002eac  da04              BGE      |L1.11960|
002eae  e9dd0101          LDRD     r0,r1,[sp,#4]
002eb2  4408              ADD      r0,r0,r1
002eb4  4240              RSBS     r0,r0,#0
002eb6  e002              B        |L1.11966|
                  |L1.11960|
002eb8  e9dd0101          LDRD     r0,r1,[sp,#4]
002ebc  4408              ADD      r0,r0,r1
                  |L1.11966|
002ebe  9002              STR      r0,[sp,#8]
;;;2638   #endif
;;;2639            p = (pa <= pb && pa <=pc) ? a : (pb <= pc) ? b : c;
002ec0  e9dd1003          LDRD     r1,r0,[sp,#0xc]
002ec4  4288              CMP      r0,r1
002ec6  dc05              BGT      |L1.11988|
002ec8  9902              LDR      r1,[sp,#8]
002eca  9804              LDR      r0,[sp,#0x10]
002ecc  4288              CMP      r0,r1
002ece  dc01              BGT      |L1.11988|
002ed0  9807              LDR      r0,[sp,#0x1c]
002ed2  e006              B        |L1.12002|
                  |L1.11988|
002ed4  e9dd1002          LDRD     r1,r0,[sp,#8]
002ed8  4288              CMP      r0,r1
002eda  dc01              BGT      |L1.12000|
002edc  9806              LDR      r0,[sp,#0x18]
002ede  e000              B        |L1.12002|
                  |L1.12000|
002ee0  9805              LDR      r0,[sp,#0x14]
                  |L1.12002|
002ee2  9001              STR      r0,[sp,#4]
;;;2640   #else /* PNG_SLOW_PAETH */
;;;2641            p = a + b - c;
;;;2642            pa = abs(p - a);
;;;2643            pb = abs(p - b);
;;;2644            pc = abs(p - c);
;;;2645            if (pa <= pb && pa <= pc)
;;;2646               p = a;
;;;2647            else if (pb <= pc)
;;;2648               p = b;
;;;2649            else
;;;2650               p = c;
;;;2651   #endif /* PNG_SLOW_PAETH */
;;;2652   
;;;2653            v = *dp++ = (png_byte)(((int)*rp++ - p) & 0xff);
002ee4  9810              LDR      r0,[sp,#0x40]
002ee6  f8101b01          LDRB     r1,[r0],#1
002eea  9010              STR      r0,[sp,#0x40]
002eec  9801              LDR      r0,[sp,#4]
002eee  1a08              SUBS     r0,r1,r0
002ef0  b2c1              UXTB     r1,r0
002ef2  980f              LDR      r0,[sp,#0x3c]
002ef4  7001              STRB     r1,[r0,#0]
002ef6  9108              STR      r1,[sp,#0x20]
002ef8  980f              LDR      r0,[sp,#0x3c]
002efa  1c40              ADDS     r0,r0,#1
002efc  900f              STR      r0,[sp,#0x3c]
;;;2654   
;;;2655            sum += (v < 128) ? v : 256 - v;
002efe  9808              LDR      r0,[sp,#0x20]
002f00  2880              CMP      r0,#0x80
002f02  da01              BGE      |L1.12040|
002f04  9808              LDR      r0,[sp,#0x20]
002f06  e002              B        |L1.12046|
                  |L1.12040|
002f08  9808              LDR      r0,[sp,#0x20]
002f0a  f5c07080          RSB      r0,r0,#0x100
                  |L1.12046|
002f0e  990b              LDR      r1,[sp,#0x2c]
002f10  4408              ADD      r0,r0,r1
002f12  900b              STR      r0,[sp,#0x2c]
;;;2656   
;;;2657            if (sum > lmins)  /* We are already worse, don't continue. */
002f14  e9dd100a          LDRD     r1,r0,[sp,#0x28]
002f18  4288              CMP      r0,r1
002f1a  d900              BLS      |L1.12062|
;;;2658               break;
002f1c  e006              B        |L1.12076|
                  |L1.12062|
002f1e  9809              LDR      r0,[sp,#0x24]         ;2619
002f20  1c40              ADDS     r0,r0,#1              ;2619
002f22  9009              STR      r0,[sp,#0x24]         ;2619
                  |L1.12068|
002f24  9912              LDR      r1,[sp,#0x48]         ;2619
002f26  9809              LDR      r0,[sp,#0x24]         ;2619
002f28  4288              CMP      r0,r1                 ;2619
002f2a  d391              BCC      |L1.11856|
                  |L1.12076|
002f2c  bf00              NOP      
;;;2659         }
;;;2660   
;;;2661   #if defined(PNG_WRITE_WEIGHTED_FILTER_SUPPORTED)
;;;2662         if (png_ptr->heuristic_method == PNG_FILTER_HEURISTIC_WEIGHTED)
002f2e  9819              LDR      r0,[sp,#0x64]
002f30  f8900338          LDRB     r0,[r0,#0x338]
002f34  2802              CMP      r0,#2
002f36  d14a              BNE      |L1.12238|
;;;2663         {
;;;2664            int j;
;;;2665            png_uint_32 sumhi, sumlo;
;;;2666            sumlo = sum & PNG_LOMASK;
002f38  980b              LDR      r0,[sp,#0x2c]
002f3a  b280              UXTH     r0,r0
002f3c  9005              STR      r0,[sp,#0x14]
;;;2667            sumhi = (sum >> PNG_HISHIFT) & PNG_HIMASK;
002f3e  493c              LDR      r1,|L1.12336|
002f40  980b              LDR      r0,[sp,#0x2c]
002f42  ea012090          AND      r0,r1,r0,LSR #10
002f46  9006              STR      r0,[sp,#0x18]
;;;2668   
;;;2669            for (j = 0; j < num_p_filters; j++)
002f48  2000              MOVS     r0,#0
002f4a  9007              STR      r0,[sp,#0x1c]
002f4c  e01d              B        |L1.12170|
                  |L1.12110|
;;;2670            {
;;;2671               if (png_ptr->prev_filters[j] == PNG_FILTER_VALUE_PAETH)
002f4e  9819              LDR      r0,[sp,#0x64]
002f50  f8d0133c          LDR      r1,[r0,#0x33c]
002f54  9807              LDR      r0,[sp,#0x1c]
002f56  5c08              LDRB     r0,[r1,r0]
002f58  2804              CMP      r0,#4
002f5a  d113              BNE      |L1.12164|
;;;2672               {
;;;2673                  sumlo = (sumlo * png_ptr->filter_weights[j]) >>
002f5c  9819              LDR      r0,[sp,#0x64]
002f5e  f8d01340          LDR      r1,[r0,#0x340]
002f62  9807              LDR      r0,[sp,#0x1c]
002f64  f8310010          LDRH     r0,[r1,r0,LSL #1]
002f68  9905              LDR      r1,[sp,#0x14]
002f6a  4348              MULS     r0,r1,r0
002f6c  0a00              LSRS     r0,r0,#8
002f6e  9005              STR      r0,[sp,#0x14]
;;;2674                     PNG_WEIGHT_SHIFT;
;;;2675                  sumhi = (sumhi * png_ptr->filter_weights[j]) >>
002f70  9819              LDR      r0,[sp,#0x64]
002f72  f8d01340          LDR      r1,[r0,#0x340]
002f76  9807              LDR      r0,[sp,#0x1c]
002f78  f8310010          LDRH     r0,[r1,r0,LSL #1]
002f7c  9906              LDR      r1,[sp,#0x18]
002f7e  4348              MULS     r0,r1,r0
002f80  0a00              LSRS     r0,r0,#8
002f82  9006              STR      r0,[sp,#0x18]
                  |L1.12164|
002f84  9807              LDR      r0,[sp,#0x1c]         ;2669
002f86  1c40              ADDS     r0,r0,#1              ;2669
002f88  9007              STR      r0,[sp,#0x1c]         ;2669
                  |L1.12170|
002f8a  9911              LDR      r1,[sp,#0x44]         ;2669
002f8c  9807              LDR      r0,[sp,#0x1c]         ;2669
002f8e  4288              CMP      r0,r1                 ;2669
002f90  dbdd              BLT      |L1.12110|
;;;2676                     PNG_WEIGHT_SHIFT;
;;;2677               }
;;;2678            }
;;;2679   
;;;2680            sumlo = (sumlo * png_ptr->filter_costs[PNG_FILTER_VALUE_PAETH]) >>
002f92  9819              LDR      r0,[sp,#0x64]
002f94  f8d00348          LDR      r0,[r0,#0x348]
002f98  8900              LDRH     r0,[r0,#8]
002f9a  9905              LDR      r1,[sp,#0x14]
002f9c  4348              MULS     r0,r1,r0
002f9e  08c0              LSRS     r0,r0,#3
002fa0  9005              STR      r0,[sp,#0x14]
;;;2681               PNG_COST_SHIFT;
;;;2682            sumhi = (sumhi * png_ptr->filter_costs[PNG_FILTER_VALUE_PAETH]) >>
002fa2  9819              LDR      r0,[sp,#0x64]
002fa4  f8d00348          LDR      r0,[r0,#0x348]
002fa8  8900              LDRH     r0,[r0,#8]
002faa  9906              LDR      r1,[sp,#0x18]
002fac  4348              MULS     r0,r1,r0
002fae  08c0              LSRS     r0,r0,#3
002fb0  9006              STR      r0,[sp,#0x18]
;;;2683               PNG_COST_SHIFT;
;;;2684   
;;;2685            if (sumhi > PNG_HIMASK)
002fb2  491f              LDR      r1,|L1.12336|
002fb4  9806              LDR      r0,[sp,#0x18]
002fb6  4288              CMP      r0,r1
002fb8  d903              BLS      |L1.12226|
;;;2686               sum = PNG_MAXSUM;
002fba  f06f4000          MVN      r0,#0x80000000
002fbe  900b              STR      r0,[sp,#0x2c]
002fc0  e004              B        |L1.12236|
                  |L1.12226|
;;;2687            else
;;;2688               sum = (sumhi << PNG_HISHIFT) + sumlo;
002fc2  e9dd0105          LDRD     r0,r1,[sp,#0x14]
002fc6  eb002081          ADD      r0,r0,r1,LSL #10
002fca  900b              STR      r0,[sp,#0x2c]
                  |L1.12236|
;;;2689         }
002fcc  bf00              NOP      
                  |L1.12238|
;;;2690   #endif
;;;2691   
;;;2692         if (sum < mins)
002fce  9915              LDR      r1,[sp,#0x54]
002fd0  980b              LDR      r0,[sp,#0x2c]
002fd2  4288              CMP      r0,r1
002fd4  d203              BCS      |L1.12254|
;;;2693         {
;;;2694            best_row = png_ptr->paeth_row;
002fd6  9819              LDR      r0,[sp,#0x64]
002fd8  f8d0023c          LDR      r0,[r0,#0x23c]
002fdc  9017              STR      r0,[sp,#0x5c]
                  |L1.12254|
;;;2695         }
;;;2696      }
002fde  bf00              NOP      
                  |L1.12256|
;;;2697   
;;;2698      /* Do the actual writing of the filtered row data from the chosen filter. */
;;;2699   
;;;2700      png_write_filtered_row(png_ptr, best_row);
002fe0  9917              LDR      r1,[sp,#0x5c]
002fe2  9819              LDR      r0,[sp,#0x64]
002fe4  f7fffffe          BL       png_write_filtered_row
;;;2701   
;;;2702   #if defined(PNG_WRITE_WEIGHTED_FILTER_SUPPORTED)
;;;2703      /* Save the type of filter we picked this time for future calculations */
;;;2704      if (png_ptr->num_prev_filters > 0)
002fe8  9819              LDR      r0,[sp,#0x64]
002fea  f8900339          LDRB     r0,[r0,#0x339]
002fee  2800              CMP      r0,#0
002ff0  dd1c              BLE      |L1.12332|
;;;2705      {
;;;2706         int j;
;;;2707         for (j = 1; j < num_p_filters; j++)
002ff2  2001              MOVS     r0,#1
002ff4  9010              STR      r0,[sp,#0x40]
002ff6  e00d              B        |L1.12308|
                  |L1.12280|
;;;2708         {
;;;2709            png_ptr->prev_filters[j] = png_ptr->prev_filters[j - 1];
002ff8  9819              LDR      r0,[sp,#0x64]
002ffa  f8d0133c          LDR      r1,[r0,#0x33c]
002ffe  9810              LDR      r0,[sp,#0x40]
003000  1e40              SUBS     r0,r0,#1
003002  5c09              LDRB     r1,[r1,r0]
003004  9819              LDR      r0,[sp,#0x64]
003006  f8d0233c          LDR      r2,[r0,#0x33c]
00300a  9810              LDR      r0,[sp,#0x40]
00300c  5411              STRB     r1,[r2,r0]
00300e  9810              LDR      r0,[sp,#0x40]         ;2707
003010  1c40              ADDS     r0,r0,#1              ;2707
003012  9010              STR      r0,[sp,#0x40]         ;2707
                  |L1.12308|
003014  e9dd0110          LDRD     r0,r1,[sp,#0x40]      ;2707
003018  4288              CMP      r0,r1                 ;2707
00301a  dbed              BLT      |L1.12280|
;;;2710         }
;;;2711         png_ptr->prev_filters[j] = best_row[0];
00301c  9817              LDR      r0,[sp,#0x5c]
00301e  7801              LDRB     r1,[r0,#0]
003020  9819              LDR      r0,[sp,#0x64]
003022  f8d0233c          LDR      r2,[r0,#0x33c]
003026  9810              LDR      r0,[sp,#0x40]
003028  5411              STRB     r1,[r2,r0]
;;;2712      }
00302a  bf00              NOP      
                  |L1.12332|
;;;2713   #endif
;;;2714   }
00302c  b01b              ADD      sp,sp,#0x6c
00302e  bd00              POP      {pc}
;;;2715   
                          ENDP

                  |L1.12336|
                          DCD      0x003fffc0
