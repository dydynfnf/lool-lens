; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\deflate.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\deflate.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\FWlib\inc -I.\user -I.\CM3 -I.\MALLOC -I.\TFT -I.\EMWIN\EMWIN_INC -I.\EMWIN\DEMO -I.\PNG -I.\FATFS -I.\SDIO -I.\USB\inc -I.\USBCFG\inc -IE:\material\GUI\8.STM32·Ü¶·°å-emwin+fatfs+usb\RTE -Id:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.0.0 -Id:\Keil_v5\ARM\CMSIS\Include -Id:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.0.0\Device\Include -D__UVISION_VERSION=514 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\deflate.crf PNG\deflate.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  lm_init PROC
;;;985     */
;;;986    local void lm_init (s)
000000  b510              PUSH     {r4,lr}
;;;987        deflate_state *s;
;;;988    {
000002  4604              MOV      r4,r0
;;;989        s->window_size = (ulg)2L*s->w_size;
000004  f8540f2c          LDR      r0,[r4,#0x2c]!
000008  0040              LSLS     r0,r0,#1
00000a  6120              STR      r0,[r4,#0x10]
;;;990    
;;;991        CLEAR_HASH(s);
00000c  2100              MOVS     r1,#0
00000e  6a20              LDR      r0,[r4,#0x20]
000010  1e40              SUBS     r0,r0,#1
000012  69a2              LDR      r2,[r4,#0x18]
000014  f8221010          STRH     r1,[r2,r0,LSL #1]
000018  6a22              LDR      r2,[r4,#0x20]
00001a  1e52              SUBS     r2,r2,#1
00001c  0051              LSLS     r1,r2,#1
00001e  69a0              LDR      r0,[r4,#0x18]
000020  f7fffffe          BL       __aeabi_memclr
;;;992    
;;;993        /* Set the default configuration parameters:
;;;994         */
;;;995        s->max_lazy_match   = configuration_table[s->level].max_lazy;
000024  6da0              LDR      r0,[r4,#0x58]
000026  eb000040          ADD      r0,r0,r0,LSL #1
00002a  49fe              LDR      r1,|L1.1060|
00002c  eb010080          ADD      r0,r1,r0,LSL #2
000030  8840              LDRH     r0,[r0,#2]
000032  6560              STR      r0,[r4,#0x54]
;;;996        s->good_match       = configuration_table[s->level].good_length;
000034  6da0              LDR      r0,[r4,#0x58]
000036  eb000040          ADD      r0,r0,r0,LSL #1
00003a  f8310020          LDRH     r0,[r1,r0,LSL #2]
00003e  6620              STR      r0,[r4,#0x60]
;;;997        s->nice_match       = configuration_table[s->level].nice_length;
000040  6da0              LDR      r0,[r4,#0x58]
000042  eb000040          ADD      r0,r0,r0,LSL #1
000046  eb010080          ADD      r0,r1,r0,LSL #2
00004a  8880              LDRH     r0,[r0,#4]
00004c  6660              STR      r0,[r4,#0x64]
;;;998        s->max_chain_length = configuration_table[s->level].max_chain;
00004e  6da0              LDR      r0,[r4,#0x58]
000050  eb000040          ADD      r0,r0,r0,LSL #1
000054  eb010080          ADD      r0,r1,r0,LSL #2
000058  88c0              LDRH     r0,[r0,#6]
00005a  6520              STR      r0,[r4,#0x50]
;;;999    
;;;1000       s->strstart = 0;
00005c  2000              MOVS     r0,#0
00005e  6420              STR      r0,[r4,#0x40]
;;;1001       s->block_start = 0L;
000060  6320              STR      r0,[r4,#0x30]
;;;1002       s->lookahead = 0;
000062  64a0              STR      r0,[r4,#0x48]
;;;1003       s->match_length = s->prev_length = MIN_MATCH-1;
000064  2002              MOVS     r0,#2
000066  64e0              STR      r0,[r4,#0x4c]
000068  6360              STR      r0,[r4,#0x34]
;;;1004       s->match_available = 0;
00006a  2000              MOVS     r0,#0
00006c  63e0              STR      r0,[r4,#0x3c]
;;;1005       s->ins_h = 0;
00006e  61e0              STR      r0,[r4,#0x1c]
000070  3c2c              SUBS     r4,r4,#0x2c
;;;1006   #ifndef FASTEST
;;;1007   #ifdef ASMV
;;;1008       match_init(); /* initialize the asm code */
;;;1009   #endif
;;;1010   #endif
;;;1011   }
000072  bd10              POP      {r4,pc}
;;;1012   
                          ENDP

                  deflateReset PROC
;;;356    /* ========================================================================= */
;;;357    int ZEXPORT deflateReset (strm)
000074  b570              PUSH     {r4-r6,lr}
;;;358        z_streamp strm;
;;;359    {
000076  4605              MOV      r5,r0
;;;360        deflate_state *s;
;;;361    
;;;362        if (strm == Z_NULL || strm->state == Z_NULL ||
000078  b12d              CBZ      r5,|L1.134|
00007a  69e8              LDR      r0,[r5,#0x1c]
00007c  b118              CBZ      r0,|L1.134|
;;;363            strm->zalloc == (alloc_func)0 || strm->zfree == (free_func)0) {
00007e  6a28              LDR      r0,[r5,#0x20]
000080  b108              CBZ      r0,|L1.134|
000082  6a68              LDR      r0,[r5,#0x24]
000084  b910              CBNZ     r0,|L1.140|
                  |L1.134|
;;;364            return Z_STREAM_ERROR;
000086  f06f0001          MVN      r0,#1
                  |L1.138|
;;;365        }
;;;366    
;;;367        strm->total_in = strm->total_out = 0;
;;;368        strm->msg = Z_NULL; /* use zfree if we ever allocate msg dynamically */
;;;369        strm->data_type = Z_UNKNOWN;
;;;370    
;;;371        s = (deflate_state *)strm->state;
;;;372        s->pending = 0;
;;;373        s->pending_out = s->pending_buf;
;;;374    
;;;375        if (s->wrap < 0) {
;;;376            s->wrap = -s->wrap; /* was made negative by deflate(..., Z_FINISH); */
;;;377        }
;;;378        s->status = s->wrap ? INIT_STATE : BUSY_STATE;
;;;379        strm->adler =
;;;380    #ifdef GZIP
;;;381            s->wrap == 2 ? crc32(0L, Z_NULL, 0) :
;;;382    #endif
;;;383            adler32(0L, Z_NULL, 0);
;;;384        s->last_flush = Z_NO_FLUSH;
;;;385    
;;;386        _tr_init(s);
;;;387        lm_init(s);
;;;388    
;;;389        return Z_OK;
;;;390    }
00008a  bd70              POP      {r4-r6,pc}
                  |L1.140|
00008c  2000              MOVS     r0,#0                 ;367
00008e  6168              STR      r0,[r5,#0x14]         ;367
000090  60a8              STR      r0,[r5,#8]            ;367
000092  61a8              STR      r0,[r5,#0x18]         ;368
000094  2002              MOVS     r0,#2                 ;369
000096  62e8              STR      r0,[r5,#0x2c]         ;369
000098  69ec              LDR      r4,[r5,#0x1c]         ;371
00009a  2000              MOVS     r0,#0                 ;372
00009c  6160              STR      r0,[r4,#0x14]         ;372
00009e  68a0              LDR      r0,[r4,#8]            ;373
0000a0  6120              STR      r0,[r4,#0x10]         ;373
0000a2  69a0              LDR      r0,[r4,#0x18]         ;375
0000a4  2800              CMP      r0,#0                 ;375
0000a6  da02              BGE      |L1.174|
0000a8  69a0              LDR      r0,[r4,#0x18]         ;376
0000aa  4240              RSBS     r0,r0,#0              ;376
0000ac  61a0              STR      r0,[r4,#0x18]         ;376
                  |L1.174|
0000ae  69a0              LDR      r0,[r4,#0x18]         ;378
0000b0  b108              CBZ      r0,|L1.182|
0000b2  202a              MOVS     r0,#0x2a              ;378
0000b4  e000              B        |L1.184|
                  |L1.182|
0000b6  2071              MOVS     r0,#0x71              ;378
                  |L1.184|
0000b8  6060              STR      r0,[r4,#4]            ;378
0000ba  69a0              LDR      r0,[r4,#0x18]         ;379
0000bc  2802              CMP      r0,#2                 ;379
0000be  d105              BNE      |L1.204|
0000c0  2200              MOVS     r2,#0                 ;381
0000c2  4611              MOV      r1,r2                 ;381
0000c4  4610              MOV      r0,r2                 ;381
0000c6  f7fffffe          BL       crc32
0000ca  e004              B        |L1.214|
                  |L1.204|
0000cc  2200              MOVS     r2,#0                 ;383
0000ce  4611              MOV      r1,r2                 ;383
0000d0  4610              MOV      r0,r2                 ;383
0000d2  f7fffffe          BL       adler32
                  |L1.214|
0000d6  6328              STR      r0,[r5,#0x30]         ;383
0000d8  2000              MOVS     r0,#0                 ;384
0000da  62a0              STR      r0,[r4,#0x28]         ;384
0000dc  4620              MOV      r0,r4                 ;386
0000de  f7fffffe          BL       _tr_init
0000e2  4620              MOV      r0,r4                 ;387
0000e4  f7fffffe          BL       lm_init
0000e8  2000              MOVS     r0,#0                 ;389
0000ea  e7ce              B        |L1.138|
;;;391    
                          ENDP

                  deflateEnd PROC
;;;858    /* ========================================================================= */
;;;859    int ZEXPORT deflateEnd (strm)
0000ec  b570              PUSH     {r4-r6,lr}
;;;860        z_streamp strm;
;;;861    {
0000ee  4604              MOV      r4,r0
;;;862        int status;
;;;863    
;;;864        if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;
0000f0  b10c              CBZ      r4,|L1.246|
0000f2  69e0              LDR      r0,[r4,#0x1c]
0000f4  b910              CBNZ     r0,|L1.252|
                  |L1.246|
0000f6  f06f0001          MVN      r0,#1
                  |L1.250|
;;;865    
;;;866        status = strm->state->status;
;;;867        if (status != INIT_STATE &&
;;;868            status != EXTRA_STATE &&
;;;869            status != NAME_STATE &&
;;;870            status != COMMENT_STATE &&
;;;871            status != HCRC_STATE &&
;;;872            status != BUSY_STATE &&
;;;873            status != FINISH_STATE) {
;;;874          return Z_STREAM_ERROR;
;;;875        }
;;;876    
;;;877        /* Deallocate in reverse order of allocations: */
;;;878        TRY_FREE(strm, strm->state->pending_buf);
;;;879        TRY_FREE(strm, strm->state->head);
;;;880        TRY_FREE(strm, strm->state->prev);
;;;881        TRY_FREE(strm, strm->state->window);
;;;882    
;;;883        ZFREE(strm, strm->state);
;;;884        strm->state = Z_NULL;
;;;885    
;;;886        return status == BUSY_STATE ? Z_DATA_ERROR : Z_OK;
;;;887    }
0000fa  bd70              POP      {r4-r6,pc}
                  |L1.252|
0000fc  69e0              LDR      r0,[r4,#0x1c]         ;866
0000fe  6845              LDR      r5,[r0,#4]            ;866
000100  2d2a              CMP      r5,#0x2a              ;867
000102  d010              BEQ      |L1.294|
000104  2d45              CMP      r5,#0x45              ;868
000106  d00e              BEQ      |L1.294|
000108  2d49              CMP      r5,#0x49              ;869
00010a  d00c              BEQ      |L1.294|
00010c  2d5b              CMP      r5,#0x5b              ;870
00010e  d00a              BEQ      |L1.294|
000110  2d67              CMP      r5,#0x67              ;871
000112  d008              BEQ      |L1.294|
000114  2d71              CMP      r5,#0x71              ;872
000116  d006              BEQ      |L1.294|
000118  f240209a          MOV      r0,#0x29a             ;873
00011c  4285              CMP      r5,r0                 ;873
00011e  d002              BEQ      |L1.294|
000120  f06f0001          MVN      r0,#1                 ;874
000124  e7e9              B        |L1.250|
                  |L1.294|
000126  69e0              LDR      r0,[r4,#0x1c]         ;878
000128  6880              LDR      r0,[r0,#8]            ;878
00012a  b120              CBZ      r0,|L1.310|
00012c  69e3              LDR      r3,[r4,#0x1c]         ;878
00012e  6899              LDR      r1,[r3,#8]            ;878
000130  e9d42009          LDRD     r2,r0,[r4,#0x24]      ;878
000134  4790              BLX      r2                    ;878
                  |L1.310|
000136  69e0              LDR      r0,[r4,#0x1c]         ;879
000138  6c40              LDR      r0,[r0,#0x44]         ;879
00013a  b120              CBZ      r0,|L1.326|
00013c  69e3              LDR      r3,[r4,#0x1c]         ;879
00013e  6c59              LDR      r1,[r3,#0x44]         ;879
000140  e9d42009          LDRD     r2,r0,[r4,#0x24]      ;879
000144  4790              BLX      r2                    ;879
                  |L1.326|
000146  69e0              LDR      r0,[r4,#0x1c]         ;880
000148  6c00              LDR      r0,[r0,#0x40]         ;880
00014a  b120              CBZ      r0,|L1.342|
00014c  69e3              LDR      r3,[r4,#0x1c]         ;880
00014e  6c19              LDR      r1,[r3,#0x40]         ;880
000150  e9d42009          LDRD     r2,r0,[r4,#0x24]      ;880
000154  4790              BLX      r2                    ;880
                  |L1.342|
000156  69e0              LDR      r0,[r4,#0x1c]         ;881
000158  6b80              LDR      r0,[r0,#0x38]         ;881
00015a  b120              CBZ      r0,|L1.358|
00015c  69e3              LDR      r3,[r4,#0x1c]         ;881
00015e  6b99              LDR      r1,[r3,#0x38]         ;881
000160  e9d42009          LDRD     r2,r0,[r4,#0x24]      ;881
000164  4790              BLX      r2                    ;881
                  |L1.358|
000166  e9d42009          LDRD     r2,r0,[r4,#0x24]      ;883
00016a  69e1              LDR      r1,[r4,#0x1c]         ;883
00016c  4790              BLX      r2                    ;883
00016e  2000              MOVS     r0,#0                 ;884
000170  61e0              STR      r0,[r4,#0x1c]         ;884
000172  2d71              CMP      r5,#0x71              ;886
000174  d101              BNE      |L1.378|
000176  1ec0              SUBS     r0,r0,#3              ;886
000178  e7bf              B        |L1.250|
                  |L1.378|
00017a  2000              MOVS     r0,#0                 ;886
00017c  e7bd              B        |L1.250|
;;;888    
                          ENDP

                  deflateInit2_ PROC
;;;215    /* ========================================================================= */
;;;216    int ZEXPORT deflateInit2_(strm, level, method, windowBits, memLevel, strategy,
00017e  e92d4ff8          PUSH     {r3-r11,lr}
;;;217                      version, stream_size)
;;;218        z_streamp strm;
;;;219        int  level;
;;;220        int  method;
;;;221        int  windowBits;
;;;222        int  memLevel;
;;;223        int  strategy;
;;;224        const char *version;
;;;225        int stream_size;
;;;226    {
000182  4605              MOV      r5,r0
000184  460f              MOV      r7,r1
000186  4692              MOV      r10,r2
000188  461e              MOV      r6,r3
00018a  e9dd8b0a          LDRD     r8,r11,[sp,#0x28]
;;;227        deflate_state *s;
;;;228        int wrap = 1;
00018e  2001              MOVS     r0,#1
000190  9000              STR      r0,[sp,#0]
;;;229        static const char my_version[] = ZLIB_VERSION;
;;;230    
;;;231        ushf *overlay;
;;;232        /* We overlay pending_buf and d_buf+l_buf. This works since the average
;;;233         * output size for (length,distance) codes is <= 24 bits.
;;;234         */
;;;235    
;;;236        if (version == Z_NULL || version[0] != my_version[0] ||
000192  980c              LDR      r0,[sp,#0x30]
000194  b140              CBZ      r0,|L1.424|
000196  980c              LDR      r0,[sp,#0x30]
000198  7800              LDRB     r0,[r0,#0]
00019a  49a3              LDR      r1,|L1.1064|
00019c  7809              LDRB     r1,[r1,#0]  ; my_version
00019e  4288              CMP      r0,r1
0001a0  d102              BNE      |L1.424|
;;;237            stream_size != sizeof(z_stream)) {
0001a2  980d              LDR      r0,[sp,#0x34]
0001a4  2838              CMP      r0,#0x38
0001a6  d003              BEQ      |L1.432|
                  |L1.424|
;;;238            return Z_VERSION_ERROR;
0001a8  f06f0005          MVN      r0,#5
                  |L1.428|
;;;239        }
;;;240        if (strm == Z_NULL) return Z_STREAM_ERROR;
;;;241    
;;;242        strm->msg = Z_NULL;
;;;243        if (strm->zalloc == (alloc_func)0) {
;;;244            strm->zalloc = zcalloc;
;;;245            strm->opaque = (voidpf)0;
;;;246        }
;;;247        if (strm->zfree == (free_func)0) strm->zfree = zcfree;
;;;248    
;;;249    #ifdef FASTEST
;;;250        if (level != 0) level = 1;
;;;251    #else
;;;252        if (level == Z_DEFAULT_COMPRESSION) level = 6;
;;;253    #endif
;;;254    
;;;255        if (windowBits < 0) { /* suppress zlib wrapper */
;;;256            wrap = 0;
;;;257            windowBits = -windowBits;
;;;258        }
;;;259    #ifdef GZIP
;;;260        else if (windowBits > 15) {
;;;261            wrap = 2;       /* write gzip wrapper instead */
;;;262            windowBits -= 16;
;;;263        }
;;;264    #endif
;;;265        if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method != Z_DEFLATED ||
;;;266            windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||
;;;267            strategy < 0 || strategy > Z_FIXED) {
;;;268            return Z_STREAM_ERROR;
;;;269        }
;;;270        if (windowBits == 8) windowBits = 9;  /* until 256-byte window bug fixed */
;;;271        s = (deflate_state *) ZALLOC(strm, 1, sizeof(deflate_state));
;;;272        if (s == Z_NULL) return Z_MEM_ERROR;
;;;273        strm->state = (struct internal_state FAR *)s;
;;;274        s->strm = strm;
;;;275    
;;;276        s->wrap = wrap;
;;;277        s->gzhead = Z_NULL;
;;;278        s->w_bits = windowBits;
;;;279        s->w_size = 1 << s->w_bits;
;;;280        s->w_mask = s->w_size - 1;
;;;281    
;;;282        s->hash_bits = memLevel + 7;
;;;283        s->hash_size = 1 << s->hash_bits;
;;;284        s->hash_mask = s->hash_size - 1;
;;;285        s->hash_shift =  ((s->hash_bits+MIN_MATCH-1)/MIN_MATCH);
;;;286    
;;;287        s->window = (Bytef *) ZALLOC(strm, s->w_size, 2*sizeof(Byte));
;;;288        s->prev   = (Posf *)  ZALLOC(strm, s->w_size, sizeof(Pos));
;;;289        s->head   = (Posf *)  ZALLOC(strm, s->hash_size, sizeof(Pos));
;;;290    
;;;291        s->lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */
;;;292    
;;;293        overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);
;;;294        s->pending_buf = (uchf *) overlay;
;;;295        s->pending_buf_size = (ulg)s->lit_bufsize * (sizeof(ush)+2L);
;;;296    
;;;297        if (s->window == Z_NULL || s->prev == Z_NULL || s->head == Z_NULL ||
;;;298            s->pending_buf == Z_NULL) {
;;;299            s->status = FINISH_STATE;
;;;300            strm->msg = (char*)ERR_MSG(Z_MEM_ERROR);
;;;301            deflateEnd (strm);
;;;302            return Z_MEM_ERROR;
;;;303        }
;;;304        s->d_buf = overlay + s->lit_bufsize/sizeof(ush);
;;;305        s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;
;;;306    
;;;307        s->level = level;
;;;308        s->strategy = strategy;
;;;309        s->method = (Byte)method;
;;;310    
;;;311        return deflateReset(strm);
;;;312    }
0001ac  e8bd8ff8          POP      {r3-r11,pc}
                  |L1.432|
0001b0  b915              CBNZ     r5,|L1.440|
0001b2  f06f0001          MVN      r0,#1                 ;240
0001b6  e7f9              B        |L1.428|
                  |L1.440|
0001b8  2000              MOVS     r0,#0                 ;242
0001ba  61a8              STR      r0,[r5,#0x18]         ;242
0001bc  6a28              LDR      r0,[r5,#0x20]         ;243
0001be  b918              CBNZ     r0,|L1.456|
0001c0  489a              LDR      r0,|L1.1068|
0001c2  6228              STR      r0,[r5,#0x20]         ;244
0001c4  2000              MOVS     r0,#0                 ;245
0001c6  62a8              STR      r0,[r5,#0x28]         ;245
                  |L1.456|
0001c8  6a68              LDR      r0,[r5,#0x24]         ;247
0001ca  b908              CBNZ     r0,|L1.464|
0001cc  4898              LDR      r0,|L1.1072|
0001ce  6268              STR      r0,[r5,#0x24]         ;247
                  |L1.464|
0001d0  1c78              ADDS     r0,r7,#1              ;252
0001d2  b900              CBNZ     r0,|L1.470|
0001d4  2706              MOVS     r7,#6                 ;252
                  |L1.470|
0001d6  2e00              CMP      r6,#0                 ;255
0001d8  da03              BGE      |L1.482|
0001da  2000              MOVS     r0,#0                 ;256
0001dc  9000              STR      r0,[sp,#0]            ;256
0001de  4276              RSBS     r6,r6,#0              ;257
0001e0  e004              B        |L1.492|
                  |L1.482|
0001e2  2e0f              CMP      r6,#0xf               ;260
0001e4  dd02              BLE      |L1.492|
0001e6  2002              MOVS     r0,#2                 ;261
0001e8  9000              STR      r0,[sp,#0]            ;261
0001ea  3e10              SUBS     r6,r6,#0x10           ;262
                  |L1.492|
0001ec  f1b80f01          CMP      r8,#1                 ;265
0001f0  db13              BLT      |L1.538|
0001f2  f1b80f09          CMP      r8,#9                 ;265
0001f6  dc10              BGT      |L1.538|
0001f8  f1ba0f08          CMP      r10,#8                ;265
0001fc  d10d              BNE      |L1.538|
0001fe  2e08              CMP      r6,#8                 ;266
000200  db0b              BLT      |L1.538|
000202  2e0f              CMP      r6,#0xf               ;266
000204  dc09              BGT      |L1.538|
000206  2f00              CMP      r7,#0                 ;266
000208  db07              BLT      |L1.538|
00020a  2f09              CMP      r7,#9                 ;266
00020c  dc05              BGT      |L1.538|
00020e  f1bb0f00          CMP      r11,#0                ;267
000212  db02              BLT      |L1.538|
000214  f1bb0f04          CMP      r11,#4                ;267
000218  dd02              BLE      |L1.544|
                  |L1.538|
00021a  f06f0001          MVN      r0,#1                 ;268
00021e  e7c5              B        |L1.428|
                  |L1.544|
000220  2e08              CMP      r6,#8                 ;270
000222  d100              BNE      |L1.550|
000224  2609              MOVS     r6,#9                 ;270
                  |L1.550|
000226  f44f52b6          MOV      r2,#0x16c0            ;271
00022a  2101              MOVS     r1,#1                 ;271
00022c  6a2b              LDR      r3,[r5,#0x20]         ;271
00022e  6aa8              LDR      r0,[r5,#0x28]         ;271
000230  4798              BLX      r3                    ;271
000232  4604              MOV      r4,r0                 ;271
000234  b914              CBNZ     r4,|L1.572|
000236  f06f0003          MVN      r0,#3                 ;272
00023a  e7b7              B        |L1.428|
                  |L1.572|
00023c  61ec              STR      r4,[r5,#0x1c]         ;273
00023e  6025              STR      r5,[r4,#0]            ;274
000240  9800              LDR      r0,[sp,#0]            ;276
000242  61a0              STR      r0,[r4,#0x18]         ;276
000244  2000              MOVS     r0,#0                 ;277
000246  61e0              STR      r0,[r4,#0x1c]         ;277
000248  6326              STR      r6,[r4,#0x30]         ;278
00024a  f8941030          LDRB     r1,[r4,#0x30]         ;279
00024e  2001              MOVS     r0,#1                 ;279
000250  4088              LSLS     r0,r0,r1              ;279
000252  62e0              STR      r0,[r4,#0x2c]         ;279
000254  6ae0              LDR      r0,[r4,#0x2c]         ;280
000256  1e40              SUBS     r0,r0,#1              ;280
000258  6360              STR      r0,[r4,#0x34]         ;280
00025a  f1080007          ADD      r0,r8,#7              ;282
00025e  6520              STR      r0,[r4,#0x50]         ;282
000260  f8941050          LDRB     r1,[r4,#0x50]         ;283
000264  2001              MOVS     r0,#1                 ;283
000266  4088              LSLS     r0,r0,r1              ;283
000268  64e0              STR      r0,[r4,#0x4c]         ;283
00026a  6ce0              LDR      r0,[r4,#0x4c]         ;284
00026c  1e40              SUBS     r0,r0,#1              ;284
00026e  6560              STR      r0,[r4,#0x54]         ;284
000270  6d20              LDR      r0,[r4,#0x50]         ;285
000272  1c80              ADDS     r0,r0,#2              ;285
000274  2103              MOVS     r1,#3                 ;285
000276  fbb0f0f1          UDIV     r0,r0,r1              ;285
00027a  65a0              STR      r0,[r4,#0x58]         ;285
00027c  6ae1              LDR      r1,[r4,#0x2c]         ;287
00027e  2202              MOVS     r2,#2                 ;287
000280  6a2b              LDR      r3,[r5,#0x20]         ;287
000282  6aa8              LDR      r0,[r5,#0x28]         ;287
000284  4798              BLX      r3                    ;287
000286  63a0              STR      r0,[r4,#0x38]         ;287
000288  6ae1              LDR      r1,[r4,#0x2c]         ;288
00028a  2202              MOVS     r2,#2                 ;288
00028c  6a2b              LDR      r3,[r5,#0x20]         ;288
00028e  6aa8              LDR      r0,[r5,#0x28]         ;288
000290  4798              BLX      r3                    ;288
000292  6420              STR      r0,[r4,#0x40]         ;288
000294  6ce1              LDR      r1,[r4,#0x4c]         ;289
000296  2202              MOVS     r2,#2                 ;289
000298  6a2b              LDR      r3,[r5,#0x20]         ;289
00029a  6aa8              LDR      r0,[r5,#0x28]         ;289
00029c  4798              BLX      r3                    ;289
00029e  6460              STR      r0,[r4,#0x44]         ;289
0002a0  f1080006          ADD      r0,r8,#6              ;291
0002a4  2101              MOVS     r1,#1                 ;291
0002a6  fa01f000          LSL      r0,r1,r0              ;291
0002aa  f241619c          MOV      r1,#0x169c            ;291
0002ae  5108              STR      r0,[r1,r4]            ;291
0002b0  460a              MOV      r2,r1                 ;293
0002b2  5911              LDR      r1,[r2,r4]            ;293
0002b4  2204              MOVS     r2,#4                 ;293
0002b6  6a2b              LDR      r3,[r5,#0x20]         ;293
0002b8  6aa8              LDR      r0,[r5,#0x28]         ;293
0002ba  4798              BLX      r3                    ;293
0002bc  4681              MOV      r9,r0                 ;293
0002be  f8c49008          STR      r9,[r4,#8]            ;294
0002c2  f241609c          MOV      r0,#0x169c            ;295
0002c6  5900              LDR      r0,[r0,r4]            ;295
0002c8  0080              LSLS     r0,r0,#2              ;295
0002ca  60e0              STR      r0,[r4,#0xc]          ;295
0002cc  6ba0              LDR      r0,[r4,#0x38]         ;297
0002ce  b128              CBZ      r0,|L1.732|
0002d0  6c20              LDR      r0,[r4,#0x40]         ;297
0002d2  b118              CBZ      r0,|L1.732|
0002d4  6c60              LDR      r0,[r4,#0x44]         ;297
0002d6  b108              CBZ      r0,|L1.732|
0002d8  68a0              LDR      r0,[r4,#8]            ;298
0002da  b958              CBNZ     r0,|L1.756|
                  |L1.732|
0002dc  f240209a          MOV      r0,#0x29a             ;299
0002e0  6060              STR      r0,[r4,#4]            ;299
0002e2  4854              LDR      r0,|L1.1076|
0002e4  6980              LDR      r0,[r0,#0x18]         ;300  ; z_errmsg
0002e6  61a8              STR      r0,[r5,#0x18]         ;300
0002e8  4628              MOV      r0,r5                 ;301
0002ea  f7fffffe          BL       deflateEnd
0002ee  f06f0003          MVN      r0,#3                 ;302
0002f2  e75b              B        |L1.428|
                  |L1.756|
0002f4  f241609c          MOV      r0,#0x169c            ;304
0002f8  5900              LDR      r0,[r0,r4]            ;304
0002fa  0840              LSRS     r0,r0,#1              ;304
0002fc  eb090140          ADD      r1,r9,r0,LSL #1       ;304
000300  f24160a4          MOV      r0,#0x16a4            ;304
000304  5101              STR      r1,[r0,r4]            ;304
000306  f241609c          MOV      r0,#0x169c            ;305
00030a  5900              LDR      r0,[r0,r4]            ;305
00030c  2203              MOVS     r2,#3                 ;305
00030e  68a1              LDR      r1,[r4,#8]            ;305
000310  fb021100          MLA      r1,r2,r0,r1           ;305
000314  f2416098          MOV      r0,#0x1698            ;305
000318  5101              STR      r1,[r0,r4]            ;305
00031a  f8c47084          STR      r7,[r4,#0x84]         ;307
00031e  f8c4b088          STR      r11,[r4,#0x88]        ;308
000322  f884a024          STRB     r10,[r4,#0x24]        ;309
000326  4628              MOV      r0,r5                 ;311
000328  f7fffffe          BL       deflateReset
00032c  e73e              B        |L1.428|
;;;313    
                          ENDP

                  deflateInit_ PROC
;;;203    /* ========================================================================= */
;;;204    int ZEXPORT deflateInit_(strm, level, version, stream_size)
00032e  e92d41ff          PUSH     {r0-r8,lr}
;;;205        z_streamp strm;
;;;206        int level;
;;;207        const char *version;
;;;208        int stream_size;
;;;209    {
000332  4606              MOV      r6,r0
000334  460f              MOV      r7,r1
000336  4614              MOV      r4,r2
000338  461d              MOV      r5,r3
;;;210        return deflateInit2_(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL,
00033a  2000              MOVS     r0,#0
00033c  2108              MOVS     r1,#8
00033e  230f              MOVS     r3,#0xf
000340  460a              MOV      r2,r1
000342  e9cd4502          STRD     r4,r5,[sp,#8]
000346  e9cd1000          STRD     r1,r0,[sp,#0]
00034a  4639              MOV      r1,r7
00034c  4630              MOV      r0,r6
00034e  f7fffffe          BL       deflateInit2_
;;;211                             Z_DEFAULT_STRATEGY, version, stream_size);
;;;212        /* To do: ignore strm->next_in if we use it as window */
;;;213    }
000352  b004              ADD      sp,sp,#0x10
000354  e8bd81f0          POP      {r4-r8,pc}
;;;214    
                          ENDP

                  deflateSetDictionary PROC
;;;314    /* ========================================================================= */
;;;315    int ZEXPORT deflateSetDictionary (strm, dictionary, dictLength)
000358  e92d47f0          PUSH     {r4-r10,lr}
;;;316        z_streamp strm;
;;;317        const Bytef *dictionary;
;;;318        uInt  dictLength;
;;;319    {
00035c  4605              MOV      r5,r0
00035e  4688              MOV      r8,r1
000360  4691              MOV      r9,r2
;;;320        deflate_state *s;
;;;321        uInt length = dictLength;
000362  464e              MOV      r6,r9
;;;322        uInt n;
;;;323        IPos hash_head = 0;
000364  f04f0a00          MOV      r10,#0
;;;324    
;;;325        if (strm == Z_NULL || strm->state == Z_NULL || dictionary == Z_NULL ||
000368  b185              CBZ      r5,|L1.908|
00036a  69e8              LDR      r0,[r5,#0x1c]
00036c  b170              CBZ      r0,|L1.908|
00036e  f1b80f00          CMP      r8,#0
000372  d00b              BEQ      |L1.908|
;;;326            strm->state->wrap == 2 ||
000374  69e8              LDR      r0,[r5,#0x1c]
000376  6980              LDR      r0,[r0,#0x18]
000378  2802              CMP      r0,#2
00037a  d007              BEQ      |L1.908|
;;;327            (strm->state->wrap == 1 && strm->state->status != INIT_STATE))
00037c  69e8              LDR      r0,[r5,#0x1c]
00037e  6980              LDR      r0,[r0,#0x18]
000380  2801              CMP      r0,#1
000382  d107              BNE      |L1.916|
000384  69e8              LDR      r0,[r5,#0x1c]
000386  6840              LDR      r0,[r0,#4]
000388  282a              CMP      r0,#0x2a
00038a  d003              BEQ      |L1.916|
                  |L1.908|
;;;328            return Z_STREAM_ERROR;
00038c  f06f0001          MVN      r0,#1
                  |L1.912|
;;;329    
;;;330        s = strm->state;
;;;331        if (s->wrap)
;;;332            strm->adler = adler32(strm->adler, dictionary, dictLength);
;;;333    
;;;334        if (length < MIN_MATCH) return Z_OK;
;;;335        if (length > MAX_DIST(s)) {
;;;336            length = MAX_DIST(s);
;;;337            dictionary += dictLength - length; /* use the tail of the dictionary */
;;;338        }
;;;339        zmemcpy(s->window, dictionary, length);
;;;340        s->strstart = length;
;;;341        s->block_start = (long)length;
;;;342    
;;;343        /* Insert all strings in the hash table (except for the last two bytes).
;;;344         * s->lookahead stays null, so s->ins_h will be recomputed at the next
;;;345         * call of fill_window.
;;;346         */
;;;347        s->ins_h = s->window[0];
;;;348        UPDATE_HASH(s, s->ins_h, s->window[1]);
;;;349        for (n = 0; n <= length - MIN_MATCH; n++) {
;;;350            INSERT_STRING(s, n, hash_head);
;;;351        }
;;;352        if (hash_head) hash_head = 0;  /* to make compiler happy */
;;;353        return Z_OK;
;;;354    }
000390  e8bd87f0          POP      {r4-r10,pc}
                  |L1.916|
000394  69ec              LDR      r4,[r5,#0x1c]         ;330
000396  69a0              LDR      r0,[r4,#0x18]         ;331
000398  b128              CBZ      r0,|L1.934|
00039a  464a              MOV      r2,r9                 ;332
00039c  4641              MOV      r1,r8                 ;332
00039e  6b28              LDR      r0,[r5,#0x30]         ;332
0003a0  f7fffffe          BL       adler32
0003a4  6328              STR      r0,[r5,#0x30]         ;332
                  |L1.934|
0003a6  2e03              CMP      r6,#3                 ;334
0003a8  d201              BCS      |L1.942|
0003aa  2000              MOVS     r0,#0                 ;334
0003ac  e7f0              B        |L1.912|
                  |L1.942|
0003ae  6ae0              LDR      r0,[r4,#0x2c]         ;335
0003b0  f5a07083          SUB      r0,r0,#0x106          ;335
0003b4  42b0              CMP      r0,r6                 ;335
0003b6  d205              BCS      |L1.964|
0003b8  6ae0              LDR      r0,[r4,#0x2c]         ;336
0003ba  f5a07683          SUB      r6,r0,#0x106          ;336
0003be  eba90006          SUB      r0,r9,r6              ;337
0003c2  4480              ADD      r8,r8,r0              ;337
                  |L1.964|
0003c4  4632              MOV      r2,r6                 ;339
0003c6  4641              MOV      r1,r8                 ;339
0003c8  6ba0              LDR      r0,[r4,#0x38]         ;339
0003ca  f7fffffe          BL       __aeabi_memcpy
0003ce  66e6              STR      r6,[r4,#0x6c]         ;340
0003d0  65e6              STR      r6,[r4,#0x5c]         ;341
0003d2  6ba0              LDR      r0,[r4,#0x38]         ;347
0003d4  7800              LDRB     r0,[r0,#0]            ;347
0003d6  64a0              STR      r0,[r4,#0x48]         ;347
0003d8  f8941058          LDRB     r1,[r4,#0x58]         ;348
0003dc  6ca0              LDR      r0,[r4,#0x48]         ;348
0003de  4088              LSLS     r0,r0,r1              ;348
0003e0  6ba1              LDR      r1,[r4,#0x38]         ;348
0003e2  7849              LDRB     r1,[r1,#1]            ;348
0003e4  4048              EORS     r0,r0,r1              ;348
0003e6  6d61              LDR      r1,[r4,#0x54]         ;348
0003e8  4008              ANDS     r0,r0,r1              ;348
0003ea  64a0              STR      r0,[r4,#0x48]         ;348
0003ec  2700              MOVS     r7,#0                 ;349
0003ee  e024              B        |L1.1082|
                  |L1.1008|
0003f0  f8941058          LDRB     r1,[r4,#0x58]         ;350
0003f4  6ca0              LDR      r0,[r4,#0x48]         ;350
0003f6  4088              LSLS     r0,r0,r1              ;350
0003f8  1cb9              ADDS     r1,r7,#2              ;350
0003fa  6ba2              LDR      r2,[r4,#0x38]         ;350
0003fc  5c51              LDRB     r1,[r2,r1]            ;350
0003fe  4048              EORS     r0,r0,r1              ;350
000400  6d61              LDR      r1,[r4,#0x54]         ;350
000402  4008              ANDS     r0,r0,r1              ;350
000404  64a0              STR      r0,[r4,#0x48]         ;350
000406  e9d40111          LDRD     r0,r1,[r4,#0x44]      ;350
00040a  f8301011          LDRH     r1,[r0,r1,LSL #1]     ;350
00040e  6b60              LDR      r0,[r4,#0x34]         ;350
000410  4038              ANDS     r0,r0,r7              ;350
000412  6c22              LDR      r2,[r4,#0x40]         ;350
000414  f8221010          STRH     r1,[r2,r0,LSL #1]     ;350
000418  468a              MOV      r10,r1                ;350
00041a  e9d41211          LDRD     r1,r2,[r4,#0x44]      ;350
00041e  f8217012          STRH     r7,[r1,r2,LSL #1]     ;350
000422  e009              B        |L1.1080|
                  |L1.1060|
                          DCD      configuration_table
                  |L1.1064|
                          DCD      my_version
                  |L1.1068|
                          DCD      zcalloc
                  |L1.1072|
                          DCD      zcfree
                  |L1.1076|
                          DCD      z_errmsg
                  |L1.1080|
000438  1c7f              ADDS     r7,r7,#1              ;349
                  |L1.1082|
00043a  1ef0              SUBS     r0,r6,#3              ;349
00043c  42b8              CMP      r0,r7                 ;349
00043e  d2d7              BCS      |L1.1008|
000440  f1ba0f00          CMP      r10,#0                ;352
000444  d001              BEQ      |L1.1098|
000446  f04f0a00          MOV      r10,#0                ;352
                  |L1.1098|
00044a  2000              MOVS     r0,#0                 ;353
00044c  e7a0              B        |L1.912|
;;;355    
                          ENDP

                  deflateSetHeader PROC
;;;392    /* ========================================================================= */
;;;393    int ZEXPORT deflateSetHeader (strm, head)
00044e  4602              MOV      r2,r0
;;;394        z_streamp strm;
;;;395        gz_headerp head;
;;;396    {
;;;397        if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;
000450  b10a              CBZ      r2,|L1.1110|
000452  69d0              LDR      r0,[r2,#0x1c]
000454  b910              CBNZ     r0,|L1.1116|
                  |L1.1110|
000456  f06f0001          MVN      r0,#1
                  |L1.1114|
;;;398        if (strm->state->wrap != 2) return Z_STREAM_ERROR;
;;;399        strm->state->gzhead = head;
;;;400        return Z_OK;
;;;401    }
00045a  4770              BX       lr
                  |L1.1116|
00045c  69d0              LDR      r0,[r2,#0x1c]         ;398
00045e  6980              LDR      r0,[r0,#0x18]         ;398
000460  2802              CMP      r0,#2                 ;398
000462  d002              BEQ      |L1.1130|
000464  f06f0001          MVN      r0,#1                 ;398
000468  e7f7              B        |L1.1114|
                  |L1.1130|
00046a  69d0              LDR      r0,[r2,#0x1c]         ;399
00046c  61c1              STR      r1,[r0,#0x1c]         ;399
00046e  2000              MOVS     r0,#0                 ;400
000470  e7f3              B        |L1.1114|
;;;402    
                          ENDP

                  deflatePrime PROC
;;;403    /* ========================================================================= */
;;;404    int ZEXPORT deflatePrime (strm, bits, value)
000472  b510              PUSH     {r4,lr}
;;;405        z_streamp strm;
;;;406        int bits;
;;;407        int value;
;;;408    {
000474  4603              MOV      r3,r0
;;;409        if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;
000476  b10b              CBZ      r3,|L1.1148|
000478  69d8              LDR      r0,[r3,#0x1c]
00047a  b910              CBNZ     r0,|L1.1154|
                  |L1.1148|
00047c  f06f0001          MVN      r0,#1
                  |L1.1152|
;;;410        strm->state->bi_valid = bits;
;;;411        strm->state->bi_buf = (ush)(value & ((1 << bits) - 1));
;;;412        return Z_OK;
;;;413    }
000480  bd10              POP      {r4,pc}
                  |L1.1154|
000482  69d8              LDR      r0,[r3,#0x1c]         ;410
000484  f5005080          ADD      r0,r0,#0x1000         ;410
000488  f8c016bc          STR      r1,[r0,#0x6bc]        ;410
00048c  2001              MOVS     r0,#1                 ;411
00048e  4088              LSLS     r0,r0,r1              ;411
000490  1e40              SUBS     r0,r0,#1              ;411
000492  4010              ANDS     r0,r0,r2              ;411
000494  b284              UXTH     r4,r0                 ;411
000496  69d8              LDR      r0,[r3,#0x1c]         ;411
000498  f5005080          ADD      r0,r0,#0x1000         ;411
00049c  f8a046b8          STRH     r4,[r0,#0x6b8]        ;411
0004a0  2000              MOVS     r0,#0                 ;412
0004a2  e7ed              B        |L1.1152|
;;;414    
                          ENDP

                  flush_pending PROC
;;;531     */
;;;532    local void flush_pending(strm)
0004a4  b570              PUSH     {r4-r6,lr}
;;;533        z_streamp strm;
;;;534    {
0004a6  4604              MOV      r4,r0
;;;535        unsigned len = strm->state->pending;
0004a8  69e0              LDR      r0,[r4,#0x1c]
0004aa  6945              LDR      r5,[r0,#0x14]
;;;536    
;;;537        if (len > strm->avail_out) len = strm->avail_out;
0004ac  6920              LDR      r0,[r4,#0x10]
0004ae  42a8              CMP      r0,r5
0004b0  d200              BCS      |L1.1204|
0004b2  6925              LDR      r5,[r4,#0x10]
                  |L1.1204|
;;;538        if (len == 0) return;
0004b4  b905              CBNZ     r5,|L1.1208|
                  |L1.1206|
;;;539    
;;;540        zmemcpy(strm->next_out, strm->state->pending_out, len);
;;;541        strm->next_out  += len;
;;;542        strm->state->pending_out  += len;
;;;543        strm->total_out += len;
;;;544        strm->avail_out  -= len;
;;;545        strm->state->pending -= len;
;;;546        if (strm->state->pending == 0) {
;;;547            strm->state->pending_out = strm->state->pending_buf;
;;;548        }
;;;549    }
0004b6  bd70              POP      {r4-r6,pc}
                  |L1.1208|
0004b8  69e2              LDR      r2,[r4,#0x1c]         ;540
0004ba  6911              LDR      r1,[r2,#0x10]         ;540
0004bc  462a              MOV      r2,r5                 ;540
0004be  68e0              LDR      r0,[r4,#0xc]          ;540
0004c0  f7fffffe          BL       __aeabi_memcpy
0004c4  68e0              LDR      r0,[r4,#0xc]          ;541
0004c6  4428              ADD      r0,r0,r5              ;541
0004c8  60e0              STR      r0,[r4,#0xc]          ;541
0004ca  69e0              LDR      r0,[r4,#0x1c]         ;542
0004cc  6900              LDR      r0,[r0,#0x10]         ;542
0004ce  4428              ADD      r0,r0,r5              ;542
0004d0  69e1              LDR      r1,[r4,#0x1c]         ;542
0004d2  6108              STR      r0,[r1,#0x10]         ;542
0004d4  6960              LDR      r0,[r4,#0x14]         ;543
0004d6  4428              ADD      r0,r0,r5              ;543
0004d8  6160              STR      r0,[r4,#0x14]         ;543
0004da  6920              LDR      r0,[r4,#0x10]         ;544
0004dc  1b40              SUBS     r0,r0,r5              ;544
0004de  6120              STR      r0,[r4,#0x10]         ;544
0004e0  69e0              LDR      r0,[r4,#0x1c]         ;545
0004e2  6940              LDR      r0,[r0,#0x14]         ;545
0004e4  1b40              SUBS     r0,r0,r5              ;545
0004e6  69e1              LDR      r1,[r4,#0x1c]         ;545
0004e8  6148              STR      r0,[r1,#0x14]         ;545
0004ea  69e0              LDR      r0,[r4,#0x1c]         ;546
0004ec  6940              LDR      r0,[r0,#0x14]         ;546
0004ee  b918              CBNZ     r0,|L1.1272|
0004f0  69e0              LDR      r0,[r4,#0x1c]         ;547
0004f2  6880              LDR      r0,[r0,#8]            ;547
0004f4  69e1              LDR      r1,[r4,#0x1c]         ;547
0004f6  6108              STR      r0,[r1,#0x10]         ;547
                  |L1.1272|
0004f8  bf00              NOP      
0004fa  e7dc              B        |L1.1206|
;;;550    
                          ENDP

                  putShortMSB PROC
;;;517     */
;;;518    local void putShortMSB (s, b)
0004fc  b510              PUSH     {r4,lr}
;;;519        deflate_state *s;
;;;520        uInt b;
;;;521    {
;;;522        put_byte(s, (Byte)(b >> 8));
0004fe  f3c12307          UBFX     r3,r1,#8,#8
000502  6944              LDR      r4,[r0,#0x14]
000504  1c62              ADDS     r2,r4,#1
000506  6142              STR      r2,[r0,#0x14]
000508  6882              LDR      r2,[r0,#8]
00050a  5513              STRB     r3,[r2,r4]
;;;523        put_byte(s, (Byte)(b & 0xff));
00050c  6944              LDR      r4,[r0,#0x14]
00050e  1c62              ADDS     r2,r4,#1
000510  6142              STR      r2,[r0,#0x14]
000512  6882              LDR      r2,[r0,#8]
000514  5511              STRB     r1,[r2,r4]
;;;524    }
000516  bd10              POP      {r4,pc}
;;;525    
                          ENDP

                  deflate PROC
;;;551    /* ========================================================================= */
;;;552    int ZEXPORT deflate (strm, flush)
000518  e92d47f0          PUSH     {r4-r10,lr}
;;;553        z_streamp strm;
;;;554        int flush;
;;;555    {
00051c  4605              MOV      r5,r0
00051e  460e              MOV      r6,r1
;;;556        int old_flush; /* value of flush param for previous deflate call */
;;;557        deflate_state *s;
;;;558    
;;;559        if (strm == Z_NULL || strm->state == Z_NULL ||
000520  b12d              CBZ      r5,|L1.1326|
000522  69e8              LDR      r0,[r5,#0x1c]
000524  b118              CBZ      r0,|L1.1326|
;;;560            flush > Z_FINISH || flush < 0) {
000526  2e04              CMP      r6,#4
000528  dc01              BGT      |L1.1326|
00052a  2e00              CMP      r6,#0
00052c  da03              BGE      |L1.1334|
                  |L1.1326|
;;;561            return Z_STREAM_ERROR;
00052e  f06f0001          MVN      r0,#1
                  |L1.1330|
;;;562        }
;;;563        s = strm->state;
;;;564    
;;;565        if (strm->next_out == Z_NULL ||
;;;566            (strm->next_in == Z_NULL && strm->avail_in != 0) ||
;;;567            (s->status == FINISH_STATE && flush != Z_FINISH)) {
;;;568            ERR_RETURN(strm, Z_STREAM_ERROR);
;;;569        }
;;;570        if (strm->avail_out == 0) ERR_RETURN(strm, Z_BUF_ERROR);
;;;571    
;;;572        s->strm = strm; /* just in case */
;;;573        old_flush = s->last_flush;
;;;574        s->last_flush = flush;
;;;575    
;;;576        /* Write the header */
;;;577        if (s->status == INIT_STATE) {
;;;578    #ifdef GZIP
;;;579            if (s->wrap == 2) {
;;;580                strm->adler = crc32(0L, Z_NULL, 0);
;;;581                put_byte(s, 31);
;;;582                put_byte(s, 139);
;;;583                put_byte(s, 8);
;;;584                if (s->gzhead == NULL) {
;;;585                    put_byte(s, 0);
;;;586                    put_byte(s, 0);
;;;587                    put_byte(s, 0);
;;;588                    put_byte(s, 0);
;;;589                    put_byte(s, 0);
;;;590                    put_byte(s, s->level == 9 ? 2 :
;;;591                                (s->strategy >= Z_HUFFMAN_ONLY || s->level < 2 ?
;;;592                                 4 : 0));
;;;593                    put_byte(s, OS_CODE);
;;;594                    s->status = BUSY_STATE;
;;;595                }
;;;596                else {
;;;597                    put_byte(s, (s->gzhead->text ? 1 : 0) +
;;;598                                (s->gzhead->hcrc ? 2 : 0) +
;;;599                                (s->gzhead->extra == Z_NULL ? 0 : 4) +
;;;600                                (s->gzhead->name == Z_NULL ? 0 : 8) +
;;;601                                (s->gzhead->comment == Z_NULL ? 0 : 16)
;;;602                            );
;;;603                    put_byte(s, (Byte)(s->gzhead->time & 0xff));
;;;604                    put_byte(s, (Byte)((s->gzhead->time >> 8) & 0xff));
;;;605                    put_byte(s, (Byte)((s->gzhead->time >> 16) & 0xff));
;;;606                    put_byte(s, (Byte)((s->gzhead->time >> 24) & 0xff));
;;;607                    put_byte(s, s->level == 9 ? 2 :
;;;608                                (s->strategy >= Z_HUFFMAN_ONLY || s->level < 2 ?
;;;609                                 4 : 0));
;;;610                    put_byte(s, s->gzhead->os & 0xff);
;;;611                    if (s->gzhead->extra != NULL) {
;;;612                        put_byte(s, s->gzhead->extra_len & 0xff);
;;;613                        put_byte(s, (s->gzhead->extra_len >> 8) & 0xff);
;;;614                    }
;;;615                    if (s->gzhead->hcrc)
;;;616                        strm->adler = crc32(strm->adler, s->pending_buf,
;;;617                                            s->pending);
;;;618                    s->gzindex = 0;
;;;619                    s->status = EXTRA_STATE;
;;;620                }
;;;621            }
;;;622            else
;;;623    #endif
;;;624            {
;;;625                uInt header = (Z_DEFLATED + ((s->w_bits-8)<<4)) << 8;
;;;626                uInt level_flags;
;;;627    
;;;628                if (s->strategy >= Z_HUFFMAN_ONLY || s->level < 2)
;;;629                    level_flags = 0;
;;;630                else if (s->level < 6)
;;;631                    level_flags = 1;
;;;632                else if (s->level == 6)
;;;633                    level_flags = 2;
;;;634                else
;;;635                    level_flags = 3;
;;;636                header |= (level_flags << 6);
;;;637                if (s->strstart != 0) header |= PRESET_DICT;
;;;638                header += 31 - (header % 31);
;;;639    
;;;640                s->status = BUSY_STATE;
;;;641                putShortMSB(s, header);
;;;642    
;;;643                /* Save the adler32 of the preset dictionary: */
;;;644                if (s->strstart != 0) {
;;;645                    putShortMSB(s, (uInt)(strm->adler >> 16));
;;;646                    putShortMSB(s, (uInt)(strm->adler & 0xffff));
;;;647                }
;;;648                strm->adler = adler32(0L, Z_NULL, 0);
;;;649            }
;;;650        }
;;;651    #ifdef GZIP
;;;652        if (s->status == EXTRA_STATE) {
;;;653            if (s->gzhead->extra != NULL) {
;;;654                uInt beg = s->pending;  /* start of bytes to update crc */
;;;655    
;;;656                while (s->gzindex < (s->gzhead->extra_len & 0xffff)) {
;;;657                    if (s->pending == s->pending_buf_size) {
;;;658                        if (s->gzhead->hcrc && s->pending > beg)
;;;659                            strm->adler = crc32(strm->adler, s->pending_buf + beg,
;;;660                                                s->pending - beg);
;;;661                        flush_pending(strm);
;;;662                        beg = s->pending;
;;;663                        if (s->pending == s->pending_buf_size)
;;;664                            break;
;;;665                    }
;;;666                    put_byte(s, s->gzhead->extra[s->gzindex]);
;;;667                    s->gzindex++;
;;;668                }
;;;669                if (s->gzhead->hcrc && s->pending > beg)
;;;670                    strm->adler = crc32(strm->adler, s->pending_buf + beg,
;;;671                                        s->pending - beg);
;;;672                if (s->gzindex == s->gzhead->extra_len) {
;;;673                    s->gzindex = 0;
;;;674                    s->status = NAME_STATE;
;;;675                }
;;;676            }
;;;677            else
;;;678                s->status = NAME_STATE;
;;;679        }
;;;680        if (s->status == NAME_STATE) {
;;;681            if (s->gzhead->name != NULL) {
;;;682                uInt beg = s->pending;  /* start of bytes to update crc */
;;;683                int val;
;;;684    
;;;685                do {
;;;686                    if (s->pending == s->pending_buf_size) {
;;;687                        if (s->gzhead->hcrc && s->pending > beg)
;;;688                            strm->adler = crc32(strm->adler, s->pending_buf + beg,
;;;689                                                s->pending - beg);
;;;690                        flush_pending(strm);
;;;691                        beg = s->pending;
;;;692                        if (s->pending == s->pending_buf_size) {
;;;693                            val = 1;
;;;694                            break;
;;;695                        }
;;;696                    }
;;;697                    val = s->gzhead->name[s->gzindex++];
;;;698                    put_byte(s, val);
;;;699                } while (val != 0);
;;;700                if (s->gzhead->hcrc && s->pending > beg)
;;;701                    strm->adler = crc32(strm->adler, s->pending_buf + beg,
;;;702                                        s->pending - beg);
;;;703                if (val == 0) {
;;;704                    s->gzindex = 0;
;;;705                    s->status = COMMENT_STATE;
;;;706                }
;;;707            }
;;;708            else
;;;709                s->status = COMMENT_STATE;
;;;710        }
;;;711        if (s->status == COMMENT_STATE) {
;;;712            if (s->gzhead->comment != NULL) {
;;;713                uInt beg = s->pending;  /* start of bytes to update crc */
;;;714                int val;
;;;715    
;;;716                do {
;;;717                    if (s->pending == s->pending_buf_size) {
;;;718                        if (s->gzhead->hcrc && s->pending > beg)
;;;719                            strm->adler = crc32(strm->adler, s->pending_buf + beg,
;;;720                                                s->pending - beg);
;;;721                        flush_pending(strm);
;;;722                        beg = s->pending;
;;;723                        if (s->pending == s->pending_buf_size) {
;;;724                            val = 1;
;;;725                            break;
;;;726                        }
;;;727                    }
;;;728                    val = s->gzhead->comment[s->gzindex++];
;;;729                    put_byte(s, val);
;;;730                } while (val != 0);
;;;731                if (s->gzhead->hcrc && s->pending > beg)
;;;732                    strm->adler = crc32(strm->adler, s->pending_buf + beg,
;;;733                                        s->pending - beg);
;;;734                if (val == 0)
;;;735                    s->status = HCRC_STATE;
;;;736            }
;;;737            else
;;;738                s->status = HCRC_STATE;
;;;739        }
;;;740        if (s->status == HCRC_STATE) {
;;;741            if (s->gzhead->hcrc) {
;;;742                if (s->pending + 2 > s->pending_buf_size)
;;;743                    flush_pending(strm);
;;;744                if (s->pending + 2 <= s->pending_buf_size) {
;;;745                    put_byte(s, (Byte)(strm->adler & 0xff));
;;;746                    put_byte(s, (Byte)((strm->adler >> 8) & 0xff));
;;;747                    strm->adler = crc32(0L, Z_NULL, 0);
;;;748                    s->status = BUSY_STATE;
;;;749                }
;;;750            }
;;;751            else
;;;752                s->status = BUSY_STATE;
;;;753        }
;;;754    #endif
;;;755    
;;;756        /* Flush as much pending output as possible */
;;;757        if (s->pending != 0) {
;;;758            flush_pending(strm);
;;;759            if (strm->avail_out == 0) {
;;;760                /* Since avail_out is 0, deflate will be called again with
;;;761                 * more output space, but possibly with both pending and
;;;762                 * avail_in equal to zero. There won't be anything to do,
;;;763                 * but this is not an error situation so make sure we
;;;764                 * return OK instead of BUF_ERROR at next call of deflate:
;;;765                 */
;;;766                s->last_flush = -1;
;;;767                return Z_OK;
;;;768            }
;;;769    
;;;770        /* Make sure there is something to do and avoid duplicate consecutive
;;;771         * flushes. For repeated and useless calls with Z_FINISH, we keep
;;;772         * returning Z_STREAM_END instead of Z_BUF_ERROR.
;;;773         */
;;;774        } else if (strm->avail_in == 0 && flush <= old_flush &&
;;;775                   flush != Z_FINISH) {
;;;776            ERR_RETURN(strm, Z_BUF_ERROR);
;;;777        }
;;;778    
;;;779        /* User must not provide more input after the first FINISH: */
;;;780        if (s->status == FINISH_STATE && strm->avail_in != 0) {
;;;781            ERR_RETURN(strm, Z_BUF_ERROR);
;;;782        }
;;;783    
;;;784        /* Start a new block or continue the current one.
;;;785         */
;;;786        if (strm->avail_in != 0 || s->lookahead != 0 ||
;;;787            (flush != Z_NO_FLUSH && s->status != FINISH_STATE)) {
;;;788            block_state bstate;
;;;789    
;;;790            bstate = (*(configuration_table[s->level].func))(s, flush);
;;;791    
;;;792            if (bstate == finish_started || bstate == finish_done) {
;;;793                s->status = FINISH_STATE;
;;;794            }
;;;795            if (bstate == need_more || bstate == finish_started) {
;;;796                if (strm->avail_out == 0) {
;;;797                    s->last_flush = -1; /* avoid BUF_ERROR next call, see above */
;;;798                }
;;;799                return Z_OK;
;;;800                /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
;;;801                 * of deflate should use the same flush parameter to make sure
;;;802                 * that the flush is complete. So we don't have to output an
;;;803                 * empty block here, this will be done at next call. This also
;;;804                 * ensures that for a very small output buffer, we emit at most
;;;805                 * one empty block.
;;;806                 */
;;;807            }
;;;808            if (bstate == block_done) {
;;;809                if (flush == Z_PARTIAL_FLUSH) {
;;;810                    _tr_align(s);
;;;811                } else { /* FULL_FLUSH or SYNC_FLUSH */
;;;812                    _tr_stored_block(s, (char*)0, 0L, 0);
;;;813                    /* For a full flush, this empty block will be recognized
;;;814                     * as a special marker by inflate_sync().
;;;815                     */
;;;816                    if (flush == Z_FULL_FLUSH) {
;;;817                        CLEAR_HASH(s);             /* forget history */
;;;818                    }
;;;819                }
;;;820                flush_pending(strm);
;;;821                if (strm->avail_out == 0) {
;;;822                  s->last_flush = -1; /* avoid BUF_ERROR at next call, see above */
;;;823                  return Z_OK;
;;;824                }
;;;825            }
;;;826        }
;;;827        Assert(strm->avail_out > 0, "bug2");
;;;828    
;;;829        if (flush != Z_FINISH) return Z_OK;
;;;830        if (s->wrap <= 0) return Z_STREAM_END;
;;;831    
;;;832        /* Write the trailer */
;;;833    #ifdef GZIP
;;;834        if (s->wrap == 2) {
;;;835            put_byte(s, (Byte)(strm->adler & 0xff));
;;;836            put_byte(s, (Byte)((strm->adler >> 8) & 0xff));
;;;837            put_byte(s, (Byte)((strm->adler >> 16) & 0xff));
;;;838            put_byte(s, (Byte)((strm->adler >> 24) & 0xff));
;;;839            put_byte(s, (Byte)(strm->total_in & 0xff));
;;;840            put_byte(s, (Byte)((strm->total_in >> 8) & 0xff));
;;;841            put_byte(s, (Byte)((strm->total_in >> 16) & 0xff));
;;;842            put_byte(s, (Byte)((strm->total_in >> 24) & 0xff));
;;;843        }
;;;844        else
;;;845    #endif
;;;846        {
;;;847            putShortMSB(s, (uInt)(strm->adler >> 16));
;;;848            putShortMSB(s, (uInt)(strm->adler & 0xffff));
;;;849        }
;;;850        flush_pending(strm);
;;;851        /* If avail_out is zero, the application will call deflate again
;;;852         * to flush the rest.
;;;853         */
;;;854        if (s->wrap > 0) s->wrap = -s->wrap; /* write the trailer only once! */
;;;855        return s->pending != 0 ? Z_OK : Z_STREAM_END;
;;;856    }
000532  e8bd87f0          POP      {r4-r10,pc}
                  |L1.1334|
000536  69ec              LDR      r4,[r5,#0x1c]         ;563
000538  68e8              LDR      r0,[r5,#0xc]          ;565
00053a  b150              CBZ      r0,|L1.1362|
00053c  6828              LDR      r0,[r5,#0]            ;566
00053e  b908              CBNZ     r0,|L1.1348|
000540  6868              LDR      r0,[r5,#4]            ;566
000542  b930              CBNZ     r0,|L1.1362|
                  |L1.1348|
000544  f240219a          MOV      r1,#0x29a             ;567
000548  6860              LDR      r0,[r4,#4]            ;567
00054a  4288              CMP      r0,r1                 ;567
00054c  d107              BNE      |L1.1374|
00054e  2e04              CMP      r6,#4                 ;567
000550  d005              BEQ      |L1.1374|
                  |L1.1362|
000552  48fe              LDR      r0,|L1.2380|
000554  6900              LDR      r0,[r0,#0x10]         ;568  ; z_errmsg
000556  61a8              STR      r0,[r5,#0x18]         ;568
000558  f06f0001          MVN      r0,#1                 ;568
00055c  e7e9              B        |L1.1330|
                  |L1.1374|
00055e  6928              LDR      r0,[r5,#0x10]         ;570
000560  b928              CBNZ     r0,|L1.1390|
000562  48fa              LDR      r0,|L1.2380|
000564  69c0              LDR      r0,[r0,#0x1c]         ;570  ; z_errmsg
000566  61a8              STR      r0,[r5,#0x18]         ;570
000568  f06f0004          MVN      r0,#4                 ;570
00056c  e7e1              B        |L1.1330|
                  |L1.1390|
00056e  6025              STR      r5,[r4,#0]            ;572
000570  f8d48028          LDR      r8,[r4,#0x28]         ;573
000574  62a6              STR      r6,[r4,#0x28]         ;574
000576  6860              LDR      r0,[r4,#4]            ;577
000578  282a              CMP      r0,#0x2a              ;577
00057a  d154              BNE      |L1.1574|
00057c  69a0              LDR      r0,[r4,#0x18]         ;579
00057e  2802              CMP      r0,#2                 ;579
000580  d173              BNE      |L1.1642|
000582  2200              MOVS     r2,#0                 ;580
000584  4611              MOV      r1,r2                 ;580
000586  4610              MOV      r0,r2                 ;580
000588  f7fffffe          BL       crc32
00058c  6328              STR      r0,[r5,#0x30]         ;580
00058e  211f              MOVS     r1,#0x1f              ;581
000590  6962              LDR      r2,[r4,#0x14]         ;581
000592  1c50              ADDS     r0,r2,#1              ;581
000594  6160              STR      r0,[r4,#0x14]         ;581
000596  68a0              LDR      r0,[r4,#8]            ;581
000598  5481              STRB     r1,[r0,r2]            ;581
00059a  218b              MOVS     r1,#0x8b              ;582
00059c  6962              LDR      r2,[r4,#0x14]         ;582
00059e  1c50              ADDS     r0,r2,#1              ;582
0005a0  6160              STR      r0,[r4,#0x14]         ;582
0005a2  68a0              LDR      r0,[r4,#8]            ;582
0005a4  5481              STRB     r1,[r0,r2]            ;582
0005a6  2108              MOVS     r1,#8                 ;583
0005a8  6962              LDR      r2,[r4,#0x14]         ;583
0005aa  1c50              ADDS     r0,r2,#1              ;583
0005ac  6160              STR      r0,[r4,#0x14]         ;583
0005ae  68a0              LDR      r0,[r4,#8]            ;583
0005b0  5481              STRB     r1,[r0,r2]            ;583
0005b2  69e0              LDR      r0,[r4,#0x1c]         ;584
0005b4  bbc0              CBNZ     r0,|L1.1576|
0005b6  2100              MOVS     r1,#0                 ;585
0005b8  6962              LDR      r2,[r4,#0x14]         ;585
0005ba  1c50              ADDS     r0,r2,#1              ;585
0005bc  6160              STR      r0,[r4,#0x14]         ;585
0005be  68a0              LDR      r0,[r4,#8]            ;585
0005c0  5481              STRB     r1,[r0,r2]            ;585
0005c2  6962              LDR      r2,[r4,#0x14]         ;586
0005c4  1c50              ADDS     r0,r2,#1              ;586
0005c6  6160              STR      r0,[r4,#0x14]         ;586
0005c8  68a0              LDR      r0,[r4,#8]            ;586
0005ca  5481              STRB     r1,[r0,r2]            ;586
0005cc  6962              LDR      r2,[r4,#0x14]         ;587
0005ce  1c50              ADDS     r0,r2,#1              ;587
0005d0  6160              STR      r0,[r4,#0x14]         ;587
0005d2  68a0              LDR      r0,[r4,#8]            ;587
0005d4  5481              STRB     r1,[r0,r2]            ;587
0005d6  6962              LDR      r2,[r4,#0x14]         ;588
0005d8  1c50              ADDS     r0,r2,#1              ;588
0005da  6160              STR      r0,[r4,#0x14]         ;588
0005dc  68a0              LDR      r0,[r4,#8]            ;588
0005de  5481              STRB     r1,[r0,r2]            ;588
0005e0  6962              LDR      r2,[r4,#0x14]         ;589
0005e2  1c50              ADDS     r0,r2,#1              ;589
0005e4  6160              STR      r0,[r4,#0x14]         ;589
0005e6  68a0              LDR      r0,[r4,#8]            ;589
0005e8  5481              STRB     r1,[r0,r2]            ;589
0005ea  f8d40084          LDR      r0,[r4,#0x84]         ;590
0005ee  2809              CMP      r0,#9                 ;590
0005f0  d101              BNE      |L1.1526|
0005f2  2102              MOVS     r1,#2                 ;590
0005f4  e00a              B        |L1.1548|
                  |L1.1526|
0005f6  f8d40088          LDR      r0,[r4,#0x88]         ;590
0005fa  2802              CMP      r0,#2                 ;590
0005fc  da03              BGE      |L1.1542|
0005fe  f8d40084          LDR      r0,[r4,#0x84]         ;590
000602  2802              CMP      r0,#2                 ;590
000604  da01              BGE      |L1.1546|
                  |L1.1542|
000606  2104              MOVS     r1,#4                 ;590
000608  e000              B        |L1.1548|
                  |L1.1546|
00060a  2100              MOVS     r1,#0                 ;590
                  |L1.1548|
00060c  6962              LDR      r2,[r4,#0x14]         ;590
00060e  1c50              ADDS     r0,r2,#1              ;590
000610  6160              STR      r0,[r4,#0x14]         ;590
000612  68a0              LDR      r0,[r4,#8]            ;590
000614  5481              STRB     r1,[r0,r2]            ;590
000616  2103              MOVS     r1,#3                 ;593
000618  6962              LDR      r2,[r4,#0x14]         ;593
00061a  1c50              ADDS     r0,r2,#1              ;593
00061c  6160              STR      r0,[r4,#0x14]         ;593
00061e  68a0              LDR      r0,[r4,#8]            ;593
000620  5481              STRB     r1,[r0,r2]            ;593
000622  2071              MOVS     r0,#0x71              ;594
000624  6060              STR      r0,[r4,#4]            ;594
                  |L1.1574|
000626  e0cf              B        |L1.1992|
                  |L1.1576|
000628  e7ff              B        |L1.1578|
                  |L1.1578|
00062a  69e0              LDR      r0,[r4,#0x1c]         ;597
00062c  6800              LDR      r0,[r0,#0]            ;597
00062e  b108              CBZ      r0,|L1.1588|
000630  2001              MOVS     r0,#1                 ;597
000632  e000              B        |L1.1590|
                  |L1.1588|
000634  2000              MOVS     r0,#0                 ;597
                  |L1.1590|
000636  69e1              LDR      r1,[r4,#0x1c]         ;597
000638  6ac9              LDR      r1,[r1,#0x2c]         ;597
00063a  b109              CBZ      r1,|L1.1600|
00063c  2102              MOVS     r1,#2                 ;597
00063e  e000              B        |L1.1602|
                  |L1.1600|
000640  2100              MOVS     r1,#0                 ;597
                  |L1.1602|
000642  4408              ADD      r0,r0,r1              ;597
000644  69e1              LDR      r1,[r4,#0x1c]         ;597
000646  6909              LDR      r1,[r1,#0x10]         ;597
000648  b909              CBNZ     r1,|L1.1614|
00064a  2100              MOVS     r1,#0                 ;597
00064c  e000              B        |L1.1616|
                  |L1.1614|
00064e  2104              MOVS     r1,#4                 ;597
                  |L1.1616|
000650  4408              ADD      r0,r0,r1              ;597
000652  69e1              LDR      r1,[r4,#0x1c]         ;597
000654  69c9              LDR      r1,[r1,#0x1c]         ;597
000656  b909              CBNZ     r1,|L1.1628|
000658  2100              MOVS     r1,#0                 ;597
00065a  e000              B        |L1.1630|
                  |L1.1628|
00065c  2108              MOVS     r1,#8                 ;597
                  |L1.1630|
00065e  4408              ADD      r0,r0,r1              ;597
000660  69e1              LDR      r1,[r4,#0x1c]         ;597
000662  6a49              LDR      r1,[r1,#0x24]         ;597
000664  b911              CBNZ     r1,|L1.1644|
000666  2100              MOVS     r1,#0                 ;597
000668  e001              B        |L1.1646|
                  |L1.1642|
00066a  e065              B        |L1.1848|
                  |L1.1644|
00066c  2110              MOVS     r1,#0x10              ;597
                  |L1.1646|
00066e  4401              ADD      r1,r1,r0              ;597
000670  6962              LDR      r2,[r4,#0x14]         ;597
000672  1c50              ADDS     r0,r2,#1              ;597
000674  6160              STR      r0,[r4,#0x14]         ;597
000676  68a0              LDR      r0,[r4,#8]            ;597
000678  5481              STRB     r1,[r0,r2]            ;597
00067a  69e0              LDR      r0,[r4,#0x1c]         ;603
00067c  7901              LDRB     r1,[r0,#4]            ;603
00067e  6962              LDR      r2,[r4,#0x14]         ;603
000680  1c50              ADDS     r0,r2,#1              ;603
000682  6160              STR      r0,[r4,#0x14]         ;603
000684  68a0              LDR      r0,[r4,#8]            ;603
000686  5481              STRB     r1,[r0,r2]            ;603
000688  69e0              LDR      r0,[r4,#0x1c]         ;604
00068a  8880              LDRH     r0,[r0,#4]            ;604
00068c  f3c02107          UBFX     r1,r0,#8,#8           ;604
000690  6962              LDR      r2,[r4,#0x14]         ;604
000692  1c50              ADDS     r0,r2,#1              ;604
000694  6160              STR      r0,[r4,#0x14]         ;604
000696  68a0              LDR      r0,[r4,#8]            ;604
000698  5481              STRB     r1,[r0,r2]            ;604
00069a  69e0              LDR      r0,[r4,#0x1c]         ;605
00069c  6840              LDR      r0,[r0,#4]            ;605
00069e  f3c04107          UBFX     r1,r0,#16,#8          ;605
0006a2  6962              LDR      r2,[r4,#0x14]         ;605
0006a4  1c50              ADDS     r0,r2,#1              ;605
0006a6  6160              STR      r0,[r4,#0x14]         ;605
0006a8  68a0              LDR      r0,[r4,#8]            ;605
0006aa  5481              STRB     r1,[r0,r2]            ;605
0006ac  69e0              LDR      r0,[r4,#0x1c]         ;606
0006ae  6840              LDR      r0,[r0,#4]            ;606
0006b0  0e00              LSRS     r0,r0,#24             ;606
0006b2  6962              LDR      r2,[r4,#0x14]         ;606
0006b4  1c51              ADDS     r1,r2,#1              ;606
0006b6  6161              STR      r1,[r4,#0x14]         ;606
0006b8  68a1              LDR      r1,[r4,#8]            ;606
0006ba  5488              STRB     r0,[r1,r2]            ;606
0006bc  f8d40084          LDR      r0,[r4,#0x84]         ;607
0006c0  2809              CMP      r0,#9                 ;607
0006c2  d101              BNE      |L1.1736|
0006c4  2102              MOVS     r1,#2                 ;607
0006c6  e00a              B        |L1.1758|
                  |L1.1736|
0006c8  f8d40088          LDR      r0,[r4,#0x88]         ;607
0006cc  2802              CMP      r0,#2                 ;607
0006ce  da03              BGE      |L1.1752|
0006d0  f8d40084          LDR      r0,[r4,#0x84]         ;607
0006d4  2802              CMP      r0,#2                 ;607
0006d6  da01              BGE      |L1.1756|
                  |L1.1752|
0006d8  2104              MOVS     r1,#4                 ;607
0006da  e000              B        |L1.1758|
                  |L1.1756|
0006dc  2100              MOVS     r1,#0                 ;607
                  |L1.1758|
0006de  6962              LDR      r2,[r4,#0x14]         ;607
0006e0  1c50              ADDS     r0,r2,#1              ;607
0006e2  6160              STR      r0,[r4,#0x14]         ;607
0006e4  68a0              LDR      r0,[r4,#8]            ;607
0006e6  5481              STRB     r1,[r0,r2]            ;607
0006e8  69e0              LDR      r0,[r4,#0x1c]         ;610
0006ea  7b01              LDRB     r1,[r0,#0xc]          ;610
0006ec  6962              LDR      r2,[r4,#0x14]         ;610
0006ee  1c50              ADDS     r0,r2,#1              ;610
0006f0  6160              STR      r0,[r4,#0x14]         ;610
0006f2  68a0              LDR      r0,[r4,#8]            ;610
0006f4  5481              STRB     r1,[r0,r2]            ;610
0006f6  69e0              LDR      r0,[r4,#0x1c]         ;611
0006f8  6900              LDR      r0,[r0,#0x10]         ;611
0006fa  b178              CBZ      r0,|L1.1820|
0006fc  69e0              LDR      r0,[r4,#0x1c]         ;612
0006fe  7d01              LDRB     r1,[r0,#0x14]         ;612
000700  6962              LDR      r2,[r4,#0x14]         ;612
000702  1c50              ADDS     r0,r2,#1              ;612
000704  6160              STR      r0,[r4,#0x14]         ;612
000706  68a0              LDR      r0,[r4,#8]            ;612
000708  5481              STRB     r1,[r0,r2]            ;612
00070a  69e0              LDR      r0,[r4,#0x1c]         ;613
00070c  8a80              LDRH     r0,[r0,#0x14]         ;613
00070e  f3c02107          UBFX     r1,r0,#8,#8           ;613
000712  6962              LDR      r2,[r4,#0x14]         ;613
000714  1c50              ADDS     r0,r2,#1              ;613
000716  6160              STR      r0,[r4,#0x14]         ;613
000718  68a0              LDR      r0,[r4,#8]            ;613
00071a  5481              STRB     r1,[r0,r2]            ;613
                  |L1.1820|
00071c  69e0              LDR      r0,[r4,#0x1c]         ;615
00071e  6ac0              LDR      r0,[r0,#0x2c]         ;615
000720  b128              CBZ      r0,|L1.1838|
000722  6962              LDR      r2,[r4,#0x14]         ;616
000724  68a1              LDR      r1,[r4,#8]            ;616
000726  6b28              LDR      r0,[r5,#0x30]         ;616
000728  f7fffffe          BL       crc32
00072c  6328              STR      r0,[r5,#0x30]         ;616
                  |L1.1838|
00072e  2000              MOVS     r0,#0                 ;618
000730  6220              STR      r0,[r4,#0x20]         ;618
000732  2045              MOVS     r0,#0x45              ;619
000734  6060              STR      r0,[r4,#4]            ;619
000736  e047              B        |L1.1992|
                  |L1.1848|
000738  6b20              LDR      r0,[r4,#0x30]         ;625
00073a  3808              SUBS     r0,r0,#8              ;625
00073c  2108              MOVS     r1,#8                 ;625
00073e  eb011000          ADD      r0,r1,r0,LSL #4       ;625
000742  0207              LSLS     r7,r0,#8              ;625
000744  f8d40088          LDR      r0,[r4,#0x88]         ;628
000748  2802              CMP      r0,#2                 ;628
00074a  da03              BGE      |L1.1876|
00074c  f8d40084          LDR      r0,[r4,#0x84]         ;628
000750  2802              CMP      r0,#2                 ;628
000752  da02              BGE      |L1.1882|
                  |L1.1876|
000754  f04f0900          MOV      r9,#0                 ;629
000758  e00f              B        |L1.1914|
                  |L1.1882|
00075a  f8d40084          LDR      r0,[r4,#0x84]         ;630
00075e  2806              CMP      r0,#6                 ;630
000760  da02              BGE      |L1.1896|
000762  f04f0901          MOV      r9,#1                 ;631
000766  e008              B        |L1.1914|
                  |L1.1896|
000768  f8d40084          LDR      r0,[r4,#0x84]         ;632
00076c  2806              CMP      r0,#6                 ;632
00076e  d102              BNE      |L1.1910|
000770  f04f0902          MOV      r9,#2                 ;633
000774  e001              B        |L1.1914|
                  |L1.1910|
000776  f04f0903          MOV      r9,#3                 ;635
                  |L1.1914|
00077a  ea471789          ORR      r7,r7,r9,LSL #6       ;636
00077e  6ee0              LDR      r0,[r4,#0x6c]         ;637
000780  b108              CBZ      r0,|L1.1926|
000782  f0470720          ORR      r7,r7,#0x20           ;637
                  |L1.1926|
000786  201f              MOVS     r0,#0x1f              ;638
000788  fbb7f1f0          UDIV     r1,r7,r0              ;638
00078c  fb007011          MLS      r0,r0,r1,r7           ;638
000790  f1c0001f          RSB      r0,r0,#0x1f           ;638
000794  4407              ADD      r7,r7,r0              ;638
000796  2071              MOVS     r0,#0x71              ;640
000798  6060              STR      r0,[r4,#4]            ;640
00079a  4639              MOV      r1,r7                 ;641
00079c  4620              MOV      r0,r4                 ;641
00079e  f7fffffe          BL       putShortMSB
0007a2  6ee0              LDR      r0,[r4,#0x6c]         ;644
0007a4  b148              CBZ      r0,|L1.1978|
0007a6  6b28              LDR      r0,[r5,#0x30]         ;645
0007a8  0c01              LSRS     r1,r0,#16             ;645
0007aa  4620              MOV      r0,r4                 ;645
0007ac  f7fffffe          BL       putShortMSB
0007b0  8e28              LDRH     r0,[r5,#0x30]         ;646
0007b2  b281              UXTH     r1,r0                 ;646
0007b4  4620              MOV      r0,r4                 ;646
0007b6  f7fffffe          BL       putShortMSB
                  |L1.1978|
0007ba  2200              MOVS     r2,#0                 ;648
0007bc  4611              MOV      r1,r2                 ;648
0007be  4610              MOV      r0,r2                 ;648
0007c0  f7fffffe          BL       adler32
0007c4  6328              STR      r0,[r5,#0x30]         ;648
0007c6  bf00              NOP                            ;649
                  |L1.1992|
0007c8  6860              LDR      r0,[r4,#4]            ;652
0007ca  2845              CMP      r0,#0x45              ;652
0007cc  d14e              BNE      |L1.2156|
0007ce  69e0              LDR      r0,[r4,#0x1c]         ;653
0007d0  6900              LDR      r0,[r0,#0x10]         ;653
0007d2  b3e8              CBZ      r0,|L1.2128|
0007d4  6967              LDR      r7,[r4,#0x14]         ;654
0007d6  e026              B        |L1.2086|
                  |L1.2008|
0007d8  68e1              LDR      r1,[r4,#0xc]          ;657
0007da  6960              LDR      r0,[r4,#0x14]         ;657
0007dc  4288              CMP      r0,r1                 ;657
0007de  d116              BNE      |L1.2062|
0007e0  69e0              LDR      r0,[r4,#0x1c]         ;658
0007e2  6ac0              LDR      r0,[r0,#0x2c]         ;658
0007e4  b150              CBZ      r0,|L1.2044|
0007e6  6960              LDR      r0,[r4,#0x14]         ;658
0007e8  42b8              CMP      r0,r7                 ;658
0007ea  d907              BLS      |L1.2044|
0007ec  6963              LDR      r3,[r4,#0x14]         ;659
0007ee  1bda              SUBS     r2,r3,r7              ;659
0007f0  68a3              LDR      r3,[r4,#8]            ;659
0007f2  19d9              ADDS     r1,r3,r7              ;659
0007f4  6b28              LDR      r0,[r5,#0x30]         ;659
0007f6  f7fffffe          BL       crc32
0007fa  6328              STR      r0,[r5,#0x30]         ;659
                  |L1.2044|
0007fc  4628              MOV      r0,r5                 ;661
0007fe  f7fffffe          BL       flush_pending
000802  6967              LDR      r7,[r4,#0x14]         ;662
000804  68e1              LDR      r1,[r4,#0xc]          ;663
000806  6960              LDR      r0,[r4,#0x14]         ;663
000808  4288              CMP      r0,r1                 ;663
00080a  d100              BNE      |L1.2062|
00080c  e011              B        |L1.2098|
                  |L1.2062|
00080e  69e0              LDR      r0,[r4,#0x1c]         ;666
000810  6900              LDR      r0,[r0,#0x10]         ;666
000812  6a21              LDR      r1,[r4,#0x20]         ;666
000814  5c41              LDRB     r1,[r0,r1]            ;666
000816  6962              LDR      r2,[r4,#0x14]         ;666
000818  1c50              ADDS     r0,r2,#1              ;666
00081a  6160              STR      r0,[r4,#0x14]         ;666
00081c  68a0              LDR      r0,[r4,#8]            ;666
00081e  5481              STRB     r1,[r0,r2]            ;666
000820  6a20              LDR      r0,[r4,#0x20]         ;667
000822  1c40              ADDS     r0,r0,#1              ;667
000824  6220              STR      r0,[r4,#0x20]         ;667
                  |L1.2086|
000826  e9d41007          LDRD     r1,r0,[r4,#0x1c]      ;656
00082a  8a89              LDRH     r1,[r1,#0x14]         ;656
00082c  b289              UXTH     r1,r1                 ;656
00082e  4288              CMP      r0,r1                 ;656
000830  d3d2              BCC      |L1.2008|
                  |L1.2098|
000832  bf00              NOP                            ;664
000834  69e0              LDR      r0,[r4,#0x1c]         ;669
000836  6ac0              LDR      r0,[r0,#0x2c]         ;669
000838  b160              CBZ      r0,|L1.2132|
00083a  6960              LDR      r0,[r4,#0x14]         ;669
00083c  42b8              CMP      r0,r7                 ;669
00083e  d909              BLS      |L1.2132|
000840  6963              LDR      r3,[r4,#0x14]         ;670
000842  1bda              SUBS     r2,r3,r7              ;670
000844  68a3              LDR      r3,[r4,#8]            ;670
000846  19d9              ADDS     r1,r3,r7              ;670
000848  6b28              LDR      r0,[r5,#0x30]         ;670
00084a  f7fffffe          BL       crc32
00084e  e000              B        |L1.2130|
                  |L1.2128|
000850  e00a              B        |L1.2152|
                  |L1.2130|
000852  6328              STR      r0,[r5,#0x30]         ;670
                  |L1.2132|
000854  e9d41007          LDRD     r1,r0,[r4,#0x1c]      ;672
000858  6949              LDR      r1,[r1,#0x14]         ;672
00085a  4288              CMP      r0,r1                 ;672
00085c  d103              BNE      |L1.2150|
00085e  2000              MOVS     r0,#0                 ;673
000860  6220              STR      r0,[r4,#0x20]         ;673
000862  2049              MOVS     r0,#0x49              ;674
000864  6060              STR      r0,[r4,#4]            ;674
                  |L1.2150|
000866  e001              B        |L1.2156|
                  |L1.2152|
000868  2049              MOVS     r0,#0x49              ;678
00086a  6060              STR      r0,[r4,#4]            ;678
                  |L1.2156|
00086c  6860              LDR      r0,[r4,#4]            ;680
00086e  2849              CMP      r0,#0x49              ;680
000870  d14c              BNE      |L1.2316|
000872  69e0              LDR      r0,[r4,#0x1c]         ;681
000874  69c0              LDR      r0,[r0,#0x1c]         ;681
000876  b3e8              CBZ      r0,|L1.2292|
000878  6967              LDR      r7,[r4,#0x14]         ;682
00087a  bf00              NOP                            ;685
                  |L1.2172|
00087c  68e1              LDR      r1,[r4,#0xc]          ;686
00087e  6960              LDR      r0,[r4,#0x14]         ;686
000880  4288              CMP      r0,r1                 ;686
000882  d118              BNE      |L1.2230|
000884  69e0              LDR      r0,[r4,#0x1c]         ;687
000886  6ac0              LDR      r0,[r0,#0x2c]         ;687
000888  b150              CBZ      r0,|L1.2208|
00088a  6960              LDR      r0,[r4,#0x14]         ;687
00088c  42b8              CMP      r0,r7                 ;687
00088e  d907              BLS      |L1.2208|
000890  6963              LDR      r3,[r4,#0x14]         ;688
000892  1bda              SUBS     r2,r3,r7              ;688
000894  68a3              LDR      r3,[r4,#8]            ;688
000896  19d9              ADDS     r1,r3,r7              ;688
000898  6b28              LDR      r0,[r5,#0x30]         ;688
00089a  f7fffffe          BL       crc32
00089e  6328              STR      r0,[r5,#0x30]         ;688
                  |L1.2208|
0008a0  4628              MOV      r0,r5                 ;690
0008a2  f7fffffe          BL       flush_pending
0008a6  6967              LDR      r7,[r4,#0x14]         ;691
0008a8  68e1              LDR      r1,[r4,#0xc]          ;692
0008aa  6960              LDR      r0,[r4,#0x14]         ;692
0008ac  4288              CMP      r0,r1                 ;692
0008ae  d102              BNE      |L1.2230|
0008b0  f04f0901          MOV      r9,#1                 ;693
0008b4  e00f              B        |L1.2262|
                  |L1.2230|
0008b6  6a21              LDR      r1,[r4,#0x20]         ;697
0008b8  1c48              ADDS     r0,r1,#1              ;697
0008ba  6220              STR      r0,[r4,#0x20]         ;697
0008bc  69e0              LDR      r0,[r4,#0x1c]         ;697
0008be  69c0              LDR      r0,[r0,#0x1c]         ;697
0008c0  f8109001          LDRB     r9,[r0,r1]            ;697
0008c4  6961              LDR      r1,[r4,#0x14]         ;698
0008c6  1c48              ADDS     r0,r1,#1              ;698
0008c8  6160              STR      r0,[r4,#0x14]         ;698
0008ca  68a0              LDR      r0,[r4,#8]            ;698
0008cc  f8009001          STRB     r9,[r0,r1]            ;698
0008d0  f1b90f00          CMP      r9,#0                 ;699
0008d4  d1d2              BNE      |L1.2172|
                  |L1.2262|
0008d6  bf00              NOP                            ;694
0008d8  69e0              LDR      r0,[r4,#0x1c]         ;700
0008da  6ac0              LDR      r0,[r0,#0x2c]         ;700
0008dc  b160              CBZ      r0,|L1.2296|
0008de  6960              LDR      r0,[r4,#0x14]         ;700
0008e0  42b8              CMP      r0,r7                 ;700
0008e2  d909              BLS      |L1.2296|
0008e4  6963              LDR      r3,[r4,#0x14]         ;701
0008e6  1bda              SUBS     r2,r3,r7              ;701
0008e8  68a3              LDR      r3,[r4,#8]            ;701
0008ea  19d9              ADDS     r1,r3,r7              ;701
0008ec  6b28              LDR      r0,[r5,#0x30]         ;701
0008ee  f7fffffe          BL       crc32
0008f2  e000              B        |L1.2294|
                  |L1.2292|
0008f4  e008              B        |L1.2312|
                  |L1.2294|
0008f6  6328              STR      r0,[r5,#0x30]         ;701
                  |L1.2296|
0008f8  f1b90f00          CMP      r9,#0                 ;703
0008fc  d103              BNE      |L1.2310|
0008fe  2000              MOVS     r0,#0                 ;704
000900  6220              STR      r0,[r4,#0x20]         ;704
000902  205b              MOVS     r0,#0x5b              ;705
000904  6060              STR      r0,[r4,#4]            ;705
                  |L1.2310|
000906  e001              B        |L1.2316|
                  |L1.2312|
000908  205b              MOVS     r0,#0x5b              ;709
00090a  6060              STR      r0,[r4,#4]            ;709
                  |L1.2316|
00090c  6860              LDR      r0,[r4,#4]            ;711
00090e  285b              CMP      r0,#0x5b              ;711
000910  d14d              BNE      |L1.2478|
000912  69e0              LDR      r0,[r4,#0x1c]         ;712
000914  6a40              LDR      r0,[r0,#0x24]         ;712
000916  b3e8              CBZ      r0,|L1.2452|
000918  6967              LDR      r7,[r4,#0x14]         ;713
00091a  bf00              NOP                            ;716
                  |L1.2332|
00091c  68e1              LDR      r1,[r4,#0xc]          ;717
00091e  6960              LDR      r0,[r4,#0x14]         ;717
000920  4288              CMP      r0,r1                 ;717
000922  d11b              BNE      |L1.2396|
000924  69e0              LDR      r0,[r4,#0x1c]         ;718
000926  6ac0              LDR      r0,[r0,#0x2c]         ;718
000928  b150              CBZ      r0,|L1.2368|
00092a  6960              LDR      r0,[r4,#0x14]         ;718
00092c  42b8              CMP      r0,r7                 ;718
00092e  d907              BLS      |L1.2368|
000930  6963              LDR      r3,[r4,#0x14]         ;719
000932  1bda              SUBS     r2,r3,r7              ;719
000934  68a3              LDR      r3,[r4,#8]            ;719
000936  19d9              ADDS     r1,r3,r7              ;719
000938  6b28              LDR      r0,[r5,#0x30]         ;719
00093a  f7fffffe          BL       crc32
00093e  6328              STR      r0,[r5,#0x30]         ;719
                  |L1.2368|
000940  4628              MOV      r0,r5                 ;721
000942  f7fffffe          BL       flush_pending
000946  6967              LDR      r7,[r4,#0x14]         ;722
000948  68e1              LDR      r1,[r4,#0xc]          ;723
00094a  e001              B        |L1.2384|
                  |L1.2380|
                          DCD      z_errmsg
                  |L1.2384|
000950  6960              LDR      r0,[r4,#0x14]         ;723
000952  4288              CMP      r0,r1                 ;723
000954  d102              BNE      |L1.2396|
000956  f04f0901          MOV      r9,#1                 ;724
00095a  e00f              B        |L1.2428|
                  |L1.2396|
00095c  6a21              LDR      r1,[r4,#0x20]         ;728
00095e  1c48              ADDS     r0,r1,#1              ;728
000960  6220              STR      r0,[r4,#0x20]         ;728
000962  69e0              LDR      r0,[r4,#0x1c]         ;728
000964  6a40              LDR      r0,[r0,#0x24]         ;728
000966  f8109001          LDRB     r9,[r0,r1]            ;728
00096a  6961              LDR      r1,[r4,#0x14]         ;729
00096c  1c48              ADDS     r0,r1,#1              ;729
00096e  6160              STR      r0,[r4,#0x14]         ;729
000970  68a0              LDR      r0,[r4,#8]            ;729
000972  f8009001          STRB     r9,[r0,r1]            ;729
000976  f1b90f00          CMP      r9,#0                 ;730
00097a  d1cf              BNE      |L1.2332|
                  |L1.2428|
00097c  bf00              NOP                            ;725
00097e  69e0              LDR      r0,[r4,#0x1c]         ;731
000980  6ac0              LDR      r0,[r0,#0x2c]         ;731
000982  b160              CBZ      r0,|L1.2462|
000984  6960              LDR      r0,[r4,#0x14]         ;731
000986  42b8              CMP      r0,r7                 ;731
000988  d909              BLS      |L1.2462|
00098a  6963              LDR      r3,[r4,#0x14]         ;732
00098c  1bda              SUBS     r2,r3,r7              ;732
00098e  68a3              LDR      r3,[r4,#8]            ;732
000990  19d9              ADDS     r1,r3,r7              ;732
000992  e000              B        |L1.2454|
                  |L1.2452|
000994  e009              B        |L1.2474|
                  |L1.2454|
000996  6b28              LDR      r0,[r5,#0x30]         ;732
000998  f7fffffe          BL       crc32
00099c  6328              STR      r0,[r5,#0x30]         ;732
                  |L1.2462|
00099e  f1b90f00          CMP      r9,#0                 ;734
0009a2  d101              BNE      |L1.2472|
0009a4  2067              MOVS     r0,#0x67              ;735
0009a6  6060              STR      r0,[r4,#4]            ;735
                  |L1.2472|
0009a8  e001              B        |L1.2478|
                  |L1.2474|
0009aa  2067              MOVS     r0,#0x67              ;738
0009ac  6060              STR      r0,[r4,#4]            ;738
                  |L1.2478|
0009ae  6860              LDR      r0,[r4,#4]            ;740
0009b0  2867              CMP      r0,#0x67              ;740
0009b2  d129              BNE      |L1.2568|
0009b4  69e0              LDR      r0,[r4,#0x1c]         ;741
0009b6  6ac0              LDR      r0,[r0,#0x2c]         ;741
0009b8  b320              CBZ      r0,|L1.2564|
0009ba  6960              LDR      r0,[r4,#0x14]         ;742
0009bc  1c80              ADDS     r0,r0,#2              ;742
0009be  68e1              LDR      r1,[r4,#0xc]          ;742
0009c0  4288              CMP      r0,r1                 ;742
0009c2  d902              BLS      |L1.2506|
0009c4  4628              MOV      r0,r5                 ;743
0009c6  f7fffffe          BL       flush_pending
                  |L1.2506|
0009ca  6960              LDR      r0,[r4,#0x14]         ;744
0009cc  1c80              ADDS     r0,r0,#2              ;744
0009ce  68e1              LDR      r1,[r4,#0xc]          ;744
0009d0  4288              CMP      r0,r1                 ;744
0009d2  d819              BHI      |L1.2568|
0009d4  f8951030          LDRB     r1,[r5,#0x30]         ;745
0009d8  6962              LDR      r2,[r4,#0x14]         ;745
0009da  1c50              ADDS     r0,r2,#1              ;745
0009dc  6160              STR      r0,[r4,#0x14]         ;745
0009de  68a0              LDR      r0,[r4,#8]            ;745
0009e0  5481              STRB     r1,[r0,r2]            ;745
0009e2  8e28              LDRH     r0,[r5,#0x30]         ;746
0009e4  f3c02107          UBFX     r1,r0,#8,#8           ;746
0009e8  6962              LDR      r2,[r4,#0x14]         ;746
0009ea  1c50              ADDS     r0,r2,#1              ;746
0009ec  6160              STR      r0,[r4,#0x14]         ;746
0009ee  68a0              LDR      r0,[r4,#8]            ;746
0009f0  5481              STRB     r1,[r0,r2]            ;746
0009f2  2200              MOVS     r2,#0                 ;747
0009f4  4611              MOV      r1,r2                 ;747
0009f6  4610              MOV      r0,r2                 ;747
0009f8  f7fffffe          BL       crc32
0009fc  6328              STR      r0,[r5,#0x30]         ;747
0009fe  2071              MOVS     r0,#0x71              ;748
000a00  6060              STR      r0,[r4,#4]            ;748
000a02  e001              B        |L1.2568|
                  |L1.2564|
000a04  2071              MOVS     r0,#0x71              ;752
000a06  6060              STR      r0,[r4,#4]            ;752
                  |L1.2568|
000a08  6960              LDR      r0,[r4,#0x14]         ;757
000a0a  b148              CBZ      r0,|L1.2592|
000a0c  4628              MOV      r0,r5                 ;758
000a0e  f7fffffe          BL       flush_pending
000a12  6928              LDR      r0,[r5,#0x10]         ;759
000a14  b980              CBNZ     r0,|L1.2616|
000a16  f04f30ff          MOV      r0,#0xffffffff        ;766
000a1a  62a0              STR      r0,[r4,#0x28]         ;766
000a1c  2000              MOVS     r0,#0                 ;767
000a1e  e588              B        |L1.1330|
                  |L1.2592|
000a20  6868              LDR      r0,[r5,#4]            ;774
000a22  b948              CBNZ     r0,|L1.2616|
000a24  4546              CMP      r6,r8                 ;774
000a26  dc07              BGT      |L1.2616|
000a28  2e04              CMP      r6,#4                 ;775
000a2a  d005              BEQ      |L1.2616|
000a2c  48fa              LDR      r0,|L1.3608|
000a2e  69c0              LDR      r0,[r0,#0x1c]         ;776  ; z_errmsg
000a30  61a8              STR      r0,[r5,#0x18]         ;776
000a32  f06f0004          MVN      r0,#4                 ;776
000a36  e57c              B        |L1.1330|
                  |L1.2616|
000a38  f240219a          MOV      r1,#0x29a             ;780
000a3c  6860              LDR      r0,[r4,#4]            ;780
000a3e  4288              CMP      r0,r1                 ;780
000a40  d107              BNE      |L1.2642|
000a42  6868              LDR      r0,[r5,#4]            ;780
000a44  b128              CBZ      r0,|L1.2642|
000a46  48f4              LDR      r0,|L1.3608|
000a48  69c0              LDR      r0,[r0,#0x1c]         ;781  ; z_errmsg
000a4a  61a8              STR      r0,[r5,#0x18]         ;781
000a4c  f06f0004          MVN      r0,#4                 ;781
000a50  e56f              B        |L1.1330|
                  |L1.2642|
000a52  6868              LDR      r0,[r5,#4]            ;786
000a54  b938              CBNZ     r0,|L1.2662|
000a56  6f60              LDR      r0,[r4,#0x74]         ;786
000a58  b928              CBNZ     r0,|L1.2662|
000a5a  b3e6              CBZ      r6,|L1.2774|
000a5c  f240219a          MOV      r1,#0x29a             ;787
000a60  6860              LDR      r0,[r4,#4]            ;787
000a62  4288              CMP      r0,r1                 ;787
000a64  d045              BEQ      |L1.2802|
                  |L1.2662|
000a66  f8d40084          LDR      r0,[r4,#0x84]         ;790
000a6a  eb000040          ADD      r0,r0,r0,LSL #1       ;790
000a6e  49eb              LDR      r1,|L1.3612|
000a70  eb010080          ADD      r0,r1,r0,LSL #2       ;790
000a74  4631              MOV      r1,r6                 ;790
000a76  6882              LDR      r2,[r0,#8]            ;790
000a78  4620              MOV      r0,r4                 ;790
000a7a  4790              BLX      r2                    ;790
000a7c  4607              MOV      r7,r0                 ;790
000a7e  2f02              CMP      r7,#2                 ;792
000a80  d001              BEQ      |L1.2694|
000a82  2f03              CMP      r7,#3                 ;792
000a84  d102              BNE      |L1.2700|
                  |L1.2694|
000a86  f240209a          MOV      r0,#0x29a             ;793
000a8a  6060              STR      r0,[r4,#4]            ;793
                  |L1.2700|
000a8c  b10f              CBZ      r7,|L1.2706|
000a8e  2f02              CMP      r7,#2                 ;795
000a90  d106              BNE      |L1.2720|
                  |L1.2706|
000a92  6928              LDR      r0,[r5,#0x10]         ;796
000a94  b910              CBNZ     r0,|L1.2716|
000a96  f04f30ff          MOV      r0,#0xffffffff        ;797
000a9a  62a0              STR      r0,[r4,#0x28]         ;797
                  |L1.2716|
000a9c  2000              MOVS     r0,#0                 ;799
000a9e  e548              B        |L1.1330|
                  |L1.2720|
000aa0  2f01              CMP      r7,#1                 ;808
000aa2  d125              BNE      |L1.2800|
000aa4  2e01              CMP      r6,#1                 ;809
000aa6  d103              BNE      |L1.2736|
000aa8  4620              MOV      r0,r4                 ;810
000aaa  f7fffffe          BL       _tr_align
000aae  e015              B        |L1.2780|
                  |L1.2736|
000ab0  2300              MOVS     r3,#0                 ;812
000ab2  461a              MOV      r2,r3                 ;812
000ab4  4619              MOV      r1,r3                 ;812
000ab6  4620              MOV      r0,r4                 ;812
000ab8  f7fffffe          BL       _tr_stored_block
000abc  2e03              CMP      r6,#3                 ;816
000abe  d10d              BNE      |L1.2780|
000ac0  2100              MOVS     r1,#0                 ;817
000ac2  6ce0              LDR      r0,[r4,#0x4c]         ;817
000ac4  1e40              SUBS     r0,r0,#1              ;817
000ac6  6c62              LDR      r2,[r4,#0x44]         ;817
000ac8  f8221010          STRH     r1,[r2,r0,LSL #1]     ;817
000acc  6ce2              LDR      r2,[r4,#0x4c]         ;817
000ace  1e52              SUBS     r2,r2,#1              ;817
000ad0  0051              LSLS     r1,r2,#1              ;817
000ad2  6c60              LDR      r0,[r4,#0x44]         ;817
000ad4  e000              B        |L1.2776|
                  |L1.2774|
000ad6  e00c              B        |L1.2802|
                  |L1.2776|
000ad8  f7fffffe          BL       __aeabi_memclr
                  |L1.2780|
000adc  4628              MOV      r0,r5                 ;820
000ade  f7fffffe          BL       flush_pending
000ae2  6928              LDR      r0,[r5,#0x10]         ;821
000ae4  b920              CBNZ     r0,|L1.2800|
000ae6  f04f30ff          MOV      r0,#0xffffffff        ;822
000aea  62a0              STR      r0,[r4,#0x28]         ;822
000aec  2000              MOVS     r0,#0                 ;823
000aee  e520              B        |L1.1330|
                  |L1.2800|
000af0  bf00              NOP                            ;826
                  |L1.2802|
000af2  2e04              CMP      r6,#4                 ;829
000af4  d001              BEQ      |L1.2810|
000af6  2000              MOVS     r0,#0                 ;829
000af8  e51b              B        |L1.1330|
                  |L1.2810|
000afa  69a0              LDR      r0,[r4,#0x18]         ;830
000afc  2800              CMP      r0,#0                 ;830
000afe  dc01              BGT      |L1.2820|
000b00  2001              MOVS     r0,#1                 ;830
000b02  e516              B        |L1.1330|
                  |L1.2820|
000b04  69a0              LDR      r0,[r4,#0x18]         ;834
000b06  2802              CMP      r0,#2                 ;834
000b08  d13b              BNE      |L1.2946|
000b0a  f8951030          LDRB     r1,[r5,#0x30]         ;835
000b0e  6962              LDR      r2,[r4,#0x14]         ;835
000b10  1c50              ADDS     r0,r2,#1              ;835
000b12  6160              STR      r0,[r4,#0x14]         ;835
000b14  68a0              LDR      r0,[r4,#8]            ;835
000b16  5481              STRB     r1,[r0,r2]            ;835
000b18  8e28              LDRH     r0,[r5,#0x30]         ;836
000b1a  f3c02107          UBFX     r1,r0,#8,#8           ;836
000b1e  6962              LDR      r2,[r4,#0x14]         ;836
000b20  1c50              ADDS     r0,r2,#1              ;836
000b22  6160              STR      r0,[r4,#0x14]         ;836
000b24  68a0              LDR      r0,[r4,#8]            ;836
000b26  5481              STRB     r1,[r0,r2]            ;836
000b28  6b28              LDR      r0,[r5,#0x30]         ;837
000b2a  f3c04107          UBFX     r1,r0,#16,#8          ;837
000b2e  6962              LDR      r2,[r4,#0x14]         ;837
000b30  1c50              ADDS     r0,r2,#1              ;837
000b32  6160              STR      r0,[r4,#0x14]         ;837
000b34  68a0              LDR      r0,[r4,#8]            ;837
000b36  5481              STRB     r1,[r0,r2]            ;837
000b38  6b28              LDR      r0,[r5,#0x30]         ;838
000b3a  0e00              LSRS     r0,r0,#24             ;838
000b3c  6962              LDR      r2,[r4,#0x14]         ;838
000b3e  1c51              ADDS     r1,r2,#1              ;838
000b40  6161              STR      r1,[r4,#0x14]         ;838
000b42  68a1              LDR      r1,[r4,#8]            ;838
000b44  5488              STRB     r0,[r1,r2]            ;838
000b46  7a29              LDRB     r1,[r5,#8]            ;839
000b48  6962              LDR      r2,[r4,#0x14]         ;839
000b4a  1c50              ADDS     r0,r2,#1              ;839
000b4c  6160              STR      r0,[r4,#0x14]         ;839
000b4e  68a0              LDR      r0,[r4,#8]            ;839
000b50  5481              STRB     r1,[r0,r2]            ;839
000b52  8928              LDRH     r0,[r5,#8]            ;840
000b54  f3c02107          UBFX     r1,r0,#8,#8           ;840
000b58  6962              LDR      r2,[r4,#0x14]         ;840
000b5a  1c50              ADDS     r0,r2,#1              ;840
000b5c  6160              STR      r0,[r4,#0x14]         ;840
000b5e  68a0              LDR      r0,[r4,#8]            ;840
000b60  5481              STRB     r1,[r0,r2]            ;840
000b62  68a8              LDR      r0,[r5,#8]            ;841
000b64  f3c04107          UBFX     r1,r0,#16,#8          ;841
000b68  6962              LDR      r2,[r4,#0x14]         ;841
000b6a  1c50              ADDS     r0,r2,#1              ;841
000b6c  6160              STR      r0,[r4,#0x14]         ;841
000b6e  68a0              LDR      r0,[r4,#8]            ;841
000b70  5481              STRB     r1,[r0,r2]            ;841
000b72  68a8              LDR      r0,[r5,#8]            ;842
000b74  0e00              LSRS     r0,r0,#24             ;842
000b76  6962              LDR      r2,[r4,#0x14]         ;842
000b78  1c51              ADDS     r1,r2,#1              ;842
000b7a  6161              STR      r1,[r4,#0x14]         ;842
000b7c  68a1              LDR      r1,[r4,#8]            ;842
000b7e  5488              STRB     r0,[r1,r2]            ;842
000b80  e009              B        |L1.2966|
                  |L1.2946|
000b82  6b28              LDR      r0,[r5,#0x30]         ;847
000b84  0c01              LSRS     r1,r0,#16             ;847
000b86  4620              MOV      r0,r4                 ;847
000b88  f7fffffe          BL       putShortMSB
000b8c  8e28              LDRH     r0,[r5,#0x30]         ;848
000b8e  b281              UXTH     r1,r0                 ;848
000b90  4620              MOV      r0,r4                 ;848
000b92  f7fffffe          BL       putShortMSB
                  |L1.2966|
000b96  4628              MOV      r0,r5                 ;850
000b98  f7fffffe          BL       flush_pending
000b9c  69a0              LDR      r0,[r4,#0x18]         ;854
000b9e  2800              CMP      r0,#0                 ;854
000ba0  dd02              BLE      |L1.2984|
000ba2  69a0              LDR      r0,[r4,#0x18]         ;854
000ba4  4240              RSBS     r0,r0,#0              ;854
000ba6  61a0              STR      r0,[r4,#0x18]         ;854
                  |L1.2984|
000ba8  6960              LDR      r0,[r4,#0x14]         ;855
000baa  b908              CBNZ     r0,|L1.2992|
000bac  2001              MOVS     r0,#1                 ;855
000bae  e4c0              B        |L1.1330|
                  |L1.2992|
000bb0  2000              MOVS     r0,#0                 ;855
000bb2  e4be              B        |L1.1330|
;;;857    
                          ENDP

                  deflateParams PROC
;;;415    /* ========================================================================= */
;;;416    int ZEXPORT deflateParams(strm, level, strategy)
000bb4  e92d47f0          PUSH     {r4-r10,lr}
;;;417        z_streamp strm;
;;;418        int level;
;;;419        int strategy;
;;;420    {
000bb8  4606              MOV      r6,r0
000bba  460c              MOV      r4,r1
000bbc  4617              MOV      r7,r2
;;;421        deflate_state *s;
;;;422        compress_func func;
;;;423        int err = Z_OK;
000bbe  f04f0900          MOV      r9,#0
;;;424    
;;;425        if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;
000bc2  b10e              CBZ      r6,|L1.3016|
000bc4  69f0              LDR      r0,[r6,#0x1c]
000bc6  b918              CBNZ     r0,|L1.3024|
                  |L1.3016|
000bc8  f06f0001          MVN      r0,#1
                  |L1.3020|
;;;426        s = strm->state;
;;;427    
;;;428    #ifdef FASTEST
;;;429        if (level != 0) level = 1;
;;;430    #else
;;;431        if (level == Z_DEFAULT_COMPRESSION) level = 6;
;;;432    #endif
;;;433        if (level < 0 || level > 9 || strategy < 0 || strategy > Z_FIXED) {
;;;434            return Z_STREAM_ERROR;
;;;435        }
;;;436        func = configuration_table[s->level].func;
;;;437    
;;;438        if (func != configuration_table[level].func && strm->total_in != 0) {
;;;439            /* Flush the last buffer: */
;;;440            err = deflate(strm, Z_PARTIAL_FLUSH);
;;;441        }
;;;442        if (s->level != level) {
;;;443            s->level = level;
;;;444            s->max_lazy_match   = configuration_table[level].max_lazy;
;;;445            s->good_match       = configuration_table[level].good_length;
;;;446            s->nice_match       = configuration_table[level].nice_length;
;;;447            s->max_chain_length = configuration_table[level].max_chain;
;;;448        }
;;;449        s->strategy = strategy;
;;;450        return err;
;;;451    }
000bcc  e8bd87f0          POP      {r4-r10,pc}
                  |L1.3024|
000bd0  69f5              LDR      r5,[r6,#0x1c]         ;426
000bd2  1c60              ADDS     r0,r4,#1              ;431
000bd4  b900              CBNZ     r0,|L1.3032|
000bd6  2406              MOVS     r4,#6                 ;431
                  |L1.3032|
000bd8  2c00              CMP      r4,#0                 ;433
000bda  db05              BLT      |L1.3048|
000bdc  2c09              CMP      r4,#9                 ;433
000bde  dc03              BGT      |L1.3048|
000be0  2f00              CMP      r7,#0                 ;433
000be2  db01              BLT      |L1.3048|
000be4  2f04              CMP      r7,#4                 ;433
000be6  dd02              BLE      |L1.3054|
                  |L1.3048|
000be8  f06f0001          MVN      r0,#1                 ;434
000bec  e7ee              B        |L1.3020|
                  |L1.3054|
000bee  f8d50084          LDR      r0,[r5,#0x84]         ;436
000bf2  eb000040          ADD      r0,r0,r0,LSL #1       ;436
000bf6  4989              LDR      r1,|L1.3612|
000bf8  eb010080          ADD      r0,r1,r0,LSL #2       ;436
000bfc  f8d08008          LDR      r8,[r0,#8]            ;436
000c00  eb040044          ADD      r0,r4,r4,LSL #1       ;438
000c04  eb010080          ADD      r0,r1,r0,LSL #2       ;438
000c08  6880              LDR      r0,[r0,#8]            ;438
000c0a  4540              CMP      r0,r8                 ;438
000c0c  d006              BEQ      |L1.3100|
000c0e  68b0              LDR      r0,[r6,#8]            ;438
000c10  b120              CBZ      r0,|L1.3100|
000c12  2101              MOVS     r1,#1                 ;440
000c14  4630              MOV      r0,r6                 ;440
000c16  f7fffffe          BL       deflate
000c1a  4681              MOV      r9,r0                 ;440
                  |L1.3100|
000c1c  f8d50084          LDR      r0,[r5,#0x84]         ;442
000c20  42a0              CMP      r0,r4                 ;442
000c22  d01a              BEQ      |L1.3162|
000c24  357c              ADDS     r5,r5,#0x7c           ;443
000c26  60ac              STR      r4,[r5,#8]            ;443
000c28  eb040044          ADD      r0,r4,r4,LSL #1       ;444
000c2c  497b              LDR      r1,|L1.3612|
000c2e  eb010080          ADD      r0,r1,r0,LSL #2       ;444
000c32  8840              LDRH     r0,[r0,#2]            ;444
000c34  6068              STR      r0,[r5,#4]            ;444
000c36  eb040044          ADD      r0,r4,r4,LSL #1       ;445
000c3a  f8310020          LDRH     r0,[r1,r0,LSL #2]     ;445
000c3e  6128              STR      r0,[r5,#0x10]         ;445
000c40  eb040044          ADD      r0,r4,r4,LSL #1       ;446
000c44  eb010080          ADD      r0,r1,r0,LSL #2       ;446
000c48  8880              LDRH     r0,[r0,#4]            ;446
000c4a  6168              STR      r0,[r5,#0x14]         ;446
000c4c  eb040044          ADD      r0,r4,r4,LSL #1       ;447
000c50  eb010080          ADD      r0,r1,r0,LSL #2       ;447
000c54  88c0              LDRH     r0,[r0,#6]            ;447
000c56  f845097c          STR      r0,[r5],#-0x7c        ;447
                  |L1.3162|
000c5a  f8c57088          STR      r7,[r5,#0x88]         ;449
000c5e  4648              MOV      r0,r9                 ;450
000c60  e7b4              B        |L1.3020|
;;;452    
                          ENDP

                  deflateTune PROC
;;;453    /* ========================================================================= */
;;;454    int ZEXPORT deflateTune(strm, good_length, max_lazy, nice_length, max_chain)
000c62  b570              PUSH     {r4-r6,lr}
;;;455        z_streamp strm;
;;;456        int good_length;
;;;457        int max_lazy;
;;;458        int nice_length;
;;;459        int max_chain;
;;;460    {
000c64  4604              MOV      r4,r0
000c66  460d              MOV      r5,r1
000c68  9e04              LDR      r6,[sp,#0x10]
;;;461        deflate_state *s;
;;;462    
;;;463        if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;
000c6a  b10c              CBZ      r4,|L1.3184|
000c6c  69e0              LDR      r0,[r4,#0x1c]
000c6e  b910              CBNZ     r0,|L1.3190|
                  |L1.3184|
000c70  f06f0001          MVN      r0,#1
                  |L1.3188|
;;;464        s = strm->state;
;;;465        s->good_match = good_length;
;;;466        s->max_lazy_match = max_lazy;
;;;467        s->nice_match = nice_length;
;;;468        s->max_chain_length = max_chain;
;;;469        return Z_OK;
;;;470    }
000c74  bd70              POP      {r4-r6,pc}
                  |L1.3190|
000c76  69e1              LDR      r1,[r4,#0x1c]         ;464
000c78  317c              ADDS     r1,r1,#0x7c           ;465
000c7a  610d              STR      r5,[r1,#0x10]         ;465
000c7c  604a              STR      r2,[r1,#4]            ;466
000c7e  614b              STR      r3,[r1,#0x14]         ;467
000c80  f841697c          STR      r6,[r1],#-0x7c        ;468
000c84  2000              MOVS     r0,#0                 ;469
000c86  e7f5              B        |L1.3188|
;;;471    
                          ENDP

                  deflateBound PROC
;;;488     */
;;;489    uLong ZEXPORT deflateBound(strm, sourceLen)
000c88  e92d41f0          PUSH     {r4-r8,lr}
;;;490        z_streamp strm;
;;;491        uLong sourceLen;
;;;492    {
000c8c  4605              MOV      r5,r0
000c8e  460c              MOV      r4,r1
;;;493        deflate_state *s;
;;;494        uLong destLen;
;;;495    
;;;496        /* conservative upper bound */
;;;497        destLen = sourceLen +
000c90  1de0              ADDS     r0,r4,#7
000c92  eb0401d0          ADD      r1,r4,r0,LSR #3
000c96  f104003f          ADD      r0,r4,#0x3f
000c9a  eb011090          ADD      r0,r1,r0,LSR #6
000c9e  f100070b          ADD      r7,r0,#0xb
;;;498                  ((sourceLen + 7) >> 3) + ((sourceLen + 63) >> 6) + 11;
;;;499    
;;;500        /* if can't get parameters, return conservative bound */
;;;501        if (strm == Z_NULL || strm->state == Z_NULL)
000ca2  b10d              CBZ      r5,|L1.3240|
000ca4  69e8              LDR      r0,[r5,#0x1c]
000ca6  b910              CBNZ     r0,|L1.3246|
                  |L1.3240|
;;;502            return destLen;
000ca8  4638              MOV      r0,r7
                  |L1.3242|
;;;503    
;;;504        /* if not default parameters, return conservative bound */
;;;505        s = strm->state;
;;;506        if (s->w_bits != 15 || s->hash_bits != 8 + 7)
;;;507            return destLen;
;;;508    
;;;509        /* default settings: return tight bound for that case */
;;;510        return compressBound(sourceLen);
;;;511    }
000caa  e8bd81f0          POP      {r4-r8,pc}
                  |L1.3246|
000cae  69ee              LDR      r6,[r5,#0x1c]         ;505
000cb0  6b30              LDR      r0,[r6,#0x30]         ;506
000cb2  280f              CMP      r0,#0xf               ;506
000cb4  d102              BNE      |L1.3260|
000cb6  6d30              LDR      r0,[r6,#0x50]         ;506
000cb8  280f              CMP      r0,#0xf               ;506
000cba  d001              BEQ      |L1.3264|
                  |L1.3260|
000cbc  4638              MOV      r0,r7                 ;507
000cbe  e7f4              B        |L1.3242|
                  |L1.3264|
000cc0  4620              MOV      r0,r4                 ;510
000cc2  f7fffffe          BL       compressBound
000cc6  e7f0              B        |L1.3242|
;;;512    
                          ENDP

                  deflateCopy PROC
;;;893     */
;;;894    int ZEXPORT deflateCopy (dest, source)
000cc8  e92d41f0          PUSH     {r4-r8,lr}
;;;895        z_streamp dest;
;;;896        z_streamp source;
;;;897    {
000ccc  4605              MOV      r5,r0
000cce  460f              MOV      r7,r1
;;;898    #ifdef MAXSEG_64K
;;;899        return Z_STREAM_ERROR;
;;;900    #else
;;;901        deflate_state *ds;
;;;902        deflate_state *ss;
;;;903        ushf *overlay;
;;;904    
;;;905    
;;;906        if (source == Z_NULL || dest == Z_NULL || source->state == Z_NULL) {
000cd0  b117              CBZ      r7,|L1.3288|
000cd2  b10d              CBZ      r5,|L1.3288|
000cd4  69f8              LDR      r0,[r7,#0x1c]
000cd6  b918              CBNZ     r0,|L1.3296|
                  |L1.3288|
;;;907            return Z_STREAM_ERROR;
000cd8  f06f0001          MVN      r0,#1
                  |L1.3292|
;;;908        }
;;;909    
;;;910        ss = source->state;
;;;911    
;;;912        zmemcpy(dest, source, sizeof(z_stream));
;;;913    
;;;914        ds = (deflate_state *) ZALLOC(dest, 1, sizeof(deflate_state));
;;;915        if (ds == Z_NULL) return Z_MEM_ERROR;
;;;916        dest->state = (struct internal_state FAR *) ds;
;;;917        zmemcpy(ds, ss, sizeof(deflate_state));
;;;918        ds->strm = dest;
;;;919    
;;;920        ds->window = (Bytef *) ZALLOC(dest, ds->w_size, 2*sizeof(Byte));
;;;921        ds->prev   = (Posf *)  ZALLOC(dest, ds->w_size, sizeof(Pos));
;;;922        ds->head   = (Posf *)  ZALLOC(dest, ds->hash_size, sizeof(Pos));
;;;923        overlay = (ushf *) ZALLOC(dest, ds->lit_bufsize, sizeof(ush)+2);
;;;924        ds->pending_buf = (uchf *) overlay;
;;;925    
;;;926        if (ds->window == Z_NULL || ds->prev == Z_NULL || ds->head == Z_NULL ||
;;;927            ds->pending_buf == Z_NULL) {
;;;928            deflateEnd (dest);
;;;929            return Z_MEM_ERROR;
;;;930        }
;;;931        /* following zmemcpy do not work for 16-bit MSDOS */
;;;932        zmemcpy(ds->window, ss->window, ds->w_size * 2 * sizeof(Byte));
;;;933        zmemcpy(ds->prev, ss->prev, ds->w_size * sizeof(Pos));
;;;934        zmemcpy(ds->head, ss->head, ds->hash_size * sizeof(Pos));
;;;935        zmemcpy(ds->pending_buf, ss->pending_buf, (uInt)ds->pending_buf_size);
;;;936    
;;;937        ds->pending_out = ds->pending_buf + (ss->pending_out - ss->pending_buf);
;;;938        ds->d_buf = overlay + ds->lit_bufsize/sizeof(ush);
;;;939        ds->l_buf = ds->pending_buf + (1+sizeof(ush))*ds->lit_bufsize;
;;;940    
;;;941        ds->l_desc.dyn_tree = ds->dyn_ltree;
;;;942        ds->d_desc.dyn_tree = ds->dyn_dtree;
;;;943        ds->bl_desc.dyn_tree = ds->bl_tree;
;;;944    
;;;945        return Z_OK;
;;;946    #endif /* MAXSEG_64K */
;;;947    }
000cdc  e8bd81f0          POP      {r4-r8,pc}
                  |L1.3296|
000ce0  69fe              LDR      r6,[r7,#0x1c]         ;910
000ce2  2238              MOVS     r2,#0x38              ;912
000ce4  4639              MOV      r1,r7                 ;912
000ce6  4628              MOV      r0,r5                 ;912
000ce8  f7fffffe          BL       __aeabi_memcpy4
000cec  f44f52b6          MOV      r2,#0x16c0            ;914
000cf0  2101              MOVS     r1,#1                 ;914
000cf2  6a2b              LDR      r3,[r5,#0x20]         ;914
000cf4  6aa8              LDR      r0,[r5,#0x28]         ;914
000cf6  4798              BLX      r3                    ;914
000cf8  4604              MOV      r4,r0                 ;914
000cfa  b914              CBNZ     r4,|L1.3330|
000cfc  f06f0003          MVN      r0,#3                 ;915
000d00  e7ec              B        |L1.3292|
                  |L1.3330|
000d02  61ec              STR      r4,[r5,#0x1c]         ;916
000d04  f44f52b6          MOV      r2,#0x16c0            ;917
000d08  4631              MOV      r1,r6                 ;917
000d0a  4620              MOV      r0,r4                 ;917
000d0c  f7fffffe          BL       __aeabi_memcpy4
000d10  6025              STR      r5,[r4,#0]            ;918
000d12  6ae1              LDR      r1,[r4,#0x2c]         ;920
000d14  2202              MOVS     r2,#2                 ;920
000d16  6a2b              LDR      r3,[r5,#0x20]         ;920
000d18  6aa8              LDR      r0,[r5,#0x28]         ;920
000d1a  4798              BLX      r3                    ;920
000d1c  63a0              STR      r0,[r4,#0x38]         ;920
000d1e  6ae1              LDR      r1,[r4,#0x2c]         ;921
000d20  2202              MOVS     r2,#2                 ;921
000d22  6a2b              LDR      r3,[r5,#0x20]         ;921
000d24  6aa8              LDR      r0,[r5,#0x28]         ;921
000d26  4798              BLX      r3                    ;921
000d28  6420              STR      r0,[r4,#0x40]         ;921
000d2a  6ce1              LDR      r1,[r4,#0x4c]         ;922
000d2c  2202              MOVS     r2,#2                 ;922
000d2e  6a2b              LDR      r3,[r5,#0x20]         ;922
000d30  6aa8              LDR      r0,[r5,#0x28]         ;922
000d32  4798              BLX      r3                    ;922
000d34  6460              STR      r0,[r4,#0x44]         ;922
000d36  f241629c          MOV      r2,#0x169c            ;923
000d3a  5911              LDR      r1,[r2,r4]            ;923
000d3c  2204              MOVS     r2,#4                 ;923
000d3e  6a2b              LDR      r3,[r5,#0x20]         ;923
000d40  6aa8              LDR      r0,[r5,#0x28]         ;923
000d42  4798              BLX      r3                    ;923
000d44  4680              MOV      r8,r0                 ;923
000d46  f8c48008          STR      r8,[r4,#8]            ;924
000d4a  6ba0              LDR      r0,[r4,#0x38]         ;926
000d4c  b128              CBZ      r0,|L1.3418|
000d4e  6c20              LDR      r0,[r4,#0x40]         ;926
000d50  b118              CBZ      r0,|L1.3418|
000d52  6c60              LDR      r0,[r4,#0x44]         ;926
000d54  b108              CBZ      r0,|L1.3418|
000d56  68a0              LDR      r0,[r4,#8]            ;927
000d58  b928              CBNZ     r0,|L1.3430|
                  |L1.3418|
000d5a  4628              MOV      r0,r5                 ;928
000d5c  f7fffffe          BL       deflateEnd
000d60  f06f0003          MVN      r0,#3                 ;929
000d64  e7ba              B        |L1.3292|
                  |L1.3430|
000d66  6ae3              LDR      r3,[r4,#0x2c]         ;932
000d68  005a              LSLS     r2,r3,#1              ;932
000d6a  6bb1              LDR      r1,[r6,#0x38]         ;932
000d6c  6ba0              LDR      r0,[r4,#0x38]         ;932
000d6e  f7fffffe          BL       __aeabi_memcpy
000d72  6ae3              LDR      r3,[r4,#0x2c]         ;933
000d74  005a              LSLS     r2,r3,#1              ;933
000d76  6c31              LDR      r1,[r6,#0x40]         ;933
000d78  6c20              LDR      r0,[r4,#0x40]         ;933
000d7a  f7fffffe          BL       __aeabi_memcpy
000d7e  6ce3              LDR      r3,[r4,#0x4c]         ;934
000d80  005a              LSLS     r2,r3,#1              ;934
000d82  6c71              LDR      r1,[r6,#0x44]         ;934
000d84  6c60              LDR      r0,[r4,#0x44]         ;934
000d86  f7fffffe          BL       __aeabi_memcpy
000d8a  68e2              LDR      r2,[r4,#0xc]          ;935
000d8c  68b1              LDR      r1,[r6,#8]            ;935
000d8e  68a0              LDR      r0,[r4,#8]            ;935
000d90  f7fffffe          BL       __aeabi_memcpy
000d94  68b1              LDR      r1,[r6,#8]            ;937
000d96  6930              LDR      r0,[r6,#0x10]         ;937
000d98  1a40              SUBS     r0,r0,r1              ;937
000d9a  68a1              LDR      r1,[r4,#8]            ;937
000d9c  4408              ADD      r0,r0,r1              ;937
000d9e  6120              STR      r0,[r4,#0x10]         ;937
000da0  f241609c          MOV      r0,#0x169c            ;938
000da4  5900              LDR      r0,[r0,r4]            ;938
000da6  0840              LSRS     r0,r0,#1              ;938
000da8  eb080140          ADD      r1,r8,r0,LSL #1       ;938
000dac  f24160a4          MOV      r0,#0x16a4            ;938
000db0  5101              STR      r1,[r0,r4]            ;938
000db2  f241609c          MOV      r0,#0x169c            ;939
000db6  5900              LDR      r0,[r0,r4]            ;939
000db8  2203              MOVS     r2,#3                 ;939
000dba  68a1              LDR      r1,[r4,#8]            ;939
000dbc  fb021100          MLA      r1,r2,r0,r1           ;939
000dc0  f2416098          MOV      r0,#0x1698            ;939
000dc4  5101              STR      r1,[r0,r4]            ;939
000dc6  f1040094          ADD      r0,r4,#0x94           ;941
000dca  f8c40b18          STR      r0,[r4,#0xb18]        ;941
000dce  f6041088          ADD      r0,r4,#0x988          ;942
000dd2  f8c40b24          STR      r0,[r4,#0xb24]        ;942
000dd6  30f4              ADDS     r0,r0,#0xf4           ;943
000dd8  f8c40b30          STR      r0,[r4,#0xb30]        ;943
000ddc  2000              MOVS     r0,#0                 ;945
000dde  e77d              B        |L1.3292|
;;;948    
                          ENDP

                  read_buf PROC
;;;955     */
;;;956    local int read_buf(strm, buf, size)
000de0  e92d41f0          PUSH     {r4-r8,lr}
;;;957        z_streamp strm;
;;;958        Bytef *buf;
;;;959        unsigned size;
;;;960    {
000de4  4604              MOV      r4,r0
000de6  460f              MOV      r7,r1
000de8  4616              MOV      r6,r2
;;;961        unsigned len = strm->avail_in;
000dea  6865              LDR      r5,[r4,#4]
;;;962    
;;;963        if (len > size) len = size;
000dec  42b5              CMP      r5,r6
000dee  d900              BLS      |L1.3570|
000df0  4635              MOV      r5,r6
                  |L1.3570|
;;;964        if (len == 0) return 0;
000df2  b915              CBNZ     r5,|L1.3578|
000df4  2000              MOVS     r0,#0
                  |L1.3574|
;;;965    
;;;966        strm->avail_in  -= len;
;;;967    
;;;968        if (strm->state->wrap == 1) {
;;;969            strm->adler = adler32(strm->adler, strm->next_in, len);
;;;970        }
;;;971    #ifdef GZIP
;;;972        else if (strm->state->wrap == 2) {
;;;973            strm->adler = crc32(strm->adler, strm->next_in, len);
;;;974        }
;;;975    #endif
;;;976        zmemcpy(buf, strm->next_in, len);
;;;977        strm->next_in  += len;
;;;978        strm->total_in += len;
;;;979    
;;;980        return (int)len;
;;;981    }
000df6  e8bd81f0          POP      {r4-r8,pc}
                  |L1.3578|
000dfa  6860              LDR      r0,[r4,#4]            ;966
000dfc  1b40              SUBS     r0,r0,r5              ;966
000dfe  6060              STR      r0,[r4,#4]            ;966
000e00  69e0              LDR      r0,[r4,#0x1c]         ;968
000e02  6980              LDR      r0,[r0,#0x18]         ;968
000e04  2801              CMP      r0,#1                 ;968
000e06  d10b              BNE      |L1.3616|
000e08  462a              MOV      r2,r5                 ;969
000e0a  6821              LDR      r1,[r4,#0]            ;969
000e0c  6b20              LDR      r0,[r4,#0x30]         ;969
000e0e  f7fffffe          BL       adler32
000e12  6320              STR      r0,[r4,#0x30]         ;969
000e14  e00e              B        |L1.3636|
000e16  0000              DCW      0x0000
                  |L1.3608|
                          DCD      z_errmsg
                  |L1.3612|
                          DCD      configuration_table
                  |L1.3616|
000e20  69e0              LDR      r0,[r4,#0x1c]         ;972
000e22  6980              LDR      r0,[r0,#0x18]         ;972
000e24  2802              CMP      r0,#2                 ;972
000e26  d105              BNE      |L1.3636|
000e28  462a              MOV      r2,r5                 ;973
000e2a  6821              LDR      r1,[r4,#0]            ;973
000e2c  6b20              LDR      r0,[r4,#0x30]         ;973
000e2e  f7fffffe          BL       crc32
000e32  6320              STR      r0,[r4,#0x30]         ;973
                  |L1.3636|
000e34  462a              MOV      r2,r5                 ;976
000e36  4638              MOV      r0,r7                 ;976
000e38  6821              LDR      r1,[r4,#0]            ;976
000e3a  f7fffffe          BL       __aeabi_memcpy
000e3e  6820              LDR      r0,[r4,#0]            ;977
000e40  4428              ADD      r0,r0,r5              ;977
000e42  6020              STR      r0,[r4,#0]            ;977
000e44  68a0              LDR      r0,[r4,#8]            ;978
000e46  4428              ADD      r0,r0,r5              ;978
000e48  60a0              STR      r0,[r4,#8]            ;978
000e4a  4628              MOV      r0,r5                 ;980
000e4c  e7d3              B        |L1.3574|
;;;982    
                          ENDP

                  longest_match PROC
;;;1026    */
;;;1027   local uInt longest_match(s, cur_match)
000e4e  e92d4ffc          PUSH     {r2-r11,lr}
;;;1028       deflate_state *s;
;;;1029       IPos cur_match;                             /* current match */
;;;1030   {
000e52  4602              MOV      r2,r0
000e54  460d              MOV      r5,r1
;;;1031       unsigned chain_length = s->max_chain_length;/* max hash chain length */
000e56  f8d2c07c          LDR      r12,[r2,#0x7c]
;;;1032       register Bytef *scan = s->window + s->strstart; /* current string */
000e5a  f8d2e06c          LDR      lr,[r2,#0x6c]
000e5e  6b90              LDR      r0,[r2,#0x38]
000e60  eb00010e          ADD      r1,r0,lr
;;;1033       register Bytef *match;                       /* matched string */
;;;1034       register int len;                           /* length of current match */
;;;1035       int best_len = s->prev_length;              /* best match length so far */
000e64  6f94              LDR      r4,[r2,#0x78]
;;;1036       int nice_match = s->nice_match;             /* stop if match long enough */
000e66  f8d28090          LDR      r8,[r2,#0x90]
;;;1037       IPos limit = s->strstart > (IPos)MAX_DIST(s) ?
000e6a  6ad0              LDR      r0,[r2,#0x2c]
000e6c  f5a07083          SUB      r0,r0,#0x106
000e70  f8d2e06c          LDR      lr,[r2,#0x6c]
000e74  4586              CMP      lr,r0
000e76  d907              BLS      |L1.3720|
;;;1038           s->strstart - (IPos)MAX_DIST(s) : NIL;
000e78  6ad0              LDR      r0,[r2,#0x2c]
000e7a  f5a07083          SUB      r0,r0,#0x106
000e7e  f8d2e06c          LDR      lr,[r2,#0x6c]
000e82  ebae0000          SUB      r0,lr,r0
000e86  e000              B        |L1.3722|
                  |L1.3720|
000e88  2000              MOVS     r0,#0
                  |L1.3722|
000e8a  9001              STR      r0,[sp,#4]
;;;1039       /* Stop when cur_match becomes <= limit. To simplify the code,
;;;1040        * we prevent matches with the string of window index 0.
;;;1041        */
;;;1042       Posf *prev = s->prev;
000e8c  f8d29040          LDR      r9,[r2,#0x40]
;;;1043       uInt wmask = s->w_mask;
000e90  f8d2a034          LDR      r10,[r2,#0x34]
;;;1044   
;;;1045   #ifdef UNALIGNED_OK
;;;1046       /* Compare two bytes at a time. Note: this is not always beneficial.
;;;1047        * Try with and without -DUNALIGNED_OK to check.
;;;1048        */
;;;1049       register Bytef *strend = s->window + s->strstart + MAX_MATCH - 1;
;;;1050       register ush scan_start = *(ushf*)scan;
;;;1051       register ush scan_end   = *(ushf*)(scan+best_len-1);
;;;1052   #else
;;;1053       register Bytef *strend = s->window + s->strstart + MAX_MATCH;
000e94  f8d2e06c          LDR      lr,[r2,#0x6c]
000e98  6b90              LDR      r0,[r2,#0x38]
000e9a  4470              ADD      r0,r0,lr
000e9c  f5007781          ADD      r7,r0,#0x102
;;;1054       register Byte scan_end1  = scan[best_len-1];
000ea0  1e60              SUBS     r0,r4,#1
000ea2  f811b000          LDRB     r11,[r1,r0]
;;;1055       register Byte scan_end   = scan[best_len];
000ea6  5d08              LDRB     r0,[r1,r4]
000ea8  9000              STR      r0,[sp,#0]
;;;1056   #endif
;;;1057   
;;;1058       /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
;;;1059        * It is easy to get rid of this optimization if necessary.
;;;1060        */
;;;1061       Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");
;;;1062   
;;;1063       /* Do not waste too much time if we already have a good match: */
;;;1064       if (s->prev_length >= s->good_match) {
000eaa  f8d2e08c          LDR      lr,[r2,#0x8c]
000eae  6f90              LDR      r0,[r2,#0x78]
000eb0  4570              CMP      r0,lr
000eb2  d301              BCC      |L1.3768|
;;;1065           chain_length >>= 2;
000eb4  ea4f0c9c          LSR      r12,r12,#2
                  |L1.3768|
;;;1066       }
;;;1067       /* Do not look for matches beyond the end of the input. This is necessary
;;;1068        * to make deflate deterministic.
;;;1069        */
;;;1070       if ((uInt)nice_match > s->lookahead) nice_match = s->lookahead;
000eb8  6f50              LDR      r0,[r2,#0x74]
000eba  4540              CMP      r0,r8
000ebc  d201              BCS      |L1.3778|
000ebe  f8d28074          LDR      r8,[r2,#0x74]
                  |L1.3778|
;;;1071   
;;;1072       Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");
;;;1073   
;;;1074       do {
000ec2  bf00              NOP      
                  |L1.3780|
;;;1075           Assert(cur_match < s->strstart, "no future");
;;;1076           match = s->window + cur_match;
000ec4  6b90              LDR      r0,[r2,#0x38]
000ec6  1943              ADDS     r3,r0,r5
;;;1077   
;;;1078           /* Skip to next match if the match length cannot increase
;;;1079            * or if the match length is less than 2.  Note that the checks below
;;;1080            * for insufficient lookahead only occur occasionally for performance
;;;1081            * reasons.  Therefore uninitialized memory will be accessed, and
;;;1082            * conditional jumps will be made that depend on those values.
;;;1083            * However the length of the match is limited to the lookahead, so
;;;1084            * the output of deflate is not affected by the uninitialized values.
;;;1085            */
;;;1086   #if (defined(UNALIGNED_OK) && MAX_MATCH == 258)
;;;1087           /* This code assumes sizeof(unsigned short) == 2. Do not use
;;;1088            * UNALIGNED_OK if your compiler uses a different size.
;;;1089            */
;;;1090           if (*(ushf*)(match+best_len-1) != scan_end ||
;;;1091               *(ushf*)match != scan_start) continue;
;;;1092   
;;;1093           /* It is not necessary to compare scan[2] and match[2] since they are
;;;1094            * always equal when the other bytes match, given that the hash keys
;;;1095            * are equal and that HASH_BITS >= 8. Compare 2 bytes at a time at
;;;1096            * strstart+3, +5, ... up to strstart+257. We check for insufficient
;;;1097            * lookahead only every 4th comparison; the 128th check will be made
;;;1098            * at strstart+257. If MAX_MATCH-2 is not a multiple of 8, it is
;;;1099            * necessary to put more guard bytes at the end of the window, or
;;;1100            * to check more often for insufficient lookahead.
;;;1101            */
;;;1102           Assert(scan[2] == match[2], "scan[2]?");
;;;1103           scan++, match++;
;;;1104           do {
;;;1105           } while (*(ushf*)(scan+=2) == *(ushf*)(match+=2) &&
;;;1106                    *(ushf*)(scan+=2) == *(ushf*)(match+=2) &&
;;;1107                    *(ushf*)(scan+=2) == *(ushf*)(match+=2) &&
;;;1108                    *(ushf*)(scan+=2) == *(ushf*)(match+=2) &&
;;;1109                    scan < strend);
;;;1110           /* The funny "do {}" generates better code on most compilers */
;;;1111   
;;;1112           /* Here, scan <= window+strstart+257 */
;;;1113           Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");
;;;1114           if (*scan == *match) scan++;
;;;1115   
;;;1116           len = (MAX_MATCH - 1) - (int)(strend-scan);
;;;1117           scan = strend - (MAX_MATCH-1);
;;;1118   
;;;1119   #else /* UNALIGNED_OK */
;;;1120   
;;;1121           if (match[best_len]   != scan_end  ||
000ec8  f813e004          LDRB     lr,[r3,r4]
000ecc  9800              LDR      r0,[sp,#0]
000ece  4586              CMP      lr,r0
000ed0  d10f              BNE      |L1.3826|
;;;1122               match[best_len-1] != scan_end1 ||
000ed2  1e60              SUBS     r0,r4,#1
000ed4  5c18              LDRB     r0,[r3,r0]
000ed6  4558              CMP      r0,r11
000ed8  d10b              BNE      |L1.3826|
;;;1123               *match            != *scan     ||
000eda  7818              LDRB     r0,[r3,#0]
000edc  f891e000          LDRB     lr,[r1,#0]
000ee0  4570              CMP      r0,lr
000ee2  d106              BNE      |L1.3826|
;;;1124               *++match          != scan[1])      continue;
000ee4  1c58              ADDS     r0,r3,#1
000ee6  4603              MOV      r3,r0
000ee8  7800              LDRB     r0,[r0,#0]
000eea  f891e001          LDRB     lr,[r1,#1]
000eee  4570              CMP      r0,lr
000ef0  d000              BEQ      |L1.3828|
                  |L1.3826|
000ef2  e066              B        |L1.4034|
                  |L1.3828|
;;;1125   
;;;1126           /* The check at best_len-1 can be removed because it will be made
;;;1127            * again later. (This heuristic is not always a win.)
;;;1128            * It is not necessary to compare scan[2] and match[2] since they
;;;1129            * are always equal when the other bytes match, given that
;;;1130            * the hash keys are equal and that HASH_BITS >= 8.
;;;1131            */
;;;1132           scan += 2, match++;
000ef4  1c89              ADDS     r1,r1,#2
000ef6  1c5b              ADDS     r3,r3,#1
;;;1133           Assert(*scan == *match, "match[2]?");
;;;1134   
;;;1135           /* We check for insufficient lookahead only every 8th comparison;
;;;1136            * the 256th check will be made at strstart+258.
;;;1137            */
;;;1138           do {
000ef8  bf00              NOP      
                  |L1.3834|
;;;1139           } while (*++scan == *++match && *++scan == *++match &&
000efa  1c48              ADDS     r0,r1,#1
000efc  4601              MOV      r1,r0
000efe  7800              LDRB     r0,[r0,#0]
000f00  f1030e01          ADD      lr,r3,#1
000f04  4673              MOV      r3,lr
000f06  f89ee000          LDRB     lr,[lr,#0]
000f0a  4570              CMP      r0,lr
000f0c  d147              BNE      |L1.3998|
000f0e  1c48              ADDS     r0,r1,#1
000f10  4601              MOV      r1,r0
000f12  7800              LDRB     r0,[r0,#0]
000f14  f1030e01          ADD      lr,r3,#1
000f18  4673              MOV      r3,lr
000f1a  f89ee000          LDRB     lr,[lr,#0]
000f1e  4570              CMP      r0,lr
000f20  d13d              BNE      |L1.3998|
;;;1140                    *++scan == *++match && *++scan == *++match &&
000f22  1c48              ADDS     r0,r1,#1
000f24  4601              MOV      r1,r0
000f26  7800              LDRB     r0,[r0,#0]
000f28  f1030e01          ADD      lr,r3,#1
000f2c  4673              MOV      r3,lr
000f2e  f89ee000          LDRB     lr,[lr,#0]
000f32  4570              CMP      r0,lr
000f34  d133              BNE      |L1.3998|
000f36  1c48              ADDS     r0,r1,#1
000f38  4601              MOV      r1,r0
000f3a  7800              LDRB     r0,[r0,#0]
000f3c  f1030e01          ADD      lr,r3,#1
000f40  4673              MOV      r3,lr
000f42  f89ee000          LDRB     lr,[lr,#0]
000f46  4570              CMP      r0,lr
000f48  d129              BNE      |L1.3998|
;;;1141                    *++scan == *++match && *++scan == *++match &&
000f4a  1c48              ADDS     r0,r1,#1
000f4c  4601              MOV      r1,r0
000f4e  7800              LDRB     r0,[r0,#0]
000f50  f1030e01          ADD      lr,r3,#1
000f54  4673              MOV      r3,lr
000f56  f89ee000          LDRB     lr,[lr,#0]
000f5a  4570              CMP      r0,lr
000f5c  d11f              BNE      |L1.3998|
000f5e  1c48              ADDS     r0,r1,#1
000f60  4601              MOV      r1,r0
000f62  7800              LDRB     r0,[r0,#0]
000f64  f1030e01          ADD      lr,r3,#1
000f68  4673              MOV      r3,lr
000f6a  f89ee000          LDRB     lr,[lr,#0]
000f6e  4570              CMP      r0,lr
000f70  d115              BNE      |L1.3998|
;;;1142                    *++scan == *++match && *++scan == *++match &&
000f72  1c48              ADDS     r0,r1,#1
000f74  4601              MOV      r1,r0
000f76  7800              LDRB     r0,[r0,#0]
000f78  f1030e01          ADD      lr,r3,#1
000f7c  4673              MOV      r3,lr
000f7e  f89ee000          LDRB     lr,[lr,#0]
000f82  4570              CMP      r0,lr
000f84  d10b              BNE      |L1.3998|
000f86  1c48              ADDS     r0,r1,#1
000f88  4601              MOV      r1,r0
000f8a  7800              LDRB     r0,[r0,#0]
000f8c  f1030e01          ADD      lr,r3,#1
000f90  4673              MOV      r3,lr
000f92  f89ee000          LDRB     lr,[lr,#0]
000f96  4570              CMP      r0,lr
000f98  d101              BNE      |L1.3998|
;;;1143                    scan < strend);
000f9a  42b9              CMP      r1,r7
000f9c  d3ad              BCC      |L1.3834|
                  |L1.3998|
;;;1144   
;;;1145           Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");
;;;1146   
;;;1147           len = MAX_MATCH - (int)(strend - scan);
000f9e  1a78              SUBS     r0,r7,r1
000fa0  f5c07681          RSB      r6,r0,#0x102
;;;1148           scan = strend - MAX_MATCH;
000fa4  f5a77181          SUB      r1,r7,#0x102
;;;1149   
;;;1150   #endif /* UNALIGNED_OK */
;;;1151   
;;;1152           if (len > best_len) {
000fa8  42a6              CMP      r6,r4
000faa  dd09              BLE      |L1.4032|
;;;1153               s->match_start = cur_match;
000fac  6715              STR      r5,[r2,#0x70]
;;;1154               best_len = len;
000fae  4634              MOV      r4,r6
;;;1155               if (len >= nice_match) break;
000fb0  4546              CMP      r6,r8
000fb2  db00              BLT      |L1.4022|
000fb4  e013              B        |L1.4062|
                  |L1.4022|
;;;1156   #ifdef UNALIGNED_OK
;;;1157               scan_end = *(ushf*)(scan+best_len-1);
;;;1158   #else
;;;1159               scan_end1  = scan[best_len-1];
000fb6  1e60              SUBS     r0,r4,#1
000fb8  f811b000          LDRB     r11,[r1,r0]
;;;1160               scan_end   = scan[best_len];
000fbc  5d08              LDRB     r0,[r1,r4]
000fbe  9000              STR      r0,[sp,#0]
                  |L1.4032|
000fc0  bf00              NOP                            ;1124
                  |L1.4034|
;;;1161   #endif
;;;1162           }
;;;1163       } while ((cur_match = prev[cur_match & wmask]) > limit
000fc2  ea05000a          AND      r0,r5,r10
000fc6  f839e010          LDRH     lr,[r9,r0,LSL #1]
000fca  4675              MOV      r5,lr
000fcc  9801              LDR      r0,[sp,#4]
000fce  4586              CMP      lr,r0
000fd0  d905              BLS      |L1.4062|
;;;1164                && --chain_length != 0);
000fd2  f1ac0001          SUB      r0,r12,#1
000fd6  ea5f0c00          MOVS     r12,r0
000fda  f47faf73          BNE      |L1.3780|
                  |L1.4062|
000fde  bf00              NOP                            ;1155
;;;1165   
;;;1166       if ((uInt)best_len <= s->lookahead) return (uInt)best_len;
000fe0  6f50              LDR      r0,[r2,#0x74]
000fe2  42a0              CMP      r0,r4
000fe4  d302              BCC      |L1.4076|
000fe6  4620              MOV      r0,r4
                  |L1.4072|
;;;1167       return s->lookahead;
;;;1168   }
000fe8  e8bd8ffc          POP      {r2-r11,pc}
                  |L1.4076|
000fec  6f50              LDR      r0,[r2,#0x74]         ;1167
000fee  e7fb              B        |L1.4072|
;;;1169   #endif /* ASMV */
                          ENDP

                  longest_match_fast PROC
;;;1174    */
;;;1175   local uInt longest_match_fast(s, cur_match)
000ff0  b5f0              PUSH     {r4-r7,lr}
;;;1176       deflate_state *s;
;;;1177       IPos cur_match;                             /* current match */
;;;1178   {
000ff2  4603              MOV      r3,r0
000ff4  460c              MOV      r4,r1
;;;1179       register Bytef *scan = s->window + s->strstart; /* current string */
000ff6  6edf              LDR      r7,[r3,#0x6c]
000ff8  6b98              LDR      r0,[r3,#0x38]
000ffa  19c1              ADDS     r1,r0,r7
;;;1180       register Bytef *match;                       /* matched string */
;;;1181       register int len;                           /* length of current match */
;;;1182       register Bytef *strend = s->window + s->strstart + MAX_MATCH;
000ffc  6edf              LDR      r7,[r3,#0x6c]
000ffe  6b98              LDR      r0,[r3,#0x38]
001000  4438              ADD      r0,r0,r7
001002  f5007681          ADD      r6,r0,#0x102
;;;1183   
;;;1184       /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
;;;1185        * It is easy to get rid of this optimization if necessary.
;;;1186        */
;;;1187       Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");
;;;1188   
;;;1189       Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");
;;;1190   
;;;1191       Assert(cur_match < s->strstart, "no future");
;;;1192   
;;;1193       match = s->window + cur_match;
001006  6b98              LDR      r0,[r3,#0x38]
001008  1902              ADDS     r2,r0,r4
;;;1194   
;;;1195       /* Return failure if the match length is less than 2:
;;;1196        */
;;;1197       if (match[0] != scan[0] || match[1] != scan[1]) return MIN_MATCH-1;
00100a  7810              LDRB     r0,[r2,#0]
00100c  780f              LDRB     r7,[r1,#0]
00100e  42b8              CMP      r0,r7
001010  d103              BNE      |L1.4122|
001012  7850              LDRB     r0,[r2,#1]
001014  784f              LDRB     r7,[r1,#1]
001016  42b8              CMP      r0,r7
001018  d001              BEQ      |L1.4126|
                  |L1.4122|
00101a  2002              MOVS     r0,#2
                  |L1.4124|
;;;1198   
;;;1199       /* The check at best_len-1 can be removed because it will be made
;;;1200        * again later. (This heuristic is not always a win.)
;;;1201        * It is not necessary to compare scan[2] and match[2] since they
;;;1202        * are always equal when the other bytes match, given that
;;;1203        * the hash keys are equal and that HASH_BITS >= 8.
;;;1204        */
;;;1205       scan += 2, match += 2;
;;;1206       Assert(*scan == *match, "match[2]?");
;;;1207   
;;;1208       /* We check for insufficient lookahead only every 8th comparison;
;;;1209        * the 256th check will be made at strstart+258.
;;;1210        */
;;;1211       do {
;;;1212       } while (*++scan == *++match && *++scan == *++match &&
;;;1213                *++scan == *++match && *++scan == *++match &&
;;;1214                *++scan == *++match && *++scan == *++match &&
;;;1215                *++scan == *++match && *++scan == *++match &&
;;;1216                scan < strend);
;;;1217   
;;;1218       Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");
;;;1219   
;;;1220       len = MAX_MATCH - (int)(strend - scan);
;;;1221   
;;;1222       if (len < MIN_MATCH) return MIN_MATCH - 1;
;;;1223   
;;;1224       s->match_start = cur_match;
;;;1225       return (uInt)len <= s->lookahead ? (uInt)len : s->lookahead;
;;;1226   }
00101c  bdf0              POP      {r4-r7,pc}
                  |L1.4126|
00101e  1c89              ADDS     r1,r1,#2              ;1205
001020  1c92              ADDS     r2,r2,#2              ;1205
001022  bf00              NOP                            ;1211
                  |L1.4132|
001024  1c48              ADDS     r0,r1,#1              ;1212
001026  4601              MOV      r1,r0                 ;1212
001028  7807              LDRB     r7,[r0,#0]            ;1212
00102a  1c50              ADDS     r0,r2,#1              ;1212
00102c  4602              MOV      r2,r0                 ;1212
00102e  7800              LDRB     r0,[r0,#0]            ;1212
001030  4287              CMP      r7,r0                 ;1212
001032  d139              BNE      |L1.4264|
001034  1c48              ADDS     r0,r1,#1              ;1212
001036  4601              MOV      r1,r0                 ;1212
001038  7807              LDRB     r7,[r0,#0]            ;1212
00103a  1c50              ADDS     r0,r2,#1              ;1212
00103c  4602              MOV      r2,r0                 ;1212
00103e  7800              LDRB     r0,[r0,#0]            ;1212
001040  4287              CMP      r7,r0                 ;1212
001042  d131              BNE      |L1.4264|
001044  1c48              ADDS     r0,r1,#1              ;1213
001046  4601              MOV      r1,r0                 ;1213
001048  7807              LDRB     r7,[r0,#0]            ;1213
00104a  1c50              ADDS     r0,r2,#1              ;1213
00104c  4602              MOV      r2,r0                 ;1213
00104e  7800              LDRB     r0,[r0,#0]            ;1213
001050  4287              CMP      r7,r0                 ;1213
001052  d129              BNE      |L1.4264|
001054  1c48              ADDS     r0,r1,#1              ;1213
001056  4601              MOV      r1,r0                 ;1213
001058  7807              LDRB     r7,[r0,#0]            ;1213
00105a  1c50              ADDS     r0,r2,#1              ;1213
00105c  4602              MOV      r2,r0                 ;1213
00105e  7800              LDRB     r0,[r0,#0]            ;1213
001060  4287              CMP      r7,r0                 ;1213
001062  d121              BNE      |L1.4264|
001064  1c48              ADDS     r0,r1,#1              ;1214
001066  4601              MOV      r1,r0                 ;1214
001068  7807              LDRB     r7,[r0,#0]            ;1214
00106a  1c50              ADDS     r0,r2,#1              ;1214
00106c  4602              MOV      r2,r0                 ;1214
00106e  7800              LDRB     r0,[r0,#0]            ;1214
001070  4287              CMP      r7,r0                 ;1214
001072  d119              BNE      |L1.4264|
001074  1c48              ADDS     r0,r1,#1              ;1214
001076  4601              MOV      r1,r0                 ;1214
001078  7807              LDRB     r7,[r0,#0]            ;1214
00107a  1c50              ADDS     r0,r2,#1              ;1214
00107c  4602              MOV      r2,r0                 ;1214
00107e  7800              LDRB     r0,[r0,#0]            ;1214
001080  4287              CMP      r7,r0                 ;1214
001082  d111              BNE      |L1.4264|
001084  1c48              ADDS     r0,r1,#1              ;1215
001086  4601              MOV      r1,r0                 ;1215
001088  7807              LDRB     r7,[r0,#0]            ;1215
00108a  1c50              ADDS     r0,r2,#1              ;1215
00108c  4602              MOV      r2,r0                 ;1215
00108e  7800              LDRB     r0,[r0,#0]            ;1215
001090  4287              CMP      r7,r0                 ;1215
001092  d109              BNE      |L1.4264|
001094  1c48              ADDS     r0,r1,#1              ;1215
001096  4601              MOV      r1,r0                 ;1215
001098  7807              LDRB     r7,[r0,#0]            ;1215
00109a  1c50              ADDS     r0,r2,#1              ;1215
00109c  4602              MOV      r2,r0                 ;1215
00109e  7800              LDRB     r0,[r0,#0]            ;1215
0010a0  4287              CMP      r7,r0                 ;1215
0010a2  d101              BNE      |L1.4264|
0010a4  42b1              CMP      r1,r6                 ;1216
0010a6  d3bd              BCC      |L1.4132|
                  |L1.4264|
0010a8  1a70              SUBS     r0,r6,r1              ;1220
0010aa  f5c07581          RSB      r5,r0,#0x102          ;1220
0010ae  2d03              CMP      r5,#3                 ;1222
0010b0  da01              BGE      |L1.4278|
0010b2  2002              MOVS     r0,#2                 ;1222
0010b4  e7b2              B        |L1.4124|
                  |L1.4278|
0010b6  671c              STR      r4,[r3,#0x70]         ;1224
0010b8  6f58              LDR      r0,[r3,#0x74]         ;1225
0010ba  42a8              CMP      r0,r5                 ;1225
0010bc  d301              BCC      |L1.4290|
0010be  4628              MOV      r0,r5                 ;1225
0010c0  e7ac              B        |L1.4124|
                  |L1.4290|
0010c2  6f58              LDR      r0,[r3,#0x74]         ;1225
0010c4  e7aa              B        |L1.4124|
;;;1227   
                          ENDP

                  fill_window PROC
;;;1265    */
;;;1266   local void fill_window(s)
0010c6  e92d47f0          PUSH     {r4-r10,lr}
;;;1267       deflate_state *s;
;;;1268   {
0010ca  4604              MOV      r4,r0
;;;1269       register unsigned n, m;
;;;1270       register Posf *p;
;;;1271       unsigned more;    /* Amount of free space at the end of the window. */
;;;1272       uInt wsize = s->w_size;
0010cc  6ae5              LDR      r5,[r4,#0x2c]
;;;1273   
;;;1274       do {
0010ce  bf00              NOP      
                  |L1.4304|
;;;1275           more = (unsigned)(s->window_size -(ulg)s->lookahead -(ulg)s->strstart);
0010d0  6f61              LDR      r1,[r4,#0x74]
0010d2  6be0              LDR      r0,[r4,#0x3c]
0010d4  1a40              SUBS     r0,r0,r1
0010d6  6ee1              LDR      r1,[r4,#0x6c]
0010d8  eba00901          SUB      r9,r0,r1
;;;1276   
;;;1277           /* Deal with !@#$% 64K limit: */
;;;1278           if (sizeof(int) <= 2) {
;;;1279               if (more == 0 && s->strstart == 0 && s->lookahead == 0) {
;;;1280                   more = wsize;
;;;1281   
;;;1282               } else if (more == (unsigned)(-1)) {
;;;1283                   /* Very unlikely, but possible on 16 bit machine if
;;;1284                    * strstart == 0 && lookahead == 1 (input done a byte at time)
;;;1285                    */
;;;1286                   more--;
;;;1287               }
;;;1288           }
;;;1289   
;;;1290           /* If the window is almost full and there is insufficient lookahead,
;;;1291            * move the upper half to the lower one to make room in the upper half.
;;;1292            */
;;;1293           if (s->strstart >= wsize+MAX_DIST(s)) {
0010dc  6ae0              LDR      r0,[r4,#0x2c]
0010de  f5a07083          SUB      r0,r0,#0x106
0010e2  4428              ADD      r0,r0,r5
0010e4  6ee1              LDR      r1,[r4,#0x6c]
0010e6  4281              CMP      r1,r0
0010e8  d335              BCC      |L1.4438|
;;;1294   
;;;1295               zmemcpy(s->window, s->window+wsize, (unsigned)wsize);
0010ea  6ba2              LDR      r2,[r4,#0x38]
0010ec  1951              ADDS     r1,r2,r5
0010ee  4610              MOV      r0,r2
0010f0  462a              MOV      r2,r5
0010f2  f7fffffe          BL       __aeabi_memcpy
;;;1296               s->match_start -= wsize;
0010f6  6f20              LDR      r0,[r4,#0x70]
0010f8  1b40              SUBS     r0,r0,r5
0010fa  6720              STR      r0,[r4,#0x70]
;;;1297               s->strstart    -= wsize; /* we now have strstart >= MAX_DIST */
0010fc  6ee0              LDR      r0,[r4,#0x6c]
0010fe  1b40              SUBS     r0,r0,r5
001100  66e0              STR      r0,[r4,#0x6c]
;;;1298               s->block_start -= (long) wsize;
001102  6de0              LDR      r0,[r4,#0x5c]
001104  1b40              SUBS     r0,r0,r5
001106  65e0              STR      r0,[r4,#0x5c]
;;;1299   
;;;1300               /* Slide the hash table (could be avoided with 32 bit values
;;;1301                  at the expense of memory usage). We slide even when level == 0
;;;1302                  to keep the hash table consistent if we switch back to level > 0
;;;1303                  later. (Using level 0 permanently is not an optimal usage of
;;;1304                  zlib, so we don't care about this pathological case.)
;;;1305                */
;;;1306               /* %%% avoid this when Z_RLE */
;;;1307               n = s->hash_size;
001108  6ce6              LDR      r6,[r4,#0x4c]
;;;1308               p = &s->head[n];
00110a  6c60              LDR      r0,[r4,#0x44]
00110c  eb000846          ADD      r8,r0,r6,LSL #1
;;;1309               do {
001110  bf00              NOP      
                  |L1.4370|
;;;1310                   m = *--p;
001112  f1a80002          SUB      r0,r8,#2
001116  4680              MOV      r8,r0
001118  8807              LDRH     r7,[r0,#0]
;;;1311                   *p = (Pos)(m >= wsize ? m-wsize : NIL);
00111a  42af              CMP      r7,r5
00111c  d301              BCC      |L1.4386|
00111e  1b78              SUBS     r0,r7,r5
001120  e000              B        |L1.4388|
                  |L1.4386|
001122  2000              MOVS     r0,#0
                  |L1.4388|
001124  f8a80000          STRH     r0,[r8,#0]
;;;1312               } while (--n);
001128  1e70              SUBS     r0,r6,#1
00112a  0006              MOVS     r6,r0
00112c  d1f1              BNE      |L1.4370|
;;;1313   
;;;1314               n = wsize;
00112e  462e              MOV      r6,r5
;;;1315   #ifndef FASTEST
;;;1316               p = &s->prev[n];
001130  6c20              LDR      r0,[r4,#0x40]
001132  eb000846          ADD      r8,r0,r6,LSL #1
;;;1317               do {
001136  bf00              NOP      
                  |L1.4408|
;;;1318                   m = *--p;
001138  f1a80002          SUB      r0,r8,#2
00113c  4680              MOV      r8,r0
00113e  8807              LDRH     r7,[r0,#0]
;;;1319                   *p = (Pos)(m >= wsize ? m-wsize : NIL);
001140  42af              CMP      r7,r5
001142  d301              BCC      |L1.4424|
001144  1b78              SUBS     r0,r7,r5
001146  e000              B        |L1.4426|
                  |L1.4424|
001148  2000              MOVS     r0,#0
                  |L1.4426|
00114a  f8a80000          STRH     r0,[r8,#0]
;;;1320                   /* If n is not on any hash chain, prev[n] is garbage but
;;;1321                    * its value will never be used.
;;;1322                    */
;;;1323               } while (--n);
00114e  1e70              SUBS     r0,r6,#1
001150  0006              MOVS     r6,r0
001152  d1f1              BNE      |L1.4408|
;;;1324   #endif
;;;1325               more += wsize;
001154  44a9              ADD      r9,r9,r5
                  |L1.4438|
;;;1326           }
;;;1327           if (s->strm->avail_in == 0) return;
001156  6820              LDR      r0,[r4,#0]
001158  6840              LDR      r0,[r0,#4]
00115a  b908              CBNZ     r0,|L1.4448|
                  |L1.4444|
;;;1328   
;;;1329           /* If there was no sliding:
;;;1330            *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
;;;1331            *    more == window_size - lookahead - strstart
;;;1332            * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
;;;1333            * => more >= window_size - 2*WSIZE + 2
;;;1334            * In the BIG_MEM or MMAP case (not yet supported),
;;;1335            *   window_size == input_size + MIN_LOOKAHEAD  &&
;;;1336            *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
;;;1337            * Otherwise, window_size == 2*WSIZE so more >= 2.
;;;1338            * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
;;;1339            */
;;;1340           Assert(more >= 2, "more < 2");
;;;1341   
;;;1342           n = read_buf(s->strm, s->window + s->strstart + s->lookahead, more);
;;;1343           s->lookahead += n;
;;;1344   
;;;1345           /* Initialize the hash value now that we have some input: */
;;;1346           if (s->lookahead >= MIN_MATCH) {
;;;1347               s->ins_h = s->window[s->strstart];
;;;1348               UPDATE_HASH(s, s->ins_h, s->window[s->strstart+1]);
;;;1349   #if MIN_MATCH != 3
;;;1350               Call UPDATE_HASH() MIN_MATCH-3 more times
;;;1351   #endif
;;;1352           }
;;;1353           /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
;;;1354            * but this is not important since only literal bytes will be emitted.
;;;1355            */
;;;1356   
;;;1357       } while (s->lookahead < MIN_LOOKAHEAD && s->strm->avail_in != 0);
;;;1358   }
00115c  e8bd87f0          POP      {r4-r10,pc}
                  |L1.4448|
001160  6ee3              LDR      r3,[r4,#0x6c]         ;1342
001162  6ba2              LDR      r2,[r4,#0x38]         ;1342
001164  441a              ADD      r2,r2,r3              ;1342
001166  6f63              LDR      r3,[r4,#0x74]         ;1342
001168  18d1              ADDS     r1,r2,r3              ;1342
00116a  464a              MOV      r2,r9                 ;1342
00116c  6820              LDR      r0,[r4,#0]            ;1342
00116e  f7fffffe          BL       read_buf
001172  4606              MOV      r6,r0                 ;1342
001174  6f60              LDR      r0,[r4,#0x74]         ;1343
001176  4430              ADD      r0,r0,r6              ;1343
001178  6760              STR      r0,[r4,#0x74]         ;1343
00117a  6f60              LDR      r0,[r4,#0x74]         ;1346
00117c  2803              CMP      r0,#3                 ;1346
00117e  d30f              BCC      |L1.4512|
001180  6ee1              LDR      r1,[r4,#0x6c]         ;1347
001182  6ba0              LDR      r0,[r4,#0x38]         ;1347
001184  5c40              LDRB     r0,[r0,r1]            ;1347
001186  64a0              STR      r0,[r4,#0x48]         ;1347
001188  f8941058          LDRB     r1,[r4,#0x58]         ;1348
00118c  6ca0              LDR      r0,[r4,#0x48]         ;1348
00118e  4088              LSLS     r0,r0,r1              ;1348
001190  6ee1              LDR      r1,[r4,#0x6c]         ;1348
001192  1c49              ADDS     r1,r1,#1              ;1348
001194  6ba2              LDR      r2,[r4,#0x38]         ;1348
001196  5c51              LDRB     r1,[r2,r1]            ;1348
001198  4048              EORS     r0,r0,r1              ;1348
00119a  6d61              LDR      r1,[r4,#0x54]         ;1348
00119c  4008              ANDS     r0,r0,r1              ;1348
00119e  64a0              STR      r0,[r4,#0x48]         ;1348
                  |L1.4512|
0011a0  6f60              LDR      r0,[r4,#0x74]         ;1357
0011a2  f5b07f83          CMP      r0,#0x106             ;1357
0011a6  d203              BCS      |L1.4528|
0011a8  6820              LDR      r0,[r4,#0]            ;1357
0011aa  6840              LDR      r0,[r0,#4]            ;1357
0011ac  2800              CMP      r0,#0                 ;1357
0011ae  d18f              BNE      |L1.4304|
                  |L1.4528|
0011b0  bf00              NOP      
0011b2  e7d3              B        |L1.4444|
;;;1359   
                          ENDP

                  deflate_stored PROC
;;;1389    */
;;;1390   local block_state deflate_stored(s, flush)
0011b4  e92d41f0          PUSH     {r4-r8,lr}
;;;1391       deflate_state *s;
;;;1392       int flush;
;;;1393   {
0011b8  4604              MOV      r4,r0
0011ba  460d              MOV      r5,r1
;;;1394       /* Stored blocks are limited to 0xffff bytes, pending_buf is limited
;;;1395        * to pending_buf_size, and each stored block has a 5 byte header:
;;;1396        */
;;;1397       ulg max_block_size = 0xffff;
0011bc  f64f77ff          MOV      r7,#0xffff
;;;1398       ulg max_start;
;;;1399   
;;;1400       if (max_block_size > s->pending_buf_size - 5) {
0011c0  68e0              LDR      r0,[r4,#0xc]
0011c2  1f40              SUBS     r0,r0,#5
0011c4  42b8              CMP      r0,r7
0011c6  d201              BCS      |L1.4556|
;;;1401           max_block_size = s->pending_buf_size - 5;
0011c8  68e0              LDR      r0,[r4,#0xc]
0011ca  1f47              SUBS     r7,r0,#5
                  |L1.4556|
;;;1402       }
;;;1403   
;;;1404       /* Copy as much as possible from input to output: */
;;;1405       for (;;) {
0011cc  bf00              NOP      
                  |L1.4558|
;;;1406           /* Fill the window as much as possible: */
;;;1407           if (s->lookahead <= 1) {
0011ce  6f60              LDR      r0,[r4,#0x74]
0011d0  2801              CMP      r0,#1
0011d2  d80b              BHI      |L1.4588|
;;;1408   
;;;1409               Assert(s->strstart < s->w_size+MAX_DIST(s) ||
;;;1410                      s->block_start >= (long)s->w_size, "slide too late");
;;;1411   
;;;1412               fill_window(s);
0011d4  4620              MOV      r0,r4
0011d6  f7fffffe          BL       fill_window
;;;1413               if (s->lookahead == 0 && flush == Z_NO_FLUSH) return need_more;
0011da  6f60              LDR      r0,[r4,#0x74]
0011dc  b918              CBNZ     r0,|L1.4582|
0011de  b915              CBNZ     r5,|L1.4582|
0011e0  2000              MOVS     r0,#0
                  |L1.4578|
;;;1414   
;;;1415               if (s->lookahead == 0) break; /* flush the current block */
;;;1416           }
;;;1417           Assert(s->block_start >= 0L, "block gone");
;;;1418   
;;;1419           s->strstart += s->lookahead;
;;;1420           s->lookahead = 0;
;;;1421   
;;;1422           /* Emit a stored block if pending_buf will be full: */
;;;1423           max_start = s->block_start + max_block_size;
;;;1424           if (s->strstart == 0 || (ulg)s->strstart >= max_start) {
;;;1425               /* strstart == 0 is possible when wraparound on 16-bit machine */
;;;1426               s->lookahead = (uInt)(s->strstart - max_start);
;;;1427               s->strstart = (uInt)max_start;
;;;1428               FLUSH_BLOCK(s, 0);
;;;1429           }
;;;1430           /* Flush if we may have to slide, otherwise block_start may become
;;;1431            * negative and the data will be gone:
;;;1432            */
;;;1433           if (s->strstart - (uInt)s->block_start >= MAX_DIST(s)) {
;;;1434               FLUSH_BLOCK(s, 0);
;;;1435           }
;;;1436       }
;;;1437       FLUSH_BLOCK(s, flush == Z_FINISH);
;;;1438       return flush == Z_FINISH ? finish_done : block_done;
;;;1439   }
0011e2  e8bd81f0          POP      {r4-r8,pc}
                  |L1.4582|
0011e6  6f60              LDR      r0,[r4,#0x74]         ;1415
0011e8  b900              CBNZ     r0,|L1.4588|
0011ea  e04a              B        |L1.4738|
                  |L1.4588|
0011ec  6f61              LDR      r1,[r4,#0x74]         ;1419
0011ee  6ee0              LDR      r0,[r4,#0x6c]         ;1419
0011f0  4408              ADD      r0,r0,r1              ;1419
0011f2  66e0              STR      r0,[r4,#0x6c]         ;1419
0011f4  2000              MOVS     r0,#0                 ;1420
0011f6  6760              STR      r0,[r4,#0x74]         ;1420
0011f8  6de0              LDR      r0,[r4,#0x5c]         ;1423
0011fa  19c6              ADDS     r6,r0,r7              ;1423
0011fc  6ee0              LDR      r0,[r4,#0x6c]         ;1424
0011fe  b110              CBZ      r0,|L1.4614|
001200  6ee0              LDR      r0,[r4,#0x6c]         ;1424
001202  42b0              CMP      r0,r6                 ;1424
001204  d31c              BCC      |L1.4672|
                  |L1.4614|
001206  6ee0              LDR      r0,[r4,#0x6c]         ;1426
001208  1b80              SUBS     r0,r0,r6              ;1426
00120a  6760              STR      r0,[r4,#0x74]         ;1426
00120c  66e6              STR      r6,[r4,#0x6c]         ;1427
00120e  6de3              LDR      r3,[r4,#0x5c]         ;1428
001210  6ee0              LDR      r0,[r4,#0x6c]         ;1428
001212  1ac2              SUBS     r2,r0,r3              ;1428
001214  2b00              CMP      r3,#0                 ;1428
001216  db03              BLT      |L1.4640|
001218  6de3              LDR      r3,[r4,#0x5c]         ;1428
00121a  6ba0              LDR      r0,[r4,#0x38]         ;1428
00121c  4418              ADD      r0,r0,r3              ;1428
00121e  e000              B        |L1.4642|
                  |L1.4640|
001220  2000              MOVS     r0,#0                 ;1428
                  |L1.4642|
001222  4601              MOV      r1,r0                 ;1428
001224  2300              MOVS     r3,#0                 ;1428
001226  4620              MOV      r0,r4                 ;1428
001228  f7fffffe          BL       _tr_flush_block
00122c  6ee0              LDR      r0,[r4,#0x6c]         ;1428
00122e  65e0              STR      r0,[r4,#0x5c]         ;1428
001230  6820              LDR      r0,[r4,#0]            ;1428
001232  f7fffffe          BL       flush_pending
001236  6820              LDR      r0,[r4,#0]            ;1428
001238  6900              LDR      r0,[r0,#0x10]         ;1428
00123a  b908              CBNZ     r0,|L1.4672|
00123c  2000              MOVS     r0,#0                 ;1428
00123e  e7d0              B        |L1.4578|
                  |L1.4672|
001240  6de1              LDR      r1,[r4,#0x5c]         ;1433
001242  6ee0              LDR      r0,[r4,#0x6c]         ;1433
001244  1a41              SUBS     r1,r0,r1              ;1433
001246  6ae0              LDR      r0,[r4,#0x2c]         ;1433
001248  f5a07083          SUB      r0,r0,#0x106          ;1433
00124c  4281              CMP      r1,r0                 ;1433
00124e  d3be              BCC      |L1.4558|
001250  6de3              LDR      r3,[r4,#0x5c]         ;1434
001252  6ee0              LDR      r0,[r4,#0x6c]         ;1434
001254  1ac2              SUBS     r2,r0,r3              ;1434
001256  2b00              CMP      r3,#0                 ;1434
001258  db03              BLT      |L1.4706|
00125a  6de3              LDR      r3,[r4,#0x5c]         ;1434
00125c  6ba0              LDR      r0,[r4,#0x38]         ;1434
00125e  4418              ADD      r0,r0,r3              ;1434
001260  e000              B        |L1.4708|
                  |L1.4706|
001262  2000              MOVS     r0,#0                 ;1434
                  |L1.4708|
001264  4601              MOV      r1,r0                 ;1434
001266  2300              MOVS     r3,#0                 ;1434
001268  4620              MOV      r0,r4                 ;1434
00126a  f7fffffe          BL       _tr_flush_block
00126e  6ee0              LDR      r0,[r4,#0x6c]         ;1434
001270  65e0              STR      r0,[r4,#0x5c]         ;1434
001272  6820              LDR      r0,[r4,#0]            ;1434
001274  f7fffffe          BL       flush_pending
001278  6820              LDR      r0,[r4,#0]            ;1434
00127a  6900              LDR      r0,[r0,#0x10]         ;1434
00127c  2800              CMP      r0,#0                 ;1434
00127e  d1a6              BNE      |L1.4558|
001280  e7af              B        |L1.4578|
                  |L1.4738|
001282  bf00              NOP                            ;1415
001284  f8d4c05c          LDR      r12,[r4,#0x5c]        ;1437
001288  6ee0              LDR      r0,[r4,#0x6c]         ;1437
00128a  eba0020c          SUB      r2,r0,r12             ;1437
00128e  f1bc0f00          CMP      r12,#0                ;1437
001292  db04              BLT      |L1.4766|
001294  f8d4c05c          LDR      r12,[r4,#0x5c]        ;1437
001298  6ba0              LDR      r0,[r4,#0x38]         ;1437
00129a  4460              ADD      r0,r0,r12             ;1437
00129c  e000              B        |L1.4768|
                  |L1.4766|
00129e  2000              MOVS     r0,#0                 ;1437
                  |L1.4768|
0012a0  4601              MOV      r1,r0                 ;1437
0012a2  2d04              CMP      r5,#4                 ;1437
0012a4  d101              BNE      |L1.4778|
0012a6  2001              MOVS     r0,#1                 ;1437
0012a8  e000              B        |L1.4780|
                  |L1.4778|
0012aa  2000              MOVS     r0,#0                 ;1437
                  |L1.4780|
0012ac  4603              MOV      r3,r0                 ;1437
0012ae  4620              MOV      r0,r4                 ;1437
0012b0  f7fffffe          BL       _tr_flush_block
0012b4  6ee0              LDR      r0,[r4,#0x6c]         ;1437
0012b6  65e0              STR      r0,[r4,#0x5c]         ;1437
0012b8  6820              LDR      r0,[r4,#0]            ;1437
0012ba  f7fffffe          BL       flush_pending
0012be  6820              LDR      r0,[r4,#0]            ;1437
0012c0  6900              LDR      r0,[r0,#0x10]         ;1437
0012c2  b928              CBNZ     r0,|L1.4816|
0012c4  2d04              CMP      r5,#4                 ;1437
0012c6  d101              BNE      |L1.4812|
0012c8  2002              MOVS     r0,#2                 ;1437
0012ca  e78a              B        |L1.4578|
                  |L1.4812|
0012cc  2000              MOVS     r0,#0                 ;1437
0012ce  e788              B        |L1.4578|
                  |L1.4816|
0012d0  2d04              CMP      r5,#4                 ;1438
0012d2  d101              BNE      |L1.4824|
0012d4  2003              MOVS     r0,#3                 ;1438
0012d6  e784              B        |L1.4578|
                  |L1.4824|
0012d8  2001              MOVS     r0,#1                 ;1438
0012da  e782              B        |L1.4578|
;;;1440   
                          ENDP

                  deflate_fast PROC
;;;1447    */
;;;1448   local block_state deflate_fast(s, flush)
0012dc  e92d41f0          PUSH     {r4-r8,lr}
;;;1449       deflate_state *s;
;;;1450       int flush;
;;;1451   {
0012e0  4604              MOV      r4,r0
0012e2  460d              MOV      r5,r1
;;;1452       IPos hash_head = NIL; /* head of the hash chain */
0012e4  2600              MOVS     r6,#0
;;;1453       int bflush;           /* set if current block must be flushed */
;;;1454   
;;;1455       for (;;) {
0012e6  bf00              NOP      
                  |L1.4840|
;;;1456           /* Make sure that we always have enough lookahead, except
;;;1457            * at the end of the input file. We need MAX_MATCH bytes
;;;1458            * for the next match, plus MIN_MATCH bytes to insert the
;;;1459            * string following the next match.
;;;1460            */
;;;1461           if (s->lookahead < MIN_LOOKAHEAD) {
0012e8  6f60              LDR      r0,[r4,#0x74]
0012ea  f5b07f83          CMP      r0,#0x106
0012ee  d20d              BCS      |L1.4876|
;;;1462               fill_window(s);
0012f0  4620              MOV      r0,r4
0012f2  f7fffffe          BL       fill_window
;;;1463               if (s->lookahead < MIN_LOOKAHEAD && flush == Z_NO_FLUSH) {
0012f6  6f60              LDR      r0,[r4,#0x74]
0012f8  f5b07f83          CMP      r0,#0x106
0012fc  d203              BCS      |L1.4870|
0012fe  b915              CBNZ     r5,|L1.4870|
;;;1464                   return need_more;
001300  2000              MOVS     r0,#0
                  |L1.4866|
;;;1465               }
;;;1466               if (s->lookahead == 0) break; /* flush the current block */
;;;1467           }
;;;1468   
;;;1469           /* Insert the string window[strstart .. strstart+2] in the
;;;1470            * dictionary, and set hash_head to the head of the hash chain:
;;;1471            */
;;;1472           if (s->lookahead >= MIN_MATCH) {
;;;1473               INSERT_STRING(s, s->strstart, hash_head);
;;;1474           }
;;;1475   
;;;1476           /* Find the longest match, discarding those <= prev_length.
;;;1477            * At this point we have always match_length < MIN_MATCH
;;;1478            */
;;;1479           if (hash_head != NIL && s->strstart - hash_head <= MAX_DIST(s)) {
;;;1480               /* To simplify the code, we prevent matches with the string
;;;1481                * of window index 0 (in particular we have to avoid a match
;;;1482                * of the string with itself at the start of the input file).
;;;1483                */
;;;1484   #ifdef FASTEST
;;;1485               if ((s->strategy != Z_HUFFMAN_ONLY && s->strategy != Z_RLE) ||
;;;1486                   (s->strategy == Z_RLE && s->strstart - hash_head == 1)) {
;;;1487                   s->match_length = longest_match_fast (s, hash_head);
;;;1488               }
;;;1489   #else
;;;1490               if (s->strategy != Z_HUFFMAN_ONLY && s->strategy != Z_RLE) {
;;;1491                   s->match_length = longest_match (s, hash_head);
;;;1492               } else if (s->strategy == Z_RLE && s->strstart - hash_head == 1) {
;;;1493                   s->match_length = longest_match_fast (s, hash_head);
;;;1494               }
;;;1495   #endif
;;;1496               /* longest_match() or longest_match_fast() sets match_start */
;;;1497           }
;;;1498           if (s->match_length >= MIN_MATCH) {
;;;1499               check_match(s, s->strstart, s->match_start, s->match_length);
;;;1500   
;;;1501               _tr_tally_dist(s, s->strstart - s->match_start,
;;;1502                              s->match_length - MIN_MATCH, bflush);
;;;1503   
;;;1504               s->lookahead -= s->match_length;
;;;1505   
;;;1506               /* Insert new strings in the hash table only if the match length
;;;1507                * is not too large. This saves time but degrades compression.
;;;1508                */
;;;1509   #ifndef FASTEST
;;;1510               if (s->match_length <= s->max_insert_length &&
;;;1511                   s->lookahead >= MIN_MATCH) {
;;;1512                   s->match_length--; /* string at strstart already in table */
;;;1513                   do {
;;;1514                       s->strstart++;
;;;1515                       INSERT_STRING(s, s->strstart, hash_head);
;;;1516                       /* strstart never exceeds WSIZE-MAX_MATCH, so there are
;;;1517                        * always MIN_MATCH bytes ahead.
;;;1518                        */
;;;1519                   } while (--s->match_length != 0);
;;;1520                   s->strstart++;
;;;1521               } else
;;;1522   #endif
;;;1523               {
;;;1524                   s->strstart += s->match_length;
;;;1525                   s->match_length = 0;
;;;1526                   s->ins_h = s->window[s->strstart];
;;;1527                   UPDATE_HASH(s, s->ins_h, s->window[s->strstart+1]);
;;;1528   #if MIN_MATCH != 3
;;;1529                   Call UPDATE_HASH() MIN_MATCH-3 more times
;;;1530   #endif
;;;1531                   /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
;;;1532                    * matter since it will be recomputed at next deflate call.
;;;1533                    */
;;;1534               }
;;;1535           } else {
;;;1536               /* No match, output a literal byte */
;;;1537               Tracevv((stderr,"%c", s->window[s->strstart]));
;;;1538               _tr_tally_lit (s, s->window[s->strstart], bflush);
;;;1539               s->lookahead--;
;;;1540               s->strstart++;
;;;1541           }
;;;1542           if (bflush) FLUSH_BLOCK(s, 0);
;;;1543       }
;;;1544       FLUSH_BLOCK(s, flush == Z_FINISH);
;;;1545       return flush == Z_FINISH ? finish_done : block_done;
;;;1546   }
001302  e8bd81f0          POP      {r4-r8,pc}
                  |L1.4870|
001306  6f60              LDR      r0,[r4,#0x74]         ;1466
001308  b900              CBNZ     r0,|L1.4876|
00130a  e145              B        |L1.5528|
                  |L1.4876|
00130c  6f60              LDR      r0,[r4,#0x74]         ;1472
00130e  2803              CMP      r0,#3                 ;1472
001310  d31c              BCC      |L1.4940|
001312  f8941058          LDRB     r1,[r4,#0x58]         ;1473
001316  6ca0              LDR      r0,[r4,#0x48]         ;1473
001318  4088              LSLS     r0,r0,r1              ;1473
00131a  6ee1              LDR      r1,[r4,#0x6c]         ;1473
00131c  1c89              ADDS     r1,r1,#2              ;1473
00131e  6ba2              LDR      r2,[r4,#0x38]         ;1473
001320  5c51              LDRB     r1,[r2,r1]            ;1473
001322  4048              EORS     r0,r0,r1              ;1473
001324  6d61              LDR      r1,[r4,#0x54]         ;1473
001326  4008              ANDS     r0,r0,r1              ;1473
001328  64a0              STR      r0,[r4,#0x48]         ;1473
00132a  e9d40111          LDRD     r0,r1,[r4,#0x44]      ;1473
00132e  f8301011          LDRH     r1,[r0,r1,LSL #1]     ;1473
001332  6b62              LDR      r2,[r4,#0x34]         ;1473
001334  6ee0              LDR      r0,[r4,#0x6c]         ;1473
001336  4010              ANDS     r0,r0,r2              ;1473
001338  6c22              LDR      r2,[r4,#0x40]         ;1473
00133a  f8221010          STRH     r1,[r2,r0,LSL #1]     ;1473
00133e  460e              MOV      r6,r1                 ;1473
001340  f8b4006c          LDRH     r0,[r4,#0x6c]         ;1473
001344  e9d41211          LDRD     r1,r2,[r4,#0x44]      ;1473
001348  f8210012          STRH     r0,[r1,r2,LSL #1]     ;1473
                  |L1.4940|
00134c  b30e              CBZ      r6,|L1.5010|
00134e  6ee0              LDR      r0,[r4,#0x6c]         ;1479
001350  1b81              SUBS     r1,r0,r6              ;1479
001352  6ae0              LDR      r0,[r4,#0x2c]         ;1479
001354  f5a07083          SUB      r0,r0,#0x106          ;1479
001358  4281              CMP      r1,r0                 ;1479
00135a  d81a              BHI      |L1.5010|
00135c  f8d40088          LDR      r0,[r4,#0x88]         ;1490
001360  2802              CMP      r0,#2                 ;1490
001362  d009              BEQ      |L1.4984|
001364  f8d40088          LDR      r0,[r4,#0x88]         ;1490
001368  2803              CMP      r0,#3                 ;1490
00136a  d005              BEQ      |L1.4984|
00136c  4631              MOV      r1,r6                 ;1491
00136e  4620              MOV      r0,r4                 ;1491
001370  f7fffffe          BL       longest_match
001374  6620              STR      r0,[r4,#0x60]         ;1491
001376  e00c              B        |L1.5010|
                  |L1.4984|
001378  f8d40088          LDR      r0,[r4,#0x88]         ;1492
00137c  2803              CMP      r0,#3                 ;1492
00137e  d108              BNE      |L1.5010|
001380  6ee0              LDR      r0,[r4,#0x6c]         ;1492
001382  1b80              SUBS     r0,r0,r6              ;1492
001384  2801              CMP      r0,#1                 ;1492
001386  d104              BNE      |L1.5010|
001388  4631              MOV      r1,r6                 ;1493
00138a  4620              MOV      r0,r4                 ;1493
00138c  f7fffffe          BL       longest_match_fast
001390  6620              STR      r0,[r4,#0x60]         ;1493
                  |L1.5010|
001392  6e20              LDR      r0,[r4,#0x60]         ;1498
001394  2803              CMP      r0,#3                 ;1498
001396  d37d              BCC      |L1.5268|
001398  f8142f60          LDRB     r2,[r4,#0x60]!        ;1501
00139c  1ed2              SUBS     r2,r2,#3              ;1501
00139e  b2d1              UXTB     r1,r2                 ;1501
0013a0  89a2              LDRH     r2,[r4,#0xc]          ;1501
0013a2  8a23              LDRH     r3,[r4,#0x10]         ;1501
0013a4  3c60              SUBS     r4,r4,#0x60           ;1501
0013a6  1ad2              SUBS     r2,r2,r3              ;1501
0013a8  b290              UXTH     r0,r2                 ;1501
0013aa  f24162a4          MOV      r2,#0x16a4            ;1501
0013ae  5913              LDR      r3,[r2,r4]            ;1501
0013b0  1f12              SUBS     r2,r2,#4              ;1501
0013b2  5912              LDR      r2,[r2,r4]            ;1501
0013b4  f8230012          STRH     r0,[r3,r2,LSL #1]     ;1501
0013b8  f44f52b5          MOV      r2,#0x16a0            ;1501
0013bc  f852c004          LDR      r12,[r2,r4]           ;1501
0013c0  5912              LDR      r2,[r2,r4]            ;1501
0013c2  1c52              ADDS     r2,r2,#1              ;1501
0013c4  f44f53b5          MOV      r3,#0x16a0            ;1501
0013c8  511a              STR      r2,[r3,r4]            ;1501
0013ca  f2416298          MOV      r2,#0x1698            ;1501
0013ce  5912              LDR      r2,[r2,r4]            ;1501
0013d0  f802100c          STRB     r1,[r2,r12]           ;1501
0013d4  1e42              SUBS     r2,r0,#1              ;1501
0013d6  b290              UXTH     r0,r2                 ;1501
0013d8  4afe              LDR      r2,|L1.6100|
0013da  5c52              LDRB     r2,[r2,r1]            ;1501
0013dc  f2021201          ADD      r2,r2,#0x101          ;1501
0013e0  f1040394          ADD      r3,r4,#0x94           ;1501
0013e4  f8332022          LDRH     r2,[r3,r2,LSL #2]     ;1501
0013e8  1c52              ADDS     r2,r2,#1              ;1501
0013ea  fa1ffc82          UXTH     r12,r2                ;1501
0013ee  4af9              LDR      r2,|L1.6100|
0013f0  5c52              LDRB     r2,[r2,r1]            ;1501
0013f2  f2021201          ADD      r2,r2,#0x101          ;1501
0013f6  f823c022          STRH     r12,[r3,r2,LSL #2]    ;1501
0013fa  28ff              CMP      r0,#0xff              ;1501
0013fc  dc02              BGT      |L1.5124|
0013fe  4af6              LDR      r2,|L1.6104|
001400  5c12              LDRB     r2,[r2,r0]            ;1501
001402  e005              B        |L1.5136|
                  |L1.5124|
001404  f44f7280          MOV      r2,#0x100             ;1501
001408  eb0212e0          ADD      r2,r2,r0,ASR #7       ;1501
00140c  4bf2              LDR      r3,|L1.6104|
00140e  5c9a              LDRB     r2,[r3,r2]            ;1501
                  |L1.5136|
001410  f6041388          ADD      r3,r4,#0x988          ;1501
001414  f8332022          LDRH     r2,[r3,r2,LSL #2]     ;1501
001418  1c52              ADDS     r2,r2,#1              ;1501
00141a  fa1ffc82          UXTH     r12,r2                ;1501
00141e  28ff              CMP      r0,#0xff              ;1501
001420  dc02              BGT      |L1.5160|
001422  4aed              LDR      r2,|L1.6104|
001424  5c12              LDRB     r2,[r2,r0]            ;1501
001426  e005              B        |L1.5172|
                  |L1.5160|
001428  f44f7280          MOV      r2,#0x100             ;1501
00142c  eb0212e0          ADD      r2,r2,r0,ASR #7       ;1501
001430  4be9              LDR      r3,|L1.6104|
001432  5c9a              LDRB     r2,[r3,r2]            ;1501
                  |L1.5172|
001434  f6041388          ADD      r3,r4,#0x988          ;1501
001438  f823c022          STRH     r12,[r3,r2,LSL #2]    ;1501
00143c  f44f52b5          MOV      r2,#0x16a0            ;1501
001440  5913              LDR      r3,[r2,r4]            ;1501
001442  1f12              SUBS     r2,r2,#4              ;1501
001444  5912              LDR      r2,[r2,r4]            ;1501
001446  1e52              SUBS     r2,r2,#1              ;1501
001448  4293              CMP      r3,r2                 ;1501
00144a  d101              BNE      |L1.5200|
00144c  2201              MOVS     r2,#1                 ;1501
00144e  e000              B        |L1.5202|
                  |L1.5200|
001450  2200              MOVS     r2,#0                 ;1501
                  |L1.5202|
001452  4617              MOV      r7,r2                 ;1501
001454  6e21              LDR      r1,[r4,#0x60]         ;1504
001456  6f60              LDR      r0,[r4,#0x74]         ;1504
001458  1a40              SUBS     r0,r0,r1              ;1504
00145a  6760              STR      r0,[r4,#0x74]         ;1504
00145c  f8d41080          LDR      r1,[r4,#0x80]         ;1510
001460  6e20              LDR      r0,[r4,#0x60]         ;1510
001462  4288              CMP      r0,r1                 ;1510
001464  d831              BHI      |L1.5322|
001466  6f60              LDR      r0,[r4,#0x74]         ;1511
001468  2803              CMP      r0,#3                 ;1511
00146a  d32e              BCC      |L1.5322|
00146c  6e20              LDR      r0,[r4,#0x60]         ;1512
00146e  1e40              SUBS     r0,r0,#1              ;1512
001470  6620              STR      r0,[r4,#0x60]         ;1512
001472  bf00              NOP                            ;1513
                  |L1.5236|
001474  6ee0              LDR      r0,[r4,#0x6c]         ;1514
001476  1c40              ADDS     r0,r0,#1              ;1514
001478  66e0              STR      r0,[r4,#0x6c]         ;1514
00147a  f8941058          LDRB     r1,[r4,#0x58]         ;1515
00147e  6ca0              LDR      r0,[r4,#0x48]         ;1515
001480  4088              LSLS     r0,r0,r1              ;1515
001482  6ee1              LDR      r1,[r4,#0x6c]         ;1515
001484  1c89              ADDS     r1,r1,#2              ;1515
001486  6ba2              LDR      r2,[r4,#0x38]         ;1515
001488  5c51              LDRB     r1,[r2,r1]            ;1515
00148a  4048              EORS     r0,r0,r1              ;1515
00148c  6d61              LDR      r1,[r4,#0x54]         ;1515
00148e  4008              ANDS     r0,r0,r1              ;1515
001490  64a0              STR      r0,[r4,#0x48]         ;1515
001492  e000              B        |L1.5270|
                  |L1.5268|
001494  e030              B        |L1.5368|
                  |L1.5270|
001496  e9d40111          LDRD     r0,r1,[r4,#0x44]      ;1515
00149a  f8301011          LDRH     r1,[r0,r1,LSL #1]     ;1515
00149e  6b62              LDR      r2,[r4,#0x34]         ;1515
0014a0  6ee0              LDR      r0,[r4,#0x6c]         ;1515
0014a2  4010              ANDS     r0,r0,r2              ;1515
0014a4  6c22              LDR      r2,[r4,#0x40]         ;1515
0014a6  f8221010          STRH     r1,[r2,r0,LSL #1]     ;1515
0014aa  460e              MOV      r6,r1                 ;1515
0014ac  f8b4006c          LDRH     r0,[r4,#0x6c]         ;1515
0014b0  e9d41211          LDRD     r1,r2,[r4,#0x44]      ;1515
0014b4  f8210012          STRH     r0,[r1,r2,LSL #1]     ;1515
0014b8  6e20              LDR      r0,[r4,#0x60]         ;1519
0014ba  1e40              SUBS     r0,r0,#1              ;1519
0014bc  6620              STR      r0,[r4,#0x60]         ;1519
0014be  2800              CMP      r0,#0                 ;1519
0014c0  d1d8              BNE      |L1.5236|
0014c2  6ee0              LDR      r0,[r4,#0x6c]         ;1520
0014c4  1c40              ADDS     r0,r0,#1              ;1520
0014c6  66e0              STR      r0,[r4,#0x6c]         ;1520
0014c8  e049              B        |L1.5470|
                  |L1.5322|
0014ca  6e21              LDR      r1,[r4,#0x60]         ;1524
0014cc  6ee0              LDR      r0,[r4,#0x6c]         ;1524
0014ce  4408              ADD      r0,r0,r1              ;1524
0014d0  66e0              STR      r0,[r4,#0x6c]         ;1524
0014d2  2000              MOVS     r0,#0                 ;1525
0014d4  6620              STR      r0,[r4,#0x60]         ;1525
0014d6  6ee1              LDR      r1,[r4,#0x6c]         ;1526
0014d8  6ba0              LDR      r0,[r4,#0x38]         ;1526
0014da  5c40              LDRB     r0,[r0,r1]            ;1526
0014dc  64a0              STR      r0,[r4,#0x48]         ;1526
0014de  f8941058          LDRB     r1,[r4,#0x58]         ;1527
0014e2  6ca0              LDR      r0,[r4,#0x48]         ;1527
0014e4  4088              LSLS     r0,r0,r1              ;1527
0014e6  6ee1              LDR      r1,[r4,#0x6c]         ;1527
0014e8  1c49              ADDS     r1,r1,#1              ;1527
0014ea  6ba2              LDR      r2,[r4,#0x38]         ;1527
0014ec  5c51              LDRB     r1,[r2,r1]            ;1527
0014ee  4048              EORS     r0,r0,r1              ;1527
0014f0  6d61              LDR      r1,[r4,#0x54]         ;1527
0014f2  4008              ANDS     r0,r0,r1              ;1527
0014f4  64a0              STR      r0,[r4,#0x48]         ;1527
0014f6  e032              B        |L1.5470|
                  |L1.5368|
0014f8  6ee2              LDR      r2,[r4,#0x6c]         ;1538
0014fa  6ba1              LDR      r1,[r4,#0x38]         ;1538
0014fc  5c88              LDRB     r0,[r1,r2]            ;1538
0014fe  2200              MOVS     r2,#0                 ;1538
001500  f24161a4          MOV      r1,#0x16a4            ;1538
001504  590b              LDR      r3,[r1,r4]            ;1538
001506  1f09              SUBS     r1,r1,#4              ;1538
001508  5909              LDR      r1,[r1,r4]            ;1538
00150a  f8232011          STRH     r2,[r3,r1,LSL #1]     ;1538
00150e  f44f51b5          MOV      r1,#0x16a0            ;1538
001512  590b              LDR      r3,[r1,r4]            ;1538
001514  5909              LDR      r1,[r1,r4]            ;1538
001516  1c49              ADDS     r1,r1,#1              ;1538
001518  f44f52b5          MOV      r2,#0x16a0            ;1538
00151c  5111              STR      r1,[r2,r4]            ;1538
00151e  f2416198          MOV      r1,#0x1698            ;1538
001522  5909              LDR      r1,[r1,r4]            ;1538
001524  54c8              STRB     r0,[r1,r3]            ;1538
001526  f1040194          ADD      r1,r4,#0x94           ;1538
00152a  f8311020          LDRH     r1,[r1,r0,LSL #2]     ;1538
00152e  1c49              ADDS     r1,r1,#1              ;1538
001530  b28a              UXTH     r2,r1                 ;1538
001532  f1040194          ADD      r1,r4,#0x94           ;1538
001536  f8212020          STRH     r2,[r1,r0,LSL #2]     ;1538
00153a  f44f51b5          MOV      r1,#0x16a0            ;1538
00153e  590a              LDR      r2,[r1,r4]            ;1538
001540  1f09              SUBS     r1,r1,#4              ;1538
001542  5909              LDR      r1,[r1,r4]            ;1538
001544  1e49              SUBS     r1,r1,#1              ;1538
001546  428a              CMP      r2,r1                 ;1538
001548  d101              BNE      |L1.5454|
00154a  2101              MOVS     r1,#1                 ;1538
00154c  e000              B        |L1.5456|
                  |L1.5454|
00154e  2100              MOVS     r1,#0                 ;1538
                  |L1.5456|
001550  460f              MOV      r7,r1                 ;1538
001552  6f60              LDR      r0,[r4,#0x74]         ;1539
001554  1e40              SUBS     r0,r0,#1              ;1539
001556  6760              STR      r0,[r4,#0x74]         ;1539
001558  6ee0              LDR      r0,[r4,#0x6c]         ;1540
00155a  1c40              ADDS     r0,r0,#1              ;1540
00155c  66e0              STR      r0,[r4,#0x6c]         ;1540
                  |L1.5470|
00155e  2f00              CMP      r7,#0                 ;1542
001560  f43faec2          BEQ      |L1.4840|
001564  6de3              LDR      r3,[r4,#0x5c]         ;1542
001566  6ee0              LDR      r0,[r4,#0x6c]         ;1542
001568  1ac2              SUBS     r2,r0,r3              ;1542
00156a  2b00              CMP      r3,#0                 ;1542
00156c  db03              BLT      |L1.5494|
00156e  6de3              LDR      r3,[r4,#0x5c]         ;1542
001570  6ba0              LDR      r0,[r4,#0x38]         ;1542
001572  4418              ADD      r0,r0,r3              ;1542
001574  e000              B        |L1.5496|
                  |L1.5494|
001576  2000              MOVS     r0,#0                 ;1542
                  |L1.5496|
001578  4601              MOV      r1,r0                 ;1542
00157a  2300              MOVS     r3,#0                 ;1542
00157c  4620              MOV      r0,r4                 ;1542
00157e  f7fffffe          BL       _tr_flush_block
001582  6ee0              LDR      r0,[r4,#0x6c]         ;1542
001584  65e0              STR      r0,[r4,#0x5c]         ;1542
001586  6820              LDR      r0,[r4,#0]            ;1542
001588  f7fffffe          BL       flush_pending
00158c  6820              LDR      r0,[r4,#0]            ;1542
00158e  6900              LDR      r0,[r0,#0x10]         ;1542
001590  2800              CMP      r0,#0                 ;1542
001592  f47faea9          BNE      |L1.4840|
001596  e6b4              B        |L1.4866|
                  |L1.5528|
001598  bf00              NOP                            ;1466
00159a  f8d4c05c          LDR      r12,[r4,#0x5c]        ;1544
00159e  6ee0              LDR      r0,[r4,#0x6c]         ;1544
0015a0  eba0020c          SUB      r2,r0,r12             ;1544
0015a4  f1bc0f00          CMP      r12,#0                ;1544
0015a8  db04              BLT      |L1.5556|
0015aa  f8d4c05c          LDR      r12,[r4,#0x5c]        ;1544
0015ae  6ba0              LDR      r0,[r4,#0x38]         ;1544
0015b0  4460              ADD      r0,r0,r12             ;1544
0015b2  e000              B        |L1.5558|
                  |L1.5556|
0015b4  2000              MOVS     r0,#0                 ;1544
                  |L1.5558|
0015b6  4601              MOV      r1,r0                 ;1544
0015b8  2d04              CMP      r5,#4                 ;1544
0015ba  d101              BNE      |L1.5568|
0015bc  2001              MOVS     r0,#1                 ;1544
0015be  e000              B        |L1.5570|
                  |L1.5568|
0015c0  2000              MOVS     r0,#0                 ;1544
                  |L1.5570|
0015c2  4603              MOV      r3,r0                 ;1544
0015c4  4620              MOV      r0,r4                 ;1544
0015c6  f7fffffe          BL       _tr_flush_block
0015ca  6ee0              LDR      r0,[r4,#0x6c]         ;1544
0015cc  65e0              STR      r0,[r4,#0x5c]         ;1544
0015ce  6820              LDR      r0,[r4,#0]            ;1544
0015d0  f7fffffe          BL       flush_pending
0015d4  6820              LDR      r0,[r4,#0]            ;1544
0015d6  6900              LDR      r0,[r0,#0x10]         ;1544
0015d8  b928              CBNZ     r0,|L1.5606|
0015da  2d04              CMP      r5,#4                 ;1544
0015dc  d101              BNE      |L1.5602|
0015de  2002              MOVS     r0,#2                 ;1544
0015e0  e68f              B        |L1.4866|
                  |L1.5602|
0015e2  2000              MOVS     r0,#0                 ;1544
0015e4  e68d              B        |L1.4866|
                  |L1.5606|
0015e6  2d04              CMP      r5,#4                 ;1545
0015e8  d101              BNE      |L1.5614|
0015ea  2003              MOVS     r0,#3                 ;1545
0015ec  e689              B        |L1.4866|
                  |L1.5614|
0015ee  2001              MOVS     r0,#1                 ;1545
0015f0  e687              B        |L1.4866|
;;;1547   
                          ENDP

                  deflate_slow PROC
;;;1553    */
;;;1554   local block_state deflate_slow(s, flush)
0015f2  e92d41f0          PUSH     {r4-r8,lr}
;;;1555       deflate_state *s;
;;;1556       int flush;
;;;1557   {
0015f6  4604              MOV      r4,r0
0015f8  460d              MOV      r5,r1
;;;1558       IPos hash_head = NIL;    /* head of hash chain */
0015fa  2600              MOVS     r6,#0
;;;1559       int bflush;              /* set if current block must be flushed */
;;;1560   
;;;1561       /* Process the input block. */
;;;1562       for (;;) {
0015fc  bf00              NOP      
                  |L1.5630|
;;;1563           /* Make sure that we always have enough lookahead, except
;;;1564            * at the end of the input file. We need MAX_MATCH bytes
;;;1565            * for the next match, plus MIN_MATCH bytes to insert the
;;;1566            * string following the next match.
;;;1567            */
;;;1568           if (s->lookahead < MIN_LOOKAHEAD) {
0015fe  6f60              LDR      r0,[r4,#0x74]
001600  f5b07f83          CMP      r0,#0x106
001604  d20d              BCS      |L1.5666|
;;;1569               fill_window(s);
001606  4620              MOV      r0,r4
001608  f7fffffe          BL       fill_window
;;;1570               if (s->lookahead < MIN_LOOKAHEAD && flush == Z_NO_FLUSH) {
00160c  6f60              LDR      r0,[r4,#0x74]
00160e  f5b07f83          CMP      r0,#0x106
001612  d203              BCS      |L1.5660|
001614  b915              CBNZ     r5,|L1.5660|
;;;1571                   return need_more;
001616  2000              MOVS     r0,#0
                  |L1.5656|
;;;1572               }
;;;1573               if (s->lookahead == 0) break; /* flush the current block */
;;;1574           }
;;;1575   
;;;1576           /* Insert the string window[strstart .. strstart+2] in the
;;;1577            * dictionary, and set hash_head to the head of the hash chain:
;;;1578            */
;;;1579           if (s->lookahead >= MIN_MATCH) {
;;;1580               INSERT_STRING(s, s->strstart, hash_head);
;;;1581           }
;;;1582   
;;;1583           /* Find the longest match, discarding those <= prev_length.
;;;1584            */
;;;1585           s->prev_length = s->match_length, s->prev_match = s->match_start;
;;;1586           s->match_length = MIN_MATCH-1;
;;;1587   
;;;1588           if (hash_head != NIL && s->prev_length < s->max_lazy_match &&
;;;1589               s->strstart - hash_head <= MAX_DIST(s)) {
;;;1590               /* To simplify the code, we prevent matches with the string
;;;1591                * of window index 0 (in particular we have to avoid a match
;;;1592                * of the string with itself at the start of the input file).
;;;1593                */
;;;1594               if (s->strategy != Z_HUFFMAN_ONLY && s->strategy != Z_RLE) {
;;;1595                   s->match_length = longest_match (s, hash_head);
;;;1596               } else if (s->strategy == Z_RLE && s->strstart - hash_head == 1) {
;;;1597                   s->match_length = longest_match_fast (s, hash_head);
;;;1598               }
;;;1599               /* longest_match() or longest_match_fast() sets match_start */
;;;1600   
;;;1601               if (s->match_length <= 5 && (s->strategy == Z_FILTERED
;;;1602   #if TOO_FAR <= 32767
;;;1603                   || (s->match_length == MIN_MATCH &&
;;;1604                       s->strstart - s->match_start > TOO_FAR)
;;;1605   #endif
;;;1606                   )) {
;;;1607   
;;;1608                   /* If prev_match is also MIN_MATCH, match_start is garbage
;;;1609                    * but we will ignore the current match anyway.
;;;1610                    */
;;;1611                   s->match_length = MIN_MATCH-1;
;;;1612               }
;;;1613           }
;;;1614           /* If there was a match at the previous step and the current
;;;1615            * match is not better, output the previous match:
;;;1616            */
;;;1617           if (s->prev_length >= MIN_MATCH && s->match_length <= s->prev_length) {
;;;1618               uInt max_insert = s->strstart + s->lookahead - MIN_MATCH;
;;;1619               /* Do not insert strings in hash table beyond this. */
;;;1620   
;;;1621               check_match(s, s->strstart-1, s->prev_match, s->prev_length);
;;;1622   
;;;1623               _tr_tally_dist(s, s->strstart -1 - s->prev_match,
;;;1624                              s->prev_length - MIN_MATCH, bflush);
;;;1625   
;;;1626               /* Insert in hash table all strings up to the end of the match.
;;;1627                * strstart-1 and strstart are already inserted. If there is not
;;;1628                * enough lookahead, the last two strings are not inserted in
;;;1629                * the hash table.
;;;1630                */
;;;1631               s->lookahead -= s->prev_length-1;
;;;1632               s->prev_length -= 2;
;;;1633               do {
;;;1634                   if (++s->strstart <= max_insert) {
;;;1635                       INSERT_STRING(s, s->strstart, hash_head);
;;;1636                   }
;;;1637               } while (--s->prev_length != 0);
;;;1638               s->match_available = 0;
;;;1639               s->match_length = MIN_MATCH-1;
;;;1640               s->strstart++;
;;;1641   
;;;1642               if (bflush) FLUSH_BLOCK(s, 0);
;;;1643   
;;;1644           } else if (s->match_available) {
;;;1645               /* If there was no match at the previous position, output a
;;;1646                * single literal. If there was a match but the current match
;;;1647                * is longer, truncate the previous match to a single literal.
;;;1648                */
;;;1649               Tracevv((stderr,"%c", s->window[s->strstart-1]));
;;;1650               _tr_tally_lit(s, s->window[s->strstart-1], bflush);
;;;1651               if (bflush) {
;;;1652                   FLUSH_BLOCK_ONLY(s, 0);
;;;1653               }
;;;1654               s->strstart++;
;;;1655               s->lookahead--;
;;;1656               if (s->strm->avail_out == 0) return need_more;
;;;1657           } else {
;;;1658               /* There is no previous match to compare with, wait for
;;;1659                * the next step to decide.
;;;1660                */
;;;1661               s->match_available = 1;
;;;1662               s->strstart++;
;;;1663               s->lookahead--;
;;;1664           }
;;;1665       }
;;;1666       Assert (flush != Z_NO_FLUSH, "no flush?");
;;;1667       if (s->match_available) {
;;;1668           Tracevv((stderr,"%c", s->window[s->strstart-1]));
;;;1669           _tr_tally_lit(s, s->window[s->strstart-1], bflush);
;;;1670           s->match_available = 0;
;;;1671       }
;;;1672       FLUSH_BLOCK(s, flush == Z_FINISH);
;;;1673       return flush == Z_FINISH ? finish_done : block_done;
;;;1674   }
001618  e8bd81f0          POP      {r4-r8,pc}
                  |L1.5660|
00161c  6f60              LDR      r0,[r4,#0x74]         ;1573
00161e  b900              CBNZ     r0,|L1.5666|
001620  e17b              B        |L1.6426|
                  |L1.5666|
001622  6f60              LDR      r0,[r4,#0x74]         ;1579
001624  2803              CMP      r0,#3                 ;1579
001626  d31c              BCC      |L1.5730|
001628  f8941058          LDRB     r1,[r4,#0x58]         ;1580
00162c  6ca0              LDR      r0,[r4,#0x48]         ;1580
00162e  4088              LSLS     r0,r0,r1              ;1580
001630  6ee1              LDR      r1,[r4,#0x6c]         ;1580
001632  1c89              ADDS     r1,r1,#2              ;1580
001634  6ba2              LDR      r2,[r4,#0x38]         ;1580
001636  5c51              LDRB     r1,[r2,r1]            ;1580
001638  4048              EORS     r0,r0,r1              ;1580
00163a  6d61              LDR      r1,[r4,#0x54]         ;1580
00163c  4008              ANDS     r0,r0,r1              ;1580
00163e  64a0              STR      r0,[r4,#0x48]         ;1580
001640  e9d40111          LDRD     r0,r1,[r4,#0x44]      ;1580
001644  f8301011          LDRH     r1,[r0,r1,LSL #1]     ;1580
001648  6b62              LDR      r2,[r4,#0x34]         ;1580
00164a  6ee0              LDR      r0,[r4,#0x6c]         ;1580
00164c  4010              ANDS     r0,r0,r2              ;1580
00164e  6c22              LDR      r2,[r4,#0x40]         ;1580
001650  f8221010          STRH     r1,[r2,r0,LSL #1]     ;1580
001654  460e              MOV      r6,r1                 ;1580
001656  f8b4006c          LDRH     r0,[r4,#0x6c]         ;1580
00165a  e9d41211          LDRD     r1,r2,[r4,#0x44]      ;1580
00165e  f8210012          STRH     r0,[r1,r2,LSL #1]     ;1580
                  |L1.5730|
001662  6e20              LDR      r0,[r4,#0x60]         ;1585
001664  67a0              STR      r0,[r4,#0x78]         ;1585
001666  6f20              LDR      r0,[r4,#0x70]         ;1585
001668  6660              STR      r0,[r4,#0x64]         ;1585
00166a  2002              MOVS     r0,#2                 ;1586
00166c  6620              STR      r0,[r4,#0x60]         ;1586
00166e  b3c6              CBZ      r6,|L1.5858|
001670  f8d41080          LDR      r1,[r4,#0x80]         ;1588
001674  6fa0              LDR      r0,[r4,#0x78]         ;1588
001676  4288              CMP      r0,r1                 ;1588
001678  d233              BCS      |L1.5858|
00167a  6ee0              LDR      r0,[r4,#0x6c]         ;1589
00167c  1b81              SUBS     r1,r0,r6              ;1589
00167e  6ae0              LDR      r0,[r4,#0x2c]         ;1589
001680  f5a07083          SUB      r0,r0,#0x106          ;1589
001684  4281              CMP      r1,r0                 ;1589
001686  d82c              BHI      |L1.5858|
001688  f8d40088          LDR      r0,[r4,#0x88]         ;1594
00168c  2802              CMP      r0,#2                 ;1594
00168e  d009              BEQ      |L1.5796|
001690  f8d40088          LDR      r0,[r4,#0x88]         ;1594
001694  2803              CMP      r0,#3                 ;1594
001696  d005              BEQ      |L1.5796|
001698  4631              MOV      r1,r6                 ;1595
00169a  4620              MOV      r0,r4                 ;1595
00169c  f7fffffe          BL       longest_match
0016a0  6620              STR      r0,[r4,#0x60]         ;1595
0016a2  e00c              B        |L1.5822|
                  |L1.5796|
0016a4  f8d40088          LDR      r0,[r4,#0x88]         ;1596
0016a8  2803              CMP      r0,#3                 ;1596
0016aa  d108              BNE      |L1.5822|
0016ac  6ee0              LDR      r0,[r4,#0x6c]         ;1596
0016ae  1b80              SUBS     r0,r0,r6              ;1596
0016b0  2801              CMP      r0,#1                 ;1596
0016b2  d104              BNE      |L1.5822|
0016b4  4631              MOV      r1,r6                 ;1597
0016b6  4620              MOV      r0,r4                 ;1597
0016b8  f7fffffe          BL       longest_match_fast
0016bc  6620              STR      r0,[r4,#0x60]         ;1597
                  |L1.5822|
0016be  6e20              LDR      r0,[r4,#0x60]         ;1601
0016c0  2805              CMP      r0,#5                 ;1601
0016c2  d80e              BHI      |L1.5858|
0016c4  f8d40088          LDR      r0,[r4,#0x88]         ;1601
0016c8  2801              CMP      r0,#1                 ;1601
0016ca  d008              BEQ      |L1.5854|
0016cc  6e20              LDR      r0,[r4,#0x60]         ;1603
0016ce  2803              CMP      r0,#3                 ;1603
0016d0  d107              BNE      |L1.5858|
0016d2  e9d4011b          LDRD     r0,r1,[r4,#0x6c]      ;1604
0016d6  1a40              SUBS     r0,r0,r1              ;1604
0016d8  f5b05f80          CMP      r0,#0x1000            ;1604
0016dc  d901              BLS      |L1.5858|
                  |L1.5854|
0016de  2002              MOVS     r0,#2                 ;1611
0016e0  6620              STR      r0,[r4,#0x60]         ;1611
                  |L1.5858|
0016e2  6fa0              LDR      r0,[r4,#0x78]         ;1617
0016e4  2803              CMP      r0,#3                 ;1617
0016e6  d379              BCC      |L1.6108|
0016e8  6fa1              LDR      r1,[r4,#0x78]         ;1617
0016ea  6e20              LDR      r0,[r4,#0x60]         ;1617
0016ec  4288              CMP      r0,r1                 ;1617
0016ee  d875              BHI      |L1.6108|
0016f0  3464              ADDS     r4,r4,#0x64           ;1618
0016f2  6921              LDR      r1,[r4,#0x10]         ;1618
0016f4  68a0              LDR      r0,[r4,#8]            ;1618
0016f6  4408              ADD      r0,r0,r1              ;1618
0016f8  f1a00803          SUB      r8,r0,#3              ;1618
0016fc  7d22              LDRB     r2,[r4,#0x14]         ;1623
0016fe  1ed2              SUBS     r2,r2,#3              ;1623
001700  b2d1              UXTB     r1,r2                 ;1623
001702  8922              LDRH     r2,[r4,#8]            ;1623
001704  1e52              SUBS     r2,r2,#1              ;1623
001706  f8343964          LDRH     r3,[r4],#-0x64        ;1623
00170a  1ad2              SUBS     r2,r2,r3              ;1623
00170c  b290              UXTH     r0,r2                 ;1623
00170e  f24162a4          MOV      r2,#0x16a4            ;1623
001712  5913              LDR      r3,[r2,r4]            ;1623
001714  1f12              SUBS     r2,r2,#4              ;1623
001716  5912              LDR      r2,[r2,r4]            ;1623
001718  f8230012          STRH     r0,[r3,r2,LSL #1]     ;1623
00171c  f44f52b5          MOV      r2,#0x16a0            ;1623
001720  f852c004          LDR      r12,[r2,r4]           ;1623
001724  5912              LDR      r2,[r2,r4]            ;1623
001726  1c52              ADDS     r2,r2,#1              ;1623
001728  f44f53b5          MOV      r3,#0x16a0            ;1623
00172c  511a              STR      r2,[r3,r4]            ;1623
00172e  f2416298          MOV      r2,#0x1698            ;1623
001732  5912              LDR      r2,[r2,r4]            ;1623
001734  f802100c          STRB     r1,[r2,r12]           ;1623
001738  1e42              SUBS     r2,r0,#1              ;1623
00173a  b290              UXTH     r0,r2                 ;1623
00173c  4a25              LDR      r2,|L1.6100|
00173e  5c52              LDRB     r2,[r2,r1]            ;1623
001740  f2021201          ADD      r2,r2,#0x101          ;1623
001744  f1040394          ADD      r3,r4,#0x94           ;1623
001748  f8332022          LDRH     r2,[r3,r2,LSL #2]     ;1623
00174c  1c52              ADDS     r2,r2,#1              ;1623
00174e  fa1ffc82          UXTH     r12,r2                ;1623
001752  4a20              LDR      r2,|L1.6100|
001754  5c52              LDRB     r2,[r2,r1]            ;1623
001756  f2021201          ADD      r2,r2,#0x101          ;1623
00175a  f823c022          STRH     r12,[r3,r2,LSL #2]    ;1623
00175e  28ff              CMP      r0,#0xff              ;1623
001760  dc02              BGT      |L1.5992|
001762  4a1d              LDR      r2,|L1.6104|
001764  5c12              LDRB     r2,[r2,r0]            ;1623
001766  e005              B        |L1.6004|
                  |L1.5992|
001768  f44f7280          MOV      r2,#0x100             ;1623
00176c  eb0212e0          ADD      r2,r2,r0,ASR #7       ;1623
001770  4b19              LDR      r3,|L1.6104|
001772  5c9a              LDRB     r2,[r3,r2]            ;1623
                  |L1.6004|
001774  f6041388          ADD      r3,r4,#0x988          ;1623
001778  f8332022          LDRH     r2,[r3,r2,LSL #2]     ;1623
00177c  1c52              ADDS     r2,r2,#1              ;1623
00177e  fa1ffc82          UXTH     r12,r2                ;1623
001782  28ff              CMP      r0,#0xff              ;1623
001784  dc02              BGT      |L1.6028|
001786  4a14              LDR      r2,|L1.6104|
001788  5c12              LDRB     r2,[r2,r0]            ;1623
00178a  e005              B        |L1.6040|
                  |L1.6028|
00178c  f44f7280          MOV      r2,#0x100             ;1623
001790  eb0212e0          ADD      r2,r2,r0,ASR #7       ;1623
001794  4b10              LDR      r3,|L1.6104|
001796  5c9a              LDRB     r2,[r3,r2]            ;1623
                  |L1.6040|
001798  f6041388          ADD      r3,r4,#0x988          ;1623
00179c  f823c022          STRH     r12,[r3,r2,LSL #2]    ;1623
0017a0  f44f52b5          MOV      r2,#0x16a0            ;1623
0017a4  5913              LDR      r3,[r2,r4]            ;1623
0017a6  1f12              SUBS     r2,r2,#4              ;1623
0017a8  5912              LDR      r2,[r2,r4]            ;1623
0017aa  1e52              SUBS     r2,r2,#1              ;1623
0017ac  4293              CMP      r3,r2                 ;1623
0017ae  d101              BNE      |L1.6068|
0017b0  2201              MOVS     r2,#1                 ;1623
0017b2  e000              B        |L1.6070|
                  |L1.6068|
0017b4  2200              MOVS     r2,#0                 ;1623
                  |L1.6070|
0017b6  4617              MOV      r7,r2                 ;1623
0017b8  e9d4101d          LDRD     r1,r0,[r4,#0x74]      ;1631
0017bc  1e40              SUBS     r0,r0,#1              ;1631
0017be  1a08              SUBS     r0,r1,r0              ;1631
0017c0  6760              STR      r0,[r4,#0x74]         ;1631
0017c2  6fa0              LDR      r0,[r4,#0x78]         ;1632
0017c4  1e80              SUBS     r0,r0,#2              ;1632
0017c6  67a0              STR      r0,[r4,#0x78]         ;1632
0017c8  bf00              NOP                            ;1633
                  |L1.6090|
0017ca  6ee0              LDR      r0,[r4,#0x6c]         ;1634
0017cc  1c40              ADDS     r0,r0,#1              ;1634
0017ce  66e0              STR      r0,[r4,#0x6c]         ;1634
0017d0  4540              CMP      r0,r8                 ;1634
0017d2  e004              B        |L1.6110|
                  |L1.6100|
                          DCD      _length_code
                  |L1.6104|
                          DCD      _dist_code
                  |L1.6108|
0017dc  e043              B        |L1.6246|
                  |L1.6110|
0017de  d81c              BHI      |L1.6170|
0017e0  f8941058          LDRB     r1,[r4,#0x58]         ;1635
0017e4  6ca0              LDR      r0,[r4,#0x48]         ;1635
0017e6  4088              LSLS     r0,r0,r1              ;1635
0017e8  6ee1              LDR      r1,[r4,#0x6c]         ;1635
0017ea  1c89              ADDS     r1,r1,#2              ;1635
0017ec  6ba2              LDR      r2,[r4,#0x38]         ;1635
0017ee  5c51              LDRB     r1,[r2,r1]            ;1635
0017f0  4048              EORS     r0,r0,r1              ;1635
0017f2  6d61              LDR      r1,[r4,#0x54]         ;1635
0017f4  4008              ANDS     r0,r0,r1              ;1635
0017f6  64a0              STR      r0,[r4,#0x48]         ;1635
0017f8  e9d40111          LDRD     r0,r1,[r4,#0x44]      ;1635
0017fc  f8301011          LDRH     r1,[r0,r1,LSL #1]     ;1635
001800  6b62              LDR      r2,[r4,#0x34]         ;1635
001802  6ee0              LDR      r0,[r4,#0x6c]         ;1635
001804  4010              ANDS     r0,r0,r2              ;1635
001806  6c22              LDR      r2,[r4,#0x40]         ;1635
001808  f8221010          STRH     r1,[r2,r0,LSL #1]     ;1635
00180c  460e              MOV      r6,r1                 ;1635
00180e  f8b4006c          LDRH     r0,[r4,#0x6c]         ;1635
001812  e9d41211          LDRD     r1,r2,[r4,#0x44]      ;1635
001816  f8210012          STRH     r0,[r1,r2,LSL #1]     ;1635
                  |L1.6170|
00181a  6fa0              LDR      r0,[r4,#0x78]         ;1637
00181c  1e40              SUBS     r0,r0,#1              ;1637
00181e  67a0              STR      r0,[r4,#0x78]         ;1637
001820  2800              CMP      r0,#0                 ;1637
001822  d1d2              BNE      |L1.6090|
001824  66a0              STR      r0,[r4,#0x68]         ;1638
001826  2002              MOVS     r0,#2                 ;1639
001828  6620              STR      r0,[r4,#0x60]         ;1639
00182a  6ee0              LDR      r0,[r4,#0x6c]         ;1640
00182c  1c40              ADDS     r0,r0,#1              ;1640
00182e  66e0              STR      r0,[r4,#0x6c]         ;1640
001830  b1c7              CBZ      r7,|L1.6244|
001832  6de3              LDR      r3,[r4,#0x5c]         ;1642
001834  6ee0              LDR      r0,[r4,#0x6c]         ;1642
001836  1ac2              SUBS     r2,r0,r3              ;1642
001838  2b00              CMP      r3,#0                 ;1642
00183a  db03              BLT      |L1.6212|
00183c  6de3              LDR      r3,[r4,#0x5c]         ;1642
00183e  6ba0              LDR      r0,[r4,#0x38]         ;1642
001840  4418              ADD      r0,r0,r3              ;1642
001842  e000              B        |L1.6214|
                  |L1.6212|
001844  2000              MOVS     r0,#0                 ;1642
                  |L1.6214|
001846  4601              MOV      r1,r0                 ;1642
001848  2300              MOVS     r3,#0                 ;1642
00184a  4620              MOV      r0,r4                 ;1642
00184c  f7fffffe          BL       _tr_flush_block
001850  6ee0              LDR      r0,[r4,#0x6c]         ;1642
001852  65e0              STR      r0,[r4,#0x5c]         ;1642
001854  6820              LDR      r0,[r4,#0]            ;1642
001856  f7fffffe          BL       flush_pending
00185a  6820              LDR      r0,[r4,#0]            ;1642
00185c  6900              LDR      r0,[r0,#0x10]         ;1642
00185e  b908              CBNZ     r0,|L1.6244|
001860  2000              MOVS     r0,#0                 ;1642
001862  e6d9              B        |L1.5656|
                  |L1.6244|
001864  e6cb              B        |L1.5630|
                  |L1.6246|
001866  6ea0              LDR      r0,[r4,#0x68]         ;1644
001868  b3b8              CBZ      r0,|L1.6362|
00186a  6ee1              LDR      r1,[r4,#0x6c]         ;1650
00186c  1e49              SUBS     r1,r1,#1              ;1650
00186e  6ba2              LDR      r2,[r4,#0x38]         ;1650
001870  5c50              LDRB     r0,[r2,r1]            ;1650
001872  2200              MOVS     r2,#0                 ;1650
001874  f24161a4          MOV      r1,#0x16a4            ;1650
001878  590b              LDR      r3,[r1,r4]            ;1650
00187a  1f09              SUBS     r1,r1,#4              ;1650
00187c  5909              LDR      r1,[r1,r4]            ;1650
00187e  f8232011          STRH     r2,[r3,r1,LSL #1]     ;1650
001882  f44f51b5          MOV      r1,#0x16a0            ;1650
001886  590b              LDR      r3,[r1,r4]            ;1650
001888  5909              LDR      r1,[r1,r4]            ;1650
00188a  1c49              ADDS     r1,r1,#1              ;1650
00188c  f44f52b5          MOV      r2,#0x16a0            ;1650
001890  5111              STR      r1,[r2,r4]            ;1650
001892  f2416198          MOV      r1,#0x1698            ;1650
001896  5909              LDR      r1,[r1,r4]            ;1650
001898  54c8              STRB     r0,[r1,r3]            ;1650
00189a  f1040194          ADD      r1,r4,#0x94           ;1650
00189e  f8311020          LDRH     r1,[r1,r0,LSL #2]     ;1650
0018a2  1c49              ADDS     r1,r1,#1              ;1650
0018a4  b28a              UXTH     r2,r1                 ;1650
0018a6  f1040194          ADD      r1,r4,#0x94           ;1650
0018aa  f8212020          STRH     r2,[r1,r0,LSL #2]     ;1650
0018ae  f44f51b5          MOV      r1,#0x16a0            ;1650
0018b2  590a              LDR      r2,[r1,r4]            ;1650
0018b4  1f09              SUBS     r1,r1,#4              ;1650
0018b6  5909              LDR      r1,[r1,r4]            ;1650
0018b8  1e49              SUBS     r1,r1,#1              ;1650
0018ba  428a              CMP      r2,r1                 ;1650
0018bc  d101              BNE      |L1.6338|
0018be  2101              MOVS     r1,#1                 ;1650
0018c0  e000              B        |L1.6340|
                  |L1.6338|
0018c2  2100              MOVS     r1,#0                 ;1650
                  |L1.6340|
0018c4  460f              MOV      r7,r1                 ;1650
0018c6  b1a7              CBZ      r7,|L1.6386|
0018c8  6de3              LDR      r3,[r4,#0x5c]         ;1652
0018ca  6ee0              LDR      r0,[r4,#0x6c]         ;1652
0018cc  1ac2              SUBS     r2,r0,r3              ;1652
0018ce  2b00              CMP      r3,#0                 ;1652
0018d0  db04              BLT      |L1.6364|
0018d2  6de3              LDR      r3,[r4,#0x5c]         ;1652
0018d4  6ba0              LDR      r0,[r4,#0x38]         ;1652
0018d6  4418              ADD      r0,r0,r3              ;1652
0018d8  e001              B        |L1.6366|
                  |L1.6362|
0018da  e015              B        |L1.6408|
                  |L1.6364|
0018dc  2000              MOVS     r0,#0                 ;1652
                  |L1.6366|
0018de  4601              MOV      r1,r0                 ;1652
0018e0  2300              MOVS     r3,#0                 ;1652
0018e2  4620              MOV      r0,r4                 ;1652
0018e4  f7fffffe          BL       _tr_flush_block
0018e8  6ee0              LDR      r0,[r4,#0x6c]         ;1652
0018ea  65e0              STR      r0,[r4,#0x5c]         ;1652
0018ec  6820              LDR      r0,[r4,#0]            ;1652
0018ee  f7fffffe          BL       flush_pending
                  |L1.6386|
0018f2  6ee0              LDR      r0,[r4,#0x6c]         ;1654
0018f4  1c40              ADDS     r0,r0,#1              ;1654
0018f6  66e0              STR      r0,[r4,#0x6c]         ;1654
0018f8  6f60              LDR      r0,[r4,#0x74]         ;1655
0018fa  1e40              SUBS     r0,r0,#1              ;1655
0018fc  6760              STR      r0,[r4,#0x74]         ;1655
0018fe  6820              LDR      r0,[r4,#0]            ;1656
001900  6900              LDR      r0,[r0,#0x10]         ;1656
001902  2800              CMP      r0,#0                 ;1656
001904  d1ae              BNE      |L1.6244|
001906  e687              B        |L1.5656|
                  |L1.6408|
001908  2001              MOVS     r0,#1                 ;1661
00190a  66a0              STR      r0,[r4,#0x68]         ;1661
00190c  6ee0              LDR      r0,[r4,#0x6c]         ;1662
00190e  1c40              ADDS     r0,r0,#1              ;1662
001910  66e0              STR      r0,[r4,#0x6c]         ;1662
001912  6f60              LDR      r0,[r4,#0x74]         ;1663
001914  1e40              SUBS     r0,r0,#1              ;1663
001916  6760              STR      r0,[r4,#0x74]         ;1663
001918  e671              B        |L1.5630|
                  |L1.6426|
00191a  bf00              NOP                            ;1573
00191c  6ea0              LDR      r0,[r4,#0x68]         ;1667
00191e  b378              CBZ      r0,|L1.6528|
001920  6ee1              LDR      r1,[r4,#0x6c]         ;1669
001922  1e49              SUBS     r1,r1,#1              ;1669
001924  6ba2              LDR      r2,[r4,#0x38]         ;1669
001926  5c50              LDRB     r0,[r2,r1]            ;1669
001928  2200              MOVS     r2,#0                 ;1669
00192a  f24161a4          MOV      r1,#0x16a4            ;1669
00192e  590b              LDR      r3,[r1,r4]            ;1669
001930  1f09              SUBS     r1,r1,#4              ;1669
001932  5909              LDR      r1,[r1,r4]            ;1669
001934  f8232011          STRH     r2,[r3,r1,LSL #1]     ;1669
001938  f44f51b5          MOV      r1,#0x16a0            ;1669
00193c  590b              LDR      r3,[r1,r4]            ;1669
00193e  5909              LDR      r1,[r1,r4]            ;1669
001940  1c49              ADDS     r1,r1,#1              ;1669
001942  f44f52b5          MOV      r2,#0x16a0            ;1669
001946  5111              STR      r1,[r2,r4]            ;1669
001948  f2416198          MOV      r1,#0x1698            ;1669
00194c  5909              LDR      r1,[r1,r4]            ;1669
00194e  54c8              STRB     r0,[r1,r3]            ;1669
001950  f1040194          ADD      r1,r4,#0x94           ;1669
001954  f8311020          LDRH     r1,[r1,r0,LSL #2]     ;1669
001958  1c49              ADDS     r1,r1,#1              ;1669
00195a  b28a              UXTH     r2,r1                 ;1669
00195c  f1040194          ADD      r1,r4,#0x94           ;1669
001960  f8212020          STRH     r2,[r1,r0,LSL #2]     ;1669
001964  f44f51b5          MOV      r1,#0x16a0            ;1669
001968  590a              LDR      r2,[r1,r4]            ;1669
00196a  1f09              SUBS     r1,r1,#4              ;1669
00196c  5909              LDR      r1,[r1,r4]            ;1669
00196e  1e49              SUBS     r1,r1,#1              ;1669
001970  428a              CMP      r2,r1                 ;1669
001972  d101              BNE      |L1.6520|
001974  2101              MOVS     r1,#1                 ;1669
001976  e000              B        |L1.6522|
                  |L1.6520|
001978  2100              MOVS     r1,#0                 ;1669
                  |L1.6522|
00197a  460f              MOV      r7,r1                 ;1669
00197c  2000              MOVS     r0,#0                 ;1670
00197e  66a0              STR      r0,[r4,#0x68]         ;1670
                  |L1.6528|
001980  f8d4c05c          LDR      r12,[r4,#0x5c]        ;1672
001984  6ee0              LDR      r0,[r4,#0x6c]         ;1672
001986  eba0020c          SUB      r2,r0,r12             ;1672
00198a  f1bc0f00          CMP      r12,#0                ;1672
00198e  db04              BLT      |L1.6554|
001990  f8d4c05c          LDR      r12,[r4,#0x5c]        ;1672
001994  6ba0              LDR      r0,[r4,#0x38]         ;1672
001996  4460              ADD      r0,r0,r12             ;1672
001998  e000              B        |L1.6556|
                  |L1.6554|
00199a  2000              MOVS     r0,#0                 ;1672
                  |L1.6556|
00199c  4601              MOV      r1,r0                 ;1672
00199e  2d04              CMP      r5,#4                 ;1672
0019a0  d101              BNE      |L1.6566|
0019a2  2001              MOVS     r0,#1                 ;1672
0019a4  e000              B        |L1.6568|
                  |L1.6566|
0019a6  2000              MOVS     r0,#0                 ;1672
                  |L1.6568|
0019a8  4603              MOV      r3,r0                 ;1672
0019aa  4620              MOV      r0,r4                 ;1672
0019ac  f7fffffe          BL       _tr_flush_block
0019b0  6ee0              LDR      r0,[r4,#0x6c]         ;1672
0019b2  65e0              STR      r0,[r4,#0x5c]         ;1672
0019b4  6820              LDR      r0,[r4,#0]            ;1672
0019b6  f7fffffe          BL       flush_pending
0019ba  6820              LDR      r0,[r4,#0]            ;1672
0019bc  6900              LDR      r0,[r0,#0x10]         ;1672
0019be  b928              CBNZ     r0,|L1.6604|
0019c0  2d04              CMP      r5,#4                 ;1672
0019c2  d101              BNE      |L1.6600|
0019c4  2002              MOVS     r0,#2                 ;1672
0019c6  e627              B        |L1.5656|
                  |L1.6600|
0019c8  2000              MOVS     r0,#0                 ;1672
0019ca  e625              B        |L1.5656|
                  |L1.6604|
0019cc  2d04              CMP      r5,#4                 ;1673
0019ce  d101              BNE      |L1.6612|
0019d0  2003              MOVS     r0,#3                 ;1673
0019d2  e621              B        |L1.5656|
                  |L1.6612|
0019d4  2001              MOVS     r0,#1                 ;1673
0019d6  e61f              B        |L1.5656|
;;;1675   #endif /* FASTEST */
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  deflate_copyright
000000  20646566          DCB      0x20,0x64,0x65,0x66
000004  6c617465          DCB      0x6c,0x61,0x74,0x65
000008  20312e32          DCB      0x20,0x31,0x2e,0x32
00000c  2e332043          DCB      0x2e,0x33,0x20,0x43
000010  6f707972          DCB      0x6f,0x70,0x79,0x72
000014  69676874          DCB      0x69,0x67,0x68,0x74
000018  20313939          DCB      0x20,0x31,0x39,0x39
00001c  352d3230          DCB      0x35,0x2d,0x32,0x30
000020  3035204a          DCB      0x30,0x35,0x20,0x4a
000024  65616e2d          DCB      0x65,0x61,0x6e,0x2d
000028  6c6f7570          DCB      0x6c,0x6f,0x75,0x70
00002c  20476169          DCB      0x20,0x47,0x61,0x69
000030  6c6c7920          DCB      0x6c,0x6c,0x79,0x20
000034  00000000          DCB      0x00,0x00,0x00,0x00
                  configuration_table
000038  00000000          DCW      0x0000,0x0000
00003c  00000000          DCW      0x0000,0x0000
                          DCD      deflate_stored
000044  00040004          DCW      0x0004,0x0004
000048  00080004          DCW      0x0008,0x0004
                          DCD      deflate_fast
000050  00040005          DCW      0x0004,0x0005
000054  00100008          DCW      0x0010,0x0008
                          DCD      deflate_fast
00005c  00040006          DCW      0x0004,0x0006
000060  00200020          DCW      0x0020,0x0020
                          DCD      deflate_fast
000068  00040004          DCW      0x0004,0x0004
00006c  00100010          DCW      0x0010,0x0010
                          DCD      deflate_slow
000074  00080010          DCW      0x0008,0x0010
000078  00200020          DCW      0x0020,0x0020
                          DCD      deflate_slow
000080  00080010          DCW      0x0008,0x0010
000084  00800080          DCW      0x0080,0x0080
                          DCD      deflate_slow
00008c  00080020          DCW      0x0008,0x0020
000090  00800100          DCW      0x0080,0x0100
                          DCD      deflate_slow
000098  00200080          DCW      0x0020,0x0080
00009c  01020400          DCW      0x0102,0x0400
                          DCD      deflate_slow
0000a4  00200102          DCW      0x0020,0x0102
0000a8  01021000          DCW      0x0102,0x1000
                          DCD      deflate_slow
                  my_version
0000b0  312e322e          DCB      0x31,0x2e,0x32,0x2e
0000b4  3300              DCB      0x33,0x00
