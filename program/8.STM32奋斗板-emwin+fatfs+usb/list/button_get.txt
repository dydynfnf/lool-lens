; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\button_get.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\button_get.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -I.\GUI\AntiAlias -I.\GUI\Config -I.\GUI\ConvertColor -I.\GUI\ConvertMono -I.\GUI\Core -I.\GUI\Font -I.\GUI\GUI_X -I.\GUI\JPEG -I.\GUI\LCDDriver -I.\GUI\MemDev -I.\GUI\MultiLayer -I.\GUI\Widget -I.\GUI\WM -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\INC\ST\STM32F10x -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\button_get.crf GUI\Widget\BUTTON_Get.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=1

                  BUTTON_GetBkColor PROC
;;;36     */
;;;37     GUI_COLOR BUTTON_GetBkColor(BUTTON_Handle hObj,unsigned int Index) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;38       GUI_COLOR Color = 0;
000008  f04f0600          MOV      r6,#0
;;;39       if (hObj && (Index < 2)) {
00000c  b155              CBZ      r5,|L1.36|
00000e  2c02              CMP      r4,#2
000010  d208              BCS      |L1.36|
;;;40         BUTTON_Obj * pObj;
;;;41         WM_LOCK();
;;;42         pObj = BUTTON_H2P(hObj);
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       GUI_ALLOC_h2p
000018  4607              MOV      r7,r0
;;;43         Color = pObj->Props.aBkColor[Index];
00001a  f1070028          ADD      r0,r7,#0x28
00001e  f8506024          LDR      r6,[r0,r4,LSL #2]
;;;44         WM_UNLOCK();
;;;45       }
000022  bf00              NOP      
                  |L1.36|
;;;46       return Color;
000024  4630              MOV      r0,r6
;;;47     }
000026  e8bd81f0          POP      {r4-r8,pc}
;;;48     
                          ENDP

                  BUTTON_GetFont PROC
;;;52     */
;;;53     const GUI_FONT GUI_UNI_PTR * BUTTON_GetFont(BUTTON_Handle hObj) {
00002a  b570              PUSH     {r4-r6,lr}
00002c  4604              MOV      r4,r0
;;;54       const GUI_FONT GUI_UNI_PTR * pFont = 0;
00002e  f04f0500          MOV      r5,#0
;;;55       if (hObj) {
000032  b12c              CBZ      r4,|L1.64|
;;;56         BUTTON_Obj * pObj;
;;;57         WM_LOCK();
;;;58         pObj = BUTTON_H2P(hObj);
000034  4620              MOV      r0,r4
000036  f7fffffe          BL       GUI_ALLOC_h2p
00003a  4606              MOV      r6,r0
;;;59         pFont = pObj->Props.pFont;
00003c  6c75              LDR      r5,[r6,#0x44]
;;;60         WM_UNLOCK();
;;;61       }
00003e  bf00              NOP      
                  |L1.64|
;;;62       return pFont;
000040  4628              MOV      r0,r5
;;;63     }
000042  bd70              POP      {r4-r6,pc}
;;;64     
                          ENDP

                  BUTTON_GetText PROC
;;;68     */
;;;69     void BUTTON_GetText(BUTTON_Handle hObj, char * pBuffer, int MaxLen) {
000044  e92d47f0          PUSH     {r4-r10,lr}
000048  4607              MOV      r7,r0
00004a  460c              MOV      r4,r1
00004c  4615              MOV      r5,r2
;;;70       if (hObj) {
00004e  b30f              CBZ      r7,|L1.148|
;;;71         BUTTON_Obj * pObj;
;;;72         WM_LOCK();
;;;73         pObj = BUTTON_H2P(hObj);
000050  4638              MOV      r0,r7
000052  f7fffffe          BL       GUI_ALLOC_h2p
000056  4680              MOV      r8,r0
;;;74         if (pObj->hpText) {
000058  f8b8004c          LDRH     r0,[r8,#0x4c]
00005c  b1b0              CBZ      r0,|L1.140|
;;;75           const char * pText = (const char*) GUI_ALLOC_h2p(pObj->hpText);
00005e  f9b8004c          LDRSH    r0,[r8,#0x4c]
000062  f7fffffe          BL       GUI_ALLOC_h2p
000066  4681              MOV      r9,r0
;;;76           int Len = strlen(pText);
000068  4648              MOV      r0,r9
00006a  f7fffffe          BL       strlen
00006e  4606              MOV      r6,r0
;;;77           if (Len > (MaxLen - 1))
000070  f1a50001          SUB      r0,r5,#1
000074  42b0              CMP      r0,r6
000076  da00              BGE      |L1.122|
;;;78             Len = MaxLen - 1;
000078  4606              MOV      r6,r0
                  |L1.122|
;;;79           memcpy((void *)pBuffer, (const void *)pText, Len);
00007a  4632              MOV      r2,r6
00007c  4649              MOV      r1,r9
00007e  4620              MOV      r0,r4
000080  f7fffffe          BL       __aeabi_memcpy
;;;80           *(pBuffer + Len) = 0;
000084  f04f0000          MOV      r0,#0
000088  55a0              STRB     r0,[r4,r6]
;;;81         } else {
00008a  e002              B        |L1.146|
                  |L1.140|
;;;82           *pBuffer = 0;     /* Empty string */
00008c  f04f0000          MOV      r0,#0
000090  7020              STRB     r0,[r4,#0]
                  |L1.146|
;;;83         }
;;;84         WM_UNLOCK();
;;;85       }
000092  bf00              NOP      
                  |L1.148|
;;;86     }
000094  e8bd87f0          POP      {r4-r10,pc}
;;;87     
                          ENDP

                  BUTTON_GetTextColor PROC
;;;91     */
;;;92     GUI_COLOR BUTTON_GetTextColor(BUTTON_Handle hObj,unsigned int Index) {
000098  e92d41f0          PUSH     {r4-r8,lr}
00009c  4605              MOV      r5,r0
00009e  460c              MOV      r4,r1
;;;93       GUI_COLOR Color = 0;
0000a0  f04f0600          MOV      r6,#0
;;;94       if (hObj && (Index < 2)) {
0000a4  b155              CBZ      r5,|L1.188|
0000a6  2c02              CMP      r4,#2
0000a8  d208              BCS      |L1.188|
;;;95         BUTTON_Obj * pObj;
;;;96         WM_LOCK();
;;;97         pObj = BUTTON_H2P(hObj);
0000aa  4628              MOV      r0,r5
0000ac  f7fffffe          BL       GUI_ALLOC_h2p
0000b0  4607              MOV      r7,r0
;;;98         Color = pObj->Props.aTextColor[Index];
0000b2  f1070034          ADD      r0,r7,#0x34
0000b6  f8506024          LDR      r6,[r0,r4,LSL #2]
;;;99         WM_UNLOCK();
;;;100      }
0000ba  bf00              NOP      
                  |L1.188|
;;;101      return Color;
0000bc  4630              MOV      r0,r6
;;;102    }
0000be  e8bd81f0          POP      {r4-r8,pc}
;;;103    
                          ENDP

