; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\trees.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\trees.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\FWlib\inc -I.\user -I.\CM3 -I.\MALLOC -I.\TFT -I.\EMWIN\EMWIN_INC -I.\EMWIN\DEMO -I.\PNG -I.\FATFS -I.\SDIO -I.\USB\inc -I.\USBCFG\inc -IE:\material\GUI\8.STM32·Ü¶·°å-emwin+fatfs+usb\RTE -Id:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.0.0 -Id:\Keil_v5\ARM\CMSIS\Include -Id:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.0.0\Device\Include -D__UVISION_VERSION=514 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\trees.crf PNG\trees.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  tr_static_init PROC
;;;237     */
;;;238    local void tr_static_init()
000000  4770              BX       lr
;;;239    {
;;;240    #if defined(GEN_TREES_H) || !defined(STDC)
;;;241        static int static_init_done = 0;
;;;242        int n;        /* iterates over tree elements */
;;;243        int bits;     /* bit counter */
;;;244        int length;   /* length value */
;;;245        int code;     /* code value */
;;;246        int dist;     /* distance index */
;;;247        ush bl_count[MAX_BITS+1];
;;;248        /* number of codes at each bit length for an optimal tree */
;;;249    
;;;250        if (static_init_done) return;
;;;251    
;;;252        /* For some embedded targets, global variables are not initialized: */
;;;253        static_l_desc.static_tree = static_ltree;
;;;254        static_l_desc.extra_bits = extra_lbits;
;;;255        static_d_desc.static_tree = static_dtree;
;;;256        static_d_desc.extra_bits = extra_dbits;
;;;257        static_bl_desc.extra_bits = extra_blbits;
;;;258    
;;;259        /* Initialize the mapping length (0..255) -> length code (0..28) */
;;;260        length = 0;
;;;261        for (code = 0; code < LENGTH_CODES-1; code++) {
;;;262            base_length[code] = length;
;;;263            for (n = 0; n < (1<<extra_lbits[code]); n++) {
;;;264                _length_code[length++] = (uch)code;
;;;265            }
;;;266        }
;;;267        Assert (length == 256, "tr_static_init: length != 256");
;;;268        /* Note that the length 255 (match length 258) can be represented
;;;269         * in two different ways: code 284 + 5 bits or code 285, so we
;;;270         * overwrite length_code[255] to use the best encoding:
;;;271         */
;;;272        _length_code[length-1] = (uch)code;
;;;273    
;;;274        /* Initialize the mapping dist (0..32K) -> dist code (0..29) */
;;;275        dist = 0;
;;;276        for (code = 0 ; code < 16; code++) {
;;;277            base_dist[code] = dist;
;;;278            for (n = 0; n < (1<<extra_dbits[code]); n++) {
;;;279                _dist_code[dist++] = (uch)code;
;;;280            }
;;;281        }
;;;282        Assert (dist == 256, "tr_static_init: dist != 256");
;;;283        dist >>= 7; /* from now on, all distances are divided by 128 */
;;;284        for ( ; code < D_CODES; code++) {
;;;285            base_dist[code] = dist << 7;
;;;286            for (n = 0; n < (1<<(extra_dbits[code]-7)); n++) {
;;;287                _dist_code[256 + dist++] = (uch)code;
;;;288            }
;;;289        }
;;;290        Assert (dist == 256, "tr_static_init: 256+dist != 512");
;;;291    
;;;292        /* Construct the codes of the static literal tree */
;;;293        for (bits = 0; bits <= MAX_BITS; bits++) bl_count[bits] = 0;
;;;294        n = 0;
;;;295        while (n <= 143) static_ltree[n++].Len = 8, bl_count[8]++;
;;;296        while (n <= 255) static_ltree[n++].Len = 9, bl_count[9]++;
;;;297        while (n <= 279) static_ltree[n++].Len = 7, bl_count[7]++;
;;;298        while (n <= 287) static_ltree[n++].Len = 8, bl_count[8]++;
;;;299        /* Codes 286 and 287 do not exist, but we must include them in the
;;;300         * tree construction to get a canonical Huffman tree (longest code
;;;301         * all ones)
;;;302         */
;;;303        gen_codes((ct_data *)static_ltree, L_CODES+1, bl_count);
;;;304    
;;;305        /* The static distance tree is trivial: */
;;;306        for (n = 0; n < D_CODES; n++) {
;;;307            static_dtree[n].Len = 5;
;;;308            static_dtree[n].Code = bi_reverse((unsigned)n, 5);
;;;309        }
;;;310        static_init_done = 1;
;;;311    
;;;312    #  ifdef GEN_TREES_H
;;;313        gen_trees_header();
;;;314    #  endif
;;;315    #endif /* defined(GEN_TREES_H) || !defined(STDC) */
;;;316    }
;;;317    
                          ENDP

                  init_block PROC
;;;410     */
;;;411    local void init_block(s)
000002  4601              MOV      r1,r0
;;;412        deflate_state *s;
;;;413    {
;;;414        int n; /* iterates over tree elements */
;;;415    
;;;416        /* Initialize the trees. */
;;;417        for (n = 0; n < L_CODES;  n++) s->dyn_ltree[n].Freq = 0;
000004  2000              MOVS     r0,#0
000006  e005              B        |L1.20|
                  |L1.8|
000008  2300              MOVS     r3,#0
00000a  f1010294          ADD      r2,r1,#0x94
00000e  f8223020          STRH     r3,[r2,r0,LSL #2]
000012  1c40              ADDS     r0,r0,#1
                  |L1.20|
000014  f5b07f8f          CMP      r0,#0x11e
000018  dbf6              BLT      |L1.8|
;;;418        for (n = 0; n < D_CODES;  n++) s->dyn_dtree[n].Freq = 0;
00001a  2000              MOVS     r0,#0
00001c  e005              B        |L1.42|
                  |L1.30|
00001e  2300              MOVS     r3,#0
000020  f6011288          ADD      r2,r1,#0x988
000024  f8223020          STRH     r3,[r2,r0,LSL #2]
000028  1c40              ADDS     r0,r0,#1
                  |L1.42|
00002a  281e              CMP      r0,#0x1e
00002c  dbf7              BLT      |L1.30|
;;;419        for (n = 0; n < BL_CODES; n++) s->bl_tree[n].Freq = 0;
00002e  2000              MOVS     r0,#0
000030  e005              B        |L1.62|
                  |L1.50|
000032  2300              MOVS     r3,#0
000034  f601227c          ADD      r2,r1,#0xa7c
000038  f8223020          STRH     r3,[r2,r0,LSL #2]
00003c  1c40              ADDS     r0,r0,#1
                  |L1.62|
00003e  2813              CMP      r0,#0x13
000040  dbf7              BLT      |L1.50|
;;;420    
;;;421        s->dyn_ltree[END_BLOCK].Freq = 1;
000042  2301              MOVS     r3,#1
000044  f8a13494          STRH     r3,[r1,#0x494]
;;;422        s->opt_len = s->static_len = 0L;
000048  2300              MOVS     r3,#0
00004a  f24162ac          MOV      r2,#0x16ac
00004e  5053              STR      r3,[r2,r1]
000050  1f12              SUBS     r2,r2,#4
000052  5053              STR      r3,[r2,r1]
;;;423        s->last_lit = s->matches = 0;
000054  f24162b0          MOV      r2,#0x16b0
000058  5053              STR      r3,[r2,r1]
00005a  f44f52b5          MOV      r2,#0x16a0
00005e  5053              STR      r3,[r2,r1]
;;;424    }
000060  4770              BX       lr
;;;425    
                          ENDP

                  _tr_init PROC
;;;381     */
;;;382    void _tr_init(s)
000062  b510              PUSH     {r4,lr}
;;;383        deflate_state *s;
;;;384    {
000064  4604              MOV      r4,r0
;;;385        tr_static_init();
000066  f7fffffe          BL       tr_static_init
;;;386    
;;;387        s->l_desc.dyn_tree = s->dyn_ltree;
00006a  f1040094          ADD      r0,r4,#0x94
00006e  f8c40b18          STR      r0,[r4,#0xb18]
;;;388        s->l_desc.stat_desc = &static_l_desc;
000072  49fe              LDR      r1,|L1.1132|
000074  f44f6032          MOV      r0,#0xb20
000078  5101              STR      r1,[r0,r4]
;;;389    
;;;390        s->d_desc.dyn_tree = s->dyn_dtree;
00007a  f6041088          ADD      r0,r4,#0x988
00007e  f8c40b24          STR      r0,[r4,#0xb24]
;;;391        s->d_desc.stat_desc = &static_d_desc;
000082  49fb              LDR      r1,|L1.1136|
000084  f640302c          MOV      r0,#0xb2c
000088  5101              STR      r1,[r0,r4]
;;;392    
;;;393        s->bl_desc.dyn_tree = s->bl_tree;
00008a  f604207c          ADD      r0,r4,#0xa7c
00008e  f8c40b30          STR      r0,[r4,#0xb30]
;;;394        s->bl_desc.stat_desc = &static_bl_desc;
000092  49f8              LDR      r1,|L1.1140|
000094  f6403038          MOV      r0,#0xb38
000098  5101              STR      r1,[r0,r4]
;;;395    
;;;396        s->bi_buf = 0;
00009a  2100              MOVS     r1,#0
00009c  f24160b8          MOV      r0,#0x16b8
0000a0  5301              STRH     r1,[r0,r4]
;;;397        s->bi_valid = 0;
0000a2  1d00              ADDS     r0,r0,#4
0000a4  5101              STR      r1,[r0,r4]
;;;398        s->last_eob_len = 8; /* enough lookahead for inflate */
0000a6  2108              MOVS     r1,#8
0000a8  f24160b4          MOV      r0,#0x16b4
0000ac  5101              STR      r1,[r0,r4]
;;;399    #ifdef DEBUG
;;;400        s->compressed_len = 0L;
;;;401        s->bits_sent = 0L;
;;;402    #endif
;;;403    
;;;404        /* Initialize the first block of the first file: */
;;;405        init_block(s);
0000ae  4620              MOV      r0,r4
0000b0  f7fffffe          BL       init_block
;;;406    }
0000b4  bd10              POP      {r4,pc}
;;;407    
                          ENDP

                  pqdownheap PROC
;;;454     */
;;;455    local void pqdownheap(s, tree, k)
0000b6  b5f0              PUSH     {r4-r7,lr}
;;;456        deflate_state *s;
;;;457        ct_data *tree;  /* the tree to restore */
;;;458        int k;               /* node to move down */
;;;459    {
0000b8  460b              MOV      r3,r1
;;;460        int v = s->heap[k];
0000ba  f600355c          ADD      r5,r0,#0xb5c
0000be  f8554022          LDR      r4,[r5,r2,LSL #2]
;;;461        int j = k << 1;  /* left son of k */
0000c2  0051              LSLS     r1,r2,#1
;;;462        while (j <= s->heap_len) {
0000c4  e061              B        |L1.394|
                  |L1.198|
;;;463            /* Set j to the smallest of the two sons: */
;;;464            if (j < s->heap_len &&
0000c6  f2414550          MOV      r5,#0x1450
0000ca  582d              LDR      r5,[r5,r0]
0000cc  428d              CMP      r5,r1
0000ce  dd31              BLE      |L1.308|
;;;465                smaller(tree, s->heap[j+1], s->heap[j], s->depth)) {
0000d0  f600355c          ADD      r5,r0,#0xb5c
0000d4  1c4e              ADDS     r6,r1,#1
0000d6  f8555026          LDR      r5,[r5,r6,LSL #2]
0000da  f8336025          LDRH     r6,[r3,r5,LSL #2]
0000de  f600355c          ADD      r5,r0,#0xb5c
0000e2  f8555021          LDR      r5,[r5,r1,LSL #2]
0000e6  f8335025          LDRH     r5,[r3,r5,LSL #2]
0000ea  42ae              CMP      r6,r5
0000ec  db21              BLT      |L1.306|
0000ee  f600355c          ADD      r5,r0,#0xb5c
0000f2  1c4e              ADDS     r6,r1,#1
0000f4  f8555026          LDR      r5,[r5,r6,LSL #2]
0000f8  f8336025          LDRH     r6,[r3,r5,LSL #2]
0000fc  f600355c          ADD      r5,r0,#0xb5c
000100  f8555021          LDR      r5,[r5,r1,LSL #2]
000104  f8335025          LDRH     r5,[r3,r5,LSL #2]
000108  42ae              CMP      r6,r5
00010a  d113              BNE      |L1.308|
00010c  f600355c          ADD      r5,r0,#0xb5c
000110  1c4e              ADDS     r6,r1,#1
000112  f8555026          LDR      r5,[r5,r6,LSL #2]
000116  f2414658          MOV      r6,#0x1458
00011a  4406              ADD      r6,r6,r0
00011c  5d76              LDRB     r6,[r6,r5]
00011e  f600355c          ADD      r5,r0,#0xb5c
000122  f8555021          LDR      r5,[r5,r1,LSL #2]
000126  f2414758          MOV      r7,#0x1458
00012a  4407              ADD      r7,r7,r0
00012c  5d7d              LDRB     r5,[r7,r5]
00012e  42ae              CMP      r6,r5
000130  dc00              BGT      |L1.308|
                  |L1.306|
;;;466                j++;
000132  1c49              ADDS     r1,r1,#1
                  |L1.308|
;;;467            }
;;;468            /* Exit if v is smaller than both sons */
;;;469            if (smaller(tree, v, s->heap[j], s->depth)) break;
000134  f8336024          LDRH     r6,[r3,r4,LSL #2]
000138  f600355c          ADD      r5,r0,#0xb5c
00013c  f8555021          LDR      r5,[r5,r1,LSL #2]
000140  f8335025          LDRH     r5,[r3,r5,LSL #2]
000144  42ae              CMP      r6,r5
000146  db17              BLT      |L1.376|
000148  f8336024          LDRH     r6,[r3,r4,LSL #2]
00014c  f600355c          ADD      r5,r0,#0xb5c
000150  f8555021          LDR      r5,[r5,r1,LSL #2]
000154  f8335025          LDRH     r5,[r3,r5,LSL #2]
000158  42ae              CMP      r6,r5
00015a  d10e              BNE      |L1.378|
00015c  f2414558          MOV      r5,#0x1458
000160  4405              ADD      r5,r5,r0
000162  5d2e              LDRB     r6,[r5,r4]
000164  f600355c          ADD      r5,r0,#0xb5c
000168  f8555021          LDR      r5,[r5,r1,LSL #2]
00016c  f2414758          MOV      r7,#0x1458
000170  4407              ADD      r7,r7,r0
000172  5d7d              LDRB     r5,[r7,r5]
000174  42ae              CMP      r6,r5
000176  dc00              BGT      |L1.378|
                  |L1.376|
000178  e00c              B        |L1.404|
                  |L1.378|
;;;470    
;;;471            /* Exchange v with the smallest son */
;;;472            s->heap[k] = s->heap[j];  k = j;
00017a  f600355c          ADD      r5,r0,#0xb5c
00017e  f8556021          LDR      r6,[r5,r1,LSL #2]
000182  f8456022          STR      r6,[r5,r2,LSL #2]
000186  460a              MOV      r2,r1
;;;473    
;;;474            /* And continue down the tree, setting j to the left son of k */
;;;475            j <<= 1;
000188  0049              LSLS     r1,r1,#1
                  |L1.394|
00018a  f2414550          MOV      r5,#0x1450            ;462
00018e  582d              LDR      r5,[r5,r0]            ;462
000190  428d              CMP      r5,r1                 ;462
000192  da98              BGE      |L1.198|
                  |L1.404|
000194  bf00              NOP                            ;469
;;;476        }
;;;477        s->heap[k] = v;
000196  f600355c          ADD      r5,r0,#0xb5c
00019a  f8454022          STR      r4,[r5,r2,LSL #2]
;;;478    }
00019e  bdf0              POP      {r4-r7,pc}
;;;479    
                          ENDP

                  gen_bitlen PROC
;;;489     */
;;;490    local void gen_bitlen(s, desc)
0001a0  e92d4fff          PUSH     {r0-r11,lr}
;;;491        deflate_state *s;
;;;492        tree_desc *desc;    /* the tree descriptor */
;;;493    {
0001a4  460c              MOV      r4,r1
;;;494        ct_data *tree        = desc->dyn_tree;
0001a6  6823              LDR      r3,[r4,#0]
;;;495        int max_code         = desc->max_code;
0001a8  f8d4a004          LDR      r10,[r4,#4]
0001ac  f8cda00c          STR      r10,[sp,#0xc]
;;;496        const ct_data *stree = desc->stat_desc->static_tree;
0001b0  f8d4a008          LDR      r10,[r4,#8]
0001b4  f8da9000          LDR      r9,[r10,#0]
;;;497        const intf *extra    = desc->stat_desc->extra_bits;
0001b8  f8d4a008          LDR      r10,[r4,#8]
0001bc  f8daa004          LDR      r10,[r10,#4]
0001c0  f8cda008          STR      r10,[sp,#8]
;;;498        int base             = desc->stat_desc->extra_base;
0001c4  f8d4a008          LDR      r10,[r4,#8]
0001c8  f8daa008          LDR      r10,[r10,#8]
0001cc  f8cda004          STR      r10,[sp,#4]
;;;499        int max_length       = desc->stat_desc->max_length;
0001d0  f8d4a008          LDR      r10,[r4,#8]
0001d4  f8da5010          LDR      r5,[r10,#0x10]
;;;500        int h;              /* heap index */
;;;501        int n, m;           /* iterate over the tree elements */
;;;502        int bits;           /* bit length */
;;;503        int xbits;          /* extra bits */
;;;504        ush f;              /* frequency */
;;;505        int overflow = 0;   /* number of elements with bit length too large */
0001d8  f04f0c00          MOV      r12,#0
;;;506    
;;;507        for (bits = 0; bits <= MAX_BITS; bits++) s->bl_count[bits] = 0;
0001dc  2100              MOVS     r1,#0
0001de  e006              B        |L1.494|
                  |L1.480|
0001e0  f04f0b00          MOV      r11,#0
0001e4  f6003a3c          ADD      r10,r0,#0xb3c
0001e8  f82ab011          STRH     r11,[r10,r1,LSL #1]
0001ec  1c49              ADDS     r1,r1,#1
                  |L1.494|
0001ee  290f              CMP      r1,#0xf
0001f0  ddf6              BLE      |L1.480|
;;;508    
;;;509        /* In a first pass, compute the optimal bit lengths (which may
;;;510         * overflow in the case of the bit length tree).
;;;511         */
;;;512        tree[s->heap[s->heap_max]].Len = 0; /* root of the heap */
0001f2  f04f0a00          MOV      r10,#0
0001f6  f2414b54          MOV      r11,#0x1454
0001fa  f85bb000          LDR      r11,[r11,r0]
0001fe  f6003e5c          ADD      lr,r0,#0xb5c
000202  f85eb02b          LDR      r11,[lr,r11,LSL #2]
000206  eb030b8b          ADD      r11,r3,r11,LSL #2
00020a  f8aba002          STRH     r10,[r11,#2]
;;;513    
;;;514        for (h = s->heap_max+1; h < HEAP_SIZE; h++) {
00020e  f2414a54          MOV      r10,#0x1454
000212  f85aa000          LDR      r10,[r10,r0]
000216  f10a0701          ADD      r7,r10,#1
00021a  e05e              B        |L1.730|
                  |L1.540|
;;;515            n = s->heap[h];
00021c  f6003a5c          ADD      r10,r0,#0xb5c
000220  f85a2027          LDR      r2,[r10,r7,LSL #2]
;;;516            bits = tree[tree[n].Dad].Len + 1;
000224  eb030a82          ADD      r10,r3,r2,LSL #2
000228  f8baa002          LDRH     r10,[r10,#2]
00022c  eb030a8a          ADD      r10,r3,r10,LSL #2
000230  f8baa002          LDRH     r10,[r10,#2]
000234  f10a0101          ADD      r1,r10,#1
;;;517            if (bits > max_length) bits = max_length, overflow++;
000238  42a9              CMP      r1,r5
00023a  dd02              BLE      |L1.578|
00023c  4629              MOV      r1,r5
00023e  f10c0c01          ADD      r12,r12,#1
                  |L1.578|
;;;518            tree[n].Len = (ush)bits;
000242  eb030b82          ADD      r11,r3,r2,LSL #2
000246  f8ab1002          STRH     r1,[r11,#2]
;;;519            /* We overwrite tree[n].Dad which is no longer needed */
;;;520    
;;;521            if (n > max_code) continue; /* not a leaf node */
00024a  f8dda00c          LDR      r10,[sp,#0xc]
00024e  4552              CMP      r2,r10
000250  dd00              BLE      |L1.596|
000252  e041              B        |L1.728|
                  |L1.596|
;;;522    
;;;523            s->bl_count[bits]++;
000254  f6003a3c          ADD      r10,r0,#0xb3c
000258  f83aa011          LDRH     r10,[r10,r1,LSL #1]
00025c  f10a0a01          ADD      r10,r10,#1
000260  fa1ffb8a          UXTH     r11,r10
000264  f6003a3c          ADD      r10,r0,#0xb3c
000268  f82ab011          STRH     r11,[r10,r1,LSL #1]
;;;524            xbits = 0;
00026c  f04f0a00          MOV      r10,#0
000270  f8cda000          STR      r10,[sp,#0]
;;;525            if (n >= base) xbits = extra[n-base];
000274  f8dda004          LDR      r10,[sp,#4]
000278  4552              CMP      r2,r10
00027a  db09              BLT      |L1.656|
00027c  f8dda004          LDR      r10,[sp,#4]
000280  eba20b0a          SUB      r11,r2,r10
000284  f8dda008          LDR      r10,[sp,#8]
000288  f85aa02b          LDR      r10,[r10,r11,LSL #2]
00028c  f8cda000          STR      r10,[sp,#0]
                  |L1.656|
;;;526            f = tree[n].Freq;
000290  f8338022          LDRH     r8,[r3,r2,LSL #2]
;;;527            s->opt_len += (ulg)f * (bits + xbits);
000294  f2416aa8          MOV      r10,#0x16a8
000298  f85ab000          LDR      r11,[r10,r0]
00029c  f8dda000          LDR      r10,[sp,#0]
0002a0  448a              ADD      r10,r10,r1
0002a2  fb08bb0a          MLA      r11,r8,r10,r11
0002a6  f2416aa8          MOV      r10,#0x16a8
0002aa  f84ab000          STR      r11,[r10,r0]
;;;528            if (stree) s->static_len += (ulg)f * (stree[n].Len + xbits);
0002ae  f1b90f00          CMP      r9,#0
0002b2  d010              BEQ      |L1.726|
0002b4  f2416aac          MOV      r10,#0x16ac
0002b8  f85aa000          LDR      r10,[r10,r0]
0002bc  eb090b82          ADD      r11,r9,r2,LSL #2
0002c0  f8bbe002          LDRH     lr,[r11,#2]
0002c4  f8ddb000          LDR      r11,[sp,#0]
0002c8  44f3              ADD      r11,r11,lr
0002ca  fb08ab0b          MLA      r11,r8,r11,r10
0002ce  f2416aac          MOV      r10,#0x16ac
0002d2  f84ab000          STR      r11,[r10,r0]
                  |L1.726|
0002d6  bf00              NOP                            ;521
                  |L1.728|
0002d8  1c7f              ADDS     r7,r7,#1              ;514
                  |L1.730|
0002da  f5b77f0f          CMP      r7,#0x23c             ;514
0002de  dd9d              BLE      |L1.540|
;;;529        }
;;;530        if (overflow == 0) return;
0002e0  f1bc0f00          CMP      r12,#0
0002e4  d101              BNE      |L1.746|
                  |L1.742|
;;;531    
;;;532        Trace((stderr,"\nbit length overflow\n"));
;;;533        /* This happens for example on obj2 and pic of the Calgary corpus */
;;;534    
;;;535        /* Find the first bit length which could increase: */
;;;536        do {
;;;537            bits = max_length-1;
;;;538            while (s->bl_count[bits] == 0) bits--;
;;;539            s->bl_count[bits]--;      /* move one leaf down the tree */
;;;540            s->bl_count[bits+1] += 2; /* move one overflow item as its brother */
;;;541            s->bl_count[max_length]--;
;;;542            /* The brother of the overflow item also moves one step up,
;;;543             * but this does not affect bl_count[max_length]
;;;544             */
;;;545            overflow -= 2;
;;;546        } while (overflow > 0);
;;;547    
;;;548        /* Now recompute all bit lengths, scanning in increasing frequency.
;;;549         * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
;;;550         * lengths instead of fixing only the wrong ones. This idea is taken
;;;551         * from 'ar' written by Haruhiko Okumura.)
;;;552         */
;;;553        for (bits = max_length; bits != 0; bits--) {
;;;554            n = s->bl_count[bits];
;;;555            while (n != 0) {
;;;556                m = s->heap[--h];
;;;557                if (m > max_code) continue;
;;;558                if ((unsigned) tree[m].Len != (unsigned) bits) {
;;;559                    Trace((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
;;;560                    s->opt_len += ((long)bits - (long)tree[m].Len)
;;;561                                  *(long)tree[m].Freq;
;;;562                    tree[m].Len = (ush)bits;
;;;563                }
;;;564                n--;
;;;565            }
;;;566        }
;;;567    }
0002e6  e8bd8fff          POP      {r0-r11,pc}
                  |L1.746|
0002ea  bf00              NOP                            ;536
                  |L1.748|
0002ec  1e69              SUBS     r1,r5,#1              ;537
0002ee  e000              B        |L1.754|
                  |L1.752|
0002f0  1e49              SUBS     r1,r1,#1              ;538
                  |L1.754|
0002f2  f6003a3c          ADD      r10,r0,#0xb3c         ;538
0002f6  f83aa011          LDRH     r10,[r10,r1,LSL #1]   ;538
0002fa  f1ba0f00          CMP      r10,#0                ;538
0002fe  d0f7              BEQ      |L1.752|
000300  f6003a3c          ADD      r10,r0,#0xb3c         ;539
000304  f83aa011          LDRH     r10,[r10,r1,LSL #1]   ;539
000308  f1aa0a01          SUB      r10,r10,#1            ;539
00030c  fa1ffb8a          UXTH     r11,r10               ;539
000310  f6003a3c          ADD      r10,r0,#0xb3c         ;539
000314  f82ab011          STRH     r11,[r10,r1,LSL #1]   ;539
000318  f1010b01          ADD      r11,r1,#1             ;540
00031c  f83aa01b          LDRH     r10,[r10,r11,LSL #1]  ;540
000320  f10a0a02          ADD      r10,r10,#2            ;540
000324  f6003b3c          ADD      r11,r0,#0xb3c         ;540
000328  f1010e01          ADD      lr,r1,#1              ;540
00032c  f82ba01e          STRH     r10,[r11,lr,LSL #1]   ;540
000330  46da              MOV      r10,r11               ;541
000332  f83aa015          LDRH     r10,[r10,r5,LSL #1]   ;541
000336  f1aa0a01          SUB      r10,r10,#1            ;541
00033a  fa1ffb8a          UXTH     r11,r10               ;541
00033e  f6003a3c          ADD      r10,r0,#0xb3c         ;541
000342  f82ab015          STRH     r11,[r10,r5,LSL #1]   ;541
000346  f1ac0c02          SUB      r12,r12,#2            ;545
00034a  f1bc0f00          CMP      r12,#0                ;546
00034e  dccd              BGT      |L1.748|
000350  4629              MOV      r1,r5                 ;553
000352  e031              B        |L1.952|
                  |L1.852|
000354  f6003a3c          ADD      r10,r0,#0xb3c         ;554
000358  f83a2011          LDRH     r2,[r10,r1,LSL #1]    ;554
00035c  e029              B        |L1.946|
                  |L1.862|
00035e  f1a70a01          SUB      r10,r7,#1             ;556
000362  4657              MOV      r7,r10                ;556
000364  f6003b5c          ADD      r11,r0,#0xb5c         ;556
000368  f85b602a          LDR      r6,[r11,r10,LSL #2]   ;556
00036c  f8dda00c          LDR      r10,[sp,#0xc]         ;557
000370  4556              CMP      r6,r10                ;557
000372  dd00              BLE      |L1.886|
000374  e01d              B        |L1.946|
                  |L1.886|
000376  eb030a86          ADD      r10,r3,r6,LSL #2      ;558
00037a  f8baa002          LDRH     r10,[r10,#2]          ;558
00037e  458a              CMP      r10,r1                ;558
000380  d015              BEQ      |L1.942|
000382  f2416aa8          MOV      r10,#0x16a8           ;560
000386  f85aa000          LDR      r10,[r10,r0]          ;560
00038a  eb030b86          ADD      r11,r3,r6,LSL #2      ;560
00038e  f8bbb002          LDRH     r11,[r11,#2]          ;560
000392  eba10b0b          SUB      r11,r1,r11            ;560
000396  f833e026          LDRH     lr,[r3,r6,LSL #2]     ;560
00039a  fb0bab0e          MLA      r11,r11,lr,r10        ;560
00039e  f2416aa8          MOV      r10,#0x16a8           ;560
0003a2  f84ab000          STR      r11,[r10,r0]          ;560
0003a6  eb030b86          ADD      r11,r3,r6,LSL #2      ;562
0003aa  f8ab1002          STRH     r1,[r11,#2]           ;562
                  |L1.942|
0003ae  1e52              SUBS     r2,r2,#1              ;564
0003b0  bf00              NOP                            ;557
                  |L1.946|
0003b2  2a00              CMP      r2,#0                 ;555
0003b4  d1d3              BNE      |L1.862|
0003b6  1e49              SUBS     r1,r1,#1              ;553
                  |L1.952|
0003b8  2900              CMP      r1,#0                 ;553
0003ba  d1cb              BNE      |L1.852|
0003bc  bf00              NOP      
0003be  e792              B        |L1.742|
;;;568    
                          ENDP

                  bi_reverse PROC
;;;1145    */
;;;1146   local unsigned bi_reverse(code, len)
0003c0  4602              MOV      r2,r0
;;;1147       unsigned code; /* the value to invert */
;;;1148       int len;       /* its bit length */
;;;1149   {
0003c2  460b              MOV      r3,r1
;;;1150       register unsigned res = 0;
0003c4  2100              MOVS     r1,#0
;;;1151       do {
0003c6  bf00              NOP      
                  |L1.968|
;;;1152           res |= code & 1;
0003c8  f0020001          AND      r0,r2,#1
0003cc  4301              ORRS     r1,r1,r0
;;;1153           code >>= 1, res <<= 1;
0003ce  0852              LSRS     r2,r2,#1
0003d0  0049              LSLS     r1,r1,#1
;;;1154       } while (--len > 0);
0003d2  1e58              SUBS     r0,r3,#1
0003d4  1e03              SUBS     r3,r0,#0
0003d6  dcf7              BGT      |L1.968|
;;;1155       return res >> 1;
0003d8  0848              LSRS     r0,r1,#1
;;;1156   }
0003da  4770              BX       lr
;;;1157   
                          ENDP

                  gen_codes PROC
;;;576     */
;;;577    local void gen_codes (tree, max_code, bl_count)
0003dc  e92d47f0          PUSH     {r4-r10,lr}
;;;578        ct_data *tree;             /* the tree to decorate */
;;;579        int max_code;              /* largest code with non zero frequency */
;;;580        ushf *bl_count;            /* number of codes at each bit length */
;;;581    {
0003e0  b088              SUB      sp,sp,#0x20
0003e2  4607              MOV      r7,r0
0003e4  4688              MOV      r8,r1
0003e6  4691              MOV      r9,r2
;;;582        ush next_code[MAX_BITS+1]; /* next code value for each bit length */
;;;583        ush code = 0;              /* running code value */
0003e8  f04f0a00          MOV      r10,#0
;;;584        int bits;                  /* bit index */
;;;585        int n;                     /* code index */
;;;586    
;;;587        /* The distribution counts are first used to generate the code values
;;;588         * without bit reversal.
;;;589         */
;;;590        for (bits = 1; bits <= MAX_BITS; bits++) {
0003ec  2601              MOVS     r6,#1
0003ee  e00b              B        |L1.1032|
                  |L1.1008|
;;;591            next_code[bits] = code = (code + bl_count[bits-1]) << 1;
0003f0  1e70              SUBS     r0,r6,#1
0003f2  f8390010          LDRH     r0,[r9,r0,LSL #1]
0003f6  4450              ADD      r0,r0,r10
0003f8  f64f71ff          MOV      r1,#0xffff
0003fc  ea010040          AND      r0,r1,r0,LSL #1
000400  4682              MOV      r10,r0
000402  f82d0016          STRH     r0,[sp,r6,LSL #1]
000406  1c76              ADDS     r6,r6,#1              ;590
                  |L1.1032|
000408  2e0f              CMP      r6,#0xf               ;590
00040a  ddf1              BLE      |L1.1008|
;;;592        }
;;;593        /* Check that the bit counts in bl_count are consistent. The last code
;;;594         * must be all ones.
;;;595         */
;;;596        Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
;;;597                "inconsistent bit counts");
;;;598        Tracev((stderr,"\ngen_codes: max_code %d ", max_code));
;;;599    
;;;600        for (n = 0;  n <= max_code; n++) {
00040c  2400              MOVS     r4,#0
00040e  e013              B        |L1.1080|
                  |L1.1040|
;;;601            int len = tree[n].Len;
000410  eb070084          ADD      r0,r7,r4,LSL #2
000414  8845              LDRH     r5,[r0,#2]
;;;602            if (len == 0) continue;
000416  b905              CBNZ     r5,|L1.1050|
000418  e00d              B        |L1.1078|
                  |L1.1050|
;;;603            /* Now reverse the bits */
;;;604            tree[n].Code = bi_reverse(next_code[len]++, len);
00041a  f83d0015          LDRH     r0,[sp,r5,LSL #1]
00041e  f83d1015          LDRH     r1,[sp,r5,LSL #1]
000422  1c49              ADDS     r1,r1,#1
000424  b289              UXTH     r1,r1
000426  f82d1015          STRH     r1,[sp,r5,LSL #1]
00042a  4629              MOV      r1,r5
00042c  f7fffffe          BL       bi_reverse
000430  f8270024          STRH     r0,[r7,r4,LSL #2]
000434  bf00              NOP                            ;602
                  |L1.1078|
000436  1c64              ADDS     r4,r4,#1              ;600
                  |L1.1080|
000438  4544              CMP      r4,r8                 ;600
00043a  dde9              BLE      |L1.1040|
;;;605    
;;;606            Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
;;;607                 n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
;;;608        }
;;;609    }
00043c  b008              ADD      sp,sp,#0x20
00043e  e8bd87f0          POP      {r4-r10,pc}
;;;610    
                          ENDP

                  build_tree PROC
;;;618     */
;;;619    local void build_tree(s, desc)
000442  e92d4ff8          PUSH     {r3-r11,lr}
;;;620        deflate_state *s;
;;;621        tree_desc *desc; /* the tree descriptor */
;;;622    {
000446  4604              MOV      r4,r0
000448  4689              MOV      r9,r1
;;;623        ct_data *tree         = desc->dyn_tree;
00044a  f8d96000          LDR      r6,[r9,#0]
;;;624        const ct_data *stree  = desc->stat_desc->static_tree;
00044e  f8d90008          LDR      r0,[r9,#8]
000452  f8d0b000          LDR      r11,[r0,#0]
;;;625        int elems             = desc->stat_desc->elems;
000456  f8d90008          LDR      r0,[r9,#8]
00045a  68c0              LDR      r0,[r0,#0xc]
00045c  9000              STR      r0,[sp,#0]
;;;626        int n, m;          /* iterate over heap elements */
;;;627        int max_code = -1; /* largest code with non zero frequency */
00045e  f04f3aff          MOV      r10,#0xffffffff
;;;628        int node;          /* new node being created */
;;;629    
;;;630        /* Construct the initial heap, with least frequent element in
;;;631         * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
;;;632         * heap[0] is not used.
;;;633         */
;;;634        s->heap_len = 0, s->heap_max = HEAP_SIZE;
000462  2100              MOVS     r1,#0
000464  f2414050          MOV      r0,#0x1450
000468  5101              STR      r1,[r0,r4]
00046a  e005              B        |L1.1144|
                  |L1.1132|
                          DCD      static_l_desc
                  |L1.1136|
                          DCD      static_d_desc
                  |L1.1140|
                          DCD      static_bl_desc
                  |L1.1144|
000478  f240213d          MOV      r1,#0x23d
00047c  1d00              ADDS     r0,r0,#4
00047e  5101              STR      r1,[r0,r4]
;;;635    
;;;636        for (n = 0; n < elems; n++) {
000480  2500              MOVS     r5,#0
000482  e019              B        |L1.1208|
                  |L1.1156|
;;;637            if (tree[n].Freq != 0) {
000484  f8360025          LDRH     r0,[r6,r5,LSL #2]
000488  b188              CBZ      r0,|L1.1198|
;;;638                s->heap[++(s->heap_len)] = max_code = n;
00048a  46aa              MOV      r10,r5
00048c  f2414050          MOV      r0,#0x1450
000490  5900              LDR      r0,[r0,r4]
000492  1c40              ADDS     r0,r0,#1
000494  f2414150          MOV      r1,#0x1450
000498  5108              STR      r0,[r1,r4]
00049a  f604315c          ADD      r1,r4,#0xb5c
00049e  f8415020          STR      r5,[r1,r0,LSL #2]
;;;639                s->depth[n] = 0;
0004a2  2000              MOVS     r0,#0
0004a4  f2414158          MOV      r1,#0x1458
0004a8  4421              ADD      r1,r1,r4
0004aa  5548              STRB     r0,[r1,r5]
0004ac  e003              B        |L1.1206|
                  |L1.1198|
;;;640            } else {
;;;641                tree[n].Len = 0;
0004ae  2000              MOVS     r0,#0
0004b0  eb060185          ADD      r1,r6,r5,LSL #2
0004b4  8048              STRH     r0,[r1,#2]
                  |L1.1206|
0004b6  1c6d              ADDS     r5,r5,#1              ;636
                  |L1.1208|
0004b8  9800              LDR      r0,[sp,#0]            ;636
0004ba  4285              CMP      r5,r0                 ;636
0004bc  dbe2              BLT      |L1.1156|
;;;642            }
;;;643        }
;;;644    
;;;645        /* The pkzip format requires that at least one distance code exists,
;;;646         * and that at least one bit should be sent even if there is only one
;;;647         * possible code. So to avoid special checks later on we force at least
;;;648         * two codes of non zero frequency.
;;;649         */
;;;650        while (s->heap_len < 2) {
0004be  e02e              B        |L1.1310|
                  |L1.1216|
;;;651            node = s->heap[++(s->heap_len)] = (max_code < 2 ? ++max_code : 0);
0004c0  f1ba0f02          CMP      r10,#2
0004c4  da03              BGE      |L1.1230|
0004c6  f10a0001          ADD      r0,r10,#1
0004ca  4682              MOV      r10,r0
0004cc  e000              B        |L1.1232|
                  |L1.1230|
0004ce  2000              MOVS     r0,#0
                  |L1.1232|
0004d0  f2414150          MOV      r1,#0x1450
0004d4  5909              LDR      r1,[r1,r4]
0004d6  1c49              ADDS     r1,r1,#1
0004d8  f2414250          MOV      r2,#0x1450
0004dc  5111              STR      r1,[r2,r4]
0004de  f604325c          ADD      r2,r4,#0xb5c
0004e2  f8420021          STR      r0,[r2,r1,LSL #2]
0004e6  4607              MOV      r7,r0
;;;652            tree[node].Freq = 1;
0004e8  2001              MOVS     r0,#1
0004ea  f8260027          STRH     r0,[r6,r7,LSL #2]
;;;653            s->depth[node] = 0;
0004ee  2000              MOVS     r0,#0
0004f0  f2414158          MOV      r1,#0x1458
0004f4  4421              ADD      r1,r1,r4
0004f6  55c8              STRB     r0,[r1,r7]
;;;654            s->opt_len--; if (stree) s->static_len -= stree[node].Len;
0004f8  f24160a8          MOV      r0,#0x16a8
0004fc  5900              LDR      r0,[r0,r4]
0004fe  1e40              SUBS     r0,r0,#1
000500  f24161a8          MOV      r1,#0x16a8
000504  5108              STR      r0,[r1,r4]
000506  f1bb0f00          CMP      r11,#0
00050a  d008              BEQ      |L1.1310|
00050c  1d08              ADDS     r0,r1,#4
00050e  5900              LDR      r0,[r0,r4]
000510  eb0b0187          ADD      r1,r11,r7,LSL #2
000514  8849              LDRH     r1,[r1,#2]
000516  1a41              SUBS     r1,r0,r1
000518  f24160ac          MOV      r0,#0x16ac
00051c  5101              STR      r1,[r0,r4]
                  |L1.1310|
00051e  f2414050          MOV      r0,#0x1450            ;650
000522  5900              LDR      r0,[r0,r4]            ;650
000524  2802              CMP      r0,#2                 ;650
000526  dbcb              BLT      |L1.1216|
;;;655            /* node is 0 or 1 so it does not have extra bits */
;;;656        }
;;;657        desc->max_code = max_code;
000528  f8c9a004          STR      r10,[r9,#4]
;;;658    
;;;659        /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
;;;660         * establish sub-heaps of increasing lengths:
;;;661         */
;;;662        for (n = s->heap_len/2; n >= 1; n--) pqdownheap(s, tree, n);
00052c  f2414150          MOV      r1,#0x1450
000530  5908              LDR      r0,[r1,r4]
000532  eb0071d0          ADD      r1,r0,r0,LSR #31
000536  104d              ASRS     r5,r1,#1
000538  e005              B        |L1.1350|
                  |L1.1338|
00053a  462a              MOV      r2,r5
00053c  4631              MOV      r1,r6
00053e  4620              MOV      r0,r4
000540  f7fffffe          BL       pqdownheap
000544  1e6d              SUBS     r5,r5,#1
                  |L1.1350|
000546  2d01              CMP      r5,#1
000548  daf7              BGE      |L1.1338|
;;;663    
;;;664        /* Construct the Huffman tree by repeatedly combining the least two
;;;665         * frequent nodes.
;;;666         */
;;;667        node = elems;              /* next internal node of the tree */
00054a  9f00              LDR      r7,[sp,#0]
;;;668        do {
00054c  bf00              NOP      
                  |L1.1358|
;;;669            pqremove(s, tree, n);  /* n = node of least frequency */
00054e  f44f6036          MOV      r0,#0xb60
000552  5905              LDR      r5,[r0,r4]
000554  f2414050          MOV      r0,#0x1450
000558  5902              LDR      r2,[r0,r4]
00055a  5900              LDR      r0,[r0,r4]
00055c  1e40              SUBS     r0,r0,#1
00055e  f2414150          MOV      r1,#0x1450
000562  5108              STR      r0,[r1,r4]
000564  f604305c          ADD      r0,r4,#0xb5c
000568  f8501022          LDR      r1,[r0,r2,LSL #2]
00056c  f44f6036          MOV      r0,#0xb60
000570  5101              STR      r1,[r0,r4]
000572  2201              MOVS     r2,#1
000574  4631              MOV      r1,r6
000576  4620              MOV      r0,r4
000578  f7fffffe          BL       pqdownheap
;;;670            m = s->heap[SMALLEST]; /* m = node of next least frequency */
00057c  f8d48b60          LDR      r8,[r4,#0xb60]
;;;671    
;;;672            s->heap[--(s->heap_max)] = n; /* keep the nodes sorted by frequency */
000580  f2414054          MOV      r0,#0x1454
000584  5900              LDR      r0,[r0,r4]
000586  1e40              SUBS     r0,r0,#1
000588  f2414154          MOV      r1,#0x1454
00058c  5108              STR      r0,[r1,r4]
00058e  f604315c          ADD      r1,r4,#0xb5c
000592  f8415020          STR      r5,[r1,r0,LSL #2]
;;;673            s->heap[--(s->heap_max)] = m;
000596  f2414054          MOV      r0,#0x1454
00059a  5900              LDR      r0,[r0,r4]
00059c  1e40              SUBS     r0,r0,#1
00059e  f2414154          MOV      r1,#0x1454
0005a2  5108              STR      r0,[r1,r4]
0005a4  f604315c          ADD      r1,r4,#0xb5c
0005a8  f8418020          STR      r8,[r1,r0,LSL #2]
;;;674    
;;;675            /* Create a new node father of n and m */
;;;676            tree[node].Freq = tree[n].Freq + tree[m].Freq;
0005ac  f8360025          LDRH     r0,[r6,r5,LSL #2]
0005b0  f8361028          LDRH     r1,[r6,r8,LSL #2]
0005b4  4408              ADD      r0,r0,r1
0005b6  f8260027          STRH     r0,[r6,r7,LSL #2]
;;;677            s->depth[node] = (uch)((s->depth[n] >= s->depth[m] ?
0005ba  f2414058          MOV      r0,#0x1458
0005be  4420              ADD      r0,r0,r4
0005c0  5d40              LDRB     r0,[r0,r5]
0005c2  f2414158          MOV      r1,#0x1458
0005c6  4421              ADD      r1,r1,r4
0005c8  f8111008          LDRB     r1,[r1,r8]
0005cc  4288              CMP      r0,r1
0005ce  db04              BLT      |L1.1498|
;;;678                                    s->depth[n] : s->depth[m]) + 1);
0005d0  f2414058          MOV      r0,#0x1458
0005d4  4420              ADD      r0,r0,r4
0005d6  5d40              LDRB     r0,[r0,r5]
0005d8  e004              B        |L1.1508|
                  |L1.1498|
0005da  f2414058          MOV      r0,#0x1458
0005de  4420              ADD      r0,r0,r4
0005e0  f8100008          LDRB     r0,[r0,r8]
                  |L1.1508|
0005e4  1c40              ADDS     r0,r0,#1
0005e6  f2414158          MOV      r1,#0x1458
0005ea  4421              ADD      r1,r1,r4
0005ec  55c8              STRB     r0,[r1,r7]
;;;679            tree[n].Dad = tree[m].Dad = (ush)node;
0005ee  b2b8              UXTH     r0,r7
0005f0  eb060188          ADD      r1,r6,r8,LSL #2
0005f4  8048              STRH     r0,[r1,#2]
0005f6  eb060185          ADD      r1,r6,r5,LSL #2
0005fa  8048              STRH     r0,[r1,#2]
;;;680    #ifdef DUMP_BL_TREE
;;;681            if (tree == s->bl_tree) {
;;;682                fprintf(stderr,"\nnode %d(%d), sons %d(%d) %d(%d)",
;;;683                        node, tree[node].Freq, n, tree[n].Freq, m, tree[m].Freq);
;;;684            }
;;;685    #endif
;;;686            /* and insert the new node in the heap */
;;;687            s->heap[SMALLEST] = node++;
0005fc  f44f6036          MOV      r0,#0xb60
000600  5107              STR      r7,[r0,r4]
000602  1c7f              ADDS     r7,r7,#1
;;;688            pqdownheap(s, tree, SMALLEST);
000604  2201              MOVS     r2,#1
000606  4631              MOV      r1,r6
000608  4620              MOV      r0,r4
00060a  f7fffffe          BL       pqdownheap
;;;689    
;;;690        } while (s->heap_len >= 2);
00060e  f2414050          MOV      r0,#0x1450
000612  5900              LDR      r0,[r0,r4]
000614  2802              CMP      r0,#2
000616  da9a              BGE      |L1.1358|
;;;691    
;;;692        s->heap[--(s->heap_max)] = s->heap[SMALLEST];
000618  f44f6036          MOV      r0,#0xb60
00061c  5902              LDR      r2,[r0,r4]
00061e  f2414054          MOV      r0,#0x1454
000622  5900              LDR      r0,[r0,r4]
000624  1e40              SUBS     r0,r0,#1
000626  f2414154          MOV      r1,#0x1454
00062a  5108              STR      r0,[r1,r4]
00062c  f604315c          ADD      r1,r4,#0xb5c
000630  f8412020          STR      r2,[r1,r0,LSL #2]
;;;693    
;;;694        /* At this point, the fields freq and dad are set. We can now
;;;695         * generate the bit lengths.
;;;696         */
;;;697        gen_bitlen(s, (tree_desc *)desc);
000634  4649              MOV      r1,r9
000636  4620              MOV      r0,r4
000638  f7fffffe          BL       gen_bitlen
;;;698    
;;;699        /* The field len is now set, we can generate the bit codes */
;;;700        gen_codes ((ct_data *)tree, max_code, s->bl_count);
00063c  f604323c          ADD      r2,r4,#0xb3c
000640  4651              MOV      r1,r10
000642  4630              MOV      r0,r6
000644  f7fffffe          BL       gen_codes
;;;701    }
000648  e8bd8ff8          POP      {r3-r11,pc}
;;;702    
                          ENDP

                  scan_tree PROC
;;;706     */
;;;707    local void scan_tree (s, tree, max_code)
00064c  e92d47f0          PUSH     {r4-r10,lr}
;;;708        deflate_state *s;
;;;709        ct_data *tree;   /* the tree to be scanned */
;;;710        int max_code;    /* and its largest code of non zero frequency */
;;;711    {
000650  460b              MOV      r3,r1
000652  4616              MOV      r6,r2
;;;712        int n;                     /* iterates over all tree elements */
;;;713        int prevlen = -1;          /* last emitted length */
000654  f04f37ff          MOV      r7,#0xffffffff
;;;714        int curlen;                /* length of current code */
;;;715        int nextlen = tree[0].Len; /* length of next code */
000658  885a              LDRH     r2,[r3,#2]
;;;716        int count = 0;             /* repeat count of the current code */
00065a  2500              MOVS     r5,#0
;;;717        int max_count = 7;         /* max repeat count */
00065c  f04f0c07          MOV      r12,#7
;;;718        int min_count = 4;         /* min repeat count */
000660  f04f0804          MOV      r8,#4
;;;719    
;;;720        if (nextlen == 0) max_count = 138, min_count = 3;
000664  b91a              CBNZ     r2,|L1.1646|
000666  f04f0c8a          MOV      r12,#0x8a
00066a  f04f0803          MOV      r8,#3
                  |L1.1646|
;;;721        tree[max_code+1].Len = (ush)0xffff; /* guard */
00066e  f64f7aff          MOV      r10,#0xffff
000672  f1060901          ADD      r9,r6,#1
000676  eb030989          ADD      r9,r3,r9,LSL #2
00067a  f8a9a002          STRH     r10,[r9,#2]
;;;722    
;;;723        for (n = 0; n <= max_code; n++) {
00067e  2400              MOVS     r4,#0
000680  e056              B        |L1.1840|
                  |L1.1666|
;;;724            curlen = nextlen; nextlen = tree[n+1].Len;
000682  4611              MOV      r1,r2
000684  f1040901          ADD      r9,r4,#1
000688  eb030989          ADD      r9,r3,r9,LSL #2
00068c  f8b92002          LDRH     r2,[r9,#2]
;;;725            if (++count < max_count && curlen == nextlen) {
000690  f1050901          ADD      r9,r5,#1
000694  464d              MOV      r5,r9
000696  45e1              CMP      r9,r12
000698  da02              BGE      |L1.1696|
00069a  4291              CMP      r1,r2
00069c  d100              BNE      |L1.1696|
;;;726                continue;
00069e  e046              B        |L1.1838|
                  |L1.1696|
;;;727            } else if (count < min_count) {
0006a0  4545              CMP      r5,r8
0006a2  da0b              BGE      |L1.1724|
;;;728                s->bl_tree[curlen].Freq += count;
0006a4  f600297c          ADD      r9,r0,#0xa7c
0006a8  f8399021          LDRH     r9,[r9,r1,LSL #2]
0006ac  44a9              ADD      r9,r9,r5
0006ae  fa1ffa89          UXTH     r10,r9
0006b2  f600297c          ADD      r9,r0,#0xa7c
0006b6  f829a021          STRH     r10,[r9,r1,LSL #2]
0006ba  e024              B        |L1.1798|
                  |L1.1724|
;;;729            } else if (curlen != 0) {
0006bc  b1a1              CBZ      r1,|L1.1768|
;;;730                if (curlen != prevlen) s->bl_tree[curlen].Freq++;
0006be  42b9              CMP      r1,r7
0006c0  d00b              BEQ      |L1.1754|
0006c2  f600297c          ADD      r9,r0,#0xa7c
0006c6  f8399021          LDRH     r9,[r9,r1,LSL #2]
0006ca  f1090901          ADD      r9,r9,#1
0006ce  fa1ffa89          UXTH     r10,r9
0006d2  f600297c          ADD      r9,r0,#0xa7c
0006d6  f829a021          STRH     r10,[r9,r1,LSL #2]
                  |L1.1754|
;;;731                s->bl_tree[REP_3_6].Freq++;
0006da  f8b09abc          LDRH     r9,[r0,#0xabc]
0006de  f1090901          ADD      r9,r9,#1
0006e2  f8a09abc          STRH     r9,[r0,#0xabc]
0006e6  e00e              B        |L1.1798|
                  |L1.1768|
;;;732            } else if (count <= 10) {
0006e8  2d0a              CMP      r5,#0xa
0006ea  dc06              BGT      |L1.1786|
;;;733                s->bl_tree[REPZ_3_10].Freq++;
0006ec  f8b09ac0          LDRH     r9,[r0,#0xac0]
0006f0  f1090901          ADD      r9,r9,#1
0006f4  f8a09ac0          STRH     r9,[r0,#0xac0]
0006f8  e005              B        |L1.1798|
                  |L1.1786|
;;;734            } else {
;;;735                s->bl_tree[REPZ_11_138].Freq++;
0006fa  f8b09ac4          LDRH     r9,[r0,#0xac4]
0006fe  f1090901          ADD      r9,r9,#1
000702  f8a09ac4          STRH     r9,[r0,#0xac4]
                  |L1.1798|
;;;736            }
;;;737            count = 0; prevlen = curlen;
000706  2500              MOVS     r5,#0
000708  460f              MOV      r7,r1
;;;738            if (nextlen == 0) {
00070a  b922              CBNZ     r2,|L1.1814|
;;;739                max_count = 138, min_count = 3;
00070c  f04f0c8a          MOV      r12,#0x8a
000710  f04f0803          MOV      r8,#3
000714  e00a              B        |L1.1836|
                  |L1.1814|
;;;740            } else if (curlen == nextlen) {
000716  4291              CMP      r1,r2
000718  d104              BNE      |L1.1828|
;;;741                max_count = 6, min_count = 3;
00071a  f04f0c06          MOV      r12,#6
00071e  f04f0803          MOV      r8,#3
000722  e003              B        |L1.1836|
                  |L1.1828|
;;;742            } else {
;;;743                max_count = 7, min_count = 4;
000724  f04f0c07          MOV      r12,#7
000728  f04f0804          MOV      r8,#4
                  |L1.1836|
00072c  bf00              NOP                            ;726
                  |L1.1838|
00072e  1c64              ADDS     r4,r4,#1              ;723
                  |L1.1840|
000730  42b4              CMP      r4,r6                 ;723
000732  dda6              BLE      |L1.1666|
;;;744            }
;;;745        }
;;;746    }
000734  e8bd87f0          POP      {r4-r10,pc}
;;;747    
                          ENDP

                  send_tree PROC
;;;751     */
;;;752    local void send_tree (s, tree, max_code)
000738  e92d4ff8          PUSH     {r3-r11,lr}
;;;753        deflate_state *s;
;;;754        ct_data *tree; /* the tree to be scanned */
;;;755        int max_code;       /* and its largest code of non zero frequency */
;;;756    {
00073c  460d              MOV      r5,r1
00073e  4694              MOV      r12,r2
;;;757        int n;                     /* iterates over all tree elements */
;;;758        int prevlen = -1;          /* last emitted length */
000740  f04f38ff          MOV      r8,#0xffffffff
;;;759        int curlen;                /* length of current code */
;;;760        int nextlen = tree[0].Len; /* length of next code */
000744  886b              LDRH     r3,[r5,#2]
;;;761        int count = 0;             /* repeat count of the current code */
000746  2200              MOVS     r2,#0
;;;762        int max_count = 7;         /* max repeat count */
000748  f04f0907          MOV      r9,#7
;;;763        int min_count = 4;         /* min repeat count */
00074c  2604              MOVS     r6,#4
00074e  9600              STR      r6,[sp,#0]
;;;764    
;;;765        /* tree[max_code+1].Len = -1; */  /* guard already set */
;;;766        if (nextlen == 0) max_count = 138, min_count = 3;
000750  b91b              CBNZ     r3,|L1.1882|
000752  f04f098a          MOV      r9,#0x8a
000756  2603              MOVS     r6,#3
000758  9600              STR      r6,[sp,#0]
                  |L1.1882|
;;;767    
;;;768        for (n = 0; n <= max_code; n++) {
00075a  2400              MOVS     r4,#0
00075c  e3ac              B        |L1.3768|
                  |L1.1886|
;;;769            curlen = nextlen; nextlen = tree[n+1].Len;
00075e  4619              MOV      r1,r3
000760  1c66              ADDS     r6,r4,#1
000762  eb050686          ADD      r6,r5,r6,LSL #2
000766  8873              LDRH     r3,[r6,#2]
;;;770            if (++count < max_count && curlen == nextlen) {
000768  1c56              ADDS     r6,r2,#1
00076a  4632              MOV      r2,r6
00076c  454e              CMP      r6,r9
00076e  da02              BGE      |L1.1910|
000770  4299              CMP      r1,r3
000772  d100              BNE      |L1.1910|
;;;771                continue;
000774  e39f              B        |L1.3766|
                  |L1.1910|
;;;772            } else if (count < min_count) {
000776  9e00              LDR      r6,[sp,#0]
000778  42b2              CMP      r2,r6
00077a  da79              BGE      |L1.2160|
;;;773                do { send_code(s, curlen, s->bl_tree); } while (--count != 0);
00077c  bf00              NOP      
                  |L1.1918|
00077e  f600277c          ADD      r7,r0,#0xa7c
000782  eb070781          ADD      r7,r7,r1,LSL #2
000786  887e              LDRH     r6,[r7,#2]
000788  f24167bc          MOV      r7,#0x16bc
00078c  583f              LDR      r7,[r7,r0]
00078e  f1c60a10          RSB      r10,r6,#0x10
000792  4557              CMP      r7,r10
000794  dd49              BLE      |L1.2090|
000796  f6002a7c          ADD      r10,r0,#0xa7c
00079a  f83a7021          LDRH     r7,[r10,r1,LSL #2]
00079e  f2416ab8          MOV      r10,#0x16b8
0007a2  f83aa000          LDRH     r10,[r10,r0]
0007a6  f2416bbc          MOV      r11,#0x16bc
0007aa  f81bb000          LDRB     r11,[r11,r0]
0007ae  fa07fb0b          LSL      r11,r7,r11
0007b2  ea4a0a0b          ORR      r10,r10,r11
0007b6  fa1ffb8a          UXTH     r11,r10
0007ba  f2416ab8          MOV      r10,#0x16b8
0007be  f82ab000          STRH     r11,[r10,r0]
0007c2  f81ab000          LDRB     r11,[r10,r0]
0007c6  f8d0e014          LDR      lr,[r0,#0x14]
0007ca  f10e0a01          ADD      r10,lr,#1
0007ce  f8c0a014          STR      r10,[r0,#0x14]
0007d2  f8d0a008          LDR      r10,[r0,#8]
0007d6  f80ab00e          STRB     r11,[r10,lr]
0007da  f2416ab8          MOV      r10,#0x16b8
0007de  f83aa000          LDRH     r10,[r10,r0]
0007e2  ea4f2b2a          ASR      r11,r10,#8
0007e6  f8d0e014          LDR      lr,[r0,#0x14]
0007ea  f10e0a01          ADD      r10,lr,#1
0007ee  f8c0a014          STR      r10,[r0,#0x14]
0007f2  f8d0a008          LDR      r10,[r0,#8]
0007f6  f80ab00e          STRB     r11,[r10,lr]
0007fa  f2416abc          MOV      r10,#0x16bc
0007fe  f85aa000          LDR      r10,[r10,r0]
000802  f1ca0a10          RSB      r10,r10,#0x10
000806  fa47fa0a          ASR      r10,r7,r10
00080a  f2416bb8          MOV      r11,#0x16b8
00080e  f82ba000          STRH     r10,[r11,r0]
000812  f2416abc          MOV      r10,#0x16bc
000816  f85ab000          LDR      r11,[r10,r0]
00081a  f1a60a10          SUB      r10,r6,#0x10
00081e  44d3              ADD      r11,r11,r10
000820  f2416abc          MOV      r10,#0x16bc
000824  f84ab000          STR      r11,[r10,r0]
000828  e01d              B        |L1.2150|
                  |L1.2090|
00082a  f600277c          ADD      r7,r0,#0xa7c
00082e  f8377021          LDRH     r7,[r7,r1,LSL #2]
000832  f2416abc          MOV      r10,#0x16bc
000836  f81aa000          LDRB     r10,[r10,r0]
00083a  fa07f70a          LSL      r7,r7,r10
00083e  f2416ab8          MOV      r10,#0x16b8
000842  f83aa000          LDRH     r10,[r10,r0]
000846  ea47070a          ORR      r7,r7,r10
00084a  fa1ffa87          UXTH     r10,r7
00084e  f24167b8          MOV      r7,#0x16b8
000852  f827a000          STRH     r10,[r7,r0]
000856  1d3f              ADDS     r7,r7,#4
000858  583f              LDR      r7,[r7,r0]
00085a  eb070a06          ADD      r10,r7,r6
00085e  f24167bc          MOV      r7,#0x16bc
000862  f847a000          STR      r10,[r7,r0]
                  |L1.2150|
000866  1e56              SUBS     r6,r2,#1
000868  0032              MOVS     r2,r6
00086a  d188              BNE      |L1.1918|
00086c  e30f              B        |L1.3726|
00086e  e7ff              B        |L1.2160|
                  |L1.2160|
;;;774    
;;;775            } else if (curlen != 0) {
000870  2900              CMP      r1,#0
000872  d07c              BEQ      |L1.2414|
;;;776                if (curlen != prevlen) {
000874  4541              CMP      r1,r8
000876  d074              BEQ      |L1.2402|
;;;777                    send_code(s, curlen, s->bl_tree); count--;
000878  f600277c          ADD      r7,r0,#0xa7c
00087c  eb070781          ADD      r7,r7,r1,LSL #2
000880  887e              LDRH     r6,[r7,#2]
000882  f24167bc          MOV      r7,#0x16bc
000886  583f              LDR      r7,[r7,r0]
000888  f1c60a10          RSB      r10,r6,#0x10
00088c  4557              CMP      r7,r10
00088e  dd49              BLE      |L1.2340|
000890  f6002a7c          ADD      r10,r0,#0xa7c
000894  f83a7021          LDRH     r7,[r10,r1,LSL #2]
000898  f2416ab8          MOV      r10,#0x16b8
00089c  f83aa000          LDRH     r10,[r10,r0]
0008a0  f2416bbc          MOV      r11,#0x16bc
0008a4  f81bb000          LDRB     r11,[r11,r0]
0008a8  fa07fb0b          LSL      r11,r7,r11
0008ac  ea4a0a0b          ORR      r10,r10,r11
0008b0  fa1ffb8a          UXTH     r11,r10
0008b4  f2416ab8          MOV      r10,#0x16b8
0008b8  f82ab000          STRH     r11,[r10,r0]
0008bc  f81ab000          LDRB     r11,[r10,r0]
0008c0  f8d0e014          LDR      lr,[r0,#0x14]
0008c4  f10e0a01          ADD      r10,lr,#1
0008c8  f8c0a014          STR      r10,[r0,#0x14]
0008cc  f8d0a008          LDR      r10,[r0,#8]
0008d0  f80ab00e          STRB     r11,[r10,lr]
0008d4  f2416ab8          MOV      r10,#0x16b8
0008d8  f83aa000          LDRH     r10,[r10,r0]
0008dc  ea4f2b2a          ASR      r11,r10,#8
0008e0  f8d0e014          LDR      lr,[r0,#0x14]
0008e4  f10e0a01          ADD      r10,lr,#1
0008e8  f8c0a014          STR      r10,[r0,#0x14]
0008ec  f8d0a008          LDR      r10,[r0,#8]
0008f0  f80ab00e          STRB     r11,[r10,lr]
0008f4  f2416abc          MOV      r10,#0x16bc
0008f8  f85aa000          LDR      r10,[r10,r0]
0008fc  f1ca0a10          RSB      r10,r10,#0x10
000900  fa47fa0a          ASR      r10,r7,r10
000904  f2416bb8          MOV      r11,#0x16b8
000908  f82ba000          STRH     r10,[r11,r0]
00090c  f2416abc          MOV      r10,#0x16bc
000910  f85ab000          LDR      r11,[r10,r0]
000914  f1a60a10          SUB      r10,r6,#0x10
000918  44d3              ADD      r11,r11,r10
00091a  f2416abc          MOV      r10,#0x16bc
00091e  f84ab000          STR      r11,[r10,r0]
000922  e01d              B        |L1.2400|
                  |L1.2340|
000924  f600277c          ADD      r7,r0,#0xa7c
000928  f8377021          LDRH     r7,[r7,r1,LSL #2]
00092c  f2416abc          MOV      r10,#0x16bc
000930  f81aa000          LDRB     r10,[r10,r0]
000934  fa07f70a          LSL      r7,r7,r10
000938  f2416ab8          MOV      r10,#0x16b8
00093c  f83aa000          LDRH     r10,[r10,r0]
000940  ea47070a          ORR      r7,r7,r10
000944  fa1ffa87          UXTH     r10,r7
000948  f24167b8          MOV      r7,#0x16b8
00094c  f827a000          STRH     r10,[r7,r0]
000950  1d3f              ADDS     r7,r7,#4
000952  583f              LDR      r7,[r7,r0]
000954  eb070a06          ADD      r10,r7,r6
000958  f24167bc          MOV      r7,#0x16bc
00095c  f847a000          STR      r10,[r7,r0]
                  |L1.2400|
000960  1e52              SUBS     r2,r2,#1
                  |L1.2402|
;;;778                }
;;;779                Assert(count >= 3 && count <= 6, " 3_6?");
;;;780                send_code(s, REP_3_6, s->bl_tree); send_bits(s, count-3, 2);
000962  f8b06abe          LDRH     r6,[r0,#0xabe]
000966  f24167bc          MOV      r7,#0x16bc
00096a  583f              LDR      r7,[r7,r0]
00096c  e000              B        |L1.2416|
                  |L1.2414|
00096e  e0d4              B        |L1.2842|
                  |L1.2416|
000970  f1c60a10          RSB      r10,r6,#0x10
000974  4557              CMP      r7,r10
000976  dd47              BLE      |L1.2568|
000978  f8b07abc          LDRH     r7,[r0,#0xabc]
00097c  f2416ab8          MOV      r10,#0x16b8
000980  f83aa000          LDRH     r10,[r10,r0]
000984  f2416bbc          MOV      r11,#0x16bc
000988  f81bb000          LDRB     r11,[r11,r0]
00098c  fa07fb0b          LSL      r11,r7,r11
000990  ea4a0a0b          ORR      r10,r10,r11
000994  fa1ffb8a          UXTH     r11,r10
000998  f2416ab8          MOV      r10,#0x16b8
00099c  f82ab000          STRH     r11,[r10,r0]
0009a0  f81ab000          LDRB     r11,[r10,r0]
0009a4  f8d0e014          LDR      lr,[r0,#0x14]
0009a8  f10e0a01          ADD      r10,lr,#1
0009ac  f8c0a014          STR      r10,[r0,#0x14]
0009b0  f8d0a008          LDR      r10,[r0,#8]
0009b4  f80ab00e          STRB     r11,[r10,lr]
0009b8  f2416ab8          MOV      r10,#0x16b8
0009bc  f83aa000          LDRH     r10,[r10,r0]
0009c0  ea4f2b2a          ASR      r11,r10,#8
0009c4  f8d0e014          LDR      lr,[r0,#0x14]
0009c8  f10e0a01          ADD      r10,lr,#1
0009cc  f8c0a014          STR      r10,[r0,#0x14]
0009d0  f8d0a008          LDR      r10,[r0,#8]
0009d4  f80ab00e          STRB     r11,[r10,lr]
0009d8  f2416abc          MOV      r10,#0x16bc
0009dc  f85aa000          LDR      r10,[r10,r0]
0009e0  f1ca0a10          RSB      r10,r10,#0x10
0009e4  fa47fa0a          ASR      r10,r7,r10
0009e8  f2416bb8          MOV      r11,#0x16b8
0009ec  f82ba000          STRH     r10,[r11,r0]
0009f0  f2416abc          MOV      r10,#0x16bc
0009f4  f85ab000          LDR      r11,[r10,r0]
0009f8  f1a60a10          SUB      r10,r6,#0x10
0009fc  44d3              ADD      r11,r11,r10
0009fe  f2416abc          MOV      r10,#0x16bc
000a02  f84ab000          STR      r11,[r10,r0]
000a06  e01b              B        |L1.2624|
                  |L1.2568|
000a08  f8b07abc          LDRH     r7,[r0,#0xabc]
000a0c  f2416abc          MOV      r10,#0x16bc
000a10  f81aa000          LDRB     r10,[r10,r0]
000a14  fa07f70a          LSL      r7,r7,r10
000a18  f2416ab8          MOV      r10,#0x16b8
000a1c  f83aa000          LDRH     r10,[r10,r0]
000a20  ea47070a          ORR      r7,r7,r10
000a24  fa1ffa87          UXTH     r10,r7
000a28  f24167b8          MOV      r7,#0x16b8
000a2c  f827a000          STRH     r10,[r7,r0]
000a30  1d3f              ADDS     r7,r7,#4
000a32  583f              LDR      r7,[r7,r0]
000a34  eb070a06          ADD      r10,r7,r6
000a38  f24167bc          MOV      r7,#0x16bc
000a3c  f847a000          STR      r10,[r7,r0]
                  |L1.2624|
000a40  2602              MOVS     r6,#2
000a42  f24167bc          MOV      r7,#0x16bc
000a46  583f              LDR      r7,[r7,r0]
000a48  f1c60a10          RSB      r10,r6,#0x10
000a4c  4557              CMP      r7,r10
000a4e  dd48              BLE      |L1.2786|
000a50  1ed7              SUBS     r7,r2,#3
000a52  f2416ab8          MOV      r10,#0x16b8
000a56  f83aa000          LDRH     r10,[r10,r0]
000a5a  f2416bbc          MOV      r11,#0x16bc
000a5e  f81bb000          LDRB     r11,[r11,r0]
000a62  fa07fb0b          LSL      r11,r7,r11
000a66  ea4a0a0b          ORR      r10,r10,r11
000a6a  fa1ffb8a          UXTH     r11,r10
000a6e  f2416ab8          MOV      r10,#0x16b8
000a72  f82ab000          STRH     r11,[r10,r0]
000a76  f81ab000          LDRB     r11,[r10,r0]
000a7a  f8d0e014          LDR      lr,[r0,#0x14]
000a7e  f10e0a01          ADD      r10,lr,#1
000a82  f8c0a014          STR      r10,[r0,#0x14]
000a86  f8d0a008          LDR      r10,[r0,#8]
000a8a  f80ab00e          STRB     r11,[r10,lr]
000a8e  f2416ab8          MOV      r10,#0x16b8
000a92  f83aa000          LDRH     r10,[r10,r0]
000a96  ea4f2b2a          ASR      r11,r10,#8
000a9a  f8d0e014          LDR      lr,[r0,#0x14]
000a9e  f10e0a01          ADD      r10,lr,#1
000aa2  f8c0a014          STR      r10,[r0,#0x14]
000aa6  f8d0a008          LDR      r10,[r0,#8]
000aaa  f80ab00e          STRB     r11,[r10,lr]
000aae  fa1ffa87          UXTH     r10,r7
000ab2  f2416bbc          MOV      r11,#0x16bc
000ab6  f85bb000          LDR      r11,[r11,r0]
000aba  f1cb0b10          RSB      r11,r11,#0x10
000abe  fa4afa0b          ASR      r10,r10,r11
000ac2  f2416bb8          MOV      r11,#0x16b8
000ac6  f82ba000          STRH     r10,[r11,r0]
000aca  f2416abc          MOV      r10,#0x16bc
000ace  f85ab000          LDR      r11,[r10,r0]
000ad2  f1a60a10          SUB      r10,r6,#0x10
000ad6  44d3              ADD      r11,r11,r10
000ad8  f2416abc          MOV      r10,#0x16bc
000adc  f84ab000          STR      r11,[r10,r0]
000ae0  e01a              B        |L1.2840|
                  |L1.2786|
000ae2  1ed7              SUBS     r7,r2,#3
000ae4  f2416abc          MOV      r10,#0x16bc
000ae8  f81aa000          LDRB     r10,[r10,r0]
000aec  fa07f70a          LSL      r7,r7,r10
000af0  f2416ab8          MOV      r10,#0x16b8
000af4  f83aa000          LDRH     r10,[r10,r0]
000af8  ea47070a          ORR      r7,r7,r10
000afc  fa1ffa87          UXTH     r10,r7
000b00  f24167b8          MOV      r7,#0x16b8
000b04  f827a000          STRH     r10,[r7,r0]
000b08  1d3f              ADDS     r7,r7,#4
000b0a  583f              LDR      r7,[r7,r0]
000b0c  eb070a06          ADD      r10,r7,r6
000b10  f24167bc          MOV      r7,#0x16bc
000b14  f847a000          STR      r10,[r7,r0]
                  |L1.2840|
000b18  e1b9              B        |L1.3726|
                  |L1.2842|
;;;781    
;;;782            } else if (count <= 10) {
000b1a  2a0a              CMP      r2,#0xa
000b1c  dc7e              BGT      |L1.3100|
;;;783                send_code(s, REPZ_3_10, s->bl_tree); send_bits(s, count-3, 3);
000b1e  f8b06ac2          LDRH     r6,[r0,#0xac2]
000b22  f24167bc          MOV      r7,#0x16bc
000b26  583f              LDR      r7,[r7,r0]
000b28  f1c60a10          RSB      r10,r6,#0x10
000b2c  4557              CMP      r7,r10
000b2e  dd47              BLE      |L1.3008|
000b30  f8b07ac0          LDRH     r7,[r0,#0xac0]
000b34  f2416ab8          MOV      r10,#0x16b8
000b38  f83aa000          LDRH     r10,[r10,r0]
000b3c  f2416bbc          MOV      r11,#0x16bc
000b40  f81bb000          LDRB     r11,[r11,r0]
000b44  fa07fb0b          LSL      r11,r7,r11
000b48  ea4a0a0b          ORR      r10,r10,r11
000b4c  fa1ffb8a          UXTH     r11,r10
000b50  f2416ab8          MOV      r10,#0x16b8
000b54  f82ab000          STRH     r11,[r10,r0]
000b58  f81ab000          LDRB     r11,[r10,r0]
000b5c  f8d0e014          LDR      lr,[r0,#0x14]
000b60  f10e0a01          ADD      r10,lr,#1
000b64  f8c0a014          STR      r10,[r0,#0x14]
000b68  f8d0a008          LDR      r10,[r0,#8]
000b6c  f80ab00e          STRB     r11,[r10,lr]
000b70  f2416ab8          MOV      r10,#0x16b8
000b74  f83aa000          LDRH     r10,[r10,r0]
000b78  ea4f2b2a          ASR      r11,r10,#8
000b7c  f8d0e014          LDR      lr,[r0,#0x14]
000b80  f10e0a01          ADD      r10,lr,#1
000b84  f8c0a014          STR      r10,[r0,#0x14]
000b88  f8d0a008          LDR      r10,[r0,#8]
000b8c  f80ab00e          STRB     r11,[r10,lr]
000b90  f2416abc          MOV      r10,#0x16bc
000b94  f85aa000          LDR      r10,[r10,r0]
000b98  f1ca0a10          RSB      r10,r10,#0x10
000b9c  fa47fa0a          ASR      r10,r7,r10
000ba0  f2416bb8          MOV      r11,#0x16b8
000ba4  f82ba000          STRH     r10,[r11,r0]
000ba8  f2416abc          MOV      r10,#0x16bc
000bac  f85ab000          LDR      r11,[r10,r0]
000bb0  f1a60a10          SUB      r10,r6,#0x10
000bb4  44d3              ADD      r11,r11,r10
000bb6  f2416abc          MOV      r10,#0x16bc
000bba  f84ab000          STR      r11,[r10,r0]
000bbe  e01b              B        |L1.3064|
                  |L1.3008|
000bc0  f8b07ac0          LDRH     r7,[r0,#0xac0]
000bc4  f2416abc          MOV      r10,#0x16bc
000bc8  f81aa000          LDRB     r10,[r10,r0]
000bcc  fa07f70a          LSL      r7,r7,r10
000bd0  f2416ab8          MOV      r10,#0x16b8
000bd4  f83aa000          LDRH     r10,[r10,r0]
000bd8  ea47070a          ORR      r7,r7,r10
000bdc  fa1ffa87          UXTH     r10,r7
000be0  f24167b8          MOV      r7,#0x16b8
000be4  f827a000          STRH     r10,[r7,r0]
000be8  1d3f              ADDS     r7,r7,#4
000bea  583f              LDR      r7,[r7,r0]
000bec  eb070a06          ADD      r10,r7,r6
000bf0  f24167bc          MOV      r7,#0x16bc
000bf4  f847a000          STR      r10,[r7,r0]
                  |L1.3064|
000bf8  2603              MOVS     r6,#3
000bfa  f24167bc          MOV      r7,#0x16bc
000bfe  583f              LDR      r7,[r7,r0]
000c00  f1c60a10          RSB      r10,r6,#0x10
000c04  4557              CMP      r7,r10
000c06  dd4a              BLE      |L1.3230|
000c08  1ed7              SUBS     r7,r2,#3
000c0a  f2416ab8          MOV      r10,#0x16b8
000c0e  f83aa000          LDRH     r10,[r10,r0]
000c12  f2416bbc          MOV      r11,#0x16bc
000c16  f81bb000          LDRB     r11,[r11,r0]
000c1a  e000              B        |L1.3102|
                  |L1.3100|
000c1c  e05b              B        |L1.3286|
                  |L1.3102|
000c1e  fa07fb0b          LSL      r11,r7,r11
000c22  ea4a0a0b          ORR      r10,r10,r11
000c26  fa1ffb8a          UXTH     r11,r10
000c2a  f2416ab8          MOV      r10,#0x16b8
000c2e  f82ab000          STRH     r11,[r10,r0]
000c32  f81ab000          LDRB     r11,[r10,r0]
000c36  f8d0e014          LDR      lr,[r0,#0x14]
000c3a  f10e0a01          ADD      r10,lr,#1
000c3e  f8c0a014          STR      r10,[r0,#0x14]
000c42  f8d0a008          LDR      r10,[r0,#8]
000c46  f80ab00e          STRB     r11,[r10,lr]
000c4a  f2416ab8          MOV      r10,#0x16b8
000c4e  f83aa000          LDRH     r10,[r10,r0]
000c52  ea4f2b2a          ASR      r11,r10,#8
000c56  f8d0e014          LDR      lr,[r0,#0x14]
000c5a  f10e0a01          ADD      r10,lr,#1
000c5e  f8c0a014          STR      r10,[r0,#0x14]
000c62  f8d0a008          LDR      r10,[r0,#8]
000c66  f80ab00e          STRB     r11,[r10,lr]
000c6a  fa1ffa87          UXTH     r10,r7
000c6e  f2416bbc          MOV      r11,#0x16bc
000c72  f85bb000          LDR      r11,[r11,r0]
000c76  f1cb0b10          RSB      r11,r11,#0x10
000c7a  fa4afa0b          ASR      r10,r10,r11
000c7e  f2416bb8          MOV      r11,#0x16b8
000c82  f82ba000          STRH     r10,[r11,r0]
000c86  f2416abc          MOV      r10,#0x16bc
000c8a  f85ab000          LDR      r11,[r10,r0]
000c8e  f1a60a10          SUB      r10,r6,#0x10
000c92  44d3              ADD      r11,r11,r10
000c94  f2416abc          MOV      r10,#0x16bc
000c98  f84ab000          STR      r11,[r10,r0]
000c9c  e01a              B        |L1.3284|
                  |L1.3230|
000c9e  1ed7              SUBS     r7,r2,#3
000ca0  f2416abc          MOV      r10,#0x16bc
000ca4  f81aa000          LDRB     r10,[r10,r0]
000ca8  fa07f70a          LSL      r7,r7,r10
000cac  f2416ab8          MOV      r10,#0x16b8
000cb0  f83aa000          LDRH     r10,[r10,r0]
000cb4  ea47070a          ORR      r7,r7,r10
000cb8  fa1ffa87          UXTH     r10,r7
000cbc  f24167b8          MOV      r7,#0x16b8
000cc0  f827a000          STRH     r10,[r7,r0]
000cc4  1d3f              ADDS     r7,r7,#4
000cc6  583f              LDR      r7,[r7,r0]
000cc8  eb070a06          ADD      r10,r7,r6
000ccc  f24167bc          MOV      r7,#0x16bc
000cd0  f847a000          STR      r10,[r7,r0]
                  |L1.3284|
000cd4  e0db              B        |L1.3726|
                  |L1.3286|
;;;784    
;;;785            } else {
;;;786                send_code(s, REPZ_11_138, s->bl_tree); send_bits(s, count-11, 7);
000cd6  f8b06ac6          LDRH     r6,[r0,#0xac6]
000cda  f24167bc          MOV      r7,#0x16bc
000cde  583f              LDR      r7,[r7,r0]
000ce0  f1c60a10          RSB      r10,r6,#0x10
000ce4  4557              CMP      r7,r10
000ce6  dd47              BLE      |L1.3448|
000ce8  f8b07ac4          LDRH     r7,[r0,#0xac4]
000cec  f2416ab8          MOV      r10,#0x16b8
000cf0  f83aa000          LDRH     r10,[r10,r0]
000cf4  f2416bbc          MOV      r11,#0x16bc
000cf8  f81bb000          LDRB     r11,[r11,r0]
000cfc  fa07fb0b          LSL      r11,r7,r11
000d00  ea4a0a0b          ORR      r10,r10,r11
000d04  fa1ffb8a          UXTH     r11,r10
000d08  f2416ab8          MOV      r10,#0x16b8
000d0c  f82ab000          STRH     r11,[r10,r0]
000d10  f81ab000          LDRB     r11,[r10,r0]
000d14  f8d0e014          LDR      lr,[r0,#0x14]
000d18  f10e0a01          ADD      r10,lr,#1
000d1c  f8c0a014          STR      r10,[r0,#0x14]
000d20  f8d0a008          LDR      r10,[r0,#8]
000d24  f80ab00e          STRB     r11,[r10,lr]
000d28  f2416ab8          MOV      r10,#0x16b8
000d2c  f83aa000          LDRH     r10,[r10,r0]
000d30  ea4f2b2a          ASR      r11,r10,#8
000d34  f8d0e014          LDR      lr,[r0,#0x14]
000d38  f10e0a01          ADD      r10,lr,#1
000d3c  f8c0a014          STR      r10,[r0,#0x14]
000d40  f8d0a008          LDR      r10,[r0,#8]
000d44  f80ab00e          STRB     r11,[r10,lr]
000d48  f2416abc          MOV      r10,#0x16bc
000d4c  f85aa000          LDR      r10,[r10,r0]
000d50  f1ca0a10          RSB      r10,r10,#0x10
000d54  fa47fa0a          ASR      r10,r7,r10
000d58  f2416bb8          MOV      r11,#0x16b8
000d5c  f82ba000          STRH     r10,[r11,r0]
000d60  f2416abc          MOV      r10,#0x16bc
000d64  f85ab000          LDR      r11,[r10,r0]
000d68  f1a60a10          SUB      r10,r6,#0x10
000d6c  44d3              ADD      r11,r11,r10
000d6e  f2416abc          MOV      r10,#0x16bc
000d72  f84ab000          STR      r11,[r10,r0]
000d76  e01b              B        |L1.3504|
                  |L1.3448|
000d78  f8b07ac4          LDRH     r7,[r0,#0xac4]
000d7c  f2416abc          MOV      r10,#0x16bc
000d80  f81aa000          LDRB     r10,[r10,r0]
000d84  fa07f70a          LSL      r7,r7,r10
000d88  f2416ab8          MOV      r10,#0x16b8
000d8c  f83aa000          LDRH     r10,[r10,r0]
000d90  ea47070a          ORR      r7,r7,r10
000d94  fa1ffa87          UXTH     r10,r7
000d98  f24167b8          MOV      r7,#0x16b8
000d9c  f827a000          STRH     r10,[r7,r0]
000da0  1d3f              ADDS     r7,r7,#4
000da2  583f              LDR      r7,[r7,r0]
000da4  eb070a06          ADD      r10,r7,r6
000da8  f24167bc          MOV      r7,#0x16bc
000dac  f847a000          STR      r10,[r7,r0]
                  |L1.3504|
000db0  2607              MOVS     r6,#7
000db2  f24167bc          MOV      r7,#0x16bc
000db6  583f              LDR      r7,[r7,r0]
000db8  f1c60a10          RSB      r10,r6,#0x10
000dbc  4557              CMP      r7,r10
000dbe  dd49              BLE      |L1.3668|
000dc0  f1a2070b          SUB      r7,r2,#0xb
000dc4  f2416ab8          MOV      r10,#0x16b8
000dc8  f83aa000          LDRH     r10,[r10,r0]
000dcc  f2416bbc          MOV      r11,#0x16bc
000dd0  f81bb000          LDRB     r11,[r11,r0]
000dd4  fa07fb0b          LSL      r11,r7,r11
000dd8  ea4a0a0b          ORR      r10,r10,r11
000ddc  fa1ffb8a          UXTH     r11,r10
000de0  f2416ab8          MOV      r10,#0x16b8
000de4  f82ab000          STRH     r11,[r10,r0]
000de8  f81ab000          LDRB     r11,[r10,r0]
000dec  f8d0e014          LDR      lr,[r0,#0x14]
000df0  f10e0a01          ADD      r10,lr,#1
000df4  f8c0a014          STR      r10,[r0,#0x14]
000df8  f8d0a008          LDR      r10,[r0,#8]
000dfc  f80ab00e          STRB     r11,[r10,lr]
000e00  f2416ab8          MOV      r10,#0x16b8
000e04  f83aa000          LDRH     r10,[r10,r0]
000e08  ea4f2b2a          ASR      r11,r10,#8
000e0c  f8d0e014          LDR      lr,[r0,#0x14]
000e10  f10e0a01          ADD      r10,lr,#1
000e14  f8c0a014          STR      r10,[r0,#0x14]
000e18  f8d0a008          LDR      r10,[r0,#8]
000e1c  f80ab00e          STRB     r11,[r10,lr]
000e20  fa1ffa87          UXTH     r10,r7
000e24  f2416bbc          MOV      r11,#0x16bc
000e28  f85bb000          LDR      r11,[r11,r0]
000e2c  f1cb0b10          RSB      r11,r11,#0x10
000e30  fa4afa0b          ASR      r10,r10,r11
000e34  f2416bb8          MOV      r11,#0x16b8
000e38  f82ba000          STRH     r10,[r11,r0]
000e3c  f2416abc          MOV      r10,#0x16bc
000e40  f85ab000          LDR      r11,[r10,r0]
000e44  f1a60a10          SUB      r10,r6,#0x10
000e48  44d3              ADD      r11,r11,r10
000e4a  f2416abc          MOV      r10,#0x16bc
000e4e  f84ab000          STR      r11,[r10,r0]
000e52  e01b              B        |L1.3724|
                  |L1.3668|
000e54  f1a2070b          SUB      r7,r2,#0xb
000e58  f2416abc          MOV      r10,#0x16bc
000e5c  f81aa000          LDRB     r10,[r10,r0]
000e60  fa07f70a          LSL      r7,r7,r10
000e64  f2416ab8          MOV      r10,#0x16b8
000e68  f83aa000          LDRH     r10,[r10,r0]
000e6c  ea47070a          ORR      r7,r7,r10
000e70  fa1ffa87          UXTH     r10,r7
000e74  f24167b8          MOV      r7,#0x16b8
000e78  f827a000          STRH     r10,[r7,r0]
000e7c  1d3f              ADDS     r7,r7,#4
000e7e  583f              LDR      r7,[r7,r0]
000e80  eb070a06          ADD      r10,r7,r6
000e84  f24167bc          MOV      r7,#0x16bc
000e88  f847a000          STR      r10,[r7,r0]
                  |L1.3724|
000e8c  bf00              NOP      
                  |L1.3726|
;;;787            }
;;;788            count = 0; prevlen = curlen;
000e8e  2200              MOVS     r2,#0
000e90  4688              MOV      r8,r1
;;;789            if (nextlen == 0) {
000e92  b923              CBNZ     r3,|L1.3742|
;;;790                max_count = 138, min_count = 3;
000e94  f04f098a          MOV      r9,#0x8a
000e98  2603              MOVS     r6,#3
000e9a  9600              STR      r6,[sp,#0]
000e9c  e00a              B        |L1.3764|
                  |L1.3742|
;;;791            } else if (curlen == nextlen) {
000e9e  4299              CMP      r1,r3
000ea0  d104              BNE      |L1.3756|
;;;792                max_count = 6, min_count = 3;
000ea2  f04f0906          MOV      r9,#6
000ea6  2603              MOVS     r6,#3
000ea8  9600              STR      r6,[sp,#0]
000eaa  e003              B        |L1.3764|
                  |L1.3756|
;;;793            } else {
;;;794                max_count = 7, min_count = 4;
000eac  f04f0907          MOV      r9,#7
000eb0  2604              MOVS     r6,#4
000eb2  9600              STR      r6,[sp,#0]
                  |L1.3764|
000eb4  bf00              NOP                            ;771
                  |L1.3766|
000eb6  1c64              ADDS     r4,r4,#1              ;768
                  |L1.3768|
000eb8  4564              CMP      r4,r12                ;768
000eba  f77fac50          BLE      |L1.1886|
;;;795            }
;;;796        }
;;;797    }
000ebe  e8bd8ff8          POP      {r3-r11,pc}
;;;798    
                          ENDP

                  build_bl_tree PROC
;;;802     */
;;;803    local int build_bl_tree(s)
000ec2  b570              PUSH     {r4-r6,lr}
;;;804        deflate_state *s;
;;;805    {
000ec4  4604              MOV      r4,r0
;;;806        int max_blindex;  /* index of last bit length code of non zero freq */
;;;807    
;;;808        /* Determine the bit length frequencies for literal and distance trees */
;;;809        scan_tree(s, (ct_data *)s->dyn_ltree, s->l_desc.max_code);
000ec6  f640301c          MOV      r0,#0xb1c
000eca  5902              LDR      r2,[r0,r4]
000ecc  f1040194          ADD      r1,r4,#0x94
000ed0  4620              MOV      r0,r4
000ed2  f7fffffe          BL       scan_tree
;;;810        scan_tree(s, (ct_data *)s->dyn_dtree, s->d_desc.max_code);
000ed6  f6403028          MOV      r0,#0xb28
000eda  5902              LDR      r2,[r0,r4]
000edc  f6041188          ADD      r1,r4,#0x988
000ee0  4620              MOV      r0,r4
000ee2  f7fffffe          BL       scan_tree
;;;811    
;;;812        /* Build the bit length tree: */
;;;813        build_tree(s, (tree_desc *)(&(s->bl_desc)));
000ee6  f5046133          ADD      r1,r4,#0xb30
000eea  4620              MOV      r0,r4
000eec  f7fffffe          BL       build_tree
;;;814        /* opt_len now includes the length of the tree representations, except
;;;815         * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
;;;816         */
;;;817    
;;;818        /* Determine the number of bit length codes to send. The pkzip format
;;;819         * requires that at least 4 bit length codes be sent. (appnote.txt says
;;;820         * 3 but the actual value used is 4.)
;;;821         */
;;;822        for (max_blindex = BL_CODES-1; max_blindex >= 3; max_blindex--) {
000ef0  2512              MOVS     r5,#0x12
000ef2  e009              B        |L1.3848|
                  |L1.3828|
;;;823            if (s->bl_tree[bl_order[max_blindex]].Len != 0) break;
000ef4  48fe              LDR      r0,|L1.4848|
000ef6  5d41              LDRB     r1,[r0,r5]
000ef8  f604207c          ADD      r0,r4,#0xa7c
000efc  eb000081          ADD      r0,r0,r1,LSL #2
000f00  8840              LDRH     r0,[r0,#2]
000f02  b100              CBZ      r0,|L1.3846|
000f04  e002              B        |L1.3852|
                  |L1.3846|
000f06  1e6d              SUBS     r5,r5,#1              ;822
                  |L1.3848|
000f08  2d03              CMP      r5,#3                 ;822
000f0a  daf3              BGE      |L1.3828|
                  |L1.3852|
000f0c  bf00              NOP      
;;;824        }
;;;825        /* Update opt_len to include the bit length tree and counts */
;;;826        s->opt_len += 3*(max_blindex+1) + 5+5+4;
000f0e  f24160a8          MOV      r0,#0x16a8
000f12  5901              LDR      r1,[r0,r4]
000f14  1c68              ADDS     r0,r5,#1
000f16  eb000040          ADD      r0,r0,r0,LSL #1
000f1a  300e              ADDS     r0,r0,#0xe
000f1c  4401              ADD      r1,r1,r0
000f1e  f24160a8          MOV      r0,#0x16a8
000f22  5101              STR      r1,[r0,r4]
;;;827        Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
;;;828                s->opt_len, s->static_len));
;;;829    
;;;830        return max_blindex;
000f24  4628              MOV      r0,r5
;;;831    }
000f26  bd70              POP      {r4-r6,pc}
;;;832    
                          ENDP

                  send_all_trees PROC
;;;837     */
;;;838    local void send_all_trees(s, lcodes, dcodes, blcodes)
000f28  e92d41f0          PUSH     {r4-r8,lr}
;;;839        deflate_state *s;
;;;840        int lcodes, dcodes, blcodes; /* number of codes for each tree */
;;;841    {
000f2c  4604              MOV      r4,r0
000f2e  460e              MOV      r6,r1
000f30  4617              MOV      r7,r2
000f32  4698              MOV      r8,r3
;;;842        int rank;                    /* index in bl_order */
;;;843    
;;;844        Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
;;;845        Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
;;;846                "too many codes");
;;;847        Tracev((stderr, "\nbl counts: "));
;;;848        send_bits(s, lcodes-257, 5); /* not +255 as stated in appnote.txt */
000f34  2005              MOVS     r0,#5
000f36  f24161bc          MOV      r1,#0x16bc
000f3a  5909              LDR      r1,[r1,r4]
000f3c  f1c00210          RSB      r2,r0,#0x10
000f40  4291              CMP      r1,r2
000f42  dd36              BLE      |L1.4018|
000f44  f2a61101          SUB      r1,r6,#0x101
000f48  f24162b8          MOV      r2,#0x16b8
000f4c  5b12              LDRH     r2,[r2,r4]
000f4e  f24163bc          MOV      r3,#0x16bc
000f52  5d1b              LDRB     r3,[r3,r4]
000f54  fa01f303          LSL      r3,r1,r3
000f58  431a              ORRS     r2,r2,r3
000f5a  b293              UXTH     r3,r2
000f5c  f24162b8          MOV      r2,#0x16b8
000f60  5313              STRH     r3,[r2,r4]
000f62  5d13              LDRB     r3,[r2,r4]
000f64  f8d4c014          LDR      r12,[r4,#0x14]
000f68  f10c0201          ADD      r2,r12,#1
000f6c  6162              STR      r2,[r4,#0x14]
000f6e  68a2              LDR      r2,[r4,#8]
000f70  f802300c          STRB     r3,[r2,r12]
000f74  f24162b8          MOV      r2,#0x16b8
000f78  5b12              LDRH     r2,[r2,r4]
000f7a  1213              ASRS     r3,r2,#8
000f7c  f8d4c014          LDR      r12,[r4,#0x14]
000f80  f10c0201          ADD      r2,r12,#1
000f84  6162              STR      r2,[r4,#0x14]
000f86  68a2              LDR      r2,[r4,#8]
000f88  f802300c          STRB     r3,[r2,r12]
000f8c  b28a              UXTH     r2,r1
000f8e  f24163bc          MOV      r3,#0x16bc
000f92  591b              LDR      r3,[r3,r4]
000f94  f1c30310          RSB      r3,r3,#0x10
000f98  411a              ASRS     r2,r2,r3
000f9a  f24163b8          MOV      r3,#0x16b8
000f9e  531a              STRH     r2,[r3,r4]
000fa0  1d1a              ADDS     r2,r3,#4
000fa2  5913              LDR      r3,[r2,r4]
000fa4  f1a00210          SUB      r2,r0,#0x10
000fa8  4413              ADD      r3,r3,r2
000faa  f24162bc          MOV      r2,#0x16bc
000fae  5113              STR      r3,[r2,r4]
000fb0  e013              B        |L1.4058|
                  |L1.4018|
000fb2  f2a61101          SUB      r1,r6,#0x101
000fb6  f24162bc          MOV      r2,#0x16bc
000fba  5d12              LDRB     r2,[r2,r4]
000fbc  4091              LSLS     r1,r1,r2
000fbe  f24162b8          MOV      r2,#0x16b8
000fc2  5b12              LDRH     r2,[r2,r4]
000fc4  4311              ORRS     r1,r1,r2
000fc6  b28a              UXTH     r2,r1
000fc8  f24161b8          MOV      r1,#0x16b8
000fcc  530a              STRH     r2,[r1,r4]
000fce  1d09              ADDS     r1,r1,#4
000fd0  5909              LDR      r1,[r1,r4]
000fd2  180a              ADDS     r2,r1,r0
000fd4  f24161bc          MOV      r1,#0x16bc
000fd8  510a              STR      r2,[r1,r4]
                  |L1.4058|
;;;849        send_bits(s, dcodes-1,   5);
000fda  2005              MOVS     r0,#5
000fdc  f24161bc          MOV      r1,#0x16bc
000fe0  5909              LDR      r1,[r1,r4]
000fe2  f1c00210          RSB      r2,r0,#0x10
000fe6  4291              CMP      r1,r2
000fe8  dd35              BLE      |L1.4182|
000fea  1e79              SUBS     r1,r7,#1
000fec  f24162b8          MOV      r2,#0x16b8
000ff0  5b12              LDRH     r2,[r2,r4]
000ff2  f24163bc          MOV      r3,#0x16bc
000ff6  5d1b              LDRB     r3,[r3,r4]
000ff8  fa01f303          LSL      r3,r1,r3
000ffc  431a              ORRS     r2,r2,r3
000ffe  b293              UXTH     r3,r2
001000  f24162b8          MOV      r2,#0x16b8
001004  5313              STRH     r3,[r2,r4]
001006  5d13              LDRB     r3,[r2,r4]
001008  f8d4c014          LDR      r12,[r4,#0x14]
00100c  f10c0201          ADD      r2,r12,#1
001010  6162              STR      r2,[r4,#0x14]
001012  68a2              LDR      r2,[r4,#8]
001014  f802300c          STRB     r3,[r2,r12]
001018  f24162b8          MOV      r2,#0x16b8
00101c  5b12              LDRH     r2,[r2,r4]
00101e  1213              ASRS     r3,r2,#8
001020  f8d4c014          LDR      r12,[r4,#0x14]
001024  f10c0201          ADD      r2,r12,#1
001028  6162              STR      r2,[r4,#0x14]
00102a  68a2              LDR      r2,[r4,#8]
00102c  f802300c          STRB     r3,[r2,r12]
001030  b28a              UXTH     r2,r1
001032  f24163bc          MOV      r3,#0x16bc
001036  591b              LDR      r3,[r3,r4]
001038  f1c30310          RSB      r3,r3,#0x10
00103c  411a              ASRS     r2,r2,r3
00103e  f24163b8          MOV      r3,#0x16b8
001042  531a              STRH     r2,[r3,r4]
001044  1d1a              ADDS     r2,r3,#4
001046  5913              LDR      r3,[r2,r4]
001048  f1a00210          SUB      r2,r0,#0x10
00104c  4413              ADD      r3,r3,r2
00104e  f24162bc          MOV      r2,#0x16bc
001052  5113              STR      r3,[r2,r4]
001054  e012              B        |L1.4220|
                  |L1.4182|
001056  1e79              SUBS     r1,r7,#1
001058  f24162bc          MOV      r2,#0x16bc
00105c  5d12              LDRB     r2,[r2,r4]
00105e  4091              LSLS     r1,r1,r2
001060  f24162b8          MOV      r2,#0x16b8
001064  5b12              LDRH     r2,[r2,r4]
001066  4311              ORRS     r1,r1,r2
001068  b28a              UXTH     r2,r1
00106a  f24161b8          MOV      r1,#0x16b8
00106e  530a              STRH     r2,[r1,r4]
001070  1d09              ADDS     r1,r1,#4
001072  5909              LDR      r1,[r1,r4]
001074  180a              ADDS     r2,r1,r0
001076  f24161bc          MOV      r1,#0x16bc
00107a  510a              STR      r2,[r1,r4]
                  |L1.4220|
;;;850        send_bits(s, blcodes-4,  4); /* not -3 as stated in appnote.txt */
00107c  2004              MOVS     r0,#4
00107e  f24161bc          MOV      r1,#0x16bc
001082  5909              LDR      r1,[r1,r4]
001084  f1c00210          RSB      r2,r0,#0x10
001088  4291              CMP      r1,r2
00108a  dd36              BLE      |L1.4346|
00108c  f1a80104          SUB      r1,r8,#4
001090  f24162b8          MOV      r2,#0x16b8
001094  5b12              LDRH     r2,[r2,r4]
001096  f24163bc          MOV      r3,#0x16bc
00109a  5d1b              LDRB     r3,[r3,r4]
00109c  fa01f303          LSL      r3,r1,r3
0010a0  431a              ORRS     r2,r2,r3
0010a2  b293              UXTH     r3,r2
0010a4  f24162b8          MOV      r2,#0x16b8
0010a8  5313              STRH     r3,[r2,r4]
0010aa  5d13              LDRB     r3,[r2,r4]
0010ac  f8d4c014          LDR      r12,[r4,#0x14]
0010b0  f10c0201          ADD      r2,r12,#1
0010b4  6162              STR      r2,[r4,#0x14]
0010b6  68a2              LDR      r2,[r4,#8]
0010b8  f802300c          STRB     r3,[r2,r12]
0010bc  f24162b8          MOV      r2,#0x16b8
0010c0  5b12              LDRH     r2,[r2,r4]
0010c2  1213              ASRS     r3,r2,#8
0010c4  f8d4c014          LDR      r12,[r4,#0x14]
0010c8  f10c0201          ADD      r2,r12,#1
0010cc  6162              STR      r2,[r4,#0x14]
0010ce  68a2              LDR      r2,[r4,#8]
0010d0  f802300c          STRB     r3,[r2,r12]
0010d4  b28a              UXTH     r2,r1
0010d6  f24163bc          MOV      r3,#0x16bc
0010da  591b              LDR      r3,[r3,r4]
0010dc  f1c30310          RSB      r3,r3,#0x10
0010e0  411a              ASRS     r2,r2,r3
0010e2  f24163b8          MOV      r3,#0x16b8
0010e6  531a              STRH     r2,[r3,r4]
0010e8  1d1a              ADDS     r2,r3,#4
0010ea  5913              LDR      r3,[r2,r4]
0010ec  f1a00210          SUB      r2,r0,#0x10
0010f0  4413              ADD      r3,r3,r2
0010f2  f24162bc          MOV      r2,#0x16bc
0010f6  5113              STR      r3,[r2,r4]
0010f8  e013              B        |L1.4386|
                  |L1.4346|
0010fa  f1a80104          SUB      r1,r8,#4
0010fe  f24162bc          MOV      r2,#0x16bc
001102  5d12              LDRB     r2,[r2,r4]
001104  4091              LSLS     r1,r1,r2
001106  f24162b8          MOV      r2,#0x16b8
00110a  5b12              LDRH     r2,[r2,r4]
00110c  4311              ORRS     r1,r1,r2
00110e  b28a              UXTH     r2,r1
001110  f24161b8          MOV      r1,#0x16b8
001114  530a              STRH     r2,[r1,r4]
001116  1d09              ADDS     r1,r1,#4
001118  5909              LDR      r1,[r1,r4]
00111a  180a              ADDS     r2,r1,r0
00111c  f24161bc          MOV      r1,#0x16bc
001120  510a              STR      r2,[r1,r4]
                  |L1.4386|
;;;851        for (rank = 0; rank < blcodes; rank++) {
001122  2500              MOVS     r5,#0
001124  e05d              B        |L1.4578|
                  |L1.4390|
;;;852            Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
;;;853            send_bits(s, s->bl_tree[bl_order[rank]].Len, 3);
001126  2003              MOVS     r0,#3
001128  f24161bc          MOV      r1,#0x16bc
00112c  5909              LDR      r1,[r1,r4]
00112e  f1c00210          RSB      r2,r0,#0x10
001132  4291              CMP      r1,r2
001134  dd3b              BLE      |L1.4526|
001136  4a6e              LDR      r2,|L1.4848|
001138  5d53              LDRB     r3,[r2,r5]
00113a  f604227c          ADD      r2,r4,#0xa7c
00113e  eb020283          ADD      r2,r2,r3,LSL #2
001142  8851              LDRH     r1,[r2,#2]
001144  f24162b8          MOV      r2,#0x16b8
001148  5b12              LDRH     r2,[r2,r4]
00114a  f24163bc          MOV      r3,#0x16bc
00114e  5d1b              LDRB     r3,[r3,r4]
001150  fa01f303          LSL      r3,r1,r3
001154  431a              ORRS     r2,r2,r3
001156  b293              UXTH     r3,r2
001158  f24162b8          MOV      r2,#0x16b8
00115c  5313              STRH     r3,[r2,r4]
00115e  5d13              LDRB     r3,[r2,r4]
001160  f8d4c014          LDR      r12,[r4,#0x14]
001164  f10c0201          ADD      r2,r12,#1
001168  6162              STR      r2,[r4,#0x14]
00116a  68a2              LDR      r2,[r4,#8]
00116c  f802300c          STRB     r3,[r2,r12]
001170  f24162b8          MOV      r2,#0x16b8
001174  5b12              LDRH     r2,[r2,r4]
001176  1213              ASRS     r3,r2,#8
001178  f8d4c014          LDR      r12,[r4,#0x14]
00117c  f10c0201          ADD      r2,r12,#1
001180  6162              STR      r2,[r4,#0x14]
001182  68a2              LDR      r2,[r4,#8]
001184  f802300c          STRB     r3,[r2,r12]
001188  f24162bc          MOV      r2,#0x16bc
00118c  5912              LDR      r2,[r2,r4]
00118e  f1c20210          RSB      r2,r2,#0x10
001192  fa41f202          ASR      r2,r1,r2
001196  f24163b8          MOV      r3,#0x16b8
00119a  531a              STRH     r2,[r3,r4]
00119c  1d1a              ADDS     r2,r3,#4
00119e  5913              LDR      r3,[r2,r4]
0011a0  f1a00210          SUB      r2,r0,#0x10
0011a4  4413              ADD      r3,r3,r2
0011a6  f24162bc          MOV      r2,#0x16bc
0011aa  5113              STR      r3,[r2,r4]
0011ac  e018              B        |L1.4576|
                  |L1.4526|
0011ae  4950              LDR      r1,|L1.4848|
0011b0  5d4a              LDRB     r2,[r1,r5]
0011b2  f604217c          ADD      r1,r4,#0xa7c
0011b6  eb010182          ADD      r1,r1,r2,LSL #2
0011ba  8849              LDRH     r1,[r1,#2]
0011bc  f24162bc          MOV      r2,#0x16bc
0011c0  5d12              LDRB     r2,[r2,r4]
0011c2  4091              LSLS     r1,r1,r2
0011c4  f24162b8          MOV      r2,#0x16b8
0011c8  5b12              LDRH     r2,[r2,r4]
0011ca  4311              ORRS     r1,r1,r2
0011cc  b28a              UXTH     r2,r1
0011ce  f24161b8          MOV      r1,#0x16b8
0011d2  530a              STRH     r2,[r1,r4]
0011d4  1d09              ADDS     r1,r1,#4
0011d6  5909              LDR      r1,[r1,r4]
0011d8  180a              ADDS     r2,r1,r0
0011da  f24161bc          MOV      r1,#0x16bc
0011de  510a              STR      r2,[r1,r4]
                  |L1.4576|
0011e0  1c6d              ADDS     r5,r5,#1              ;851
                  |L1.4578|
0011e2  4545              CMP      r5,r8                 ;851
0011e4  db9f              BLT      |L1.4390|
;;;854        }
;;;855        Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));
;;;856    
;;;857        send_tree(s, (ct_data *)s->dyn_ltree, lcodes-1); /* literal tree */
0011e6  1e72              SUBS     r2,r6,#1
0011e8  f1040194          ADD      r1,r4,#0x94
0011ec  4620              MOV      r0,r4
0011ee  f7fffffe          BL       send_tree
;;;858        Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));
;;;859    
;;;860        send_tree(s, (ct_data *)s->dyn_dtree, dcodes-1); /* distance tree */
0011f2  1e7a              SUBS     r2,r7,#1
0011f4  f6041188          ADD      r1,r4,#0x988
0011f8  4620              MOV      r0,r4
0011fa  f7fffffe          BL       send_tree
;;;861        Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
;;;862    }
0011fe  e8bd81f0          POP      {r4-r8,pc}
;;;863    
                          ENDP

                  bi_windup PROC
;;;1177    */
;;;1178   local void bi_windup(s)
001202  f24161bc          MOV      r1,#0x16bc
;;;1179       deflate_state *s;
;;;1180   {
;;;1181       if (s->bi_valid > 8) {
001206  5809              LDR      r1,[r1,r0]
001208  2908              CMP      r1,#8
00120a  dd11              BLE      |L1.4656|
;;;1182           put_short(s, s->bi_buf);
00120c  f24161b8          MOV      r1,#0x16b8
001210  5c0a              LDRB     r2,[r1,r0]
001212  6943              LDR      r3,[r0,#0x14]
001214  1c59              ADDS     r1,r3,#1
001216  6141              STR      r1,[r0,#0x14]
001218  6881              LDR      r1,[r0,#8]
00121a  54ca              STRB     r2,[r1,r3]
00121c  f24161b8          MOV      r1,#0x16b8
001220  5a09              LDRH     r1,[r1,r0]
001222  120a              ASRS     r2,r1,#8
001224  6943              LDR      r3,[r0,#0x14]
001226  1c59              ADDS     r1,r3,#1
001228  6141              STR      r1,[r0,#0x14]
00122a  6881              LDR      r1,[r0,#8]
00122c  54ca              STRB     r2,[r1,r3]
00122e  e00c              B        |L1.4682|
                  |L1.4656|
;;;1183       } else if (s->bi_valid > 0) {
001230  f24161bc          MOV      r1,#0x16bc
001234  5809              LDR      r1,[r1,r0]
001236  2900              CMP      r1,#0
001238  dd07              BLE      |L1.4682|
;;;1184           put_byte(s, (Byte)s->bi_buf);
00123a  f24161b8          MOV      r1,#0x16b8
00123e  5c0a              LDRB     r2,[r1,r0]
001240  6943              LDR      r3,[r0,#0x14]
001242  1c59              ADDS     r1,r3,#1
001244  6141              STR      r1,[r0,#0x14]
001246  6881              LDR      r1,[r0,#8]
001248  54ca              STRB     r2,[r1,r3]
                  |L1.4682|
;;;1185       }
;;;1186       s->bi_buf = 0;
00124a  2200              MOVS     r2,#0
00124c  f24161b8          MOV      r1,#0x16b8
001250  520a              STRH     r2,[r1,r0]
;;;1187       s->bi_valid = 0;
001252  1d09              ADDS     r1,r1,#4
001254  500a              STR      r2,[r1,r0]
;;;1188   #ifdef DEBUG
;;;1189       s->bits_sent = (s->bits_sent+7) & ~7;
;;;1190   #endif
;;;1191   }
001256  4770              BX       lr
;;;1192   
                          ENDP

                  copy_block PROC
;;;1196    */
;;;1197   local void copy_block(s, buf, len, header)
001258  e92d41f0          PUSH     {r4-r8,lr}
;;;1198       deflate_state *s;
;;;1199       charf    *buf;    /* the input data */
;;;1200       unsigned len;     /* its length */
;;;1201       int      header;  /* true if block header must be written */
;;;1202   {
00125c  4604              MOV      r4,r0
00125e  460e              MOV      r6,r1
001260  4615              MOV      r5,r2
001262  461f              MOV      r7,r3
;;;1203       bi_windup(s);        /* align on byte boundary */
001264  4620              MOV      r0,r4
001266  f7fffffe          BL       bi_windup
;;;1204       s->last_eob_len = 8; /* enough lookahead for inflate */
00126a  2108              MOVS     r1,#8
00126c  f24160b4          MOV      r0,#0x16b4
001270  5101              STR      r1,[r0,r4]
;;;1205   
;;;1206       if (header) {
001272  b1d7              CBZ      r7,|L1.4778|
;;;1207           put_short(s, (ush)len);
001274  6962              LDR      r2,[r4,#0x14]
001276  1c50              ADDS     r0,r2,#1
001278  6160              STR      r0,[r4,#0x14]
00127a  68a0              LDR      r0,[r4,#8]
00127c  5485              STRB     r5,[r0,r2]
00127e  f3c52107          UBFX     r1,r5,#8,#8
001282  6962              LDR      r2,[r4,#0x14]
001284  1c50              ADDS     r0,r2,#1
001286  6160              STR      r0,[r4,#0x14]
001288  68a0              LDR      r0,[r4,#8]
00128a  5481              STRB     r1,[r0,r2]
;;;1208           put_short(s, (ush)~len);
00128c  43e8              MVNS     r0,r5
00128e  b2c1              UXTB     r1,r0
001290  6962              LDR      r2,[r4,#0x14]
001292  1c50              ADDS     r0,r2,#1
001294  6160              STR      r0,[r4,#0x14]
001296  68a0              LDR      r0,[r4,#8]
001298  5481              STRB     r1,[r0,r2]
00129a  43e8              MVNS     r0,r5
00129c  f3c02107          UBFX     r1,r0,#8,#8
0012a0  6962              LDR      r2,[r4,#0x14]
0012a2  1c50              ADDS     r0,r2,#1
0012a4  6160              STR      r0,[r4,#0x14]
0012a6  68a0              LDR      r0,[r4,#8]
0012a8  5481              STRB     r1,[r0,r2]
                  |L1.4778|
;;;1209   #ifdef DEBUG
;;;1210           s->bits_sent += 2*16;
;;;1211   #endif
;;;1212       }
;;;1213   #ifdef DEBUG
;;;1214       s->bits_sent += (ulg)len<<3;
;;;1215   #endif
;;;1216       while (len--) {
0012aa  e006              B        |L1.4794|
                  |L1.4780|
;;;1217           put_byte(s, *buf++);
0012ac  f8161b01          LDRB     r1,[r6],#1
0012b0  6962              LDR      r2,[r4,#0x14]
0012b2  1c50              ADDS     r0,r2,#1
0012b4  6160              STR      r0,[r4,#0x14]
0012b6  68a0              LDR      r0,[r4,#8]
0012b8  5481              STRB     r1,[r0,r2]
                  |L1.4794|
0012ba  0028              MOVS     r0,r5                 ;1216
0012bc  f1a50501          SUB      r5,r5,#1              ;1216
0012c0  d1f4              BNE      |L1.4780|
;;;1218       }
;;;1219   }
0012c2  e8bd81f0          POP      {r4-r8,pc}
                          ENDP

                  _tr_stored_block PROC
;;;866     */
;;;867    void _tr_stored_block(s, buf, stored_len, eof)
0012c6  e92d41f0          PUSH     {r4-r8,lr}
;;;868        deflate_state *s;
;;;869        charf *buf;       /* input block */
;;;870        ulg stored_len;   /* length of input block */
;;;871        int eof;          /* true if this is the last block for a file */
;;;872    {
0012ca  4604              MOV      r4,r0
0012cc  460e              MOV      r6,r1
0012ce  4617              MOV      r7,r2
0012d0  461d              MOV      r5,r3
;;;873        send_bits(s, (STORED_BLOCK<<1)+eof, 3);  /* send block type */
0012d2  2003              MOVS     r0,#3
0012d4  f24161bc          MOV      r1,#0x16bc
0012d8  5909              LDR      r1,[r1,r4]
0012da  f1c00210          RSB      r2,r0,#0x10
0012de  4291              CMP      r1,r2
0012e0  dd38              BLE      |L1.4948|
0012e2  4629              MOV      r1,r5
0012e4  f24162b8          MOV      r2,#0x16b8
0012e8  5b12              LDRH     r2,[r2,r4]
0012ea  f24163bc          MOV      r3,#0x16bc
0012ee  e001              B        |L1.4852|
                  |L1.4848|
                          DCD      bl_order
                  |L1.4852|
0012f4  5d1b              LDRB     r3,[r3,r4]
0012f6  fa01f303          LSL      r3,r1,r3
0012fa  431a              ORRS     r2,r2,r3
0012fc  b293              UXTH     r3,r2
0012fe  f24162b8          MOV      r2,#0x16b8
001302  5313              STRH     r3,[r2,r4]
001304  5d13              LDRB     r3,[r2,r4]
001306  f8d4c014          LDR      r12,[r4,#0x14]
00130a  f10c0201          ADD      r2,r12,#1
00130e  6162              STR      r2,[r4,#0x14]
001310  68a2              LDR      r2,[r4,#8]
001312  f802300c          STRB     r3,[r2,r12]
001316  f24162b8          MOV      r2,#0x16b8
00131a  5b12              LDRH     r2,[r2,r4]
00131c  1213              ASRS     r3,r2,#8
00131e  f8d4c014          LDR      r12,[r4,#0x14]
001322  f10c0201          ADD      r2,r12,#1
001326  6162              STR      r2,[r4,#0x14]
001328  68a2              LDR      r2,[r4,#8]
00132a  f802300c          STRB     r3,[r2,r12]
00132e  b28a              UXTH     r2,r1
001330  f24163bc          MOV      r3,#0x16bc
001334  591b              LDR      r3,[r3,r4]
001336  f1c30310          RSB      r3,r3,#0x10
00133a  411a              ASRS     r2,r2,r3
00133c  f24163b8          MOV      r3,#0x16b8
001340  531a              STRH     r2,[r3,r4]
001342  1d1a              ADDS     r2,r3,#4
001344  5913              LDR      r3,[r2,r4]
001346  f1a00210          SUB      r2,r0,#0x10
00134a  4413              ADD      r3,r3,r2
00134c  f24162bc          MOV      r2,#0x16bc
001350  5113              STR      r3,[r2,r4]
001352  e012              B        |L1.4986|
                  |L1.4948|
001354  f24161bc          MOV      r1,#0x16bc
001358  5d09              LDRB     r1,[r1,r4]
00135a  fa05f101          LSL      r1,r5,r1
00135e  f24162b8          MOV      r2,#0x16b8
001362  5b12              LDRH     r2,[r2,r4]
001364  4311              ORRS     r1,r1,r2
001366  b28a              UXTH     r2,r1
001368  f24161b8          MOV      r1,#0x16b8
00136c  530a              STRH     r2,[r1,r4]
00136e  1d09              ADDS     r1,r1,#4
001370  5909              LDR      r1,[r1,r4]
001372  180a              ADDS     r2,r1,r0
001374  f24161bc          MOV      r1,#0x16bc
001378  510a              STR      r2,[r1,r4]
                  |L1.4986|
;;;874    #ifdef DEBUG
;;;875        s->compressed_len = (s->compressed_len + 3 + 7) & (ulg)~7L;
;;;876        s->compressed_len += (stored_len + 4) << 3;
;;;877    #endif
;;;878        copy_block(s, buf, (unsigned)stored_len, 1); /* with header */
00137a  2301              MOVS     r3,#1
00137c  463a              MOV      r2,r7
00137e  4631              MOV      r1,r6
001380  4620              MOV      r0,r4
001382  f7fffffe          BL       copy_block
;;;879    }
001386  e8bd81f0          POP      {r4-r8,pc}
;;;880    
                          ENDP

                  bi_flush PROC
;;;1160    */
;;;1161   local void bi_flush(s)
00138a  f24161bc          MOV      r1,#0x16bc
;;;1162       deflate_state *s;
;;;1163   {
;;;1164       if (s->bi_valid == 16) {
00138e  5809              LDR      r1,[r1,r0]
001390  2910              CMP      r1,#0x10
001392  d117              BNE      |L1.5060|
;;;1165           put_short(s, s->bi_buf);
001394  f24161b8          MOV      r1,#0x16b8
001398  5c0a              LDRB     r2,[r1,r0]
00139a  6943              LDR      r3,[r0,#0x14]
00139c  1c59              ADDS     r1,r3,#1
00139e  6141              STR      r1,[r0,#0x14]
0013a0  6881              LDR      r1,[r0,#8]
0013a2  54ca              STRB     r2,[r1,r3]
0013a4  f24161b8          MOV      r1,#0x16b8
0013a8  5a09              LDRH     r1,[r1,r0]
0013aa  120a              ASRS     r2,r1,#8
0013ac  6943              LDR      r3,[r0,#0x14]
0013ae  1c59              ADDS     r1,r3,#1
0013b0  6141              STR      r1,[r0,#0x14]
0013b2  6881              LDR      r1,[r0,#8]
0013b4  54ca              STRB     r2,[r1,r3]
;;;1166           s->bi_buf = 0;
0013b6  2200              MOVS     r2,#0
0013b8  f24161b8          MOV      r1,#0x16b8
0013bc  520a              STRH     r2,[r1,r0]
;;;1167           s->bi_valid = 0;
0013be  1d09              ADDS     r1,r1,#4
0013c0  500a              STR      r2,[r1,r0]
0013c2  e019              B        |L1.5112|
                  |L1.5060|
;;;1168       } else if (s->bi_valid >= 8) {
0013c4  f24161bc          MOV      r1,#0x16bc
0013c8  5809              LDR      r1,[r1,r0]
0013ca  2908              CMP      r1,#8
0013cc  db14              BLT      |L1.5112|
;;;1169           put_byte(s, (Byte)s->bi_buf);
0013ce  f24161b8          MOV      r1,#0x16b8
0013d2  5c0a              LDRB     r2,[r1,r0]
0013d4  6943              LDR      r3,[r0,#0x14]
0013d6  1c59              ADDS     r1,r3,#1
0013d8  6141              STR      r1,[r0,#0x14]
0013da  6881              LDR      r1,[r0,#8]
0013dc  54ca              STRB     r2,[r1,r3]
;;;1170           s->bi_buf >>= 8;
0013de  f24161b8          MOV      r1,#0x16b8
0013e2  5a09              LDRH     r1,[r1,r0]
0013e4  120a              ASRS     r2,r1,#8
0013e6  f24161b8          MOV      r1,#0x16b8
0013ea  520a              STRH     r2,[r1,r0]
;;;1171           s->bi_valid -= 8;
0013ec  1d09              ADDS     r1,r1,#4
0013ee  5809              LDR      r1,[r1,r0]
0013f0  3908              SUBS     r1,r1,#8
0013f2  f24162bc          MOV      r2,#0x16bc
0013f6  5011              STR      r1,[r2,r0]
                  |L1.5112|
;;;1172       }
;;;1173   }
0013f8  4770              BX       lr
;;;1174   
                          ENDP

                  _tr_align PROC
;;;891     */
;;;892    void _tr_align(s)
0013fa  b570              PUSH     {r4-r6,lr}
;;;893        deflate_state *s;
;;;894    {
0013fc  4604              MOV      r4,r0
;;;895        send_bits(s, STATIC_TREES<<1, 3);
0013fe  2003              MOVS     r0,#3
001400  f24161bc          MOV      r1,#0x16bc
001404  5909              LDR      r1,[r1,r4]
001406  f1c00210          RSB      r2,r0,#0x10
00140a  4291              CMP      r1,r2
00140c  dd2f              BLE      |L1.5230|
00140e  2102              MOVS     r1,#2
001410  f24162b8          MOV      r2,#0x16b8
001414  5b12              LDRH     r2,[r2,r4]
001416  f24163bc          MOV      r3,#0x16bc
00141a  5d1b              LDRB     r3,[r3,r4]
00141c  fa01f303          LSL      r3,r1,r3
001420  431a              ORRS     r2,r2,r3
001422  b293              UXTH     r3,r2
001424  f24162b8          MOV      r2,#0x16b8
001428  5313              STRH     r3,[r2,r4]
00142a  5d13              LDRB     r3,[r2,r4]
00142c  6965              LDR      r5,[r4,#0x14]
00142e  1c6a              ADDS     r2,r5,#1
001430  6162              STR      r2,[r4,#0x14]
001432  68a2              LDR      r2,[r4,#8]
001434  5553              STRB     r3,[r2,r5]
001436  f24162b8          MOV      r2,#0x16b8
00143a  5b12              LDRH     r2,[r2,r4]
00143c  1213              ASRS     r3,r2,#8
00143e  6965              LDR      r5,[r4,#0x14]
001440  1c6a              ADDS     r2,r5,#1
001442  6162              STR      r2,[r4,#0x14]
001444  68a2              LDR      r2,[r4,#8]
001446  5553              STRB     r3,[r2,r5]
001448  f24162bc          MOV      r2,#0x16bc
00144c  5912              LDR      r2,[r2,r4]
00144e  f1c20210          RSB      r2,r2,#0x10
001452  fa41f202          ASR      r2,r1,r2
001456  f24163b8          MOV      r3,#0x16b8
00145a  531a              STRH     r2,[r3,r4]
00145c  1d1a              ADDS     r2,r3,#4
00145e  5913              LDR      r3,[r2,r4]
001460  f1a00210          SUB      r2,r0,#0x10
001464  4413              ADD      r3,r3,r2
001466  f24162bc          MOV      r2,#0x16bc
00146a  5113              STR      r3,[r2,r4]
00146c  e012              B        |L1.5268|
                  |L1.5230|
00146e  f24161b8          MOV      r1,#0x16b8
001472  5b09              LDRH     r1,[r1,r4]
001474  f24162bc          MOV      r2,#0x16bc
001478  5d13              LDRB     r3,[r2,r4]
00147a  2202              MOVS     r2,#2
00147c  409a              LSLS     r2,r2,r3
00147e  4311              ORRS     r1,r1,r2
001480  b28a              UXTH     r2,r1
001482  f24161b8          MOV      r1,#0x16b8
001486  530a              STRH     r2,[r1,r4]
001488  1d09              ADDS     r1,r1,#4
00148a  5909              LDR      r1,[r1,r4]
00148c  180a              ADDS     r2,r1,r0
00148e  f24161bc          MOV      r1,#0x16bc
001492  510a              STR      r2,[r1,r4]
                  |L1.5268|
;;;896        send_code(s, END_BLOCK, static_ltree);
001494  49f8              LDR      r1,|L1.6264|
001496  f8b10402          LDRH     r0,[r1,#0x402]
00149a  f24161bc          MOV      r1,#0x16bc
00149e  5909              LDR      r1,[r1,r4]
0014a0  f1c00210          RSB      r2,r0,#0x10
0014a4  4291              CMP      r1,r2
0014a6  dd31              BLE      |L1.5388|
0014a8  4af3              LDR      r2,|L1.6264|
0014aa  f8b21400          LDRH     r1,[r2,#0x400]  ; static_ltree
0014ae  f24162b8          MOV      r2,#0x16b8
0014b2  5b12              LDRH     r2,[r2,r4]
0014b4  f24163bc          MOV      r3,#0x16bc
0014b8  5d1b              LDRB     r3,[r3,r4]
0014ba  fa01f303          LSL      r3,r1,r3
0014be  431a              ORRS     r2,r2,r3
0014c0  b293              UXTH     r3,r2
0014c2  f24162b8          MOV      r2,#0x16b8
0014c6  5313              STRH     r3,[r2,r4]
0014c8  5d13              LDRB     r3,[r2,r4]
0014ca  6965              LDR      r5,[r4,#0x14]
0014cc  1c6a              ADDS     r2,r5,#1
0014ce  6162              STR      r2,[r4,#0x14]
0014d0  68a2              LDR      r2,[r4,#8]
0014d2  5553              STRB     r3,[r2,r5]
0014d4  f24162b8          MOV      r2,#0x16b8
0014d8  5b12              LDRH     r2,[r2,r4]
0014da  1213              ASRS     r3,r2,#8
0014dc  6965              LDR      r5,[r4,#0x14]
0014de  1c6a              ADDS     r2,r5,#1
0014e0  6162              STR      r2,[r4,#0x14]
0014e2  68a2              LDR      r2,[r4,#8]
0014e4  5553              STRB     r3,[r2,r5]
0014e6  f24162bc          MOV      r2,#0x16bc
0014ea  5912              LDR      r2,[r2,r4]
0014ec  f1c20210          RSB      r2,r2,#0x10
0014f0  fa41f202          ASR      r2,r1,r2
0014f4  f24163b8          MOV      r3,#0x16b8
0014f8  531a              STRH     r2,[r3,r4]
0014fa  1d1a              ADDS     r2,r3,#4
0014fc  5913              LDR      r3,[r2,r4]
0014fe  f1a00210          SUB      r2,r0,#0x10
001502  4413              ADD      r3,r3,r2
001504  f24162bc          MOV      r2,#0x16bc
001508  5113              STR      r3,[r2,r4]
00150a  e014              B        |L1.5430|
                  |L1.5388|
00150c  49da              LDR      r1,|L1.6264|
00150e  f8b11400          LDRH     r1,[r1,#0x400]  ; static_ltree
001512  f24162bc          MOV      r2,#0x16bc
001516  5d12              LDRB     r2,[r2,r4]
001518  4091              LSLS     r1,r1,r2
00151a  f24162b8          MOV      r2,#0x16b8
00151e  5b12              LDRH     r2,[r2,r4]
001520  4311              ORRS     r1,r1,r2
001522  b28a              UXTH     r2,r1
001524  f24161b8          MOV      r1,#0x16b8
001528  530a              STRH     r2,[r1,r4]
00152a  1d09              ADDS     r1,r1,#4
00152c  5909              LDR      r1,[r1,r4]
00152e  180a              ADDS     r2,r1,r0
001530  f24161bc          MOV      r1,#0x16bc
001534  510a              STR      r2,[r1,r4]
                  |L1.5430|
;;;897    #ifdef DEBUG
;;;898        s->compressed_len += 10L; /* 3 for block type, 7 for EOB */
;;;899    #endif
;;;900        bi_flush(s);
001536  4620              MOV      r0,r4
001538  f7fffffe          BL       bi_flush
;;;901        /* Of the 10 bits for the empty block, we have already sent
;;;902         * (10 - bi_valid) bits. The lookahead for the last real code (before
;;;903         * the EOB of the previous block) was thus at least one plus the length
;;;904         * of the EOB plus what we have just sent of the empty static block.
;;;905         */
;;;906        if (1 + s->last_eob_len + 10 - s->bi_valid < 9) {
00153c  f24160b4          MOV      r0,#0x16b4
001540  5900              LDR      r0,[r0,r4]
001542  300b              ADDS     r0,r0,#0xb
001544  f24161bc          MOV      r1,#0x16bc
001548  5909              LDR      r1,[r1,r4]
00154a  1a40              SUBS     r0,r0,r1
00154c  2809              CMP      r0,#9
00154e  da7d              BGE      |L1.5708|
;;;907            send_bits(s, STATIC_TREES<<1, 3);
001550  2003              MOVS     r0,#3
001552  f24161bc          MOV      r1,#0x16bc
001556  5909              LDR      r1,[r1,r4]
001558  f1c00210          RSB      r2,r0,#0x10
00155c  4291              CMP      r1,r2
00155e  dd2f              BLE      |L1.5568|
001560  2102              MOVS     r1,#2
001562  f24162b8          MOV      r2,#0x16b8
001566  5b12              LDRH     r2,[r2,r4]
001568  f24163bc          MOV      r3,#0x16bc
00156c  5d1b              LDRB     r3,[r3,r4]
00156e  fa01f303          LSL      r3,r1,r3
001572  431a              ORRS     r2,r2,r3
001574  b293              UXTH     r3,r2
001576  f24162b8          MOV      r2,#0x16b8
00157a  5313              STRH     r3,[r2,r4]
00157c  5d13              LDRB     r3,[r2,r4]
00157e  6965              LDR      r5,[r4,#0x14]
001580  1c6a              ADDS     r2,r5,#1
001582  6162              STR      r2,[r4,#0x14]
001584  68a2              LDR      r2,[r4,#8]
001586  5553              STRB     r3,[r2,r5]
001588  f24162b8          MOV      r2,#0x16b8
00158c  5b12              LDRH     r2,[r2,r4]
00158e  1213              ASRS     r3,r2,#8
001590  6965              LDR      r5,[r4,#0x14]
001592  1c6a              ADDS     r2,r5,#1
001594  6162              STR      r2,[r4,#0x14]
001596  68a2              LDR      r2,[r4,#8]
001598  5553              STRB     r3,[r2,r5]
00159a  f24162bc          MOV      r2,#0x16bc
00159e  5912              LDR      r2,[r2,r4]
0015a0  f1c20210          RSB      r2,r2,#0x10
0015a4  fa41f202          ASR      r2,r1,r2
0015a8  f24163b8          MOV      r3,#0x16b8
0015ac  531a              STRH     r2,[r3,r4]
0015ae  1d1a              ADDS     r2,r3,#4
0015b0  5913              LDR      r3,[r2,r4]
0015b2  f1a00210          SUB      r2,r0,#0x10
0015b6  4413              ADD      r3,r3,r2
0015b8  f24162bc          MOV      r2,#0x16bc
0015bc  5113              STR      r3,[r2,r4]
0015be  e012              B        |L1.5606|
                  |L1.5568|
0015c0  f24161b8          MOV      r1,#0x16b8
0015c4  5b09              LDRH     r1,[r1,r4]
0015c6  f24162bc          MOV      r2,#0x16bc
0015ca  5d13              LDRB     r3,[r2,r4]
0015cc  2202              MOVS     r2,#2
0015ce  409a              LSLS     r2,r2,r3
0015d0  4311              ORRS     r1,r1,r2
0015d2  b28a              UXTH     r2,r1
0015d4  f24161b8          MOV      r1,#0x16b8
0015d8  530a              STRH     r2,[r1,r4]
0015da  1d09              ADDS     r1,r1,#4
0015dc  5909              LDR      r1,[r1,r4]
0015de  180a              ADDS     r2,r1,r0
0015e0  f24161bc          MOV      r1,#0x16bc
0015e4  510a              STR      r2,[r1,r4]
                  |L1.5606|
;;;908            send_code(s, END_BLOCK, static_ltree);
0015e6  49a4              LDR      r1,|L1.6264|
0015e8  f8b10402          LDRH     r0,[r1,#0x402]
0015ec  f24161bc          MOV      r1,#0x16bc
0015f0  5909              LDR      r1,[r1,r4]
0015f2  f1c00210          RSB      r2,r0,#0x10
0015f6  4291              CMP      r1,r2
0015f8  dd33              BLE      |L1.5730|
0015fa  4a9f              LDR      r2,|L1.6264|
0015fc  f8b21400          LDRH     r1,[r2,#0x400]  ; static_ltree
001600  f24162b8          MOV      r2,#0x16b8
001604  5b12              LDRH     r2,[r2,r4]
001606  f24163bc          MOV      r3,#0x16bc
00160a  5d1b              LDRB     r3,[r3,r4]
00160c  fa01f303          LSL      r3,r1,r3
001610  431a              ORRS     r2,r2,r3
001612  b293              UXTH     r3,r2
001614  f24162b8          MOV      r2,#0x16b8
001618  5313              STRH     r3,[r2,r4]
00161a  5d13              LDRB     r3,[r2,r4]
00161c  6965              LDR      r5,[r4,#0x14]
00161e  1c6a              ADDS     r2,r5,#1
001620  6162              STR      r2,[r4,#0x14]
001622  68a2              LDR      r2,[r4,#8]
001624  5553              STRB     r3,[r2,r5]
001626  f24162b8          MOV      r2,#0x16b8
00162a  5b12              LDRH     r2,[r2,r4]
00162c  1213              ASRS     r3,r2,#8
00162e  6965              LDR      r5,[r4,#0x14]
001630  1c6a              ADDS     r2,r5,#1
001632  6162              STR      r2,[r4,#0x14]
001634  68a2              LDR      r2,[r4,#8]
001636  5553              STRB     r3,[r2,r5]
001638  f24162bc          MOV      r2,#0x16bc
00163c  5912              LDR      r2,[r2,r4]
00163e  f1c20210          RSB      r2,r2,#0x10
001642  fa41f202          ASR      r2,r1,r2
001646  f24163b8          MOV      r3,#0x16b8
00164a  e000              B        |L1.5710|
                  |L1.5708|
00164c  e021              B        |L1.5778|
                  |L1.5710|
00164e  531a              STRH     r2,[r3,r4]
001650  1d1a              ADDS     r2,r3,#4
001652  5913              LDR      r3,[r2,r4]
001654  f1a00210          SUB      r2,r0,#0x10
001658  4413              ADD      r3,r3,r2
00165a  f24162bc          MOV      r2,#0x16bc
00165e  5113              STR      r3,[r2,r4]
001660  e014              B        |L1.5772|
                  |L1.5730|
001662  4985              LDR      r1,|L1.6264|
001664  f8b11400          LDRH     r1,[r1,#0x400]  ; static_ltree
001668  f24162bc          MOV      r2,#0x16bc
00166c  5d12              LDRB     r2,[r2,r4]
00166e  4091              LSLS     r1,r1,r2
001670  f24162b8          MOV      r2,#0x16b8
001674  5b12              LDRH     r2,[r2,r4]
001676  4311              ORRS     r1,r1,r2
001678  b28a              UXTH     r2,r1
00167a  f24161b8          MOV      r1,#0x16b8
00167e  530a              STRH     r2,[r1,r4]
001680  1d09              ADDS     r1,r1,#4
001682  5909              LDR      r1,[r1,r4]
001684  180a              ADDS     r2,r1,r0
001686  f24161bc          MOV      r1,#0x16bc
00168a  510a              STR      r2,[r1,r4]
                  |L1.5772|
;;;909    #ifdef DEBUG
;;;910            s->compressed_len += 10L;
;;;911    #endif
;;;912            bi_flush(s);
00168c  4620              MOV      r0,r4
00168e  f7fffffe          BL       bi_flush
                  |L1.5778|
;;;913        }
;;;914        s->last_eob_len = 7;
001692  2107              MOVS     r1,#7
001694  f24160b4          MOV      r0,#0x16b4
001698  5101              STR      r1,[r0,r4]
;;;915    }
00169a  bd70              POP      {r4-r6,pc}
;;;916    
                          ENDP

                  compress_block PROC
;;;1071    */
;;;1072   local void compress_block(s, ltree, dtree)
00169c  e92d4ff0          PUSH     {r4-r11,lr}
;;;1073       deflate_state *s;
;;;1074       ct_data *ltree; /* literal tree */
;;;1075       ct_data *dtree; /* distance tree */
;;;1076   {
0016a0  4616              MOV      r6,r2
;;;1077       unsigned dist;      /* distance of matched string */
;;;1078       int lc;             /* match length or unmatched char (if dist == 0) */
;;;1079       unsigned lx = 0;    /* running index in l_buf */
0016a2  2700              MOVS     r7,#0
;;;1080       unsigned code;      /* the code to send */
;;;1081       int extra;          /* number of extra bits to send */
;;;1082   
;;;1083       if (s->last_lit != 0) do {
0016a4  f44f5cb5          MOV      r12,#0x16a0
0016a8  f85cc000          LDR      r12,[r12,r0]
0016ac  f1bc0f00          CMP      r12,#0
0016b0  d07d              BEQ      |L1.6062|
0016b2  bf00              NOP      
                  |L1.5812|
;;;1084           dist = s->d_buf[lx];
0016b4  f2416ca4          MOV      r12,#0x16a4
0016b8  f85cc000          LDR      r12,[r12,r0]
0016bc  f83c2017          LDRH     r2,[r12,r7,LSL #1]
;;;1085           lc = s->l_buf[lx++];
0016c0  f2416c98          MOV      r12,#0x1698
0016c4  f85c9000          LDR      r9,[r12,r0]
0016c8  46bc              MOV      r12,r7
0016ca  1c7f              ADDS     r7,r7,#1
0016cc  f819400c          LDRB     r4,[r9,r12]
;;;1086           if (dist == 0) {
0016d0  2a00              CMP      r2,#0
0016d2  d175              BNE      |L1.6080|
;;;1087               send_code(s, lc, ltree); /* send a literal byte */
0016d4  eb010884          ADD      r8,r1,r4,LSL #2
0016d8  f8b8c002          LDRH     r12,[r8,#2]
0016dc  f24168bc          MOV      r8,#0x16bc
0016e0  f8588000          LDR      r8,[r8,r0]
0016e4  f1cc0910          RSB      r9,r12,#0x10
0016e8  45c8              CMP      r8,r9
0016ea  dd47              BLE      |L1.6012|
0016ec  f8318024          LDRH     r8,[r1,r4,LSL #2]
0016f0  f24169b8          MOV      r9,#0x16b8
0016f4  f8399000          LDRH     r9,[r9,r0]
0016f8  f2416abc          MOV      r10,#0x16bc
0016fc  f81aa000          LDRB     r10,[r10,r0]
001700  fa08fa0a          LSL      r10,r8,r10
001704  ea49090a          ORR      r9,r9,r10
001708  fa1ffa89          UXTH     r10,r9
00170c  f24169b8          MOV      r9,#0x16b8
001710  f829a000          STRH     r10,[r9,r0]
001714  f819a000          LDRB     r10,[r9,r0]
001718  f8d0b014          LDR      r11,[r0,#0x14]
00171c  f10b0901          ADD      r9,r11,#1
001720  f8c09014          STR      r9,[r0,#0x14]
001724  f8d09008          LDR      r9,[r0,#8]
001728  f809a00b          STRB     r10,[r9,r11]
00172c  f24169b8          MOV      r9,#0x16b8
001730  f8399000          LDRH     r9,[r9,r0]
001734  ea4f2a29          ASR      r10,r9,#8
001738  f8d0b014          LDR      r11,[r0,#0x14]
00173c  f10b0901          ADD      r9,r11,#1
001740  f8c09014          STR      r9,[r0,#0x14]
001744  f8d09008          LDR      r9,[r0,#8]
001748  f809a00b          STRB     r10,[r9,r11]
00174c  f24169bc          MOV      r9,#0x16bc
001750  f8599000          LDR      r9,[r9,r0]
001754  f1c90910          RSB      r9,r9,#0x10
001758  fa48f909          ASR      r9,r8,r9
00175c  f2416ab8          MOV      r10,#0x16b8
001760  f82a9000          STRH     r9,[r10,r0]
001764  f24169bc          MOV      r9,#0x16bc
001768  f859a000          LDR      r10,[r9,r0]
00176c  f1ac0910          SUB      r9,r12,#0x10
001770  44ca              ADD      r10,r10,r9
001772  f24169bc          MOV      r9,#0x16bc
001776  f849a000          STR      r10,[r9,r0]
00177a  e020              B        |L1.6078|
                  |L1.6012|
00177c  f8318024          LDRH     r8,[r1,r4,LSL #2]
001780  f24169bc          MOV      r9,#0x16bc
001784  f8199000          LDRB     r9,[r9,r0]
001788  fa08f809          LSL      r8,r8,r9
00178c  f24169b8          MOV      r9,#0x16b8
001790  f8399000          LDRH     r9,[r9,r0]
001794  ea480809          ORR      r8,r8,r9
001798  fa1ff988          UXTH     r9,r8
00179c  f24168b8          MOV      r8,#0x16b8
0017a0  f8289000          STRH     r9,[r8,r0]
0017a4  f24168bc          MOV      r8,#0x16bc
0017a8  f8588000          LDR      r8,[r8,r0]
0017ac  e001              B        |L1.6066|
                  |L1.6062|
0017ae  e207              B        |L1.7104|
0017b0  e006              B        |L1.6080|
                  |L1.6066|
0017b2  eb08090c          ADD      r9,r8,r12
0017b6  f24168bc          MOV      r8,#0x16bc
0017ba  f8489000          STR      r9,[r8,r0]
                  |L1.6078|
0017be  e1f8              B        |L1.7090|
                  |L1.6080|
;;;1088               Tracecv(isgraph(lc), (stderr," '%c' ", lc));
;;;1089           } else {
;;;1090               /* Here, lc is the match length - MIN_MATCH */
;;;1091               code = _length_code[lc];
0017c0  f8dfc0b8          LDR      r12,|L1.6268|
0017c4  f81c3004          LDRB     r3,[r12,r4]
;;;1092               send_code(s, code+LITERALS+1, ltree); /* send the length code */
0017c8  f2031801          ADD      r8,r3,#0x101
0017cc  eb010888          ADD      r8,r1,r8,LSL #2
0017d0  f8b8c002          LDRH     r12,[r8,#2]
0017d4  f24168bc          MOV      r8,#0x16bc
0017d8  f8588000          LDR      r8,[r8,r0]
0017dc  f1cc0910          RSB      r9,r12,#0x10
0017e0  45c8              CMP      r8,r9
0017e2  dd4d              BLE      |L1.6272|
0017e4  f2031901          ADD      r9,r3,#0x101
0017e8  f8318029          LDRH     r8,[r1,r9,LSL #2]
0017ec  f24169b8          MOV      r9,#0x16b8
0017f0  f8399000          LDRH     r9,[r9,r0]
0017f4  f2416abc          MOV      r10,#0x16bc
0017f8  f81aa000          LDRB     r10,[r10,r0]
0017fc  fa08fa0a          LSL      r10,r8,r10
001800  ea49090a          ORR      r9,r9,r10
001804  fa1ffa89          UXTH     r10,r9
001808  f24169b8          MOV      r9,#0x16b8
00180c  f829a000          STRH     r10,[r9,r0]
001810  f819a000          LDRB     r10,[r9,r0]
001814  f8d0b014          LDR      r11,[r0,#0x14]
001818  f10b0901          ADD      r9,r11,#1
00181c  f8c09014          STR      r9,[r0,#0x14]
001820  f8d09008          LDR      r9,[r0,#8]
001824  f809a00b          STRB     r10,[r9,r11]
001828  f24169b8          MOV      r9,#0x16b8
00182c  f8399000          LDRH     r9,[r9,r0]
001830  ea4f2a29          ASR      r10,r9,#8
001834  f8d0b014          LDR      r11,[r0,#0x14]
001838  f10b0901          ADD      r9,r11,#1
00183c  f8c09014          STR      r9,[r0,#0x14]
001840  f8d09008          LDR      r9,[r0,#8]
001844  f809a00b          STRB     r10,[r9,r11]
001848  f24169bc          MOV      r9,#0x16bc
00184c  f8599000          LDR      r9,[r9,r0]
001850  f1c90910          RSB      r9,r9,#0x10
001854  fa48f909          ASR      r9,r8,r9
001858  f2416ab8          MOV      r10,#0x16b8
00185c  f82a9000          STRH     r9,[r10,r0]
001860  f24169bc          MOV      r9,#0x16bc
001864  f859a000          LDR      r10,[r9,r0]
001868  f1ac0910          SUB      r9,r12,#0x10
00186c  44ca              ADD      r10,r10,r9
00186e  f24169bc          MOV      r9,#0x16bc
001872  f849a000          STR      r10,[r9,r0]
001876  e023              B        |L1.6336|
                  |L1.6264|
                          DCD      static_ltree
                  |L1.6268|
                          DCD      _length_code
                  |L1.6272|
001880  f2031801          ADD      r8,r3,#0x101
001884  f8318028          LDRH     r8,[r1,r8,LSL #2]
001888  f24169bc          MOV      r9,#0x16bc
00188c  f8199000          LDRB     r9,[r9,r0]
001890  fa08f809          LSL      r8,r8,r9
001894  f24169b8          MOV      r9,#0x16b8
001898  f8399000          LDRH     r9,[r9,r0]
00189c  ea480809          ORR      r8,r8,r9
0018a0  fa1ff988          UXTH     r9,r8
0018a4  f24168b8          MOV      r8,#0x16b8
0018a8  f8289000          STRH     r9,[r8,r0]
0018ac  f24168bc          MOV      r8,#0x16bc
0018b0  f8588000          LDR      r8,[r8,r0]
0018b4  eb08090c          ADD      r9,r8,r12
0018b8  f24168bc          MOV      r8,#0x16bc
0018bc  f8489000          STR      r9,[r8,r0]
                  |L1.6336|
;;;1093               extra = extra_lbits[code];
0018c0  f8dfc718          LDR      r12,|L1.8156|
0018c4  f85c5023          LDR      r5,[r12,r3,LSL #2]
;;;1094               if (extra != 0) {
0018c8  2d00              CMP      r5,#0
0018ca  d074              BEQ      |L1.6582|
;;;1095                   lc -= base_length[code];
0018cc  f8dfc710          LDR      r12,|L1.8160|
0018d0  f85cc023          LDR      r12,[r12,r3,LSL #2]
0018d4  eba4040c          SUB      r4,r4,r12
;;;1096                   send_bits(s, lc, extra);       /* send the extra length bits */
0018d8  46ac              MOV      r12,r5
0018da  f24168bc          MOV      r8,#0x16bc
0018de  f8588000          LDR      r8,[r8,r0]
0018e2  f1cc0910          RSB      r9,r12,#0x10
0018e6  45c8              CMP      r8,r9
0018e8  dd48              BLE      |L1.6524|
0018ea  46a0              MOV      r8,r4
0018ec  f24169b8          MOV      r9,#0x16b8
0018f0  f8399000          LDRH     r9,[r9,r0]
0018f4  f2416abc          MOV      r10,#0x16bc
0018f8  f81aa000          LDRB     r10,[r10,r0]
0018fc  fa08fa0a          LSL      r10,r8,r10
001900  ea49090a          ORR      r9,r9,r10
001904  fa1ffa89          UXTH     r10,r9
001908  f24169b8          MOV      r9,#0x16b8
00190c  f829a000          STRH     r10,[r9,r0]
001910  f819a000          LDRB     r10,[r9,r0]
001914  f8d0b014          LDR      r11,[r0,#0x14]
001918  f10b0901          ADD      r9,r11,#1
00191c  f8c09014          STR      r9,[r0,#0x14]
001920  f8d09008          LDR      r9,[r0,#8]
001924  f809a00b          STRB     r10,[r9,r11]
001928  f24169b8          MOV      r9,#0x16b8
00192c  f8399000          LDRH     r9,[r9,r0]
001930  ea4f2a29          ASR      r10,r9,#8
001934  f8d0b014          LDR      r11,[r0,#0x14]
001938  f10b0901          ADD      r9,r11,#1
00193c  f8c09014          STR      r9,[r0,#0x14]
001940  f8d09008          LDR      r9,[r0,#8]
001944  f809a00b          STRB     r10,[r9,r11]
001948  fa1ff988          UXTH     r9,r8
00194c  f2416abc          MOV      r10,#0x16bc
001950  f85aa000          LDR      r10,[r10,r0]
001954  f1ca0a10          RSB      r10,r10,#0x10
001958  fa49f90a          ASR      r9,r9,r10
00195c  f2416ab8          MOV      r10,#0x16b8
001960  f82a9000          STRH     r9,[r10,r0]
001964  f24169bc          MOV      r9,#0x16bc
001968  f859a000          LDR      r10,[r9,r0]
00196c  f1ac0910          SUB      r9,r12,#0x10
001970  44ca              ADD      r10,r10,r9
001972  f24169bc          MOV      r9,#0x16bc
001976  f849a000          STR      r10,[r9,r0]
00197a  e01b              B        |L1.6580|
                  |L1.6524|
00197c  f24168b8          MOV      r8,#0x16b8
001980  f8388000          LDRH     r8,[r8,r0]
001984  f24169bc          MOV      r9,#0x16bc
001988  f8199000          LDRB     r9,[r9,r0]
00198c  fa04f909          LSL      r9,r4,r9
001990  ea480809          ORR      r8,r8,r9
001994  fa1ff988          UXTH     r9,r8
001998  f24168b8          MOV      r8,#0x16b8
00199c  f8289000          STRH     r9,[r8,r0]
0019a0  f24168bc          MOV      r8,#0x16bc
0019a4  f8588000          LDR      r8,[r8,r0]
0019a8  eb08090c          ADD      r9,r8,r12
0019ac  f24168bc          MOV      r8,#0x16bc
0019b0  f8489000          STR      r9,[r8,r0]
                  |L1.6580|
0019b4  bf00              NOP      
                  |L1.6582|
;;;1097               }
;;;1098               dist--; /* dist is now the match distance - 1 */
0019b6  1e52              SUBS     r2,r2,#1
;;;1099               code = d_code(dist);
0019b8  2aff              CMP      r2,#0xff
0019ba  d804              BHI      |L1.6598|
0019bc  f8dfc624          LDR      r12,|L1.8164|
0019c0  f81cc002          LDRB     r12,[r12,r2]
0019c4  e007              B        |L1.6614|
                  |L1.6598|
0019c6  f44f7c80          MOV      r12,#0x100
0019ca  eb0c1cd2          ADD      r12,r12,r2,LSR #7
0019ce  f8df8614          LDR      r8,|L1.8164|
0019d2  f818c00c          LDRB     r12,[r8,r12]
                  |L1.6614|
0019d6  4663              MOV      r3,r12
;;;1100               Assert (code < D_CODES, "bad d_code");
;;;1101   
;;;1102               send_code(s, code, dtree);       /* send the distance code */
0019d8  eb060883          ADD      r8,r6,r3,LSL #2
0019dc  f8b8c002          LDRH     r12,[r8,#2]
0019e0  f24168bc          MOV      r8,#0x16bc
0019e4  f8588000          LDR      r8,[r8,r0]
0019e8  f1cc0910          RSB      r9,r12,#0x10
0019ec  45c8              CMP      r8,r9
0019ee  dd47              BLE      |L1.6784|
0019f0  f8368023          LDRH     r8,[r6,r3,LSL #2]
0019f4  f24169b8          MOV      r9,#0x16b8
0019f8  f8399000          LDRH     r9,[r9,r0]
0019fc  f2416abc          MOV      r10,#0x16bc
001a00  f81aa000          LDRB     r10,[r10,r0]
001a04  fa08fa0a          LSL      r10,r8,r10
001a08  ea49090a          ORR      r9,r9,r10
001a0c  fa1ffa89          UXTH     r10,r9
001a10  f24169b8          MOV      r9,#0x16b8
001a14  f829a000          STRH     r10,[r9,r0]
001a18  f819a000          LDRB     r10,[r9,r0]
001a1c  f8d0b014          LDR      r11,[r0,#0x14]
001a20  f10b0901          ADD      r9,r11,#1
001a24  f8c09014          STR      r9,[r0,#0x14]
001a28  f8d09008          LDR      r9,[r0,#8]
001a2c  f809a00b          STRB     r10,[r9,r11]
001a30  f24169b8          MOV      r9,#0x16b8
001a34  f8399000          LDRH     r9,[r9,r0]
001a38  ea4f2a29          ASR      r10,r9,#8
001a3c  f8d0b014          LDR      r11,[r0,#0x14]
001a40  f10b0901          ADD      r9,r11,#1
001a44  f8c09014          STR      r9,[r0,#0x14]
001a48  f8d09008          LDR      r9,[r0,#8]
001a4c  f809a00b          STRB     r10,[r9,r11]
001a50  f24169bc          MOV      r9,#0x16bc
001a54  f8599000          LDR      r9,[r9,r0]
001a58  f1c90910          RSB      r9,r9,#0x10
001a5c  fa48f909          ASR      r9,r8,r9
001a60  f2416ab8          MOV      r10,#0x16b8
001a64  f82a9000          STRH     r9,[r10,r0]
001a68  f24169bc          MOV      r9,#0x16bc
001a6c  f859a000          LDR      r10,[r9,r0]
001a70  f1ac0910          SUB      r9,r12,#0x10
001a74  44ca              ADD      r10,r10,r9
001a76  f24169bc          MOV      r9,#0x16bc
001a7a  f849a000          STR      r10,[r9,r0]
001a7e  e01d              B        |L1.6844|
                  |L1.6784|
001a80  f8368023          LDRH     r8,[r6,r3,LSL #2]
001a84  f24169bc          MOV      r9,#0x16bc
001a88  f8199000          LDRB     r9,[r9,r0]
001a8c  fa08f809          LSL      r8,r8,r9
001a90  f24169b8          MOV      r9,#0x16b8
001a94  f8399000          LDRH     r9,[r9,r0]
001a98  ea480809          ORR      r8,r8,r9
001a9c  fa1ff988          UXTH     r9,r8
001aa0  f24168b8          MOV      r8,#0x16b8
001aa4  f8289000          STRH     r9,[r8,r0]
001aa8  f24168bc          MOV      r8,#0x16bc
001aac  f8588000          LDR      r8,[r8,r0]
001ab0  eb08090c          ADD      r9,r8,r12
001ab4  f24168bc          MOV      r8,#0x16bc
001ab8  f8489000          STR      r9,[r8,r0]
                  |L1.6844|
;;;1103               extra = extra_dbits[code];
001abc  f8dfc528          LDR      r12,|L1.8168|
001ac0  f85c5023          LDR      r5,[r12,r3,LSL #2]
;;;1104               if (extra != 0) {
001ac4  2d00              CMP      r5,#0
001ac6  d074              BEQ      |L1.7090|
;;;1105                   dist -= base_dist[code];
001ac8  f8dfc520          LDR      r12,|L1.8172|
001acc  f85cc023          LDR      r12,[r12,r3,LSL #2]
001ad0  eba2020c          SUB      r2,r2,r12
;;;1106                   send_bits(s, dist, extra);   /* send the extra distance bits */
001ad4  46ac              MOV      r12,r5
001ad6  f24168bc          MOV      r8,#0x16bc
001ada  f8588000          LDR      r8,[r8,r0]
001ade  f1cc0910          RSB      r9,r12,#0x10
001ae2  45c8              CMP      r8,r9
001ae4  dd48              BLE      |L1.7032|
001ae6  4690              MOV      r8,r2
001ae8  f24169b8          MOV      r9,#0x16b8
001aec  f8399000          LDRH     r9,[r9,r0]
001af0  f2416abc          MOV      r10,#0x16bc
001af4  f81aa000          LDRB     r10,[r10,r0]
001af8  fa08fa0a          LSL      r10,r8,r10
001afc  ea49090a          ORR      r9,r9,r10
001b00  fa1ffa89          UXTH     r10,r9
001b04  f24169b8          MOV      r9,#0x16b8
001b08  f829a000          STRH     r10,[r9,r0]
001b0c  f819a000          LDRB     r10,[r9,r0]
001b10  f8d0b014          LDR      r11,[r0,#0x14]
001b14  f10b0901          ADD      r9,r11,#1
001b18  f8c09014          STR      r9,[r0,#0x14]
001b1c  f8d09008          LDR      r9,[r0,#8]
001b20  f809a00b          STRB     r10,[r9,r11]
001b24  f24169b8          MOV      r9,#0x16b8
001b28  f8399000          LDRH     r9,[r9,r0]
001b2c  ea4f2a29          ASR      r10,r9,#8
001b30  f8d0b014          LDR      r11,[r0,#0x14]
001b34  f10b0901          ADD      r9,r11,#1
001b38  f8c09014          STR      r9,[r0,#0x14]
001b3c  f8d09008          LDR      r9,[r0,#8]
001b40  f809a00b          STRB     r10,[r9,r11]
001b44  fa1ff988          UXTH     r9,r8
001b48  f2416abc          MOV      r10,#0x16bc
001b4c  f85aa000          LDR      r10,[r10,r0]
001b50  f1ca0a10          RSB      r10,r10,#0x10
001b54  fa49f90a          ASR      r9,r9,r10
001b58  f2416ab8          MOV      r10,#0x16b8
001b5c  f82a9000          STRH     r9,[r10,r0]
001b60  f24169bc          MOV      r9,#0x16bc
001b64  f859a000          LDR      r10,[r9,r0]
001b68  f1ac0910          SUB      r9,r12,#0x10
001b6c  44ca              ADD      r10,r10,r9
001b6e  f24169bc          MOV      r9,#0x16bc
001b72  f849a000          STR      r10,[r9,r0]
001b76  e01b              B        |L1.7088|
                  |L1.7032|
001b78  f24168b8          MOV      r8,#0x16b8
001b7c  f8388000          LDRH     r8,[r8,r0]
001b80  f24169bc          MOV      r9,#0x16bc
001b84  f8199000          LDRB     r9,[r9,r0]
001b88  fa02f909          LSL      r9,r2,r9
001b8c  ea480809          ORR      r8,r8,r9
001b90  fa1ff988          UXTH     r9,r8
001b94  f24168b8          MOV      r8,#0x16b8
001b98  f8289000          STRH     r9,[r8,r0]
001b9c  f24168bc          MOV      r8,#0x16bc
001ba0  f8588000          LDR      r8,[r8,r0]
001ba4  eb08090c          ADD      r9,r8,r12
001ba8  f24168bc          MOV      r8,#0x16bc
001bac  f8489000          STR      r9,[r8,r0]
                  |L1.7088|
001bb0  bf00              NOP      
                  |L1.7090|
;;;1107               }
;;;1108           } /* literal or match pair ? */
;;;1109   
;;;1110           /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */
;;;1111           Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,
;;;1112                  "pendingBuf overflow");
;;;1113   
;;;1114       } while (lx < s->last_lit);
001bb2  f44f5cb5          MOV      r12,#0x16a0
001bb6  f85cc000          LDR      r12,[r12,r0]
001bba  45bc              CMP      r12,r7
001bbc  f63fad7a          BHI      |L1.5812|
                  |L1.7104|
;;;1115   
;;;1116       send_code(s, END_BLOCK, ltree);
001bc0  f8b1c402          LDRH     r12,[r1,#0x402]
001bc4  f24168bc          MOV      r8,#0x16bc
001bc8  f8588000          LDR      r8,[r8,r0]
001bcc  f1cc0910          RSB      r9,r12,#0x10
001bd0  45c8              CMP      r8,r9
001bd2  dd47              BLE      |L1.7268|
001bd4  f8b18400          LDRH     r8,[r1,#0x400]
001bd8  f24169b8          MOV      r9,#0x16b8
001bdc  f8399000          LDRH     r9,[r9,r0]
001be0  f2416abc          MOV      r10,#0x16bc
001be4  f81aa000          LDRB     r10,[r10,r0]
001be8  fa08fa0a          LSL      r10,r8,r10
001bec  ea49090a          ORR      r9,r9,r10
001bf0  fa1ffa89          UXTH     r10,r9
001bf4  f24169b8          MOV      r9,#0x16b8
001bf8  f829a000          STRH     r10,[r9,r0]
001bfc  f819a000          LDRB     r10,[r9,r0]
001c00  f8d0b014          LDR      r11,[r0,#0x14]
001c04  f10b0901          ADD      r9,r11,#1
001c08  f8c09014          STR      r9,[r0,#0x14]
001c0c  f8d09008          LDR      r9,[r0,#8]
001c10  f809a00b          STRB     r10,[r9,r11]
001c14  f24169b8          MOV      r9,#0x16b8
001c18  f8399000          LDRH     r9,[r9,r0]
001c1c  ea4f2a29          ASR      r10,r9,#8
001c20  f8d0b014          LDR      r11,[r0,#0x14]
001c24  f10b0901          ADD      r9,r11,#1
001c28  f8c09014          STR      r9,[r0,#0x14]
001c2c  f8d09008          LDR      r9,[r0,#8]
001c30  f809a00b          STRB     r10,[r9,r11]
001c34  f24169bc          MOV      r9,#0x16bc
001c38  f8599000          LDR      r9,[r9,r0]
001c3c  f1c90910          RSB      r9,r9,#0x10
001c40  fa48f909          ASR      r9,r8,r9
001c44  f2416ab8          MOV      r10,#0x16b8
001c48  f82a9000          STRH     r9,[r10,r0]
001c4c  f24169bc          MOV      r9,#0x16bc
001c50  f859a000          LDR      r10,[r9,r0]
001c54  f1ac0910          SUB      r9,r12,#0x10
001c58  44ca              ADD      r10,r10,r9
001c5a  f24169bc          MOV      r9,#0x16bc
001c5e  f849a000          STR      r10,[r9,r0]
001c62  e01d              B        |L1.7328|
                  |L1.7268|
001c64  f8b18400          LDRH     r8,[r1,#0x400]
001c68  f24169bc          MOV      r9,#0x16bc
001c6c  f8199000          LDRB     r9,[r9,r0]
001c70  fa08f809          LSL      r8,r8,r9
001c74  f24169b8          MOV      r9,#0x16b8
001c78  f8399000          LDRH     r9,[r9,r0]
001c7c  ea480809          ORR      r8,r8,r9
001c80  fa1ff988          UXTH     r9,r8
001c84  f24168b8          MOV      r8,#0x16b8
001c88  f8289000          STRH     r9,[r8,r0]
001c8c  f24168bc          MOV      r8,#0x16bc
001c90  f8588000          LDR      r8,[r8,r0]
001c94  eb08090c          ADD      r9,r8,r12
001c98  f24168bc          MOV      r8,#0x16bc
001c9c  f8489000          STR      r9,[r8,r0]
                  |L1.7328|
;;;1117       s->last_eob_len = ltree[END_BLOCK].Len;
001ca0  f8b18402          LDRH     r8,[r1,#0x402]
001ca4  f2416cb4          MOV      r12,#0x16b4
001ca8  f84c8000          STR      r8,[r12,r0]
;;;1118   }
001cac  e8bd8ff0          POP      {r4-r11,pc}
;;;1119   
                          ENDP

                  set_data_type PROC
;;;1125    */
;;;1126   local void set_data_type(s)
001cb0  4601              MOV      r1,r0
;;;1127       deflate_state *s;
;;;1128   {
;;;1129       int n;
;;;1130   
;;;1131       for (n = 0; n < 9; n++)
001cb2  2000              MOVS     r0,#0
001cb4  e006              B        |L1.7364|
                  |L1.7350|
;;;1132           if (s->dyn_ltree[n].Freq != 0)
001cb6  f1010294          ADD      r2,r1,#0x94
001cba  f8322020          LDRH     r2,[r2,r0,LSL #2]
001cbe  b102              CBZ      r2,|L1.7362|
;;;1133               break;
001cc0  e002              B        |L1.7368|
                  |L1.7362|
001cc2  1c40              ADDS     r0,r0,#1              ;1131
                  |L1.7364|
001cc4  2809              CMP      r0,#9                 ;1131
001cc6  dbf6              BLT      |L1.7350|
                  |L1.7368|
001cc8  bf00              NOP      
;;;1134       if (n == 9)
001cca  2809              CMP      r0,#9
001ccc  d10b              BNE      |L1.7398|
;;;1135           for (n = 14; n < 32; n++)
001cce  200e              MOVS     r0,#0xe
001cd0  e006              B        |L1.7392|
                  |L1.7378|
;;;1136               if (s->dyn_ltree[n].Freq != 0)
001cd2  f1010294          ADD      r2,r1,#0x94
001cd6  f8322020          LDRH     r2,[r2,r0,LSL #2]
001cda  b102              CBZ      r2,|L1.7390|
;;;1137                   break;
001cdc  e002              B        |L1.7396|
                  |L1.7390|
001cde  1c40              ADDS     r0,r0,#1              ;1135
                  |L1.7392|
001ce0  2820              CMP      r0,#0x20              ;1135
001ce2  dbf6              BLT      |L1.7378|
                  |L1.7396|
001ce4  bf00              NOP      
                  |L1.7398|
;;;1138       s->strm->data_type = (n == 32) ? Z_TEXT : Z_BINARY;
001ce6  2820              CMP      r0,#0x20
001ce8  d101              BNE      |L1.7406|
001cea  2201              MOVS     r2,#1
001cec  e000              B        |L1.7408|
                  |L1.7406|
001cee  2200              MOVS     r2,#0
                  |L1.7408|
001cf0  680b              LDR      r3,[r1,#0]
001cf2  62da              STR      r2,[r3,#0x2c]
;;;1139   }
001cf4  4770              BX       lr
;;;1140   
                          ENDP

                  _tr_flush_block PROC
;;;920     */
;;;921    void _tr_flush_block(s, buf, stored_len, eof)
001cf6  e92d47f0          PUSH     {r4-r10,lr}
;;;922        deflate_state *s;
;;;923        charf *buf;       /* input block, or NULL if too old */
;;;924        ulg stored_len;   /* length of input block */
;;;925        int eof;          /* true if this is the last block for a file */
;;;926    {
001cfa  4604              MOV      r4,r0
001cfc  4689              MOV      r9,r1
001cfe  4690              MOV      r8,r2
001d00  461d              MOV      r5,r3
;;;927        ulg opt_lenb, static_lenb; /* opt_len and static_len in bytes */
;;;928        int max_blindex = 0;  /* index of last bit length code of non zero freq */
001d02  f04f0a00          MOV      r10,#0
;;;929    
;;;930        /* Build the Huffman trees unless a stored block is forced */
;;;931        if (s->level > 0) {
001d06  f8d40084          LDR      r0,[r4,#0x84]
001d0a  2800              CMP      r0,#0
001d0c  dd25              BLE      |L1.7514|
;;;932    
;;;933            /* Check if the file is binary or text */
;;;934            if (stored_len > 0 && s->strm->data_type == Z_UNKNOWN)
001d0e  f1b80f00          CMP      r8,#0
001d12  d006              BEQ      |L1.7458|
001d14  6820              LDR      r0,[r4,#0]
001d16  6ac0              LDR      r0,[r0,#0x2c]
001d18  2802              CMP      r0,#2
001d1a  d102              BNE      |L1.7458|
;;;935                set_data_type(s);
001d1c  4620              MOV      r0,r4
001d1e  f7fffffe          BL       set_data_type
                  |L1.7458|
;;;936    
;;;937            /* Construct the literal and distance trees */
;;;938            build_tree(s, (tree_desc *)(&(s->l_desc)));
001d22  f6043118          ADD      r1,r4,#0xb18
001d26  4620              MOV      r0,r4
001d28  f7fffffe          BL       build_tree
;;;939            Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
;;;940                    s->static_len));
;;;941    
;;;942            build_tree(s, (tree_desc *)(&(s->d_desc)));
001d2c  f6043124          ADD      r1,r4,#0xb24
001d30  4620              MOV      r0,r4
001d32  f7fffffe          BL       build_tree
;;;943            Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
;;;944                    s->static_len));
;;;945            /* At this point, opt_len and static_len are the total bit lengths of
;;;946             * the compressed block data, excluding the tree representations.
;;;947             */
;;;948    
;;;949            /* Build the bit length tree for the above two trees, and get the index
;;;950             * in bl_order of the last bit length code to send.
;;;951             */
;;;952            max_blindex = build_bl_tree(s);
001d36  4620              MOV      r0,r4
001d38  f7fffffe          BL       build_bl_tree
001d3c  4682              MOV      r10,r0
;;;953    
;;;954            /* Determine the best encoding. Compute the block lengths in bytes. */
;;;955            opt_lenb = (s->opt_len+3+7)>>3;
001d3e  f24160a8          MOV      r0,#0x16a8
001d42  5900              LDR      r0,[r0,r4]
001d44  300a              ADDS     r0,r0,#0xa
001d46  08c6              LSRS     r6,r0,#3
;;;956            static_lenb = (s->static_len+3+7)>>3;
001d48  f24160ac          MOV      r0,#0x16ac
001d4c  5900              LDR      r0,[r0,r4]
001d4e  300a              ADDS     r0,r0,#0xa
001d50  08c7              LSRS     r7,r0,#3
;;;957    
;;;958            Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
;;;959                    opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
;;;960                    s->last_lit));
;;;961    
;;;962            if (static_lenb <= opt_lenb) opt_lenb = static_lenb;
001d52  42b7              CMP      r7,r6
001d54  d804              BHI      |L1.7520|
001d56  463e              MOV      r6,r7
001d58  e002              B        |L1.7520|
                  |L1.7514|
;;;963    
;;;964        } else {
;;;965            Assert(buf != (char*)0, "lost buf");
;;;966            opt_lenb = static_lenb = stored_len + 5; /* force a stored block */
001d5a  f1080605          ADD      r6,r8,#5
001d5e  4637              MOV      r7,r6
                  |L1.7520|
;;;967        }
;;;968    
;;;969    #ifdef FORCE_STORED
;;;970        if (buf != (char*)0) { /* force stored block */
;;;971    #else
;;;972        if (stored_len+4 <= opt_lenb && buf != (char*)0) {
001d60  f1080004          ADD      r0,r8,#4
001d64  42b0              CMP      r0,r6
001d66  d809              BHI      |L1.7548|
001d68  f1b90f00          CMP      r9,#0
001d6c  d006              BEQ      |L1.7548|
;;;973                           /* 4: two words for the lengths */
;;;974    #endif
;;;975            /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
;;;976             * Otherwise we can't have processed more than WSIZE input bytes since
;;;977             * the last block flush, because compression would have been
;;;978             * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
;;;979             * transform a block into a stored block.
;;;980             */
;;;981            _tr_stored_block(s, buf, stored_len, eof);
001d6e  462b              MOV      r3,r5
001d70  4642              MOV      r2,r8
001d72  4649              MOV      r1,r9
001d74  4620              MOV      r0,r4
001d76  f7fffffe          BL       _tr_stored_block
001d7a  e0c1              B        |L1.7936|
                  |L1.7548|
;;;982    
;;;983    #ifdef FORCE_STATIC
;;;984        } else if (static_lenb >= 0) { /* force static trees */
;;;985    #else
;;;986        } else if (s->strategy == Z_FIXED || static_lenb == opt_lenb) {
001d7c  f8d40088          LDR      r0,[r4,#0x88]
001d80  2804              CMP      r0,#4
001d82  d001              BEQ      |L1.7560|
001d84  42b7              CMP      r7,r6
001d86  d156              BNE      |L1.7734|
                  |L1.7560|
;;;987    #endif
;;;988            send_bits(s, (STATIC_TREES<<1)+eof, 3);
001d88  2003              MOVS     r0,#3
001d8a  f24161bc          MOV      r1,#0x16bc
001d8e  5909              LDR      r1,[r1,r4]
001d90  f1c00210          RSB      r2,r0,#0x10
001d94  4291              CMP      r1,r2
001d96  dd35              BLE      |L1.7684|
001d98  1ca9              ADDS     r1,r5,#2
001d9a  f24162b8          MOV      r2,#0x16b8
001d9e  5b12              LDRH     r2,[r2,r4]
001da0  f24163bc          MOV      r3,#0x16bc
001da4  5d1b              LDRB     r3,[r3,r4]
001da6  fa01f303          LSL      r3,r1,r3
001daa  431a              ORRS     r2,r2,r3
001dac  b293              UXTH     r3,r2
001dae  f24162b8          MOV      r2,#0x16b8
001db2  5313              STRH     r3,[r2,r4]
001db4  5d13              LDRB     r3,[r2,r4]
001db6  f8d4c014          LDR      r12,[r4,#0x14]
001dba  f10c0201          ADD      r2,r12,#1
001dbe  6162              STR      r2,[r4,#0x14]
001dc0  68a2              LDR      r2,[r4,#8]
001dc2  f802300c          STRB     r3,[r2,r12]
001dc6  f24162b8          MOV      r2,#0x16b8
001dca  5b12              LDRH     r2,[r2,r4]
001dcc  1213              ASRS     r3,r2,#8
001dce  f8d4c014          LDR      r12,[r4,#0x14]
001dd2  f10c0201          ADD      r2,r12,#1
001dd6  6162              STR      r2,[r4,#0x14]
001dd8  68a2              LDR      r2,[r4,#8]
001dda  f802300c          STRB     r3,[r2,r12]
001dde  b28a              UXTH     r2,r1
001de0  f24163bc          MOV      r3,#0x16bc
001de4  591b              LDR      r3,[r3,r4]
001de6  f1c30310          RSB      r3,r3,#0x10
001dea  411a              ASRS     r2,r2,r3
001dec  f24163b8          MOV      r3,#0x16b8
001df0  531a              STRH     r2,[r3,r4]
001df2  1d1a              ADDS     r2,r3,#4
001df4  5913              LDR      r3,[r2,r4]
001df6  f1a00210          SUB      r2,r0,#0x10
001dfa  4413              ADD      r3,r3,r2
001dfc  f24162bc          MOV      r2,#0x16bc
001e00  5113              STR      r3,[r2,r4]
001e02  e012              B        |L1.7722|
                  |L1.7684|
001e04  1ca9              ADDS     r1,r5,#2
001e06  f24162bc          MOV      r2,#0x16bc
001e0a  5d12              LDRB     r2,[r2,r4]
001e0c  4091              LSLS     r1,r1,r2
001e0e  f24162b8          MOV      r2,#0x16b8
001e12  5b12              LDRH     r2,[r2,r4]
001e14  4311              ORRS     r1,r1,r2
001e16  b28a              UXTH     r2,r1
001e18  f24161b8          MOV      r1,#0x16b8
001e1c  530a              STRH     r2,[r1,r4]
001e1e  1d09              ADDS     r1,r1,#4
001e20  5909              LDR      r1,[r1,r4]
001e22  180a              ADDS     r2,r1,r0
001e24  f24161bc          MOV      r1,#0x16bc
001e28  510a              STR      r2,[r1,r4]
                  |L1.7722|
;;;989            compress_block(s, (ct_data *)static_ltree, (ct_data *)static_dtree);
001e2a  4a71              LDR      r2,|L1.8176|
001e2c  4971              LDR      r1,|L1.8180|
001e2e  4620              MOV      r0,r4
001e30  f7fffffe          BL       compress_block
001e34  e064              B        |L1.7936|
                  |L1.7734|
;;;990    #ifdef DEBUG
;;;991            s->compressed_len += 3 + s->static_len;
;;;992    #endif
;;;993        } else {
;;;994            send_bits(s, (DYN_TREES<<1)+eof, 3);
001e36  2003              MOVS     r0,#3
001e38  f24161bc          MOV      r1,#0x16bc
001e3c  5909              LDR      r1,[r1,r4]
001e3e  f1c00210          RSB      r2,r0,#0x10
001e42  4291              CMP      r1,r2
001e44  dd35              BLE      |L1.7858|
001e46  1d29              ADDS     r1,r5,#4
001e48  f24162b8          MOV      r2,#0x16b8
001e4c  5b12              LDRH     r2,[r2,r4]
001e4e  f24163bc          MOV      r3,#0x16bc
001e52  5d1b              LDRB     r3,[r3,r4]
001e54  fa01f303          LSL      r3,r1,r3
001e58  431a              ORRS     r2,r2,r3
001e5a  b293              UXTH     r3,r2
001e5c  f24162b8          MOV      r2,#0x16b8
001e60  5313              STRH     r3,[r2,r4]
001e62  5d13              LDRB     r3,[r2,r4]
001e64  f8d4c014          LDR      r12,[r4,#0x14]
001e68  f10c0201          ADD      r2,r12,#1
001e6c  6162              STR      r2,[r4,#0x14]
001e6e  68a2              LDR      r2,[r4,#8]
001e70  f802300c          STRB     r3,[r2,r12]
001e74  f24162b8          MOV      r2,#0x16b8
001e78  5b12              LDRH     r2,[r2,r4]
001e7a  1213              ASRS     r3,r2,#8
001e7c  f8d4c014          LDR      r12,[r4,#0x14]
001e80  f10c0201          ADD      r2,r12,#1
001e84  6162              STR      r2,[r4,#0x14]
001e86  68a2              LDR      r2,[r4,#8]
001e88  f802300c          STRB     r3,[r2,r12]
001e8c  b28a              UXTH     r2,r1
001e8e  f24163bc          MOV      r3,#0x16bc
001e92  591b              LDR      r3,[r3,r4]
001e94  f1c30310          RSB      r3,r3,#0x10
001e98  411a              ASRS     r2,r2,r3
001e9a  f24163b8          MOV      r3,#0x16b8
001e9e  531a              STRH     r2,[r3,r4]
001ea0  1d1a              ADDS     r2,r3,#4
001ea2  5913              LDR      r3,[r2,r4]
001ea4  f1a00210          SUB      r2,r0,#0x10
001ea8  4413              ADD      r3,r3,r2
001eaa  f24162bc          MOV      r2,#0x16bc
001eae  5113              STR      r3,[r2,r4]
001eb0  e012              B        |L1.7896|
                  |L1.7858|
001eb2  1d29              ADDS     r1,r5,#4
001eb4  f24162bc          MOV      r2,#0x16bc
001eb8  5d12              LDRB     r2,[r2,r4]
001eba  4091              LSLS     r1,r1,r2
001ebc  f24162b8          MOV      r2,#0x16b8
001ec0  5b12              LDRH     r2,[r2,r4]
001ec2  4311              ORRS     r1,r1,r2
001ec4  b28a              UXTH     r2,r1
001ec6  f24161b8          MOV      r1,#0x16b8
001eca  530a              STRH     r2,[r1,r4]
001ecc  1d09              ADDS     r1,r1,#4
001ece  5909              LDR      r1,[r1,r4]
001ed0  180a              ADDS     r2,r1,r0
001ed2  f24161bc          MOV      r1,#0x16bc
001ed6  510a              STR      r2,[r1,r4]
                  |L1.7896|
;;;995            send_all_trees(s, s->l_desc.max_code+1, s->d_desc.max_code+1,
001ed8  f6403028          MOV      r0,#0xb28
001edc  5900              LDR      r0,[r0,r4]
001ede  1c42              ADDS     r2,r0,#1
001ee0  f640301c          MOV      r0,#0xb1c
001ee4  5900              LDR      r0,[r0,r4]
001ee6  1c41              ADDS     r1,r0,#1
001ee8  f10a0301          ADD      r3,r10,#1
001eec  4620              MOV      r0,r4
001eee  f7fffffe          BL       send_all_trees
;;;996                           max_blindex+1);
;;;997            compress_block(s, (ct_data *)s->dyn_ltree, (ct_data *)s->dyn_dtree);
001ef2  f6041288          ADD      r2,r4,#0x988
001ef6  f1040194          ADD      r1,r4,#0x94
001efa  4620              MOV      r0,r4
001efc  f7fffffe          BL       compress_block
                  |L1.7936|
;;;998    #ifdef DEBUG
;;;999            s->compressed_len += 3 + s->opt_len;
;;;1000   #endif
;;;1001       }
;;;1002       Assert (s->compressed_len == s->bits_sent, "bad compressed size");
;;;1003       /* The above check is made mod 2^32, for files larger than 512 MB
;;;1004        * and uLong implemented on 32 bits.
;;;1005        */
;;;1006       init_block(s);
001f00  4620              MOV      r0,r4
001f02  f7fffffe          BL       init_block
;;;1007   
;;;1008       if (eof) {
001f06  b115              CBZ      r5,|L1.7950|
;;;1009           bi_windup(s);
001f08  4620              MOV      r0,r4
001f0a  f7fffffe          BL       bi_windup
                  |L1.7950|
;;;1010   #ifdef DEBUG
;;;1011           s->compressed_len += 7;  /* align on byte boundary */
;;;1012   #endif
;;;1013       }
;;;1014       Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
;;;1015              s->compressed_len-7*eof));
;;;1016   }
001f0e  e8bd87f0          POP      {r4-r10,pc}
;;;1017   
                          ENDP

                  _tr_tally PROC
;;;1021    */
;;;1022   int _tr_tally (s, dist, lc)
001f12  b570              PUSH     {r4-r6,lr}
;;;1023       deflate_state *s;
;;;1024       unsigned dist;  /* distance of matched string */
;;;1025       unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */
;;;1026   {
001f14  4603              MOV      r3,r0
;;;1027       s->d_buf[s->last_lit] = (ush)dist;
001f16  f24160a4          MOV      r0,#0x16a4
001f1a  58c5              LDR      r5,[r0,r3]
001f1c  1f00              SUBS     r0,r0,#4
001f1e  58c0              LDR      r0,[r0,r3]
001f20  f8251010          STRH     r1,[r5,r0,LSL #1]
;;;1028       s->l_buf[s->last_lit++] = (uch)lc;
001f24  f44f50b5          MOV      r0,#0x16a0
001f28  58c6              LDR      r6,[r0,r3]
001f2a  58c0              LDR      r0,[r0,r3]
001f2c  1c40              ADDS     r0,r0,#1
001f2e  f44f54b5          MOV      r4,#0x16a0
001f32  50e0              STR      r0,[r4,r3]
001f34  f2416098          MOV      r0,#0x1698
001f38  58c0              LDR      r0,[r0,r3]
001f3a  5582              STRB     r2,[r0,r6]
;;;1029       if (dist == 0) {
001f3c  b951              CBNZ     r1,|L1.8020|
;;;1030           /* lc is the unmatched char */
;;;1031           s->dyn_ltree[lc].Freq++;
001f3e  f1030094          ADD      r0,r3,#0x94
001f42  f8300022          LDRH     r0,[r0,r2,LSL #2]
001f46  1c40              ADDS     r0,r0,#1
001f48  b284              UXTH     r4,r0
001f4a  f1030094          ADD      r0,r3,#0x94
001f4e  f8204022          STRH     r4,[r0,r2,LSL #2]
001f52  e037              B        |L1.8132|
                  |L1.8020|
;;;1032       } else {
;;;1033           s->matches++;
001f54  f24160b0          MOV      r0,#0x16b0
001f58  58c0              LDR      r0,[r0,r3]
001f5a  1c40              ADDS     r0,r0,#1
001f5c  f24164b0          MOV      r4,#0x16b0
001f60  50e0              STR      r0,[r4,r3]
;;;1034           /* Here, lc is the match length - MIN_MATCH */
;;;1035           dist--;             /* dist = match distance - 1 */
001f62  1e49              SUBS     r1,r1,#1
;;;1036           Assert((ush)dist < (ush)MAX_DIST(s) &&
;;;1037                  (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
;;;1038                  (ush)d_code(dist) < (ush)D_CODES,  "_tr_tally: bad match");
;;;1039   
;;;1040           s->dyn_ltree[_length_code[lc]+LITERALS+1].Freq++;
001f64  4824              LDR      r0,|L1.8184|
001f66  5c80              LDRB     r0,[r0,r2]
001f68  f2001001          ADD      r0,r0,#0x101
001f6c  f1030494          ADD      r4,r3,#0x94
001f70  f8340020          LDRH     r0,[r4,r0,LSL #2]
001f74  1c40              ADDS     r0,r0,#1
001f76  b285              UXTH     r5,r0
001f78  481f              LDR      r0,|L1.8184|
001f7a  5c80              LDRB     r0,[r0,r2]
001f7c  f2001001          ADD      r0,r0,#0x101
001f80  f8245020          STRH     r5,[r4,r0,LSL #2]
;;;1041           s->dyn_dtree[d_code(dist)].Freq++;
001f84  29ff              CMP      r1,#0xff
001f86  d802              BHI      |L1.8078|
001f88  4816              LDR      r0,|L1.8164|
001f8a  5c40              LDRB     r0,[r0,r1]
001f8c  e005              B        |L1.8090|
                  |L1.8078|
001f8e  f44f7080          MOV      r0,#0x100
001f92  eb0010d1          ADD      r0,r0,r1,LSR #7
001f96  4c13              LDR      r4,|L1.8164|
001f98  5c20              LDRB     r0,[r4,r0]
                  |L1.8090|
001f9a  f6031488          ADD      r4,r3,#0x988
001f9e  f8340020          LDRH     r0,[r4,r0,LSL #2]
001fa2  1c40              ADDS     r0,r0,#1
001fa4  b285              UXTH     r5,r0
001fa6  29ff              CMP      r1,#0xff
001fa8  d802              BHI      |L1.8112|
001faa  480e              LDR      r0,|L1.8164|
001fac  5c40              LDRB     r0,[r0,r1]
001fae  e005              B        |L1.8124|
                  |L1.8112|
001fb0  f44f7080          MOV      r0,#0x100
001fb4  eb0010d1          ADD      r0,r0,r1,LSR #7
001fb8  4c0a              LDR      r4,|L1.8164|
001fba  5c20              LDRB     r0,[r4,r0]
                  |L1.8124|
001fbc  f6031488          ADD      r4,r3,#0x988
001fc0  f8245020          STRH     r5,[r4,r0,LSL #2]
                  |L1.8132|
;;;1042       }
;;;1043   
;;;1044   #ifdef TRUNCATE_BLOCK
;;;1045       /* Try to guess if it is profitable to stop the current block here */
;;;1046       if ((s->last_lit & 0x1fff) == 0 && s->level > 2) {
;;;1047           /* Compute an upper bound for the compressed length */
;;;1048           ulg out_length = (ulg)s->last_lit*8L;
;;;1049           ulg in_length = (ulg)((long)s->strstart - s->block_start);
;;;1050           int dcode;
;;;1051           for (dcode = 0; dcode < D_CODES; dcode++) {
;;;1052               out_length += (ulg)s->dyn_dtree[dcode].Freq *
;;;1053                   (5L+extra_dbits[dcode]);
;;;1054           }
;;;1055           out_length >>= 3;
;;;1056           Tracev((stderr,"\nlast_lit %u, in %ld, out ~%ld(%ld%%) ",
;;;1057                  s->last_lit, in_length, out_length,
;;;1058                  100L - out_length*100L/in_length));
;;;1059           if (s->matches < s->last_lit/2 && out_length < in_length/2) return 1;
;;;1060       }
;;;1061   #endif
;;;1062       return (s->last_lit == s->lit_bufsize-1);
001fc4  f44f50b5          MOV      r0,#0x16a0
001fc8  58c4              LDR      r4,[r0,r3]
001fca  1f00              SUBS     r0,r0,#4
001fcc  58c0              LDR      r0,[r0,r3]
001fce  1e40              SUBS     r0,r0,#1
001fd0  4284              CMP      r4,r0
001fd2  d101              BNE      |L1.8152|
001fd4  2001              MOVS     r0,#1
                  |L1.8150|
;;;1063       /* We avoid equality with lit_bufsize because of wraparound at 64K
;;;1064        * on 16 bit machines and because stored blocks are restricted to
;;;1065        * 64K-1 bytes.
;;;1066        */
;;;1067   }
001fd6  bd70              POP      {r4-r6,pc}
                  |L1.8152|
001fd8  2000              MOVS     r0,#0                 ;1062
001fda  e7fc              B        |L1.8150|
;;;1068   
                          ENDP

                  |L1.8156|
                          DCD      extra_lbits
                  |L1.8160|
                          DCD      base_length
                  |L1.8164|
                          DCD      _dist_code
                  |L1.8168|
                          DCD      extra_dbits
                  |L1.8172|
                          DCD      base_dist
                  |L1.8176|
                          DCD      static_dtree
                  |L1.8180|
                          DCD      static_ltree
                  |L1.8184|
                          DCD      _length_code

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  extra_lbits
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000001
                          DCD      0x00000001
                          DCD      0x00000001
                          DCD      0x00000001
                          DCD      0x00000002
                          DCD      0x00000002
                          DCD      0x00000002
                          DCD      0x00000002
                          DCD      0x00000003
                          DCD      0x00000003
                          DCD      0x00000003
                          DCD      0x00000003
                          DCD      0x00000004
                          DCD      0x00000004
                          DCD      0x00000004
                          DCD      0x00000004
                          DCD      0x00000005
                          DCD      0x00000005
                          DCD      0x00000005
                          DCD      0x00000005
                          DCD      0x00000000
                  extra_dbits
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000001
                          DCD      0x00000001
                          DCD      0x00000002
                          DCD      0x00000002
                          DCD      0x00000003
                          DCD      0x00000003
                          DCD      0x00000004
                          DCD      0x00000004
                          DCD      0x00000005
                          DCD      0x00000005
                          DCD      0x00000006
                          DCD      0x00000006
                          DCD      0x00000007
                          DCD      0x00000007
                          DCD      0x00000008
                          DCD      0x00000008
                          DCD      0x00000009
                          DCD      0x00000009
                          DCD      0x0000000a
                          DCD      0x0000000a
                          DCD      0x0000000b
                          DCD      0x0000000b
                          DCD      0x0000000c
                          DCD      0x0000000c
                          DCD      0x0000000d
                          DCD      0x0000000d
                  extra_blbits
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000002
                          DCD      0x00000003
                          DCD      0x00000007
                  bl_order
000138  10111200          DCB      0x10,0x11,0x12,0x00
00013c  08070906          DCB      0x08,0x07,0x09,0x06
000140  0a050b04          DCB      0x0a,0x05,0x0b,0x04
000144  0c030d02          DCB      0x0c,0x03,0x0d,0x02
000148  0e010f00          DCB      0x0e,0x01,0x0f,0x00
                  static_ltree
00014c  000c0008          DCW      0x000c,0x0008
000150  008c0008          DCW      0x008c,0x0008
000154  004c0008          DCW      0x004c,0x0008
000158  00cc0008          DCW      0x00cc,0x0008
00015c  002c0008          DCW      0x002c,0x0008
000160  00ac0008          DCW      0x00ac,0x0008
000164  006c0008          DCW      0x006c,0x0008
000168  00ec0008          DCW      0x00ec,0x0008
00016c  001c0008          DCW      0x001c,0x0008
000170  009c0008          DCW      0x009c,0x0008
000174  005c0008          DCW      0x005c,0x0008
000178  00dc0008          DCW      0x00dc,0x0008
00017c  003c0008          DCW      0x003c,0x0008
000180  00bc0008          DCW      0x00bc,0x0008
000184  007c0008          DCW      0x007c,0x0008
000188  00fc0008          DCW      0x00fc,0x0008
00018c  00020008          DCW      0x0002,0x0008
000190  00820008          DCW      0x0082,0x0008
000194  00420008          DCW      0x0042,0x0008
000198  00c20008          DCW      0x00c2,0x0008
00019c  00220008          DCW      0x0022,0x0008
0001a0  00a20008          DCW      0x00a2,0x0008
0001a4  00620008          DCW      0x0062,0x0008
0001a8  00e20008          DCW      0x00e2,0x0008
0001ac  00120008          DCW      0x0012,0x0008
0001b0  00920008          DCW      0x0092,0x0008
0001b4  00520008          DCW      0x0052,0x0008
0001b8  00d20008          DCW      0x00d2,0x0008
0001bc  00320008          DCW      0x0032,0x0008
0001c0  00b20008          DCW      0x00b2,0x0008
0001c4  00720008          DCW      0x0072,0x0008
0001c8  00f20008          DCW      0x00f2,0x0008
0001cc  000a0008          DCW      0x000a,0x0008
0001d0  008a0008          DCW      0x008a,0x0008
0001d4  004a0008          DCW      0x004a,0x0008
0001d8  00ca0008          DCW      0x00ca,0x0008
0001dc  002a0008          DCW      0x002a,0x0008
0001e0  00aa0008          DCW      0x00aa,0x0008
0001e4  006a0008          DCW      0x006a,0x0008
0001e8  00ea0008          DCW      0x00ea,0x0008
0001ec  001a0008          DCW      0x001a,0x0008
0001f0  009a0008          DCW      0x009a,0x0008
0001f4  005a0008          DCW      0x005a,0x0008
0001f8  00da0008          DCW      0x00da,0x0008
0001fc  003a0008          DCW      0x003a,0x0008
000200  00ba0008          DCW      0x00ba,0x0008
000204  007a0008          DCW      0x007a,0x0008
000208  00fa0008          DCW      0x00fa,0x0008
00020c  00060008          DCW      0x0006,0x0008
000210  00860008          DCW      0x0086,0x0008
000214  00460008          DCW      0x0046,0x0008
000218  00c60008          DCW      0x00c6,0x0008
00021c  00260008          DCW      0x0026,0x0008
000220  00a60008          DCW      0x00a6,0x0008
000224  00660008          DCW      0x0066,0x0008
000228  00e60008          DCW      0x00e6,0x0008
00022c  00160008          DCW      0x0016,0x0008
000230  00960008          DCW      0x0096,0x0008
000234  00560008          DCW      0x0056,0x0008
000238  00d60008          DCW      0x00d6,0x0008
00023c  00360008          DCW      0x0036,0x0008
000240  00b60008          DCW      0x00b6,0x0008
000244  00760008          DCW      0x0076,0x0008
000248  00f60008          DCW      0x00f6,0x0008
00024c  000e0008          DCW      0x000e,0x0008
000250  008e0008          DCW      0x008e,0x0008
000254  004e0008          DCW      0x004e,0x0008
000258  00ce0008          DCW      0x00ce,0x0008
00025c  002e0008          DCW      0x002e,0x0008
000260  00ae0008          DCW      0x00ae,0x0008
000264  006e0008          DCW      0x006e,0x0008
000268  00ee0008          DCW      0x00ee,0x0008
00026c  001e0008          DCW      0x001e,0x0008
000270  009e0008          DCW      0x009e,0x0008
000274  005e0008          DCW      0x005e,0x0008
000278  00de0008          DCW      0x00de,0x0008
00027c  003e0008          DCW      0x003e,0x0008
000280  00be0008          DCW      0x00be,0x0008
000284  007e0008          DCW      0x007e,0x0008
000288  00fe0008          DCW      0x00fe,0x0008
00028c  00010008          DCW      0x0001,0x0008
000290  00810008          DCW      0x0081,0x0008
000294  00410008          DCW      0x0041,0x0008
000298  00c10008          DCW      0x00c1,0x0008
00029c  00210008          DCW      0x0021,0x0008
0002a0  00a10008          DCW      0x00a1,0x0008
0002a4  00610008          DCW      0x0061,0x0008
0002a8  00e10008          DCW      0x00e1,0x0008
0002ac  00110008          DCW      0x0011,0x0008
0002b0  00910008          DCW      0x0091,0x0008
0002b4  00510008          DCW      0x0051,0x0008
0002b8  00d10008          DCW      0x00d1,0x0008
0002bc  00310008          DCW      0x0031,0x0008
0002c0  00b10008          DCW      0x00b1,0x0008
0002c4  00710008          DCW      0x0071,0x0008
0002c8  00f10008          DCW      0x00f1,0x0008
0002cc  00090008          DCW      0x0009,0x0008
0002d0  00890008          DCW      0x0089,0x0008
0002d4  00490008          DCW      0x0049,0x0008
0002d8  00c90008          DCW      0x00c9,0x0008
0002dc  00290008          DCW      0x0029,0x0008
0002e0  00a90008          DCW      0x00a9,0x0008
0002e4  00690008          DCW      0x0069,0x0008
0002e8  00e90008          DCW      0x00e9,0x0008
0002ec  00190008          DCW      0x0019,0x0008
0002f0  00990008          DCW      0x0099,0x0008
0002f4  00590008          DCW      0x0059,0x0008
0002f8  00d90008          DCW      0x00d9,0x0008
0002fc  00390008          DCW      0x0039,0x0008
000300  00b90008          DCW      0x00b9,0x0008
000304  00790008          DCW      0x0079,0x0008
000308  00f90008          DCW      0x00f9,0x0008
00030c  00050008          DCW      0x0005,0x0008
000310  00850008          DCW      0x0085,0x0008
000314  00450008          DCW      0x0045,0x0008
000318  00c50008          DCW      0x00c5,0x0008
00031c  00250008          DCW      0x0025,0x0008
000320  00a50008          DCW      0x00a5,0x0008
000324  00650008          DCW      0x0065,0x0008
000328  00e50008          DCW      0x00e5,0x0008
00032c  00150008          DCW      0x0015,0x0008
000330  00950008          DCW      0x0095,0x0008
000334  00550008          DCW      0x0055,0x0008
000338  00d50008          DCW      0x00d5,0x0008
00033c  00350008          DCW      0x0035,0x0008
000340  00b50008          DCW      0x00b5,0x0008
000344  00750008          DCW      0x0075,0x0008
000348  00f50008          DCW      0x00f5,0x0008
00034c  000d0008          DCW      0x000d,0x0008
000350  008d0008          DCW      0x008d,0x0008
000354  004d0008          DCW      0x004d,0x0008
000358  00cd0008          DCW      0x00cd,0x0008
00035c  002d0008          DCW      0x002d,0x0008
000360  00ad0008          DCW      0x00ad,0x0008
000364  006d0008          DCW      0x006d,0x0008
000368  00ed0008          DCW      0x00ed,0x0008
00036c  001d0008          DCW      0x001d,0x0008
000370  009d0008          DCW      0x009d,0x0008
000374  005d0008          DCW      0x005d,0x0008
000378  00dd0008          DCW      0x00dd,0x0008
00037c  003d0008          DCW      0x003d,0x0008
000380  00bd0008          DCW      0x00bd,0x0008
000384  007d0008          DCW      0x007d,0x0008
000388  00fd0008          DCW      0x00fd,0x0008
00038c  00130009          DCW      0x0013,0x0009
000390  01130009          DCW      0x0113,0x0009
000394  00930009          DCW      0x0093,0x0009
000398  01930009          DCW      0x0193,0x0009
00039c  00530009          DCW      0x0053,0x0009
0003a0  01530009          DCW      0x0153,0x0009
0003a4  00d30009          DCW      0x00d3,0x0009
0003a8  01d30009          DCW      0x01d3,0x0009
0003ac  00330009          DCW      0x0033,0x0009
0003b0  01330009          DCW      0x0133,0x0009
0003b4  00b30009          DCW      0x00b3,0x0009
0003b8  01b30009          DCW      0x01b3,0x0009
0003bc  00730009          DCW      0x0073,0x0009
0003c0  01730009          DCW      0x0173,0x0009
0003c4  00f30009          DCW      0x00f3,0x0009
0003c8  01f30009          DCW      0x01f3,0x0009
0003cc  000b0009          DCW      0x000b,0x0009
0003d0  010b0009          DCW      0x010b,0x0009
0003d4  008b0009          DCW      0x008b,0x0009
0003d8  018b0009          DCW      0x018b,0x0009
0003dc  004b0009          DCW      0x004b,0x0009
0003e0  014b0009          DCW      0x014b,0x0009
0003e4  00cb0009          DCW      0x00cb,0x0009
0003e8  01cb0009          DCW      0x01cb,0x0009
0003ec  002b0009          DCW      0x002b,0x0009
0003f0  012b0009          DCW      0x012b,0x0009
0003f4  00ab0009          DCW      0x00ab,0x0009
0003f8  01ab0009          DCW      0x01ab,0x0009
0003fc  006b0009          DCW      0x006b,0x0009
000400  016b0009          DCW      0x016b,0x0009
000404  00eb0009          DCW      0x00eb,0x0009
000408  01eb0009          DCW      0x01eb,0x0009
00040c  001b0009          DCW      0x001b,0x0009
000410  011b0009          DCW      0x011b,0x0009
000414  009b0009          DCW      0x009b,0x0009
000418  019b0009          DCW      0x019b,0x0009
00041c  005b0009          DCW      0x005b,0x0009
000420  015b0009          DCW      0x015b,0x0009
000424  00db0009          DCW      0x00db,0x0009
000428  01db0009          DCW      0x01db,0x0009
00042c  003b0009          DCW      0x003b,0x0009
000430  013b0009          DCW      0x013b,0x0009
000434  00bb0009          DCW      0x00bb,0x0009
000438  01bb0009          DCW      0x01bb,0x0009
00043c  007b0009          DCW      0x007b,0x0009
000440  017b0009          DCW      0x017b,0x0009
000444  00fb0009          DCW      0x00fb,0x0009
000448  01fb0009          DCW      0x01fb,0x0009
00044c  00070009          DCW      0x0007,0x0009
000450  01070009          DCW      0x0107,0x0009
000454  00870009          DCW      0x0087,0x0009
000458  01870009          DCW      0x0187,0x0009
00045c  00470009          DCW      0x0047,0x0009
000460  01470009          DCW      0x0147,0x0009
000464  00c70009          DCW      0x00c7,0x0009
000468  01c70009          DCW      0x01c7,0x0009
00046c  00270009          DCW      0x0027,0x0009
000470  01270009          DCW      0x0127,0x0009
000474  00a70009          DCW      0x00a7,0x0009
000478  01a70009          DCW      0x01a7,0x0009
00047c  00670009          DCW      0x0067,0x0009
000480  01670009          DCW      0x0167,0x0009
000484  00e70009          DCW      0x00e7,0x0009
000488  01e70009          DCW      0x01e7,0x0009
00048c  00170009          DCW      0x0017,0x0009
000490  01170009          DCW      0x0117,0x0009
000494  00970009          DCW      0x0097,0x0009
000498  01970009          DCW      0x0197,0x0009
00049c  00570009          DCW      0x0057,0x0009
0004a0  01570009          DCW      0x0157,0x0009
0004a4  00d70009          DCW      0x00d7,0x0009
0004a8  01d70009          DCW      0x01d7,0x0009
0004ac  00370009          DCW      0x0037,0x0009
0004b0  01370009          DCW      0x0137,0x0009
0004b4  00b70009          DCW      0x00b7,0x0009
0004b8  01b70009          DCW      0x01b7,0x0009
0004bc  00770009          DCW      0x0077,0x0009
0004c0  01770009          DCW      0x0177,0x0009
0004c4  00f70009          DCW      0x00f7,0x0009
0004c8  01f70009          DCW      0x01f7,0x0009
0004cc  000f0009          DCW      0x000f,0x0009
0004d0  010f0009          DCW      0x010f,0x0009
0004d4  008f0009          DCW      0x008f,0x0009
0004d8  018f0009          DCW      0x018f,0x0009
0004dc  004f0009          DCW      0x004f,0x0009
0004e0  014f0009          DCW      0x014f,0x0009
0004e4  00cf0009          DCW      0x00cf,0x0009
0004e8  01cf0009          DCW      0x01cf,0x0009
0004ec  002f0009          DCW      0x002f,0x0009
0004f0  012f0009          DCW      0x012f,0x0009
0004f4  00af0009          DCW      0x00af,0x0009
0004f8  01af0009          DCW      0x01af,0x0009
0004fc  006f0009          DCW      0x006f,0x0009
000500  016f0009          DCW      0x016f,0x0009
000504  00ef0009          DCW      0x00ef,0x0009
000508  01ef0009          DCW      0x01ef,0x0009
00050c  001f0009          DCW      0x001f,0x0009
000510  011f0009          DCW      0x011f,0x0009
000514  009f0009          DCW      0x009f,0x0009
000518  019f0009          DCW      0x019f,0x0009
00051c  005f0009          DCW      0x005f,0x0009
000520  015f0009          DCW      0x015f,0x0009
000524  00df0009          DCW      0x00df,0x0009
000528  01df0009          DCW      0x01df,0x0009
00052c  003f0009          DCW      0x003f,0x0009
000530  013f0009          DCW      0x013f,0x0009
000534  00bf0009          DCW      0x00bf,0x0009
000538  01bf0009          DCW      0x01bf,0x0009
00053c  007f0009          DCW      0x007f,0x0009
000540  017f0009          DCW      0x017f,0x0009
000544  00ff0009          DCW      0x00ff,0x0009
000548  01ff0009          DCW      0x01ff,0x0009
00054c  00000007          DCW      0x0000,0x0007
000550  00400007          DCW      0x0040,0x0007
000554  00200007          DCW      0x0020,0x0007
000558  00600007          DCW      0x0060,0x0007
00055c  00100007          DCW      0x0010,0x0007
000560  00500007          DCW      0x0050,0x0007
000564  00300007          DCW      0x0030,0x0007
000568  00700007          DCW      0x0070,0x0007
00056c  00080007          DCW      0x0008,0x0007
000570  00480007          DCW      0x0048,0x0007
000574  00280007          DCW      0x0028,0x0007
000578  00680007          DCW      0x0068,0x0007
00057c  00180007          DCW      0x0018,0x0007
000580  00580007          DCW      0x0058,0x0007
000584  00380007          DCW      0x0038,0x0007
000588  00780007          DCW      0x0078,0x0007
00058c  00040007          DCW      0x0004,0x0007
000590  00440007          DCW      0x0044,0x0007
000594  00240007          DCW      0x0024,0x0007
000598  00640007          DCW      0x0064,0x0007
00059c  00140007          DCW      0x0014,0x0007
0005a0  00540007          DCW      0x0054,0x0007
0005a4  00340007          DCW      0x0034,0x0007
0005a8  00740007          DCW      0x0074,0x0007
0005ac  00030008          DCW      0x0003,0x0008
0005b0  00830008          DCW      0x0083,0x0008
0005b4  00430008          DCW      0x0043,0x0008
0005b8  00c30008          DCW      0x00c3,0x0008
0005bc  00230008          DCW      0x0023,0x0008
0005c0  00a30008          DCW      0x00a3,0x0008
0005c4  00630008          DCW      0x0063,0x0008
0005c8  00e30008          DCW      0x00e3,0x0008
                  static_dtree
0005cc  00000005          DCW      0x0000,0x0005
0005d0  00100005          DCW      0x0010,0x0005
0005d4  00080005          DCW      0x0008,0x0005
0005d8  00180005          DCW      0x0018,0x0005
0005dc  00040005          DCW      0x0004,0x0005
0005e0  00140005          DCW      0x0014,0x0005
0005e4  000c0005          DCW      0x000c,0x0005
0005e8  001c0005          DCW      0x001c,0x0005
0005ec  00020005          DCW      0x0002,0x0005
0005f0  00120005          DCW      0x0012,0x0005
0005f4  000a0005          DCW      0x000a,0x0005
0005f8  001a0005          DCW      0x001a,0x0005
0005fc  00060005          DCW      0x0006,0x0005
000600  00160005          DCW      0x0016,0x0005
000604  000e0005          DCW      0x000e,0x0005
000608  001e0005          DCW      0x001e,0x0005
00060c  00010005          DCW      0x0001,0x0005
000610  00110005          DCW      0x0011,0x0005
000614  00090005          DCW      0x0009,0x0005
000618  00190005          DCW      0x0019,0x0005
00061c  00050005          DCW      0x0005,0x0005
000620  00150005          DCW      0x0015,0x0005
000624  000d0005          DCW      0x000d,0x0005
000628  001d0005          DCW      0x001d,0x0005
00062c  00030005          DCW      0x0003,0x0005
000630  00130005          DCW      0x0013,0x0005
000634  000b0005          DCW      0x000b,0x0005
000638  001b0005          DCW      0x001b,0x0005
00063c  00070005          DCW      0x0007,0x0005
000640  00170005          DCW      0x0017,0x0005
                  _dist_code
000644  00010203          DCB      0x00,0x01,0x02,0x03
000648  04040505          DCB      0x04,0x04,0x05,0x05
00064c  06060606          DCB      0x06,0x06,0x06,0x06
000650  07070707          DCB      0x07,0x07,0x07,0x07
000654  08080808          DCB      0x08,0x08,0x08,0x08
000658  08080808          DCB      0x08,0x08,0x08,0x08
00065c  09090909          DCB      0x09,0x09,0x09,0x09
000660  09090909          DCB      0x09,0x09,0x09,0x09
000664  0a0a0a0a          DCB      0x0a,0x0a,0x0a,0x0a
000668  0a0a0a0a          DCB      0x0a,0x0a,0x0a,0x0a
00066c  0a0a0a0a          DCB      0x0a,0x0a,0x0a,0x0a
000670  0a0a0a0a          DCB      0x0a,0x0a,0x0a,0x0a
000674  0b0b0b0b          DCB      0x0b,0x0b,0x0b,0x0b
000678  0b0b0b0b          DCB      0x0b,0x0b,0x0b,0x0b
00067c  0b0b0b0b          DCB      0x0b,0x0b,0x0b,0x0b
000680  0b0b0b0b          DCB      0x0b,0x0b,0x0b,0x0b
000684  0c0c0c0c          DCB      0x0c,0x0c,0x0c,0x0c
000688  0c0c0c0c          DCB      0x0c,0x0c,0x0c,0x0c
00068c  0c0c0c0c          DCB      0x0c,0x0c,0x0c,0x0c
000690  0c0c0c0c          DCB      0x0c,0x0c,0x0c,0x0c
000694  0c0c0c0c          DCB      0x0c,0x0c,0x0c,0x0c
000698  0c0c0c0c          DCB      0x0c,0x0c,0x0c,0x0c
00069c  0c0c0c0c          DCB      0x0c,0x0c,0x0c,0x0c
0006a0  0c0c0c0c          DCB      0x0c,0x0c,0x0c,0x0c
0006a4  0d0d0d0d          DCB      0x0d,0x0d,0x0d,0x0d
0006a8  0d0d0d0d          DCB      0x0d,0x0d,0x0d,0x0d
0006ac  0d0d0d0d          DCB      0x0d,0x0d,0x0d,0x0d
0006b0  0d0d0d0d          DCB      0x0d,0x0d,0x0d,0x0d
0006b4  0d0d0d0d          DCB      0x0d,0x0d,0x0d,0x0d
0006b8  0d0d0d0d          DCB      0x0d,0x0d,0x0d,0x0d
0006bc  0d0d0d0d          DCB      0x0d,0x0d,0x0d,0x0d
0006c0  0d0d0d0d          DCB      0x0d,0x0d,0x0d,0x0d
0006c4  0e0e0e0e          DCB      0x0e,0x0e,0x0e,0x0e
0006c8  0e0e0e0e          DCB      0x0e,0x0e,0x0e,0x0e
0006cc  0e0e0e0e          DCB      0x0e,0x0e,0x0e,0x0e
0006d0  0e0e0e0e          DCB      0x0e,0x0e,0x0e,0x0e
0006d4  0e0e0e0e          DCB      0x0e,0x0e,0x0e,0x0e
0006d8  0e0e0e0e          DCB      0x0e,0x0e,0x0e,0x0e
0006dc  0e0e0e0e          DCB      0x0e,0x0e,0x0e,0x0e
0006e0  0e0e0e0e          DCB      0x0e,0x0e,0x0e,0x0e
0006e4  0e0e0e0e          DCB      0x0e,0x0e,0x0e,0x0e
0006e8  0e0e0e0e          DCB      0x0e,0x0e,0x0e,0x0e
0006ec  0e0e0e0e          DCB      0x0e,0x0e,0x0e,0x0e
0006f0  0e0e0e0e          DCB      0x0e,0x0e,0x0e,0x0e
0006f4  0e0e0e0e          DCB      0x0e,0x0e,0x0e,0x0e
0006f8  0e0e0e0e          DCB      0x0e,0x0e,0x0e,0x0e
0006fc  0e0e0e0e          DCB      0x0e,0x0e,0x0e,0x0e
000700  0e0e0e0e          DCB      0x0e,0x0e,0x0e,0x0e
000704  0f0f0f0f          DCB      0x0f,0x0f,0x0f,0x0f
000708  0f0f0f0f          DCB      0x0f,0x0f,0x0f,0x0f
00070c  0f0f0f0f          DCB      0x0f,0x0f,0x0f,0x0f
000710  0f0f0f0f          DCB      0x0f,0x0f,0x0f,0x0f
000714  0f0f0f0f          DCB      0x0f,0x0f,0x0f,0x0f
000718  0f0f0f0f          DCB      0x0f,0x0f,0x0f,0x0f
00071c  0f0f0f0f          DCB      0x0f,0x0f,0x0f,0x0f
000720  0f0f0f0f          DCB      0x0f,0x0f,0x0f,0x0f
000724  0f0f0f0f          DCB      0x0f,0x0f,0x0f,0x0f
000728  0f0f0f0f          DCB      0x0f,0x0f,0x0f,0x0f
00072c  0f0f0f0f          DCB      0x0f,0x0f,0x0f,0x0f
000730  0f0f0f0f          DCB      0x0f,0x0f,0x0f,0x0f
000734  0f0f0f0f          DCB      0x0f,0x0f,0x0f,0x0f
000738  0f0f0f0f          DCB      0x0f,0x0f,0x0f,0x0f
00073c  0f0f0f0f          DCB      0x0f,0x0f,0x0f,0x0f
000740  0f0f0f0f          DCB      0x0f,0x0f,0x0f,0x0f
000744  00001011          DCB      0x00,0x00,0x10,0x11
000748  12121313          DCB      0x12,0x12,0x13,0x13
00074c  14141414          DCB      0x14,0x14,0x14,0x14
000750  15151515          DCB      0x15,0x15,0x15,0x15
000754  16161616          DCB      0x16,0x16,0x16,0x16
000758  16161616          DCB      0x16,0x16,0x16,0x16
00075c  17171717          DCB      0x17,0x17,0x17,0x17
000760  17171717          DCB      0x17,0x17,0x17,0x17
000764  18181818          DCB      0x18,0x18,0x18,0x18
000768  18181818          DCB      0x18,0x18,0x18,0x18
00076c  18181818          DCB      0x18,0x18,0x18,0x18
000770  18181818          DCB      0x18,0x18,0x18,0x18
000774  19191919          DCB      0x19,0x19,0x19,0x19
000778  19191919          DCB      0x19,0x19,0x19,0x19
00077c  19191919          DCB      0x19,0x19,0x19,0x19
000780  19191919          DCB      0x19,0x19,0x19,0x19
000784  1a1a1a1a          DCB      0x1a,0x1a,0x1a,0x1a
000788  1a1a1a1a          DCB      0x1a,0x1a,0x1a,0x1a
00078c  1a1a1a1a          DCB      0x1a,0x1a,0x1a,0x1a
000790  1a1a1a1a          DCB      0x1a,0x1a,0x1a,0x1a
000794  1a1a1a1a          DCB      0x1a,0x1a,0x1a,0x1a
000798  1a1a1a1a          DCB      0x1a,0x1a,0x1a,0x1a
00079c  1a1a1a1a          DCB      0x1a,0x1a,0x1a,0x1a
0007a0  1a1a1a1a          DCB      0x1a,0x1a,0x1a,0x1a
0007a4  1b1b1b1b          DCB      0x1b,0x1b,0x1b,0x1b
0007a8  1b1b1b1b          DCB      0x1b,0x1b,0x1b,0x1b
0007ac  1b1b1b1b          DCB      0x1b,0x1b,0x1b,0x1b
0007b0  1b1b1b1b          DCB      0x1b,0x1b,0x1b,0x1b
0007b4  1b1b1b1b          DCB      0x1b,0x1b,0x1b,0x1b
0007b8  1b1b1b1b          DCB      0x1b,0x1b,0x1b,0x1b
0007bc  1b1b1b1b          DCB      0x1b,0x1b,0x1b,0x1b
0007c0  1b1b1b1b          DCB      0x1b,0x1b,0x1b,0x1b
0007c4  1c1c1c1c          DCB      0x1c,0x1c,0x1c,0x1c
0007c8  1c1c1c1c          DCB      0x1c,0x1c,0x1c,0x1c
0007cc  1c1c1c1c          DCB      0x1c,0x1c,0x1c,0x1c
0007d0  1c1c1c1c          DCB      0x1c,0x1c,0x1c,0x1c
0007d4  1c1c1c1c          DCB      0x1c,0x1c,0x1c,0x1c
0007d8  1c1c1c1c          DCB      0x1c,0x1c,0x1c,0x1c
0007dc  1c1c1c1c          DCB      0x1c,0x1c,0x1c,0x1c
0007e0  1c1c1c1c          DCB      0x1c,0x1c,0x1c,0x1c
0007e4  1c1c1c1c          DCB      0x1c,0x1c,0x1c,0x1c
0007e8  1c1c1c1c          DCB      0x1c,0x1c,0x1c,0x1c
0007ec  1c1c1c1c          DCB      0x1c,0x1c,0x1c,0x1c
0007f0  1c1c1c1c          DCB      0x1c,0x1c,0x1c,0x1c
0007f4  1c1c1c1c          DCB      0x1c,0x1c,0x1c,0x1c
0007f8  1c1c1c1c          DCB      0x1c,0x1c,0x1c,0x1c
0007fc  1c1c1c1c          DCB      0x1c,0x1c,0x1c,0x1c
000800  1c1c1c1c          DCB      0x1c,0x1c,0x1c,0x1c
000804  1d1d1d1d          DCB      0x1d,0x1d,0x1d,0x1d
000808  1d1d1d1d          DCB      0x1d,0x1d,0x1d,0x1d
00080c  1d1d1d1d          DCB      0x1d,0x1d,0x1d,0x1d
000810  1d1d1d1d          DCB      0x1d,0x1d,0x1d,0x1d
000814  1d1d1d1d          DCB      0x1d,0x1d,0x1d,0x1d
000818  1d1d1d1d          DCB      0x1d,0x1d,0x1d,0x1d
00081c  1d1d1d1d          DCB      0x1d,0x1d,0x1d,0x1d
000820  1d1d1d1d          DCB      0x1d,0x1d,0x1d,0x1d
000824  1d1d1d1d          DCB      0x1d,0x1d,0x1d,0x1d
000828  1d1d1d1d          DCB      0x1d,0x1d,0x1d,0x1d
00082c  1d1d1d1d          DCB      0x1d,0x1d,0x1d,0x1d
000830  1d1d1d1d          DCB      0x1d,0x1d,0x1d,0x1d
000834  1d1d1d1d          DCB      0x1d,0x1d,0x1d,0x1d
000838  1d1d1d1d          DCB      0x1d,0x1d,0x1d,0x1d
00083c  1d1d1d1d          DCB      0x1d,0x1d,0x1d,0x1d
000840  1d1d1d1d          DCB      0x1d,0x1d,0x1d,0x1d
                  _length_code
000844  00010203          DCB      0x00,0x01,0x02,0x03
000848  04050607          DCB      0x04,0x05,0x06,0x07
00084c  08080909          DCB      0x08,0x08,0x09,0x09
000850  0a0a0b0b          DCB      0x0a,0x0a,0x0b,0x0b
000854  0c0c0c0c          DCB      0x0c,0x0c,0x0c,0x0c
000858  0d0d0d0d          DCB      0x0d,0x0d,0x0d,0x0d
00085c  0e0e0e0e          DCB      0x0e,0x0e,0x0e,0x0e
000860  0f0f0f0f          DCB      0x0f,0x0f,0x0f,0x0f
000864  10101010          DCB      0x10,0x10,0x10,0x10
000868  10101010          DCB      0x10,0x10,0x10,0x10
00086c  11111111          DCB      0x11,0x11,0x11,0x11
000870  11111111          DCB      0x11,0x11,0x11,0x11
000874  12121212          DCB      0x12,0x12,0x12,0x12
000878  12121212          DCB      0x12,0x12,0x12,0x12
00087c  13131313          DCB      0x13,0x13,0x13,0x13
000880  13131313          DCB      0x13,0x13,0x13,0x13
000884  14141414          DCB      0x14,0x14,0x14,0x14
000888  14141414          DCB      0x14,0x14,0x14,0x14
00088c  14141414          DCB      0x14,0x14,0x14,0x14
000890  14141414          DCB      0x14,0x14,0x14,0x14
000894  15151515          DCB      0x15,0x15,0x15,0x15
000898  15151515          DCB      0x15,0x15,0x15,0x15
00089c  15151515          DCB      0x15,0x15,0x15,0x15
0008a0  15151515          DCB      0x15,0x15,0x15,0x15
0008a4  16161616          DCB      0x16,0x16,0x16,0x16
0008a8  16161616          DCB      0x16,0x16,0x16,0x16
0008ac  16161616          DCB      0x16,0x16,0x16,0x16
0008b0  16161616          DCB      0x16,0x16,0x16,0x16
0008b4  17171717          DCB      0x17,0x17,0x17,0x17
0008b8  17171717          DCB      0x17,0x17,0x17,0x17
0008bc  17171717          DCB      0x17,0x17,0x17,0x17
0008c0  17171717          DCB      0x17,0x17,0x17,0x17
0008c4  18181818          DCB      0x18,0x18,0x18,0x18
0008c8  18181818          DCB      0x18,0x18,0x18,0x18
0008cc  18181818          DCB      0x18,0x18,0x18,0x18
0008d0  18181818          DCB      0x18,0x18,0x18,0x18
0008d4  18181818          DCB      0x18,0x18,0x18,0x18
0008d8  18181818          DCB      0x18,0x18,0x18,0x18
0008dc  18181818          DCB      0x18,0x18,0x18,0x18
0008e0  18181818          DCB      0x18,0x18,0x18,0x18
0008e4  19191919          DCB      0x19,0x19,0x19,0x19
0008e8  19191919          DCB      0x19,0x19,0x19,0x19
0008ec  19191919          DCB      0x19,0x19,0x19,0x19
0008f0  19191919          DCB      0x19,0x19,0x19,0x19
0008f4  19191919          DCB      0x19,0x19,0x19,0x19
0008f8  19191919          DCB      0x19,0x19,0x19,0x19
0008fc  19191919          DCB      0x19,0x19,0x19,0x19
000900  19191919          DCB      0x19,0x19,0x19,0x19
000904  1a1a1a1a          DCB      0x1a,0x1a,0x1a,0x1a
000908  1a1a1a1a          DCB      0x1a,0x1a,0x1a,0x1a
00090c  1a1a1a1a          DCB      0x1a,0x1a,0x1a,0x1a
000910  1a1a1a1a          DCB      0x1a,0x1a,0x1a,0x1a
000914  1a1a1a1a          DCB      0x1a,0x1a,0x1a,0x1a
000918  1a1a1a1a          DCB      0x1a,0x1a,0x1a,0x1a
00091c  1a1a1a1a          DCB      0x1a,0x1a,0x1a,0x1a
000920  1a1a1a1a          DCB      0x1a,0x1a,0x1a,0x1a
000924  1b1b1b1b          DCB      0x1b,0x1b,0x1b,0x1b
000928  1b1b1b1b          DCB      0x1b,0x1b,0x1b,0x1b
00092c  1b1b1b1b          DCB      0x1b,0x1b,0x1b,0x1b
000930  1b1b1b1b          DCB      0x1b,0x1b,0x1b,0x1b
000934  1b1b1b1b          DCB      0x1b,0x1b,0x1b,0x1b
000938  1b1b1b1b          DCB      0x1b,0x1b,0x1b,0x1b
00093c  1b1b1b1b          DCB      0x1b,0x1b,0x1b,0x1b
000940  1b1b1b1c          DCB      0x1b,0x1b,0x1b,0x1c
                  base_length
                          DCD      0x00000000
                          DCD      0x00000001
                          DCD      0x00000002
                          DCD      0x00000003
                          DCD      0x00000004
                          DCD      0x00000005
                          DCD      0x00000006
                          DCD      0x00000007
                          DCD      0x00000008
                          DCD      0x0000000a
                          DCD      0x0000000c
                          DCD      0x0000000e
                          DCD      0x00000010
                          DCD      0x00000014
                          DCD      0x00000018
                          DCD      0x0000001c
                          DCD      0x00000020
                          DCD      0x00000028
                          DCD      0x00000030
                          DCD      0x00000038
                          DCD      0x00000040
                          DCD      0x00000050
                          DCD      0x00000060
                          DCD      0x00000070
                          DCD      0x00000080
                          DCD      0x000000a0
                          DCD      0x000000c0
                          DCD      0x000000e0
                          DCD      0x00000000
                  base_dist
                          DCD      0x00000000
                          DCD      0x00000001
                          DCD      0x00000002
                          DCD      0x00000003
                          DCD      0x00000004
                          DCD      0x00000006
                          DCD      0x00000008
                          DCD      0x0000000c
                          DCD      0x00000010
                          DCD      0x00000018
                          DCD      0x00000020
                          DCD      0x00000030
                          DCD      0x00000040
                          DCD      0x00000060
                          DCD      0x00000080
                          DCD      0x000000c0
                          DCD      0x00000100
                          DCD      0x00000180
                          DCD      0x00000200
                          DCD      0x00000300
                          DCD      0x00000400
                          DCD      0x00000600
                          DCD      0x00000800
                          DCD      0x00000c00
                          DCD      0x00001000
                          DCD      0x00001800
                          DCD      0x00002000
                          DCD      0x00003000
                          DCD      0x00004000
                          DCD      0x00006000

                          AREA ||.data||, DATA, ALIGN=2

                  static_l_desc
                          DCD      static_ltree
                          DCD      extra_lbits
                          DCD      0x00000101
                          DCD      0x0000011e
                          DCD      0x0000000f
                  static_d_desc
                          DCD      static_dtree
                          DCD      extra_dbits
                          DCD      0x00000000
                          DCD      0x0000001e
                          DCD      0x0000000f
                  static_bl_desc
                          DCD      0x00000000
                          DCD      extra_blbits
                          DCD      0x00000000
                          DCD      0x00000013
                          DCD      0x00000007
