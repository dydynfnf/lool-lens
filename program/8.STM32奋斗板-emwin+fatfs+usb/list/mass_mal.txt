; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\mass_mal.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\mass_mal.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\FWlib\inc -I.\user -I.\CM3 -I.\MALLOC -I.\TFT -I.\EMWIN\EMWIN_INC -I.\EMWIN\DEMO -I.\PNG -I.\FATFS -I.\SDIO -I.\USB\inc -I.\USBCFG\inc -IE:\material\GUI\8.STM32奋斗板-emwin+fatfs+usb\RTE -Id:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.0.0 -Id:\Keil_v5\ARM\CMSIS\Include -Id:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.0.0\Device\Include -D__UVISION_VERSION=514 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\mass_mal.crf USBCFG\scr\mass_mal.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  MAL_Init PROC
;;;55     ****************************************************************************/
;;;56     uint16_t MAL_Init(uint8_t lun)
000000  b570              PUSH     {r4-r6,lr}
;;;57     {
000002  4604              MOV      r4,r0
;;;58       uint16_t status = MAL_OK;
000004  2500              MOVS     r5,#0
;;;59     
;;;60       switch (lun)
000006  bb54              CBNZ     r4,|L1.94|
;;;61       {
;;;62         case 0:
;;;63     
;;;64           Status = SD_Init();
000008  f7fffffe          BL       SD_Init
00000c  496a              LDR      r1,|L1.440|
00000e  6008              STR      r0,[r1,#0]  ; Status
;;;65           Status = SD_GetCardInfo(&SDCardInfo);
000010  486a              LDR      r0,|L1.444|
000012  f7fffffe          BL       SD_GetCardInfo
000016  4968              LDR      r1,|L1.440|
000018  6008              STR      r0,[r1,#0]  ; Status
;;;66           Status = SD_SelectDeselect((uint32_t) (SDCardInfo.RCA << 16));
00001a  4968              LDR      r1,|L1.444|
00001c  f8b1104c          LDRH     r1,[r1,#0x4c]  ; SDCardInfo
000020  0408              LSLS     r0,r1,#16
000022  f7fffffe          BL       SD_SelectDeselect
000026  4964              LDR      r1,|L1.440|
000028  6008              STR      r0,[r1,#0]  ; Status
;;;67           Status = SD_EnableWideBusOperation(SDIO_BusWide_4b);
00002a  f44f6000          MOV      r0,#0x800
00002e  f7fffffe          BL       SD_EnableWideBusOperation
000032  4961              LDR      r1,|L1.440|
000034  6008              STR      r0,[r1,#0]  ; Status
;;;68           Status = SD_SetDeviceMode(SD_DMA_MODE);  
000036  2000              MOVS     r0,#0
000038  f7fffffe          BL       SD_SetDeviceMode
00003c  495e              LDR      r1,|L1.440|
00003e  6008              STR      r0,[r1,#0]  ; Status
;;;69      
;;;70      	  if (Status == SD_OK)
000040  4608              MOV      r0,r1
000042  6800              LDR      r0,[r0,#0]  ; Status
000044  282a              CMP      r0,#0x2a
000046  d107              BNE      |L1.88|
;;;71       	  {	
;;;72             // 从地址0开始读取512字节 
;;;73         	Status = SD_ReadBlock(Buffer_Block_Rx, 0x00,  BlockSize); 
000048  f44f7200          MOV      r2,#0x200
00004c  2100              MOVS     r1,#0
00004e  485c              LDR      r0,|L1.448|
000050  f7fffffe          BL       SD_ReadBlock
000054  4958              LDR      r1,|L1.440|
000056  6008              STR      r0,[r1,#0]  ; Status
                  |L1.88|
;;;74       	  }
;;;75       	  if (Status == SD_OK)
000058  4857              LDR      r0,|L1.440|
00005a  6800              LDR      r0,[r0,#0]  ; Status
;;;76           {	 
;;;77              // 返回成功的话，串口输出SD卡测试成功信息 
;;;78     //		 USART_OUT(USART1,"\r\nSD SDIO-4bit模式 测试TF卡读写成功！ \n ");
;;;79           } 
;;;80           break;
00005c  e001              B        |L1.98|
                  |L1.94|
;;;81         default:
;;;82           return MAL_FAIL;
00005e  2001              MOVS     r0,#1
                  |L1.96|
;;;83       }
;;;84       return status;
;;;85     }
000060  bd70              POP      {r4-r6,pc}
                  |L1.98|
000062  bf00              NOP                            ;80
000064  4628              MOV      r0,r5                 ;84
000066  e7fb              B        |L1.96|
;;;86     
                          ENDP

                  MAL_Write PROC
;;;94     ****************************************************************************/
;;;95     uint16_t MAL_Write(uint8_t lun, uint32_t Memory_Offset, uint32_t *Writebuff, uint16_t Transfer_Length)
000068  e92d41f0          PUSH     {r4-r8,lr}
;;;96     {
00006c  4604              MOV      r4,r0
00006e  460f              MOV      r7,r1
000070  4615              MOV      r5,r2
000072  461e              MOV      r6,r3
;;;97     
;;;98       switch (lun)
000074  b974              CBNZ     r4,|L1.148|
;;;99       {
;;;100        case 0:
;;;101    	  //在指定地址连续写入指定长度的数据
;;;102          Status = SD_WriteBlock(Writebuff,Memory_Offset,  Transfer_Length);
000076  4632              MOV      r2,r6
000078  4639              MOV      r1,r7
00007a  4628              MOV      r0,r5
00007c  f7fffffe          BL       SD_WriteBlock
000080  494d              LDR      r1,|L1.440|
000082  6008              STR      r0,[r1,#0]  ; Status
;;;103          if ( Status != SD_OK )
000084  4608              MOV      r0,r1
000086  6800              LDR      r0,[r0,#0]  ; Status
000088  282a              CMP      r0,#0x2a
00008a  d002              BEQ      |L1.146|
;;;104          {
;;;105            return MAL_FAIL;
00008c  2001              MOVS     r0,#1
                  |L1.142|
;;;106          }      
;;;107    
;;;108          break;
;;;109    
;;;110        default:
;;;111          return MAL_FAIL;
;;;112      }
;;;113      return MAL_OK;
;;;114    }
00008e  e8bd81f0          POP      {r4-r8,pc}
                  |L1.146|
000092  e001              B        |L1.152|
                  |L1.148|
000094  2001              MOVS     r0,#1                 ;111
000096  e7fa              B        |L1.142|
                  |L1.152|
000098  bf00              NOP                            ;108
00009a  2000              MOVS     r0,#0                 ;113
00009c  e7f7              B        |L1.142|
;;;115    
                          ENDP

                  MAL_Read PROC
;;;123    ****************************************************************************/
;;;124    uint16_t MAL_Read(uint8_t lun, uint32_t Memory_Offset, uint32_t *Readbuff, uint16_t Transfer_Length)
00009e  e92d41f0          PUSH     {r4-r8,lr}
;;;125    {
0000a2  4604              MOV      r4,r0
0000a4  460f              MOV      r7,r1
0000a6  4615              MOV      r5,r2
0000a8  461e              MOV      r6,r3
;;;126    
;;;127      switch (lun)
0000aa  b974              CBNZ     r4,|L1.202|
;;;128      {
;;;129        case 0:
;;;130    	  //从指定地址连续读出指定长度的数据
;;;131          Status = SD_ReadBlock(Readbuff,Memory_Offset,  Transfer_Length);
0000ac  4632              MOV      r2,r6
0000ae  4639              MOV      r1,r7
0000b0  4628              MOV      r0,r5
0000b2  f7fffffe          BL       SD_ReadBlock
0000b6  4940              LDR      r1,|L1.440|
0000b8  6008              STR      r0,[r1,#0]  ; Status
;;;132          if ( Status != SD_OK )
0000ba  4608              MOV      r0,r1
0000bc  6800              LDR      r0,[r0,#0]  ; Status
0000be  282a              CMP      r0,#0x2a
0000c0  d002              BEQ      |L1.200|
;;;133          {
;;;134            return MAL_FAIL;
0000c2  2001              MOVS     r0,#1
                  |L1.196|
;;;135          }
;;;136    
;;;137          break;
;;;138    
;;;139        default:
;;;140          return MAL_FAIL;
;;;141      }
;;;142      return MAL_OK;
;;;143    }
0000c4  e8bd81f0          POP      {r4-r8,pc}
                  |L1.200|
0000c8  e001              B        |L1.206|
                  |L1.202|
0000ca  2001              MOVS     r0,#1                 ;140
0000cc  e7fa              B        |L1.196|
                  |L1.206|
0000ce  bf00              NOP                            ;137
0000d0  2000              MOVS     r0,#0                 ;142
0000d2  e7f7              B        |L1.196|
;;;144    
                          ENDP

                  MAL_GetStatus PROC
;;;152    ****************************************************************************/
;;;153    uint16_t MAL_GetStatus (uint8_t lun)
0000d4  b570              PUSH     {r4-r6,lr}
;;;154    {
0000d6  4604              MOV      r4,r0
;;;155    
;;;156    
;;;157      uint32_t DeviceSizeMul = 0, NumberOfBlocks = 0;
0000d8  2500              MOVS     r5,#0
0000da  2600              MOVS     r6,#0
;;;158      if (lun == 0)
0000dc  2c00              CMP      r4,#0
0000de  d164              BNE      |L1.426|
;;;159      {
;;;160    
;;;161        if (SD_Init() == SD_OK)
0000e0  f7fffffe          BL       SD_Init
0000e4  282a              CMP      r0,#0x2a
0000e6  d160              BNE      |L1.426|
;;;162        {
;;;163          SD_GetCardInfo(&SDCardInfo);
0000e8  4834              LDR      r0,|L1.444|
0000ea  f7fffffe          BL       SD_GetCardInfo
;;;164          SD_SelectDeselect((uint32_t) (SDCardInfo.RCA << 16));
0000ee  4933              LDR      r1,|L1.444|
0000f0  f8b1104c          LDRH     r1,[r1,#0x4c]  ; SDCardInfo
0000f4  0408              LSLS     r0,r1,#16
0000f6  f7fffffe          BL       SD_SelectDeselect
;;;165          DeviceSizeMul = (SDCardInfo.SD_csd.DeviceSizeMul + 2);
0000fa  4830              LDR      r0,|L1.444|
0000fc  7e00              LDRB     r0,[r0,#0x18]  ; SDCardInfo
0000fe  1c85              ADDS     r5,r0,#2
;;;166    
;;;167          if(SDCardInfo.CardType == SDIO_HIGH_CAPACITY_SD_CARD)
000100  482e              LDR      r0,|L1.444|
000102  f890004e          LDRB     r0,[r0,#0x4e]  ; SDCardInfo
000106  2802              CMP      r0,#2
000108  d106              BNE      |L1.280|
;;;168          {
;;;169            Mass_Block_Count[0] = (SDCardInfo.SD_csd.DeviceSize + 1) * 1024;
00010a  482c              LDR      r0,|L1.444|
00010c  6900              LDR      r0,[r0,#0x10]  ; SDCardInfo
00010e  1c40              ADDS     r0,r0,#1
000110  0280              LSLS     r0,r0,#10
000112  492c              LDR      r1,|L1.452|
000114  6008              STR      r0,[r1,#0]  ; Mass_Block_Count
000116  e012              B        |L1.318|
                  |L1.280|
;;;170          }
;;;171          else
;;;172          {
;;;173            NumberOfBlocks  = ((1 << (SDCardInfo.SD_csd.RdBlockLen)) / 512);
000118  4928              LDR      r1,|L1.444|
00011a  7a0a              LDRB     r2,[r1,#8]  ; SDCardInfo
00011c  2101              MOVS     r1,#1
00011e  fa01f002          LSL      r0,r1,r2
000122  17c1              ASRS     r1,r0,#31
000124  eb0051d1          ADD      r1,r0,r1,LSR #23
000128  124e              ASRS     r6,r1,#9
;;;174            Mass_Block_Count[0] = ((SDCardInfo.SD_csd.DeviceSize + 1) * (1 << DeviceSizeMul) << (NumberOfBlocks/2));
00012a  4824              LDR      r0,|L1.444|
00012c  6900              LDR      r0,[r0,#0x10]  ; SDCardInfo
00012e  1c40              ADDS     r0,r0,#1
000130  2101              MOVS     r1,#1
000132  40a9              LSLS     r1,r1,r5
000134  4348              MULS     r0,r1,r0
000136  0871              LSRS     r1,r6,#1
000138  4088              LSLS     r0,r0,r1
00013a  4922              LDR      r1,|L1.452|
00013c  6008              STR      r0,[r1,#0]  ; Mass_Block_Count
                  |L1.318|
;;;175          }
;;;176          Mass_Block_Size[0]  = 512;
00013e  f44f7000          MOV      r0,#0x200
000142  4921              LDR      r1,|L1.456|
000144  6008              STR      r0,[r1,#0]  ; Mass_Block_Size
;;;177    
;;;178          Status = SD_SelectDeselect((uint32_t) (SDCardInfo.RCA << 16)); 
000146  491d              LDR      r1,|L1.444|
000148  f8b1104c          LDRH     r1,[r1,#0x4c]  ; SDCardInfo
00014c  0408              LSLS     r0,r1,#16
00014e  f7fffffe          BL       SD_SelectDeselect
000152  4919              LDR      r1,|L1.440|
000154  6008              STR      r0,[r1,#0]  ; Status
;;;179          Status = SD_EnableWideBusOperation(SDIO_BusWide_4b); 
000156  f44f6000          MOV      r0,#0x800
00015a  f7fffffe          BL       SD_EnableWideBusOperation
00015e  4916              LDR      r1,|L1.440|
000160  6008              STR      r0,[r1,#0]  ; Status
;;;180          if ( Status != SD_OK )
000162  4608              MOV      r0,r1
000164  6800              LDR      r0,[r0,#0]  ; Status
000166  282a              CMP      r0,#0x2a
000168  d001              BEQ      |L1.366|
;;;181          {
;;;182            return MAL_FAIL;
00016a  2001              MOVS     r0,#1
                  |L1.364|
;;;183          }
;;;184           
;;;185          Status = SD_SetDeviceMode(SD_DMA_MODE);         
;;;186          if ( Status != SD_OK )
;;;187          {
;;;188            return MAL_FAIL;
;;;189          } 
;;;190          Mass_Memory_Size[0] = Mass_Block_Count[0] * Mass_Block_Size[0];
;;;191          Led_ON();
;;;192    	  if(dis_mem==0){		//显示TF卡的容量	由于是周期性更新状态，所以，加了条件，只显示一次容量值
;;;193    //	  	USART_OUT(USART1,"\r\n Micro SD卡的容量是  %d MBytes\n" ,Mass_Memory_Size[0]/1024/1024);
;;;194          	dis_mem=1;
;;;195    	  }
;;;196    	  return MAL_OK;
;;;197        }
;;;198      }
;;;199      Led_ON();
;;;200      return MAL_FAIL;
;;;201    }
00016c  bd70              POP      {r4-r6,pc}
                  |L1.366|
00016e  2000              MOVS     r0,#0                 ;185
000170  f7fffffe          BL       SD_SetDeviceMode
000174  4910              LDR      r1,|L1.440|
000176  6008              STR      r0,[r1,#0]            ;185  ; Status
000178  4608              MOV      r0,r1                 ;186
00017a  6800              LDR      r0,[r0,#0]            ;186  ; Status
00017c  282a              CMP      r0,#0x2a              ;186
00017e  d001              BEQ      |L1.388|
000180  2001              MOVS     r0,#1                 ;188
000182  e7f3              B        |L1.364|
                  |L1.388|
000184  480f              LDR      r0,|L1.452|
000186  6800              LDR      r0,[r0,#0]            ;190  ; Mass_Block_Count
000188  490f              LDR      r1,|L1.456|
00018a  6809              LDR      r1,[r1,#0]            ;190  ; Mass_Block_Size
00018c  4348              MULS     r0,r1,r0              ;190
00018e  490f              LDR      r1,|L1.460|
000190  6008              STR      r0,[r1,#0]            ;190  ; Mass_Memory_Size
000192  2120              MOVS     r1,#0x20              ;191
000194  480e              LDR      r0,|L1.464|
000196  f7fffffe          BL       GPIO_SetBits
00019a  480e              LDR      r0,|L1.468|
00019c  7800              LDRB     r0,[r0,#0]            ;192  ; dis_mem
00019e  b910              CBNZ     r0,|L1.422|
0001a0  2001              MOVS     r0,#1                 ;194
0001a2  490c              LDR      r1,|L1.468|
0001a4  7008              STRB     r0,[r1,#0]            ;194
                  |L1.422|
0001a6  2000              MOVS     r0,#0                 ;196
0001a8  e7e0              B        |L1.364|
                  |L1.426|
0001aa  2120              MOVS     r1,#0x20              ;199
0001ac  4808              LDR      r0,|L1.464|
0001ae  f7fffffe          BL       GPIO_SetBits
0001b2  2001              MOVS     r0,#1                 ;200
0001b4  e7da              B        |L1.364|
;;;202    /******************* (C) COPYRIGHT 2011 奋斗STM32 *****END OF FILE****/
                          ENDP

0001b6  0000              DCW      0x0000
                  |L1.440|
                          DCD      Status
                  |L1.444|
                          DCD      SDCardInfo
                  |L1.448|
                          DCD      Buffer_Block_Rx
                  |L1.452|
                          DCD      Mass_Block_Count
                  |L1.456|
                          DCD      Mass_Block_Size
                  |L1.460|
                          DCD      Mass_Memory_Size
                  |L1.464|
                          DCD      0x40010c00
                  |L1.468|
                          DCD      dis_mem

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  Buffer_Block_Tx
                          %        512
                  Buffer_Block_Rx
                          %        512
                  Buffer_MultiBlock_Tx
                          %        1024
                  Buffer_MultiBlock_Rx
                          %        1024

                          AREA ||.data||, DATA, ALIGN=2

                  Mass_Memory_Size1
                          DCD      0x00000000
                  Mass_Block_Size1
                          DCD      0x00000000
                  Mass_Block_Count1
                          DCD      0x00000000
                  Status
                          DCD      0x00000000
                  dis_mem
000010  00                DCB      0x00
