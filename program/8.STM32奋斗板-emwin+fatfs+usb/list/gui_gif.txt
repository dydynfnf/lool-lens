; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\gui_gif.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\gui_gif.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -I.\GUI\AntiAlias -I.\GUI\Config -I.\GUI\ConvertColor -I.\GUI\ConvertMono -I.\GUI\Core -I.\GUI\Font -I.\GUI\GUI_X -I.\GUI\JPEG -I.\GUI\LCDDriver -I.\GUI\MemDev -I.\GUI\MultiLayer -I.\GUI\Widget -I.\GUI\WM -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\INC\ST\STM32F10x -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\gui_gif.crf GUI\Core\GUI_GIF.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _ReadU8 PROC
;;;122    */
;;;123    static U8 _ReadU8(void) {
000000  48f7              LDR      r0,|L1.992|
;;;124      U8 Value;
;;;125      _Source.RemBytes -= 1;
000002  6840              LDR      r0,[r0,#4]  ; _Source
000004  f1a00001          SUB      r0,r0,#1
000008  4af5              LDR      r2,|L1.992|
00000a  6050              STR      r0,[r2,#4]  ; _Source
;;;126      if (_Source.RemBytes < 0) {
00000c  4610              MOV      r0,r2
00000e  6840              LDR      r0,[r0,#4]  ; _Source
000010  2800              CMP      r0,#0
000012  da01              BGE      |L1.24|
;;;127        return 0;
000014  2000              MOVS     r0,#0
                  |L1.22|
;;;128      }
;;;129      Value = *(_Source.pSrc++);
;;;130      return Value;
;;;131    }
000016  4770              BX       lr
                  |L1.24|
000018  48f1              LDR      r0,|L1.992|
00001a  6800              LDR      r0,[r0,#0]            ;129  ; _Source
00001c  7801              LDRB     r1,[r0,#0]            ;129
00001e  48f0              LDR      r0,|L1.992|
000020  6800              LDR      r0,[r0,#0]            ;129  ; _Source
000022  f1000001          ADD      r0,r0,#1              ;129
000026  4aee              LDR      r2,|L1.992|
000028  6010              STR      r0,[r2,#0]            ;129  ; _Source
00002a  4608              MOV      r0,r1                 ;130
00002c  e7f3              B        |L1.22|
;;;132    
                          ENDP

                  _ReadU16 PROC
;;;139    */
;;;140    static U16 _ReadU16(void) {
00002e  b570              PUSH     {r4-r6,lr}
;;;141      U16 Value;
;;;142      U8 Byte0, Byte1;
;;;143      Byte0 = _ReadU8();
000030  f7fffffe          BL       _ReadU8
000034  4605              MOV      r5,r0
;;;144      Byte1 = _ReadU8();
000036  f7fffffe          BL       _ReadU8
00003a  4606              MOV      r6,r0
;;;145      Value = (Byte1 << 8) | Byte0;
00003c  ea452406          ORR      r4,r5,r6,LSL #8
;;;146      return Value;
000040  4620              MOV      r0,r4
;;;147    }
000042  bd70              POP      {r4-r6,pc}
;;;148    
                          ENDP

                  _ReadBytes PROC
;;;155    */
;;;156    static void _ReadBytes(U8 * pBuffer, int Len) {
000044  b570              PUSH     {r4-r6,lr}
000046  4605              MOV      r5,r0
000048  460c              MOV      r4,r1
;;;157      if (_Source.RemBytes < 0) {
00004a  48e5              LDR      r0,|L1.992|
00004c  6840              LDR      r0,[r0,#4]  ; _Source
00004e  2800              CMP      r0,#0
000050  da00              BGE      |L1.84|
                  |L1.82|
;;;158        return;
;;;159      }
;;;160      if (_Source.RemBytes < Len) {
;;;161        Len = _Source.RemBytes;
;;;162        return;
;;;163      }
;;;164      _Source.RemBytes -= Len;
;;;165      memcpy(pBuffer, _Source.pSrc, Len);
;;;166      _Source.pSrc += Len;
;;;167    }
000052  bd70              POP      {r4-r6,pc}
                  |L1.84|
000054  48e2              LDR      r0,|L1.992|
000056  6840              LDR      r0,[r0,#4]            ;160  ; _Source
000058  42a0              CMP      r0,r4                 ;160
00005a  da02              BGE      |L1.98|
00005c  48e0              LDR      r0,|L1.992|
00005e  6844              LDR      r4,[r0,#4]            ;161  ; _Source
000060  e7f7              B        |L1.82|
                  |L1.98|
000062  48df              LDR      r0,|L1.992|
000064  6840              LDR      r0,[r0,#4]            ;164  ; _Source
000066  eba00004          SUB      r0,r0,r4              ;164
00006a  49dd              LDR      r1,|L1.992|
00006c  6048              STR      r0,[r1,#4]            ;164  ; _Source
00006e  4608              MOV      r0,r1                 ;165
000070  4622              MOV      r2,r4                 ;165
000072  6801              LDR      r1,[r0,#0]            ;165  ; _Source
000074  4628              MOV      r0,r5                 ;165
000076  f7fffffe          BL       __aeabi_memcpy
00007a  48d9              LDR      r0,|L1.992|
00007c  6800              LDR      r0,[r0,#0]            ;166  ; _Source
00007e  4420              ADD      r0,r0,r4              ;166
000080  49d7              LDR      r1,|L1.992|
000082  6008              STR      r0,[r1,#0]            ;166  ; _Source
000084  bf00              NOP      
000086  e7e4              B        |L1.82|
;;;168    
                          ENDP

                  _SkipBytes PROC
;;;175    */
;;;176    static void _SkipBytes(int Len) {
000088  49d5              LDR      r1,|L1.992|
;;;177      if (_Source.RemBytes < 0) {
00008a  6849              LDR      r1,[r1,#4]  ; _Source
00008c  2900              CMP      r1,#0
00008e  da00              BGE      |L1.146|
                  |L1.144|
;;;178        return;
;;;179      }
;;;180      if (_Source.RemBytes < Len) {
;;;181        Len = _Source.RemBytes;
;;;182        return;
;;;183      }
;;;184      _Source.RemBytes -= Len;
;;;185      _Source.pSrc += Len;
;;;186    }
000090  4770              BX       lr
                  |L1.146|
000092  49d3              LDR      r1,|L1.992|
000094  6849              LDR      r1,[r1,#4]            ;180  ; _Source
000096  4281              CMP      r1,r0                 ;180
000098  da02              BGE      |L1.160|
00009a  49d1              LDR      r1,|L1.992|
00009c  6848              LDR      r0,[r1,#4]            ;181  ; _Source
00009e  e7f7              B        |L1.144|
                  |L1.160|
0000a0  49cf              LDR      r1,|L1.992|
0000a2  6849              LDR      r1,[r1,#4]            ;184  ; _Source
0000a4  eba10100          SUB      r1,r1,r0              ;184
0000a8  4acd              LDR      r2,|L1.992|
0000aa  6051              STR      r1,[r2,#4]            ;184  ; _Source
0000ac  4611              MOV      r1,r2                 ;185
0000ae  6809              LDR      r1,[r1,#0]            ;185  ; _Source
0000b0  4401              ADD      r1,r1,r0              ;185
0000b2  6011              STR      r1,[r2,#0]            ;185  ; _Source
0000b4  bf00              NOP      
0000b6  e7eb              B        |L1.144|
;;;187    
                          ENDP

                  _InitLZW PROC
;;;194    */
;;;195    static void _InitLZW(int InputCodeSize) {
0000b8  b510              PUSH     {r4,lr}
0000ba  4604              MOV      r4,r0
;;;196      GUI__memset((U8 *)&_LZWContext, 0, sizeof(LZW_CONTEXT));
0000bc  f64342f4          MOV      r2,#0x3cf4
0000c0  f04f0100          MOV      r1,#0
0000c4  48c7              LDR      r0,|L1.996|
0000c6  f7fffffe          BL       GUI__memset
;;;197      _LZWContext.SetCodeSize  = InputCodeSize;
0000ca  48c7              LDR      r0,|L1.1000|
0000cc  6004              STR      r4,[r0,#0]
;;;198      _LZWContext.CodeSize     = InputCodeSize + 1;
0000ce  f1040001          ADD      r0,r4,#1
0000d2  49c5              LDR      r1,|L1.1000|
0000d4  f1a10104          SUB      r1,r1,#4
0000d8  6008              STR      r0,[r1,#0]
;;;199      _LZWContext.ClearCode    = (1 << InputCodeSize);
0000da  f04f0001          MOV      r0,#1
0000de  fa00f004          LSL      r0,r0,r4
0000e2  f1010110          ADD      r1,r1,#0x10
0000e6  6008              STR      r0,[r1,#0]
;;;200      _LZWContext.EndCode      = (1 << InputCodeSize) + 1;
0000e8  f04f0001          MOV      r0,#1
0000ec  fa00f004          LSL      r0,r0,r4
0000f0  f1000001          ADD      r0,r0,#1
0000f4  f1010104          ADD      r1,r1,#4
0000f8  6008              STR      r0,[r1,#0]
;;;201      _LZWContext.MaxCode      = (1 << InputCodeSize) + 2;
0000fa  f04f0001          MOV      r0,#1
0000fe  fa00f004          LSL      r0,r0,r4
000102  f1000002          ADD      r0,r0,#2
000106  f1a1010c          SUB      r1,r1,#0xc
00010a  6008              STR      r0,[r1,#0]
;;;202      _LZWContext.MaxCodeSize  = (1 << InputCodeSize) << 1;
00010c  f04f0001          MOV      r0,#1
000110  fa00f004          LSL      r0,r0,r4
000114  ea4f0040          LSL      r0,r0,#1
000118  f1010104          ADD      r1,r1,#4
00011c  6008              STR      r0,[r1,#0]
;;;203      _LZWContext.ReturnClear  = 1;
00011e  f04f0001          MOV      r0,#1
000122  f1a10110          SUB      r1,r1,#0x10
000126  6008              STR      r0,[r1,#0]
;;;204      _LZWContext.LastByte     = 2;
000128  f04f0002          MOV      r0,#2
00012c  f1a10104          SUB      r1,r1,#4
000130  6008              STR      r0,[r1,#0]
;;;205      _LZWContext.sp           = _LZWContext.aDecompBuffer;
000132  f6a130ca          SUB      r0,r1,#0xbca
000136  f60031ba          ADD      r1,r0,#0xbba
00013a  6008              STR      r0,[r1,#0]
;;;206    }
00013c  bd10              POP      {r4,pc}
;;;207    
                          ENDP

                  _GetDataBlock PROC
;;;218    */
;;;219    static int _GetDataBlock(U8 * pBuffer) {
00013e  b570              PUSH     {r4-r6,lr}
000140  4605              MOV      r5,r0
;;;220      U8 Count;
;;;221      Count = _ReadU8(); /* Read the length of the data block */
000142  f7fffffe          BL       _ReadU8
000146  4604              MOV      r4,r0
;;;222      if (Count) {
000148  b154              CBZ      r4,|L1.352|
;;;223        if (pBuffer) {
00014a  b125              CBZ      r5,|L1.342|
;;;224          _ReadBytes(pBuffer, Count);
00014c  4621              MOV      r1,r4
00014e  4628              MOV      r0,r5
000150  f7fffffe          BL       _ReadBytes
000154  e004              B        |L1.352|
                  |L1.342|
;;;225        } else {
;;;226          _Source.pSrc += Count;
000156  48a2              LDR      r0,|L1.992|
000158  6800              LDR      r0,[r0,#0]  ; _Source
00015a  4420              ADD      r0,r0,r4
00015c  49a0              LDR      r1,|L1.992|
00015e  6008              STR      r0,[r1,#0]  ; _Source
                  |L1.352|
;;;227        }
;;;228      }
;;;229      return((int)Count);
000160  4620              MOV      r0,r4
;;;230    }
000162  bd70              POP      {r4-r6,pc}
;;;231    
                          ENDP

                  _GetNextCode PROC
;;;242    */
;;;243    static int _GetNextCode(void) {
000164  e92d41f0          PUSH     {r4-r8,lr}
;;;244      int i, j, End;
;;;245      long Result;
;;;246      if (_LZWContext.ReturnClear) {
000168  489f              LDR      r0,|L1.1000|
00016a  3808              SUBS     r0,r0,#8
00016c  6800              LDR      r0,[r0,#0]
00016e  b150              CBZ      r0,|L1.390|
;;;247        /* The first code should be a clear code. */
;;;248        _LZWContext.ReturnClear = 0;
000170  f04f0000          MOV      r0,#0
000174  499c              LDR      r1,|L1.1000|
000176  f1a10108          SUB      r1,r1,#8
00017a  6008              STR      r0,[r1,#0]
;;;249        return _LZWContext.ClearCode;
00017c  f1010014          ADD      r0,r1,#0x14
000180  6800              LDR      r0,[r0,#0]
                  |L1.386|
;;;250      }
;;;251      End = _LZWContext.CurBit + _LZWContext.CodeSize;
;;;252      if (End >= _LZWContext.LastBit) {
;;;253        int Count;
;;;254        if (_LZWContext.GetDone) {
;;;255          return -1; /* Error */
;;;256        }
;;;257        _LZWContext.aBuffer[0] = _LZWContext.aBuffer[_LZWContext.LastByte - 2];
;;;258        _LZWContext.aBuffer[1] = _LZWContext.aBuffer[_LZWContext.LastByte - 1];
;;;259        if ((Count = _GetDataBlock(&_LZWContext.aBuffer[2])) == 0) {
;;;260          _LZWContext.GetDone = 1;
;;;261        }
;;;262        if (Count < 0) {
;;;263          return -1; /* Error */
;;;264        }
;;;265        _LZWContext.LastByte = 2 + Count;
;;;266        _LZWContext.CurBit   = (_LZWContext.CurBit - _LZWContext.LastBit) + 16;
;;;267        _LZWContext.LastBit  = (2 + Count) * 8 ;
;;;268        End                  = _LZWContext.CurBit + _LZWContext.CodeSize;
;;;269      }
;;;270      j = End >> 3;
;;;271      i = _LZWContext.CurBit >> 3;
;;;272      if (i == j) {
;;;273        Result = (long)_LZWContext.aBuffer[i];
;;;274      } else if (i + 1 == j) {
;;;275        Result = (long)_LZWContext.aBuffer[i] | ((long)_LZWContext.aBuffer[i + 1] << 8);
;;;276      }  else {
;;;277        Result = (long)_LZWContext.aBuffer[i] | ((long)_LZWContext.aBuffer[i + 1] << 8) | ((long)_LZWContext.aBuffer[i + 2] << 16);
;;;278      }
;;;279      Result = (Result >> (_LZWContext.CurBit & 0x7)) & _aMaskTbl[_LZWContext.CodeSize];
;;;280      _LZWContext.CurBit += _LZWContext.CodeSize;
;;;281      return (int)Result;
;;;282    }
000182  e8bd81f0          POP      {r4-r8,pc}
                  |L1.390|
000186  4898              LDR      r0,|L1.1000|
000188  3818              SUBS     r0,r0,#0x18           ;251
00018a  6800              LDR      r0,[r0,#0]            ;251
00018c  4996              LDR      r1,|L1.1000|
00018e  1f09              SUBS     r1,r1,#4              ;251
000190  6809              LDR      r1,[r1,#0]            ;251
000192  eb000801          ADD      r8,r0,r1              ;251
000196  4894              LDR      r0,|L1.1000|
000198  f1a00014          SUB      r0,r0,#0x14           ;252
00019c  6800              LDR      r0,[r0,#0]            ;252
00019e  4540              CMP      r0,r8                 ;252
0001a0  dc4b              BGT      |L1.570|
0001a2  4891              LDR      r0,|L1.1000|
0001a4  3810              SUBS     r0,r0,#0x10           ;254
0001a6  6800              LDR      r0,[r0,#0]            ;254
0001a8  b110              CBZ      r0,|L1.432|
0001aa  f04f30ff          MOV      r0,#0xffffffff        ;255
0001ae  e7e8              B        |L1.386|
                  |L1.432|
0001b0  488d              LDR      r0,|L1.1000|
0001b2  380c              SUBS     r0,r0,#0xc            ;257
0001b4  6800              LDR      r0,[r0,#0]            ;257
0001b6  f1a00002          SUB      r0,r0,#2              ;257
0001ba  498a              LDR      r1,|L1.996|
0001bc  5c08              LDRB     r0,[r1,r0]            ;257
0001be  7008              STRB     r0,[r1,#0]            ;257
0001c0  4889              LDR      r0,|L1.1000|
0001c2  f1a0000c          SUB      r0,r0,#0xc            ;258
0001c6  6800              LDR      r0,[r0,#0]            ;258
0001c8  f1a00001          SUB      r0,r0,#1              ;258
0001cc  5c08              LDRB     r0,[r1,r0]            ;258
0001ce  7048              STRB     r0,[r1,#1]            ;258
0001d0  f1010002          ADD      r0,r1,#2              ;259
0001d4  f7fffffe          BL       _GetDataBlock
0001d8  0006              MOVS     r6,r0                 ;259
0001da  d105              BNE      |L1.488|
0001dc  f04f0001          MOV      r0,#1                 ;260
0001e0  4981              LDR      r1,|L1.1000|
0001e2  f1a10110          SUB      r1,r1,#0x10           ;260
0001e6  6008              STR      r0,[r1,#0]            ;260
                  |L1.488|
0001e8  2e00              CMP      r6,#0                 ;262
0001ea  da02              BGE      |L1.498|
0001ec  f04f30ff          MOV      r0,#0xffffffff        ;263
0001f0  e7c7              B        |L1.386|
                  |L1.498|
0001f2  f1060002          ADD      r0,r6,#2              ;265
0001f6  497c              LDR      r1,|L1.1000|
0001f8  f1a1010c          SUB      r1,r1,#0xc            ;265
0001fc  6008              STR      r0,[r1,#0]            ;265
0001fe  f1a1000c          SUB      r0,r1,#0xc            ;266
000202  6800              LDR      r0,[r0,#0]            ;266
000204  f1a10108          SUB      r1,r1,#8              ;266
000208  6809              LDR      r1,[r1,#0]            ;266
00020a  eba00001          SUB      r0,r0,r1              ;266
00020e  f1000010          ADD      r0,r0,#0x10           ;266
000212  4975              LDR      r1,|L1.1000|
000214  f1a10118          SUB      r1,r1,#0x18           ;266
000218  6008              STR      r0,[r1,#0]            ;266
00021a  f1060002          ADD      r0,r6,#2              ;267
00021e  ea4f00c0          LSL      r0,r0,#3              ;267
000222  f1010104          ADD      r1,r1,#4              ;267
000226  6008              STR      r0,[r1,#0]            ;267
000228  f1a10004          SUB      r0,r1,#4              ;268
00022c  6800              LDR      r0,[r0,#0]            ;268
00022e  f1010110          ADD      r1,r1,#0x10           ;268
000232  6809              LDR      r1,[r1,#0]            ;268
000234  eb000801          ADD      r8,r0,r1              ;268
000238  bf00              NOP                            ;269
                  |L1.570|
00023a  ea4f07e8          ASR      r7,r8,#3              ;270
00023e  486a              LDR      r0,|L1.1000|
000240  f1a00018          SUB      r0,r0,#0x18           ;271
000244  6800              LDR      r0,[r0,#0]            ;271
000246  ea4f04e0          ASR      r4,r0,#3              ;271
00024a  42bc              CMP      r4,r7                 ;272
00024c  d102              BNE      |L1.596|
00024e  4865              LDR      r0,|L1.996|
000250  5d05              LDRB     r5,[r0,r4]            ;273
000252  e018              B        |L1.646|
                  |L1.596|
000254  1c60              ADDS     r0,r4,#1              ;274
000256  42b8              CMP      r0,r7                 ;274
000258  d108              BNE      |L1.620|
00025a  4862              LDR      r0,|L1.996|
00025c  5d01              LDRB     r1,[r0,r4]            ;275
00025e  4602              MOV      r2,r0                 ;275
000260  f1040001          ADD      r0,r4,#1              ;275
000264  5c10              LDRB     r0,[r2,r0]            ;275
000266  ea412500          ORR      r5,r1,r0,LSL #8       ;275
00026a  e00c              B        |L1.646|
                  |L1.620|
00026c  485d              LDR      r0,|L1.996|
00026e  5d01              LDRB     r1,[r0,r4]            ;277
000270  4602              MOV      r2,r0                 ;277
000272  f1040001          ADD      r0,r4,#1              ;277
000276  5c10              LDRB     r0,[r2,r0]            ;277
000278  ea412100          ORR      r1,r1,r0,LSL #8       ;277
00027c  f1040002          ADD      r0,r4,#2              ;277
000280  5c10              LDRB     r0,[r2,r0]            ;277
000282  ea414500          ORR      r5,r1,r0,LSL #16      ;277
                  |L1.646|
000286  4858              LDR      r0,|L1.1000|
000288  3818              SUBS     r0,r0,#0x18           ;279
00028a  6800              LDR      r0,[r0,#0]            ;279
00028c  f0000107          AND      r1,r0,#7              ;279
000290  fa45f001          ASR      r0,r5,r1              ;279
000294  4954              LDR      r1,|L1.1000|
000296  f1a10104          SUB      r1,r1,#4              ;279
00029a  6809              LDR      r1,[r1,#0]            ;279
00029c  4a53              LDR      r2,|L1.1004|
00029e  f8521021          LDR      r1,[r2,r1,LSL #2]     ;279
0002a2  ea000501          AND      r5,r0,r1              ;279
0002a6  4850              LDR      r0,|L1.1000|
0002a8  f1a00018          SUB      r0,r0,#0x18           ;280
0002ac  6800              LDR      r0,[r0,#0]            ;280
0002ae  494e              LDR      r1,|L1.1000|
0002b0  f1a10104          SUB      r1,r1,#4              ;280
0002b4  6809              LDR      r1,[r1,#0]            ;280
0002b6  4401              ADD      r1,r1,r0              ;280
0002b8  484b              LDR      r0,|L1.1000|
0002ba  f1a00018          SUB      r0,r0,#0x18           ;280
0002be  6001              STR      r1,[r0,#0]            ;280
0002c0  4628              MOV      r0,r5                 ;281
0002c2  e75e              B        |L1.386|
;;;283    
                          ENDP

                  _GetNextByte PROC
;;;295    */
;;;296    static int _GetNextByte(void) {
0002c4  b570              PUSH     {r4-r6,lr}
;;;297      int i, Code, Incode;
;;;298      while ((Code = _GetNextCode()) >= 0) {
0002c6  e100              B        |L1.1226|
                  |L1.712|
;;;299        if (Code == _LZWContext.ClearCode) {
0002c8  4847              LDR      r0,|L1.1000|
0002ca  300c              ADDS     r0,r0,#0xc
0002cc  6800              LDR      r0,[r0,#0]
0002ce  42a0              CMP      r0,r4
0002d0  d14c              BNE      |L1.876|
;;;300          /* Corrupt GIFs can make this happen */
;;;301          if (_LZWContext.ClearCode >= (1 << MAX_NUM_LWZ_BITS)) {
0002d2  4845              LDR      r0,|L1.1000|
0002d4  300c              ADDS     r0,r0,#0xc
0002d6  6800              LDR      r0,[r0,#0]
0002d8  f5b05f80          CMP      r0,#0x1000
0002dc  db02              BLT      |L1.740|
;;;302            return -1; /* Error */
0002de  f04f30ff          MOV      r0,#0xffffffff
                  |L1.738|
;;;303          }
;;;304          /* Clear the tables */
;;;305          GUI__memset((U8 *)_LZWContext.aCode, 0, sizeof(_LZWContext.aCode));
;;;306          for (i = 0; i < _LZWContext.ClearCode; ++i) {
;;;307            _LZWContext.aPrefix[i] = i;
;;;308          }
;;;309          /* Calculate the 'special codes' in dependence of the initial code size
;;;310             and initialize the stack pointer */
;;;311          _LZWContext.CodeSize    = _LZWContext.SetCodeSize + 1;
;;;312          _LZWContext.MaxCodeSize = _LZWContext.ClearCode << 1;
;;;313          _LZWContext.MaxCode     = _LZWContext.ClearCode + 2;
;;;314          _LZWContext.sp          = _LZWContext.aDecompBuffer;
;;;315          /* Read the first code from the stack after clearing and initializing */
;;;316          do {
;;;317            _LZWContext.FirstCode = _GetNextCode();
;;;318          } while (_LZWContext.FirstCode == _LZWContext.ClearCode);
;;;319          _LZWContext.OldCode = _LZWContext.FirstCode;
;;;320          return _LZWContext.FirstCode;
;;;321        }
;;;322        if (Code == _LZWContext.EndCode) {
;;;323          return -2; /* End code */
;;;324        }
;;;325        Incode = Code;
;;;326        if (Code >= _LZWContext.MaxCode) {
;;;327          *(_LZWContext.sp)++ = _LZWContext.FirstCode;
;;;328          Code = _LZWContext.OldCode;
;;;329        }
;;;330        while (Code >= _LZWContext.ClearCode) {
;;;331          *(_LZWContext.sp)++ = _LZWContext.aPrefix[Code];
;;;332          if (Code == _LZWContext.aCode[Code]) {
;;;333            return Code;
;;;334          }
;;;335          if ((_LZWContext.sp - _LZWContext.aDecompBuffer) >= sizeof(_LZWContext.aDecompBuffer)) {
;;;336            return Code;
;;;337          }
;;;338          Code = _LZWContext.aCode[Code];
;;;339        }
;;;340        *(_LZWContext.sp)++ = _LZWContext.FirstCode = _LZWContext.aPrefix[Code];
;;;341        if ((Code = _LZWContext.MaxCode) < (1 << MAX_NUM_LWZ_BITS)) {
;;;342          _LZWContext.aCode  [Code] = _LZWContext.OldCode;
;;;343          _LZWContext.aPrefix[Code] = _LZWContext.FirstCode;
;;;344          ++_LZWContext.MaxCode;
;;;345          if ((_LZWContext.MaxCode >= _LZWContext.MaxCodeSize) && (_LZWContext.MaxCodeSize < (1 << MAX_NUM_LWZ_BITS))) {
;;;346            _LZWContext.MaxCodeSize <<= 1;
;;;347            ++_LZWContext.CodeSize;
;;;348          }
;;;349        }
;;;350        _LZWContext.OldCode = Incode;
;;;351        if (_LZWContext.sp > _LZWContext.aDecompBuffer) {
;;;352          return *--(_LZWContext.sp);
;;;353        }
;;;354      }
;;;355      return Code;
;;;356    }
0002e2  bd70              POP      {r4-r6,pc}
                  |L1.740|
0002e4  f44f5200          MOV      r2,#0x2000            ;305
0002e8  2100              MOVS     r1,#0                 ;305
0002ea  4841              LDR      r0,|L1.1008|
0002ec  f7fffffe          BL       GUI__memset
0002f0  f04f0500          MOV      r5,#0                 ;306
0002f4  e003              B        |L1.766|
                  |L1.758|
0002f6  493f              LDR      r1,|L1.1012|
0002f8  554d              STRB     r5,[r1,r5]            ;307
0002fa  f1050501          ADD      r5,r5,#1              ;306
                  |L1.766|
0002fe  483a              LDR      r0,|L1.1000|
000300  300c              ADDS     r0,r0,#0xc            ;306
000302  6800              LDR      r0,[r0,#0]            ;306
000304  42a8              CMP      r0,r5                 ;306
000306  dcf6              BGT      |L1.758|
000308  4837              LDR      r0,|L1.1000|
00030a  6800              LDR      r0,[r0,#0]            ;311
00030c  f1000001          ADD      r0,r0,#1              ;311
000310  4935              LDR      r1,|L1.1000|
000312  f1a10104          SUB      r1,r1,#4              ;311
000316  6008              STR      r0,[r1,#0]            ;311
000318  f1010010          ADD      r0,r1,#0x10           ;312
00031c  6800              LDR      r0,[r0,#0]            ;312
00031e  ea4f0040          LSL      r0,r0,#1              ;312
000322  f101010c          ADD      r1,r1,#0xc            ;312
000326  6008              STR      r0,[r1,#0]            ;312
000328  f1010004          ADD      r0,r1,#4              ;313
00032c  6800              LDR      r0,[r0,#0]            ;313
00032e  f1000002          ADD      r0,r0,#2              ;313
000332  f1a10104          SUB      r1,r1,#4              ;313
000336  6008              STR      r0,[r1,#0]            ;313
000338  f6a130da          SUB      r0,r1,#0xbda          ;314
00033c  f60031ba          ADD      r1,r0,#0xbba          ;314
000340  6008              STR      r0,[r1,#0]            ;314
000342  bf00              NOP                            ;316
                  |L1.836|
000344  f7fffffe          BL       _GetNextCode
000348  4927              LDR      r1,|L1.1000|
00034a  3114              ADDS     r1,r1,#0x14           ;317
00034c  6008              STR      r0,[r1,#0]            ;317
00034e  4608              MOV      r0,r1                 ;318
000350  6800              LDR      r0,[r0,#0]            ;318
000352  3908              SUBS     r1,r1,#8              ;318
000354  6809              LDR      r1,[r1,#0]            ;318
000356  4288              CMP      r0,r1                 ;318
000358  d0f4              BEQ      |L1.836|
00035a  4823              LDR      r0,|L1.1000|
00035c  3014              ADDS     r0,r0,#0x14           ;319
00035e  6800              LDR      r0,[r0,#0]            ;319
000360  4921              LDR      r1,|L1.1000|
000362  3118              ADDS     r1,r1,#0x18           ;319
000364  6008              STR      r0,[r1,#0]            ;319
000366  1f08              SUBS     r0,r1,#4              ;320
000368  6800              LDR      r0,[r0,#0]            ;320
00036a  e7ba              B        |L1.738|
                  |L1.876|
00036c  481e              LDR      r0,|L1.1000|
00036e  3010              ADDS     r0,r0,#0x10           ;322
000370  6800              LDR      r0,[r0,#0]            ;322
000372  42a0              CMP      r0,r4                 ;322
000374  d102              BNE      |L1.892|
000376  f06f0001          MVN      r0,#1                 ;323
00037a  e7b2              B        |L1.738|
                  |L1.892|
00037c  4626              MOV      r6,r4                 ;325
00037e  481a              LDR      r0,|L1.1000|
000380  f1000004          ADD      r0,r0,#4              ;326
000384  6800              LDR      r0,[r0,#0]            ;326
000386  42a0              CMP      r0,r4                 ;326
000388  dc12              BGT      |L1.944|
00038a  4817              LDR      r0,|L1.1000|
00038c  3014              ADDS     r0,r0,#0x14           ;327
00038e  6800              LDR      r0,[r0,#0]            ;327
000390  4915              LDR      r1,|L1.1000|
000392  391c              SUBS     r1,r1,#0x1c           ;327
000394  6809              LDR      r1,[r1,#0]            ;327
000396  7008              STRB     r0,[r1,#0]            ;327
000398  4813              LDR      r0,|L1.1000|
00039a  381c              SUBS     r0,r0,#0x1c           ;327
00039c  6800              LDR      r0,[r0,#0]            ;327
00039e  f1000001          ADD      r0,r0,#1              ;327
0003a2  4911              LDR      r1,|L1.1000|
0003a4  f1a1011c          SUB      r1,r1,#0x1c           ;327
0003a8  6008              STR      r0,[r1,#0]            ;327
0003aa  f1010034          ADD      r0,r1,#0x34           ;328
0003ae  6804              LDR      r4,[r0,#0]            ;328
                  |L1.944|
0003b0  e02f              B        |L1.1042|
                  |L1.946|
0003b2  4810              LDR      r0,|L1.1012|
0003b4  5d00              LDRB     r0,[r0,r4]            ;331
0003b6  490c              LDR      r1,|L1.1000|
0003b8  391c              SUBS     r1,r1,#0x1c           ;331
0003ba  6809              LDR      r1,[r1,#0]            ;331
0003bc  7008              STRB     r0,[r1,#0]            ;331
0003be  480a              LDR      r0,|L1.1000|
0003c0  381c              SUBS     r0,r0,#0x1c           ;331
0003c2  6800              LDR      r0,[r0,#0]            ;331
0003c4  f1000001          ADD      r0,r0,#1              ;331
0003c8  4907              LDR      r1,|L1.1000|
0003ca  f1a1011c          SUB      r1,r1,#0x1c           ;331
0003ce  6008              STR      r0,[r1,#0]            ;331
0003d0  4807              LDR      r0,|L1.1008|
0003d2  f9300014          LDRSH    r0,[r0,r4,LSL #1]     ;332
0003d6  42a0              CMP      r0,r4                 ;332
0003d8  d10e              BNE      |L1.1016|
0003da  4620              MOV      r0,r4                 ;333
0003dc  e781              B        |L1.738|
0003de  0000              DCW      0x0000
                  |L1.992|
                          DCD      _Source
                  |L1.996|
                          DCD      _LZWContext
                  |L1.1000|
                          DCD      _LZWContext+0x3cd8
                  |L1.1004|
                          DCD      _aMaskTbl
                  |L1.1008|
                          DCD      _LZWContext+0x102
                  |L1.1012|
                          DCD      _LZWContext+0x2102
                  |L1.1016|
0003f8  48f7              LDR      r0,|L1.2008|
0003fa  6800              LDR      r0,[r0,#0]            ;335
0003fc  49f7              LDR      r1,|L1.2012|
0003fe  1a40              SUBS     r0,r0,r1              ;335
000400  f64031b8          MOV      r1,#0xbb8             ;335
000404  4288              CMP      r0,r1                 ;335
000406  d301              BCC      |L1.1036|
000408  4620              MOV      r0,r4                 ;336
00040a  e76a              B        |L1.738|
                  |L1.1036|
00040c  48f4              LDR      r0,|L1.2016|
00040e  f9304014          LDRSH    r4,[r0,r4,LSL #1]     ;338
                  |L1.1042|
000412  48f1              LDR      r0,|L1.2008|
000414  3028              ADDS     r0,r0,#0x28           ;330
000416  6800              LDR      r0,[r0,#0]            ;330
000418  42a0              CMP      r0,r4                 ;330
00041a  ddca              BLE      |L1.946|
00041c  48f1              LDR      r0,|L1.2020|
00041e  5d00              LDRB     r0,[r0,r4]            ;340
000420  49ed              LDR      r1,|L1.2008|
000422  3130              ADDS     r1,r1,#0x30           ;340
000424  6008              STR      r0,[r1,#0]            ;340
000426  3930              SUBS     r1,r1,#0x30           ;340
000428  6809              LDR      r1,[r1,#0]            ;340
00042a  7008              STRB     r0,[r1,#0]            ;340
00042c  48ea              LDR      r0,|L1.2008|
00042e  6800              LDR      r0,[r0,#0]            ;340
000430  f1000001          ADD      r0,r0,#1              ;340
000434  49e8              LDR      r1,|L1.2008|
000436  6008              STR      r0,[r1,#0]            ;340
000438  f1010020          ADD      r0,r1,#0x20           ;341
00043c  6800              LDR      r0,[r0,#0]            ;341
00043e  4604              MOV      r4,r0                 ;341
000440  f5b05f80          CMP      r0,#0x1000            ;341
000444  da32              BGE      |L1.1196|
000446  f1010034          ADD      r0,r1,#0x34           ;342
00044a  6800              LDR      r0,[r0,#0]            ;342
00044c  b201              SXTH     r1,r0                 ;342
00044e  48e4              LDR      r0,|L1.2016|
000450  f8201014          STRH     r1,[r0,r4,LSL #1]     ;342
000454  48e0              LDR      r0,|L1.2008|
000456  3030              ADDS     r0,r0,#0x30           ;343
000458  6800              LDR      r0,[r0,#0]            ;343
00045a  49e2              LDR      r1,|L1.2020|
00045c  5508              STRB     r0,[r1,r4]            ;343
00045e  48de              LDR      r0,|L1.2008|
000460  3020              ADDS     r0,r0,#0x20           ;344
000462  6800              LDR      r0,[r0,#0]            ;344
000464  f1000001          ADD      r0,r0,#1              ;344
000468  49db              LDR      r1,|L1.2008|
00046a  f1010120          ADD      r1,r1,#0x20           ;344
00046e  6008              STR      r0,[r1,#0]            ;344
000470  4608              MOV      r0,r1                 ;345
000472  6800              LDR      r0,[r0,#0]            ;345
000474  f1010104          ADD      r1,r1,#4              ;345
000478  6809              LDR      r1,[r1,#0]            ;345
00047a  4288              CMP      r0,r1                 ;345
00047c  db16              BLT      |L1.1196|
00047e  48d6              LDR      r0,|L1.2008|
000480  3024              ADDS     r0,r0,#0x24           ;345
000482  6800              LDR      r0,[r0,#0]            ;345
000484  f5b05f80          CMP      r0,#0x1000            ;345
000488  da10              BGE      |L1.1196|
00048a  48d3              LDR      r0,|L1.2008|
00048c  3024              ADDS     r0,r0,#0x24           ;346
00048e  6800              LDR      r0,[r0,#0]            ;346
000490  ea4f0040          LSL      r0,r0,#1              ;346
000494  49d0              LDR      r1,|L1.2008|
000496  f1010124          ADD      r1,r1,#0x24           ;346
00049a  6008              STR      r0,[r1,#0]            ;346
00049c  f1a1000c          SUB      r0,r1,#0xc            ;347
0004a0  6800              LDR      r0,[r0,#0]            ;347
0004a2  f1000001          ADD      r0,r0,#1              ;347
0004a6  f1a1010c          SUB      r1,r1,#0xc            ;347
0004aa  6008              STR      r0,[r1,#0]            ;347
                  |L1.1196|
0004ac  48ca              LDR      r0,|L1.2008|
0004ae  3034              ADDS     r0,r0,#0x34           ;350
0004b0  6006              STR      r6,[r0,#0]            ;350
0004b2  3834              SUBS     r0,r0,#0x34           ;351
0004b4  6800              LDR      r0,[r0,#0]            ;351
0004b6  49c9              LDR      r1,|L1.2012|
0004b8  4288              CMP      r0,r1                 ;351
0004ba  d906              BLS      |L1.1226|
0004bc  48c6              LDR      r0,|L1.2008|
0004be  6800              LDR      r0,[r0,#0]            ;352
0004c0  1e40              SUBS     r0,r0,#1              ;352
0004c2  49c5              LDR      r1,|L1.2008|
0004c4  6008              STR      r0,[r1,#0]            ;352
0004c6  7800              LDRB     r0,[r0,#0]            ;352
0004c8  e70b              B        |L1.738|
                  |L1.1226|
0004ca  f7fffffe          BL       _GetNextCode
0004ce  1e04              SUBS     r4,r0,#0              ;298
0004d0  f6bfaefa          BGE      |L1.712|
0004d4  4620              MOV      r0,r4                 ;355
0004d6  e704              B        |L1.738|
;;;357    
                          ENDP

                  _ReadExtension PROC
;;;365    */
;;;366    static int _ReadExtension(int * pTransIndex, GUI_GIF_IMAGE_INFO * pInfo, U8 * pDisposal) {
0004d8  e92d41f0          PUSH     {r4-r8,lr}
0004dc  4604              MOV      r4,r0
0004de  460d              MOV      r5,r1
0004e0  4616              MOV      r6,r2
;;;367      U8 Label;
;;;368      Label = _ReadU8();
0004e2  f7fffffe          BL       _ReadU8
0004e6  4607              MOV      r7,r0
;;;369      switch (Label) {
0004e8  2f01              CMP      r7,#1
0004ea  d006              BEQ      |L1.1274|
0004ec  2ff9              CMP      r7,#0xf9
0004ee  d00f              BEQ      |L1.1296|
0004f0  2ffe              CMP      r7,#0xfe
0004f2  d004              BEQ      |L1.1278|
0004f4  2fff              CMP      r7,#0xff
0004f6  d130              BNE      |L1.1370|
0004f8  e000              B        |L1.1276|
                  |L1.1274|
;;;370      case GIF_PLAINTEXT:
;;;371      case GIF_APPLICATION:
0004fa  bf00              NOP      
                  |L1.1276|
;;;372      case GIF_COMMENT:
0004fc  bf00              NOP      
                  |L1.1278|
;;;373        while (_GetDataBlock(_aBuffer) > 0);
0004fe  bf00              NOP      
                  |L1.1280|
000500  48b9              LDR      r0,|L1.2024|
000502  f7fffffe          BL       _GetDataBlock
000506  2800              CMP      r0,#0
000508  dcfa              BGT      |L1.1280|
;;;374        return 0;
00050a  2000              MOVS     r0,#0
                  |L1.1292|
;;;375      case GIF_GRAPHICCTL:
;;;376        if (_GetDataBlock(_aBuffer) != 4) { /* Length of a graphic control block must be 4 */
;;;377          return 1;
;;;378        }
;;;379        if (pInfo) {
;;;380          pInfo->Delay    = (_aBuffer[2] << 8) | _aBuffer[1];
;;;381        }
;;;382        if (pDisposal) {
;;;383          *pDisposal = (_aBuffer[0] >> 2) & 0x7;
;;;384        }
;;;385        if (pTransIndex) {
;;;386          if ((_aBuffer[0] & 0x1) != 0) {
;;;387            *pTransIndex = _aBuffer[3];
;;;388          }
;;;389        }
;;;390        if (_ReadU8() != 0) { /* Read block terminator */
;;;391          return 1;
;;;392        }
;;;393        return 0;
;;;394      }
;;;395      return 1; /* Error */
;;;396    }
00050c  e8bd81f0          POP      {r4-r8,pc}
                  |L1.1296|
000510  48b5              LDR      r0,|L1.2024|
000512  f7fffffe          BL       _GetDataBlock
000516  2804              CMP      r0,#4                 ;376
000518  d001              BEQ      |L1.1310|
00051a  2001              MOVS     r0,#1                 ;377
00051c  e7f6              B        |L1.1292|
                  |L1.1310|
00051e  b135              CBZ      r5,|L1.1326|
000520  48b1              LDR      r0,|L1.2024|
000522  7840              LDRB     r0,[r0,#1]            ;380  ; _aBuffer
000524  49b0              LDR      r1,|L1.2024|
000526  7889              LDRB     r1,[r1,#2]            ;380  ; _aBuffer
000528  ea402001          ORR      r0,r0,r1,LSL #8       ;380
00052c  6128              STR      r0,[r5,#0x10]         ;380
                  |L1.1326|
00052e  b126              CBZ      r6,|L1.1338|
000530  48ad              LDR      r0,|L1.2024|
000532  7800              LDRB     r0,[r0,#0]            ;383  ; _aBuffer
000534  f3c00082          UBFX     r0,r0,#2,#3           ;383
000538  7030              STRB     r0,[r6,#0]            ;383
                  |L1.1338|
00053a  b13c              CBZ      r4,|L1.1356|
00053c  48aa              LDR      r0,|L1.2024|
00053e  7800              LDRB     r0,[r0,#0]            ;386  ; _aBuffer
000540  f0100f01          TST      r0,#1                 ;386
000544  d002              BEQ      |L1.1356|
000546  48a8              LDR      r0,|L1.2024|
000548  78c0              LDRB     r0,[r0,#3]            ;387  ; _aBuffer
00054a  6020              STR      r0,[r4,#0]            ;387
                  |L1.1356|
00054c  f7fffffe          BL       _ReadU8
000550  b108              CBZ      r0,|L1.1366|
000552  2001              MOVS     r0,#1                 ;391
000554  e7da              B        |L1.1292|
                  |L1.1366|
000556  2000              MOVS     r0,#0                 ;393
000558  e7d8              B        |L1.1292|
                  |L1.1370|
00055a  2001              MOVS     r0,#1                 ;395
00055c  e7d6              B        |L1.1292|
;;;397    
                          ENDP

                  _ReadComment PROC
;;;405    */
;;;406    static int _ReadComment(U8 * pBuffer, int MaxSize, int * pSize) {
00055e  e92d41f0          PUSH     {r4-r8,lr}
000562  4606              MOV      r6,r0
000564  460d              MOV      r5,r1
000566  4617              MOV      r7,r2
;;;407      U8 Label;
;;;408      int Size;
;;;409      Label = _ReadU8();
000568  f7fffffe          BL       _ReadU8
00056c  4680              MOV      r8,r0
;;;410      switch (Label) {
00056e  f1b80f01          CMP      r8,#1
000572  d009              BEQ      |L1.1416|
000574  f1b80ff9          CMP      r8,#0xf9
000578  d020              BEQ      |L1.1468|
00057a  f1b80ffe          CMP      r8,#0xfe
00057e  d00d              BEQ      |L1.1436|
000580  f1b80fff          CMP      r8,#0xff
000584  d128              BNE      |L1.1496|
000586  e000              B        |L1.1418|
                  |L1.1416|
;;;411      case GIF_PLAINTEXT:
;;;412      case GIF_APPLICATION:
000588  bf00              NOP      
                  |L1.1418|
;;;413        while (_GetDataBlock(_aBuffer) > 0);
00058a  bf00              NOP      
                  |L1.1420|
00058c  4896              LDR      r0,|L1.2024|
00058e  f7fffffe          BL       _GetDataBlock
000592  2800              CMP      r0,#0
000594  dcfa              BGT      |L1.1420|
;;;414        return 0;
000596  2000              MOVS     r0,#0
                  |L1.1432|
;;;415      case GIF_COMMENT:
;;;416        Size = _GetDataBlock(_aBuffer);
;;;417        if (Size > MaxSize) {
;;;418          Size = MaxSize;
;;;419        }
;;;420        if (pBuffer) {
;;;421          *pSize = Size;
;;;422          memcpy(pBuffer, _aBuffer, Size);
;;;423        }
;;;424        return 0;
;;;425      case GIF_GRAPHICCTL:
;;;426        if (_GetDataBlock(_aBuffer) != 4) { /* Length of a graphic control block must be 4 */
;;;427          return 1;
;;;428        }
;;;429        if (_ReadU8() != 0) { /* Read block terminator, must be 0 */
;;;430          return 1;
;;;431        }
;;;432        return 0;
;;;433      }
;;;434      return 1; /* Error */
;;;435    }
000598  e8bd81f0          POP      {r4-r8,pc}
                  |L1.1436|
00059c  4892              LDR      r0,|L1.2024|
00059e  f7fffffe          BL       _GetDataBlock
0005a2  4604              MOV      r4,r0                 ;416
0005a4  42ac              CMP      r4,r5                 ;417
0005a6  dd00              BLE      |L1.1450|
0005a8  462c              MOV      r4,r5                 ;418
                  |L1.1450|
0005aa  b12e              CBZ      r6,|L1.1464|
0005ac  603c              STR      r4,[r7,#0]            ;421
0005ae  4622              MOV      r2,r4                 ;422
0005b0  498d              LDR      r1,|L1.2024|
0005b2  4630              MOV      r0,r6                 ;422
0005b4  f7fffffe          BL       __aeabi_memcpy
                  |L1.1464|
0005b8  2000              MOVS     r0,#0                 ;424
0005ba  e7ed              B        |L1.1432|
                  |L1.1468|
0005bc  488a              LDR      r0,|L1.2024|
0005be  f7fffffe          BL       _GetDataBlock
0005c2  2804              CMP      r0,#4                 ;426
0005c4  d001              BEQ      |L1.1482|
0005c6  2001              MOVS     r0,#1                 ;427
0005c8  e7e6              B        |L1.1432|
                  |L1.1482|
0005ca  f7fffffe          BL       _ReadU8
0005ce  b108              CBZ      r0,|L1.1492|
0005d0  2001              MOVS     r0,#1                 ;430
0005d2  e7e1              B        |L1.1432|
                  |L1.1492|
0005d4  2000              MOVS     r0,#0                 ;432
0005d6  e7df              B        |L1.1432|
                  |L1.1496|
0005d8  2001              MOVS     r0,#1                 ;434
0005da  e7dd              B        |L1.1432|
;;;436    
                          ENDP

                  _DispGIFImage PROC
;;;455    */
;;;456    static int _DispGIFImage(IMAGE_DESCRIPTOR * pDescriptor, int x0, int y0, int Transparency, int Disposal) {
0005dc  e92d4fff          PUSH     {r0-r11,lr}
0005e0  b08f              SUB      sp,sp,#0x3c
0005e2  4607              MOV      r7,r0
0005e4  4693              MOV      r11,r2
0005e6  4698              MOV      r8,r3
;;;457      int Codesize, Index, OldIndex, XPos, YPos, YCnt, Pass, Interlace, XEnd;
;;;458      int Width, Height, NumColors, Cnt, BkColorIndex, ColorIndex;
;;;459      LCD_LOGPALETTE LogPalette;
;;;460      const LCD_PIXELINDEX * pTrans;
;;;461      Width     = pDescriptor->XSize;
0005e8  68b8              LDR      r0,[r7,#8]
0005ea  9009              STR      r0,[sp,#0x24]
;;;462      Height    = pDescriptor->YSize;
0005ec  68f8              LDR      r0,[r7,#0xc]
0005ee  9008              STR      r0,[sp,#0x20]
;;;463      NumColors = pDescriptor->NumColors;
0005f0  6978              LDR      r0,[r7,#0x14]
0005f2  9007              STR      r0,[sp,#0x1c]
;;;464      XEnd      = Width + x0 - 1;
0005f4  9910              LDR      r1,[sp,#0x40]
0005f6  9809              LDR      r0,[sp,#0x24]
0005f8  4408              ADD      r0,r0,r1
0005fa  f1a00001          SUB      r0,r0,#1
0005fe  900a              STR      r0,[sp,#0x28]
;;;465      BkColorIndex = LCD_GetBkColorIndex();
000600  f7fffffe          BL       LCD_GetBkColorIndex
000604  9006              STR      r0,[sp,#0x18]
;;;466      /* Get color translation table  */
;;;467      LogPalette.NumEntries  = NumColors;
000606  9807              LDR      r0,[sp,#0x1c]
000608  9002              STR      r0,[sp,#8]
;;;468      LogPalette.HasTrans    = 0;
00060a  f04f0000          MOV      r0,#0
00060e  f88d000c          STRB     r0,[sp,#0xc]
;;;469      LogPalette.pPalEntries = _aColorTable;
000612  4876              LDR      r0,|L1.2028|
000614  9004              STR      r0,[sp,#0x10]
;;;470      if ((pTrans = LCD_GetpPalConvTable((const LCD_LOGPALETTE *)&LogPalette)) == NULL) {
000616  a802              ADD      r0,sp,#8
000618  f7fffffe          BL       LCD_GetpPalConvTable
00061c  9001              STR      r0,[sp,#4]
00061e  b918              CBNZ     r0,|L1.1576|
;;;471        return 1; /* Error */
000620  2001              MOVS     r0,#1
                  |L1.1570|
;;;472      }
;;;473      Codesize  = _ReadU8();                 /* Read the LZW codesize */
;;;474      _InitLZW(Codesize);                    /* Initialize the LZW stack with the LZW codesize */
;;;475      Interlace = pDescriptor->Flags & 0x40; /* Evaluate if image is interlaced */
;;;476      for (YCnt = 0, YPos = y0, Pass = 0; YCnt < Height; YCnt++) {
;;;477        Cnt      = 0;
;;;478        OldIndex = -1;    
;;;479        for (XPos = x0; XPos <= XEnd; XPos++) {
;;;480          if (_LZWContext.sp > _LZWContext.aDecompBuffer) {
;;;481            Index = *--(_LZWContext.sp);
;;;482          } else {
;;;483            Index = _GetNextByte();
;;;484          }
;;;485          if (Index == -2) {
;;;486            return 0; /* End code */
;;;487          }
;;;488          if ((Index < 0) || (Index >= NumColors)) {
;;;489            /* If Index out of legal range stop decompressing */
;;;490            return 1; /* Error */
;;;491          }
;;;492          /* If current index equals old index increment counter */
;;;493          if ((Index == OldIndex) && (XPos <= XEnd)) {
;;;494            Cnt++;
;;;495          } else {
;;;496            if (Cnt) {
;;;497              if (OldIndex != Transparency) {
;;;498                LCD_SetColorIndex(*(pTrans + OldIndex));
;;;499                LCD_DrawHLine(XPos - Cnt - 1, YPos, XPos - 1);
;;;500              } else if (Disposal == 2) {
;;;501                LCD_SetColorIndex(BkColorIndex);
;;;502                LCD_DrawHLine(XPos - Cnt - 1, YPos, XPos - 1);
;;;503              }
;;;504              Cnt = 0;
;;;505            } else {
;;;506              if (OldIndex >= 0) {
;;;507                if (OldIndex != Transparency) {
;;;508                  LCD_SetPixelIndex(XPos - 1, YPos, *(pTrans + OldIndex));
;;;509                } else if (Disposal == 2) {
;;;510                  LCD_SetPixelIndex(XPos - 1, YPos, BkColorIndex);
;;;511                }
;;;512              }
;;;513            }
;;;514          }
;;;515          OldIndex = Index;
;;;516        }
;;;517        if ((OldIndex != Transparency) || (Disposal == 2)) {
;;;518          if (OldIndex != Transparency) {
;;;519            ColorIndex = *(pTrans + OldIndex);
;;;520          } else {
;;;521            ColorIndex = BkColorIndex;
;;;522          }
;;;523          if (Cnt) {
;;;524            LCD_SetColorIndex(ColorIndex);
;;;525            LCD_DrawHLine(XPos - Cnt - 1, YPos, XPos - 1);
;;;526          } else {
;;;527            LCD_SetPixelIndex(XEnd, YPos, ColorIndex);
;;;528          }
;;;529        }
;;;530        /* Adjust YPos if image is interlaced */
;;;531        if (Interlace) {
;;;532          YPos += _aInterlaceOffset[Pass];
;;;533          if ((YPos - y0) >= Height) {
;;;534            ++Pass;
;;;535            YPos = _aInterlaceYPos[Pass] + y0;
;;;536          }
;;;537        } else {
;;;538          YPos++;
;;;539        }
;;;540      }
;;;541      return 0;
;;;542    }
000622  b013              ADD      sp,sp,#0x4c
000624  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.1576|
000628  f7fffffe          BL       _ReadU8
00062c  900e              STR      r0,[sp,#0x38]         ;473
00062e  980e              LDR      r0,[sp,#0x38]         ;474
000630  f7fffffe          BL       _InitLZW
000634  6938              LDR      r0,[r7,#0x10]         ;475
000636  f0000040          AND      r0,r0,#0x40           ;475
00063a  900b              STR      r0,[sp,#0x2c]         ;475
00063c  f04f0000          MOV      r0,#0                 ;476
000640  900d              STR      r0,[sp,#0x34]         ;476
000642  46da              MOV      r10,r11               ;476
000644  900c              STR      r0,[sp,#0x30]         ;476
000646  e09d              B        |L1.1924|
                  |L1.1608|
000648  f04f0600          MOV      r6,#0                 ;477
00064c  f04f35ff          MOV      r5,#0xffffffff        ;478
000650  9c10              LDR      r4,[sp,#0x40]         ;479
000652  e059              B        |L1.1800|
                  |L1.1620|
000654  4860              LDR      r0,|L1.2008|
000656  6800              LDR      r0,[r0,#0]            ;480
000658  4960              LDR      r1,|L1.2012|
00065a  4288              CMP      r0,r1                 ;480
00065c  d908              BLS      |L1.1648|
00065e  485e              LDR      r0,|L1.2008|
000660  6800              LDR      r0,[r0,#0]            ;481
000662  f1a00001          SUB      r0,r0,#1              ;481
000666  495c              LDR      r1,|L1.2008|
000668  6008              STR      r0,[r1,#0]            ;481
00066a  f8909000          LDRB     r9,[r0,#0]            ;481
00066e  e002              B        |L1.1654|
                  |L1.1648|
000670  f7fffffe          BL       _GetNextByte
000674  4681              MOV      r9,r0                 ;483
                  |L1.1654|
000676  f1190002          ADDS     r0,r9,#2              ;485
00067a  d100              BNE      |L1.1662|
00067c  e7d1              B        |L1.1570|
                  |L1.1662|
00067e  f1b90f00          CMP      r9,#0                 ;488
000682  db02              BLT      |L1.1674|
000684  9807              LDR      r0,[sp,#0x1c]         ;488
000686  4581              CMP      r9,r0                 ;488
000688  db01              BLT      |L1.1678|
                  |L1.1674|
00068a  2001              MOVS     r0,#1                 ;490
00068c  e7c9              B        |L1.1570|
                  |L1.1678|
00068e  45a9              CMP      r9,r5                 ;493
000690  d105              BNE      |L1.1694|
000692  980a              LDR      r0,[sp,#0x28]         ;493
000694  4284              CMP      r4,r0                 ;493
000696  dc02              BGT      |L1.1694|
000698  f1060601          ADD      r6,r6,#1              ;494
00069c  e031              B        |L1.1794|
                  |L1.1694|
00069e  b1e6              CBZ      r6,|L1.1754|
0006a0  4545              CMP      r5,r8                 ;497
0006a2  d00b              BEQ      |L1.1724|
0006a4  9901              LDR      r1,[sp,#4]            ;498
0006a6  f8310015          LDRH     r0,[r1,r5,LSL #1]     ;498
0006aa  f7fffffe          BL       LCD_SetColorIndex
0006ae  1e62              SUBS     r2,r4,#1              ;499
0006b0  1ba1              SUBS     r1,r4,r6              ;499
0006b2  1e48              SUBS     r0,r1,#1              ;499
0006b4  4651              MOV      r1,r10                ;499
0006b6  f7fffffe          BL       LCD_DrawHLine
0006ba  e00b              B        |L1.1748|
                  |L1.1724|
0006bc  981c              LDR      r0,[sp,#0x70]         ;500
0006be  2802              CMP      r0,#2                 ;500
0006c0  d108              BNE      |L1.1748|
0006c2  9806              LDR      r0,[sp,#0x18]         ;501
0006c4  f7fffffe          BL       LCD_SetColorIndex
0006c8  1e62              SUBS     r2,r4,#1              ;502
0006ca  1ba1              SUBS     r1,r4,r6              ;502
0006cc  1e48              SUBS     r0,r1,#1              ;502
0006ce  4651              MOV      r1,r10                ;502
0006d0  f7fffffe          BL       LCD_DrawHLine
                  |L1.1748|
0006d4  f04f0600          MOV      r6,#0                 ;504
0006d8  e013              B        |L1.1794|
                  |L1.1754|
0006da  2d00              CMP      r5,#0                 ;506
0006dc  db11              BLT      |L1.1794|
0006de  4545              CMP      r5,r8                 ;507
0006e0  d007              BEQ      |L1.1778|
0006e2  9901              LDR      r1,[sp,#4]            ;508
0006e4  f8312015          LDRH     r2,[r1,r5,LSL #1]     ;508
0006e8  1e60              SUBS     r0,r4,#1              ;508
0006ea  4651              MOV      r1,r10                ;508
0006ec  f7fffffe          BL       LCD_SetPixelIndex
0006f0  e007              B        |L1.1794|
                  |L1.1778|
0006f2  981c              LDR      r0,[sp,#0x70]         ;509
0006f4  2802              CMP      r0,#2                 ;509
0006f6  d104              BNE      |L1.1794|
0006f8  1e60              SUBS     r0,r4,#1              ;510
0006fa  4651              MOV      r1,r10                ;510
0006fc  9a06              LDR      r2,[sp,#0x18]         ;510
0006fe  f7fffffe          BL       LCD_SetPixelIndex
                  |L1.1794|
000702  464d              MOV      r5,r9                 ;515
000704  f1040401          ADD      r4,r4,#1              ;479
                  |L1.1800|
000708  980a              LDR      r0,[sp,#0x28]         ;479
00070a  4284              CMP      r4,r0                 ;479
00070c  dda2              BLE      |L1.1620|
00070e  4545              CMP      r5,r8                 ;517
000710  d102              BNE      |L1.1816|
000712  981c              LDR      r0,[sp,#0x70]         ;517
000714  2802              CMP      r0,#2                 ;517
000716  d118              BNE      |L1.1866|
                  |L1.1816|
000718  4545              CMP      r5,r8                 ;518
00071a  d004              BEQ      |L1.1830|
00071c  9801              LDR      r0,[sp,#4]            ;519
00071e  f8300015          LDRH     r0,[r0,r5,LSL #1]     ;519
000722  9005              STR      r0,[sp,#0x14]         ;519
000724  e001              B        |L1.1834|
                  |L1.1830|
000726  9806              LDR      r0,[sp,#0x18]         ;521
000728  9005              STR      r0,[sp,#0x14]         ;521
                  |L1.1834|
00072a  b14e              CBZ      r6,|L1.1856|
00072c  9805              LDR      r0,[sp,#0x14]         ;524
00072e  f7fffffe          BL       LCD_SetColorIndex
000732  1e62              SUBS     r2,r4,#1              ;525
000734  1ba1              SUBS     r1,r4,r6              ;525
000736  1e48              SUBS     r0,r1,#1              ;525
000738  4651              MOV      r1,r10                ;525
00073a  f7fffffe          BL       LCD_DrawHLine
00073e  e004              B        |L1.1866|
                  |L1.1856|
000740  4651              MOV      r1,r10                ;527
000742  9a05              LDR      r2,[sp,#0x14]         ;527
000744  980a              LDR      r0,[sp,#0x28]         ;527
000746  f7fffffe          BL       LCD_SetPixelIndex
                  |L1.1866|
00074a  980b              LDR      r0,[sp,#0x2c]         ;531
00074c  b1a0              CBZ      r0,|L1.1912|
00074e  4928              LDR      r1,|L1.2032|
000750  980c              LDR      r0,[sp,#0x30]         ;532
000752  f8510020          LDR      r0,[r1,r0,LSL #2]     ;532
000756  4482              ADD      r10,r10,r0            ;532
000758  ebaa010b          SUB      r1,r10,r11            ;533
00075c  9808              LDR      r0,[sp,#0x20]         ;533
00075e  4281              CMP      r1,r0                 ;533
000760  db0c              BLT      |L1.1916|
000762  980c              LDR      r0,[sp,#0x30]         ;534
000764  f1000001          ADD      r0,r0,#1              ;534
000768  900c              STR      r0,[sp,#0x30]         ;534
00076a  4922              LDR      r1,|L1.2036|
00076c  980c              LDR      r0,[sp,#0x30]         ;535
00076e  f8510020          LDR      r0,[r1,r0,LSL #2]     ;535
000772  eb000a0b          ADD      r10,r0,r11            ;535
000776  e001              B        |L1.1916|
                  |L1.1912|
000778  f10a0a01          ADD      r10,r10,#1            ;538
                  |L1.1916|
00077c  980d              LDR      r0,[sp,#0x34]         ;476
00077e  f1000001          ADD      r0,r0,#1              ;476
000782  900d              STR      r0,[sp,#0x34]         ;476
                  |L1.1924|
000784  9908              LDR      r1,[sp,#0x20]         ;476
000786  980d              LDR      r0,[sp,#0x34]         ;476
000788  4288              CMP      r0,r1                 ;476
00078a  f6ffaf5d          BLT      |L1.1608|
00078e  2000              MOVS     r0,#0                 ;541
000790  e747              B        |L1.1570|
;;;543    
                          ENDP

                  _ReadColorMap PROC
;;;547    */
;;;548    static int _ReadColorMap(int NumColors) {
000792  e92d41f0          PUSH     {r4-r8,lr}
000796  4605              MOV      r5,r0
;;;549      int i;
;;;550      for (i = 0; i < NumColors; i++) {
000798  f04f0400          MOV      r4,#0
00079c  e018              B        |L1.2000|
                  |L1.1950|
;;;551        U8 r, g, b;
;;;552        r = _ReadU8 ();
00079e  f7fffffe          BL       _ReadU8
0007a2  4606              MOV      r6,r0
;;;553        g = _ReadU8 ();
0007a4  f7fffffe          BL       _ReadU8
0007a8  4607              MOV      r7,r0
;;;554        b = _ReadU8 ();
0007aa  f7fffffe          BL       _ReadU8
0007ae  4680              MOV      r8,r0
;;;555        if (_Source.RemBytes < 0) {
0007b0  4811              LDR      r0,|L1.2040|
0007b2  6840              LDR      r0,[r0,#4]  ; _Source
0007b4  2800              CMP      r0,#0
0007b6  da02              BGE      |L1.1982|
;;;556          return 1; /* Error */
0007b8  2001              MOVS     r0,#1
                  |L1.1978|
;;;557        }
;;;558        _aColorTable[i] = r | ((U16)g << 8) | ((U32)b << 16);
;;;559      }
;;;560      return 0;
;;;561    }
0007ba  e8bd81f0          POP      {r4-r8,pc}
                  |L1.1982|
0007be  ea462007          ORR      r0,r6,r7,LSL #8       ;558
0007c2  ea404008          ORR      r0,r0,r8,LSL #16      ;558
0007c6  4909              LDR      r1,|L1.2028|
0007c8  f8410024          STR      r0,[r1,r4,LSL #2]     ;558
0007cc  f1040401          ADD      r4,r4,#1              ;550
                  |L1.2000|
0007d0  42ac              CMP      r4,r5                 ;550
0007d2  dbe4              BLT      |L1.1950|
0007d4  2000              MOVS     r0,#0                 ;560
0007d6  e7f0              B        |L1.1978|
                  |L1.2008|
                          DCD      _LZWContext+0x3cbc
                  |L1.2012|
                          DCD      _LZWContext+0x3102
                  |L1.2016|
                          DCD      _LZWContext+0x102
                  |L1.2020|
                          DCD      _LZWContext+0x2102
                  |L1.2024|
                          DCD      _aBuffer
                  |L1.2028|
                          DCD      _aColorTable
                  |L1.2032|
                          DCD      _aInterlaceOffset
                  |L1.2036|
                          DCD      _aInterlaceYPos
                  |L1.2040|
                          DCD      _Source
                          ENDP

                  _InitGIFDecoding PROC
;;;573    */
;;;574    static int _InitGIFDecoding(const U8 * pData, U32 NumBytes) {
0007fc  b57c              PUSH     {r2-r6,lr}
0007fe  4605              MOV      r5,r0
000800  460c              MOV      r4,r1
;;;575      U8 acVersion[7] = {0};
000802  f04f0000          MOV      r0,#0
000806  9000              STR      r0,[sp,#0]
000808  9001              STR      r0,[sp,#4]
;;;576      _Source.pSrc     = pData;
00080a  48fe              LDR      r0,|L1.3076|
00080c  6005              STR      r5,[r0,#0]  ; _Source
;;;577      _Source.RemBytes = NumBytes;
00080e  6044              STR      r4,[r0,#4]  ; _Source
;;;578      /* Check if the file is a legal GIF file by checking the 6 byte file header */
;;;579      _ReadBytes(acVersion, 6); if (!_Source.RemBytes) { return 0; }
000810  f04f0106          MOV      r1,#6
000814  4668              MOV      r0,sp
000816  f7fffffe          BL       _ReadBytes
00081a  48fa              LDR      r0,|L1.3076|
00081c  6840              LDR      r0,[r0,#4]  ; _Source
00081e  b908              CBNZ     r0,|L1.2084|
000820  2000              MOVS     r0,#0
                  |L1.2082|
;;;580      if ( (acVersion[0] != 'G') || 
;;;581           (acVersion[1] != 'I') || 
;;;582           (acVersion[2] != 'F') || 
;;;583           (acVersion[3] != '8') ||
;;;584          ((acVersion[4] != '7') && (acVersion[4] != '9')) ||
;;;585           (acVersion[5] != 'a')) {
;;;586        return 1;
;;;587      }
;;;588      return 0;
;;;589    }
000822  bd7c              POP      {r2-r6,pc}
                  |L1.2084|
000824  f89d0000          LDRB     r0,[sp,#0]            ;580
000828  2847              CMP      r0,#0x47              ;580
00082a  d117              BNE      |L1.2140|
00082c  f89d0001          LDRB     r0,[sp,#1]            ;581
000830  2849              CMP      r0,#0x49              ;581
000832  d113              BNE      |L1.2140|
000834  f89d0002          LDRB     r0,[sp,#2]            ;582
000838  2846              CMP      r0,#0x46              ;582
00083a  d10f              BNE      |L1.2140|
00083c  f89d0003          LDRB     r0,[sp,#3]            ;583
000840  2838              CMP      r0,#0x38              ;583
000842  d10b              BNE      |L1.2140|
000844  f89d0004          LDRB     r0,[sp,#4]            ;584
000848  2837              CMP      r0,#0x37              ;584
00084a  d003              BEQ      |L1.2132|
00084c  f89d0004          LDRB     r0,[sp,#4]            ;584
000850  2839              CMP      r0,#0x39              ;584
000852  d103              BNE      |L1.2140|
                  |L1.2132|
000854  f89d0005          LDRB     r0,[sp,#5]            ;585
000858  2861              CMP      r0,#0x61              ;585
00085a  d001              BEQ      |L1.2144|
                  |L1.2140|
00085c  2001              MOVS     r0,#1                 ;586
00085e  e7e0              B        |L1.2082|
                  |L1.2144|
000860  2000              MOVS     r0,#0                 ;588
000862  e7de              B        |L1.2082|
;;;590    
                          ENDP

                  _GetImageDimension PROC
;;;600    */
;;;601    static int _GetImageDimension(int * pxSize, int * pySize) {
000864  e92d41f0          PUSH     {r4-r8,lr}
000868  4604              MOV      r4,r0
00086a  460d              MOV      r5,r1
;;;602      int XSize, YSize;
;;;603      /* Read image size */
;;;604      XSize = _ReadU16();
00086c  f7fffffe          BL       _ReadU16
000870  4606              MOV      r6,r0
;;;605      YSize = _ReadU16();
000872  f7fffffe          BL       _ReadU16
000876  4607              MOV      r7,r0
;;;606      if ((XSize > 2000) || (YSize > 2000)) {
000878  f5b66ffa          CMP      r6,#0x7d0
00087c  dc02              BGT      |L1.2180|
00087e  f5b76ffa          CMP      r7,#0x7d0
000882  dd02              BLE      |L1.2186|
                  |L1.2180|
;;;607        return 1; /* Error if image is too large */
000884  2001              MOVS     r0,#1
                  |L1.2182|
;;;608      }
;;;609      if (pxSize) {
;;;610        *pxSize = XSize;
;;;611      }
;;;612      if (pySize) {
;;;613        *pySize = YSize;
;;;614      }
;;;615      return 0;
;;;616    }
000886  e8bd81f0          POP      {r4-r8,pc}
                  |L1.2186|
00088a  b104              CBZ      r4,|L1.2190|
00088c  6026              STR      r6,[r4,#0]            ;610
                  |L1.2190|
00088e  b105              CBZ      r5,|L1.2194|
000890  602f              STR      r7,[r5,#0]            ;613
                  |L1.2194|
000892  2000              MOVS     r0,#0                 ;615
000894  e7f7              B        |L1.2182|
;;;617    
                          ENDP

                  _GetGlobalColorTable PROC
;;;628    */
;;;629    static int _GetGlobalColorTable(int * pNumColors) {
000896  b570              PUSH     {r4-r6,lr}
000898  4604              MOV      r4,r0
;;;630      U8 Flags;
;;;631      int NumColors;
;;;632      /* Read flags from logical screen descriptor */
;;;633      Flags = _ReadU8 ();
00089a  f7fffffe          BL       _ReadU8
00089e  4606              MOV      r6,r0
;;;634      _ReadU8 ();
0008a0  f7fffffe          BL       _ReadU8
;;;635      _ReadU8 ();
0008a4  f7fffffe          BL       _ReadU8
;;;636      if (_Source.RemBytes < 0) {
0008a8  48d6              LDR      r0,|L1.3076|
0008aa  6840              LDR      r0,[r0,#4]  ; _Source
0008ac  2800              CMP      r0,#0
0008ae  da01              BGE      |L1.2228|
;;;637        return 1; /* Error */
0008b0  2001              MOVS     r0,#1
                  |L1.2226|
;;;638      }
;;;639      NumColors = 2 << (Flags & 0x7);
;;;640      if (Flags & 0x80) {
;;;641        /* Read global color table */
;;;642        if (_ReadColorMap(NumColors)) {
;;;643          return 1; /* Error */
;;;644        }
;;;645      }
;;;646      if (pNumColors) {
;;;647        *pNumColors = NumColors;
;;;648      }
;;;649      return 0;
;;;650    }
0008b2  bd70              POP      {r4-r6,pc}
                  |L1.2228|
0008b4  f0060107          AND      r1,r6,#7              ;639
0008b8  f04f0002          MOV      r0,#2                 ;639
0008bc  fa00f501          LSL      r5,r0,r1              ;639
0008c0  f0160f80          TST      r6,#0x80              ;640
0008c4  d005              BEQ      |L1.2258|
0008c6  4628              MOV      r0,r5                 ;642
0008c8  f7fffffe          BL       _ReadColorMap
0008cc  b108              CBZ      r0,|L1.2258|
0008ce  2001              MOVS     r0,#1                 ;643
0008d0  e7ef              B        |L1.2226|
                  |L1.2258|
0008d2  b104              CBZ      r4,|L1.2262|
0008d4  6025              STR      r5,[r4,#0]            ;647
                  |L1.2262|
0008d6  2000              MOVS     r0,#0                 ;649
0008d8  e7eb              B        |L1.2226|
;;;651    
                          ENDP

                  _GetSizeAndColorTable PROC
;;;655    */
;;;656    static int _GetSizeAndColorTable(const U8 * pData, U32 NumBytes, int * pxSize, int * pySize, int * pNumColors) {
0008da  e92d41f0          PUSH     {r4-r8,lr}
0008de  4606              MOV      r6,r0
0008e0  460f              MOV      r7,r1
0008e2  4614              MOV      r4,r2
0008e4  461d              MOV      r5,r3
0008e6  f8dd8018          LDR      r8,[sp,#0x18]
;;;657      /* Initialize decoding */
;;;658      if (_InitGIFDecoding(pData, NumBytes)) {
0008ea  4639              MOV      r1,r7
0008ec  4630              MOV      r0,r6
0008ee  f7fffffe          BL       _InitGIFDecoding
0008f2  b110              CBZ      r0,|L1.2298|
;;;659        return 1; /* Error */
0008f4  2001              MOVS     r0,#1
                  |L1.2294|
;;;660      }
;;;661      /* Get image size */
;;;662      if (_GetImageDimension(pxSize, pySize)) {
;;;663        return 1; /* Error */
;;;664      }
;;;665      /* Get global color table (if available) */
;;;666      if (_GetGlobalColorTable(pNumColors)) {
;;;667        return 1; /* Error */
;;;668      }
;;;669      return 0;
;;;670    }
0008f6  e8bd81f0          POP      {r4-r8,pc}
                  |L1.2298|
0008fa  4629              MOV      r1,r5                 ;662
0008fc  4620              MOV      r0,r4                 ;662
0008fe  f7fffffe          BL       _GetImageDimension
000902  b108              CBZ      r0,|L1.2312|
000904  2001              MOVS     r0,#1                 ;663
000906  e7f6              B        |L1.2294|
                  |L1.2312|
000908  4640              MOV      r0,r8                 ;666
00090a  f7fffffe          BL       _GetGlobalColorTable
00090e  b108              CBZ      r0,|L1.2324|
000910  2001              MOVS     r0,#1                 ;667
000912  e7f0              B        |L1.2294|
                  |L1.2324|
000914  2000              MOVS     r0,#0                 ;669
000916  e7ee              B        |L1.2294|
;;;671    
                          ENDP

                  _GetGIFInfo PROC
;;;675    */
;;;676    static int _GetGIFInfo(const U8 * pData, U32 NumBytes, GUI_GIF_INFO * pInfo) {
000918  e92d47fc          PUSH     {r2-r10,lr}
00091c  4680              MOV      r8,r0
00091e  4689              MOV      r9,r1
000920  4615              MOV      r5,r2
;;;677      U8 Flags, Introducer;
;;;678      int NumColors, ImageCnt;
;;;679      /* Initialize decoding and get size and global color table */
;;;680      if (_GetSizeAndColorTable(pData, NumBytes, &pInfo->xSize, &pInfo->ySize, &NumColors)) {
000922  a801              ADD      r0,sp,#4
000924  f1050304          ADD      r3,r5,#4
000928  462a              MOV      r2,r5
00092a  4649              MOV      r1,r9
00092c  9000              STR      r0,[sp,#0]
00092e  4640              MOV      r0,r8
000930  f7fffffe          BL       _GetSizeAndColorTable
000934  b110              CBZ      r0,|L1.2364|
;;;681        return 1; /* Error */
000936  2001              MOVS     r0,#1
                  |L1.2360|
;;;682      }
;;;683      ImageCnt = 0;
;;;684      /* Iterate over the blocks */
;;;685      do {
;;;686        Introducer = _ReadU8();
;;;687        switch (Introducer) {
;;;688        case GIF_INTRO_IMAGE:
;;;689          _SkipBytes(8);                /* Skip the first 8 bytes of the image descriptor */
;;;690          Flags = _ReadU8();            /* Only 'Flags' are intresting */
;;;691          if (Flags & 0x80) {
;;;692            _SkipBytes(NumColors * 3);  /* Skip local color table */
;;;693          }
;;;694          _SkipBytes(1);                /* Skip codesize */
;;;695          while (_GetDataBlock(0) > 0); /* Skip data blocks */
;;;696          ImageCnt++;
;;;697          break;
;;;698        case GIF_INTRO_TERMINATOR:
;;;699          break;
;;;700        case GIF_INTRO_EXTENSION:
;;;701          if (_ReadExtension(NULL, NULL, NULL)) { /* Skip image extension */
;;;702            return 1;
;;;703          }
;;;704          break;
;;;705        default:
;;;706          return 1;
;;;707        }
;;;708      } while (Introducer != GIF_INTRO_TERMINATOR); /* We do not support more than one image, so stop when the first terminator has been read */
;;;709      pInfo->NumImages = ImageCnt;
;;;710      return 0;
;;;711    }
000938  e8bd87fc          POP      {r2-r10,pc}
                  |L1.2364|
00093c  f04f0700          MOV      r7,#0                 ;683
000940  bf00              NOP                            ;685
                  |L1.2370|
000942  f7fffffe          BL       _ReadU8
000946  4604              MOV      r4,r0                 ;686
000948  2c21              CMP      r4,#0x21              ;687
00094a  d01f              BEQ      |L1.2444|
00094c  2c2c              CMP      r4,#0x2c              ;687
00094e  d002              BEQ      |L1.2390|
000950  2c3b              CMP      r4,#0x3b              ;687
000952  d124              BNE      |L1.2462|
000954  e019              B        |L1.2442|
                  |L1.2390|
000956  2008              MOVS     r0,#8                 ;689
000958  f7fffffe          BL       _SkipBytes
00095c  f7fffffe          BL       _ReadU8
000960  4606              MOV      r6,r0                 ;690
000962  f0160f80          TST      r6,#0x80              ;691
000966  d004              BEQ      |L1.2418|
000968  9901              LDR      r1,[sp,#4]            ;692
00096a  eb010041          ADD      r0,r1,r1,LSL #1       ;692
00096e  f7fffffe          BL       _SkipBytes
                  |L1.2418|
000972  2001              MOVS     r0,#1                 ;694
000974  f7fffffe          BL       _SkipBytes
000978  bf00              NOP                            ;695
                  |L1.2426|
00097a  2000              MOVS     r0,#0                 ;695
00097c  f7fffffe          BL       _GetDataBlock
000980  2800              CMP      r0,#0                 ;695
000982  dcfa              BGT      |L1.2426|
000984  f1070701          ADD      r7,r7,#1              ;696
000988  e00b              B        |L1.2466|
                  |L1.2442|
00098a  e00a              B        |L1.2466|
                  |L1.2444|
00098c  2200              MOVS     r2,#0                 ;701
00098e  4611              MOV      r1,r2                 ;701
000990  4610              MOV      r0,r2                 ;701
000992  f7fffffe          BL       _ReadExtension
000996  b108              CBZ      r0,|L1.2460|
000998  2001              MOVS     r0,#1                 ;702
00099a  e7cd              B        |L1.2360|
                  |L1.2460|
00099c  e001              B        |L1.2466|
                  |L1.2462|
00099e  2001              MOVS     r0,#1                 ;706
0009a0  e7ca              B        |L1.2360|
                  |L1.2466|
0009a2  bf00              NOP                            ;697
0009a4  2c3b              CMP      r4,#0x3b              ;708
0009a6  d1cc              BNE      |L1.2370|
0009a8  60af              STR      r7,[r5,#8]            ;709
0009aa  2000              MOVS     r0,#0                 ;710
0009ac  e7c4              B        |L1.2360|
;;;712    
                          ENDP

                  _GetImageInfo PROC
;;;716    */
;;;717    static int _GetImageInfo(const U8 * pData, U32 NumBytes, GUI_GIF_IMAGE_INFO * pInfo, int Index) {
0009ae  e92d47fc          PUSH     {r2-r10,lr}
0009b2  4681              MOV      r9,r0
0009b4  468a              MOV      r10,r1
0009b6  4614              MOV      r4,r2
0009b8  461f              MOV      r7,r3
;;;718      U8 Flags, Introducer;
;;;719      int NumColors, ImageCnt;
;;;720      /* Initialize decoding and get size and global color table */
;;;721      if (_GetSizeAndColorTable(pData, NumBytes, NULL, NULL, &NumColors)) {
0009ba  a801              ADD      r0,sp,#4
0009bc  f04f0300          MOV      r3,#0
0009c0  461a              MOV      r2,r3
0009c2  4651              MOV      r1,r10
0009c4  9000              STR      r0,[sp,#0]
0009c6  4648              MOV      r0,r9
0009c8  f7fffffe          BL       _GetSizeAndColorTable
0009cc  b110              CBZ      r0,|L1.2516|
;;;722        return 1; /* Error */
0009ce  2001              MOVS     r0,#1
                  |L1.2512|
;;;723      }
;;;724      ImageCnt = 0;
;;;725      /* Iterate over the blocks */
;;;726      do {
;;;727        Introducer = _ReadU8();
;;;728        switch (Introducer) {
;;;729        case GIF_INTRO_IMAGE:
;;;730          if (Index == ImageCnt) {
;;;731            pInfo->xPos  = _ReadU16();
;;;732            pInfo->xPos  = _ReadU16();
;;;733            pInfo->xSize = _ReadU16();
;;;734            pInfo->ySize = _ReadU16();
;;;735            return 0;
;;;736          }
;;;737          _SkipBytes(8);                /* Skip the first 8 bytes of the image descriptor */
;;;738          Flags = _ReadU8();            /* Only 'Flags' are intresting */
;;;739          if (Flags & 0x80) {
;;;740            _SkipBytes(NumColors * 3);  /* Skip local color table */
;;;741          }
;;;742          _SkipBytes(1);                /* Skip codesize */
;;;743          while (_GetDataBlock(0) > 0); /* Skip data blocks */
;;;744          ImageCnt++;
;;;745          break;
;;;746        case GIF_INTRO_TERMINATOR:
;;;747          break;
;;;748        case GIF_INTRO_EXTENSION:
;;;749          if (_ReadExtension(NULL, (Index == ImageCnt) ? pInfo : NULL, NULL)) {
;;;750            return 1;
;;;751          }
;;;752          break;
;;;753        default:
;;;754          return 1;
;;;755        }
;;;756      } while (Introducer != GIF_INTRO_TERMINATOR); /* We do not support more than one image, so stop when the first terminator has been read */
;;;757      return 0;
;;;758    }
0009d0  e8bd87fc          POP      {r2-r10,pc}
                  |L1.2516|
0009d4  f04f0600          MOV      r6,#0                 ;724
0009d8  bf00              NOP                            ;726
                  |L1.2522|
0009da  f7fffffe          BL       _ReadU8
0009de  4605              MOV      r5,r0                 ;727
0009e0  4628              MOV      r0,r5                 ;728
0009e2  2d21              CMP      r5,#0x21              ;728
0009e4  d02f              BEQ      |L1.2630|
0009e6  282c              CMP      r0,#0x2c              ;728
0009e8  d002              BEQ      |L1.2544|
0009ea  283b              CMP      r0,#0x3b              ;728
0009ec  d139              BNE      |L1.2658|
0009ee  e029              B        |L1.2628|
                  |L1.2544|
0009f0  42b7              CMP      r7,r6                 ;730
0009f2  d10d              BNE      |L1.2576|
0009f4  f7fffffe          BL       _ReadU16
0009f8  6020              STR      r0,[r4,#0]            ;731
0009fa  f7fffffe          BL       _ReadU16
0009fe  6020              STR      r0,[r4,#0]            ;732
000a00  f7fffffe          BL       _ReadU16
000a04  60a0              STR      r0,[r4,#8]            ;733
000a06  f7fffffe          BL       _ReadU16
000a0a  60e0              STR      r0,[r4,#0xc]          ;734
000a0c  2000              MOVS     r0,#0                 ;735
000a0e  e7df              B        |L1.2512|
                  |L1.2576|
000a10  2008              MOVS     r0,#8                 ;737
000a12  f7fffffe          BL       _SkipBytes
000a16  f7fffffe          BL       _ReadU8
000a1a  4680              MOV      r8,r0                 ;738
000a1c  f0180f80          TST      r8,#0x80              ;739
000a20  d004              BEQ      |L1.2604|
000a22  9901              LDR      r1,[sp,#4]            ;740
000a24  eb010041          ADD      r0,r1,r1,LSL #1       ;740
000a28  f7fffffe          BL       _SkipBytes
                  |L1.2604|
000a2c  2001              MOVS     r0,#1                 ;742
000a2e  f7fffffe          BL       _SkipBytes
000a32  bf00              NOP                            ;743
                  |L1.2612|
000a34  2000              MOVS     r0,#0                 ;743
000a36  f7fffffe          BL       _GetDataBlock
000a3a  2800              CMP      r0,#0                 ;743
000a3c  dcfa              BGT      |L1.2612|
000a3e  f1060601          ADD      r6,r6,#1              ;744
000a42  e010              B        |L1.2662|
                  |L1.2628|
000a44  e00f              B        |L1.2662|
                  |L1.2630|
000a46  42b7              CMP      r7,r6                 ;749
000a48  d101              BNE      |L1.2638|
000a4a  4620              MOV      r0,r4                 ;749
000a4c  e000              B        |L1.2640|
                  |L1.2638|
000a4e  2000              MOVS     r0,#0                 ;749
                  |L1.2640|
000a50  4601              MOV      r1,r0                 ;749
000a52  2200              MOVS     r2,#0                 ;749
000a54  4610              MOV      r0,r2                 ;749
000a56  f7fffffe          BL       _ReadExtension
000a5a  b108              CBZ      r0,|L1.2656|
000a5c  2001              MOVS     r0,#1                 ;750
000a5e  e7b7              B        |L1.2512|
                  |L1.2656|
000a60  e001              B        |L1.2662|
                  |L1.2658|
000a62  2001              MOVS     r0,#1                 ;754
000a64  e7b4              B        |L1.2512|
                  |L1.2662|
000a66  bf00              NOP                            ;745
000a68  2d3b              CMP      r5,#0x3b              ;756
000a6a  d1b6              BNE      |L1.2522|
000a6c  2000              MOVS     r0,#0                 ;757
000a6e  e7af              B        |L1.2512|
;;;759    
                          ENDP

                  _GetGIFComment PROC
;;;776    */
;;;777    static int _GetGIFComment(const U8 * pData, U32 NumBytes, U8 * pBuffer, int MaxSize, int Index) {
000a70  e92d4ffe          PUSH     {r1-r11,lr}
000a74  4681              MOV      r9,r0
000a76  468a              MOV      r10,r1
000a78  4693              MOV      r11,r2
000a7a  461f              MOV      r7,r3
000a7c  f8dd8030          LDR      r8,[sp,#0x30]
;;;778      U8 Flags, Introducer;
;;;779      int NumColors, CommentCnt, Size;
;;;780      /* Initialize decoding and skip size and global color table */
;;;781      if (_GetSizeAndColorTable(pData, NumBytes, NULL, NULL, &NumColors)) {
000a80  a802              ADD      r0,sp,#8
000a82  f04f0300          MOV      r3,#0
000a86  461a              MOV      r2,r3
000a88  4651              MOV      r1,r10
000a8a  9000              STR      r0,[sp,#0]
000a8c  4648              MOV      r0,r9
000a8e  f7fffffe          BL       _GetSizeAndColorTable
000a92  b110              CBZ      r0,|L1.2714|
;;;782        return 1; /* Error */
000a94  2001              MOVS     r0,#1
                  |L1.2710|
;;;783      }
;;;784      CommentCnt = Size = 0;
;;;785      /* Iterate over the blocks */
;;;786      do {
;;;787        Introducer = _ReadU8();
;;;788        switch (Introducer) {
;;;789        case GIF_INTRO_IMAGE:
;;;790          _SkipBytes(8);                /* Skip the first 8 bytes of the image descriptor */
;;;791          Flags = _ReadU8();            /* Only 'Flags' are intresting */
;;;792          if (Flags & 0x80) {
;;;793            _SkipBytes(NumColors * 3);  /* Skip local color table */
;;;794          }
;;;795          _SkipBytes(1);                /* Skip codesize */
;;;796          while (_GetDataBlock(0) > 0); /* Skip data blocks */
;;;797          break;
;;;798        case GIF_INTRO_TERMINATOR:
;;;799          break;
;;;800        case GIF_INTRO_EXTENSION:
;;;801          _ReadComment((Index == CommentCnt) ? pBuffer : NULL, MaxSize, &Size);
;;;802          if ((Size) && (Index == CommentCnt)) {
;;;803            return 0;
;;;804          }
;;;805          break;
;;;806        default:
;;;807          return 1;
;;;808        }
;;;809      } while (Introducer != GIF_INTRO_TERMINATOR); /* We do not support more than one image, so stop when the first terminator has been read */
;;;810      return 1;
;;;811    }
000a96  e8bd8ffe          POP      {r1-r11,pc}
                  |L1.2714|
000a9a  f04f0600          MOV      r6,#0                 ;784
000a9e  9601              STR      r6,[sp,#4]            ;784
000aa0  bf00              NOP                            ;786
                  |L1.2722|
000aa2  f7fffffe          BL       _ReadU8
000aa6  4604              MOV      r4,r0                 ;787
000aa8  4620              MOV      r0,r4                 ;788
000aaa  2c21              CMP      r4,#0x21              ;788
000aac  d01d              BEQ      |L1.2794|
000aae  282c              CMP      r0,#0x2c              ;788
000ab0  d002              BEQ      |L1.2744|
000ab2  283b              CMP      r0,#0x3b              ;788
000ab4  d12a              BNE      |L1.2828|
000ab6  e017              B        |L1.2792|
                  |L1.2744|
000ab8  2008              MOVS     r0,#8                 ;790
000aba  f7fffffe          BL       _SkipBytes
000abe  f7fffffe          BL       _ReadU8
000ac2  4605              MOV      r5,r0                 ;791
000ac4  f0150f80          TST      r5,#0x80              ;792
000ac8  d004              BEQ      |L1.2772|
000aca  9902              LDR      r1,[sp,#8]            ;793
000acc  eb010041          ADD      r0,r1,r1,LSL #1       ;793
000ad0  f7fffffe          BL       _SkipBytes
                  |L1.2772|
000ad4  2001              MOVS     r0,#1                 ;795
000ad6  f7fffffe          BL       _SkipBytes
000ada  bf00              NOP                            ;796
                  |L1.2780|
000adc  2000              MOVS     r0,#0                 ;796
000ade  f7fffffe          BL       _GetDataBlock
000ae2  2800              CMP      r0,#0                 ;796
000ae4  dcfa              BGT      |L1.2780|
000ae6  e013              B        |L1.2832|
                  |L1.2792|
000ae8  e012              B        |L1.2832|
                  |L1.2794|
000aea  45b0              CMP      r8,r6                 ;801
000aec  d101              BNE      |L1.2802|
000aee  4659              MOV      r1,r11                ;801
000af0  e000              B        |L1.2804|
                  |L1.2802|
000af2  2100              MOVS     r1,#0                 ;801
                  |L1.2804|
000af4  4608              MOV      r0,r1                 ;801
000af6  aa01              ADD      r2,sp,#4              ;801
000af8  4639              MOV      r1,r7                 ;801
000afa  f7fffffe          BL       _ReadComment
000afe  9801              LDR      r0,[sp,#4]            ;802
000b00  b118              CBZ      r0,|L1.2826|
000b02  45b0              CMP      r8,r6                 ;802
000b04  d101              BNE      |L1.2826|
000b06  2000              MOVS     r0,#0                 ;803
000b08  e7c5              B        |L1.2710|
                  |L1.2826|
000b0a  e001              B        |L1.2832|
                  |L1.2828|
000b0c  2001              MOVS     r0,#1                 ;807
000b0e  e7c2              B        |L1.2710|
                  |L1.2832|
000b10  bf00              NOP                            ;797
000b12  2c3b              CMP      r4,#0x3b              ;809
000b14  d1c5              BNE      |L1.2722|
000b16  2001              MOVS     r0,#1                 ;810
000b18  e7bd              B        |L1.2710|
;;;812    
                          ENDP

                  _ClearUnusedPixels PROC
;;;820    */
;;;821    static void _ClearUnusedPixels(int x0, int y0, IMAGE_DESCRIPTOR * pDescriptor, GUI_GIF_IMAGE_INFO * pInfo) {
000b1a  e92d41f0          PUSH     {r4-r8,lr}
000b1e  4606              MOV      r6,r0
000b20  460f              MOV      r7,r1
000b22  4615              MOV      r5,r2
000b24  461c              MOV      r4,r3
;;;822      LCD_SetColorIndex(LCD_GetBkColorIndex());
000b26  f7fffffe          BL       LCD_GetBkColorIndex
000b2a  4680              MOV      r8,r0
000b2c  f7fffffe          BL       LCD_SetColorIndex
;;;823      if (pDescriptor->YPos > pInfo->yPos) {
000b30  6868              LDR      r0,[r5,#4]
000b32  6861              LDR      r1,[r4,#4]
000b34  4288              CMP      r0,r1
000b36  dd16              BLE      |L1.2918|
;;;824        LCD_FillRect(x0 + pInfo->xPos,
000b38  f8d4c000          LDR      r12,[r4,#0]
000b3c  44b4              ADD      r12,r12,r6
000b3e  f8d48008          LDR      r8,[r4,#8]
000b42  44c4              ADD      r12,r12,r8
000b44  f1ac0201          SUB      r2,r12,#1
000b48  f8d5c004          LDR      r12,[r5,#4]
000b4c  44bc              ADD      r12,r12,r7
000b4e  f1ac0301          SUB      r3,r12,#1
000b52  f8d4c004          LDR      r12,[r4,#4]
000b56  eb0c0107          ADD      r1,r12,r7
000b5a  f8d4c000          LDR      r12,[r4,#0]
000b5e  eb0c0006          ADD      r0,r12,r6
000b62  f7fffffe          BL       LCD_FillRect
                  |L1.2918|
;;;825                     y0 + pInfo->yPos,
;;;826                     x0 + pInfo->xPos + pInfo->xSize - 1,
;;;827                     y0 + pDescriptor->YPos - 1);
;;;828      }
;;;829      if (pDescriptor->XPos > pInfo->xPos) {
000b66  6828              LDR      r0,[r5,#0]
000b68  6821              LDR      r1,[r4,#0]
000b6a  4288              CMP      r0,r1
000b6c  dd16              BLE      |L1.2972|
;;;830        LCD_FillRect(x0 + pInfo->xPos,
000b6e  f8d4c004          LDR      r12,[r4,#4]
000b72  44bc              ADD      r12,r12,r7
000b74  f8d4800c          LDR      r8,[r4,#0xc]
000b78  44c4              ADD      r12,r12,r8
000b7a  f1ac0301          SUB      r3,r12,#1
000b7e  f8d5c000          LDR      r12,[r5,#0]
000b82  44b4              ADD      r12,r12,r6
000b84  f1ac0201          SUB      r2,r12,#1
000b88  f8d4c004          LDR      r12,[r4,#4]
000b8c  eb0c0107          ADD      r1,r12,r7
000b90  f8d4c000          LDR      r12,[r4,#0]
000b94  eb0c0006          ADD      r0,r12,r6
000b98  f7fffffe          BL       LCD_FillRect
                  |L1.2972|
;;;831                     y0 + pInfo->yPos,
;;;832                     x0 + pDescriptor->XPos - 1,
;;;833                     y0 + pInfo->yPos + pInfo->ySize - 1);
;;;834      }
;;;835      if ((pDescriptor->YPos + pDescriptor->YSize) < (pInfo->yPos + pInfo->ySize)) {
000b9c  68e9              LDR      r1,[r5,#0xc]
000b9e  6868              LDR      r0,[r5,#4]
000ba0  4408              ADD      r0,r0,r1
000ba2  68e2              LDR      r2,[r4,#0xc]
000ba4  6861              LDR      r1,[r4,#4]
000ba6  4411              ADD      r1,r1,r2
000ba8  4288              CMP      r0,r1
000baa  da1d              BGE      |L1.3048|
;;;836        LCD_FillRect(x0 + pInfo->xPos,
000bac  f8d4c004          LDR      r12,[r4,#4]
000bb0  44bc              ADD      r12,r12,r7
000bb2  f8d4800c          LDR      r8,[r4,#0xc]
000bb6  44c4              ADD      r12,r12,r8
000bb8  f1ac0301          SUB      r3,r12,#1
000bbc  f8d4c000          LDR      r12,[r4,#0]
000bc0  44b4              ADD      r12,r12,r6
000bc2  f8d48008          LDR      r8,[r4,#8]
000bc6  44c4              ADD      r12,r12,r8
000bc8  f1ac0201          SUB      r2,r12,#1
000bcc  f8d5c004          LDR      r12,[r5,#4]
000bd0  44bc              ADD      r12,r12,r7
000bd2  f8d5800c          LDR      r8,[r5,#0xc]
000bd6  44c4              ADD      r12,r12,r8
000bd8  f1ac0101          SUB      r1,r12,#1
000bdc  f8d4c000          LDR      r12,[r4,#0]
000be0  eb0c0006          ADD      r0,r12,r6
000be4  f7fffffe          BL       LCD_FillRect
                  |L1.3048|
;;;837                     y0 + pDescriptor->YPos + pDescriptor->YSize - 1,
;;;838                     x0 + pInfo->xPos + pInfo->xSize - 1,
;;;839                     y0 + pInfo->yPos + pInfo->ySize - 1);
;;;840      }
;;;841      if ((pDescriptor->XPos + pDescriptor->XSize) < (pInfo->xPos + pInfo->xSize)) {
000be8  68a9              LDR      r1,[r5,#8]
000bea  6828              LDR      r0,[r5,#0]
000bec  4408              ADD      r0,r0,r1
000bee  68a2              LDR      r2,[r4,#8]
000bf0  6821              LDR      r1,[r4,#0]
000bf2  4411              ADD      r1,r1,r2
000bf4  4288              CMP      r0,r1
000bf6  da20              BGE      |L1.3130|
;;;842        LCD_FillRect(x0 + pDescriptor->XPos + pDescriptor->XSize - 1,
000bf8  f8d4c004          LDR      r12,[r4,#4]
000bfc  44bc              ADD      r12,r12,r7
000bfe  f8d4800c          LDR      r8,[r4,#0xc]
000c02  e001              B        |L1.3080|
                  |L1.3076|
                          DCD      _Source
                  |L1.3080|
000c08  44c4              ADD      r12,r12,r8
000c0a  f1ac0301          SUB      r3,r12,#1
000c0e  f8d4c000          LDR      r12,[r4,#0]
000c12  44b4              ADD      r12,r12,r6
000c14  f8d48008          LDR      r8,[r4,#8]
000c18  44c4              ADD      r12,r12,r8
000c1a  f1ac0201          SUB      r2,r12,#1
000c1e  f8d5c000          LDR      r12,[r5,#0]
000c22  44b4              ADD      r12,r12,r6
000c24  f8d58008          LDR      r8,[r5,#8]
000c28  44c4              ADD      r12,r12,r8
000c2a  f1ac0001          SUB      r0,r12,#1
000c2e  f8d4c004          LDR      r12,[r4,#4]
000c32  eb0c0107          ADD      r1,r12,r7
000c36  f7fffffe          BL       LCD_FillRect
                  |L1.3130|
;;;843                     y0 + pInfo->yPos,
;;;844                     x0 + pInfo->xPos + pInfo->xSize - 1,
;;;845                     y0 + pInfo->yPos + pInfo->ySize - 1);
;;;846      }
;;;847    }
000c3a  e8bd81f0          POP      {r4-r8,pc}
;;;848    
                          ENDP

                  _DrawGIFImage PROC
;;;865    */
;;;866    static int _DrawGIFImage(const U8 * pData, U32 NumBytes, int x0, int y0, int Index) {
000c3e  e92d47f0          PUSH     {r4-r10,lr}
000c42  b090              SUB      sp,sp,#0x40
000c44  4681              MOV      r9,r0
000c46  468a              MOV      r10,r1
000c48  4617              MOV      r7,r2
000c4a  4698              MOV      r8,r3
000c4c  9d18              LDR      r5,[sp,#0x60]
;;;867      U8 Disposal;
;;;868      int XSize, YSize, TransIndex, ImageCnt;
;;;869      IMAGE_DESCRIPTOR Descriptor = {0};
000c4e  f04f0118          MOV      r1,#0x18
000c52  a806              ADD      r0,sp,#0x18
000c54  f7fffffe          BL       __aeabi_memclr4
;;;870      GUI_GIF_IMAGE_INFO Info = {0};
000c58  f04f0114          MOV      r1,#0x14
000c5c  a801              ADD      r0,sp,#4
000c5e  f7fffffe          BL       __aeabi_memclr4
;;;871      U8 Introducer;
;;;872      ImageCnt   =  0;
000c62  f04f0400          MOV      r4,#0
;;;873      TransIndex = -1;
000c66  f04f30ff          MOV      r0,#0xffffffff
000c6a  900c              STR      r0,[sp,#0x30]
;;;874      /* Initialize decoding and get size and global color table */
;;;875      if (_GetSizeAndColorTable(pData, NumBytes, &XSize, &YSize, &Descriptor.NumColors)) {
000c6c  a80b              ADD      r0,sp,#0x2c
000c6e  ab0d              ADD      r3,sp,#0x34
000c70  aa0e              ADD      r2,sp,#0x38
000c72  4651              MOV      r1,r10
000c74  9000              STR      r0,[sp,#0]
000c76  4648              MOV      r0,r9
000c78  f7fffffe          BL       _GetSizeAndColorTable
000c7c  b118              CBZ      r0,|L1.3206|
;;;876        return 1; /* Error */
000c7e  2001              MOVS     r0,#1
                  |L1.3200|
;;;877      }
;;;878      /* Iterate over the blocks */
;;;879      do {
;;;880        Introducer = _ReadU8();
;;;881        switch (Introducer) {
;;;882        case GIF_INTRO_IMAGE:
;;;883          /* Read image descriptor */
;;;884          Descriptor.XPos  = _ReadU16();
;;;885          Descriptor.YPos  = _ReadU16();
;;;886          Descriptor.XSize = _ReadU16();
;;;887          Descriptor.YSize = _ReadU16();
;;;888          Descriptor.Flags = _ReadU8 ();
;;;889          if (_Source.RemBytes < 0) {
;;;890            return 1; /* Error */
;;;891          }
;;;892          if (Descriptor.Flags & 0x80) {
;;;893            /* Read local color table */
;;;894            if (_ReadColorMap(Descriptor.NumColors)) {
;;;895              return 1; /* Error */
;;;896            }
;;;897          }
;;;898          if (ImageCnt == Index - 1) {
;;;899            Info.xPos  = Descriptor.XPos;
;;;900            Info.yPos  = Descriptor.YPos;
;;;901            Info.xSize = Descriptor.XSize;
;;;902            Info.ySize = Descriptor.YSize;
;;;903          }
;;;904          if (Index == ImageCnt) {
;;;905            if (Disposal == 2) {
;;;906              _ClearUnusedPixels(x0, y0, &Descriptor, &Info);
;;;907            }
;;;908            if (_DispGIFImage(&Descriptor, x0 + Descriptor.XPos, y0 + Descriptor.YPos, TransIndex, Disposal)) {
;;;909              return 1; /* Error */
;;;910            }
;;;911            if (_ReadU8() != 0) {
;;;912              return 1; /* Error */
;;;913            }
;;;914            return 0;
;;;915          } else {
;;;916            _ReadU8();                    /* Skip codesize */
;;;917            while (_GetDataBlock(0) > 0); /* Skip data blocks */
;;;918          }
;;;919          ImageCnt++;
;;;920          break;
;;;921        case GIF_INTRO_TERMINATOR:
;;;922          break;
;;;923        case GIF_INTRO_EXTENSION:
;;;924          /* Read image extension */
;;;925          if (_ReadExtension(&TransIndex, (Index == ImageCnt) ? &Info : NULL, (Index == ImageCnt) ? &Disposal : NULL)) {
;;;926            return 1;
;;;927          }
;;;928          break;
;;;929        default:
;;;930          return 1;
;;;931        }
;;;932      } while (Introducer != GIF_INTRO_TERMINATOR); /* We do not support more than one image, so stop when the first terminator has been read */
;;;933      return 0;
;;;934    }
000c80  b010              ADD      sp,sp,#0x40
000c82  e8bd87f0          POP      {r4-r10,pc}
                  |L1.3206|
000c86  bf00              NOP                            ;879
                  |L1.3208|
000c88  f7fffffe          BL       _ReadU8
000c8c  4606              MOV      r6,r0                 ;880
000c8e  4630              MOV      r0,r6                 ;881
000c90  2e21              CMP      r6,#0x21              ;881
000c92  d05c              BEQ      |L1.3406|
000c94  282c              CMP      r0,#0x2c              ;881
000c96  d002              BEQ      |L1.3230|
000c98  283b              CMP      r0,#0x3b              ;881
000c9a  d16b              BNE      |L1.3444|
000c9c  e056              B        |L1.3404|
                  |L1.3230|
000c9e  f7fffffe          BL       _ReadU16
000ca2  9006              STR      r0,[sp,#0x18]         ;884
000ca4  f7fffffe          BL       _ReadU16
000ca8  9007              STR      r0,[sp,#0x1c]         ;885
000caa  f7fffffe          BL       _ReadU16
000cae  9008              STR      r0,[sp,#0x20]         ;886
000cb0  f7fffffe          BL       _ReadU16
000cb4  9009              STR      r0,[sp,#0x24]         ;887
000cb6  f7fffffe          BL       _ReadU8
000cba  900a              STR      r0,[sp,#0x28]         ;888
000cbc  4885              LDR      r0,|L1.3796|
000cbe  6840              LDR      r0,[r0,#4]            ;889  ; _Source
000cc0  2800              CMP      r0,#0                 ;889
000cc2  da01              BGE      |L1.3272|
000cc4  2001              MOVS     r0,#1                 ;890
000cc6  e7db              B        |L1.3200|
                  |L1.3272|
000cc8  980a              LDR      r0,[sp,#0x28]         ;892
000cca  f0100f80          TST      r0,#0x80              ;892
000cce  d005              BEQ      |L1.3292|
000cd0  980b              LDR      r0,[sp,#0x2c]         ;894
000cd2  f7fffffe          BL       _ReadColorMap
000cd6  b108              CBZ      r0,|L1.3292|
000cd8  2001              MOVS     r0,#1                 ;895
000cda  e7d1              B        |L1.3200|
                  |L1.3292|
000cdc  1e68              SUBS     r0,r5,#1              ;898
000cde  42a0              CMP      r0,r4                 ;898
000ce0  d107              BNE      |L1.3314|
000ce2  9806              LDR      r0,[sp,#0x18]         ;899
000ce4  9001              STR      r0,[sp,#4]            ;899
000ce6  9807              LDR      r0,[sp,#0x1c]         ;900
000ce8  9002              STR      r0,[sp,#8]            ;900
000cea  9808              LDR      r0,[sp,#0x20]         ;901
000cec  9003              STR      r0,[sp,#0xc]          ;901
000cee  9809              LDR      r0,[sp,#0x24]         ;902
000cf0  9004              STR      r0,[sp,#0x10]         ;902
                  |L1.3314|
000cf2  42a5              CMP      r5,r4                 ;904
000cf4  d11f              BNE      |L1.3382|
000cf6  f89d003c          LDRB     r0,[sp,#0x3c]         ;905
000cfa  2802              CMP      r0,#2                 ;905
000cfc  d105              BNE      |L1.3338|
000cfe  ab01              ADD      r3,sp,#4              ;906
000d00  aa06              ADD      r2,sp,#0x18           ;906
000d02  4641              MOV      r1,r8                 ;906
000d04  4638              MOV      r0,r7                 ;906
000d06  f7fffffe          BL       _ClearUnusedPixels
                  |L1.3338|
000d0a  f89d003c          LDRB     r0,[sp,#0x3c]         ;908
000d0e  9000              STR      r0,[sp,#0]            ;908
000d10  9807              LDR      r0,[sp,#0x1c]         ;908
000d12  eb000208          ADD      r2,r0,r8              ;908
000d16  9806              LDR      r0,[sp,#0x18]         ;908
000d18  19c1              ADDS     r1,r0,r7              ;908
000d1a  a806              ADD      r0,sp,#0x18           ;908
000d1c  9b0c              LDR      r3,[sp,#0x30]         ;908
000d1e  f7fffffe          BL       _DispGIFImage
000d22  b108              CBZ      r0,|L1.3368|
000d24  2001              MOVS     r0,#1                 ;909
000d26  e7ab              B        |L1.3200|
                  |L1.3368|
000d28  f7fffffe          BL       _ReadU8
000d2c  b108              CBZ      r0,|L1.3378|
000d2e  2001              MOVS     r0,#1                 ;912
000d30  e7a6              B        |L1.3200|
                  |L1.3378|
000d32  2000              MOVS     r0,#0                 ;914
000d34  e7a4              B        |L1.3200|
                  |L1.3382|
000d36  f7fffffe          BL       _ReadU8
000d3a  bf00              NOP                            ;917
                  |L1.3388|
000d3c  2000              MOVS     r0,#0                 ;917
000d3e  f7fffffe          BL       _GetDataBlock
000d42  2800              CMP      r0,#0                 ;917
000d44  dcfa              BGT      |L1.3388|
000d46  f1040401          ADD      r4,r4,#1              ;919
000d4a  e015              B        |L1.3448|
                  |L1.3404|
000d4c  e014              B        |L1.3448|
                  |L1.3406|
000d4e  42a5              CMP      r5,r4                 ;925
000d50  d101              BNE      |L1.3414|
000d52  a80f              ADD      r0,sp,#0x3c           ;925
000d54  e000              B        |L1.3416|
                  |L1.3414|
000d56  2000              MOVS     r0,#0                 ;925
                  |L1.3416|
000d58  4602              MOV      r2,r0                 ;925
000d5a  42a5              CMP      r5,r4                 ;925
000d5c  d101              BNE      |L1.3426|
000d5e  a801              ADD      r0,sp,#4              ;925
000d60  e000              B        |L1.3428|
                  |L1.3426|
000d62  2000              MOVS     r0,#0                 ;925
                  |L1.3428|
000d64  4601              MOV      r1,r0                 ;925
000d66  a80c              ADD      r0,sp,#0x30           ;925
000d68  f7fffffe          BL       _ReadExtension
000d6c  b108              CBZ      r0,|L1.3442|
000d6e  2001              MOVS     r0,#1                 ;926
000d70  e786              B        |L1.3200|
                  |L1.3442|
000d72  e001              B        |L1.3448|
                  |L1.3444|
000d74  2001              MOVS     r0,#1                 ;930
000d76  e783              B        |L1.3200|
                  |L1.3448|
000d78  bf00              NOP                            ;920
000d7a  2e3b              CMP      r6,#0x3b              ;932
000d7c  d184              BNE      |L1.3208|
000d7e  2000              MOVS     r0,#0                 ;933
000d80  e77e              B        |L1.3200|
;;;935    
                          ENDP

                  GUI_GIF_GetXSize PROC
;;;948    */
;;;949    int GUI_GIF_GetXSize(const void * pGIF) {
000d82  b538              PUSH     {r3-r5,lr}
000d84  4604              MOV      r4,r0
;;;950      const U8 * pSrc;
;;;951      if (!pGIF) {
000d86  b90c              CBNZ     r4,|L1.3468|
;;;952        return 0;
000d88  2000              MOVS     r0,#0
                  |L1.3466|
;;;953      }
;;;954      pSrc = (const U8 *)pGIF + 6;
;;;955      return GUI__Read16(&pSrc);
;;;956    }
000d8a  bd38              POP      {r3-r5,pc}
                  |L1.3468|
000d8c  f1040006          ADD      r0,r4,#6              ;954
000d90  9000              STR      r0,[sp,#0]            ;954
000d92  4668              MOV      r0,sp                 ;955
000d94  f7fffffe          BL       GUI__Read16
000d98  e7f7              B        |L1.3466|
;;;957    
                          ENDP

                  GUI_GIF_GetYSize PROC
;;;964    */
;;;965    int GUI_GIF_GetYSize(const void * pGIF) {
000d9a  b538              PUSH     {r3-r5,lr}
000d9c  4604              MOV      r4,r0
;;;966      const U8 * pSrc;
;;;967      if (!pGIF) {
000d9e  b90c              CBNZ     r4,|L1.3492|
;;;968        return 0;
000da0  2000              MOVS     r0,#0
                  |L1.3490|
;;;969      }
;;;970      pSrc = (const U8 *)pGIF + 8;
;;;971      return GUI__Read16(&pSrc);
;;;972    }
000da2  bd38              POP      {r3-r5,pc}
                  |L1.3492|
000da4  f1040008          ADD      r0,r4,#8              ;970
000da8  9000              STR      r0,[sp,#0]            ;970
000daa  4668              MOV      r0,sp                 ;971
000dac  f7fffffe          BL       GUI__Read16
000db0  e7f7              B        |L1.3490|
;;;973    
                          ENDP

                  GUI_GIF_DrawEx PROC
;;;977    */
;;;978    int GUI_GIF_DrawEx(const void * pGIF, U32 NumBytes, int x0, int y0, int Index) {
000db2  e92d4ff0          PUSH     {r4-r11,lr}
000db6  b085              SUB      sp,sp,#0x14
000db8  4606              MOV      r6,r0
000dba  4688              MOV      r8,r1
000dbc  4614              MOV      r4,r2
000dbe  461d              MOV      r5,r3
000dc0  f8dd9038          LDR      r9,[sp,#0x38]
;;;979      const U8 * pSrc;
;;;980      int Result, OldColorIndex;
;;;981      #if (GUI_WINSUPPORT)
;;;982        int Width, Height;
;;;983        GUI_RECT r;
;;;984        Width  = GUI_GIF_GetXSize(pGIF);
000dc4  4630              MOV      r0,r6
000dc6  f7fffffe          BL       GUI_GIF_GetXSize
000dca  4682              MOV      r10,r0
;;;985        Height = GUI_GIF_GetYSize(pGIF);
000dcc  4630              MOV      r0,r6
000dce  f7fffffe          BL       GUI_GIF_GetYSize
000dd2  4683              MOV      r11,r0
;;;986      #endif
;;;987      GUI_LOCK();
;;;988      OldColorIndex = LCD_GetColorIndex();
000dd4  f7fffffe          BL       LCD_GetColorIndex
000dd8  9003              STR      r0,[sp,#0xc]
;;;989      pSrc          = (const U8 *)pGIF;
000dda  9604              STR      r6,[sp,#0x10]
;;;990      #if (GUI_WINSUPPORT)
;;;991        WM_ADDORG(x0,y0);
000ddc  483e              LDR      r0,|L1.3800|
000dde  6c00              LDR      r0,[r0,#0x40]  ; GUI_Context
000de0  4404              ADD      r4,r4,r0
000de2  483d              LDR      r0,|L1.3800|
000de4  6c40              LDR      r0,[r0,#0x44]  ; GUI_Context
000de6  4405              ADD      r5,r5,r0
;;;992        r.x1 = (r.x0 = x0) + Width - 1;
000de8  b220              SXTH     r0,r4
000dea  f8ad0004          STRH     r0,[sp,#4]
000dee  4450              ADD      r0,r0,r10
000df0  f1a00001          SUB      r0,r0,#1
000df4  b200              SXTH     r0,r0
000df6  f8ad0008          STRH     r0,[sp,#8]
;;;993        r.y1 = (r.y0 = y0) + Height - 1;
000dfa  b228              SXTH     r0,r5
000dfc  f8ad0006          STRH     r0,[sp,#6]
000e00  4458              ADD      r0,r0,r11
000e02  f1a00001          SUB      r0,r0,#1
000e06  b200              SXTH     r0,r0
000e08  f8ad000a          STRH     r0,[sp,#0xa]
;;;994        WM_ITERATE_START(&r) {
000e0c  a801              ADD      r0,sp,#4
000e0e  f7fffffe          BL       WM__InitIVRSearch
000e12  b168              CBZ      r0,|L1.3632|
000e14  bf00              NOP      
                  |L1.3606|
;;;995      #endif
;;;996      Result = _DrawGIFImage(pSrc, NumBytes, x0, y0, Index);
000e16  462b              MOV      r3,r5
000e18  4622              MOV      r2,r4
000e1a  4641              MOV      r1,r8
000e1c  f8cd9000          STR      r9,[sp,#0]
000e20  9804              LDR      r0,[sp,#0x10]
000e22  f7fffffe          BL       _DrawGIFImage
000e26  4607              MOV      r7,r0
;;;997      #if (GUI_WINSUPPORT)
;;;998        } WM_ITERATE_END();
000e28  f7fffffe          BL       WM__GetNextIVR
000e2c  2800              CMP      r0,#0
000e2e  d1f2              BNE      |L1.3606|
                  |L1.3632|
;;;999      #endif
;;;1000     LCD_SetColorIndex(OldColorIndex);
000e30  9803              LDR      r0,[sp,#0xc]
000e32  f7fffffe          BL       LCD_SetColorIndex
;;;1001     GUI_UNLOCK();
;;;1002     return Result;
000e36  4638              MOV      r0,r7
;;;1003   }
000e38  b005              ADD      sp,sp,#0x14
000e3a  e8bd8ff0          POP      {r4-r11,pc}
;;;1004   
                          ENDP

                  GUI_GIF_Draw PROC
;;;1008   */
;;;1009   int GUI_GIF_Draw(const void * pGIF, U32 NumBytes, int x0, int y0) {
000e3e  b5f8              PUSH     {r3-r7,lr}
000e40  4604              MOV      r4,r0
000e42  460d              MOV      r5,r1
000e44  4616              MOV      r6,r2
000e46  461f              MOV      r7,r3
;;;1010     return GUI_GIF_DrawEx(pGIF, NumBytes, x0, y0, 0);
000e48  f04f0000          MOV      r0,#0
000e4c  463b              MOV      r3,r7
000e4e  4632              MOV      r2,r6
000e50  4629              MOV      r1,r5
000e52  9000              STR      r0,[sp,#0]
000e54  4620              MOV      r0,r4
000e56  f7fffffe          BL       GUI_GIF_DrawEx
;;;1011   }
000e5a  bdf8              POP      {r3-r7,pc}
;;;1012   
                          ENDP

                  GUI_GIF_GetInfo PROC
;;;1016   */
;;;1017   int GUI_GIF_GetInfo(const void * pGIF, U32 NumBytes, GUI_GIF_INFO * pInfo) {
000e5c  e92d41f0          PUSH     {r4-r8,lr}
000e60  4604              MOV      r4,r0
000e62  460d              MOV      r5,r1
000e64  4616              MOV      r6,r2
;;;1018     const U8 * pSrc;
;;;1019     pSrc = (const U8 *)pGIF;
000e66  4627              MOV      r7,r4
;;;1020     if (_GetGIFInfo(pSrc, NumBytes, pInfo)) {
000e68  4632              MOV      r2,r6
000e6a  4629              MOV      r1,r5
000e6c  4638              MOV      r0,r7
000e6e  f7fffffe          BL       _GetGIFInfo
000e72  b110              CBZ      r0,|L1.3706|
;;;1021       return 1;
000e74  2001              MOVS     r0,#1
                  |L1.3702|
;;;1022     }
;;;1023     return 0;
;;;1024   }
000e76  e8bd81f0          POP      {r4-r8,pc}
                  |L1.3706|
000e7a  2000              MOVS     r0,#0                 ;1023
000e7c  e7fb              B        |L1.3702|
;;;1025   
                          ENDP

                  GUI_GIF_GetImageInfo PROC
;;;1029   */
;;;1030   int GUI_GIF_GetImageInfo(const void * pGIF, U32 NumBytes, GUI_GIF_IMAGE_INFO * pInfo, int Index) {
000e7e  e92d41f0          PUSH     {r4-r8,lr}
000e82  4604              MOV      r4,r0
000e84  460d              MOV      r5,r1
000e86  4616              MOV      r6,r2
000e88  461f              MOV      r7,r3
;;;1031     const U8 * pSrc;
;;;1032     pSrc = (const U8 *)pGIF;
000e8a  46a0              MOV      r8,r4
;;;1033     if (_GetImageInfo(pSrc, NumBytes, pInfo, Index)) {
000e8c  463b              MOV      r3,r7
000e8e  4632              MOV      r2,r6
000e90  4629              MOV      r1,r5
000e92  4640              MOV      r0,r8
000e94  f7fffffe          BL       _GetImageInfo
000e98  b110              CBZ      r0,|L1.3744|
;;;1034       return 1;
000e9a  2001              MOVS     r0,#1
                  |L1.3740|
;;;1035     }
;;;1036     return 0;
;;;1037   }
000e9c  e8bd81f0          POP      {r4-r8,pc}
                  |L1.3744|
000ea0  2000              MOVS     r0,#0                 ;1036
000ea2  e7fb              B        |L1.3740|
;;;1038   
                          ENDP

                  GUI_GIF_GetComment PROC
;;;1042   */
;;;1043   int GUI_GIF_GetComment(const void * pGIF, U32 NumBytes, U8 * pBuffer, int MaxSize, int Index) {
000ea4  e92d43f8          PUSH     {r3-r9,lr}
000ea8  4604              MOV      r4,r0
000eaa  460d              MOV      r5,r1
000eac  4616              MOV      r6,r2
000eae  461f              MOV      r7,r3
000eb0  f8dd8020          LDR      r8,[sp,#0x20]
;;;1044     const U8 * pSrc;
;;;1045     pSrc = (const U8 *)pGIF;
000eb4  46a1              MOV      r9,r4
;;;1046     if (_GetGIFComment(pSrc, NumBytes, pBuffer, MaxSize, Index)) {
000eb6  463b              MOV      r3,r7
000eb8  4632              MOV      r2,r6
000eba  4629              MOV      r1,r5
000ebc  4648              MOV      r0,r9
000ebe  f8cd8000          STR      r8,[sp,#0]
000ec2  f7fffffe          BL       _GetGIFComment
000ec6  b110              CBZ      r0,|L1.3790|
;;;1047       return 1;
000ec8  2001              MOVS     r0,#1
                  |L1.3786|
;;;1048     }
;;;1049     return 0;
;;;1050   }
000eca  e8bd83f8          POP      {r3-r9,pc}
                  |L1.3790|
000ece  2000              MOVS     r0,#0                 ;1049
000ed0  e7fb              B        |L1.3786|
;;;1051   
                          ENDP

000ed2  0000              DCW      0x0000
                  |L1.3796|
                          DCD      _Source
                  |L1.3800|
                          DCD      GUI_Context

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  _LZWContext
                          %        15604
                  _aColorTable
                          %        1024
                  _aBuffer
                          %        256

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  _aMaskTbl
                          DCD      0x00000000
                          DCD      0x00000001
                          DCD      0x00000003
                          DCD      0x00000007
                          DCD      0x0000000f
                          DCD      0x0000001f
                          DCD      0x0000003f
                          DCD      0x0000007f
                          DCD      0x000000ff
                          DCD      0x000001ff
                          DCD      0x000003ff
                          DCD      0x000007ff
                          DCD      0x00000fff
                          DCD      0x00001fff
                          DCD      0x00003fff
                          DCD      0x00007fff
                  _aInterlaceOffset
                          DCD      0x00000008
                          DCD      0x00000008
                          DCD      0x00000004
                          DCD      0x00000002
                  _aInterlaceYPos
                          DCD      0x00000000
                          DCD      0x00000004
                          DCD      0x00000002
                          DCD      0x00000001

                          AREA ||.data||, DATA, ALIGN=2

                  _Source
                          %        8
