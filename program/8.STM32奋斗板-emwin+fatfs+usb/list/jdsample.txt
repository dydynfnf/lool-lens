; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\jdsample.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\jdsample.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -I.\GUI\AntiAlias -I.\GUI\Config -I.\GUI\ConvertColor -I.\GUI\ConvertMono -I.\GUI\Core -I.\GUI\Font -I.\GUI\GUI_X -I.\GUI\JPEG -I.\GUI\LCDDriver -I.\GUI\MemDev -I.\GUI\MultiLayer -I.\GUI\Widget -I.\GUI\WM -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\INC\ST\STM32F10x -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\jdsample.crf GUI\JPEG\jdsample.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  start_pass_upsample PROC
;;;68     METHODDEF(void)
;;;69     start_pass_upsample (j_decompress_ptr cinfo)
000000  f8d011c4          LDR      r1,[r0,#0x1c4]
;;;70     {
;;;71       my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
;;;72     
;;;73       /* Mark the conversion buffer empty */
;;;74       upsample->next_row_out = cinfo->max_v_samp_factor;
000004  f8d02138          LDR      r2,[r0,#0x138]
000008  62ca              STR      r2,[r1,#0x2c]
;;;75       /* Initialize total-height counter for detecting bottom of image */
;;;76       upsample->rows_to_go = cinfo->output_height;
00000a  6f42              LDR      r2,[r0,#0x74]
00000c  630a              STR      r2,[r1,#0x30]
;;;77     }
00000e  4770              BX       lr
;;;78     
                          ENDP

                  sep_upsample PROC
;;;88     METHODDEF(void)
;;;89     sep_upsample (j_decompress_ptr cinfo,
000010  e92d4fff          PUSH     {r0-r11,lr}
;;;90     	      JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
;;;91     	      JDIMENSION in_row_groups_avail,
;;;92     	      JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
;;;93     	      JDIMENSION out_rows_avail)
;;;94     {
000014  b081              SUB      sp,sp,#4
000016  4605              MOV      r5,r0
000018  4690              MOV      r8,r2
00001a  e9dd9a0f          LDRD     r9,r10,[sp,#0x3c]
;;;95       my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
00001e  f8d541c4          LDR      r4,[r5,#0x1c4]
;;;96       int ci;
;;;97       jpeg_component_info * compptr;
;;;98       JDIMENSION num_rows;
;;;99     
;;;100      GUI_USE_PARA(in_row_groups_avail);
000022  9804              LDR      r0,[sp,#0x10]
000024  9004              STR      r0,[sp,#0x10]
;;;101      /* Fill the conversion buffer, if it's empty */
;;;102      if (upsample->next_row_out >= cinfo->max_v_samp_factor) {
000026  6ae0              LDR      r0,[r4,#0x2c]
000028  f8d51138          LDR      r1,[r5,#0x138]
00002c  4288              CMP      r0,r1
00002e  db24              BLT      |L1.122|
;;;103        for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
000030  f04f0600          MOV      r6,#0
000034  f8d5b0d8          LDR      r11,[r5,#0xd8]
000038  e019              B        |L1.110|
                  |L1.58|
;;;104    	 ci++, compptr++) {
;;;105          /* Invoke per-component upsample method.  Notice we pass a POINTER
;;;106           * to color_buf[ci], so that fullsize_upsample can change it.
;;;107           */
;;;108          (*upsample->methods[ci]) (cinfo, compptr,
00003a  f1040134          ADD      r1,r4,#0x34
00003e  f8511026          LDR      r1,[r1,r6,LSL #2]
000042  f8d80000          LDR      r0,[r8,#0]
000046  4348              MULS     r0,r1,r0
000048  9902              LDR      r1,[sp,#8]
00004a  f8511026          LDR      r1,[r1,r6,LSL #2]
00004e  eb010280          ADD      r2,r1,r0,LSL #2
000052  f104000c          ADD      r0,r4,#0xc
000056  eb000386          ADD      r3,r0,r6,LSL #2
00005a  3010              ADDS     r0,r0,#0x10
00005c  f850c026          LDR      r12,[r0,r6,LSL #2]
000060  4659              MOV      r1,r11
000062  4628              MOV      r0,r5
000064  47e0              BLX      r12
000066  f1060601          ADD      r6,r6,#1              ;104
00006a  f10b0b54          ADD      r11,r11,#0x54         ;104
                  |L1.110|
00006e  6a68              LDR      r0,[r5,#0x24]         ;103
000070  42b0              CMP      r0,r6                 ;103
000072  dce2              BGT      |L1.58|
;;;109    	input_buf[ci] + (*in_row_group_ctr * upsample->rowgroup_height[ci]),
;;;110    	upsample->color_buf + ci);
;;;111        }
;;;112        upsample->next_row_out = 0;
000074  f04f0000          MOV      r0,#0
000078  62e0              STR      r0,[r4,#0x2c]
                  |L1.122|
;;;113      }
;;;114    
;;;115      /* Color-convert and emit rows */
;;;116    
;;;117      /* How many we have in the buffer: */
;;;118      num_rows = (JDIMENSION) (cinfo->max_v_samp_factor - upsample->next_row_out);
00007a  f8d50138          LDR      r0,[r5,#0x138]
00007e  6ae1              LDR      r1,[r4,#0x2c]
000080  eba00701          SUB      r7,r0,r1
;;;119      /* Not more than the distance to the end of the image.  Need this test
;;;120       * in case the image height is not a multiple of max_v_samp_factor:
;;;121       */
;;;122      if (num_rows > upsample->rows_to_go) 
000084  6b20              LDR      r0,[r4,#0x30]
000086  42b8              CMP      r0,r7
000088  d200              BCS      |L1.140|
;;;123        num_rows = upsample->rows_to_go;
00008a  6b27              LDR      r7,[r4,#0x30]
                  |L1.140|
;;;124      /* And not more than what the client can accept: */
;;;125      out_rows_avail -= *out_row_ctr;
00008c  f8d90000          LDR      r0,[r9,#0]
000090  ebaa0a00          SUB      r10,r10,r0
;;;126      if (num_rows > out_rows_avail)
000094  4557              CMP      r7,r10
000096  d900              BLS      |L1.154|
;;;127        num_rows = out_rows_avail;
000098  4657              MOV      r7,r10
                  |L1.154|
;;;128    
;;;129      (*cinfo->cconvert->color_convert) (cinfo, upsample->color_buf,
00009a  9700              STR      r7,[sp,#0]
00009c  f8d91000          LDR      r1,[r9,#0]
0000a0  980e              LDR      r0,[sp,#0x38]
0000a2  eb000381          ADD      r3,r0,r1,LSL #2
0000a6  6ae2              LDR      r2,[r4,#0x2c]
0000a8  f8d501c8          LDR      r0,[r5,#0x1c8]
0000ac  f104010c          ADD      r1,r4,#0xc
0000b0  f8d0c004          LDR      r12,[r0,#4]
0000b4  4628              MOV      r0,r5
0000b6  47e0              BLX      r12
;;;130    				     (JDIMENSION) upsample->next_row_out,
;;;131    				     output_buf + *out_row_ctr,
;;;132    				     (int) num_rows);
;;;133    
;;;134      /* Adjust counts */
;;;135      *out_row_ctr += num_rows;
0000b8  f8d90000          LDR      r0,[r9,#0]
0000bc  4438              ADD      r0,r0,r7
0000be  f8c90000          STR      r0,[r9,#0]
;;;136      upsample->rows_to_go -= num_rows;
0000c2  6b20              LDR      r0,[r4,#0x30]
0000c4  eba00007          SUB      r0,r0,r7
0000c8  6320              STR      r0,[r4,#0x30]
;;;137      upsample->next_row_out += num_rows;
0000ca  6ae0              LDR      r0,[r4,#0x2c]
0000cc  4438              ADD      r0,r0,r7
0000ce  62e0              STR      r0,[r4,#0x2c]
;;;138      /* When the buffer is emptied, declare this input row group consumed */
;;;139      if (upsample->next_row_out >= cinfo->max_v_samp_factor)
0000d0  6ae0              LDR      r0,[r4,#0x2c]
0000d2  f8d51138          LDR      r1,[r5,#0x138]
0000d6  4288              CMP      r0,r1
0000d8  db05              BLT      |L1.230|
;;;140        (*in_row_group_ctr)++;
0000da  f8d80000          LDR      r0,[r8,#0]
0000de  f1000001          ADD      r0,r0,#1
0000e2  f8c80000          STR      r0,[r8,#0]
                  |L1.230|
;;;141    }
0000e6  b005              ADD      sp,sp,#0x14
0000e8  e8bd8ff0          POP      {r4-r11,pc}
;;;142    
                          ENDP

                  fullsize_upsample PROC
;;;157    METHODDEF(void)
;;;158    fullsize_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
0000ec  bf00              NOP      
;;;159    		   JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
;;;160    {
;;;161      GUI_USE_PARA(compptr);
;;;162      GUI_USE_PARA(cinfo);
0000ee  bf00              NOP      
;;;163      *output_data_ptr = input_data;
0000f0  601a              STR      r2,[r3,#0]
;;;164    }
0000f2  4770              BX       lr
;;;165    
                          ENDP

                  noop_upsample PROC
;;;172    METHODDEF(void)
;;;173    noop_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
0000f4  b510              PUSH     {r4,lr}
;;;174    	       JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
;;;175    {
;;;176      GUI_USE_PARA(cinfo);
0000f6  bf00              NOP      
;;;177      GUI_USE_PARA(compptr);
0000f8  bf00              NOP      
;;;178      GUI_USE_PARA(input_data);
0000fa  bf00              NOP      
;;;179      *output_data_ptr = NULL;	/* safety check */
0000fc  f04f0400          MOV      r4,#0
000100  601c              STR      r4,[r3,#0]
;;;180    }
000102  bd10              POP      {r4,pc}
;;;181    
                          ENDP

                  int_upsample PROC
;;;194    METHODDEF(void)
;;;195    int_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
000104  e92d4fff          PUSH     {r0-r11,lr}
;;;196    	      JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
;;;197    {
000108  b087              SUB      sp,sp,#0x1c
00010a  4604              MOV      r4,r0
00010c  460f              MOV      r7,r1
;;;198      my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
00010e  f8d4a1c4          LDR      r10,[r4,#0x1c4]
;;;199      JSAMPARRAY output_data = *output_data_ptr;
000112  980a              LDR      r0,[sp,#0x28]
000114  f8d08000          LDR      r8,[r0,#0]
;;;200      register JSAMPROW inptr, outptr;
;;;201      register JSAMPLE invalue;
;;;202      register int h;
;;;203      JSAMPROW outend;
;;;204      int h_expand, v_expand;
;;;205      int inrow, outrow;
;;;206    
;;;207      h_expand = upsample->h_expand[compptr->component_index];
000118  f10a0044          ADD      r0,r10,#0x44
00011c  6879              LDR      r1,[r7,#4]
00011e  5c40              LDRB     r0,[r0,r1]
000120  9003              STR      r0,[sp,#0xc]
;;;208      v_expand = upsample->v_expand[compptr->component_index];
000122  f10a0048          ADD      r0,r10,#0x48
000126  6879              LDR      r1,[r7,#4]
000128  f8109001          LDRB     r9,[r0,r1]
;;;209    
;;;210      inrow = outrow = 0;
00012c  f04f0000          MOV      r0,#0
000130  4605              MOV      r5,r0
000132  9002              STR      r0,[sp,#8]
;;;211      while (outrow < cinfo->max_v_samp_factor) {
000134  e030              B        |L1.408|
                  |L1.310|
;;;212        /* Generate one output row with proper horizontal expansion */
;;;213        inptr = input_data[inrow];
000136  9902              LDR      r1,[sp,#8]
000138  9809              LDR      r0,[sp,#0x24]
00013a  f8500021          LDR      r0,[r0,r1,LSL #2]
00013e  9006              STR      r0,[sp,#0x18]
;;;214        outptr = output_data[outrow];
000140  f8586025          LDR      r6,[r8,r5,LSL #2]
;;;215        outend = outptr + cinfo->output_width;
000144  6f20              LDR      r0,[r4,#0x70]
000146  4430              ADD      r0,r0,r6
000148  9004              STR      r0,[sp,#0x10]
;;;216        while (outptr < outend) {
00014a  e00f              B        |L1.364|
                  |L1.332|
;;;217          invalue = *inptr++;	/* don't need GETJSAMPLE() here */
00014c  9806              LDR      r0,[sp,#0x18]
00014e  f810bb01          LDRB     r11,[r0],#1
000152  9006              STR      r0,[sp,#0x18]
;;;218          for (h = h_expand; h > 0; h--) {
000154  9803              LDR      r0,[sp,#0xc]
000156  9005              STR      r0,[sp,#0x14]
000158  e005              B        |L1.358|
                  |L1.346|
;;;219    	*outptr++ = invalue;
00015a  f806bb01          STRB     r11,[r6],#1
00015e  9805              LDR      r0,[sp,#0x14]         ;218
000160  f1a00001          SUB      r0,r0,#1              ;218
000164  9005              STR      r0,[sp,#0x14]         ;218
                  |L1.358|
000166  9805              LDR      r0,[sp,#0x14]         ;218
000168  2800              CMP      r0,#0                 ;218
00016a  dcf6              BGT      |L1.346|
                  |L1.364|
00016c  9804              LDR      r0,[sp,#0x10]         ;216
00016e  4286              CMP      r6,r0                 ;216
000170  d3ec              BCC      |L1.332|
;;;220          }
;;;221        }
;;;222        /* Generate any additional output rows by duplicating the first one */
;;;223        if (v_expand > 1) {
000172  f1b90f01          CMP      r9,#1
000176  dd0a              BLE      |L1.398|
;;;224          jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
000178  f1a90001          SUB      r0,r9,#1
00017c  6f21              LDR      r1,[r4,#0x70]
00017e  1c6b              ADDS     r3,r5,#1
000180  4642              MOV      r2,r8
000182  e9cd0100          STRD     r0,r1,[sp,#0]
000186  4629              MOV      r1,r5
000188  4640              MOV      r0,r8
00018a  f7fffffe          BL       jcopy_sample_rows
                  |L1.398|
;;;225    			v_expand-1, cinfo->output_width);
;;;226        }
;;;227        inrow++;
00018e  9802              LDR      r0,[sp,#8]
000190  f1000001          ADD      r0,r0,#1
000194  9002              STR      r0,[sp,#8]
;;;228        outrow += v_expand;
000196  444d              ADD      r5,r5,r9
                  |L1.408|
000198  f8d40138          LDR      r0,[r4,#0x138]        ;211
00019c  42a8              CMP      r0,r5                 ;211
00019e  dcca              BGT      |L1.310|
;;;229      }
;;;230    }
0001a0  b00b              ADD      sp,sp,#0x2c
0001a2  e8bd8ff0          POP      {r4-r11,pc}
;;;231    
                          ENDP

                  h2v1_upsample PROC
;;;238    METHODDEF(void)
;;;239    h2v1_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
0001a6  e92d43f0          PUSH     {r4-r9,lr}
;;;240    	       JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
;;;241    {
0001aa  4604              MOV      r4,r0
0001ac  460d              MOV      r5,r1
0001ae  4616              MOV      r6,r2
;;;242      JSAMPARRAY output_data = *output_data_ptr;
0001b0  f8d38000          LDR      r8,[r3,#0]
;;;243      register JSAMPROW inptr, outptr;
;;;244      register JSAMPLE invalue;
;;;245      JSAMPROW outend;
;;;246      int inrow;
;;;247    
;;;248      GUI_USE_PARA(compptr);
0001b4  bf00              NOP      
;;;249      for (inrow = 0; inrow < cinfo->max_v_samp_factor; inrow++) {
0001b6  f04f0100          MOV      r1,#0
0001ba  e012              B        |L1.482|
                  |L1.444|
;;;250        inptr = input_data[inrow];
0001bc  f8567021          LDR      r7,[r6,r1,LSL #2]
;;;251        outptr = output_data[inrow];
0001c0  f8580021          LDR      r0,[r8,r1,LSL #2]
;;;252        outend = outptr + cinfo->output_width;
0001c4  f8d49070          LDR      r9,[r4,#0x70]
0001c8  eb090c00          ADD      r12,r9,r0
;;;253        while (outptr < outend) {
0001cc  e005              B        |L1.474|
                  |L1.462|
;;;254          invalue = *inptr++;	/* don't need GETJSAMPLE() here */
0001ce  f8172b01          LDRB     r2,[r7],#1
;;;255          *outptr++ = invalue;
0001d2  f8002b01          STRB     r2,[r0],#1
;;;256          *outptr++ = invalue;
0001d6  f8002b01          STRB     r2,[r0],#1
                  |L1.474|
0001da  4560              CMP      r0,r12                ;253
0001dc  d3f7              BCC      |L1.462|
0001de  f1010101          ADD      r1,r1,#1              ;249
                  |L1.482|
0001e2  f8d49138          LDR      r9,[r4,#0x138]        ;249
0001e6  4589              CMP      r9,r1                 ;249
0001e8  dce8              BGT      |L1.444|
;;;257        }
;;;258      }
;;;259    }
0001ea  e8bd83f0          POP      {r4-r9,pc}
;;;260    
                          ENDP

                  h2v2_upsample PROC
;;;267    METHODDEF(void)
;;;268    h2v2_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
0001ee  e92d4fff          PUSH     {r0-r11,lr}
;;;269    	       JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
;;;270    {
0001f2  b083              SUB      sp,sp,#0xc
0001f4  4606              MOV      r6,r0
0001f6  4689              MOV      r9,r1
;;;271      JSAMPARRAY output_data = *output_data_ptr;
0001f8  9806              LDR      r0,[sp,#0x18]
0001fa  6807              LDR      r7,[r0,#0]
;;;272      register JSAMPROW inptr, outptr;
;;;273      register JSAMPLE invalue;
;;;274      JSAMPROW outend;
;;;275      int inrow, outrow;
;;;276    
;;;277      GUI_USE_PARA(compptr);
0001fc  bf00              NOP      
;;;278      inrow = outrow = 0;
0001fe  f04f0000          MOV      r0,#0
000202  4605              MOV      r5,r0
000204  9002              STR      r0,[sp,#8]
;;;279      while (outrow < cinfo->max_v_samp_factor) {
000206  e021              B        |L1.588|
                  |L1.520|
;;;280        inptr = input_data[inrow];
000208  9902              LDR      r1,[sp,#8]
00020a  9805              LDR      r0,[sp,#0x14]
00020c  f850a021          LDR      r10,[r0,r1,LSL #2]
;;;281        outptr = output_data[outrow];
000210  f8574025          LDR      r4,[r7,r5,LSL #2]
;;;282        outend = outptr + cinfo->output_width;
000214  6f30              LDR      r0,[r6,#0x70]
000216  eb000b04          ADD      r11,r0,r4
;;;283        while (outptr < outend) {
00021a  e005              B        |L1.552|
                  |L1.540|
;;;284          invalue = *inptr++;	/* don't need GETJSAMPLE() here */
00021c  f81a8b01          LDRB     r8,[r10],#1
;;;285          *outptr++ = invalue;
000220  f8048b01          STRB     r8,[r4],#1
;;;286          *outptr++ = invalue;
000224  f8048b01          STRB     r8,[r4],#1
                  |L1.552|
000228  455c              CMP      r4,r11                ;283
00022a  d3f7              BCC      |L1.540|
;;;287        }
;;;288        jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
00022c  2101              MOVS     r1,#1
00022e  6f30              LDR      r0,[r6,#0x70]
000230  1c6b              ADDS     r3,r5,#1
000232  463a              MOV      r2,r7
000234  e9cd1000          STRD     r1,r0,[sp,#0]
000238  4629              MOV      r1,r5
00023a  4638              MOV      r0,r7
00023c  f7fffffe          BL       jcopy_sample_rows
;;;289    		      1, cinfo->output_width);
;;;290        inrow++;
000240  9802              LDR      r0,[sp,#8]
000242  f1000001          ADD      r0,r0,#1
000246  9002              STR      r0,[sp,#8]
;;;291        outrow += 2;
000248  f1050502          ADD      r5,r5,#2
                  |L1.588|
00024c  f8d60138          LDR      r0,[r6,#0x138]        ;279
000250  42a8              CMP      r0,r5                 ;279
000252  dcd9              BGT      |L1.520|
;;;292      }
;;;293    }
000254  b007              ADD      sp,sp,#0x1c
000256  e8bd8ff0          POP      {r4-r11,pc}
;;;294    
                          ENDP

                  h2v1_fancy_upsample PROC
;;;311    METHODDEF(void)
;;;312    h2v1_fancy_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
00025a  e92d47f0          PUSH     {r4-r10,lr}
;;;313    		     JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
;;;314    {
00025e  4604              MOV      r4,r0
000260  460d              MOV      r5,r1
000262  4616              MOV      r6,r2
000264  461f              MOV      r7,r3
;;;315      JSAMPARRAY output_data = *output_data_ptr;
000266  f8d78000          LDR      r8,[r7,#0]
;;;316      register JSAMPROW inptr, outptr;
;;;317      register int invalue;
;;;318      register JDIMENSION colctr;
;;;319      int inrow;
;;;320    
;;;321      for (inrow = 0; inrow < cinfo->max_v_samp_factor; inrow++) {
00026a  f04f0300          MOV      r3,#0
00026e  e041              B        |L1.756|
                  |L1.624|
;;;322        inptr = input_data[inrow];
000270  f8561023          LDR      r1,[r6,r3,LSL #2]
;;;323        outptr = output_data[inrow];
000274  f8580023          LDR      r0,[r8,r3,LSL #2]
;;;324        /* Special case for first column */
;;;325        invalue = GETJSAMPLE(*inptr++);
000278  f8112b01          LDRB     r2,[r1],#1
;;;326        *outptr++ = (JSAMPLE) invalue;
00027c  f8002b01          STRB     r2,[r0],#1
;;;327        *outptr++ = (JSAMPLE) ((invalue * 3 + GETJSAMPLE(*inptr) + 2) >> 2);
000280  eb020942          ADD      r9,r2,r2,LSL #1
000284  f891a000          LDRB     r10,[r1,#0]
000288  44d1              ADD      r9,r9,r10
00028a  f1090902          ADD      r9,r9,#2
00028e  f3c90987          UBFX     r9,r9,#2,#8
000292  f8009b01          STRB     r9,[r0],#1
;;;328    
;;;329        for (colctr = compptr->downsampled_width - 2; colctr > 0; colctr--) {
000296  f8d59028          LDR      r9,[r5,#0x28]
00029a  f1a90c02          SUB      r12,r9,#2
00029e  e017              B        |L1.720|
                  |L1.672|
;;;330          /* General case: 3/4 * nearer pixel + 1/4 * further pixel */
;;;331          invalue = GETJSAMPLE(*inptr++) * 3;
0002a0  f811ab01          LDRB     r10,[r1],#1
0002a4  eb0a024a          ADD      r2,r10,r10,LSL #1
;;;332          *outptr++ = (JSAMPLE) ((invalue + GETJSAMPLE(inptr[-2]) + 1) >> 2);
0002a8  f8119c02          LDRB     r9,[r1,#-2]
0002ac  4491              ADD      r9,r9,r2
0002ae  f1090901          ADD      r9,r9,#1
0002b2  f3c90987          UBFX     r9,r9,#2,#8
0002b6  f8009b01          STRB     r9,[r0],#1
;;;333          *outptr++ = (JSAMPLE) ((invalue + GETJSAMPLE(*inptr) + 2) >> 2);
0002ba  f8919000          LDRB     r9,[r1,#0]
0002be  4491              ADD      r9,r9,r2
0002c0  f1090902          ADD      r9,r9,#2
0002c4  f3c90987          UBFX     r9,r9,#2,#8
0002c8  f8009b01          STRB     r9,[r0],#1
0002cc  f1ac0c01          SUB      r12,r12,#1            ;329
                  |L1.720|
0002d0  f1bc0f00          CMP      r12,#0                ;329
0002d4  d1e4              BNE      |L1.672|
;;;334        }
;;;335    
;;;336        /* Special case for last column */
;;;337        invalue = GETJSAMPLE(*inptr);
0002d6  780a              LDRB     r2,[r1,#0]
;;;338        *outptr++ = (JSAMPLE) ((invalue * 3 + GETJSAMPLE(inptr[-1]) + 1) >> 2);
0002d8  eb020942          ADD      r9,r2,r2,LSL #1
0002dc  f811ac01          LDRB     r10,[r1,#-1]
0002e0  44d1              ADD      r9,r9,r10
0002e2  f1090901          ADD      r9,r9,#1
0002e6  f3c90987          UBFX     r9,r9,#2,#8
0002ea  f8009b01          STRB     r9,[r0],#1
;;;339        *outptr   = (JSAMPLE) invalue;
0002ee  7002              STRB     r2,[r0,#0]
0002f0  f1030301          ADD      r3,r3,#1              ;321
                  |L1.756|
0002f4  f8d49138          LDR      r9,[r4,#0x138]        ;321
0002f8  4599              CMP      r9,r3                 ;321
0002fa  dcb9              BGT      |L1.624|
;;;340      }
;;;341    }
0002fc  e8bd87f0          POP      {r4-r10,pc}
;;;342    
                          ENDP

                  h2v2_fancy_upsample PROC
;;;352    METHODDEF(void)
;;;353    h2v2_fancy_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
000300  e92d4fff          PUSH     {r0-r11,lr}
;;;354    		     JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
;;;355    {
000304  b081              SUB      sp,sp,#4
000306  4614              MOV      r4,r2
;;;356      JSAMPARRAY output_data = *output_data_ptr;
000308  f8dda010          LDR      r10,[sp,#0x10]
00030c  f8daa000          LDR      r10,[r10,#0]
000310  f8cda000          STR      r10,[sp,#0]
;;;357      register JSAMPROW inptr0, inptr1, outptr;
;;;358    #if BITS_IN_JSAMPLE == 8
;;;359      register int thiscolsum, lastcolsum, nextcolsum;
;;;360    #else
;;;361      register INT32 thiscolsum, lastcolsum, nextcolsum;
;;;362    #endif
;;;363      register JDIMENSION colctr;
;;;364      int inrow, outrow, v;
;;;365    
;;;366      inrow = outrow = 0;
000314  f04f0a00          MOV      r10,#0
000318  46d1              MOV      r9,r10
00031a  4656              MOV      r6,r10
;;;367      while (outrow < cinfo->max_v_samp_factor) {
00031c  e077              B        |L1.1038|
                  |L1.798|
;;;368        for (v = 0; v < 2; v++) {
00031e  f04f0700          MOV      r7,#0
000322  e070              B        |L1.1030|
                  |L1.804|
;;;369          /* inptr0 points to nearest input row, inptr1 points to next nearest */
;;;370          inptr0 = input_data[inrow];
000324  f8542026          LDR      r2,[r4,r6,LSL #2]
;;;371          if (v == 0)		/* next nearest is row above */
000328  b927              CBNZ     r7,|L1.820|
;;;372    	inptr1 = input_data[inrow-1];
00032a  f1a60a01          SUB      r10,r6,#1
00032e  f854302a          LDR      r3,[r4,r10,LSL #2]
000332  e003              B        |L1.828|
                  |L1.820|
;;;373          else			/* next nearest is row below */
;;;374    	inptr1 = input_data[inrow+1];
000334  f1060a01          ADD      r10,r6,#1
000338  f854302a          LDR      r3,[r4,r10,LSL #2]
                  |L1.828|
;;;375          outptr = output_data[outrow++];
00033c  46ca              MOV      r10,r9
00033e  f1090901          ADD      r9,r9,#1
000342  f8ddb000          LDR      r11,[sp,#0]
000346  f85b002a          LDR      r0,[r11,r10,LSL #2]
;;;376    
;;;377          /* Special case for first column */
;;;378          thiscolsum = GETJSAMPLE(*inptr0++) * 3 + GETJSAMPLE(*inptr1++);
00034a  f812bb01          LDRB     r11,[r2],#1
00034e  eb0b0a4b          ADD      r10,r11,r11,LSL #1
000352  f813bb01          LDRB     r11,[r3],#1
000356  eb0a010b          ADD      r1,r10,r11
;;;379          nextcolsum = GETJSAMPLE(*inptr0++) * 3 + GETJSAMPLE(*inptr1++);
00035a  f812bb01          LDRB     r11,[r2],#1
00035e  eb0b0a4b          ADD      r10,r11,r11,LSL #1
000362  f813bb01          LDRB     r11,[r3],#1
000366  eb0a050b          ADD      r5,r10,r11
;;;380          *outptr++ = (JSAMPLE) ((thiscolsum * 4 + 8) >> 4);
00036a  f04f0a08          MOV      r10,#8
00036e  eb0a0a81          ADD      r10,r10,r1,LSL #2
000372  f3ca1a07          UBFX     r10,r10,#4,#8
000376  f800ab01          STRB     r10,[r0],#1
;;;381          *outptr++ = (JSAMPLE) ((thiscolsum * 3 + nextcolsum + 7) >> 4);
00037a  eb010a41          ADD      r10,r1,r1,LSL #1
00037e  44aa              ADD      r10,r10,r5
000380  f10a0a07          ADD      r10,r10,#7
000384  f3ca1a07          UBFX     r10,r10,#4,#8
000388  f800ab01          STRB     r10,[r0],#1
;;;382          lastcolsum = thiscolsum; thiscolsum = nextcolsum;
00038c  468c              MOV      r12,r1
00038e  4629              MOV      r1,r5
;;;383    
;;;384          for (colctr = compptr->downsampled_width - 2; colctr > 0; colctr--) {
000390  f8dda008          LDR      r10,[sp,#8]
000394  f8daa028          LDR      r10,[r10,#0x28]
000398  f1aa0802          SUB      r8,r10,#2
00039c  e01d              B        |L1.986|
                  |L1.926|
;;;385    	/* General case: 3/4 * nearer pixel + 1/4 * further pixel in each */
;;;386    	/* dimension, thus 9/16, 3/16, 3/16, 1/16 overall */
;;;387    	nextcolsum = GETJSAMPLE(*inptr0++) * 3 + GETJSAMPLE(*inptr1++);
00039e  f812bb01          LDRB     r11,[r2],#1
0003a2  eb0b0a4b          ADD      r10,r11,r11,LSL #1
0003a6  f813bb01          LDRB     r11,[r3],#1
0003aa  eb0a050b          ADD      r5,r10,r11
;;;388    	*outptr++ = (JSAMPLE) ((thiscolsum * 3 + lastcolsum + 8) >> 4);
0003ae  eb010a41          ADD      r10,r1,r1,LSL #1
0003b2  44e2              ADD      r10,r10,r12
0003b4  f10a0a08          ADD      r10,r10,#8
0003b8  f3ca1a07          UBFX     r10,r10,#4,#8
0003bc  f800ab01          STRB     r10,[r0],#1
;;;389    	*outptr++ = (JSAMPLE) ((thiscolsum * 3 + nextcolsum + 7) >> 4);
0003c0  eb010a41          ADD      r10,r1,r1,LSL #1
0003c4  44aa              ADD      r10,r10,r5
0003c6  f10a0a07          ADD      r10,r10,#7
0003ca  f3ca1a07          UBFX     r10,r10,#4,#8
0003ce  f800ab01          STRB     r10,[r0],#1
;;;390    	lastcolsum = thiscolsum; thiscolsum = nextcolsum;
0003d2  468c              MOV      r12,r1
0003d4  4629              MOV      r1,r5
0003d6  f1a80801          SUB      r8,r8,#1              ;384
                  |L1.986|
0003da  f1b80f00          CMP      r8,#0                 ;384
0003de  d1de              BNE      |L1.926|
;;;391          }
;;;392    
;;;393          /* Special case for last column */
;;;394          *outptr++ = (JSAMPLE) ((thiscolsum * 3 + lastcolsum + 8) >> 4);
0003e0  eb010a41          ADD      r10,r1,r1,LSL #1
0003e4  44e2              ADD      r10,r10,r12
0003e6  f10a0a08          ADD      r10,r10,#8
0003ea  f3ca1a07          UBFX     r10,r10,#4,#8
0003ee  f800ab01          STRB     r10,[r0],#1
;;;395          *outptr   = (JSAMPLE) ((thiscolsum * 4 + 7) >> 4);
0003f2  f04f0a07          MOV      r10,#7
0003f6  eb0a0a81          ADD      r10,r10,r1,LSL #2
0003fa  f3ca1a07          UBFX     r10,r10,#4,#8
0003fe  f880a000          STRB     r10,[r0,#0]
000402  f1070701          ADD      r7,r7,#1              ;368
                  |L1.1030|
000406  2f02              CMP      r7,#2                 ;368
000408  db8c              BLT      |L1.804|
;;;396        }
;;;397        inrow++;
00040a  f1060601          ADD      r6,r6,#1
                  |L1.1038|
00040e  f8dda004          LDR      r10,[sp,#4]           ;367
000412  f8daa138          LDR      r10,[r10,#0x138]      ;367
000416  45ca              CMP      r10,r9                ;367
000418  dc81              BGT      |L1.798|
;;;398      }
;;;399    }
00041a  b005              ADD      sp,sp,#0x14
00041c  e8bd8ff0          POP      {r4-r11,pc}
;;;400    
                          ENDP

                  jinit_upsampler PROC
;;;406    GLOBAL(void)
;;;407    jinit_upsampler (j_decompress_ptr cinfo)
000420  e92d4ffe          PUSH     {r1-r11,lr}
;;;408    {
000424  4604              MOV      r4,r0
;;;409      my_upsample_ptr upsample;
;;;410      int ci;
;;;411      jpeg_component_info * compptr;
;;;412      boolean need_buffer, do_fancy;
;;;413      int h_in_group, v_in_group, h_out_group, v_out_group;
;;;414    
;;;415      upsample = (my_upsample_ptr)
000426  6860              LDR      r0,[r4,#4]
000428  f04f024c          MOV      r2,#0x4c
00042c  f04f0101          MOV      r1,#1
000430  6803              LDR      r3,[r0,#0]
000432  4620              MOV      r0,r4
000434  4798              BLX      r3
000436  4605              MOV      r5,r0
;;;416        (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
;;;417    				SIZEOF(my_upsampler));
;;;418      cinfo->upsample = (struct jpeg_upsampler *) upsample;
000438  f8c451c4          STR      r5,[r4,#0x1c4]
;;;419      upsample->pub.start_pass = start_pass_upsample;
00043c  4863              LDR      r0,|L1.1484|
00043e  6028              STR      r0,[r5,#0]
;;;420      upsample->pub.upsample = sep_upsample;
000440  4863              LDR      r0,|L1.1488|
000442  6068              STR      r0,[r5,#4]
;;;421      upsample->pub.need_context_rows = FALSE; /* until we find out differently */
000444  f04f0000          MOV      r0,#0
000448  60a8              STR      r0,[r5,#8]
;;;422    
;;;423      if (cinfo->CCIR601_sampling)	/* this isn't supported */
00044a  f8d4012c          LDR      r0,[r4,#0x12c]
00044e  b138              CBZ      r0,|L1.1120|
;;;424        ERREXIT(cinfo, JERR_CCIR601_NOTIMPL);
000450  f04f0019          MOV      r0,#0x19
000454  6821              LDR      r1,[r4,#0]
000456  6148              STR      r0,[r1,#0x14]
000458  6820              LDR      r0,[r4,#0]
00045a  6801              LDR      r1,[r0,#0]
00045c  4620              MOV      r0,r4
00045e  4788              BLX      r1
                  |L1.1120|
;;;425    
;;;426      /* jdmainct.c doesn't support context rows when min_DCT_scaled_size = 1,
;;;427       * so don't ask for it.
;;;428       */
;;;429      do_fancy = cinfo->do_fancy_upsampling && cinfo->min_DCT_scaled_size > 1;
000460  6ce0              LDR      r0,[r4,#0x4c]
000462  b130              CBZ      r0,|L1.1138|
000464  f8d4013c          LDR      r0,[r4,#0x13c]
000468  2801              CMP      r0,#1
00046a  dd02              BLE      |L1.1138|
00046c  f04f0001          MOV      r0,#1
000470  e001              B        |L1.1142|
                  |L1.1138|
000472  f04f0000          MOV      r0,#0
                  |L1.1142|
000476  9001              STR      r0,[sp,#4]
;;;430    
;;;431      /* Verify we can handle the sampling factors, select per-component methods,
;;;432       * and create storage as needed.
;;;433       */
;;;434      for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
000478  f04f0600          MOV      r6,#0
00047c  f8d470d8          LDR      r7,[r4,#0xd8]
000480  e09d              B        |L1.1470|
                  |L1.1154|
;;;435           ci++, compptr++) {
;;;436        /* Compute size of an "input group" after IDCT scaling.  This many samples
;;;437         * are to be converted to max_h_samp_factor * max_v_samp_factor pixels.
;;;438         */
;;;439        h_in_group = (compptr->h_samp_factor * compptr->DCT_scaled_size) /
000482  6a79              LDR      r1,[r7,#0x24]
000484  68b8              LDR      r0,[r7,#8]
000486  4348              MULS     r0,r1,r0
000488  f8d4113c          LDR      r1,[r4,#0x13c]
00048c  fb90f8f1          SDIV     r8,r0,r1
;;;440    		 cinfo->min_DCT_scaled_size;
;;;441        v_in_group = (compptr->v_samp_factor * compptr->DCT_scaled_size) /
000490  6a79              LDR      r1,[r7,#0x24]
000492  68f8              LDR      r0,[r7,#0xc]
000494  4348              MULS     r0,r1,r0
000496  f8d4113c          LDR      r1,[r4,#0x13c]
00049a  fb90f9f1          SDIV     r9,r0,r1
;;;442    		 cinfo->min_DCT_scaled_size;
;;;443        h_out_group = cinfo->max_h_samp_factor;
00049e  f8d4a134          LDR      r10,[r4,#0x134]
;;;444        v_out_group = cinfo->max_v_samp_factor;
0004a2  f8d4b138          LDR      r11,[r4,#0x138]
;;;445        upsample->rowgroup_height[ci] = v_in_group; /* save for use later */
0004a6  f1050034          ADD      r0,r5,#0x34
0004aa  f8409026          STR      r9,[r0,r6,LSL #2]
;;;446        need_buffer = TRUE;
0004ae  f04f0001          MOV      r0,#1
0004b2  9002              STR      r0,[sp,#8]
;;;447        if (! compptr->component_needed) {
0004b4  6b38              LDR      r0,[r7,#0x30]
0004b6  b940              CBNZ     r0,|L1.1226|
;;;448          /* Don't bother to upsample an uninteresting component. */
;;;449          upsample->methods[ci] = noop_upsample;
0004b8  4946              LDR      r1,|L1.1492|
0004ba  f105001c          ADD      r0,r5,#0x1c
0004be  f8401026          STR      r1,[r0,r6,LSL #2]
;;;450          need_buffer = FALSE;
0004c2  f04f0000          MOV      r0,#0
0004c6  9002              STR      r0,[sp,#8]
0004c8  e060              B        |L1.1420|
                  |L1.1226|
;;;451        } else if (h_in_group == h_out_group && v_in_group == v_out_group) {
0004ca  45d0              CMP      r8,r10
0004cc  d10a              BNE      |L1.1252|
0004ce  45d9              CMP      r9,r11
0004d0  d108              BNE      |L1.1252|
;;;452          /* Fullsize components can be processed without any work. */
;;;453          upsample->methods[ci] = fullsize_upsample;
0004d2  4941              LDR      r1,|L1.1496|
0004d4  f105001c          ADD      r0,r5,#0x1c
0004d8  f8401026          STR      r1,[r0,r6,LSL #2]
;;;454          need_buffer = FALSE;
0004dc  f04f0000          MOV      r0,#0
0004e0  9002              STR      r0,[sp,#8]
0004e2  e053              B        |L1.1420|
                  |L1.1252|
;;;455        } else if (h_in_group * 2 == h_out_group &&
0004e4  ebba0f48          CMP      r10,r8,LSL #1
0004e8  d112              BNE      |L1.1296|
;;;456    	       v_in_group == v_out_group) {
0004ea  45d9              CMP      r9,r11
0004ec  d110              BNE      |L1.1296|
;;;457          /* Special cases for 2h1v upsampling */
;;;458          if (do_fancy && compptr->downsampled_width > 2)
0004ee  9801              LDR      r0,[sp,#4]
0004f0  b140              CBZ      r0,|L1.1284|
0004f2  6ab8              LDR      r0,[r7,#0x28]
0004f4  2802              CMP      r0,#2
0004f6  d905              BLS      |L1.1284|
;;;459    	upsample->methods[ci] = h2v1_fancy_upsample;
0004f8  4938              LDR      r1,|L1.1500|
0004fa  f105001c          ADD      r0,r5,#0x1c
0004fe  f8401026          STR      r1,[r0,r6,LSL #2]
000502  e043              B        |L1.1420|
                  |L1.1284|
;;;460          else
;;;461    	upsample->methods[ci] = h2v1_upsample;
000504  4936              LDR      r1,|L1.1504|
000506  f105001c          ADD      r0,r5,#0x1c
00050a  f8401026          STR      r1,[r0,r6,LSL #2]
00050e  e03d              B        |L1.1420|
                  |L1.1296|
;;;462        } else if (h_in_group * 2 == h_out_group &&
000510  ebba0f48          CMP      r10,r8,LSL #1
000514  d116              BNE      |L1.1348|
;;;463    	       v_in_group * 2 == v_out_group) {
000516  ebbb0f49          CMP      r11,r9,LSL #1
00051a  d113              BNE      |L1.1348|
;;;464          /* Special cases for 2h2v upsampling */
;;;465          if (do_fancy && compptr->downsampled_width > 2) {
00051c  9801              LDR      r0,[sp,#4]
00051e  b158              CBZ      r0,|L1.1336|
000520  6ab8              LDR      r0,[r7,#0x28]
000522  2802              CMP      r0,#2
000524  d908              BLS      |L1.1336|
;;;466    	upsample->methods[ci] = h2v2_fancy_upsample;
000526  492f              LDR      r1,|L1.1508|
000528  f105001c          ADD      r0,r5,#0x1c
00052c  f8401026          STR      r1,[r0,r6,LSL #2]
;;;467    	upsample->pub.need_context_rows = TRUE;
000530  f04f0001          MOV      r0,#1
000534  60a8              STR      r0,[r5,#8]
000536  e029              B        |L1.1420|
                  |L1.1336|
;;;468          } else
;;;469    	upsample->methods[ci] = h2v2_upsample;
000538  492b              LDR      r1,|L1.1512|
00053a  f105001c          ADD      r0,r5,#0x1c
00053e  f8401026          STR      r1,[r0,r6,LSL #2]
000542  e023              B        |L1.1420|
                  |L1.1348|
;;;470        } else if ((h_out_group % h_in_group) == 0 &&
000544  fb9af0f8          SDIV     r0,r10,r8
000548  fb08a010          MLS      r0,r8,r0,r10
00054c  b9b0              CBNZ     r0,|L1.1404|
;;;471    	       (v_out_group % v_in_group) == 0) {
00054e  fb9bf0f9          SDIV     r0,r11,r9
000552  fb09b010          MLS      r0,r9,r0,r11
000556  b988              CBNZ     r0,|L1.1404|
;;;472          /* Generic integral-factors upsampling method */
;;;473          upsample->methods[ci] = int_upsample;
000558  4924              LDR      r1,|L1.1516|
00055a  f105001c          ADD      r0,r5,#0x1c
00055e  f8401026          STR      r1,[r0,r6,LSL #2]
;;;474          upsample->h_expand[ci] = (UINT8) (h_out_group / h_in_group);
000562  fb9af0f8          SDIV     r0,r10,r8
000566  b2c1              UXTB     r1,r0
000568  f1050044          ADD      r0,r5,#0x44
00056c  5581              STRB     r1,[r0,r6]
;;;475          upsample->v_expand[ci] = (UINT8) (v_out_group / v_in_group);
00056e  fb9bf0f9          SDIV     r0,r11,r9
000572  b2c1              UXTB     r1,r0
000574  f1050048          ADD      r0,r5,#0x48
000578  5581              STRB     r1,[r0,r6]
00057a  e007              B        |L1.1420|
                  |L1.1404|
;;;476        } else
;;;477          ERREXIT(cinfo, JERR_FRACT_SAMPLE_NOTIMPL);
00057c  f04f0026          MOV      r0,#0x26
000580  6821              LDR      r1,[r4,#0]
000582  6148              STR      r0,[r1,#0x14]
000584  6820              LDR      r0,[r4,#0]
000586  6801              LDR      r1,[r0,#0]
000588  4620              MOV      r0,r4
00058a  4788              BLX      r1
                  |L1.1420|
;;;478        if (need_buffer) {
00058c  9802              LDR      r0,[sp,#8]
00058e  b190              CBZ      r0,|L1.1462|
;;;479          upsample->color_buf[ci] = (*cinfo->mem->alloc_sarray)
000590  f8d41134          LDR      r1,[r4,#0x134]
000594  6f20              LDR      r0,[r4,#0x70]
000596  f7fffffe          BL       jround_up
00059a  9000              STR      r0,[sp,#0]
00059c  f8d43138          LDR      r3,[r4,#0x138]
0005a0  6860              LDR      r0,[r4,#4]
0005a2  f8d0c008          LDR      r12,[r0,#8]
0005a6  2101              MOVS     r1,#1
0005a8  4620              MOV      r0,r4
0005aa  9a00              LDR      r2,[sp,#0]
0005ac  47e0              BLX      r12
0005ae  f105010c          ADD      r1,r5,#0xc
0005b2  f8410026          STR      r0,[r1,r6,LSL #2]
                  |L1.1462|
0005b6  f1060601          ADD      r6,r6,#1              ;435
0005ba  f1070754          ADD      r7,r7,#0x54           ;435
                  |L1.1470|
0005be  6a60              LDR      r0,[r4,#0x24]         ;434
0005c0  42b0              CMP      r0,r6                 ;434
0005c2  f73faf5e          BGT      |L1.1154|
;;;480    	((j_common_ptr) cinfo, JPOOL_IMAGE,
;;;481    	 (JDIMENSION) jround_up((long) cinfo->output_width,
;;;482    				(long) cinfo->max_h_samp_factor),
;;;483    	 (JDIMENSION) cinfo->max_v_samp_factor);
;;;484        }
;;;485      }
;;;486    }
0005c6  e8bd8ffe          POP      {r1-r11,pc}
                          ENDP

0005ca  0000              DCW      0x0000
                  |L1.1484|
                          DCD      start_pass_upsample
                  |L1.1488|
                          DCD      sep_upsample
                  |L1.1492|
                          DCD      noop_upsample
                  |L1.1496|
                          DCD      fullsize_upsample
                  |L1.1500|
                          DCD      h2v1_fancy_upsample
                  |L1.1504|
                          DCD      h2v1_upsample
                  |L1.1508|
                          DCD      h2v2_fancy_upsample
                  |L1.1512|
                          DCD      h2v2_upsample
                  |L1.1516|
                          DCD      int_upsample
