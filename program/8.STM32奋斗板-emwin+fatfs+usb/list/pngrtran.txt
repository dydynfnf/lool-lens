; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\pngrtran.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\pngrtran.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\FWlib\inc -I.\user -I.\CM3 -I.\MALLOC -I.\TFT -I.\EMWIN\EMWIN_INC -I.\EMWIN\DEMO -I.\PNG -I.\FATFS -I.\SDIO -I.\USB\inc -I.\USBCFG\inc -IE:\material\GUI\8.STM32·Ü¶·°å-emwin+fatfs+usb\RTE -Id:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.0.0 -Id:\Keil_v5\ARM\CMSIS\Include -Id:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.0.0\Device\Include -D__UVISION_VERSION=514 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\pngrtran.crf PNG\pngrtran.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  png_set_crc_action PROC
;;;22     void PNGAPI
;;;23     png_set_crc_action(png_structp png_ptr, int crit_action, int ancil_action)
000000  b570              PUSH     {r4-r6,lr}
;;;24     {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
000006  4615              MOV      r5,r2
;;;25        png_debug(1, "in png_set_crc_action\n");
;;;26        /* Tell libpng how we react to CRC errors in critical chunks */
;;;27        if(png_ptr == NULL) return;
000008  b904              CBNZ     r4,|L1.12|
                  |L1.10|
;;;28        switch (crit_action)
;;;29        {
;;;30           case PNG_CRC_NO_CHANGE:                        /* leave setting as is */
;;;31              break;
;;;32           case PNG_CRC_WARN_USE:                               /* warn/use data */
;;;33              png_ptr->flags &= ~PNG_FLAG_CRC_CRITICAL_MASK;
;;;34              png_ptr->flags |= PNG_FLAG_CRC_CRITICAL_USE;
;;;35              break;
;;;36           case PNG_CRC_QUIET_USE:                             /* quiet/use data */
;;;37              png_ptr->flags &= ~PNG_FLAG_CRC_CRITICAL_MASK;
;;;38              png_ptr->flags |= PNG_FLAG_CRC_CRITICAL_USE |
;;;39                                PNG_FLAG_CRC_CRITICAL_IGNORE;
;;;40              break;
;;;41           case PNG_CRC_WARN_DISCARD:    /* not a valid action for critical data */
;;;42              png_warning(png_ptr, "Can't discard critical data on CRC error.");
;;;43           case PNG_CRC_ERROR_QUIT:                                /* error/quit */
;;;44           case PNG_CRC_DEFAULT:
;;;45           default:
;;;46              png_ptr->flags &= ~PNG_FLAG_CRC_CRITICAL_MASK;
;;;47              break;
;;;48        }
;;;49     
;;;50        switch (ancil_action)
;;;51        {
;;;52           case PNG_CRC_NO_CHANGE:                       /* leave setting as is */
;;;53              break;
;;;54           case PNG_CRC_WARN_USE:                              /* warn/use data */
;;;55              png_ptr->flags &= ~PNG_FLAG_CRC_ANCILLARY_MASK;
;;;56              png_ptr->flags |= PNG_FLAG_CRC_ANCILLARY_USE;
;;;57              break;
;;;58           case PNG_CRC_QUIET_USE:                            /* quiet/use data */
;;;59              png_ptr->flags &= ~PNG_FLAG_CRC_ANCILLARY_MASK;
;;;60              png_ptr->flags |= PNG_FLAG_CRC_ANCILLARY_USE |
;;;61                                PNG_FLAG_CRC_ANCILLARY_NOWARN;
;;;62              break;
;;;63           case PNG_CRC_ERROR_QUIT:                               /* error/quit */
;;;64              png_ptr->flags &= ~PNG_FLAG_CRC_ANCILLARY_MASK;
;;;65              png_ptr->flags |= PNG_FLAG_CRC_ANCILLARY_NOWARN;
;;;66              break;
;;;67           case PNG_CRC_WARN_DISCARD:                      /* warn/discard data */
;;;68           case PNG_CRC_DEFAULT:
;;;69           default:
;;;70              png_ptr->flags &= ~PNG_FLAG_CRC_ANCILLARY_MASK;
;;;71              break;
;;;72        }
;;;73     }
00000a  bd70              POP      {r4-r6,pc}
                  |L1.12|
00000c  2e06              CMP      r6,#6                 ;28
00000e  d224              BCS      |L1.90|
000010  e8dff006          TBB      [pc,r6]               ;28
000014  25241e04          DCB      0x25,0x24,0x1e,0x04
000018  1103              DCB      0x11,0x03
00001a  e027              B        |L1.108|
00001c  f8d401ac          LDR      r0,[r4,#0x1ac]        ;33
000020  f4206040          BIC      r0,r0,#0xc00          ;33
000024  f8c401ac          STR      r0,[r4,#0x1ac]        ;33
000028  f8d401ac          LDR      r0,[r4,#0x1ac]        ;34
00002c  f4406080          ORR      r0,r0,#0x400          ;34
000030  f8c401ac          STR      r0,[r4,#0x1ac]        ;34
000034  e01a              B        |L1.108|
000036  f8d401ac          LDR      r0,[r4,#0x1ac]        ;37
00003a  f4206040          BIC      r0,r0,#0xc00          ;37
00003e  f8c401ac          STR      r0,[r4,#0x1ac]        ;37
000042  f8d401ac          LDR      r0,[r4,#0x1ac]        ;38
000046  f4406040          ORR      r0,r0,#0xc00          ;38
00004a  f8c401ac          STR      r0,[r4,#0x1ac]        ;38
00004e  e00d              B        |L1.108|
000050  a1fe              ADR      r1,|L1.1100|
000052  4620              MOV      r0,r4                 ;42
000054  f7fffffe          BL       png_warning
000058  bf00              NOP                            ;43
                  |L1.90|
00005a  bf00              NOP                            ;43
00005c  bf00              NOP                            ;44
00005e  f8d401ac          LDR      r0,[r4,#0x1ac]        ;46
000062  f4206040          BIC      r0,r0,#0xc00          ;46
000066  f8c401ac          STR      r0,[r4,#0x1ac]        ;46
00006a  bf00              NOP                            ;47
                  |L1.108|
00006c  bf00              NOP                            ;31
00006e  2d06              CMP      r5,#6                 ;50
000070  d22c              BCS      |L1.204|
000072  e8dff005          TBB      [pc,r5]               ;50
000076  2d1e              DCB      0x2d,0x1e
000078  2c041103          DCB      0x2c,0x04,0x11,0x03
00007c  e02f              B        |L1.222|
00007e  f8d401ac          LDR      r0,[r4,#0x1ac]        ;55
000082  f4207040          BIC      r0,r0,#0x300          ;55
000086  f8c401ac          STR      r0,[r4,#0x1ac]        ;55
00008a  f8d401ac          LDR      r0,[r4,#0x1ac]        ;56
00008e  f4407080          ORR      r0,r0,#0x100          ;56
000092  f8c401ac          STR      r0,[r4,#0x1ac]        ;56
000096  e022              B        |L1.222|
000098  f8d401ac          LDR      r0,[r4,#0x1ac]        ;59
00009c  f4207040          BIC      r0,r0,#0x300          ;59
0000a0  f8c401ac          STR      r0,[r4,#0x1ac]        ;59
0000a4  f8d401ac          LDR      r0,[r4,#0x1ac]        ;60
0000a8  f4407040          ORR      r0,r0,#0x300          ;60
0000ac  f8c401ac          STR      r0,[r4,#0x1ac]        ;60
0000b0  e015              B        |L1.222|
0000b2  f8d401ac          LDR      r0,[r4,#0x1ac]        ;64
0000b6  f4207040          BIC      r0,r0,#0x300          ;64
0000ba  f8c401ac          STR      r0,[r4,#0x1ac]        ;64
0000be  f8d401ac          LDR      r0,[r4,#0x1ac]        ;65
0000c2  f4407000          ORR      r0,r0,#0x200          ;65
0000c6  f8c401ac          STR      r0,[r4,#0x1ac]        ;65
0000ca  e008              B        |L1.222|
                  |L1.204|
0000cc  bf00              NOP                            ;67
0000ce  bf00              NOP                            ;68
0000d0  f8d401ac          LDR      r0,[r4,#0x1ac]        ;70
0000d4  f4207040          BIC      r0,r0,#0x300          ;70
0000d8  f8c401ac          STR      r0,[r4,#0x1ac]        ;70
0000dc  bf00              NOP                            ;71
                  |L1.222|
0000de  bf00              NOP                            ;53
0000e0  bf00              NOP      
0000e2  e792              B        |L1.10|
;;;74     
                          ENDP

                  png_set_background PROC
;;;78     void PNGAPI
;;;79     png_set_background(png_structp png_ptr,
0000e4  e92d47f0          PUSH     {r4-r10,lr}
;;;80        png_color_16p background_color, int background_gamma_code,
;;;81        int need_expand, double background_gamma)
;;;82     {
0000e8  4604              MOV      r4,r0
0000ea  460e              MOV      r6,r1
0000ec  4615              MOV      r5,r2
0000ee  4699              MOV      r9,r3
0000f0  e9dd7808          LDRD     r7,r8,[sp,#0x20]
;;;83        png_debug(1, "in png_set_background\n");
;;;84        if(png_ptr == NULL) return;
0000f4  b90c              CBNZ     r4,|L1.250|
                  |L1.246|
;;;85        if (background_gamma_code == PNG_BACKGROUND_GAMMA_UNKNOWN)
;;;86        {
;;;87           png_warning(png_ptr, "Application must supply a known background gamma");
;;;88           return;
;;;89        }
;;;90     
;;;91        png_ptr->transformations |= PNG_BACKGROUND;
;;;92        png_memcpy(&(png_ptr->background), background_color,
;;;93           png_sizeof(png_color_16));
;;;94        png_ptr->background_gamma = (float)background_gamma;
;;;95        png_ptr->background_gamma_type = (png_byte)(background_gamma_code);
;;;96        png_ptr->transformations |= (need_expand ? PNG_BACKGROUND_EXPAND : 0);
;;;97     }
0000f6  e8bd87f0          POP      {r4-r10,pc}
                  |L1.250|
0000fa  b925              CBNZ     r5,|L1.262|
0000fc  a1de              ADR      r1,|L1.1144|
0000fe  4620              MOV      r0,r4                 ;87
000100  f7fffffe          BL       png_warning
000104  e7f7              B        |L1.246|
                  |L1.262|
000106  f8d401b0          LDR      r0,[r4,#0x1b0]        ;91
00010a  f0400080          ORR      r0,r0,#0x80           ;91
00010e  f8c401b0          STR      r0,[r4,#0x1b0]        ;91
000112  f5047000          ADD      r0,r4,#0x200          ;92
000116  6831              LDR      r1,[r6,#0]            ;92
000118  f8c41278          STR      r1,[r4,#0x278]        ;92
00011c  6871              LDR      r1,[r6,#4]            ;92
00011e  f8c4127c          STR      r1,[r4,#0x27c]        ;92
000122  8931              LDRH     r1,[r6,#8]            ;92
000124  f8a41280          STRH     r1,[r4,#0x280]        ;92
000128  4638              MOV      r0,r7                 ;94
00012a  4641              MOV      r1,r8                 ;94
00012c  f7fffffe          BL       __aeabi_d2f
000130  f8c40274          STR      r0,[r4,#0x274]        ;94
000134  f8845270          STRB     r5,[r4,#0x270]        ;95
000138  f8d401b0          LDR      r0,[r4,#0x1b0]        ;96
00013c  f1b90f00          CMP      r9,#0                 ;96
000140  d002              BEQ      |L1.328|
000142  f44f7180          MOV      r1,#0x100             ;96
000146  e000              B        |L1.330|
                  |L1.328|
000148  2100              MOVS     r1,#0                 ;96
                  |L1.330|
00014a  4308              ORRS     r0,r0,r1              ;96
00014c  f8c401b0          STR      r0,[r4,#0x1b0]        ;96
000150  bf00              NOP      
000152  e7d0              B        |L1.246|
;;;98     #endif
                          ENDP

                  png_set_strip_16 PROC
;;;102    void PNGAPI
;;;103    png_set_strip_16(png_structp png_ptr)
000154  b900              CBNZ     r0,|L1.344|
                  |L1.342|
;;;104    {
;;;105       png_debug(1, "in png_set_strip_16\n");
;;;106       if(png_ptr == NULL) return;
;;;107       png_ptr->transformations |= PNG_16_TO_8;
;;;108    }
000156  4770              BX       lr
                  |L1.344|
000158  f8d011b0          LDR      r1,[r0,#0x1b0]        ;107
00015c  f4416180          ORR      r1,r1,#0x400          ;107
000160  f8c011b0          STR      r1,[r0,#0x1b0]        ;107
000164  bf00              NOP      
000166  e7f6              B        |L1.342|
;;;109    #endif
                          ENDP

                  png_set_strip_alpha PROC
;;;112    void PNGAPI
;;;113    png_set_strip_alpha(png_structp png_ptr)
000168  b900              CBNZ     r0,|L1.364|
                  |L1.362|
;;;114    {
;;;115       png_debug(1, "in png_set_strip_alpha\n");
;;;116       if(png_ptr == NULL) return;
;;;117       png_ptr->flags |= PNG_FLAG_STRIP_ALPHA;
;;;118    }
00016a  4770              BX       lr
                  |L1.364|
00016c  f8d011ac          LDR      r1,[r0,#0x1ac]        ;117
000170  f4410180          ORR      r1,r1,#0x400000       ;117
000174  f8c011ac          STR      r1,[r0,#0x1ac]        ;117
000178  bf00              NOP      
00017a  e7f6              B        |L1.362|
;;;119    #endif
                          ENDP

                  png_set_dither PROC
;;;140    void PNGAPI
;;;141    png_set_dither(png_structp png_ptr, png_colorp palette,
00017c  e92d4ff0          PUSH     {r4-r11,lr}
;;;142       int num_palette, int maximum_colors, png_uint_16p histogram,
;;;143       int full_dither)
;;;144    {
000180  b08f              SUB      sp,sp,#0x3c
000182  4604              MOV      r4,r0
000184  460d              MOV      r5,r1
000186  4617              MOV      r7,r2
000188  4699              MOV      r9,r3
;;;145       png_debug(1, "in png_set_dither\n");
;;;146       if(png_ptr == NULL) return;
00018a  b914              CBNZ     r4,|L1.402|
                  |L1.396|
;;;147       png_ptr->transformations |= PNG_DITHER;
;;;148    
;;;149       if (!full_dither)
;;;150       {
;;;151          int i;
;;;152    
;;;153          png_ptr->dither_index = (png_bytep)png_malloc(png_ptr,
;;;154             (png_uint_32)(num_palette * png_sizeof (png_byte)));
;;;155          for (i = 0; i < num_palette; i++)
;;;156             png_ptr->dither_index[i] = (png_byte)i;
;;;157       }
;;;158    
;;;159       if (num_palette > maximum_colors)
;;;160       {
;;;161          if (histogram != NULL)
;;;162          {
;;;163             /* This is easy enough, just throw out the least used colors.
;;;164                Perhaps not the best solution, but good enough. */
;;;165    
;;;166             int i;
;;;167    
;;;168             /* initialize an array to sort colors */
;;;169             png_ptr->dither_sort = (png_bytep)png_malloc(png_ptr,
;;;170                (png_uint_32)(num_palette * png_sizeof (png_byte)));
;;;171    
;;;172             /* initialize the dither_sort array */
;;;173             for (i = 0; i < num_palette; i++)
;;;174                png_ptr->dither_sort[i] = (png_byte)i;
;;;175    
;;;176             /* Find the least used palette entries by starting a
;;;177                bubble sort, and running it until we have sorted
;;;178                out enough colors.  Note that we don't care about
;;;179                sorting all the colors, just finding which are
;;;180                least used. */
;;;181    
;;;182             for (i = num_palette - 1; i >= maximum_colors; i--)
;;;183             {
;;;184                int done; /* to stop early if the list is pre-sorted */
;;;185                int j;
;;;186    
;;;187                done = 1;
;;;188                for (j = 0; j < i; j++)
;;;189                {
;;;190                   if (histogram[png_ptr->dither_sort[j]]
;;;191                       < histogram[png_ptr->dither_sort[j + 1]])
;;;192                   {
;;;193                      png_byte t;
;;;194    
;;;195                      t = png_ptr->dither_sort[j];
;;;196                      png_ptr->dither_sort[j] = png_ptr->dither_sort[j + 1];
;;;197                      png_ptr->dither_sort[j + 1] = t;
;;;198                      done = 0;
;;;199                   }
;;;200                }
;;;201                if (done)
;;;202                   break;
;;;203             }
;;;204    
;;;205             /* swap the palette around, and set up a table, if necessary */
;;;206             if (full_dither)
;;;207             {
;;;208                int j = num_palette;
;;;209    
;;;210                /* put all the useful colors within the max, but don't
;;;211                   move the others */
;;;212                for (i = 0; i < maximum_colors; i++)
;;;213                {
;;;214                   if ((int)png_ptr->dither_sort[i] >= maximum_colors)
;;;215                   {
;;;216                      do
;;;217                         j--;
;;;218                      while ((int)png_ptr->dither_sort[j] >= maximum_colors);
;;;219                      palette[i] = palette[j];
;;;220                   }
;;;221                }
;;;222             }
;;;223             else
;;;224             {
;;;225                int j = num_palette;
;;;226    
;;;227                /* move all the used colors inside the max limit, and
;;;228                   develop a translation table */
;;;229                for (i = 0; i < maximum_colors; i++)
;;;230                {
;;;231                   /* only move the colors we need to */
;;;232                   if ((int)png_ptr->dither_sort[i] >= maximum_colors)
;;;233                   {
;;;234                      png_color tmp_color;
;;;235    
;;;236                      do
;;;237                         j--;
;;;238                      while ((int)png_ptr->dither_sort[j] >= maximum_colors);
;;;239    
;;;240                      tmp_color = palette[j];
;;;241                      palette[j] = palette[i];
;;;242                      palette[i] = tmp_color;
;;;243                      /* indicate where the color went */
;;;244                      png_ptr->dither_index[j] = (png_byte)i;
;;;245                      png_ptr->dither_index[i] = (png_byte)j;
;;;246                   }
;;;247                }
;;;248    
;;;249                /* find closest color for those colors we are not using */
;;;250                for (i = 0; i < num_palette; i++)
;;;251                {
;;;252                   if ((int)png_ptr->dither_index[i] >= maximum_colors)
;;;253                   {
;;;254                      int min_d, k, min_k, d_index;
;;;255    
;;;256                      /* find the closest color to one we threw out */
;;;257                      d_index = png_ptr->dither_index[i];
;;;258                      min_d = PNG_COLOR_DIST(palette[d_index], palette[0]);
;;;259                      for (k = 1, min_k = 0; k < maximum_colors; k++)
;;;260                      {
;;;261                         int d;
;;;262    
;;;263                         d = PNG_COLOR_DIST(palette[d_index], palette[k]);
;;;264    
;;;265                         if (d < min_d)
;;;266                         {
;;;267                            min_d = d;
;;;268                            min_k = k;
;;;269                         }
;;;270                      }
;;;271                      /* point to closest color */
;;;272                      png_ptr->dither_index[i] = (png_byte)min_k;
;;;273                   }
;;;274                }
;;;275             }
;;;276             png_free(png_ptr, png_ptr->dither_sort);
;;;277             png_ptr->dither_sort=NULL;
;;;278          }
;;;279          else
;;;280          {
;;;281             /* This is much harder to do simply (and quickly).  Perhaps
;;;282                we need to go through a median cut routine, but those
;;;283                don't always behave themselves with only a few colors
;;;284                as input.  So we will just find the closest two colors,
;;;285                and throw out one of them (chosen somewhat randomly).
;;;286                [We don't understand this at all, so if someone wants to
;;;287                 work on improving it, be our guest - AED, GRP]
;;;288                */
;;;289             int i;
;;;290             int max_d;
;;;291             int num_new_palette;
;;;292             png_dsortp t;
;;;293             png_dsortpp hash;
;;;294    
;;;295             t=NULL;
;;;296    
;;;297             /* initialize palette index arrays */
;;;298             png_ptr->index_to_palette = (png_bytep)png_malloc(png_ptr,
;;;299                (png_uint_32)(num_palette * png_sizeof (png_byte)));
;;;300             png_ptr->palette_to_index = (png_bytep)png_malloc(png_ptr,
;;;301                (png_uint_32)(num_palette * png_sizeof (png_byte)));
;;;302    
;;;303             /* initialize the sort array */
;;;304             for (i = 0; i < num_palette; i++)
;;;305             {
;;;306                png_ptr->index_to_palette[i] = (png_byte)i;
;;;307                png_ptr->palette_to_index[i] = (png_byte)i;
;;;308             }
;;;309    
;;;310             hash = (png_dsortpp)png_malloc(png_ptr, (png_uint_32)(769 *
;;;311                png_sizeof (png_dsortp)));
;;;312             for (i = 0; i < 769; i++)
;;;313                hash[i] = NULL;
;;;314    /*         png_memset(hash, 0, 769 * png_sizeof (png_dsortp)); */
;;;315    
;;;316             num_new_palette = num_palette;
;;;317    
;;;318             /* initial wild guess at how far apart the farthest pixel
;;;319                pair we will be eliminating will be.  Larger
;;;320                numbers mean more areas will be allocated, Smaller
;;;321                numbers run the risk of not saving enough data, and
;;;322                having to do this all over again.
;;;323    
;;;324                I have not done extensive checking on this number.
;;;325                */
;;;326             max_d = 96;
;;;327    
;;;328             while (num_new_palette > maximum_colors)
;;;329             {
;;;330                for (i = 0; i < num_new_palette - 1; i++)
;;;331                {
;;;332                   int j;
;;;333    
;;;334                   for (j = i + 1; j < num_new_palette; j++)
;;;335                   {
;;;336                      int d;
;;;337    
;;;338                      d = PNG_COLOR_DIST(palette[i], palette[j]);
;;;339    
;;;340                      if (d <= max_d)
;;;341                      {
;;;342    
;;;343                         t = (png_dsortp)png_malloc_warn(png_ptr,
;;;344                             (png_uint_32)(png_sizeof(png_dsort)));
;;;345                         if (t == NULL)
;;;346                             break;
;;;347                         t->next = hash[d];
;;;348                         t->left = (png_byte)i;
;;;349                         t->right = (png_byte)j;
;;;350                         hash[d] = t;
;;;351                      }
;;;352                   }
;;;353                   if (t == NULL)
;;;354                      break;
;;;355                }
;;;356    
;;;357                if (t != NULL)
;;;358                for (i = 0; i <= max_d; i++)
;;;359                {
;;;360                   if (hash[i] != NULL)
;;;361                   {
;;;362                      png_dsortp p;
;;;363    
;;;364                      for (p = hash[i]; p; p = p->next)
;;;365                      {
;;;366                         if ((int)png_ptr->index_to_palette[p->left]
;;;367                            < num_new_palette &&
;;;368                            (int)png_ptr->index_to_palette[p->right]
;;;369                            < num_new_palette)
;;;370                         {
;;;371                            int j, next_j;
;;;372    
;;;373                            if (num_new_palette & 0x01)
;;;374                            {
;;;375                               j = p->left;
;;;376                               next_j = p->right;
;;;377                            }
;;;378                            else
;;;379                            {
;;;380                               j = p->right;
;;;381                               next_j = p->left;
;;;382                            }
;;;383    
;;;384                            num_new_palette--;
;;;385                            palette[png_ptr->index_to_palette[j]]
;;;386                              = palette[num_new_palette];
;;;387                            if (!full_dither)
;;;388                            {
;;;389                               int k;
;;;390    
;;;391                               for (k = 0; k < num_palette; k++)
;;;392                               {
;;;393                                  if (png_ptr->dither_index[k] ==
;;;394                                     png_ptr->index_to_palette[j])
;;;395                                     png_ptr->dither_index[k] =
;;;396                                        png_ptr->index_to_palette[next_j];
;;;397                                  if ((int)png_ptr->dither_index[k] ==
;;;398                                     num_new_palette)
;;;399                                     png_ptr->dither_index[k] =
;;;400                                        png_ptr->index_to_palette[j];
;;;401                               }
;;;402                            }
;;;403    
;;;404                            png_ptr->index_to_palette[png_ptr->palette_to_index
;;;405                               [num_new_palette]] = png_ptr->index_to_palette[j];
;;;406                            png_ptr->palette_to_index[png_ptr->index_to_palette[j]]
;;;407                               = png_ptr->palette_to_index[num_new_palette];
;;;408    
;;;409                            png_ptr->index_to_palette[j] = (png_byte)num_new_palette;
;;;410                            png_ptr->palette_to_index[num_new_palette] = (png_byte)j;
;;;411                         }
;;;412                         if (num_new_palette <= maximum_colors)
;;;413                            break;
;;;414                      }
;;;415                      if (num_new_palette <= maximum_colors)
;;;416                         break;
;;;417                   }
;;;418                }
;;;419    
;;;420                for (i = 0; i < 769; i++)
;;;421                {
;;;422                   if (hash[i] != NULL)
;;;423                   {
;;;424                      png_dsortp p = hash[i];
;;;425                      while (p)
;;;426                      {
;;;427                         t = p->next;
;;;428                         png_free(png_ptr, p);
;;;429                         p = t;
;;;430                      }
;;;431                   }
;;;432                   hash[i] = 0;
;;;433                }
;;;434                max_d += 96;
;;;435             }
;;;436             png_free(png_ptr, hash);
;;;437             png_free(png_ptr, png_ptr->palette_to_index);
;;;438             png_free(png_ptr, png_ptr->index_to_palette);
;;;439             png_ptr->palette_to_index=NULL;
;;;440             png_ptr->index_to_palette=NULL;
;;;441          }
;;;442          num_palette = maximum_colors;
;;;443       }
;;;444       if (png_ptr->palette == NULL)
;;;445       {
;;;446          png_ptr->palette = palette;
;;;447       }
;;;448       png_ptr->num_palette = (png_uint_16)num_palette;
;;;449    
;;;450       if (full_dither)
;;;451       {
;;;452          int i;
;;;453          png_bytep distance;
;;;454          int total_bits = PNG_DITHER_RED_BITS + PNG_DITHER_GREEN_BITS +
;;;455             PNG_DITHER_BLUE_BITS;
;;;456          int num_red = (1 << PNG_DITHER_RED_BITS);
;;;457          int num_green = (1 << PNG_DITHER_GREEN_BITS);
;;;458          int num_blue = (1 << PNG_DITHER_BLUE_BITS);
;;;459          png_size_t num_entries = ((png_size_t)1 << total_bits);
;;;460    
;;;461          png_ptr->palette_lookup = (png_bytep )png_malloc(png_ptr,
;;;462             (png_uint_32)(num_entries * png_sizeof (png_byte)));
;;;463    
;;;464          png_memset(png_ptr->palette_lookup, 0, num_entries *
;;;465             png_sizeof (png_byte));
;;;466    
;;;467          distance = (png_bytep)png_malloc(png_ptr, (png_uint_32)(num_entries *
;;;468             png_sizeof(png_byte)));
;;;469    
;;;470          png_memset(distance, 0xff, num_entries * png_sizeof(png_byte));
;;;471    
;;;472          for (i = 0; i < num_palette; i++)
;;;473          {
;;;474             int ir, ig, ib;
;;;475             int r = (palette[i].red >> (8 - PNG_DITHER_RED_BITS));
;;;476             int g = (palette[i].green >> (8 - PNG_DITHER_GREEN_BITS));
;;;477             int b = (palette[i].blue >> (8 - PNG_DITHER_BLUE_BITS));
;;;478    
;;;479             for (ir = 0; ir < num_red; ir++)
;;;480             {
;;;481                /* int dr = abs(ir - r); */
;;;482                int dr = ((ir > r) ? ir - r : r - ir);
;;;483                int index_r = (ir << (PNG_DITHER_BLUE_BITS + PNG_DITHER_GREEN_BITS));
;;;484    
;;;485                for (ig = 0; ig < num_green; ig++)
;;;486                {
;;;487                   /* int dg = abs(ig - g); */
;;;488                   int dg = ((ig > g) ? ig - g : g - ig);
;;;489                   int dt = dr + dg;
;;;490                   int dm = ((dr > dg) ? dr : dg);
;;;491                   int index_g = index_r | (ig << PNG_DITHER_BLUE_BITS);
;;;492    
;;;493                   for (ib = 0; ib < num_blue; ib++)
;;;494                   {
;;;495                      int d_index = index_g | ib;
;;;496                      /* int db = abs(ib - b); */
;;;497                      int db = ((ib > b) ? ib - b : b - ib);
;;;498                      int dmax = ((dm > db) ? dm : db);
;;;499                      int d = dmax + dt + db;
;;;500    
;;;501                      if (d < (int)distance[d_index])
;;;502                      {
;;;503                         distance[d_index] = (png_byte)d;
;;;504                         png_ptr->palette_lookup[d_index] = (png_byte)i;
;;;505                      }
;;;506                   }
;;;507                }
;;;508             }
;;;509          }
;;;510    
;;;511          png_free(png_ptr, distance);
;;;512       }
;;;513    }
00018c  b00f              ADD      sp,sp,#0x3c
00018e  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.402|
000192  f8d401b0          LDR      r0,[r4,#0x1b0]        ;147
000196  f0400040          ORR      r0,r0,#0x40           ;147
00019a  f8c401b0          STR      r0,[r4,#0x1b0]        ;147
00019e  9819              LDR      r0,[sp,#0x64]         ;149
0001a0  b970              CBNZ     r0,|L1.448|
0001a2  4639              MOV      r1,r7                 ;153
0001a4  4620              MOV      r0,r4                 ;153
0001a6  f7fffffe          BL       png_malloc
0001aa  f8c40330          STR      r0,[r4,#0x330]        ;153
0001ae  2600              MOVS     r6,#0                 ;155
0001b0  e003              B        |L1.442|
                  |L1.434|
0001b2  f8d41330          LDR      r1,[r4,#0x330]        ;156
0001b6  558e              STRB     r6,[r1,r6]            ;156
0001b8  1c76              ADDS     r6,r6,#1              ;155
                  |L1.442|
0001ba  42be              CMP      r6,r7                 ;155
0001bc  dbf9              BLT      |L1.434|
0001be  bf00              NOP                            ;157
                  |L1.448|
0001c0  454f              CMP      r7,r9                 ;159
0001c2  dd7d              BLE      |L1.704|
0001c4  9818              LDR      r0,[sp,#0x60]         ;161
0001c6  2800              CMP      r0,#0                 ;161
0001c8  d07b              BEQ      |L1.706|
0001ca  4639              MOV      r1,r7                 ;169
0001cc  4620              MOV      r0,r4                 ;169
0001ce  f7fffffe          BL       png_malloc
0001d2  f8c4038c          STR      r0,[r4,#0x38c]        ;169
0001d6  2600              MOVS     r6,#0                 ;173
0001d8  e003              B        |L1.482|
                  |L1.474|
0001da  f8d4138c          LDR      r1,[r4,#0x38c]        ;174
0001de  558e              STRB     r6,[r1,r6]            ;174
0001e0  1c76              ADDS     r6,r6,#1              ;173
                  |L1.482|
0001e2  42be              CMP      r6,r7                 ;173
0001e4  dbf9              BLT      |L1.474|
0001e6  1e7e              SUBS     r6,r7,#1              ;182
0001e8  e029              B        |L1.574|
                  |L1.490|
0001ea  2101              MOVS     r1,#1                 ;187
0001ec  2000              MOVS     r0,#0                 ;188
0001ee  e021              B        |L1.564|
                  |L1.496|
0001f0  f8d4238c          LDR      r2,[r4,#0x38c]        ;190
0001f4  5c13              LDRB     r3,[r2,r0]            ;190
0001f6  9a18              LDR      r2,[sp,#0x60]         ;190
0001f8  f8323013          LDRH     r3,[r2,r3,LSL #1]     ;190
0001fc  1c42              ADDS     r2,r0,#1              ;190
0001fe  f8d4c38c          LDR      r12,[r4,#0x38c]       ;190
000202  f81cc002          LDRB     r12,[r12,r2]          ;190
000206  9a18              LDR      r2,[sp,#0x60]         ;190
000208  f832201c          LDRH     r2,[r2,r12,LSL #1]    ;190
00020c  4293              CMP      r3,r2                 ;190
00020e  da10              BGE      |L1.562|
000210  f8d4338c          LDR      r3,[r4,#0x38c]        ;195
000214  5c1a              LDRB     r2,[r3,r0]            ;195
000216  1c43              ADDS     r3,r0,#1              ;196
000218  f8d4c38c          LDR      r12,[r4,#0x38c]       ;196
00021c  f81c3003          LDRB     r3,[r12,r3]           ;196
000220  f80c3000          STRB     r3,[r12,r0]           ;196
000224  1c43              ADDS     r3,r0,#1              ;197
000226  f8d4c38c          LDR      r12,[r4,#0x38c]       ;197
00022a  f80c2003          STRB     r2,[r12,r3]           ;197
00022e  2100              MOVS     r1,#0                 ;198
000230  bf00              NOP                            ;199
                  |L1.562|
000232  1c40              ADDS     r0,r0,#1              ;188
                  |L1.564|
000234  42b0              CMP      r0,r6                 ;188
000236  dbdb              BLT      |L1.496|
000238  b101              CBZ      r1,|L1.572|
00023a  e002              B        |L1.578|
                  |L1.572|
00023c  1e76              SUBS     r6,r6,#1              ;182
                  |L1.574|
00023e  454e              CMP      r6,r9                 ;182
000240  dad3              BGE      |L1.490|
                  |L1.578|
000242  bf00              NOP                            ;202
000244  9819              LDR      r0,[sp,#0x64]         ;206
000246  b1e0              CBZ      r0,|L1.642|
000248  4638              MOV      r0,r7                 ;208
00024a  2600              MOVS     r6,#0                 ;212
00024c  e016              B        |L1.636|
                  |L1.590|
00024e  f8d4138c          LDR      r1,[r4,#0x38c]        ;214
000252  5d89              LDRB     r1,[r1,r6]            ;214
000254  4549              CMP      r1,r9                 ;214
000256  db10              BLT      |L1.634|
000258  bf00              NOP                            ;216
                  |L1.602|
00025a  1e40              SUBS     r0,r0,#1              ;217
00025c  f8d4138c          LDR      r1,[r4,#0x38c]        ;218
000260  5c09              LDRB     r1,[r1,r0]            ;218
000262  4549              CMP      r1,r9                 ;218
000264  daf9              BGE      |L1.602|
000266  eb060146          ADD      r1,r6,r6,LSL #1       ;219
00026a  4429              ADD      r1,r1,r5              ;219
00026c  eb000240          ADD      r2,r0,r0,LSL #1       ;219
000270  442a              ADD      r2,r2,r5              ;219
000272  8813              LDRH     r3,[r2,#0]            ;219
000274  800b              STRH     r3,[r1,#0]            ;219
000276  7892              LDRB     r2,[r2,#2]            ;219
000278  708a              STRB     r2,[r1,#2]            ;219
                  |L1.634|
00027a  1c76              ADDS     r6,r6,#1              ;212
                  |L1.636|
00027c  454e              CMP      r6,r9                 ;212
00027e  dbe6              BLT      |L1.590|
000280  e0cb              B        |L1.1050|
                  |L1.642|
000282  4639              MOV      r1,r7                 ;225
000284  2600              MOVS     r6,#0                 ;229
000286  e032              B        |L1.750|
                  |L1.648|
000288  f8d4038c          LDR      r0,[r4,#0x38c]        ;232
00028c  5d80              LDRB     r0,[r0,r6]            ;232
00028e  4548              CMP      r0,r9                 ;232
000290  db2c              BLT      |L1.748|
000292  bf00              NOP                            ;236
                  |L1.660|
000294  1e49              SUBS     r1,r1,#1              ;237
000296  f8d4038c          LDR      r0,[r4,#0x38c]        ;238
00029a  5c40              LDRB     r0,[r0,r1]            ;238
00029c  4548              CMP      r0,r9                 ;238
00029e  daf9              BGE      |L1.660|
0002a0  eb010041          ADD      r0,r1,r1,LSL #1       ;240
0002a4  4428              ADD      r0,r0,r5              ;240
0002a6  8802              LDRH     r2,[r0,#0]            ;240
0002a8  f8ad2038          STRH     r2,[sp,#0x38]         ;240
0002ac  7880              LDRB     r0,[r0,#2]            ;240
0002ae  f88d003a          STRB     r0,[sp,#0x3a]         ;240
0002b2  eb010041          ADD      r0,r1,r1,LSL #1       ;241
0002b6  4428              ADD      r0,r0,r5              ;241
0002b8  eb060246          ADD      r2,r6,r6,LSL #1       ;241
0002bc  442a              ADD      r2,r2,r5              ;241
0002be  e001              B        |L1.708|
                  |L1.704|
0002c0  e240              B        |L1.1860|
                  |L1.706|
0002c2  e0b3              B        |L1.1068|
                  |L1.708|
0002c4  8813              LDRH     r3,[r2,#0]            ;241
0002c6  8003              STRH     r3,[r0,#0]            ;241
0002c8  7892              LDRB     r2,[r2,#2]            ;241
0002ca  7082              STRB     r2,[r0,#2]            ;241
0002cc  eb060046          ADD      r0,r6,r6,LSL #1       ;242
0002d0  4428              ADD      r0,r0,r5              ;242
0002d2  f8bd2038          LDRH     r2,[sp,#0x38]         ;242
0002d6  8002              STRH     r2,[r0,#0]            ;242
0002d8  f89d203a          LDRB     r2,[sp,#0x3a]         ;242
0002dc  7082              STRB     r2,[r0,#2]            ;242
0002de  f8d42330          LDR      r2,[r4,#0x330]        ;244
0002e2  5456              STRB     r6,[r2,r1]            ;244
0002e4  f8d42330          LDR      r2,[r4,#0x330]        ;245
0002e8  5591              STRB     r1,[r2,r6]            ;245
0002ea  bf00              NOP                            ;246
                  |L1.748|
0002ec  1c76              ADDS     r6,r6,#1              ;229
                  |L1.750|
0002ee  454e              CMP      r6,r9                 ;229
0002f0  dbca              BLT      |L1.648|
0002f2  2600              MOVS     r6,#0                 ;250
0002f4  e08d              B        |L1.1042|
                  |L1.758|
0002f6  f8d40330          LDR      r0,[r4,#0x330]        ;252
0002fa  5d80              LDRB     r0,[r0,r6]            ;252
0002fc  4548              CMP      r0,r9                 ;252
0002fe  db73              BLT      |L1.1000|
000300  f8d43330          LDR      r3,[r4,#0x330]        ;257
000304  5d9a              LDRB     r2,[r3,r6]            ;257
000306  eb020a42          ADD      r10,r2,r2,LSL #1      ;258
00030a  f815a00a          LDRB     r10,[r5,r10]          ;258
00030e  f895b000          LDRB     r11,[r5,#0]           ;258
000312  ebaa080b          SUB      r8,r10,r11            ;258
000316  f1b80f00          CMP      r8,#0                 ;258
00031a  db01              BLT      |L1.800|
00031c  46c2              MOV      r10,r8                ;258
00031e  e001              B        |L1.804|
                  |L1.800|
000320  f1c80a00          RSB      r10,r8,#0             ;258
                  |L1.804|
000324  eb020b42          ADD      r11,r2,r2,LSL #1      ;258
000328  44ab              ADD      r11,r11,r5            ;258
00032a  f89bb001          LDRB     r11,[r11,#1]          ;258
00032e  f895e001          LDRB     lr,[r5,#1]            ;258
000332  ebab0c0e          SUB      r12,r11,lr            ;258
000336  f1bc0f00          CMP      r12,#0                ;258
00033a  db01              BLT      |L1.832|
00033c  46e3              MOV      r11,r12               ;258
00033e  e001              B        |L1.836|
                  |L1.832|
000340  f1cc0b00          RSB      r11,r12,#0            ;258
                  |L1.836|
000344  44da              ADD      r10,r10,r11           ;258
000346  eb020b42          ADD      r11,r2,r2,LSL #1      ;258
00034a  44ab              ADD      r11,r11,r5            ;258
00034c  f89bb002          LDRB     r11,[r11,#2]          ;258
000350  f895e002          LDRB     lr,[r5,#2]            ;258
000354  ebab030e          SUB      r3,r11,lr             ;258
000358  2b00              CMP      r3,#0                 ;258
00035a  db01              BLT      |L1.864|
00035c  469b              MOV      r11,r3                ;258
00035e  e001              B        |L1.868|
                  |L1.864|
000360  f1c30b00          RSB      r11,r3,#0             ;258
                  |L1.868|
000364  44da              ADD      r10,r10,r11           ;258
000366  f8cda038          STR      r10,[sp,#0x38]        ;258
00036a  2001              MOVS     r0,#1                 ;259
00036c  2300              MOVS     r3,#0                 ;259
00036e  930d              STR      r3,[sp,#0x34]         ;259
000370  e046              B        |L1.1024|
                  |L1.882|
000372  eb020a42          ADD      r10,r2,r2,LSL #1      ;263
000376  f815a00a          LDRB     r10,[r5,r10]          ;263
00037a  eb000b40          ADD      r11,r0,r0,LSL #1      ;263
00037e  f815b00b          LDRB     r11,[r5,r11]          ;263
000382  ebaa0a0b          SUB      r10,r10,r11           ;263
000386  f8cda030          STR      r10,[sp,#0x30]        ;263
00038a  f1ba0f00          CMP      r10,#0                ;263
00038e  db02              BLT      |L1.918|
000390  f8dda030          LDR      r10,[sp,#0x30]        ;263
000394  e003              B        |L1.926|
                  |L1.918|
000396  f8dda030          LDR      r10,[sp,#0x30]        ;263
00039a  f1ca0a00          RSB      r10,r10,#0            ;263
                  |L1.926|
00039e  eb020b42          ADD      r11,r2,r2,LSL #1      ;263
0003a2  44ab              ADD      r11,r11,r5            ;263
0003a4  f89bb001          LDRB     r11,[r11,#1]          ;263
0003a8  eb000e40          ADD      lr,r0,r0,LSL #1       ;263
0003ac  44ae              ADD      lr,lr,r5              ;263
0003ae  f89ee001          LDRB     lr,[lr,#1]            ;263
0003b2  ebab080e          SUB      r8,r11,lr             ;263
0003b6  f1b80f00          CMP      r8,#0                 ;263
0003ba  db01              BLT      |L1.960|
0003bc  46c3              MOV      r11,r8                ;263
0003be  e001              B        |L1.964|
                  |L1.960|
0003c0  f1c80b00          RSB      r11,r8,#0             ;263
                  |L1.964|
0003c4  44da              ADD      r10,r10,r11           ;263
0003c6  eb020b42          ADD      r11,r2,r2,LSL #1      ;263
0003ca  44ab              ADD      r11,r11,r5            ;263
0003cc  f89bb002          LDRB     r11,[r11,#2]          ;263
0003d0  eb000e40          ADD      lr,r0,r0,LSL #1       ;263
0003d4  44ae              ADD      lr,lr,r5              ;263
0003d6  f89ee002          LDRB     lr,[lr,#2]            ;263
0003da  ebab0c0e          SUB      r12,r11,lr            ;263
0003de  f1bc0f00          CMP      r12,#0                ;263
0003e2  db02              BLT      |L1.1002|
0003e4  46e3              MOV      r11,r12               ;263
0003e6  e002              B        |L1.1006|
                  |L1.1000|
0003e8  e012              B        |L1.1040|
                  |L1.1002|
0003ea  f1cc0b00          RSB      r11,r12,#0            ;263
                  |L1.1006|
0003ee  eb0a030b          ADD      r3,r10,r11            ;263
0003f2  f8ddc038          LDR      r12,[sp,#0x38]        ;265
0003f6  4563              CMP      r3,r12                ;265
0003f8  da01              BGE      |L1.1022|
0003fa  930e              STR      r3,[sp,#0x38]         ;267
0003fc  900d              STR      r0,[sp,#0x34]         ;268
                  |L1.1022|
0003fe  1c40              ADDS     r0,r0,#1              ;259
                  |L1.1024|
000400  4548              CMP      r0,r9                 ;259
000402  dbb6              BLT      |L1.882|
000404  9b0d              LDR      r3,[sp,#0x34]         ;272
000406  f8d4c330          LDR      r12,[r4,#0x330]       ;272
00040a  f80c3006          STRB     r3,[r12,r6]           ;272
00040e  bf00              NOP                            ;273
                  |L1.1040|
000410  1c76              ADDS     r6,r6,#1              ;250
                  |L1.1042|
000412  42be              CMP      r6,r7                 ;250
000414  f6ffaf6f          BLT      |L1.758|
000418  bf00              NOP                            ;275
                  |L1.1050|
00041a  4620              MOV      r0,r4                 ;276
00041c  f8d4138c          LDR      r1,[r4,#0x38c]        ;276
000420  f7fffffe          BL       png_free
000424  2000              MOVS     r0,#0                 ;277
000426  f8c4038c          STR      r0,[r4,#0x38c]        ;277
00042a  e18a              B        |L1.1858|
                  |L1.1068|
00042c  f04f0b00          MOV      r11,#0                ;295
000430  4639              MOV      r1,r7                 ;298
000432  4620              MOV      r0,r4                 ;298
000434  f7fffffe          BL       png_malloc
000438  f8c40390          STR      r0,[r4,#0x390]        ;298
00043c  4639              MOV      r1,r7                 ;300
00043e  4620              MOV      r0,r4                 ;300
000440  f7fffffe          BL       png_malloc
000444  f8c40394          STR      r0,[r4,#0x394]        ;300
000448  2600              MOVS     r6,#0                 ;304
00044a  e036              B        |L1.1210|
                  |L1.1100|
00044c  43616e27          DCB      "Can't discard critical data on CRC error.",0
000450  74206469
000454  73636172
000458  64206372
00045c  69746963
000460  616c2064
000464  61746120
000468  6f6e2043
00046c  52432065
000470  72726f72
000474  2e00    
000476  00                DCB      0
000477  00                DCB      0
                  |L1.1144|
000478  4170706c          DCB      "Application must supply a known background gamma",0
00047c  69636174
000480  696f6e20
000484  6d757374
000488  20737570
00048c  706c7920
000490  61206b6e
000494  6f776e20
000498  6261636b
00049c  67726f75
0004a0  6e642067
0004a4  616d6d61
0004a8  00      
0004a9  00                DCB      0
0004aa  00                DCB      0
0004ab  00                DCB      0
                  |L1.1196|
0004ac  f8d41390          LDR      r1,[r4,#0x390]        ;306
0004b0  558e              STRB     r6,[r1,r6]            ;306
0004b2  f8d41394          LDR      r1,[r4,#0x394]        ;307
0004b6  558e              STRB     r6,[r1,r6]            ;307
0004b8  1c76              ADDS     r6,r6,#1              ;304
                  |L1.1210|
0004ba  42be              CMP      r6,r7                 ;304
0004bc  dbf6              BLT      |L1.1196|
0004be  f6404104          MOV      r1,#0xc04             ;310
0004c2  4620              MOV      r0,r4                 ;310
0004c4  f7fffffe          BL       png_malloc
0004c8  4682              MOV      r10,r0                ;310
0004ca  2600              MOVS     r6,#0                 ;312
0004cc  e003              B        |L1.1238|
                  |L1.1230|
0004ce  2000              MOVS     r0,#0                 ;313
0004d0  f84a0026          STR      r0,[r10,r6,LSL #2]    ;313
0004d4  1c76              ADDS     r6,r6,#1              ;312
                  |L1.1238|
0004d6  f5b67f40          CMP      r6,#0x300             ;312
0004da  ddf8              BLE      |L1.1230|
0004dc  46b8              MOV      r8,r7                 ;316
0004de  2060              MOVS     r0,#0x60              ;326
0004e0  900e              STR      r0,[sp,#0x38]         ;326
0004e2  e117              B        |L1.1812|
                  |L1.1252|
0004e4  2600              MOVS     r6,#0                 ;330
0004e6  e062              B        |L1.1454|
                  |L1.1256|
0004e8  1c70              ADDS     r0,r6,#1              ;334
0004ea  900d              STR      r0,[sp,#0x34]         ;334
0004ec  e056              B        |L1.1436|
                  |L1.1262|
0004ee  eb060346          ADD      r3,r6,r6,LSL #1       ;338
0004f2  f815c003          LDRB     r12,[r5,r3]           ;338
0004f6  9b0d              LDR      r3,[sp,#0x34]         ;338
0004f8  eb030343          ADD      r3,r3,r3,LSL #1       ;338
0004fc  5ceb              LDRB     r3,[r5,r3]            ;338
0004fe  ebac0203          SUB      r2,r12,r3             ;338
000502  2a00              CMP      r2,#0                 ;338
000504  db01              BLT      |L1.1290|
000506  4613              MOV      r3,r2                 ;338
000508  e000              B        |L1.1292|
                  |L1.1290|
00050a  4253              RSBS     r3,r2,#0              ;338
                  |L1.1292|
00050c  eb060c46          ADD      r12,r6,r6,LSL #1      ;338
000510  44ac              ADD      r12,r12,r5            ;338
000512  f89ce001          LDRB     lr,[r12,#1]           ;338
000516  f8ddc034          LDR      r12,[sp,#0x34]        ;338
00051a  eb0c0c4c          ADD      r12,r12,r12,LSL #1    ;338
00051e  44ac              ADD      r12,r12,r5            ;338
000520  f89cc001          LDRB     r12,[r12,#1]          ;338
000524  ebae010c          SUB      r1,lr,r12             ;338
000528  2900              CMP      r1,#0                 ;338
00052a  db01              BLT      |L1.1328|
00052c  468c              MOV      r12,r1                ;338
00052e  e001              B        |L1.1332|
                  |L1.1328|
000530  f1c10c00          RSB      r12,r1,#0             ;338
                  |L1.1332|
000534  4463              ADD      r3,r3,r12             ;338
000536  eb060c46          ADD      r12,r6,r6,LSL #1      ;338
00053a  44ac              ADD      r12,r12,r5            ;338
00053c  f89ce002          LDRB     lr,[r12,#2]           ;338
000540  f8ddc034          LDR      r12,[sp,#0x34]        ;338
000544  eb0c0c4c          ADD      r12,r12,r12,LSL #1    ;338
000548  44ac              ADD      r12,r12,r5            ;338
00054a  f89cc002          LDRB     r12,[r12,#2]          ;338
00054e  ebae000c          SUB      r0,lr,r12             ;338
000552  2800              CMP      r0,#0                 ;338
000554  db01              BLT      |L1.1370|
000556  4684              MOV      r12,r0                ;338
000558  e001              B        |L1.1374|
                  |L1.1370|
00055a  f1c00c00          RSB      r12,r0,#0             ;338
                  |L1.1374|
00055e  4463              ADD      r3,r3,r12             ;338
000560  930c              STR      r3,[sp,#0x30]         ;338
000562  9b0c              LDR      r3,[sp,#0x30]         ;340
000564  980e              LDR      r0,[sp,#0x38]         ;340
000566  4283              CMP      r3,r0                 ;340
000568  dc15              BGT      |L1.1430|
00056a  2108              MOVS     r1,#8                 ;343
00056c  4620              MOV      r0,r4                 ;343
00056e  f7fffffe          BL       png_malloc_warn
000572  4683              MOV      r11,r0                ;343
000574  f1bb0f00          CMP      r11,#0                ;345
000578  d100              BNE      |L1.1404|
00057a  e012              B        |L1.1442|
                  |L1.1404|
00057c  980c              LDR      r0,[sp,#0x30]         ;347
00057e  f85a0020          LDR      r0,[r10,r0,LSL #2]    ;347
000582  f8cb0000          STR      r0,[r11,#0]           ;347
000586  f88b6004          STRB     r6,[r11,#4]           ;348
00058a  980d              LDR      r0,[sp,#0x34]         ;349
00058c  f88b0005          STRB     r0,[r11,#5]           ;349
000590  980c              LDR      r0,[sp,#0x30]         ;350
000592  f84ab020          STR      r11,[r10,r0,LSL #2]   ;350
                  |L1.1430|
000596  980d              LDR      r0,[sp,#0x34]         ;334
000598  1c40              ADDS     r0,r0,#1              ;334
00059a  900d              STR      r0,[sp,#0x34]         ;334
                  |L1.1436|
00059c  980d              LDR      r0,[sp,#0x34]         ;334
00059e  4540              CMP      r0,r8                 ;334
0005a0  dba5              BLT      |L1.1262|
                  |L1.1442|
0005a2  bf00              NOP                            ;346
0005a4  f1bb0f00          CMP      r11,#0                ;353
0005a8  d100              BNE      |L1.1452|
0005aa  e004              B        |L1.1462|
                  |L1.1452|
0005ac  1c76              ADDS     r6,r6,#1              ;330
                  |L1.1454|
0005ae  f1a80001          SUB      r0,r8,#1              ;330
0005b2  42b0              CMP      r0,r6                 ;330
0005b4  dc98              BGT      |L1.1256|
                  |L1.1462|
0005b6  bf00              NOP                            ;354
0005b8  f1bb0f00          CMP      r11,#0                ;357
0005bc  d07b              BEQ      |L1.1718|
0005be  2600              MOVS     r6,#0                 ;358
0005c0  e083              B        |L1.1738|
                  |L1.1474|
0005c2  f85a0026          LDR      r0,[r10,r6,LSL #2]    ;360
0005c6  b3e0              CBZ      r0,|L1.1602|
0005c8  f85a1026          LDR      r1,[r10,r6,LSL #2]    ;364
0005cc  e075              B        |L1.1722|
                  |L1.1486|
0005ce  790a              LDRB     r2,[r1,#4]            ;366
0005d0  f8d40390          LDR      r0,[r4,#0x390]        ;366
0005d4  5c80              LDRB     r0,[r0,r2]            ;366
0005d6  4540              CMP      r0,r8                 ;366
0005d8  da6a              BGE      |L1.1712|
0005da  794a              LDRB     r2,[r1,#5]            ;368
0005dc  f8d40390          LDR      r0,[r4,#0x390]        ;368
0005e0  5c80              LDRB     r0,[r0,r2]            ;368
0005e2  4540              CMP      r0,r8                 ;368
0005e4  da64              BGE      |L1.1712|
0005e6  f0080201          AND      r2,r8,#1              ;373
0005ea  b112              CBZ      r2,|L1.1522|
0005ec  7908              LDRB     r0,[r1,#4]            ;375
0005ee  794b              LDRB     r3,[r1,#5]            ;376
0005f0  e001              B        |L1.1526|
                  |L1.1522|
0005f2  7948              LDRB     r0,[r1,#5]            ;380
0005f4  790b              LDRB     r3,[r1,#4]            ;381
                  |L1.1526|
0005f6  f1a80801          SUB      r8,r8,#1              ;384
0005fa  f8d42390          LDR      r2,[r4,#0x390]        ;385
0005fe  5c12              LDRB     r2,[r2,r0]            ;385
000600  eb020242          ADD      r2,r2,r2,LSL #1       ;385
000604  442a              ADD      r2,r2,r5              ;385
000606  eb080c48          ADD      r12,r8,r8,LSL #1      ;385
00060a  44ac              ADD      r12,r12,r5            ;385
00060c  f8bce000          LDRH     lr,[r12,#0]           ;385
000610  f8a2e000          STRH     lr,[r2,#0]            ;385
000614  f89cc002          LDRB     r12,[r12,#2]          ;385
000618  f882c002          STRB     r12,[r2,#2]           ;385
00061c  9a19              LDR      r2,[sp,#0x64]         ;387
00061e  bb3a              CBNZ     r2,|L1.1648|
000620  2200              MOVS     r2,#0                 ;391
000622  e022              B        |L1.1642|
                  |L1.1572|
000624  f8d4c330          LDR      r12,[r4,#0x330]       ;393
000628  f81cc002          LDRB     r12,[r12,r2]          ;393
00062c  f8d4e390          LDR      lr,[r4,#0x390]        ;393
000630  f81ee000          LDRB     lr,[lr,r0]            ;393
000634  45f4              CMP      r12,lr                ;393
000636  d109              BNE      |L1.1612|
000638  f8d4c390          LDR      r12,[r4,#0x390]       ;395
00063c  f81cc003          LDRB     r12,[r12,r3]          ;395
000640  e000              B        |L1.1604|
                  |L1.1602|
000642  e041              B        |L1.1736|
                  |L1.1604|
000644  f8d4e330          LDR      lr,[r4,#0x330]        ;395
000648  f80ec002          STRB     r12,[lr,r2]           ;395
                  |L1.1612|
00064c  f8d4c330          LDR      r12,[r4,#0x330]       ;397
000650  f81cc002          LDRB     r12,[r12,r2]          ;397
000654  45c4              CMP      r12,r8                ;397
000656  d107              BNE      |L1.1640|
000658  f8d4c390          LDR      r12,[r4,#0x390]       ;399
00065c  f81cc000          LDRB     r12,[r12,r0]          ;399
000660  f8d4e330          LDR      lr,[r4,#0x330]        ;399
000664  f80ec002          STRB     r12,[lr,r2]           ;399
                  |L1.1640|
000668  1c52              ADDS     r2,r2,#1              ;391
                  |L1.1642|
00066a  42ba              CMP      r2,r7                 ;391
00066c  dbda              BLT      |L1.1572|
00066e  bf00              NOP                            ;402
                  |L1.1648|
000670  f8d42390          LDR      r2,[r4,#0x390]        ;404
000674  5c12              LDRB     r2,[r2,r0]            ;404
000676  f8d4e394          LDR      lr,[r4,#0x394]        ;404
00067a  f81ee008          LDRB     lr,[lr,r8]            ;404
00067e  f8d4c390          LDR      r12,[r4,#0x390]       ;404
000682  f80c200e          STRB     r2,[r12,lr]           ;404
000686  f8d42394          LDR      r2,[r4,#0x394]        ;406
00068a  f8122008          LDRB     r2,[r2,r8]            ;406
00068e  f8d4e390          LDR      lr,[r4,#0x390]        ;406
000692  f81ee000          LDRB     lr,[lr,r0]            ;406
000696  f8d4c394          LDR      r12,[r4,#0x394]       ;406
00069a  f80c200e          STRB     r2,[r12,lr]           ;406
00069e  f8d4c390          LDR      r12,[r4,#0x390]       ;409
0006a2  f80c8000          STRB     r8,[r12,r0]           ;409
0006a6  f8d4c394          LDR      r12,[r4,#0x394]       ;410
0006aa  f80c0008          STRB     r0,[r12,r8]           ;410
0006ae  bf00              NOP                            ;411
                  |L1.1712|
0006b0  45c8              CMP      r8,r9                 ;412
0006b2  dc01              BGT      |L1.1720|
0006b4  e003              B        |L1.1726|
                  |L1.1718|
0006b6  e00d              B        |L1.1748|
                  |L1.1720|
0006b8  6809              LDR      r1,[r1,#0]            ;364
                  |L1.1722|
0006ba  2900              CMP      r1,#0                 ;364
0006bc  d187              BNE      |L1.1486|
                  |L1.1726|
0006be  bf00              NOP                            ;413
0006c0  45c8              CMP      r8,r9                 ;415
0006c2  dc00              BGT      |L1.1734|
0006c4  e005              B        |L1.1746|
                  |L1.1734|
0006c6  bf00              NOP                            ;417
                  |L1.1736|
0006c8  1c76              ADDS     r6,r6,#1              ;358
                  |L1.1738|
0006ca  980e              LDR      r0,[sp,#0x38]         ;358
0006cc  4286              CMP      r6,r0                 ;358
0006ce  f77faf78          BLE      |L1.1474|
                  |L1.1746|
0006d2  bf00              NOP                            ;416
                  |L1.1748|
0006d4  2600              MOVS     r6,#0                 ;420
0006d6  e017              B        |L1.1800|
                  |L1.1752|
0006d8  f85a0026          LDR      r0,[r10,r6,LSL #2]    ;422
0006dc  b180              CBZ      r0,|L1.1792|
0006de  f85a0026          LDR      r0,[r10,r6,LSL #2]    ;424
0006e2  900d              STR      r0,[sp,#0x34]         ;424
0006e4  e008              B        |L1.1784|
                  |L1.1766|
0006e6  980d              LDR      r0,[sp,#0x34]         ;427
0006e8  f8d0b000          LDR      r11,[r0,#0]           ;427
0006ec  4620              MOV      r0,r4                 ;428
0006ee  990d              LDR      r1,[sp,#0x34]         ;428
0006f0  f7fffffe          BL       png_free
0006f4  f8cdb034          STR      r11,[sp,#0x34]        ;429
                  |L1.1784|
0006f8  980d              LDR      r0,[sp,#0x34]         ;425
0006fa  2800              CMP      r0,#0                 ;425
0006fc  d1f3              BNE      |L1.1766|
0006fe  bf00              NOP                            ;431
                  |L1.1792|
000700  2000              MOVS     r0,#0                 ;432
000702  f84a0026          STR      r0,[r10,r6,LSL #2]    ;432
000706  1c76              ADDS     r6,r6,#1              ;420
                  |L1.1800|
000708  f5b67f40          CMP      r6,#0x300             ;420
00070c  dde4              BLE      |L1.1752|
00070e  980e              LDR      r0,[sp,#0x38]         ;434
000710  3060              ADDS     r0,r0,#0x60           ;434
000712  900e              STR      r0,[sp,#0x38]         ;434
                  |L1.1812|
000714  45c8              CMP      r8,r9                 ;328
000716  f73faee5          BGT      |L1.1252|
00071a  4651              MOV      r1,r10                ;436
00071c  4620              MOV      r0,r4                 ;436
00071e  f7fffffe          BL       png_free
000722  4620              MOV      r0,r4                 ;437
000724  f8d41394          LDR      r1,[r4,#0x394]        ;437
000728  f7fffffe          BL       png_free
00072c  4620              MOV      r0,r4                 ;438
00072e  f8d41390          LDR      r1,[r4,#0x390]        ;438
000732  f7fffffe          BL       png_free
000736  2000              MOVS     r0,#0                 ;439
000738  f8c40394          STR      r0,[r4,#0x394]        ;439
00073c  f8c40390          STR      r0,[r4,#0x390]        ;440
000740  bf00              NOP                            ;441
                  |L1.1858|
000742  464f              MOV      r7,r9                 ;442
                  |L1.1860|
000744  f8d40254          LDR      r0,[r4,#0x254]        ;444
000748  b908              CBNZ     r0,|L1.1870|
00074a  f8c45254          STR      r5,[r4,#0x254]        ;446
                  |L1.1870|
00074e  f8a47258          STRH     r7,[r4,#0x258]        ;448
000752  9819              LDR      r0,[sp,#0x64]         ;450
000754  2800              CMP      r0,#0                 ;450
000756  d07a              BEQ      |L1.2126|
000758  200f              MOVS     r0,#0xf               ;454
00075a  900e              STR      r0,[sp,#0x38]         ;454
00075c  2020              MOVS     r0,#0x20              ;456
00075e  900d              STR      r0,[sp,#0x34]         ;456
000760  900c              STR      r0,[sp,#0x30]         ;457
000762  900b              STR      r0,[sp,#0x2c]         ;458
000764  2101              MOVS     r1,#1                 ;459
000766  980e              LDR      r0,[sp,#0x38]         ;459
000768  fa01f600          LSL      r6,r1,r0              ;459
00076c  4631              MOV      r1,r6                 ;461
00076e  4620              MOV      r0,r4                 ;461
000770  f7fffffe          BL       png_malloc
000774  f8c4032c          STR      r0,[r4,#0x32c]        ;461
000778  4631              MOV      r1,r6                 ;464
00077a  f8d4032c          LDR      r0,[r4,#0x32c]        ;464
00077e  f7fffffe          BL       __aeabi_memclr
000782  4631              MOV      r1,r6                 ;467
000784  4620              MOV      r0,r4                 ;467
000786  f7fffffe          BL       png_malloc
00078a  4682              MOV      r10,r0                ;467
00078c  4631              MOV      r1,r6                 ;470
00078e  22ff              MOVS     r2,#0xff              ;470
000790  4650              MOV      r0,r10                ;470
000792  f7fffffe          BL       __aeabi_memset
000796  f04f0800          MOV      r8,#0                 ;472
00079a  e07e              B        |L1.2202|
                  |L1.1948|
00079c  eb080348          ADD      r3,r8,r8,LSL #1       ;475
0007a0  5ceb              LDRB     r3,[r5,r3]            ;475
0007a2  10db              ASRS     r3,r3,#3              ;475
0007a4  930a              STR      r3,[sp,#0x28]         ;475
0007a6  eb080348          ADD      r3,r8,r8,LSL #1       ;476
0007aa  442b              ADD      r3,r3,r5              ;476
0007ac  785b              LDRB     r3,[r3,#1]            ;476
0007ae  10db              ASRS     r3,r3,#3              ;476
0007b0  9309              STR      r3,[sp,#0x24]         ;476
0007b2  eb080348          ADD      r3,r8,r8,LSL #1       ;477
0007b6  442b              ADD      r3,r3,r5              ;477
0007b8  789b              LDRB     r3,[r3,#2]            ;477
0007ba  10db              ASRS     r3,r3,#3              ;477
0007bc  9308              STR      r3,[sp,#0x20]         ;477
0007be  2000              MOVS     r0,#0                 ;479
0007c0  e066              B        |L1.2192|
                  |L1.1986|
0007c2  9b0a              LDR      r3,[sp,#0x28]         ;482
0007c4  4298              CMP      r0,r3                 ;482
0007c6  dd02              BLE      |L1.1998|
0007c8  9b0a              LDR      r3,[sp,#0x28]         ;482
0007ca  1ac3              SUBS     r3,r0,r3              ;482
0007cc  e001              B        |L1.2002|
                  |L1.1998|
0007ce  9b0a              LDR      r3,[sp,#0x28]         ;482
0007d0  1a1b              SUBS     r3,r3,r0              ;482
                  |L1.2002|
0007d2  9307              STR      r3,[sp,#0x1c]         ;482
0007d4  0283              LSLS     r3,r0,#10             ;483
0007d6  9306              STR      r3,[sp,#0x18]         ;483
0007d8  2100              MOVS     r1,#0                 ;485
0007da  e055              B        |L1.2184|
                  |L1.2012|
0007dc  9b09              LDR      r3,[sp,#0x24]         ;488
0007de  4299              CMP      r1,r3                 ;488
0007e0  dd02              BLE      |L1.2024|
0007e2  9b09              LDR      r3,[sp,#0x24]         ;488
0007e4  1acb              SUBS     r3,r1,r3              ;488
0007e6  e001              B        |L1.2028|
                  |L1.2024|
0007e8  9b09              LDR      r3,[sp,#0x24]         ;488
0007ea  1a5b              SUBS     r3,r3,r1              ;488
                  |L1.2028|
0007ec  9305              STR      r3,[sp,#0x14]         ;488
0007ee  f8ddc01c          LDR      r12,[sp,#0x1c]        ;489
0007f2  9b05              LDR      r3,[sp,#0x14]         ;489
0007f4  4463              ADD      r3,r3,r12             ;489
0007f6  9304              STR      r3,[sp,#0x10]         ;489
0007f8  f8ddc01c          LDR      r12,[sp,#0x1c]        ;490
0007fc  9b05              LDR      r3,[sp,#0x14]         ;490
0007fe  459c              CMP      r12,r3                ;490
000800  dd01              BLE      |L1.2054|
000802  9b07              LDR      r3,[sp,#0x1c]         ;490
000804  e000              B        |L1.2056|
                  |L1.2054|
000806  9b05              LDR      r3,[sp,#0x14]         ;490
                  |L1.2056|
000808  9303              STR      r3,[sp,#0xc]          ;490
00080a  9b06              LDR      r3,[sp,#0x18]         ;491
00080c  ea431341          ORR      r3,r3,r1,LSL #5       ;491
000810  9302              STR      r3,[sp,#8]            ;491
000812  2200              MOVS     r2,#0                 ;493
000814  e034              B        |L1.2176|
                  |L1.2070|
000816  f8ddb008          LDR      r11,[sp,#8]           ;495
00081a  ea4b0302          ORR      r3,r11,r2             ;495
00081e  f8ddb020          LDR      r11,[sp,#0x20]        ;497
000822  455a              CMP      r2,r11                ;497
000824  dd04              BLE      |L1.2096|
000826  f8ddb020          LDR      r11,[sp,#0x20]        ;497
00082a  eba20b0b          SUB      r11,r2,r11            ;497
00082e  e003              B        |L1.2104|
                  |L1.2096|
000830  f8ddb020          LDR      r11,[sp,#0x20]        ;497
000834  ebab0b02          SUB      r11,r11,r2            ;497
                  |L1.2104|
000838  f8cdb004          STR      r11,[sp,#4]           ;497
00083c  f8dde00c          LDR      lr,[sp,#0xc]          ;498
000840  f8ddb004          LDR      r11,[sp,#4]           ;498
000844  45de              CMP      lr,r11                ;498
000846  dd03              BLE      |L1.2128|
000848  f8ddb00c          LDR      r11,[sp,#0xc]         ;498
00084c  e002              B        |L1.2132|
                  |L1.2126|
00084e  e02c              B        |L1.2218|
                  |L1.2128|
000850  f8ddb004          LDR      r11,[sp,#4]           ;498
                  |L1.2132|
000854  f8cdb000          STR      r11,[sp,#0]           ;498
000858  f8dde010          LDR      lr,[sp,#0x10]         ;499
00085c  f8ddb000          LDR      r11,[sp,#0]           ;499
000860  44de              ADD      lr,lr,r11             ;499
000862  f8ddb004          LDR      r11,[sp,#4]           ;499
000866  eb0e0c0b          ADD      r12,lr,r11            ;499
00086a  f81ab003          LDRB     r11,[r10,r3]          ;501
00086e  45e3              CMP      r11,r12               ;501
000870  dd05              BLE      |L1.2174|
000872  f80ac003          STRB     r12,[r10,r3]          ;503
000876  f8d4e32c          LDR      lr,[r4,#0x32c]        ;504
00087a  f80e8003          STRB     r8,[lr,r3]            ;504
                  |L1.2174|
00087e  1c52              ADDS     r2,r2,#1              ;493
                  |L1.2176|
000880  9b0b              LDR      r3,[sp,#0x2c]         ;493
000882  429a              CMP      r2,r3                 ;493
000884  dbc7              BLT      |L1.2070|
000886  1c49              ADDS     r1,r1,#1              ;485
                  |L1.2184|
000888  9b0c              LDR      r3,[sp,#0x30]         ;485
00088a  4299              CMP      r1,r3                 ;485
00088c  dba6              BLT      |L1.2012|
00088e  1c40              ADDS     r0,r0,#1              ;479
                  |L1.2192|
000890  9b0d              LDR      r3,[sp,#0x34]         ;479
000892  4298              CMP      r0,r3                 ;479
000894  db95              BLT      |L1.1986|
000896  f1080801          ADD      r8,r8,#1              ;472
                  |L1.2202|
00089a  45b8              CMP      r8,r7                 ;472
00089c  f6ffaf7e          BLT      |L1.1948|
0008a0  4651              MOV      r1,r10                ;511
0008a2  4620              MOV      r0,r4                 ;511
0008a4  f7fffffe          BL       png_free
0008a8  bf00              NOP                            ;512
                  |L1.2218|
0008aa  bf00              NOP      
0008ac  e46e              B        |L1.396|
;;;514    #endif
                          ENDP

                  png_set_gamma PROC
;;;526    void PNGAPI
;;;527    png_set_gamma(png_structp png_ptr, double scrn_gamma, double file_gamma)
0008ae  e92d47fc          PUSH     {r2-r10,lr}
;;;528    {
0008b2  4682              MOV      r10,r0
0008b4  4614              MOV      r4,r2
0008b6  461d              MOV      r5,r3
0008b8  e9dd670a          LDRD     r6,r7,[sp,#0x28]
;;;529       png_debug(1, "in png_set_gamma\n");
;;;530       if(png_ptr == NULL) return;
0008bc  f1ba0f00          CMP      r10,#0
0008c0  d101              BNE      |L1.2246|
                  |L1.2242|
;;;531       if ((fabs(scrn_gamma * file_gamma - 1.0) > PNG_GAMMA_THRESHOLD) ||
;;;532           (png_ptr->color_type & PNG_COLOR_MASK_ALPHA) ||
;;;533           (png_ptr->color_type == PNG_COLOR_TYPE_PALETTE))
;;;534         png_ptr->transformations |= PNG_GAMMA;
;;;535       png_ptr->gamma = (float)file_gamma;
;;;536       png_ptr->screen_gamma = (float)scrn_gamma;
;;;537    }
0008c2  e8bd87fc          POP      {r2-r10,pc}
                  |L1.2246|
0008c6  4632              MOV      r2,r6                 ;531
0008c8  463b              MOV      r3,r7                 ;531
0008ca  4620              MOV      r0,r4                 ;531
0008cc  4629              MOV      r1,r5                 ;531
0008ce  f7fffffe          BL       __aeabi_dmul
0008d2  4680              MOV      r8,r0                 ;531
0008d4  2200              MOVS     r2,#0                 ;531
0008d6  4bfb              LDR      r3,|L1.3268|
0008d8  f7fffffe          BL       __aeabi_dsub
0008dc  f0214100          BIC      r1,r1,#0x80000000     ;531
0008e0  4af9              LDR      r2,|L1.3272|
0008e2  4bfa              LDR      r3,|L1.3276|
0008e4  e9cd0100          STRD     r0,r1,[sp,#0]         ;531
0008e8  f7fffffe          BL       __aeabi_cdrcmple
0008ec  d308              BCC      |L1.2304|
0008ee  f89a0266          LDRB     r0,[r10,#0x266]       ;532
0008f2  f0000004          AND      r0,r0,#4              ;532
0008f6  b918              CBNZ     r0,|L1.2304|
0008f8  f89a0266          LDRB     r0,[r10,#0x266]       ;533
0008fc  2803              CMP      r0,#3                 ;533
0008fe  d105              BNE      |L1.2316|
                  |L1.2304|
000900  f8da01b0          LDR      r0,[r10,#0x1b0]       ;534
000904  f4405000          ORR      r0,r0,#0x2000         ;534
000908  f8ca01b0          STR      r0,[r10,#0x1b0]       ;534
                  |L1.2316|
00090c  4630              MOV      r0,r6                 ;535
00090e  4639              MOV      r1,r7                 ;535
000910  f7fffffe          BL       __aeabi_d2f
000914  f8ca029c          STR      r0,[r10,#0x29c]       ;535
000918  4620              MOV      r0,r4                 ;536
00091a  4629              MOV      r1,r5                 ;536
00091c  f7fffffe          BL       __aeabi_d2f
000920  f8ca02a0          STR      r0,[r10,#0x2a0]       ;536
000924  bf00              NOP      
000926  e7cc              B        |L1.2242|
;;;538    #endif
                          ENDP

                  png_set_expand PROC
;;;545    void PNGAPI
;;;546    png_set_expand(png_structp png_ptr)
000928  b900              CBNZ     r0,|L1.2348|
                  |L1.2346|
;;;547    {
;;;548       png_debug(1, "in png_set_expand\n");
;;;549       if(png_ptr == NULL) return;
;;;550       png_ptr->transformations |= (PNG_EXPAND | PNG_EXPAND_tRNS);
;;;551    }
00092a  4770              BX       lr
                  |L1.2348|
00092c  4ae8              LDR      r2,|L1.3280|
00092e  f8d011b0          LDR      r1,[r0,#0x1b0]        ;550
000932  4311              ORRS     r1,r1,r2              ;550
000934  f8c011b0          STR      r1,[r0,#0x1b0]        ;550
000938  bf00              NOP      
00093a  e7f6              B        |L1.2346|
;;;552    
                          ENDP

                  png_set_palette_to_rgb PROC
;;;571    void PNGAPI
;;;572    png_set_palette_to_rgb(png_structp png_ptr)
00093c  b900              CBNZ     r0,|L1.2368|
                  |L1.2366|
;;;573    {
;;;574       png_debug(1, "in png_set_palette_to_rgb\n");
;;;575       if(png_ptr == NULL) return;
;;;576       png_ptr->transformations |= (PNG_EXPAND | PNG_EXPAND_tRNS);
;;;577    }
00093e  4770              BX       lr
                  |L1.2368|
000940  4ae3              LDR      r2,|L1.3280|
000942  f8d011b0          LDR      r1,[r0,#0x1b0]        ;576
000946  4311              ORRS     r1,r1,r2              ;576
000948  f8c011b0          STR      r1,[r0,#0x1b0]        ;576
00094c  bf00              NOP      
00094e  e7f6              B        |L1.2366|
;;;578    
                          ENDP

                  png_set_expand_gray_1_2_4_to_8 PROC
;;;581    void PNGAPI
;;;582    png_set_expand_gray_1_2_4_to_8(png_structp png_ptr)
000950  b900              CBNZ     r0,|L1.2388|
                  |L1.2386|
;;;583    {
;;;584       png_debug(1, "in png_set_expand_gray_1_2_4_to_8\n");
;;;585       if(png_ptr == NULL) return;
;;;586       png_ptr->transformations |= PNG_EXPAND_tRNS;
;;;587    }
000952  4770              BX       lr
                  |L1.2388|
000954  f8d011b0          LDR      r1,[r0,#0x1b0]        ;586
000958  f0417100          ORR      r1,r1,#0x2000000      ;586
00095c  f8c011b0          STR      r1,[r0,#0x1b0]        ;586
000960  bf00              NOP      
000962  e7f6              B        |L1.2386|
;;;588    #endif
                          ENDP

                  png_set_gray_1_2_4_to_8 PROC
;;;593    void PNGAPI
;;;594    png_set_gray_1_2_4_to_8(png_structp png_ptr)
000964  b900              CBNZ     r0,|L1.2408|
                  |L1.2406|
;;;595    {
;;;596       png_debug(1, "in png_set_gray_1_2_4_to_8\n");
;;;597       if(png_ptr == NULL) return;
;;;598       png_ptr->transformations |= (PNG_EXPAND | PNG_EXPAND_tRNS);
;;;599    }
000966  4770              BX       lr
                  |L1.2408|
000968  4ad9              LDR      r2,|L1.3280|
00096a  f8d011b0          LDR      r1,[r0,#0x1b0]        ;598
00096e  4311              ORRS     r1,r1,r2              ;598
000970  f8c011b0          STR      r1,[r0,#0x1b0]        ;598
000974  bf00              NOP      
000976  e7f6              B        |L1.2406|
;;;600    #endif
                          ENDP

                  png_set_tRNS_to_alpha PROC
;;;604    void PNGAPI
;;;605    png_set_tRNS_to_alpha(png_structp png_ptr)
000978  4ad5              LDR      r2,|L1.3280|
;;;606    {
;;;607       png_debug(1, "in png_set_expand\n");
;;;608       png_ptr->transformations |= (PNG_EXPAND | PNG_EXPAND_tRNS);
00097a  f8d011b0          LDR      r1,[r0,#0x1b0]
00097e  4311              ORRS     r1,r1,r2
000980  f8c011b0          STR      r1,[r0,#0x1b0]
;;;609    }
000984  4770              BX       lr
;;;610    #endif /* defined(PNG_READ_EXPAND_SUPPORTED) */
                          ENDP

                  png_set_gray_to_rgb PROC
;;;613    void PNGAPI
;;;614    png_set_gray_to_rgb(png_structp png_ptr)
000986  f8d011b0          LDR      r1,[r0,#0x1b0]
;;;615    {
;;;616       png_debug(1, "in png_set_gray_to_rgb\n");
;;;617       png_ptr->transformations |= PNG_GRAY_TO_RGB;
00098a  f4414180          ORR      r1,r1,#0x4000
00098e  f8c011b0          STR      r1,[r0,#0x1b0]
;;;618    }
000992  4770              BX       lr
;;;619    #endif
                          ENDP

                  png_set_rgb_to_gray_fixed PROC
;;;638    void PNGAPI
;;;639    png_set_rgb_to_gray_fixed(png_structp png_ptr, int error_action,
000994  e92d47f0          PUSH     {r4-r10,lr}
;;;640       png_fixed_point red, png_fixed_point green)
;;;641    {
000998  4604              MOV      r4,r0
00099a  4689              MOV      r9,r1
00099c  4617              MOV      r7,r2
00099e  4698              MOV      r8,r3
;;;642       png_debug(1, "in png_set_rgb_to_gray\n");
;;;643       if(png_ptr == NULL) return;
0009a0  b90c              CBNZ     r4,|L1.2470|
                  |L1.2466|
;;;644       switch(error_action)
;;;645       {
;;;646          case 1: png_ptr->transformations |= PNG_RGB_TO_GRAY;
;;;647                  break;
;;;648          case 2: png_ptr->transformations |= PNG_RGB_TO_GRAY_WARN;
;;;649                  break;
;;;650          case 3: png_ptr->transformations |= PNG_RGB_TO_GRAY_ERR;
;;;651       }
;;;652       if (png_ptr->color_type == PNG_COLOR_TYPE_PALETTE)
;;;653    #if defined(PNG_READ_EXPAND_SUPPORTED)
;;;654          png_ptr->transformations |= PNG_EXPAND;
;;;655    #else
;;;656       {
;;;657          png_warning(png_ptr, "Cannot do RGB_TO_GRAY without EXPAND_SUPPORTED.");
;;;658          png_ptr->transformations &= ~PNG_RGB_TO_GRAY;
;;;659       }
;;;660    #endif
;;;661       {
;;;662          png_uint_16 red_int, green_int;
;;;663          if(red < 0 || green < 0)
;;;664          {
;;;665             red_int   =  6968; /* .212671 * 32768 + .5 */
;;;666             green_int = 23434; /* .715160 * 32768 + .5 */
;;;667          }
;;;668          else if(red + green < 100000L)
;;;669          {
;;;670            red_int = (png_uint_16)(((png_uint_32)red*32768L)/100000L);
;;;671            green_int = (png_uint_16)(((png_uint_32)green*32768L)/100000L);
;;;672          }
;;;673          else
;;;674          {
;;;675             png_warning(png_ptr, "ignoring out of range rgb_to_gray coefficients");
;;;676             red_int   =  6968;
;;;677             green_int = 23434;
;;;678          }
;;;679          png_ptr->rgb_to_gray_red_coeff   = red_int;
;;;680          png_ptr->rgb_to_gray_green_coeff = green_int;
;;;681          png_ptr->rgb_to_gray_blue_coeff  = (png_uint_16)(32768-red_int-green_int);
;;;682       }
;;;683    }
0009a2  e8bd87f0          POP      {r4-r10,pc}
                  |L1.2470|
0009a6  f1b90f01          CMP      r9,#1                 ;644
0009aa  d006              BEQ      |L1.2490|
0009ac  f1b90f02          CMP      r9,#2                 ;644
0009b0  d00a              BEQ      |L1.2504|
0009b2  f1b90f03          CMP      r9,#3                 ;644
0009b6  d115              BNE      |L1.2532|
0009b8  e00d              B        |L1.2518|
                  |L1.2490|
0009ba  f8d401b0          LDR      r0,[r4,#0x1b0]        ;646
0009be  f44000c0          ORR      r0,r0,#0x600000       ;646
0009c2  f8c401b0          STR      r0,[r4,#0x1b0]        ;646
0009c6  e00d              B        |L1.2532|
                  |L1.2504|
0009c8  f8d401b0          LDR      r0,[r4,#0x1b0]        ;648
0009cc  f4400080          ORR      r0,r0,#0x400000       ;648
0009d0  f8c401b0          STR      r0,[r4,#0x1b0]        ;648
0009d4  e006              B        |L1.2532|
                  |L1.2518|
0009d6  f8d401b0          LDR      r0,[r4,#0x1b0]        ;650
0009da  f4401000          ORR      r0,r0,#0x200000       ;650
0009de  f8c401b0          STR      r0,[r4,#0x1b0]        ;650
0009e2  bf00              NOP                            ;644
                  |L1.2532|
0009e4  bf00              NOP                            ;647
0009e6  f8940266          LDRB     r0,[r4,#0x266]        ;652
0009ea  2803              CMP      r0,#3                 ;652
0009ec  d105              BNE      |L1.2554|
0009ee  f8d401b0          LDR      r0,[r4,#0x1b0]        ;654
0009f2  f4405080          ORR      r0,r0,#0x1000         ;654
0009f6  f8c401b0          STR      r0,[r4,#0x1b0]        ;654
                  |L1.2554|
0009fa  2f00              CMP      r7,#0                 ;663
0009fc  db02              BLT      |L1.2564|
0009fe  f1b80f00          CMP      r8,#0                 ;663
000a02  da04              BGE      |L1.2574|
                  |L1.2564|
000a04  f6413538          MOV      r5,#0x1b38            ;665
000a08  f645368a          MOV      r6,#0x5b8a            ;666
000a0c  e016              B        |L1.2620|
                  |L1.2574|
000a0e  eb070008          ADD      r0,r7,r8              ;668
000a12  49b0              LDR      r1,|L1.3284|
000a14  4288              CMP      r0,r1                 ;668
000a16  da09              BGE      |L1.2604|
000a18  03f8              LSLS     r0,r7,#15             ;670
000a1a  fbb0f0f1          UDIV     r0,r0,r1              ;670
000a1e  b285              UXTH     r5,r0                 ;670
000a20  ea4f30c8          LSL      r0,r8,#15             ;671
000a24  fbb0f0f1          UDIV     r0,r0,r1              ;671
000a28  b286              UXTH     r6,r0                 ;671
000a2a  e007              B        |L1.2620|
                  |L1.2604|
000a2c  a1aa              ADR      r1,|L1.3288|
000a2e  4620              MOV      r0,r4                 ;675
000a30  f7fffffe          BL       png_warning
000a34  f6413538          MOV      r5,#0x1b38            ;676
000a38  f645368a          MOV      r6,#0x5b8a            ;677
                  |L1.2620|
000a3c  f8a45366          STRH     r5,[r4,#0x366]        ;679
000a40  f8a46368          STRH     r6,[r4,#0x368]        ;680
000a44  f5c54000          RSB      r0,r5,#0x8000         ;681
000a48  1b80              SUBS     r0,r0,r6              ;681
000a4a  f8a4036a          STRH     r0,[r4,#0x36a]        ;681
000a4e  bf00              NOP      
000a50  e7a7              B        |L1.2466|
;;;684    #endif
                          ENDP

                  png_set_rgb_to_gray PROC
;;;627    void PNGAPI
;;;628    png_set_rgb_to_gray(png_structp png_ptr, int error_action, double red,
000a52  e92d4ff0          PUSH     {r4-r11,lr}
;;;629       double green)
;;;630    {
000a56  b087              SUB      sp,sp,#0x1c
000a58  4682              MOV      r10,r0
000a5a  468b              MOV      r11,r1
000a5c  4614              MOV      r4,r2
000a5e  461d              MOV      r5,r3
;;;631          int red_fixed = (int)((float)red*100000.0 + 0.5);
000a60  4620              MOV      r0,r4
000a62  4629              MOV      r1,r5
000a64  f7fffffe          BL       __aeabi_d2f
000a68  9001              STR      r0,[sp,#4]
000a6a  f7fffffe          BL       __aeabi_f2d
000a6e  2200              MOVS     r2,#0
000a70  4ba5              LDR      r3,|L1.3336|
000a72  e9cd0102          STRD     r0,r1,[sp,#8]
000a76  f7fffffe          BL       __aeabi_dmul
000a7a  4680              MOV      r8,r0
000a7c  2200              MOVS     r2,#0
000a7e  4ba3              LDR      r3,|L1.3340|
000a80  f7fffffe          BL       __aeabi_dadd
000a84  4606              MOV      r6,r0
000a86  f7fffffe          BL       __aeabi_d2iz
000a8a  9005              STR      r0,[sp,#0x14]
;;;632          int green_fixed = (int)((float)green*100000.0 + 0.5);
000a8c  e9dd0110          LDRD     r0,r1,[sp,#0x40]
000a90  f7fffffe          BL       __aeabi_d2f
000a94  9001              STR      r0,[sp,#4]
000a96  f7fffffe          BL       __aeabi_f2d
000a9a  4680              MOV      r8,r0
000a9c  2200              MOVS     r2,#0
000a9e  4b9a              LDR      r3,|L1.3336|
000aa0  f7fffffe          BL       __aeabi_dmul
000aa4  4606              MOV      r6,r0
000aa6  2200              MOVS     r2,#0
000aa8  4b98              LDR      r3,|L1.3340|
000aaa  f7fffffe          BL       __aeabi_dadd
000aae  e9cd0102          STRD     r0,r1,[sp,#8]
000ab2  f7fffffe          BL       __aeabi_d2iz
000ab6  9004              STR      r0,[sp,#0x10]
;;;633          if(png_ptr == NULL) return;
000ab8  f1ba0f00          CMP      r10,#0
000abc  d102              BNE      |L1.2756|
                  |L1.2750|
;;;634          png_set_rgb_to_gray_fixed(png_ptr, error_action, red_fixed, green_fixed);
;;;635    }
000abe  b007              ADD      sp,sp,#0x1c
000ac0  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.2756|
000ac4  4659              MOV      r1,r11                ;634
000ac6  4650              MOV      r0,r10                ;634
000ac8  e9dd3204          LDRD     r3,r2,[sp,#0x10]      ;634
000acc  f7fffffe          BL       png_set_rgb_to_gray_fixed
000ad0  bf00              NOP      
000ad2  e7f4              B        |L1.2750|
;;;636    #endif
                          ENDP

                  png_set_read_user_transform_fn PROC
;;;689    void PNGAPI
;;;690    png_set_read_user_transform_fn(png_structp png_ptr, png_user_transform_ptr
000ad4  b900              CBNZ     r0,|L1.2776|
                  |L1.2774|
;;;691       read_user_transform_fn)
;;;692    {
;;;693       png_debug(1, "in png_set_read_user_transform_fn\n");
;;;694       if(png_ptr == NULL) return;
;;;695    #if defined(PNG_READ_USER_TRANSFORM_SUPPORTED)
;;;696       png_ptr->transformations |= PNG_USER_TRANSFORM;
;;;697       png_ptr->read_user_transform_fn = read_user_transform_fn;
;;;698    #endif
;;;699    #ifdef PNG_LEGACY_SUPPORTED
;;;700       if(read_user_transform_fn)
;;;701          png_warning(png_ptr,
;;;702            "This version of libpng does not support user transforms");
;;;703    #endif
;;;704    }
000ad6  4770              BX       lr
                  |L1.2776|
000ad8  f8d021b0          LDR      r2,[r0,#0x1b0]        ;696
000adc  f4421280          ORR      r2,r2,#0x100000       ;696
000ae0  f8c021b0          STR      r2,[r0,#0x1b0]        ;696
000ae4  f8c01198          STR      r1,[r0,#0x198]        ;697
000ae8  bf00              NOP      
000aea  e7f4              B        |L1.2774|
;;;705    #endif
                          ENDP

                  png_build_gamma_table PROC
;;;3976   void /* PRIVATE */
;;;3977   png_build_gamma_table(png_structp png_ptr)
000aec  e92d4ff0          PUSH     {r4-r11,lr}
;;;3978   {
000af0  b08d              SUB      sp,sp,#0x34
000af2  4604              MOV      r4,r0
;;;3979     png_debug(1, "in png_build_gamma_table\n");
;;;3980   
;;;3981     if (png_ptr->bit_depth <= 8)
000af4  f8940267          LDRB     r0,[r4,#0x267]
000af8  2808              CMP      r0,#8
000afa  dc7c              BGT      |L1.3062|
;;;3982     {
;;;3983        int i;
;;;3984        double g;
;;;3985   
;;;3986        if (png_ptr->screen_gamma > .000001)
000afc  f8d402a0          LDR      r0,[r4,#0x2a0]
000b00  f7fffffe          BL       __aeabi_f2d
000b04  4607              MOV      r7,r0
000b06  4a82              LDR      r2,|L1.3344|
000b08  4b82              LDR      r3,|L1.3348|
000b0a  f7fffffe          BL       __aeabi_cdrcmple
000b0e  d211              BCS      |L1.2868|
;;;3987           g = 1.0 / (png_ptr->gamma * png_ptr->screen_gamma);
000b10  f5047027          ADD      r0,r4,#0x29c
000b14  c803              LDM      r0,{r0,r1}
000b16  f7fffffe          BL       __aeabi_fmul
000b1a  4682              MOV      r10,r0
000b1c  f7fffffe          BL       __aeabi_f2d
000b20  4607              MOV      r7,r0
000b22  463a              MOV      r2,r7
000b24  460b              MOV      r3,r1
000b26  2000              MOVS     r0,#0
000b28  4966              LDR      r1,|L1.3268|
000b2a  f7fffffe          BL       __aeabi_ddiv
000b2e  4605              MOV      r5,r0
000b30  460e              MOV      r6,r1
000b32  e001              B        |L1.2872|
                  |L1.2868|
;;;3988        else
;;;3989           g = 1.0;
000b34  2500              MOVS     r5,#0
000b36  4e63              LDR      r6,|L1.3268|
                  |L1.2872|
;;;3990   
;;;3991        png_ptr->gamma_table = (png_bytep)png_malloc(png_ptr,
000b38  f44f7180          MOV      r1,#0x100
000b3c  4620              MOV      r0,r4
000b3e  f7fffffe          BL       png_malloc
000b42  f8c402a4          STR      r0,[r4,#0x2a4]
;;;3992           (png_uint_32)256);
;;;3993   
;;;3994        for (i = 0; i < 256; i++)
000b46  f04f0900          MOV      r9,#0
000b4a  e022              B        |L1.2962|
                  |L1.2892|
;;;3995        {
;;;3996           png_ptr->gamma_table[i] = (png_byte)(pow((double)i / 255.0,
000b4c  4648              MOV      r0,r9
000b4e  f7fffffe          BL       __aeabi_i2d
000b52  4682              MOV      r10,r0
000b54  2200              MOVS     r2,#0
000b56  4b70              LDR      r3,|L1.3352|
000b58  f7fffffe          BL       __aeabi_ddiv
000b5c  462a              MOV      r2,r5
000b5e  4633              MOV      r3,r6
000b60  e9cd0106          STRD     r0,r1,[sp,#0x18]
000b64  f7fffffe          BL       pow
000b68  2200              MOVS     r2,#0
000b6a  4b6b              LDR      r3,|L1.3352|
000b6c  e9cd0108          STRD     r0,r1,[sp,#0x20]
000b70  f7fffffe          BL       __aeabi_dmul
000b74  2200              MOVS     r2,#0
000b76  4b65              LDR      r3,|L1.3340|
000b78  e9cd010a          STRD     r0,r1,[sp,#0x28]
000b7c  f7fffffe          BL       __aeabi_dadd
000b80  4607              MOV      r7,r0
000b82  f7fffffe          BL       __aeabi_d2uiz
000b86  f8d412a4          LDR      r1,[r4,#0x2a4]
000b8a  f8010009          STRB     r0,[r1,r9]
000b8e  f1090901          ADD      r9,r9,#1              ;3994
                  |L1.2962|
000b92  f1b90fff          CMP      r9,#0xff              ;3994
000b96  ddd9              BLE      |L1.2892|
;;;3997              g) * 255.0 + .5);
;;;3998        }
;;;3999   
;;;4000   #if defined(PNG_READ_BACKGROUND_SUPPORTED) || \
;;;4001      defined(PNG_READ_RGB_TO_GRAY_SUPPORTED)
;;;4002        if (png_ptr->transformations & ((PNG_BACKGROUND) | PNG_RGB_TO_GRAY))
000b98  4960              LDR      r1,|L1.3356|
000b9a  f8d401b0          LDR      r0,[r4,#0x1b0]
000b9e  4008              ANDS     r0,r0,r1
000ba0  2800              CMP      r0,#0
000ba2  d07c              BEQ      |L1.3230|
;;;4003        {
;;;4004   
;;;4005           g = 1.0 / (png_ptr->gamma);
000ba4  f8d4029c          LDR      r0,[r4,#0x29c]
000ba8  f7fffffe          BL       __aeabi_f2d
000bac  4607              MOV      r7,r0
000bae  463a              MOV      r2,r7
000bb0  460b              MOV      r3,r1
000bb2  2000              MOVS     r0,#0
000bb4  4943              LDR      r1,|L1.3268|
000bb6  f7fffffe          BL       __aeabi_ddiv
000bba  4605              MOV      r5,r0
000bbc  460e              MOV      r6,r1
;;;4006   
;;;4007           png_ptr->gamma_to_1 = (png_bytep)png_malloc(png_ptr,
000bbe  f44f7180          MOV      r1,#0x100
000bc2  4620              MOV      r0,r4
000bc4  f7fffffe          BL       png_malloc
000bc8  f8c402ac          STR      r0,[r4,#0x2ac]
;;;4008              (png_uint_32)256);
;;;4009   
;;;4010           for (i = 0; i < 256; i++)
000bcc  f04f0900          MOV      r9,#0
000bd0  e024              B        |L1.3100|
                  |L1.3026|
;;;4011           {
;;;4012              png_ptr->gamma_to_1[i] = (png_byte)(pow((double)i / 255.0,
000bd2  4648              MOV      r0,r9
000bd4  f7fffffe          BL       __aeabi_i2d
000bd8  2200              MOVS     r2,#0
000bda  4b4f              LDR      r3,|L1.3352|
000bdc  e9cd0106          STRD     r0,r1,[sp,#0x18]
000be0  f7fffffe          BL       __aeabi_ddiv
000be4  462a              MOV      r2,r5
000be6  4633              MOV      r3,r6
000be8  e9cd0108          STRD     r0,r1,[sp,#0x20]
000bec  f7fffffe          BL       pow
000bf0  2200              MOVS     r2,#0
000bf2  4b49              LDR      r3,|L1.3352|
000bf4  e000              B        |L1.3064|
                  |L1.3062|
000bf6  e093              B        |L1.3360|
                  |L1.3064|
000bf8  e9cd010a          STRD     r0,r1,[sp,#0x28]
000bfc  f7fffffe          BL       __aeabi_dmul
000c00  4607              MOV      r7,r0
000c02  2200              MOVS     r2,#0
000c04  4b41              LDR      r3,|L1.3340|
000c06  f7fffffe          BL       __aeabi_dadd
000c0a  4682              MOV      r10,r0
000c0c  f7fffffe          BL       __aeabi_d2uiz
000c10  f8d412ac          LDR      r1,[r4,#0x2ac]
000c14  f8010009          STRB     r0,[r1,r9]
000c18  f1090901          ADD      r9,r9,#1              ;4010
                  |L1.3100|
000c1c  f1b90fff          CMP      r9,#0xff              ;4010
000c20  ddd7              BLE      |L1.3026|
;;;4013                 g) * 255.0 + .5);
;;;4014           }
;;;4015   
;;;4016   
;;;4017           png_ptr->gamma_from_1 = (png_bytep)png_malloc(png_ptr,
000c22  f44f7180          MOV      r1,#0x100
000c26  4620              MOV      r0,r4
000c28  f7fffffe          BL       png_malloc
000c2c  f8c402a8          STR      r0,[r4,#0x2a8]
;;;4018              (png_uint_32)256);
;;;4019   
;;;4020           if(png_ptr->screen_gamma > 0.000001)
000c30  f8d402a0          LDR      r0,[r4,#0x2a0]
000c34  f7fffffe          BL       __aeabi_f2d
000c38  4607              MOV      r7,r0
000c3a  4a35              LDR      r2,|L1.3344|
000c3c  4b35              LDR      r3,|L1.3348|
000c3e  f7fffffe          BL       __aeabi_cdrcmple
000c42  d20d              BCS      |L1.3168|
;;;4021              g = 1.0 / png_ptr->screen_gamma;
000c44  f8d402a0          LDR      r0,[r4,#0x2a0]
000c48  f7fffffe          BL       __aeabi_f2d
000c4c  4607              MOV      r7,r0
000c4e  463a              MOV      r2,r7
000c50  460b              MOV      r3,r1
000c52  2000              MOVS     r0,#0
000c54  491b              LDR      r1,|L1.3268|
000c56  f7fffffe          BL       __aeabi_ddiv
000c5a  4605              MOV      r5,r0
000c5c  460e              MOV      r6,r1
000c5e  e005              B        |L1.3180|
                  |L1.3168|
;;;4022           else
;;;4023              g = png_ptr->gamma;   /* probably doing rgb_to_gray */
000c60  f8d4029c          LDR      r0,[r4,#0x29c]
000c64  f7fffffe          BL       __aeabi_f2d
000c68  4605              MOV      r5,r0
000c6a  460e              MOV      r6,r1
                  |L1.3180|
;;;4024   
;;;4025           for (i = 0; i < 256; i++)
000c6c  f04f0900          MOV      r9,#0
000c70  e024              B        |L1.3260|
                  |L1.3186|
;;;4026           {
;;;4027              png_ptr->gamma_from_1[i] = (png_byte)(pow((double)i / 255.0,
000c72  4648              MOV      r0,r9
000c74  f7fffffe          BL       __aeabi_i2d
000c78  4607              MOV      r7,r0
000c7a  2200              MOVS     r2,#0
000c7c  4b26              LDR      r3,|L1.3352|
000c7e  f7fffffe          BL       __aeabi_ddiv
000c82  4682              MOV      r10,r0
000c84  462a              MOV      r2,r5
000c86  4633              MOV      r3,r6
000c88  f7fffffe          BL       pow
000c8c  2200              MOVS     r2,#0
000c8e  4b22              LDR      r3,|L1.3352|
000c90  e9cd0106          STRD     r0,r1,[sp,#0x18]
000c94  f7fffffe          BL       __aeabi_dmul
000c98  2200              MOVS     r2,#0
000c9a  4b1c              LDR      r3,|L1.3340|
000c9c  e000              B        |L1.3232|
                  |L1.3230|
000c9e  e010              B        |L1.3266|
                  |L1.3232|
000ca0  e9cd0108          STRD     r0,r1,[sp,#0x20]
000ca4  f7fffffe          BL       __aeabi_dadd
000ca8  e9cd010a          STRD     r0,r1,[sp,#0x28]
000cac  f7fffffe          BL       __aeabi_d2uiz
000cb0  f8d412a8          LDR      r1,[r4,#0x2a8]
000cb4  f8010009          STRB     r0,[r1,r9]
000cb8  f1090901          ADD      r9,r9,#1              ;4025
                  |L1.3260|
000cbc  f1b90fff          CMP      r9,#0xff              ;4025
000cc0  ddd7              BLE      |L1.3186|
                  |L1.3266|
;;;4028                 g) * 255.0 + .5);
;;;4029   
;;;4030           }
;;;4031        }
;;;4032   #endif /* PNG_READ_BACKGROUND_SUPPORTED || PNG_RGB_TO_GRAY_SUPPORTED */
;;;4033     }
000cc2  e21b              B        |L1.4348|
                  |L1.3268|
                          DCD      0x3ff00000
                  |L1.3272|
                          DCD      0x9999999a
                  |L1.3276|
                          DCD      0x3fa99999
                  |L1.3280|
                          DCD      0x02001000
                  |L1.3284|
                          DCD      0x000186a0
                  |L1.3288|
000cd8  69676e6f          DCB      "ignoring out of range rgb_to_gray coefficients",0
000cdc  72696e67
000ce0  206f7574
000ce4  206f6620
000ce8  72616e67
000cec  65207267
000cf0  625f746f
000cf4  5f677261
000cf8  7920636f
000cfc  65666669
000d00  6369656e
000d04  747300  
000d07  00                DCB      0
                  |L1.3336|
                          DCD      0x40f86a00
                  |L1.3340|
                          DCD      0x3fe00000
                  |L1.3344|
                          DCD      0xa0b5ed8d
                  |L1.3348|
                          DCD      0x3eb0c6f7
                  |L1.3352|
                          DCD      0x406fe000
                  |L1.3356|
                          DCD      0x00600080
                  |L1.3360|
;;;4034     else
;;;4035     {
;;;4036        double g;
;;;4037        int i, j, shift, num;
;;;4038        int sig_bit;
;;;4039        png_uint_32 ig;
;;;4040   
;;;4041        if (png_ptr->color_type & PNG_COLOR_MASK_COLOR)
000d20  f8940266          LDRB     r0,[r4,#0x266]
000d24  f0000002          AND      r0,r0,#2
000d28  b1b8              CBZ      r0,|L1.3418|
;;;4042        {
;;;4043           sig_bit = (int)png_ptr->sig_bit.red;
000d2a  f89402bc          LDRB     r0,[r4,#0x2bc]
000d2e  900b              STR      r0,[sp,#0x2c]
;;;4044           if ((int)png_ptr->sig_bit.green > sig_bit)
000d30  f24020bd          MOV      r0,#0x2bd
000d34  5d01              LDRB     r1,[r0,r4]
000d36  980b              LDR      r0,[sp,#0x2c]
000d38  4281              CMP      r1,r0
000d3a  dd03              BLE      |L1.3396|
;;;4045              sig_bit = png_ptr->sig_bit.green;
000d3c  f24020bd          MOV      r0,#0x2bd
000d40  5d00              LDRB     r0,[r0,r4]
000d42  900b              STR      r0,[sp,#0x2c]
                  |L1.3396|
;;;4046           if ((int)png_ptr->sig_bit.blue > sig_bit)
000d44  f24020be          MOV      r0,#0x2be
000d48  5d01              LDRB     r1,[r0,r4]
000d4a  980b              LDR      r0,[sp,#0x2c]
000d4c  4281              CMP      r1,r0
000d4e  dd08              BLE      |L1.3426|
;;;4047              sig_bit = png_ptr->sig_bit.blue;
000d50  f24020be          MOV      r0,#0x2be
000d54  5d00              LDRB     r0,[r0,r4]
000d56  900b              STR      r0,[sp,#0x2c]
000d58  e003              B        |L1.3426|
                  |L1.3418|
;;;4048        }
;;;4049        else
;;;4050        {
;;;4051           sig_bit = (int)png_ptr->sig_bit.gray;
000d5a  f24020bf          MOV      r0,#0x2bf
000d5e  5d00              LDRB     r0,[r0,r4]
000d60  900b              STR      r0,[sp,#0x2c]
                  |L1.3426|
;;;4052        }
;;;4053   
;;;4054        if (sig_bit > 0)
000d62  980b              LDR      r0,[sp,#0x2c]
000d64  2800              CMP      r0,#0
000d66  dd03              BLE      |L1.3440|
;;;4055           shift = 16 - sig_bit;
000d68  980b              LDR      r0,[sp,#0x2c]
000d6a  f1c00610          RSB      r6,r0,#0x10
000d6e  e000              B        |L1.3442|
                  |L1.3440|
;;;4056        else
;;;4057           shift = 0;
000d70  2600              MOVS     r6,#0
                  |L1.3442|
;;;4058   
;;;4059        if (png_ptr->transformations & PNG_16_TO_8)
000d72  f8b401b0          LDRH     r0,[r4,#0x1b0]
000d76  f4006080          AND      r0,r0,#0x400
000d7a  b110              CBZ      r0,|L1.3458|
;;;4060        {
;;;4061           if (shift < (16 - PNG_MAX_GAMMA_8))
000d7c  2e05              CMP      r6,#5
000d7e  da00              BGE      |L1.3458|
;;;4062              shift = (16 - PNG_MAX_GAMMA_8);
000d80  2605              MOVS     r6,#5
                  |L1.3458|
;;;4063        }
;;;4064   
;;;4065        if (shift > 8)
000d82  2e08              CMP      r6,#8
000d84  dd00              BLE      |L1.3464|
;;;4066           shift = 8;
000d86  2608              MOVS     r6,#8
                  |L1.3464|
;;;4067        if (shift < 0)
000d88  2e00              CMP      r6,#0
000d8a  da00              BGE      |L1.3470|
;;;4068           shift = 0;
000d8c  2600              MOVS     r6,#0
                  |L1.3470|
;;;4069   
;;;4070        png_ptr->gamma_shift = (png_byte)shift;
000d8e  b2f0              UXTB     r0,r6
000d90  f8c40298          STR      r0,[r4,#0x298]
;;;4071   
;;;4072        num = (1 << (8 - shift));
000d94  f1c60108          RSB      r1,r6,#8
000d98  2001              MOVS     r0,#1
000d9a  fa00fa01          LSL      r10,r0,r1
;;;4073   
;;;4074        if (png_ptr->screen_gamma > .000001)
000d9e  f8d402a0          LDR      r0,[r4,#0x2a0]
000da2  f7fffffe          BL       __aeabi_f2d
000da6  4afe              LDR      r2,|L1.4512|
000da8  4bfe              LDR      r3,|L1.4516|
000daa  e9cd0108          STRD     r0,r1,[sp,#0x20]
000dae  f7fffffe          BL       __aeabi_cdrcmple
000db2  d212              BCS      |L1.3546|
;;;4075           g = 1.0 / (png_ptr->gamma * png_ptr->screen_gamma);
000db4  f5047027          ADD      r0,r4,#0x29c
000db8  c803              LDM      r0,{r0,r1}
000dba  f7fffffe          BL       __aeabi_fmul
000dbe  4683              MOV      r11,r0
000dc0  f7fffffe          BL       __aeabi_f2d
000dc4  4602              MOV      r2,r0
000dc6  460b              MOV      r3,r1
000dc8  e9cd0108          STRD     r0,r1,[sp,#0x20]
000dcc  2000              MOVS     r0,#0
000dce  49f6              LDR      r1,|L1.4520|
000dd0  f7fffffe          BL       __aeabi_ddiv
000dd4  4607              MOV      r7,r0
000dd6  4688              MOV      r8,r1
000dd8  e002              B        |L1.3552|
                  |L1.3546|
;;;4076        else
;;;4077           g = 1.0;
000dda  2700              MOVS     r7,#0
000ddc  f8df83c8          LDR      r8,|L1.4520|
                  |L1.3552|
;;;4078   
;;;4079        png_ptr->gamma_16_table = (png_uint_16pp)png_malloc(png_ptr,
000de0  ea4f018a          LSL      r1,r10,#2
000de4  4620              MOV      r0,r4
000de6  f7fffffe          BL       png_malloc
000dea  f8c402b0          STR      r0,[r4,#0x2b0]
;;;4080           (png_uint_32)(num * png_sizeof (png_uint_16p)));
;;;4081   
;;;4082        if (png_ptr->transformations & (PNG_16_TO_8 | PNG_BACKGROUND))
000dee  f8b401b0          LDRH     r0,[r4,#0x1b0]
000df2  f4006090          AND      r0,r0,#0x480
000df6  2800              CMP      r0,#0
000df8  d073              BEQ      |L1.3810|
;;;4083        {
;;;4084           double fin, fout;
;;;4085           png_uint_32 last, max;
;;;4086   
;;;4087           for (i = 0; i < num; i++)
000dfa  2500              MOVS     r5,#0
000dfc  e009              B        |L1.3602|
                  |L1.3582|
;;;4088           {
;;;4089              png_ptr->gamma_16_table[i] = (png_uint_16p)png_malloc(png_ptr,
000dfe  f44f7100          MOV      r1,#0x200
000e02  4620              MOV      r0,r4
000e04  f7fffffe          BL       png_malloc
000e08  f8d412b0          LDR      r1,[r4,#0x2b0]
000e0c  f8410025          STR      r0,[r1,r5,LSL #2]
000e10  1c6d              ADDS     r5,r5,#1              ;4087
                  |L1.3602|
000e12  4555              CMP      r5,r10                ;4087
000e14  dbf3              BLT      |L1.3582|
;;;4090                 (png_uint_32)(256 * png_sizeof (png_uint_16)));
;;;4091           }
;;;4092   
;;;4093           g = 1.0 / g;
000e16  463a              MOV      r2,r7
000e18  4643              MOV      r3,r8
000e1a  2000              MOVS     r0,#0
000e1c  49e2              LDR      r1,|L1.4520|
000e1e  f7fffffe          BL       __aeabi_ddiv
000e22  4607              MOV      r7,r0
000e24  4688              MOV      r8,r1
;;;4094           last = 0;
000e26  f04f0b00          MOV      r11,#0
;;;4095           for (i = 0; i < 256; i++)
000e2a  2500              MOVS     r5,#0
000e2c  e03f              B        |L1.3758|
                  |L1.3630|
;;;4096           {
;;;4097              fout = ((double)i + 0.5) / 256.0;
000e2e  4628              MOV      r0,r5
000e30  f7fffffe          BL       __aeabi_i2d
000e34  2200              MOVS     r2,#0
000e36  4bdd              LDR      r3,|L1.4524|
000e38  e9cd0100          STRD     r0,r1,[sp,#0]
000e3c  f7fffffe          BL       __aeabi_dadd
000e40  2200              MOVS     r2,#0
000e42  4bdb              LDR      r3,|L1.4528|
000e44  e9cd0102          STRD     r0,r1,[sp,#8]
000e48  f7fffffe          BL       __aeabi_ddiv
000e4c  e9cd0106          STRD     r0,r1,[sp,#0x18]
;;;4098              fin = pow(fout, g);
000e50  463a              MOV      r2,r7
000e52  4643              MOV      r3,r8
000e54  e9dd0106          LDRD     r0,r1,[sp,#0x18]
000e58  f7fffffe          BL       pow
000e5c  e9cd0108          STRD     r0,r1,[sp,#0x20]
;;;4099              max = (png_uint_32)(fin * (double)((png_uint_32)num << 8));
000e60  ea4f200a          LSL      r0,r10,#8
000e64  f7fffffe          BL       __aeabi_ui2d
000e68  e9cd0100          STRD     r0,r1,[sp,#0]
000e6c  e9dd2308          LDRD     r2,r3,[sp,#0x20]
000e70  f7fffffe          BL       __aeabi_dmul
000e74  e9cd0102          STRD     r0,r1,[sp,#8]
000e78  f7fffffe          BL       __aeabi_d2uiz
000e7c  9005              STR      r0,[sp,#0x14]
;;;4100              while (last <= max)
000e7e  e012              B        |L1.3750|
                  |L1.3712|
;;;4101              {
;;;4102                 png_ptr->gamma_16_table[(int)(last & (0xff >> shift))]
000e80  ea452005          ORR      r0,r5,r5,LSL #8
000e84  b281              UXTH     r1,r0
000e86  20ff              MOVS     r0,#0xff
000e88  4130              ASRS     r0,r0,r6
000e8a  ea00000b          AND      r0,r0,r11
000e8e  f8d422b0          LDR      r2,[r4,#0x2b0]
000e92  f8522020          LDR      r2,[r2,r0,LSL #2]
000e96  f1c60008          RSB      r0,r6,#8
000e9a  fa2bf000          LSR      r0,r11,r0
000e9e  f8221010          STRH     r1,[r2,r0,LSL #1]
;;;4103                    [(int)(last >> (8 - shift))] = (png_uint_16)(
;;;4104                    (png_uint_16)i | ((png_uint_16)i << 8));
;;;4105                 last++;
000ea2  f10b0b01          ADD      r11,r11,#1
                  |L1.3750|
000ea6  9805              LDR      r0,[sp,#0x14]         ;4100
000ea8  4583              CMP      r11,r0                ;4100
000eaa  d9e9              BLS      |L1.3712|
000eac  1c6d              ADDS     r5,r5,#1              ;4095
                  |L1.3758|
000eae  2dff              CMP      r5,#0xff              ;4095
000eb0  ddbd              BLE      |L1.3630|
;;;4106              }
;;;4107           }
;;;4108           while (last < ((png_uint_32)num << 8))
000eb2  e011              B        |L1.3800|
                  |L1.3764|
;;;4109           {
;;;4110              png_ptr->gamma_16_table[(int)(last & (0xff >> shift))]
000eb4  f64f71ff          MOV      r1,#0xffff
000eb8  20ff              MOVS     r0,#0xff
000eba  4130              ASRS     r0,r0,r6
000ebc  ea00000b          AND      r0,r0,r11
000ec0  f8d422b0          LDR      r2,[r4,#0x2b0]
000ec4  f8522020          LDR      r2,[r2,r0,LSL #2]
000ec8  f1c60008          RSB      r0,r6,#8
000ecc  fa2bf000          LSR      r0,r11,r0
000ed0  f8221010          STRH     r1,[r2,r0,LSL #1]
;;;4111                 [(int)(last >> (8 - shift))] = (png_uint_16)65535L;
;;;4112              last++;
000ed4  f10b0b01          ADD      r11,r11,#1
                  |L1.3800|
000ed8  ebbb2f0a          CMP      r11,r10,LSL #8        ;4108
000edc  d3ea              BCC      |L1.3764|
;;;4113           }
;;;4114        }
000ede  e043              B        |L1.3944|
000ee0  e7ff              B        |L1.3810|
                  |L1.3810|
;;;4115        else
;;;4116        {
;;;4117           for (i = 0; i < num; i++)
000ee2  2500              MOVS     r5,#0
000ee4  e03e              B        |L1.3940|
                  |L1.3814|
;;;4118           {
;;;4119              png_ptr->gamma_16_table[i] = (png_uint_16p)png_malloc(png_ptr,
000ee6  f44f7100          MOV      r1,#0x200
000eea  4620              MOV      r0,r4
000eec  f7fffffe          BL       png_malloc
000ef0  f8d412b0          LDR      r1,[r4,#0x2b0]
000ef4  f8410025          STR      r0,[r1,r5,LSL #2]
;;;4120                 (png_uint_32)(256 * png_sizeof (png_uint_16)));
;;;4121   
;;;4122              ig = (((png_uint_32)i * (png_uint_32)png_gamma_shift[shift]) >> 4);
000ef8  48ae              LDR      r0,|L1.4532|
000efa  f8500026          LDR      r0,[r0,r6,LSL #2]
000efe  4368              MULS     r0,r5,r0
000f00  0900              LSRS     r0,r0,#4
000f02  900a              STR      r0,[sp,#0x28]
;;;4123              for (j = 0; j < 256; j++)
000f04  f04f0900          MOV      r9,#0
000f08  e028              B        |L1.3932|
                  |L1.3850|
;;;4124              {
;;;4125                 png_ptr->gamma_16_table[i][j] =
000f0a  990a              LDR      r1,[sp,#0x28]
000f0c  eb012009          ADD      r0,r1,r9,LSL #8
000f10  f7fffffe          BL       __aeabi_ui2d
000f14  2200              MOVS     r2,#0
000f16  4ba8              LDR      r3,|L1.4536|
000f18  e9cd0100          STRD     r0,r1,[sp,#0]
000f1c  f7fffffe          BL       __aeabi_ddiv
000f20  463a              MOV      r2,r7
000f22  4643              MOV      r3,r8
000f24  e9cd0102          STRD     r0,r1,[sp,#8]
000f28  f7fffffe          BL       pow
000f2c  2200              MOVS     r2,#0
000f2e  4ba2              LDR      r3,|L1.4536|
000f30  e9cd0104          STRD     r0,r1,[sp,#0x10]
000f34  f7fffffe          BL       __aeabi_dmul
000f38  2200              MOVS     r2,#0
000f3a  4b9c              LDR      r3,|L1.4524|
000f3c  e9cd0106          STRD     r0,r1,[sp,#0x18]
000f40  f7fffffe          BL       __aeabi_dadd
000f44  e9cd0108          STRD     r0,r1,[sp,#0x20]
000f48  f7fffffe          BL       __aeabi_d2uiz
000f4c  f8d412b0          LDR      r1,[r4,#0x2b0]
000f50  f8511025          LDR      r1,[r1,r5,LSL #2]
000f54  f8210019          STRH     r0,[r1,r9,LSL #1]
000f58  f1090901          ADD      r9,r9,#1              ;4123
                  |L1.3932|
000f5c  f1b90fff          CMP      r9,#0xff              ;4123
000f60  ddd3              BLE      |L1.3850|
000f62  1c6d              ADDS     r5,r5,#1              ;4117
                  |L1.3940|
000f64  4555              CMP      r5,r10                ;4117
000f66  dbbe              BLT      |L1.3814|
                  |L1.3944|
;;;4126                    (png_uint_16)(pow((double)(ig + ((png_uint_32)j << 8)) /
;;;4127                       65535.0, g) * 65535.0 + .5);
;;;4128              }
;;;4129           }
;;;4130        }
;;;4131   
;;;4132   #if defined(PNG_READ_BACKGROUND_SUPPORTED) || \
;;;4133      defined(PNG_READ_RGB_TO_GRAY_SUPPORTED)
;;;4134        if (png_ptr->transformations & (PNG_BACKGROUND | PNG_RGB_TO_GRAY))
000f68  4994              LDR      r1,|L1.4540|
000f6a  f8d401b0          LDR      r0,[r4,#0x1b0]
000f6e  4008              ANDS     r0,r0,r1
000f70  2800              CMP      r0,#0
000f72  d071              BEQ      |L1.4184|
;;;4135        {
;;;4136   
;;;4137           g = 1.0 / (png_ptr->gamma);
000f74  f8d4029c          LDR      r0,[r4,#0x29c]
000f78  f7fffffe          BL       __aeabi_f2d
000f7c  4602              MOV      r2,r0
000f7e  460b              MOV      r3,r1
000f80  e9cd0108          STRD     r0,r1,[sp,#0x20]
000f84  2000              MOVS     r0,#0
000f86  4988              LDR      r1,|L1.4520|
000f88  f7fffffe          BL       __aeabi_ddiv
000f8c  4607              MOV      r7,r0
000f8e  4688              MOV      r8,r1
;;;4138   
;;;4139           png_ptr->gamma_16_to_1 = (png_uint_16pp)png_malloc(png_ptr,
000f90  ea4f018a          LSL      r1,r10,#2
000f94  4620              MOV      r0,r4
000f96  f7fffffe          BL       png_malloc
000f9a  f8c402b8          STR      r0,[r4,#0x2b8]
;;;4140              (png_uint_32)(num * png_sizeof (png_uint_16p )));
;;;4141   
;;;4142           for (i = 0; i < num; i++)
000f9e  2500              MOVS     r5,#0
000fa0  e03e              B        |L1.4128|
                  |L1.4002|
;;;4143           {
;;;4144              png_ptr->gamma_16_to_1[i] = (png_uint_16p)png_malloc(png_ptr,
000fa2  f44f7100          MOV      r1,#0x200
000fa6  4620              MOV      r0,r4
000fa8  f7fffffe          BL       png_malloc
000fac  f8d412b8          LDR      r1,[r4,#0x2b8]
000fb0  f8410025          STR      r0,[r1,r5,LSL #2]
;;;4145                 (png_uint_32)(256 * png_sizeof (png_uint_16)));
;;;4146   
;;;4147              ig = (((png_uint_32)i *
000fb4  487f              LDR      r0,|L1.4532|
000fb6  f8500026          LDR      r0,[r0,r6,LSL #2]
000fba  4368              MULS     r0,r5,r0
000fbc  0900              LSRS     r0,r0,#4
000fbe  900a              STR      r0,[sp,#0x28]
;;;4148                 (png_uint_32)png_gamma_shift[shift]) >> 4);
;;;4149              for (j = 0; j < 256; j++)
000fc0  f04f0900          MOV      r9,#0
000fc4  e028              B        |L1.4120|
                  |L1.4038|
;;;4150              {
;;;4151                 png_ptr->gamma_16_to_1[i][j] =
000fc6  990a              LDR      r1,[sp,#0x28]
000fc8  eb012009          ADD      r0,r1,r9,LSL #8
000fcc  f7fffffe          BL       __aeabi_ui2d
000fd0  2200              MOVS     r2,#0
000fd2  4b79              LDR      r3,|L1.4536|
000fd4  e9cd0100          STRD     r0,r1,[sp,#0]
000fd8  f7fffffe          BL       __aeabi_ddiv
000fdc  463a              MOV      r2,r7
000fde  4643              MOV      r3,r8
000fe0  e9cd0102          STRD     r0,r1,[sp,#8]
000fe4  f7fffffe          BL       pow
000fe8  2200              MOVS     r2,#0
000fea  4b73              LDR      r3,|L1.4536|
000fec  e9cd0104          STRD     r0,r1,[sp,#0x10]
000ff0  f7fffffe          BL       __aeabi_dmul
000ff4  2200              MOVS     r2,#0
000ff6  4b6d              LDR      r3,|L1.4524|
000ff8  e9cd0106          STRD     r0,r1,[sp,#0x18]
000ffc  f7fffffe          BL       __aeabi_dadd
001000  e9cd0108          STRD     r0,r1,[sp,#0x20]
001004  f7fffffe          BL       __aeabi_d2uiz
001008  f8d412b8          LDR      r1,[r4,#0x2b8]
00100c  f8511025          LDR      r1,[r1,r5,LSL #2]
001010  f8210019          STRH     r0,[r1,r9,LSL #1]
001014  f1090901          ADD      r9,r9,#1              ;4149
                  |L1.4120|
001018  f1b90fff          CMP      r9,#0xff              ;4149
00101c  ddd3              BLE      |L1.4038|
00101e  1c6d              ADDS     r5,r5,#1              ;4142
                  |L1.4128|
001020  4555              CMP      r5,r10                ;4142
001022  dbbe              BLT      |L1.4002|
;;;4152                    (png_uint_16)(pow((double)(ig + ((png_uint_32)j << 8)) /
;;;4153                       65535.0, g) * 65535.0 + .5);
;;;4154              }
;;;4155           }
;;;4156   
;;;4157           if(png_ptr->screen_gamma > 0.000001)
001024  f8d402a0          LDR      r0,[r4,#0x2a0]
001028  f7fffffe          BL       __aeabi_f2d
00102c  4a5c              LDR      r2,|L1.4512|
00102e  4b5d              LDR      r3,|L1.4516|
001030  e9cd0108          STRD     r0,r1,[sp,#0x20]
001034  f7fffffe          BL       __aeabi_cdrcmple
001038  d20f              BCS      |L1.4186|
;;;4158              g = 1.0 / png_ptr->screen_gamma;
00103a  f8d402a0          LDR      r0,[r4,#0x2a0]
00103e  f7fffffe          BL       __aeabi_f2d
001042  4602              MOV      r2,r0
001044  460b              MOV      r3,r1
001046  e9cd0108          STRD     r0,r1,[sp,#0x20]
00104a  2000              MOVS     r0,#0
00104c  4956              LDR      r1,|L1.4520|
00104e  f7fffffe          BL       __aeabi_ddiv
001052  4607              MOV      r7,r0
001054  4688              MOV      r8,r1
001056  e006              B        |L1.4198|
                  |L1.4184|
001058  e04f              B        |L1.4346|
                  |L1.4186|
;;;4159           else
;;;4160              g = png_ptr->gamma;   /* probably doing rgb_to_gray */
00105a  f8d4029c          LDR      r0,[r4,#0x29c]
00105e  f7fffffe          BL       __aeabi_f2d
001062  4607              MOV      r7,r0
001064  4688              MOV      r8,r1
                  |L1.4198|
;;;4161   
;;;4162           png_ptr->gamma_16_from_1 = (png_uint_16pp)png_malloc(png_ptr,
001066  ea4f018a          LSL      r1,r10,#2
00106a  4620              MOV      r0,r4
00106c  f7fffffe          BL       png_malloc
001070  f8c402b4          STR      r0,[r4,#0x2b4]
;;;4163              (png_uint_32)(num * png_sizeof (png_uint_16p)));
;;;4164   
;;;4165           for (i = 0; i < num; i++)
001074  2500              MOVS     r5,#0
001076  e03e              B        |L1.4342|
                  |L1.4216|
;;;4166           {
;;;4167              png_ptr->gamma_16_from_1[i] = (png_uint_16p)png_malloc(png_ptr,
001078  f44f7100          MOV      r1,#0x200
00107c  4620              MOV      r0,r4
00107e  f7fffffe          BL       png_malloc
001082  f8d412b4          LDR      r1,[r4,#0x2b4]
001086  f8410025          STR      r0,[r1,r5,LSL #2]
;;;4168                 (png_uint_32)(256 * png_sizeof (png_uint_16)));
;;;4169   
;;;4170              ig = (((png_uint_32)i *
00108a  484a              LDR      r0,|L1.4532|
00108c  f8500026          LDR      r0,[r0,r6,LSL #2]
001090  4368              MULS     r0,r5,r0
001092  0900              LSRS     r0,r0,#4
001094  900a              STR      r0,[sp,#0x28]
;;;4171                 (png_uint_32)png_gamma_shift[shift]) >> 4);
;;;4172              for (j = 0; j < 256; j++)
001096  f04f0900          MOV      r9,#0
00109a  e028              B        |L1.4334|
                  |L1.4252|
;;;4173              {
;;;4174                 png_ptr->gamma_16_from_1[i][j] =
00109c  990a              LDR      r1,[sp,#0x28]
00109e  eb012009          ADD      r0,r1,r9,LSL #8
0010a2  f7fffffe          BL       __aeabi_ui2d
0010a6  2200              MOVS     r2,#0
0010a8  4b43              LDR      r3,|L1.4536|
0010aa  e9cd0100          STRD     r0,r1,[sp,#0]
0010ae  f7fffffe          BL       __aeabi_ddiv
0010b2  463a              MOV      r2,r7
0010b4  4643              MOV      r3,r8
0010b6  e9cd0102          STRD     r0,r1,[sp,#8]
0010ba  f7fffffe          BL       pow
0010be  2200              MOVS     r2,#0
0010c0  4b3d              LDR      r3,|L1.4536|
0010c2  e9cd0104          STRD     r0,r1,[sp,#0x10]
0010c6  f7fffffe          BL       __aeabi_dmul
0010ca  2200              MOVS     r2,#0
0010cc  4b37              LDR      r3,|L1.4524|
0010ce  e9cd0106          STRD     r0,r1,[sp,#0x18]
0010d2  f7fffffe          BL       __aeabi_dadd
0010d6  e9cd0108          STRD     r0,r1,[sp,#0x20]
0010da  f7fffffe          BL       __aeabi_d2uiz
0010de  f8d412b4          LDR      r1,[r4,#0x2b4]
0010e2  f8511025          LDR      r1,[r1,r5,LSL #2]
0010e6  f8210019          STRH     r0,[r1,r9,LSL #1]
0010ea  f1090901          ADD      r9,r9,#1              ;4172
                  |L1.4334|
0010ee  f1b90fff          CMP      r9,#0xff              ;4172
0010f2  ddd3              BLE      |L1.4252|
0010f4  1c6d              ADDS     r5,r5,#1              ;4165
                  |L1.4342|
0010f6  4555              CMP      r5,r10                ;4165
0010f8  dbbe              BLT      |L1.4216|
                  |L1.4346|
;;;4175                    (png_uint_16)(pow((double)(ig + ((png_uint_32)j << 8)) /
;;;4176                       65535.0, g) * 65535.0 + .5);
;;;4177              }
;;;4178           }
;;;4179        }
;;;4180   #endif /* PNG_READ_BACKGROUND_SUPPORTED || PNG_RGB_TO_GRAY_SUPPORTED */
;;;4181     }
0010fa  bf00              NOP      
                  |L1.4348|
;;;4182   }
0010fc  b00d              ADD      sp,sp,#0x34
0010fe  e8bd8ff0          POP      {r4-r11,pc}
;;;4183   #endif
                          ENDP

                  png_init_read_transformations PROC
;;;710    void /* PRIVATE */
;;;711    png_init_read_transformations(png_structp png_ptr)
001102  b501              PUSH     {r0,lr}
;;;712    {
001104  b096              SUB      sp,sp,#0x58
;;;713       png_debug(1, "in png_init_read_transformations\n");
;;;714    #if defined(PNG_USELESS_TESTS_SUPPORTED)
;;;715       if(png_ptr != NULL)
;;;716    #endif
;;;717      {
;;;718    #if defined(PNG_READ_BACKGROUND_SUPPORTED) || defined(PNG_READ_SHIFT_SUPPORTED) \
;;;719     || defined(PNG_READ_GAMMA_SUPPORTED)
;;;720       int color_type = png_ptr->color_type;
001106  9816              LDR      r0,[sp,#0x58]
001108  f8900266          LDRB     r0,[r0,#0x266]
00110c  9015              STR      r0,[sp,#0x54]
;;;721    #endif
;;;722    
;;;723    #if defined(PNG_READ_EXPAND_SUPPORTED) && defined(PNG_READ_BACKGROUND_SUPPORTED)
;;;724    
;;;725    #if defined(PNG_READ_GRAY_TO_RGB_SUPPORTED)
;;;726       /* Detect gray background and attempt to enable optimization
;;;727        * for gray --> RGB case */
;;;728       /* Note:  if PNG_BACKGROUND_EXPAND is set and color_type is either RGB or
;;;729        * RGB_ALPHA (in which case need_expand is superfluous anyway), the
;;;730        * background color might actually be gray yet not be flagged as such.
;;;731        * This is not a problem for the current code, which uses
;;;732        * PNG_BACKGROUND_IS_GRAY only to decide when to do the
;;;733        * png_do_gray_to_rgb() transformation.
;;;734        */
;;;735       if ((png_ptr->transformations & PNG_BACKGROUND_EXPAND) &&
00110e  9816              LDR      r0,[sp,#0x58]
001110  f8b001b0          LDRH     r0,[r0,#0x1b0]
001114  f4007080          AND      r0,r0,#0x100
001118  b160              CBZ      r0,|L1.4404|
;;;736           !(color_type & PNG_COLOR_MASK_COLOR))
00111a  9815              LDR      r0,[sp,#0x54]
00111c  f0000002          AND      r0,r0,#2
001120  b940              CBNZ     r0,|L1.4404|
;;;737       {
;;;738              png_ptr->mode |= PNG_BACKGROUND_IS_GRAY;
001122  9816              LDR      r0,[sp,#0x58]
001124  f8d001a8          LDR      r0,[r0,#0x1a8]
001128  f4406100          ORR      r1,r0,#0x800
00112c  9816              LDR      r0,[sp,#0x58]
00112e  f8c011a8          STR      r1,[r0,#0x1a8]
001132  e02c              B        |L1.4494|
                  |L1.4404|
;;;739       } else if ((png_ptr->transformations & PNG_BACKGROUND) &&
001134  9816              LDR      r0,[sp,#0x58]
001136  f89001b0          LDRB     r0,[r0,#0x1b0]
00113a  f0000080          AND      r0,r0,#0x80
00113e  b330              CBZ      r0,|L1.4494|
;;;740                  !(png_ptr->transformations & PNG_BACKGROUND_EXPAND) &&
001140  9816              LDR      r0,[sp,#0x58]
001142  f8b001b0          LDRH     r0,[r0,#0x1b0]
001146  f4007080          AND      r0,r0,#0x100
00114a  bb00              CBNZ     r0,|L1.4494|
;;;741                  (png_ptr->transformations & PNG_GRAY_TO_RGB) &&
00114c  9816              LDR      r0,[sp,#0x58]
00114e  f8b001b0          LDRH     r0,[r0,#0x1b0]
001152  f4004080          AND      r0,r0,#0x4000
001156  b1d0              CBZ      r0,|L1.4494|
;;;742                  png_ptr->background.red == png_ptr->background.green &&
001158  9816              LDR      r0,[sp,#0x58]
00115a  f8b0127a          LDRH     r1,[r0,#0x27a]
00115e  f8b0027c          LDRH     r0,[r0,#0x27c]
001162  4281              CMP      r1,r0
001164  d113              BNE      |L1.4494|
;;;743                  png_ptr->background.red == png_ptr->background.blue)
001166  9816              LDR      r0,[sp,#0x58]
001168  f8b0127a          LDRH     r1,[r0,#0x27a]
00116c  f8b0027e          LDRH     r0,[r0,#0x27e]
001170  4281              CMP      r1,r0
001172  d10c              BNE      |L1.4494|
;;;744       {
;;;745              png_ptr->mode |= PNG_BACKGROUND_IS_GRAY;
001174  9816              LDR      r0,[sp,#0x58]
001176  f8d001a8          LDR      r0,[r0,#0x1a8]
00117a  f4406100          ORR      r1,r0,#0x800
00117e  9816              LDR      r0,[sp,#0x58]
001180  f8c011a8          STR      r1,[r0,#0x1a8]
;;;746              png_ptr->background.gray = png_ptr->background.red;
001184  9816              LDR      r0,[sp,#0x58]
001186  f8b0127a          LDRH     r1,[r0,#0x27a]
00118a  f8a01280          STRH     r1,[r0,#0x280]
                  |L1.4494|
;;;747       }
;;;748    #endif
;;;749    
;;;750       if ((png_ptr->transformations & PNG_BACKGROUND_EXPAND) &&
00118e  9816              LDR      r0,[sp,#0x58]
001190  f8b001b0          LDRH     r0,[r0,#0x1b0]
001194  f4007080          AND      r0,r0,#0x100
001198  2800              CMP      r0,#0
                  |L1.4506|
00119a  d07d              BEQ      |L1.4760|
;;;751           (png_ptr->transformations & PNG_EXPAND))
00119c  9816              LDR      r0,[sp,#0x58]
00119e  e00f              B        |L1.4544|
                  |L1.4512|
                          DCD      0xa0b5ed8d
                  |L1.4516|
                          DCD      0x3eb0c6f7
                  |L1.4520|
                          DCD      0x3ff00000
                  |L1.4524|
                          DCD      0x3fe00000
                  |L1.4528|
                          DCD      0x40700000
                  |L1.4532|
                          DCD      png_gamma_shift
                  |L1.4536|
                          DCD      0x40efffe0
                  |L1.4540|
                          DCD      0x00600080
                  |L1.4544|
0011c0  f8b001b0          LDRH     r0,[r0,#0x1b0]
0011c4  f4005080          AND      r0,r0,#0x1000
0011c8  2800              CMP      r0,#0
0011ca  d0e6              BEQ      |L1.4506|
;;;752       {
;;;753          if (!(color_type & PNG_COLOR_MASK_COLOR))  /* i.e., GRAY or GRAY_ALPHA */
0011cc  9815              LDR      r0,[sp,#0x54]
0011ce  f0000002          AND      r0,r0,#2
0011d2  2800              CMP      r0,#0
0011d4  d173              BNE      |L1.4798|
;;;754          {
;;;755             /* expand background and tRNS chunks */
;;;756             switch (png_ptr->bit_depth)
0011d6  9816              LDR      r0,[sp,#0x58]
0011d8  f8900267          LDRB     r0,[r0,#0x267]
0011dc  2804              CMP      r0,#4
0011de  d071              BEQ      |L1.4804|
0011e0  dc04              BGT      |L1.4588|
0011e2  2801              CMP      r0,#1
0011e4  d007              BEQ      |L1.4598|
0011e6  2802              CMP      r0,#2
0011e8  d133              BNE      |L1.4690|
0011ea  e033              B        |L1.4692|
                  |L1.4588|
0011ec  2808              CMP      r0,#8
0011ee  d068              BEQ      |L1.4802|
0011f0  2810              CMP      r0,#0x10
0011f2  d12e              BNE      |L1.4690|
0011f4  e096              B        |L1.4900|
                  |L1.4598|
;;;757             {
;;;758                case 1:
;;;759                   png_ptr->background.gray *= (png_uint_16)0xff;
0011f6  9816              LDR      r0,[sp,#0x58]
0011f8  f8b00280          LDRH     r0,[r0,#0x280]
0011fc  ebc02000          RSB      r0,r0,r0,LSL #8
001200  b281              UXTH     r1,r0
001202  9816              LDR      r0,[sp,#0x58]
001204  f8a01280          STRH     r1,[r0,#0x280]
;;;760                   png_ptr->background.red = png_ptr->background.green
001208  9816              LDR      r0,[sp,#0x58]
00120a  f8b01280          LDRH     r1,[r0,#0x280]
00120e  f8a0127e          STRH     r1,[r0,#0x27e]
001212  9816              LDR      r0,[sp,#0x58]
001214  f8a0127c          STRH     r1,[r0,#0x27c]
001218  9816              LDR      r0,[sp,#0x58]
00121a  f8a0127a          STRH     r1,[r0,#0x27a]
;;;761                     =  png_ptr->background.blue = png_ptr->background.gray;
;;;762                   if (!(png_ptr->transformations & PNG_EXPAND_tRNS))
00121e  9816              LDR      r0,[sp,#0x58]
001220  f8d001b0          LDR      r0,[r0,#0x1b0]
001224  f0007000          AND      r0,r0,#0x2000000
001228  b998              CBNZ     r0,|L1.4690|
;;;763                   {
;;;764                     png_ptr->trans_values.gray *= (png_uint_16)0xff;
00122a  9816              LDR      r0,[sp,#0x58]
00122c  f8b002d4          LDRH     r0,[r0,#0x2d4]
001230  ebc02000          RSB      r0,r0,r0,LSL #8
001234  b281              UXTH     r1,r0
001236  9816              LDR      r0,[sp,#0x58]
001238  f8a012d4          STRH     r1,[r0,#0x2d4]
;;;765                     png_ptr->trans_values.red = png_ptr->trans_values.green
00123c  9816              LDR      r0,[sp,#0x58]
00123e  f8b012d4          LDRH     r1,[r0,#0x2d4]
001242  f8a012d2          STRH     r1,[r0,#0x2d2]
001246  9816              LDR      r0,[sp,#0x58]
001248  f8a012d0          STRH     r1,[r0,#0x2d0]
00124c  9816              LDR      r0,[sp,#0x58]
00124e  f8a012ce          STRH     r1,[r0,#0x2ce]
                  |L1.4690|
;;;766                       = png_ptr->trans_values.blue = png_ptr->trans_values.gray;
;;;767                   }
;;;768                   break;
001252  e073              B        |L1.4924|
                  |L1.4692|
;;;769                case 2:
;;;770                   png_ptr->background.gray *= (png_uint_16)0x55;
001254  9816              LDR      r0,[sp,#0x58]
001256  f8b00280          LDRH     r0,[r0,#0x280]
00125a  eb001000          ADD      r0,r0,r0,LSL #4
00125e  eb000080          ADD      r0,r0,r0,LSL #2
001262  b281              UXTH     r1,r0
001264  9816              LDR      r0,[sp,#0x58]
001266  f8a01280          STRH     r1,[r0,#0x280]
;;;771                   png_ptr->background.red = png_ptr->background.green
00126a  9816              LDR      r0,[sp,#0x58]
00126c  f8b01280          LDRH     r1,[r0,#0x280]
001270  f8a0127e          STRH     r1,[r0,#0x27e]
001274  9816              LDR      r0,[sp,#0x58]
001276  f8a0127c          STRH     r1,[r0,#0x27c]
00127a  9816              LDR      r0,[sp,#0x58]
00127c  f8a0127a          STRH     r1,[r0,#0x27a]
;;;772                     = png_ptr->background.blue = png_ptr->background.gray;
;;;773                   if (!(png_ptr->transformations & PNG_EXPAND_tRNS))
001280  9816              LDR      r0,[sp,#0x58]
001282  f8d001b0          LDR      r0,[r0,#0x1b0]
001286  f0007000          AND      r0,r0,#0x2000000
00128a  b9b8              CBNZ     r0,|L1.4796|
;;;774                   {
;;;775                     png_ptr->trans_values.gray *= (png_uint_16)0x55;
00128c  9816              LDR      r0,[sp,#0x58]
00128e  f8b002d4          LDRH     r0,[r0,#0x2d4]
001292  eb001000          ADD      r0,r0,r0,LSL #4
001296  e000              B        |L1.4762|
                  |L1.4760|
001298  e09e              B        |L1.5080|
                  |L1.4762|
00129a  eb000080          ADD      r0,r0,r0,LSL #2
00129e  b281              UXTH     r1,r0
0012a0  9816              LDR      r0,[sp,#0x58]
0012a2  f8a012d4          STRH     r1,[r0,#0x2d4]
;;;776                     png_ptr->trans_values.red = png_ptr->trans_values.green
0012a6  9816              LDR      r0,[sp,#0x58]
0012a8  f8b012d4          LDRH     r1,[r0,#0x2d4]
0012ac  f8a012d2          STRH     r1,[r0,#0x2d2]
0012b0  9816              LDR      r0,[sp,#0x58]
0012b2  f8a012d0          STRH     r1,[r0,#0x2d0]
0012b6  9816              LDR      r0,[sp,#0x58]
0012b8  f8a012ce          STRH     r1,[r0,#0x2ce]
                  |L1.4796|
;;;777                       = png_ptr->trans_values.blue = png_ptr->trans_values.gray;
;;;778                   }
;;;779                   break;
0012bc  e03e              B        |L1.4924|
                  |L1.4798|
0012be  e03e              B        |L1.4926|
0012c0  e000              B        |L1.4804|
                  |L1.4802|
0012c2  e02e              B        |L1.4898|
                  |L1.4804|
;;;780                case 4:
;;;781                   png_ptr->background.gray *= (png_uint_16)0x11;
0012c4  9816              LDR      r0,[sp,#0x58]
0012c6  f8b00280          LDRH     r0,[r0,#0x280]
0012ca  eb001000          ADD      r0,r0,r0,LSL #4
0012ce  b281              UXTH     r1,r0
0012d0  9816              LDR      r0,[sp,#0x58]
0012d2  f8a01280          STRH     r1,[r0,#0x280]
;;;782                   png_ptr->background.red = png_ptr->background.green
0012d6  9816              LDR      r0,[sp,#0x58]
0012d8  f8b01280          LDRH     r1,[r0,#0x280]
0012dc  f8a0127e          STRH     r1,[r0,#0x27e]
0012e0  9816              LDR      r0,[sp,#0x58]
0012e2  f8a0127c          STRH     r1,[r0,#0x27c]
0012e6  9816              LDR      r0,[sp,#0x58]
0012e8  f8a0127a          STRH     r1,[r0,#0x27a]
;;;783                     = png_ptr->background.blue = png_ptr->background.gray;
;;;784                   if (!(png_ptr->transformations & PNG_EXPAND_tRNS))
0012ec  9816              LDR      r0,[sp,#0x58]
0012ee  f8d001b0          LDR      r0,[r0,#0x1b0]
0012f2  f0007000          AND      r0,r0,#0x2000000
0012f6  b998              CBNZ     r0,|L1.4896|
;;;785                   {
;;;786                     png_ptr->trans_values.gray *= (png_uint_16)0x11;
0012f8  9816              LDR      r0,[sp,#0x58]
0012fa  f8b002d4          LDRH     r0,[r0,#0x2d4]
0012fe  eb001000          ADD      r0,r0,r0,LSL #4
001302  b281              UXTH     r1,r0
001304  9816              LDR      r0,[sp,#0x58]
001306  f8a012d4          STRH     r1,[r0,#0x2d4]
;;;787                     png_ptr->trans_values.red = png_ptr->trans_values.green
00130a  9816              LDR      r0,[sp,#0x58]
00130c  f8b012d4          LDRH     r1,[r0,#0x2d4]
001310  f8a012d2          STRH     r1,[r0,#0x2d2]
001314  9816              LDR      r0,[sp,#0x58]
001316  f8a012d0          STRH     r1,[r0,#0x2d0]
00131a  9816              LDR      r0,[sp,#0x58]
00131c  f8a012ce          STRH     r1,[r0,#0x2ce]
                  |L1.4896|
;;;788                       = png_ptr->trans_values.blue = png_ptr->trans_values.gray;
;;;789                   }
;;;790                   break;
001320  e00c              B        |L1.4924|
                  |L1.4898|
;;;791                case 8:
;;;792                case 16:
001322  bf00              NOP      
                  |L1.4900|
;;;793                   png_ptr->background.red = png_ptr->background.green
001324  9816              LDR      r0,[sp,#0x58]
001326  f8b01280          LDRH     r1,[r0,#0x280]
00132a  f8a0127e          STRH     r1,[r0,#0x27e]
00132e  9816              LDR      r0,[sp,#0x58]
001330  f8a0127c          STRH     r1,[r0,#0x27c]
001334  9816              LDR      r0,[sp,#0x58]
001336  f8a0127a          STRH     r1,[r0,#0x27a]
;;;794                     = png_ptr->background.blue = png_ptr->background.gray;
;;;795                   break;
00133a  bf00              NOP      
                  |L1.4924|
00133c  e04c              B        |L1.5080|
                  |L1.4926|
;;;796             }
;;;797          }
;;;798          else if (color_type == PNG_COLOR_TYPE_PALETTE)
00133e  9815              LDR      r0,[sp,#0x54]
001340  2803              CMP      r0,#3
001342  d149              BNE      |L1.5080|
;;;799          {
;;;800             png_ptr->background.red   =
001344  9816              LDR      r0,[sp,#0x58]
001346  f8d01254          LDR      r1,[r0,#0x254]
00134a  f8900278          LDRB     r0,[r0,#0x278]
00134e  eb000040          ADD      r0,r0,r0,LSL #1
001352  5c09              LDRB     r1,[r1,r0]
001354  9816              LDR      r0,[sp,#0x58]
001356  f8a0127a          STRH     r1,[r0,#0x27a]
;;;801                png_ptr->palette[png_ptr->background.index].red;
;;;802             png_ptr->background.green =
00135a  9816              LDR      r0,[sp,#0x58]
00135c  f8d01254          LDR      r1,[r0,#0x254]
001360  f8900278          LDRB     r0,[r0,#0x278]
001364  eb000040          ADD      r0,r0,r0,LSL #1
001368  4408              ADD      r0,r0,r1
00136a  7841              LDRB     r1,[r0,#1]
00136c  9816              LDR      r0,[sp,#0x58]
00136e  f8a0127c          STRH     r1,[r0,#0x27c]
;;;803                png_ptr->palette[png_ptr->background.index].green;
;;;804             png_ptr->background.blue  =
001372  9816              LDR      r0,[sp,#0x58]
001374  f8d01254          LDR      r1,[r0,#0x254]
001378  f8900278          LDRB     r0,[r0,#0x278]
00137c  eb000040          ADD      r0,r0,r0,LSL #1
001380  4408              ADD      r0,r0,r1
001382  7881              LDRB     r1,[r0,#2]
001384  9816              LDR      r0,[sp,#0x58]
001386  f8a0127e          STRH     r1,[r0,#0x27e]
;;;805                png_ptr->palette[png_ptr->background.index].blue;
;;;806    
;;;807    #if defined(PNG_READ_INVERT_ALPHA_SUPPORTED)
;;;808            if (png_ptr->transformations & PNG_INVERT_ALPHA)
00138a  9816              LDR      r0,[sp,#0x58]
00138c  f8d001b0          LDR      r0,[r0,#0x1b0]
001390  f4002000          AND      r0,r0,#0x80000
001394  b300              CBZ      r0,|L1.5080|
;;;809            {
;;;810    #if defined(PNG_READ_EXPAND_SUPPORTED)
;;;811               if (!(png_ptr->transformations & PNG_EXPAND_tRNS))
001396  9816              LDR      r0,[sp,#0x58]
001398  f8d001b0          LDR      r0,[r0,#0x1b0]
00139c  f0007000          AND      r0,r0,#0x2000000
0013a0  b9d0              CBNZ     r0,|L1.5080|
;;;812    #endif
;;;813               {
;;;814               /* invert the alpha channel (in tRNS) unless the pixels are
;;;815                  going to be expanded, in which case leave it for later */
;;;816                  int i,istop;
;;;817                  istop=(int)png_ptr->num_trans;
0013a2  9816              LDR      r0,[sp,#0x58]
0013a4  f8b0025a          LDRH     r0,[r0,#0x25a]
0013a8  9013              STR      r0,[sp,#0x4c]
;;;818                  for (i=0; i<istop; i++)
0013aa  2000              MOVS     r0,#0
0013ac  9014              STR      r0,[sp,#0x50]
0013ae  e00e              B        |L1.5070|
                  |L1.5040|
;;;819                     png_ptr->trans[i] = (png_byte)(255 - png_ptr->trans[i]);
0013b0  9816              LDR      r0,[sp,#0x58]
0013b2  f8d012c8          LDR      r1,[r0,#0x2c8]
0013b6  9814              LDR      r0,[sp,#0x50]
0013b8  5c08              LDRB     r0,[r1,r0]
0013ba  f1c001ff          RSB      r1,r0,#0xff
0013be  9816              LDR      r0,[sp,#0x58]
0013c0  f8d022c8          LDR      r2,[r0,#0x2c8]
0013c4  9814              LDR      r0,[sp,#0x50]
0013c6  5411              STRB     r1,[r2,r0]
0013c8  9814              LDR      r0,[sp,#0x50]         ;818
0013ca  1c40              ADDS     r0,r0,#1              ;818
0013cc  9014              STR      r0,[sp,#0x50]         ;818
                  |L1.5070|
0013ce  e9dd1013          LDRD     r1,r0,[sp,#0x4c]      ;818
0013d2  4288              CMP      r0,r1                 ;818
0013d4  dbec              BLT      |L1.5040|
;;;820               }
0013d6  bf00              NOP      
                  |L1.5080|
;;;821            }
;;;822    #endif
;;;823    
;;;824          }
;;;825       }
;;;826    #endif
;;;827    
;;;828    #if defined(PNG_READ_BACKGROUND_SUPPORTED) && defined(PNG_READ_GAMMA_SUPPORTED)
;;;829       png_ptr->background_1 = png_ptr->background;
0013d8  9816              LDR      r0,[sp,#0x58]
0013da  f5007120          ADD      r1,r0,#0x280
0013de  f5007000          ADD      r0,r0,#0x200
0013e2  6f82              LDR      r2,[r0,#0x78]
0013e4  f8412f02          STR      r2,[r1,#2]!
0013e8  6fc2              LDR      r2,[r0,#0x7c]
0013ea  604a              STR      r2,[r1,#4]
0013ec  f8b00080          LDRH     r0,[r0,#0x80]
0013f0  8108              STRH     r0,[r1,#8]
;;;830    #endif
;;;831    #if defined(PNG_READ_GAMMA_SUPPORTED) && defined(PNG_FLOATING_POINT_SUPPORTED)
;;;832    
;;;833       if ((color_type == PNG_COLOR_TYPE_PALETTE && png_ptr->num_trans != 0)
0013f2  9815              LDR      r0,[sp,#0x54]
0013f4  2803              CMP      r0,#3
0013f6  d149              BNE      |L1.5260|
0013f8  9816              LDR      r0,[sp,#0x58]
0013fa  f8b0025a          LDRH     r0,[r0,#0x25a]
0013fe  b3e0              CBZ      r0,|L1.5242|
;;;834           && (fabs(png_ptr->screen_gamma * png_ptr->gamma - 1.0)
001400  9816              LDR      r0,[sp,#0x58]
001402  f8d0029c          LDR      r0,[r0,#0x29c]
001406  900e              STR      r0,[sp,#0x38]
001408  9816              LDR      r0,[sp,#0x58]
00140a  f8d002a0          LDR      r0,[r0,#0x2a0]
00140e  900d              STR      r0,[sp,#0x34]
001410  990e              LDR      r1,[sp,#0x38]
001412  f7fffffe          BL       __aeabi_fmul
001416  900f              STR      r0,[sp,#0x3c]
001418  f7fffffe          BL       __aeabi_f2d
00141c  2200              MOVS     r2,#0
00141e  4bfe              LDR      r3,|L1.6168|
001420  e9cd0110          STRD     r0,r1,[sp,#0x40]
001424  f7fffffe          BL       __aeabi_dsub
001428  f0214100          BIC      r1,r1,#0x80000000
00142c  4afb              LDR      r2,|L1.6172|
00142e  4bfc              LDR      r3,|L1.6176|
001430  e9cd0112          STRD     r0,r1,[sp,#0x48]
001434  f7fffffe          BL       __aeabi_cdcmple
001438  d228              BCS      |L1.5260|
;;;835             < PNG_GAMMA_THRESHOLD))
;;;836       {
;;;837        int i,k;
;;;838        k=0;
00143a  2000              MOVS     r0,#0
00143c  9013              STR      r0,[sp,#0x4c]
;;;839        for (i=0; i<png_ptr->num_trans; i++)
00143e  9014              STR      r0,[sp,#0x50]
001440  e011              B        |L1.5222|
                  |L1.5186|
;;;840        {
;;;841          if (png_ptr->trans[i] != 0 && png_ptr->trans[i] != 0xff)
001442  9816              LDR      r0,[sp,#0x58]
001444  f8d012c8          LDR      r1,[r0,#0x2c8]
001448  9814              LDR      r0,[sp,#0x50]
00144a  5c08              LDRB     r0,[r1,r0]
00144c  b140              CBZ      r0,|L1.5216|
00144e  9816              LDR      r0,[sp,#0x58]
001450  f8d012c8          LDR      r1,[r0,#0x2c8]
001454  9814              LDR      r0,[sp,#0x50]
001456  5c08              LDRB     r0,[r1,r0]
001458  28ff              CMP      r0,#0xff
00145a  d001              BEQ      |L1.5216|
;;;842            k=1; /* partial transparency is present */
00145c  2001              MOVS     r0,#1
00145e  9013              STR      r0,[sp,#0x4c]
                  |L1.5216|
001460  9814              LDR      r0,[sp,#0x50]         ;839
001462  1c40              ADDS     r0,r0,#1              ;839
001464  9014              STR      r0,[sp,#0x50]         ;839
                  |L1.5222|
001466  9816              LDR      r0,[sp,#0x58]         ;839
001468  f8b0125a          LDRH     r1,[r0,#0x25a]        ;839
00146c  9814              LDR      r0,[sp,#0x50]         ;839
00146e  4281              CMP      r1,r0                 ;839
001470  dce7              BGT      |L1.5186|
;;;843        }
;;;844        if (k == 0)
001472  9813              LDR      r0,[sp,#0x4c]
001474  b948              CBNZ     r0,|L1.5258|
;;;845          png_ptr->transformations &= (~PNG_GAMMA);
001476  9816              LDR      r0,[sp,#0x58]
001478  e000              B        |L1.5244|
                  |L1.5242|
00147a  e007              B        |L1.5260|
                  |L1.5244|
00147c  f8d001b0          LDR      r0,[r0,#0x1b0]
001480  f4205100          BIC      r1,r0,#0x2000
001484  9816              LDR      r0,[sp,#0x58]
001486  f8c011b0          STR      r1,[r0,#0x1b0]
                  |L1.5258|
;;;846       }
00148a  bf00              NOP      
                  |L1.5260|
;;;847    
;;;848       if ((png_ptr->transformations & (PNG_GAMMA | PNG_RGB_TO_GRAY)) &&
00148c  9816              LDR      r0,[sp,#0x58]
00148e  f8d001b0          LDR      r0,[r0,#0x1b0]
001492  49e4              LDR      r1,|L1.6180|
001494  4008              ANDS     r0,r0,r1
001496  2800              CMP      r0,#0
                  |L1.5272|
001498  d07d              BEQ      |L1.5526|
;;;849            png_ptr->gamma != 0.0)
00149a  9816              LDR      r0,[sp,#0x58]
00149c  f8d0029c          LDR      r0,[r0,#0x29c]
0014a0  9011              STR      r0,[sp,#0x44]
0014a2  f7fffffe          BL       __aeabi_f2d
0014a6  2200              MOVS     r2,#0
0014a8  4613              MOV      r3,r2
0014aa  e9cd0112          STRD     r0,r1,[sp,#0x48]
0014ae  f7fffffe          BL       __aeabi_cdcmpeq
0014b2  d0f1              BEQ      |L1.5272|
;;;850       {
;;;851          png_build_gamma_table(png_ptr);
0014b4  9816              LDR      r0,[sp,#0x58]
0014b6  f7fffffe          BL       png_build_gamma_table
;;;852    #if defined(PNG_READ_BACKGROUND_SUPPORTED)
;;;853          if (png_ptr->transformations & PNG_BACKGROUND)
0014ba  9816              LDR      r0,[sp,#0x58]
0014bc  f89001b0          LDRB     r0,[r0,#0x1b0]
0014c0  f0000080          AND      r0,r0,#0x80
0014c4  2800              CMP      r0,#0
0014c6  d067              BEQ      |L1.5528|
;;;854          {
;;;855             if (color_type == PNG_COLOR_TYPE_PALETTE)
0014c8  9815              LDR      r0,[sp,#0x54]
0014ca  2803              CMP      r0,#3
0014cc  d165              BNE      |L1.5530|
;;;856             {
;;;857               /* could skip if no transparency and
;;;858               */
;;;859                png_color back, back_1;
;;;860                png_colorp palette = png_ptr->palette;
0014ce  9816              LDR      r0,[sp,#0x58]
0014d0  f8d00254          LDR      r0,[r0,#0x254]
0014d4  9012              STR      r0,[sp,#0x48]
;;;861                int num_palette = png_ptr->num_palette;
0014d6  9816              LDR      r0,[sp,#0x58]
0014d8  f8b00258          LDRH     r0,[r0,#0x258]
0014dc  9011              STR      r0,[sp,#0x44]
;;;862                int i;
;;;863                if (png_ptr->background_gamma_type == PNG_BACKGROUND_GAMMA_FILE)
0014de  9816              LDR      r0,[sp,#0x58]
0014e0  f8900270          LDRB     r0,[r0,#0x270]
0014e4  2802              CMP      r0,#2
0014e6  d130              BNE      |L1.5450|
;;;864                {
;;;865                   back.red = png_ptr->gamma_table[png_ptr->background.red];
0014e8  9816              LDR      r0,[sp,#0x58]
0014ea  f8d012a4          LDR      r1,[r0,#0x2a4]
0014ee  f8b0027a          LDRH     r0,[r0,#0x27a]
0014f2  5c08              LDRB     r0,[r1,r0]
0014f4  f88d0050          STRB     r0,[sp,#0x50]
;;;866                   back.green = png_ptr->gamma_table[png_ptr->background.green];
0014f8  9816              LDR      r0,[sp,#0x58]
0014fa  f8d012a4          LDR      r1,[r0,#0x2a4]
0014fe  f8b0027c          LDRH     r0,[r0,#0x27c]
001502  5c08              LDRB     r0,[r1,r0]
001504  f88d0051          STRB     r0,[sp,#0x51]
;;;867                   back.blue = png_ptr->gamma_table[png_ptr->background.blue];
001508  9816              LDR      r0,[sp,#0x58]
00150a  f8d012a4          LDR      r1,[r0,#0x2a4]
00150e  f8b0027e          LDRH     r0,[r0,#0x27e]
001512  5c08              LDRB     r0,[r1,r0]
001514  f88d0052          STRB     r0,[sp,#0x52]
;;;868    
;;;869                   back_1.red = png_ptr->gamma_to_1[png_ptr->background.red];
001518  9816              LDR      r0,[sp,#0x58]
00151a  f8d012ac          LDR      r1,[r0,#0x2ac]
00151e  f8b0027a          LDRH     r0,[r0,#0x27a]
001522  5c08              LDRB     r0,[r1,r0]
001524  f88d004c          STRB     r0,[sp,#0x4c]
;;;870                   back_1.green = png_ptr->gamma_to_1[png_ptr->background.green];
001528  9816              LDR      r0,[sp,#0x58]
00152a  f8d012ac          LDR      r1,[r0,#0x2ac]
00152e  f8b0027c          LDRH     r0,[r0,#0x27c]
001532  5c08              LDRB     r0,[r1,r0]
001534  f88d004d          STRB     r0,[sp,#0x4d]
;;;871                   back_1.blue = png_ptr->gamma_to_1[png_ptr->background.blue];
001538  9816              LDR      r0,[sp,#0x58]
00153a  f8d012ac          LDR      r1,[r0,#0x2ac]
00153e  f8b0027e          LDRH     r0,[r0,#0x27e]
001542  5c08              LDRB     r0,[r1,r0]
001544  f88d004e          STRB     r0,[sp,#0x4e]
001548  e182              B        |L1.6224|
                  |L1.5450|
;;;872                }
;;;873                else
;;;874                {
;;;875                   double g, gs;
;;;876    
;;;877                   switch (png_ptr->background_gamma_type)
00154a  9816              LDR      r0,[sp,#0x58]
00154c  f8900270          LDRB     r0,[r0,#0x270]
001550  2801              CMP      r0,#1
001552  d004              BEQ      |L1.5470|
001554  2802              CMP      r0,#2
001556  d00f              BEQ      |L1.5496|
001558  2803              CMP      r0,#3
00155a  d163              BNE      |L1.5668|
00155c  e039              B        |L1.5586|
                  |L1.5470|
;;;878                   {
;;;879                      case PNG_BACKGROUND_GAMMA_SCREEN:
;;;880                         g = (png_ptr->screen_gamma);
00155e  9816              LDR      r0,[sp,#0x58]
001560  f8d002a0          LDR      r0,[r0,#0x2a0]
001564  900b              STR      r0,[sp,#0x2c]
001566  f7fffffe          BL       __aeabi_f2d
00156a  e9cd010e          STRD     r0,r1,[sp,#0x38]
;;;881                         gs = 1.0;
00156e  2000              MOVS     r0,#0
001570  49a9              LDR      r1,|L1.6168|
001572  e9cd010c          STRD     r0,r1,[sp,#0x30]
;;;882                         break;
001576  e05e              B        |L1.5686|
                  |L1.5496|
;;;883                      case PNG_BACKGROUND_GAMMA_FILE:
;;;884                         g = 1.0 / (png_ptr->gamma);
001578  9816              LDR      r0,[sp,#0x58]
00157a  f8d0029c          LDR      r0,[r0,#0x29c]
00157e  9009              STR      r0,[sp,#0x24]
001580  f7fffffe          BL       __aeabi_f2d
001584  4602              MOV      r2,r0
001586  460b              MOV      r3,r1
001588  e9cd010a          STRD     r0,r1,[sp,#0x28]
00158c  2000              MOVS     r0,#0
00158e  49a2              LDR      r1,|L1.6168|
001590  f7fffffe          BL       __aeabi_ddiv
001594  e002              B        |L1.5532|
                  |L1.5526|
001596  e3fc              B        |L1.7570|
                  |L1.5528|
001598  e3fc              B        |L1.7572|
                  |L1.5530|
00159a  e246              B        |L1.6698|
                  |L1.5532|
00159c  e9cd010e          STRD     r0,r1,[sp,#0x38]
;;;885                         gs = 1.0 / (png_ptr->gamma * png_ptr->screen_gamma);
0015a0  9816              LDR      r0,[sp,#0x58]
0015a2  f8d002a0          LDR      r0,[r0,#0x2a0]
0015a6  9008              STR      r0,[sp,#0x20]
0015a8  9816              LDR      r0,[sp,#0x58]
0015aa  f8d0029c          LDR      r0,[r0,#0x29c]
0015ae  9007              STR      r0,[sp,#0x1c]
0015b0  9908              LDR      r1,[sp,#0x20]
0015b2  f7fffffe          BL       __aeabi_fmul
0015b6  9009              STR      r0,[sp,#0x24]
0015b8  f7fffffe          BL       __aeabi_f2d
0015bc  4602              MOV      r2,r0
0015be  460b              MOV      r3,r1
0015c0  e9cd010a          STRD     r0,r1,[sp,#0x28]
0015c4  2000              MOVS     r0,#0
0015c6  4994              LDR      r1,|L1.6168|
0015c8  f7fffffe          BL       __aeabi_ddiv
0015cc  e9cd010c          STRD     r0,r1,[sp,#0x30]
;;;886                         break;
0015d0  e031              B        |L1.5686|
                  |L1.5586|
;;;887                      case PNG_BACKGROUND_GAMMA_UNIQUE:
;;;888                         g = 1.0 / (png_ptr->background_gamma);
0015d2  9816              LDR      r0,[sp,#0x58]
0015d4  f8d00274          LDR      r0,[r0,#0x274]
0015d8  9009              STR      r0,[sp,#0x24]
0015da  f7fffffe          BL       __aeabi_f2d
0015de  4602              MOV      r2,r0
0015e0  460b              MOV      r3,r1
0015e2  e9cd010a          STRD     r0,r1,[sp,#0x28]
0015e6  2000              MOVS     r0,#0
0015e8  498b              LDR      r1,|L1.6168|
0015ea  f7fffffe          BL       __aeabi_ddiv
0015ee  e9cd010e          STRD     r0,r1,[sp,#0x38]
;;;889                         gs = 1.0 / (png_ptr->background_gamma *
0015f2  9816              LDR      r0,[sp,#0x58]
0015f4  f8d002a0          LDR      r0,[r0,#0x2a0]
0015f8  9008              STR      r0,[sp,#0x20]
0015fa  9816              LDR      r0,[sp,#0x58]
0015fc  f8d00274          LDR      r0,[r0,#0x274]
001600  9007              STR      r0,[sp,#0x1c]
001602  9908              LDR      r1,[sp,#0x20]
001604  f7fffffe          BL       __aeabi_fmul
001608  9009              STR      r0,[sp,#0x24]
00160a  f7fffffe          BL       __aeabi_f2d
00160e  4602              MOV      r2,r0
001610  460b              MOV      r3,r1
001612  e9cd010a          STRD     r0,r1,[sp,#0x28]
001616  2000              MOVS     r0,#0
001618  497f              LDR      r1,|L1.6168|
00161a  f7fffffe          BL       __aeabi_ddiv
00161e  e9cd010c          STRD     r0,r1,[sp,#0x30]
;;;890                                     png_ptr->screen_gamma);
;;;891                         break;
001622  e008              B        |L1.5686|
                  |L1.5668|
;;;892                      default:
;;;893                         g = 1.0;    /* back_1 */
001624  2100              MOVS     r1,#0
001626  487c              LDR      r0,|L1.6168|
001628  e9cd100e          STRD     r1,r0,[sp,#0x38]
;;;894                         gs = 1.0;   /* back */
00162c  2000              MOVS     r0,#0
00162e  497a              LDR      r1,|L1.6168|
001630  e9cd010c          STRD     r0,r1,[sp,#0x30]
001634  bf00              NOP                            ;877
                  |L1.5686|
001636  bf00              NOP                            ;882
;;;895                   }
;;;896    
;;;897                   if ( fabs(gs - 1.0) < PNG_GAMMA_THRESHOLD)
001638  2200              MOVS     r2,#0
00163a  4b77              LDR      r3,|L1.6168|
00163c  e9dd010c          LDRD     r0,r1,[sp,#0x30]
001640  f7fffffe          BL       __aeabi_dsub
001644  f0214100          BIC      r1,r1,#0x80000000
001648  4a74              LDR      r2,|L1.6172|
00164a  4b75              LDR      r3,|L1.6176|
00164c  e9cd010a          STRD     r0,r1,[sp,#0x28]
001650  f7fffffe          BL       __aeabi_cdcmple
001654  d20f              BCS      |L1.5750|
;;;898                   {
;;;899                      back.red   = (png_byte)png_ptr->background.red;
001656  9816              LDR      r0,[sp,#0x58]
001658  f890027a          LDRB     r0,[r0,#0x27a]
00165c  f88d0050          STRB     r0,[sp,#0x50]
;;;900                      back.green = (png_byte)png_ptr->background.green;
001660  9816              LDR      r0,[sp,#0x58]
001662  f890027c          LDRB     r0,[r0,#0x27c]
001666  f88d0051          STRB     r0,[sp,#0x51]
;;;901                      back.blue  = (png_byte)png_ptr->background.blue;
00166a  9816              LDR      r0,[sp,#0x58]
00166c  f890027e          LDRB     r0,[r0,#0x27e]
001670  f88d0052          STRB     r0,[sp,#0x52]
001674  e06e              B        |L1.5972|
                  |L1.5750|
;;;902                   }
;;;903                   else
;;;904                   {
;;;905                      back.red = (png_byte)(pow(
001676  9816              LDR      r0,[sp,#0x58]
001678  f8b0027a          LDRH     r0,[r0,#0x27a]
00167c  9001              STR      r0,[sp,#4]
00167e  f7fffffe          BL       __aeabi_ui2d
001682  2200              MOVS     r2,#0
001684  4b68              LDR      r3,|L1.6184|
001686  e9cd0102          STRD     r0,r1,[sp,#8]
00168a  f7fffffe          BL       __aeabi_ddiv
00168e  e9cd0104          STRD     r0,r1,[sp,#0x10]
001692  e9dd230c          LDRD     r2,r3,[sp,#0x30]
001696  f7fffffe          BL       pow
00169a  2200              MOVS     r2,#0
00169c  4b62              LDR      r3,|L1.6184|
00169e  e9cd0106          STRD     r0,r1,[sp,#0x18]
0016a2  f7fffffe          BL       __aeabi_dmul
0016a6  2200              MOVS     r2,#0
0016a8  4b60              LDR      r3,|L1.6188|
0016aa  e9cd0108          STRD     r0,r1,[sp,#0x20]
0016ae  f7fffffe          BL       __aeabi_dadd
0016b2  e9cd010a          STRD     r0,r1,[sp,#0x28]
0016b6  f7fffffe          BL       __aeabi_d2uiz
0016ba  b2c0              UXTB     r0,r0
0016bc  f88d0050          STRB     r0,[sp,#0x50]
;;;906                         (double)png_ptr->background.red/255, gs) * 255.0 + .5);
;;;907                      back.green = (png_byte)(pow(
0016c0  9816              LDR      r0,[sp,#0x58]
0016c2  f8b0027c          LDRH     r0,[r0,#0x27c]
0016c6  9001              STR      r0,[sp,#4]
0016c8  f7fffffe          BL       __aeabi_ui2d
0016cc  2200              MOVS     r2,#0
0016ce  4b56              LDR      r3,|L1.6184|
0016d0  e9cd0102          STRD     r0,r1,[sp,#8]
0016d4  f7fffffe          BL       __aeabi_ddiv
0016d8  e9cd0104          STRD     r0,r1,[sp,#0x10]
0016dc  e9dd230c          LDRD     r2,r3,[sp,#0x30]
0016e0  f7fffffe          BL       pow
0016e4  2200              MOVS     r2,#0
0016e6  4b50              LDR      r3,|L1.6184|
0016e8  e9cd0106          STRD     r0,r1,[sp,#0x18]
0016ec  f7fffffe          BL       __aeabi_dmul
0016f0  2200              MOVS     r2,#0
0016f2  4b4e              LDR      r3,|L1.6188|
0016f4  e9cd0108          STRD     r0,r1,[sp,#0x20]
0016f8  f7fffffe          BL       __aeabi_dadd
0016fc  e9cd010a          STRD     r0,r1,[sp,#0x28]
001700  f7fffffe          BL       __aeabi_d2uiz
001704  b2c0              UXTB     r0,r0
001706  f88d0051          STRB     r0,[sp,#0x51]
;;;908                         (double)png_ptr->background.green/255, gs) * 255.0 + .5);
;;;909                      back.blue = (png_byte)(pow(
00170a  9816              LDR      r0,[sp,#0x58]
00170c  f8b0027e          LDRH     r0,[r0,#0x27e]
001710  9001              STR      r0,[sp,#4]
001712  f7fffffe          BL       __aeabi_ui2d
001716  2200              MOVS     r2,#0
001718  4b43              LDR      r3,|L1.6184|
00171a  e9cd0102          STRD     r0,r1,[sp,#8]
00171e  f7fffffe          BL       __aeabi_ddiv
001722  e9cd0104          STRD     r0,r1,[sp,#0x10]
001726  e9dd230c          LDRD     r2,r3,[sp,#0x30]
00172a  f7fffffe          BL       pow
00172e  2200              MOVS     r2,#0
001730  4b3d              LDR      r3,|L1.6184|
001732  e9cd0106          STRD     r0,r1,[sp,#0x18]
001736  f7fffffe          BL       __aeabi_dmul
00173a  2200              MOVS     r2,#0
00173c  4b3b              LDR      r3,|L1.6188|
00173e  e9cd0108          STRD     r0,r1,[sp,#0x20]
001742  f7fffffe          BL       __aeabi_dadd
001746  e9cd010a          STRD     r0,r1,[sp,#0x28]
00174a  f7fffffe          BL       __aeabi_d2uiz
00174e  b2c0              UXTB     r0,r0
001750  f88d0052          STRB     r0,[sp,#0x52]
                  |L1.5972|
;;;910                         (double)png_ptr->background.blue/255, gs) * 255.0 + .5);
;;;911                   }
;;;912    
;;;913                   back_1.red = (png_byte)(pow(
001754  9816              LDR      r0,[sp,#0x58]
001756  f8b0027a          LDRH     r0,[r0,#0x27a]
00175a  9001              STR      r0,[sp,#4]
00175c  f7fffffe          BL       __aeabi_ui2d
001760  2200              MOVS     r2,#0
001762  4b31              LDR      r3,|L1.6184|
001764  e9cd0102          STRD     r0,r1,[sp,#8]
001768  f7fffffe          BL       __aeabi_ddiv
00176c  e9cd0104          STRD     r0,r1,[sp,#0x10]
001770  e9dd230e          LDRD     r2,r3,[sp,#0x38]
001774  f7fffffe          BL       pow
001778  2200              MOVS     r2,#0
00177a  4b2b              LDR      r3,|L1.6184|
00177c  e9cd0106          STRD     r0,r1,[sp,#0x18]
001780  f7fffffe          BL       __aeabi_dmul
001784  2200              MOVS     r2,#0
001786  4b29              LDR      r3,|L1.6188|
001788  e9cd0108          STRD     r0,r1,[sp,#0x20]
00178c  f7fffffe          BL       __aeabi_dadd
001790  e9cd010a          STRD     r0,r1,[sp,#0x28]
001794  f7fffffe          BL       __aeabi_d2uiz
001798  b2c0              UXTB     r0,r0
00179a  f88d004c          STRB     r0,[sp,#0x4c]
;;;914                      (double)png_ptr->background.red/255, g) * 255.0 + .5);
;;;915                   back_1.green = (png_byte)(pow(
00179e  9816              LDR      r0,[sp,#0x58]
0017a0  f8b0027c          LDRH     r0,[r0,#0x27c]
0017a4  9001              STR      r0,[sp,#4]
0017a6  f7fffffe          BL       __aeabi_ui2d
0017aa  2200              MOVS     r2,#0
0017ac  4b1e              LDR      r3,|L1.6184|
0017ae  e9cd0102          STRD     r0,r1,[sp,#8]
0017b2  f7fffffe          BL       __aeabi_ddiv
0017b6  e9cd0104          STRD     r0,r1,[sp,#0x10]
0017ba  e9dd230e          LDRD     r2,r3,[sp,#0x38]
0017be  f7fffffe          BL       pow
0017c2  2200              MOVS     r2,#0
0017c4  4b18              LDR      r3,|L1.6184|
0017c6  e9cd0106          STRD     r0,r1,[sp,#0x18]
0017ca  f7fffffe          BL       __aeabi_dmul
0017ce  2200              MOVS     r2,#0
0017d0  4b16              LDR      r3,|L1.6188|
0017d2  e9cd0108          STRD     r0,r1,[sp,#0x20]
0017d6  f7fffffe          BL       __aeabi_dadd
0017da  e9cd010a          STRD     r0,r1,[sp,#0x28]
0017de  f7fffffe          BL       __aeabi_d2uiz
0017e2  b2c0              UXTB     r0,r0
0017e4  f88d004d          STRB     r0,[sp,#0x4d]
;;;916                      (double)png_ptr->background.green/255, g) * 255.0 + .5);
;;;917                   back_1.blue = (png_byte)(pow(
0017e8  9816              LDR      r0,[sp,#0x58]
0017ea  f8b0027e          LDRH     r0,[r0,#0x27e]
0017ee  9001              STR      r0,[sp,#4]
0017f0  f7fffffe          BL       __aeabi_ui2d
0017f4  2200              MOVS     r2,#0
0017f6  4b0c              LDR      r3,|L1.6184|
0017f8  e9cd0102          STRD     r0,r1,[sp,#8]
0017fc  f7fffffe          BL       __aeabi_ddiv
001800  e9cd0104          STRD     r0,r1,[sp,#0x10]
001804  e9dd230e          LDRD     r2,r3,[sp,#0x38]
001808  f7fffffe          BL       pow
00180c  2200              MOVS     r2,#0
00180e  4b06              LDR      r3,|L1.6184|
001810  e9cd0106          STRD     r0,r1,[sp,#0x18]
001814  e00c              B        |L1.6192|
001816  0000              DCW      0x0000
                  |L1.6168|
                          DCD      0x3ff00000
                  |L1.6172|
                          DCD      0x9999999a
                  |L1.6176|
                          DCD      0x3fa99999
                  |L1.6180|
                          DCD      0x00602000
                  |L1.6184|
                          DCD      0x406fe000
                  |L1.6188|
                          DCD      0x3fe00000
                  |L1.6192|
001830  f7fffffe          BL       __aeabi_dmul
001834  2200              MOVS     r2,#0
001836  4bfe              LDR      r3,|L1.7216|
001838  e9cd0108          STRD     r0,r1,[sp,#0x20]
00183c  f7fffffe          BL       __aeabi_dadd
001840  e9cd010a          STRD     r0,r1,[sp,#0x28]
001844  f7fffffe          BL       __aeabi_d2uiz
001848  b2c0              UXTB     r0,r0
00184a  f88d004e          STRB     r0,[sp,#0x4e]
;;;918                      (double)png_ptr->background.blue/255, g) * 255.0 + .5);
;;;919                }
00184e  bf00              NOP      
                  |L1.6224|
;;;920                for (i = 0; i < num_palette; i++)
001850  2000              MOVS     r0,#0
001852  9010              STR      r0,[sp,#0x40]
001854  e0e3              B        |L1.6686|
                  |L1.6230|
;;;921                {
;;;922                   if (i < (int)png_ptr->num_trans && png_ptr->trans[i] != 0xff)
001856  9816              LDR      r0,[sp,#0x58]
001858  f8b0125a          LDRH     r1,[r0,#0x25a]
00185c  9810              LDR      r0,[sp,#0x40]
00185e  4281              CMP      r1,r0
001860  dd7d              BLE      |L1.6494|
001862  9816              LDR      r0,[sp,#0x58]
001864  f8d012c8          LDR      r1,[r0,#0x2c8]
001868  9810              LDR      r0,[sp,#0x40]
00186a  5c08              LDRB     r0,[r1,r0]
00186c  28ff              CMP      r0,#0xff
00186e  d076              BEQ      |L1.6494|
;;;923                   {
;;;924                      if (png_ptr->trans[i] == 0)
001870  9816              LDR      r0,[sp,#0x58]
001872  f8d012c8          LDR      r1,[r0,#0x2c8]
001876  9810              LDR      r0,[sp,#0x40]
001878  5c08              LDRB     r0,[r1,r0]
00187a  b958              CBNZ     r0,|L1.6292|
;;;925                      {
;;;926                         palette[i] = back;
00187c  9810              LDR      r0,[sp,#0x40]
00187e  eb000140          ADD      r1,r0,r0,LSL #1
001882  9812              LDR      r0,[sp,#0x48]
001884  4408              ADD      r0,r0,r1
001886  f8bd1050          LDRH     r1,[sp,#0x50]
00188a  8001              STRH     r1,[r0,#0]
00188c  f89d1052          LDRB     r1,[sp,#0x52]
001890  7081              STRB     r1,[r0,#2]
001892  e0c1              B        |L1.6680|
                  |L1.6292|
;;;927                      }
;;;928                      else /* if (png_ptr->trans[i] != 0xff) */
;;;929                      {
;;;930                         png_byte v, w;
;;;931    
;;;932                         v = png_ptr->gamma_to_1[palette[i].red];
001894  9816              LDR      r0,[sp,#0x58]
001896  f8d012ac          LDR      r1,[r0,#0x2ac]
00189a  9810              LDR      r0,[sp,#0x40]
00189c  eb000240          ADD      r2,r0,r0,LSL #1
0018a0  9812              LDR      r0,[sp,#0x48]
0018a2  5c80              LDRB     r0,[r0,r2]
0018a4  5c08              LDRB     r0,[r1,r0]
0018a6  900f              STR      r0,[sp,#0x3c]
;;;933                         png_composite(w, v, png_ptr->trans[i], back_1.red);
0018a8  f89d004c          LDRB     r0,[sp,#0x4c]
0018ac  9916              LDR      r1,[sp,#0x58]
0018ae  f8d122c8          LDR      r2,[r1,#0x2c8]
0018b2  9910              LDR      r1,[sp,#0x40]
0018b4  5c51              LDRB     r1,[r2,r1]
0018b6  f1c101ff          RSB      r1,r1,#0xff
0018ba  4348              MULS     r0,r1,r0
0018bc  9916              LDR      r1,[sp,#0x58]
0018be  f8d122c8          LDR      r2,[r1,#0x2c8]
0018c2  9910              LDR      r1,[sp,#0x40]
0018c4  5c52              LDRB     r2,[r2,r1]
0018c6  990f              LDR      r1,[sp,#0x3c]
0018c8  fb010002          MLA      r0,r1,r2,r0
0018cc  3080              ADDS     r0,r0,#0x80
0018ce  b280              UXTH     r0,r0
0018d0  900d              STR      r0,[sp,#0x34]
0018d2  980d              LDR      r0,[sp,#0x34]
0018d4  eb002020          ADD      r0,r0,r0,ASR #8
0018d8  f3c02007          UBFX     r0,r0,#8,#8
0018dc  900e              STR      r0,[sp,#0x38]
;;;934                         palette[i].red = png_ptr->gamma_from_1[w];
0018de  9816              LDR      r0,[sp,#0x58]
0018e0  f8d012a8          LDR      r1,[r0,#0x2a8]
0018e4  980e              LDR      r0,[sp,#0x38]
0018e6  5c09              LDRB     r1,[r1,r0]
0018e8  9810              LDR      r0,[sp,#0x40]
0018ea  eb000240          ADD      r2,r0,r0,LSL #1
0018ee  9812              LDR      r0,[sp,#0x48]
0018f0  5481              STRB     r1,[r0,r2]
;;;935    
;;;936                         v = png_ptr->gamma_to_1[palette[i].green];
0018f2  9816              LDR      r0,[sp,#0x58]
0018f4  f8d012ac          LDR      r1,[r0,#0x2ac]
0018f8  9810              LDR      r0,[sp,#0x40]
0018fa  eb000240          ADD      r2,r0,r0,LSL #1
0018fe  9812              LDR      r0,[sp,#0x48]
001900  4410              ADD      r0,r0,r2
001902  7840              LDRB     r0,[r0,#1]
001904  5c08              LDRB     r0,[r1,r0]
001906  900f              STR      r0,[sp,#0x3c]
;;;937                         png_composite(w, v, png_ptr->trans[i], back_1.green);
001908  f89d004d          LDRB     r0,[sp,#0x4d]
00190c  9916              LDR      r1,[sp,#0x58]
00190e  f8d122c8          LDR      r2,[r1,#0x2c8]
001912  9910              LDR      r1,[sp,#0x40]
001914  5c51              LDRB     r1,[r2,r1]
001916  f1c101ff          RSB      r1,r1,#0xff
00191a  4348              MULS     r0,r1,r0
00191c  9916              LDR      r1,[sp,#0x58]
00191e  f8d122c8          LDR      r2,[r1,#0x2c8]
001922  9910              LDR      r1,[sp,#0x40]
001924  5c52              LDRB     r2,[r2,r1]
001926  990f              LDR      r1,[sp,#0x3c]
001928  fb010002          MLA      r0,r1,r2,r0
00192c  3080              ADDS     r0,r0,#0x80
00192e  b280              UXTH     r0,r0
001930  900d              STR      r0,[sp,#0x34]
001932  980d              LDR      r0,[sp,#0x34]
001934  eb002020          ADD      r0,r0,r0,ASR #8
001938  f3c02007          UBFX     r0,r0,#8,#8
00193c  900e              STR      r0,[sp,#0x38]
;;;938                         palette[i].green = png_ptr->gamma_from_1[w];
00193e  9816              LDR      r0,[sp,#0x58]
001940  f8d012a8          LDR      r1,[r0,#0x2a8]
001944  980e              LDR      r0,[sp,#0x38]
001946  5c09              LDRB     r1,[r1,r0]
001948  9810              LDR      r0,[sp,#0x40]
00194a  eb000240          ADD      r2,r0,r0,LSL #1
00194e  9812              LDR      r0,[sp,#0x48]
001950  4410              ADD      r0,r0,r2
001952  7041              STRB     r1,[r0,#1]
;;;939    
;;;940                         v = png_ptr->gamma_to_1[palette[i].blue];
001954  9816              LDR      r0,[sp,#0x58]
001956  f8d012ac          LDR      r1,[r0,#0x2ac]
00195a  9810              LDR      r0,[sp,#0x40]
00195c  e000              B        |L1.6496|
                  |L1.6494|
00195e  e02d              B        |L1.6588|
                  |L1.6496|
001960  eb000240          ADD      r2,r0,r0,LSL #1
001964  9812              LDR      r0,[sp,#0x48]
001966  4410              ADD      r0,r0,r2
001968  7880              LDRB     r0,[r0,#2]
00196a  5c08              LDRB     r0,[r1,r0]
00196c  900f              STR      r0,[sp,#0x3c]
;;;941                         png_composite(w, v, png_ptr->trans[i], back_1.blue);
00196e  f89d004e          LDRB     r0,[sp,#0x4e]
001972  9916              LDR      r1,[sp,#0x58]
001974  f8d122c8          LDR      r2,[r1,#0x2c8]
001978  9910              LDR      r1,[sp,#0x40]
00197a  5c51              LDRB     r1,[r2,r1]
00197c  f1c101ff          RSB      r1,r1,#0xff
001980  4348              MULS     r0,r1,r0
001982  9916              LDR      r1,[sp,#0x58]
001984  f8d122c8          LDR      r2,[r1,#0x2c8]
001988  9910              LDR      r1,[sp,#0x40]
00198a  5c52              LDRB     r2,[r2,r1]
00198c  990f              LDR      r1,[sp,#0x3c]
00198e  fb010002          MLA      r0,r1,r2,r0
001992  3080              ADDS     r0,r0,#0x80
001994  b280              UXTH     r0,r0
001996  900d              STR      r0,[sp,#0x34]
001998  980d              LDR      r0,[sp,#0x34]
00199a  eb002020          ADD      r0,r0,r0,ASR #8
00199e  f3c02007          UBFX     r0,r0,#8,#8
0019a2  900e              STR      r0,[sp,#0x38]
;;;942                         palette[i].blue = png_ptr->gamma_from_1[w];
0019a4  9816              LDR      r0,[sp,#0x58]
0019a6  f8d012a8          LDR      r1,[r0,#0x2a8]
0019aa  980e              LDR      r0,[sp,#0x38]
0019ac  5c09              LDRB     r1,[r1,r0]
0019ae  9810              LDR      r0,[sp,#0x40]
0019b0  eb000240          ADD      r2,r0,r0,LSL #1
0019b4  9812              LDR      r0,[sp,#0x48]
0019b6  4410              ADD      r0,r0,r2
0019b8  7081              STRB     r1,[r0,#2]
;;;943                      }
0019ba  e02d              B        |L1.6680|
                  |L1.6588|
;;;944                   }
;;;945                   else
;;;946                   {
;;;947                      palette[i].red = png_ptr->gamma_table[palette[i].red];
0019bc  9816              LDR      r0,[sp,#0x58]
0019be  f8d012a4          LDR      r1,[r0,#0x2a4]
0019c2  9810              LDR      r0,[sp,#0x40]
0019c4  eb000240          ADD      r2,r0,r0,LSL #1
0019c8  9812              LDR      r0,[sp,#0x48]
0019ca  5c80              LDRB     r0,[r0,r2]
0019cc  5c09              LDRB     r1,[r1,r0]
0019ce  9810              LDR      r0,[sp,#0x40]
0019d0  eb000240          ADD      r2,r0,r0,LSL #1
0019d4  9812              LDR      r0,[sp,#0x48]
0019d6  5481              STRB     r1,[r0,r2]
;;;948                      palette[i].green = png_ptr->gamma_table[palette[i].green];
0019d8  9816              LDR      r0,[sp,#0x58]
0019da  f8d012a4          LDR      r1,[r0,#0x2a4]
0019de  9810              LDR      r0,[sp,#0x40]
0019e0  eb000240          ADD      r2,r0,r0,LSL #1
0019e4  9812              LDR      r0,[sp,#0x48]
0019e6  4410              ADD      r0,r0,r2
0019e8  7840              LDRB     r0,[r0,#1]
0019ea  5c09              LDRB     r1,[r1,r0]
0019ec  9810              LDR      r0,[sp,#0x40]
0019ee  eb000240          ADD      r2,r0,r0,LSL #1
0019f2  9812              LDR      r0,[sp,#0x48]
0019f4  4410              ADD      r0,r0,r2
0019f6  7041              STRB     r1,[r0,#1]
;;;949                      palette[i].blue = png_ptr->gamma_table[palette[i].blue];
0019f8  9816              LDR      r0,[sp,#0x58]
0019fa  f8d012a4          LDR      r1,[r0,#0x2a4]
0019fe  9810              LDR      r0,[sp,#0x40]
001a00  eb000240          ADD      r2,r0,r0,LSL #1
001a04  9812              LDR      r0,[sp,#0x48]
001a06  4410              ADD      r0,r0,r2
001a08  7880              LDRB     r0,[r0,#2]
001a0a  5c09              LDRB     r1,[r1,r0]
001a0c  9810              LDR      r0,[sp,#0x40]
001a0e  eb000240          ADD      r2,r0,r0,LSL #1
001a12  9812              LDR      r0,[sp,#0x48]
001a14  4410              ADD      r0,r0,r2
001a16  7081              STRB     r1,[r0,#2]
                  |L1.6680|
001a18  9810              LDR      r0,[sp,#0x40]         ;920
001a1a  1c40              ADDS     r0,r0,#1              ;920
001a1c  9010              STR      r0,[sp,#0x40]         ;920
                  |L1.6686|
001a1e  e9dd0110          LDRD     r0,r1,[sp,#0x40]      ;920
001a22  4288              CMP      r0,r1                 ;920
001a24  f6ffaf17          BLT      |L1.6230|
;;;950                   }
;;;951                }
;;;952             }
001a28  e2d9              B        |L1.8158|
                  |L1.6698|
;;;953             /* if (png_ptr->background_gamma_type!=PNG_BACKGROUND_GAMMA_UNKNOWN) */
;;;954             else
;;;955             /* color_type != PNG_COLOR_TYPE_PALETTE */
;;;956             {
;;;957                double m = (double)(((png_uint_32)1 << png_ptr->bit_depth) - 1);
001a2a  9816              LDR      r0,[sp,#0x58]
001a2c  f8901267          LDRB     r1,[r0,#0x267]
001a30  2001              MOVS     r0,#1
001a32  4088              LSLS     r0,r0,r1
001a34  1e40              SUBS     r0,r0,#1
001a36  900d              STR      r0,[sp,#0x34]
001a38  f7fffffe          BL       __aeabi_ui2d
001a3c  e9cd0112          STRD     r0,r1,[sp,#0x48]
;;;958                double g = 1.0;
001a40  2000              MOVS     r0,#0
001a42  497c              LDR      r1,|L1.7220|
001a44  e9cd0110          STRD     r0,r1,[sp,#0x40]
;;;959                double gs = 1.0;
001a48  e9cd010e          STRD     r0,r1,[sp,#0x38]
;;;960    
;;;961                switch (png_ptr->background_gamma_type)
001a4c  9816              LDR      r0,[sp,#0x58]
001a4e  f8900270          LDRB     r0,[r0,#0x270]
001a52  2801              CMP      r0,#1
001a54  d004              BEQ      |L1.6752|
001a56  2802              CMP      r0,#2
001a58  d00f              BEQ      |L1.6778|
001a5a  2803              CMP      r0,#3
001a5c  d15f              BNE      |L1.6942|
001a5e  e035              B        |L1.6860|
                  |L1.6752|
;;;962                {
;;;963                   case PNG_BACKGROUND_GAMMA_SCREEN:
;;;964                      g = (png_ptr->screen_gamma);
001a60  9816              LDR      r0,[sp,#0x58]
001a62  f8d002a0          LDR      r0,[r0,#0x2a0]
001a66  900d              STR      r0,[sp,#0x34]
001a68  f7fffffe          BL       __aeabi_f2d
001a6c  e9cd0110          STRD     r0,r1,[sp,#0x40]
;;;965                      gs = 1.0;
001a70  2000              MOVS     r0,#0
001a72  4970              LDR      r1,|L1.7220|
001a74  e9cd010e          STRD     r0,r1,[sp,#0x38]
;;;966                      break;
001a78  e051              B        |L1.6942|
                  |L1.6778|
;;;967                   case PNG_BACKGROUND_GAMMA_FILE:
;;;968                      g = 1.0 / (png_ptr->gamma);
001a7a  9816              LDR      r0,[sp,#0x58]
001a7c  f8d0029c          LDR      r0,[r0,#0x29c]
001a80  900b              STR      r0,[sp,#0x2c]
001a82  f7fffffe          BL       __aeabi_f2d
001a86  4602              MOV      r2,r0
001a88  460b              MOV      r3,r1
001a8a  e9cd010c          STRD     r0,r1,[sp,#0x30]
001a8e  2000              MOVS     r0,#0
001a90  4968              LDR      r1,|L1.7220|
001a92  f7fffffe          BL       __aeabi_ddiv
001a96  e9cd0110          STRD     r0,r1,[sp,#0x40]
;;;969                      gs = 1.0 / (png_ptr->gamma * png_ptr->screen_gamma);
001a9a  9816              LDR      r0,[sp,#0x58]
001a9c  f8d002a0          LDR      r0,[r0,#0x2a0]
001aa0  900a              STR      r0,[sp,#0x28]
001aa2  9816              LDR      r0,[sp,#0x58]
001aa4  f8d0029c          LDR      r0,[r0,#0x29c]
001aa8  9009              STR      r0,[sp,#0x24]
001aaa  990a              LDR      r1,[sp,#0x28]
001aac  f7fffffe          BL       __aeabi_fmul
001ab0  900b              STR      r0,[sp,#0x2c]
001ab2  f7fffffe          BL       __aeabi_f2d
001ab6  4602              MOV      r2,r0
001ab8  460b              MOV      r3,r1
001aba  e9cd010c          STRD     r0,r1,[sp,#0x30]
001abe  2000              MOVS     r0,#0
001ac0  495c              LDR      r1,|L1.7220|
001ac2  f7fffffe          BL       __aeabi_ddiv
001ac6  e9cd010e          STRD     r0,r1,[sp,#0x38]
;;;970                      break;
001aca  e028              B        |L1.6942|
                  |L1.6860|
;;;971                   case PNG_BACKGROUND_GAMMA_UNIQUE:
;;;972                      g = 1.0 / (png_ptr->background_gamma);
001acc  9816              LDR      r0,[sp,#0x58]
001ace  f8d00274          LDR      r0,[r0,#0x274]
001ad2  900b              STR      r0,[sp,#0x2c]
001ad4  f7fffffe          BL       __aeabi_f2d
001ad8  4602              MOV      r2,r0
001ada  460b              MOV      r3,r1
001adc  e9cd010c          STRD     r0,r1,[sp,#0x30]
001ae0  2000              MOVS     r0,#0
001ae2  4954              LDR      r1,|L1.7220|
001ae4  f7fffffe          BL       __aeabi_ddiv
001ae8  e9cd0110          STRD     r0,r1,[sp,#0x40]
;;;973                      gs = 1.0 / (png_ptr->background_gamma *
001aec  9816              LDR      r0,[sp,#0x58]
001aee  f8d002a0          LDR      r0,[r0,#0x2a0]
001af2  900a              STR      r0,[sp,#0x28]
001af4  9816              LDR      r0,[sp,#0x58]
001af6  f8d00274          LDR      r0,[r0,#0x274]
001afa  9009              STR      r0,[sp,#0x24]
001afc  990a              LDR      r1,[sp,#0x28]
001afe  f7fffffe          BL       __aeabi_fmul
001b02  900b              STR      r0,[sp,#0x2c]
001b04  f7fffffe          BL       __aeabi_f2d
001b08  4602              MOV      r2,r0
001b0a  460b              MOV      r3,r1
001b0c  e9cd010c          STRD     r0,r1,[sp,#0x30]
001b10  2000              MOVS     r0,#0
001b12  4948              LDR      r1,|L1.7220|
001b14  f7fffffe          BL       __aeabi_ddiv
001b18  e9cd010e          STRD     r0,r1,[sp,#0x38]
;;;974                         png_ptr->screen_gamma);
;;;975                      break;
001b1c  bf00              NOP      
                  |L1.6942|
001b1e  bf00              NOP                            ;966
;;;976                }
;;;977    
;;;978                png_ptr->background_1.gray = (png_uint_16)(pow(
001b20  9816              LDR      r0,[sp,#0x58]
001b22  f8b00280          LDRH     r0,[r0,#0x280]
001b26  9003              STR      r0,[sp,#0xc]
001b28  f7fffffe          BL       __aeabi_ui2d
001b2c  e9cd0104          STRD     r0,r1,[sp,#0x10]
001b30  e9dd2312          LDRD     r2,r3,[sp,#0x48]
001b34  f7fffffe          BL       __aeabi_ddiv
001b38  e9cd0106          STRD     r0,r1,[sp,#0x18]
001b3c  e9dd2310          LDRD     r2,r3,[sp,#0x40]
001b40  f7fffffe          BL       pow
001b44  e9cd0108          STRD     r0,r1,[sp,#0x20]
001b48  e9dd2312          LDRD     r2,r3,[sp,#0x48]
001b4c  f7fffffe          BL       __aeabi_dmul
001b50  2200              MOVS     r2,#0
001b52  4b37              LDR      r3,|L1.7216|
001b54  e9cd010a          STRD     r0,r1,[sp,#0x28]
001b58  f7fffffe          BL       __aeabi_dadd
001b5c  e9cd010c          STRD     r0,r1,[sp,#0x30]
001b60  f7fffffe          BL       __aeabi_d2uiz
001b64  b281              UXTH     r1,r0
001b66  9816              LDR      r0,[sp,#0x58]
001b68  f8a0128a          STRH     r1,[r0,#0x28a]
;;;979                   (double)png_ptr->background.gray / m, g) * m + .5);
;;;980                png_ptr->background.gray = (png_uint_16)(pow(
001b6c  9816              LDR      r0,[sp,#0x58]
001b6e  f8b00280          LDRH     r0,[r0,#0x280]
001b72  9003              STR      r0,[sp,#0xc]
001b74  f7fffffe          BL       __aeabi_ui2d
001b78  e9cd0104          STRD     r0,r1,[sp,#0x10]
001b7c  e9dd2312          LDRD     r2,r3,[sp,#0x48]
001b80  f7fffffe          BL       __aeabi_ddiv
001b84  e9cd0106          STRD     r0,r1,[sp,#0x18]
001b88  e9dd230e          LDRD     r2,r3,[sp,#0x38]
001b8c  f7fffffe          BL       pow
001b90  e9cd0108          STRD     r0,r1,[sp,#0x20]
001b94  e9dd2312          LDRD     r2,r3,[sp,#0x48]
001b98  f7fffffe          BL       __aeabi_dmul
001b9c  2200              MOVS     r2,#0
001b9e  4b24              LDR      r3,|L1.7216|
001ba0  e9cd010a          STRD     r0,r1,[sp,#0x28]
001ba4  f7fffffe          BL       __aeabi_dadd
001ba8  e9cd010c          STRD     r0,r1,[sp,#0x30]
001bac  f7fffffe          BL       __aeabi_d2uiz
001bb0  b281              UXTH     r1,r0
001bb2  9816              LDR      r0,[sp,#0x58]
001bb4  f8a01280          STRH     r1,[r0,#0x280]
;;;981                   (double)png_ptr->background.gray / m, gs) * m + .5);
;;;982    
;;;983                if ((png_ptr->background.red != png_ptr->background.green) ||
001bb8  9816              LDR      r0,[sp,#0x58]
001bba  f8b0127a          LDRH     r1,[r0,#0x27a]
001bbe  f8b0027c          LDRH     r0,[r0,#0x27c]
001bc2  4281              CMP      r1,r0
001bc4  d10d              BNE      |L1.7138|
;;;984                    (png_ptr->background.red != png_ptr->background.blue) ||
001bc6  9816              LDR      r0,[sp,#0x58]
001bc8  f8b0127a          LDRH     r1,[r0,#0x27a]
001bcc  f8b0027e          LDRH     r0,[r0,#0x27e]
001bd0  4281              CMP      r1,r0
001bd2  d106              BNE      |L1.7138|
;;;985                    (png_ptr->background.red != png_ptr->background.gray))
001bd4  9816              LDR      r0,[sp,#0x58]
001bd6  f8b0127a          LDRH     r1,[r0,#0x27a]
001bda  f8b00280          LDRH     r0,[r0,#0x280]
001bde  4281              CMP      r1,r0
001be0  d07d              BEQ      |L1.7390|
                  |L1.7138|
;;;986                {
;;;987                   /* RGB or RGBA with color background */
;;;988                   png_ptr->background_1.red = (png_uint_16)(pow(
001be2  9816              LDR      r0,[sp,#0x58]
001be4  f8b0027a          LDRH     r0,[r0,#0x27a]
001be8  9003              STR      r0,[sp,#0xc]
001bea  f7fffffe          BL       __aeabi_ui2d
001bee  e9cd0104          STRD     r0,r1,[sp,#0x10]
001bf2  e9dd2312          LDRD     r2,r3,[sp,#0x48]
001bf6  f7fffffe          BL       __aeabi_ddiv
001bfa  e9cd0106          STRD     r0,r1,[sp,#0x18]
001bfe  e9dd2310          LDRD     r2,r3,[sp,#0x40]
001c02  f7fffffe          BL       pow
001c06  e9cd0108          STRD     r0,r1,[sp,#0x20]
001c0a  e9dd2312          LDRD     r2,r3,[sp,#0x48]
001c0e  f7fffffe          BL       __aeabi_dmul
001c12  2200              MOVS     r2,#0
001c14  4b06              LDR      r3,|L1.7216|
001c16  e9cd010a          STRD     r0,r1,[sp,#0x28]
001c1a  f7fffffe          BL       __aeabi_dadd
001c1e  e9cd010c          STRD     r0,r1,[sp,#0x30]
001c22  f7fffffe          BL       __aeabi_d2uiz
001c26  b281              UXTH     r1,r0
001c28  9816              LDR      r0,[sp,#0x58]
001c2a  f8a01284          STRH     r1,[r0,#0x284]
;;;989                      (double)png_ptr->background.red / m, g) * m + .5);
;;;990                   png_ptr->background_1.green = (png_uint_16)(pow(
001c2e  e003              B        |L1.7224|
                  |L1.7216|
                          DCD      0x3fe00000
                  |L1.7220|
                          DCD      0x3ff00000
                  |L1.7224|
001c38  9816              LDR      r0,[sp,#0x58]
001c3a  f8b0027c          LDRH     r0,[r0,#0x27c]
001c3e  9003              STR      r0,[sp,#0xc]
001c40  f7fffffe          BL       __aeabi_ui2d
001c44  e9cd0104          STRD     r0,r1,[sp,#0x10]
001c48  e9dd2312          LDRD     r2,r3,[sp,#0x48]
001c4c  f7fffffe          BL       __aeabi_ddiv
001c50  e9cd0106          STRD     r0,r1,[sp,#0x18]
001c54  e9dd2310          LDRD     r2,r3,[sp,#0x40]
001c58  f7fffffe          BL       pow
001c5c  e9cd0108          STRD     r0,r1,[sp,#0x20]
001c60  e9dd2312          LDRD     r2,r3,[sp,#0x48]
001c64  f7fffffe          BL       __aeabi_dmul
001c68  2200              MOVS     r2,#0
001c6a  4bfa              LDR      r3,|L1.8276|
001c6c  e9cd010a          STRD     r0,r1,[sp,#0x28]
001c70  f7fffffe          BL       __aeabi_dadd
001c74  e9cd010c          STRD     r0,r1,[sp,#0x30]
001c78  f7fffffe          BL       __aeabi_d2uiz
001c7c  b281              UXTH     r1,r0
001c7e  9816              LDR      r0,[sp,#0x58]
001c80  f8a01286          STRH     r1,[r0,#0x286]
;;;991                      (double)png_ptr->background.green / m, g) * m + .5);
;;;992                   png_ptr->background_1.blue = (png_uint_16)(pow(
001c84  9816              LDR      r0,[sp,#0x58]
001c86  f8b0027e          LDRH     r0,[r0,#0x27e]
001c8a  9003              STR      r0,[sp,#0xc]
001c8c  f7fffffe          BL       __aeabi_ui2d
001c90  e9cd0104          STRD     r0,r1,[sp,#0x10]
001c94  e9dd2312          LDRD     r2,r3,[sp,#0x48]
001c98  f7fffffe          BL       __aeabi_ddiv
001c9c  e9cd0106          STRD     r0,r1,[sp,#0x18]
001ca0  e9dd2310          LDRD     r2,r3,[sp,#0x40]
001ca4  f7fffffe          BL       pow
001ca8  e9cd0108          STRD     r0,r1,[sp,#0x20]
001cac  e9dd2312          LDRD     r2,r3,[sp,#0x48]
001cb0  f7fffffe          BL       __aeabi_dmul
001cb4  2200              MOVS     r2,#0
001cb6  4be7              LDR      r3,|L1.8276|
001cb8  e9cd010a          STRD     r0,r1,[sp,#0x28]
001cbc  f7fffffe          BL       __aeabi_dadd
001cc0  e9cd010c          STRD     r0,r1,[sp,#0x30]
001cc4  f7fffffe          BL       __aeabi_d2uiz
001cc8  b281              UXTH     r1,r0
001cca  9816              LDR      r0,[sp,#0x58]
001ccc  f8a01288          STRH     r1,[r0,#0x288]
;;;993                      (double)png_ptr->background.blue / m, g) * m + .5);
;;;994                   png_ptr->background.red = (png_uint_16)(pow(
001cd0  9816              LDR      r0,[sp,#0x58]
001cd2  f8b0027a          LDRH     r0,[r0,#0x27a]
001cd6  9003              STR      r0,[sp,#0xc]
001cd8  f7fffffe          BL       __aeabi_ui2d
001cdc  e000              B        |L1.7392|
                  |L1.7390|
001cde  e06f              B        |L1.7616|
                  |L1.7392|
001ce0  e9cd0104          STRD     r0,r1,[sp,#0x10]
001ce4  e9dd2312          LDRD     r2,r3,[sp,#0x48]
001ce8  f7fffffe          BL       __aeabi_ddiv
001cec  e9cd0106          STRD     r0,r1,[sp,#0x18]
001cf0  e9dd230e          LDRD     r2,r3,[sp,#0x38]
001cf4  f7fffffe          BL       pow
001cf8  e9cd0108          STRD     r0,r1,[sp,#0x20]
001cfc  e9dd2312          LDRD     r2,r3,[sp,#0x48]
001d00  f7fffffe          BL       __aeabi_dmul
001d04  2200              MOVS     r2,#0
001d06  4bd3              LDR      r3,|L1.8276|
001d08  e9cd010a          STRD     r0,r1,[sp,#0x28]
001d0c  f7fffffe          BL       __aeabi_dadd
001d10  e9cd010c          STRD     r0,r1,[sp,#0x30]
001d14  f7fffffe          BL       __aeabi_d2uiz
001d18  b281              UXTH     r1,r0
001d1a  9816              LDR      r0,[sp,#0x58]
001d1c  f8a0127a          STRH     r1,[r0,#0x27a]
;;;995                      (double)png_ptr->background.red / m, gs) * m + .5);
;;;996                   png_ptr->background.green = (png_uint_16)(pow(
001d20  9816              LDR      r0,[sp,#0x58]
001d22  f8b0027c          LDRH     r0,[r0,#0x27c]
001d26  9003              STR      r0,[sp,#0xc]
001d28  f7fffffe          BL       __aeabi_ui2d
001d2c  e9cd0104          STRD     r0,r1,[sp,#0x10]
001d30  e9dd2312          LDRD     r2,r3,[sp,#0x48]
001d34  f7fffffe          BL       __aeabi_ddiv
001d38  e9cd0106          STRD     r0,r1,[sp,#0x18]
001d3c  e9dd230e          LDRD     r2,r3,[sp,#0x38]
001d40  f7fffffe          BL       pow
001d44  e9cd0108          STRD     r0,r1,[sp,#0x20]
001d48  e9dd2312          LDRD     r2,r3,[sp,#0x48]
001d4c  f7fffffe          BL       __aeabi_dmul
001d50  2200              MOVS     r2,#0
001d52  4bc0              LDR      r3,|L1.8276|
001d54  e9cd010a          STRD     r0,r1,[sp,#0x28]
001d58  f7fffffe          BL       __aeabi_dadd
001d5c  e9cd010c          STRD     r0,r1,[sp,#0x30]
001d60  f7fffffe          BL       __aeabi_d2uiz
001d64  b281              UXTH     r1,r0
001d66  9816              LDR      r0,[sp,#0x58]
001d68  f8a0127c          STRH     r1,[r0,#0x27c]
;;;997                      (double)png_ptr->background.green / m, gs) * m + .5);
;;;998                   png_ptr->background.blue = (png_uint_16)(pow(
001d6c  9816              LDR      r0,[sp,#0x58]
001d6e  f8b0027e          LDRH     r0,[r0,#0x27e]
001d72  9003              STR      r0,[sp,#0xc]
001d74  f7fffffe          BL       __aeabi_ui2d
001d78  e9cd0104          STRD     r0,r1,[sp,#0x10]
001d7c  e9dd2312          LDRD     r2,r3,[sp,#0x48]
001d80  f7fffffe          BL       __aeabi_ddiv
001d84  e9cd0106          STRD     r0,r1,[sp,#0x18]
001d88  e9dd230e          LDRD     r2,r3,[sp,#0x38]
001d8c  f7fffffe          BL       pow
001d90  e001              B        |L1.7574|
                  |L1.7570|
001d92  e070              B        |L1.7798|
                  |L1.7572|
001d94  e02b              B        |L1.7662|
                  |L1.7574|
001d96  e9cd0108          STRD     r0,r1,[sp,#0x20]
001d9a  e9dd2312          LDRD     r2,r3,[sp,#0x48]
001d9e  f7fffffe          BL       __aeabi_dmul
001da2  2200              MOVS     r2,#0
001da4  4bab              LDR      r3,|L1.8276|
001da6  e9cd010a          STRD     r0,r1,[sp,#0x28]
001daa  f7fffffe          BL       __aeabi_dadd
001dae  e9cd010c          STRD     r0,r1,[sp,#0x30]
001db2  f7fffffe          BL       __aeabi_d2uiz
001db6  b281              UXTH     r1,r0
001db8  9816              LDR      r0,[sp,#0x58]
001dba  f8a0127e          STRH     r1,[r0,#0x27e]
001dbe  e015              B        |L1.7660|
                  |L1.7616|
;;;999                      (double)png_ptr->background.blue / m, gs) * m + .5);
;;;1000               }
;;;1001               else
;;;1002               {
;;;1003                  /* GRAY, GRAY ALPHA, RGB, or RGBA with gray background */
;;;1004                  png_ptr->background_1.red = png_ptr->background_1.green
001dc0  9816              LDR      r0,[sp,#0x58]
001dc2  f8b0128a          LDRH     r1,[r0,#0x28a]
001dc6  f8a01288          STRH     r1,[r0,#0x288]
001dca  9816              LDR      r0,[sp,#0x58]
001dcc  f8a01286          STRH     r1,[r0,#0x286]
001dd0  9816              LDR      r0,[sp,#0x58]
001dd2  f8a01284          STRH     r1,[r0,#0x284]
;;;1005                    = png_ptr->background_1.blue = png_ptr->background_1.gray;
;;;1006                  png_ptr->background.red = png_ptr->background.green
001dd6  9816              LDR      r0,[sp,#0x58]
001dd8  f8b01280          LDRH     r1,[r0,#0x280]
001ddc  f8a0127e          STRH     r1,[r0,#0x27e]
001de0  9816              LDR      r0,[sp,#0x58]
001de2  f8a0127c          STRH     r1,[r0,#0x27c]
001de6  9816              LDR      r0,[sp,#0x58]
001de8  f8a0127a          STRH     r1,[r0,#0x27a]
                  |L1.7660|
;;;1007                    = png_ptr->background.blue = png_ptr->background.gray;
;;;1008               }
;;;1009            }
001dec  e0f7              B        |L1.8158|
                  |L1.7662|
;;;1010         }
;;;1011         else
;;;1012         /* transformation does not include PNG_BACKGROUND */
;;;1013   #endif /* PNG_READ_BACKGROUND_SUPPORTED */
;;;1014         if (color_type == PNG_COLOR_TYPE_PALETTE)
001dee  9815              LDR      r0,[sp,#0x54]
001df0  2803              CMP      r0,#3
001df2  d1fb              BNE      |L1.7660|
;;;1015         {
;;;1016            png_colorp palette = png_ptr->palette;
001df4  9816              LDR      r0,[sp,#0x58]
001df6  f8d00254          LDR      r0,[r0,#0x254]
001dfa  9014              STR      r0,[sp,#0x50]
;;;1017            int num_palette = png_ptr->num_palette;
001dfc  9816              LDR      r0,[sp,#0x58]
001dfe  f8b00258          LDRH     r0,[r0,#0x258]
001e02  9013              STR      r0,[sp,#0x4c]
;;;1018            int i;
;;;1019   
;;;1020            for (i = 0; i < num_palette; i++)
001e04  2000              MOVS     r0,#0
001e06  9012              STR      r0,[sp,#0x48]
001e08  e030              B        |L1.7788|
                  |L1.7690|
;;;1021            {
;;;1022               palette[i].red = png_ptr->gamma_table[palette[i].red];
001e0a  9816              LDR      r0,[sp,#0x58]
001e0c  f8d012a4          LDR      r1,[r0,#0x2a4]
001e10  9812              LDR      r0,[sp,#0x48]
001e12  eb000240          ADD      r2,r0,r0,LSL #1
001e16  9814              LDR      r0,[sp,#0x50]
001e18  5c80              LDRB     r0,[r0,r2]
001e1a  5c09              LDRB     r1,[r1,r0]
001e1c  9812              LDR      r0,[sp,#0x48]
001e1e  eb000240          ADD      r2,r0,r0,LSL #1
001e22  9814              LDR      r0,[sp,#0x50]
001e24  5481              STRB     r1,[r0,r2]
;;;1023               palette[i].green = png_ptr->gamma_table[palette[i].green];
001e26  9816              LDR      r0,[sp,#0x58]
001e28  f8d012a4          LDR      r1,[r0,#0x2a4]
001e2c  9812              LDR      r0,[sp,#0x48]
001e2e  eb000240          ADD      r2,r0,r0,LSL #1
001e32  9814              LDR      r0,[sp,#0x50]
001e34  4410              ADD      r0,r0,r2
001e36  7840              LDRB     r0,[r0,#1]
001e38  5c09              LDRB     r1,[r1,r0]
001e3a  9812              LDR      r0,[sp,#0x48]
001e3c  eb000240          ADD      r2,r0,r0,LSL #1
001e40  9814              LDR      r0,[sp,#0x50]
001e42  4410              ADD      r0,r0,r2
001e44  7041              STRB     r1,[r0,#1]
;;;1024               palette[i].blue = png_ptr->gamma_table[palette[i].blue];
001e46  9816              LDR      r0,[sp,#0x58]
001e48  f8d012a4          LDR      r1,[r0,#0x2a4]
001e4c  9812              LDR      r0,[sp,#0x48]
001e4e  eb000240          ADD      r2,r0,r0,LSL #1
001e52  9814              LDR      r0,[sp,#0x50]
001e54  4410              ADD      r0,r0,r2
001e56  7880              LDRB     r0,[r0,#2]
001e58  5c09              LDRB     r1,[r1,r0]
001e5a  9812              LDR      r0,[sp,#0x48]
001e5c  eb000240          ADD      r2,r0,r0,LSL #1
001e60  9814              LDR      r0,[sp,#0x50]
001e62  4410              ADD      r0,r0,r2
001e64  7081              STRB     r1,[r0,#2]
001e66  9812              LDR      r0,[sp,#0x48]         ;1020
001e68  1c40              ADDS     r0,r0,#1              ;1020
001e6a  9012              STR      r0,[sp,#0x48]         ;1020
                  |L1.7788|
001e6c  e9dd0112          LDRD     r0,r1,[sp,#0x48]      ;1020
001e70  4288              CMP      r0,r1                 ;1020
001e72  dbca              BLT      |L1.7690|
;;;1025            }
;;;1026         }
001e74  e0b3              B        |L1.8158|
                  |L1.7798|
;;;1027      }
;;;1028   #if defined(PNG_READ_BACKGROUND_SUPPORTED)
;;;1029      else
;;;1030   #endif
;;;1031   #endif /* PNG_READ_GAMMA_SUPPORTED && PNG_FLOATING_POINT_SUPPORTED */
;;;1032   #if defined(PNG_READ_BACKGROUND_SUPPORTED)
;;;1033      /* No GAMMA transformation */
;;;1034      if ((png_ptr->transformations & PNG_BACKGROUND) &&
001e76  9816              LDR      r0,[sp,#0x58]
001e78  f89001b0          LDRB     r0,[r0,#0x1b0]
001e7c  f0000080          AND      r0,r0,#0x80
001e80  2800              CMP      r0,#0
001e82  d07d              BEQ      |L1.8064|
;;;1035          (color_type == PNG_COLOR_TYPE_PALETTE))
001e84  9815              LDR      r0,[sp,#0x54]
001e86  2803              CMP      r0,#3
001e88  d17a              BNE      |L1.8064|
;;;1036      {
;;;1037         int i;
;;;1038         int istop = (int)png_ptr->num_trans;
001e8a  9816              LDR      r0,[sp,#0x58]
001e8c  f8b0025a          LDRH     r0,[r0,#0x25a]
001e90  9013              STR      r0,[sp,#0x4c]
;;;1039         png_color back;
;;;1040         png_colorp palette = png_ptr->palette;
001e92  9816              LDR      r0,[sp,#0x58]
001e94  f8d00254          LDR      r0,[r0,#0x254]
001e98  9011              STR      r0,[sp,#0x44]
;;;1041   
;;;1042         back.red   = (png_byte)png_ptr->background.red;
001e9a  9816              LDR      r0,[sp,#0x58]
001e9c  f890027a          LDRB     r0,[r0,#0x27a]
001ea0  f88d0048          STRB     r0,[sp,#0x48]
;;;1043         back.green = (png_byte)png_ptr->background.green;
001ea4  9816              LDR      r0,[sp,#0x58]
001ea6  f890027c          LDRB     r0,[r0,#0x27c]
001eaa  f88d0049          STRB     r0,[sp,#0x49]
;;;1044         back.blue  = (png_byte)png_ptr->background.blue;
001eae  9816              LDR      r0,[sp,#0x58]
001eb0  f890027e          LDRB     r0,[r0,#0x27e]
001eb4  f88d004a          STRB     r0,[sp,#0x4a]
;;;1045   
;;;1046         for (i = 0; i < istop; i++)
001eb8  2000              MOVS     r0,#0
001eba  9014              STR      r0,[sp,#0x50]
001ebc  e089              B        |L1.8146|
                  |L1.7870|
;;;1047         {
;;;1048            if (png_ptr->trans[i] == 0)
001ebe  9816              LDR      r0,[sp,#0x58]
001ec0  f8d012c8          LDR      r1,[r0,#0x2c8]
001ec4  9814              LDR      r0,[sp,#0x50]
001ec6  5c08              LDRB     r0,[r1,r0]
001ec8  b958              CBNZ     r0,|L1.7906|
;;;1049            {
;;;1050               palette[i] = back;
001eca  9814              LDR      r0,[sp,#0x50]
001ecc  eb000140          ADD      r1,r0,r0,LSL #1
001ed0  9811              LDR      r0,[sp,#0x44]
001ed2  4408              ADD      r0,r0,r1
001ed4  f8bd1048          LDRH     r1,[sp,#0x48]
001ed8  8001              STRH     r1,[r0,#0]
001eda  f89d104a          LDRB     r1,[sp,#0x4a]
001ede  7081              STRB     r1,[r0,#2]
001ee0  e074              B        |L1.8140|
                  |L1.7906|
;;;1051            }
;;;1052            else if (png_ptr->trans[i] != 0xff)
001ee2  9816              LDR      r0,[sp,#0x58]
001ee4  f8d012c8          LDR      r1,[r0,#0x2c8]
001ee8  9814              LDR      r0,[sp,#0x50]
001eea  5c08              LDRB     r0,[r1,r0]
001eec  28ff              CMP      r0,#0xff
001eee  d06d              BEQ      |L1.8140|
;;;1053            {
;;;1054               /* The png_composite() macro is defined in png.h */
;;;1055               png_composite(palette[i].red, palette[i].red,
001ef0  9814              LDR      r0,[sp,#0x50]
001ef2  eb000140          ADD      r1,r0,r0,LSL #1
001ef6  9811              LDR      r0,[sp,#0x44]
001ef8  5c40              LDRB     r0,[r0,r1]
001efa  9916              LDR      r1,[sp,#0x58]
001efc  f8d122c8          LDR      r2,[r1,#0x2c8]
001f00  9914              LDR      r1,[sp,#0x50]
001f02  5c51              LDRB     r1,[r2,r1]
001f04  4348              MULS     r0,r1,r0
001f06  f89d2048          LDRB     r2,[sp,#0x48]
001f0a  9916              LDR      r1,[sp,#0x58]
001f0c  f8d132c8          LDR      r3,[r1,#0x2c8]
001f10  9914              LDR      r1,[sp,#0x50]
001f12  5c59              LDRB     r1,[r3,r1]
001f14  f1c101ff          RSB      r1,r1,#0xff
001f18  fb020001          MLA      r0,r2,r1,r0
001f1c  3080              ADDS     r0,r0,#0x80
001f1e  b280              UXTH     r0,r0
001f20  9010              STR      r0,[sp,#0x40]
001f22  9810              LDR      r0,[sp,#0x40]
001f24  eb002020          ADD      r0,r0,r0,ASR #8
001f28  f3c02107          UBFX     r1,r0,#8,#8
001f2c  9814              LDR      r0,[sp,#0x50]
001f2e  eb000240          ADD      r2,r0,r0,LSL #1
001f32  9811              LDR      r0,[sp,#0x44]
001f34  5481              STRB     r1,[r0,r2]
;;;1056                  png_ptr->trans[i], back.red);
;;;1057               png_composite(palette[i].green, palette[i].green,
001f36  9814              LDR      r0,[sp,#0x50]
001f38  eb000140          ADD      r1,r0,r0,LSL #1
001f3c  9811              LDR      r0,[sp,#0x44]
001f3e  4408              ADD      r0,r0,r1
001f40  7840              LDRB     r0,[r0,#1]
001f42  9916              LDR      r1,[sp,#0x58]
001f44  f8d122c8          LDR      r2,[r1,#0x2c8]
001f48  9914              LDR      r1,[sp,#0x50]
001f4a  5c51              LDRB     r1,[r2,r1]
001f4c  4348              MULS     r0,r1,r0
001f4e  f89d2049          LDRB     r2,[sp,#0x49]
001f52  9916              LDR      r1,[sp,#0x58]
001f54  f8d132c8          LDR      r3,[r1,#0x2c8]
001f58  9914              LDR      r1,[sp,#0x50]
001f5a  5c59              LDRB     r1,[r3,r1]
001f5c  f1c101ff          RSB      r1,r1,#0xff
001f60  fb020001          MLA      r0,r2,r1,r0
001f64  3080              ADDS     r0,r0,#0x80
001f66  b280              UXTH     r0,r0
001f68  9010              STR      r0,[sp,#0x40]
001f6a  9810              LDR      r0,[sp,#0x40]
001f6c  eb002020          ADD      r0,r0,r0,ASR #8
001f70  0a01              LSRS     r1,r0,#8
001f72  9814              LDR      r0,[sp,#0x50]
001f74  eb000240          ADD      r2,r0,r0,LSL #1
001f78  9811              LDR      r0,[sp,#0x44]
001f7a  4410              ADD      r0,r0,r2
001f7c  7041              STRB     r1,[r0,#1]
;;;1058                  png_ptr->trans[i], back.green);
;;;1059               png_composite(palette[i].blue, palette[i].blue,
001f7e  e000              B        |L1.8066|
                  |L1.8064|
001f80  e02d              B        |L1.8158|
                  |L1.8066|
001f82  9814              LDR      r0,[sp,#0x50]
001f84  eb000140          ADD      r1,r0,r0,LSL #1
001f88  9811              LDR      r0,[sp,#0x44]
001f8a  4408              ADD      r0,r0,r1
001f8c  7880              LDRB     r0,[r0,#2]
001f8e  9916              LDR      r1,[sp,#0x58]
001f90  f8d122c8          LDR      r2,[r1,#0x2c8]
001f94  9914              LDR      r1,[sp,#0x50]
001f96  5c51              LDRB     r1,[r2,r1]
001f98  4341              MULS     r1,r0,r1
001f9a  f89d204a          LDRB     r2,[sp,#0x4a]
001f9e  9816              LDR      r0,[sp,#0x58]
001fa0  f8d032c8          LDR      r3,[r0,#0x2c8]
001fa4  9814              LDR      r0,[sp,#0x50]
001fa6  5c18              LDRB     r0,[r3,r0]
001fa8  f1c000ff          RSB      r0,r0,#0xff
001fac  fb021000          MLA      r0,r2,r0,r1
001fb0  3080              ADDS     r0,r0,#0x80
001fb2  b280              UXTH     r0,r0
001fb4  9010              STR      r0,[sp,#0x40]
001fb6  9810              LDR      r0,[sp,#0x40]
001fb8  eb002020          ADD      r0,r0,r0,ASR #8
001fbc  0a01              LSRS     r1,r0,#8
001fbe  9814              LDR      r0,[sp,#0x50]
001fc0  eb000240          ADD      r2,r0,r0,LSL #1
001fc4  9811              LDR      r0,[sp,#0x44]
001fc6  4410              ADD      r0,r0,r2
001fc8  7081              STRB     r1,[r0,#2]
001fca  bf00              NOP      
                  |L1.8140|
001fcc  9814              LDR      r0,[sp,#0x50]         ;1046
001fce  1c40              ADDS     r0,r0,#1              ;1046
001fd0  9014              STR      r0,[sp,#0x50]         ;1046
                  |L1.8146|
001fd2  e9dd1013          LDRD     r1,r0,[sp,#0x4c]      ;1046
001fd6  4288              CMP      r0,r1                 ;1046
001fd8  f6ffaf71          BLT      |L1.7870|
;;;1060                  png_ptr->trans[i], back.blue);
;;;1061            }
;;;1062         }
;;;1063      }
001fdc  bf00              NOP      
                  |L1.8158|
;;;1064   #endif /* PNG_READ_BACKGROUND_SUPPORTED */
;;;1065   
;;;1066   #if defined(PNG_READ_SHIFT_SUPPORTED)
;;;1067      if ((png_ptr->transformations & PNG_SHIFT) &&
001fde  9816              LDR      r0,[sp,#0x58]
001fe0  f89001b0          LDRB     r0,[r0,#0x1b0]
001fe4  f0000008          AND      r0,r0,#8
001fe8  b398              CBZ      r0,|L1.8274|
;;;1068         (color_type == PNG_COLOR_TYPE_PALETTE))
001fea  9815              LDR      r0,[sp,#0x54]
001fec  2803              CMP      r0,#3
001fee  d170              BNE      |L1.8402|
;;;1069      {
;;;1070         png_uint_16 i;
;;;1071         png_uint_16 istop = png_ptr->num_palette;
001ff0  9816              LDR      r0,[sp,#0x58]
001ff2  f8b00258          LDRH     r0,[r0,#0x258]
001ff6  9013              STR      r0,[sp,#0x4c]
;;;1072         int sr = 8 - png_ptr->sig_bit.red;
001ff8  9816              LDR      r0,[sp,#0x58]
001ffa  f89002bc          LDRB     r0,[r0,#0x2bc]
001ffe  f1c00008          RSB      r0,r0,#8
002002  9012              STR      r0,[sp,#0x48]
;;;1073         int sg = 8 - png_ptr->sig_bit.green;
002004  9816              LDR      r0,[sp,#0x58]
002006  f89002bd          LDRB     r0,[r0,#0x2bd]
00200a  f1c00008          RSB      r0,r0,#8
00200e  9011              STR      r0,[sp,#0x44]
;;;1074         int sb = 8 - png_ptr->sig_bit.blue;
002010  9816              LDR      r0,[sp,#0x58]
002012  f89002be          LDRB     r0,[r0,#0x2be]
002016  f1c00008          RSB      r0,r0,#8
00201a  9010              STR      r0,[sp,#0x40]
;;;1075   
;;;1076         if (sr < 0 || sr > 8)
00201c  9812              LDR      r0,[sp,#0x48]
00201e  2800              CMP      r0,#0
002020  db02              BLT      |L1.8232|
002022  9812              LDR      r0,[sp,#0x48]
002024  2808              CMP      r0,#8
002026  dd01              BLE      |L1.8236|
                  |L1.8232|
;;;1077            sr = 0;
002028  2000              MOVS     r0,#0
00202a  9012              STR      r0,[sp,#0x48]
                  |L1.8236|
;;;1078         if (sg < 0 || sg > 8)
00202c  9811              LDR      r0,[sp,#0x44]
00202e  2800              CMP      r0,#0
002030  db02              BLT      |L1.8248|
002032  9811              LDR      r0,[sp,#0x44]
002034  2808              CMP      r0,#8
002036  dd01              BLE      |L1.8252|
                  |L1.8248|
;;;1079            sg = 0;
002038  2000              MOVS     r0,#0
00203a  9011              STR      r0,[sp,#0x44]
                  |L1.8252|
;;;1080         if (sb < 0 || sb > 8)
00203c  9810              LDR      r0,[sp,#0x40]
00203e  2800              CMP      r0,#0
002040  db02              BLT      |L1.8264|
002042  9810              LDR      r0,[sp,#0x40]
002044  2808              CMP      r0,#8
002046  dd01              BLE      |L1.8268|
                  |L1.8264|
;;;1081            sb = 0;
002048  2000              MOVS     r0,#0
00204a  9010              STR      r0,[sp,#0x40]
                  |L1.8268|
;;;1082         for (i = 0; i < istop; i++)
00204c  2000              MOVS     r0,#0
00204e  9014              STR      r0,[sp,#0x50]
002050  e03a              B        |L1.8392|
                  |L1.8274|
002052  e03e              B        |L1.8402|
                  |L1.8276|
                          DCD      0x3fe00000
                  |L1.8280|
;;;1083         {
;;;1084            png_ptr->palette[i].red >>= sr;
002058  9816              LDR      r0,[sp,#0x58]
00205a  f8d01254          LDR      r1,[r0,#0x254]
00205e  9814              LDR      r0,[sp,#0x50]
002060  eb000040          ADD      r0,r0,r0,LSL #1
002064  5c08              LDRB     r0,[r1,r0]
002066  9912              LDR      r1,[sp,#0x48]
002068  4108              ASRS     r0,r0,r1
00206a  9916              LDR      r1,[sp,#0x58]
00206c  f8d12254          LDR      r2,[r1,#0x254]
002070  9914              LDR      r1,[sp,#0x50]
002072  eb010141          ADD      r1,r1,r1,LSL #1
002076  5450              STRB     r0,[r2,r1]
;;;1085            png_ptr->palette[i].green >>= sg;
002078  9816              LDR      r0,[sp,#0x58]
00207a  f8d01254          LDR      r1,[r0,#0x254]
00207e  9814              LDR      r0,[sp,#0x50]
002080  eb000040          ADD      r0,r0,r0,LSL #1
002084  4408              ADD      r0,r0,r1
002086  7840              LDRB     r0,[r0,#1]
002088  9911              LDR      r1,[sp,#0x44]
00208a  4108              ASRS     r0,r0,r1
00208c  9916              LDR      r1,[sp,#0x58]
00208e  f8d12254          LDR      r2,[r1,#0x254]
002092  9914              LDR      r1,[sp,#0x50]
002094  eb010141          ADD      r1,r1,r1,LSL #1
002098  4411              ADD      r1,r1,r2
00209a  7048              STRB     r0,[r1,#1]
;;;1086            png_ptr->palette[i].blue >>= sb;
00209c  9816              LDR      r0,[sp,#0x58]
00209e  f8d01254          LDR      r1,[r0,#0x254]
0020a2  9814              LDR      r0,[sp,#0x50]
0020a4  eb000040          ADD      r0,r0,r0,LSL #1
0020a8  4408              ADD      r0,r0,r1
0020aa  7880              LDRB     r0,[r0,#2]
0020ac  9910              LDR      r1,[sp,#0x40]
0020ae  4108              ASRS     r0,r0,r1
0020b0  9916              LDR      r1,[sp,#0x58]
0020b2  f8d12254          LDR      r2,[r1,#0x254]
0020b6  9914              LDR      r1,[sp,#0x50]
0020b8  eb010141          ADD      r1,r1,r1,LSL #1
0020bc  4411              ADD      r1,r1,r2
0020be  7088              STRB     r0,[r1,#2]
0020c0  9814              LDR      r0,[sp,#0x50]         ;1082
0020c2  1c40              ADDS     r0,r0,#1              ;1082
0020c4  b280              UXTH     r0,r0                 ;1082
0020c6  9014              STR      r0,[sp,#0x50]         ;1082
                  |L1.8392|
0020c8  e9dd1013          LDRD     r1,r0,[sp,#0x4c]      ;1082
0020cc  4288              CMP      r0,r1                 ;1082
0020ce  dbc3              BLT      |L1.8280|
;;;1087         }
;;;1088      }
0020d0  bf00              NOP      
                  |L1.8402|
;;;1089   #endif  /* PNG_READ_SHIFT_SUPPORTED */
;;;1090    }
;;;1091   #if !defined(PNG_READ_GAMMA_SUPPORTED) && !defined(PNG_READ_SHIFT_SUPPORTED) \
;;;1092    && !defined(PNG_READ_BACKGROUND_SUPPORTED)
;;;1093      if(png_ptr)
;;;1094         return;
;;;1095   #endif
;;;1096   }
0020d2  b017              ADD      sp,sp,#0x5c
0020d4  bd00              POP      {pc}
;;;1097   
                          ENDP

                  png_read_transform_info PROC
;;;1102   void /* PRIVATE */
;;;1103   png_read_transform_info(png_structp png_ptr, png_infop info_ptr)
0020d6  f8b021b0          LDRH     r2,[r0,#0x1b0]
;;;1104   {
;;;1105      png_debug(1, "in png_read_transform_info\n");
;;;1106   #if defined(PNG_READ_EXPAND_SUPPORTED)
;;;1107      if (png_ptr->transformations & PNG_EXPAND)
0020da  f4025280          AND      r2,r2,#0x1000
0020de  b362              CBZ      r2,|L1.8506|
;;;1108      {
;;;1109         if (info_ptr->color_type == PNG_COLOR_TYPE_PALETTE)
0020e0  7e4a              LDRB     r2,[r1,#0x19]
0020e2  2a03              CMP      r2,#3
0020e4  d111              BNE      |L1.8458|
;;;1110         {
;;;1111            if (png_ptr->num_trans && (png_ptr->transformations & PNG_EXPAND_tRNS))
0020e6  f8b0225a          LDRH     r2,[r0,#0x25a]
0020ea  b13a              CBZ      r2,|L1.8444|
0020ec  f8d021b0          LDR      r2,[r0,#0x1b0]
0020f0  f0027200          AND      r2,r2,#0x2000000
0020f4  b112              CBZ      r2,|L1.8444|
;;;1112               info_ptr->color_type = PNG_COLOR_TYPE_RGB_ALPHA;
0020f6  2206              MOVS     r2,#6
0020f8  764a              STRB     r2,[r1,#0x19]
0020fa  e001              B        |L1.8448|
                  |L1.8444|
;;;1113            else
;;;1114               info_ptr->color_type = PNG_COLOR_TYPE_RGB;
0020fc  2202              MOVS     r2,#2
0020fe  764a              STRB     r2,[r1,#0x19]
                  |L1.8448|
;;;1115            info_ptr->bit_depth = 8;
002100  2208              MOVS     r2,#8
002102  760a              STRB     r2,[r1,#0x18]
;;;1116            info_ptr->num_trans = 0;
002104  2200              MOVS     r2,#0
002106  82ca              STRH     r2,[r1,#0x16]
002108  e017              B        |L1.8506|
                  |L1.8458|
;;;1117         }
;;;1118         else
;;;1119         {
;;;1120            if (png_ptr->num_trans)
00210a  f8b0225a          LDRH     r2,[r0,#0x25a]
00210e  b16a              CBZ      r2,|L1.8492|
;;;1121            {
;;;1122               if (png_ptr->transformations & PNG_EXPAND_tRNS)
002110  f8d021b0          LDR      r2,[r0,#0x1b0]
002114  f0027200          AND      r2,r2,#0x2000000
002118  b122              CBZ      r2,|L1.8484|
;;;1123                 info_ptr->color_type |= PNG_COLOR_MASK_ALPHA;
00211a  7e4a              LDRB     r2,[r1,#0x19]
00211c  f0420204          ORR      r2,r2,#4
002120  764a              STRB     r2,[r1,#0x19]
002122  e003              B        |L1.8492|
                  |L1.8484|
;;;1124               else
;;;1125                 info_ptr->color_type |= PNG_COLOR_MASK_COLOR;
002124  7e4a              LDRB     r2,[r1,#0x19]
002126  f0420202          ORR      r2,r2,#2
00212a  764a              STRB     r2,[r1,#0x19]
                  |L1.8492|
;;;1126            }
;;;1127            if (info_ptr->bit_depth < 8)
00212c  7e0a              LDRB     r2,[r1,#0x18]
00212e  2a08              CMP      r2,#8
002130  da01              BGE      |L1.8502|
;;;1128               info_ptr->bit_depth = 8;
002132  2208              MOVS     r2,#8
002134  760a              STRB     r2,[r1,#0x18]
                  |L1.8502|
;;;1129            info_ptr->num_trans = 0;
002136  2200              MOVS     r2,#0
002138  82ca              STRH     r2,[r1,#0x16]
                  |L1.8506|
;;;1130         }
;;;1131      }
;;;1132   #endif
;;;1133   
;;;1134   #if defined(PNG_READ_BACKGROUND_SUPPORTED)
;;;1135      if (png_ptr->transformations & PNG_BACKGROUND)
00213a  f89021b0          LDRB     r2,[r0,#0x1b0]
00213e  f0020280          AND      r2,r2,#0x80
002142  b18a              CBZ      r2,|L1.8552|
;;;1136      {
;;;1137         info_ptr->color_type &= ~PNG_COLOR_MASK_ALPHA;
002144  7e4a              LDRB     r2,[r1,#0x19]
002146  f0220204          BIC      r2,r2,#4
00214a  764a              STRB     r2,[r1,#0x19]
;;;1138         info_ptr->num_trans = 0;
00214c  2200              MOVS     r2,#0
00214e  82ca              STRH     r2,[r1,#0x16]
;;;1139         info_ptr->background = png_ptr->background;
002150  f8d03278          LDR      r3,[r0,#0x278]
002154  f8c1305a          STR      r3,[r1,#0x5a]
002158  f8d0327c          LDR      r3,[r0,#0x27c]
00215c  f8c1305e          STR      r3,[r1,#0x5e]
002160  f8b02280          LDRH     r2,[r0,#0x280]
002164  f8a12062          STRH     r2,[r1,#0x62]
                  |L1.8552|
;;;1140      }
;;;1141   #endif
;;;1142   
;;;1143   #if defined(PNG_READ_GAMMA_SUPPORTED)
;;;1144      if (png_ptr->transformations & PNG_GAMMA)
002168  f8b021b0          LDRH     r2,[r0,#0x1b0]
00216c  f4025200          AND      r2,r2,#0x2000
002170  b132              CBZ      r2,|L1.8576|
;;;1145      {
;;;1146   #ifdef PNG_FLOATING_POINT_SUPPORTED
;;;1147         info_ptr->gamma = png_ptr->gamma;
002172  f8d0229c          LDR      r2,[r0,#0x29c]
002176  628a              STR      r2,[r1,#0x28]
;;;1148   #endif
;;;1149   #ifdef PNG_FIXED_POINT_SUPPORTED
;;;1150         info_ptr->int_gamma = png_ptr->int_gamma;
002178  f8d02370          LDR      r2,[r0,#0x370]
00217c  f8c120fc          STR      r2,[r1,#0xfc]
                  |L1.8576|
;;;1151   #endif
;;;1152      }
;;;1153   #endif
;;;1154   
;;;1155   #if defined(PNG_READ_16_TO_8_SUPPORTED)
;;;1156      if ((png_ptr->transformations & PNG_16_TO_8) && (info_ptr->bit_depth == 16))
002180  f8b021b0          LDRH     r2,[r0,#0x1b0]
002184  f4026280          AND      r2,r2,#0x400
002188  b122              CBZ      r2,|L1.8596|
00218a  7e0a              LDRB     r2,[r1,#0x18]
00218c  2a10              CMP      r2,#0x10
00218e  d101              BNE      |L1.8596|
;;;1157         info_ptr->bit_depth = 8;
002190  2208              MOVS     r2,#8
002192  760a              STRB     r2,[r1,#0x18]
                  |L1.8596|
;;;1158   #endif
;;;1159   
;;;1160   #if defined(PNG_READ_GRAY_TO_RGB_SUPPORTED)
;;;1161      if (png_ptr->transformations & PNG_GRAY_TO_RGB)
002194  f8b021b0          LDRH     r2,[r0,#0x1b0]
002198  f4024280          AND      r2,r2,#0x4000
00219c  b11a              CBZ      r2,|L1.8614|
;;;1162         info_ptr->color_type |= PNG_COLOR_MASK_COLOR;
00219e  7e4a              LDRB     r2,[r1,#0x19]
0021a0  f0420202          ORR      r2,r2,#2
0021a4  764a              STRB     r2,[r1,#0x19]
                  |L1.8614|
;;;1163   #endif
;;;1164   
;;;1165   #if defined(PNG_READ_RGB_TO_GRAY_SUPPORTED)
;;;1166      if (png_ptr->transformations & PNG_RGB_TO_GRAY)
0021a6  f8d021b0          LDR      r2,[r0,#0x1b0]
0021aa  f40202c0          AND      r2,r2,#0x600000
0021ae  b11a              CBZ      r2,|L1.8632|
;;;1167         info_ptr->color_type &= ~PNG_COLOR_MASK_COLOR;
0021b0  7e4a              LDRB     r2,[r1,#0x19]
0021b2  f0220202          BIC      r2,r2,#2
0021b6  764a              STRB     r2,[r1,#0x19]
                  |L1.8632|
;;;1168   #endif
;;;1169   
;;;1170   #if defined(PNG_READ_DITHER_SUPPORTED)
;;;1171      if (png_ptr->transformations & PNG_DITHER)
0021b8  f89021b0          LDRB     r2,[r0,#0x1b0]
0021bc  f0020240          AND      r2,r2,#0x40
0021c0  b16a              CBZ      r2,|L1.8670|
;;;1172      {
;;;1173         if (((info_ptr->color_type == PNG_COLOR_TYPE_RGB) ||
0021c2  7e4a              LDRB     r2,[r1,#0x19]
0021c4  2a02              CMP      r2,#2
0021c6  d002              BEQ      |L1.8654|
;;;1174            (info_ptr->color_type == PNG_COLOR_TYPE_RGB_ALPHA)) &&
0021c8  7e4a              LDRB     r2,[r1,#0x19]
0021ca  2a06              CMP      r2,#6
0021cc  d107              BNE      |L1.8670|
                  |L1.8654|
;;;1175            png_ptr->palette_lookup && info_ptr->bit_depth == 8)
0021ce  f8d0232c          LDR      r2,[r0,#0x32c]
0021d2  b122              CBZ      r2,|L1.8670|
0021d4  7e0a              LDRB     r2,[r1,#0x18]
0021d6  2a08              CMP      r2,#8
0021d8  d101              BNE      |L1.8670|
;;;1176         {
;;;1177            info_ptr->color_type = PNG_COLOR_TYPE_PALETTE;
0021da  2203              MOVS     r2,#3
0021dc  764a              STRB     r2,[r1,#0x19]
                  |L1.8670|
;;;1178         }
;;;1179      }
;;;1180   #endif
;;;1181   
;;;1182   #if defined(PNG_READ_PACK_SUPPORTED)
;;;1183      if ((png_ptr->transformations & PNG_PACK) && (info_ptr->bit_depth < 8))
0021de  f89021b0          LDRB     r2,[r0,#0x1b0]
0021e2  f0020204          AND      r2,r2,#4
0021e6  b122              CBZ      r2,|L1.8690|
0021e8  7e0a              LDRB     r2,[r1,#0x18]
0021ea  2a08              CMP      r2,#8
0021ec  da01              BGE      |L1.8690|
;;;1184         info_ptr->bit_depth = 8;
0021ee  2208              MOVS     r2,#8
0021f0  760a              STRB     r2,[r1,#0x18]
                  |L1.8690|
;;;1185   #endif
;;;1186   
;;;1187      if (info_ptr->color_type == PNG_COLOR_TYPE_PALETTE)
0021f2  7e4a              LDRB     r2,[r1,#0x19]
0021f4  2a03              CMP      r2,#3
0021f6  d102              BNE      |L1.8702|
;;;1188         info_ptr->channels = 1;
0021f8  2201              MOVS     r2,#1
0021fa  774a              STRB     r2,[r1,#0x1d]
0021fc  e008              B        |L1.8720|
                  |L1.8702|
;;;1189      else if (info_ptr->color_type & PNG_COLOR_MASK_COLOR)
0021fe  7e4a              LDRB     r2,[r1,#0x19]
002200  f0020202          AND      r2,r2,#2
002204  b112              CBZ      r2,|L1.8716|
;;;1190         info_ptr->channels = 3;
002206  2203              MOVS     r2,#3
002208  774a              STRB     r2,[r1,#0x1d]
00220a  e001              B        |L1.8720|
                  |L1.8716|
;;;1191      else
;;;1192         info_ptr->channels = 1;
00220c  2201              MOVS     r2,#1
00220e  774a              STRB     r2,[r1,#0x1d]
                  |L1.8720|
;;;1193   
;;;1194   #if defined(PNG_READ_STRIP_ALPHA_SUPPORTED)
;;;1195      if (png_ptr->flags & PNG_FLAG_STRIP_ALPHA)
002210  f8d021ac          LDR      r2,[r0,#0x1ac]
002214  f4020280          AND      r2,r2,#0x400000
002218  b11a              CBZ      r2,|L1.8738|
;;;1196         info_ptr->color_type &= ~PNG_COLOR_MASK_ALPHA;
00221a  7e4a              LDRB     r2,[r1,#0x19]
00221c  f0220204          BIC      r2,r2,#4
002220  764a              STRB     r2,[r1,#0x19]
                  |L1.8738|
;;;1197   #endif
;;;1198   
;;;1199      if (info_ptr->color_type & PNG_COLOR_MASK_ALPHA)
002222  7e4a              LDRB     r2,[r1,#0x19]
002224  f0020204          AND      r2,r2,#4
002228  b112              CBZ      r2,|L1.8752|
;;;1200         info_ptr->channels++;
00222a  7f4a              LDRB     r2,[r1,#0x1d]
00222c  1c52              ADDS     r2,r2,#1
00222e  774a              STRB     r2,[r1,#0x1d]
                  |L1.8752|
;;;1201   
;;;1202   #if defined(PNG_READ_FILLER_SUPPORTED)
;;;1203      /* STRIP_ALPHA and FILLER allowed:  MASK_ALPHA bit stripped above */
;;;1204      if ((png_ptr->transformations & PNG_FILLER) &&
002230  f8b021b0          LDRH     r2,[r0,#0x1b0]
002234  f4024200          AND      r2,r2,#0x8000
002238  b182              CBZ      r2,|L1.8796|
;;;1205          ((info_ptr->color_type == PNG_COLOR_TYPE_RGB) ||
00223a  7e4a              LDRB     r2,[r1,#0x19]
00223c  2a02              CMP      r2,#2
00223e  d001              BEQ      |L1.8772|
;;;1206          (info_ptr->color_type == PNG_COLOR_TYPE_GRAY)))
002240  7e4a              LDRB     r2,[r1,#0x19]
002242  b95a              CBNZ     r2,|L1.8796|
                  |L1.8772|
;;;1207      {
;;;1208         info_ptr->channels++;
002244  7f4a              LDRB     r2,[r1,#0x1d]
002246  1c52              ADDS     r2,r2,#1
002248  774a              STRB     r2,[r1,#0x1d]
;;;1209         /* if adding a true alpha channel not just filler */
;;;1210   #if !defined(PNG_1_0_X)
;;;1211         if (png_ptr->transformations & PNG_ADD_ALPHA)
00224a  f8d021b0          LDR      r2,[r0,#0x1b0]
00224e  f0027280          AND      r2,r2,#0x1000000
002252  b11a              CBZ      r2,|L1.8796|
;;;1212           info_ptr->color_type |= PNG_COLOR_MASK_ALPHA;
002254  7e4a              LDRB     r2,[r1,#0x19]
002256  f0420204          ORR      r2,r2,#4
00225a  764a              STRB     r2,[r1,#0x19]
                  |L1.8796|
;;;1213   #endif
;;;1214      }
;;;1215   #endif
;;;1216   
;;;1217   #if defined(PNG_USER_TRANSFORM_PTR_SUPPORTED) && \
;;;1218   defined(PNG_READ_USER_TRANSFORM_SUPPORTED)
;;;1219      if(png_ptr->transformations & PNG_USER_TRANSFORM)
00225c  f8d021b0          LDR      r2,[r0,#0x1b0]
002260  f4021280          AND      r2,r2,#0x100000
002264  b17a              CBZ      r2,|L1.8838|
;;;1220        {
;;;1221          if(info_ptr->bit_depth < png_ptr->user_transform_depth)
002266  7e0a              LDRB     r2,[r1,#0x18]
002268  f89031a4          LDRB     r3,[r0,#0x1a4]
00226c  429a              CMP      r2,r3
00226e  da02              BGE      |L1.8822|
;;;1222            info_ptr->bit_depth = png_ptr->user_transform_depth;
002270  f89021a4          LDRB     r2,[r0,#0x1a4]
002274  760a              STRB     r2,[r1,#0x18]
                  |L1.8822|
;;;1223          if(info_ptr->channels < png_ptr->user_transform_channels)
002276  7f4a              LDRB     r2,[r1,#0x1d]
002278  f89031a5          LDRB     r3,[r0,#0x1a5]
00227c  429a              CMP      r2,r3
00227e  da02              BGE      |L1.8838|
;;;1224            info_ptr->channels = png_ptr->user_transform_channels;
002280  f89021a5          LDRB     r2,[r0,#0x1a5]
002284  774a              STRB     r2,[r1,#0x1d]
                  |L1.8838|
;;;1225        }
;;;1226   #endif
;;;1227   
;;;1228      info_ptr->pixel_depth = (png_byte)(info_ptr->channels *
002286  7f4a              LDRB     r2,[r1,#0x1d]
002288  7e0b              LDRB     r3,[r1,#0x18]
00228a  435a              MULS     r2,r3,r2
00228c  778a              STRB     r2,[r1,#0x1e]
;;;1229         info_ptr->bit_depth);
;;;1230   
;;;1231      info_ptr->rowbytes = PNG_ROWBYTES(info_ptr->pixel_depth,info_ptr->width);
00228e  7f8a              LDRB     r2,[r1,#0x1e]
002290  2a08              CMP      r2,#8
002292  db04              BLT      |L1.8862|
002294  7f8b              LDRB     r3,[r1,#0x1e]
002296  08db              LSRS     r3,r3,#3
002298  680a              LDR      r2,[r1,#0]
00229a  435a              MULS     r2,r3,r2
00229c  e004              B        |L1.8872|
                  |L1.8862|
00229e  7f8b              LDRB     r3,[r1,#0x1e]
0022a0  680a              LDR      r2,[r1,#0]
0022a2  435a              MULS     r2,r3,r2
0022a4  1dd2              ADDS     r2,r2,#7
0022a6  08d2              LSRS     r2,r2,#3
                  |L1.8872|
0022a8  60ca              STR      r2,[r1,#0xc]
;;;1232   
;;;1233   #if !defined(PNG_READ_EXPAND_SUPPORTED)
;;;1234      if(png_ptr)
;;;1235         return;
;;;1236   #endif
;;;1237   }
0022aa  4770              BX       lr
;;;1238   
                          ENDP

                  png_do_read_swap_alpha PROC
;;;1726   void /* PRIVATE */
;;;1727   png_do_read_swap_alpha(png_row_infop row_info, png_bytep row)
0022ac  b5f8              PUSH     {r3-r7,lr}
;;;1728   {
0022ae  460b              MOV      r3,r1
;;;1729      png_debug(1, "in png_do_read_swap_alpha\n");
;;;1730   #if defined(PNG_USELESS_TESTS_SUPPORTED)
;;;1731      if (row != NULL && row_info != NULL)
;;;1732   #endif
;;;1733      {
;;;1734         png_uint_32 row_width = row_info->width;
0022b0  6804              LDR      r4,[r0,#0]
;;;1735         if (row_info->color_type == PNG_COLOR_TYPE_RGB_ALPHA)
0022b2  7a01              LDRB     r1,[r0,#8]
0022b4  2906              CMP      r1,#6
0022b6  d16a              BNE      |L1.9102|
;;;1736         {
;;;1737            /* This converts from RGBA to ARGB */
;;;1738            if (row_info->bit_depth == 8)
0022b8  7a41              LDRB     r1,[r0,#9]
0022ba  2908              CMP      r1,#8
0022bc  d126              BNE      |L1.8972|
;;;1739            {
;;;1740               png_bytep sp = row + row_info->rowbytes;
0022be  6847              LDR      r7,[r0,#4]
0022c0  18f9              ADDS     r1,r7,r3
;;;1741               png_bytep dp = sp;
0022c2  460a              MOV      r2,r1
;;;1742               png_byte save;
;;;1743               png_uint_32 i;
;;;1744   
;;;1745               for (i = 0; i < row_width; i++)
0022c4  2600              MOVS     r6,#0
0022c6  e01e              B        |L1.8966|
                  |L1.8904|
;;;1746               {
;;;1747                  save = *(--sp);
0022c8  1e4f              SUBS     r7,r1,#1
0022ca  4639              MOV      r1,r7
0022cc  783d              LDRB     r5,[r7,#0]
;;;1748                  *(--dp) = *(--sp);
0022ce  1e4f              SUBS     r7,r1,#1
0022d0  4639              MOV      r1,r7
0022d2  f897c000          LDRB     r12,[r7,#0]
0022d6  1e57              SUBS     r7,r2,#1
0022d8  463a              MOV      r2,r7
0022da  f887c000          STRB     r12,[r7,#0]
;;;1749                  *(--dp) = *(--sp);
0022de  1e4f              SUBS     r7,r1,#1
0022e0  4639              MOV      r1,r7
0022e2  f897c000          LDRB     r12,[r7,#0]
0022e6  1e57              SUBS     r7,r2,#1
0022e8  463a              MOV      r2,r7
0022ea  f887c000          STRB     r12,[r7,#0]
;;;1750                  *(--dp) = *(--sp);
0022ee  1e4f              SUBS     r7,r1,#1
0022f0  4639              MOV      r1,r7
0022f2  f897c000          LDRB     r12,[r7,#0]
0022f6  1e57              SUBS     r7,r2,#1
0022f8  463a              MOV      r2,r7
0022fa  f887c000          STRB     r12,[r7,#0]
;;;1751                  *(--dp) = save;
0022fe  1e57              SUBS     r7,r2,#1
002300  463a              MOV      r2,r7
002302  703d              STRB     r5,[r7,#0]
002304  1c76              ADDS     r6,r6,#1              ;1745
                  |L1.8966|
002306  42a6              CMP      r6,r4                 ;1745
002308  d3de              BCC      |L1.8904|
;;;1752               }
;;;1753            }
00230a  e086              B        |L1.9242|
                  |L1.8972|
;;;1754            /* This converts from RRGGBBAA to AARRGGBB */
;;;1755            else
;;;1756            {
;;;1757               png_bytep sp = row + row_info->rowbytes;
00230c  6846              LDR      r6,[r0,#4]
00230e  18f1              ADDS     r1,r6,r3
;;;1758               png_bytep dp = sp;
002310  460a              MOV      r2,r1
;;;1759               png_byte save[2];
;;;1760               png_uint_32 i;
;;;1761   
;;;1762               for (i = 0; i < row_width; i++)
002312  2500              MOVS     r5,#0
002314  e038              B        |L1.9096|
                  |L1.8982|
;;;1763               {
;;;1764                  save[0] = *(--sp);
002316  1e4e              SUBS     r6,r1,#1
002318  4631              MOV      r1,r6
00231a  7836              LDRB     r6,[r6,#0]
00231c  f88d6000          STRB     r6,[sp,#0]
;;;1765                  save[1] = *(--sp);
002320  1e4e              SUBS     r6,r1,#1
002322  4631              MOV      r1,r6
002324  7836              LDRB     r6,[r6,#0]
002326  f88d6001          STRB     r6,[sp,#1]
;;;1766                  *(--dp) = *(--sp);
00232a  1e4e              SUBS     r6,r1,#1
00232c  4631              MOV      r1,r6
00232e  7837              LDRB     r7,[r6,#0]
002330  1e56              SUBS     r6,r2,#1
002332  4632              MOV      r2,r6
002334  7037              STRB     r7,[r6,#0]
;;;1767                  *(--dp) = *(--sp);
002336  1e4e              SUBS     r6,r1,#1
002338  4631              MOV      r1,r6
00233a  7837              LDRB     r7,[r6,#0]
00233c  1e56              SUBS     r6,r2,#1
00233e  4632              MOV      r2,r6
002340  7037              STRB     r7,[r6,#0]
;;;1768                  *(--dp) = *(--sp);
002342  1e4e              SUBS     r6,r1,#1
002344  4631              MOV      r1,r6
002346  7837              LDRB     r7,[r6,#0]
002348  1e56              SUBS     r6,r2,#1
00234a  4632              MOV      r2,r6
00234c  7037              STRB     r7,[r6,#0]
;;;1769                  *(--dp) = *(--sp);
00234e  1e4e              SUBS     r6,r1,#1
002350  4631              MOV      r1,r6
002352  7837              LDRB     r7,[r6,#0]
002354  1e56              SUBS     r6,r2,#1
002356  4632              MOV      r2,r6
002358  7037              STRB     r7,[r6,#0]
;;;1770                  *(--dp) = *(--sp);
00235a  1e4e              SUBS     r6,r1,#1
00235c  4631              MOV      r1,r6
00235e  7837              LDRB     r7,[r6,#0]
002360  1e56              SUBS     r6,r2,#1
002362  4632              MOV      r2,r6
002364  7037              STRB     r7,[r6,#0]
;;;1771                  *(--dp) = *(--sp);
002366  1e4e              SUBS     r6,r1,#1
002368  4631              MOV      r1,r6
00236a  7837              LDRB     r7,[r6,#0]
00236c  1e56              SUBS     r6,r2,#1
00236e  4632              MOV      r2,r6
002370  7037              STRB     r7,[r6,#0]
;;;1772                  *(--dp) = save[0];
002372  f89d7000          LDRB     r7,[sp,#0]
002376  1e56              SUBS     r6,r2,#1
002378  4632              MOV      r2,r6
00237a  7037              STRB     r7,[r6,#0]
;;;1773                  *(--dp) = save[1];
00237c  f89d7001          LDRB     r7,[sp,#1]
002380  1e56              SUBS     r6,r2,#1
002382  4632              MOV      r2,r6
002384  7037              STRB     r7,[r6,#0]
002386  1c6d              ADDS     r5,r5,#1              ;1762
                  |L1.9096|
002388  42a5              CMP      r5,r4                 ;1762
00238a  d3c4              BCC      |L1.8982|
;;;1774               }
;;;1775            }
00238c  e045              B        |L1.9242|
                  |L1.9102|
;;;1776         }
;;;1777         else if (row_info->color_type == PNG_COLOR_TYPE_GRAY_ALPHA)
00238e  7a01              LDRB     r1,[r0,#8]
002390  2904              CMP      r1,#4
002392  d142              BNE      |L1.9242|
;;;1778         {
;;;1779            /* This converts from GA to AG */
;;;1780            if (row_info->bit_depth == 8)
002394  7a41              LDRB     r1,[r0,#9]
002396  2908              CMP      r1,#8
002398  d116              BNE      |L1.9160|
;;;1781            {
;;;1782               png_bytep sp = row + row_info->rowbytes;
00239a  6847              LDR      r7,[r0,#4]
00239c  18f9              ADDS     r1,r7,r3
;;;1783               png_bytep dp = sp;
00239e  460d              MOV      r5,r1
;;;1784               png_byte save;
;;;1785               png_uint_32 i;
;;;1786   
;;;1787               for (i = 0; i < row_width; i++)
0023a0  2200              MOVS     r2,#0
0023a2  e00e              B        |L1.9154|
                  |L1.9124|
;;;1788               {
;;;1789                  save = *(--sp);
0023a4  1e4f              SUBS     r7,r1,#1
0023a6  4639              MOV      r1,r7
0023a8  783e              LDRB     r6,[r7,#0]
;;;1790                  *(--dp) = *(--sp);
0023aa  1e4f              SUBS     r7,r1,#1
0023ac  4639              MOV      r1,r7
0023ae  f897c000          LDRB     r12,[r7,#0]
0023b2  1e6f              SUBS     r7,r5,#1
0023b4  463d              MOV      r5,r7
0023b6  f887c000          STRB     r12,[r7,#0]
;;;1791                  *(--dp) = save;
0023ba  1e6f              SUBS     r7,r5,#1
0023bc  463d              MOV      r5,r7
0023be  703e              STRB     r6,[r7,#0]
0023c0  1c52              ADDS     r2,r2,#1              ;1787
                  |L1.9154|
0023c2  42a2              CMP      r2,r4                 ;1787
0023c4  d3ee              BCC      |L1.9124|
;;;1792               }
;;;1793            }
0023c6  e028              B        |L1.9242|
                  |L1.9160|
;;;1794            /* This converts from GGAA to AAGG */
;;;1795            else
;;;1796            {
;;;1797               png_bytep sp = row + row_info->rowbytes;
0023c8  6846              LDR      r6,[r0,#4]
0023ca  18f1              ADDS     r1,r6,r3
;;;1798               png_bytep dp = sp;
0023cc  460a              MOV      r2,r1
;;;1799               png_byte save[2];
;;;1800               png_uint_32 i;
;;;1801   
;;;1802               for (i = 0; i < row_width; i++)
0023ce  2500              MOVS     r5,#0
0023d0  e020              B        |L1.9236|
                  |L1.9170|
;;;1803               {
;;;1804                  save[0] = *(--sp);
0023d2  1e4e              SUBS     r6,r1,#1
0023d4  4631              MOV      r1,r6
0023d6  7836              LDRB     r6,[r6,#0]
0023d8  f88d6000          STRB     r6,[sp,#0]
;;;1805                  save[1] = *(--sp);
0023dc  1e4e              SUBS     r6,r1,#1
0023de  4631              MOV      r1,r6
0023e0  7836              LDRB     r6,[r6,#0]
0023e2  f88d6001          STRB     r6,[sp,#1]
;;;1806                  *(--dp) = *(--sp);
0023e6  1e4e              SUBS     r6,r1,#1
0023e8  4631              MOV      r1,r6
0023ea  7837              LDRB     r7,[r6,#0]
0023ec  1e56              SUBS     r6,r2,#1
0023ee  4632              MOV      r2,r6
0023f0  7037              STRB     r7,[r6,#0]
;;;1807                  *(--dp) = *(--sp);
0023f2  1e4e              SUBS     r6,r1,#1
0023f4  4631              MOV      r1,r6
0023f6  7837              LDRB     r7,[r6,#0]
0023f8  1e56              SUBS     r6,r2,#1
0023fa  4632              MOV      r2,r6
0023fc  7037              STRB     r7,[r6,#0]
;;;1808                  *(--dp) = save[0];
0023fe  f89d7000          LDRB     r7,[sp,#0]
002402  1e56              SUBS     r6,r2,#1
002404  4632              MOV      r2,r6
002406  7037              STRB     r7,[r6,#0]
;;;1809                  *(--dp) = save[1];
002408  f89d7001          LDRB     r7,[sp,#1]
00240c  1e56              SUBS     r6,r2,#1
00240e  4632              MOV      r2,r6
002410  7037              STRB     r7,[r6,#0]
002412  1c6d              ADDS     r5,r5,#1              ;1802
                  |L1.9236|
002414  42a5              CMP      r5,r4                 ;1802
002416  d3dc              BCC      |L1.9170|
;;;1810               }
;;;1811            }
002418  bf00              NOP      
                  |L1.9242|
;;;1812         }
;;;1813      }
;;;1814   }
00241a  bdf8              POP      {r3-r7,pc}
;;;1815   #endif
                          ENDP

                  png_do_read_invert_alpha PROC
;;;1818   void /* PRIVATE */
;;;1819   png_do_read_invert_alpha(png_row_infop row_info, png_bytep row)
00241c  b5f0              PUSH     {r4-r7,lr}
;;;1820   {
;;;1821      png_debug(1, "in png_do_read_invert_alpha\n");
;;;1822   #if defined(PNG_USELESS_TESTS_SUPPORTED)
;;;1823      if (row != NULL && row_info != NULL)
;;;1824   #endif
;;;1825      {
;;;1826         png_uint_32 row_width = row_info->width;
00241e  6803              LDR      r3,[r0,#0]
;;;1827         if (row_info->color_type == PNG_COLOR_TYPE_RGB_ALPHA)
002420  7a02              LDRB     r2,[r0,#8]
002422  2a06              CMP      r2,#6
002424  d130              BNE      |L1.9352|
;;;1828         {
;;;1829            /* This inverts the alpha channel in RGBA */
;;;1830            if (row_info->bit_depth == 8)
002426  7a42              LDRB     r2,[r0,#9]
002428  2a08              CMP      r2,#8
00242a  d112              BNE      |L1.9298|
;;;1831            {
;;;1832               png_bytep sp = row + row_info->rowbytes;
00242c  6846              LDR      r6,[r0,#4]
00242e  1872              ADDS     r2,r6,r1
;;;1833               png_bytep dp = sp;
002430  4615              MOV      r5,r2
;;;1834               png_uint_32 i;
;;;1835   
;;;1836               for (i = 0; i < row_width; i++)
002432  2400              MOVS     r4,#0
002434  e00a              B        |L1.9292|
                  |L1.9270|
;;;1837               {
;;;1838                  *(--dp) = (png_byte)(255 - *(--sp));
002436  1e56              SUBS     r6,r2,#1
002438  4632              MOV      r2,r6
00243a  7836              LDRB     r6,[r6,#0]
00243c  f1c607ff          RSB      r7,r6,#0xff
002440  1e6e              SUBS     r6,r5,#1
002442  4635              MOV      r5,r6
002444  7037              STRB     r7,[r6,#0]
;;;1839   
;;;1840   /*             This does nothing:
;;;1841                  *(--dp) = *(--sp);
;;;1842                  *(--dp) = *(--sp);
;;;1843                  *(--dp) = *(--sp);
;;;1844                  We can replace it with:
;;;1845   */
;;;1846                  sp-=3;
002446  1ed2              SUBS     r2,r2,#3
;;;1847                  dp=sp;
002448  4615              MOV      r5,r2
00244a  1c64              ADDS     r4,r4,#1              ;1836
                  |L1.9292|
00244c  429c              CMP      r4,r3                 ;1836
00244e  d3f2              BCC      |L1.9270|
;;;1848               }
;;;1849            }
002450  e052              B        |L1.9464|
                  |L1.9298|
;;;1850            /* This inverts the alpha channel in RRGGBBAA */
;;;1851            else
;;;1852            {
;;;1853               png_bytep sp = row + row_info->rowbytes;
002452  6846              LDR      r6,[r0,#4]
002454  1872              ADDS     r2,r6,r1
;;;1854               png_bytep dp = sp;
002456  4614              MOV      r4,r2
;;;1855               png_uint_32 i;
;;;1856   
;;;1857               for (i = 0; i < row_width; i++)
002458  2500              MOVS     r5,#0
00245a  e012              B        |L1.9346|
                  |L1.9308|
;;;1858               {
;;;1859                  *(--dp) = (png_byte)(255 - *(--sp));
00245c  1e56              SUBS     r6,r2,#1
00245e  4632              MOV      r2,r6
002460  7836              LDRB     r6,[r6,#0]
002462  f1c607ff          RSB      r7,r6,#0xff
002466  1e66              SUBS     r6,r4,#1
002468  4634              MOV      r4,r6
00246a  7037              STRB     r7,[r6,#0]
;;;1860                  *(--dp) = (png_byte)(255 - *(--sp));
00246c  1e56              SUBS     r6,r2,#1
00246e  4632              MOV      r2,r6
002470  7836              LDRB     r6,[r6,#0]
002472  f1c607ff          RSB      r7,r6,#0xff
002476  1e66              SUBS     r6,r4,#1
002478  4634              MOV      r4,r6
00247a  7037              STRB     r7,[r6,#0]
;;;1861   
;;;1862   /*             This does nothing:
;;;1863                  *(--dp) = *(--sp);
;;;1864                  *(--dp) = *(--sp);
;;;1865                  *(--dp) = *(--sp);
;;;1866                  *(--dp) = *(--sp);
;;;1867                  *(--dp) = *(--sp);
;;;1868                  *(--dp) = *(--sp);
;;;1869                  We can replace it with:
;;;1870   */
;;;1871                  sp-=6;
00247c  1f92              SUBS     r2,r2,#6
;;;1872                  dp=sp;
00247e  4614              MOV      r4,r2
002480  1c6d              ADDS     r5,r5,#1              ;1857
                  |L1.9346|
002482  429d              CMP      r5,r3                 ;1857
002484  d3ea              BCC      |L1.9308|
;;;1873               }
;;;1874            }
002486  e037              B        |L1.9464|
                  |L1.9352|
;;;1875         }
;;;1876         else if (row_info->color_type == PNG_COLOR_TYPE_GRAY_ALPHA)
002488  7a02              LDRB     r2,[r0,#8]
00248a  2a04              CMP      r2,#4
00248c  d134              BNE      |L1.9464|
;;;1877         {
;;;1878            /* This inverts the alpha channel in GA */
;;;1879            if (row_info->bit_depth == 8)
00248e  7a42              LDRB     r2,[r0,#9]
002490  2a08              CMP      r2,#8
002492  d116              BNE      |L1.9410|
;;;1880            {
;;;1881               png_bytep sp = row + row_info->rowbytes;
002494  6846              LDR      r6,[r0,#4]
002496  1872              ADDS     r2,r6,r1
;;;1882               png_bytep dp = sp;
002498  4614              MOV      r4,r2
;;;1883               png_uint_32 i;
;;;1884   
;;;1885               for (i = 0; i < row_width; i++)
00249a  2500              MOVS     r5,#0
00249c  e00e              B        |L1.9404|
                  |L1.9374|
;;;1886               {
;;;1887                  *(--dp) = (png_byte)(255 - *(--sp));
00249e  1e56              SUBS     r6,r2,#1
0024a0  4632              MOV      r2,r6
0024a2  7836              LDRB     r6,[r6,#0]
0024a4  f1c607ff          RSB      r7,r6,#0xff
0024a8  1e66              SUBS     r6,r4,#1
0024aa  4634              MOV      r4,r6
0024ac  7037              STRB     r7,[r6,#0]
;;;1888                  *(--dp) = *(--sp);
0024ae  1e56              SUBS     r6,r2,#1
0024b0  4632              MOV      r2,r6
0024b2  7837              LDRB     r7,[r6,#0]
0024b4  1e66              SUBS     r6,r4,#1
0024b6  4634              MOV      r4,r6
0024b8  7037              STRB     r7,[r6,#0]
0024ba  1c6d              ADDS     r5,r5,#1              ;1885
                  |L1.9404|
0024bc  429d              CMP      r5,r3                 ;1885
0024be  d3ee              BCC      |L1.9374|
;;;1889               }
;;;1890            }
0024c0  e01a              B        |L1.9464|
                  |L1.9410|
;;;1891            /* This inverts the alpha channel in GGAA */
;;;1892            else
;;;1893            {
;;;1894               png_bytep sp  = row + row_info->rowbytes;
0024c2  6846              LDR      r6,[r0,#4]
0024c4  1872              ADDS     r2,r6,r1
;;;1895               png_bytep dp = sp;
0024c6  4614              MOV      r4,r2
;;;1896               png_uint_32 i;
;;;1897   
;;;1898               for (i = 0; i < row_width; i++)
0024c8  2500              MOVS     r5,#0
0024ca  e012              B        |L1.9458|
                  |L1.9420|
;;;1899               {
;;;1900                  *(--dp) = (png_byte)(255 - *(--sp));
0024cc  1e56              SUBS     r6,r2,#1
0024ce  4632              MOV      r2,r6
0024d0  7836              LDRB     r6,[r6,#0]
0024d2  f1c607ff          RSB      r7,r6,#0xff
0024d6  1e66              SUBS     r6,r4,#1
0024d8  4634              MOV      r4,r6
0024da  7037              STRB     r7,[r6,#0]
;;;1901                  *(--dp) = (png_byte)(255 - *(--sp));
0024dc  1e56              SUBS     r6,r2,#1
0024de  4632              MOV      r2,r6
0024e0  7836              LDRB     r6,[r6,#0]
0024e2  f1c607ff          RSB      r7,r6,#0xff
0024e6  1e66              SUBS     r6,r4,#1
0024e8  4634              MOV      r4,r6
0024ea  7037              STRB     r7,[r6,#0]
;;;1902   /*
;;;1903                  *(--dp) = *(--sp);
;;;1904                  *(--dp) = *(--sp);
;;;1905   */
;;;1906                  sp-=2;
0024ec  1e92              SUBS     r2,r2,#2
;;;1907                  dp=sp;
0024ee  4614              MOV      r4,r2
0024f0  1c6d              ADDS     r5,r5,#1              ;1898
                  |L1.9458|
0024f2  429d              CMP      r5,r3                 ;1898
0024f4  d3ea              BCC      |L1.9420|
;;;1908               }
;;;1909            }
0024f6  bf00              NOP      
                  |L1.9464|
;;;1910         }
;;;1911      }
;;;1912   }
0024f8  bdf0              POP      {r4-r7,pc}
;;;1913   #endif
                          ENDP

                  png_do_read_filler PROC
;;;1917   void /* PRIVATE */
;;;1918   png_do_read_filler(png_row_infop row_info, png_bytep row,
0024fa  e92d47f0          PUSH     {r4-r10,lr}
;;;1919      png_uint_32 filler, png_uint_32 flags)
;;;1920   {
0024fe  4604              MOV      r4,r0
002500  460d              MOV      r5,r1
002502  4694              MOV      r12,r2
002504  461f              MOV      r7,r3
;;;1921      png_uint_32 i;
;;;1922      png_uint_32 row_width = row_info->width;
002506  6820              LDR      r0,[r4,#0]
;;;1923   
;;;1924      png_byte hi_filler = (png_byte)((filler>>8) & 0xff);
002508  f3cc2807          UBFX     r8,r12,#8,#8
;;;1925      png_byte lo_filler = (png_byte)(filler & 0xff);
00250c  f00c02ff          AND      r2,r12,#0xff
;;;1926   
;;;1927      png_debug(1, "in png_do_read_filler\n");
;;;1928      if (
002510  7a23              LDRB     r3,[r4,#8]
002512  2b00              CMP      r3,#0
002514  d17e              BNE      |L1.9748|
;;;1929   #if defined(PNG_USELESS_TESTS_SUPPORTED)
;;;1930          row != NULL  && row_info != NULL &&
;;;1931   #endif
;;;1932          row_info->color_type == PNG_COLOR_TYPE_GRAY)
;;;1933      {
;;;1934         if(row_info->bit_depth == 8)
002516  7a63              LDRB     r3,[r4,#9]
002518  2b08              CMP      r3,#8
00251a  d14d              BNE      |L1.9656|
;;;1935         {
;;;1936            /* This changes the data from G to GX */
;;;1937            if (flags & PNG_FLAG_FILLER_AFTER)
00251c  f0070380          AND      r3,r7,#0x80
002520  b33b              CBZ      r3,|L1.9586|
;;;1938            {
;;;1939               png_bytep sp = row + (png_size_t)row_width;
002522  182e              ADDS     r6,r5,r0
;;;1940               png_bytep dp =  sp + (png_size_t)row_width;
002524  1833              ADDS     r3,r6,r0
;;;1941               for (i = 1; i < row_width; i++)
002526  2101              MOVS     r1,#1
002528  e00f              B        |L1.9546|
                  |L1.9514|
;;;1942               {
;;;1943                  *(--dp) = lo_filler;
00252a  f1a30901          SUB      r9,r3,#1
00252e  464b              MOV      r3,r9
002530  f8892000          STRB     r2,[r9,#0]
;;;1944                  *(--dp) = *(--sp);
002534  f1a60901          SUB      r9,r6,#1
002538  464e              MOV      r6,r9
00253a  f899a000          LDRB     r10,[r9,#0]
00253e  f1a30901          SUB      r9,r3,#1
002542  464b              MOV      r3,r9
002544  f889a000          STRB     r10,[r9,#0]
002548  1c49              ADDS     r1,r1,#1              ;1941
                  |L1.9546|
00254a  4281              CMP      r1,r0                 ;1941
00254c  d3ed              BCC      |L1.9514|
;;;1945               }
;;;1946               *(--dp) = lo_filler;
00254e  f1a30901          SUB      r9,r3,#1
002552  464b              MOV      r3,r9
002554  f8892000          STRB     r2,[r9,#0]
;;;1947               row_info->channels = 2;
002558  f04f0902          MOV      r9,#2
00255c  f884900a          STRB     r9,[r4,#0xa]
;;;1948               row_info->pixel_depth = 16;
002560  f04f0910          MOV      r9,#0x10
002564  f884900b          STRB     r9,[r4,#0xb]
;;;1949               row_info->rowbytes = row_width * 2;
002568  ea4f0940          LSL      r9,r0,#1
00256c  f8c49004          STR      r9,[r4,#4]
                  |L1.9584|
;;;1950            }
002570  e1f0              B        |L1.10580|
                  |L1.9586|
;;;1951         /* This changes the data from G to XG */
;;;1952            else
;;;1953            {
;;;1954               png_bytep sp = row + (png_size_t)row_width;
002572  182b              ADDS     r3,r5,r0
;;;1955               png_bytep dp = sp  + (png_size_t)row_width;
002574  181e              ADDS     r6,r3,r0
;;;1956               for (i = 0; i < row_width; i++)
002576  2100              MOVS     r1,#0
002578  e00f              B        |L1.9626|
                  |L1.9594|
;;;1957               {
;;;1958                  *(--dp) = *(--sp);
00257a  f1a30901          SUB      r9,r3,#1
00257e  464b              MOV      r3,r9
002580  f899a000          LDRB     r10,[r9,#0]
002584  f1a60901          SUB      r9,r6,#1
002588  464e              MOV      r6,r9
00258a  f889a000          STRB     r10,[r9,#0]
;;;1959                  *(--dp) = lo_filler;
00258e  f1a60901          SUB      r9,r6,#1
002592  464e              MOV      r6,r9
002594  f8892000          STRB     r2,[r9,#0]
002598  1c49              ADDS     r1,r1,#1              ;1956
                  |L1.9626|
00259a  4281              CMP      r1,r0                 ;1956
00259c  d3ed              BCC      |L1.9594|
;;;1960               }
;;;1961               row_info->channels = 2;
00259e  f04f0902          MOV      r9,#2
0025a2  f884900a          STRB     r9,[r4,#0xa]
;;;1962               row_info->pixel_depth = 16;
0025a6  f04f0910          MOV      r9,#0x10
0025aa  f884900b          STRB     r9,[r4,#0xb]
;;;1963               row_info->rowbytes = row_width * 2;
0025ae  ea4f0940          LSL      r9,r0,#1
0025b2  f8c49004          STR      r9,[r4,#4]
;;;1964            }
0025b6  e1cd              B        |L1.10580|
                  |L1.9656|
;;;1965         }
;;;1966         else if(row_info->bit_depth == 16)
0025b8  7a63              LDRB     r3,[r4,#9]
0025ba  2b10              CMP      r3,#0x10
0025bc  d1d8              BNE      |L1.9584|
;;;1967         {
;;;1968            /* This changes the data from GG to GGXX */
;;;1969            if (flags & PNG_FLAG_FILLER_AFTER)
0025be  f0070380          AND      r3,r7,#0x80
0025c2  b343              CBZ      r3,|L1.9750|
;;;1970            {
;;;1971               png_bytep sp = row + (png_size_t)row_width * 2;
0025c4  eb050640          ADD      r6,r5,r0,LSL #1
;;;1972               png_bytep dp = sp  + (png_size_t)row_width * 2;
0025c8  eb060340          ADD      r3,r6,r0,LSL #1
;;;1973               for (i = 1; i < row_width; i++)
0025cc  2101              MOVS     r1,#1
0025ce  e01e              B        |L1.9742|
                  |L1.9680|
;;;1974               {
;;;1975                  *(--dp) = hi_filler;
0025d0  f1a30901          SUB      r9,r3,#1
0025d4  464b              MOV      r3,r9
0025d6  f8898000          STRB     r8,[r9,#0]
;;;1976                  *(--dp) = lo_filler;
0025da  f1a30901          SUB      r9,r3,#1
0025de  464b              MOV      r3,r9
0025e0  f8892000          STRB     r2,[r9,#0]
;;;1977                  *(--dp) = *(--sp);
0025e4  f1a60901          SUB      r9,r6,#1
0025e8  464e              MOV      r6,r9
0025ea  f899a000          LDRB     r10,[r9,#0]
0025ee  f1a30901          SUB      r9,r3,#1
0025f2  464b              MOV      r3,r9
0025f4  f889a000          STRB     r10,[r9,#0]
;;;1978                  *(--dp) = *(--sp);
0025f8  f1a60901          SUB      r9,r6,#1
0025fc  464e              MOV      r6,r9
0025fe  f899a000          LDRB     r10,[r9,#0]
002602  f1a30901          SUB      r9,r3,#1
002606  464b              MOV      r3,r9
002608  f889a000          STRB     r10,[r9,#0]
00260c  1c49              ADDS     r1,r1,#1              ;1973
                  |L1.9742|
00260e  4281              CMP      r1,r0                 ;1973
002610  d3de              BCC      |L1.9680|
;;;1979               }
;;;1980               *(--dp) = hi_filler;
002612  e001              B        |L1.9752|
                  |L1.9748|
002614  e04b              B        |L1.9902|
                  |L1.9750|
002616  e016              B        |L1.9798|
                  |L1.9752|
002618  f1a30901          SUB      r9,r3,#1
00261c  464b              MOV      r3,r9
00261e  f8898000          STRB     r8,[r9,#0]
;;;1981               *(--dp) = lo_filler;
002622  f1a30901          SUB      r9,r3,#1
002626  464b              MOV      r3,r9
002628  f8892000          STRB     r2,[r9,#0]
;;;1982               row_info->channels = 2;
00262c  f04f0902          MOV      r9,#2
002630  f884900a          STRB     r9,[r4,#0xa]
;;;1983               row_info->pixel_depth = 32;
002634  f04f0920          MOV      r9,#0x20
002638  f884900b          STRB     r9,[r4,#0xb]
;;;1984               row_info->rowbytes = row_width * 4;
00263c  ea4f0980          LSL      r9,r0,#2
002640  f8c49004          STR      r9,[r4,#4]
                  |L1.9796|
;;;1985            }
002644  e186              B        |L1.10580|
                  |L1.9798|
;;;1986            /* This changes the data from GG to XXGG */
;;;1987            else
;;;1988            {
;;;1989               png_bytep sp = row + (png_size_t)row_width * 2;
002646  eb050640          ADD      r6,r5,r0,LSL #1
;;;1990               png_bytep dp = sp  + (png_size_t)row_width * 2;
00264a  eb060340          ADD      r3,r6,r0,LSL #1
;;;1991               for (i = 0; i < row_width; i++)
00264e  2100              MOVS     r1,#0
002650  e01e              B        |L1.9872|
                  |L1.9810|
;;;1992               {
;;;1993                  *(--dp) = *(--sp);
002652  f1a60901          SUB      r9,r6,#1
002656  464e              MOV      r6,r9
002658  f899a000          LDRB     r10,[r9,#0]
00265c  f1a30901          SUB      r9,r3,#1
002660  464b              MOV      r3,r9
002662  f889a000          STRB     r10,[r9,#0]
;;;1994                  *(--dp) = *(--sp);
002666  f1a60901          SUB      r9,r6,#1
00266a  464e              MOV      r6,r9
00266c  f899a000          LDRB     r10,[r9,#0]
002670  f1a30901          SUB      r9,r3,#1
002674  464b              MOV      r3,r9
002676  f889a000          STRB     r10,[r9,#0]
;;;1995                  *(--dp) = hi_filler;
00267a  f1a30901          SUB      r9,r3,#1
00267e  464b              MOV      r3,r9
002680  f8898000          STRB     r8,[r9,#0]
;;;1996                  *(--dp) = lo_filler;
002684  f1a30901          SUB      r9,r3,#1
002688  464b              MOV      r3,r9
00268a  f8892000          STRB     r2,[r9,#0]
00268e  1c49              ADDS     r1,r1,#1              ;1991
                  |L1.9872|
002690  4281              CMP      r1,r0                 ;1991
002692  d3de              BCC      |L1.9810|
;;;1997               }
;;;1998               row_info->channels = 2;
002694  f04f0902          MOV      r9,#2
002698  f884900a          STRB     r9,[r4,#0xa]
;;;1999               row_info->pixel_depth = 32;
00269c  f04f0920          MOV      r9,#0x20
0026a0  f884900b          STRB     r9,[r4,#0xb]
;;;2000               row_info->rowbytes = row_width * 4;
0026a4  ea4f0980          LSL      r9,r0,#2
0026a8  f8c49004          STR      r9,[r4,#4]
;;;2001            }
0026ac  e152              B        |L1.10580|
                  |L1.9902|
;;;2002         }
;;;2003      } /* COLOR_TYPE == GRAY */
;;;2004      else if (row_info->color_type == PNG_COLOR_TYPE_RGB)
0026ae  7a23              LDRB     r3,[r4,#8]
0026b0  2b02              CMP      r3,#2
0026b2  d1c7              BNE      |L1.9796|
;;;2005      {
;;;2006         if(row_info->bit_depth == 8)
0026b4  7a63              LDRB     r3,[r4,#9]
0026b6  2b08              CMP      r3,#8
0026b8  d17e              BNE      |L1.10168|
;;;2007         {
;;;2008            /* This changes the data from RGB to RGBX */
;;;2009            if (flags & PNG_FLAG_FILLER_AFTER)
0026ba  f0070380          AND      r3,r7,#0x80
0026be  b3e3              CBZ      r3,|L1.10042|
;;;2010            {
;;;2011               png_bytep sp = row + (png_size_t)row_width * 3;
0026c0  eb000940          ADD      r9,r0,r0,LSL #1
0026c4  eb090605          ADD      r6,r9,r5
;;;2012               png_bytep dp = sp  + (png_size_t)row_width;
0026c8  1833              ADDS     r3,r6,r0
;;;2013               for (i = 1; i < row_width; i++)
0026ca  2101              MOVS     r1,#1
0026cc  e023              B        |L1.10006|
                  |L1.9934|
;;;2014               {
;;;2015                  *(--dp) = lo_filler;
0026ce  f1a30901          SUB      r9,r3,#1
0026d2  464b              MOV      r3,r9
0026d4  f8892000          STRB     r2,[r9,#0]
;;;2016                  *(--dp) = *(--sp);
0026d8  f1a60901          SUB      r9,r6,#1
0026dc  464e              MOV      r6,r9
0026de  f899a000          LDRB     r10,[r9,#0]
0026e2  f1a30901          SUB      r9,r3,#1
0026e6  464b              MOV      r3,r9
0026e8  f889a000          STRB     r10,[r9,#0]
;;;2017                  *(--dp) = *(--sp);
0026ec  f1a60901          SUB      r9,r6,#1
0026f0  464e              MOV      r6,r9
0026f2  f899a000          LDRB     r10,[r9,#0]
0026f6  f1a30901          SUB      r9,r3,#1
0026fa  464b              MOV      r3,r9
0026fc  f889a000          STRB     r10,[r9,#0]
;;;2018                  *(--dp) = *(--sp);
002700  f1a60901          SUB      r9,r6,#1
002704  464e              MOV      r6,r9
002706  f899a000          LDRB     r10,[r9,#0]
00270a  f1a30901          SUB      r9,r3,#1
00270e  464b              MOV      r3,r9
002710  f889a000          STRB     r10,[r9,#0]
002714  1c49              ADDS     r1,r1,#1              ;2013
                  |L1.10006|
002716  4281              CMP      r1,r0                 ;2013
002718  d3d9              BCC      |L1.9934|
;;;2019               }
;;;2020               *(--dp) = lo_filler;
00271a  f1a30901          SUB      r9,r3,#1
00271e  464b              MOV      r3,r9
002720  f8892000          STRB     r2,[r9,#0]
;;;2021               row_info->channels = 4;
002724  f04f0904          MOV      r9,#4
002728  f884900a          STRB     r9,[r4,#0xa]
;;;2022               row_info->pixel_depth = 32;
00272c  f04f0920          MOV      r9,#0x20
002730  f884900b          STRB     r9,[r4,#0xb]
;;;2023               row_info->rowbytes = row_width * 4;
002734  ea4f0980          LSL      r9,r0,#2
002738  e000              B        |L1.10044|
                  |L1.10042|
00273a  e002              B        |L1.10050|
                  |L1.10044|
00273c  f8c49004          STR      r9,[r4,#4]
                  |L1.10048|
;;;2024            }
002740  e108              B        |L1.10580|
                  |L1.10050|
;;;2025         /* This changes the data from RGB to XRGB */
;;;2026            else
;;;2027            {
;;;2028               png_bytep sp = row + (png_size_t)row_width * 3;
002742  eb000940          ADD      r9,r0,r0,LSL #1
002746  eb090305          ADD      r3,r9,r5
;;;2029               png_bytep dp = sp + (png_size_t)row_width;
00274a  181e              ADDS     r6,r3,r0
;;;2030               for (i = 0; i < row_width; i++)
00274c  2100              MOVS     r1,#0
00274e  e023              B        |L1.10136|
                  |L1.10064|
;;;2031               {
;;;2032                  *(--dp) = *(--sp);
002750  f1a30901          SUB      r9,r3,#1
002754  464b              MOV      r3,r9
002756  f899a000          LDRB     r10,[r9,#0]
00275a  f1a60901          SUB      r9,r6,#1
00275e  464e              MOV      r6,r9
002760  f889a000          STRB     r10,[r9,#0]
;;;2033                  *(--dp) = *(--sp);
002764  f1a30901          SUB      r9,r3,#1
002768  464b              MOV      r3,r9
00276a  f899a000          LDRB     r10,[r9,#0]
00276e  f1a60901          SUB      r9,r6,#1
002772  464e              MOV      r6,r9
002774  f889a000          STRB     r10,[r9,#0]
;;;2034                  *(--dp) = *(--sp);
002778  f1a30901          SUB      r9,r3,#1
00277c  464b              MOV      r3,r9
00277e  f899a000          LDRB     r10,[r9,#0]
002782  f1a60901          SUB      r9,r6,#1
002786  464e              MOV      r6,r9
002788  f889a000          STRB     r10,[r9,#0]
;;;2035                  *(--dp) = lo_filler;
00278c  f1a60901          SUB      r9,r6,#1
002790  464e              MOV      r6,r9
002792  f8892000          STRB     r2,[r9,#0]
002796  1c49              ADDS     r1,r1,#1              ;2030
                  |L1.10136|
002798  4281              CMP      r1,r0                 ;2030
00279a  d3d9              BCC      |L1.10064|
;;;2036               }
;;;2037               row_info->channels = 4;
00279c  f04f0904          MOV      r9,#4
0027a0  f884900a          STRB     r9,[r4,#0xa]
;;;2038               row_info->pixel_depth = 32;
0027a4  f04f0920          MOV      r9,#0x20
0027a8  f884900b          STRB     r9,[r4,#0xb]
;;;2039               row_info->rowbytes = row_width * 4;
0027ac  ea4f0980          LSL      r9,r0,#2
0027b0  f8c49004          STR      r9,[r4,#4]
;;;2040            }
0027b4  e0ce              B        |L1.10580|
0027b6  e7ff              B        |L1.10168|
                  |L1.10168|
;;;2041         }
;;;2042         else if(row_info->bit_depth == 16)
0027b8  7a63              LDRB     r3,[r4,#9]
0027ba  2b10              CMP      r3,#0x10
0027bc  d1c0              BNE      |L1.10048|
;;;2043         {
;;;2044            /* This changes the data from RRGGBB to RRGGBBXX */
;;;2045            if (flags & PNG_FLAG_FILLER_AFTER)
0027be  f0070380          AND      r3,r7,#0x80
0027c2  b3eb              CBZ      r3,|L1.10304|
;;;2046            {
;;;2047               png_bytep sp = row + (png_size_t)row_width * 6;
0027c4  eb000940          ADD      r9,r0,r0,LSL #1
0027c8  eb050649          ADD      r6,r5,r9,LSL #1
;;;2048               png_bytep dp = sp  + (png_size_t)row_width * 2;
0027cc  eb060340          ADD      r3,r6,r0,LSL #1
;;;2049               for (i = 1; i < row_width; i++)
0027d0  2101              MOVS     r1,#1
0027d2  e048              B        |L1.10342|
                  |L1.10196|
;;;2050               {
;;;2051                  *(--dp) = hi_filler;
0027d4  f1a30901          SUB      r9,r3,#1
0027d8  464b              MOV      r3,r9
0027da  f8898000          STRB     r8,[r9,#0]
;;;2052                  *(--dp) = lo_filler;
0027de  f1a30901          SUB      r9,r3,#1
0027e2  464b              MOV      r3,r9
0027e4  f8892000          STRB     r2,[r9,#0]
;;;2053                  *(--dp) = *(--sp);
0027e8  f1a60901          SUB      r9,r6,#1
0027ec  464e              MOV      r6,r9
0027ee  f899a000          LDRB     r10,[r9,#0]
0027f2  f1a30901          SUB      r9,r3,#1
0027f6  464b              MOV      r3,r9
0027f8  f889a000          STRB     r10,[r9,#0]
;;;2054                  *(--dp) = *(--sp);
0027fc  f1a60901          SUB      r9,r6,#1
002800  464e              MOV      r6,r9
002802  f899a000          LDRB     r10,[r9,#0]
002806  f1a30901          SUB      r9,r3,#1
00280a  464b              MOV      r3,r9
00280c  f889a000          STRB     r10,[r9,#0]
;;;2055                  *(--dp) = *(--sp);
002810  f1a60901          SUB      r9,r6,#1
002814  464e              MOV      r6,r9
002816  f899a000          LDRB     r10,[r9,#0]
00281a  f1a30901          SUB      r9,r3,#1
00281e  464b              MOV      r3,r9
002820  f889a000          STRB     r10,[r9,#0]
;;;2056                  *(--dp) = *(--sp);
002824  f1a60901          SUB      r9,r6,#1
002828  464e              MOV      r6,r9
00282a  f899a000          LDRB     r10,[r9,#0]
00282e  f1a30901          SUB      r9,r3,#1
002832  464b              MOV      r3,r9
002834  f889a000          STRB     r10,[r9,#0]
;;;2057                  *(--dp) = *(--sp);
002838  f1a60901          SUB      r9,r6,#1
00283c  464e              MOV      r6,r9
00283e  e000              B        |L1.10306|
                  |L1.10304|
002840  e02a              B        |L1.10392|
                  |L1.10306|
002842  f899a000          LDRB     r10,[r9,#0]
002846  f1a30901          SUB      r9,r3,#1
00284a  464b              MOV      r3,r9
00284c  f889a000          STRB     r10,[r9,#0]
;;;2058                  *(--dp) = *(--sp);
002850  f1a60901          SUB      r9,r6,#1
002854  464e              MOV      r6,r9
002856  f899a000          LDRB     r10,[r9,#0]
00285a  f1a30901          SUB      r9,r3,#1
00285e  464b              MOV      r3,r9
002860  f889a000          STRB     r10,[r9,#0]
002864  1c49              ADDS     r1,r1,#1              ;2049
                  |L1.10342|
002866  4281              CMP      r1,r0                 ;2049
002868  d3b4              BCC      |L1.10196|
;;;2059               }
;;;2060               *(--dp) = hi_filler;
00286a  f1a30901          SUB      r9,r3,#1
00286e  464b              MOV      r3,r9
002870  f8898000          STRB     r8,[r9,#0]
;;;2061               *(--dp) = lo_filler;
002874  f1a30901          SUB      r9,r3,#1
002878  464b              MOV      r3,r9
00287a  f8892000          STRB     r2,[r9,#0]
;;;2062               row_info->channels = 4;
00287e  f04f0904          MOV      r9,#4
002882  f884900a          STRB     r9,[r4,#0xa]
;;;2063               row_info->pixel_depth = 64;
002886  f04f0940          MOV      r9,#0x40
00288a  f884900b          STRB     r9,[r4,#0xb]
;;;2064               row_info->rowbytes = row_width * 8;
00288e  ea4f09c0          LSL      r9,r0,#3
002892  f8c49004          STR      r9,[r4,#4]
;;;2065            }
002896  e05d              B        |L1.10580|
                  |L1.10392|
;;;2066            /* This changes the data from RRGGBB to XXRRGGBB */
;;;2067            else
;;;2068            {
;;;2069               png_bytep sp = row + (png_size_t)row_width * 6;
002898  eb000940          ADD      r9,r0,r0,LSL #1
00289c  eb050649          ADD      r6,r5,r9,LSL #1
;;;2070               png_bytep dp = sp  + (png_size_t)row_width * 2;
0028a0  eb060340          ADD      r3,r6,r0,LSL #1
;;;2071               for (i = 0; i < row_width; i++)
0028a4  2100              MOVS     r1,#0
0028a6  e046              B        |L1.10550|
                  |L1.10408|
;;;2072               {
;;;2073                  *(--dp) = *(--sp);
0028a8  f1a60901          SUB      r9,r6,#1
0028ac  464e              MOV      r6,r9
0028ae  f899a000          LDRB     r10,[r9,#0]
0028b2  f1a30901          SUB      r9,r3,#1
0028b6  464b              MOV      r3,r9
0028b8  f889a000          STRB     r10,[r9,#0]
;;;2074                  *(--dp) = *(--sp);
0028bc  f1a60901          SUB      r9,r6,#1
0028c0  464e              MOV      r6,r9
0028c2  f899a000          LDRB     r10,[r9,#0]
0028c6  f1a30901          SUB      r9,r3,#1
0028ca  464b              MOV      r3,r9
0028cc  f889a000          STRB     r10,[r9,#0]
;;;2075                  *(--dp) = *(--sp);
0028d0  f1a60901          SUB      r9,r6,#1
0028d4  464e              MOV      r6,r9
0028d6  f899a000          LDRB     r10,[r9,#0]
0028da  f1a30901          SUB      r9,r3,#1
0028de  464b              MOV      r3,r9
0028e0  f889a000          STRB     r10,[r9,#0]
;;;2076                  *(--dp) = *(--sp);
0028e4  f1a60901          SUB      r9,r6,#1
0028e8  464e              MOV      r6,r9
0028ea  f899a000          LDRB     r10,[r9,#0]
0028ee  f1a30901          SUB      r9,r3,#1
0028f2  464b              MOV      r3,r9
0028f4  f889a000          STRB     r10,[r9,#0]
;;;2077                  *(--dp) = *(--sp);
0028f8  f1a60901          SUB      r9,r6,#1
0028fc  464e              MOV      r6,r9
0028fe  f899a000          LDRB     r10,[r9,#0]
002902  f1a30901          SUB      r9,r3,#1
002906  464b              MOV      r3,r9
002908  f889a000          STRB     r10,[r9,#0]
;;;2078                  *(--dp) = *(--sp);
00290c  f1a60901          SUB      r9,r6,#1
002910  464e              MOV      r6,r9
002912  f899a000          LDRB     r10,[r9,#0]
002916  f1a30901          SUB      r9,r3,#1
00291a  464b              MOV      r3,r9
00291c  f889a000          STRB     r10,[r9,#0]
;;;2079                  *(--dp) = hi_filler;
002920  f1a30901          SUB      r9,r3,#1
002924  464b              MOV      r3,r9
002926  f8898000          STRB     r8,[r9,#0]
;;;2080                  *(--dp) = lo_filler;
00292a  f1a30901          SUB      r9,r3,#1
00292e  464b              MOV      r3,r9
002930  f8892000          STRB     r2,[r9,#0]
002934  1c49              ADDS     r1,r1,#1              ;2071
                  |L1.10550|
002936  4281              CMP      r1,r0                 ;2071
002938  d3b6              BCC      |L1.10408|
;;;2081               }
;;;2082               row_info->channels = 4;
00293a  f04f0904          MOV      r9,#4
00293e  f884900a          STRB     r9,[r4,#0xa]
;;;2083               row_info->pixel_depth = 64;
002942  f04f0940          MOV      r9,#0x40
002946  f884900b          STRB     r9,[r4,#0xb]
;;;2084               row_info->rowbytes = row_width * 8;
00294a  ea4f09c0          LSL      r9,r0,#3
00294e  f8c49004          STR      r9,[r4,#4]
;;;2085            }
002952  bf00              NOP      
                  |L1.10580|
;;;2086         }
;;;2087      } /* COLOR_TYPE == RGB */
;;;2088   }
002954  e8bd87f0          POP      {r4-r10,pc}
;;;2089   #endif
                          ENDP

                  png_do_gray_to_rgb PROC
;;;2093   void /* PRIVATE */
;;;2094   png_do_gray_to_rgb(png_row_infop row_info, png_bytep row)
002958  b570              PUSH     {r4-r6,lr}
;;;2095   {
00295a  4602              MOV      r2,r0
00295c  460d              MOV      r5,r1
;;;2096      png_uint_32 i;
;;;2097      png_uint_32 row_width = row_info->width;
00295e  6810              LDR      r0,[r2,#0]
;;;2098   
;;;2099      png_debug(1, "in png_do_gray_to_rgb\n");
;;;2100      if (row_info->bit_depth >= 8 &&
002960  7a51              LDRB     r1,[r2,#9]
002962  2908              CMP      r1,#8
002964  db7e              BLT      |L1.10852|
;;;2101   #if defined(PNG_USELESS_TESTS_SUPPORTED)
;;;2102          row != NULL && row_info != NULL &&
;;;2103   #endif
;;;2104         !(row_info->color_type & PNG_COLOR_MASK_COLOR))
002966  7a11              LDRB     r1,[r2,#8]
002968  f0010102          AND      r1,r1,#2
00296c  2900              CMP      r1,#0
00296e  d179              BNE      |L1.10852|
;;;2105      {
;;;2106         if (row_info->color_type == PNG_COLOR_TYPE_GRAY)
002970  7a11              LDRB     r1,[r2,#8]
002972  2900              CMP      r1,#0
002974  d137              BNE      |L1.10726|
;;;2107         {
;;;2108            if (row_info->bit_depth == 8)
002976  7a51              LDRB     r1,[r2,#9]
002978  2908              CMP      r1,#8
00297a  d113              BNE      |L1.10660|
;;;2109            {
;;;2110               png_bytep sp = row + (png_size_t)row_width - 1;
00297c  182e              ADDS     r6,r5,r0
00297e  1e73              SUBS     r3,r6,#1
;;;2111               png_bytep dp = sp  + (png_size_t)row_width * 2;
002980  eb030140          ADD      r1,r3,r0,LSL #1
;;;2112               for (i = 0; i < row_width; i++)
002984  2400              MOVS     r4,#0
002986  e00a              B        |L1.10654|
                  |L1.10632|
;;;2113               {
;;;2114                  *(dp--) = *sp;
002988  781e              LDRB     r6,[r3,#0]
00298a  f8016901          STRB     r6,[r1],#-1
;;;2115                  *(dp--) = *sp;
00298e  781e              LDRB     r6,[r3,#0]
002990  f8016901          STRB     r6,[r1],#-1
;;;2116                  *(dp--) = *(sp--);
002994  f8136901          LDRB     r6,[r3],#-1
002998  f8016901          STRB     r6,[r1],#-1
00299c  1c64              ADDS     r4,r4,#1              ;2112
                  |L1.10654|
00299e  4284              CMP      r4,r0                 ;2112
0029a0  d3f2              BCC      |L1.10632|
;;;2117               }
;;;2118            }
0029a2  e06a              B        |L1.10874|
                  |L1.10660|
;;;2119            else
;;;2120            {
;;;2121               png_bytep sp = row + (png_size_t)row_width * 2 - 1;
0029a4  eb050640          ADD      r6,r5,r0,LSL #1
0029a8  1e73              SUBS     r3,r6,#1
;;;2122               png_bytep dp = sp  + (png_size_t)row_width * 4;
0029aa  eb030180          ADD      r1,r3,r0,LSL #2
;;;2123               for (i = 0; i < row_width; i++)
0029ae  2400              MOVS     r4,#0
0029b0  e016              B        |L1.10720|
                  |L1.10674|
;;;2124               {
;;;2125                  *(dp--) = *sp;
0029b2  781e              LDRB     r6,[r3,#0]
0029b4  f8016901          STRB     r6,[r1],#-1
;;;2126                  *(dp--) = *(sp - 1);
0029b8  f8136c01          LDRB     r6,[r3,#-1]
0029bc  f8016901          STRB     r6,[r1],#-1
;;;2127                  *(dp--) = *sp;
0029c0  781e              LDRB     r6,[r3,#0]
0029c2  f8016901          STRB     r6,[r1],#-1
;;;2128                  *(dp--) = *(sp - 1);
0029c6  f8136c01          LDRB     r6,[r3,#-1]
0029ca  f8016901          STRB     r6,[r1],#-1
;;;2129                  *(dp--) = *(sp--);
0029ce  f8136901          LDRB     r6,[r3],#-1
0029d2  f8016901          STRB     r6,[r1],#-1
;;;2130                  *(dp--) = *(sp--);
0029d6  f8136901          LDRB     r6,[r3],#-1
0029da  f8016901          STRB     r6,[r1],#-1
0029de  1c64              ADDS     r4,r4,#1              ;2123
                  |L1.10720|
0029e0  4284              CMP      r4,r0                 ;2123
0029e2  d3e6              BCC      |L1.10674|
;;;2131               }
;;;2132            }
0029e4  e049              B        |L1.10874|
                  |L1.10726|
;;;2133         }
;;;2134         else if (row_info->color_type == PNG_COLOR_TYPE_GRAY_ALPHA)
0029e6  7a11              LDRB     r1,[r2,#8]
0029e8  2904              CMP      r1,#4
0029ea  d146              BNE      |L1.10874|
;;;2135         {
;;;2136            if (row_info->bit_depth == 8)
0029ec  7a51              LDRB     r1,[r2,#9]
0029ee  2908              CMP      r1,#8
0029f0  d118              BNE      |L1.10788|
;;;2137            {
;;;2138               png_bytep sp = row + (png_size_t)row_width * 2 - 1;
0029f2  eb050640          ADD      r6,r5,r0,LSL #1
0029f6  1e73              SUBS     r3,r6,#1
;;;2139               png_bytep dp = sp  + (png_size_t)row_width * 2;
0029f8  eb030140          ADD      r1,r3,r0,LSL #1
;;;2140               for (i = 0; i < row_width; i++)
0029fc  2400              MOVS     r4,#0
0029fe  e00e              B        |L1.10782|
                  |L1.10752|
;;;2141               {
;;;2142                  *(dp--) = *(sp--);
002a00  f8136901          LDRB     r6,[r3],#-1
002a04  f8016901          STRB     r6,[r1],#-1
;;;2143                  *(dp--) = *sp;
002a08  781e              LDRB     r6,[r3,#0]
002a0a  f8016901          STRB     r6,[r1],#-1
;;;2144                  *(dp--) = *sp;
002a0e  781e              LDRB     r6,[r3,#0]
002a10  f8016901          STRB     r6,[r1],#-1
;;;2145                  *(dp--) = *(sp--);
002a14  f8136901          LDRB     r6,[r3],#-1
002a18  f8016901          STRB     r6,[r1],#-1
002a1c  1c64              ADDS     r4,r4,#1              ;2140
                  |L1.10782|
002a1e  4284              CMP      r4,r0                 ;2140
002a20  d3ee              BCC      |L1.10752|
;;;2146               }
;;;2147            }
002a22  e02a              B        |L1.10874|
                  |L1.10788|
;;;2148            else
;;;2149            {
;;;2150               png_bytep sp = row + (png_size_t)row_width * 4 - 1;
002a24  eb050680          ADD      r6,r5,r0,LSL #2
002a28  1e73              SUBS     r3,r6,#1
;;;2151               png_bytep dp = sp  + (png_size_t)row_width * 4;
002a2a  eb030180          ADD      r1,r3,r0,LSL #2
;;;2152               for (i = 0; i < row_width; i++)
002a2e  2400              MOVS     r4,#0
002a30  e020              B        |L1.10868|
                  |L1.10802|
;;;2153               {
;;;2154                  *(dp--) = *(sp--);
002a32  f8136901          LDRB     r6,[r3],#-1
002a36  f8016901          STRB     r6,[r1],#-1
;;;2155                  *(dp--) = *(sp--);
002a3a  f8136901          LDRB     r6,[r3],#-1
002a3e  f8016901          STRB     r6,[r1],#-1
;;;2156                  *(dp--) = *sp;
002a42  781e              LDRB     r6,[r3,#0]
002a44  f8016901          STRB     r6,[r1],#-1
;;;2157                  *(dp--) = *(sp - 1);
002a48  f8136c01          LDRB     r6,[r3,#-1]
002a4c  f8016901          STRB     r6,[r1],#-1
;;;2158                  *(dp--) = *sp;
002a50  781e              LDRB     r6,[r3,#0]
002a52  f8016901          STRB     r6,[r1],#-1
;;;2159                  *(dp--) = *(sp - 1);
002a56  f8136c01          LDRB     r6,[r3,#-1]
002a5a  f8016901          STRB     r6,[r1],#-1
;;;2160                  *(dp--) = *(sp--);
002a5e  f8136901          LDRB     r6,[r3],#-1
002a62  e000              B        |L1.10854|
                  |L1.10852|
002a64  e020              B        |L1.10920|
                  |L1.10854|
002a66  f8016901          STRB     r6,[r1],#-1
;;;2161                  *(dp--) = *(sp--);
002a6a  f8136901          LDRB     r6,[r3],#-1
002a6e  f8016901          STRB     r6,[r1],#-1
002a72  1c64              ADDS     r4,r4,#1              ;2152
                  |L1.10868|
002a74  4284              CMP      r4,r0                 ;2152
002a76  d3dc              BCC      |L1.10802|
;;;2162               }
;;;2163            }
002a78  bf00              NOP      
                  |L1.10874|
;;;2164         }
;;;2165         row_info->channels += (png_byte)2;
002a7a  7a91              LDRB     r1,[r2,#0xa]
002a7c  1c89              ADDS     r1,r1,#2
002a7e  7291              STRB     r1,[r2,#0xa]
;;;2166         row_info->color_type |= PNG_COLOR_MASK_COLOR;
002a80  7a11              LDRB     r1,[r2,#8]
002a82  f0410102          ORR      r1,r1,#2
002a86  7211              STRB     r1,[r2,#8]
;;;2167         row_info->pixel_depth = (png_byte)(row_info->channels *
002a88  7a91              LDRB     r1,[r2,#0xa]
002a8a  7a53              LDRB     r3,[r2,#9]
002a8c  4359              MULS     r1,r3,r1
002a8e  72d1              STRB     r1,[r2,#0xb]
;;;2168            row_info->bit_depth);
;;;2169         row_info->rowbytes = PNG_ROWBYTES(row_info->pixel_depth,row_width);
002a90  7ad1              LDRB     r1,[r2,#0xb]
002a92  2908              CMP      r1,#8
002a94  db03              BLT      |L1.10910|
002a96  7ad1              LDRB     r1,[r2,#0xb]
002a98  08c9              LSRS     r1,r1,#3
002a9a  4341              MULS     r1,r0,r1
002a9c  e003              B        |L1.10918|
                  |L1.10910|
002a9e  7ad1              LDRB     r1,[r2,#0xb]
002aa0  4341              MULS     r1,r0,r1
002aa2  1dc9              ADDS     r1,r1,#7
002aa4  08c9              LSRS     r1,r1,#3
                  |L1.10918|
002aa6  6051              STR      r1,[r2,#4]
                  |L1.10920|
;;;2170      }
;;;2171   }
002aa8  bd70              POP      {r4-r6,pc}
;;;2172   #endif
                          ENDP

                  png_do_unpack PROC
;;;1476   void /* PRIVATE */
;;;1477   png_do_unpack(png_row_infop row_info, png_bytep row)
002aaa  b5f0              PUSH     {r4-r7,lr}
;;;1478   {
002aac  4602              MOV      r2,r0
002aae  460b              MOV      r3,r1
;;;1479      png_debug(1, "in png_do_unpack\n");
;;;1480   #if defined(PNG_USELESS_TESTS_SUPPORTED)
;;;1481      if (row != NULL && row_info != NULL && row_info->bit_depth < 8)
;;;1482   #else
;;;1483      if (row_info->bit_depth < 8)
002ab0  7a50              LDRB     r0,[r2,#9]
002ab2  2808              CMP      r0,#8
002ab4  da69              BGE      |L1.11146|
;;;1484   #endif
;;;1485      {
;;;1486         png_uint_32 i;
;;;1487         png_uint_32 row_width=row_info->width;
002ab6  6810              LDR      r0,[r2,#0]
;;;1488   
;;;1489         switch (row_info->bit_depth)
002ab8  7a54              LDRB     r4,[r2,#9]
002aba  2c01              CMP      r4,#1
002abc  d004              BEQ      |L1.10952|
002abe  2c02              CMP      r4,#2
002ac0  d01e              BEQ      |L1.11008|
002ac2  2c04              CMP      r4,#4
002ac4  d156              BNE      |L1.11124|
002ac6  e038              B        |L1.11066|
                  |L1.10952|
;;;1490         {
;;;1491            case 1:
;;;1492            {
;;;1493               png_bytep sp = row + (png_size_t)((row_width - 1) >> 3);
002ac8  1e47              SUBS     r7,r0,#1
002aca  eb0305d7          ADD      r5,r3,r7,LSR #3
;;;1494               png_bytep dp = row + (png_size_t)row_width - 1;
002ace  181f              ADDS     r7,r3,r0
002ad0  1e7e              SUBS     r6,r7,#1
;;;1495               png_uint_32 shift = 7 - (int)((row_width + 7) & 0x07);
002ad2  1dc7              ADDS     r7,r0,#7
002ad4  f0070707          AND      r7,r7,#7
002ad8  f1c70407          RSB      r4,r7,#7
;;;1496               for (i = 0; i < row_width; i++)
002adc  2100              MOVS     r1,#0
002ade  e00c              B        |L1.11002|
                  |L1.10976|
;;;1497               {
;;;1498                  *dp = (png_byte)((*sp >> shift) & 0x01);
002ae0  782f              LDRB     r7,[r5,#0]
002ae2  4127              ASRS     r7,r7,r4
002ae4  f0070701          AND      r7,r7,#1
002ae8  7037              STRB     r7,[r6,#0]
;;;1499                  if (shift == 7)
002aea  2c07              CMP      r4,#7
002aec  d102              BNE      |L1.10996|
;;;1500                  {
;;;1501                     shift = 0;
002aee  2400              MOVS     r4,#0
;;;1502                     sp--;
002af0  1e6d              SUBS     r5,r5,#1
002af2  e000              B        |L1.10998|
                  |L1.10996|
;;;1503                  }
;;;1504                  else
;;;1505                     shift++;
002af4  1c64              ADDS     r4,r4,#1
                  |L1.10998|
;;;1506   
;;;1507                  dp--;
002af6  1e76              SUBS     r6,r6,#1
002af8  1c49              ADDS     r1,r1,#1              ;1496
                  |L1.11002|
002afa  4281              CMP      r1,r0                 ;1496
002afc  d3f0              BCC      |L1.10976|
;;;1508               }
;;;1509               break;
002afe  e039              B        |L1.11124|
                  |L1.11008|
;;;1510            }
;;;1511            case 2:
;;;1512            {
;;;1513   
;;;1514               png_bytep sp = row + (png_size_t)((row_width - 1) >> 2);
002b00  1e47              SUBS     r7,r0,#1
002b02  eb030597          ADD      r5,r3,r7,LSR #2
;;;1515               png_bytep dp = row + (png_size_t)row_width - 1;
002b06  181f              ADDS     r7,r3,r0
002b08  1e7e              SUBS     r6,r7,#1
;;;1516               png_uint_32 shift = (int)((3 - ((row_width + 3) & 0x03)) << 1);
002b0a  1cc7              ADDS     r7,r0,#3
002b0c  f0070703          AND      r7,r7,#3
002b10  f1c70703          RSB      r7,r7,#3
002b14  007c              LSLS     r4,r7,#1
;;;1517               for (i = 0; i < row_width; i++)
002b16  2100              MOVS     r1,#0
002b18  e00c              B        |L1.11060|
                  |L1.11034|
;;;1518               {
;;;1519                  *dp = (png_byte)((*sp >> shift) & 0x03);
002b1a  782f              LDRB     r7,[r5,#0]
002b1c  4127              ASRS     r7,r7,r4
002b1e  f0070703          AND      r7,r7,#3
002b22  7037              STRB     r7,[r6,#0]
;;;1520                  if (shift == 6)
002b24  2c06              CMP      r4,#6
002b26  d102              BNE      |L1.11054|
;;;1521                  {
;;;1522                     shift = 0;
002b28  2400              MOVS     r4,#0
;;;1523                     sp--;
002b2a  1e6d              SUBS     r5,r5,#1
002b2c  e000              B        |L1.11056|
                  |L1.11054|
;;;1524                  }
;;;1525                  else
;;;1526                     shift += 2;
002b2e  1ca4              ADDS     r4,r4,#2
                  |L1.11056|
;;;1527   
;;;1528                  dp--;
002b30  1e76              SUBS     r6,r6,#1
002b32  1c49              ADDS     r1,r1,#1              ;1517
                  |L1.11060|
002b34  4281              CMP      r1,r0                 ;1517
002b36  d3f0              BCC      |L1.11034|
;;;1529               }
;;;1530               break;
002b38  e01c              B        |L1.11124|
                  |L1.11066|
;;;1531            }
;;;1532            case 4:
;;;1533            {
;;;1534               png_bytep sp = row + (png_size_t)((row_width - 1) >> 1);
002b3a  1e47              SUBS     r7,r0,#1
002b3c  eb030457          ADD      r4,r3,r7,LSR #1
;;;1535               png_bytep dp = row + (png_size_t)row_width - 1;
002b40  181f              ADDS     r7,r3,r0
002b42  1e7d              SUBS     r5,r7,#1
;;;1536               png_uint_32 shift = (int)((1 - ((row_width + 1) & 0x01)) << 2);
002b44  1c47              ADDS     r7,r0,#1
002b46  f0070701          AND      r7,r7,#1
002b4a  f1c70701          RSB      r7,r7,#1
002b4e  00be              LSLS     r6,r7,#2
;;;1537               for (i = 0; i < row_width; i++)
002b50  2100              MOVS     r1,#0
002b52  e00c              B        |L1.11118|
                  |L1.11092|
;;;1538               {
;;;1539                  *dp = (png_byte)((*sp >> shift) & 0x0f);
002b54  7827              LDRB     r7,[r4,#0]
002b56  4137              ASRS     r7,r7,r6
002b58  f007070f          AND      r7,r7,#0xf
002b5c  702f              STRB     r7,[r5,#0]
;;;1540                  if (shift == 4)
002b5e  2e04              CMP      r6,#4
002b60  d102              BNE      |L1.11112|
;;;1541                  {
;;;1542                     shift = 0;
002b62  2600              MOVS     r6,#0
;;;1543                     sp--;
002b64  1e64              SUBS     r4,r4,#1
002b66  e000              B        |L1.11114|
                  |L1.11112|
;;;1544                  }
;;;1545                  else
;;;1546                     shift = 4;
002b68  2604              MOVS     r6,#4
                  |L1.11114|
;;;1547   
;;;1548                  dp--;
002b6a  1e6d              SUBS     r5,r5,#1
002b6c  1c49              ADDS     r1,r1,#1              ;1537
                  |L1.11118|
002b6e  4281              CMP      r1,r0                 ;1537
002b70  d3f0              BCC      |L1.11092|
;;;1549               }
;;;1550               break;
002b72  bf00              NOP      
                  |L1.11124|
002b74  bf00              NOP                            ;1509
;;;1551            }
;;;1552         }
;;;1553         row_info->bit_depth = 8;
002b76  2408              MOVS     r4,#8
002b78  7254              STRB     r4,[r2,#9]
;;;1554         row_info->pixel_depth = (png_byte)(8 * row_info->channels);
002b7a  7a94              LDRB     r4,[r2,#0xa]
002b7c  06e4              LSLS     r4,r4,#27
002b7e  0e24              LSRS     r4,r4,#24
002b80  72d4              STRB     r4,[r2,#0xb]
;;;1555         row_info->rowbytes = row_width * row_info->channels;
002b82  7a94              LDRB     r4,[r2,#0xa]
002b84  4344              MULS     r4,r0,r4
002b86  6054              STR      r4,[r2,#4]
;;;1556      }
002b88  bf00              NOP      
                  |L1.11146|
;;;1557   }
002b8a  bdf0              POP      {r4-r7,pc}
;;;1558   #endif
                          ENDP

                  png_do_unshift PROC
;;;1566   void /* PRIVATE */
;;;1567   png_do_unshift(png_row_infop row_info, png_bytep row, png_color_8p sig_bits)
002b8c  e92d4fff          PUSH     {r0-r11,lr}
;;;1568   {
002b90  460c              MOV      r4,r1
;;;1569      png_debug(1, "in png_do_unshift\n");
;;;1570      if (
002b92  7a01              LDRB     r1,[r0,#8]
002b94  2903              CMP      r1,#3
002b96  d078              BEQ      |L1.11402|
;;;1571   #if defined(PNG_USELESS_TESTS_SUPPORTED)
;;;1572          row != NULL && row_info != NULL && sig_bits != NULL &&
;;;1573   #endif
;;;1574          row_info->color_type != PNG_COLOR_TYPE_PALETTE)
;;;1575      {
;;;1576         int shift[4];
;;;1577         int channels = 0;
002b98  2100              MOVS     r1,#0
;;;1578         int c;
;;;1579         png_uint_16 value = 0;
002b9a  2600              MOVS     r6,#0
;;;1580         png_uint_32 row_width = row_info->width;
002b9c  f8d0c000          LDR      r12,[r0,#0]
;;;1581   
;;;1582         if (row_info->color_type & PNG_COLOR_MASK_COLOR)
002ba0  7a03              LDRB     r3,[r0,#8]
002ba2  f0030302          AND      r3,r3,#2
002ba6  b1c3              CBZ      r3,|L1.11226|
;;;1583         {
;;;1584            shift[channels++] = row_info->bit_depth - sig_bits->red;
002ba8  7a43              LDRB     r3,[r0,#9]
002baa  7817              LDRB     r7,[r2,#0]
002bac  eba30807          SUB      r8,r3,r7
002bb0  460b              MOV      r3,r1
002bb2  1c49              ADDS     r1,r1,#1
002bb4  f84d8023          STR      r8,[sp,r3,LSL #2]
;;;1585            shift[channels++] = row_info->bit_depth - sig_bits->green;
002bb8  7a43              LDRB     r3,[r0,#9]
002bba  7857              LDRB     r7,[r2,#1]
002bbc  eba30807          SUB      r8,r3,r7
002bc0  460b              MOV      r3,r1
002bc2  1c49              ADDS     r1,r1,#1
002bc4  f84d8023          STR      r8,[sp,r3,LSL #2]
;;;1586            shift[channels++] = row_info->bit_depth - sig_bits->blue;
002bc8  7a43              LDRB     r3,[r0,#9]
002bca  7897              LDRB     r7,[r2,#2]
002bcc  eba30807          SUB      r8,r3,r7
002bd0  460b              MOV      r3,r1
002bd2  1c49              ADDS     r1,r1,#1
002bd4  f84d8023          STR      r8,[sp,r3,LSL #2]
002bd8  e007              B        |L1.11242|
                  |L1.11226|
;;;1587         }
;;;1588         else
;;;1589         {
;;;1590            shift[channels++] = row_info->bit_depth - sig_bits->gray;
002bda  7a43              LDRB     r3,[r0,#9]
002bdc  78d7              LDRB     r7,[r2,#3]
002bde  eba30807          SUB      r8,r3,r7
002be2  460b              MOV      r3,r1
002be4  1c49              ADDS     r1,r1,#1
002be6  f84d8023          STR      r8,[sp,r3,LSL #2]
                  |L1.11242|
;;;1591         }
;;;1592         if (row_info->color_type & PNG_COLOR_MASK_ALPHA)
002bea  7a03              LDRB     r3,[r0,#8]
002bec  f0030304          AND      r3,r3,#4
002bf0  b13b              CBZ      r3,|L1.11266|
;;;1593         {
;;;1594            shift[channels++] = row_info->bit_depth - sig_bits->alpha;
002bf2  7a43              LDRB     r3,[r0,#9]
002bf4  7917              LDRB     r7,[r2,#4]
002bf6  eba30807          SUB      r8,r3,r7
002bfa  460b              MOV      r3,r1
002bfc  1c49              ADDS     r1,r1,#1
002bfe  f84d8023          STR      r8,[sp,r3,LSL #2]
                  |L1.11266|
;;;1595         }
;;;1596   
;;;1597         for (c = 0; c < channels; c++)
002c02  2500              MOVS     r5,#0
002c04  e009              B        |L1.11290|
                  |L1.11270|
;;;1598         {
;;;1599            if (shift[c] <= 0)
002c06  f85d3025          LDR      r3,[sp,r5,LSL #2]
002c0a  2b00              CMP      r3,#0
002c0c  dc03              BGT      |L1.11286|
;;;1600               shift[c] = 0;
002c0e  2300              MOVS     r3,#0
002c10  f84d3025          STR      r3,[sp,r5,LSL #2]
002c14  e000              B        |L1.11288|
                  |L1.11286|
;;;1601            else
;;;1602               value = 1;
002c16  2601              MOVS     r6,#1
                  |L1.11288|
002c18  1c6d              ADDS     r5,r5,#1              ;1597
                  |L1.11290|
002c1a  428d              CMP      r5,r1                 ;1597
002c1c  dbf3              BLT      |L1.11270|
;;;1603         }
;;;1604   
;;;1605         if (!value)
002c1e  b90e              CBNZ     r6,|L1.11300|
                  |L1.11296|
;;;1606            return;
;;;1607   
;;;1608         switch (row_info->bit_depth)
;;;1609         {
;;;1610            case 2:
;;;1611            {
;;;1612               png_bytep bp;
;;;1613               png_uint_32 i;
;;;1614               png_uint_32 istop = row_info->rowbytes;
;;;1615   
;;;1616               for (bp = row, i = 0; i < istop; i++)
;;;1617               {
;;;1618                  *bp >>= 1;
;;;1619                  *bp++ &= 0x55;
;;;1620               }
;;;1621               break;
;;;1622            }
;;;1623            case 4:
;;;1624            {
;;;1625               png_bytep bp = row;
;;;1626               png_uint_32 i;
;;;1627               png_uint_32 istop = row_info->rowbytes;
;;;1628               png_byte mask = (png_byte)((((int)0xf0 >> shift[0]) & (int)0xf0) |
;;;1629                  (png_byte)((int)0xf >> shift[0]));
;;;1630   
;;;1631               for (i = 0; i < istop; i++)
;;;1632               {
;;;1633                  *bp >>= shift[0];
;;;1634                  *bp++ &= mask;
;;;1635               }
;;;1636               break;
;;;1637            }
;;;1638            case 8:
;;;1639            {
;;;1640               png_bytep bp = row;
;;;1641               png_uint_32 i;
;;;1642               png_uint_32 istop = row_width * channels;
;;;1643   
;;;1644               for (i = 0; i < istop; i++)
;;;1645               {
;;;1646                  *bp++ >>= shift[i%channels];
;;;1647               }
;;;1648               break;
;;;1649            }
;;;1650            case 16:
;;;1651            {
;;;1652               png_bytep bp = row;
;;;1653               png_uint_32 i;
;;;1654               png_uint_32 istop = channels * row_width;
;;;1655   
;;;1656               for (i = 0; i < istop; i++)
;;;1657               {
;;;1658                  value = (png_uint_16)((*bp << 8) + *(bp + 1));
;;;1659                  value >>= shift[i%channels];
;;;1660                  *bp++ = (png_byte)(value >> 8);
;;;1661                  *bp++ = (png_byte)(value & 0xff);
;;;1662               }
;;;1663               break;
;;;1664            }
;;;1665         }
;;;1666      }
;;;1667   }
002c20  e8bd8fff          POP      {r0-r11,pc}
                  |L1.11300|
002c24  7a43              LDRB     r3,[r0,#9]            ;1608
002c26  2b02              CMP      r3,#2                 ;1608
002c28  d006              BEQ      |L1.11320|
002c2a  2b04              CMP      r3,#4                 ;1608
002c2c  d019              BEQ      |L1.11362|
002c2e  2b08              CMP      r3,#8                 ;1608
002c30  d03e              BEQ      |L1.11440|
002c32  2b10              CMP      r3,#0x10              ;1608
002c34  d170              BNE      |L1.11544|
002c36  e050              B        |L1.11482|
                  |L1.11320|
002c38  f8d08004          LDR      r8,[r0,#4]            ;1614
002c3c  4623              MOV      r3,r4                 ;1616
002c3e  2700              MOVS     r7,#0                 ;1616
002c40  e00c              B        |L1.11356|
                  |L1.11330|
002c42  f8939000          LDRB     r9,[r3,#0]            ;1618
002c46  ea4f0969          ASR      r9,r9,#1              ;1618
002c4a  f8839000          STRB     r9,[r3,#0]            ;1618
002c4e  f8939000          LDRB     r9,[r3,#0]            ;1619
002c52  f0090955          AND      r9,r9,#0x55           ;1619
002c56  f8039b01          STRB     r9,[r3],#1            ;1619
002c5a  1c7f              ADDS     r7,r7,#1              ;1616
                  |L1.11356|
002c5c  4547              CMP      r7,r8                 ;1616
002c5e  d3f0              BCC      |L1.11330|
002c60  e05a              B        |L1.11544|
                  |L1.11362|
002c62  4623              MOV      r3,r4                 ;1625
002c64  f8d08004          LDR      r8,[r0,#4]            ;1627
002c68  f04f0af0          MOV      r10,#0xf0             ;1628
002c6c  f8ddb000          LDR      r11,[sp,#0]           ;1628
002c70  fa4afa0b          ASR      r10,r10,r11           ;1628
002c74  f00a0af0          AND      r10,r10,#0xf0         ;1628
002c78  46de              MOV      lr,r11                ;1628
002c7a  f04f0b0f          MOV      r11,#0xf              ;1628
002c7e  fa4bfb0e          ASR      r11,r11,lr            ;1628
002c82  ea4a090b          ORR      r9,r10,r11            ;1628
002c86  2700              MOVS     r7,#0                 ;1631
002c88  e00f              B        |L1.11434|
                  |L1.11402|
002c8a  e047              B        |L1.11548|
                  |L1.11404|
002c8c  f893a000          LDRB     r10,[r3,#0]           ;1633
002c90  f8ddb000          LDR      r11,[sp,#0]           ;1633
002c94  fa4afa0b          ASR      r10,r10,r11           ;1633
002c98  f883a000          STRB     r10,[r3,#0]           ;1633
002c9c  f893a000          LDRB     r10,[r3,#0]           ;1634
002ca0  ea0a0a09          AND      r10,r10,r9            ;1634
002ca4  f803ab01          STRB     r10,[r3],#1           ;1634
002ca8  1c7f              ADDS     r7,r7,#1              ;1631
                  |L1.11434|
002caa  4547              CMP      r7,r8                 ;1631
002cac  d3ee              BCC      |L1.11404|
002cae  e033              B        |L1.11544|
                  |L1.11440|
002cb0  4623              MOV      r3,r4                 ;1640
002cb2  fb0cf801          MUL      r8,r12,r1             ;1642
002cb6  2700              MOVS     r7,#0                 ;1644
002cb8  e00c              B        |L1.11476|
                  |L1.11450|
002cba  fbb7f9f1          UDIV     r9,r7,r1              ;1646
002cbe  fb017919          MLS      r9,r1,r9,r7           ;1646
002cc2  f81da029          LDRB     r10,[sp,r9,LSL #2]    ;1646
002cc6  f8939000          LDRB     r9,[r3,#0]            ;1646
002cca  fa49f90a          ASR      r9,r9,r10             ;1646
002cce  f8039b01          STRB     r9,[r3],#1            ;1646
002cd2  1c7f              ADDS     r7,r7,#1              ;1644
                  |L1.11476|
002cd4  4547              CMP      r7,r8                 ;1644
002cd6  d3f0              BCC      |L1.11450|
002cd8  e01e              B        |L1.11544|
                  |L1.11482|
002cda  4623              MOV      r3,r4                 ;1652
002cdc  fb01f80c          MUL      r8,r1,r12             ;1654
002ce0  2700              MOVS     r7,#0                 ;1656
002ce2  e016              B        |L1.11538|
                  |L1.11492|
002ce4  f8939001          LDRB     r9,[r3,#1]            ;1658
002ce8  f893a000          LDRB     r10,[r3,#0]           ;1658
002cec  eb09290a          ADD      r9,r9,r10,LSL #8      ;1658
002cf0  fa1ff689          UXTH     r6,r9                 ;1658
002cf4  fbb7f9f1          UDIV     r9,r7,r1              ;1659
002cf8  fb017919          MLS      r9,r1,r9,r7           ;1659
002cfc  f81d9029          LDRB     r9,[sp,r9,LSL #2]     ;1659
002d00  fa46f609          ASR      r6,r6,r9              ;1659
002d04  ea4f2926          ASR      r9,r6,#8              ;1660
002d08  f8039b01          STRB     r9,[r3],#1            ;1660
002d0c  f8036b01          STRB     r6,[r3],#1            ;1661
002d10  1c7f              ADDS     r7,r7,#1              ;1656
                  |L1.11538|
002d12  4547              CMP      r7,r8                 ;1656
002d14  d3e6              BCC      |L1.11492|
002d16  bf00              NOP                            ;1663
                  |L1.11544|
002d18  bf00              NOP                            ;1621
002d1a  bf00              NOP                            ;1666
                  |L1.11548|
002d1c  bf00              NOP      
002d1e  e77f              B        |L1.11296|
;;;1668   #endif
                          ENDP

                  png_do_dither PROC
;;;3876   void /* PRIVATE */
;;;3877   png_do_dither(png_row_infop row_info, png_bytep row,
002d20  e92d4ff0          PUSH     {r4-r11,lr}
;;;3878       png_bytep palette_lookup, png_bytep dither_lookup)
;;;3879   {
002d24  460d              MOV      r5,r1
002d26  4616              MOV      r6,r2
002d28  461f              MOV      r7,r3
;;;3880      png_bytep sp, dp;
;;;3881      png_uint_32 i;
;;;3882      png_uint_32 row_width=row_info->width;
002d2a  6804              LDR      r4,[r0,#0]
;;;3883   
;;;3884      png_debug(1, "in png_do_dither\n");
;;;3885   #if defined(PNG_USELESS_TESTS_SUPPORTED)
;;;3886      if (row != NULL && row_info != NULL)
;;;3887   #endif
;;;3888      {
;;;3889         if (row_info->color_type == PNG_COLOR_TYPE_RGB &&
002d2c  f890c008          LDRB     r12,[r0,#8]
002d30  f1bc0f02          CMP      r12,#2
002d34  d144              BNE      |L1.11712|
;;;3890            palette_lookup && row_info->bit_depth == 8)
002d36  2e00              CMP      r6,#0
002d38  d042              BEQ      |L1.11712|
002d3a  f890c009          LDRB     r12,[r0,#9]
002d3e  f1bc0f08          CMP      r12,#8
002d42  d13d              BNE      |L1.11712|
;;;3891         {
;;;3892            int r, g, b, p;
;;;3893            sp = row;
002d44  4629              MOV      r1,r5
;;;3894            dp = row;
002d46  460b              MOV      r3,r1
;;;3895            for (i = 0; i < row_width; i++)
002d48  2200              MOVS     r2,#0
002d4a  e014              B        |L1.11638|
                  |L1.11596|
;;;3896            {
;;;3897               r = *sp++;
002d4c  f811cb01          LDRB     r12,[r1],#1
;;;3898               g = *sp++;
002d50  f8118b01          LDRB     r8,[r1],#1
;;;3899               b = *sp++;
002d54  f8119b01          LDRB     r9,[r1],#1
;;;3900   
;;;3901               /* this looks real messy, but the compiler will reduce
;;;3902                  it down to a reasonable formula.  For example, with
;;;3903                  5 bits per color, we get:
;;;3904                  p = (((r >> 3) & 0x1f) << 10) |
;;;3905                     (((g >> 3) & 0x1f) << 5) |
;;;3906                     ((b >> 3) & 0x1f);
;;;3907                  */
;;;3908               p = (((r >> (8 - PNG_DITHER_RED_BITS)) &
002d58  ea4f0bdc          LSR      r11,r12,#3
002d5c  ea4f2b8b          LSL      r11,r11,#10
002d60  ea4f0ed8          LSR      lr,r8,#3
002d64  ea4b1b4e          ORR      r11,r11,lr,LSL #5
002d68  ea4b0ad9          ORR      r10,r11,r9,LSR #3
;;;3909                  ((1 << PNG_DITHER_RED_BITS) - 1)) <<
;;;3910                  (PNG_DITHER_GREEN_BITS + PNG_DITHER_BLUE_BITS)) |
;;;3911                  (((g >> (8 - PNG_DITHER_GREEN_BITS)) &
;;;3912                  ((1 << PNG_DITHER_GREEN_BITS) - 1)) <<
;;;3913                  (PNG_DITHER_BLUE_BITS)) |
;;;3914                  ((b >> (8 - PNG_DITHER_BLUE_BITS)) &
;;;3915                  ((1 << PNG_DITHER_BLUE_BITS) - 1));
;;;3916   
;;;3917               *dp++ = palette_lookup[p];
002d6c  f816b00a          LDRB     r11,[r6,r10]
002d70  f803bb01          STRB     r11,[r3],#1
002d74  1c52              ADDS     r2,r2,#1              ;3895
                  |L1.11638|
002d76  42a2              CMP      r2,r4                 ;3895
002d78  d3e8              BCC      |L1.11596|
;;;3918            }
;;;3919            row_info->color_type = PNG_COLOR_TYPE_PALETTE;
002d7a  f04f0b03          MOV      r11,#3
002d7e  f880b008          STRB     r11,[r0,#8]
;;;3920            row_info->channels = 1;
002d82  f04f0b01          MOV      r11,#1
002d86  f880b00a          STRB     r11,[r0,#0xa]
;;;3921            row_info->pixel_depth = row_info->bit_depth;
002d8a  f890b009          LDRB     r11,[r0,#9]
002d8e  f880b00b          STRB     r11,[r0,#0xb]
;;;3922            row_info->rowbytes = PNG_ROWBYTES(row_info->pixel_depth,row_width);
002d92  f890b00b          LDRB     r11,[r0,#0xb]
002d96  f1bb0f08          CMP      r11,#8
002d9a  db06              BLT      |L1.11690|
002d9c  f890b00b          LDRB     r11,[r0,#0xb]
002da0  ea4f0bdb          LSR      r11,r11,#3
002da4  fb0bfb04          MUL      r11,r11,r4
002da8  e007              B        |L1.11706|
                  |L1.11690|
002daa  f890b00b          LDRB     r11,[r0,#0xb]
002dae  fb0bfb04          MUL      r11,r11,r4
002db2  f10b0b07          ADD      r11,r11,#7
002db6  ea4f0bdb          LSR      r11,r11,#3
                  |L1.11706|
002dba  f8c0b004          STR      r11,[r0,#4]
;;;3923         }
002dbe  e062              B        |L1.11910|
                  |L1.11712|
;;;3924         else if (row_info->color_type == PNG_COLOR_TYPE_RGB_ALPHA &&
002dc0  f890c008          LDRB     r12,[r0,#8]
002dc4  f1bc0f06          CMP      r12,#6
002dc8  d145              BNE      |L1.11862|
;;;3925            palette_lookup != NULL && row_info->bit_depth == 8)
002dca  b3c6              CBZ      r6,|L1.11838|
002dcc  f890c009          LDRB     r12,[r0,#9]
002dd0  f1bc0f08          CMP      r12,#8
002dd4  d13f              BNE      |L1.11862|
;;;3926         {
;;;3927            int r, g, b, p;
;;;3928            sp = row;
002dd6  4629              MOV      r1,r5
;;;3929            dp = row;
002dd8  460b              MOV      r3,r1
;;;3930            for (i = 0; i < row_width; i++)
002dda  2200              MOVS     r2,#0
002ddc  e015              B        |L1.11786|
                  |L1.11742|
;;;3931            {
;;;3932               r = *sp++;
002dde  f811cb01          LDRB     r12,[r1],#1
;;;3933               g = *sp++;
002de2  f8118b01          LDRB     r8,[r1],#1
;;;3934               b = *sp++;
002de6  f8119b01          LDRB     r9,[r1],#1
;;;3935               sp++;
002dea  1c49              ADDS     r1,r1,#1
;;;3936   
;;;3937               p = (((r >> (8 - PNG_DITHER_RED_BITS)) &
002dec  ea4f0bdc          LSR      r11,r12,#3
002df0  ea4f2b8b          LSL      r11,r11,#10
002df4  ea4f0ed8          LSR      lr,r8,#3
002df8  ea4b1b4e          ORR      r11,r11,lr,LSL #5
002dfc  ea4b0ad9          ORR      r10,r11,r9,LSR #3
;;;3938                  ((1 << PNG_DITHER_RED_BITS) - 1)) <<
;;;3939                  (PNG_DITHER_GREEN_BITS + PNG_DITHER_BLUE_BITS)) |
;;;3940                  (((g >> (8 - PNG_DITHER_GREEN_BITS)) &
;;;3941                  ((1 << PNG_DITHER_GREEN_BITS) - 1)) <<
;;;3942                  (PNG_DITHER_BLUE_BITS)) |
;;;3943                  ((b >> (8 - PNG_DITHER_BLUE_BITS)) &
;;;3944                  ((1 << PNG_DITHER_BLUE_BITS) - 1));
;;;3945   
;;;3946               *dp++ = palette_lookup[p];
002e00  f816b00a          LDRB     r11,[r6,r10]
002e04  f803bb01          STRB     r11,[r3],#1
002e08  1c52              ADDS     r2,r2,#1              ;3930
                  |L1.11786|
002e0a  42a2              CMP      r2,r4                 ;3930
002e0c  d3e7              BCC      |L1.11742|
;;;3947            }
;;;3948            row_info->color_type = PNG_COLOR_TYPE_PALETTE;
002e0e  f04f0b03          MOV      r11,#3
002e12  f880b008          STRB     r11,[r0,#8]
;;;3949            row_info->channels = 1;
002e16  f04f0b01          MOV      r11,#1
002e1a  f880b00a          STRB     r11,[r0,#0xa]
;;;3950            row_info->pixel_depth = row_info->bit_depth;
002e1e  f890b009          LDRB     r11,[r0,#9]
002e22  f880b00b          STRB     r11,[r0,#0xb]
;;;3951            row_info->rowbytes = PNG_ROWBYTES(row_info->pixel_depth,row_width);
002e26  f890b00b          LDRB     r11,[r0,#0xb]
002e2a  f1bb0f08          CMP      r11,#8
002e2e  db07              BLT      |L1.11840|
002e30  f890b00b          LDRB     r11,[r0,#0xb]
002e34  ea4f0bdb          LSR      r11,r11,#3
002e38  fb0bfb04          MUL      r11,r11,r4
002e3c  e008              B        |L1.11856|
                  |L1.11838|
002e3e  e00a              B        |L1.11862|
                  |L1.11840|
002e40  f890b00b          LDRB     r11,[r0,#0xb]
002e44  fb0bfb04          MUL      r11,r11,r4
002e48  f10b0b07          ADD      r11,r11,#7
002e4c  ea4f0bdb          LSR      r11,r11,#3
                  |L1.11856|
002e50  f8c0b004          STR      r11,[r0,#4]
;;;3952         }
002e54  e017              B        |L1.11910|
                  |L1.11862|
;;;3953         else if (row_info->color_type == PNG_COLOR_TYPE_PALETTE &&
002e56  f890c008          LDRB     r12,[r0,#8]
002e5a  f1bc0f03          CMP      r12,#3
002e5e  d112              BNE      |L1.11910|
;;;3954            dither_lookup && row_info->bit_depth == 8)
002e60  b18f              CBZ      r7,|L1.11910|
002e62  f890c009          LDRB     r12,[r0,#9]
002e66  f1bc0f08          CMP      r12,#8
002e6a  d10c              BNE      |L1.11910|
;;;3955         {
;;;3956            sp = row;
002e6c  4629              MOV      r1,r5
;;;3957            for (i = 0; i < row_width; i++, sp++)
002e6e  2200              MOVS     r2,#0
002e70  e007              B        |L1.11906|
                  |L1.11890|
;;;3958            {
;;;3959               *sp = dither_lookup[*sp];
002e72  f891c000          LDRB     r12,[r1,#0]
002e76  f817c00c          LDRB     r12,[r7,r12]
002e7a  f881c000          STRB     r12,[r1,#0]
002e7e  1c52              ADDS     r2,r2,#1              ;3957
002e80  1c49              ADDS     r1,r1,#1              ;3957
                  |L1.11906|
002e82  42a2              CMP      r2,r4                 ;3957
002e84  d3f5              BCC      |L1.11890|
                  |L1.11910|
;;;3960            }
;;;3961         }
;;;3962      }
;;;3963   }
002e86  e8bd8ff0          POP      {r4-r11,pc}
;;;3964   #endif
                          ENDP

                  png_do_chop PROC
;;;1672   void /* PRIVATE */
;;;1673   png_do_chop(png_row_infop row_info, png_bytep row)
002e8a  b5f0              PUSH     {r4-r7,lr}
;;;1674   {
;;;1675      png_debug(1, "in png_do_chop\n");
;;;1676   #if defined(PNG_USELESS_TESTS_SUPPORTED)
;;;1677      if (row != NULL && row_info != NULL && row_info->bit_depth == 16)
;;;1678   #else
;;;1679      if (row_info->bit_depth == 16)
002e8c  7a42              LDRB     r2,[r0,#9]
002e8e  2a10              CMP      r2,#0x10
002e90  d119              BNE      |L1.11974|
;;;1680   #endif
;;;1681      {
;;;1682         png_bytep sp = row;
002e92  460a              MOV      r2,r1
;;;1683         png_bytep dp = row;
002e94  460b              MOV      r3,r1
;;;1684         png_uint_32 i;
;;;1685         png_uint_32 istop = row_info->width * row_info->channels;
002e96  7a87              LDRB     r7,[r0,#0xa]
002e98  6806              LDR      r6,[r0,#0]
002e9a  fb06f507          MUL      r5,r6,r7
;;;1686   
;;;1687         for (i = 0; i<istop; i++, sp += 2, dp++)
002e9e  2400              MOVS     r4,#0
002ea0  e004              B        |L1.11948|
                  |L1.11938|
;;;1688         {
;;;1689   #if defined(PNG_READ_16_TO_8_ACCURATE_SCALE_SUPPORTED)
;;;1690         /* This does a more accurate scaling of the 16-bit color
;;;1691          * value, rather than a simple low-byte truncation.
;;;1692          *
;;;1693          * What the ideal calculation should be:
;;;1694          *   *dp = (((((png_uint_32)(*sp) << 8) |
;;;1695          *          (png_uint_32)(*(sp + 1))) * 255 + 127) / (png_uint_32)65535L;
;;;1696          *
;;;1697          * GRR: no, I think this is what it really should be:
;;;1698          *   *dp = (((((png_uint_32)(*sp) << 8) |
;;;1699          *           (png_uint_32)(*(sp + 1))) + 128L) / (png_uint_32)257L;
;;;1700          *
;;;1701          * GRR: here's the exact calculation with shifts:
;;;1702          *   temp = (((png_uint_32)(*sp) << 8) | (png_uint_32)(*(sp + 1))) + 128L;
;;;1703          *   *dp = (temp - (temp >> 8)) >> 8;
;;;1704          *
;;;1705          * Approximate calculation with shift/add instead of multiply/divide:
;;;1706          *   *dp = ((((png_uint_32)(*sp) << 8) |
;;;1707          *          (png_uint_32)((int)(*(sp + 1)) - *sp)) + 128) >> 8;
;;;1708          *
;;;1709          * What we actually do to avoid extra shifting and conversion:
;;;1710          */
;;;1711   
;;;1712            *dp = *sp + ((((int)(*(sp + 1)) - *sp) > 128) ? 1 : 0);
;;;1713   #else
;;;1714          /* Simply discard the low order byte */
;;;1715            *dp = *sp;
002ea2  7816              LDRB     r6,[r2,#0]
002ea4  701e              STRB     r6,[r3,#0]
002ea6  1c64              ADDS     r4,r4,#1              ;1687
002ea8  1c92              ADDS     r2,r2,#2              ;1687
002eaa  1c5b              ADDS     r3,r3,#1              ;1687
                  |L1.11948|
002eac  42ac              CMP      r4,r5                 ;1687
002eae  d3f8              BCC      |L1.11938|
;;;1716   #endif
;;;1717         }
;;;1718         row_info->bit_depth = 8;
002eb0  2608              MOVS     r6,#8
002eb2  7246              STRB     r6,[r0,#9]
;;;1719         row_info->pixel_depth = (png_byte)(8 * row_info->channels);
002eb4  7a86              LDRB     r6,[r0,#0xa]
002eb6  06f6              LSLS     r6,r6,#27
002eb8  0e36              LSRS     r6,r6,#24
002eba  72c6              STRB     r6,[r0,#0xb]
;;;1720         row_info->rowbytes = row_info->width * row_info->channels;
002ebc  7a87              LDRB     r7,[r0,#0xa]
002ebe  6806              LDR      r6,[r0,#0]
002ec0  437e              MULS     r6,r7,r6
002ec2  6046              STR      r6,[r0,#4]
;;;1721      }
002ec4  bf00              NOP      
                  |L1.11974|
;;;1722   }
002ec6  bdf0              POP      {r4-r7,pc}
;;;1723   #endif
                          ENDP

                  png_do_gamma PROC
;;;3353   void /* PRIVATE */
;;;3354   png_do_gamma(png_row_infop row_info, png_bytep row,
002ec8  e92d4ff8          PUSH     {r3-r11,lr}
;;;3355      png_bytep gamma_table, png_uint_16pp gamma_16_table,
;;;3356      int gamma_shift)
;;;3357   {
002ecc  4604              MOV      r4,r0
002ece  460d              MOV      r5,r1
002ed0  9f0a              LDR      r7,[sp,#0x28]
;;;3358      png_bytep sp;
;;;3359      png_uint_32 i;
;;;3360      png_uint_32 row_width=row_info->width;
002ed2  6826              LDR      r6,[r4,#0]
;;;3361   
;;;3362      png_debug(1, "in png_do_gamma\n");
;;;3363      if (
002ed4  f894c009          LDRB     r12,[r4,#9]
002ed8  f1bc0f08          CMP      r12,#8
002edc  dc00              BGT      |L1.12000|
;;;3364   #if defined(PNG_USELESS_TESTS_SUPPORTED)
;;;3365          row != NULL && row_info != NULL &&
;;;3366   #endif
;;;3367          ((row_info->bit_depth <= 8 && gamma_table != NULL) ||
002ede  b932              CBNZ     r2,|L1.12014|
                  |L1.12000|
;;;3368           (row_info->bit_depth == 16 && gamma_16_table != NULL)))
002ee0  f894c009          LDRB     r12,[r4,#9]
002ee4  f1bc0f10          CMP      r12,#0x10
002ee8  d173              BNE      |L1.12242|
002eea  2b00              CMP      r3,#0
002eec  d071              BEQ      |L1.12242|
                  |L1.12014|
;;;3369      {
;;;3370         switch (row_info->color_type)
002eee  f894c008          LDRB     r12,[r4,#8]
002ef2  f1bc0f00          CMP      r12,#0
002ef6  d06d              BEQ      |L1.12244|
002ef8  f1bc0f02          CMP      r12,#2
002efc  d006              BEQ      |L1.12044|
002efe  f1bc0f04          CMP      r12,#4
002f02  d068              BEQ      |L1.12246|
002f04  f1bc0f06          CMP      r12,#6
002f08  d15a              BNE      |L1.12224|
002f0a  e05a              B        |L1.12226|
                  |L1.12044|
;;;3371         {
;;;3372            case PNG_COLOR_TYPE_RGB:
;;;3373            {
;;;3374               if (row_info->bit_depth == 8)
002f0c  f894c009          LDRB     r12,[r4,#9]
002f10  f1bc0f08          CMP      r12,#8
002f14  d11b              BNE      |L1.12110|
;;;3375               {
;;;3376                  sp = row;
002f16  4628              MOV      r0,r5
;;;3377                  for (i = 0; i < row_width; i++)
002f18  2100              MOVS     r1,#0
002f1a  e015              B        |L1.12104|
                  |L1.12060|
;;;3378                  {
;;;3379                     *sp = gamma_table[*sp];
002f1c  f890c000          LDRB     r12,[r0,#0]
002f20  f812c00c          LDRB     r12,[r2,r12]
002f24  f880c000          STRB     r12,[r0,#0]
;;;3380                     sp++;
002f28  1c40              ADDS     r0,r0,#1
;;;3381                     *sp = gamma_table[*sp];
002f2a  f890c000          LDRB     r12,[r0,#0]
002f2e  f812c00c          LDRB     r12,[r2,r12]
002f32  f880c000          STRB     r12,[r0,#0]
;;;3382                     sp++;
002f36  1c40              ADDS     r0,r0,#1
;;;3383                     *sp = gamma_table[*sp];
002f38  f890c000          LDRB     r12,[r0,#0]
002f3c  f812c00c          LDRB     r12,[r2,r12]
002f40  f880c000          STRB     r12,[r0,#0]
;;;3384                     sp++;
002f44  1c40              ADDS     r0,r0,#1
002f46  1c49              ADDS     r1,r1,#1              ;3377
                  |L1.12104|
002f48  42b1              CMP      r1,r6                 ;3377
002f4a  d3e7              BCC      |L1.12060|
002f4c  e038              B        |L1.12224|
                  |L1.12110|
;;;3385                  }
;;;3386               }
;;;3387               else /* if (row_info->bit_depth == 16) */
;;;3388               {
;;;3389                  sp = row;
002f4e  4628              MOV      r0,r5
;;;3390                  for (i = 0; i < row_width; i++)
002f50  2100              MOVS     r1,#0
002f52  e033              B        |L1.12220|
                  |L1.12116|
;;;3391                  {
;;;3392                     png_uint_16 v;
;;;3393   
;;;3394                     v = gamma_16_table[*(sp + 1) >> gamma_shift][*sp];
002f54  f8908001          LDRB     r8,[r0,#1]
002f58  fa48f807          ASR      r8,r8,r7
002f5c  f8538028          LDR      r8,[r3,r8,LSL #2]
002f60  f8909000          LDRB     r9,[r0,#0]
002f64  f838c019          LDRH     r12,[r8,r9,LSL #1]
;;;3395                     *sp = (png_byte)((v >> 8) & 0xff);
002f68  ea4f281c          LSR      r8,r12,#8
002f6c  f8808000          STRB     r8,[r0,#0]
;;;3396                     *(sp + 1) = (png_byte)(v & 0xff);
002f70  f880c001          STRB     r12,[r0,#1]
;;;3397                     sp += 2;
002f74  1c80              ADDS     r0,r0,#2
;;;3398                     v = gamma_16_table[*(sp + 1) >> gamma_shift][*sp];
002f76  f8908001          LDRB     r8,[r0,#1]
002f7a  fa48f807          ASR      r8,r8,r7
002f7e  f8538028          LDR      r8,[r3,r8,LSL #2]
002f82  f8909000          LDRB     r9,[r0,#0]
002f86  f838c019          LDRH     r12,[r8,r9,LSL #1]
;;;3399                     *sp = (png_byte)((v >> 8) & 0xff);
002f8a  ea4f281c          LSR      r8,r12,#8
002f8e  f8808000          STRB     r8,[r0,#0]
;;;3400                     *(sp + 1) = (png_byte)(v & 0xff);
002f92  f880c001          STRB     r12,[r0,#1]
;;;3401                     sp += 2;
002f96  1c80              ADDS     r0,r0,#2
;;;3402                     v = gamma_16_table[*(sp + 1) >> gamma_shift][*sp];
002f98  f8908001          LDRB     r8,[r0,#1]
002f9c  fa48f807          ASR      r8,r8,r7
002fa0  f8538028          LDR      r8,[r3,r8,LSL #2]
002fa4  f8909000          LDRB     r9,[r0,#0]
002fa8  f838c019          LDRH     r12,[r8,r9,LSL #1]
;;;3403                     *sp = (png_byte)((v >> 8) & 0xff);
002fac  ea4f281c          LSR      r8,r12,#8
002fb0  f8808000          STRB     r8,[r0,#0]
;;;3404                     *(sp + 1) = (png_byte)(v & 0xff);
002fb4  f880c001          STRB     r12,[r0,#1]
;;;3405                     sp += 2;
002fb8  1c80              ADDS     r0,r0,#2
002fba  1c49              ADDS     r1,r1,#1              ;3390
                  |L1.12220|
002fbc  42b1              CMP      r1,r6                 ;3390
002fbe  d3c9              BCC      |L1.12116|
                  |L1.12224|
;;;3406                  }
;;;3407               }
;;;3408               break;
002fc0  e132              B        |L1.12840|
                  |L1.12226|
;;;3409            }
;;;3410            case PNG_COLOR_TYPE_RGB_ALPHA:
;;;3411            {
;;;3412               if (row_info->bit_depth == 8)
002fc2  f894c009          LDRB     r12,[r4,#9]
002fc6  f1bc0f08          CMP      r12,#8
002fca  d11f              BNE      |L1.12300|
;;;3413               {
;;;3414                  sp = row;
002fcc  4628              MOV      r0,r5
;;;3415                  for (i = 0; i < row_width; i++)
002fce  2100              MOVS     r1,#0
002fd0  e019              B        |L1.12294|
                  |L1.12242|
002fd2  e12a              B        |L1.12842|
                  |L1.12244|
002fd4  e07f              B        |L1.12502|
                  |L1.12246|
002fd6  e053              B        |L1.12416|
                  |L1.12248|
;;;3416                  {
;;;3417                     *sp = gamma_table[*sp];
002fd8  f890c000          LDRB     r12,[r0,#0]
002fdc  f812c00c          LDRB     r12,[r2,r12]
002fe0  f880c000          STRB     r12,[r0,#0]
;;;3418                     sp++;
002fe4  1c40              ADDS     r0,r0,#1
;;;3419                     *sp = gamma_table[*sp];
002fe6  f890c000          LDRB     r12,[r0,#0]
002fea  f812c00c          LDRB     r12,[r2,r12]
002fee  f880c000          STRB     r12,[r0,#0]
;;;3420                     sp++;
002ff2  1c40              ADDS     r0,r0,#1
;;;3421                     *sp = gamma_table[*sp];
002ff4  f890c000          LDRB     r12,[r0,#0]
002ff8  f812c00c          LDRB     r12,[r2,r12]
002ffc  f880c000          STRB     r12,[r0,#0]
;;;3422                     sp++;
003000  1c40              ADDS     r0,r0,#1
;;;3423                     sp++;
003002  1c40              ADDS     r0,r0,#1
003004  1c49              ADDS     r1,r1,#1              ;3415
                  |L1.12294|
003006  42b1              CMP      r1,r6                 ;3415
003008  d3e6              BCC      |L1.12248|
00300a  e038              B        |L1.12414|
                  |L1.12300|
;;;3424                  }
;;;3425               }
;;;3426               else /* if (row_info->bit_depth == 16) */
;;;3427               {
;;;3428                  sp = row;
00300c  4628              MOV      r0,r5
;;;3429                  for (i = 0; i < row_width; i++)
00300e  2100              MOVS     r1,#0
003010  e033              B        |L1.12410|
                  |L1.12306|
;;;3430                  {
;;;3431                     png_uint_16 v = gamma_16_table[*(sp + 1) >> gamma_shift][*sp];
003012  f8908001          LDRB     r8,[r0,#1]
003016  fa48f807          ASR      r8,r8,r7
00301a  f8538028          LDR      r8,[r3,r8,LSL #2]
00301e  f8909000          LDRB     r9,[r0,#0]
003022  f838c019          LDRH     r12,[r8,r9,LSL #1]
;;;3432                     *sp = (png_byte)((v >> 8) & 0xff);
003026  ea4f281c          LSR      r8,r12,#8
00302a  f8808000          STRB     r8,[r0,#0]
;;;3433                     *(sp + 1) = (png_byte)(v & 0xff);
00302e  f880c001          STRB     r12,[r0,#1]
;;;3434                     sp += 2;
003032  1c80              ADDS     r0,r0,#2
;;;3435                     v = gamma_16_table[*(sp + 1) >> gamma_shift][*sp];
003034  f8908001          LDRB     r8,[r0,#1]
003038  fa48f807          ASR      r8,r8,r7
00303c  f8538028          LDR      r8,[r3,r8,LSL #2]
003040  f8909000          LDRB     r9,[r0,#0]
003044  f838c019          LDRH     r12,[r8,r9,LSL #1]
;;;3436                     *sp = (png_byte)((v >> 8) & 0xff);
003048  ea4f281c          LSR      r8,r12,#8
00304c  f8808000          STRB     r8,[r0,#0]
;;;3437                     *(sp + 1) = (png_byte)(v & 0xff);
003050  f880c001          STRB     r12,[r0,#1]
;;;3438                     sp += 2;
003054  1c80              ADDS     r0,r0,#2
;;;3439                     v = gamma_16_table[*(sp + 1) >> gamma_shift][*sp];
003056  f8908001          LDRB     r8,[r0,#1]
00305a  fa48f807          ASR      r8,r8,r7
00305e  f8538028          LDR      r8,[r3,r8,LSL #2]
003062  f8909000          LDRB     r9,[r0,#0]
003066  f838c019          LDRH     r12,[r8,r9,LSL #1]
;;;3440                     *sp = (png_byte)((v >> 8) & 0xff);
00306a  ea4f281c          LSR      r8,r12,#8
00306e  f8808000          STRB     r8,[r0,#0]
;;;3441                     *(sp + 1) = (png_byte)(v & 0xff);
003072  f880c001          STRB     r12,[r0,#1]
;;;3442                     sp += 4;
003076  1d00              ADDS     r0,r0,#4
003078  1c49              ADDS     r1,r1,#1              ;3429
                  |L1.12410|
00307a  42b1              CMP      r1,r6                 ;3429
00307c  d3c9              BCC      |L1.12306|
                  |L1.12414|
;;;3443                  }
;;;3444               }
;;;3445               break;
00307e  e0d3              B        |L1.12840|
                  |L1.12416|
;;;3446            }
;;;3447            case PNG_COLOR_TYPE_GRAY_ALPHA:
;;;3448            {
;;;3449               if (row_info->bit_depth == 8)
003080  f894c009          LDRB     r12,[r4,#9]
003084  f1bc0f08          CMP      r12,#8
003088  d10d              BNE      |L1.12454|
;;;3450               {
;;;3451                  sp = row;
00308a  4628              MOV      r0,r5
;;;3452                  for (i = 0; i < row_width; i++)
00308c  2100              MOVS     r1,#0
00308e  e007              B        |L1.12448|
                  |L1.12432|
;;;3453                  {
;;;3454                     *sp = gamma_table[*sp];
003090  f890c000          LDRB     r12,[r0,#0]
003094  f812c00c          LDRB     r12,[r2,r12]
003098  f880c000          STRB     r12,[r0,#0]
;;;3455                     sp += 2;
00309c  1c80              ADDS     r0,r0,#2
00309e  1c49              ADDS     r1,r1,#1              ;3452
                  |L1.12448|
0030a0  42b1              CMP      r1,r6                 ;3452
0030a2  d3f5              BCC      |L1.12432|
0030a4  e016              B        |L1.12500|
                  |L1.12454|
;;;3456                  }
;;;3457               }
;;;3458               else /* if (row_info->bit_depth == 16) */
;;;3459               {
;;;3460                  sp = row;
0030a6  4628              MOV      r0,r5
;;;3461                  for (i = 0; i < row_width; i++)
0030a8  2100              MOVS     r1,#0
0030aa  e011              B        |L1.12496|
                  |L1.12460|
;;;3462                  {
;;;3463                     png_uint_16 v = gamma_16_table[*(sp + 1) >> gamma_shift][*sp];
0030ac  f8908001          LDRB     r8,[r0,#1]
0030b0  fa48f807          ASR      r8,r8,r7
0030b4  f8538028          LDR      r8,[r3,r8,LSL #2]
0030b8  f8909000          LDRB     r9,[r0,#0]
0030bc  f838c019          LDRH     r12,[r8,r9,LSL #1]
;;;3464                     *sp = (png_byte)((v >> 8) & 0xff);
0030c0  ea4f281c          LSR      r8,r12,#8
0030c4  f8808000          STRB     r8,[r0,#0]
;;;3465                     *(sp + 1) = (png_byte)(v & 0xff);
0030c8  f880c001          STRB     r12,[r0,#1]
;;;3466                     sp += 4;
0030cc  1d00              ADDS     r0,r0,#4
0030ce  1c49              ADDS     r1,r1,#1              ;3461
                  |L1.12496|
0030d0  42b1              CMP      r1,r6                 ;3461
0030d2  d3eb              BCC      |L1.12460|
                  |L1.12500|
;;;3467                  }
;;;3468               }
;;;3469               break;
0030d4  e0a8              B        |L1.12840|
                  |L1.12502|
;;;3470            }
;;;3471            case PNG_COLOR_TYPE_GRAY:
;;;3472            {
;;;3473               if (row_info->bit_depth == 2)
0030d6  f894c009          LDRB     r12,[r4,#9]
0030da  f1bc0f02          CMP      r12,#2
0030de  d150              BNE      |L1.12674|
;;;3474               {
;;;3475                  sp = row;
0030e0  4628              MOV      r0,r5
;;;3476                  for (i = 0; i < row_width; i += 4)
0030e2  2100              MOVS     r1,#0
0030e4  e04b              B        |L1.12670|
                  |L1.12518|
;;;3477                  {
;;;3478                     int a = *sp & 0xc0;
0030e6  f890a000          LDRB     r10,[r0,#0]
0030ea  f00a09c0          AND      r9,r10,#0xc0
;;;3479                     int b = *sp & 0x30;
0030ee  f890a000          LDRB     r10,[r0,#0]
0030f2  f00a0a30          AND      r10,r10,#0x30
0030f6  f8cda000          STR      r10,[sp,#0]
;;;3480                     int c = *sp & 0x0c;
0030fa  f890a000          LDRB     r10,[r0,#0]
0030fe  f00a0c0c          AND      r12,r10,#0xc
;;;3481                     int d = *sp & 0x03;
003102  f890a000          LDRB     r10,[r0,#0]
003106  f00a0803          AND      r8,r10,#3
;;;3482   
;;;3483                     *sp = (png_byte)(
00310a  ea490aa9          ORR      r10,r9,r9,ASR #2
00310e  ea4a1a29          ORR      r10,r10,r9,ASR #4
003112  ea4a1aa9          ORR      r10,r10,r9,ASR #6
003116  f812a00a          LDRB     r10,[r2,r10]
00311a  f00a0ac0          AND      r10,r10,#0xc0
00311e  f8ddb000          LDR      r11,[sp,#0]
003122  ea4b0e8b          ORR      lr,r11,r11,LSL #2
003126  ea4e0eab          ORR      lr,lr,r11,ASR #2
00312a  ea4e1b2b          ORR      r11,lr,r11,ASR #4
00312e  f812b00b          LDRB     r11,[r2,r11]
003132  f04f0e30          MOV      lr,#0x30
003136  ea0e0bab          AND      r11,lr,r11,ASR #2
00313a  ea4a0a0b          ORR      r10,r10,r11
00313e  ea4f1b0c          LSL      r11,r12,#4
003142  ea4b0b8c          ORR      r11,r11,r12,LSL #2
003146  ea4b0b0c          ORR      r11,r11,r12
00314a  ea4b0bac          ORR      r11,r11,r12,ASR #2
00314e  f812b00b          LDRB     r11,[r2,r11]
003152  f04f0e0c          MOV      lr,#0xc
003156  ea0e1b2b          AND      r11,lr,r11,ASR #4
00315a  ea4a0a0b          ORR      r10,r10,r11
00315e  ea4f1b88          LSL      r11,r8,#6
003162  ea4b1b08          ORR      r11,r11,r8,LSL #4
003166  ea4b0b88          ORR      r11,r11,r8,LSL #2
00316a  ea4b0b08          ORR      r11,r11,r8
00316e  f812b00b          LDRB     r11,[r2,r11]
003172  ea4a1aab          ORR      r10,r10,r11,ASR #6
003176  f880a000          STRB     r10,[r0,#0]
;;;3484                           ((((int)gamma_table[a|(a>>2)|(a>>4)|(a>>6)])   ) & 0xc0)|
;;;3485                           ((((int)gamma_table[(b<<2)|b|(b>>2)|(b>>4)])>>2) & 0x30)|
;;;3486                           ((((int)gamma_table[(c<<4)|(c<<2)|c|(c>>2)])>>4) & 0x0c)|
;;;3487                           ((((int)gamma_table[(d<<6)|(d<<4)|(d<<2)|d])>>6) ));
;;;3488                     sp++;
00317a  1c40              ADDS     r0,r0,#1
00317c  1d09              ADDS     r1,r1,#4              ;3476
                  |L1.12670|
00317e  42b1              CMP      r1,r6                 ;3476
003180  d3b1              BCC      |L1.12518|
                  |L1.12674|
;;;3489                  }
;;;3490               }
;;;3491               if (row_info->bit_depth == 4)
003182  f894c009          LDRB     r12,[r4,#9]
003186  f1bc0f04          CMP      r12,#4
00318a  d11d              BNE      |L1.12744|
;;;3492               {
;;;3493                  sp = row;
00318c  4628              MOV      r0,r5
;;;3494                  for (i = 0; i < row_width; i += 2)
00318e  2100              MOVS     r1,#0
003190  e017              B        |L1.12738|
                  |L1.12690|
;;;3495                  {
;;;3496                     int msb = *sp & 0xf0;
003192  f8909000          LDRB     r9,[r0,#0]
003196  f0090cf0          AND      r12,r9,#0xf0
;;;3497                     int lsb = *sp & 0x0f;
00319a  f8909000          LDRB     r9,[r0,#0]
00319e  f009080f          AND      r8,r9,#0xf
;;;3498   
;;;3499                     *sp = (png_byte)((((int)gamma_table[msb | (msb >> 4)]) & 0xf0)
0031a2  ea4c192c          ORR      r9,r12,r12,ASR #4
0031a6  f8129009          LDRB     r9,[r2,r9]
0031aa  f00909f0          AND      r9,r9,#0xf0
0031ae  ea481a08          ORR      r10,r8,r8,LSL #4
0031b2  f812a00a          LDRB     r10,[r2,r10]
0031b6  ea49192a          ORR      r9,r9,r10,ASR #4
0031ba  f8809000          STRB     r9,[r0,#0]
;;;3500                             | (((int)gamma_table[(lsb << 4) | lsb]) >> 4));
;;;3501                     sp++;
0031be  1c40              ADDS     r0,r0,#1
0031c0  1c89              ADDS     r1,r1,#2              ;3494
                  |L1.12738|
0031c2  42b1              CMP      r1,r6                 ;3494
0031c4  d3e5              BCC      |L1.12690|
0031c6  e02e              B        |L1.12838|
                  |L1.12744|
;;;3502                  }
;;;3503               }
;;;3504               else if (row_info->bit_depth == 8)
0031c8  f894c009          LDRB     r12,[r4,#9]
0031cc  f1bc0f08          CMP      r12,#8
0031d0  d10d              BNE      |L1.12782|
;;;3505               {
;;;3506                  sp = row;
0031d2  4628              MOV      r0,r5
;;;3507                  for (i = 0; i < row_width; i++)
0031d4  2100              MOVS     r1,#0
0031d6  e007              B        |L1.12776|
                  |L1.12760|
;;;3508                  {
;;;3509                     *sp = gamma_table[*sp];
0031d8  f890c000          LDRB     r12,[r0,#0]
0031dc  f812c00c          LDRB     r12,[r2,r12]
0031e0  f880c000          STRB     r12,[r0,#0]
;;;3510                     sp++;
0031e4  1c40              ADDS     r0,r0,#1
0031e6  1c49              ADDS     r1,r1,#1              ;3507
                  |L1.12776|
0031e8  42b1              CMP      r1,r6                 ;3507
0031ea  d3f5              BCC      |L1.12760|
0031ec  e01b              B        |L1.12838|
                  |L1.12782|
;;;3511                  }
;;;3512               }
;;;3513               else if (row_info->bit_depth == 16)
0031ee  f894c009          LDRB     r12,[r4,#9]
0031f2  f1bc0f10          CMP      r12,#0x10
0031f6  d116              BNE      |L1.12838|
;;;3514               {
;;;3515                  sp = row;
0031f8  4628              MOV      r0,r5
;;;3516                  for (i = 0; i < row_width; i++)
0031fa  2100              MOVS     r1,#0
0031fc  e011              B        |L1.12834|
                  |L1.12798|
;;;3517                  {
;;;3518                     png_uint_16 v = gamma_16_table[*(sp + 1) >> gamma_shift][*sp];
0031fe  f8908001          LDRB     r8,[r0,#1]
003202  fa48f807          ASR      r8,r8,r7
003206  f8538028          LDR      r8,[r3,r8,LSL #2]
00320a  f8909000          LDRB     r9,[r0,#0]
00320e  f838c019          LDRH     r12,[r8,r9,LSL #1]
;;;3519                     *sp = (png_byte)((v >> 8) & 0xff);
003212  ea4f281c          LSR      r8,r12,#8
003216  f8808000          STRB     r8,[r0,#0]
;;;3520                     *(sp + 1) = (png_byte)(v & 0xff);
00321a  f880c001          STRB     r12,[r0,#1]
;;;3521                     sp += 2;
00321e  1c80              ADDS     r0,r0,#2
003220  1c49              ADDS     r1,r1,#1              ;3516
                  |L1.12834|
003222  42b1              CMP      r1,r6                 ;3516
003224  d3eb              BCC      |L1.12798|
                  |L1.12838|
;;;3522                  }
;;;3523               }
;;;3524               break;
003226  bf00              NOP      
                  |L1.12840|
003228  bf00              NOP                            ;3408
                  |L1.12842|
;;;3525            }
;;;3526         }
;;;3527      }
;;;3528   }
00322a  e8bd8ff8          POP      {r3-r11,pc}
;;;3529   #endif
                          ENDP

                  png_do_background PROC
;;;2664   void /* PRIVATE */
;;;2665   png_do_background(png_row_infop row_info, png_bytep row,
00322e  e92d4ff0          PUSH     {r4-r11,lr}
;;;2666      png_color_16p trans_values, png_color_16p background
;;;2667   #if defined(PNG_READ_GAMMA_SUPPORTED)
;;;2668      , png_color_16p background_1,
;;;2669      png_bytep gamma_table, png_bytep gamma_from_1, png_bytep gamma_to_1,
;;;2670      png_uint_16pp gamma_16, png_uint_16pp gamma_16_from_1,
;;;2671      png_uint_16pp gamma_16_to_1, int gamma_shift
;;;2672   #endif
;;;2673      )
;;;2674   {
003232  b086              SUB      sp,sp,#0x18
003234  4681              MOV      r9,r0
003236  460d              MOV      r5,r1
003238  4616              MOV      r6,r2
00323a  f8ddc040          LDR      r12,[sp,#0x40]
00323e  f8dd8058          LDR      r8,[sp,#0x58]
;;;2675      png_bytep sp, dp;
;;;2676      png_uint_32 i;
;;;2677      png_uint_32 row_width=row_info->width;
003242  f8d97000          LDR      r7,[r9,#0]
;;;2678      int shift;
;;;2679   
;;;2680      png_debug(1, "in png_do_background\n");
;;;2681      if (background != NULL &&
003246  2b00              CMP      r3,#0
                  |L1.12872|
003248  d07d              BEQ      |L1.13126|
;;;2682   #if defined(PNG_USELESS_TESTS_SUPPORTED)
;;;2683          row != NULL && row_info != NULL &&
;;;2684   #endif
;;;2685         (!(row_info->color_type & PNG_COLOR_MASK_ALPHA) ||
00324a  f899a008          LDRB     r10,[r9,#8]
00324e  f00a0a04          AND      r10,r10,#4
003252  f1ba0f00          CMP      r10,#0
003256  d006              BEQ      |L1.12902|
;;;2686         (row_info->color_type != PNG_COLOR_TYPE_PALETTE && trans_values)))
003258  f899a008          LDRB     r10,[r9,#8]
00325c  f1ba0f03          CMP      r10,#3
003260  d0f2              BEQ      |L1.12872|
003262  2e00              CMP      r6,#0
003264  d0f0              BEQ      |L1.12872|
                  |L1.12902|
;;;2687      {
;;;2688         switch (row_info->color_type)
003266  f899a008          LDRB     r10,[r9,#8]
00326a  f1ba0f00          CMP      r10,#0
00326e  d009              BEQ      |L1.12932|
003270  f1ba0f02          CMP      r10,#2
003274  d068              BEQ      |L1.13128|
003276  f1ba0f04          CMP      r10,#4
00327a  d066              BEQ      |L1.13130|
00327c  f1ba0f06          CMP      r10,#6
003280  d171              BNE      |L1.13158|
003282  e3fc              B        |L1.14974|
                  |L1.12932|
;;;2689         {
;;;2690            case PNG_COLOR_TYPE_GRAY:
;;;2691            {
;;;2692               switch (row_info->bit_depth)
003284  f899a009          LDRB     r10,[r9,#9]
003288  f1ba0f04          CMP      r10,#4
00328c  d06c              BEQ      |L1.13160|
00328e  dc06              BGT      |L1.12958|
003290  f1ba0f01          CMP      r10,#1
003294  d00a              BEQ      |L1.12972|
003296  f1ba0f02          CMP      r10,#2
                  |L1.12954|
00329a  d135              BNE      |L1.13064|
00329c  e035              B        |L1.13066|
                  |L1.12958|
00329e  f1ba0f08          CMP      r10,#8
0032a2  d07d              BEQ      |L1.13216|
0032a4  f1ba0f10          CMP      r10,#0x10
0032a8  d1f7              BNE      |L1.12954|
0032aa  e182              B        |L1.13746|
                  |L1.12972|
;;;2693               {
;;;2694                  case 1:
;;;2695                  {
;;;2696                     sp = row;
0032ac  4628              MOV      r0,r5
;;;2697                     shift = 7;
0032ae  2407              MOVS     r4,#7
;;;2698                     for (i = 0; i < row_width; i++)
0032b0  2200              MOVS     r2,#0
0032b2  e027              B        |L1.13060|
                  |L1.12980|
;;;2699                     {
;;;2700                        if ((png_uint_16)((*sp >> shift) & 0x01)
0032b4  f890a000          LDRB     r10,[r0,#0]
0032b8  fa4afa04          ASR      r10,r10,r4
0032bc  f00a0a01          AND      r10,r10,#1
0032c0  f8b6b008          LDRH     r11,[r6,#8]
0032c4  45da              CMP      r10,r11
0032c6  d117              BNE      |L1.13048|
;;;2701                           == trans_values->gray)
;;;2702                        {
;;;2703                           *sp &= (png_byte)((0x7f7f >> (7 - shift)) & 0xff);
0032c8  f890a000          LDRB     r10,[r0,#0]
0032cc  f1c40e07          RSB      lr,r4,#7
0032d0  f6477b7f          MOV      r11,#0x7f7f
0032d4  fa4bfb0e          ASR      r11,r11,lr
0032d8  ea0a0a0b          AND      r10,r10,r11
0032dc  f880a000          STRB     r10,[r0,#0]
;;;2704                           *sp |= (png_byte)(background->gray << shift);
0032e0  f890b000          LDRB     r11,[r0,#0]
0032e4  f893a008          LDRB     r10,[r3,#8]
0032e8  fa0afa04          LSL      r10,r10,r4
0032ec  f00a0aff          AND      r10,r10,#0xff
0032f0  ea4b0b0a          ORR      r11,r11,r10
0032f4  f880b000          STRB     r11,[r0,#0]
                  |L1.13048|
;;;2705                        }
;;;2706                        if (!shift)
0032f8  b914              CBNZ     r4,|L1.13056|
;;;2707                        {
;;;2708                           shift = 7;
0032fa  2407              MOVS     r4,#7
;;;2709                           sp++;
0032fc  1c40              ADDS     r0,r0,#1
0032fe  e000              B        |L1.13058|
                  |L1.13056|
;;;2710                        }
;;;2711                        else
;;;2712                           shift--;
003300  1e64              SUBS     r4,r4,#1
                  |L1.13058|
003302  1c52              ADDS     r2,r2,#1              ;2698
                  |L1.13060|
003304  42ba              CMP      r2,r7                 ;2698
003306  d3d5              BCC      |L1.12980|
                  |L1.13064|
;;;2713                     }
;;;2714                     break;
003308  e1a7              B        |L1.13914|
                  |L1.13066|
;;;2715                  }
;;;2716                  case 2:
;;;2717                  {
;;;2718   #if defined(PNG_READ_GAMMA_SUPPORTED)
;;;2719                     if (gamma_table != NULL)
00330a  f1bc0f00          CMP      r12,#0
00330e  d066              BEQ      |L1.13278|
;;;2720                     {
;;;2721                        sp = row;
003310  4628              MOV      r0,r5
;;;2722                        shift = 6;
003312  2406              MOVS     r4,#6
;;;2723                        for (i = 0; i < row_width; i++)
003314  2200              MOVS     r2,#0
003316  e05f              B        |L1.13272|
                  |L1.13080|
;;;2724                        {
;;;2725                           if ((png_uint_16)((*sp >> shift) & 0x03)
003318  f890a000          LDRB     r10,[r0,#0]
00331c  fa4afa04          ASR      r10,r10,r4
003320  f00a0a03          AND      r10,r10,#3
003324  f8b6b008          LDRH     r11,[r6,#8]
003328  45da              CMP      r10,r11
00332a  d11e              BNE      |L1.13162|
;;;2726                               == trans_values->gray)
;;;2727                           {
;;;2728                              *sp &= (png_byte)((0x3f3f >> (6 - shift)) & 0xff);
00332c  f890a000          LDRB     r10,[r0,#0]
003330  f1c40e06          RSB      lr,r4,#6
003334  f6437b3f          MOV      r11,#0x3f3f
003338  fa4bfb0e          ASR      r11,r11,lr
00333c  ea0a0a0b          AND      r10,r10,r11
003340  f880a000          STRB     r10,[r0,#0]
;;;2729                              *sp |= (png_byte)(background->gray << shift);
003344  e002              B        |L1.13132|
                  |L1.13126|
003346  e3fa              B        |L1.15166|
                  |L1.13128|
003348  e189              B        |L1.13918|
                  |L1.13130|
00334a  e2d7              B        |L1.14588|
                  |L1.13132|
00334c  f890b000          LDRB     r11,[r0,#0]
003350  f893a008          LDRB     r10,[r3,#8]
003354  fa0afa04          LSL      r10,r10,r4
003358  f00a0aff          AND      r10,r10,#0xff
00335c  ea4b0b0a          ORR      r11,r11,r10
003360  f880b000          STRB     r11,[r0,#0]
003364  e032              B        |L1.13260|
                  |L1.13158|
003366  e2c8              B        |L1.14586|
                  |L1.13160|
003368  e068              B        |L1.13372|
                  |L1.13162|
;;;2730                           }
;;;2731                           else
;;;2732                           {
;;;2733                              png_byte p = (png_byte)((*sp >> shift) & 0x03);
00336a  f890a000          LDRB     r10,[r0,#0]
00336e  fa4afa04          ASR      r10,r10,r4
003372  f00a0a03          AND      r10,r10,#3
003376  f8cda014          STR      r10,[sp,#0x14]
;;;2734                              png_byte g = (png_byte)((gamma_table [p | (p << 2) |
00337a  f8dda014          LDR      r10,[sp,#0x14]
00337e  ea4a0b8a          ORR      r11,r10,r10,LSL #2
003382  ea4b1b0a          ORR      r11,r11,r10,LSL #4
003386  ea4b1a8a          ORR      r10,r11,r10,LSL #6
00338a  f81ca00a          LDRB     r10,[r12,r10]
00338e  ea4f1a9a          LSR      r10,r10,#6
003392  f8cda010          STR      r10,[sp,#0x10]
;;;2735                                  (p << 4) | (p << 6)] >> 6) & 0x03);
;;;2736                              *sp &= (png_byte)((0x3f3f >> (6 - shift)) & 0xff);
003396  f890a000          LDRB     r10,[r0,#0]
00339a  f1c40e06          RSB      lr,r4,#6
00339e  e000              B        |L1.13218|
                  |L1.13216|
0033a0  e0d9              B        |L1.13654|
                  |L1.13218|
0033a2  f6437b3f          MOV      r11,#0x3f3f
0033a6  fa4bfb0e          ASR      r11,r11,lr
0033aa  ea0a0a0b          AND      r10,r10,r11
0033ae  f880a000          STRB     r10,[r0,#0]
;;;2737                              *sp |= (png_byte)(g << shift);
0033b2  f890b000          LDRB     r11,[r0,#0]
0033b6  f8dda010          LDR      r10,[sp,#0x10]
0033ba  fa0afa04          LSL      r10,r10,r4
0033be  f00a0aff          AND      r10,r10,#0xff
0033c2  ea4b0b0a          ORR      r11,r11,r10
0033c6  f880b000          STRB     r11,[r0,#0]
;;;2738                           }
0033ca  bf00              NOP      
                  |L1.13260|
;;;2739                           if (!shift)
0033cc  b914              CBNZ     r4,|L1.13268|
;;;2740                           {
;;;2741                              shift = 6;
0033ce  2406              MOVS     r4,#6
;;;2742                              sp++;
0033d0  1c40              ADDS     r0,r0,#1
0033d2  e000              B        |L1.13270|
                  |L1.13268|
;;;2743                           }
;;;2744                           else
;;;2745                              shift -= 2;
0033d4  1ea4              SUBS     r4,r4,#2
                  |L1.13270|
0033d6  1c52              ADDS     r2,r2,#1              ;2723
                  |L1.13272|
0033d8  42ba              CMP      r2,r7                 ;2723
0033da  d39d              BCC      |L1.13080|
0033dc  e02d              B        |L1.13370|
                  |L1.13278|
;;;2746                        }
;;;2747                     }
;;;2748                     else
;;;2749   #endif
;;;2750                     {
;;;2751                        sp = row;
0033de  4628              MOV      r0,r5
;;;2752                        shift = 6;
0033e0  2406              MOVS     r4,#6
;;;2753                        for (i = 0; i < row_width; i++)
0033e2  2200              MOVS     r2,#0
0033e4  e027              B        |L1.13366|
                  |L1.13286|
;;;2754                        {
;;;2755                           if ((png_uint_16)((*sp >> shift) & 0x03)
0033e6  f890a000          LDRB     r10,[r0,#0]
0033ea  fa4afa04          ASR      r10,r10,r4
0033ee  f00a0a03          AND      r10,r10,#3
0033f2  f8b6b008          LDRH     r11,[r6,#8]
0033f6  45da              CMP      r10,r11
0033f8  d117              BNE      |L1.13354|
;;;2756                               == trans_values->gray)
;;;2757                           {
;;;2758                              *sp &= (png_byte)((0x3f3f >> (6 - shift)) & 0xff);
0033fa  f890a000          LDRB     r10,[r0,#0]
0033fe  f1c40e06          RSB      lr,r4,#6
003402  f6437b3f          MOV      r11,#0x3f3f
003406  fa4bfb0e          ASR      r11,r11,lr
00340a  ea0a0a0b          AND      r10,r10,r11
00340e  f880a000          STRB     r10,[r0,#0]
;;;2759                              *sp |= (png_byte)(background->gray << shift);
003412  f890a000          LDRB     r10,[r0,#0]
003416  f893b008          LDRB     r11,[r3,#8]
00341a  fa0bfb04          LSL      r11,r11,r4
00341e  f00b0bff          AND      r11,r11,#0xff
003422  ea4a0a0b          ORR      r10,r10,r11
003426  f880a000          STRB     r10,[r0,#0]
                  |L1.13354|
;;;2760                           }
;;;2761                           if (!shift)
00342a  b914              CBNZ     r4,|L1.13362|
;;;2762                           {
;;;2763                              shift = 6;
00342c  2406              MOVS     r4,#6
;;;2764                              sp++;
00342e  1c40              ADDS     r0,r0,#1
003430  e000              B        |L1.13364|
                  |L1.13362|
;;;2765                           }
;;;2766                           else
;;;2767                              shift -= 2;
003432  1ea4              SUBS     r4,r4,#2
                  |L1.13364|
003434  1c52              ADDS     r2,r2,#1              ;2753
                  |L1.13366|
003436  42ba              CMP      r2,r7                 ;2753
003438  d3d5              BCC      |L1.13286|
                  |L1.13370|
;;;2768                        }
;;;2769                     }
;;;2770                     break;
00343a  e10e              B        |L1.13914|
                  |L1.13372|
;;;2771                  }
;;;2772                  case 4:
;;;2773                  {
;;;2774   #if defined(PNG_READ_GAMMA_SUPPORTED)
;;;2775                     if (gamma_table != NULL)
00343c  f1bc0f00          CMP      r12,#0
003440  d05a              BEQ      |L1.13560|
;;;2776                     {
;;;2777                        sp = row;
003442  4628              MOV      r0,r5
;;;2778                        shift = 4;
003444  2404              MOVS     r4,#4
;;;2779                        for (i = 0; i < row_width; i++)
003446  2200              MOVS     r2,#0
003448  e053              B        |L1.13554|
                  |L1.13386|
;;;2780                        {
;;;2781                           if ((png_uint_16)((*sp >> shift) & 0x0f)
00344a  f890a000          LDRB     r10,[r0,#0]
00344e  fa4afa04          ASR      r10,r10,r4
003452  f00a0a0f          AND      r10,r10,#0xf
003456  f8b6b008          LDRH     r11,[r6,#8]
00345a  45da              CMP      r10,r11
00345c  d118              BNE      |L1.13456|
;;;2782                               == trans_values->gray)
;;;2783                           {
;;;2784                              *sp &= (png_byte)((0xf0f >> (4 - shift)) & 0xff);
00345e  f890a000          LDRB     r10,[r0,#0]
003462  f1c40e04          RSB      lr,r4,#4
003466  f6407b0f          MOV      r11,#0xf0f
00346a  fa4bfb0e          ASR      r11,r11,lr
00346e  ea0a0a0b          AND      r10,r10,r11
003472  f880a000          STRB     r10,[r0,#0]
;;;2785                              *sp |= (png_byte)(background->gray << shift);
003476  f890b000          LDRB     r11,[r0,#0]
00347a  f893a008          LDRB     r10,[r3,#8]
00347e  fa0afa04          LSL      r10,r10,r4
003482  f00a0aff          AND      r10,r10,#0xff
003486  ea4b0b0a          ORR      r11,r11,r10
00348a  f880b000          STRB     r11,[r0,#0]
00348e  e02a              B        |L1.13542|
                  |L1.13456|
;;;2786                           }
;;;2787                           else
;;;2788                           {
;;;2789                              png_byte p = (png_byte)((*sp >> shift) & 0x0f);
003490  f890a000          LDRB     r10,[r0,#0]
003494  fa4afa04          ASR      r10,r10,r4
003498  f00a0a0f          AND      r10,r10,#0xf
00349c  f8cda014          STR      r10,[sp,#0x14]
;;;2790                              png_byte g = (png_byte)((gamma_table[p |
0034a0  f8dda014          LDR      r10,[sp,#0x14]
0034a4  ea4a1a0a          ORR      r10,r10,r10,LSL #4
0034a8  f81ca00a          LDRB     r10,[r12,r10]
0034ac  ea4f1a1a          LSR      r10,r10,#4
0034b0  f8cda010          STR      r10,[sp,#0x10]
;;;2791                                (p << 4)] >> 4) & 0x0f);
;;;2792                              *sp &= (png_byte)((0xf0f >> (4 - shift)) & 0xff);
0034b4  f890a000          LDRB     r10,[r0,#0]
0034b8  f1c40e04          RSB      lr,r4,#4
0034bc  f6407b0f          MOV      r11,#0xf0f
0034c0  fa4bfb0e          ASR      r11,r11,lr
0034c4  ea0a0a0b          AND      r10,r10,r11
0034c8  f880a000          STRB     r10,[r0,#0]
;;;2793                              *sp |= (png_byte)(g << shift);
0034cc  f890b000          LDRB     r11,[r0,#0]
0034d0  f8dda010          LDR      r10,[sp,#0x10]
0034d4  fa0afa04          LSL      r10,r10,r4
0034d8  f00a0aff          AND      r10,r10,#0xff
0034dc  ea4b0b0a          ORR      r11,r11,r10
0034e0  f880b000          STRB     r11,[r0,#0]
;;;2794                           }
0034e4  bf00              NOP      
                  |L1.13542|
;;;2795                           if (!shift)
0034e6  b914              CBNZ     r4,|L1.13550|
;;;2796                           {
;;;2797                              shift = 4;
0034e8  2404              MOVS     r4,#4
;;;2798                              sp++;
0034ea  1c40              ADDS     r0,r0,#1
0034ec  e000              B        |L1.13552|
                  |L1.13550|
;;;2799                           }
;;;2800                           else
;;;2801                              shift -= 4;
0034ee  1f24              SUBS     r4,r4,#4
                  |L1.13552|
0034f0  1c52              ADDS     r2,r2,#1              ;2779
                  |L1.13554|
0034f2  42ba              CMP      r2,r7                 ;2779
0034f4  d3a9              BCC      |L1.13386|
0034f6  e02d              B        |L1.13652|
                  |L1.13560|
;;;2802                        }
;;;2803                     }
;;;2804                     else
;;;2805   #endif
;;;2806                     {
;;;2807                        sp = row;
0034f8  4628              MOV      r0,r5
;;;2808                        shift = 4;
0034fa  2404              MOVS     r4,#4
;;;2809                        for (i = 0; i < row_width; i++)
0034fc  2200              MOVS     r2,#0
0034fe  e027              B        |L1.13648|
                  |L1.13568|
;;;2810                        {
;;;2811                           if ((png_uint_16)((*sp >> shift) & 0x0f)
003500  f890a000          LDRB     r10,[r0,#0]
003504  fa4afa04          ASR      r10,r10,r4
003508  f00a0a0f          AND      r10,r10,#0xf
00350c  f8b6b008          LDRH     r11,[r6,#8]
003510  45da              CMP      r10,r11
003512  d117              BNE      |L1.13636|
;;;2812                               == trans_values->gray)
;;;2813                           {
;;;2814                              *sp &= (png_byte)((0xf0f >> (4 - shift)) & 0xff);
003514  f890a000          LDRB     r10,[r0,#0]
003518  f1c40e04          RSB      lr,r4,#4
00351c  f6407b0f          MOV      r11,#0xf0f
003520  fa4bfb0e          ASR      r11,r11,lr
003524  ea0a0a0b          AND      r10,r10,r11
003528  f880a000          STRB     r10,[r0,#0]
;;;2815                              *sp |= (png_byte)(background->gray << shift);
00352c  f890a000          LDRB     r10,[r0,#0]
003530  f893b008          LDRB     r11,[r3,#8]
003534  fa0bfb04          LSL      r11,r11,r4
003538  f00b0bff          AND      r11,r11,#0xff
00353c  ea4a0a0b          ORR      r10,r10,r11
003540  f880a000          STRB     r10,[r0,#0]
                  |L1.13636|
;;;2816                           }
;;;2817                           if (!shift)
003544  b914              CBNZ     r4,|L1.13644|
;;;2818                           {
;;;2819                              shift = 4;
003546  2404              MOVS     r4,#4
;;;2820                              sp++;
003548  1c40              ADDS     r0,r0,#1
00354a  e000              B        |L1.13646|
                  |L1.13644|
;;;2821                           }
;;;2822                           else
;;;2823                              shift -= 4;
00354c  1f24              SUBS     r4,r4,#4
                  |L1.13646|
00354e  1c52              ADDS     r2,r2,#1              ;2809
                  |L1.13648|
003550  42ba              CMP      r2,r7                 ;2809
003552  d3d5              BCC      |L1.13568|
                  |L1.13652|
;;;2824                        }
;;;2825                     }
;;;2826                     break;
003554  e081              B        |L1.13914|
                  |L1.13654|
;;;2827                  }
;;;2828                  case 8:
;;;2829                  {
;;;2830   #if defined(PNG_READ_GAMMA_SUPPORTED)
;;;2831                     if (gamma_table != NULL)
003556  f1bc0f00          CMP      r12,#0
00355a  d018              BEQ      |L1.13710|
;;;2832                     {
;;;2833                        sp = row;
00355c  4628              MOV      r0,r5
;;;2834                        for (i = 0; i < row_width; i++, sp++)
00355e  2200              MOVS     r2,#0
003560  e012              B        |L1.13704|
                  |L1.13666|
;;;2835                        {
;;;2836                           if (*sp == trans_values->gray)
003562  f890a000          LDRB     r10,[r0,#0]
003566  f8b6b008          LDRH     r11,[r6,#8]
00356a  45da              CMP      r10,r11
00356c  d104              BNE      |L1.13688|
;;;2837                           {
;;;2838                              *sp = (png_byte)background->gray;
00356e  f893a008          LDRB     r10,[r3,#8]
003572  f880a000          STRB     r10,[r0,#0]
003576  e005              B        |L1.13700|
                  |L1.13688|
;;;2839                           }
;;;2840                           else
;;;2841                           {
;;;2842                              *sp = gamma_table[*sp];
003578  f890a000          LDRB     r10,[r0,#0]
00357c  f81ca00a          LDRB     r10,[r12,r10]
003580  f880a000          STRB     r10,[r0,#0]
                  |L1.13700|
003584  1c52              ADDS     r2,r2,#1              ;2834
003586  1c40              ADDS     r0,r0,#1              ;2834
                  |L1.13704|
003588  42ba              CMP      r2,r7                 ;2834
00358a  d3ea              BCC      |L1.13666|
00358c  e010              B        |L1.13744|
                  |L1.13710|
;;;2843                           }
;;;2844                        }
;;;2845                     }
;;;2846                     else
;;;2847   #endif
;;;2848                     {
;;;2849                        sp = row;
00358e  4628              MOV      r0,r5
;;;2850                        for (i = 0; i < row_width; i++, sp++)
003590  2200              MOVS     r2,#0
003592  e00b              B        |L1.13740|
                  |L1.13716|
;;;2851                        {
;;;2852                           if (*sp == trans_values->gray)
003594  f890a000          LDRB     r10,[r0,#0]
003598  f8b6b008          LDRH     r11,[r6,#8]
00359c  45da              CMP      r10,r11
00359e  d103              BNE      |L1.13736|
;;;2853                           {
;;;2854                              *sp = (png_byte)background->gray;
0035a0  f893a008          LDRB     r10,[r3,#8]
0035a4  f880a000          STRB     r10,[r0,#0]
                  |L1.13736|
0035a8  1c52              ADDS     r2,r2,#1              ;2850
0035aa  1c40              ADDS     r0,r0,#1              ;2850
                  |L1.13740|
0035ac  42ba              CMP      r2,r7                 ;2850
0035ae  d3f1              BCC      |L1.13716|
                  |L1.13744|
;;;2855                           }
;;;2856                        }
;;;2857                     }
;;;2858                     break;
0035b0  e053              B        |L1.13914|
                  |L1.13746|
;;;2859                  }
;;;2860                  case 16:
;;;2861                  {
;;;2862   #if defined(PNG_READ_GAMMA_SUPPORTED)
;;;2863                     if (gamma_16 != NULL)
0035b2  f8dda04c          LDR      r10,[sp,#0x4c]
0035b6  f1ba0f00          CMP      r10,#0
0035ba  d030              BEQ      |L1.13854|
;;;2864                     {
;;;2865                        sp = row;
0035bc  4628              MOV      r0,r5
;;;2866                        for (i = 0; i < row_width; i++, sp += 2)
0035be  2200              MOVS     r2,#0
0035c0  e02a              B        |L1.13848|
                  |L1.13762|
;;;2867                        {
;;;2868                           png_uint_16 v;
;;;2869   
;;;2870                           v = (png_uint_16)(((*sp) << 8) + *(sp + 1));
0035c2  f890b001          LDRB     r11,[r0,#1]
0035c6  f890e000          LDRB     lr,[r0,#0]
0035ca  eb0b2b0e          ADD      r11,r11,lr,LSL #8
0035ce  fa1ffa8b          UXTH     r10,r11
;;;2871                           if (v == trans_values->gray)
0035d2  f8b6b008          LDRH     r11,[r6,#8]
0035d6  45d3              CMP      r11,r10
0035d8  d10a              BNE      |L1.13808|
;;;2872                           {
;;;2873                              /* background is already in screen gamma */
;;;2874                              *sp = (png_byte)((background->gray >> 8) & 0xff);
0035da  f8b3b008          LDRH     r11,[r3,#8]
0035de  ea4f2b1b          LSR      r11,r11,#8
0035e2  f880b000          STRB     r11,[r0,#0]
;;;2875                              *(sp + 1) = (png_byte)(background->gray & 0xff);
0035e6  f893b008          LDRB     r11,[r3,#8]
0035ea  f880b001          STRB     r11,[r0,#1]
0035ee  e011              B        |L1.13844|
                  |L1.13808|
;;;2876                           }
;;;2877                           else
;;;2878                           {
;;;2879                              v = gamma_16[*(sp + 1) >> gamma_shift][*sp];
0035f0  f890b001          LDRB     r11,[r0,#1]
0035f4  fa4bfb08          ASR      r11,r11,r8
0035f8  f8dde04c          LDR      lr,[sp,#0x4c]
0035fc  f85eb02b          LDR      r11,[lr,r11,LSL #2]
003600  f890e000          LDRB     lr,[r0,#0]
003604  f83ba01e          LDRH     r10,[r11,lr,LSL #1]
;;;2880                              *sp = (png_byte)((v >> 8) & 0xff);
003608  ea4f2b1a          LSR      r11,r10,#8
00360c  f880b000          STRB     r11,[r0,#0]
;;;2881                              *(sp + 1) = (png_byte)(v & 0xff);
003610  f880a001          STRB     r10,[r0,#1]
                  |L1.13844|
003614  1c52              ADDS     r2,r2,#1              ;2866
003616  1c80              ADDS     r0,r0,#2              ;2866
                  |L1.13848|
003618  42ba              CMP      r2,r7                 ;2866
00361a  d3d2              BCC      |L1.13762|
00361c  e01c              B        |L1.13912|
                  |L1.13854|
;;;2882                           }
;;;2883                        }
;;;2884                     }
;;;2885                     else
;;;2886   #endif
;;;2887                     {
;;;2888                        sp = row;
00361e  4628              MOV      r0,r5
;;;2889                        for (i = 0; i < row_width; i++, sp += 2)
003620  2200              MOVS     r2,#0
003622  e017              B        |L1.13908|
                  |L1.13860|
;;;2890                        {
;;;2891                           png_uint_16 v;
;;;2892   
;;;2893                           v = (png_uint_16)(((*sp) << 8) + *(sp + 1));
003624  f890b001          LDRB     r11,[r0,#1]
003628  f890e000          LDRB     lr,[r0,#0]
00362c  eb0b2b0e          ADD      r11,r11,lr,LSL #8
003630  fa1ffa8b          UXTH     r10,r11
;;;2894                           if (v == trans_values->gray)
003634  f8b6b008          LDRH     r11,[r6,#8]
003638  45d3              CMP      r11,r10
00363a  d109              BNE      |L1.13904|
;;;2895                           {
;;;2896                              *sp = (png_byte)((background->gray >> 8) & 0xff);
00363c  f8b3b008          LDRH     r11,[r3,#8]
003640  ea4f2b1b          LSR      r11,r11,#8
003644  f880b000          STRB     r11,[r0,#0]
;;;2897                              *(sp + 1) = (png_byte)(background->gray & 0xff);
003648  f893b008          LDRB     r11,[r3,#8]
00364c  f880b001          STRB     r11,[r0,#1]
                  |L1.13904|
003650  1c52              ADDS     r2,r2,#1              ;2889
003652  1c80              ADDS     r0,r0,#2              ;2889
                  |L1.13908|
003654  42ba              CMP      r2,r7                 ;2889
003656  d3e5              BCC      |L1.13860|
                  |L1.13912|
;;;2898                           }
;;;2899                        }
;;;2900                     }
;;;2901                     break;
003658  bf00              NOP      
                  |L1.13914|
00365a  bf00              NOP                            ;2714
;;;2902                  }
;;;2903               }
;;;2904               break;
00365c  e14d              B        |L1.14586|
                  |L1.13918|
;;;2905            }
;;;2906            case PNG_COLOR_TYPE_RGB:
;;;2907            {
;;;2908               if (row_info->bit_depth == 8)
00365e  f899a009          LDRB     r10,[r9,#9]
003662  f1ba0f08          CMP      r10,#8
003666  d161              BNE      |L1.14124|
;;;2909               {
;;;2910   #if defined(PNG_READ_GAMMA_SUPPORTED)
;;;2911                  if (gamma_table != NULL)
003668  f1bc0f00          CMP      r12,#0
00366c  d038              BEQ      |L1.14048|
;;;2912                  {
;;;2913                     sp = row;
00366e  4628              MOV      r0,r5
;;;2914                     for (i = 0; i < row_width; i++, sp += 3)
003670  2200              MOVS     r2,#0
003672  e032              B        |L1.14042|
                  |L1.13940|
;;;2915                     {
;;;2916                        if (*sp == trans_values->red &&
003674  f890a000          LDRB     r10,[r0,#0]
003678  f8b6b002          LDRH     r11,[r6,#2]
00367c  45da              CMP      r10,r11
00367e  d118              BNE      |L1.14002|
;;;2917                           *(sp + 1) == trans_values->green &&
003680  f890a001          LDRB     r10,[r0,#1]
003684  f8b6b004          LDRH     r11,[r6,#4]
003688  45da              CMP      r10,r11
00368a  d112              BNE      |L1.14002|
;;;2918                           *(sp + 2) == trans_values->blue)
00368c  f890a002          LDRB     r10,[r0,#2]
003690  f8b6b006          LDRH     r11,[r6,#6]
003694  45da              CMP      r10,r11
003696  d10c              BNE      |L1.14002|
;;;2919                        {
;;;2920                           *sp = (png_byte)background->red;
003698  f893a002          LDRB     r10,[r3,#2]
00369c  f880a000          STRB     r10,[r0,#0]
;;;2921                           *(sp + 1) = (png_byte)background->green;
0036a0  f893a004          LDRB     r10,[r3,#4]
0036a4  f880a001          STRB     r10,[r0,#1]
;;;2922                           *(sp + 2) = (png_byte)background->blue;
0036a8  f893a006          LDRB     r10,[r3,#6]
0036ac  f880a002          STRB     r10,[r0,#2]
0036b0  e011              B        |L1.14038|
                  |L1.14002|
;;;2923                        }
;;;2924                        else
;;;2925                        {
;;;2926                           *sp = gamma_table[*sp];
0036b2  f890a000          LDRB     r10,[r0,#0]
0036b6  f81ca00a          LDRB     r10,[r12,r10]
0036ba  f880a000          STRB     r10,[r0,#0]
;;;2927                           *(sp + 1) = gamma_table[*(sp + 1)];
0036be  f890a001          LDRB     r10,[r0,#1]
0036c2  f81ca00a          LDRB     r10,[r12,r10]
0036c6  f880a001          STRB     r10,[r0,#1]
;;;2928                           *(sp + 2) = gamma_table[*(sp + 2)];
0036ca  f890a002          LDRB     r10,[r0,#2]
0036ce  f81ca00a          LDRB     r10,[r12,r10]
0036d2  f880a002          STRB     r10,[r0,#2]
                  |L1.14038|
0036d6  1c52              ADDS     r2,r2,#1              ;2914
0036d8  1cc0              ADDS     r0,r0,#3              ;2914
                  |L1.14042|
0036da  42ba              CMP      r2,r7                 ;2914
0036dc  d3ca              BCC      |L1.13940|
0036de  e10c              B        |L1.14586|
                  |L1.14048|
;;;2929                        }
;;;2930                     }
;;;2931                  }
;;;2932                  else
;;;2933   #endif
;;;2934                  {
;;;2935                     sp = row;
0036e0  4628              MOV      r0,r5
;;;2936                     for (i = 0; i < row_width; i++, sp += 3)
0036e2  2200              MOVS     r2,#0
0036e4  e01f              B        |L1.14118|
                  |L1.14054|
;;;2937                     {
;;;2938                        if (*sp == trans_values->red &&
0036e6  f890a000          LDRB     r10,[r0,#0]
0036ea  f8b6b002          LDRH     r11,[r6,#2]
0036ee  45da              CMP      r10,r11
0036f0  d117              BNE      |L1.14114|
;;;2939                           *(sp + 1) == trans_values->green &&
0036f2  f890a001          LDRB     r10,[r0,#1]
0036f6  f8b6b004          LDRH     r11,[r6,#4]
0036fa  45da              CMP      r10,r11
0036fc  d111              BNE      |L1.14114|
;;;2940                           *(sp + 2) == trans_values->blue)
0036fe  f890a002          LDRB     r10,[r0,#2]
003702  f8b6b006          LDRH     r11,[r6,#6]
003706  45da              CMP      r10,r11
003708  d10b              BNE      |L1.14114|
;;;2941                        {
;;;2942                           *sp = (png_byte)background->red;
00370a  f893a002          LDRB     r10,[r3,#2]
00370e  f880a000          STRB     r10,[r0,#0]
;;;2943                           *(sp + 1) = (png_byte)background->green;
003712  f893a004          LDRB     r10,[r3,#4]
003716  f880a001          STRB     r10,[r0,#1]
;;;2944                           *(sp + 2) = (png_byte)background->blue;
00371a  f893a006          LDRB     r10,[r3,#6]
00371e  f880a002          STRB     r10,[r0,#2]
                  |L1.14114|
003722  1c52              ADDS     r2,r2,#1              ;2936
003724  1cc0              ADDS     r0,r0,#3              ;2936
                  |L1.14118|
003726  42ba              CMP      r2,r7                 ;2936
003728  d3dd              BCC      |L1.14054|
00372a  e0e6              B        |L1.14586|
                  |L1.14124|
;;;2945                        }
;;;2946                     }
;;;2947                  }
;;;2948               }
;;;2949               else /* if (row_info->bit_depth == 16) */
;;;2950               {
;;;2951   #if defined(PNG_READ_GAMMA_SUPPORTED)
;;;2952                  if (gamma_16 != NULL)
00372c  f8dda04c          LDR      r10,[sp,#0x4c]
003730  f1ba0f00          CMP      r10,#0
003734  d07e              BEQ      |L1.14388|
;;;2953                  {
;;;2954                     sp = row;
003736  4628              MOV      r0,r5
;;;2955                     for (i = 0; i < row_width; i++, sp += 6)
003738  2200              MOVS     r2,#0
00373a  e089              B        |L1.14416|
                  |L1.14140|
;;;2956                     {
;;;2957                        png_uint_16 r = (png_uint_16)(((*sp) << 8) + *(sp + 1));
00373c  f890a001          LDRB     r10,[r0,#1]
003740  f890b000          LDRB     r11,[r0,#0]
003744  eb0a2a0b          ADD      r10,r10,r11,LSL #8
003748  fa1ffa8a          UXTH     r10,r10
00374c  f8cda014          STR      r10,[sp,#0x14]
;;;2958                        png_uint_16 g = (png_uint_16)(((*(sp+2)) << 8) + *(sp+3));
003750  f890a003          LDRB     r10,[r0,#3]
003754  f890b002          LDRB     r11,[r0,#2]
003758  eb0a2a0b          ADD      r10,r10,r11,LSL #8
00375c  fa1ffa8a          UXTH     r10,r10
003760  f8cda010          STR      r10,[sp,#0x10]
;;;2959                        png_uint_16 b = (png_uint_16)(((*(sp+4)) << 8) + *(sp+5));
003764  f890a005          LDRB     r10,[r0,#5]
003768  f890b004          LDRB     r11,[r0,#4]
00376c  eb0a2a0b          ADD      r10,r10,r11,LSL #8
003770  fa1ffa8a          UXTH     r10,r10
003774  f8cda00c          STR      r10,[sp,#0xc]
;;;2960                        if (r == trans_values->red && g == trans_values->green &&
003778  f8b6b002          LDRH     r11,[r6,#2]
00377c  f8dda014          LDR      r10,[sp,#0x14]
003780  45d3              CMP      r11,r10
003782  d12a              BNE      |L1.14298|
003784  f8b6b004          LDRH     r11,[r6,#4]
003788  f8dda010          LDR      r10,[sp,#0x10]
00378c  45d3              CMP      r11,r10
00378e  d124              BNE      |L1.14298|
;;;2961                           b == trans_values->blue)
003790  f8b6b006          LDRH     r11,[r6,#6]
003794  f8dda00c          LDR      r10,[sp,#0xc]
003798  45d3              CMP      r11,r10
00379a  d11e              BNE      |L1.14298|
;;;2962                        {
;;;2963                           /* background is already in screen gamma */
;;;2964                           *sp = (png_byte)((background->red >> 8) & 0xff);
00379c  f8b3a002          LDRH     r10,[r3,#2]
0037a0  ea4f2a1a          LSR      r10,r10,#8
0037a4  f880a000          STRB     r10,[r0,#0]
;;;2965                           *(sp + 1) = (png_byte)(background->red & 0xff);
0037a8  f893a002          LDRB     r10,[r3,#2]
0037ac  f880a001          STRB     r10,[r0,#1]
;;;2966                           *(sp + 2) = (png_byte)((background->green >> 8) & 0xff);
0037b0  f8b3a004          LDRH     r10,[r3,#4]
0037b4  ea4f2a1a          LSR      r10,r10,#8
0037b8  f880a002          STRB     r10,[r0,#2]
;;;2967                           *(sp + 3) = (png_byte)(background->green & 0xff);
0037bc  f893a004          LDRB     r10,[r3,#4]
0037c0  f880a003          STRB     r10,[r0,#3]
;;;2968                           *(sp + 4) = (png_byte)((background->blue >> 8) & 0xff);
0037c4  f8b3a006          LDRH     r10,[r3,#6]
0037c8  ea4f2a1a          LSR      r10,r10,#8
0037cc  f880a004          STRB     r10,[r0,#4]
;;;2969                           *(sp + 5) = (png_byte)(background->blue & 0xff);
0037d0  f893a006          LDRB     r10,[r3,#6]
0037d4  f880a005          STRB     r10,[r0,#5]
0037d8  e038              B        |L1.14412|
                  |L1.14298|
;;;2970                        }
;;;2971                        else
;;;2972                        {
;;;2973                           png_uint_16 v = gamma_16[*(sp + 1) >> gamma_shift][*sp];
0037da  f890b001          LDRB     r11,[r0,#1]
0037de  fa4bfb08          ASR      r11,r11,r8
0037e2  f8dde04c          LDR      lr,[sp,#0x4c]
0037e6  f85eb02b          LDR      r11,[lr,r11,LSL #2]
0037ea  f890e000          LDRB     lr,[r0,#0]
0037ee  f83ba01e          LDRH     r10,[r11,lr,LSL #1]
;;;2974                           *sp = (png_byte)((v >> 8) & 0xff);
0037f2  ea4f2b1a          LSR      r11,r10,#8
0037f6  f880b000          STRB     r11,[r0,#0]
;;;2975                           *(sp + 1) = (png_byte)(v & 0xff);
0037fa  f880a001          STRB     r10,[r0,#1]
;;;2976                           v = gamma_16[*(sp + 3) >> gamma_shift][*(sp + 2)];
0037fe  f890b003          LDRB     r11,[r0,#3]
003802  fa4bfb08          ASR      r11,r11,r8
003806  f8dde04c          LDR      lr,[sp,#0x4c]
00380a  f85eb02b          LDR      r11,[lr,r11,LSL #2]
00380e  f890e002          LDRB     lr,[r0,#2]
003812  f83ba01e          LDRH     r10,[r11,lr,LSL #1]
;;;2977                           *(sp + 2) = (png_byte)((v >> 8) & 0xff);
003816  ea4f2b1a          LSR      r11,r10,#8
00381a  f880b002          STRB     r11,[r0,#2]
;;;2978                           *(sp + 3) = (png_byte)(v & 0xff);
00381e  f880a003          STRB     r10,[r0,#3]
;;;2979                           v = gamma_16[*(sp + 5) >> gamma_shift][*(sp + 4)];
003822  f890b005          LDRB     r11,[r0,#5]
003826  fa4bfb08          ASR      r11,r11,r8
00382a  f8dde04c          LDR      lr,[sp,#0x4c]
00382e  f85eb02b          LDR      r11,[lr,r11,LSL #2]
003832  e000              B        |L1.14390|
                  |L1.14388|
003834  e010              B        |L1.14424|
                  |L1.14390|
003836  f890e004          LDRB     lr,[r0,#4]
00383a  f83ba01e          LDRH     r10,[r11,lr,LSL #1]
;;;2980                           *(sp + 4) = (png_byte)((v >> 8) & 0xff);
00383e  ea4f2b1a          LSR      r11,r10,#8
003842  f880b004          STRB     r11,[r0,#4]
;;;2981                           *(sp + 5) = (png_byte)(v & 0xff);
003846  f880a005          STRB     r10,[r0,#5]
;;;2982                        }
00384a  bf00              NOP      
                  |L1.14412|
00384c  1c52              ADDS     r2,r2,#1              ;2955
00384e  1d80              ADDS     r0,r0,#6              ;2955
                  |L1.14416|
003850  42ba              CMP      r2,r7                 ;2955
003852  f4ffaf73          BCC      |L1.14140|
003856  e050              B        |L1.14586|
                  |L1.14424|
;;;2983                     }
;;;2984                  }
;;;2985                  else
;;;2986   #endif
;;;2987                  {
;;;2988                     sp = row;
003858  4628              MOV      r0,r5
;;;2989                     for (i = 0; i < row_width; i++, sp += 6)
00385a  2200              MOVS     r2,#0
00385c  e04b              B        |L1.14582|
                  |L1.14430|
;;;2990                     {
;;;2991                        png_uint_16 r = (png_uint_16)(((*sp) << 8) + *(sp+1));
00385e  f890b001          LDRB     r11,[r0,#1]
003862  f890e000          LDRB     lr,[r0,#0]
003866  eb0b2b0e          ADD      r11,r11,lr,LSL #8
00386a  fa1ffa8b          UXTH     r10,r11
;;;2992                        png_uint_16 g = (png_uint_16)(((*(sp+2)) << 8) + *(sp+3));
00386e  f890b003          LDRB     r11,[r0,#3]
003872  f890e002          LDRB     lr,[r0,#2]
003876  eb0b2b0e          ADD      r11,r11,lr,LSL #8
00387a  fa1ffb8b          UXTH     r11,r11
00387e  f8cdb014          STR      r11,[sp,#0x14]
;;;2993                        png_uint_16 b = (png_uint_16)(((*(sp+4)) << 8) + *(sp+5));
003882  f890b005          LDRB     r11,[r0,#5]
003886  f890e004          LDRB     lr,[r0,#4]
00388a  eb0b2b0e          ADD      r11,r11,lr,LSL #8
00388e  fa1ffb8b          UXTH     r11,r11
003892  f8cdb010          STR      r11,[sp,#0x10]
;;;2994   
;;;2995                        if (r == trans_values->red && g == trans_values->green &&
003896  f8b6b002          LDRH     r11,[r6,#2]
00389a  45d3              CMP      r11,r10
00389c  d129              BNE      |L1.14578|
00389e  f8b6e004          LDRH     lr,[r6,#4]
0038a2  f8ddb014          LDR      r11,[sp,#0x14]
0038a6  45de              CMP      lr,r11
0038a8  d123              BNE      |L1.14578|
;;;2996                           b == trans_values->blue)
0038aa  f8b6e006          LDRH     lr,[r6,#6]
0038ae  f8ddb010          LDR      r11,[sp,#0x10]
0038b2  45de              CMP      lr,r11
0038b4  d11d              BNE      |L1.14578|
;;;2997                        {
;;;2998                           *sp = (png_byte)((background->red >> 8) & 0xff);
0038b6  f8b3b002          LDRH     r11,[r3,#2]
0038ba  ea4f2b1b          LSR      r11,r11,#8
0038be  f880b000          STRB     r11,[r0,#0]
;;;2999                           *(sp + 1) = (png_byte)(background->red & 0xff);
0038c2  f893b002          LDRB     r11,[r3,#2]
0038c6  f880b001          STRB     r11,[r0,#1]
;;;3000                           *(sp + 2) = (png_byte)((background->green >> 8) & 0xff);
0038ca  f8b3b004          LDRH     r11,[r3,#4]
0038ce  ea4f2b1b          LSR      r11,r11,#8
0038d2  f880b002          STRB     r11,[r0,#2]
;;;3001                           *(sp + 3) = (png_byte)(background->green & 0xff);
0038d6  f893b004          LDRB     r11,[r3,#4]
0038da  f880b003          STRB     r11,[r0,#3]
;;;3002                           *(sp + 4) = (png_byte)((background->blue >> 8) & 0xff);
0038de  f8b3b006          LDRH     r11,[r3,#6]
0038e2  ea4f2b1b          LSR      r11,r11,#8
0038e6  f880b004          STRB     r11,[r0,#4]
;;;3003                           *(sp + 5) = (png_byte)(background->blue & 0xff);
0038ea  f893b006          LDRB     r11,[r3,#6]
0038ee  f880b005          STRB     r11,[r0,#5]
                  |L1.14578|
0038f2  1c52              ADDS     r2,r2,#1              ;2989
0038f4  1d80              ADDS     r0,r0,#6              ;2989
                  |L1.14582|
0038f6  42ba              CMP      r2,r7                 ;2989
0038f8  d3b1              BCC      |L1.14430|
                  |L1.14586|
;;;3004                        }
;;;3005                     }
;;;3006                  }
;;;3007               }
;;;3008               break;
0038fa  e3fc              B        |L1.16630|
                  |L1.14588|
;;;3009            }
;;;3010            case PNG_COLOR_TYPE_GRAY_ALPHA:
;;;3011            {
;;;3012               if (row_info->bit_depth == 8)
0038fc  f899a009          LDRB     r10,[r9,#9]
003900  f1ba0f08          CMP      r10,#8
003904  d171              BNE      |L1.14826|
;;;3013               {
;;;3014   #if defined(PNG_READ_GAMMA_SUPPORTED)
;;;3015                  if (gamma_to_1 != NULL && gamma_from_1 != NULL &&
003906  f8dda048          LDR      r10,[sp,#0x48]
00390a  f1ba0f00          CMP      r10,#0
00390e  d050              BEQ      |L1.14770|
003910  f8dda044          LDR      r10,[sp,#0x44]
003914  f1ba0f00          CMP      r10,#0
003918  d04b              BEQ      |L1.14770|
;;;3016                      gamma_table != NULL)
00391a  f1bc0f00          CMP      r12,#0
00391e  d048              BEQ      |L1.14770|
;;;3017                  {
;;;3018                     sp = row;
003920  4628              MOV      r0,r5
;;;3019                     dp = row;
003922  4601              MOV      r1,r0
;;;3020                     for (i = 0; i < row_width; i++, sp += 2, dp++)
003924  2200              MOVS     r2,#0
003926  e041              B        |L1.14764|
                  |L1.14632|
;;;3021                     {
;;;3022                        png_uint_16 a = *(sp + 1);
003928  f890a001          LDRB     r10,[r0,#1]
;;;3023   
;;;3024                        if (a == 0xff)
00392c  f1ba0fff          CMP      r10,#0xff
003930  d106              BNE      |L1.14656|
;;;3025                        {
;;;3026                           *dp = gamma_table[*sp];
003932  f890b000          LDRB     r11,[r0,#0]
003936  f81cb00b          LDRB     r11,[r12,r11]
00393a  f881b000          STRB     r11,[r1,#0]
00393e  e032              B        |L1.14758|
                  |L1.14656|
;;;3027                        }
;;;3028                        else if (a == 0)
003940  f1ba0f00          CMP      r10,#0
003944  d104              BNE      |L1.14672|
;;;3029                        {
;;;3030                           /* background is already in screen gamma */
;;;3031                           *dp = (png_byte)background->gray;
003946  f893b008          LDRB     r11,[r3,#8]
00394a  f881b000          STRB     r11,[r1,#0]
00394e  e02a              B        |L1.14758|
                  |L1.14672|
;;;3032                        }
;;;3033                        else
;;;3034                        {
;;;3035                           png_byte v, w;
;;;3036   
;;;3037                           v = gamma_to_1[*sp];
003950  f890e000          LDRB     lr,[r0,#0]
003954  f8ddb048          LDR      r11,[sp,#0x48]
003958  f81bb00e          LDRB     r11,[r11,lr]
00395c  f8cdb014          STR      r11,[sp,#0x14]
;;;3038                           png_composite(w, v, a, background_1->gray);
003960  f8ddb03c          LDR      r11,[sp,#0x3c]
003964  f8bbb008          LDRH     r11,[r11,#8]
003968  f1ca0eff          RSB      lr,r10,#0xff
00396c  fb0bfb0e          MUL      r11,r11,lr
003970  f8dde014          LDR      lr,[sp,#0x14]
003974  fb0ebb0a          MLA      r11,lr,r10,r11
003978  f10b0b80          ADD      r11,r11,#0x80
00397c  fa1ffb8b          UXTH     r11,r11
003980  f8cdb00c          STR      r11,[sp,#0xc]
003984  f8ddb00c          LDR      r11,[sp,#0xc]
003988  eb0b2b2b          ADD      r11,r11,r11,ASR #8
00398c  f3cb2b07          UBFX     r11,r11,#8,#8
003990  f8cdb010          STR      r11,[sp,#0x10]
;;;3039                           *dp = gamma_from_1[w];
003994  f8dde010          LDR      lr,[sp,#0x10]
003998  f8ddb044          LDR      r11,[sp,#0x44]
00399c  f81bb00e          LDRB     r11,[r11,lr]
0039a0  f881b000          STRB     r11,[r1,#0]
;;;3040                        }
0039a4  bf00              NOP      
                  |L1.14758|
0039a6  1c52              ADDS     r2,r2,#1              ;3020
0039a8  1c80              ADDS     r0,r0,#2              ;3020
0039aa  1c49              ADDS     r1,r1,#1              ;3020
                  |L1.14764|
0039ac  42ba              CMP      r2,r7                 ;3020
0039ae  d3bb              BCC      |L1.14632|
0039b0  e139              B        |L1.15398|
                  |L1.14770|
;;;3041                     }
;;;3042                  }
;;;3043                  else
;;;3044   #endif
;;;3045                  {
;;;3046                     sp = row;
0039b2  4628              MOV      r0,r5
;;;3047                     dp = row;
0039b4  4601              MOV      r1,r0
;;;3048                     for (i = 0; i < row_width; i++, sp += 2, dp++)
0039b6  2200              MOVS     r2,#0
0039b8  e03a              B        |L1.14896|
                  |L1.14778|
;;;3049                     {
;;;3050                        png_byte a = *(sp + 1);
0039ba  f890a001          LDRB     r10,[r0,#1]
0039be  f8cda014          STR      r10,[sp,#0x14]
;;;3051   
;;;3052                        if (a == 0xff)
0039c2  f8dda014          LDR      r10,[sp,#0x14]
0039c6  f1ba0fff          CMP      r10,#0xff
0039ca  d104              BNE      |L1.14806|
;;;3053                        {
;;;3054                           *dp = *sp;
0039cc  f890a000          LDRB     r10,[r0,#0]
0039d0  f881a000          STRB     r10,[r1,#0]
0039d4  e029              B        |L1.14890|
                  |L1.14806|
;;;3055                        }
;;;3056   #if defined(PNG_READ_GAMMA_SUPPORTED)
;;;3057                        else if (a == 0)
0039d6  f8dda014          LDR      r10,[sp,#0x14]
0039da  f1ba0f00          CMP      r10,#0
0039de  d105              BNE      |L1.14828|
;;;3058                        {
;;;3059                           *dp = (png_byte)background->gray;
0039e0  f893a008          LDRB     r10,[r3,#8]
0039e4  f881a000          STRB     r10,[r1,#0]
0039e8  e01f              B        |L1.14890|
                  |L1.14826|
0039ea  e024              B        |L1.14902|
                  |L1.14828|
;;;3060                        }
;;;3061                        else
;;;3062                        {
;;;3063                           png_composite(*dp, *sp, a, background_1->gray);
0039ec  f8dda03c          LDR      r10,[sp,#0x3c]
0039f0  f8baa008          LDRH     r10,[r10,#8]
0039f4  f8ddb014          LDR      r11,[sp,#0x14]
0039f8  f1cb0bff          RSB      r11,r11,#0xff
0039fc  fb0afa0b          MUL      r10,r10,r11
003a00  f890e000          LDRB     lr,[r0,#0]
003a04  f8ddb014          LDR      r11,[sp,#0x14]
003a08  fb0eaa0b          MLA      r10,lr,r11,r10
003a0c  f10a0a80          ADD      r10,r10,#0x80
003a10  fa1ffa8a          UXTH     r10,r10
003a14  f8cda010          STR      r10,[sp,#0x10]
003a18  f8dda010          LDR      r10,[sp,#0x10]
003a1c  eb0a2a2a          ADD      r10,r10,r10,ASR #8
003a20  ea4f2a1a          LSR      r10,r10,#8
003a24  f881a000          STRB     r10,[r1,#0]
003a28  bf00              NOP      
                  |L1.14890|
003a2a  1c52              ADDS     r2,r2,#1              ;3048
003a2c  1c80              ADDS     r0,r0,#2              ;3048
003a2e  1c49              ADDS     r1,r1,#1              ;3048
                  |L1.14896|
003a30  42ba              CMP      r2,r7                 ;3048
003a32  d3c2              BCC      |L1.14778|
003a34  e0f7              B        |L1.15398|
                  |L1.14902|
;;;3064                        }
;;;3065   #else
;;;3066                        *dp = (png_byte)background->gray;
;;;3067   #endif
;;;3068                     }
;;;3069                  }
;;;3070               }
;;;3071               else /* if (png_ptr->bit_depth == 16) */
;;;3072               {
;;;3073   #if defined(PNG_READ_GAMMA_SUPPORTED)
;;;3074                  if (gamma_16 != NULL && gamma_16_from_1 != NULL &&
003a36  f8dda04c          LDR      r10,[sp,#0x4c]
003a3a  f1ba0f00          CMP      r10,#0
003a3e  d07d              BEQ      |L1.15164|
003a40  f8dda050          LDR      r10,[sp,#0x50]
003a44  f1ba0f00          CMP      r10,#0
003a48  d078              BEQ      |L1.15164|
;;;3075                      gamma_16_to_1 != NULL)
003a4a  f8dda054          LDR      r10,[sp,#0x54]
003a4e  f1ba0f00          CMP      r10,#0
003a52  d073              BEQ      |L1.15164|
;;;3076                  {
;;;3077                     sp = row;
003a54  4628              MOV      r0,r5
;;;3078                     dp = row;
003a56  4601              MOV      r1,r0
;;;3079                     for (i = 0; i < row_width; i++, sp += 4, dp += 2)
003a58  2200              MOVS     r2,#0
003a5a  e081              B        |L1.15200|
                  |L1.14940|
;;;3080                     {
;;;3081                        png_uint_16 a = (png_uint_16)(((*(sp+2)) << 8) + *(sp+3));
003a5c  f890a003          LDRB     r10,[r0,#3]
003a60  f890b002          LDRB     r11,[r0,#2]
003a64  eb0a2a0b          ADD      r10,r10,r11,LSL #8
003a68  fa1ffa8a          UXTH     r10,r10
003a6c  f8cda014          STR      r10,[sp,#0x14]
;;;3082   
;;;3083                        if (a == (png_uint_16)0xffff)
003a70  f64f7bff          MOV      r11,#0xffff
003a74  f8dda014          LDR      r10,[sp,#0x14]
003a78  45da              CMP      r10,r11
003a7a  d114              BNE      |L1.15014|
;;;3084                        {
;;;3085                           png_uint_16 v;
;;;3086   
;;;3087                           v = gamma_16[*(sp + 1) >> gamma_shift][*sp];
003a7c  e000              B        |L1.14976|
                  |L1.14974|
003a7e  e0d3              B        |L1.15400|
                  |L1.14976|
003a80  f890b001          LDRB     r11,[r0,#1]
003a84  fa4bfb08          ASR      r11,r11,r8
003a88  f8dde04c          LDR      lr,[sp,#0x4c]
003a8c  f85eb02b          LDR      r11,[lr,r11,LSL #2]
003a90  f890e000          LDRB     lr,[r0,#0]
003a94  f83ba01e          LDRH     r10,[r11,lr,LSL #1]
;;;3088                           *dp = (png_byte)((v >> 8) & 0xff);
003a98  ea4f2b1a          LSR      r11,r10,#8
003a9c  f881b000          STRB     r11,[r1,#0]
;;;3089                           *(dp + 1) = (png_byte)(v & 0xff);
003aa0  f881a001          STRB     r10,[r1,#1]
;;;3090                        }
003aa4  e059              B        |L1.15194|
                  |L1.15014|
;;;3091   #if defined(PNG_READ_GAMMA_SUPPORTED)
;;;3092                        else if (a == 0)
003aa6  f8dda014          LDR      r10,[sp,#0x14]
003aaa  f1ba0f00          CMP      r10,#0
003aae  d10a              BNE      |L1.15046|
;;;3093   #else
;;;3094                        else
;;;3095   #endif
;;;3096                        {
;;;3097                           /* background is already in screen gamma */
;;;3098                           *dp = (png_byte)((background->gray >> 8) & 0xff);
003ab0  f8b3a008          LDRH     r10,[r3,#8]
003ab4  ea4f2a1a          LSR      r10,r10,#8
003ab8  f881a000          STRB     r10,[r1,#0]
;;;3099                           *(dp + 1) = (png_byte)(background->gray & 0xff);
003abc  f893a008          LDRB     r10,[r3,#8]
003ac0  f881a001          STRB     r10,[r1,#1]
003ac4  e049              B        |L1.15194|
                  |L1.15046|
;;;3100                        }
;;;3101   #if defined(PNG_READ_GAMMA_SUPPORTED)
;;;3102                        else
;;;3103                        {
;;;3104                           png_uint_16 g, v, w;
;;;3105   
;;;3106                           g = gamma_16_to_1[*(sp + 1) >> gamma_shift][*sp];
003ac6  f890a001          LDRB     r10,[r0,#1]
003aca  fa4afa08          ASR      r10,r10,r8
003ace  f8ddb054          LDR      r11,[sp,#0x54]
003ad2  f85ba02a          LDR      r10,[r11,r10,LSL #2]
003ad6  f890b000          LDRB     r11,[r0,#0]
003ada  f83aa01b          LDRH     r10,[r10,r11,LSL #1]
003ade  f8cda010          STR      r10,[sp,#0x10]
;;;3107                           png_composite_16(v, g, a, background_1->gray);
003ae2  f8dda03c          LDR      r10,[sp,#0x3c]
003ae6  f8baa008          LDRH     r10,[r10,#8]
003aea  f64f7eff          MOV      lr,#0xffff
003aee  f8ddb014          LDR      r11,[sp,#0x14]
003af2  ebae0b0b          SUB      r11,lr,r11
003af6  fb0afa0b          MUL      r10,r10,r11
003afa  e9ddbe04          LDRD     r11,lr,[sp,#0x10]
003afe  fb0baa0e          MLA      r10,r11,lr,r10
003b02  f50a4a00          ADD      r10,r10,#0x8000
003b06  f8cda004          STR      r10,[sp,#4]
003b0a  f8dda004          LDR      r10,[sp,#4]
003b0e  eb0a4a1a          ADD      r10,r10,r10,LSR #16
003b12  ea4f4a1a          LSR      r10,r10,#16
003b16  f8cda00c          STR      r10,[sp,#0xc]
;;;3108                           w = gamma_16_from_1[(v&0xff) >> gamma_shift][v >> 8];
003b1a  f8dda00c          LDR      r10,[sp,#0xc]
003b1e  f00a0aff          AND      r10,r10,#0xff
003b22  fa4afa08          ASR      r10,r10,r8
003b26  f8ddb050          LDR      r11,[sp,#0x50]
003b2a  f85bb02a          LDR      r11,[r11,r10,LSL #2]
003b2e  f8dda00c          LDR      r10,[sp,#0xc]
003b32  ea4f2a2a          ASR      r10,r10,#8
003b36  f83ba01a          LDRH     r10,[r11,r10,LSL #1]
003b3a  e001              B        |L1.15168|
                  |L1.15164|
003b3c  e014              B        |L1.15208|
                  |L1.15166|
003b3e  e3fc              B        |L1.17210|
                  |L1.15168|
003b40  f8cda008          STR      r10,[sp,#8]
;;;3109                           *dp = (png_byte)((w >> 8) & 0xff);
003b44  f8dda008          LDR      r10,[sp,#8]
003b48  ea4f2a1a          LSR      r10,r10,#8
003b4c  f881a000          STRB     r10,[r1,#0]
;;;3110                           *(dp + 1) = (png_byte)(w & 0xff);
003b50  f8dda008          LDR      r10,[sp,#8]
003b54  f881a001          STRB     r10,[r1,#1]
;;;3111                        }
003b58  bf00              NOP      
                  |L1.15194|
003b5a  1c52              ADDS     r2,r2,#1              ;3079
003b5c  1d00              ADDS     r0,r0,#4              ;3079
003b5e  1c89              ADDS     r1,r1,#2              ;3079
                  |L1.15200|
003b60  42ba              CMP      r2,r7                 ;3079
003b62  f4ffaf7b          BCC      |L1.14940|
003b66  e05e              B        |L1.15398|
                  |L1.15208|
;;;3112   #endif
;;;3113                     }
;;;3114                  }
;;;3115                  else
;;;3116   #endif
;;;3117                  {
;;;3118                     sp = row;
003b68  4628              MOV      r0,r5
;;;3119                     dp = row;
003b6a  4601              MOV      r1,r0
;;;3120                     for (i = 0; i < row_width; i++, sp += 4, dp += 2)
003b6c  2200              MOVS     r2,#0
003b6e  e058              B        |L1.15394|
                  |L1.15216|
;;;3121                     {
;;;3122                        png_uint_16 a = (png_uint_16)(((*(sp+2)) << 8) + *(sp+3));
003b70  f890a003          LDRB     r10,[r0,#3]
003b74  f890b002          LDRB     r11,[r0,#2]
003b78  eb0a2a0b          ADD      r10,r10,r11,LSL #8
003b7c  fa1ffa8a          UXTH     r10,r10
003b80  f8cda014          STR      r10,[sp,#0x14]
;;;3123                        if (a == (png_uint_16)0xffff)
003b84  f64f7bff          MOV      r11,#0xffff
003b88  f8dda014          LDR      r10,[sp,#0x14]
003b8c  45da              CMP      r10,r11
003b8e  d104              BNE      |L1.15258|
;;;3124                        {
;;;3125                           png_memcpy(dp, sp, 2);
003b90  f8b0a000          LDRH     r10,[r0,#0]
003b94  f8a1a000          STRH     r10,[r1,#0]
003b98  e040              B        |L1.15388|
                  |L1.15258|
;;;3126                        }
;;;3127   #if defined(PNG_READ_GAMMA_SUPPORTED)
;;;3128                        else if (a == 0)
003b9a  f8dda014          LDR      r10,[sp,#0x14]
003b9e  f1ba0f00          CMP      r10,#0
003ba2  d10a              BNE      |L1.15290|
;;;3129   #else
;;;3130                        else
;;;3131   #endif
;;;3132                        {
;;;3133                           *dp = (png_byte)((background->gray >> 8) & 0xff);
003ba4  f8b3a008          LDRH     r10,[r3,#8]
003ba8  ea4f2a1a          LSR      r10,r10,#8
003bac  f881a000          STRB     r10,[r1,#0]
;;;3134                           *(dp + 1) = (png_byte)(background->gray & 0xff);
003bb0  f893a008          LDRB     r10,[r3,#8]
003bb4  f881a001          STRB     r10,[r1,#1]
003bb8  e030              B        |L1.15388|
                  |L1.15290|
;;;3135                        }
;;;3136   #if defined(PNG_READ_GAMMA_SUPPORTED)
;;;3137                        else
;;;3138                        {
;;;3139                           png_uint_16 g, v;
;;;3140   
;;;3141                           g = (png_uint_16)(((*sp) << 8) + *(sp + 1));
003bba  f890a001          LDRB     r10,[r0,#1]
003bbe  f890b000          LDRB     r11,[r0,#0]
003bc2  eb0a2a0b          ADD      r10,r10,r11,LSL #8
003bc6  fa1ffa8a          UXTH     r10,r10
003bca  f8cda010          STR      r10,[sp,#0x10]
;;;3142                           png_composite_16(v, g, a, background_1->gray);
003bce  f8dda03c          LDR      r10,[sp,#0x3c]
003bd2  f8baa008          LDRH     r10,[r10,#8]
003bd6  f64f7eff          MOV      lr,#0xffff
003bda  f8ddb014          LDR      r11,[sp,#0x14]
003bde  ebae0b0b          SUB      r11,lr,r11
003be2  fb0afa0b          MUL      r10,r10,r11
003be6  e9ddbe04          LDRD     r11,lr,[sp,#0x10]
003bea  fb0baa0e          MLA      r10,r11,lr,r10
003bee  f50a4a00          ADD      r10,r10,#0x8000
003bf2  f8cda008          STR      r10,[sp,#8]
003bf6  f8dda008          LDR      r10,[sp,#8]
003bfa  eb0a4a1a          ADD      r10,r10,r10,LSR #16
003bfe  ea4f4a1a          LSR      r10,r10,#16
003c02  f8cda00c          STR      r10,[sp,#0xc]
;;;3143                           *dp = (png_byte)((v >> 8) & 0xff);
003c06  f8dda00c          LDR      r10,[sp,#0xc]
003c0a  ea4f2a1a          LSR      r10,r10,#8
003c0e  f881a000          STRB     r10,[r1,#0]
;;;3144                           *(dp + 1) = (png_byte)(v & 0xff);
003c12  f8dda00c          LDR      r10,[sp,#0xc]
003c16  f881a001          STRB     r10,[r1,#1]
;;;3145                        }
003c1a  bf00              NOP      
                  |L1.15388|
003c1c  1c52              ADDS     r2,r2,#1              ;3120
003c1e  1d00              ADDS     r0,r0,#4              ;3120
003c20  1c89              ADDS     r1,r1,#2              ;3120
                  |L1.15394|
003c22  42ba              CMP      r2,r7                 ;3120
003c24  d3a4              BCC      |L1.15216|
                  |L1.15398|
;;;3146   #endif
;;;3147                     }
;;;3148                  }
;;;3149               }
;;;3150               break;
003c26  e382              B        |L1.17198|
                  |L1.15400|
;;;3151            }
;;;3152            case PNG_COLOR_TYPE_RGB_ALPHA:
;;;3153            {
;;;3154               if (row_info->bit_depth == 8)
003c28  f899a009          LDRB     r10,[r9,#9]
003c2c  f1ba0f08          CMP      r10,#8
003c30  d17d              BNE      |L1.15662|
;;;3155               {
;;;3156   #if defined(PNG_READ_GAMMA_SUPPORTED)
;;;3157                  if (gamma_to_1 != NULL && gamma_from_1 != NULL &&
003c32  f8dda048          LDR      r10,[sp,#0x48]
003c36  f1ba0f00          CMP      r10,#0
003c3a  d079              BEQ      |L1.15664|
003c3c  f8dda044          LDR      r10,[sp,#0x44]
003c40  f1ba0f00          CMP      r10,#0
003c44  d074              BEQ      |L1.15664|
;;;3158                      gamma_table != NULL)
003c46  f1bc0f00          CMP      r12,#0
003c4a  d071              BEQ      |L1.15664|
;;;3159                  {
;;;3160                     sp = row;
003c4c  4628              MOV      r0,r5
;;;3161                     dp = row;
003c4e  4601              MOV      r1,r0
;;;3162                     for (i = 0; i < row_width; i++, sp += 4, dp += 3)
003c50  2200              MOVS     r2,#0
003c52  e0ac              B        |L1.15790|
                  |L1.15444|
;;;3163                     {
;;;3164                        png_byte a = *(sp + 3);
003c54  f890a003          LDRB     r10,[r0,#3]
;;;3165   
;;;3166                        if (a == 0xff)
003c58  f1ba0fff          CMP      r10,#0xff
003c5c  d112              BNE      |L1.15492|
;;;3167                        {
;;;3168                           *dp = gamma_table[*sp];
003c5e  f890b000          LDRB     r11,[r0,#0]
003c62  f81cb00b          LDRB     r11,[r12,r11]
003c66  f881b000          STRB     r11,[r1,#0]
;;;3169                           *(dp + 1) = gamma_table[*(sp + 1)];
003c6a  f890b001          LDRB     r11,[r0,#1]
003c6e  f81cb00b          LDRB     r11,[r12,r11]
003c72  f881b001          STRB     r11,[r1,#1]
;;;3170                           *(dp + 2) = gamma_table[*(sp + 2)];
003c76  f890b002          LDRB     r11,[r0,#2]
003c7a  f81cb00b          LDRB     r11,[r12,r11]
003c7e  f881b002          STRB     r11,[r1,#2]
003c82  e091              B        |L1.15784|
                  |L1.15492|
;;;3171                        }
;;;3172                        else if (a == 0)
003c84  f1ba0f00          CMP      r10,#0
003c88  d10c              BNE      |L1.15524|
;;;3173                        {
;;;3174                           /* background is already in screen gamma */
;;;3175                           *dp = (png_byte)background->red;
003c8a  f893b002          LDRB     r11,[r3,#2]
003c8e  f881b000          STRB     r11,[r1,#0]
;;;3176                           *(dp + 1) = (png_byte)background->green;
003c92  f893b004          LDRB     r11,[r3,#4]
003c96  f881b001          STRB     r11,[r1,#1]
;;;3177                           *(dp + 2) = (png_byte)background->blue;
003c9a  f893b006          LDRB     r11,[r3,#6]
003c9e  f881b002          STRB     r11,[r1,#2]
003ca2  e081              B        |L1.15784|
                  |L1.15524|
;;;3178                        }
;;;3179                        else
;;;3180                        {
;;;3181                           png_byte v, w;
;;;3182   
;;;3183                           v = gamma_to_1[*sp];
003ca4  f890e000          LDRB     lr,[r0,#0]
003ca8  f8ddb048          LDR      r11,[sp,#0x48]
003cac  f81bb00e          LDRB     r11,[r11,lr]
003cb0  f8cdb014          STR      r11,[sp,#0x14]
;;;3184                           png_composite(w, v, a, background_1->red);
003cb4  f8ddb03c          LDR      r11,[sp,#0x3c]
003cb8  f8bbb002          LDRH     r11,[r11,#2]
003cbc  f1ca0eff          RSB      lr,r10,#0xff
003cc0  fb0bfb0e          MUL      r11,r11,lr
003cc4  f8dde014          LDR      lr,[sp,#0x14]
003cc8  fb0ebb0a          MLA      r11,lr,r10,r11
003ccc  f10b0b80          ADD      r11,r11,#0x80
003cd0  fa1ffb8b          UXTH     r11,r11
003cd4  f8cdb00c          STR      r11,[sp,#0xc]
003cd8  f8ddb00c          LDR      r11,[sp,#0xc]
003cdc  eb0b2b2b          ADD      r11,r11,r11,ASR #8
003ce0  f3cb2b07          UBFX     r11,r11,#8,#8
003ce4  f8cdb010          STR      r11,[sp,#0x10]
;;;3185                           *dp = gamma_from_1[w];
003ce8  f8dde010          LDR      lr,[sp,#0x10]
003cec  f8ddb044          LDR      r11,[sp,#0x44]
003cf0  f81bb00e          LDRB     r11,[r11,lr]
003cf4  f881b000          STRB     r11,[r1,#0]
;;;3186                           v = gamma_to_1[*(sp + 1)];
003cf8  f890e001          LDRB     lr,[r0,#1]
003cfc  f8ddb048          LDR      r11,[sp,#0x48]
003d00  f81bb00e          LDRB     r11,[r11,lr]
003d04  f8cdb014          STR      r11,[sp,#0x14]
;;;3187                           png_composite(w, v, a, background_1->green);
003d08  f8ddb03c          LDR      r11,[sp,#0x3c]
003d0c  f8bbb004          LDRH     r11,[r11,#4]
003d10  f1ca0eff          RSB      lr,r10,#0xff
003d14  fb0bfb0e          MUL      r11,r11,lr
003d18  f8dde014          LDR      lr,[sp,#0x14]
003d1c  fb0ebb0a          MLA      r11,lr,r10,r11
003d20  f10b0b80          ADD      r11,r11,#0x80
003d24  fa1ffb8b          UXTH     r11,r11
003d28  f8cdb00c          STR      r11,[sp,#0xc]
003d2c  e001              B        |L1.15666|
                  |L1.15662|
003d2e  e0ca              B        |L1.16070|
                  |L1.15664|
003d30  e041              B        |L1.15798|
                  |L1.15666|
003d32  f8ddb00c          LDR      r11,[sp,#0xc]
003d36  eb0b2b2b          ADD      r11,r11,r11,ASR #8
003d3a  f3cb2b07          UBFX     r11,r11,#8,#8
003d3e  f8cdb010          STR      r11,[sp,#0x10]
;;;3188                           *(dp + 1) = gamma_from_1[w];
003d42  f8dde010          LDR      lr,[sp,#0x10]
003d46  f8ddb044          LDR      r11,[sp,#0x44]
003d4a  f81bb00e          LDRB     r11,[r11,lr]
003d4e  f881b001          STRB     r11,[r1,#1]
;;;3189                           v = gamma_to_1[*(sp + 2)];
003d52  f890e002          LDRB     lr,[r0,#2]
003d56  f8ddb048          LDR      r11,[sp,#0x48]
003d5a  f81bb00e          LDRB     r11,[r11,lr]
003d5e  f8cdb014          STR      r11,[sp,#0x14]
;;;3190                           png_composite(w, v, a, background_1->blue);
003d62  f8ddb03c          LDR      r11,[sp,#0x3c]
003d66  f8bbb006          LDRH     r11,[r11,#6]
003d6a  f1ca0eff          RSB      lr,r10,#0xff
003d6e  fb0bfb0e          MUL      r11,r11,lr
003d72  f8dde014          LDR      lr,[sp,#0x14]
003d76  fb0ebb0a          MLA      r11,lr,r10,r11
003d7a  f10b0b80          ADD      r11,r11,#0x80
003d7e  fa1ffb8b          UXTH     r11,r11
003d82  f8cdb00c          STR      r11,[sp,#0xc]
003d86  f8ddb00c          LDR      r11,[sp,#0xc]
003d8a  eb0b2b2b          ADD      r11,r11,r11,ASR #8
003d8e  f3cb2b07          UBFX     r11,r11,#8,#8
003d92  f8cdb010          STR      r11,[sp,#0x10]
;;;3191                           *(dp + 2) = gamma_from_1[w];
003d96  f8dde010          LDR      lr,[sp,#0x10]
003d9a  f8ddb044          LDR      r11,[sp,#0x44]
003d9e  f81bb00e          LDRB     r11,[r11,lr]
003da2  f881b002          STRB     r11,[r1,#2]
;;;3192                        }
003da6  bf00              NOP      
                  |L1.15784|
003da8  1c52              ADDS     r2,r2,#1              ;3162
003daa  1d00              ADDS     r0,r0,#4              ;3162
003dac  1cc9              ADDS     r1,r1,#3              ;3162
                  |L1.15790|
003dae  42ba              CMP      r2,r7                 ;3162
003db0  f4ffaf50          BCC      |L1.15444|
003db4  e2ba              B        |L1.17196|
                  |L1.15798|
;;;3193                     }
;;;3194                  }
;;;3195                  else
;;;3196   #endif
;;;3197                  {
;;;3198                     sp = row;
003db6  4628              MOV      r0,r5
;;;3199                     dp = row;
003db8  4601              MOV      r1,r0
;;;3200                     for (i = 0; i < row_width; i++, sp += 4, dp += 3)
003dba  2200              MOVS     r2,#0
003dbc  e07f              B        |L1.16062|
                  |L1.15806|
;;;3201                     {
;;;3202                        png_byte a = *(sp + 3);
003dbe  f890a003          LDRB     r10,[r0,#3]
003dc2  f8cda014          STR      r10,[sp,#0x14]
;;;3203   
;;;3204                        if (a == 0xff)
003dc6  f8dda014          LDR      r10,[sp,#0x14]
003dca  f1ba0fff          CMP      r10,#0xff
003dce  d10c              BNE      |L1.15850|
;;;3205                        {
;;;3206                           *dp = *sp;
003dd0  f890a000          LDRB     r10,[r0,#0]
003dd4  f881a000          STRB     r10,[r1,#0]
;;;3207                           *(dp + 1) = *(sp + 1);
003dd8  f890a001          LDRB     r10,[r0,#1]
003ddc  f881a001          STRB     r10,[r1,#1]
;;;3208                           *(dp + 2) = *(sp + 2);
003de0  f890a002          LDRB     r10,[r0,#2]
003de4  f881a002          STRB     r10,[r1,#2]
003de8  e066              B        |L1.16056|
                  |L1.15850|
;;;3209                        }
;;;3210                        else if (a == 0)
003dea  f8dda014          LDR      r10,[sp,#0x14]
003dee  f1ba0f00          CMP      r10,#0
003df2  d10c              BNE      |L1.15886|
;;;3211                        {
;;;3212                           *dp = (png_byte)background->red;
003df4  f893a002          LDRB     r10,[r3,#2]
003df8  f881a000          STRB     r10,[r1,#0]
;;;3213                           *(dp + 1) = (png_byte)background->green;
003dfc  f893a004          LDRB     r10,[r3,#4]
003e00  f881a001          STRB     r10,[r1,#1]
;;;3214                           *(dp + 2) = (png_byte)background->blue;
003e04  f893a006          LDRB     r10,[r3,#6]
003e08  f881a002          STRB     r10,[r1,#2]
003e0c  e054              B        |L1.16056|
                  |L1.15886|
;;;3215                        }
;;;3216                        else
;;;3217                        {
;;;3218                           png_composite(*dp, *sp, a, background->red);
003e0e  f8b3a002          LDRH     r10,[r3,#2]
003e12  f8ddb014          LDR      r11,[sp,#0x14]
003e16  f1cb0bff          RSB      r11,r11,#0xff
003e1a  fb0afa0b          MUL      r10,r10,r11
003e1e  f890e000          LDRB     lr,[r0,#0]
003e22  f8ddb014          LDR      r11,[sp,#0x14]
003e26  fb0eaa0b          MLA      r10,lr,r11,r10
003e2a  f10a0a80          ADD      r10,r10,#0x80
003e2e  fa1ffa8a          UXTH     r10,r10
003e32  f8cda010          STR      r10,[sp,#0x10]
003e36  f8dda010          LDR      r10,[sp,#0x10]
003e3a  eb0a2a2a          ADD      r10,r10,r10,ASR #8
003e3e  ea4f2a1a          LSR      r10,r10,#8
003e42  f881a000          STRB     r10,[r1,#0]
;;;3219                           png_composite(*(dp + 1), *(sp + 1), a,
003e46  f8b3a004          LDRH     r10,[r3,#4]
003e4a  f8ddb014          LDR      r11,[sp,#0x14]
003e4e  f1cb0bff          RSB      r11,r11,#0xff
003e52  fb0afa0b          MUL      r10,r10,r11
003e56  f890e001          LDRB     lr,[r0,#1]
003e5a  f8ddb014          LDR      r11,[sp,#0x14]
003e5e  fb0eaa0b          MLA      r10,lr,r11,r10
003e62  f10a0a80          ADD      r10,r10,#0x80
003e66  fa1ffa8a          UXTH     r10,r10
003e6a  f8cda010          STR      r10,[sp,#0x10]
003e6e  f8dda010          LDR      r10,[sp,#0x10]
003e72  eb0a2a2a          ADD      r10,r10,r10,ASR #8
003e76  ea4f2a1a          LSR      r10,r10,#8
003e7a  f881a001          STRB     r10,[r1,#1]
;;;3220                              background->green);
;;;3221                           png_composite(*(dp + 2), *(sp + 2), a,
003e7e  f8b3a006          LDRH     r10,[r3,#6]
003e82  f8ddb014          LDR      r11,[sp,#0x14]
003e86  f1cb0bff          RSB      r11,r11,#0xff
003e8a  fb0afa0b          MUL      r10,r10,r11
003e8e  f890e002          LDRB     lr,[r0,#2]
003e92  f8ddb014          LDR      r11,[sp,#0x14]
003e96  fb0eaa0b          MLA      r10,lr,r11,r10
003e9a  f10a0a80          ADD      r10,r10,#0x80
003e9e  fa1ffa8a          UXTH     r10,r10
003ea2  f8cda010          STR      r10,[sp,#0x10]
003ea6  f8dda010          LDR      r10,[sp,#0x10]
003eaa  eb0a2a2a          ADD      r10,r10,r10,ASR #8
003eae  ea4f2a1a          LSR      r10,r10,#8
003eb2  f881a002          STRB     r10,[r1,#2]
003eb6  bf00              NOP      
                  |L1.16056|
003eb8  1c52              ADDS     r2,r2,#1              ;3200
003eba  1d00              ADDS     r0,r0,#4              ;3200
003ebc  1cc9              ADDS     r1,r1,#3              ;3200
                  |L1.16062|
003ebe  42ba              CMP      r2,r7                 ;3200
003ec0  f4ffaf7d          BCC      |L1.15806|
003ec4  e232              B        |L1.17196|
                  |L1.16070|
;;;3222                              background->blue);
;;;3223                        }
;;;3224                     }
;;;3225                  }
;;;3226               }
;;;3227               else /* if (row_info->bit_depth == 16) */
;;;3228               {
;;;3229   #if defined(PNG_READ_GAMMA_SUPPORTED)
;;;3230                  if (gamma_16 != NULL && gamma_16_from_1 != NULL &&
003ec6  f8dda04c          LDR      r10,[sp,#0x4c]
003eca  f1ba0f00          CMP      r10,#0
003ece  d078              BEQ      |L1.16322|
003ed0  f8dda050          LDR      r10,[sp,#0x50]
003ed4  f1ba0f00          CMP      r10,#0
003ed8  d073              BEQ      |L1.16322|
;;;3231                      gamma_16_to_1 != NULL)
003eda  f8dda054          LDR      r10,[sp,#0x54]
003ede  f1ba0f00          CMP      r10,#0
003ee2  d06e              BEQ      |L1.16322|
;;;3232                  {
;;;3233                     sp = row;
003ee4  4628              MOV      r0,r5
;;;3234                     dp = row;
003ee6  4601              MOV      r1,r0
;;;3235                     for (i = 0; i < row_width; i++, sp += 8, dp += 6)
003ee8  2200              MOVS     r2,#0
003eea  e143              B        |L1.16756|
                  |L1.16108|
;;;3236                     {
;;;3237                        png_uint_16 a = (png_uint_16)(((png_uint_16)(*(sp + 6))
003eec  f890a007          LDRB     r10,[r0,#7]
003ef0  f890b006          LDRB     r11,[r0,#6]
003ef4  eb0a2a0b          ADD      r10,r10,r11,LSL #8
003ef8  fa1ffa8a          UXTH     r10,r10
003efc  f8cda014          STR      r10,[sp,#0x14]
;;;3238                            << 8) + (png_uint_16)(*(sp + 7)));
;;;3239                        if (a == (png_uint_16)0xffff)
003f00  f64f7bff          MOV      r11,#0xffff
003f04  f8dda014          LDR      r10,[sp,#0x14]
003f08  45da              CMP      r10,r11
003f0a  d136              BNE      |L1.16250|
;;;3240                        {
;;;3241                           png_uint_16 v;
;;;3242   
;;;3243                           v = gamma_16[*(sp + 1) >> gamma_shift][*sp];
003f0c  f890b001          LDRB     r11,[r0,#1]
003f10  fa4bfb08          ASR      r11,r11,r8
003f14  f8dde04c          LDR      lr,[sp,#0x4c]
003f18  f85eb02b          LDR      r11,[lr,r11,LSL #2]
003f1c  f890e000          LDRB     lr,[r0,#0]
003f20  f83ba01e          LDRH     r10,[r11,lr,LSL #1]
;;;3244                           *dp = (png_byte)((v >> 8) & 0xff);
003f24  ea4f2b1a          LSR      r11,r10,#8
003f28  f881b000          STRB     r11,[r1,#0]
;;;3245                           *(dp + 1) = (png_byte)(v & 0xff);
003f2c  f881a001          STRB     r10,[r1,#1]
;;;3246                           v = gamma_16[*(sp + 3) >> gamma_shift][*(sp + 2)];
003f30  f890b003          LDRB     r11,[r0,#3]
003f34  fa4bfb08          ASR      r11,r11,r8
003f38  f8dde04c          LDR      lr,[sp,#0x4c]
003f3c  f85eb02b          LDR      r11,[lr,r11,LSL #2]
003f40  f890e002          LDRB     lr,[r0,#2]
003f44  f83ba01e          LDRH     r10,[r11,lr,LSL #1]
;;;3247                           *(dp + 2) = (png_byte)((v >> 8) & 0xff);
003f48  ea4f2b1a          LSR      r11,r10,#8
003f4c  f881b002          STRB     r11,[r1,#2]
;;;3248                           *(dp + 3) = (png_byte)(v & 0xff);
003f50  f881a003          STRB     r10,[r1,#3]
;;;3249                           v = gamma_16[*(sp + 5) >> gamma_shift][*(sp + 4)];
003f54  f890b005          LDRB     r11,[r0,#5]
003f58  fa4bfb08          ASR      r11,r11,r8
003f5c  f8dde04c          LDR      lr,[sp,#0x4c]
003f60  f85eb02b          LDR      r11,[lr,r11,LSL #2]
003f64  f890e004          LDRB     lr,[r0,#4]
003f68  f83ba01e          LDRH     r10,[r11,lr,LSL #1]
;;;3250                           *(dp + 4) = (png_byte)((v >> 8) & 0xff);
003f6c  ea4f2b1a          LSR      r11,r10,#8
003f70  f881b004          STRB     r11,[r1,#4]
;;;3251                           *(dp + 5) = (png_byte)(v & 0xff);
003f74  f881a005          STRB     r10,[r1,#5]
;;;3252                        }
003f78  e0f9              B        |L1.16750|
                  |L1.16250|
;;;3253                        else if (a == 0)
003f7a  f8dda014          LDR      r10,[sp,#0x14]
003f7e  f1ba0f00          CMP      r10,#0
003f82  d11f              BNE      |L1.16324|
;;;3254                        {
;;;3255                           /* background is already in screen gamma */
;;;3256                           *dp = (png_byte)((background->red >> 8) & 0xff);
003f84  f8b3a002          LDRH     r10,[r3,#2]
003f88  ea4f2a1a          LSR      r10,r10,#8
003f8c  f881a000          STRB     r10,[r1,#0]
;;;3257                           *(dp + 1) = (png_byte)(background->red & 0xff);
003f90  f893a002          LDRB     r10,[r3,#2]
003f94  f881a001          STRB     r10,[r1,#1]
;;;3258                           *(dp + 2) = (png_byte)((background->green >> 8) & 0xff);
003f98  f8b3a004          LDRH     r10,[r3,#4]
003f9c  ea4f2a1a          LSR      r10,r10,#8
003fa0  f881a002          STRB     r10,[r1,#2]
;;;3259                           *(dp + 3) = (png_byte)(background->green & 0xff);
003fa4  f893a004          LDRB     r10,[r3,#4]
003fa8  f881a003          STRB     r10,[r1,#3]
;;;3260                           *(dp + 4) = (png_byte)((background->blue >> 8) & 0xff);
003fac  f8b3a006          LDRH     r10,[r3,#6]
003fb0  ea4f2a1a          LSR      r10,r10,#8
003fb4  f881a004          STRB     r10,[r1,#4]
;;;3261                           *(dp + 5) = (png_byte)(background->blue & 0xff);
003fb8  f893a006          LDRB     r10,[r3,#6]
003fbc  f881a005          STRB     r10,[r1,#5]
003fc0  e0d5              B        |L1.16750|
                  |L1.16322|
003fc2  e0db              B        |L1.16764|
                  |L1.16324|
;;;3262                        }
;;;3263                        else
;;;3264                        {
;;;3265                           png_uint_16 v, w, x;
;;;3266   
;;;3267                           v = gamma_16_to_1[*(sp + 1) >> gamma_shift][*sp];
003fc4  f890a001          LDRB     r10,[r0,#1]
003fc8  fa4afa08          ASR      r10,r10,r8
003fcc  f8ddb054          LDR      r11,[sp,#0x54]
003fd0  f85ba02a          LDR      r10,[r11,r10,LSL #2]
003fd4  f890b000          LDRB     r11,[r0,#0]
003fd8  f83aa01b          LDRH     r10,[r10,r11,LSL #1]
003fdc  f8cda010          STR      r10,[sp,#0x10]
;;;3268                           png_composite_16(w, v, a, background_1->red);
003fe0  f8dda03c          LDR      r10,[sp,#0x3c]
003fe4  f8baa002          LDRH     r10,[r10,#2]
003fe8  f64f7eff          MOV      lr,#0xffff
003fec  f8ddb014          LDR      r11,[sp,#0x14]
003ff0  ebae0b0b          SUB      r11,lr,r11
003ff4  fb0afa0b          MUL      r10,r10,r11
003ff8  e9ddbe04          LDRD     r11,lr,[sp,#0x10]
003ffc  fb0baa0e          MLA      r10,r11,lr,r10
004000  f50a4a00          ADD      r10,r10,#0x8000
004004  f8cda004          STR      r10,[sp,#4]
004008  f8dda004          LDR      r10,[sp,#4]
00400c  eb0a4a1a          ADD      r10,r10,r10,LSR #16
004010  ea4f4a1a          LSR      r10,r10,#16
004014  f8cda00c          STR      r10,[sp,#0xc]
;;;3269                           x = gamma_16_from_1[((w&0xff) >> gamma_shift)][w >> 8];
004018  f8dda00c          LDR      r10,[sp,#0xc]
00401c  f00a0aff          AND      r10,r10,#0xff
004020  fa4afa08          ASR      r10,r10,r8
004024  f8ddb050          LDR      r11,[sp,#0x50]
004028  f85bb02a          LDR      r11,[r11,r10,LSL #2]
00402c  f8dda00c          LDR      r10,[sp,#0xc]
004030  ea4f2a2a          ASR      r10,r10,#8
004034  f83ba01a          LDRH     r10,[r11,r10,LSL #1]
004038  f8cda008          STR      r10,[sp,#8]
;;;3270                           *dp = (png_byte)((x >> 8) & 0xff);
00403c  f8dda008          LDR      r10,[sp,#8]
004040  ea4f2a1a          LSR      r10,r10,#8
004044  f881a000          STRB     r10,[r1,#0]
;;;3271                           *(dp + 1) = (png_byte)(x & 0xff);
004048  f8dda008          LDR      r10,[sp,#8]
00404c  f881a001          STRB     r10,[r1,#1]
;;;3272                           v = gamma_16_to_1[*(sp + 3) >> gamma_shift][*(sp + 2)];
004050  f890a003          LDRB     r10,[r0,#3]
004054  fa4afa08          ASR      r10,r10,r8
004058  f8ddb054          LDR      r11,[sp,#0x54]
00405c  f85ba02a          LDR      r10,[r11,r10,LSL #2]
004060  f890b002          LDRB     r11,[r0,#2]
004064  f83aa01b          LDRH     r10,[r10,r11,LSL #1]
004068  f8cda010          STR      r10,[sp,#0x10]
;;;3273                           png_composite_16(w, v, a, background_1->green);
00406c  f8dda03c          LDR      r10,[sp,#0x3c]
004070  f8baa004          LDRH     r10,[r10,#4]
004074  f64f7eff          MOV      lr,#0xffff
004078  f8ddb014          LDR      r11,[sp,#0x14]
00407c  ebae0b0b          SUB      r11,lr,r11
004080  fb0afa0b          MUL      r10,r10,r11
004084  e9ddbe04          LDRD     r11,lr,[sp,#0x10]
004088  fb0baa0e          MLA      r10,r11,lr,r10
00408c  f50a4a00          ADD      r10,r10,#0x8000
004090  f8cda004          STR      r10,[sp,#4]
004094  f8dda004          LDR      r10,[sp,#4]
004098  eb0a4a1a          ADD      r10,r10,r10,LSR #16
00409c  ea4f4a1a          LSR      r10,r10,#16
0040a0  f8cda00c          STR      r10,[sp,#0xc]
;;;3274                           x = gamma_16_from_1[((w&0xff) >> gamma_shift)][w >> 8];
0040a4  f8dda00c          LDR      r10,[sp,#0xc]
0040a8  f00a0aff          AND      r10,r10,#0xff
0040ac  fa4afa08          ASR      r10,r10,r8
0040b0  f8ddb050          LDR      r11,[sp,#0x50]
0040b4  f85bb02a          LDR      r11,[r11,r10,LSL #2]
0040b8  f8dda00c          LDR      r10,[sp,#0xc]
0040bc  ea4f2a2a          ASR      r10,r10,#8
0040c0  f83ba01a          LDRH     r10,[r11,r10,LSL #1]
0040c4  f8cda008          STR      r10,[sp,#8]
;;;3275                           *(dp + 2) = (png_byte)((x >> 8) & 0xff);
0040c8  f8dda008          LDR      r10,[sp,#8]
0040cc  ea4f2a1a          LSR      r10,r10,#8
0040d0  f881a002          STRB     r10,[r1,#2]
;;;3276                           *(dp + 3) = (png_byte)(x & 0xff);
0040d4  f8dda008          LDR      r10,[sp,#8]
0040d8  f881a003          STRB     r10,[r1,#3]
;;;3277                           v = gamma_16_to_1[*(sp + 5) >> gamma_shift][*(sp + 4)];
0040dc  f890a005          LDRB     r10,[r0,#5]
0040e0  fa4afa08          ASR      r10,r10,r8
0040e4  f8ddb054          LDR      r11,[sp,#0x54]
0040e8  f85ba02a          LDR      r10,[r11,r10,LSL #2]
0040ec  f890b004          LDRB     r11,[r0,#4]
0040f0  f83aa01b          LDRH     r10,[r10,r11,LSL #1]
0040f4  e000              B        |L1.16632|
                  |L1.16630|
0040f6  e11a              B        |L1.17198|
                  |L1.16632|
0040f8  f8cda010          STR      r10,[sp,#0x10]
;;;3278                           png_composite_16(w, v, a, background_1->blue);
0040fc  f8dda03c          LDR      r10,[sp,#0x3c]
004100  f8baa006          LDRH     r10,[r10,#6]
004104  f64f7eff          MOV      lr,#0xffff
004108  f8ddb014          LDR      r11,[sp,#0x14]
00410c  ebae0b0b          SUB      r11,lr,r11
004110  fb0afa0b          MUL      r10,r10,r11
004114  e9ddbe04          LDRD     r11,lr,[sp,#0x10]
004118  fb0baa0e          MLA      r10,r11,lr,r10
00411c  f50a4a00          ADD      r10,r10,#0x8000
004120  f8cda004          STR      r10,[sp,#4]
004124  f8dda004          LDR      r10,[sp,#4]
004128  eb0a4a1a          ADD      r10,r10,r10,LSR #16
00412c  ea4f4a1a          LSR      r10,r10,#16
004130  f8cda00c          STR      r10,[sp,#0xc]
;;;3279                           x = gamma_16_from_1[(w & 0xff) >> gamma_shift][w >> 8];
004134  f8dda00c          LDR      r10,[sp,#0xc]
004138  f00a0aff          AND      r10,r10,#0xff
00413c  fa4afa08          ASR      r10,r10,r8
004140  f8ddb050          LDR      r11,[sp,#0x50]
004144  f85bb02a          LDR      r11,[r11,r10,LSL #2]
004148  f8dda00c          LDR      r10,[sp,#0xc]
00414c  ea4f2a2a          ASR      r10,r10,#8
004150  f83ba01a          LDRH     r10,[r11,r10,LSL #1]
004154  f8cda008          STR      r10,[sp,#8]
;;;3280                           *(dp + 4) = (png_byte)((x >> 8) & 0xff);
004158  f8dda008          LDR      r10,[sp,#8]
00415c  ea4f2a1a          LSR      r10,r10,#8
004160  f881a004          STRB     r10,[r1,#4]
;;;3281                           *(dp + 5) = (png_byte)(x & 0xff);
004164  f8dda008          LDR      r10,[sp,#8]
004168  f881a005          STRB     r10,[r1,#5]
;;;3282                        }
00416c  bf00              NOP      
                  |L1.16750|
00416e  1c52              ADDS     r2,r2,#1              ;3235
004170  3008              ADDS     r0,r0,#8              ;3235
004172  1d89              ADDS     r1,r1,#6              ;3235
                  |L1.16756|
004174  42ba              CMP      r2,r7                 ;3235
004176  f4ffaeb9          BCC      |L1.16108|
00417a  e0d7              B        |L1.17196|
                  |L1.16764|
;;;3283                     }
;;;3284                  }
;;;3285                  else
;;;3286   #endif
;;;3287                  {
;;;3288                     sp = row;
00417c  4628              MOV      r0,r5
;;;3289                     dp = row;
00417e  4601              MOV      r1,r0
;;;3290                     for (i = 0; i < row_width; i++, sp += 8, dp += 6)
004180  2200              MOVS     r2,#0
004182  e0d0              B        |L1.17190|
                  |L1.16772|
;;;3291                     {
;;;3292                        png_uint_16 a = (png_uint_16)(((png_uint_16)(*(sp + 6))
004184  f890a007          LDRB     r10,[r0,#7]
004188  f890b006          LDRB     r11,[r0,#6]
00418c  eb0a2a0b          ADD      r10,r10,r11,LSL #8
004190  fa1ffa8a          UXTH     r10,r10
004194  f8cda014          STR      r10,[sp,#0x14]
;;;3293                           << 8) + (png_uint_16)(*(sp + 7)));
;;;3294                        if (a == (png_uint_16)0xffff)
004198  f64f7bff          MOV      r11,#0xffff
00419c  f8dda014          LDR      r10,[sp,#0x14]
0041a0  45da              CMP      r10,r11
0041a2  d108              BNE      |L1.16822|
;;;3295                        {
;;;3296                           png_memcpy(dp, sp, 6);
0041a4  f8d0a000          LDR      r10,[r0,#0]
0041a8  f8c1a000          STR      r10,[r1,#0]
0041ac  f8b0a004          LDRH     r10,[r0,#4]
0041b0  f8a1a004          STRH     r10,[r1,#4]
0041b4  e0b4              B        |L1.17184|
                  |L1.16822|
;;;3297                        }
;;;3298                        else if (a == 0)
0041b6  f8dda014          LDR      r10,[sp,#0x14]
0041ba  f1ba0f00          CMP      r10,#0
0041be  d11e              BNE      |L1.16894|
;;;3299                        {
;;;3300                           *dp = (png_byte)((background->red >> 8) & 0xff);
0041c0  f8b3a002          LDRH     r10,[r3,#2]
0041c4  ea4f2a1a          LSR      r10,r10,#8
0041c8  f881a000          STRB     r10,[r1,#0]
;;;3301                           *(dp + 1) = (png_byte)(background->red & 0xff);
0041cc  f893a002          LDRB     r10,[r3,#2]
0041d0  f881a001          STRB     r10,[r1,#1]
;;;3302                           *(dp + 2) = (png_byte)((background->green >> 8) & 0xff);
0041d4  f8b3a004          LDRH     r10,[r3,#4]
0041d8  ea4f2a1a          LSR      r10,r10,#8
0041dc  f881a002          STRB     r10,[r1,#2]
;;;3303                           *(dp + 3) = (png_byte)(background->green & 0xff);
0041e0  f893a004          LDRB     r10,[r3,#4]
0041e4  f881a003          STRB     r10,[r1,#3]
;;;3304                           *(dp + 4) = (png_byte)((background->blue >> 8) & 0xff);
0041e8  f8b3a006          LDRH     r10,[r3,#6]
0041ec  ea4f2a1a          LSR      r10,r10,#8
0041f0  f881a004          STRB     r10,[r1,#4]
;;;3305                           *(dp + 5) = (png_byte)(background->blue & 0xff);
0041f4  f893a006          LDRB     r10,[r3,#6]
0041f8  f881a005          STRB     r10,[r1,#5]
0041fc  e090              B        |L1.17184|
                  |L1.16894|
;;;3306                        }
;;;3307                        else
;;;3308                        {
;;;3309                           png_uint_16 v;
;;;3310   
;;;3311                           png_uint_16 r = (png_uint_16)(((*sp) << 8) + *(sp + 1));
0041fe  f890a001          LDRB     r10,[r0,#1]
004202  f890b000          LDRB     r11,[r0,#0]
004206  eb0a2a0b          ADD      r10,r10,r11,LSL #8
00420a  fa1ffa8a          UXTH     r10,r10
00420e  f8cda00c          STR      r10,[sp,#0xc]
;;;3312                           png_uint_16 g = (png_uint_16)(((*(sp + 2)) << 8)
004212  f890a003          LDRB     r10,[r0,#3]
004216  f890b002          LDRB     r11,[r0,#2]
00421a  eb0a2a0b          ADD      r10,r10,r11,LSL #8
00421e  fa1ffa8a          UXTH     r10,r10
004222  f8cda008          STR      r10,[sp,#8]
;;;3313                               + *(sp + 3));
;;;3314                           png_uint_16 b = (png_uint_16)(((*(sp + 4)) << 8)
004226  f890a005          LDRB     r10,[r0,#5]
00422a  f890b004          LDRB     r11,[r0,#4]
00422e  eb0a2a0b          ADD      r10,r10,r11,LSL #8
004232  fa1ffa8a          UXTH     r10,r10
004236  f8cda004          STR      r10,[sp,#4]
;;;3315                               + *(sp + 5));
;;;3316   
;;;3317                           png_composite_16(v, r, a, background->red);
00423a  f8b3a002          LDRH     r10,[r3,#2]
00423e  f64f7eff          MOV      lr,#0xffff
004242  f8ddb014          LDR      r11,[sp,#0x14]
004246  ebae0b0b          SUB      r11,lr,r11
00424a  fb0afa0b          MUL      r10,r10,r11
00424e  f8dde014          LDR      lr,[sp,#0x14]
004252  f8ddb00c          LDR      r11,[sp,#0xc]
004256  fb0baa0e          MLA      r10,r11,lr,r10
00425a  f50a4a00          ADD      r10,r10,#0x8000
00425e  f8cda000          STR      r10,[sp,#0]
004262  f8dda000          LDR      r10,[sp,#0]
004266  eb0a4a1a          ADD      r10,r10,r10,LSR #16
00426a  ea4f4a1a          LSR      r10,r10,#16
00426e  f8cda010          STR      r10,[sp,#0x10]
;;;3318                           *dp = (png_byte)((v >> 8) & 0xff);
004272  f8dda010          LDR      r10,[sp,#0x10]
004276  ea4f2a1a          LSR      r10,r10,#8
00427a  f881a000          STRB     r10,[r1,#0]
;;;3319                           *(dp + 1) = (png_byte)(v & 0xff);
00427e  f8dda010          LDR      r10,[sp,#0x10]
004282  f881a001          STRB     r10,[r1,#1]
;;;3320                           png_composite_16(v, g, a, background->green);
004286  f8b3a004          LDRH     r10,[r3,#4]
00428a  f64f7eff          MOV      lr,#0xffff
00428e  f8ddb014          LDR      r11,[sp,#0x14]
004292  ebae0b0b          SUB      r11,lr,r11
004296  fb0afa0b          MUL      r10,r10,r11
00429a  f8dde014          LDR      lr,[sp,#0x14]
00429e  f8ddb008          LDR      r11,[sp,#8]
0042a2  fb0baa0e          MLA      r10,r11,lr,r10
0042a6  f50a4a00          ADD      r10,r10,#0x8000
0042aa  f8cda000          STR      r10,[sp,#0]
0042ae  f8dda000          LDR      r10,[sp,#0]
0042b2  eb0a4a1a          ADD      r10,r10,r10,LSR #16
0042b6  ea4f4a1a          LSR      r10,r10,#16
0042ba  f8cda010          STR      r10,[sp,#0x10]
;;;3321                           *(dp + 2) = (png_byte)((v >> 8) & 0xff);
0042be  f8dda010          LDR      r10,[sp,#0x10]
0042c2  ea4f2a1a          LSR      r10,r10,#8
0042c6  f881a002          STRB     r10,[r1,#2]
;;;3322                           *(dp + 3) = (png_byte)(v & 0xff);
0042ca  f8dda010          LDR      r10,[sp,#0x10]
0042ce  f881a003          STRB     r10,[r1,#3]
;;;3323                           png_composite_16(v, b, a, background->blue);
0042d2  f8b3a006          LDRH     r10,[r3,#6]
0042d6  f64f7eff          MOV      lr,#0xffff
0042da  f8ddb014          LDR      r11,[sp,#0x14]
0042de  ebae0b0b          SUB      r11,lr,r11
0042e2  fb0afa0b          MUL      r10,r10,r11
0042e6  f8dde014          LDR      lr,[sp,#0x14]
0042ea  f8ddb004          LDR      r11,[sp,#4]
0042ee  fb0baa0e          MLA      r10,r11,lr,r10
0042f2  f50a4a00          ADD      r10,r10,#0x8000
0042f6  f8cda000          STR      r10,[sp,#0]
0042fa  f8dda000          LDR      r10,[sp,#0]
0042fe  eb0a4a1a          ADD      r10,r10,r10,LSR #16
004302  ea4f4a1a          LSR      r10,r10,#16
004306  f8cda010          STR      r10,[sp,#0x10]
;;;3324                           *(dp + 4) = (png_byte)((v >> 8) & 0xff);
00430a  f8dda010          LDR      r10,[sp,#0x10]
00430e  ea4f2a1a          LSR      r10,r10,#8
004312  f881a004          STRB     r10,[r1,#4]
;;;3325                           *(dp + 5) = (png_byte)(v & 0xff);
004316  f8dda010          LDR      r10,[sp,#0x10]
00431a  f881a005          STRB     r10,[r1,#5]
;;;3326                        }
00431e  bf00              NOP      
                  |L1.17184|
004320  1c52              ADDS     r2,r2,#1              ;3290
004322  3008              ADDS     r0,r0,#8              ;3290
004324  1d89              ADDS     r1,r1,#6              ;3290
                  |L1.17190|
004326  42ba              CMP      r2,r7                 ;3290
004328  f4ffaf2c          BCC      |L1.16772|
                  |L1.17196|
;;;3327                     }
;;;3328                  }
;;;3329               }
;;;3330               break;
00432c  bf00              NOP      
                  |L1.17198|
00432e  bf00              NOP                            ;2904
;;;3331            }
;;;3332         }
;;;3333   
;;;3334         if (row_info->color_type & PNG_COLOR_MASK_ALPHA)
004330  f899a008          LDRB     r10,[r9,#8]
004334  f00a0a04          AND      r10,r10,#4
004338  e000              B        |L1.17212|
                  |L1.17210|
00433a  e02c              B        |L1.17302|
                  |L1.17212|
00433c  f1ba0f00          CMP      r10,#0
004340  d029              BEQ      |L1.17302|
;;;3335         {
;;;3336            row_info->color_type &= ~PNG_COLOR_MASK_ALPHA;
004342  f899a008          LDRB     r10,[r9,#8]
004346  f02a0a04          BIC      r10,r10,#4
00434a  f889a008          STRB     r10,[r9,#8]
;;;3337            row_info->channels--;
00434e  f899a00a          LDRB     r10,[r9,#0xa]
004352  f1aa0a01          SUB      r10,r10,#1
004356  f889a00a          STRB     r10,[r9,#0xa]
;;;3338            row_info->pixel_depth = (png_byte)(row_info->channels *
00435a  f899a00a          LDRB     r10,[r9,#0xa]
00435e  f899b009          LDRB     r11,[r9,#9]
004362  fb0afa0b          MUL      r10,r10,r11
004366  f889a00b          STRB     r10,[r9,#0xb]
;;;3339               row_info->bit_depth);
;;;3340            row_info->rowbytes = PNG_ROWBYTES(row_info->pixel_depth,row_width);
00436a  f899a00b          LDRB     r10,[r9,#0xb]
00436e  f1ba0f08          CMP      r10,#8
004372  db06              BLT      |L1.17282|
004374  f899a00b          LDRB     r10,[r9,#0xb]
004378  ea4f0ada          LSR      r10,r10,#3
00437c  fb0afa07          MUL      r10,r10,r7
004380  e007              B        |L1.17298|
                  |L1.17282|
004382  f899a00b          LDRB     r10,[r9,#0xb]
004386  fb0afa07          MUL      r10,r10,r7
00438a  f10a0a07          ADD      r10,r10,#7
00438e  ea4f0ada          LSR      r10,r10,#3
                  |L1.17298|
004392  f8c9a004          STR      r10,[r9,#4]
                  |L1.17302|
;;;3341         }
;;;3342      }
;;;3343   }
004396  b006              ADD      sp,sp,#0x18
004398  e8bd8ff0          POP      {r4-r11,pc}
;;;3344   #endif
                          ENDP

                  png_do_rgb_to_gray PROC
;;;2194   int /* PRIVATE */
;;;2195   png_do_rgb_to_gray(png_structp png_ptr, png_row_infop row_info, png_bytep row)
00439c  e92d4ff0          PUSH     {r4-r11,lr}
;;;2196   
;;;2197   {
0043a0  b087              SUB      sp,sp,#0x1c
0043a2  4603              MOV      r3,r0
0043a4  460c              MOV      r4,r1
;;;2198      png_uint_32 i;
;;;2199   
;;;2200      png_uint_32 row_width = row_info->width;
0043a6  6825              LDR      r5,[r4,#0]
;;;2201      int rgb_error = 0;
0043a8  2600              MOVS     r6,#0
;;;2202   
;;;2203      png_debug(1, "in png_do_rgb_to_gray\n");
;;;2204      if (
0043aa  7a20              LDRB     r0,[r4,#8]
0043ac  f0000002          AND      r0,r0,#2
0043b0  2800              CMP      r0,#0
0043b2  d079              BEQ      |L1.17576|
;;;2205   #if defined(PNG_USELESS_TESTS_SUPPORTED)
;;;2206          row != NULL && row_info != NULL &&
;;;2207   #endif
;;;2208         (row_info->color_type & PNG_COLOR_MASK_COLOR))
;;;2209      {
;;;2210         png_uint_32 rc = png_ptr->rgb_to_gray_red_coeff;
0043b4  f8b37366          LDRH     r7,[r3,#0x366]
;;;2211         png_uint_32 gc = png_ptr->rgb_to_gray_green_coeff;
0043b8  f8b3c368          LDRH     r12,[r3,#0x368]
;;;2212         png_uint_32 bc = png_ptr->rgb_to_gray_blue_coeff;
0043bc  f8b3836a          LDRH     r8,[r3,#0x36a]
;;;2213   
;;;2214         if (row_info->color_type == PNG_COLOR_TYPE_RGB)
0043c0  7a20              LDRB     r0,[r4,#8]
0043c2  2802              CMP      r0,#2
0043c4  d148              BNE      |L1.17496|
;;;2215         {
;;;2216            if (row_info->bit_depth == 8)
0043c6  7a60              LDRB     r0,[r4,#9]
0043c8  2808              CMP      r0,#8
0043ca  d177              BNE      |L1.17596|
;;;2217            {
;;;2218   #if defined(PNG_READ_GAMMA_SUPPORTED) || defined(PNG_READ_BACKGROUND_SUPPORTED)
;;;2219               if (png_ptr->gamma_from_1 != NULL && png_ptr->gamma_to_1 != NULL)
0043cc  f8d302a8          LDR      r0,[r3,#0x2a8]
0043d0  2800              CMP      r0,#0
0043d2  d042              BEQ      |L1.17498|
0043d4  f8d302ac          LDR      r0,[r3,#0x2ac]
0043d8  b3b0              CBZ      r0,|L1.17480|
;;;2220               {
;;;2221                  png_bytep sp = row;
0043da  4610              MOV      r0,r2
;;;2222                  png_bytep dp = row;
0043dc  4691              MOV      r9,r2
;;;2223   
;;;2224                  for (i = 0; i < row_width; i++)
0043de  2100              MOVS     r1,#0
0043e0  e038              B        |L1.17492|
                  |L1.17378|
;;;2225                  {
;;;2226                     png_byte red   = png_ptr->gamma_to_1[*(sp++)];
0043e2  f810bb01          LDRB     r11,[r0],#1
0043e6  f8d3e2ac          LDR      lr,[r3,#0x2ac]
0043ea  f81ea00b          LDRB     r10,[lr,r11]
;;;2227                     png_byte green = png_ptr->gamma_to_1[*(sp++)];
0043ee  f810bb01          LDRB     r11,[r0],#1
0043f2  f8d3e2ac          LDR      lr,[r3,#0x2ac]
0043f6  f81eb00b          LDRB     r11,[lr,r11]
0043fa  f8cdb018          STR      r11,[sp,#0x18]
;;;2228                     png_byte blue  = png_ptr->gamma_to_1[*(sp++)];
0043fe  f810bb01          LDRB     r11,[r0],#1
004402  f8d3e2ac          LDR      lr,[r3,#0x2ac]
004406  f81eb00b          LDRB     r11,[lr,r11]
00440a  f8cdb014          STR      r11,[sp,#0x14]
;;;2229                     if(red != green || red != blue)
00440e  f8ddb018          LDR      r11,[sp,#0x18]
004412  45da              CMP      r10,r11
004414  d103              BNE      |L1.17438|
004416  f8ddb014          LDR      r11,[sp,#0x14]
00441a  45da              CMP      r10,r11
00441c  d015              BEQ      |L1.17482|
                  |L1.17438|
;;;2230                     {
;;;2231                        rgb_error |= 1;
00441e  f0460601          ORR      r6,r6,#1
;;;2232                        *(dp++) = png_ptr->gamma_from_1[
004422  fb07fb0a          MUL      r11,r7,r10
004426  f8dde018          LDR      lr,[sp,#0x18]
00442a  fb0cbe0e          MLA      lr,r12,lr,r11
00442e  f8ddb014          LDR      r11,[sp,#0x14]
004432  fb08eb0b          MLA      r11,r8,r11,lr
004436  f8d3e2a8          LDR      lr,[r3,#0x2a8]
00443a  eb0e3bdb          ADD      r11,lr,r11,LSR #15
00443e  f89bb000          LDRB     r11,[r11,#0]
004442  f809bb01          STRB     r11,[r9],#1
004446  e004              B        |L1.17490|
                  |L1.17480|
004448  e007              B        |L1.17498|
                  |L1.17482|
;;;2233                          (rc*red+gc*green+bc*blue)>>15];
;;;2234                     }
;;;2235                     else
;;;2236                        *(dp++) = *(sp-1);
00444a  f810bc01          LDRB     r11,[r0,#-1]
00444e  f809bb01          STRB     r11,[r9],#1
                  |L1.17490|
004452  1c49              ADDS     r1,r1,#1              ;2224
                  |L1.17492|
004454  42a9              CMP      r1,r5                 ;2224
004456  d3c4              BCC      |L1.17378|
                  |L1.17496|
;;;2237                  }
;;;2238               }
004458  e113              B        |L1.18050|
                  |L1.17498|
;;;2239               else
;;;2240   #endif
;;;2241               {
;;;2242                  png_bytep sp = row;
00445a  4610              MOV      r0,r2
;;;2243                  png_bytep dp = row;
00445c  4691              MOV      r9,r2
;;;2244                  for (i = 0; i < row_width; i++)
00445e  2100              MOVS     r1,#0
004460  e029              B        |L1.17590|
                  |L1.17506|
;;;2245                  {
;;;2246                     png_byte red   = *(sp++);
004462  f810ab01          LDRB     r10,[r0],#1
;;;2247                     png_byte green = *(sp++);
004466  f810bb01          LDRB     r11,[r0],#1
00446a  f8cdb018          STR      r11,[sp,#0x18]
;;;2248                     png_byte blue  = *(sp++);
00446e  f810bb01          LDRB     r11,[r0],#1
004472  f8cdb014          STR      r11,[sp,#0x14]
;;;2249                     if(red != green || red != blue)
004476  f8ddb018          LDR      r11,[sp,#0x18]
00447a  45da              CMP      r10,r11
00447c  d103              BNE      |L1.17542|
00447e  f8ddb014          LDR      r11,[sp,#0x14]
004482  45da              CMP      r10,r11
004484  d012              BEQ      |L1.17580|
                  |L1.17542|
;;;2250                     {
;;;2251                        rgb_error |= 1;
004486  f0460601          ORR      r6,r6,#1
;;;2252                        *(dp++) = (png_byte)((rc*red+gc*green+bc*blue)>>15);
00448a  fb07fb0a          MUL      r11,r7,r10
00448e  f8dde018          LDR      lr,[sp,#0x18]
004492  fb0cbe0e          MLA      lr,r12,lr,r11
004496  f8ddb014          LDR      r11,[sp,#0x14]
00449a  fb08eb0b          MLA      r11,r8,r11,lr
00449e  f3cb3bc7          UBFX     r11,r11,#15,#8
0044a2  f809bb01          STRB     r11,[r9],#1
0044a6  e005              B        |L1.17588|
                  |L1.17576|
0044a8  e273              B        |L1.18834|
0044aa  e007              B        |L1.17596|
                  |L1.17580|
;;;2253                     }
;;;2254                     else
;;;2255                        *(dp++) = *(sp-1);
0044ac  f810bc01          LDRB     r11,[r0,#-1]
0044b0  f809bb01          STRB     r11,[r9],#1
                  |L1.17588|
0044b4  1c49              ADDS     r1,r1,#1              ;2244
                  |L1.17590|
0044b6  42a9              CMP      r1,r5                 ;2244
0044b8  d3d3              BCC      |L1.17506|
;;;2256                  }
;;;2257               }
0044ba  e0e2              B        |L1.18050|
                  |L1.17596|
;;;2258            }
;;;2259   
;;;2260            else /* RGB bit_depth == 16 */
;;;2261            {
;;;2262   #if defined(PNG_READ_GAMMA_SUPPORTED) || defined(PNG_READ_BACKGROUND_SUPPORTED)
;;;2263               if (png_ptr->gamma_16_to_1 != NULL &&
0044bc  f8d302b8          LDR      r0,[r3,#0x2b8]
0044c0  2800              CMP      r0,#0
0044c2  d07c              BEQ      |L1.17854|
;;;2264                   png_ptr->gamma_16_from_1 != NULL)
0044c4  f8d302b4          LDR      r0,[r3,#0x2b4]
0044c8  2800              CMP      r0,#0
0044ca  d078              BEQ      |L1.17854|
;;;2265               {
;;;2266                  png_bytep sp = row;
0044cc  4610              MOV      r0,r2
;;;2267                  png_bytep dp = row;
0044ce  4692              MOV      r10,r2
;;;2268                  for (i = 0; i < row_width; i++)
0044d0  2100              MOVS     r1,#0
0044d2  e08f              B        |L1.17908|
                  |L1.17620|
;;;2269                  {
;;;2270                     png_uint_16 red, green, blue, w;
;;;2271   
;;;2272                     red   = (png_uint_16)(((*(sp))<<8) | *(sp+1)); sp+=2;
0044d4  f890b001          LDRB     r11,[r0,#1]
0044d8  f890e000          LDRB     lr,[r0,#0]
0044dc  ea4b290e          ORR      r9,r11,lr,LSL #8
0044e0  1c80              ADDS     r0,r0,#2
;;;2273                     green = (png_uint_16)(((*(sp))<<8) | *(sp+1)); sp+=2;
0044e2  f890b001          LDRB     r11,[r0,#1]
0044e6  f890e000          LDRB     lr,[r0,#0]
0044ea  ea4b2b0e          ORR      r11,r11,lr,LSL #8
0044ee  f8cdb018          STR      r11,[sp,#0x18]
0044f2  1c80              ADDS     r0,r0,#2
;;;2274                     blue  = (png_uint_16)(((*(sp))<<8) | *(sp+1)); sp+=2;
0044f4  f890b001          LDRB     r11,[r0,#1]
0044f8  f890e000          LDRB     lr,[r0,#0]
0044fc  ea4b2b0e          ORR      r11,r11,lr,LSL #8
004500  f8cdb014          STR      r11,[sp,#0x14]
004504  1c80              ADDS     r0,r0,#2
;;;2275   
;;;2276                     if(red == green && red == blue)
004506  f8ddb018          LDR      r11,[sp,#0x18]
00450a  45d9              CMP      r9,r11
00450c  d106              BNE      |L1.17692|
00450e  f8ddb014          LDR      r11,[sp,#0x14]
004512  45d9              CMP      r9,r11
004514  d102              BNE      |L1.17692|
;;;2277                        w = red;
004516  f8cd9010          STR      r9,[sp,#0x10]
00451a  e060              B        |L1.17886|
                  |L1.17692|
;;;2278                     else
;;;2279                     {
;;;2280                        png_uint_16 red_1   = png_ptr->gamma_16_to_1[(red&0xff) >>
00451c  f0090bff          AND      r11,r9,#0xff
004520  f893e298          LDRB     lr,[r3,#0x298]
004524  fa4bfb0e          ASR      r11,r11,lr
004528  f8d3e2b8          LDR      lr,[r3,#0x2b8]
00452c  f85eb02b          LDR      r11,[lr,r11,LSL #2]
004530  ea4f2e29          ASR      lr,r9,#8
004534  f83bb01e          LDRH     r11,[r11,lr,LSL #1]
004538  f8cdb00c          STR      r11,[sp,#0xc]
;;;2281                                     png_ptr->gamma_shift][red>>8];
;;;2282                        png_uint_16 green_1 = png_ptr->gamma_16_to_1[(green&0xff) >>
00453c  f8ddb018          LDR      r11,[sp,#0x18]
004540  f00b0bff          AND      r11,r11,#0xff
004544  f893e298          LDRB     lr,[r3,#0x298]
004548  fa4bfb0e          ASR      r11,r11,lr
00454c  f8d3e2b8          LDR      lr,[r3,#0x2b8]
004550  f85ee02b          LDR      lr,[lr,r11,LSL #2]
004554  f8ddb018          LDR      r11,[sp,#0x18]
004558  ea4f2b2b          ASR      r11,r11,#8
00455c  f83eb01b          LDRH     r11,[lr,r11,LSL #1]
004560  f8cdb008          STR      r11,[sp,#8]
;;;2283                                     png_ptr->gamma_shift][green>>8];
;;;2284                        png_uint_16 blue_1  = png_ptr->gamma_16_to_1[(blue&0xff) >>
004564  f8ddb014          LDR      r11,[sp,#0x14]
004568  f00b0bff          AND      r11,r11,#0xff
00456c  f893e298          LDRB     lr,[r3,#0x298]
004570  fa4bfb0e          ASR      r11,r11,lr
004574  f8d3e2b8          LDR      lr,[r3,#0x2b8]
004578  f85ee02b          LDR      lr,[lr,r11,LSL #2]
00457c  f8ddb014          LDR      r11,[sp,#0x14]
004580  ea4f2b2b          ASR      r11,r11,#8
004584  f83eb01b          LDRH     r11,[lr,r11,LSL #1]
004588  f8cdb004          STR      r11,[sp,#4]
;;;2285                                     png_ptr->gamma_shift][blue>>8];
;;;2286                        png_uint_16 gray16  = (png_uint_16)((rc*red_1 + gc*green_1
00458c  f8ddb00c          LDR      r11,[sp,#0xc]
004590  fb07fb0b          MUL      r11,r7,r11
004594  f8dde008          LDR      lr,[sp,#8]
004598  fb0cbe0e          MLA      lr,r12,lr,r11
00459c  f8ddb004          LDR      r11,[sp,#4]
0045a0  fb08eb0b          MLA      r11,r8,r11,lr
0045a4  f3cb3bcf          UBFX     r11,r11,#15,#16
0045a8  f8cdb000          STR      r11,[sp,#0]
;;;2287                                     + bc*blue_1)>>15);
;;;2288                        w = png_ptr->gamma_16_from_1[(gray16&0xff) >>
0045ac  f8ddb000          LDR      r11,[sp,#0]
0045b0  f00b0bff          AND      r11,r11,#0xff
0045b4  f893e298          LDRB     lr,[r3,#0x298]
0045b8  fa4bfb0e          ASR      r11,r11,lr
0045bc  e000              B        |L1.17856|
                  |L1.17854|
0045be  e01d              B        |L1.17916|
                  |L1.17856|
0045c0  f8d3e2b4          LDR      lr,[r3,#0x2b4]
0045c4  f85ee02b          LDR      lr,[lr,r11,LSL #2]
0045c8  f8ddb000          LDR      r11,[sp,#0]
0045cc  ea4f2b2b          ASR      r11,r11,#8
0045d0  f83eb01b          LDRH     r11,[lr,r11,LSL #1]
0045d4  f8cdb010          STR      r11,[sp,#0x10]
;;;2289                            png_ptr->gamma_shift][gray16 >> 8];
;;;2290                        rgb_error |= 1;
0045d8  f0460601          ORR      r6,r6,#1
;;;2291                     }
0045dc  bf00              NOP      
                  |L1.17886|
;;;2292   
;;;2293                     *(dp++) = (png_byte)((w>>8) & 0xff);
0045de  f8ddb010          LDR      r11,[sp,#0x10]
0045e2  ea4f2b1b          LSR      r11,r11,#8
0045e6  f80abb01          STRB     r11,[r10],#1
;;;2294                     *(dp++) = (png_byte)(w & 0xff);
0045ea  f8ddb010          LDR      r11,[sp,#0x10]
0045ee  f80abb01          STRB     r11,[r10],#1
0045f2  1c49              ADDS     r1,r1,#1              ;2268
                  |L1.17908|
0045f4  42a9              CMP      r1,r5                 ;2268
0045f6  f4ffaf6d          BCC      |L1.17620|
;;;2295                  }
;;;2296               }
0045fa  e042              B        |L1.18050|
                  |L1.17916|
;;;2297               else
;;;2298   #endif
;;;2299               {
;;;2300                  png_bytep sp = row;
0045fc  4610              MOV      r0,r2
;;;2301                  png_bytep dp = row;
0045fe  4691              MOV      r9,r2
;;;2302                  for (i = 0; i < row_width; i++)
004600  2100              MOVS     r1,#0
004602  e03b              B        |L1.18044|
                  |L1.17924|
;;;2303                  {
;;;2304                     png_uint_16 red, green, blue, gray16;
;;;2305   
;;;2306                     red   = (png_uint_16)(((*(sp))<<8) | *(sp+1)); sp+=2;
004604  f890b001          LDRB     r11,[r0,#1]
004608  f890e000          LDRB     lr,[r0,#0]
00460c  ea4b2a0e          ORR      r10,r11,lr,LSL #8
004610  1c80              ADDS     r0,r0,#2
;;;2307                     green = (png_uint_16)(((*(sp))<<8) | *(sp+1)); sp+=2;
004612  f890b001          LDRB     r11,[r0,#1]
004616  f890e000          LDRB     lr,[r0,#0]
00461a  ea4b2b0e          ORR      r11,r11,lr,LSL #8
00461e  f8cdb018          STR      r11,[sp,#0x18]
004622  1c80              ADDS     r0,r0,#2
;;;2308                     blue  = (png_uint_16)(((*(sp))<<8) | *(sp+1)); sp+=2;
004624  f890b001          LDRB     r11,[r0,#1]
004628  f890e000          LDRB     lr,[r0,#0]
00462c  ea4b2b0e          ORR      r11,r11,lr,LSL #8
004630  f8cdb014          STR      r11,[sp,#0x14]
004634  1c80              ADDS     r0,r0,#2
;;;2309   
;;;2310                     if(red != green || red != blue)
004636  f8ddb018          LDR      r11,[sp,#0x18]
00463a  45da              CMP      r10,r11
00463c  d103              BNE      |L1.17990|
00463e  f8ddb014          LDR      r11,[sp,#0x14]
004642  45da              CMP      r10,r11
004644  d001              BEQ      |L1.17994|
                  |L1.17990|
;;;2311                        rgb_error |= 1;
004646  f0460601          ORR      r6,r6,#1
                  |L1.17994|
;;;2312                     gray16  = (png_uint_16)((rc*red + gc*green + bc*blue)>>15);
00464a  fb07fb0a          MUL      r11,r7,r10
00464e  f8dde018          LDR      lr,[sp,#0x18]
004652  fb0cbe0e          MLA      lr,r12,lr,r11
004656  f8ddb014          LDR      r11,[sp,#0x14]
00465a  fb08eb0b          MLA      r11,r8,r11,lr
00465e  f3cb3bcf          UBFX     r11,r11,#15,#16
004662  f8cdb010          STR      r11,[sp,#0x10]
;;;2313                     *(dp++) = (png_byte)((gray16>>8) & 0xff);
004666  f8ddb010          LDR      r11,[sp,#0x10]
00466a  ea4f2b1b          LSR      r11,r11,#8
00466e  f809bb01          STRB     r11,[r9],#1
;;;2314                     *(dp++) = (png_byte)(gray16 & 0xff);
004672  f8ddb010          LDR      r11,[sp,#0x10]
004676  f809bb01          STRB     r11,[r9],#1
00467a  1c49              ADDS     r1,r1,#1              ;2302
                  |L1.18044|
00467c  42a9              CMP      r1,r5                 ;2302
00467e  d3c1              BCC      |L1.17924|
;;;2315                  }
;;;2316               }
004680  bf00              NOP      
                  |L1.18050|
;;;2317            }
;;;2318         }
;;;2319         if (row_info->color_type == PNG_COLOR_TYPE_RGB_ALPHA)
004682  7a20              LDRB     r0,[r4,#8]
004684  2806              CMP      r0,#6
004686  d147              BNE      |L1.18200|
;;;2320         {
;;;2321            if (row_info->bit_depth == 8)
004688  7a60              LDRB     r0,[r4,#9]
00468a  2808              CMP      r0,#8
00468c  d174              BNE      |L1.18296|
;;;2322            {
;;;2323   #if defined(PNG_READ_GAMMA_SUPPORTED) || defined(PNG_READ_BACKGROUND_SUPPORTED)
;;;2324               if (png_ptr->gamma_from_1 != NULL && png_ptr->gamma_to_1 != NULL)
00468e  f8d302a8          LDR      r0,[r3,#0x2a8]
004692  b3e8              CBZ      r0,|L1.18192|
004694  f8d302ac          LDR      r0,[r3,#0x2ac]
004698  b3d0              CBZ      r0,|L1.18192|
;;;2325               {
;;;2326                  png_bytep sp = row;
00469a  4610              MOV      r0,r2
;;;2327                  png_bytep dp = row;
00469c  4691              MOV      r9,r2
;;;2328                  for (i = 0; i < row_width; i++)
00469e  2100              MOVS     r1,#0
0046a0  e038              B        |L1.18196|
                  |L1.18082|
;;;2329                  {
;;;2330                     png_byte red   = png_ptr->gamma_to_1[*(sp++)];
0046a2  f810bb01          LDRB     r11,[r0],#1
0046a6  f8d3e2ac          LDR      lr,[r3,#0x2ac]
0046aa  f81ea00b          LDRB     r10,[lr,r11]
;;;2331                     png_byte green = png_ptr->gamma_to_1[*(sp++)];
0046ae  f810bb01          LDRB     r11,[r0],#1
0046b2  f8d3e2ac          LDR      lr,[r3,#0x2ac]
0046b6  f81eb00b          LDRB     r11,[lr,r11]
0046ba  f8cdb018          STR      r11,[sp,#0x18]
;;;2332                     png_byte blue  = png_ptr->gamma_to_1[*(sp++)];
0046be  f810bb01          LDRB     r11,[r0],#1
0046c2  f8d3e2ac          LDR      lr,[r3,#0x2ac]
0046c6  f81eb00b          LDRB     r11,[lr,r11]
0046ca  f8cdb014          STR      r11,[sp,#0x14]
;;;2333                     if(red != green || red != blue)
0046ce  f8ddb018          LDR      r11,[sp,#0x18]
0046d2  45da              CMP      r10,r11
0046d4  d103              BNE      |L1.18142|
0046d6  f8ddb014          LDR      r11,[sp,#0x14]
0046da  45da              CMP      r10,r11
0046dc  d001              BEQ      |L1.18146|
                  |L1.18142|
;;;2334                        rgb_error |= 1;
0046de  f0460601          ORR      r6,r6,#1
                  |L1.18146|
;;;2335                     *(dp++) =  png_ptr->gamma_from_1
0046e2  fb07fb0a          MUL      r11,r7,r10
0046e6  f8dde018          LDR      lr,[sp,#0x18]
0046ea  fb0cbe0e          MLA      lr,r12,lr,r11
0046ee  f8ddb014          LDR      r11,[sp,#0x14]
0046f2  fb08eb0b          MLA      r11,r8,r11,lr
0046f6  f8d3e2a8          LDR      lr,[r3,#0x2a8]
0046fa  eb0e3bdb          ADD      r11,lr,r11,LSR #15
0046fe  f89bb000          LDRB     r11,[r11,#0]
004702  f809bb01          STRB     r11,[r9],#1
;;;2336                                [(rc*red + gc*green + bc*blue)>>15];
;;;2337                     *(dp++) = *(sp++);  /* alpha */
004706  f810bb01          LDRB     r11,[r0],#1
00470a  f809bb01          STRB     r11,[r9],#1
00470e  e000              B        |L1.18194|
                  |L1.18192|
004710  e003              B        |L1.18202|
                  |L1.18194|
004712  1c49              ADDS     r1,r1,#1              ;2328
                  |L1.18196|
004714  42a9              CMP      r1,r5                 ;2328
004716  d3c4              BCC      |L1.18082|
                  |L1.18200|
;;;2338                  }
;;;2339               }
004718  e121              B        |L1.18782|
                  |L1.18202|
;;;2340               else
;;;2341   #endif
;;;2342               {
;;;2343                  png_bytep sp = row;
00471a  4610              MOV      r0,r2
;;;2344                  png_bytep dp = row;
00471c  4691              MOV      r9,r2
;;;2345                  for (i = 0; i < row_width; i++)
00471e  2100              MOVS     r1,#0
004720  e026              B        |L1.18288|
                  |L1.18210|
;;;2346                  {
;;;2347                     png_byte red   = *(sp++);
004722  f810ab01          LDRB     r10,[r0],#1
;;;2348                     png_byte green = *(sp++);
004726  f810bb01          LDRB     r11,[r0],#1
00472a  f8cdb018          STR      r11,[sp,#0x18]
;;;2349                     png_byte blue  = *(sp++);
00472e  f810bb01          LDRB     r11,[r0],#1
004732  f8cdb014          STR      r11,[sp,#0x14]
;;;2350                     if(red != green || red != blue)
004736  f8ddb018          LDR      r11,[sp,#0x18]
00473a  45da              CMP      r10,r11
00473c  d103              BNE      |L1.18246|
00473e  f8ddb014          LDR      r11,[sp,#0x14]
004742  45da              CMP      r10,r11
004744  d001              BEQ      |L1.18250|
                  |L1.18246|
;;;2351                        rgb_error |= 1;
004746  f0460601          ORR      r6,r6,#1
                  |L1.18250|
;;;2352                     *(dp++) =  (png_byte)((rc*red + gc*green + bc*blue)>>15);
00474a  fb07fb0a          MUL      r11,r7,r10
00474e  f8dde018          LDR      lr,[sp,#0x18]
004752  fb0cbe0e          MLA      lr,r12,lr,r11
004756  f8ddb014          LDR      r11,[sp,#0x14]
00475a  fb08eb0b          MLA      r11,r8,r11,lr
00475e  f3cb3bc7          UBFX     r11,r11,#15,#8
004762  f809bb01          STRB     r11,[r9],#1
;;;2353                     *(dp++) = *(sp++);  /* alpha */
004766  f810bb01          LDRB     r11,[r0],#1
00476a  f809bb01          STRB     r11,[r9],#1
00476e  1c49              ADDS     r1,r1,#1              ;2345
                  |L1.18288|
004770  42a9              CMP      r1,r5                 ;2345
004772  d3d6              BCC      |L1.18210|
;;;2354                  }
;;;2355               }
004774  e0f3              B        |L1.18782|
004776  e7ff              B        |L1.18296|
                  |L1.18296|
;;;2356            }
;;;2357            else /* RGBA bit_depth == 16 */
;;;2358            {
;;;2359   #if defined(PNG_READ_GAMMA_SUPPORTED) || defined(PNG_READ_BACKGROUND_SUPPORTED)
;;;2360               if (png_ptr->gamma_16_to_1 != NULL &&
004778  f8d302b8          LDR      r0,[r3,#0x2b8]
00477c  2800              CMP      r0,#0
00477e  d07c              BEQ      |L1.18554|
;;;2361                   png_ptr->gamma_16_from_1 != NULL)
004780  f8d302b4          LDR      r0,[r3,#0x2b4]
004784  2800              CMP      r0,#0
004786  d078              BEQ      |L1.18554|
;;;2362               {
;;;2363                  png_bytep sp = row;
004788  4610              MOV      r0,r2
;;;2364                  png_bytep dp = row;
00478a  4691              MOV      r9,r2
;;;2365                  for (i = 0; i < row_width; i++)
00478c  2100              MOVS     r1,#0
00478e  e097              B        |L1.18624|
                  |L1.18320|
;;;2366                  {
;;;2367                     png_uint_16 red, green, blue, w;
;;;2368   
;;;2369                     red   = (png_uint_16)(((*(sp))<<8) | *(sp+1)); sp+=2;
004790  f890b001          LDRB     r11,[r0,#1]
004794  f890e000          LDRB     lr,[r0,#0]
004798  ea4b2a0e          ORR      r10,r11,lr,LSL #8
00479c  1c80              ADDS     r0,r0,#2
;;;2370                     green = (png_uint_16)(((*(sp))<<8) | *(sp+1)); sp+=2;
00479e  f890b001          LDRB     r11,[r0,#1]
0047a2  f890e000          LDRB     lr,[r0,#0]
0047a6  ea4b2b0e          ORR      r11,r11,lr,LSL #8
0047aa  f8cdb018          STR      r11,[sp,#0x18]
0047ae  1c80              ADDS     r0,r0,#2
;;;2371                     blue  = (png_uint_16)(((*(sp))<<8) | *(sp+1)); sp+=2;
0047b0  f890b001          LDRB     r11,[r0,#1]
0047b4  f890e000          LDRB     lr,[r0,#0]
0047b8  ea4b2b0e          ORR      r11,r11,lr,LSL #8
0047bc  f8cdb014          STR      r11,[sp,#0x14]
0047c0  1c80              ADDS     r0,r0,#2
;;;2372   
;;;2373                     if(red == green && red == blue)
0047c2  f8ddb018          LDR      r11,[sp,#0x18]
0047c6  45da              CMP      r10,r11
0047c8  d106              BNE      |L1.18392|
0047ca  f8ddb014          LDR      r11,[sp,#0x14]
0047ce  45da              CMP      r10,r11
0047d0  d102              BNE      |L1.18392|
;;;2374                        w = red;
0047d2  f8cda010          STR      r10,[sp,#0x10]
0047d6  e060              B        |L1.18586|
                  |L1.18392|
;;;2375                     else
;;;2376                     {
;;;2377                        png_uint_16 red_1   = png_ptr->gamma_16_to_1[(red&0xff) >>
0047d8  f00a0bff          AND      r11,r10,#0xff
0047dc  f893e298          LDRB     lr,[r3,#0x298]
0047e0  fa4bfb0e          ASR      r11,r11,lr
0047e4  f8d3e2b8          LDR      lr,[r3,#0x2b8]
0047e8  f85eb02b          LDR      r11,[lr,r11,LSL #2]
0047ec  ea4f2e2a          ASR      lr,r10,#8
0047f0  f83bb01e          LDRH     r11,[r11,lr,LSL #1]
0047f4  f8cdb00c          STR      r11,[sp,#0xc]
;;;2378                                     png_ptr->gamma_shift][red>>8];
;;;2379                        png_uint_16 green_1 = png_ptr->gamma_16_to_1[(green&0xff) >>
0047f8  f8ddb018          LDR      r11,[sp,#0x18]
0047fc  f00b0bff          AND      r11,r11,#0xff
004800  f893e298          LDRB     lr,[r3,#0x298]
004804  fa4bfb0e          ASR      r11,r11,lr
004808  f8d3e2b8          LDR      lr,[r3,#0x2b8]
00480c  f85ee02b          LDR      lr,[lr,r11,LSL #2]
004810  f8ddb018          LDR      r11,[sp,#0x18]
004814  ea4f2b2b          ASR      r11,r11,#8
004818  f83eb01b          LDRH     r11,[lr,r11,LSL #1]
00481c  f8cdb008          STR      r11,[sp,#8]
;;;2380                                     png_ptr->gamma_shift][green>>8];
;;;2381                        png_uint_16 blue_1  = png_ptr->gamma_16_to_1[(blue&0xff) >>
004820  f8ddb014          LDR      r11,[sp,#0x14]
004824  f00b0bff          AND      r11,r11,#0xff
004828  f893e298          LDRB     lr,[r3,#0x298]
00482c  fa4bfb0e          ASR      r11,r11,lr
004830  f8d3e2b8          LDR      lr,[r3,#0x2b8]
004834  f85ee02b          LDR      lr,[lr,r11,LSL #2]
004838  f8ddb014          LDR      r11,[sp,#0x14]
00483c  ea4f2b2b          ASR      r11,r11,#8
004840  f83eb01b          LDRH     r11,[lr,r11,LSL #1]
004844  f8cdb004          STR      r11,[sp,#4]
;;;2382                                     png_ptr->gamma_shift][blue>>8];
;;;2383                        png_uint_16 gray16  = (png_uint_16)((rc * red_1
004848  f8ddb00c          LDR      r11,[sp,#0xc]
00484c  fb07fb0b          MUL      r11,r7,r11
004850  f8dde008          LDR      lr,[sp,#8]
004854  fb0cbe0e          MLA      lr,r12,lr,r11
004858  f8ddb004          LDR      r11,[sp,#4]
00485c  fb08eb0b          MLA      r11,r8,r11,lr
004860  f3cb3bcf          UBFX     r11,r11,#15,#16
004864  f8cdb000          STR      r11,[sp,#0]
;;;2384                                     + gc * green_1 + bc * blue_1)>>15);
;;;2385                        w = png_ptr->gamma_16_from_1[(gray16&0xff) >>
004868  f8ddb000          LDR      r11,[sp,#0]
00486c  f00b0bff          AND      r11,r11,#0xff
004870  f893e298          LDRB     lr,[r3,#0x298]
004874  fa4bfb0e          ASR      r11,r11,lr
004878  e000              B        |L1.18556|
                  |L1.18554|
00487a  e025              B        |L1.18632|
                  |L1.18556|
00487c  f8d3e2b4          LDR      lr,[r3,#0x2b4]
004880  f85ee02b          LDR      lr,[lr,r11,LSL #2]
004884  f8ddb000          LDR      r11,[sp,#0]
004888  ea4f2b2b          ASR      r11,r11,#8
00488c  f83eb01b          LDRH     r11,[lr,r11,LSL #1]
004890  f8cdb010          STR      r11,[sp,#0x10]
;;;2386                            png_ptr->gamma_shift][gray16 >> 8];
;;;2387                        rgb_error |= 1;
004894  f0460601          ORR      r6,r6,#1
;;;2388                     }
004898  bf00              NOP      
                  |L1.18586|
;;;2389   
;;;2390                     *(dp++) = (png_byte)((w>>8) & 0xff);
00489a  f8ddb010          LDR      r11,[sp,#0x10]
00489e  ea4f2b1b          LSR      r11,r11,#8
0048a2  f809bb01          STRB     r11,[r9],#1
;;;2391                     *(dp++) = (png_byte)(w & 0xff);
0048a6  f8ddb010          LDR      r11,[sp,#0x10]
0048aa  f809bb01          STRB     r11,[r9],#1
;;;2392                     *(dp++) = *(sp++);  /* alpha */
0048ae  f810bb01          LDRB     r11,[r0],#1
0048b2  f809bb01          STRB     r11,[r9],#1
;;;2393                     *(dp++) = *(sp++);
0048b6  f810bb01          LDRB     r11,[r0],#1
0048ba  f809bb01          STRB     r11,[r9],#1
0048be  1c49              ADDS     r1,r1,#1              ;2365
                  |L1.18624|
0048c0  42a9              CMP      r1,r5                 ;2365
0048c2  f4ffaf65          BCC      |L1.18320|
;;;2394                  }
;;;2395               }
0048c6  e04a              B        |L1.18782|
                  |L1.18632|
;;;2396               else
;;;2397   #endif
;;;2398               {
;;;2399                  png_bytep sp = row;
0048c8  4610              MOV      r0,r2
;;;2400                  png_bytep dp = row;
0048ca  4691              MOV      r9,r2
;;;2401                  for (i = 0; i < row_width; i++)
0048cc  2100              MOVS     r1,#0
0048ce  e043              B        |L1.18776|
                  |L1.18640|
;;;2402                  {
;;;2403                     png_uint_16 red, green, blue, gray16;
;;;2404                     red   = (png_uint_16)((*(sp)<<8) | *(sp+1)); sp+=2;
0048d0  f890b001          LDRB     r11,[r0,#1]
0048d4  f890e000          LDRB     lr,[r0,#0]
0048d8  ea4b2a0e          ORR      r10,r11,lr,LSL #8
0048dc  1c80              ADDS     r0,r0,#2
;;;2405                     green = (png_uint_16)((*(sp)<<8) | *(sp+1)); sp+=2;
0048de  f890b001          LDRB     r11,[r0,#1]
0048e2  f890e000          LDRB     lr,[r0,#0]
0048e6  ea4b2b0e          ORR      r11,r11,lr,LSL #8
0048ea  f8cdb018          STR      r11,[sp,#0x18]
0048ee  1c80              ADDS     r0,r0,#2
;;;2406                     blue  = (png_uint_16)((*(sp)<<8) | *(sp+1)); sp+=2;
0048f0  f890b001          LDRB     r11,[r0,#1]
0048f4  f890e000          LDRB     lr,[r0,#0]
0048f8  ea4b2b0e          ORR      r11,r11,lr,LSL #8
0048fc  f8cdb014          STR      r11,[sp,#0x14]
004900  1c80              ADDS     r0,r0,#2
;;;2407                     if(red != green || red != blue)
004902  f8ddb018          LDR      r11,[sp,#0x18]
004906  45da              CMP      r10,r11
004908  d103              BNE      |L1.18706|
00490a  f8ddb014          LDR      r11,[sp,#0x14]
00490e  45da              CMP      r10,r11
004910  d001              BEQ      |L1.18710|
                  |L1.18706|
;;;2408                        rgb_error |= 1;
004912  f0460601          ORR      r6,r6,#1
                  |L1.18710|
;;;2409                     gray16  = (png_uint_16)((rc*red + gc*green + bc*blue)>>15);
004916  fb07fb0a          MUL      r11,r7,r10
00491a  f8dde018          LDR      lr,[sp,#0x18]
00491e  fb0cbe0e          MLA      lr,r12,lr,r11
004922  f8ddb014          LDR      r11,[sp,#0x14]
004926  fb08eb0b          MLA      r11,r8,r11,lr
00492a  f3cb3bcf          UBFX     r11,r11,#15,#16
00492e  f8cdb010          STR      r11,[sp,#0x10]
;;;2410                     *(dp++) = (png_byte)((gray16>>8) & 0xff);
004932  f8ddb010          LDR      r11,[sp,#0x10]
004936  ea4f2b1b          LSR      r11,r11,#8
00493a  f809bb01          STRB     r11,[r9],#1
;;;2411                     *(dp++) = (png_byte)(gray16 & 0xff);
00493e  f8ddb010          LDR      r11,[sp,#0x10]
004942  f809bb01          STRB     r11,[r9],#1
;;;2412                     *(dp++) = *(sp++);  /* alpha */
004946  f810bb01          LDRB     r11,[r0],#1
00494a  f809bb01          STRB     r11,[r9],#1
;;;2413                     *(dp++) = *(sp++);
00494e  f810bb01          LDRB     r11,[r0],#1
004952  f809bb01          STRB     r11,[r9],#1
004956  1c49              ADDS     r1,r1,#1              ;2401
                  |L1.18776|
004958  42a9              CMP      r1,r5                 ;2401
00495a  d3b9              BCC      |L1.18640|
;;;2414                  }
;;;2415               }
00495c  bf00              NOP      
                  |L1.18782|
;;;2416            }
;;;2417         }
;;;2418      row_info->channels -= (png_byte)2;
00495e  7aa0              LDRB     r0,[r4,#0xa]
004960  1e80              SUBS     r0,r0,#2
004962  72a0              STRB     r0,[r4,#0xa]
;;;2419         row_info->color_type &= ~PNG_COLOR_MASK_COLOR;
004964  7a20              LDRB     r0,[r4,#8]
004966  f0200002          BIC      r0,r0,#2
00496a  7220              STRB     r0,[r4,#8]
;;;2420         row_info->pixel_depth = (png_byte)(row_info->channels *
00496c  7aa0              LDRB     r0,[r4,#0xa]
00496e  f8949009          LDRB     r9,[r4,#9]
004972  fb00f009          MUL      r0,r0,r9
004976  72e0              STRB     r0,[r4,#0xb]
;;;2421            row_info->bit_depth);
;;;2422         row_info->rowbytes = PNG_ROWBYTES(row_info->pixel_depth,row_width);
004978  7ae0              LDRB     r0,[r4,#0xb]
00497a  2808              CMP      r0,#8
00497c  db03              BLT      |L1.18822|
00497e  7ae0              LDRB     r0,[r4,#0xb]
004980  08c0              LSRS     r0,r0,#3
004982  4368              MULS     r0,r5,r0
004984  e003              B        |L1.18830|
                  |L1.18822|
004986  7ae0              LDRB     r0,[r4,#0xb]
004988  4368              MULS     r0,r5,r0
00498a  1dc0              ADDS     r0,r0,#7
00498c  08c0              LSRS     r0,r0,#3
                  |L1.18830|
00498e  6060              STR      r0,[r4,#4]
;;;2423      }
004990  bf00              NOP      
                  |L1.18834|
;;;2424      return rgb_error;
004992  4630              MOV      r0,r6
;;;2425   }
004994  b007              ADD      sp,sp,#0x1c
004996  e8bd8ff0          POP      {r4-r11,pc}
;;;2426   #endif
                          ENDP

                  png_do_expand PROC
;;;3678   void /* PRIVATE */
;;;3679   png_do_expand(png_row_infop row_info, png_bytep row,
00499a  e92d47f0          PUSH     {r4-r10,lr}
;;;3680      png_color_16p trans_value)
;;;3681   {
00499e  4603              MOV      r3,r0
0049a0  460d              MOV      r5,r1
0049a2  4616              MOV      r6,r2
;;;3682      int shift, value;
;;;3683      png_bytep sp, dp;
;;;3684      png_uint_32 i;
;;;3685      png_uint_32 row_width=row_info->width;
0049a4  681a              LDR      r2,[r3,#0]
;;;3686   
;;;3687      png_debug(1, "in png_do_expand\n");
;;;3688   #if defined(PNG_USELESS_TESTS_SUPPORTED)
;;;3689      if (row != NULL && row_info != NULL)
;;;3690   #endif
;;;3691      {
;;;3692         if (row_info->color_type == PNG_COLOR_TYPE_GRAY)
0049a6  f8938008          LDRB     r8,[r3,#8]
0049aa  f1b80f00          CMP      r8,#0
0049ae  d173              BNE      |L1.19096|
;;;3693         {
;;;3694            png_uint_16 gray = (png_uint_16)(trans_value ? trans_value->gray : 0);
0049b0  b116              CBZ      r6,|L1.18872|
0049b2  f8b69008          LDRH     r9,[r6,#8]
0049b6  e001              B        |L1.18876|
                  |L1.18872|
0049b8  f04f0900          MOV      r9,#0
                  |L1.18876|
0049bc  46c8              MOV      r8,r9
;;;3695   
;;;3696            if (row_info->bit_depth < 8)
0049be  f8939009          LDRB     r9,[r3,#9]
0049c2  f1b90f08          CMP      r9,#8
0049c6  da68              BGE      |L1.19098|
;;;3697            {
;;;3698               switch (row_info->bit_depth)
0049c8  f8939009          LDRB     r9,[r3,#9]
0049cc  f1b90f01          CMP      r9,#1
0049d0  d006              BEQ      |L1.18912|
0049d2  f1b90f02          CMP      r9,#2
0049d6  d034              BEQ      |L1.19010|
0049d8  f1b90f04          CMP      r9,#4
0049dc  d130              BNE      |L1.19008|
0049de  e063              B        |L1.19112|
                  |L1.18912|
;;;3699               {
;;;3700                  case 1:
;;;3701                  {
;;;3702                     gray = (png_uint_16)(gray*0xff);
0049e0  ebc82908          RSB      r9,r8,r8,LSL #8
0049e4  fa1ff889          UXTH     r8,r9
;;;3703                     sp = row + (png_size_t)((row_width - 1) >> 3);
0049e8  f1a20901          SUB      r9,r2,#1
0049ec  eb0501d9          ADD      r1,r5,r9,LSR #3
;;;3704                     dp = row + (png_size_t)row_width - 1;
0049f0  eb050902          ADD      r9,r5,r2
0049f4  f1a90001          SUB      r0,r9,#1
;;;3705                     shift = 7 - (int)((row_width + 7) & 0x07);
0049f8  f1020907          ADD      r9,r2,#7
0049fc  f0090907          AND      r9,r9,#7
004a00  f1c90707          RSB      r7,r9,#7
;;;3706                     for (i = 0; i < row_width; i++)
004a04  2400              MOVS     r4,#0
004a06  e019              B        |L1.19004|
                  |L1.18952|
;;;3707                     {
;;;3708                        if ((*sp >> shift) & 0x01)
004a08  f8919000          LDRB     r9,[r1,#0]
004a0c  fa49f907          ASR      r9,r9,r7
004a10  f0090901          AND      r9,r9,#1
004a14  f1b90f00          CMP      r9,#0
004a18  d004              BEQ      |L1.18980|
;;;3709                           *dp = 0xff;
004a1a  f04f09ff          MOV      r9,#0xff
004a1e  f8809000          STRB     r9,[r0,#0]
004a22  e003              B        |L1.18988|
                  |L1.18980|
;;;3710                        else
;;;3711                           *dp = 0;
004a24  f04f0900          MOV      r9,#0
004a28  f8809000          STRB     r9,[r0,#0]
                  |L1.18988|
;;;3712                        if (shift == 7)
004a2c  2f07              CMP      r7,#7
004a2e  d102              BNE      |L1.18998|
;;;3713                        {
;;;3714                           shift = 0;
004a30  2700              MOVS     r7,#0
;;;3715                           sp--;
004a32  1e49              SUBS     r1,r1,#1
004a34  e000              B        |L1.19000|
                  |L1.18998|
;;;3716                        }
;;;3717                        else
;;;3718                           shift++;
004a36  1c7f              ADDS     r7,r7,#1
                  |L1.19000|
;;;3719   
;;;3720                        dp--;
004a38  1e40              SUBS     r0,r0,#1
004a3a  1c64              ADDS     r4,r4,#1              ;3706
                  |L1.19004|
004a3c  4294              CMP      r4,r2                 ;3706
004a3e  d3e3              BCC      |L1.18952|
                  |L1.19008|
;;;3721                     }
;;;3722                     break;
004a40  e05d              B        |L1.19198|
                  |L1.19010|
;;;3723                  }
;;;3724                  case 2:
;;;3725                  {
;;;3726                     gray = (png_uint_16)(gray*0x55);
004a42  eb081908          ADD      r9,r8,r8,LSL #4
004a46  eb090989          ADD      r9,r9,r9,LSL #2
004a4a  fa1ff889          UXTH     r8,r9
;;;3727                     sp = row + (png_size_t)((row_width - 1) >> 2);
004a4e  f1a20901          SUB      r9,r2,#1
004a52  eb050199          ADD      r1,r5,r9,LSR #2
;;;3728                     dp = row + (png_size_t)row_width - 1;
004a56  eb050902          ADD      r9,r5,r2
004a5a  f1a90001          SUB      r0,r9,#1
;;;3729                     shift = (int)((3 - ((row_width + 3) & 0x03)) << 1);
004a5e  f1020903          ADD      r9,r2,#3
004a62  f0090903          AND      r9,r9,#3
004a66  f1c90903          RSB      r9,r9,#3
004a6a  ea4f0749          LSL      r7,r9,#1
;;;3730                     for (i = 0; i < row_width; i++)
004a6e  2400              MOVS     r4,#0
004a70  e017              B        |L1.19106|
                  |L1.19058|
;;;3731                     {
;;;3732                        value = (*sp >> shift) & 0x03;
004a72  f8919000          LDRB     r9,[r1,#0]
004a76  fa49f907          ASR      r9,r9,r7
004a7a  f0090c03          AND      r12,r9,#3
;;;3733                        *dp = (png_byte)(value | (value << 2) | (value << 4) |
004a7e  ea4c098c          ORR      r9,r12,r12,LSL #2
004a82  ea49190c          ORR      r9,r9,r12,LSL #4
004a86  ea49198c          ORR      r9,r9,r12,LSL #6
004a8a  f8809000          STRB     r9,[r0,#0]
;;;3734                           (value << 6));
;;;3735                        if (shift == 6)
004a8e  2f06              CMP      r7,#6
004a90  d104              BNE      |L1.19100|
;;;3736                        {
;;;3737                           shift = 0;
004a92  2700              MOVS     r7,#0
;;;3738                           sp--;
004a94  1e49              SUBS     r1,r1,#1
004a96  e002              B        |L1.19102|
                  |L1.19096|
004a98  e0b9              B        |L1.19470|
                  |L1.19098|
004a9a  e038              B        |L1.19214|
                  |L1.19100|
;;;3739                        }
;;;3740                        else
;;;3741                           shift += 2;
004a9c  1cbf              ADDS     r7,r7,#2
                  |L1.19102|
;;;3742   
;;;3743                        dp--;
004a9e  1e40              SUBS     r0,r0,#1
004aa0  1c64              ADDS     r4,r4,#1              ;3730
                  |L1.19106|
004aa2  4294              CMP      r4,r2                 ;3730
004aa4  d3e5              BCC      |L1.19058|
;;;3744                     }
;;;3745                     break;
004aa6  e02a              B        |L1.19198|
                  |L1.19112|
;;;3746                  }
;;;3747                  case 4:
;;;3748                  {
;;;3749                     gray = (png_uint_16)(gray*0x11);
004aa8  eb081908          ADD      r9,r8,r8,LSL #4
004aac  fa1ff889          UXTH     r8,r9
;;;3750                     sp = row + (png_size_t)((row_width - 1) >> 1);
004ab0  f1a20901          SUB      r9,r2,#1
004ab4  eb050159          ADD      r1,r5,r9,LSR #1
;;;3751                     dp = row + (png_size_t)row_width - 1;
004ab8  eb050902          ADD      r9,r5,r2
004abc  f1a90001          SUB      r0,r9,#1
;;;3752                     shift = (int)((1 - ((row_width + 1) & 0x01)) << 2);
004ac0  f1020901          ADD      r9,r2,#1
004ac4  f0090901          AND      r9,r9,#1
004ac8  f1c90901          RSB      r9,r9,#1
004acc  ea4f0789          LSL      r7,r9,#2
;;;3753                     for (i = 0; i < row_width; i++)
004ad0  2400              MOVS     r4,#0
004ad2  e011              B        |L1.19192|
                  |L1.19156|
;;;3754                     {
;;;3755                        value = (*sp >> shift) & 0x0f;
004ad4  f8919000          LDRB     r9,[r1,#0]
004ad8  fa49f907          ASR      r9,r9,r7
004adc  f0090c0f          AND      r12,r9,#0xf
;;;3756                        *dp = (png_byte)(value | (value << 4));
004ae0  ea4c190c          ORR      r9,r12,r12,LSL #4
004ae4  f8809000          STRB     r9,[r0,#0]
;;;3757                        if (shift == 4)
004ae8  2f04              CMP      r7,#4
004aea  d102              BNE      |L1.19186|
;;;3758                        {
;;;3759                           shift = 0;
004aec  2700              MOVS     r7,#0
;;;3760                           sp--;
004aee  1e49              SUBS     r1,r1,#1
004af0  e000              B        |L1.19188|
                  |L1.19186|
;;;3761                        }
;;;3762                        else
;;;3763                           shift = 4;
004af2  2704              MOVS     r7,#4
                  |L1.19188|
;;;3764   
;;;3765                        dp--;
004af4  1e40              SUBS     r0,r0,#1
004af6  1c64              ADDS     r4,r4,#1              ;3753
                  |L1.19192|
004af8  4294              CMP      r4,r2                 ;3753
004afa  d3eb              BCC      |L1.19156|
;;;3766                     }
;;;3767                     break;
004afc  bf00              NOP      
                  |L1.19198|
004afe  bf00              NOP                            ;3722
;;;3768                  }
;;;3769               }
;;;3770               row_info->bit_depth = 8;
004b00  f04f0908          MOV      r9,#8
004b04  f8839009          STRB     r9,[r3,#9]
;;;3771               row_info->pixel_depth = 8;
004b08  f883900b          STRB     r9,[r3,#0xb]
;;;3772               row_info->rowbytes = row_width;
004b0c  605a              STR      r2,[r3,#4]
                  |L1.19214|
;;;3773            }
;;;3774   
;;;3775            if (trans_value != NULL)
004b0e  2e00              CMP      r6,#0
004b10  d07c              BEQ      |L1.19468|
;;;3776            {
;;;3777               if (row_info->bit_depth == 8)
004b12  f8939009          LDRB     r9,[r3,#9]
004b16  f1b90f08          CMP      r9,#8
004b1a  d11e              BNE      |L1.19290|
;;;3778               {
;;;3779                  sp = row + (png_size_t)row_width - 1;
004b1c  eb050902          ADD      r9,r5,r2
004b20  f1a90101          SUB      r1,r9,#1
;;;3780                  dp = row + (png_size_t)(row_width << 1) - 1;
004b24  eb050942          ADD      r9,r5,r2,LSL #1
004b28  f1a90001          SUB      r0,r9,#1
;;;3781                  for (i = 0; i < row_width; i++)
004b2c  2400              MOVS     r4,#0
004b2e  e011              B        |L1.19284|
                  |L1.19248|
;;;3782                  {
;;;3783                     if (*sp == gray)
004b30  f8919000          LDRB     r9,[r1,#0]
004b34  45c1              CMP      r9,r8
004b36  d104              BNE      |L1.19266|
;;;3784                        *dp-- = 0;
004b38  f04f0900          MOV      r9,#0
004b3c  f8009901          STRB     r9,[r0],#-1
004b40  e003              B        |L1.19274|
                  |L1.19266|
;;;3785                     else
;;;3786                        *dp-- = 0xff;
004b42  f04f09ff          MOV      r9,#0xff
004b46  f8009901          STRB     r9,[r0],#-1
                  |L1.19274|
;;;3787                     *dp-- = *sp--;
004b4a  f8119901          LDRB     r9,[r1],#-1
004b4e  f8009901          STRB     r9,[r0],#-1
004b52  1c64              ADDS     r4,r4,#1              ;3781
                  |L1.19284|
004b54  4294              CMP      r4,r2                 ;3781
004b56  d3eb              BCC      |L1.19248|
004b58  e031              B        |L1.19390|
                  |L1.19290|
;;;3788                  }
;;;3789               }
;;;3790               else if (row_info->bit_depth == 16)
004b5a  f8939009          LDRB     r9,[r3,#9]
004b5e  f1b90f10          CMP      r9,#0x10
004b62  d12c              BNE      |L1.19390|
;;;3791               {
;;;3792                  sp = row + row_info->rowbytes - 1;
004b64  f8d39004          LDR      r9,[r3,#4]
004b68  44a9              ADD      r9,r9,r5
004b6a  f1a90101          SUB      r1,r9,#1
;;;3793                  dp = row + (row_info->rowbytes << 1) - 1;
004b6e  f8d39004          LDR      r9,[r3,#4]
004b72  eb050949          ADD      r9,r5,r9,LSL #1
004b76  f1a90001          SUB      r0,r9,#1
;;;3794                  for (i = 0; i < row_width; i++)
004b7a  2400              MOVS     r4,#0
004b7c  e01d              B        |L1.19386|
                  |L1.19326|
;;;3795                  {
;;;3796                     if (((png_uint_16)*(sp) |
004b7e  f8919000          LDRB     r9,[r1,#0]
004b82  f811ac01          LDRB     r10,[r1,#-1]
004b86  ea49290a          ORR      r9,r9,r10,LSL #8
004b8a  45c1              CMP      r9,r8
004b8c  d106              BNE      |L1.19356|
;;;3797                        ((png_uint_16)*(sp - 1) << 8)) == gray)
;;;3798                     {
;;;3799                        *dp-- = 0;
004b8e  f04f0900          MOV      r9,#0
004b92  f8009901          STRB     r9,[r0],#-1
;;;3800                        *dp-- = 0;
004b96  f8009901          STRB     r9,[r0],#-1
004b9a  e005              B        |L1.19368|
                  |L1.19356|
;;;3801                     }
;;;3802                     else
;;;3803                     {
;;;3804                        *dp-- = 0xff;
004b9c  f04f09ff          MOV      r9,#0xff
004ba0  f8009901          STRB     r9,[r0],#-1
;;;3805                        *dp-- = 0xff;
004ba4  f8009901          STRB     r9,[r0],#-1
                  |L1.19368|
;;;3806                     }
;;;3807                     *dp-- = *sp--;
004ba8  f8119901          LDRB     r9,[r1],#-1
004bac  f8009901          STRB     r9,[r0],#-1
;;;3808                     *dp-- = *sp--;
004bb0  f8119901          LDRB     r9,[r1],#-1
004bb4  f8009901          STRB     r9,[r0],#-1
004bb8  1c64              ADDS     r4,r4,#1              ;3794
                  |L1.19386|
004bba  4294              CMP      r4,r2                 ;3794
004bbc  d3df              BCC      |L1.19326|
                  |L1.19390|
;;;3809                  }
;;;3810               }
;;;3811               row_info->color_type = PNG_COLOR_TYPE_GRAY_ALPHA;
004bbe  f04f0904          MOV      r9,#4
004bc2  f8839008          STRB     r9,[r3,#8]
;;;3812               row_info->channels = 2;
004bc6  f04f0902          MOV      r9,#2
004bca  f883900a          STRB     r9,[r3,#0xa]
;;;3813               row_info->pixel_depth = (png_byte)(row_info->bit_depth << 1);
004bce  f8939009          LDRB     r9,[r3,#9]
004bd2  ea4f6949          LSL      r9,r9,#25
004bd6  ea4f6919          LSR      r9,r9,#24
004bda  f883900b          STRB     r9,[r3,#0xb]
;;;3814               row_info->rowbytes = PNG_ROWBYTES(row_info->pixel_depth,
004bde  f893900b          LDRB     r9,[r3,#0xb]
004be2  f1b90f08          CMP      r9,#8
004be6  db07              BLT      |L1.19448|
004be8  f893900b          LDRB     r9,[r3,#0xb]
004bec  ea4f09d9          LSR      r9,r9,#3
004bf0  fb09f902          MUL      r9,r9,r2
004bf4  e008              B        |L1.19464|
004bf6  e009              B        |L1.19468|
                  |L1.19448|
004bf8  f893900b          LDRB     r9,[r3,#0xb]
004bfc  fb09f902          MUL      r9,r9,r2
004c00  f1090907          ADD      r9,r9,#7
004c04  ea4f09d9          LSR      r9,r9,#3
                  |L1.19464|
004c08  f8c39004          STR      r9,[r3,#4]
                  |L1.19468|
;;;3815                  row_width);
;;;3816            }
;;;3817         }
004c0c  e0bd              B        |L1.19850|
                  |L1.19470|
;;;3818         else if (row_info->color_type == PNG_COLOR_TYPE_RGB && trans_value)
004c0e  f8938008          LDRB     r8,[r3,#8]
004c12  f1b80f02          CMP      r8,#2
004c16  d1f9              BNE      |L1.19468|
004c18  2e00              CMP      r6,#0
004c1a  d0f7              BEQ      |L1.19468|
;;;3819         {
;;;3820            if (row_info->bit_depth == 8)
004c1c  f8938009          LDRB     r8,[r3,#9]
004c20  f1b80f08          CMP      r8,#8
004c24  d135              BNE      |L1.19602|
;;;3821            {
;;;3822               sp = row + (png_size_t)row_info->rowbytes - 1;
004c26  f8d38004          LDR      r8,[r3,#4]
004c2a  44a8              ADD      r8,r8,r5
004c2c  f1a80101          SUB      r1,r8,#1
;;;3823               dp = row + (png_size_t)(row_width << 2) - 1;
004c30  eb050882          ADD      r8,r5,r2,LSL #2
004c34  f1a80001          SUB      r0,r8,#1
;;;3824               for (i = 0; i < row_width; i++)
004c38  2400              MOVS     r4,#0
004c3a  e027              B        |L1.19596|
                  |L1.19516|
;;;3825               {
;;;3826                  if (*(sp - 2) == trans_value->red &&
004c3c  f8118c02          LDRB     r8,[r1,#-2]
004c40  f8b69002          LDRH     r9,[r6,#2]
004c44  45c8              CMP      r8,r9
004c46  d110              BNE      |L1.19562|
;;;3827                     *(sp - 1) == trans_value->green &&
004c48  f8118c01          LDRB     r8,[r1,#-1]
004c4c  f8b69004          LDRH     r9,[r6,#4]
004c50  45c8              CMP      r8,r9
004c52  d10a              BNE      |L1.19562|
;;;3828                     *(sp - 0) == trans_value->blue)
004c54  f8918000          LDRB     r8,[r1,#0]
004c58  f8b69006          LDRH     r9,[r6,#6]
004c5c  45c8              CMP      r8,r9
004c5e  d104              BNE      |L1.19562|
;;;3829                     *dp-- = 0;
004c60  f04f0800          MOV      r8,#0
004c64  f8008901          STRB     r8,[r0],#-1
004c68  e003              B        |L1.19570|
                  |L1.19562|
;;;3830                  else
;;;3831                     *dp-- = 0xff;
004c6a  f04f08ff          MOV      r8,#0xff
004c6e  f8008901          STRB     r8,[r0],#-1
                  |L1.19570|
;;;3832                  *dp-- = *sp--;
004c72  f8118901          LDRB     r8,[r1],#-1
004c76  f8008901          STRB     r8,[r0],#-1
;;;3833                  *dp-- = *sp--;
004c7a  f8118901          LDRB     r8,[r1],#-1
004c7e  f8008901          STRB     r8,[r0],#-1
;;;3834                  *dp-- = *sp--;
004c82  f8118901          LDRB     r8,[r1],#-1
004c86  f8008901          STRB     r8,[r0],#-1
004c8a  1c64              ADDS     r4,r4,#1              ;3824
                  |L1.19596|
004c8c  4294              CMP      r4,r2                 ;3824
004c8e  d3d5              BCC      |L1.19516|
004c90  e055              B        |L1.19774|
                  |L1.19602|
;;;3835               }
;;;3836            }
;;;3837            else if (row_info->bit_depth == 16)
004c92  f8938009          LDRB     r8,[r3,#9]
004c96  f1b80f10          CMP      r8,#0x10
004c9a  d150              BNE      |L1.19774|
;;;3838            {
;;;3839               sp = row + row_info->rowbytes - 1;
004c9c  f8d38004          LDR      r8,[r3,#4]
004ca0  44a8              ADD      r8,r8,r5
004ca2  f1a80101          SUB      r1,r8,#1
;;;3840               dp = row + (png_size_t)(row_width << 3) - 1;
004ca6  eb0508c2          ADD      r8,r5,r2,LSL #3
004caa  f1a80001          SUB      r0,r8,#1
;;;3841               for (i = 0; i < row_width; i++)
004cae  2400              MOVS     r4,#0
004cb0  e043              B        |L1.19770|
                  |L1.19634|
;;;3842               {
;;;3843                  if ((((png_uint_16)*(sp - 4) |
004cb2  f8118c04          LDRB     r8,[r1,#-4]
004cb6  f8119c05          LDRB     r9,[r1,#-5]
004cba  ea482809          ORR      r8,r8,r9,LSL #8
004cbe  f8b69002          LDRH     r9,[r6,#2]
004cc2  45c8              CMP      r8,r9
004cc4  d11a              BNE      |L1.19708|
;;;3844                     ((png_uint_16)*(sp - 5) << 8)) == trans_value->red) &&
;;;3845                     (((png_uint_16)*(sp - 2) |
004cc6  f8118c02          LDRB     r8,[r1,#-2]
004cca  f8119c03          LDRB     r9,[r1,#-3]
004cce  ea482809          ORR      r8,r8,r9,LSL #8
004cd2  f8b69004          LDRH     r9,[r6,#4]
004cd6  45c8              CMP      r8,r9
004cd8  d110              BNE      |L1.19708|
;;;3846                     ((png_uint_16)*(sp - 3) << 8)) == trans_value->green) &&
;;;3847                     (((png_uint_16)*(sp - 0) |
004cda  f8918000          LDRB     r8,[r1,#0]
004cde  f8119c01          LDRB     r9,[r1,#-1]
004ce2  ea482809          ORR      r8,r8,r9,LSL #8
004ce6  f8b69006          LDRH     r9,[r6,#6]
004cea  45c8              CMP      r8,r9
004cec  d106              BNE      |L1.19708|
;;;3848                     ((png_uint_16)*(sp - 1) << 8)) == trans_value->blue))
;;;3849                  {
;;;3850                     *dp-- = 0;
004cee  f04f0800          MOV      r8,#0
004cf2  f8008901          STRB     r8,[r0],#-1
;;;3851                     *dp-- = 0;
004cf6  f8008901          STRB     r8,[r0],#-1
004cfa  e005              B        |L1.19720|
                  |L1.19708|
;;;3852                  }
;;;3853                  else
;;;3854                  {
;;;3855                     *dp-- = 0xff;
004cfc  f04f08ff          MOV      r8,#0xff
004d00  f8008901          STRB     r8,[r0],#-1
;;;3856                     *dp-- = 0xff;
004d04  f8008901          STRB     r8,[r0],#-1
                  |L1.19720|
;;;3857                  }
;;;3858                  *dp-- = *sp--;
004d08  f8118901          LDRB     r8,[r1],#-1
004d0c  f8008901          STRB     r8,[r0],#-1
;;;3859                  *dp-- = *sp--;
004d10  f8118901          LDRB     r8,[r1],#-1
004d14  f8008901          STRB     r8,[r0],#-1
;;;3860                  *dp-- = *sp--;
004d18  f8118901          LDRB     r8,[r1],#-1
004d1c  f8008901          STRB     r8,[r0],#-1
;;;3861                  *dp-- = *sp--;
004d20  f8118901          LDRB     r8,[r1],#-1
004d24  f8008901          STRB     r8,[r0],#-1
;;;3862                  *dp-- = *sp--;
004d28  f8118901          LDRB     r8,[r1],#-1
004d2c  f8008901          STRB     r8,[r0],#-1
;;;3863                  *dp-- = *sp--;
004d30  f8118901          LDRB     r8,[r1],#-1
004d34  f8008901          STRB     r8,[r0],#-1
004d38  1c64              ADDS     r4,r4,#1              ;3841
                  |L1.19770|
004d3a  4294              CMP      r4,r2                 ;3841
004d3c  d3b9              BCC      |L1.19634|
                  |L1.19774|
;;;3864               }
;;;3865            }
;;;3866            row_info->color_type = PNG_COLOR_TYPE_RGB_ALPHA;
004d3e  f04f0806          MOV      r8,#6
004d42  f8838008          STRB     r8,[r3,#8]
;;;3867            row_info->channels = 4;
004d46  f04f0804          MOV      r8,#4
004d4a  f883800a          STRB     r8,[r3,#0xa]
;;;3868            row_info->pixel_depth = (png_byte)(row_info->bit_depth << 2);
004d4e  f8938009          LDRB     r8,[r3,#9]
004d52  ea4f6888          LSL      r8,r8,#26
004d56  ea4f6818          LSR      r8,r8,#24
004d5a  f883800b          STRB     r8,[r3,#0xb]
;;;3869            row_info->rowbytes = PNG_ROWBYTES(row_info->pixel_depth,row_width);
004d5e  f893800b          LDRB     r8,[r3,#0xb]
004d62  f1b80f08          CMP      r8,#8
004d66  db06              BLT      |L1.19830|
004d68  f893800b          LDRB     r8,[r3,#0xb]
004d6c  ea4f08d8          LSR      r8,r8,#3
004d70  fb08f802          MUL      r8,r8,r2
004d74  e007              B        |L1.19846|
                  |L1.19830|
004d76  f893800b          LDRB     r8,[r3,#0xb]
004d7a  fb08f802          MUL      r8,r8,r2
004d7e  f1080807          ADD      r8,r8,#7
004d82  ea4f08d8          LSR      r8,r8,#3
                  |L1.19846|
004d86  f8c38004          STR      r8,[r3,#4]
                  |L1.19850|
;;;3870         }
;;;3871      }
;;;3872   }
004d8a  e8bd87f0          POP      {r4-r10,pc}
;;;3873   #endif
                          ENDP

                  png_do_expand_palette PROC
;;;3535   void /* PRIVATE */
;;;3536   png_do_expand_palette(png_row_infop row_info, png_bytep row,
004d8e  e92d47f0          PUSH     {r4-r10,lr}
;;;3537      png_colorp palette, png_bytep trans, int num_trans)
;;;3538   {
004d92  4604              MOV      r4,r0
004d94  460e              MOV      r6,r1
004d96  4617              MOV      r7,r2
004d98  4699              MOV      r9,r3
004d9a  f8dd8020          LDR      r8,[sp,#0x20]
;;;3539      int shift, value;
;;;3540      png_bytep sp, dp;
;;;3541      png_uint_32 i;
;;;3542      png_uint_32 row_width=row_info->width;
004d9e  6821              LDR      r1,[r4,#0]
;;;3543   
;;;3544      png_debug(1, "in png_do_expand_palette\n");
;;;3545      if (
004da0  f894a008          LDRB     r10,[r4,#8]
004da4  f1ba0f03          CMP      r10,#3
004da8  d170              BNE      |L1.20108|
;;;3546   #if defined(PNG_USELESS_TESTS_SUPPORTED)
;;;3547          row != NULL && row_info != NULL &&
;;;3548   #endif
;;;3549          row_info->color_type == PNG_COLOR_TYPE_PALETTE)
;;;3550      {
;;;3551         if (row_info->bit_depth < 8)
004daa  f894a009          LDRB     r10,[r4,#9]
004dae  f1ba0f08          CMP      r10,#8
004db2  da6c              BGE      |L1.20110|
;;;3552         {
;;;3553            switch (row_info->bit_depth)
004db4  f894a009          LDRB     r10,[r4,#9]
004db8  f1ba0f01          CMP      r10,#1
004dbc  d006              BEQ      |L1.19916|
004dbe  f1ba0f02          CMP      r10,#2
004dc2  d030              BEQ      |L1.20006|
004dc4  f1ba0f04          CMP      r10,#4
004dc8  d175              BNE      |L1.20150|
004dca  e051              B        |L1.20080|
                  |L1.19916|
;;;3554            {
;;;3555               case 1:
;;;3556               {
;;;3557                  sp = row + (png_size_t)((row_width - 1) >> 3);
004dcc  f1a10a01          SUB      r10,r1,#1
004dd0  eb0602da          ADD      r2,r6,r10,LSR #3
;;;3558                  dp = row + (png_size_t)row_width - 1;
004dd4  eb060a01          ADD      r10,r6,r1
004dd8  f1aa0001          SUB      r0,r10,#1
;;;3559                  shift = 7 - (int)((row_width + 7) & 0x07);
004ddc  f1010a07          ADD      r10,r1,#7
004de0  f00a0a07          AND      r10,r10,#7
004de4  f1ca0507          RSB      r5,r10,#7
;;;3560                  for (i = 0; i < row_width; i++)
004de8  2300              MOVS     r3,#0
004dea  e019              B        |L1.20000|
                  |L1.19948|
;;;3561                  {
;;;3562                     if ((*sp >> shift) & 0x01)
004dec  f892a000          LDRB     r10,[r2,#0]
004df0  fa4afa05          ASR      r10,r10,r5
004df4  f00a0a01          AND      r10,r10,#1
004df8  f1ba0f00          CMP      r10,#0
004dfc  d004              BEQ      |L1.19976|
;;;3563                        *dp = 1;
004dfe  f04f0a01          MOV      r10,#1
004e02  f880a000          STRB     r10,[r0,#0]
004e06  e003              B        |L1.19984|
                  |L1.19976|
;;;3564                     else
;;;3565                        *dp = 0;
004e08  f04f0a00          MOV      r10,#0
004e0c  f880a000          STRB     r10,[r0,#0]
                  |L1.19984|
;;;3566                     if (shift == 7)
004e10  2d07              CMP      r5,#7
004e12  d102              BNE      |L1.19994|
;;;3567                     {
;;;3568                        shift = 0;
004e14  2500              MOVS     r5,#0
;;;3569                        sp--;
004e16  1e52              SUBS     r2,r2,#1
004e18  e000              B        |L1.19996|
                  |L1.19994|
;;;3570                     }
;;;3571                     else
;;;3572                        shift++;
004e1a  1c6d              ADDS     r5,r5,#1
                  |L1.19996|
;;;3573   
;;;3574                     dp--;
004e1c  1e40              SUBS     r0,r0,#1
004e1e  1c5b              ADDS     r3,r3,#1              ;3560
                  |L1.20000|
004e20  428b              CMP      r3,r1                 ;3560
004e22  d3e3              BCC      |L1.19948|
;;;3575                  }
;;;3576                  break;
004e24  e047              B        |L1.20150|
                  |L1.20006|
;;;3577               }
;;;3578               case 2:
;;;3579               {
;;;3580                  sp = row + (png_size_t)((row_width - 1) >> 2);
004e26  f1a10a01          SUB      r10,r1,#1
004e2a  eb06029a          ADD      r2,r6,r10,LSR #2
;;;3581                  dp = row + (png_size_t)row_width - 1;
004e2e  eb060a01          ADD      r10,r6,r1
004e32  f1aa0001          SUB      r0,r10,#1
;;;3582                  shift = (int)((3 - ((row_width + 3) & 0x03)) << 1);
004e36  f1010a03          ADD      r10,r1,#3
004e3a  f00a0a03          AND      r10,r10,#3
004e3e  f1ca0a03          RSB      r10,r10,#3
004e42  ea4f054a          LSL      r5,r10,#1
;;;3583                  for (i = 0; i < row_width; i++)
004e46  2300              MOVS     r3,#0
004e48  e00f              B        |L1.20074|
                  |L1.20042|
;;;3584                  {
;;;3585                     value = (*sp >> shift) & 0x03;
004e4a  f892a000          LDRB     r10,[r2,#0]
004e4e  fa4afa05          ASR      r10,r10,r5
004e52  f00a0c03          AND      r12,r10,#3
;;;3586                     *dp = (png_byte)value;
004e56  f880c000          STRB     r12,[r0,#0]
;;;3587                     if (shift == 6)
004e5a  2d06              CMP      r5,#6
004e5c  d102              BNE      |L1.20068|
;;;3588                     {
;;;3589                        shift = 0;
004e5e  2500              MOVS     r5,#0
;;;3590                        sp--;
004e60  1e52              SUBS     r2,r2,#1
004e62  e000              B        |L1.20070|
                  |L1.20068|
;;;3591                     }
;;;3592                     else
;;;3593                        shift += 2;
004e64  1cad              ADDS     r5,r5,#2
                  |L1.20070|
;;;3594   
;;;3595                     dp--;
004e66  1e40              SUBS     r0,r0,#1
004e68  1c5b              ADDS     r3,r3,#1              ;3583
                  |L1.20074|
004e6a  428b              CMP      r3,r1                 ;3583
004e6c  d3ed              BCC      |L1.20042|
;;;3596                  }
;;;3597                  break;
004e6e  e022              B        |L1.20150|
                  |L1.20080|
;;;3598               }
;;;3599               case 4:
;;;3600               {
;;;3601                  sp = row + (png_size_t)((row_width - 1) >> 1);
004e70  f1a10a01          SUB      r10,r1,#1
004e74  eb06025a          ADD      r2,r6,r10,LSR #1
;;;3602                  dp = row + (png_size_t)row_width - 1;
004e78  eb060a01          ADD      r10,r6,r1
004e7c  f1aa0001          SUB      r0,r10,#1
;;;3603                  shift = (int)((row_width & 0x01) << 2);
004e80  ea4f7ac1          LSL      r10,r1,#31
004e84  ea4f755a          LSR      r5,r10,#29
;;;3604                  for (i = 0; i < row_width; i++)
004e88  2300              MOVS     r3,#0
004e8a  e011              B        |L1.20144|
                  |L1.20108|
004e8c  e0b0              B        |L1.20464|
                  |L1.20110|
004e8e  e01a              B        |L1.20166|
                  |L1.20112|
;;;3605                  {
;;;3606                     value = (*sp >> shift) & 0x0f;
004e90  f892a000          LDRB     r10,[r2,#0]
004e94  fa4afa05          ASR      r10,r10,r5
004e98  f00a0c0f          AND      r12,r10,#0xf
;;;3607                     *dp = (png_byte)value;
004e9c  f880c000          STRB     r12,[r0,#0]
;;;3608                     if (shift == 4)
004ea0  2d04              CMP      r5,#4
004ea2  d102              BNE      |L1.20138|
;;;3609                     {
;;;3610                        shift = 0;
004ea4  2500              MOVS     r5,#0
;;;3611                        sp--;
004ea6  1e52              SUBS     r2,r2,#1
004ea8  e000              B        |L1.20140|
                  |L1.20138|
;;;3612                     }
;;;3613                     else
;;;3614                        shift += 4;
004eaa  1d2d              ADDS     r5,r5,#4
                  |L1.20140|
;;;3615   
;;;3616                     dp--;
004eac  1e40              SUBS     r0,r0,#1
004eae  1c5b              ADDS     r3,r3,#1              ;3604
                  |L1.20144|
004eb0  428b              CMP      r3,r1                 ;3604
004eb2  d3ed              BCC      |L1.20112|
;;;3617                  }
;;;3618                  break;
004eb4  bf00              NOP      
                  |L1.20150|
004eb6  bf00              NOP                            ;3576
;;;3619               }
;;;3620            }
;;;3621            row_info->bit_depth = 8;
004eb8  f04f0a08          MOV      r10,#8
004ebc  f884a009          STRB     r10,[r4,#9]
;;;3622            row_info->pixel_depth = 8;
004ec0  f884a00b          STRB     r10,[r4,#0xb]
;;;3623            row_info->rowbytes = row_width;
004ec4  6061              STR      r1,[r4,#4]
                  |L1.20166|
;;;3624         }
;;;3625         switch (row_info->bit_depth)
004ec6  f894a009          LDRB     r10,[r4,#9]
004eca  f1ba0f08          CMP      r10,#8
004ece  d17c              BNE      |L1.20426|
;;;3626         {
;;;3627            case 8:
;;;3628            {
;;;3629               if (trans != NULL)
004ed0  f1b90f00          CMP      r9,#0
004ed4  d04b              BEQ      |L1.20334|
;;;3630               {
;;;3631                  sp = row + (png_size_t)row_width - 1;
004ed6  eb060a01          ADD      r10,r6,r1
004eda  f1aa0201          SUB      r2,r10,#1
;;;3632                  dp = row + (png_size_t)(row_width << 2) - 1;
004ede  eb060a81          ADD      r10,r6,r1,LSL #2
004ee2  f1aa0001          SUB      r0,r10,#1
;;;3633   
;;;3634                  for (i = 0; i < row_width; i++)
004ee6  2300              MOVS     r3,#0
004ee8  e02a              B        |L1.20288|
                  |L1.20202|
;;;3635                  {
;;;3636                     if ((int)(*sp) >= num_trans)
004eea  f892a000          LDRB     r10,[r2,#0]
004eee  45c2              CMP      r10,r8
004ef0  db04              BLT      |L1.20220|
;;;3637                        *dp-- = 0xff;
004ef2  f04f0aff          MOV      r10,#0xff
004ef6  f800a901          STRB     r10,[r0],#-1
004efa  e005              B        |L1.20232|
                  |L1.20220|
;;;3638                     else
;;;3639                        *dp-- = trans[*sp];
004efc  f892a000          LDRB     r10,[r2,#0]
004f00  f819a00a          LDRB     r10,[r9,r10]
004f04  f800a901          STRB     r10,[r0],#-1
                  |L1.20232|
;;;3640                     *dp-- = palette[*sp].blue;
004f08  f892a000          LDRB     r10,[r2,#0]
004f0c  eb0a0a4a          ADD      r10,r10,r10,LSL #1
004f10  44ba              ADD      r10,r10,r7
004f12  f89aa002          LDRB     r10,[r10,#2]
004f16  f800a901          STRB     r10,[r0],#-1
;;;3641                     *dp-- = palette[*sp].green;
004f1a  f892a000          LDRB     r10,[r2,#0]
004f1e  eb0a0a4a          ADD      r10,r10,r10,LSL #1
004f22  44ba              ADD      r10,r10,r7
004f24  f89aa001          LDRB     r10,[r10,#1]
004f28  f800a901          STRB     r10,[r0],#-1
;;;3642                     *dp-- = palette[*sp].red;
004f2c  f892a000          LDRB     r10,[r2,#0]
004f30  eb0a0a4a          ADD      r10,r10,r10,LSL #1
004f34  f817a00a          LDRB     r10,[r7,r10]
004f38  f800a901          STRB     r10,[r0],#-1
;;;3643                     sp--;
004f3c  1e52              SUBS     r2,r2,#1
004f3e  1c5b              ADDS     r3,r3,#1              ;3634
                  |L1.20288|
004f40  428b              CMP      r3,r1                 ;3634
004f42  d3d2              BCC      |L1.20202|
;;;3644                  }
;;;3645                  row_info->bit_depth = 8;
004f44  f04f0a08          MOV      r10,#8
004f48  f884a009          STRB     r10,[r4,#9]
;;;3646                  row_info->pixel_depth = 32;
004f4c  f04f0a20          MOV      r10,#0x20
004f50  f884a00b          STRB     r10,[r4,#0xb]
;;;3647                  row_info->rowbytes = row_width * 4;
004f54  ea4f0a81          LSL      r10,r1,#2
004f58  f8c4a004          STR      r10,[r4,#4]
;;;3648                  row_info->color_type = 6;
004f5c  f04f0a06          MOV      r10,#6
004f60  f884a008          STRB     r10,[r4,#8]
;;;3649                  row_info->channels = 4;
004f64  f04f0a04          MOV      r10,#4
004f68  f884a00a          STRB     r10,[r4,#0xa]
004f6c  e03e              B        |L1.20460|
                  |L1.20334|
;;;3650               }
;;;3651               else
;;;3652               {
;;;3653                  sp = row + (png_size_t)row_width - 1;
004f6e  eb060a01          ADD      r10,r6,r1
004f72  f1aa0201          SUB      r2,r10,#1
;;;3654                  dp = row + (png_size_t)(row_width * 3) - 1;
004f76  eb010a41          ADD      r10,r1,r1,LSL #1
004f7a  44b2              ADD      r10,r10,r6
004f7c  f1aa0001          SUB      r0,r10,#1
;;;3655   
;;;3656                  for (i = 0; i < row_width; i++)
004f80  2300              MOVS     r3,#0
004f82  e01b              B        |L1.20412|
                  |L1.20356|
;;;3657                  {
;;;3658                     *dp-- = palette[*sp].blue;
004f84  f892a000          LDRB     r10,[r2,#0]
004f88  eb0a0a4a          ADD      r10,r10,r10,LSL #1
004f8c  44ba              ADD      r10,r10,r7
004f8e  f89aa002          LDRB     r10,[r10,#2]
004f92  f800a901          STRB     r10,[r0],#-1
;;;3659                     *dp-- = palette[*sp].green;
004f96  f892a000          LDRB     r10,[r2,#0]
004f9a  eb0a0a4a          ADD      r10,r10,r10,LSL #1
004f9e  44ba              ADD      r10,r10,r7
004fa0  f89aa001          LDRB     r10,[r10,#1]
004fa4  f800a901          STRB     r10,[r0],#-1
;;;3660                     *dp-- = palette[*sp].red;
004fa8  f892a000          LDRB     r10,[r2,#0]
004fac  eb0a0a4a          ADD      r10,r10,r10,LSL #1
004fb0  f817a00a          LDRB     r10,[r7,r10]
004fb4  f800a901          STRB     r10,[r0],#-1
;;;3661                     sp--;
004fb8  1e52              SUBS     r2,r2,#1
004fba  1c5b              ADDS     r3,r3,#1              ;3656
                  |L1.20412|
004fbc  428b              CMP      r3,r1                 ;3656
004fbe  d3e1              BCC      |L1.20356|
;;;3662                  }
;;;3663                  row_info->bit_depth = 8;
004fc0  f04f0a08          MOV      r10,#8
004fc4  f884a009          STRB     r10,[r4,#9]
;;;3664                  row_info->pixel_depth = 24;
004fc8  e000              B        |L1.20428|
                  |L1.20426|
004fca  e010              B        |L1.20462|
                  |L1.20428|
004fcc  f04f0a18          MOV      r10,#0x18
004fd0  f884a00b          STRB     r10,[r4,#0xb]
;;;3665                  row_info->rowbytes = row_width * 3;
004fd4  eb010a41          ADD      r10,r1,r1,LSL #1
004fd8  f8c4a004          STR      r10,[r4,#4]
;;;3666                  row_info->color_type = 2;
004fdc  f04f0a02          MOV      r10,#2
004fe0  f884a008          STRB     r10,[r4,#8]
;;;3667                  row_info->channels = 3;
004fe4  f04f0a03          MOV      r10,#3
004fe8  f884a00a          STRB     r10,[r4,#0xa]
                  |L1.20460|
;;;3668               }
;;;3669               break;
004fec  bf00              NOP      
                  |L1.20462|
004fee  bf00              NOP      
                  |L1.20464|
;;;3670            }
;;;3671         }
;;;3672      }
;;;3673   }
004ff0  e8bd87f0          POP      {r4-r10,pc}
;;;3674   
                          ENDP

                  png_do_read_transformations PROC
;;;1243   void /* PRIVATE */
;;;1244   png_do_read_transformations(png_structp png_ptr)
004ff4  b530              PUSH     {r4,r5,lr}
;;;1245   {
004ff6  b089              SUB      sp,sp,#0x24
004ff8  4604              MOV      r4,r0
;;;1246      png_debug(1, "in png_do_read_transformations\n");
;;;1247   #if !defined(PNG_USELESS_TESTS_SUPPORTED)
;;;1248      if (png_ptr->row_buf == NULL)
004ffa  f8d4022c          LDR      r0,[r4,#0x22c]
004ffe  b918              CBNZ     r0,|L1.20488|
;;;1249      {
;;;1250   #if !defined(PNG_NO_STDIO) && !defined(_WIN32_WCE)
;;;1251         char msg[50];
;;;1252   
;;;1253         sprintf(msg, "NULL row buffer for row %ld, pass %d", png_ptr->row_number,
;;;1254            png_ptr->pass);
;;;1255         png_error(png_ptr, msg);
;;;1256   #else
;;;1257         png_error(png_ptr, "NULL row buffer");
005000  a1f6              ADR      r1,|L1.21468|
005002  4620              MOV      r0,r4
005004  f7fffffe          BL       png_error
                  |L1.20488|
;;;1258   #endif
;;;1259      }
;;;1260   #endif
;;;1261   
;;;1262   #if defined(PNG_READ_EXPAND_SUPPORTED)
;;;1263      if (png_ptr->transformations & PNG_EXPAND)
005008  f8b401b0          LDRH     r0,[r4,#0x1b0]
00500c  f4005080          AND      r0,r0,#0x1000
005010  b320              CBZ      r0,|L1.20572|
;;;1264      {
;;;1265         if (png_ptr->row_info.color_type == PNG_COLOR_TYPE_PALETTE)
005012  f44f7012          MOV      r0,#0x248
005016  5d00              LDRB     r0,[r0,r4]
005018  2803              CMP      r0,#3
00501a  d10e              BNE      |L1.20538|
;;;1266         {
;;;1267            png_do_expand_palette(&(png_ptr->row_info), png_ptr->row_buf + 1,
00501c  f8b4025a          LDRH     r0,[r4,#0x25a]
005020  9000              STR      r0,[sp,#0]
005022  f8d4022c          LDR      r0,[r4,#0x22c]
005026  1c41              ADDS     r1,r0,#1
005028  f5047010          ADD      r0,r4,#0x240
00502c  f8d432c8          LDR      r3,[r4,#0x2c8]
005030  f8d42254          LDR      r2,[r4,#0x254]
005034  f7fffffe          BL       png_do_expand_palette
005038  e019              B        |L1.20590|
                  |L1.20538|
;;;1268               png_ptr->palette, png_ptr->trans, png_ptr->num_trans);
;;;1269         }
;;;1270         else
;;;1271         {
;;;1272            if (png_ptr->num_trans && (png_ptr->transformations & PNG_EXPAND_tRNS))
00503a  f8b4025a          LDRH     r0,[r4,#0x25a]
00503e  b170              CBZ      r0,|L1.20574|
005040  f8d401b0          LDR      r0,[r4,#0x1b0]
005044  f0007000          AND      r0,r0,#0x2000000
005048  b148              CBZ      r0,|L1.20574|
;;;1273               png_do_expand(&(png_ptr->row_info), png_ptr->row_buf + 1,
00504a  f8d4022c          LDR      r0,[r4,#0x22c]
00504e  1c41              ADDS     r1,r0,#1
005050  f5047233          ADD      r2,r4,#0x2cc
005054  f5047010          ADD      r0,r4,#0x240
005058  f7fffffe          BL       png_do_expand
                  |L1.20572|
00505c  e007              B        |L1.20590|
                  |L1.20574|
;;;1274                  &(png_ptr->trans_values));
;;;1275            else
;;;1276               png_do_expand(&(png_ptr->row_info), png_ptr->row_buf + 1,
00505e  f8d4022c          LDR      r0,[r4,#0x22c]
005062  1c41              ADDS     r1,r0,#1
005064  2200              MOVS     r2,#0
005066  f5047010          ADD      r0,r4,#0x240
00506a  f7fffffe          BL       png_do_expand
                  |L1.20590|
;;;1277                  NULL);
;;;1278         }
;;;1279      }
;;;1280   #endif
;;;1281   
;;;1282   #if defined(PNG_READ_STRIP_ALPHA_SUPPORTED)
;;;1283      if (png_ptr->flags & PNG_FLAG_STRIP_ALPHA)
00506e  f8d401ac          LDR      r0,[r4,#0x1ac]
005072  f4000080          AND      r0,r0,#0x400000
005076  b160              CBZ      r0,|L1.20626|
;;;1284         png_do_strip_filler(&(png_ptr->row_info), png_ptr->row_buf + 1,
005078  f8d401ac          LDR      r0,[r4,#0x1ac]
00507c  f4000080          AND      r0,r0,#0x400000
005080  f0400280          ORR      r2,r0,#0x80
005084  f8d4022c          LDR      r0,[r4,#0x22c]
005088  1c41              ADDS     r1,r0,#1
00508a  f5047010          ADD      r0,r4,#0x240
00508e  f7fffffe          BL       png_do_strip_filler
                  |L1.20626|
;;;1285            PNG_FLAG_FILLER_AFTER | (png_ptr->flags & PNG_FLAG_STRIP_ALPHA));
;;;1286   #endif
;;;1287   
;;;1288   #if defined(PNG_READ_RGB_TO_GRAY_SUPPORTED)
;;;1289      if (png_ptr->transformations & PNG_RGB_TO_GRAY)
005092  f8d401b0          LDR      r0,[r4,#0x1b0]
005096  f40000c0          AND      r0,r0,#0x600000
00509a  2800              CMP      r0,#0
00509c  d01f              BEQ      |L1.20702|
;;;1290      {
;;;1291         int rgb_error =
00509e  f8d4022c          LDR      r0,[r4,#0x22c]
0050a2  1c42              ADDS     r2,r0,#1
0050a4  f5047110          ADD      r1,r4,#0x240
0050a8  4620              MOV      r0,r4
0050aa  f7fffffe          BL       png_do_rgb_to_gray
0050ae  4605              MOV      r5,r0
;;;1292            png_do_rgb_to_gray(png_ptr, &(png_ptr->row_info), png_ptr->row_buf + 1);
;;;1293         if(rgb_error)
0050b0  b1a5              CBZ      r5,|L1.20700|
;;;1294         {
;;;1295            png_ptr->rgb_to_gray_status=1;
0050b2  2001              MOVS     r0,#1
0050b4  f8840364          STRB     r0,[r4,#0x364]
;;;1296            if(png_ptr->transformations == PNG_RGB_TO_GRAY_WARN)
0050b8  f8d401b0          LDR      r0,[r4,#0x1b0]
0050bc  f5b00f80          CMP      r0,#0x400000
0050c0  d103              BNE      |L1.20682|
;;;1297               png_warning(png_ptr, "png_do_rgb_to_gray found nongray pixel");
0050c2  a1ca              ADR      r1,|L1.21484|
0050c4  4620              MOV      r0,r4
0050c6  f7fffffe          BL       png_warning
                  |L1.20682|
;;;1298            if(png_ptr->transformations == PNG_RGB_TO_GRAY_ERR)
0050ca  f8d401b0          LDR      r0,[r4,#0x1b0]
0050ce  f5b01f00          CMP      r0,#0x200000
0050d2  d103              BNE      |L1.20700|
;;;1299               png_error(png_ptr, "png_do_rgb_to_gray found nongray pixel");
0050d4  a1c5              ADR      r1,|L1.21484|
0050d6  4620              MOV      r0,r4
0050d8  f7fffffe          BL       png_error
                  |L1.20700|
;;;1300         }
;;;1301      }
0050dc  bf00              NOP      
                  |L1.20702|
;;;1302   #endif
;;;1303   
;;;1304   /*
;;;1305   From Andreas Dilger e-mail to png-implement, 26 March 1998:
;;;1306   
;;;1307     In most cases, the "simple transparency" should be done prior to doing
;;;1308     gray-to-RGB, or you will have to test 3x as many bytes to check if a
;;;1309     pixel is transparent.  You would also need to make sure that the
;;;1310     transparency information is upgraded to RGB.
;;;1311   
;;;1312     To summarize, the current flow is:
;;;1313     - Gray + simple transparency -> compare 1 or 2 gray bytes and composite
;;;1314                                     with background "in place" if transparent,
;;;1315                                     convert to RGB if necessary
;;;1316     - Gray + alpha -> composite with gray background and remove alpha bytes,
;;;1317                                     convert to RGB if necessary
;;;1318   
;;;1319     To support RGB backgrounds for gray images we need:
;;;1320     - Gray + simple transparency -> convert to RGB + simple transparency, compare
;;;1321                                     3 or 6 bytes and composite with background
;;;1322                                     "in place" if transparent (3x compare/pixel
;;;1323                                     compared to doing composite with gray bkgrnd)
;;;1324     - Gray + alpha -> convert to RGB + alpha, composite with background and
;;;1325                                     remove alpha bytes (3x float operations/pixel
;;;1326                                     compared with composite on gray background)
;;;1327   
;;;1328     Greg's change will do this.  The reason it wasn't done before is for
;;;1329     performance, as this increases the per-pixel operations.  If we would check
;;;1330     in advance if the background was gray or RGB, and position the gray-to-RGB
;;;1331     transform appropriately, then it would save a lot of work/time.
;;;1332    */
;;;1333   
;;;1334   #if defined(PNG_READ_GRAY_TO_RGB_SUPPORTED)
;;;1335      /* if gray -> RGB, do so now only if background is non-gray; else do later
;;;1336       * for performance reasons */
;;;1337      if ((png_ptr->transformations & PNG_GRAY_TO_RGB) &&
0050de  f8b401b0          LDRH     r0,[r4,#0x1b0]
0050e2  f4004080          AND      r0,r0,#0x4000
0050e6  b158              CBZ      r0,|L1.20736|
;;;1338          !(png_ptr->mode & PNG_BACKGROUND_IS_GRAY))
0050e8  f8b401a8          LDRH     r0,[r4,#0x1a8]
0050ec  f4006000          AND      r0,r0,#0x800
0050f0  b930              CBNZ     r0,|L1.20736|
;;;1339         png_do_gray_to_rgb(&(png_ptr->row_info), png_ptr->row_buf + 1);
0050f2  f8d4022c          LDR      r0,[r4,#0x22c]
0050f6  1c41              ADDS     r1,r0,#1
0050f8  f5047010          ADD      r0,r4,#0x240
0050fc  f7fffffe          BL       png_do_gray_to_rgb
                  |L1.20736|
;;;1340   #endif
;;;1341   
;;;1342   #if defined(PNG_READ_BACKGROUND_SUPPORTED)
;;;1343      if ((png_ptr->transformations & PNG_BACKGROUND) &&
005100  f89401b0          LDRB     r0,[r4,#0x1b0]
005104  f0000080          AND      r0,r0,#0x80
005108  b330              CBZ      r0,|L1.20824|
;;;1344         ((png_ptr->num_trans != 0 ) ||
00510a  f8b4025a          LDRH     r0,[r4,#0x25a]
00510e  b920              CBNZ     r0,|L1.20762|
;;;1345         (png_ptr->color_type & PNG_COLOR_MASK_ALPHA)))
005110  f8940266          LDRB     r0,[r4,#0x266]
005114  f0000004          AND      r0,r0,#4
005118  b1f0              CBZ      r0,|L1.20824|
                  |L1.20762|
;;;1346         png_do_background(&(png_ptr->row_info), png_ptr->row_buf + 1,
00511a  f5047426          ADD      r4,r4,#0x298
00511e  e9d42306          LDRD     r2,r3,[r4,#0x18]
005122  6a21              LDR      r1,[r4,#0x20]
005124  6820              LDR      r0,[r4,#0]
005126  e9cd2304          STRD     r2,r3,[sp,#0x10]
00512a  e9cd1006          STRD     r1,r0,[sp,#0x18]
00512e  e9d41204          LDRD     r1,r2,[r4,#0x10]
005132  68e0              LDR      r0,[r4,#0xc]
005134  f5a47426          SUB      r4,r4,#0x298
005138  f2042382          ADD      r3,r4,#0x282
00513c  e9cd3000          STRD     r3,r0,[sp,#0]
005140  e9cd1202          STRD     r1,r2,[sp,#8]
005144  f8d4022c          LDR      r0,[r4,#0x22c]
005148  1c41              ADDS     r1,r0,#1
00514a  3b0a              SUBS     r3,r3,#0xa
00514c  f5047233          ADD      r2,r4,#0x2cc
005150  f5047010          ADD      r0,r4,#0x240
005154  f7fffffe          BL       png_do_background
                  |L1.20824|
;;;1347            &(png_ptr->trans_values), &(png_ptr->background)
;;;1348   #if defined(PNG_READ_GAMMA_SUPPORTED)
;;;1349            , &(png_ptr->background_1),
;;;1350            png_ptr->gamma_table, png_ptr->gamma_from_1,
;;;1351            png_ptr->gamma_to_1, png_ptr->gamma_16_table,
;;;1352            png_ptr->gamma_16_from_1, png_ptr->gamma_16_to_1,
;;;1353            png_ptr->gamma_shift
;;;1354   #endif
;;;1355   );
;;;1356   #endif
;;;1357   
;;;1358   #if defined(PNG_READ_GAMMA_SUPPORTED)
;;;1359      if ((png_ptr->transformations & PNG_GAMMA) &&
005158  f8b401b0          LDRH     r0,[r4,#0x1b0]
00515c  f4005000          AND      r0,r0,#0x2000
005160  b1f0              CBZ      r0,|L1.20896|
;;;1360   #if defined(PNG_READ_BACKGROUND_SUPPORTED)
;;;1361         !((png_ptr->transformations & PNG_BACKGROUND) &&
005162  f89401b0          LDRB     r0,[r4,#0x1b0]
005166  f0000080          AND      r0,r0,#0x80
00516a  b138              CBZ      r0,|L1.20860|
00516c  f8b4025a          LDRH     r0,[r4,#0x25a]
005170  b9b0              CBNZ     r0,|L1.20896|
005172  f8940266          LDRB     r0,[r4,#0x266]
005176  f0000004          AND      r0,r0,#4
00517a  b988              CBNZ     r0,|L1.20896|
                  |L1.20860|
;;;1362         ((png_ptr->num_trans != 0) ||
;;;1363         (png_ptr->color_type & PNG_COLOR_MASK_ALPHA))) &&
;;;1364   #endif
;;;1365         (png_ptr->color_type != PNG_COLOR_TYPE_PALETTE))
00517c  f8940266          LDRB     r0,[r4,#0x266]
005180  2803              CMP      r0,#3
005182  d00d              BEQ      |L1.20896|
;;;1366         png_do_gamma(&(png_ptr->row_info), png_ptr->row_buf + 1,
005184  f8d40298          LDR      r0,[r4,#0x298]
005188  9000              STR      r0,[sp,#0]
00518a  f8d4022c          LDR      r0,[r4,#0x22c]
00518e  1c41              ADDS     r1,r0,#1
005190  f5047010          ADD      r0,r4,#0x240
005194  f8d432b0          LDR      r3,[r4,#0x2b0]
005198  f8d422a4          LDR      r2,[r4,#0x2a4]
00519c  f7fffffe          BL       png_do_gamma
                  |L1.20896|
;;;1367            png_ptr->gamma_table, png_ptr->gamma_16_table,
;;;1368            png_ptr->gamma_shift);
;;;1369   #endif
;;;1370   
;;;1371   #if defined(PNG_READ_16_TO_8_SUPPORTED)
;;;1372      if (png_ptr->transformations & PNG_16_TO_8)
0051a0  f8b401b0          LDRH     r0,[r4,#0x1b0]
0051a4  f4006080          AND      r0,r0,#0x400
0051a8  b130              CBZ      r0,|L1.20920|
;;;1373         png_do_chop(&(png_ptr->row_info), png_ptr->row_buf + 1);
0051aa  f8d4022c          LDR      r0,[r4,#0x22c]
0051ae  1c41              ADDS     r1,r0,#1
0051b0  f5047010          ADD      r0,r4,#0x240
0051b4  f7fffffe          BL       png_do_chop
                  |L1.20920|
;;;1374   #endif
;;;1375   
;;;1376   #if defined(PNG_READ_DITHER_SUPPORTED)
;;;1377      if (png_ptr->transformations & PNG_DITHER)
0051b8  f89401b0          LDRB     r0,[r4,#0x1b0]
0051bc  f0000040          AND      r0,r0,#0x40
0051c0  b188              CBZ      r0,|L1.20966|
;;;1378      {
;;;1379         png_do_dither((png_row_infop)&(png_ptr->row_info), png_ptr->row_buf + 1,
0051c2  f8d4022c          LDR      r0,[r4,#0x22c]
0051c6  1c41              ADDS     r1,r0,#1
0051c8  f5047010          ADD      r0,r4,#0x240
0051cc  f504724b          ADD      r2,r4,#0x32c
0051d0  ca0c              LDM      r2,{r2,r3}
0051d2  f7fffffe          BL       png_do_dither
;;;1380            png_ptr->palette_lookup, png_ptr->dither_index);
;;;1381         if(png_ptr->row_info.rowbytes == (png_uint_32)0)
0051d6  f44f7011          MOV      r0,#0x244
0051da  5900              LDR      r0,[r0,r4]
0051dc  b918              CBNZ     r0,|L1.20966|
;;;1382            png_error(png_ptr, "png_do_dither returned rowbytes=0");
0051de  a18d              ADR      r1,|L1.21524|
0051e0  4620              MOV      r0,r4
0051e2  f7fffffe          BL       png_error
                  |L1.20966|
;;;1383      }
;;;1384   #endif
;;;1385   
;;;1386   #if defined(PNG_READ_INVERT_SUPPORTED)
;;;1387      if (png_ptr->transformations & PNG_INVERT_MONO)
0051e6  f89401b0          LDRB     r0,[r4,#0x1b0]
0051ea  f0000020          AND      r0,r0,#0x20
0051ee  b130              CBZ      r0,|L1.20990|
;;;1388         png_do_invert(&(png_ptr->row_info), png_ptr->row_buf + 1);
0051f0  f8d4022c          LDR      r0,[r4,#0x22c]
0051f4  1c41              ADDS     r1,r0,#1
0051f6  f5047010          ADD      r0,r4,#0x240
0051fa  f7fffffe          BL       png_do_invert
                  |L1.20990|
;;;1389   #endif
;;;1390   
;;;1391   #if defined(PNG_READ_SHIFT_SUPPORTED)
;;;1392      if (png_ptr->transformations & PNG_SHIFT)
0051fe  f89401b0          LDRB     r0,[r4,#0x1b0]
005202  f0000008          AND      r0,r0,#8
005206  b140              CBZ      r0,|L1.21018|
;;;1393         png_do_unshift(&(png_ptr->row_info), png_ptr->row_buf + 1,
005208  f8d4022c          LDR      r0,[r4,#0x22c]
00520c  1c41              ADDS     r1,r0,#1
00520e  f20422c1          ADD      r2,r4,#0x2c1
005212  f5047010          ADD      r0,r4,#0x240
005216  f7fffffe          BL       png_do_unshift
                  |L1.21018|
;;;1394            &(png_ptr->shift));
;;;1395   #endif
;;;1396   
;;;1397   #if defined(PNG_READ_PACK_SUPPORTED)
;;;1398      if (png_ptr->transformations & PNG_PACK)
00521a  f89401b0          LDRB     r0,[r4,#0x1b0]
00521e  f0000004          AND      r0,r0,#4
005222  b130              CBZ      r0,|L1.21042|
;;;1399         png_do_unpack(&(png_ptr->row_info), png_ptr->row_buf + 1);
005224  f8d4022c          LDR      r0,[r4,#0x22c]
005228  1c41              ADDS     r1,r0,#1
00522a  f5047010          ADD      r0,r4,#0x240
00522e  f7fffffe          BL       png_do_unpack
                  |L1.21042|
;;;1400   #endif
;;;1401   
;;;1402   #if defined(PNG_READ_BGR_SUPPORTED)
;;;1403      if (png_ptr->transformations & PNG_BGR)
005232  f89401b0          LDRB     r0,[r4,#0x1b0]
005236  f0000001          AND      r0,r0,#1
00523a  b130              CBZ      r0,|L1.21066|
;;;1404         png_do_bgr(&(png_ptr->row_info), png_ptr->row_buf + 1);
00523c  f8d4022c          LDR      r0,[r4,#0x22c]
005240  1c41              ADDS     r1,r0,#1
005242  f5047010          ADD      r0,r4,#0x240
005246  f7fffffe          BL       png_do_bgr
                  |L1.21066|
;;;1405   #endif
;;;1406   
;;;1407   #if defined(PNG_READ_PACKSWAP_SUPPORTED)
;;;1408      if (png_ptr->transformations & PNG_PACKSWAP)
00524a  f8d401b0          LDR      r0,[r4,#0x1b0]
00524e  f4003080          AND      r0,r0,#0x10000
005252  b130              CBZ      r0,|L1.21090|
;;;1409         png_do_packswap(&(png_ptr->row_info), png_ptr->row_buf + 1);
005254  f8d4022c          LDR      r0,[r4,#0x22c]
005258  1c41              ADDS     r1,r0,#1
00525a  f5047010          ADD      r0,r4,#0x240
00525e  f7fffffe          BL       png_do_packswap
                  |L1.21090|
;;;1410   #endif
;;;1411   
;;;1412   #if defined(PNG_READ_GRAY_TO_RGB_SUPPORTED)
;;;1413      /* if gray -> RGB, do so now only if we did not do so above */
;;;1414      if ((png_ptr->transformations & PNG_GRAY_TO_RGB) &&
005262  f8b401b0          LDRH     r0,[r4,#0x1b0]
005266  f4004080          AND      r0,r0,#0x4000
00526a  b158              CBZ      r0,|L1.21124|
;;;1415          (png_ptr->mode & PNG_BACKGROUND_IS_GRAY))
00526c  f8b401a8          LDRH     r0,[r4,#0x1a8]
005270  f4006000          AND      r0,r0,#0x800
005274  b130              CBZ      r0,|L1.21124|
;;;1416         png_do_gray_to_rgb(&(png_ptr->row_info), png_ptr->row_buf + 1);
005276  f8d4022c          LDR      r0,[r4,#0x22c]
00527a  1c41              ADDS     r1,r0,#1
00527c  f5047010          ADD      r0,r4,#0x240
005280  f7fffffe          BL       png_do_gray_to_rgb
                  |L1.21124|
;;;1417   #endif
;;;1418   
;;;1419   #if defined(PNG_READ_FILLER_SUPPORTED)
;;;1420      if (png_ptr->transformations & PNG_FILLER)
005284  f8b401b0          LDRH     r0,[r4,#0x1b0]
005288  f4004000          AND      r0,r0,#0x8000
00528c  b150              CBZ      r0,|L1.21156|
;;;1421         png_do_read_filler(&(png_ptr->row_info), png_ptr->row_buf + 1,
00528e  f8b4226e          LDRH     r2,[r4,#0x26e]
005292  f8d4022c          LDR      r0,[r4,#0x22c]
005296  1c41              ADDS     r1,r0,#1
005298  f5047010          ADD      r0,r4,#0x240
00529c  f8d431ac          LDR      r3,[r4,#0x1ac]
0052a0  f7fffffe          BL       png_do_read_filler
                  |L1.21156|
;;;1422            (png_uint_32)png_ptr->filler, png_ptr->flags);
;;;1423   #endif
;;;1424   
;;;1425   #if defined(PNG_READ_INVERT_ALPHA_SUPPORTED)
;;;1426      if (png_ptr->transformations & PNG_INVERT_ALPHA)
0052a4  f8d401b0          LDR      r0,[r4,#0x1b0]
0052a8  f4002000          AND      r0,r0,#0x80000
0052ac  b130              CBZ      r0,|L1.21180|
;;;1427         png_do_read_invert_alpha(&(png_ptr->row_info), png_ptr->row_buf + 1);
0052ae  f8d4022c          LDR      r0,[r4,#0x22c]
0052b2  1c41              ADDS     r1,r0,#1
0052b4  f5047010          ADD      r0,r4,#0x240
0052b8  f7fffffe          BL       png_do_read_invert_alpha
                  |L1.21180|
;;;1428   #endif
;;;1429   
;;;1430   #if defined(PNG_READ_SWAP_ALPHA_SUPPORTED)
;;;1431      if (png_ptr->transformations & PNG_SWAP_ALPHA)
0052bc  f8d401b0          LDR      r0,[r4,#0x1b0]
0052c0  f4003000          AND      r0,r0,#0x20000
0052c4  b130              CBZ      r0,|L1.21204|
;;;1432         png_do_read_swap_alpha(&(png_ptr->row_info), png_ptr->row_buf + 1);
0052c6  f8d4022c          LDR      r0,[r4,#0x22c]
0052ca  1c41              ADDS     r1,r0,#1
0052cc  f5047010          ADD      r0,r4,#0x240
0052d0  f7fffffe          BL       png_do_read_swap_alpha
                  |L1.21204|
;;;1433   #endif
;;;1434   
;;;1435   #if defined(PNG_READ_SWAP_SUPPORTED)
;;;1436      if (png_ptr->transformations & PNG_SWAP_BYTES)
0052d4  f89401b0          LDRB     r0,[r4,#0x1b0]
0052d8  f0000010          AND      r0,r0,#0x10
0052dc  b130              CBZ      r0,|L1.21228|
;;;1437         png_do_swap(&(png_ptr->row_info), png_ptr->row_buf + 1);
0052de  f8d4022c          LDR      r0,[r4,#0x22c]
0052e2  1c41              ADDS     r1,r0,#1
0052e4  f5047010          ADD      r0,r4,#0x240
0052e8  f7fffffe          BL       png_do_swap
                  |L1.21228|
;;;1438   #endif
;;;1439   
;;;1440   #if defined(PNG_READ_USER_TRANSFORM_SUPPORTED)
;;;1441      if (png_ptr->transformations & PNG_USER_TRANSFORM)
0052ec  f8d401b0          LDR      r0,[r4,#0x1b0]
0052f0  f4001080          AND      r0,r0,#0x100000
0052f4  b388              CBZ      r0,|L1.21338|
;;;1442       {
;;;1443         if(png_ptr->read_user_transform_fn != NULL)
0052f6  f8d40198          LDR      r0,[r4,#0x198]
0052fa  b140              CBZ      r0,|L1.21262|
;;;1444           (*(png_ptr->read_user_transform_fn)) /* user read transform function */
0052fc  f8d4022c          LDR      r0,[r4,#0x22c]
005300  1c42              ADDS     r2,r0,#1
005302  f5047110          ADD      r1,r4,#0x240
005306  4620              MOV      r0,r4
005308  f8d43198          LDR      r3,[r4,#0x198]
00530c  4798              BLX      r3
                  |L1.21262|
;;;1445             (png_ptr,                    /* png_ptr */
;;;1446              &(png_ptr->row_info),       /* row_info:     */
;;;1447                /*  png_uint_32 width;          width of row */
;;;1448                /*  png_uint_32 rowbytes;       number of bytes in row */
;;;1449                /*  png_byte color_type;        color type of pixels */
;;;1450                /*  png_byte bit_depth;         bit depth of samples */
;;;1451                /*  png_byte channels;          number of channels (1-4) */
;;;1452                /*  png_byte pixel_depth;       bits per pixel (depth*channels) */
;;;1453              png_ptr->row_buf + 1);      /* start of pixel data for row */
;;;1454   #if defined(PNG_USER_TRANSFORM_PTR_SUPPORTED)
;;;1455         if(png_ptr->user_transform_depth)
00530e  f89401a4          LDRB     r0,[r4,#0x1a4]
005312  b120              CBZ      r0,|L1.21278|
;;;1456            png_ptr->row_info.bit_depth = png_ptr->user_transform_depth;
005314  f89411a4          LDRB     r1,[r4,#0x1a4]
005318  f2402049          MOV      r0,#0x249
00531c  5501              STRB     r1,[r0,r4]
                  |L1.21278|
;;;1457         if(png_ptr->user_transform_channels)
00531e  f89401a5          LDRB     r0,[r4,#0x1a5]
005322  b120              CBZ      r0,|L1.21294|
;;;1458            png_ptr->row_info.channels = png_ptr->user_transform_channels;
005324  f89411a5          LDRB     r1,[r4,#0x1a5]
005328  f240204a          MOV      r0,#0x24a
00532c  5501              STRB     r1,[r0,r4]
                  |L1.21294|
;;;1459   #endif
;;;1460         png_ptr->row_info.pixel_depth = (png_byte)(png_ptr->row_info.bit_depth *
00532e  f2402049          MOV      r0,#0x249
005332  5d00              LDRB     r0,[r0,r4]
005334  f240214a          MOV      r1,#0x24a
005338  5d09              LDRB     r1,[r1,r4]
00533a  4348              MULS     r0,r1,r0
00533c  b2c1              UXTB     r1,r0
00533e  f240204b          MOV      r0,#0x24b
005342  5501              STRB     r1,[r0,r4]
;;;1461            png_ptr->row_info.channels);
;;;1462         png_ptr->row_info.rowbytes = PNG_ROWBYTES(png_ptr->row_info.pixel_depth,
005344  5d00              LDRB     r0,[r0,r4]
005346  2808              CMP      r0,#8
005348  db08              BLT      |L1.21340|
00534a  f240214b          MOV      r1,#0x24b
00534e  5d09              LDRB     r1,[r1,r4]
005350  08c9              LSRS     r1,r1,#3
005352  f8d40240          LDR      r0,[r4,#0x240]
005356  4348              MULS     r0,r1,r0
005358  e008              B        |L1.21356|
                  |L1.21338|
00535a  e00a              B        |L1.21362|
                  |L1.21340|
00535c  f240214b          MOV      r1,#0x24b
005360  5d09              LDRB     r1,[r1,r4]
005362  f8d40240          LDR      r0,[r4,#0x240]
005366  4348              MULS     r0,r1,r0
005368  1dc0              ADDS     r0,r0,#7
00536a  08c0              LSRS     r0,r0,#3
                  |L1.21356|
00536c  f44f7111          MOV      r1,#0x244
005370  5108              STR      r0,[r1,r4]
                  |L1.21362|
;;;1463            png_ptr->row_info.width);
;;;1464      }
;;;1465   #endif
;;;1466   
;;;1467   }
005372  b009              ADD      sp,sp,#0x24
005374  bd30              POP      {r4,r5,pc}
;;;1468   
                          ENDP

                  png_build_grayscale_palette PROC
;;;2433   void PNGAPI
;;;2434   png_build_grayscale_palette(int bit_depth, png_colorp palette)
005376  b5f0              PUSH     {r4-r7,lr}
;;;2435   {
005378  4605              MOV      r5,r0
00537a  460b              MOV      r3,r1
;;;2436      int num_palette;
;;;2437      int color_inc;
;;;2438      int i;
;;;2439      int v;
;;;2440   
;;;2441      png_debug(1, "in png_do_build_grayscale_palette\n");
;;;2442      if (palette == NULL)
00537c  b903              CBNZ     r3,|L1.21376|
                  |L1.21374|
;;;2443         return;
;;;2444   
;;;2445      switch (bit_depth)
;;;2446      {
;;;2447         case 1:
;;;2448            num_palette = 2;
;;;2449            color_inc = 0xff;
;;;2450            break;
;;;2451         case 2:
;;;2452            num_palette = 4;
;;;2453            color_inc = 0x55;
;;;2454            break;
;;;2455         case 4:
;;;2456            num_palette = 16;
;;;2457            color_inc = 0x11;
;;;2458            break;
;;;2459         case 8:
;;;2460            num_palette = 256;
;;;2461            color_inc = 1;
;;;2462            break;
;;;2463         default:
;;;2464            num_palette = 0;
;;;2465            color_inc = 0;
;;;2466            break;
;;;2467      }
;;;2468   
;;;2469      for (i = 0, v = 0; i < num_palette; i++, v += color_inc)
;;;2470      {
;;;2471         palette[i].red = (png_byte)v;
;;;2472         palette[i].green = (png_byte)v;
;;;2473         palette[i].blue = (png_byte)v;
;;;2474      }
;;;2475   }
00537e  bdf0              POP      {r4-r7,pc}
                  |L1.21376|
005380  2d01              CMP      r5,#1                 ;2445
005382  d006              BEQ      |L1.21394|
005384  2d02              CMP      r5,#2                 ;2445
005386  d007              BEQ      |L1.21400|
005388  2d04              CMP      r5,#4                 ;2445
00538a  d008              BEQ      |L1.21406|
00538c  2d08              CMP      r5,#8                 ;2445
00538e  d10d              BNE      |L1.21420|
005390  e008              B        |L1.21412|
                  |L1.21394|
005392  2002              MOVS     r0,#2                 ;2448
005394  21ff              MOVS     r1,#0xff              ;2449
005396  e00c              B        |L1.21426|
                  |L1.21400|
005398  2004              MOVS     r0,#4                 ;2452
00539a  2155              MOVS     r1,#0x55              ;2453
00539c  e009              B        |L1.21426|
                  |L1.21406|
00539e  2010              MOVS     r0,#0x10              ;2456
0053a0  2111              MOVS     r1,#0x11              ;2457
0053a2  e006              B        |L1.21426|
                  |L1.21412|
0053a4  f44f7080          MOV      r0,#0x100             ;2460
0053a8  2101              MOVS     r1,#1                 ;2461
0053aa  e002              B        |L1.21426|
                  |L1.21420|
0053ac  2000              MOVS     r0,#0                 ;2464
0053ae  2100              MOVS     r1,#0                 ;2465
0053b0  bf00              NOP                            ;2466
                  |L1.21426|
0053b2  bf00              NOP                            ;2450
0053b4  2200              MOVS     r2,#0                 ;2469
0053b6  2400              MOVS     r4,#0                 ;2469
0053b8  e00c              B        |L1.21460|
                  |L1.21434|
0053ba  eb020742          ADD      r7,r2,r2,LSL #1       ;2471
0053be  55dc              STRB     r4,[r3,r7]            ;2471
0053c0  eb020742          ADD      r7,r2,r2,LSL #1       ;2472
0053c4  441f              ADD      r7,r7,r3              ;2472
0053c6  707c              STRB     r4,[r7,#1]            ;2472
0053c8  eb020742          ADD      r7,r2,r2,LSL #1       ;2473
0053cc  441f              ADD      r7,r7,r3              ;2473
0053ce  70bc              STRB     r4,[r7,#2]            ;2473
0053d0  1c52              ADDS     r2,r2,#1              ;2469
0053d2  440c              ADD      r4,r4,r1              ;2469
                  |L1.21460|
0053d4  4282              CMP      r2,r0                 ;2469
0053d6  dbf0              BLT      |L1.21434|
0053d8  bf00              NOP      
0053da  e7d0              B        |L1.21374|
                  |L1.21468|
0053dc  4e554c4c          DCB      "NULL row buffer",0
0053e0  20726f77
0053e4  20627566
0053e8  66657200
                  |L1.21484|
0053ec  706e675f          DCB      "png_do_rgb_to_gray found nongray pixel",0
0053f0  646f5f72
0053f4  67625f74
0053f8  6f5f6772
0053fc  61792066
005400  6f756e64
005404  206e6f6e
005408  67726179
00540c  20706978
005410  656c00  
005413  00                DCB      0
                  |L1.21524|
005414  706e675f          DCB      "png_do_dither returned rowbytes=0",0
005418  646f5f64
00541c  69746865
005420  72207265
005424  7475726e
005428  65642072
00542c  6f776279
005430  7465733d
005434  3000    
005436  00                DCB      0
005437  00                DCB      0
                          ENDP

                  png_do_read_intrapixel PROC
;;;4189   void /* PRIVATE */
;;;4190   png_do_read_intrapixel(png_row_infop row_info, png_bytep row)
005438  e92d4ff0          PUSH     {r4-r11,lr}
;;;4191   {
00543c  4602              MOV      r2,r0
00543e  460b              MOV      r3,r1
;;;4192      png_debug(1, "in png_do_read_intrapixel\n");
;;;4193      if (
005440  7a10              LDRB     r0,[r2,#8]
005442  f0000002          AND      r0,r0,#2
005446  2800              CMP      r0,#0
005448  d05b              BEQ      |L1.21762|
;;;4194   #if defined(PNG_USELESS_TESTS_SUPPORTED)
;;;4195          row != NULL && row_info != NULL &&
;;;4196   #endif
;;;4197          (row_info->color_type & PNG_COLOR_MASK_COLOR))
;;;4198      {
;;;4199         int bytes_per_pixel;
;;;4200         png_uint_32 row_width = row_info->width;
00544a  6815              LDR      r5,[r2,#0]
;;;4201         if (row_info->bit_depth == 8)
00544c  7a50              LDRB     r0,[r2,#9]
00544e  2808              CMP      r0,#8
005450  d11b              BNE      |L1.21642|
;;;4202         {
;;;4203            png_bytep rp;
;;;4204            png_uint_32 i;
;;;4205   
;;;4206            if (row_info->color_type == PNG_COLOR_TYPE_RGB)
005452  7a16              LDRB     r6,[r2,#8]
005454  2e02              CMP      r6,#2
005456  d101              BNE      |L1.21596|
;;;4207               bytes_per_pixel = 3;
005458  2103              MOVS     r1,#3
00545a  e006              B        |L1.21610|
                  |L1.21596|
;;;4208            else if (row_info->color_type == PNG_COLOR_TYPE_RGB_ALPHA)
00545c  7a16              LDRB     r6,[r2,#8]
00545e  2e06              CMP      r6,#6
005460  d101              BNE      |L1.21606|
;;;4209               bytes_per_pixel = 4;
005462  2104              MOVS     r1,#4
005464  e001              B        |L1.21610|
                  |L1.21606|
;;;4210            else
;;;4211               return;
;;;4212   
;;;4213            for (i = 0, rp = row; i < row_width; i++, rp += bytes_per_pixel)
;;;4214            {
;;;4215               *(rp) = (png_byte)((256 + *rp + *(rp+1))&0xff);
;;;4216               *(rp+2) = (png_byte)((256 + *(rp+2) + *(rp+1))&0xff);
;;;4217            }
;;;4218         }
;;;4219         else if (row_info->bit_depth == 16)
;;;4220         {
;;;4221            png_bytep rp;
;;;4222            png_uint_32 i;
;;;4223   
;;;4224            if (row_info->color_type == PNG_COLOR_TYPE_RGB)
;;;4225               bytes_per_pixel = 6;
;;;4226            else if (row_info->color_type == PNG_COLOR_TYPE_RGB_ALPHA)
;;;4227               bytes_per_pixel = 8;
;;;4228            else
;;;4229               return;
;;;4230   
;;;4231            for (i = 0, rp = row; i < row_width; i++, rp += bytes_per_pixel)
;;;4232            {
;;;4233               png_uint_32 s0   = (*(rp  ) << 8) | *(rp+1);
;;;4234               png_uint_32 s1   = (*(rp+2) << 8) | *(rp+3);
;;;4235               png_uint_32 s2   = (*(rp+4) << 8) | *(rp+5);
;;;4236               png_uint_32 red  = (png_uint_32)((s0+s1+65536L) & 0xffffL);
;;;4237               png_uint_32 blue = (png_uint_32)((s2+s1+65536L) & 0xffffL);
;;;4238               *(rp  ) = (png_byte)((red >> 8) & 0xff);
;;;4239               *(rp+1) = (png_byte)(red & 0xff);
;;;4240               *(rp+4) = (png_byte)((blue >> 8) & 0xff);
;;;4241               *(rp+5) = (png_byte)(blue & 0xff);
;;;4242            }
;;;4243         }
;;;4244      }
;;;4245   }
005466  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.21610|
00546a  2400              MOVS     r4,#0                 ;4213
00546c  4618              MOV      r0,r3                 ;4213
00546e  e009              B        |L1.21636|
                  |L1.21616|
005470  7806              LDRB     r6,[r0,#0]            ;4215
005472  7847              LDRB     r7,[r0,#1]            ;4215
005474  443e              ADD      r6,r6,r7              ;4215
005476  7006              STRB     r6,[r0,#0]            ;4215
005478  7886              LDRB     r6,[r0,#2]            ;4216
00547a  7847              LDRB     r7,[r0,#1]            ;4216
00547c  443e              ADD      r6,r6,r7              ;4216
00547e  7086              STRB     r6,[r0,#2]            ;4216
005480  1c64              ADDS     r4,r4,#1              ;4213
005482  4408              ADD      r0,r0,r1              ;4213
                  |L1.21636|
005484  42ac              CMP      r4,r5                 ;4213
005486  d3f3              BCC      |L1.21616|
005488  e03a              B        |L1.21760|
                  |L1.21642|
00548a  7a50              LDRB     r0,[r2,#9]            ;4219
00548c  2810              CMP      r0,#0x10              ;4219
00548e  d137              BNE      |L1.21760|
005490  7a16              LDRB     r6,[r2,#8]            ;4224
005492  2e02              CMP      r6,#2                 ;4224
005494  d101              BNE      |L1.21658|
005496  2106              MOVS     r1,#6                 ;4225
005498  e005              B        |L1.21670|
                  |L1.21658|
00549a  7a16              LDRB     r6,[r2,#8]            ;4226
00549c  2e06              CMP      r6,#6                 ;4226
00549e  d101              BNE      |L1.21668|
0054a0  2108              MOVS     r1,#8                 ;4227
0054a2  e000              B        |L1.21670|
                  |L1.21668|
0054a4  e7df              B        |L1.21606|
                  |L1.21670|
0054a6  2400              MOVS     r4,#0                 ;4231
0054a8  4618              MOV      r0,r3                 ;4231
0054aa  e026              B        |L1.21754|
                  |L1.21676|
0054ac  f890a001          LDRB     r10,[r0,#1]           ;4233
0054b0  f890b000          LDRB     r11,[r0,#0]           ;4233
0054b4  ea4a280b          ORR      r8,r10,r11,LSL #8     ;4233
0054b8  f890a003          LDRB     r10,[r0,#3]           ;4234
0054bc  f890b002          LDRB     r11,[r0,#2]           ;4234
0054c0  ea4a260b          ORR      r6,r10,r11,LSL #8     ;4234
0054c4  f890a005          LDRB     r10,[r0,#5]           ;4235
0054c8  f890b004          LDRB     r11,[r0,#4]           ;4235
0054cc  ea4a290b          ORR      r9,r10,r11,LSL #8     ;4235
0054d0  eb080a06          ADD      r10,r8,r6             ;4236
0054d4  fa1ff78a          UXTH     r7,r10                ;4236
0054d8  eb090a06          ADD      r10,r9,r6             ;4237
0054dc  fa1ffc8a          UXTH     r12,r10               ;4237
0054e0  ea4f2a17          LSR      r10,r7,#8             ;4238
0054e4  f880a000          STRB     r10,[r0,#0]           ;4238
0054e8  7047              STRB     r7,[r0,#1]            ;4239
0054ea  ea4f2a1c          LSR      r10,r12,#8            ;4240
0054ee  f880a004          STRB     r10,[r0,#4]           ;4240
0054f2  f880c005          STRB     r12,[r0,#5]           ;4241
0054f6  1c64              ADDS     r4,r4,#1              ;4231
0054f8  4408              ADD      r0,r0,r1              ;4231
                  |L1.21754|
0054fa  42ac              CMP      r4,r5                 ;4231
0054fc  d3d6              BCC      |L1.21676|
0054fe  bf00              NOP                            ;4243
                  |L1.21760|
005500  bf00              NOP                            ;4244
                  |L1.21762|
005502  bf00              NOP      
005504  e7af              B        |L1.21606|
;;;4246   #endif /* PNG_MNG_FEATURES_SUPPORTED */
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  png_gamma_shift
                          DCD      0x00000010
                          DCD      0x00000021
                          DCD      0x00000042
                          DCD      0x00000084
                          DCD      0x00000110
                          DCD      0x00000248
                          DCD      0x00000550
                          DCD      0x00000ff0
                          DCD      0x00000000
