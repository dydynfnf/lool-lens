; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\pngerror.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\pngerror.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\FWlib\inc -I.\user -I.\CM3 -I.\MALLOC -I.\TFT -I.\EMWIN\EMWIN_INC -I.\EMWIN\DEMO -I.\PNG -I.\FATFS -I.\SDIO -I.\USB\inc -I.\USBCFG\inc -IE:\material\GUI\8.STM32·Ü¶·°å-emwin+fatfs+usb\RTE -Id:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.0.0 -Id:\Keil_v5\ARM\CMSIS\Include -Id:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.0.0\Device\Include -D__UVISION_VERSION=514 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\pngerror.crf PNG\pngerror.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  png_default_error PROC
;;;185    static void /* PRIVATE */
;;;186    png_default_error(png_structp png_ptr, png_const_charp error_message)
000000  b513              PUSH     {r0,r1,r4,lr}
;;;187    {
000002  4604              MOV      r4,r0
;;;188    #ifndef PNG_NO_CONSOLE_IO
;;;189    #ifdef PNG_ERROR_NUMBERS_SUPPORTED
;;;190       if (*error_message == '#')
;;;191       {
;;;192         int offset;
;;;193         char error_number[16];
;;;194         for (offset=0; offset<15; offset++)
;;;195         {
;;;196             error_number[offset] = *(error_message+offset+1);
;;;197             if (*(error_message+offset) == ' ')
;;;198                 break;
;;;199         }
;;;200         if((offset > 1) && (offset < 15))
;;;201         {
;;;202           error_number[offset-1]='\0';
;;;203           fprintf(stderr, "libpng error no. %s: %s\n", error_number,
;;;204              error_message+offset);
;;;205         }
;;;206         else
;;;207           fprintf(stderr, "libpng error: %s, offset=%d\n", error_message,offset);
;;;208       }
;;;209       else
;;;210    #endif
;;;211       fprintf(stderr, "libpng error: %s\n", error_message);
;;;212    #endif
;;;213    
;;;214    #ifdef PNG_SETJMP_SUPPORTED
;;;215       if (png_ptr)
000004  b11c              CBZ      r4,|L1.14|
;;;216       {
;;;217    #  ifdef USE_FAR_KEYWORD
;;;218       {
;;;219          jmp_buf jmpbuf;
;;;220          png_memcpy(jmpbuf,png_ptr->jmpbuf,png_sizeof(jmp_buf));
;;;221          longjmp(jmpbuf, 1);
;;;222       }
;;;223    #  else
;;;224       longjmp(png_ptr->jmpbuf, 1);
000006  2101              MOVS     r1,#1
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       longjmp
                  |L1.14|
;;;225    #  endif
;;;226       }
;;;227    #else
;;;228       PNG_ABORT();
;;;229    #endif
;;;230    #ifdef PNG_NO_CONSOLE_IO
;;;231       /* make compiler happy */ ;
;;;232       if (&error_message != NULL)
00000e  a801              ADD      r0,sp,#4
000010  b100              CBZ      r0,|L1.20|
                  |L1.18|
;;;233          return;
;;;234    #endif
;;;235    }
000012  bd1c              POP      {r2-r4,pc}
                  |L1.20|
000014  bf00              NOP      
000016  e7fc              B        |L1.18|
;;;236    
                          ENDP

                  png_error PROC
;;;32     void PNGAPI
;;;33     png_error(png_structp png_ptr, png_const_charp error_message)
000018  b57f              PUSH     {r0-r6,lr}
;;;34     {
00001a  4604              MOV      r4,r0
00001c  460d              MOV      r5,r1
;;;35     #ifdef PNG_ERROR_NUMBERS_SUPPORTED
;;;36        char msg[16];
;;;37        if (png_ptr != NULL)
00001e  2c00              CMP      r4,#0
000020  d034              BEQ      |L1.140|
;;;38        {
;;;39          if (png_ptr->flags&
000022  f8d401ac          LDR      r0,[r4,#0x1ac]
000026  f4002040          AND      r0,r0,#0xc0000
00002a  2800              CMP      r0,#0
00002c  d02e              BEQ      |L1.140|
;;;40            (PNG_FLAG_STRIP_ERROR_NUMBERS|PNG_FLAG_STRIP_ERROR_TEXT))
;;;41          {
;;;42            if (*error_message == '#')
00002e  7828              LDRB     r0,[r5,#0]
000030  2823              CMP      r0,#0x23
000032  d11f              BNE      |L1.116|
;;;43            {
;;;44                int offset;
;;;45                for (offset=1; offset<15; offset++)
000034  2001              MOVS     r0,#1
000036  e004              B        |L1.66|
                  |L1.56|
;;;46                   if (*(error_message+offset) == ' ')
000038  5c29              LDRB     r1,[r5,r0]
00003a  2920              CMP      r1,#0x20
00003c  d100              BNE      |L1.64|
;;;47                       break;
00003e  e002              B        |L1.70|
                  |L1.64|
000040  1c40              ADDS     r0,r0,#1              ;45
                  |L1.66|
000042  280f              CMP      r0,#0xf               ;45
000044  dbf8              BLT      |L1.56|
                  |L1.70|
000046  bf00              NOP      
;;;48                if (png_ptr->flags&PNG_FLAG_STRIP_ERROR_TEXT)
000048  f8d411ac          LDR      r1,[r4,#0x1ac]
00004c  f4012100          AND      r1,r1,#0x80000
000050  b171              CBZ      r1,|L1.112|
;;;49                {
;;;50                   int i;
;;;51                   for (i=0; i<offset-1; i++)
000052  2100              MOVS     r1,#0
000054  e004              B        |L1.96|
                  |L1.86|
;;;52                      msg[i]=error_message[i+1];
000056  1c4a              ADDS     r2,r1,#1
000058  5caa              LDRB     r2,[r5,r2]
00005a  f80d2001          STRB     r2,[sp,r1]
00005e  1c49              ADDS     r1,r1,#1              ;51
                  |L1.96|
000060  1e42              SUBS     r2,r0,#1              ;51
000062  428a              CMP      r2,r1                 ;51
000064  dcf7              BGT      |L1.86|
;;;53                   msg[i]='\0';
000066  2200              MOVS     r2,#0
000068  f80d2001          STRB     r2,[sp,r1]
;;;54                   error_message=msg;
00006c  466d              MOV      r5,sp
;;;55                }
00006e  e000              B        |L1.114|
                  |L1.112|
;;;56                else
;;;57                   error_message+=offset;
000070  4405              ADD      r5,r5,r0
                  |L1.114|
;;;58            }
000072  e00b              B        |L1.140|
                  |L1.116|
;;;59            else
;;;60            {
;;;61                if (png_ptr->flags&PNG_FLAG_STRIP_ERROR_TEXT)
000074  f8d401ac          LDR      r0,[r4,#0x1ac]
000078  f4002000          AND      r0,r0,#0x80000
00007c  b130              CBZ      r0,|L1.140|
;;;62                {
;;;63                   msg[0]='0';
00007e  2030              MOVS     r0,#0x30
000080  f88d0000          STRB     r0,[sp,#0]
;;;64                   msg[1]='\0';
000084  2000              MOVS     r0,#0
000086  f88d0001          STRB     r0,[sp,#1]
;;;65                   error_message=msg;
00008a  466d              MOV      r5,sp
                  |L1.140|
;;;66                }
;;;67            }
;;;68          }
;;;69        }
;;;70     #endif
;;;71        if (png_ptr != NULL && png_ptr->error_fn != NULL)
00008c  b13c              CBZ      r4,|L1.158|
00008e  f8d40180          LDR      r0,[r4,#0x180]
000092  b120              CBZ      r0,|L1.158|
;;;72           (*(png_ptr->error_fn))(png_ptr, error_message);
000094  4629              MOV      r1,r5
000096  4620              MOV      r0,r4
000098  f8d42180          LDR      r2,[r4,#0x180]
00009c  4790              BLX      r2
                  |L1.158|
;;;73     
;;;74        /* If the custom handler doesn't exist, or if it returns,
;;;75           use the default handler, which will not return. */
;;;76        png_default_error(png_ptr, error_message);
00009e  4629              MOV      r1,r5
0000a0  4620              MOV      r0,r4
0000a2  f7fffffe          BL       png_default_error
;;;77     }
0000a6  bd7f              POP      {r0-r6,pc}
;;;78     
                          ENDP

                  png_default_warning PROC
;;;242    static void /* PRIVATE */
;;;243    png_default_warning(png_structp png_ptr, png_const_charp warning_message)
0000a8  b101              CBZ      r1,|L1.172|
                  |L1.170|
;;;244    {
;;;245    #ifndef PNG_NO_CONSOLE_IO
;;;246    #  ifdef PNG_ERROR_NUMBERS_SUPPORTED
;;;247       if (*warning_message == '#')
;;;248       {
;;;249         int offset;
;;;250         char warning_number[16];
;;;251         for (offset=0; offset<15; offset++)
;;;252         {
;;;253            warning_number[offset]=*(warning_message+offset+1);
;;;254            if (*(warning_message+offset) == ' ')
;;;255                break;
;;;256         }
;;;257         if((offset > 1) && (offset < 15))
;;;258         {
;;;259           warning_number[offset-1]='\0';
;;;260           fprintf(stderr, "libpng warning no. %s: %s\n", warning_number,
;;;261              warning_message+offset);
;;;262         }
;;;263         else
;;;264           fprintf(stderr, "libpng warning: %s\n", warning_message);
;;;265       }
;;;266       else
;;;267    #  endif
;;;268         fprintf(stderr, "libpng warning: %s\n", warning_message);
;;;269    #else
;;;270       /* make compiler happy */ ;
;;;271       if (warning_message)
;;;272         return;
;;;273    #endif
;;;274       /* make compiler happy */ ;
;;;275       if (png_ptr)
;;;276          return;
;;;277    }
0000aa  4770              BX       lr
                  |L1.172|
0000ac  b100              CBZ      r0,|L1.176|
0000ae  e7fc              B        |L1.170|
                  |L1.176|
0000b0  bf00              NOP      
0000b2  e7fa              B        |L1.170|
;;;278    
                          ENDP

                  png_warning PROC
;;;84     void PNGAPI
;;;85     png_warning(png_structp png_ptr, png_const_charp warning_message)
0000b4  b570              PUSH     {r4-r6,lr}
;;;86     {
0000b6  4604              MOV      r4,r0
0000b8  460d              MOV      r5,r1
;;;87        int offset = 0;
0000ba  2600              MOVS     r6,#0
;;;88        if (png_ptr != NULL)
0000bc  b1dc              CBZ      r4,|L1.246|
;;;89        {
;;;90     #ifdef PNG_ERROR_NUMBERS_SUPPORTED
;;;91        if (png_ptr->flags&
0000be  f8d401ac          LDR      r0,[r4,#0x1ac]
0000c2  f4002040          AND      r0,r0,#0xc0000
0000c6  b160              CBZ      r0,|L1.226|
;;;92          (PNG_FLAG_STRIP_ERROR_NUMBERS|PNG_FLAG_STRIP_ERROR_TEXT))
;;;93     #endif
;;;94          {
;;;95            if (*warning_message == '#')
0000c8  7828              LDRB     r0,[r5,#0]
0000ca  2823              CMP      r0,#0x23
0000cc  d109              BNE      |L1.226|
;;;96            {
;;;97                for (offset=1; offset<15; offset++)
0000ce  2601              MOVS     r6,#1
0000d0  e004              B        |L1.220|
                  |L1.210|
;;;98                   if (*(warning_message+offset) == ' ')
0000d2  5da8              LDRB     r0,[r5,r6]
0000d4  2820              CMP      r0,#0x20
0000d6  d100              BNE      |L1.218|
;;;99                       break;
0000d8  e002              B        |L1.224|
                  |L1.218|
0000da  1c76              ADDS     r6,r6,#1              ;97
                  |L1.220|
0000dc  2e0f              CMP      r6,#0xf               ;97
0000de  dbf8              BLT      |L1.210|
                  |L1.224|
0000e0  bf00              NOP      
                  |L1.226|
;;;100           }
;;;101         }
;;;102         if (png_ptr != NULL && png_ptr->warning_fn != NULL)
0000e2  b164              CBZ      r4,|L1.254|
0000e4  f8d40184          LDR      r0,[r4,#0x184]
0000e8  b148              CBZ      r0,|L1.254|
;;;103            (*(png_ptr->warning_fn))(png_ptr, warning_message+offset);
0000ea  19a9              ADDS     r1,r5,r6
0000ec  4620              MOV      r0,r4
0000ee  f8d42184          LDR      r2,[r4,#0x184]
0000f2  4790              BLX      r2
0000f4  e003              B        |L1.254|
                  |L1.246|
;;;104       }
;;;105       else
;;;106          png_default_warning(png_ptr, warning_message+offset);
0000f6  19a9              ADDS     r1,r5,r6
0000f8  4620              MOV      r0,r4
0000fa  f7fffffe          BL       png_default_warning
                  |L1.254|
;;;107    }
0000fe  bd70              POP      {r4-r6,pc}
;;;108    
                          ENDP

                  png_format_buffer PROC
;;;121    static void /* PRIVATE */
;;;122    png_format_buffer(png_structp png_ptr, png_charp buffer, png_const_charp
000100  e92d41f0          PUSH     {r4-r8,lr}
;;;123       error_message)
;;;124    {
000104  4607              MOV      r7,r0
000106  460c              MOV      r4,r1
000108  4616              MOV      r6,r2
;;;125       int iout = 0, iin = 0;
00010a  2500              MOVS     r5,#0
00010c  46a8              MOV      r8,r5
;;;126    
;;;127       while (iin < 4)
00010e  e028              B        |L1.354|
                  |L1.272|
;;;128       {
;;;129          int c = png_ptr->chunk_name[iin++];
000110  4641              MOV      r1,r8
000112  f1080801          ADD      r8,r8,#1
000116  f5077217          ADD      r2,r7,#0x25c
00011a  5c50              LDRB     r0,[r2,r1]
;;;130          if (isnonalpha(c))
00011c  2841              CMP      r0,#0x41
00011e  db05              BLT      |L1.300|
000120  287a              CMP      r0,#0x7a
000122  dc03              BGT      |L1.300|
000124  285a              CMP      r0,#0x5a
000126  dd18              BLE      |L1.346|
000128  2861              CMP      r0,#0x61
00012a  da16              BGE      |L1.346|
                  |L1.300|
;;;131          {
;;;132             buffer[iout++] = '[';
00012c  235b              MOVS     r3,#0x5b
00012e  4629              MOV      r1,r5
000130  1c6d              ADDS     r5,r5,#1
000132  5463              STRB     r3,[r4,r1]
;;;133             buffer[iout++] = png_digit[(c & 0xf0) >> 4];
000134  493a              LDR      r1,|L1.544|
000136  f3c01203          UBFX     r2,r0,#4,#4
00013a  5c8b              LDRB     r3,[r1,r2]
00013c  4629              MOV      r1,r5
00013e  1c6d              ADDS     r5,r5,#1
000140  5463              STRB     r3,[r4,r1]
;;;134             buffer[iout++] = png_digit[c & 0x0f];
000142  f000010f          AND      r1,r0,#0xf
000146  4a36              LDR      r2,|L1.544|
000148  5c53              LDRB     r3,[r2,r1]
00014a  4629              MOV      r1,r5
00014c  1c6d              ADDS     r5,r5,#1
00014e  5463              STRB     r3,[r4,r1]
;;;135             buffer[iout++] = ']';
000150  235d              MOVS     r3,#0x5d
000152  4629              MOV      r1,r5
000154  1c6d              ADDS     r5,r5,#1
000156  5463              STRB     r3,[r4,r1]
000158  e002              B        |L1.352|
                  |L1.346|
;;;136          }
;;;137          else
;;;138          {
;;;139             buffer[iout++] = (png_byte)c;
00015a  4629              MOV      r1,r5
00015c  1c6d              ADDS     r5,r5,#1
00015e  5460              STRB     r0,[r4,r1]
                  |L1.352|
;;;140          }
;;;141       }
000160  bf00              NOP      
                  |L1.354|
000162  f1b80f04          CMP      r8,#4                 ;127
000166  dbd3              BLT      |L1.272|
;;;142    
;;;143       if (error_message == NULL)
000168  b916              CBNZ     r6,|L1.368|
;;;144          buffer[iout] = 0;
00016a  2000              MOVS     r0,#0
00016c  5560              STRB     r0,[r4,r5]
00016e  e010              B        |L1.402|
                  |L1.368|
;;;145       else
;;;146       {
;;;147          buffer[iout++] = ':';
000170  223a              MOVS     r2,#0x3a
000172  4628              MOV      r0,r5
000174  1c6d              ADDS     r5,r5,#1
000176  5422              STRB     r2,[r4,r0]
;;;148          buffer[iout++] = ' ';
000178  2220              MOVS     r2,#0x20
00017a  4628              MOV      r0,r5
00017c  1c6d              ADDS     r5,r5,#1
00017e  5422              STRB     r2,[r4,r0]
;;;149          png_strncpy(buffer+iout, error_message, 63);
000180  1960              ADDS     r0,r4,r5
000182  223f              MOVS     r2,#0x3f
000184  4631              MOV      r1,r6
000186  f7fffffe          BL       strncpy
;;;150          buffer[iout+63] = 0;
00018a  2100              MOVS     r1,#0
00018c  f105003f          ADD      r0,r5,#0x3f
000190  5421              STRB     r1,[r4,r0]
                  |L1.402|
;;;151       }
;;;152    }
000192  e8bd81f0          POP      {r4-r8,pc}
;;;153    
                          ENDP

                  png_chunk_error PROC
;;;154    void PNGAPI
;;;155    png_chunk_error(png_structp png_ptr, png_const_charp error_message)
000196  b530              PUSH     {r4,r5,lr}
;;;156    {
000198  b095              SUB      sp,sp,#0x54
00019a  4605              MOV      r5,r0
00019c  460c              MOV      r4,r1
;;;157       char msg[18+64];
;;;158       if (png_ptr == NULL)
00019e  b925              CBNZ     r5,|L1.426|
;;;159         png_error(png_ptr, error_message);
0001a0  4621              MOV      r1,r4
0001a2  4628              MOV      r0,r5
0001a4  f7fffffe          BL       png_error
0001a8  e008              B        |L1.444|
                  |L1.426|
;;;160       else
;;;161       {
;;;162         png_format_buffer(png_ptr, msg, error_message);
0001aa  4622              MOV      r2,r4
0001ac  4669              MOV      r1,sp
0001ae  4628              MOV      r0,r5
0001b0  f7fffffe          BL       png_format_buffer
;;;163         png_error(png_ptr, msg);
0001b4  4669              MOV      r1,sp
0001b6  4628              MOV      r0,r5
0001b8  f7fffffe          BL       png_error
                  |L1.444|
;;;164       }
;;;165    }
0001bc  b015              ADD      sp,sp,#0x54
0001be  bd30              POP      {r4,r5,pc}
;;;166    
                          ENDP

                  png_chunk_warning PROC
;;;167    void PNGAPI
;;;168    png_chunk_warning(png_structp png_ptr, png_const_charp warning_message)
0001c0  b530              PUSH     {r4,r5,lr}
;;;169    {
0001c2  b095              SUB      sp,sp,#0x54
0001c4  4605              MOV      r5,r0
0001c6  460c              MOV      r4,r1
;;;170       char msg[18+64];
;;;171       if (png_ptr == NULL)
0001c8  b925              CBNZ     r5,|L1.468|
;;;172         png_warning(png_ptr, warning_message);
0001ca  4621              MOV      r1,r4
0001cc  4628              MOV      r0,r5
0001ce  f7fffffe          BL       png_warning
0001d2  e008              B        |L1.486|
                  |L1.468|
;;;173       else
;;;174       {
;;;175         png_format_buffer(png_ptr, msg, warning_message);
0001d4  4622              MOV      r2,r4
0001d6  4669              MOV      r1,sp
0001d8  4628              MOV      r0,r5
0001da  f7fffffe          BL       png_format_buffer
;;;176         png_warning(png_ptr, msg);
0001de  4669              MOV      r1,sp
0001e0  4628              MOV      r0,r5
0001e2  f7fffffe          BL       png_warning
                  |L1.486|
;;;177       }
;;;178    }
0001e6  b015              ADD      sp,sp,#0x54
0001e8  bd30              POP      {r4,r5,pc}
;;;179    
                          ENDP

                  png_set_error_fn PROC
;;;284    void PNGAPI
;;;285    png_set_error_fn(png_structp png_ptr, png_voidp error_ptr,
0001ea  b900              CBNZ     r0,|L1.494|
                  |L1.492|
;;;286       png_error_ptr error_fn, png_error_ptr warning_fn)
;;;287    {
;;;288       if (png_ptr == NULL)
;;;289          return;
;;;290       png_ptr->error_ptr = error_ptr;
;;;291       png_ptr->error_fn = error_fn;
;;;292       png_ptr->warning_fn = warning_fn;
;;;293    }
0001ec  4770              BX       lr
                  |L1.494|
0001ee  f8c01188          STR      r1,[r0,#0x188]        ;290
0001f2  f8c02180          STR      r2,[r0,#0x180]        ;291
0001f6  f8c03184          STR      r3,[r0,#0x184]        ;292
0001fa  bf00              NOP      
0001fc  e7f6              B        |L1.492|
;;;294    
                          ENDP

                  png_get_error_ptr PROC
;;;300    png_voidp PNGAPI
;;;301    png_get_error_ptr(png_structp png_ptr)
0001fe  4601              MOV      r1,r0
;;;302    {
;;;303       if (png_ptr == NULL)
000200  b909              CBNZ     r1,|L1.518|
;;;304          return NULL;
000202  2000              MOVS     r0,#0
                  |L1.516|
;;;305       return ((png_voidp)png_ptr->error_ptr);
;;;306    }
000204  4770              BX       lr
                  |L1.518|
000206  f8d10188          LDR      r0,[r1,#0x188]        ;305
00020a  e7fb              B        |L1.516|
;;;307    
                          ENDP

                  png_set_strip_error_numbers PROC
;;;310    void PNGAPI
;;;311    png_set_strip_error_numbers(png_structp png_ptr, png_uint_32 strip_mode)
00020c  b130              CBZ      r0,|L1.540|
;;;312    {
;;;313       if(png_ptr != NULL)
;;;314       {
;;;315         png_ptr->flags &=
00020e  f4212340          BIC      r3,r1,#0xc0000
000212  f8d021ac          LDR      r2,[r0,#0x1ac]
000216  401a              ANDS     r2,r2,r3
000218  f8c021ac          STR      r2,[r0,#0x1ac]
                  |L1.540|
;;;316           ((~(PNG_FLAG_STRIP_ERROR_NUMBERS|PNG_FLAG_STRIP_ERROR_TEXT))&strip_mode);
;;;317       }
;;;318    }
00021c  4770              BX       lr
;;;319    #endif
                          ENDP

00021e  0000              DCW      0x0000
                  |L1.544|
                          DCD      png_digit

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  png_digit
000000  30313233          DCB      0x30,0x31,0x32,0x33
000004  34353637          DCB      0x34,0x35,0x36,0x37
000008  38394142          DCB      0x38,0x39,0x41,0x42
00000c  43444546          DCB      0x43,0x44,0x45,0x46
