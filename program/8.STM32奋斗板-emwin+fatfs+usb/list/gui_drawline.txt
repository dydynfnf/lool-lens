; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\gui_drawline.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\gui_drawline.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -I.\GUI\AntiAlias -I.\GUI\Config -I.\GUI\ConvertColor -I.\GUI\ConvertMono -I.\GUI\Core -I.\GUI\Font -I.\GUI\GUI_X -I.\GUI\JPEG -I.\GUI\LCDDriver -I.\GUI\MemDev -I.\GUI\MultiLayer -I.\GUI\Widget -I.\GUI\WM -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\INC\ST\STM32F10x -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\gui_drawline.crf GUI\Core\GUI_DrawLine.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _SwapInt PROC
;;;42     */
;;;43     static void _SwapInt(int* pa, int* pb) {
000000  6802              LDR      r2,[r0,#0]
;;;44       int t;
;;;45       t = *pa;
;;;46       *pa = *pb;
000002  680b              LDR      r3,[r1,#0]
000004  6003              STR      r3,[r0,#0]
;;;47       *pb = t;
000006  600a              STR      r2,[r1,#0]
;;;48     }
000008  4770              BX       lr
;;;49     
                          ENDP

                  Abs PROC
;;;53     */
;;;54     static int Abs(int v) {
00000a  4601              MOV      r1,r0
;;;55       return ABS(v);
00000c  2900              CMP      r1,#0
00000e  dd01              BLE      |L1.20|
000010  4608              MOV      r0,r1
                  |L1.18|
;;;56     }
000012  4770              BX       lr
                  |L1.20|
000014  4248              RSBS     r0,r1,#0              ;55
000016  e7fc              B        |L1.18|
;;;57     
                          ENDP

                  GUI_sin PROC
;;;105    */
;;;106    int GUI_sin(int angle) {
000018  b570              PUSH     {r4-r6,lr}
00001a  4601              MOV      r1,r0
;;;107      char IsNeg =0;
00001c  f04f0500          MOV      r5,#0
;;;108      int i;
;;;109    	U16 Faktor;
;;;110      U32 t;
;;;111      angle &= ((1<<12)-1);  /* reduce to 0-360 degrees */
000020  f3c1010b          UBFX     r1,r1,#0,#12
;;;112      if (angle> 2* GUI_90DEG) {
000024  f5b16f00          CMP      r1,#0x800
000028  dd03              BLE      |L1.50|
;;;113        angle -= 2* GUI_90DEG;
00002a  f5a16100          SUB      r1,r1,#0x800
;;;114        IsNeg =1;
00002e  f04f0501          MOV      r5,#1
                  |L1.50|
;;;115      }
;;;116      if (angle> GUI_90DEG) {  /* between 90-180 */
000032  f5b16f80          CMP      r1,#0x400
000036  dd01              BLE      |L1.60|
;;;117        angle = 2*GUI_90DEG-angle;   /* use sine symetry */
000038  f5c16100          RSB      r1,r1,#0x800
                  |L1.60|
;;;118      }
;;;119      /* Now angle is reduced to 0° <= <= 90° */
;;;120      i = angle>>6;
00003c  ea4f14a1          ASR      r4,r1,#6
;;;121      {
;;;122        Faktor = (U16)((1<<6)-(angle&((1<<6)-1)));
000040  f001003f          AND      r0,r1,#0x3f
000044  f1c00240          RSB      r2,r0,#0x40
;;;123        t = aSin[i]*(U32)Faktor;
000048  48fc              LDR      r0,|L1.1084|
00004a  f8300014          LDRH     r0,[r0,r4,LSL #1]
00004e  fb00f302          MUL      r3,r0,r2
;;;124        if (Faktor !=(1<<6)) {
000052  2a40              CMP      r2,#0x40
000054  d008              BEQ      |L1.104|
;;;125          t += aSin[i+1]*((1<<6)-Faktor);
000056  4ef9              LDR      r6,|L1.1084|
000058  f1040001          ADD      r0,r4,#1
00005c  f8360010          LDRH     r0,[r6,r0,LSL #1]
000060  f1c20640          RSB      r6,r2,#0x40
000064  fb003306          MLA      r3,r0,r6,r3
                  |L1.104|
;;;126        }
;;;127    	}
;;;128      t = (t+(1<<5)) >>6;   /* divide,incl. rounding */
000068  f1030020          ADD      r0,r3,#0x20
00006c  ea4f1390          LSR      r3,r0,#6
;;;129      return (IsNeg) ? 0-t : t;
000070  b10d              CBZ      r5,|L1.118|
000072  4258              RSBS     r0,r3,#0
                  |L1.116|
;;;130    }
000074  bd70              POP      {r4-r6,pc}
                  |L1.118|
000076  4618              MOV      r0,r3                 ;129
000078  e7fc              B        |L1.116|
;;;131    
                          ENDP

                  GUI_cos PROC
;;;135    */
;;;136    int GUI_cos(int angle) {
00007a  b510              PUSH     {r4,lr}
00007c  4604              MOV      r4,r0
;;;137      return GUI_sin(angle+GUI_90DEG);
00007e  f5046080          ADD      r0,r4,#0x400
000082  f7fffffe          BL       GUI_sin
;;;138    }
000086  bd10              POP      {r4,pc}
;;;139    
                          ENDP

                  _atan0_45 PROC
;;;171    */
;;;172    static int _atan0_45(int q) {
000088  b530              PUSH     {r4,r5,lr}
00008a  4601              MOV      r1,r0
;;;173      int r;
;;;174      int i, Faktor;
;;;175      /* Now angle is reduced to 0° <= <= 90° ==>  0 <= <= 256*/
;;;176      q >>=2;    /* make sure we do not exceed 16 bits in calculations */
00008c  ea4f01a1          ASR      r1,r1,#2
;;;177      i = q>>4;
000090  ea4f1321          ASR      r3,r1,#4
;;;178      Faktor = (1<<4)-(q&((1<<4)-1));
000094  f001040f          AND      r4,r1,#0xf
000098  f1c40210          RSB      r2,r4,#0x10
;;;179      r = aTan[i]*Faktor;
00009c  4ce8              LDR      r4,|L1.1088|
00009e  f9344013          LDRSH    r4,[r4,r3,LSL #1]
0000a2  fb04f002          MUL      r0,r4,r2
;;;180      if (Faktor !=(1<<4)) {
0000a6  2a10              CMP      r2,#0x10
0000a8  d008              BEQ      |L1.188|
;;;181        r += aTan[i+1]*((1<<4)-Faktor);
0000aa  4de5              LDR      r5,|L1.1088|
0000ac  f1030401          ADD      r4,r3,#1
0000b0  f9354014          LDRSH    r4,[r5,r4,LSL #1]
0000b4  f1c20510          RSB      r5,r2,#0x10
0000b8  fb040005          MLA      r0,r4,r5,r0
                  |L1.188|
;;;182      }
;;;183      r = (r+(1<<3))/(1<<4);   /* divide  incl. rounding */
0000bc  f1000408          ADD      r4,r0,#8
0000c0  ea4f75e4          ASR      r5,r4,#31
0000c4  eb047515          ADD      r5,r4,r5,LSR #28
0000c8  ea4f1025          ASR      r0,r5,#4
;;;184      return r;
;;;185    }
0000cc  bd30              POP      {r4,r5,pc}
;;;186    
                          ENDP

                  _atan2 PROC
;;;190    */
;;;191    static int _atan2(I32 x, I32 y) {
0000ce  e92d41f0          PUSH     {r4-r8,lr}
0000d2  4605              MOV      r5,r0
0000d4  460c              MOV      r4,r1
;;;192      U8 q =0;
0000d6  f04f0600          MOV      r6,#0
;;;193      int angle;
;;;194    /* first make sure we are in angle between 0 and 45° */
;;;195      if (x<0) {
0000da  2d00              CMP      r5,#0
0000dc  da03              BGE      |L1.230|
;;;196        q=1;
0000de  f04f0601          MOV      r6,#1
;;;197        x=-x;
0000e2  f1c50500          RSB      r5,r5,#0
                  |L1.230|
;;;198      }
;;;199      if (y<0) {
0000e6  2c00              CMP      r4,#0
0000e8  da03              BGE      |L1.242|
;;;200        q |= (1<<1);
0000ea  f0460602          ORR      r6,r6,#2
;;;201        y=-y;
0000ee  f1c40400          RSB      r4,r4,#0
                  |L1.242|
;;;202      }
;;;203      if (y>x) {
0000f2  42ac              CMP      r4,r5
0000f4  dd05              BLE      |L1.258|
;;;204        int t = y;
0000f6  4620              MOV      r0,r4
;;;205        y=x;
0000f8  462c              MOV      r4,r5
;;;206        x=t;
0000fa  4605              MOV      r5,r0
;;;207        q |= (1<<2);
0000fc  f0460604          ORR      r6,r6,#4
;;;208      }
000100  bf00              NOP      
                  |L1.258|
;;;209      y <<=10;
000102  ea4f2484          LSL      r4,r4,#10
;;;210      y += (x/2);
000106  4628              MOV      r0,r5
000108  eb0571d0          ADD      r1,r5,r0,LSR #31
00010c  eb040461          ADD      r4,r4,r1,ASR #1
;;;211      y /= x;
000110  fb94f4f5          SDIV     r4,r4,r5
;;;212      angle = _atan0_45(y);
000114  4620              MOV      r0,r4
000116  f7fffffe          BL       _atan0_45
00011a  4607              MOV      r7,r0
;;;213      if (q&(1<<2)) { /* y/x reverse ? */
00011c  f0160f04          TST      r6,#4
000120  d001              BEQ      |L1.294|
;;;214        angle = GUI_90DEG-angle;
000122  f5c76780          RSB      r7,r7,#0x400
                  |L1.294|
;;;215      }
;;;216      if (q&1) {  /* xreverse ? */
000126  f0160f01          TST      r6,#1
00012a  d001              BEQ      |L1.304|
;;;217        angle = GUI_180DEG-angle;
00012c  f5c76700          RSB      r7,r7,#0x800
                  |L1.304|
;;;218      }
;;;219      if (q&(1<<1)) { /* y-reverse ? */
000130  f0160f02          TST      r6,#2
000134  d001              BEQ      |L1.314|
;;;220        angle = GUI_360DEG-angle;
000136  f5c75780          RSB      r7,r7,#0x1000
                  |L1.314|
;;;221      }
;;;222      return angle;
00013a  4638              MOV      r0,r7
;;;223    }
00013c  e8bd81f0          POP      {r4-r8,pc}
;;;224    
                          ENDP

                  _SetLineColor PROC
;;;228    */
;;;229    static int _SetLineColor(int i) {
000140  4601              MOV      r1,r0
;;;230      switch (GUI_Context.LineStyle) {
000142  48c0              LDR      r0,|L1.1092|
000144  7e80              LDRB     r0,[r0,#0x1a]  ; GUI_Context
000146  2801              CMP      r0,#1
000148  d006              BEQ      |L1.344|
00014a  2802              CMP      r0,#2
00014c  d014              BEQ      |L1.376|
00014e  2803              CMP      r0,#3
000150  d021              BEQ      |L1.406|
000152  2804              CMP      r0,#4
000154  d149              BNE      |L1.490|
000156  e030              B        |L1.442|
                  |L1.344|
;;;231      case GUI_LS_DASH:
;;;232        i = (i + 6) % 16;
000158  f1010006          ADD      r0,r1,#6
00015c  ea4f72e0          ASR      r2,r0,#31
000160  eb007212          ADD      r2,r0,r2,LSR #28
000164  ea4f1222          ASR      r2,r2,#4
000168  eba01102          SUB      r1,r0,r2,LSL #4
;;;233        return (i < 12);
00016c  290c              CMP      r1,#0xc
00016e  da01              BGE      |L1.372|
000170  2001              MOVS     r0,#1
                  |L1.370|
;;;234      case GUI_LS_DOT:
;;;235        i %= 4;
;;;236        return (i < 2);
;;;237      case GUI_LS_DASHDOT:
;;;238        i %= 20;
;;;239        if (i < 12) {
;;;240          return 1;
;;;241        } else if ((i >= 16) && (i < 18)) {
;;;242          return 1;
;;;243        }
;;;244        return 0;
;;;245      case GUI_LS_DASHDOTDOT:
;;;246        i %= 24;
;;;247        if (i < 12) {
;;;248          return 1;
;;;249        } else if ((i >= 16) && (i < 18)) {
;;;250          return 1;
;;;251        } else if ((i >= 20) && (i < 22)) {
;;;252          return 1;
;;;253        } else {
;;;254          return 0;
;;;255        }
;;;256      }
;;;257      return 0;
;;;258    }
000172  4770              BX       lr
                  |L1.372|
000174  2000              MOVS     r0,#0                 ;233
000176  e7fc              B        |L1.370|
                  |L1.376|
000178  4608              MOV      r0,r1                 ;235
00017a  ea4f72e1          ASR      r2,r1,#31             ;235
00017e  eb017292          ADD      r2,r1,r2,LSR #30      ;235
000182  ea4f02a2          ASR      r2,r2,#2              ;235
000186  eba10182          SUB      r1,r1,r2,LSL #2       ;235
00018a  2902              CMP      r1,#2                 ;236
00018c  da01              BGE      |L1.402|
00018e  2001              MOVS     r0,#1                 ;236
000190  e7ef              B        |L1.370|
                  |L1.402|
000192  2000              MOVS     r0,#0                 ;236
000194  e7ed              B        |L1.370|
                  |L1.406|
000196  f04f0014          MOV      r0,#0x14              ;238
00019a  fb91f2f0          SDIV     r2,r1,r0              ;238
00019e  fb001112          MLS      r1,r0,r2,r1           ;238
0001a2  290c              CMP      r1,#0xc               ;239
0001a4  da01              BGE      |L1.426|
0001a6  2001              MOVS     r0,#1                 ;240
0001a8  e7e3              B        |L1.370|
                  |L1.426|
0001aa  2910              CMP      r1,#0x10              ;241
0001ac  db03              BLT      |L1.438|
0001ae  2912              CMP      r1,#0x12              ;241
0001b0  da01              BGE      |L1.438|
0001b2  2001              MOVS     r0,#1                 ;242
0001b4  e7dd              B        |L1.370|
                  |L1.438|
0001b6  2000              MOVS     r0,#0                 ;244
0001b8  e7db              B        |L1.370|
                  |L1.442|
0001ba  f04f0018          MOV      r0,#0x18              ;246
0001be  fb91f2f0          SDIV     r2,r1,r0              ;246
0001c2  fb001112          MLS      r1,r0,r2,r1           ;246
0001c6  290c              CMP      r1,#0xc               ;247
0001c8  da01              BGE      |L1.462|
0001ca  2001              MOVS     r0,#1                 ;248
0001cc  e7d1              B        |L1.370|
                  |L1.462|
0001ce  2910              CMP      r1,#0x10              ;249
0001d0  db03              BLT      |L1.474|
0001d2  2912              CMP      r1,#0x12              ;249
0001d4  da01              BGE      |L1.474|
0001d6  2001              MOVS     r0,#1                 ;250
0001d8  e7cb              B        |L1.370|
                  |L1.474|
0001da  2914              CMP      r1,#0x14              ;251
0001dc  db03              BLT      |L1.486|
0001de  2916              CMP      r1,#0x16              ;251
0001e0  da01              BGE      |L1.486|
0001e2  2001              MOVS     r0,#1                 ;252
0001e4  e7c5              B        |L1.370|
                  |L1.486|
0001e6  2000              MOVS     r0,#0                 ;254
0001e8  e7c3              B        |L1.370|
                  |L1.490|
0001ea  2000              MOVS     r0,#0                 ;257
0001ec  e7c1              B        |L1.370|
;;;259    
                          ENDP

                  _CalcOrto PROC
;;;263    */
;;;264    static void _CalcOrto(int xDiff, int yDiff, I32 r, int*px, int*py) {
0001ee  e92d5ff0          PUSH     {r4-r12,lr}
0001f2  4681              MOV      r9,r0
0001f4  468a              MOV      r10,r1
0001f6  4616              MOV      r6,r2
0001f8  461f              MOV      r7,r3
0001fa  f8ddb028          LDR      r11,[sp,#0x28]
;;;265      I32 x,y;
;;;266      int Angle = _atan2(xDiff, yDiff);
0001fe  4651              MOV      r1,r10
000200  4648              MOV      r0,r9
000202  f7fffffe          BL       _atan2
000206  4680              MOV      r8,r0
;;;267      Angle+= GUI_90DEG;
000208  f5086880          ADD      r8,r8,#0x400
;;;268      x = ( r*(I32)GUI_cos(Angle));
00020c  4640              MOV      r0,r8
00020e  f7fffffe          BL       GUI_cos
000212  fb00f406          MUL      r4,r0,r6
;;;269      y = ( r*(I32)GUI_sin(Angle));
000216  4640              MOV      r0,r8
000218  f7fffffe          BL       GUI_sin
00021c  fb00f506          MUL      r5,r0,r6
;;;270      x = (x<0) ? -((-x+512)>>10) : ((x+512)>>10);
000220  2c00              CMP      r4,#0
000222  da06              BGE      |L1.562|
000224  f5c47000          RSB      r0,r4,#0x200
000228  ea4f20a0          ASR      r0,r0,#10
00022c  f1c00000          RSB      r0,r0,#0
000230  e003              B        |L1.570|
                  |L1.562|
000232  f5047000          ADD      r0,r4,#0x200
000236  ea4f20a0          ASR      r0,r0,#10
                  |L1.570|
00023a  4604              MOV      r4,r0
;;;271      y = (y<0) ? -((-y+512)>>10) : ((y+512)>>10);
00023c  2d00              CMP      r5,#0
00023e  da06              BGE      |L1.590|
000240  f5c57000          RSB      r0,r5,#0x200
000244  ea4f20a0          ASR      r0,r0,#10
000248  f1c00000          RSB      r0,r0,#0
00024c  e003              B        |L1.598|
                  |L1.590|
00024e  f5057000          ADD      r0,r5,#0x200
000252  ea4f20a0          ASR      r0,r0,#10
                  |L1.598|
000256  4605              MOV      r5,r0
;;;272      *px = x;
000258  603c              STR      r4,[r7,#0]
;;;273      *py = y;
00025a  f8cb5000          STR      r5,[r11,#0]
;;;274    }
00025e  e8bd9ff0          POP      {r4-r12,pc}
;;;275    
                          ENDP

                  _DrawLineEnd PROC
;;;279    */
;;;280    static void _DrawLineEnd(int x0, int y0) {
000262  b570              PUSH     {r4-r6,lr}
000264  4604              MOV      r4,r0
000266  460d              MOV      r5,r1
;;;281      switch (GUI_Context.PenShape) {
000268  4876              LDR      r0,|L1.1092|
00026a  7e40              LDRB     r0,[r0,#0x19]  ; GUI_Context
00026c  b110              CBZ      r0,|L1.628|
00026e  2801              CMP      r0,#1
000270  d106              BNE      |L1.640|
000272  e004              B        |L1.638|
                  |L1.628|
;;;282      case GUI_PS_ROUND:
;;;283        GL_DrawPoint(x0,y0);
000274  4629              MOV      r1,r5
000276  4620              MOV      r0,r4
000278  f7fffffe          BL       GL_DrawPoint
;;;284        break;
00027c  e000              B        |L1.640|
                  |L1.638|
;;;285      case GUI_PS_FLAT:
;;;286        break;
00027e  bf00              NOP      
                  |L1.640|
000280  bf00              NOP                            ;284
;;;287      }
;;;288    }
000282  bd70              POP      {r4-r6,pc}
;;;289    
                          ENDP

                  GL_DrawLine1Ex PROC
;;;299    */
;;;300    void GL_DrawLine1Ex(int x0, int y0, int x1, int y1, unsigned * pPixelCnt) {
000284  e92d4fff          PUSH     {r0-r11,lr}
000288  b083              SUB      sp,sp,#0xc
00028a  9d10              LDR      r5,[sp,#0x40]
;;;301      int xdiff = x1 - x0;
00028c  9903              LDR      r1,[sp,#0xc]
00028e  9805              LDR      r0,[sp,#0x14]
000290  eba00001          SUB      r0,r0,r1
000294  9002              STR      r0,[sp,#8]
;;;302      int ydiff = y1 - y0;
000296  9904              LDR      r1,[sp,#0x10]
000298  9806              LDR      r0,[sp,#0x18]
00029a  eba00001          SUB      r0,r0,r1
00029e  9001              STR      r0,[sp,#4]
;;;303      int xdiffby2;
;;;304      int i;
;;;305      char XYSwapped = 0;
0002a0  f04f0a00          MOV      r10,#0
;;;306      int Dir;
;;;307      int PixelCnt = * pPixelCnt;
0002a4  f8d58000          LDR      r8,[r5,#0]
;;;308    /* check if no line */
;;;309      if (!(xdiff | ydiff)) {
0002a8  e9dd1001          LDRD     r1,r0,[sp,#4]
0002ac  4308              ORRS     r0,r0,r1
0002ae  d106              BNE      |L1.702|
;;;310        GL_DrawPoint(x0, y0);
0002b0  e9dd0103          LDRD     r0,r1,[sp,#0xc]
0002b4  f7fffffe          BL       GL_DrawPoint
                  |L1.696|
;;;311        return;
;;;312      }
;;;313    /* check if we swap x and y for calculation */
;;;314      if (Abs(xdiff) < Abs(ydiff)) {
;;;315        _SwapInt(&xdiff, &ydiff);
;;;316        _SwapInt(&x0, &y0);
;;;317        _SwapInt(&x1, &y1);
;;;318        XYSwapped = 1;
;;;319      }
;;;320    /* make sure line direction is positive */
;;;321      if (xdiff != Abs(xdiff)) {
;;;322        xdiff = -xdiff;
;;;323        ydiff = -ydiff;
;;;324        _SwapInt(&x0, &x1);
;;;325        _SwapInt(&y0, &y1);
;;;326        Dir = -1;
;;;327      } else {
;;;328        Dir = 1;
;;;329      }
;;;330    /* Draw horizontal or vertical line if possible */
;;;331      if (ydiff == 0) {
;;;332        if (XYSwapped) {
;;;333          if (GUI_Context.LineStyle == GUI_LS_SOLID) {
;;;334            LCD_DrawVLine(y0, x0, x1);
;;;335          } else {
;;;336            for (i = 0; i <= xdiff; i++) {
;;;337              if (!_SetLineColor(PixelCnt++)) {
;;;338                LCD_HL_DrawPixel(y0, x0 + i);
;;;339              }
;;;340            }
;;;341            *pPixelCnt = PixelCnt - 1;
;;;342          }
;;;343        } else {
;;;344          if (GUI_Context.LineStyle == GUI_LS_SOLID) {
;;;345            LCD_HL_DrawHLine(x0, y0, x1);
;;;346          } else {
;;;347            for (i = 0; i <= xdiff; i++) {
;;;348              if (!_SetLineColor(PixelCnt++)) {
;;;349                LCD_HL_DrawPixel(x0 + i, y0);
;;;350              }
;;;351            }
;;;352            *pPixelCnt = PixelCnt - 1;
;;;353          }
;;;354        }
;;;355        return;
;;;356      }
;;;357      xdiffby2 = xdiff / 2;
;;;358      if (ydiff < 0) {
;;;359        xdiffby2 = -xdiffby2;
;;;360      }
;;;361    /* Draw pixel by pixel solid*/
;;;362      if (GUI_Context.LineStyle == GUI_LS_SOLID) {
;;;363        for (i = 0; i <= xdiff; i++) {
;;;364          I32 l = ((I32)ydiff) * i + xdiffby2;
;;;365          int y = (ABS(l) < 32767) ? (y0 + ((int)l) / xdiff) : (y0 + l / xdiff);
;;;366          if (!XYSwapped) {
;;;367            LCD_HL_DrawPixel(x0+ i , y);
;;;368          } else {
;;;369            LCD_HL_DrawPixel(y, x0 + i);
;;;370          }
;;;371        }
;;;372    /* Draw pixel by pixel with fill style */
;;;373      } else {
;;;374        if (Dir < 0) {
;;;375          *pPixelCnt += xdiff;
;;;376        }
;;;377        for (i = 0; i <= xdiff; i++) {
;;;378          long l = ((long)ydiff) * i + xdiffby2;
;;;379          int y = (ABS(l) < 32767) ? (y0 + ((int)l) / xdiff) : (y0 + l / xdiff);
;;;380          if (!_SetLineColor((*pPixelCnt) += Dir)) {
;;;381            if (!XYSwapped) {
;;;382              LCD_HL_DrawPixel(x0 + i, y);
;;;383            } else {
;;;384              LCD_HL_DrawPixel(y, x0 + i);
;;;385            }
;;;386          }
;;;387        }
;;;388        if (Dir < 0) {
;;;389          *pPixelCnt += xdiff;
;;;390        }
;;;391        *pPixelCnt -= Dir;
;;;392      }
;;;393    }
0002b8  b007              ADD      sp,sp,#0x1c
0002ba  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.702|
0002be  9802              LDR      r0,[sp,#8]            ;314
0002c0  f7fffffe          BL       Abs
0002c4  4681              MOV      r9,r0                 ;314
0002c6  9801              LDR      r0,[sp,#4]            ;314
0002c8  f7fffffe          BL       Abs
0002cc  4581              CMP      r9,r0                 ;314
0002ce  da0d              BGE      |L1.748|
0002d0  a901              ADD      r1,sp,#4              ;315
0002d2  a802              ADD      r0,sp,#8              ;315
0002d4  f7fffffe          BL       _SwapInt
0002d8  a904              ADD      r1,sp,#0x10           ;316
0002da  a803              ADD      r0,sp,#0xc            ;316
0002dc  f7fffffe          BL       _SwapInt
0002e0  a906              ADD      r1,sp,#0x18           ;317
0002e2  a805              ADD      r0,sp,#0x14           ;317
0002e4  f7fffffe          BL       _SwapInt
0002e8  f04f0a01          MOV      r10,#1                ;318
                  |L1.748|
0002ec  9802              LDR      r0,[sp,#8]            ;321
0002ee  f7fffffe          BL       Abs
0002f2  9902              LDR      r1,[sp,#8]            ;321
0002f4  4288              CMP      r0,r1                 ;321
0002f6  d012              BEQ      |L1.798|
0002f8  9802              LDR      r0,[sp,#8]            ;322
0002fa  f1c00000          RSB      r0,r0,#0              ;322
0002fe  9002              STR      r0,[sp,#8]            ;322
000300  9801              LDR      r0,[sp,#4]            ;323
000302  f1c00000          RSB      r0,r0,#0              ;323
000306  9001              STR      r0,[sp,#4]            ;323
000308  a905              ADD      r1,sp,#0x14           ;324
00030a  a803              ADD      r0,sp,#0xc            ;324
00030c  f7fffffe          BL       _SwapInt
000310  a906              ADD      r1,sp,#0x18           ;325
000312  a804              ADD      r0,sp,#0x10           ;325
000314  f7fffffe          BL       _SwapInt
000318  f04f36ff          MOV      r6,#0xffffffff        ;326
00031c  e001              B        |L1.802|
                  |L1.798|
00031e  f04f0601          MOV      r6,#1                 ;328
                  |L1.802|
000322  9801              LDR      r0,[sp,#4]            ;331
000324  2800              CMP      r0,#0                 ;331
000326  d147              BNE      |L1.952|
000328  f1ba0f00          CMP      r10,#0                ;332
00032c  d021              BEQ      |L1.882|
00032e  4845              LDR      r0,|L1.1092|
000330  7e80              LDRB     r0,[r0,#0x1a]         ;333  ; GUI_Context
000332  b928              CBNZ     r0,|L1.832|
000334  e9dd0204          LDRD     r0,r2,[sp,#0x10]      ;334
000338  9903              LDR      r1,[sp,#0xc]          ;334
00033a  f7fffffe          BL       LCD_DrawVLine
00033e  e03a              B        |L1.950|
                  |L1.832|
000340  f04f0400          MOV      r4,#0                 ;336
000344  e00e              B        |L1.868|
                  |L1.838|
000346  4640              MOV      r0,r8                 ;337
000348  f1080801          ADD      r8,r8,#1              ;337
00034c  f7fffffe          BL       _SetLineColor
000350  b930              CBNZ     r0,|L1.864|
000352  9803              LDR      r0,[sp,#0xc]          ;338
000354  1901              ADDS     r1,r0,r4              ;338
000356  483b              LDR      r0,|L1.1092|
000358  6d80              LDR      r0,[r0,#0x58]         ;338  ; GUI_Context
00035a  6842              LDR      r2,[r0,#4]            ;338
00035c  9804              LDR      r0,[sp,#0x10]         ;338
00035e  4790              BLX      r2                    ;338
                  |L1.864|
000360  f1040401          ADD      r4,r4,#1              ;336
                  |L1.868|
000364  9802              LDR      r0,[sp,#8]            ;336
000366  4284              CMP      r4,r0                 ;336
000368  dded              BLE      |L1.838|
00036a  f1a80001          SUB      r0,r8,#1              ;341
00036e  6028              STR      r0,[r5,#0]            ;341
000370  e021              B        |L1.950|
                  |L1.882|
000372  4834              LDR      r0,|L1.1092|
000374  7e80              LDRB     r0,[r0,#0x1a]         ;344  ; GUI_Context
000376  b930              CBNZ     r0,|L1.902|
000378  4832              LDR      r0,|L1.1092|
00037a  6d80              LDR      r0,[r0,#0x58]         ;345  ; GUI_Context
00037c  6803              LDR      r3,[r0,#0]            ;345
00037e  a803              ADD      r0,sp,#0xc            ;345
000380  c807              LDM      r0,{r0-r2}            ;345
000382  4798              BLX      r3                    ;345
000384  e017              B        |L1.950|
                  |L1.902|
000386  f04f0400          MOV      r4,#0                 ;347
00038a  e00e              B        |L1.938|
                  |L1.908|
00038c  4640              MOV      r0,r8                 ;348
00038e  f1080801          ADD      r8,r8,#1              ;348
000392  f7fffffe          BL       _SetLineColor
000396  b930              CBNZ     r0,|L1.934|
000398  9903              LDR      r1,[sp,#0xc]          ;349
00039a  1908              ADDS     r0,r1,r4              ;349
00039c  4929              LDR      r1,|L1.1092|
00039e  6d89              LDR      r1,[r1,#0x58]         ;349  ; GUI_Context
0003a0  684a              LDR      r2,[r1,#4]            ;349
0003a2  9904              LDR      r1,[sp,#0x10]         ;349
0003a4  4790              BLX      r2                    ;349
                  |L1.934|
0003a6  f1040401          ADD      r4,r4,#1              ;347
                  |L1.938|
0003aa  9802              LDR      r0,[sp,#8]            ;347
0003ac  4284              CMP      r4,r0                 ;347
0003ae  dded              BLE      |L1.908|
0003b0  f1a80001          SUB      r0,r8,#1              ;352
0003b4  6028              STR      r0,[r5,#0]            ;352
                  |L1.950|
0003b6  e77f              B        |L1.696|
                  |L1.952|
0003b8  9802              LDR      r0,[sp,#8]            ;357
0003ba  eb0071d0          ADD      r1,r0,r0,LSR #31      ;357
0003be  ea4f0761          ASR      r7,r1,#1              ;357
0003c2  9801              LDR      r0,[sp,#4]            ;358
0003c4  2800              CMP      r0,#0                 ;358
0003c6  da01              BGE      |L1.972|
0003c8  f1c70700          RSB      r7,r7,#0              ;359
                  |L1.972|
0003cc  481d              LDR      r0,|L1.1092|
0003ce  7e80              LDRB     r0,[r0,#0x1a]         ;362  ; GUI_Context
0003d0  bbd0              CBNZ     r0,|L1.1096|
0003d2  f04f0400          MOV      r4,#0                 ;363
0003d6  e02d              B        |L1.1076|
                  |L1.984|
0003d8  9801              LDR      r0,[sp,#4]            ;364
0003da  fb007904          MLA      r9,r0,r4,r7           ;364
0003de  f1b90f00          CMP      r9,#0                 ;365
0003e2  dd01              BLE      |L1.1000|
0003e4  4648              MOV      r0,r9                 ;365
0003e6  e001              B        |L1.1004|
                  |L1.1000|
0003e8  f1c90000          RSB      r0,r9,#0              ;365
                  |L1.1004|
0003ec  f64771ff          MOV      r1,#0x7fff            ;365
0003f0  4288              CMP      r0,r1                 ;365
0003f2  da05              BGE      |L1.1024|
0003f4  9802              LDR      r0,[sp,#8]            ;365
0003f6  fb99f0f0          SDIV     r0,r9,r0              ;365
0003fa  9904              LDR      r1,[sp,#0x10]         ;365
0003fc  4408              ADD      r0,r0,r1              ;365
0003fe  e004              B        |L1.1034|
                  |L1.1024|
000400  9802              LDR      r0,[sp,#8]            ;365
000402  fb99f0f0          SDIV     r0,r9,r0              ;365
000406  9904              LDR      r1,[sp,#0x10]         ;365
000408  4408              ADD      r0,r0,r1              ;365
                  |L1.1034|
00040a  4683              MOV      r11,r0                ;365
00040c  f1ba0f00          CMP      r10,#0                ;366
000410  d107              BNE      |L1.1058|
000412  9903              LDR      r1,[sp,#0xc]          ;367
000414  1908              ADDS     r0,r1,r4              ;367
000416  490b              LDR      r1,|L1.1092|
000418  6d89              LDR      r1,[r1,#0x58]         ;367  ; GUI_Context
00041a  684a              LDR      r2,[r1,#4]            ;367
00041c  4659              MOV      r1,r11                ;367
00041e  4790              BLX      r2                    ;367
000420  e006              B        |L1.1072|
                  |L1.1058|
000422  9803              LDR      r0,[sp,#0xc]          ;369
000424  1901              ADDS     r1,r0,r4              ;369
000426  4807              LDR      r0,|L1.1092|
000428  6d80              LDR      r0,[r0,#0x58]         ;369  ; GUI_Context
00042a  6842              LDR      r2,[r0,#4]            ;369
00042c  4658              MOV      r0,r11                ;369
00042e  4790              BLX      r2                    ;369
                  |L1.1072|
000430  f1040401          ADD      r4,r4,#1              ;363
                  |L1.1076|
000434  9802              LDR      r0,[sp,#8]            ;363
000436  4284              CMP      r4,r0                 ;363
000438  ddce              BLE      |L1.984|
00043a  e051              B        |L1.1248|
                  |L1.1084|
                          DCD      aSin
                  |L1.1088|
                          DCD      aTan
                  |L1.1092|
                          DCD      GUI_Context
                  |L1.1096|
000448  e7ff              B        |L1.1098|
                  |L1.1098|
00044a  2e00              CMP      r6,#0                 ;374
00044c  da03              BGE      |L1.1110|
00044e  6828              LDR      r0,[r5,#0]            ;375
000450  9902              LDR      r1,[sp,#8]            ;375
000452  4408              ADD      r0,r0,r1              ;375
000454  6028              STR      r0,[r5,#0]            ;375
                  |L1.1110|
000456  f04f0400          MOV      r4,#0                 ;377
00045a  e034              B        |L1.1222|
                  |L1.1116|
00045c  9801              LDR      r0,[sp,#4]            ;378
00045e  fb007904          MLA      r9,r0,r4,r7           ;378
000462  f1b90f00          CMP      r9,#0                 ;379
000466  dd01              BLE      |L1.1132|
000468  4648              MOV      r0,r9                 ;379
00046a  e001              B        |L1.1136|
                  |L1.1132|
00046c  f1c90000          RSB      r0,r9,#0              ;379
                  |L1.1136|
000470  f64771ff          MOV      r1,#0x7fff            ;379
000474  4288              CMP      r0,r1                 ;379
000476  da05              BGE      |L1.1156|
000478  9802              LDR      r0,[sp,#8]            ;379
00047a  fb99f0f0          SDIV     r0,r9,r0              ;379
00047e  9904              LDR      r1,[sp,#0x10]         ;379
000480  4408              ADD      r0,r0,r1              ;379
000482  e004              B        |L1.1166|
                  |L1.1156|
000484  9802              LDR      r0,[sp,#8]            ;379
000486  fb99f0f0          SDIV     r0,r9,r0              ;379
00048a  9904              LDR      r1,[sp,#0x10]         ;379
00048c  4408              ADD      r0,r0,r1              ;379
                  |L1.1166|
00048e  4683              MOV      r11,r0                ;379
000490  6829              LDR      r1,[r5,#0]            ;380
000492  4431              ADD      r1,r1,r6              ;380
000494  4608              MOV      r0,r1                 ;380
000496  6029              STR      r1,[r5,#0]            ;380
000498  f7fffffe          BL       _SetLineColor
00049c  b988              CBNZ     r0,|L1.1218|
00049e  f1ba0f00          CMP      r10,#0                ;381
0004a2  d107              BNE      |L1.1204|
0004a4  9903              LDR      r1,[sp,#0xc]          ;382
0004a6  1908              ADDS     r0,r1,r4              ;382
0004a8  49b3              LDR      r1,|L1.1912|
0004aa  6d89              LDR      r1,[r1,#0x58]         ;382  ; GUI_Context
0004ac  684a              LDR      r2,[r1,#4]            ;382
0004ae  4659              MOV      r1,r11                ;382
0004b0  4790              BLX      r2                    ;382
0004b2  e006              B        |L1.1218|
                  |L1.1204|
0004b4  9803              LDR      r0,[sp,#0xc]          ;384
0004b6  1901              ADDS     r1,r0,r4              ;384
0004b8  48af              LDR      r0,|L1.1912|
0004ba  6d80              LDR      r0,[r0,#0x58]         ;384  ; GUI_Context
0004bc  6842              LDR      r2,[r0,#4]            ;384
0004be  4658              MOV      r0,r11                ;384
0004c0  4790              BLX      r2                    ;384
                  |L1.1218|
0004c2  f1040401          ADD      r4,r4,#1              ;377
                  |L1.1222|
0004c6  9802              LDR      r0,[sp,#8]            ;377
0004c8  4284              CMP      r4,r0                 ;377
0004ca  ddc7              BLE      |L1.1116|
0004cc  2e00              CMP      r6,#0                 ;388
0004ce  da03              BGE      |L1.1240|
0004d0  6828              LDR      r0,[r5,#0]            ;389
0004d2  9902              LDR      r1,[sp,#8]            ;389
0004d4  4408              ADD      r0,r0,r1              ;389
0004d6  6028              STR      r0,[r5,#0]            ;389
                  |L1.1240|
0004d8  6828              LDR      r0,[r5,#0]            ;391
0004da  eba00006          SUB      r0,r0,r6              ;391
0004de  6028              STR      r0,[r5,#0]            ;391
                  |L1.1248|
0004e0  bf00              NOP      
0004e2  e6e9              B        |L1.696|
;;;394    
                          ENDP

                  GL_DrawLine1 PROC
;;;398    */
;;;399    void GL_DrawLine1(int x0, int y0, int x1, int y1) {
0004e4  e92d41fc          PUSH     {r2-r8,lr}
0004e8  4604              MOV      r4,r0
0004ea  460d              MOV      r5,r1
0004ec  4616              MOV      r6,r2
0004ee  461f              MOV      r7,r3
;;;400      unsigned PixelCnt;
;;;401      PixelCnt = 0;
0004f0  f04f0000          MOV      r0,#0
0004f4  9001              STR      r0,[sp,#4]
;;;402      GL_DrawLine1Ex(x0, y0, x1, y1, &PixelCnt);
0004f6  a801              ADD      r0,sp,#4
0004f8  463b              MOV      r3,r7
0004fa  4632              MOV      r2,r6
0004fc  4629              MOV      r1,r5
0004fe  9000              STR      r0,[sp,#0]
000500  4620              MOV      r0,r4
000502  f7fffffe          BL       GL_DrawLine1Ex
;;;403    }
000506  e8bd81fc          POP      {r2-r8,pc}
;;;404    
                          ENDP

                  GL_DrawLineEx PROC
;;;408    */
;;;409    void GL_DrawLineEx(int x0, int y0, int x1, int y1, unsigned * pPixelCnt) {
00050a  e92d4ff0          PUSH     {r4-r11,lr}
00050e  b089              SUB      sp,sp,#0x24
000510  4606              MOV      r6,r0
000512  460f              MOV      r7,r1
000514  4614              MOV      r4,r2
000516  461d              MOV      r5,r3
;;;410      if (GUI_Context.PenSize ==1) {
000518  4897              LDR      r0,|L1.1912|
00051a  7e00              LDRB     r0,[r0,#0x18]  ; GUI_Context
00051c  2801              CMP      r0,#1
00051e  d108              BNE      |L1.1330|
;;;411        GL_DrawLine1Ex(x0,y0,x1,y1,pPixelCnt);
000520  9812              LDR      r0,[sp,#0x48]
000522  462b              MOV      r3,r5
000524  4622              MOV      r2,r4
000526  4639              MOV      r1,r7
000528  9000              STR      r0,[sp,#0]
00052a  4630              MOV      r0,r6
00052c  f7fffffe          BL       GL_DrawLine1Ex
000530  e085              B        |L1.1598|
                  |L1.1330|
;;;412      } else {
;;;413        int xdiff, ydiff;
;;;414        xdiff = x0-x1;
000532  eba60004          SUB      r0,r6,r4
000536  9008              STR      r0,[sp,#0x20]
;;;415        ydiff = y0-y1;
000538  eba70005          SUB      r0,r7,r5
00053c  9007              STR      r0,[sp,#0x1c]
;;;416        if (xdiff | ydiff) {
00053e  e9dd1007          LDRD     r1,r0,[sp,#0x1c]
000542  4308              ORRS     r0,r0,r1
000544  d07a              BEQ      |L1.1596|
;;;417          GUI_POINT Poly[4];
;;;418          int xOff, yOff;
;;;419          int xOffP, yOffP, xOffM, yOffM;
;;;420          _CalcOrto(x0-x1,y0-y1, (I32)(GUI_Context.PenSize-1), &xOff, &yOff);
000546  a801              ADD      r0,sp,#4
000548  4b8b              LDR      r3,|L1.1912|
00054a  9000              STR      r0,[sp,#0]
00054c  7e1b              LDRB     r3,[r3,#0x18]  ; GUI_Context
00054e  1e5a              SUBS     r2,r3,#1
000550  1b79              SUBS     r1,r7,r5
000552  1b30              SUBS     r0,r6,r4
000554  ab02              ADD      r3,sp,#8
000556  f7fffffe          BL       _CalcOrto
;;;421      /* Do rounding for offsets */
;;;422          if (xOff >0) {
00055a  9802              LDR      r0,[sp,#8]
00055c  2800              CMP      r0,#0
00055e  dd0c              BLE      |L1.1402|
;;;423            xOffP = (xOff+1)/2;
000560  9902              LDR      r1,[sp,#8]
000562  f1010001          ADD      r0,r1,#1
000566  eb0071d0          ADD      r1,r0,r0,LSR #31
00056a  ea4f0861          ASR      r8,r1,#1
;;;424            xOffM =  xOff   /2;
00056e  9802              LDR      r0,[sp,#8]
000570  eb0071d0          ADD      r1,r0,r0,LSR #31
000574  ea4f0a61          ASR      r10,r1,#1
000578  e00b              B        |L1.1426|
                  |L1.1402|
;;;425          } else {
;;;426            xOffP =   xOff/2;
00057a  9802              LDR      r0,[sp,#8]
00057c  eb0071d0          ADD      r1,r0,r0,LSR #31
000580  ea4f0861          ASR      r8,r1,#1
;;;427            xOffM =  (xOff-1)   /2;
000584  9902              LDR      r1,[sp,#8]
000586  f1a10001          SUB      r0,r1,#1
00058a  eb0071d0          ADD      r1,r0,r0,LSR #31
00058e  ea4f0a61          ASR      r10,r1,#1
                  |L1.1426|
;;;428          }
;;;429          if (yOff >0) {
000592  9801              LDR      r0,[sp,#4]
000594  2800              CMP      r0,#0
000596  dd0c              BLE      |L1.1458|
;;;430            yOffP = (yOff+1)/2;
000598  9901              LDR      r1,[sp,#4]
00059a  f1010001          ADD      r0,r1,#1
00059e  eb0071d0          ADD      r1,r0,r0,LSR #31
0005a2  ea4f0961          ASR      r9,r1,#1
;;;431            yOffM =  yOff   /2;
0005a6  9801              LDR      r0,[sp,#4]
0005a8  eb0071d0          ADD      r1,r0,r0,LSR #31
0005ac  ea4f0b61          ASR      r11,r1,#1
0005b0  e00b              B        |L1.1482|
                  |L1.1458|
;;;432          } else {
;;;433            yOffP =   yOff/2;
0005b2  9801              LDR      r0,[sp,#4]
0005b4  eb0071d0          ADD      r1,r0,r0,LSR #31
0005b8  ea4f0961          ASR      r9,r1,#1
;;;434            yOffM =  (yOff-1)   /2;
0005bc  9901              LDR      r1,[sp,#4]
0005be  f1a10001          SUB      r0,r1,#1
0005c2  eb0071d0          ADD      r1,r0,r0,LSR #31
0005c6  ea4f0b61          ASR      r11,r1,#1
                  |L1.1482|
;;;435          }
;;;436          Poly[0].x = x0+xOffP;
0005ca  eb060008          ADD      r0,r6,r8
0005ce  b200              SXTH     r0,r0
0005d0  f8ad000c          STRH     r0,[sp,#0xc]
;;;437          Poly[0].y = y0+yOffP;
0005d4  eb070009          ADD      r0,r7,r9
0005d8  b200              SXTH     r0,r0
0005da  f8ad000e          STRH     r0,[sp,#0xe]
;;;438          Poly[1].x = x0-xOffM;
0005de  eba6000a          SUB      r0,r6,r10
0005e2  b200              SXTH     r0,r0
0005e4  f8ad0010          STRH     r0,[sp,#0x10]
;;;439          Poly[1].y = y0-yOffM;
0005e8  eba7000b          SUB      r0,r7,r11
0005ec  b201              SXTH     r1,r0
0005ee  f8ad1012          STRH     r1,[sp,#0x12]
;;;440          Poly[2].x = x1-xOffM;
0005f2  eba4000a          SUB      r0,r4,r10
0005f6  b200              SXTH     r0,r0
0005f8  f8ad0014          STRH     r0,[sp,#0x14]
;;;441          Poly[2].y = y1-yOffM;
0005fc  eba5000b          SUB      r0,r5,r11
000600  b201              SXTH     r1,r0
000602  f8ad1016          STRH     r1,[sp,#0x16]
;;;442          Poly[3].x = x1+xOffP;
000606  eb040008          ADD      r0,r4,r8
00060a  b200              SXTH     r0,r0
00060c  f8ad0018          STRH     r0,[sp,#0x18]
;;;443          Poly[3].y = y1+yOffP;
000610  eb050009          ADD      r0,r5,r9
000614  b201              SXTH     r1,r0
000616  f8ad101a          STRH     r1,[sp,#0x1a]
;;;444          GL_FillPolygon(&Poly[0], 4, 0,0);
00061a  f04f0300          MOV      r3,#0
00061e  461a              MOV      r2,r3
000620  f04f0104          MOV      r1,#4
000624  a803              ADD      r0,sp,#0xc
000626  f7fffffe          BL       GL_FillPolygon
;;;445          _DrawLineEnd(x0,y0);
00062a  4639              MOV      r1,r7
00062c  4630              MOV      r0,r6
00062e  f7fffffe          BL       _DrawLineEnd
;;;446          _DrawLineEnd(x1,y1);
000632  4629              MOV      r1,r5
000634  4620              MOV      r0,r4
000636  f7fffffe          BL       _DrawLineEnd
;;;447        }
00063a  bf00              NOP      
                  |L1.1596|
;;;448      }
00063c  bf00              NOP      
                  |L1.1598|
;;;449    }
00063e  b009              ADD      sp,sp,#0x24
000640  e8bd8ff0          POP      {r4-r11,pc}
;;;450    
                          ENDP

                  GL_DrawLine PROC
;;;454    */
;;;455    void GL_DrawLine(int x0, int y0, int x1, int y1) {
000644  e92d41fc          PUSH     {r2-r8,lr}
000648  4604              MOV      r4,r0
00064a  460d              MOV      r5,r1
00064c  4616              MOV      r6,r2
00064e  461f              MOV      r7,r3
;;;456      unsigned PixelCnt;
;;;457      PixelCnt = 0;
000650  f04f0000          MOV      r0,#0
000654  9001              STR      r0,[sp,#4]
;;;458      GL_DrawLineEx(x0, y0, x1, y1, &PixelCnt);
000656  a801              ADD      r0,sp,#4
000658  463b              MOV      r3,r7
00065a  4632              MOV      r2,r6
00065c  4629              MOV      r1,r5
00065e  9000              STR      r0,[sp,#0]
000660  4620              MOV      r0,r4
000662  f7fffffe          BL       GL_DrawLineEx
;;;459    }
000666  e8bd81fc          POP      {r2-r8,pc}
;;;460    
                          ENDP

                  GUI_DrawLine PROC
;;;464    */
;;;465    void GUI_DrawLine(int x0, int y0, int x1, int y1) {
00066a  e92d41f0          PUSH     {r4-r8,lr}
00066e  4604              MOV      r4,r0
000670  460d              MOV      r5,r1
000672  4616              MOV      r6,r2
000674  461f              MOV      r7,r3
;;;466      GUI_LOCK();
;;;467      #if (GUI_WINSUPPORT)
;;;468        WM_ADDORG(x0,y0);
000676  4840              LDR      r0,|L1.1912|
000678  6c00              LDR      r0,[r0,#0x40]  ; GUI_Context
00067a  4404              ADD      r4,r4,r0
00067c  483e              LDR      r0,|L1.1912|
00067e  6c40              LDR      r0,[r0,#0x44]  ; GUI_Context
000680  4405              ADD      r5,r5,r0
;;;469        WM_ADDORG(x1,y1);
000682  483d              LDR      r0,|L1.1912|
000684  6c00              LDR      r0,[r0,#0x40]  ; GUI_Context
000686  4406              ADD      r6,r6,r0
000688  483b              LDR      r0,|L1.1912|
00068a  6c40              LDR      r0,[r0,#0x44]  ; GUI_Context
00068c  4407              ADD      r7,r7,r0
;;;470        WM_ITERATE_START(NULL); {
00068e  f04f0000          MOV      r0,#0
000692  f7fffffe          BL       WM__InitIVRSearch
000696  b150              CBZ      r0,|L1.1710|
000698  bf00              NOP      
                  |L1.1690|
;;;471      #endif
;;;472      GL_DrawLine (x0, y0, x1, y1);
00069a  463b              MOV      r3,r7
00069c  4632              MOV      r2,r6
00069e  4629              MOV      r1,r5
0006a0  4620              MOV      r0,r4
0006a2  f7fffffe          BL       GL_DrawLine
;;;473      #if (GUI_WINSUPPORT)
;;;474        } WM_ITERATE_END();
0006a6  f7fffffe          BL       WM__GetNextIVR
0006aa  2800              CMP      r0,#0
0006ac  d1f5              BNE      |L1.1690|
                  |L1.1710|
;;;475      #endif
;;;476      GUI_UNLOCK();
;;;477    }
0006ae  e8bd81f0          POP      {r4-r8,pc}
;;;478    
                          ENDP

                  GUI_DrawLineRel PROC
;;;488    */
;;;489    void GUI_DrawLineRel(int dx, int dy) {
0006b2  b570              PUSH     {r4-r6,lr}
0006b4  4604              MOV      r4,r0
0006b6  460d              MOV      r5,r1
;;;490      GUI_LOCK();
;;;491      #if (GUI_WINSUPPORT)
;;;492        WM_ITERATE_START(NULL); {
0006b8  f04f0000          MOV      r0,#0
0006bc  f7fffffe          BL       WM__InitIVRSearch
0006c0  b198              CBZ      r0,|L1.1770|
0006c2  bf00              NOP      
                  |L1.1732|
;;;493      #endif
;;;494      GL_DrawLine (GUI_Context.DrawPosX,    GUI_Context.DrawPosY,
0006c4  4e2c              LDR      r6,|L1.1912|
0006c6  f9b66028          LDRSH    r6,[r6,#0x28]  ; GUI_Context
0006ca  1973              ADDS     r3,r6,r5
0006cc  4e2a              LDR      r6,|L1.1912|
0006ce  f9b66026          LDRSH    r6,[r6,#0x26]  ; GUI_Context
0006d2  1932              ADDS     r2,r6,r4
0006d4  4e28              LDR      r6,|L1.1912|
0006d6  f9b61028          LDRSH    r1,[r6,#0x28]  ; GUI_Context
0006da  f9b60026          LDRSH    r0,[r6,#0x26]  ; GUI_Context
0006de  f7fffffe          BL       GL_DrawLine
;;;495                   GUI_Context.DrawPosX+dx, GUI_Context.DrawPosY+dy);
;;;496      #if (GUI_WINSUPPORT)
;;;497        } WM_ITERATE_END();
0006e2  f7fffffe          BL       WM__GetNextIVR
0006e6  2800              CMP      r0,#0
0006e8  d1ec              BNE      |L1.1732|
                  |L1.1770|
;;;498      #endif
;;;499      GUI_MoveRel(dx,dy);
0006ea  4629              MOV      r1,r5
0006ec  4620              MOV      r0,r4
0006ee  f7fffffe          BL       GUI_MoveRel
;;;500      GUI_UNLOCK();
;;;501    }
0006f2  bd70              POP      {r4-r6,pc}
;;;502    
                          ENDP

                  GL_DrawLineToEx PROC
;;;506    */
;;;507    void GL_DrawLineToEx(int x, int y, unsigned * pPixelCnt) {
0006f4  b5f8              PUSH     {r3-r7,lr}
0006f6  4604              MOV      r4,r0
0006f8  460d              MOV      r5,r1
0006fa  4616              MOV      r6,r2
;;;508      GL_DrawLineEx(GUI_Context.DrawPosX, GUI_Context.DrawPosY, x, y, pPixelCnt);
0006fc  4a1e              LDR      r2,|L1.1912|
0006fe  9600              STR      r6,[sp,#0]
000700  f9b21028          LDRSH    r1,[r2,#0x28]  ; GUI_Context
000704  f9b20026          LDRSH    r0,[r2,#0x26]  ; GUI_Context
000708  462b              MOV      r3,r5
00070a  4622              MOV      r2,r4
00070c  f7fffffe          BL       GL_DrawLineEx
;;;509      GUI_Context.DrawPosX = x;
000710  b220              SXTH     r0,r4
000712  4919              LDR      r1,|L1.1912|
000714  84c8              STRH     r0,[r1,#0x26]
;;;510      GUI_Context.DrawPosY = y;
000716  b228              SXTH     r0,r5
000718  8508              STRH     r0,[r1,#0x28]
;;;511    }
00071a  bdf8              POP      {r3-r7,pc}
;;;512    
                          ENDP

                  GL_DrawLineTo PROC
;;;516    */
;;;517    void GL_DrawLineTo(int x, int y) {
00071c  b538              PUSH     {r3-r5,lr}
00071e  4604              MOV      r4,r0
000720  460d              MOV      r5,r1
;;;518      unsigned PixelCnt;
;;;519      PixelCnt = 0;
000722  f04f0000          MOV      r0,#0
000726  9000              STR      r0,[sp,#0]
;;;520      GL_DrawLineToEx(x, y, &PixelCnt);
000728  466a              MOV      r2,sp
00072a  4629              MOV      r1,r5
00072c  4620              MOV      r0,r4
00072e  f7fffffe          BL       GL_DrawLineToEx
;;;521    }
000732  bd38              POP      {r3-r5,pc}
;;;522    
                          ENDP

                  GUI_DrawLineTo PROC
;;;526    */
;;;527    void GUI_DrawLineTo(int x, int y) {
000734  b570              PUSH     {r4-r6,lr}
000736  4604              MOV      r4,r0
000738  460d              MOV      r5,r1
;;;528      GUI_LOCK();
;;;529      #if (GUI_WINSUPPORT)
;;;530        WM_ADDORG(x,y);
00073a  480f              LDR      r0,|L1.1912|
00073c  6c00              LDR      r0,[r0,#0x40]  ; GUI_Context
00073e  4404              ADD      r4,r4,r0
000740  480d              LDR      r0,|L1.1912|
000742  6c40              LDR      r0,[r0,#0x44]  ; GUI_Context
000744  4405              ADD      r5,r5,r0
;;;531        WM_ITERATE_START(NULL); {
000746  f04f0000          MOV      r0,#0
00074a  f7fffffe          BL       WM__InitIVRSearch
00074e  b168              CBZ      r0,|L1.1900|
000750  bf00              NOP      
                  |L1.1874|
;;;532      #endif
;;;533      GL_DrawLine (GUI_Context.DrawPosX, GUI_Context.DrawPosY, x, y);
000752  4a09              LDR      r2,|L1.1912|
000754  f9b21028          LDRSH    r1,[r2,#0x28]  ; GUI_Context
000758  f9b20026          LDRSH    r0,[r2,#0x26]  ; GUI_Context
00075c  462b              MOV      r3,r5
00075e  4622              MOV      r2,r4
000760  f7fffffe          BL       GL_DrawLine
;;;534      #if (GUI_WINSUPPORT)
;;;535        } WM_ITERATE_END();
000764  f7fffffe          BL       WM__GetNextIVR
000768  2800              CMP      r0,#0
00076a  d1f2              BNE      |L1.1874|
                  |L1.1900|
;;;536      #endif
;;;537      GL_MoveTo(x,y);
00076c  4629              MOV      r1,r5
00076e  4620              MOV      r0,r4
000770  f7fffffe          BL       GL_MoveTo
;;;538      GUI_UNLOCK();
;;;539    }
000774  bd70              POP      {r4-r6,pc}
;;;540    
                          ENDP

000776  0000              DCW      0x0000
                  |L1.1912|
                          DCD      GUI_Context

                          AREA ||.constdata||, DATA, READONLY, ALIGN=1

                  aSin
000000  00000064          DCW      0x0000,0x0064
000004  00c80129          DCW      0x00c8,0x0129
000008  018801e3          DCW      0x0188,0x01e3
00000c  0239028a          DCW      0x0239,0x028a
000010  02d40318          DCW      0x02d4,0x0318
000014  03530387          DCW      0x0353,0x0387
000018  03b203d4          DCW      0x03b2,0x03d4
00001c  03ec03fb          DCW      0x03ec,0x03fb
000020  0400              DCW      0x0400
                  aTan
000022  0000              DCW      0x0000
000024  00290051          DCW      0x0029,0x0051
000028  007900a0          DCW      0x0079,0x00a0
00002c  00c500ea          DCW      0x00c5,0x00ea
000030  010d012e          DCW      0x010d,0x012e
000034  014e016c          DCW      0x014e,0x016c
000038  018901a3          DCW      0x0189,0x01a3
00003c  01bd01d5          DCW      0x01bd,0x01d5
000040  01eb0200          DCW      0x01eb,0x0200
