; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\png.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\png.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\FWlib\inc -I.\user -I.\CM3 -I.\MALLOC -I.\TFT -I.\EMWIN\EMWIN_INC -I.\EMWIN\DEMO -I.\PNG -I.\FATFS -I.\SDIO -I.\USB\inc -I.\USBCFG\inc -IE:\material\GUI\8.STM32·Ü¶·°å-emwin+fatfs+usb\RTE -Id:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.0.0 -Id:\Keil_v5\ARM\CMSIS\Include -Id:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.0.0\Device\Include -D__UVISION_VERSION=514 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\png.crf PNG\png.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  png_set_sig_bytes PROC
;;;97     void PNGAPI
;;;98     png_set_sig_bytes(png_structp png_ptr, int num_bytes)
000000  b570              PUSH     {r4-r6,lr}
;;;99     {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;100       if(png_ptr == NULL) return;
000006  b905              CBNZ     r5,|L1.10|
                  |L1.8|
;;;101       png_debug(1, "in png_set_sig_bytes\n");
;;;102       if (num_bytes > 8)
;;;103          png_error(png_ptr, "Too many bytes for PNG signature.");
;;;104    
;;;105       png_ptr->sig_bytes = (png_byte)(num_bytes < 0 ? 0 : num_bytes);
;;;106    }
000008  bd70              POP      {r4-r6,pc}
                  |L1.10|
00000a  2c08              CMP      r4,#8                 ;102
00000c  dd03              BLE      |L1.22|
00000e  a1fe              ADR      r1,|L1.1032|
000010  4628              MOV      r0,r5                 ;103
000012  f7fffffe          BL       png_error
                  |L1.22|
000016  2c00              CMP      r4,#0                 ;105
000018  da01              BGE      |L1.30|
00001a  2000              MOVS     r0,#0                 ;105
00001c  e000              B        |L1.32|
                  |L1.30|
00001e  4620              MOV      r0,r4                 ;105
                  |L1.32|
000020  f885026c          STRB     r0,[r5,#0x26c]        ;105
000024  bf00              NOP      
000026  e7ef              B        |L1.8|
;;;107    
                          ENDP

                  png_sig_cmp PROC
;;;116    int PNGAPI
;;;117    png_sig_cmp(png_bytep sig, png_size_t start, png_size_t num_to_check)
000028  b57c              PUSH     {r2-r6,lr}
;;;118    {
00002a  4606              MOV      r6,r0
00002c  460c              MOV      r4,r1
00002e  4615              MOV      r5,r2
;;;119       png_byte png_signature[8] = {137, 80, 78, 71, 13, 10, 26, 10};
000030  a1fe              ADR      r1,|L1.1068|
000032  c903              LDM      r1,{r0,r1}
000034  e9cd0100          STRD     r0,r1,[sp,#0]
;;;120       if (num_to_check > 8)
000038  2d08              CMP      r5,#8
00003a  d901              BLS      |L1.64|
;;;121          num_to_check = 8;
00003c  2508              MOVS     r5,#8
00003e  e003              B        |L1.72|
                  |L1.64|
;;;122       else if (num_to_check < 1)
000040  b915              CBNZ     r5,|L1.72|
;;;123          return (-1);
000042  f04f30ff          MOV      r0,#0xffffffff
                  |L1.70|
;;;124    
;;;125       if (start > 7)
;;;126          return (-1);
;;;127    
;;;128       if (start + num_to_check > 8)
;;;129          num_to_check = 8 - start;
;;;130    
;;;131       return ((int)(png_memcmp(&sig[start], &png_signature[start], num_to_check)));
;;;132    }
000046  bd7c              POP      {r2-r6,pc}
                  |L1.72|
000048  2c07              CMP      r4,#7                 ;125
00004a  d902              BLS      |L1.82|
00004c  f04f30ff          MOV      r0,#0xffffffff        ;126
000050  e7f9              B        |L1.70|
                  |L1.82|
000052  1960              ADDS     r0,r4,r5              ;128
000054  2808              CMP      r0,#8                 ;128
000056  d901              BLS      |L1.92|
000058  f1c40508          RSB      r5,r4,#8              ;129
                  |L1.92|
00005c  eb0d0104          ADD      r1,sp,r4              ;131
000060  1930              ADDS     r0,r6,r4              ;131
000062  462a              MOV      r2,r5                 ;131
000064  f7fffffe          BL       memcmp
000068  e7ed              B        |L1.70|
;;;133    
                          ENDP

                  png_check_sig PROC
;;;139    int PNGAPI
;;;140    png_check_sig(png_bytep sig, int num)
00006a  b570              PUSH     {r4-r6,lr}
;;;141    {
00006c  4605              MOV      r5,r0
00006e  460c              MOV      r4,r1
;;;142      return ((int)!png_sig_cmp(sig, (png_size_t)0, (png_size_t)num));
000070  4622              MOV      r2,r4
000072  2100              MOVS     r1,#0
000074  4628              MOV      r0,r5
000076  f7fffffe          BL       png_sig_cmp
00007a  b908              CBNZ     r0,|L1.128|
00007c  2001              MOVS     r0,#1
                  |L1.126|
;;;143    }
00007e  bd70              POP      {r4-r6,pc}
                  |L1.128|
000080  2000              MOVS     r0,#0                 ;142
000082  e7fc              B        |L1.126|
;;;144    #endif
                          ENDP

                  png_zalloc PROC
;;;153    #endif
;;;154    png_zalloc(voidpf png_ptr, uInt items, uInt size)
000084  e92d47f0          PUSH     {r4-r10,lr}
;;;155    {
000088  4605              MOV      r5,r0
00008a  460e              MOV      r6,r1
00008c  4617              MOV      r7,r2
;;;156       png_voidp ptr;
;;;157       png_structp p=(png_structp)png_ptr;
00008e  462c              MOV      r4,r5
;;;158       png_uint_32 save_flags=p->flags;
000090  f8d491ac          LDR      r9,[r4,#0x1ac]
;;;159       png_uint_32 num_bytes;
;;;160    
;;;161       if(png_ptr == NULL) return (NULL);
000094  b915              CBNZ     r5,|L1.156|
000096  2000              MOVS     r0,#0
                  |L1.152|
;;;162       if (items > PNG_UINT_32_MAX/size)
;;;163       {
;;;164         png_warning (p, "Potential overflow in png_zalloc()");
;;;165         return (NULL);
;;;166       }
;;;167       num_bytes = (png_uint_32)items * size;
;;;168    
;;;169       p->flags|=PNG_FLAG_MALLOC_NULL_MEM_OK;
;;;170       ptr = (png_voidp)png_malloc((png_structp)png_ptr, num_bytes);
;;;171       p->flags=save_flags;
;;;172    
;;;173    #if defined(PNG_1_0_X) && !defined(PNG_NO_ZALLOC_ZERO)
;;;174       if (ptr == NULL)
;;;175           return ((voidpf)ptr);
;;;176    
;;;177       if (num_bytes > (png_uint_32)0x8000L)
;;;178       {
;;;179          png_memset(ptr, 0, (png_size_t)0x8000L);
;;;180          png_memset((png_bytep)ptr + (png_size_t)0x8000L, 0,
;;;181             (png_size_t)(num_bytes - (png_uint_32)0x8000L));
;;;182       }
;;;183       else
;;;184       {
;;;185          png_memset(ptr, 0, (png_size_t)num_bytes);
;;;186       }
;;;187    #endif
;;;188       return ((voidpf)ptr);
;;;189    }
000098  e8bd87f0          POP      {r4-r10,pc}
                  |L1.156|
00009c  f04f30ff          MOV      r0,#0xffffffff        ;162
0000a0  fbb0f0f7          UDIV     r0,r0,r7              ;162
0000a4  42b0              CMP      r0,r6                 ;162
0000a6  d205              BCS      |L1.180|
0000a8  a1e2              ADR      r1,|L1.1076|
0000aa  4620              MOV      r0,r4                 ;164
0000ac  f7fffffe          BL       png_warning
0000b0  2000              MOVS     r0,#0                 ;165
0000b2  e7f1              B        |L1.152|
                  |L1.180|
0000b4  fb06f807          MUL      r8,r6,r7              ;167
0000b8  f8d401ac          LDR      r0,[r4,#0x1ac]        ;169
0000bc  f4401080          ORR      r0,r0,#0x100000       ;169
0000c0  f8c401ac          STR      r0,[r4,#0x1ac]        ;169
0000c4  4641              MOV      r1,r8                 ;170
0000c6  4628              MOV      r0,r5                 ;170
0000c8  f7fffffe          BL       png_malloc
0000cc  4682              MOV      r10,r0                ;170
0000ce  f8c491ac          STR      r9,[r4,#0x1ac]        ;171
0000d2  4650              MOV      r0,r10                ;188
0000d4  e7e0              B        |L1.152|
;;;190    
                          ENDP

                  png_zfree PROC
;;;196    #endif
;;;197    png_zfree(voidpf png_ptr, voidpf ptr)
0000d6  b570              PUSH     {r4-r6,lr}
;;;198    {
0000d8  4604              MOV      r4,r0
0000da  460d              MOV      r5,r1
;;;199       png_free((png_structp)png_ptr, (png_voidp)ptr);
0000dc  4629              MOV      r1,r5
0000de  4620              MOV      r0,r4
0000e0  f7fffffe          BL       png_free
;;;200    }
0000e4  bd70              POP      {r4-r6,pc}
;;;201    
                          ENDP

                  png_reset_crc PROC
;;;205    void /* PRIVATE */
;;;206    png_reset_crc(png_structp png_ptr)
0000e6  b510              PUSH     {r4,lr}
;;;207    {
0000e8  4604              MOV      r4,r0
;;;208       png_ptr->crc = crc32(0, Z_NULL, 0);
0000ea  2200              MOVS     r2,#0
0000ec  4611              MOV      r1,r2
0000ee  4610              MOV      r0,r2
0000f0  f7fffffe          BL       crc32
0000f4  f8c40250          STR      r0,[r4,#0x250]
;;;209    }
0000f8  bd10              POP      {r4,pc}
;;;210    
                          ENDP

                  png_calculate_crc PROC
;;;216    void /* PRIVATE */
;;;217    png_calculate_crc(png_structp png_ptr, png_bytep ptr, png_size_t length)
0000fa  e92d41f0          PUSH     {r4-r8,lr}
;;;218    {
0000fe  4604              MOV      r4,r0
000100  460d              MOV      r5,r1
000102  4616              MOV      r6,r2
;;;219       int need_crc = 1;
000104  2701              MOVS     r7,#1
;;;220    
;;;221       if (png_ptr->chunk_name[0] & 0x20)                     /* ancillary */
000106  f894025c          LDRB     r0,[r4,#0x25c]
00010a  f0000020          AND      r0,r0,#0x20
00010e  b140              CBZ      r0,|L1.290|
;;;222       {
;;;223          if ((png_ptr->flags & PNG_FLAG_CRC_ANCILLARY_MASK) ==
000110  f8b401ac          LDRH     r0,[r4,#0x1ac]
000114  f4007040          AND      r0,r0,#0x300
000118  f5b07f40          CMP      r0,#0x300
00011c  d107              BNE      |L1.302|
;;;224              (PNG_FLAG_CRC_ANCILLARY_USE | PNG_FLAG_CRC_ANCILLARY_NOWARN))
;;;225             need_crc = 0;
00011e  2700              MOVS     r7,#0
000120  e005              B        |L1.302|
                  |L1.290|
;;;226       }
;;;227       else                                                    /* critical */
;;;228       {
;;;229          if (png_ptr->flags & PNG_FLAG_CRC_CRITICAL_IGNORE)
000122  f8b401ac          LDRH     r0,[r4,#0x1ac]
000126  f4006000          AND      r0,r0,#0x800
00012a  b100              CBZ      r0,|L1.302|
;;;230             need_crc = 0;
00012c  2700              MOVS     r7,#0
                  |L1.302|
;;;231       }
;;;232    
;;;233       if (need_crc)
00012e  b13f              CBZ      r7,|L1.320|
;;;234          png_ptr->crc = crc32(png_ptr->crc, ptr, (uInt)length);
000130  4632              MOV      r2,r6
000132  4629              MOV      r1,r5
000134  f8d40250          LDR      r0,[r4,#0x250]
000138  f7fffffe          BL       crc32
00013c  f8c40250          STR      r0,[r4,#0x250]
                  |L1.320|
;;;235    }
000140  e8bd81f0          POP      {r4-r8,pc}
;;;236    
                          ENDP

                  png_info_init_3 PROC
;;;305    void PNGAPI
;;;306    png_info_init_3(png_infopp ptr_ptr, png_size_t png_info_struct_size)
000144  b570              PUSH     {r4-r6,lr}
;;;307    {
000146  4604              MOV      r4,r0
000148  460e              MOV      r6,r1
;;;308       png_infop info_ptr = *ptr_ptr;
00014a  6825              LDR      r5,[r4,#0]
;;;309    
;;;310       if(info_ptr == NULL) return;
00014c  b905              CBNZ     r5,|L1.336|
                  |L1.334|
;;;311    
;;;312       png_debug(1, "in png_info_init_3\n");
;;;313    
;;;314       if(png_sizeof(png_info) > png_info_struct_size)
;;;315         {
;;;316           png_destroy_struct(info_ptr);
;;;317           info_ptr = (png_infop)png_create_struct(PNG_STRUCT_INFO);
;;;318           *ptr_ptr = info_ptr;
;;;319         }
;;;320    
;;;321       /* set everything to 0 */
;;;322       png_memset(info_ptr, 0, png_sizeof (png_info));
;;;323    }
00014e  bd70              POP      {r4-r6,pc}
                  |L1.336|
000150  f5b67f90          CMP      r6,#0x120             ;314
000154  d207              BCS      |L1.358|
000156  4628              MOV      r0,r5                 ;316
000158  f7fffffe          BL       png_destroy_struct
00015c  2002              MOVS     r0,#2                 ;317
00015e  f7fffffe          BL       png_create_struct
000162  4605              MOV      r5,r0                 ;317
000164  6025              STR      r5,[r4,#0]            ;318
                  |L1.358|
000166  f44f7190          MOV      r1,#0x120             ;322
00016a  4628              MOV      r0,r5                 ;322
00016c  f7fffffe          BL       __aeabi_memclr4
000170  bf00              NOP      
000172  e7ec              B        |L1.334|
;;;324    
                          ENDP

                  png_create_info_struct PROC
;;;243    png_infop PNGAPI
;;;244    png_create_info_struct(png_structp png_ptr)
000174  b538              PUSH     {r3-r5,lr}
;;;245    {
000176  4604              MOV      r4,r0
;;;246       png_infop info_ptr;
;;;247    
;;;248       png_debug(1, "in png_create_info_struct\n");
;;;249       if(png_ptr == NULL) return (NULL);
000178  b90c              CBNZ     r4,|L1.382|
00017a  2000              MOVS     r0,#0
                  |L1.380|
;;;250    #ifdef PNG_USER_MEM_SUPPORTED
;;;251       info_ptr = (png_infop)png_create_struct_2(PNG_STRUCT_INFO,
;;;252          png_ptr->malloc_fn, png_ptr->mem_ptr);
;;;253    #else
;;;254       info_ptr = (png_infop)png_create_struct(PNG_STRUCT_INFO);
;;;255    #endif
;;;256       if (info_ptr != NULL)
;;;257          png_info_init_3(&info_ptr, png_sizeof(png_info));
;;;258    
;;;259       return (info_ptr);
;;;260    }
00017c  bd38              POP      {r3-r5,pc}
                  |L1.382|
00017e  2002              MOVS     r0,#2                 ;251
000180  f8d4237c          LDR      r2,[r4,#0x37c]        ;251
000184  f8d41380          LDR      r1,[r4,#0x380]        ;251
000188  f7fffffe          BL       png_create_struct_2
00018c  9000              STR      r0,[sp,#0]            ;251
00018e  9800              LDR      r0,[sp,#0]            ;256
000190  b120              CBZ      r0,|L1.412|
000192  f44f7190          MOV      r1,#0x120             ;257
000196  4668              MOV      r0,sp                 ;257
000198  f7fffffe          BL       png_info_init_3
                  |L1.412|
00019c  9800              LDR      r0,[sp,#0]            ;259
00019e  e7ed              B        |L1.380|
;;;261    
                          ENDP

                  png_free_data PROC
;;;343    void PNGAPI
;;;344    png_free_data(png_structp png_ptr, png_infop info_ptr, png_uint_32 mask,
0001a0  e92d41f0          PUSH     {r4-r8,lr}
;;;345       int num)
;;;346    {
0001a4  4680              MOV      r8,r0
0001a6  460c              MOV      r4,r1
0001a8  4616              MOV      r6,r2
0001aa  461d              MOV      r5,r3
;;;347       png_debug(1, "in png_free_data\n");
;;;348       if (png_ptr == NULL || info_ptr == NULL)
0001ac  f1b80f00          CMP      r8,#0
0001b0  d000              BEQ      |L1.436|
0001b2  b90c              CBNZ     r4,|L1.440|
                  |L1.436|
;;;349          return;
;;;350    
;;;351    #if defined(PNG_TEXT_SUPPORTED)
;;;352    /* free text item num or (if num == -1) all text items */
;;;353    #ifdef PNG_FREE_ME_SUPPORTED
;;;354    if ((mask & PNG_FREE_TEXT) & info_ptr->free_me)
;;;355    #else
;;;356    if (mask & PNG_FREE_TEXT)
;;;357    #endif
;;;358    {
;;;359       if (num != -1)
;;;360       {
;;;361         if (info_ptr->text && info_ptr->text[num].key)
;;;362         {
;;;363             png_free(png_ptr, info_ptr->text[num].key);
;;;364             info_ptr->text[num].key = NULL;
;;;365         }
;;;366       }
;;;367       else
;;;368       {
;;;369           int i;
;;;370           for (i = 0; i < info_ptr->num_text; i++)
;;;371               png_free_data(png_ptr, info_ptr, PNG_FREE_TEXT, i);
;;;372           png_free(png_ptr, info_ptr->text);
;;;373           info_ptr->text = NULL;
;;;374           info_ptr->num_text=0;
;;;375       }
;;;376    }
;;;377    #endif
;;;378    
;;;379    #if defined(PNG_tRNS_SUPPORTED)
;;;380    /* free any tRNS entry */
;;;381    #ifdef PNG_FREE_ME_SUPPORTED
;;;382    if ((mask & PNG_FREE_TRNS) & info_ptr->free_me)
;;;383    #else
;;;384    if ((mask & PNG_FREE_TRNS) && (png_ptr->flags & PNG_FLAG_FREE_TRNS))
;;;385    #endif
;;;386    {
;;;387        png_free(png_ptr, info_ptr->trans);
;;;388        info_ptr->valid &= ~PNG_INFO_tRNS;
;;;389    #ifndef PNG_FREE_ME_SUPPORTED
;;;390        png_ptr->flags &= ~PNG_FLAG_FREE_TRNS;
;;;391    #endif
;;;392        info_ptr->trans = NULL;
;;;393    }
;;;394    #endif
;;;395    
;;;396    #if defined(PNG_sCAL_SUPPORTED)
;;;397    /* free any sCAL entry */
;;;398    #ifdef PNG_FREE_ME_SUPPORTED
;;;399    if ((mask & PNG_FREE_SCAL) & info_ptr->free_me)
;;;400    #else
;;;401    if (mask & PNG_FREE_SCAL)
;;;402    #endif
;;;403    {
;;;404    #if defined(PNG_FIXED_POINT_SUPPORTED) && !defined(PNG_FLOATING_POINT_SUPPORTED)
;;;405        png_free(png_ptr, info_ptr->scal_s_width);
;;;406        png_free(png_ptr, info_ptr->scal_s_height);
;;;407        info_ptr->scal_s_width = NULL;
;;;408        info_ptr->scal_s_height = NULL;
;;;409    #endif
;;;410        info_ptr->valid &= ~PNG_INFO_sCAL;
;;;411    }
;;;412    #endif
;;;413    
;;;414    #if defined(PNG_pCAL_SUPPORTED)
;;;415    /* free any pCAL entry */
;;;416    #ifdef PNG_FREE_ME_SUPPORTED
;;;417    if ((mask & PNG_FREE_PCAL) & info_ptr->free_me)
;;;418    #else
;;;419    if (mask & PNG_FREE_PCAL)
;;;420    #endif
;;;421    {
;;;422        png_free(png_ptr, info_ptr->pcal_purpose);
;;;423        png_free(png_ptr, info_ptr->pcal_units);
;;;424        info_ptr->pcal_purpose = NULL;
;;;425        info_ptr->pcal_units = NULL;
;;;426        if (info_ptr->pcal_params != NULL)
;;;427        {
;;;428            int i;
;;;429            for (i = 0; i < (int)info_ptr->pcal_nparams; i++)
;;;430            {
;;;431              png_free(png_ptr, info_ptr->pcal_params[i]);
;;;432              info_ptr->pcal_params[i]=NULL;
;;;433            }
;;;434            png_free(png_ptr, info_ptr->pcal_params);
;;;435            info_ptr->pcal_params = NULL;
;;;436        }
;;;437        info_ptr->valid &= ~PNG_INFO_pCAL;
;;;438    }
;;;439    #endif
;;;440    
;;;441    #if defined(PNG_iCCP_SUPPORTED)
;;;442    /* free any iCCP entry */
;;;443    #ifdef PNG_FREE_ME_SUPPORTED
;;;444    if ((mask & PNG_FREE_ICCP) & info_ptr->free_me)
;;;445    #else
;;;446    if (mask & PNG_FREE_ICCP)
;;;447    #endif
;;;448    {
;;;449        png_free(png_ptr, info_ptr->iccp_name);
;;;450        png_free(png_ptr, info_ptr->iccp_profile);
;;;451        info_ptr->iccp_name = NULL;
;;;452        info_ptr->iccp_profile = NULL;
;;;453        info_ptr->valid &= ~PNG_INFO_iCCP;
;;;454    }
;;;455    #endif
;;;456    
;;;457    #if defined(PNG_sPLT_SUPPORTED)
;;;458    /* free a given sPLT entry, or (if num == -1) all sPLT entries */
;;;459    #ifdef PNG_FREE_ME_SUPPORTED
;;;460    if ((mask & PNG_FREE_SPLT) & info_ptr->free_me)
;;;461    #else
;;;462    if (mask & PNG_FREE_SPLT)
;;;463    #endif
;;;464    {
;;;465       if (num != -1)
;;;466       {
;;;467          if(info_ptr->splt_palettes)
;;;468          {
;;;469              png_free(png_ptr, info_ptr->splt_palettes[num].name);
;;;470              png_free(png_ptr, info_ptr->splt_palettes[num].entries);
;;;471              info_ptr->splt_palettes[num].name = NULL;
;;;472              info_ptr->splt_palettes[num].entries = NULL;
;;;473          }
;;;474       }
;;;475       else
;;;476       {
;;;477           if(info_ptr->splt_palettes_num)
;;;478           {
;;;479             int i;
;;;480             for (i = 0; i < (int)info_ptr->splt_palettes_num; i++)
;;;481                png_free_data(png_ptr, info_ptr, PNG_FREE_SPLT, i);
;;;482    
;;;483             png_free(png_ptr, info_ptr->splt_palettes);
;;;484             info_ptr->splt_palettes = NULL;
;;;485             info_ptr->splt_palettes_num = 0;
;;;486           }
;;;487           info_ptr->valid &= ~PNG_INFO_sPLT;
;;;488       }
;;;489    }
;;;490    #endif
;;;491    
;;;492    #if defined(PNG_UNKNOWN_CHUNKS_SUPPORTED)
;;;493    #ifdef PNG_FREE_ME_SUPPORTED
;;;494    if ((mask & PNG_FREE_UNKN) & info_ptr->free_me)
;;;495    #else
;;;496    if (mask & PNG_FREE_UNKN)
;;;497    #endif
;;;498    {
;;;499       if (num != -1)
;;;500       {
;;;501           if(info_ptr->unknown_chunks)
;;;502           {
;;;503              png_free(png_ptr, info_ptr->unknown_chunks[num].data);
;;;504              info_ptr->unknown_chunks[num].data = NULL;
;;;505           }
;;;506       }
;;;507       else
;;;508       {
;;;509           int i;
;;;510    
;;;511           if(info_ptr->unknown_chunks_num)
;;;512           {
;;;513             for (i = 0; i < (int)info_ptr->unknown_chunks_num; i++)
;;;514                png_free_data(png_ptr, info_ptr, PNG_FREE_UNKN, i);
;;;515    
;;;516             png_free(png_ptr, info_ptr->unknown_chunks);
;;;517             info_ptr->unknown_chunks = NULL;
;;;518             info_ptr->unknown_chunks_num = 0;
;;;519           }
;;;520       }
;;;521    }
;;;522    #endif
;;;523    
;;;524    #if defined(PNG_hIST_SUPPORTED)
;;;525    /* free any hIST entry */
;;;526    #ifdef PNG_FREE_ME_SUPPORTED
;;;527    if ((mask & PNG_FREE_HIST)  & info_ptr->free_me)
;;;528    #else
;;;529    if ((mask & PNG_FREE_HIST) && (png_ptr->flags & PNG_FLAG_FREE_HIST))
;;;530    #endif
;;;531    {
;;;532        png_free(png_ptr, info_ptr->hist);
;;;533        info_ptr->hist = NULL;
;;;534        info_ptr->valid &= ~PNG_INFO_hIST;
;;;535    #ifndef PNG_FREE_ME_SUPPORTED
;;;536        png_ptr->flags &= ~PNG_FLAG_FREE_HIST;
;;;537    #endif
;;;538    }
;;;539    #endif
;;;540    
;;;541    /* free any PLTE entry that was internally allocated */
;;;542    #ifdef PNG_FREE_ME_SUPPORTED
;;;543    if ((mask & PNG_FREE_PLTE) & info_ptr->free_me)
;;;544    #else
;;;545    if ((mask & PNG_FREE_PLTE) && (png_ptr->flags & PNG_FLAG_FREE_PLTE))
;;;546    #endif
;;;547    {
;;;548        png_zfree(png_ptr, info_ptr->palette);
;;;549        info_ptr->palette = NULL;
;;;550        info_ptr->valid &= ~PNG_INFO_PLTE;
;;;551    #ifndef PNG_FREE_ME_SUPPORTED
;;;552        png_ptr->flags &= ~PNG_FLAG_FREE_PLTE;
;;;553    #endif
;;;554        info_ptr->num_palette = 0;
;;;555    }
;;;556    
;;;557    #if defined(PNG_INFO_IMAGE_SUPPORTED)
;;;558    /* free any image bits attached to the info structure */
;;;559    #ifdef PNG_FREE_ME_SUPPORTED
;;;560    if ((mask & PNG_FREE_ROWS) & info_ptr->free_me)
;;;561    #else
;;;562    if (mask & PNG_FREE_ROWS)
;;;563    #endif
;;;564    {
;;;565        if(info_ptr->row_pointers)
;;;566        {
;;;567           int row;
;;;568           for (row = 0; row < (int)info_ptr->height; row++)
;;;569           {
;;;570              png_free(png_ptr, info_ptr->row_pointers[row]);
;;;571              info_ptr->row_pointers[row]=NULL;
;;;572           }
;;;573           png_free(png_ptr, info_ptr->row_pointers);
;;;574           info_ptr->row_pointers=NULL;
;;;575        }
;;;576        info_ptr->valid &= ~PNG_INFO_IDAT;
;;;577    }
;;;578    #endif
;;;579    
;;;580    #ifdef PNG_FREE_ME_SUPPORTED
;;;581       if(num == -1)
;;;582         info_ptr->free_me &= ~mask;
;;;583       else
;;;584         info_ptr->free_me &= ~(mask & ~PNG_FREE_MUL);
;;;585    #endif
;;;586    }
0001b4  e8bd81f0          POP      {r4-r8,pc}
                  |L1.440|
0001b8  f4064080          AND      r0,r6,#0x4000         ;354
0001bc  f8d410b8          LDR      r1,[r4,#0xb8]         ;354
0001c0  4008              ANDS     r0,r0,r1              ;354
0001c2  b350              CBZ      r0,|L1.538|
0001c4  1c68              ADDS     r0,r5,#1              ;359
0001c6  b198              CBZ      r0,|L1.496|
0001c8  6ba0              LDR      r0,[r4,#0x38]         ;361
0001ca  b330              CBZ      r0,|L1.538|
0001cc  6ba0              LDR      r0,[r4,#0x38]         ;361
0001ce  eb001005          ADD      r0,r0,r5,LSL #4       ;361
0001d2  6840              LDR      r0,[r0,#4]            ;361
0001d4  b308              CBZ      r0,|L1.538|
0001d6  6ba0              LDR      r0,[r4,#0x38]         ;363
0001d8  eb001005          ADD      r0,r0,r5,LSL #4       ;363
0001dc  6841              LDR      r1,[r0,#4]            ;363
0001de  4640              MOV      r0,r8                 ;363
0001e0  f7fffffe          BL       png_free
0001e4  2000              MOVS     r0,#0                 ;364
0001e6  6ba1              LDR      r1,[r4,#0x38]         ;364
0001e8  eb011105          ADD      r1,r1,r5,LSL #4       ;364
0001ec  6048              STR      r0,[r1,#4]            ;364
0001ee  e014              B        |L1.538|
                  |L1.496|
0001f0  2700              MOVS     r7,#0                 ;370
0001f2  e007              B        |L1.516|
                  |L1.500|
0001f4  463b              MOV      r3,r7                 ;371
0001f6  f44f4280          MOV      r2,#0x4000            ;371
0001fa  4621              MOV      r1,r4                 ;371
0001fc  4640              MOV      r0,r8                 ;371
0001fe  f7fffffe          BL       png_free_data
000202  1c7f              ADDS     r7,r7,#1              ;370
                  |L1.516|
000204  6b20              LDR      r0,[r4,#0x30]         ;370
000206  42b8              CMP      r0,r7                 ;370
000208  dcf4              BGT      |L1.500|
00020a  4640              MOV      r0,r8                 ;372
00020c  6ba1              LDR      r1,[r4,#0x38]         ;372
00020e  f7fffffe          BL       png_free
000212  2000              MOVS     r0,#0                 ;373
000214  63a0              STR      r0,[r4,#0x38]         ;373
000216  6320              STR      r0,[r4,#0x30]         ;374
000218  bf00              NOP                            ;375
                  |L1.538|
00021a  f4065000          AND      r0,r6,#0x2000         ;382
00021e  f8d410b8          LDR      r1,[r4,#0xb8]         ;382
000222  4008              ANDS     r0,r0,r1              ;382
000224  b148              CBZ      r0,|L1.570|
000226  4640              MOV      r0,r8                 ;387
000228  6ce1              LDR      r1,[r4,#0x4c]         ;387
00022a  f7fffffe          BL       png_free
00022e  68a0              LDR      r0,[r4,#8]            ;388
000230  f0200010          BIC      r0,r0,#0x10           ;388
000234  60a0              STR      r0,[r4,#8]            ;388
000236  2000              MOVS     r0,#0                 ;392
000238  64e0              STR      r0,[r4,#0x4c]         ;392
                  |L1.570|
00023a  f4067080          AND      r0,r6,#0x100          ;399
00023e  f8d410b8          LDR      r1,[r4,#0xb8]         ;399
000242  4008              ANDS     r0,r0,r1              ;399
000244  b118              CBZ      r0,|L1.590|
000246  68a0              LDR      r0,[r4,#8]            ;410
000248  f4204080          BIC      r0,r0,#0x4000         ;410
00024c  60a0              STR      r0,[r4,#8]            ;410
                  |L1.590|
00024e  f0060080          AND      r0,r6,#0x80           ;417
000252  f8d410b8          LDR      r1,[r4,#0xb8]         ;417
000256  4008              ANDS     r0,r0,r1              ;417
000258  b370              CBZ      r0,|L1.696|
00025a  f8541fa0          LDR      r1,[r4,#0xa0]!        ;422
00025e  4640              MOV      r0,r8                 ;422
000260  f7fffffe          BL       png_free
000264  4640              MOV      r0,r8                 ;423
000266  68e1              LDR      r1,[r4,#0xc]          ;423
000268  f7fffffe          BL       png_free
00026c  2000              MOVS     r0,#0                 ;424
00026e  6020              STR      r0,[r4,#0]            ;424
000270  60e0              STR      r0,[r4,#0xc]          ;425
000272  6920              LDR      r0,[r4,#0x10]         ;426
000274  3ca0              SUBS     r4,r4,#0xa0           ;426
000276  b1d8              CBZ      r0,|L1.688|
000278  2700              MOVS     r7,#0                 ;429
00027a  e00c              B        |L1.662|
                  |L1.636|
00027c  f8d400b0          LDR      r0,[r4,#0xb0]         ;431
000280  f8501027          LDR      r1,[r0,r7,LSL #2]     ;431
000284  4640              MOV      r0,r8                 ;431
000286  f7fffffe          BL       png_free
00028a  2000              MOVS     r0,#0                 ;432
00028c  f8d410b0          LDR      r1,[r4,#0xb0]         ;432
000290  f8410027          STR      r0,[r1,r7,LSL #2]     ;432
000294  1c7f              ADDS     r7,r7,#1              ;429
                  |L1.662|
000296  f89400b5          LDRB     r0,[r4,#0xb5]         ;429
00029a  42b8              CMP      r0,r7                 ;429
00029c  dcee              BGT      |L1.636|
00029e  4640              MOV      r0,r8                 ;434
0002a0  f8d410b0          LDR      r1,[r4,#0xb0]         ;434
0002a4  f7fffffe          BL       png_free
0002a8  2000              MOVS     r0,#0                 ;435
0002aa  f8c400b0          STR      r0,[r4,#0xb0]         ;435
0002ae  bf00              NOP                            ;436
                  |L1.688|
0002b0  68a0              LDR      r0,[r4,#8]            ;437
0002b2  f4206080          BIC      r0,r0,#0x400          ;437
0002b6  60a0              STR      r0,[r4,#8]            ;437
                  |L1.696|
0002b8  f0060010          AND      r0,r6,#0x10           ;444
0002bc  f8d410b8          LDR      r1,[r4,#0xb8]         ;444
0002c0  4008              ANDS     r0,r0,r1              ;444
0002c2  b190              CBZ      r0,|L1.746|
0002c4  4640              MOV      r0,r8                 ;449
0002c6  f8d410c4          LDR      r1,[r4,#0xc4]         ;449
0002ca  f7fffffe          BL       png_free
0002ce  4640              MOV      r0,r8                 ;450
0002d0  f8d410c8          LDR      r1,[r4,#0xc8]         ;450
0002d4  f7fffffe          BL       png_free
0002d8  2000              MOVS     r0,#0                 ;451
0002da  f8c400c4          STR      r0,[r4,#0xc4]         ;451
0002de  f8c400c8          STR      r0,[r4,#0xc8]         ;452
0002e2  68a0              LDR      r0,[r4,#8]            ;453
0002e4  f4205080          BIC      r0,r0,#0x1000         ;453
0002e8  60a0              STR      r0,[r4,#8]            ;453
                  |L1.746|
0002ea  f0060020          AND      r0,r6,#0x20           ;460
0002ee  f8d410b8          LDR      r1,[r4,#0xb8]         ;460
0002f2  4008              ANDS     r0,r0,r1              ;460
0002f4  b3e0              CBZ      r0,|L1.880|
0002f6  1c68              ADDS     r0,r5,#1              ;465
0002f8  b1e0              CBZ      r0,|L1.820|
0002fa  f8d400d4          LDR      r0,[r4,#0xd4]         ;467
0002fe  b3b8              CBZ      r0,|L1.880|
000300  f8540fd4          LDR      r0,[r4,#0xd4]!        ;469
000304  eb001005          ADD      r0,r0,r5,LSL #4       ;469
000308  6801              LDR      r1,[r0,#0]            ;469
00030a  4640              MOV      r0,r8                 ;469
00030c  f7fffffe          BL       png_free
000310  6820              LDR      r0,[r4,#0]            ;470
000312  eb001005          ADD      r0,r0,r5,LSL #4       ;470
000316  6881              LDR      r1,[r0,#8]            ;470
000318  4640              MOV      r0,r8                 ;470
00031a  f7fffffe          BL       png_free
00031e  2000              MOVS     r0,#0                 ;471
000320  6821              LDR      r1,[r4,#0]            ;471
000322  eb011105          ADD      r1,r1,r5,LSL #4       ;471
000326  6008              STR      r0,[r1,#0]            ;471
000328  f85419d4          LDR      r1,[r4],#-0xd4        ;472
00032c  eb011105          ADD      r1,r1,r5,LSL #4       ;472
000330  6088              STR      r0,[r1,#8]            ;472
000332  e01d              B        |L1.880|
                  |L1.820|
000334  f8d400d8          LDR      r0,[r4,#0xd8]         ;477
000338  b1b0              CBZ      r0,|L1.872|
00033a  2700              MOVS     r7,#0                 ;480
00033c  e006              B        |L1.844|
                  |L1.830|
00033e  463b              MOV      r3,r7                 ;481
000340  2220              MOVS     r2,#0x20              ;481
000342  4621              MOV      r1,r4                 ;481
000344  4640              MOV      r0,r8                 ;481
000346  f7fffffe          BL       png_free_data
00034a  1c7f              ADDS     r7,r7,#1              ;480
                  |L1.844|
00034c  f8d400d8          LDR      r0,[r4,#0xd8]         ;480
000350  42b8              CMP      r0,r7                 ;480
000352  dcf4              BGT      |L1.830|
000354  f8541fd4          LDR      r1,[r4,#0xd4]!        ;483
000358  4640              MOV      r0,r8                 ;483
00035a  f7fffffe          BL       png_free
00035e  2000              MOVS     r0,#0                 ;484
000360  6020              STR      r0,[r4,#0]            ;484
000362  6060              STR      r0,[r4,#4]            ;485
000364  3cd4              SUBS     r4,r4,#0xd4           ;485
000366  bf00              NOP                            ;486
                  |L1.872|
000368  68a0              LDR      r0,[r4,#8]            ;487
00036a  f4205000          BIC      r0,r0,#0x2000         ;487
00036e  60a0              STR      r0,[r4,#8]            ;487
                  |L1.880|
000370  f4067000          AND      r0,r6,#0x200          ;494
000374  f8d410b8          LDR      r1,[r4,#0xb8]         ;494
000378  4008              ANDS     r0,r0,r1              ;494
00037a  b390              CBZ      r0,|L1.994|
00037c  1c68              ADDS     r0,r5,#1              ;499
00037e  b1a8              CBZ      r0,|L1.940|
000380  f8d400bc          LDR      r0,[r4,#0xbc]         ;501
000384  b368              CBZ      r0,|L1.994|
000386  eb050285          ADD      r2,r5,r5,LSL #2       ;503
00038a  f8d400bc          LDR      r0,[r4,#0xbc]         ;503
00038e  eb000082          ADD      r0,r0,r2,LSL #2       ;503
000392  6881              LDR      r1,[r0,#8]            ;503
000394  4640              MOV      r0,r8                 ;503
000396  f7fffffe          BL       png_free
00039a  2000              MOVS     r0,#0                 ;504
00039c  eb050285          ADD      r2,r5,r5,LSL #2       ;504
0003a0  f8d410bc          LDR      r1,[r4,#0xbc]         ;504
0003a4  eb010182          ADD      r1,r1,r2,LSL #2       ;504
0003a8  6088              STR      r0,[r1,#8]            ;504
0003aa  e01a              B        |L1.994|
                  |L1.940|
0003ac  f8d400c0          LDR      r0,[r4,#0xc0]         ;511
0003b0  b1b0              CBZ      r0,|L1.992|
0003b2  2700              MOVS     r7,#0                 ;513
0003b4  e007              B        |L1.966|
                  |L1.950|
0003b6  463b              MOV      r3,r7                 ;514
0003b8  f44f7200          MOV      r2,#0x200             ;514
0003bc  4621              MOV      r1,r4                 ;514
0003be  4640              MOV      r0,r8                 ;514
0003c0  f7fffffe          BL       png_free_data
0003c4  1c7f              ADDS     r7,r7,#1              ;513
                  |L1.966|
0003c6  f8d400c0          LDR      r0,[r4,#0xc0]         ;513
0003ca  42b8              CMP      r0,r7                 ;513
0003cc  dcf3              BGT      |L1.950|
0003ce  f8541fbc          LDR      r1,[r4,#0xbc]!        ;516
0003d2  4640              MOV      r0,r8                 ;516
0003d4  f7fffffe          BL       png_free
0003d8  2000              MOVS     r0,#0                 ;517
0003da  6020              STR      r0,[r4,#0]            ;517
0003dc  6060              STR      r0,[r4,#4]            ;518
0003de  3cbc              SUBS     r4,r4,#0xbc           ;518
                  |L1.992|
0003e0  bf00              NOP                            ;520
                  |L1.994|
0003e2  f0060008          AND      r0,r6,#8              ;527
0003e6  f8d410b8          LDR      r1,[r4,#0xb8]         ;527
0003ea  4008              ANDS     r0,r0,r1              ;527
0003ec  b148              CBZ      r0,|L1.1026|
0003ee  4640              MOV      r0,r8                 ;532
0003f0  6fe1              LDR      r1,[r4,#0x7c]         ;532
0003f2  f7fffffe          BL       png_free
0003f6  2000              MOVS     r0,#0                 ;533
0003f8  67e0              STR      r0,[r4,#0x7c]         ;533
0003fa  68a0              LDR      r0,[r4,#8]            ;534
0003fc  f0200040          BIC      r0,r0,#0x40           ;534
000400  60a0              STR      r0,[r4,#8]            ;534
                  |L1.1026|
000402  f4065080          AND      r0,r6,#0x1000         ;543
000406  e027              B        |L1.1112|
                  |L1.1032|
000408  546f6f20          DCB      "Too many bytes for PNG signature.",0
00040c  6d616e79
000410  20627974
000414  65732066
000418  6f722050
00041c  4e472073
000420  69676e61
000424  74757265
000428  2e00    
00042a  00                DCB      0
00042b  00                DCB      0
                  |L1.1068|
00042c  89504e47          DCB      137,"PNG\r\n",26,"\n"
000430  0d0a1a0a
                  |L1.1076|
000434  506f7465          DCB      "Potential overflow in png_zalloc()",0
000438  6e746961
00043c  6c206f76
000440  6572666c
000444  6f772069
000448  6e20706e
00044c  675f7a61
000450  6c6c6f63
000454  282900  
000457  00                DCB      0
                  |L1.1112|
000458  f8d410b8          LDR      r1,[r4,#0xb8]         ;543
00045c  4008              ANDS     r0,r0,r1              ;543
00045e  b158              CBZ      r0,|L1.1144|
000460  4640              MOV      r0,r8                 ;548
000462  6921              LDR      r1,[r4,#0x10]         ;548
000464  f7fffffe          BL       png_zfree
000468  2000              MOVS     r0,#0                 ;549
00046a  6120              STR      r0,[r4,#0x10]         ;549
00046c  68a0              LDR      r0,[r4,#8]            ;550
00046e  f0200008          BIC      r0,r0,#8              ;550
000472  60a0              STR      r0,[r4,#8]            ;550
000474  2000              MOVS     r0,#0                 ;554
000476  82a0              STRH     r0,[r4,#0x14]         ;554
                  |L1.1144|
000478  f0060040          AND      r0,r6,#0x40           ;560
00047c  f8d410b8          LDR      r1,[r4,#0xb8]         ;560
000480  4008              ANDS     r0,r0,r1              ;560
000482  b308              CBZ      r0,|L1.1224|
000484  f8d400f8          LDR      r0,[r4,#0xf8]         ;565
000488  b1d0              CBZ      r0,|L1.1216|
00048a  2700              MOVS     r7,#0                 ;568
00048c  e00c              B        |L1.1192|
                  |L1.1166|
00048e  f8d400f8          LDR      r0,[r4,#0xf8]         ;570
000492  f8501027          LDR      r1,[r0,r7,LSL #2]     ;570
000496  4640              MOV      r0,r8                 ;570
000498  f7fffffe          BL       png_free
00049c  2000              MOVS     r0,#0                 ;571
00049e  f8d410f8          LDR      r1,[r4,#0xf8]         ;571
0004a2  f8410027          STR      r0,[r1,r7,LSL #2]     ;571
0004a6  1c7f              ADDS     r7,r7,#1              ;568
                  |L1.1192|
0004a8  6860              LDR      r0,[r4,#4]            ;568
0004aa  42b8              CMP      r0,r7                 ;568
0004ac  dcef              BGT      |L1.1166|
0004ae  4640              MOV      r0,r8                 ;573
0004b0  f8d410f8          LDR      r1,[r4,#0xf8]         ;573
0004b4  f7fffffe          BL       png_free
0004b8  2000              MOVS     r0,#0                 ;574
0004ba  f8c400f8          STR      r0,[r4,#0xf8]         ;574
0004be  bf00              NOP                            ;575
                  |L1.1216|
0004c0  68a0              LDR      r0,[r4,#8]            ;576
0004c2  f4204000          BIC      r0,r0,#0x8000         ;576
0004c6  60a0              STR      r0,[r4,#8]            ;576
                  |L1.1224|
0004c8  1c68              ADDS     r0,r5,#1              ;581
0004ca  b928              CBNZ     r0,|L1.1240|
0004cc  f8d400b8          LDR      r0,[r4,#0xb8]         ;582
0004d0  43b0              BICS     r0,r0,r6              ;582
0004d2  f8c400b8          STR      r0,[r4,#0xb8]         ;582
0004d6  e008              B        |L1.1258|
                  |L1.1240|
0004d8  f2442120          MOV      r1,#0x4220            ;584
0004dc  ea260101          BIC      r1,r6,r1              ;584
0004e0  f8d400b8          LDR      r0,[r4,#0xb8]         ;584
0004e4  4388              BICS     r0,r0,r1              ;584
0004e6  f8c400b8          STR      r0,[r4,#0xb8]         ;584
                  |L1.1258|
0004ea  bf00              NOP      
0004ec  e662              B        |L1.436|
;;;587    
                          ENDP

                  png_info_destroy PROC
;;;592    void /* PRIVATE */
;;;593    png_info_destroy(png_structp png_ptr, png_infop info_ptr)
0004ee  b513              PUSH     {r0,r1,r4,lr}
;;;594    {
0004f0  4604              MOV      r4,r0
;;;595       png_debug(1, "in png_info_destroy\n");
;;;596    
;;;597       png_free_data(png_ptr, info_ptr, PNG_FREE_ALL, -1);
0004f2  f04f33ff          MOV      r3,#0xffffffff
0004f6  0c5a              LSRS     r2,r3,#17
0004f8  4620              MOV      r0,r4
0004fa  9901              LDR      r1,[sp,#4]
0004fc  f7fffffe          BL       png_free_data
;;;598    
;;;599    #if defined(PNG_UNKNOWN_CHUNKS_SUPPORTED)
;;;600       if (png_ptr->num_chunk_list)
000500  f8d4035c          LDR      r0,[r4,#0x35c]
000504  b148              CBZ      r0,|L1.1306|
;;;601       {
;;;602           png_free(png_ptr, png_ptr->chunk_list);
000506  4620              MOV      r0,r4
000508  f8d41360          LDR      r1,[r4,#0x360]
00050c  f7fffffe          BL       png_free
;;;603           png_ptr->chunk_list=NULL;
000510  2000              MOVS     r0,#0
000512  f8c40360          STR      r0,[r4,#0x360]
;;;604           png_ptr->num_chunk_list=0;
000516  f8c4035c          STR      r0,[r4,#0x35c]
                  |L1.1306|
;;;605       }
;;;606    #endif
;;;607    
;;;608       png_info_init_3(&info_ptr, png_sizeof(png_info));
00051a  f44f7190          MOV      r1,#0x120
00051e  a801              ADD      r0,sp,#4
000520  f7fffffe          BL       png_info_init_3
;;;609    }
000524  bd1c              POP      {r2-r4,pc}
;;;610    #endif /* defined(PNG_READ_SUPPORTED) || defined(PNG_WRITE_SUPPORTED) */
                          ENDP

                  png_destroy_info_struct PROC
;;;267    void PNGAPI
;;;268    png_destroy_info_struct(png_structp png_ptr, png_infopp info_ptr_ptr)
000526  b570              PUSH     {r4-r6,lr}
;;;269    {
000528  4604              MOV      r4,r0
00052a  460d              MOV      r5,r1
;;;270       png_infop info_ptr = NULL;
00052c  2600              MOVS     r6,#0
;;;271       if(png_ptr == NULL) return;
00052e  b904              CBNZ     r4,|L1.1330|
                  |L1.1328|
;;;272    
;;;273       png_debug(1, "in png_destroy_info_struct\n");
;;;274       if (info_ptr_ptr != NULL)
;;;275          info_ptr = *info_ptr_ptr;
;;;276    
;;;277       if (info_ptr != NULL)
;;;278       {
;;;279          png_info_destroy(png_ptr, info_ptr);
;;;280    
;;;281    #ifdef PNG_USER_MEM_SUPPORTED
;;;282          png_destroy_struct_2((png_voidp)info_ptr, png_ptr->free_fn,
;;;283              png_ptr->mem_ptr);
;;;284    #else
;;;285          png_destroy_struct((png_voidp)info_ptr);
;;;286    #endif
;;;287          *info_ptr_ptr = NULL;
;;;288       }
;;;289    }
000530  bd70              POP      {r4-r6,pc}
                  |L1.1330|
000532  b105              CBZ      r5,|L1.1334|
000534  682e              LDR      r6,[r5,#0]            ;275
                  |L1.1334|
000536  b166              CBZ      r6,|L1.1362|
000538  4631              MOV      r1,r6                 ;279
00053a  4620              MOV      r0,r4                 ;279
00053c  f7fffffe          BL       png_info_destroy
000540  4630              MOV      r0,r6                 ;282
000542  f8d4237c          LDR      r2,[r4,#0x37c]        ;282
000546  f8d41384          LDR      r1,[r4,#0x384]        ;282
00054a  f7fffffe          BL       png_destroy_struct_2
00054e  2000              MOVS     r0,#0                 ;287
000550  6028              STR      r0,[r5,#0]            ;287
                  |L1.1362|
000552  bf00              NOP      
000554  e7ec              B        |L1.1328|
;;;290    
                          ENDP

                  png_info_init PROC
;;;297    void PNGAPI
;;;298    png_info_init(png_infop info_ptr)
000556  b501              PUSH     {r0,lr}
;;;299    {
;;;300       /* We only come here via pre-1.0.12-compiled applications */
;;;301       png_info_init_3(&info_ptr, 0);
000558  2100              MOVS     r1,#0
00055a  4668              MOV      r0,sp
00055c  f7fffffe          BL       png_info_init_3
;;;302    }
000560  bd08              POP      {r3,pc}
;;;303    #endif
                          ENDP

                  png_data_freer PROC
;;;326    void PNGAPI
;;;327    png_data_freer(png_structp png_ptr, png_infop info_ptr,
000562  e92d41f0          PUSH     {r4-r8,lr}
;;;328       int freer, png_uint_32 mask)
;;;329    {
000566  4607              MOV      r7,r0
000568  460c              MOV      r4,r1
00056a  4615              MOV      r5,r2
00056c  461e              MOV      r6,r3
;;;330       png_debug(1, "in png_data_freer\n");
;;;331       if (png_ptr == NULL || info_ptr == NULL)
00056e  b107              CBZ      r7,|L1.1394|
000570  b90c              CBNZ     r4,|L1.1398|
                  |L1.1394|
;;;332          return;
;;;333       if(freer == PNG_DESTROY_WILL_FREE_DATA)
;;;334          info_ptr->free_me |= mask;
;;;335       else if(freer == PNG_USER_WILL_FREE_DATA)
;;;336          info_ptr->free_me &= ~mask;
;;;337       else
;;;338          png_warning(png_ptr,
;;;339             "Unknown freer parameter in png_data_freer.");
;;;340    }
000572  e8bd81f0          POP      {r4-r8,pc}
                  |L1.1398|
000576  2d01              CMP      r5,#1                 ;333
000578  d105              BNE      |L1.1414|
00057a  f8d400b8          LDR      r0,[r4,#0xb8]         ;334
00057e  4330              ORRS     r0,r0,r6              ;334
000580  f8c400b8          STR      r0,[r4,#0xb8]         ;334
000584  e00b              B        |L1.1438|
                  |L1.1414|
000586  2d02              CMP      r5,#2                 ;335
000588  d105              BNE      |L1.1430|
00058a  f8d400b8          LDR      r0,[r4,#0xb8]         ;336
00058e  43b0              BICS     r0,r0,r6              ;336
000590  f8c400b8          STR      r0,[r4,#0xb8]         ;336
000594  e003              B        |L1.1438|
                  |L1.1430|
000596  a130              ADR      r1,|L1.1624|
000598  4638              MOV      r0,r7                 ;338
00059a  f7fffffe          BL       png_warning
                  |L1.1438|
00059e  bf00              NOP      
0005a0  e7e7              B        |L1.1394|
;;;341    #endif
                          ENDP

                  png_get_io_ptr PROC
;;;616    png_voidp PNGAPI
;;;617    png_get_io_ptr(png_structp png_ptr)
0005a2  4601              MOV      r1,r0
;;;618    {
;;;619       if(png_ptr == NULL) return (NULL);
0005a4  b909              CBNZ     r1,|L1.1450|
0005a6  2000              MOVS     r0,#0
                  |L1.1448|
;;;620       return (png_ptr->io_ptr);
;;;621    }
0005a8  4770              BX       lr
                  |L1.1450|
0005aa  f8d10194          LDR      r0,[r1,#0x194]        ;620
0005ae  e7fb              B        |L1.1448|
;;;622    
                          ENDP

                  png_get_copyright PROC
;;;700    png_charp PNGAPI
;;;701    png_get_copyright(png_structp png_ptr)
0005b0  b501              PUSH     {r0,lr}
;;;702    {
;;;703       if (&png_ptr != NULL)  /* silence compiler warning about unused png_ptr */
0005b2  4668              MOV      r0,sp
0005b4  b108              CBZ      r0,|L1.1466|
;;;704       return ((png_charp) "\n libpng version 1.2.15 - January 5, 2007\n\
0005b6  4833              LDR      r0,|L1.1668|
                  |L1.1464|
;;;705       Copyright (c) 1998-2007 Glenn Randers-Pehrson\n\
;;;706       Copyright (c) 1996-1997 Andreas Dilger\n\
;;;707       Copyright (c) 1995-1996 Guy Eric Schalnat, Group 42, Inc.\n");
;;;708       return ((png_charp) "");
;;;709    }
0005b8  bd08              POP      {r3,pc}
                  |L1.1466|
0005ba  a033              ADR      r0,|L1.1672|
0005bc  e7fc              B        |L1.1464|
;;;710    
                          ENDP

                  png_get_libpng_ver PROC
;;;719    png_charp PNGAPI
;;;720    png_get_libpng_ver(png_structp png_ptr)
0005be  b501              PUSH     {r0,lr}
;;;721    {
;;;722       /* Version of *.c files used when building libpng */
;;;723       if (&png_ptr != NULL)  /* silence compiler warning about unused png_ptr */
0005c0  4668              MOV      r0,sp
0005c2  b108              CBZ      r0,|L1.1480|
;;;724          return ((png_charp) PNG_LIBPNG_VER_STRING);
0005c4  a031              ADR      r0,|L1.1676|
                  |L1.1478|
;;;725       return ((png_charp) "");
;;;726    }
0005c6  bd08              POP      {r3,pc}
                  |L1.1480|
0005c8  a02f              ADR      r0,|L1.1672|
0005ca  e7fc              B        |L1.1478|
;;;727    
                          ENDP

                  png_get_header_ver PROC
;;;728    png_charp PNGAPI
;;;729    png_get_header_ver(png_structp png_ptr)
0005cc  b501              PUSH     {r0,lr}
;;;730    {
;;;731       /* Version of *.h files used when building libpng */
;;;732       if (&png_ptr != NULL)  /* silence compiler warning about unused png_ptr */
0005ce  4668              MOV      r0,sp
0005d0  b108              CBZ      r0,|L1.1494|
;;;733          return ((png_charp) PNG_LIBPNG_VER_STRING);
0005d2  a02e              ADR      r0,|L1.1676|
                  |L1.1492|
;;;734       return ((png_charp) "");
;;;735    }
0005d4  bd08              POP      {r3,pc}
                  |L1.1494|
0005d6  a02c              ADR      r0,|L1.1672|
0005d8  e7fc              B        |L1.1492|
;;;736    
                          ENDP

                  png_get_header_version PROC
;;;737    png_charp PNGAPI
;;;738    png_get_header_version(png_structp png_ptr)
0005da  b501              PUSH     {r0,lr}
;;;739    {
;;;740       /* Returns longer string containing both version and date */
;;;741       if (&png_ptr != NULL)  /* silence compiler warning about unused png_ptr */
0005dc  4668              MOV      r0,sp
0005de  b108              CBZ      r0,|L1.1508|
;;;742          return ((png_charp) PNG_HEADER_VERSION_STRING);
0005e0  a02c              ADR      r0,|L1.1684|
                  |L1.1506|
;;;743       return ((png_charp) "");
;;;744    }
0005e2  bd08              POP      {r3,pc}
                  |L1.1508|
0005e4  a028              ADR      r0,|L1.1672|
0005e6  e7fc              B        |L1.1506|
;;;745    
                          ENDP

                  png_handle_as_unknown PROC
;;;748    int PNGAPI
;;;749    png_handle_as_unknown(png_structp png_ptr, png_bytep chunk_name)
0005e8  e92d41f0          PUSH     {r4-r8,lr}
;;;750    {
0005ec  4604              MOV      r4,r0
0005ee  460e              MOV      r6,r1
;;;751       /* check chunk_name and return "keep" value if it's on the list, else 0 */
;;;752       int i;
;;;753       png_bytep p;
;;;754       if((png_ptr == NULL && chunk_name == NULL) || png_ptr->num_chunk_list<=0)
0005f0  b904              CBNZ     r4,|L1.1524|
0005f2  b11e              CBZ      r6,|L1.1532|
                  |L1.1524|
0005f4  f8d4035c          LDR      r0,[r4,#0x35c]
0005f8  2800              CMP      r0,#0
0005fa  dc02              BGT      |L1.1538|
                  |L1.1532|
;;;755          return 0;
0005fc  2000              MOVS     r0,#0
                  |L1.1534|
;;;756       p=png_ptr->chunk_list+png_ptr->num_chunk_list*5-5;
;;;757       for (i = png_ptr->num_chunk_list; i; i--, p-=5)
;;;758          if (!png_memcmp(chunk_name, p, 4))
;;;759            return ((int)*(p+4));
;;;760       return 0;
;;;761    }
0005fe  e8bd81f0          POP      {r4-r8,pc}
                  |L1.1538|
000602  f8d4135c          LDR      r1,[r4,#0x35c]        ;756
000606  eb010181          ADD      r1,r1,r1,LSL #2       ;756
00060a  f8d40360          LDR      r0,[r4,#0x360]        ;756
00060e  4408              ADD      r0,r0,r1              ;756
000610  1f45              SUBS     r5,r0,#5              ;756
000612  f8d4735c          LDR      r7,[r4,#0x35c]        ;757
000616  e009              B        |L1.1580|
                  |L1.1560|
000618  2204              MOVS     r2,#4                 ;758
00061a  4629              MOV      r1,r5                 ;758
00061c  4630              MOV      r0,r6                 ;758
00061e  f7fffffe          BL       memcmp
000622  b908              CBNZ     r0,|L1.1576|
000624  7928              LDRB     r0,[r5,#4]            ;759
000626  e7ea              B        |L1.1534|
                  |L1.1576|
000628  1e7f              SUBS     r7,r7,#1              ;757
00062a  1f6d              SUBS     r5,r5,#5              ;757
                  |L1.1580|
00062c  2f00              CMP      r7,#0                 ;757
00062e  d1f3              BNE      |L1.1560|
000630  2000              MOVS     r0,#0                 ;760
000632  e7e4              B        |L1.1534|
;;;762    #endif
                          ENDP

                  png_reset_zstream PROC
;;;765    int PNGAPI
;;;766    png_reset_zstream(png_structp png_ptr)
000634  b510              PUSH     {r4,lr}
;;;767    {
000636  4604              MOV      r4,r0
;;;768       if (png_ptr == NULL) return Z_STREAM_ERROR;
000638  b914              CBNZ     r4,|L1.1600|
00063a  f06f0001          MVN      r0,#1
                  |L1.1598|
;;;769       return (inflateReset(&png_ptr->zstream));
;;;770    }
00063e  bd10              POP      {r4,pc}
                  |L1.1600|
000640  f50470da          ADD      r0,r4,#0x1b4          ;769
000644  f7fffffe          BL       inflateReset
000648  e7f9              B        |L1.1598|
;;;771    #endif /* defined(PNG_READ_SUPPORTED) || defined(PNG_WRITE_SUPPORTED) */
                          ENDP

                  png_access_version_number PROC
;;;774    png_uint_32 PNGAPI
;;;775    png_access_version_number(void)
00064a  f24270e7          MOV      r0,#0x27e7
;;;776    {
;;;777       /* Version of *.c files used when building libpng */
;;;778       return((png_uint_32) PNG_LIBPNG_VER);
;;;779    }
00064e  4770              BX       lr
;;;780    
                          ENDP

                  png_mmx_support PROC
;;;835    int PNGAPI
;;;836    png_mmx_support(void)
000650  f04f30ff          MOV      r0,#0xffffffff
;;;837    {
;;;838        return -1;
;;;839    }
000654  4770              BX       lr
;;;840    #endif
                          ENDP

000656  0000              DCW      0x0000
                  |L1.1624|
000658  556e6b6e          DCB      "Unknown freer parameter in png_data_freer.",0
00065c  6f776e20
000660  66726565
000664  72207061
000668  72616d65
00066c  74657220
000670  696e2070
000674  6e675f64
000678  6174615f
00067c  66726565
000680  722e00  
000683  00                DCB      0
                  |L1.1668|
                          DCD      ||.conststring||
                  |L1.1672|
000688  00                DCB      0
000689  00                DCB      0
00068a  00                DCB      0
00068b  00                DCB      0
                  |L1.1676|
00068c  312e322e          DCB      "1.2.15",0
000690  313500  
000693  00                DCB      0
                  |L1.1684|
000694  206c6962          DCB      " libpng version 1.2.15 - January 5, 2007 (header)\n",0
000698  706e6720
00069c  76657273
0006a0  696f6e20
0006a4  312e322e
0006a8  3135202d
0006ac  204a616e
0006b0  75617279
0006b4  20352c20
0006b8  32303037
0006bc  20286865
0006c0  61646572
0006c4  290a00  
0006c7  00                DCB      0

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  png_libpng_ver
000000  312e322e          DCB      0x31,0x2e,0x32,0x2e
000004  31350000          DCB      0x31,0x35,0x00,0x00
                          %        8
000010  0000              DCB      0x00,0x00
                  png_sig
000012  8950              DCB      0x89,0x50
000014  4e470d0a          DCB      0x4e,0x47,0x0d,0x0a
000018  1a0a              DCB      0x1a,0x0a
                  png_IHDR
00001a  4948              DCB      0x49,0x48
00001c  445200            DCB      0x44,0x52,0x00
                  png_IDAT
00001f  49                DCB      0x49
000020  44415400          DCB      0x44,0x41,0x54,0x00
                  png_IEND
000024  49454e44          DCB      0x49,0x45,0x4e,0x44
000028  00                DCB      0x00
                  png_PLTE
000029  504c54            DCB      0x50,0x4c,0x54
00002c  4500              DCB      0x45,0x00
                  png_bKGD
00002e  624b              DCB      0x62,0x4b
000030  474400            DCB      0x47,0x44,0x00
                  png_cHRM
000033  63                DCB      0x63
000034  48524d00          DCB      0x48,0x52,0x4d,0x00
                  png_gAMA
000038  67414d41          DCB      0x67,0x41,0x4d,0x41
00003c  00                DCB      0x00
                  png_hIST
00003d  684953            DCB      0x68,0x49,0x53
000040  5400              DCB      0x54,0x00
                  png_iCCP
000042  6943              DCB      0x69,0x43
000044  435000            DCB      0x43,0x50,0x00
                  png_iTXt
000047  69                DCB      0x69
000048  54587400          DCB      0x54,0x58,0x74,0x00
                  png_oFFs
00004c  6f464673          DCB      0x6f,0x46,0x46,0x73
000050  00                DCB      0x00
                  png_pCAL
000051  704341            DCB      0x70,0x43,0x41
000054  4c00              DCB      0x4c,0x00
                  png_sCAL
000056  7343              DCB      0x73,0x43
000058  414c00            DCB      0x41,0x4c,0x00
                  png_pHYs
00005b  70                DCB      0x70
00005c  48597300          DCB      0x48,0x59,0x73,0x00
                  png_sBIT
000060  73424954          DCB      0x73,0x42,0x49,0x54
000064  00                DCB      0x00
                  png_sPLT
000065  73504c            DCB      0x73,0x50,0x4c
000068  5400              DCB      0x54,0x00
                  png_sRGB
00006a  7352              DCB      0x73,0x52
00006c  474200            DCB      0x47,0x42,0x00
                  png_tEXt
00006f  74                DCB      0x74
000070  45587400          DCB      0x45,0x58,0x74,0x00
                  png_tIME
000074  74494d45          DCB      0x74,0x49,0x4d,0x45
000078  00                DCB      0x00
                  png_tRNS
000079  74524e            DCB      0x74,0x52,0x4e
00007c  5300              DCB      0x53,0x00
                  png_zTXt
00007e  7a54              DCB      0x7a,0x54
000080  58740000          DCB      0x58,0x74,0x00,0x00
                  png_pass_start
                          DCD      0x00000000
                          DCD      0x00000004
                          DCD      0x00000000
                          DCD      0x00000002
                          DCD      0x00000000
                          DCD      0x00000001
                          DCD      0x00000000
                  png_pass_inc
                          DCD      0x00000008
                          DCD      0x00000008
                          DCD      0x00000004
                          DCD      0x00000004
                          DCD      0x00000002
                          DCD      0x00000002
                          DCD      0x00000001
                  png_pass_ystart
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000004
                          DCD      0x00000000
                          DCD      0x00000002
                          DCD      0x00000000
                          DCD      0x00000001
                  png_pass_yinc
                          DCD      0x00000008
                          DCD      0x00000008
                          DCD      0x00000008
                          DCD      0x00000004
                          DCD      0x00000004
                          DCD      0x00000002
                          DCD      0x00000002
                  png_pass_mask
                          DCD      0x00000080
                          DCD      0x00000008
                          DCD      0x00000088
                          DCD      0x00000022
                          DCD      0x000000aa
                          DCD      0x00000055
                          DCD      0x000000ff
                  png_pass_dsp_mask
                          DCD      0x000000ff
                          DCD      0x0000000f
                          DCD      0x000000ff
                          DCD      0x00000033
                          DCD      0x000000ff
                          DCD      0x00000055
                          DCD      0x000000ff

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  0a206c69          DCB      "\n libpng version 1.2.15 - January 5, 2007\n   Copyrigh"
000004  62706e67
000008  20766572
00000c  73696f6e
000010  20312e32
000014  2e313520
000018  2d204a61
00001c  6e756172
000020  7920352c
000024  20323030
000028  370a2020
00002c  20436f70
000030  79726967
000034  68      
000035  74202863          DCB      "t (c) 1998-2007 Glenn Randers-Pehrson\n   Copyright (c)"
000039  29203139
00003d  39382d32
000041  30303720
000045  476c656e
000049  6e205261
00004d  6e646572
000051  732d5065
000055  6872736f
000059  6e0a2020
00005d  20436f70
000061  79726967
000065  68742028
000069  6329    
00006b  20313939          DCB      " 1996-1997 Andreas Dilger\n   Copyright (c) 1995-1996 G"
00006f  362d3139
000073  39372041
000077  6e647265
00007b  61732044
00007f  696c6765
000083  720a2020
000087  20436f70
00008b  79726967
00008f  68742028
000093  63292031
000097  3939352d
00009b  31393936
00009f  2047    
0000a1  75792045          DCB      "uy Eric Schalnat, Group 42, Inc.\n",0
0000a5  72696320
0000a9  53636861
0000ad  6c6e6174
0000b1  2c204772
0000b5  6f757020
0000b9  34322c20
0000bd  496e632e
0000c1  0a00    
