; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\pngrutil.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\pngrutil.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\FWlib\inc -I.\user -I.\CM3 -I.\MALLOC -I.\TFT -I.\EMWIN\EMWIN_INC -I.\EMWIN\DEMO -I.\PNG -I.\FATFS -I.\SDIO -I.\USB\inc -I.\USBCFG\inc -IE:\material\GUI\8.STM32·Ü¶·°å-emwin+fatfs+usb\RTE -Id:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.0.0 -Id:\Keil_v5\ARM\CMSIS\Include -Id:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.0.0\Device\Include -D__UVISION_VERSION=514 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\pngrutil.crf PNG\pngrutil.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  png_get_uint_32 PROC
;;;55     png_uint_32 PNGAPI
;;;56     png_get_uint_32(png_bytep buf)
000000  4601              MOV      r1,r0
;;;57     {
;;;58        png_uint_32 i = ((png_uint_32)(*buf) << 24) +
000002  780a              LDRB     r2,[r1,#0]
000004  0612              LSLS     r2,r2,#24
000006  784b              LDRB     r3,[r1,#1]
000008  eb024203          ADD      r2,r2,r3,LSL #16
00000c  788b              LDRB     r3,[r1,#2]
00000e  eb022203          ADD      r2,r2,r3,LSL #8
000012  78cb              LDRB     r3,[r1,#3]
000014  18d0              ADDS     r0,r2,r3
;;;59           ((png_uint_32)(*(buf + 1)) << 16) +
;;;60           ((png_uint_32)(*(buf + 2)) << 8) +
;;;61           (png_uint_32)(*(buf + 3));
;;;62     
;;;63        return (i);
;;;64     }
000016  4770              BX       lr
;;;65     
                          ENDP

                  png_get_uint_31 PROC
;;;45     png_uint_32 PNGAPI
;;;46     png_get_uint_31(png_structp png_ptr, png_bytep buf)
000018  b570              PUSH     {r4-r6,lr}
;;;47     {
00001a  4606              MOV      r6,r0
00001c  460c              MOV      r4,r1
;;;48        png_uint_32 i = png_get_uint_32(buf);
00001e  4620              MOV      r0,r4
000020  f7fffffe          BL       png_get_uint_32
000024  4605              MOV      r5,r0
;;;49        if (i > PNG_UINT_31_MAX)
000026  f1b54f00          CMP      r5,#0x80000000
00002a  d303              BCC      |L1.52|
;;;50          png_error(png_ptr, "PNG unsigned integer out of range.");
00002c  a1fe              ADR      r1,|L1.1064|
00002e  4630              MOV      r0,r6
000030  f7fffffe          BL       png_error
                  |L1.52|
;;;51        return (i);
000034  4628              MOV      r0,r5
;;;52     }
000036  bd70              POP      {r4-r6,pc}
;;;53     #ifndef PNG_READ_BIG_ENDIAN_SUPPORTED
                          ENDP

                  png_get_int_32 PROC
;;;69     png_int_32 PNGAPI
;;;70     png_get_int_32(png_bytep buf)
000038  4601              MOV      r1,r0
;;;71     {
;;;72        png_int_32 i = ((png_int_32)(*buf) << 24) +
00003a  780a              LDRB     r2,[r1,#0]
00003c  0612              LSLS     r2,r2,#24
00003e  784b              LDRB     r3,[r1,#1]
000040  eb024203          ADD      r2,r2,r3,LSL #16
000044  788b              LDRB     r3,[r1,#2]
000046  eb022203          ADD      r2,r2,r3,LSL #8
00004a  78cb              LDRB     r3,[r1,#3]
00004c  18d0              ADDS     r0,r2,r3
;;;73           ((png_int_32)(*(buf + 1)) << 16) +
;;;74           ((png_int_32)(*(buf + 2)) << 8) +
;;;75           (png_int_32)(*(buf + 3));
;;;76     
;;;77        return (i);
;;;78     }
00004e  4770              BX       lr
;;;79     
                          ENDP

                  png_get_uint_16 PROC
;;;81     png_uint_16 PNGAPI
;;;82     png_get_uint_16(png_bytep buf)
000050  4601              MOV      r1,r0
;;;83     {
;;;84        png_uint_16 i = (png_uint_16)(((png_uint_16)(*buf) << 8) +
000052  784a              LDRB     r2,[r1,#1]
000054  780b              LDRB     r3,[r1,#0]
000056  eb022203          ADD      r2,r2,r3,LSL #8
00005a  b290              UXTH     r0,r2
;;;85           (png_uint_16)(*(buf + 1)));
;;;86     
;;;87        return (i);
;;;88     }
00005c  4770              BX       lr
;;;89     #endif /* PNG_READ_BIG_ENDIAN_SUPPORTED */
                          ENDP

                  png_crc_read PROC
;;;92     void /* PRIVATE */
;;;93     png_crc_read(png_structp png_ptr, png_bytep buf, png_size_t length)
00005e  b570              PUSH     {r4-r6,lr}
;;;94     {
000060  4604              MOV      r4,r0
000062  460d              MOV      r5,r1
000064  4616              MOV      r6,r2
;;;95        if(png_ptr == NULL) return;
000066  b904              CBNZ     r4,|L1.106|
                  |L1.104|
;;;96        png_read_data(png_ptr, buf, length);
;;;97        png_calculate_crc(png_ptr, buf, length);
;;;98     }
000068  bd70              POP      {r4-r6,pc}
                  |L1.106|
00006a  4632              MOV      r2,r6                 ;96
00006c  4629              MOV      r1,r5                 ;96
00006e  4620              MOV      r0,r4                 ;96
000070  f7fffffe          BL       png_read_data
000074  4632              MOV      r2,r6                 ;97
000076  4629              MOV      r1,r5                 ;97
000078  4620              MOV      r0,r4                 ;97
00007a  f7fffffe          BL       png_calculate_crc
00007e  bf00              NOP      
000080  e7f2              B        |L1.104|
;;;99     
                          ENDP

                  png_crc_error PROC
;;;140    int /* PRIVATE */
;;;141    png_crc_error(png_structp png_ptr)
000082  b5f8              PUSH     {r3-r7,lr}
;;;142    {
000084  4604              MOV      r4,r0
;;;143       png_byte crc_bytes[4];
;;;144       png_uint_32 crc;
;;;145       int need_crc = 1;
000086  2601              MOVS     r6,#1
;;;146    
;;;147       if (png_ptr->chunk_name[0] & 0x20)                     /* ancillary */
000088  f894025c          LDRB     r0,[r4,#0x25c]
00008c  f0000020          AND      r0,r0,#0x20
000090  b140              CBZ      r0,|L1.164|
;;;148       {
;;;149          if ((png_ptr->flags & PNG_FLAG_CRC_ANCILLARY_MASK) ==
000092  f8b401ac          LDRH     r0,[r4,#0x1ac]
000096  f4007040          AND      r0,r0,#0x300
00009a  f5b07f40          CMP      r0,#0x300
00009e  d107              BNE      |L1.176|
;;;150              (PNG_FLAG_CRC_ANCILLARY_USE | PNG_FLAG_CRC_ANCILLARY_NOWARN))
;;;151             need_crc = 0;
0000a0  2600              MOVS     r6,#0
0000a2  e005              B        |L1.176|
                  |L1.164|
;;;152       }
;;;153       else                                                    /* critical */
;;;154       {
;;;155          if (png_ptr->flags & PNG_FLAG_CRC_CRITICAL_IGNORE)
0000a4  f8b401ac          LDRH     r0,[r4,#0x1ac]
0000a8  f4006000          AND      r0,r0,#0x800
0000ac  b100              CBZ      r0,|L1.176|
;;;156             need_crc = 0;
0000ae  2600              MOVS     r6,#0
                  |L1.176|
;;;157       }
;;;158    
;;;159       png_read_data(png_ptr, crc_bytes, 4);
0000b0  2204              MOVS     r2,#4
0000b2  4669              MOV      r1,sp
0000b4  4620              MOV      r0,r4
0000b6  f7fffffe          BL       png_read_data
;;;160    
;;;161       if (need_crc)
0000ba  b15e              CBZ      r6,|L1.212|
;;;162       {
;;;163          crc = png_get_uint_32(crc_bytes);
0000bc  4668              MOV      r0,sp
0000be  f7fffffe          BL       png_get_uint_32
0000c2  4605              MOV      r5,r0
;;;164          return ((int)(crc != png_ptr->crc));
0000c4  f8d40250          LDR      r0,[r4,#0x250]
0000c8  42a8              CMP      r0,r5
0000ca  d001              BEQ      |L1.208|
0000cc  2001              MOVS     r0,#1
                  |L1.206|
;;;165       }
;;;166       else
;;;167          return (0);
;;;168    }
0000ce  bdf8              POP      {r3-r7,pc}
                  |L1.208|
0000d0  2000              MOVS     r0,#0                 ;164
0000d2  e7fc              B        |L1.206|
                  |L1.212|
0000d4  2000              MOVS     r0,#0                 ;167
0000d6  e7fa              B        |L1.206|
;;;169    
                          ENDP

                  png_crc_finish PROC
;;;104    int /* PRIVATE */
;;;105    png_crc_finish(png_structp png_ptr, png_uint_32 skip)
0000d8  e92d41f0          PUSH     {r4-r8,lr}
;;;106    {
0000dc  4604              MOV      r4,r0
0000de  460e              MOV      r6,r1
;;;107       png_size_t i;
;;;108       png_size_t istop = png_ptr->zbuf_size;
0000e0  f8d471f0          LDR      r7,[r4,#0x1f0]
;;;109    
;;;110       for (i = (png_size_t)skip; i > istop; i -= istop)
0000e4  4635              MOV      r5,r6
0000e6  e006              B        |L1.246|
                  |L1.232|
;;;111       {
;;;112          png_crc_read(png_ptr, png_ptr->zbuf, png_ptr->zbuf_size);
0000e8  4620              MOV      r0,r4
0000ea  f50471f6          ADD      r1,r4,#0x1ec
0000ee  c906              LDM      r1,{r1,r2}
0000f0  f7fffffe          BL       png_crc_read
0000f4  1bed              SUBS     r5,r5,r7              ;110
                  |L1.246|
0000f6  42bd              CMP      r5,r7                 ;110
0000f8  d8f6              BHI      |L1.232|
;;;113       }
;;;114       if (i)
0000fa  b12d              CBZ      r5,|L1.264|
;;;115       {
;;;116          png_crc_read(png_ptr, png_ptr->zbuf, i);
0000fc  462a              MOV      r2,r5
0000fe  4620              MOV      r0,r4
000100  f8d411ec          LDR      r1,[r4,#0x1ec]
000104  f7fffffe          BL       png_crc_read
                  |L1.264|
;;;117       }
;;;118    
;;;119       if (png_crc_error(png_ptr))
000108  4620              MOV      r0,r4
00010a  f7fffffe          BL       png_crc_error
00010e  b1f8              CBZ      r0,|L1.336|
;;;120       {
;;;121          if (((png_ptr->chunk_name[0] & 0x20) &&                /* Ancillary */
000110  f894025c          LDRB     r0,[r4,#0x25c]
000114  f0000020          AND      r0,r0,#0x20
000118  b120              CBZ      r0,|L1.292|
;;;122               !(png_ptr->flags & PNG_FLAG_CRC_ANCILLARY_NOWARN)) ||
00011a  f8b401ac          LDRH     r0,[r4,#0x1ac]
00011e  f4007000          AND      r0,r0,#0x200
000122  b148              CBZ      r0,|L1.312|
                  |L1.292|
;;;123              (!(png_ptr->chunk_name[0] & 0x20) &&             /* Critical  */
000124  f894025c          LDRB     r0,[r4,#0x25c]
000128  f0000020          AND      r0,r0,#0x20
00012c  b948              CBNZ     r0,|L1.322|
;;;124              (png_ptr->flags & PNG_FLAG_CRC_CRITICAL_USE)))
00012e  f8b401ac          LDRH     r0,[r4,#0x1ac]
000132  f4006080          AND      r0,r0,#0x400
000136  b120              CBZ      r0,|L1.322|
                  |L1.312|
;;;125          {
;;;126             png_chunk_warning(png_ptr, "CRC error");
000138  a1c4              ADR      r1,|L1.1100|
00013a  4620              MOV      r0,r4
00013c  f7fffffe          BL       png_chunk_warning
000140  e003              B        |L1.330|
                  |L1.322|
;;;127          }
;;;128          else
;;;129          {
;;;130             png_chunk_error(png_ptr, "CRC error");
000142  a1c2              ADR      r1,|L1.1100|
000144  4620              MOV      r0,r4
000146  f7fffffe          BL       png_chunk_error
                  |L1.330|
;;;131          }
;;;132          return (1);
00014a  2001              MOVS     r0,#1
                  |L1.332|
;;;133       }
;;;134    
;;;135       return (0);
;;;136    }
00014c  e8bd81f0          POP      {r4-r8,pc}
                  |L1.336|
000150  2000              MOVS     r0,#0                 ;135
000152  e7fb              B        |L1.332|
;;;137    
                          ENDP

                  png_decompress_chunk PROC
;;;179    png_charp /* PRIVATE */
;;;180    png_decompress_chunk(png_structp png_ptr, int comp_type,
000154  e92d4ff8          PUSH     {r3-r11,lr}
;;;181                                  png_charp chunkdata, png_size_t chunklength,
;;;182                                  png_size_t prefix_size, png_size_t *newlength)
;;;183    {
000158  4604              MOV      r4,r0
00015a  468b              MOV      r11,r1
00015c  4690              MOV      r8,r2
00015e  469a              MOV      r10,r3
000160  9f0a              LDR      r7,[sp,#0x28]
;;;184       static char msg[] = "Error decoding compressed text";
;;;185       png_charp text;
;;;186       png_size_t text_size;
;;;187    
;;;188       if (comp_type == PNG_COMPRESSION_TYPE_BASE)
000162  f1bb0f00          CMP      r11,#0
000166  d17d              BNE      |L1.612|
;;;189       {
;;;190          int ret = Z_OK;
000168  f04f0900          MOV      r9,#0
;;;191          png_ptr->zstream.next_in = (png_bytep)(chunkdata + prefix_size);
00016c  eb080007          ADD      r0,r8,r7
000170  f8c401b4          STR      r0,[r4,#0x1b4]
;;;192          png_ptr->zstream.avail_in = (uInt)(chunklength - prefix_size);
000174  ebaa0107          SUB      r1,r10,r7
000178  f44f70dc          MOV      r0,#0x1b8
00017c  5101              STR      r1,[r0,r4]
;;;193          png_ptr->zstream.next_out = png_ptr->zbuf;
00017e  f44f70e0          MOV      r0,#0x1c0
000182  f8d411ec          LDR      r1,[r4,#0x1ec]
000186  5101              STR      r1,[r0,r4]
;;;194          png_ptr->zstream.avail_out = (uInt)png_ptr->zbuf_size;
000188  1d00              ADDS     r0,r0,#4
00018a  f8d411f0          LDR      r1,[r4,#0x1f0]
00018e  5101              STR      r1,[r0,r4]
;;;195    
;;;196          text_size = 0;
000190  2600              MOVS     r6,#0
;;;197          text = NULL;
000192  2500              MOVS     r5,#0
;;;198    
;;;199          while (png_ptr->zstream.avail_in)
000194  e0bf              B        |L1.790|
                  |L1.406|
;;;200          {
;;;201             ret = inflate(&png_ptr->zstream, Z_PARTIAL_FLUSH);
000196  2101              MOVS     r1,#1
000198  f50470da          ADD      r0,r4,#0x1b4
00019c  f7fffffe          BL       inflate
0001a0  4681              MOV      r9,r0
;;;202             if (ret != Z_OK && ret != Z_STREAM_END)
0001a2  f1b90f00          CMP      r9,#0
0001a6  d043              BEQ      |L1.560|
0001a8  f1b90f01          CMP      r9,#1
0001ac  d040              BEQ      |L1.560|
;;;203             {
;;;204                if (png_ptr->zstream.msg != NULL)
0001ae  f44f70e6          MOV      r0,#0x1cc
0001b2  5900              LDR      r0,[r0,r4]
0001b4  b130              CBZ      r0,|L1.452|
;;;205                   png_warning(png_ptr, png_ptr->zstream.msg);
0001b6  f44f70e6          MOV      r0,#0x1cc
0001ba  5901              LDR      r1,[r0,r4]
0001bc  4620              MOV      r0,r4
0001be  f7fffffe          BL       png_warning
0001c2  e003              B        |L1.460|
                  |L1.452|
;;;206                else
;;;207                   png_warning(png_ptr, msg);
0001c4  49a4              LDR      r1,|L1.1112|
0001c6  4620              MOV      r0,r4
0001c8  f7fffffe          BL       png_warning
                  |L1.460|
;;;208                inflateReset(&png_ptr->zstream);
0001cc  f50470da          ADD      r0,r4,#0x1b4
0001d0  f7fffffe          BL       inflateReset
;;;209                png_ptr->zstream.avail_in = 0;
0001d4  2100              MOVS     r1,#0
0001d6  f44f70dc          MOV      r0,#0x1b8
0001da  5101              STR      r1,[r0,r4]
;;;210    
;;;211                if (text ==  NULL)
0001dc  b9a5              CBNZ     r5,|L1.520|
;;;212                {
;;;213                   text_size = prefix_size + png_sizeof(msg) + 1;
0001de  f1070620          ADD      r6,r7,#0x20
;;;214                   text = (png_charp)png_malloc_warn(png_ptr, text_size);
0001e2  4631              MOV      r1,r6
0001e4  4620              MOV      r0,r4
0001e6  f7fffffe          BL       png_malloc_warn
0001ea  4605              MOV      r5,r0
;;;215                   if (text ==  NULL)
0001ec  b93d              CBNZ     r5,|L1.510|
;;;216                     {
;;;217                        png_free(png_ptr,chunkdata);
0001ee  4641              MOV      r1,r8
0001f0  4620              MOV      r0,r4
0001f2  f7fffffe          BL       png_free
;;;218                        png_error(png_ptr,"Not enough memory to decompress chunk");
0001f6  a199              ADR      r1,|L1.1116|
0001f8  4620              MOV      r0,r4
0001fa  f7fffffe          BL       png_error
                  |L1.510|
;;;219                     }
;;;220                   png_memcpy(text, chunkdata, prefix_size);
0001fe  463a              MOV      r2,r7
000200  4641              MOV      r1,r8
000202  4628              MOV      r0,r5
000204  f7fffffe          BL       __aeabi_memcpy
                  |L1.520|
;;;221                }
;;;222    
;;;223                text[text_size - 1] = 0x00;
000208  2100              MOVS     r1,#0
00020a  1e70              SUBS     r0,r6,#1
00020c  5429              STRB     r1,[r5,r0]
;;;224    
;;;225                /* Copy what we can of the error message into the text chunk */
;;;226                text_size = (png_size_t)(chunklength - (text - chunkdata) - 1);
00020e  eba50008          SUB      r0,r5,r8
000212  ebaa0000          SUB      r0,r10,r0
000216  1e46              SUBS     r6,r0,#1
;;;227                text_size = png_sizeof(msg) > text_size ? text_size :
000218  2e1f              CMP      r6,#0x1f
00021a  d201              BCS      |L1.544|
00021c  4630              MOV      r0,r6
00021e  e000              B        |L1.546|
                  |L1.544|
;;;228                   png_sizeof(msg);
000220  201f              MOVS     r0,#0x1f
                  |L1.546|
000222  4606              MOV      r6,r0
;;;229                png_memcpy(text + prefix_size, msg, text_size + 1);
000224  19e8              ADDS     r0,r5,r7
000226  1c72              ADDS     r2,r6,#1
000228  498b              LDR      r1,|L1.1112|
00022a  f7fffffe          BL       __aeabi_memcpy
;;;230                break;
00022e  e078              B        |L1.802|
                  |L1.560|
;;;231             }
;;;232             if (!png_ptr->zstream.avail_out || ret == Z_STREAM_END)
000230  f44f70e2          MOV      r0,#0x1c4
000234  5900              LDR      r0,[r0,r4]
000236  b110              CBZ      r0,|L1.574|
000238  f1b90f01          CMP      r9,#1
00023c  d16b              BNE      |L1.790|
                  |L1.574|
;;;233             {
;;;234                if (text == NULL)
00023e  bb25              CBNZ     r5,|L1.650|
;;;235                {
;;;236                   text_size = prefix_size +
000240  f8d401f0          LDR      r0,[r4,#0x1f0]
000244  19c1              ADDS     r1,r0,r7
000246  f44f70e2          MOV      r0,#0x1c4
00024a  5900              LDR      r0,[r0,r4]
00024c  1a0e              SUBS     r6,r1,r0
;;;237                       png_ptr->zbuf_size - png_ptr->zstream.avail_out;
;;;238                   text = (png_charp)png_malloc_warn(png_ptr, text_size + 1);
00024e  1c71              ADDS     r1,r6,#1
000250  4620              MOV      r0,r4
000252  f7fffffe          BL       png_malloc_warn
000256  4605              MOV      r5,r0
;;;239                   if (text ==  NULL)
000258  b94d              CBNZ     r5,|L1.622|
;;;240                     {
;;;241                        png_free(png_ptr,chunkdata);
00025a  4641              MOV      r1,r8
00025c  4620              MOV      r0,r4
00025e  f7fffffe          BL       png_free
;;;242                        png_error(png_ptr,"Not enough memory to decompress chunk.");
000262  e000              B        |L1.614|
                  |L1.612|
000264  e08c              B        |L1.896|
                  |L1.614|
000266  a187              ADR      r1,|L1.1156|
000268  4620              MOV      r0,r4
00026a  f7fffffe          BL       png_error
                  |L1.622|
;;;243                     }
;;;244                   png_memcpy(text + prefix_size, png_ptr->zbuf,
00026e  1bf2              SUBS     r2,r6,r7
000270  19e8              ADDS     r0,r5,r7
000272  f8d411ec          LDR      r1,[r4,#0x1ec]
000276  f7fffffe          BL       __aeabi_memcpy
;;;245                        text_size - prefix_size);
;;;246                   png_memcpy(text, chunkdata, prefix_size);
00027a  463a              MOV      r2,r7
00027c  4641              MOV      r1,r8
00027e  4628              MOV      r0,r5
000280  f7fffffe          BL       __aeabi_memcpy
;;;247                   *(text + text_size) = 0x00;
000284  2000              MOVS     r0,#0
000286  55a8              STRB     r0,[r5,r6]
000288  e038              B        |L1.764|
                  |L1.650|
;;;248                }
;;;249                else
;;;250                {
;;;251                   png_charp tmp;
;;;252    
;;;253                   tmp = text;
00028a  9500              STR      r5,[sp,#0]
;;;254                   text = (png_charp)png_malloc_warn(png_ptr,
00028c  f8d401f0          LDR      r0,[r4,#0x1f0]
000290  1982              ADDS     r2,r0,r6
000292  f44f70e2          MOV      r0,#0x1c4
000296  5900              LDR      r0,[r0,r4]
000298  1a10              SUBS     r0,r2,r0
00029a  1c41              ADDS     r1,r0,#1
00029c  4620              MOV      r0,r4
00029e  f7fffffe          BL       png_malloc_warn
0002a2  4605              MOV      r5,r0
;;;255                      (png_uint_32)(text_size +
;;;256                      png_ptr->zbuf_size - png_ptr->zstream.avail_out + 1));
;;;257                   if (text == NULL)
0002a4  b95d              CBNZ     r5,|L1.702|
;;;258                   {
;;;259                      png_free(png_ptr, tmp);
0002a6  4620              MOV      r0,r4
0002a8  9900              LDR      r1,[sp,#0]
0002aa  f7fffffe          BL       png_free
;;;260                      png_free(png_ptr, chunkdata);
0002ae  4641              MOV      r1,r8
0002b0  4620              MOV      r0,r4
0002b2  f7fffffe          BL       png_free
;;;261                      png_error(png_ptr,"Not enough memory to decompress chunk..");
0002b6  a17d              ADR      r1,|L1.1196|
0002b8  4620              MOV      r0,r4
0002ba  f7fffffe          BL       png_error
                  |L1.702|
;;;262                   }
;;;263                   png_memcpy(text, tmp, text_size);
0002be  4632              MOV      r2,r6
0002c0  4628              MOV      r0,r5
0002c2  9900              LDR      r1,[sp,#0]
0002c4  f7fffffe          BL       __aeabi_memcpy
;;;264                   png_free(png_ptr, tmp);
0002c8  4620              MOV      r0,r4
0002ca  9900              LDR      r1,[sp,#0]
0002cc  f7fffffe          BL       png_free
;;;265                   png_memcpy(text + text_size, png_ptr->zbuf,
0002d0  f44f73e2          MOV      r3,#0x1c4
0002d4  591b              LDR      r3,[r3,r4]
0002d6  f8d4c1f0          LDR      r12,[r4,#0x1f0]
0002da  ebac0203          SUB      r2,r12,r3
0002de  19a8              ADDS     r0,r5,r6
0002e0  f8d411ec          LDR      r1,[r4,#0x1ec]
0002e4  f7fffffe          BL       __aeabi_memcpy
;;;266                      (png_ptr->zbuf_size - png_ptr->zstream.avail_out));
;;;267                   text_size += png_ptr->zbuf_size - png_ptr->zstream.avail_out;
0002e8  f44f70e2          MOV      r0,#0x1c4
0002ec  5900              LDR      r0,[r0,r4]
0002ee  f8d411f0          LDR      r1,[r4,#0x1f0]
0002f2  1a08              SUBS     r0,r1,r0
0002f4  4406              ADD      r6,r6,r0
;;;268                   *(text + text_size) = 0x00;
0002f6  2000              MOVS     r0,#0
0002f8  55a8              STRB     r0,[r5,r6]
;;;269                }
0002fa  bf00              NOP      
                  |L1.764|
;;;270                if (ret == Z_STREAM_END)
0002fc  f1b90f01          CMP      r9,#1
000300  d100              BNE      |L1.772|
;;;271                   break;
000302  e00e              B        |L1.802|
                  |L1.772|
;;;272                else
;;;273                {
;;;274                   png_ptr->zstream.next_out = png_ptr->zbuf;
000304  f44f70e0          MOV      r0,#0x1c0
000308  f8d411ec          LDR      r1,[r4,#0x1ec]
00030c  5101              STR      r1,[r0,r4]
;;;275                   png_ptr->zstream.avail_out = (uInt)png_ptr->zbuf_size;
00030e  1d00              ADDS     r0,r0,#4
000310  f8d411f0          LDR      r1,[r4,#0x1f0]
000314  5101              STR      r1,[r0,r4]
                  |L1.790|
000316  f44f70dc          MOV      r0,#0x1b8             ;199
00031a  5900              LDR      r0,[r0,r4]            ;199
00031c  2800              CMP      r0,#0                 ;199
00031e  f47faf3a          BNE      |L1.406|
                  |L1.802|
000322  bf00              NOP                            ;230
;;;276                }
;;;277             }
;;;278          }
;;;279          if (ret != Z_STREAM_END)
000324  f1b90f01          CMP      r9,#1
000328  d01a              BEQ      |L1.864|
;;;280          {
;;;281    #if !defined(PNG_NO_STDIO) && !defined(_WIN32_WCE)
;;;282             char umsg[52];
;;;283    
;;;284             if (ret == Z_BUF_ERROR)
;;;285                sprintf(umsg,"Buffer error in compressed datastream in %s chunk",
;;;286                    png_ptr->chunk_name);
;;;287             else if (ret == Z_DATA_ERROR)
;;;288                sprintf(umsg,"Data error in compressed datastream in %s chunk",
;;;289                    png_ptr->chunk_name);
;;;290             else
;;;291                sprintf(umsg,"Incomplete compressed datastream in %s chunk",
;;;292                    png_ptr->chunk_name);
;;;293             png_warning(png_ptr, umsg);
;;;294    #else
;;;295             png_warning(png_ptr,
00032a  a16a              ADR      r1,|L1.1236|
00032c  4620              MOV      r0,r4
00032e  f7fffffe          BL       png_warning
;;;296                "Incomplete compressed datastream in chunk other than IDAT");
;;;297    #endif
;;;298             text_size=prefix_size;
000332  463e              MOV      r6,r7
;;;299             if (text ==  NULL)
000334  b995              CBNZ     r5,|L1.860|
;;;300             {
;;;301                text = (png_charp)png_malloc_warn(png_ptr, text_size+1);
000336  1c71              ADDS     r1,r6,#1
000338  4620              MOV      r0,r4
00033a  f7fffffe          BL       png_malloc_warn
00033e  4605              MOV      r5,r0
;;;302                if (text == NULL)
000340  b93d              CBNZ     r5,|L1.850|
;;;303                  {
;;;304                    png_free(png_ptr, chunkdata);
000342  4641              MOV      r1,r8
000344  4620              MOV      r0,r4
000346  f7fffffe          BL       png_free
;;;305                    png_error(png_ptr,"Not enough memory for text.");
00034a  a171              ADR      r1,|L1.1296|
00034c  4620              MOV      r0,r4
00034e  f7fffffe          BL       png_error
                  |L1.850|
;;;306                  }
;;;307                png_memcpy(text, chunkdata, prefix_size);
000352  463a              MOV      r2,r7
000354  4641              MOV      r1,r8
000356  4628              MOV      r0,r5
000358  f7fffffe          BL       __aeabi_memcpy
                  |L1.860|
;;;308             }
;;;309             *(text + text_size) = 0x00;
00035c  2000              MOVS     r0,#0
00035e  55a8              STRB     r0,[r5,r6]
                  |L1.864|
;;;310          }
;;;311    
;;;312          inflateReset(&png_ptr->zstream);
000360  f50470da          ADD      r0,r4,#0x1b4
000364  f7fffffe          BL       inflateReset
;;;313          png_ptr->zstream.avail_in = 0;
000368  2100              MOVS     r1,#0
00036a  f44f70dc          MOV      r0,#0x1b8
00036e  5101              STR      r1,[r0,r4]
;;;314    
;;;315          png_free(png_ptr, chunkdata);
000370  4641              MOV      r1,r8
000372  4620              MOV      r0,r4
000374  f7fffffe          BL       png_free
;;;316          chunkdata = text;
000378  46a8              MOV      r8,r5
;;;317          *newlength=text_size;
00037a  980b              LDR      r0,[sp,#0x2c]
00037c  6006              STR      r6,[r0,#0]
;;;318       }
00037e  e008              B        |L1.914|
                  |L1.896|
;;;319       else /* if (comp_type != PNG_COMPRESSION_TYPE_BASE) */
;;;320       {
;;;321    #if !defined(PNG_NO_STDIO) && !defined(_WIN32_WCE)
;;;322          char umsg[50];
;;;323    
;;;324          sprintf(umsg, "Unknown zTXt compression type %d", comp_type);
;;;325          png_warning(png_ptr, umsg);
;;;326    #else
;;;327          png_warning(png_ptr, "Unknown zTXt compression type");
000380  a16a              ADR      r1,|L1.1324|
000382  4620              MOV      r0,r4
000384  f7fffffe          BL       png_warning
;;;328    #endif
;;;329    
;;;330          *(chunkdata + prefix_size) = 0x00;
000388  2000              MOVS     r0,#0
00038a  f8080007          STRB     r0,[r8,r7]
;;;331          *newlength=prefix_size;
00038e  980b              LDR      r0,[sp,#0x2c]
000390  6007              STR      r7,[r0,#0]
                  |L1.914|
;;;332       }
;;;333    
;;;334       return chunkdata;
000392  4640              MOV      r0,r8
;;;335    }
000394  e8bd8ff8          POP      {r3-r11,pc}
;;;336    #endif
                          ENDP

                  png_handle_IHDR PROC
;;;339    void /* PRIVATE */
;;;340    png_handle_IHDR(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)
000398  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;341    {
00039c  b08a              SUB      sp,sp,#0x28
00039e  4604              MOV      r4,r0
;;;342       png_byte buf[13];
;;;343       png_uint_32 width, height;
;;;344       int bit_depth, color_type, compression_type, filter_type;
;;;345       int interlace_type;
;;;346    
;;;347       png_debug(1, "in png_handle_IHDR\n");
;;;348    
;;;349       if (png_ptr->mode & PNG_HAVE_IHDR)
0003a0  f89401a8          LDRB     r0,[r4,#0x1a8]
0003a4  f0000001          AND      r0,r0,#1
0003a8  b118              CBZ      r0,|L1.946|
;;;350          png_error(png_ptr, "Out of place IHDR");
0003aa  a168              ADR      r1,|L1.1356|
0003ac  4620              MOV      r0,r4
0003ae  f7fffffe          BL       png_error
                  |L1.946|
;;;351    
;;;352       /* check the length */
;;;353       if (length != 13)
0003b2  980c              LDR      r0,[sp,#0x30]
0003b4  280d              CMP      r0,#0xd
0003b6  d003              BEQ      |L1.960|
;;;354          png_error(png_ptr, "Invalid IHDR chunk");
0003b8  a169              ADR      r1,|L1.1376|
0003ba  4620              MOV      r0,r4
0003bc  f7fffffe          BL       png_error
                  |L1.960|
;;;355    
;;;356       png_ptr->mode |= PNG_HAVE_IHDR;
0003c0  f8d401a8          LDR      r0,[r4,#0x1a8]
0003c4  f0400001          ORR      r0,r0,#1
0003c8  f8c401a8          STR      r0,[r4,#0x1a8]
;;;357    
;;;358       png_crc_read(png_ptr, buf, 13);
0003cc  220d              MOVS     r2,#0xd
0003ce  a906              ADD      r1,sp,#0x18
0003d0  4620              MOV      r0,r4
0003d2  f7fffffe          BL       png_crc_read
;;;359       png_crc_finish(png_ptr, 0);
0003d6  2100              MOVS     r1,#0
0003d8  4620              MOV      r0,r4
0003da  f7fffffe          BL       png_crc_finish
;;;360    
;;;361       width = png_get_uint_31(png_ptr, buf);
0003de  a906              ADD      r1,sp,#0x18
0003e0  4620              MOV      r0,r4
0003e2  f7fffffe          BL       png_get_uint_31
0003e6  4683              MOV      r11,r0
;;;362       height = png_get_uint_31(png_ptr, buf + 4);
0003e8  a907              ADD      r1,sp,#0x1c
0003ea  4620              MOV      r0,r4
0003ec  f7fffffe          BL       png_get_uint_31
0003f0  4605              MOV      r5,r0
;;;363       bit_depth = buf[8];
0003f2  f89d6020          LDRB     r6,[sp,#0x20]
;;;364       color_type = buf[9];
0003f6  f89d7021          LDRB     r7,[sp,#0x21]
;;;365       compression_type = buf[10];
0003fa  f89d8022          LDRB     r8,[sp,#0x22]
;;;366       filter_type = buf[11];
0003fe  f89d9023          LDRB     r9,[sp,#0x23]
;;;367       interlace_type = buf[12];
000402  f89da024          LDRB     r10,[sp,#0x24]
;;;368    
;;;369       /* set internal variables */
;;;370       png_ptr->width = width;
000406  f8c4b208          STR      r11,[r4,#0x208]
;;;371       png_ptr->height = height;
00040a  f8c4520c          STR      r5,[r4,#0x20c]
;;;372       png_ptr->bit_depth = (png_byte)bit_depth;
00040e  f8846267          STRB     r6,[r4,#0x267]
;;;373       png_ptr->interlaced = (png_byte)interlace_type;
000412  f884a263          STRB     r10,[r4,#0x263]
;;;374       png_ptr->color_type = (png_byte)color_type;
000416  f8847266          STRB     r7,[r4,#0x266]
;;;375    #if defined(PNG_MNG_FEATURES_SUPPORTED)
;;;376       png_ptr->filter_type = (png_byte)filter_type;
00041a  f8849374          STRB     r9,[r4,#0x374]
;;;377    #endif
;;;378       png_ptr->compression_type = (png_byte)compression_type;
00041e  f8848398          STRB     r8,[r4,#0x398]
;;;379    
;;;380       /* find number of channels */
;;;381       switch (png_ptr->color_type)
000422  f8940266          LDRB     r0,[r4,#0x266]
000426  e0a5              B        |L1.1396|
                  |L1.1064|
000428  504e4720          DCB      "PNG unsigned integer out of range.",0
00042c  756e7369
000430  676e6564
000434  20696e74
000438  65676572
00043c  206f7574
000440  206f6620
000444  72616e67
000448  652e00  
00044b  00                DCB      0
                  |L1.1100|
00044c  43524320          DCB      "CRC error",0
000450  6572726f
000454  7200    
000456  00                DCB      0
000457  00                DCB      0
                  |L1.1112|
                          DCD      msg
                  |L1.1116|
00045c  4e6f7420          DCB      "Not enough memory to decompress chunk",0
000460  656e6f75
000464  6768206d
000468  656d6f72
00046c  7920746f
000470  20646563
000474  6f6d7072
000478  65737320
00047c  6368756e
000480  6b00    
000482  00                DCB      0
000483  00                DCB      0
                  |L1.1156|
000484  4e6f7420          DCB      "Not enough memory to decompress chunk.",0
000488  656e6f75
00048c  6768206d
000490  656d6f72
000494  7920746f
000498  20646563
00049c  6f6d7072
0004a0  65737320
0004a4  6368756e
0004a8  6b2e00  
0004ab  00                DCB      0
                  |L1.1196|
0004ac  4e6f7420          DCB      "Not enough memory to decompress chunk..",0
0004b0  656e6f75
0004b4  6768206d
0004b8  656d6f72
0004bc  7920746f
0004c0  20646563
0004c4  6f6d7072
0004c8  65737320
0004cc  6368756e
0004d0  6b2e2e00
                  |L1.1236|
0004d4  496e636f          DCB      "Incomplete compressed datastream in chunk other than ID"
0004d8  6d706c65
0004dc  74652063
0004e0  6f6d7072
0004e4  65737365
0004e8  64206461
0004ec  74617374
0004f0  7265616d
0004f4  20696e20
0004f8  6368756e
0004fc  6b206f74
000500  68657220
000504  7468616e
000508  204944  
00050b  415400            DCB      "AT",0
00050e  00                DCB      0
00050f  00                DCB      0
                  |L1.1296|
000510  4e6f7420          DCB      "Not enough memory for text.",0
000514  656e6f75
000518  6768206d
00051c  656d6f72
000520  7920666f
000524  72207465
000528  78742e00
                  |L1.1324|
00052c  556e6b6e          DCB      "Unknown zTXt compression type",0
000530  6f776e20
000534  7a545874
000538  20636f6d
00053c  70726573
000540  73696f6e
000544  20747970
000548  6500    
00054a  00                DCB      0
00054b  00                DCB      0
                  |L1.1356|
00054c  4f757420          DCB      "Out of place IHDR",0
000550  6f662070
000554  6c616365
000558  20494844
00055c  5200    
00055e  00                DCB      0
00055f  00                DCB      0
                  |L1.1376|
000560  496e7661          DCB      "Invalid IHDR chunk",0
000564  6c696420
000568  49484452
00056c  20636875
000570  6e6b00  
000573  00                DCB      0
                  |L1.1396|
000574  2807              CMP      r0,#7
000576  d216              BCS      |L1.1446|
000578  e8dff000          TBB      [pc,r0]
00057c  04150905          DCB      0x04,0x15,0x09,0x05
000580  0d151100          DCB      0x0d,0x15,0x11,0x00
;;;382       {
;;;383          case PNG_COLOR_TYPE_GRAY:
;;;384          case PNG_COLOR_TYPE_PALETTE:
000584  bf00              NOP      
;;;385             png_ptr->channels = 1;
000586  2001              MOVS     r0,#1
000588  f884026a          STRB     r0,[r4,#0x26a]
;;;386             break;
00058c  e00b              B        |L1.1446|
;;;387          case PNG_COLOR_TYPE_RGB:
;;;388             png_ptr->channels = 3;
00058e  2003              MOVS     r0,#3
000590  f884026a          STRB     r0,[r4,#0x26a]
;;;389             break;
000594  e007              B        |L1.1446|
;;;390          case PNG_COLOR_TYPE_GRAY_ALPHA:
;;;391             png_ptr->channels = 2;
000596  2002              MOVS     r0,#2
000598  f884026a          STRB     r0,[r4,#0x26a]
;;;392             break;
00059c  e003              B        |L1.1446|
;;;393          case PNG_COLOR_TYPE_RGB_ALPHA:
;;;394             png_ptr->channels = 4;
00059e  2004              MOVS     r0,#4
0005a0  f884026a          STRB     r0,[r4,#0x26a]
;;;395             break;
0005a4  bf00              NOP      
                  |L1.1446|
0005a6  bf00              NOP                            ;386
;;;396       }
;;;397    
;;;398       /* set up other useful info */
;;;399       png_ptr->pixel_depth = (png_byte)(png_ptr->bit_depth *
0005a8  f8940267          LDRB     r0,[r4,#0x267]
0005ac  f894126a          LDRB     r1,[r4,#0x26a]
0005b0  4348              MULS     r0,r1,r0
0005b2  f8840269          STRB     r0,[r4,#0x269]
;;;400       png_ptr->channels);
;;;401       png_ptr->rowbytes = PNG_ROWBYTES(png_ptr->pixel_depth,png_ptr->width);
0005b6  f8940269          LDRB     r0,[r4,#0x269]
0005ba  2808              CMP      r0,#8
0005bc  db06              BLT      |L1.1484|
0005be  f8941269          LDRB     r1,[r4,#0x269]
0005c2  08c9              LSRS     r1,r1,#3
0005c4  f8d40208          LDR      r0,[r4,#0x208]
0005c8  4348              MULS     r0,r1,r0
0005ca  e006              B        |L1.1498|
                  |L1.1484|
0005cc  f8941269          LDRB     r1,[r4,#0x269]
0005d0  f8d40208          LDR      r0,[r4,#0x208]
0005d4  4348              MULS     r0,r1,r0
0005d6  1dc0              ADDS     r0,r0,#7
0005d8  08c0              LSRS     r0,r0,#3
                  |L1.1498|
0005da  f8c40218          STR      r0,[r4,#0x218]
;;;402       png_debug1(3,"bit_depth = %d\n", png_ptr->bit_depth);
;;;403       png_debug1(3,"channels = %d\n", png_ptr->channels);
;;;404       png_debug1(3,"rowbytes = %lu\n", png_ptr->rowbytes);
;;;405       png_set_IHDR(png_ptr, info_ptr, width, height, bit_depth,
0005de  462b              MOV      r3,r5
0005e0  465a              MOV      r2,r11
0005e2  e88d04c0          STM      sp,{r6,r7,r10}
0005e6  e9cd8903          STRD     r8,r9,[sp,#0xc]
0005ea  4620              MOV      r0,r4
0005ec  990b              LDR      r1,[sp,#0x2c]
0005ee  f7fffffe          BL       png_set_IHDR
;;;406          color_type, interlace_type, compression_type, filter_type);
;;;407    }
0005f2  b00d              ADD      sp,sp,#0x34
0005f4  e8bd8ff0          POP      {r4-r11,pc}
;;;408    
                          ENDP

                  png_handle_PLTE PROC
;;;410    void /* PRIVATE */
;;;411    png_handle_PLTE(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)
0005f8  e92d43f0          PUSH     {r4-r9,lr}
;;;412    {
0005fc  f5ad7d41          SUB      sp,sp,#0x304
000600  4604              MOV      r4,r0
000602  460e              MOV      r6,r1
000604  4617              MOV      r7,r2
;;;413       png_color palette[PNG_MAX_PALETTE_LENGTH];
;;;414       int num, i;
;;;415    #ifndef PNG_NO_POINTER_INDEXING
;;;416       png_colorp pal_ptr;
;;;417    #endif
;;;418    
;;;419       png_debug(1, "in png_handle_PLTE\n");
;;;420    
;;;421       if (!(png_ptr->mode & PNG_HAVE_IHDR))
000606  f89401a8          LDRB     r0,[r4,#0x1a8]
00060a  f0000001          AND      r0,r0,#1
00060e  b920              CBNZ     r0,|L1.1562|
;;;422          png_error(png_ptr, "Missing IHDR before PLTE");
000610  a1f9              ADR      r1,|L1.2552|
000612  4620              MOV      r0,r4
000614  f7fffffe          BL       png_error
000618  e019              B        |L1.1614|
                  |L1.1562|
;;;423       else if (png_ptr->mode & PNG_HAVE_IDAT)
00061a  f89401a8          LDRB     r0,[r4,#0x1a8]
00061e  f0000004          AND      r0,r0,#4
000622  b158              CBZ      r0,|L1.1596|
;;;424       {
;;;425          png_warning(png_ptr, "Invalid PLTE after IDAT");
000624  a1fb              ADR      r1,|L1.2580|
000626  4620              MOV      r0,r4
000628  f7fffffe          BL       png_warning
;;;426          png_crc_finish(png_ptr, length);
00062c  4639              MOV      r1,r7
00062e  4620              MOV      r0,r4
000630  f7fffffe          BL       png_crc_finish
                  |L1.1588|
;;;427          return;
;;;428       }
;;;429       else if (png_ptr->mode & PNG_HAVE_PLTE)
;;;430          png_error(png_ptr, "Duplicate PLTE chunk");
;;;431    
;;;432       png_ptr->mode |= PNG_HAVE_PLTE;
;;;433    
;;;434       if (!(png_ptr->color_type&PNG_COLOR_MASK_COLOR))
;;;435       {
;;;436          png_warning(png_ptr,
;;;437            "Ignoring PLTE chunk in grayscale PNG");
;;;438          png_crc_finish(png_ptr, length);
;;;439          return;
;;;440       }
;;;441    #if !defined(PNG_READ_OPT_PLTE_SUPPORTED)
;;;442       if (png_ptr->color_type != PNG_COLOR_TYPE_PALETTE)
;;;443       {
;;;444          png_crc_finish(png_ptr, length);
;;;445          return;
;;;446       }
;;;447    #endif
;;;448    
;;;449       if (length > 3*PNG_MAX_PALETTE_LENGTH || length % 3)
;;;450       {
;;;451          if (png_ptr->color_type != PNG_COLOR_TYPE_PALETTE)
;;;452          {
;;;453             png_warning(png_ptr, "Invalid palette chunk");
;;;454             png_crc_finish(png_ptr, length);
;;;455             return;
;;;456          }
;;;457          else
;;;458          {
;;;459             png_error(png_ptr, "Invalid palette chunk");
;;;460          }
;;;461       }
;;;462    
;;;463       num = (int)length / 3;
;;;464    
;;;465    #ifndef PNG_NO_POINTER_INDEXING
;;;466       for (i = 0, pal_ptr = palette; i < num; i++, pal_ptr++)
;;;467       {
;;;468          png_byte buf[3];
;;;469    
;;;470          png_crc_read(png_ptr, buf, 3);
;;;471          pal_ptr->red = buf[0];
;;;472          pal_ptr->green = buf[1];
;;;473          pal_ptr->blue = buf[2];
;;;474       }
;;;475    #else
;;;476       for (i = 0; i < num; i++)
;;;477       {
;;;478          png_byte buf[3];
;;;479    
;;;480          png_crc_read(png_ptr, buf, 3);
;;;481          /* don't depend upon png_color being any order */
;;;482          palette[i].red = buf[0];
;;;483          palette[i].green = buf[1];
;;;484          palette[i].blue = buf[2];
;;;485       }
;;;486    #endif
;;;487    
;;;488       /* If we actually NEED the PLTE chunk (ie for a paletted image), we do
;;;489          whatever the normal CRC configuration tells us.  However, if we
;;;490          have an RGB image, the PLTE can be considered ancillary, so
;;;491          we will act as though it is. */
;;;492    #if !defined(PNG_READ_OPT_PLTE_SUPPORTED)
;;;493       if (png_ptr->color_type == PNG_COLOR_TYPE_PALETTE)
;;;494    #endif
;;;495       {
;;;496          png_crc_finish(png_ptr, 0);
;;;497       }
;;;498    #if !defined(PNG_READ_OPT_PLTE_SUPPORTED)
;;;499       else if (png_crc_error(png_ptr))  /* Only if we have a CRC error */
;;;500       {
;;;501          /* If we don't want to use the data from an ancillary chunk,
;;;502             we have two options: an error abort, or a warning and we
;;;503             ignore the data in this chunk (which should be OK, since
;;;504             it's considered ancillary for a RGB or RGBA image). */
;;;505          if (!(png_ptr->flags & PNG_FLAG_CRC_ANCILLARY_USE))
;;;506          {
;;;507             if (png_ptr->flags & PNG_FLAG_CRC_ANCILLARY_NOWARN)
;;;508             {
;;;509                png_chunk_error(png_ptr, "CRC error");
;;;510             }
;;;511             else
;;;512             {
;;;513                png_chunk_warning(png_ptr, "CRC error");
;;;514                return;
;;;515             }
;;;516          }
;;;517          /* Otherwise, we (optionally) emit a warning and use the chunk. */
;;;518          else if (!(png_ptr->flags & PNG_FLAG_CRC_ANCILLARY_NOWARN))
;;;519          {
;;;520             png_chunk_warning(png_ptr, "CRC error");
;;;521          }
;;;522       }
;;;523    #endif
;;;524    
;;;525       png_set_PLTE(png_ptr, info_ptr, palette, num);
;;;526    
;;;527    #if defined(PNG_READ_tRNS_SUPPORTED)
;;;528       if (png_ptr->color_type == PNG_COLOR_TYPE_PALETTE)
;;;529       {
;;;530          if (info_ptr != NULL && (info_ptr->valid & PNG_INFO_tRNS))
;;;531          {
;;;532             if (png_ptr->num_trans > (png_uint_16)num)
;;;533             {
;;;534                png_warning(png_ptr, "Truncating incorrect tRNS chunk length");
;;;535                png_ptr->num_trans = (png_uint_16)num;
;;;536             }
;;;537             if (info_ptr->num_trans > (png_uint_16)num)
;;;538             {
;;;539                png_warning(png_ptr, "Truncating incorrect info tRNS chunk length");
;;;540                info_ptr->num_trans = (png_uint_16)num;
;;;541             }
;;;542          }
;;;543       }
;;;544    #endif
;;;545    
;;;546    }
000634  f50d7d41          ADD      sp,sp,#0x304
000638  e8bd83f0          POP      {r4-r9,pc}
                  |L1.1596|
00063c  f89401a8          LDRB     r0,[r4,#0x1a8]        ;429
000640  f0000002          AND      r0,r0,#2              ;429
000644  b118              CBZ      r0,|L1.1614|
000646  a1f9              ADR      r1,|L1.2604|
000648  4620              MOV      r0,r4                 ;430
00064a  f7fffffe          BL       png_error
                  |L1.1614|
00064e  f8d401a8          LDR      r0,[r4,#0x1a8]        ;432
000652  f0400002          ORR      r0,r0,#2              ;432
000656  f8c401a8          STR      r0,[r4,#0x1a8]        ;432
00065a  f8940266          LDRB     r0,[r4,#0x266]        ;434
00065e  f0000002          AND      r0,r0,#2              ;434
000662  b940              CBNZ     r0,|L1.1654|
000664  a1f7              ADR      r1,|L1.2628|
000666  4620              MOV      r0,r4                 ;436
000668  f7fffffe          BL       png_warning
00066c  4639              MOV      r1,r7                 ;438
00066e  4620              MOV      r0,r4                 ;438
000670  f7fffffe          BL       png_crc_finish
000674  e7de              B        |L1.1588|
                  |L1.1654|
000676  f5b77f40          CMP      r7,#0x300             ;449
00067a  d805              BHI      |L1.1672|
00067c  2003              MOVS     r0,#3                 ;449
00067e  fbb7f1f0          UDIV     r1,r7,r0              ;449
000682  fb007011          MLS      r0,r0,r1,r7           ;449
000686  b180              CBZ      r0,|L1.1706|
                  |L1.1672|
000688  f8940266          LDRB     r0,[r4,#0x266]        ;451
00068c  2803              CMP      r0,#3                 ;451
00068e  d008              BEQ      |L1.1698|
000690  a1f6              ADR      r1,|L1.2668|
000692  4620              MOV      r0,r4                 ;453
000694  f7fffffe          BL       png_warning
000698  4639              MOV      r1,r7                 ;454
00069a  4620              MOV      r0,r4                 ;454
00069c  f7fffffe          BL       png_crc_finish
0006a0  e7c8              B        |L1.1588|
                  |L1.1698|
0006a2  a1f2              ADR      r1,|L1.2668|
0006a4  4620              MOV      r0,r4                 ;459
0006a6  f7fffffe          BL       png_error
                  |L1.1706|
0006aa  2003              MOVS     r0,#3                 ;463
0006ac  fb97f5f0          SDIV     r5,r7,r0              ;463
0006b0  f04f0900          MOV      r9,#0                 ;466
0006b4  f10d0804          ADD      r8,sp,#4              ;466
0006b8  e014              B        |L1.1764|
                  |L1.1722|
0006ba  2203              MOVS     r2,#3                 ;470
0006bc  4669              MOV      r1,sp                 ;470
0006be  4620              MOV      r0,r4                 ;470
0006c0  f7fffffe          BL       png_crc_read
0006c4  f89d0000          LDRB     r0,[sp,#0]            ;471
0006c8  f8880000          STRB     r0,[r8,#0]            ;471
0006cc  f89d0001          LDRB     r0,[sp,#1]            ;472
0006d0  f8880001          STRB     r0,[r8,#1]            ;472
0006d4  f89d0002          LDRB     r0,[sp,#2]            ;473
0006d8  f8880002          STRB     r0,[r8,#2]            ;473
0006dc  f1090901          ADD      r9,r9,#1              ;466
0006e0  f1080803          ADD      r8,r8,#3              ;466
                  |L1.1764|
0006e4  45a9              CMP      r9,r5                 ;466
0006e6  dbe8              BLT      |L1.1722|
0006e8  2100              MOVS     r1,#0                 ;496
0006ea  4620              MOV      r0,r4                 ;496
0006ec  f7fffffe          BL       png_crc_finish
0006f0  462b              MOV      r3,r5                 ;525
0006f2  aa01              ADD      r2,sp,#4              ;525
0006f4  4631              MOV      r1,r6                 ;525
0006f6  4620              MOV      r0,r4                 ;525
0006f8  f7fffffe          BL       png_set_PLTE
0006fc  f8940266          LDRB     r0,[r4,#0x266]        ;528
000700  2803              CMP      r0,#3                 ;528
000702  d118              BNE      |L1.1846|
000704  b1be              CBZ      r6,|L1.1846|
000706  7a30              LDRB     r0,[r6,#8]            ;530
000708  f0000010          AND      r0,r0,#0x10           ;530
00070c  b198              CBZ      r0,|L1.1846|
00070e  f8b4025a          LDRH     r0,[r4,#0x25a]        ;532
000712  b2a9              UXTH     r1,r5                 ;532
000714  4288              CMP      r0,r1                 ;532
000716  dd05              BLE      |L1.1828|
000718  a1da              ADR      r1,|L1.2692|
00071a  4620              MOV      r0,r4                 ;534
00071c  f7fffffe          BL       png_warning
000720  f8a4525a          STRH     r5,[r4,#0x25a]        ;535
                  |L1.1828|
000724  8af0              LDRH     r0,[r6,#0x16]         ;537
000726  b2a9              UXTH     r1,r5                 ;537
000728  4288              CMP      r0,r1                 ;537
00072a  dd04              BLE      |L1.1846|
00072c  a1df              ADR      r1,|L1.2732|
00072e  4620              MOV      r0,r4                 ;539
000730  f7fffffe          BL       png_warning
000734  82f5              STRH     r5,[r6,#0x16]         ;540
                  |L1.1846|
000736  bf00              NOP      
000738  e77c              B        |L1.1588|
;;;547    
                          ENDP

                  png_handle_IEND PROC
;;;548    void /* PRIVATE */
;;;549    png_handle_IEND(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)
00073a  b537              PUSH     {r0-r2,r4,r5,lr}
;;;550    {
00073c  4604              MOV      r4,r0
00073e  4615              MOV      r5,r2
;;;551       png_debug(1, "in png_handle_IEND\n");
;;;552    
;;;553       if (!(png_ptr->mode & PNG_HAVE_IHDR) || !(png_ptr->mode & PNG_HAVE_IDAT))
000740  f89401a8          LDRB     r0,[r4,#0x1a8]
000744  f0000001          AND      r0,r0,#1
000748  b120              CBZ      r0,|L1.1876|
00074a  f89401a8          LDRB     r0,[r4,#0x1a8]
00074e  f0000004          AND      r0,r0,#4
000752  b918              CBNZ     r0,|L1.1884|
                  |L1.1876|
;;;554       {
;;;555          png_error(png_ptr, "No image in file");
000754  a1e0              ADR      r1,|L1.2776|
000756  4620              MOV      r0,r4
000758  f7fffffe          BL       png_error
                  |L1.1884|
;;;556       }
;;;557    
;;;558       png_ptr->mode |= (PNG_AFTER_IDAT | PNG_HAVE_IEND);
00075c  f8d401a8          LDR      r0,[r4,#0x1a8]
000760  f0400018          ORR      r0,r0,#0x18
000764  f8c401a8          STR      r0,[r4,#0x1a8]
;;;559    
;;;560       if (length != 0)
000768  b11d              CBZ      r5,|L1.1906|
;;;561       {
;;;562          png_warning(png_ptr, "Incorrect IEND chunk length");
00076a  a1e0              ADR      r1,|L1.2796|
00076c  4620              MOV      r0,r4
00076e  f7fffffe          BL       png_warning
                  |L1.1906|
;;;563       }
;;;564       png_crc_finish(png_ptr, length);
000772  4629              MOV      r1,r5
000774  4620              MOV      r0,r4
000776  f7fffffe          BL       png_crc_finish
;;;565    
;;;566       if (&info_ptr == NULL) /* quiet compiler warnings about unused info_ptr */
00077a  a801              ADD      r0,sp,#4
00077c  b900              CBNZ     r0,|L1.1920|
                  |L1.1918|
;;;567          return;
;;;568    }
00077e  bd3e              POP      {r1-r5,pc}
                  |L1.1920|
000780  bf00              NOP      
000782  e7fc              B        |L1.1918|
;;;569    
                          ENDP

                  png_handle_gAMA PROC
;;;571    void /* PRIVATE */
;;;572    png_handle_gAMA(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)
000784  e92d4ff8          PUSH     {r3-r11,lr}
;;;573    {
000788  4606              MOV      r6,r0
00078a  460c              MOV      r4,r1
00078c  4691              MOV      r9,r2
;;;574       png_fixed_point igamma;
;;;575    #ifdef PNG_FLOATING_POINT_SUPPORTED
;;;576       float file_gamma;
;;;577    #endif
;;;578       png_byte buf[4];
;;;579    
;;;580       png_debug(1, "in png_handle_gAMA\n");
;;;581    
;;;582       if (!(png_ptr->mode & PNG_HAVE_IHDR))
00078e  f89601a8          LDRB     r0,[r6,#0x1a8]
000792  f0000001          AND      r0,r0,#1
000796  b920              CBNZ     r0,|L1.1954|
;;;583          png_error(png_ptr, "Missing IHDR before gAMA");
000798  a1db              ADR      r1,|L1.2824|
00079a  4630              MOV      r0,r6
00079c  f7fffffe          BL       png_error
0007a0  e017              B        |L1.2002|
                  |L1.1954|
;;;584       else if (png_ptr->mode & PNG_HAVE_IDAT)
0007a2  f89601a8          LDRB     r0,[r6,#0x1a8]
0007a6  f0000004          AND      r0,r0,#4
0007aa  b148              CBZ      r0,|L1.1984|
;;;585       {
;;;586          png_warning(png_ptr, "Invalid gAMA after IDAT");
0007ac  a1dd              ADR      r1,|L1.2852|
0007ae  4630              MOV      r0,r6
0007b0  f7fffffe          BL       png_warning
;;;587          png_crc_finish(png_ptr, length);
0007b4  4649              MOV      r1,r9
0007b6  4630              MOV      r0,r6
0007b8  f7fffffe          BL       png_crc_finish
                  |L1.1980|
;;;588          return;
;;;589       }
;;;590       else if (png_ptr->mode & PNG_HAVE_PLTE)
;;;591          /* Should be an error, but we can cope with it */
;;;592          png_warning(png_ptr, "Out of place gAMA chunk");
;;;593    
;;;594       if (info_ptr != NULL && (info_ptr->valid & PNG_INFO_gAMA)
;;;595    #if defined(PNG_READ_sRGB_SUPPORTED)
;;;596          && !(info_ptr->valid & PNG_INFO_sRGB)
;;;597    #endif
;;;598          )
;;;599       {
;;;600          png_warning(png_ptr, "Duplicate gAMA chunk");
;;;601          png_crc_finish(png_ptr, length);
;;;602          return;
;;;603       }
;;;604    
;;;605       if (length != 4)
;;;606       {
;;;607          png_warning(png_ptr, "Incorrect gAMA chunk length");
;;;608          png_crc_finish(png_ptr, length);
;;;609          return;
;;;610       }
;;;611    
;;;612       png_crc_read(png_ptr, buf, 4);
;;;613       if (png_crc_finish(png_ptr, 0))
;;;614          return;
;;;615    
;;;616       igamma = (png_fixed_point)png_get_uint_32(buf);
;;;617       /* check for zero gamma */
;;;618       if (igamma == 0)
;;;619          {
;;;620             png_warning(png_ptr,
;;;621               "Ignoring gAMA chunk with gamma=0");
;;;622             return;
;;;623          }
;;;624    
;;;625    #if defined(PNG_READ_sRGB_SUPPORTED)
;;;626       if (info_ptr != NULL && (info_ptr->valid & PNG_INFO_sRGB))
;;;627          if (PNG_OUT_OF_RANGE(igamma, 45500L, 500))
;;;628          {
;;;629             png_warning(png_ptr,
;;;630               "Ignoring incorrect gAMA value when sRGB is also present");
;;;631    #ifndef PNG_NO_CONSOLE_IO
;;;632             fprintf(stderr, "gamma = (%d/100000)\n", (int)igamma);
;;;633    #endif
;;;634             return;
;;;635          }
;;;636    #endif /* PNG_READ_sRGB_SUPPORTED */
;;;637    
;;;638    #ifdef PNG_FLOATING_POINT_SUPPORTED
;;;639       file_gamma = (float)igamma / (float)100000.0;
;;;640    #  ifdef PNG_READ_GAMMA_SUPPORTED
;;;641         png_ptr->gamma = file_gamma;
;;;642    #  endif
;;;643         png_set_gAMA(png_ptr, info_ptr, file_gamma);
;;;644    #endif
;;;645    #ifdef PNG_FIXED_POINT_SUPPORTED
;;;646       png_set_gAMA_fixed(png_ptr, info_ptr, igamma);
;;;647    #endif
;;;648    }
0007bc  e8bd8ff8          POP      {r3-r11,pc}
                  |L1.1984|
0007c0  f89601a8          LDRB     r0,[r6,#0x1a8]        ;590
0007c4  f0000002          AND      r0,r0,#2              ;590
0007c8  b118              CBZ      r0,|L1.2002|
0007ca  a1dc              ADR      r1,|L1.2876|
0007cc  4630              MOV      r0,r6                 ;592
0007ce  f7fffffe          BL       png_warning
                  |L1.2002|
0007d2  b184              CBZ      r4,|L1.2038|
0007d4  7a20              LDRB     r0,[r4,#8]            ;594
0007d6  f0000001          AND      r0,r0,#1              ;594
0007da  b160              CBZ      r0,|L1.2038|
0007dc  8920              LDRH     r0,[r4,#8]            ;596
0007de  f4006000          AND      r0,r0,#0x800          ;596
0007e2  b940              CBNZ     r0,|L1.2038|
0007e4  a1db              ADR      r1,|L1.2900|
0007e6  4630              MOV      r0,r6                 ;600
0007e8  f7fffffe          BL       png_warning
0007ec  4649              MOV      r1,r9                 ;601
0007ee  4630              MOV      r0,r6                 ;601
0007f0  f7fffffe          BL       png_crc_finish
0007f4  e7e2              B        |L1.1980|
                  |L1.2038|
0007f6  f1b90f04          CMP      r9,#4                 ;605
0007fa  d008              BEQ      |L1.2062|
0007fc  a1db              ADR      r1,|L1.2924|
0007fe  4630              MOV      r0,r6                 ;607
000800  f7fffffe          BL       png_warning
000804  4649              MOV      r1,r9                 ;608
000806  4630              MOV      r0,r6                 ;608
000808  f7fffffe          BL       png_crc_finish
00080c  e7d6              B        |L1.1980|
                  |L1.2062|
00080e  2204              MOVS     r2,#4                 ;612
000810  4669              MOV      r1,sp                 ;612
000812  4630              MOV      r0,r6                 ;612
000814  f7fffffe          BL       png_crc_read
000818  2100              MOVS     r1,#0                 ;613
00081a  4630              MOV      r0,r6                 ;613
00081c  f7fffffe          BL       png_crc_finish
000820  b100              CBZ      r0,|L1.2084|
000822  e7cb              B        |L1.1980|
                  |L1.2084|
000824  4668              MOV      r0,sp                 ;616
000826  f7fffffe          BL       png_get_uint_32
00082a  4605              MOV      r5,r0                 ;616
00082c  b925              CBNZ     r5,|L1.2104|
00082e  a1d6              ADR      r1,|L1.2952|
000830  4630              MOV      r0,r6                 ;620
000832  f7fffffe          BL       png_warning
000836  e7c1              B        |L1.1980|
                  |L1.2104|
000838  b184              CBZ      r4,|L1.2140|
00083a  8920              LDRH     r0,[r4,#8]            ;626
00083c  f4006000          AND      r0,r0,#0x800          ;626
000840  b160              CBZ      r0,|L1.2140|
000842  f64a70c8          MOV      r0,#0xafc8            ;627
000846  4285              CMP      r5,r0                 ;627
000848  db03              BLT      |L1.2130|
00084a  f24b30b0          MOV      r0,#0xb3b0            ;627
00084e  4285              CMP      r5,r0                 ;627
000850  dd04              BLE      |L1.2140|
                  |L1.2130|
000852  a1d6              ADR      r1,|L1.2988|
000854  4630              MOV      r0,r6                 ;629
000856  f7fffffe          BL       png_warning
00085a  e7af              B        |L1.1980|
                  |L1.2140|
00085c  4628              MOV      r0,r5                 ;639
00085e  f7fffffe          BL       __aeabi_i2f
000862  4607              MOV      r7,r0                 ;639
000864  49df              LDR      r1,|L1.3044|
000866  f7fffffe          BL       __aeabi_fdiv
00086a  4682              MOV      r10,r0                ;639
00086c  f8c6a29c          STR      r10,[r6,#0x29c]       ;641
000870  4650              MOV      r0,r10                ;643
000872  f7fffffe          BL       __aeabi_f2d
000876  4607              MOV      r7,r0                 ;643
000878  463a              MOV      r2,r7                 ;643
00087a  460b              MOV      r3,r1                 ;643
00087c  4621              MOV      r1,r4                 ;643
00087e  4630              MOV      r0,r6                 ;643
000880  f7fffffe          BL       png_set_gAMA
000884  462a              MOV      r2,r5                 ;646
000886  4621              MOV      r1,r4                 ;646
000888  4630              MOV      r0,r6                 ;646
00088a  f7fffffe          BL       png_set_gAMA_fixed
00088e  bf00              NOP      
000890  e794              B        |L1.1980|
;;;649    #endif
                          ENDP

                  png_handle_sBIT PROC
;;;652    void /* PRIVATE */
;;;653    png_handle_sBIT(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)
000892  b5f8              PUSH     {r3-r7,lr}
;;;654    {
000894  4604              MOV      r4,r0
000896  460f              MOV      r7,r1
000898  4615              MOV      r5,r2
;;;655       png_size_t truelen;
;;;656       png_byte buf[4];
;;;657    
;;;658       png_debug(1, "in png_handle_sBIT\n");
;;;659    
;;;660       buf[0] = buf[1] = buf[2] = buf[3] = 0;
00089a  2000              MOVS     r0,#0
00089c  f88d0003          STRB     r0,[sp,#3]
0008a0  f88d0002          STRB     r0,[sp,#2]
0008a4  f88d0001          STRB     r0,[sp,#1]
0008a8  f88d0000          STRB     r0,[sp,#0]
;;;661    
;;;662       if (!(png_ptr->mode & PNG_HAVE_IHDR))
0008ac  f89401a8          LDRB     r0,[r4,#0x1a8]
0008b0  f0000001          AND      r0,r0,#1
0008b4  b920              CBNZ     r0,|L1.2240|
;;;663          png_error(png_ptr, "Missing IHDR before sBIT");
0008b6  a1cc              ADR      r1,|L1.3048|
0008b8  4620              MOV      r0,r4
0008ba  f7fffffe          BL       png_error
0008be  e016              B        |L1.2286|
                  |L1.2240|
;;;664       else if (png_ptr->mode & PNG_HAVE_IDAT)
0008c0  f89401a8          LDRB     r0,[r4,#0x1a8]
0008c4  f0000004          AND      r0,r0,#4
0008c8  b140              CBZ      r0,|L1.2268|
;;;665       {
;;;666          png_warning(png_ptr, "Invalid sBIT after IDAT");
0008ca  a1ce              ADR      r1,|L1.3076|
0008cc  4620              MOV      r0,r4
0008ce  f7fffffe          BL       png_warning
;;;667          png_crc_finish(png_ptr, length);
0008d2  4629              MOV      r1,r5
0008d4  4620              MOV      r0,r4
0008d6  f7fffffe          BL       png_crc_finish
                  |L1.2266|
;;;668          return;
;;;669       }
;;;670       else if (png_ptr->mode & PNG_HAVE_PLTE)
;;;671       {
;;;672          /* Should be an error, but we can cope with it */
;;;673          png_warning(png_ptr, "Out of place sBIT chunk");
;;;674       }
;;;675       if (info_ptr != NULL && (info_ptr->valid & PNG_INFO_sBIT))
;;;676       {
;;;677          png_warning(png_ptr, "Duplicate sBIT chunk");
;;;678          png_crc_finish(png_ptr, length);
;;;679          return;
;;;680       }
;;;681    
;;;682       if (png_ptr->color_type == PNG_COLOR_TYPE_PALETTE)
;;;683          truelen = 3;
;;;684       else
;;;685          truelen = (png_size_t)png_ptr->channels;
;;;686    
;;;687       if (length != truelen || length > 4)
;;;688       {
;;;689          png_warning(png_ptr, "Incorrect sBIT chunk length");
;;;690          png_crc_finish(png_ptr, length);
;;;691          return;
;;;692       }
;;;693    
;;;694       png_crc_read(png_ptr, buf, truelen);
;;;695       if (png_crc_finish(png_ptr, 0))
;;;696          return;
;;;697    
;;;698       if (png_ptr->color_type & PNG_COLOR_MASK_COLOR)
;;;699       {
;;;700          png_ptr->sig_bit.red = buf[0];
;;;701          png_ptr->sig_bit.green = buf[1];
;;;702          png_ptr->sig_bit.blue = buf[2];
;;;703          png_ptr->sig_bit.alpha = buf[3];
;;;704       }
;;;705       else
;;;706       {
;;;707          png_ptr->sig_bit.gray = buf[0];
;;;708          png_ptr->sig_bit.red = buf[0];
;;;709          png_ptr->sig_bit.green = buf[0];
;;;710          png_ptr->sig_bit.blue = buf[0];
;;;711          png_ptr->sig_bit.alpha = buf[1];
;;;712       }
;;;713       png_set_sBIT(png_ptr, info_ptr, &(png_ptr->sig_bit));
;;;714    }
0008da  bdf8              POP      {r3-r7,pc}
                  |L1.2268|
0008dc  f89401a8          LDRB     r0,[r4,#0x1a8]        ;670
0008e0  f0000002          AND      r0,r0,#2              ;670
0008e4  b118              CBZ      r0,|L1.2286|
0008e6  a1cd              ADR      r1,|L1.3100|
0008e8  4620              MOV      r0,r4                 ;673
0008ea  f7fffffe          BL       png_warning
                  |L1.2286|
0008ee  b167              CBZ      r7,|L1.2314|
0008f0  7a38              LDRB     r0,[r7,#8]            ;675
0008f2  f0000002          AND      r0,r0,#2              ;675
0008f6  b140              CBZ      r0,|L1.2314|
0008f8  a1ce              ADR      r1,|L1.3124|
0008fa  4620              MOV      r0,r4                 ;677
0008fc  f7fffffe          BL       png_warning
000900  4629              MOV      r1,r5                 ;678
000902  4620              MOV      r0,r4                 ;678
000904  f7fffffe          BL       png_crc_finish
000908  e7e7              B        |L1.2266|
                  |L1.2314|
00090a  f8940266          LDRB     r0,[r4,#0x266]        ;682
00090e  2803              CMP      r0,#3                 ;682
000910  d101              BNE      |L1.2326|
000912  2603              MOVS     r6,#3                 ;683
000914  e001              B        |L1.2330|
                  |L1.2326|
000916  f894626a          LDRB     r6,[r4,#0x26a]        ;685
                  |L1.2330|
00091a  42b5              CMP      r5,r6                 ;687
00091c  d101              BNE      |L1.2338|
00091e  2d04              CMP      r5,#4                 ;687
000920  d908              BLS      |L1.2356|
                  |L1.2338|
000922  a1ca              ADR      r1,|L1.3148|
000924  4620              MOV      r0,r4                 ;689
000926  f7fffffe          BL       png_warning
00092a  4629              MOV      r1,r5                 ;690
00092c  4620              MOV      r0,r4                 ;690
00092e  f7fffffe          BL       png_crc_finish
000932  e7d2              B        |L1.2266|
                  |L1.2356|
000934  4632              MOV      r2,r6                 ;694
000936  4669              MOV      r1,sp                 ;694
000938  4620              MOV      r0,r4                 ;694
00093a  f7fffffe          BL       png_crc_read
00093e  2100              MOVS     r1,#0                 ;695
000940  4620              MOV      r0,r4                 ;695
000942  f7fffffe          BL       png_crc_finish
000946  b100              CBZ      r0,|L1.2378|
000948  e7c7              B        |L1.2266|
                  |L1.2378|
00094a  f8940266          LDRB     r0,[r4,#0x266]        ;698
00094e  f0000002          AND      r0,r0,#2              ;698
000952  b188              CBZ      r0,|L1.2424|
000954  f89d0000          LDRB     r0,[sp,#0]            ;700
000958  f88402bc          STRB     r0,[r4,#0x2bc]        ;700
00095c  f89d1001          LDRB     r1,[sp,#1]            ;701
000960  f24020bd          MOV      r0,#0x2bd             ;701
000964  5501              STRB     r1,[r0,r4]            ;701
000966  f89d1002          LDRB     r1,[sp,#2]            ;702
00096a  1c40              ADDS     r0,r0,#1              ;702
00096c  5501              STRB     r1,[r0,r4]            ;702
00096e  f89d1003          LDRB     r1,[sp,#3]            ;703
000972  1c80              ADDS     r0,r0,#2              ;703
000974  5501              STRB     r1,[r0,r4]            ;703
000976  e015              B        |L1.2468|
                  |L1.2424|
000978  f89d1000          LDRB     r1,[sp,#0]            ;707
00097c  f24020bf          MOV      r0,#0x2bf             ;707
000980  5501              STRB     r1,[r0,r4]            ;707
000982  f89d0000          LDRB     r0,[sp,#0]            ;708
000986  f88402bc          STRB     r0,[r4,#0x2bc]        ;708
00098a  f89d1000          LDRB     r1,[sp,#0]            ;709
00098e  f24020bd          MOV      r0,#0x2bd             ;709
000992  5501              STRB     r1,[r0,r4]            ;709
000994  f89d1000          LDRB     r1,[sp,#0]            ;710
000998  1c40              ADDS     r0,r0,#1              ;710
00099a  5501              STRB     r1,[r0,r4]            ;710
00099c  f89d1001          LDRB     r1,[sp,#1]            ;711
0009a0  1c80              ADDS     r0,r0,#2              ;711
0009a2  5501              STRB     r1,[r0,r4]            ;711
                  |L1.2468|
0009a4  f504722f          ADD      r2,r4,#0x2bc          ;713
0009a8  4639              MOV      r1,r7                 ;713
0009aa  4620              MOV      r0,r4                 ;713
0009ac  f7fffffe          BL       png_set_sBIT
0009b0  bf00              NOP      
0009b2  e792              B        |L1.2266|
;;;715    #endif
                          ENDP

                  png_handle_cHRM PROC
;;;718    void /* PRIVATE */
;;;719    png_handle_cHRM(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)
0009b4  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;720    {
0009b8  b0aa              SUB      sp,sp,#0xa8
0009ba  460e              MOV      r6,r1
;;;721       png_byte buf[4];
;;;722    #ifdef PNG_FLOATING_POINT_SUPPORTED
;;;723       float white_x, white_y, red_x, red_y, green_x, green_y, blue_x, blue_y;
;;;724    #endif
;;;725       png_fixed_point int_x_white, int_y_white, int_x_red, int_y_red, int_x_green,
;;;726          int_y_green, int_x_blue, int_y_blue;
;;;727    
;;;728       png_uint_32 uint_x, uint_y;
;;;729    
;;;730       png_debug(1, "in png_handle_cHRM\n");
;;;731    
;;;732       if (!(png_ptr->mode & PNG_HAVE_IHDR))
0009bc  982a              LDR      r0,[sp,#0xa8]
0009be  f89001a8          LDRB     r0,[r0,#0x1a8]
0009c2  f0000001          AND      r0,r0,#1
0009c6  b920              CBNZ     r0,|L1.2514|
;;;733          png_error(png_ptr, "Missing IHDR before cHRM");
0009c8  a1a7              ADR      r1,|L1.3176|
0009ca  982a              LDR      r0,[sp,#0xa8]
0009cc  f7fffffe          BL       png_error
0009d0  e16e              B        |L1.3248|
                  |L1.2514|
;;;734       else if (png_ptr->mode & PNG_HAVE_IDAT)
0009d2  982a              LDR      r0,[sp,#0xa8]
0009d4  f89001a8          LDRB     r0,[r0,#0x1a8]
0009d8  f0000004          AND      r0,r0,#4
0009dc  b150              CBZ      r0,|L1.2548|
;;;735       {
;;;736          png_warning(png_ptr, "Invalid cHRM after IDAT");
0009de  a1a9              ADR      r1,|L1.3204|
0009e0  982a              LDR      r0,[sp,#0xa8]
0009e2  f7fffffe          BL       png_warning
;;;737          png_crc_finish(png_ptr, length);
0009e6  992c              LDR      r1,[sp,#0xb0]
0009e8  982a              LDR      r0,[sp,#0xa8]
0009ea  f7fffffe          BL       png_crc_finish
;;;738          return;
;;;739       }
;;;740       else if (png_ptr->mode & PNG_HAVE_PLTE)
;;;741          /* Should be an error, but we can cope with it */
;;;742          png_warning(png_ptr, "Missing PLTE before cHRM");
;;;743    
;;;744       if (info_ptr != NULL && (info_ptr->valid & PNG_INFO_cHRM)
;;;745    #if defined(PNG_READ_sRGB_SUPPORTED)
;;;746          && !(info_ptr->valid & PNG_INFO_sRGB)
;;;747    #endif
;;;748          )
;;;749       {
;;;750          png_warning(png_ptr, "Duplicate cHRM chunk");
;;;751          png_crc_finish(png_ptr, length);
;;;752          return;
;;;753       }
;;;754    
;;;755       if (length != 32)
;;;756       {
;;;757          png_warning(png_ptr, "Incorrect cHRM chunk length");
;;;758          png_crc_finish(png_ptr, length);
;;;759          return;
;;;760       }
;;;761    
;;;762       png_crc_read(png_ptr, buf, 4);
;;;763       uint_x = png_get_uint_32(buf);
;;;764    
;;;765       png_crc_read(png_ptr, buf, 4);
;;;766       uint_y = png_get_uint_32(buf);
;;;767    
;;;768       if (uint_x > 80000L || uint_y > 80000L ||
;;;769          uint_x + uint_y > 100000L)
;;;770       {
;;;771          png_warning(png_ptr, "Invalid cHRM white point");
;;;772          png_crc_finish(png_ptr, 24);
;;;773          return;
;;;774       }
;;;775       int_x_white = (png_fixed_point)uint_x;
;;;776       int_y_white = (png_fixed_point)uint_y;
;;;777    
;;;778       png_crc_read(png_ptr, buf, 4);
;;;779       uint_x = png_get_uint_32(buf);
;;;780    
;;;781       png_crc_read(png_ptr, buf, 4);
;;;782       uint_y = png_get_uint_32(buf);
;;;783    
;;;784       if (uint_x + uint_y > 100000L)
;;;785       {
;;;786          png_warning(png_ptr, "Invalid cHRM red point");
;;;787          png_crc_finish(png_ptr, 16);
;;;788          return;
;;;789       }
;;;790       int_x_red = (png_fixed_point)uint_x;
;;;791       int_y_red = (png_fixed_point)uint_y;
;;;792    
;;;793       png_crc_read(png_ptr, buf, 4);
;;;794       uint_x = png_get_uint_32(buf);
;;;795    
;;;796       png_crc_read(png_ptr, buf, 4);
;;;797       uint_y = png_get_uint_32(buf);
;;;798    
;;;799       if (uint_x + uint_y > 100000L)
;;;800       {
;;;801          png_warning(png_ptr, "Invalid cHRM green point");
;;;802          png_crc_finish(png_ptr, 8);
;;;803          return;
;;;804       }
;;;805       int_x_green = (png_fixed_point)uint_x;
;;;806       int_y_green = (png_fixed_point)uint_y;
;;;807    
;;;808       png_crc_read(png_ptr, buf, 4);
;;;809       uint_x = png_get_uint_32(buf);
;;;810    
;;;811       png_crc_read(png_ptr, buf, 4);
;;;812       uint_y = png_get_uint_32(buf);
;;;813    
;;;814       if (uint_x + uint_y > 100000L)
;;;815       {
;;;816          png_warning(png_ptr, "Invalid cHRM blue point");
;;;817          png_crc_finish(png_ptr, 0);
;;;818          return;
;;;819       }
;;;820       int_x_blue = (png_fixed_point)uint_x;
;;;821       int_y_blue = (png_fixed_point)uint_y;
;;;822    
;;;823    #ifdef PNG_FLOATING_POINT_SUPPORTED
;;;824       white_x = (float)int_x_white / (float)100000.0;
;;;825       white_y = (float)int_y_white / (float)100000.0;
;;;826       red_x   = (float)int_x_red   / (float)100000.0;
;;;827       red_y   = (float)int_y_red   / (float)100000.0;
;;;828       green_x = (float)int_x_green / (float)100000.0;
;;;829       green_y = (float)int_y_green / (float)100000.0;
;;;830       blue_x  = (float)int_x_blue  / (float)100000.0;
;;;831       blue_y  = (float)int_y_blue  / (float)100000.0;
;;;832    #endif
;;;833    
;;;834    #if defined(PNG_READ_sRGB_SUPPORTED)
;;;835       if ((info_ptr != NULL) && (info_ptr->valid & PNG_INFO_sRGB))
;;;836          {
;;;837          if (PNG_OUT_OF_RANGE(int_x_white, 31270,  1000) ||
;;;838              PNG_OUT_OF_RANGE(int_y_white, 32900,  1000) ||
;;;839              PNG_OUT_OF_RANGE(int_x_red,   64000L, 1000) ||
;;;840              PNG_OUT_OF_RANGE(int_y_red,   33000,  1000) ||
;;;841              PNG_OUT_OF_RANGE(int_x_green, 30000,  1000) ||
;;;842              PNG_OUT_OF_RANGE(int_y_green, 60000L, 1000) ||
;;;843              PNG_OUT_OF_RANGE(int_x_blue,  15000,  1000) ||
;;;844              PNG_OUT_OF_RANGE(int_y_blue,   6000,  1000))
;;;845             {
;;;846                png_warning(png_ptr,
;;;847                  "Ignoring incorrect cHRM value when sRGB is also present");
;;;848    #ifndef PNG_NO_CONSOLE_IO
;;;849    #ifdef PNG_FLOATING_POINT_SUPPORTED
;;;850                fprintf(stderr,"wx=%f, wy=%f, rx=%f, ry=%f\n",
;;;851                   white_x, white_y, red_x, red_y);
;;;852                fprintf(stderr,"gx=%f, gy=%f, bx=%f, by=%f\n",
;;;853                   green_x, green_y, blue_x, blue_y);
;;;854    #else
;;;855                fprintf(stderr,"wx=%ld, wy=%ld, rx=%ld, ry=%ld\n",
;;;856                   int_x_white, int_y_white, int_x_red, int_y_red);
;;;857                fprintf(stderr,"gx=%ld, gy=%ld, bx=%ld, by=%ld\n",
;;;858                   int_x_green, int_y_green, int_x_blue, int_y_blue);
;;;859    #endif
;;;860    #endif /* PNG_NO_CONSOLE_IO */
;;;861             }
;;;862             png_crc_finish(png_ptr, 0);
;;;863             return;
;;;864          }
;;;865    #endif /* PNG_READ_sRGB_SUPPORTED */
;;;866    
;;;867    #ifdef PNG_FLOATING_POINT_SUPPORTED
;;;868       png_set_cHRM(png_ptr, info_ptr,
;;;869          white_x, white_y, red_x, red_y, green_x, green_y, blue_x, blue_y);
;;;870    #endif
;;;871    #ifdef PNG_FIXED_POINT_SUPPORTED
;;;872       png_set_cHRM_fixed(png_ptr, info_ptr,
;;;873          int_x_white, int_y_white, int_x_red, int_y_red, int_x_green,
;;;874          int_y_green, int_x_blue, int_y_blue);
;;;875    #endif
;;;876       if (png_crc_finish(png_ptr, 0))
;;;877          return;
;;;878    }
0009ee  b02d              ADD      sp,sp,#0xb4
0009f0  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.2548|
0009f4  e152              B        |L1.3228|
0009f6  0000              DCW      0x0000
                  |L1.2552|
0009f8  4d697373          DCB      "Missing IHDR before PLTE",0
0009fc  696e6720
000a00  49484452
000a04  20626566
000a08  6f726520
000a0c  504c5445
000a10  00      
000a11  00                DCB      0
000a12  00                DCB      0
000a13  00                DCB      0
                  |L1.2580|
000a14  496e7661          DCB      "Invalid PLTE after IDAT",0
000a18  6c696420
000a1c  504c5445
000a20  20616674
000a24  65722049
000a28  44415400
                  |L1.2604|
000a2c  4475706c          DCB      "Duplicate PLTE chunk",0
000a30  69636174
000a34  6520504c
000a38  54452063
000a3c  68756e6b
000a40  00      
000a41  00                DCB      0
000a42  00                DCB      0
000a43  00                DCB      0
                  |L1.2628|
000a44  49676e6f          DCB      "Ignoring PLTE chunk in grayscale PNG",0
000a48  72696e67
000a4c  20504c54
000a50  45206368
000a54  756e6b20
000a58  696e2067
000a5c  72617973
000a60  63616c65
000a64  20504e47
000a68  00      
000a69  00                DCB      0
000a6a  00                DCB      0
000a6b  00                DCB      0
                  |L1.2668|
000a6c  496e7661          DCB      "Invalid palette chunk",0
000a70  6c696420
000a74  70616c65
000a78  74746520
000a7c  6368756e
000a80  6b00    
000a82  00                DCB      0
000a83  00                DCB      0
                  |L1.2692|
000a84  5472756e          DCB      "Truncating incorrect tRNS chunk length",0
000a88  63617469
000a8c  6e672069
000a90  6e636f72
000a94  72656374
000a98  2074524e
000a9c  53206368
000aa0  756e6b20
000aa4  6c656e67
000aa8  746800  
000aab  00                DCB      0
                  |L1.2732|
000aac  5472756e          DCB      "Truncating incorrect info tRNS chunk length",0
000ab0  63617469
000ab4  6e672069
000ab8  6e636f72
000abc  72656374
000ac0  20696e66
000ac4  6f207452
000ac8  4e532063
000acc  68756e6b
000ad0  206c656e
000ad4  67746800
                  |L1.2776|
000ad8  4e6f2069          DCB      "No image in file",0
000adc  6d616765
000ae0  20696e20
000ae4  66696c65
000ae8  00      
000ae9  00                DCB      0
000aea  00                DCB      0
000aeb  00                DCB      0
                  |L1.2796|
000aec  496e636f          DCB      "Incorrect IEND chunk length",0
000af0  72726563
000af4  74204945
000af8  4e442063
000afc  68756e6b
000b00  206c656e
000b04  67746800
                  |L1.2824|
000b08  4d697373          DCB      "Missing IHDR before gAMA",0
000b0c  696e6720
000b10  49484452
000b14  20626566
000b18  6f726520
000b1c  67414d41
000b20  00      
000b21  00                DCB      0
000b22  00                DCB      0
000b23  00                DCB      0
                  |L1.2852|
000b24  496e7661          DCB      "Invalid gAMA after IDAT",0
000b28  6c696420
000b2c  67414d41
000b30  20616674
000b34  65722049
000b38  44415400
                  |L1.2876|
000b3c  4f757420          DCB      "Out of place gAMA chunk",0
000b40  6f662070
000b44  6c616365
000b48  2067414d
000b4c  41206368
000b50  756e6b00
                  |L1.2900|
000b54  4475706c          DCB      "Duplicate gAMA chunk",0
000b58  69636174
000b5c  65206741
000b60  4d412063
000b64  68756e6b
000b68  00      
000b69  00                DCB      0
000b6a  00                DCB      0
000b6b  00                DCB      0
                  |L1.2924|
000b6c  496e636f          DCB      "Incorrect gAMA chunk length",0
000b70  72726563
000b74  74206741
000b78  4d412063
000b7c  68756e6b
000b80  206c656e
000b84  67746800
                  |L1.2952|
000b88  49676e6f          DCB      "Ignoring gAMA chunk with gamma=0",0
000b8c  72696e67
000b90  2067414d
000b94  41206368
000b98  756e6b20
000b9c  77697468
000ba0  2067616d
000ba4  6d613d30
000ba8  00      
000ba9  00                DCB      0
000baa  00                DCB      0
000bab  00                DCB      0
                  |L1.2988|
000bac  49676e6f          DCB      "Ignoring incorrect gAMA value when sRGB is also present"
000bb0  72696e67
000bb4  20696e63
000bb8  6f727265
000bbc  63742067
000bc0  414d4120
000bc4  76616c75
000bc8  65207768
000bcc  656e2073
000bd0  52474220
000bd4  69732061
000bd8  6c736f20
000bdc  70726573
000be0  656e74  
000be3  00                DCB      0
                  |L1.3044|
                          DCD      0x47c35000
                  |L1.3048|
000be8  4d697373          DCB      "Missing IHDR before sBIT",0
000bec  696e6720
000bf0  49484452
000bf4  20626566
000bf8  6f726520
000bfc  73424954
000c00  00      
000c01  00                DCB      0
000c02  00                DCB      0
000c03  00                DCB      0
                  |L1.3076|
000c04  496e7661          DCB      "Invalid sBIT after IDAT",0
000c08  6c696420
000c0c  73424954
000c10  20616674
000c14  65722049
000c18  44415400
                  |L1.3100|
000c1c  4f757420          DCB      "Out of place sBIT chunk",0
000c20  6f662070
000c24  6c616365
000c28  20734249
000c2c  54206368
000c30  756e6b00
                  |L1.3124|
000c34  4475706c          DCB      "Duplicate sBIT chunk",0
000c38  69636174
000c3c  65207342
000c40  49542063
000c44  68756e6b
000c48  00      
000c49  00                DCB      0
000c4a  00                DCB      0
000c4b  00                DCB      0
                  |L1.3148|
000c4c  496e636f          DCB      "Incorrect sBIT chunk length",0
000c50  72726563
000c54  74207342
000c58  49542063
000c5c  68756e6b
000c60  206c656e
000c64  67746800
                  |L1.3176|
000c68  4d697373          DCB      "Missing IHDR before cHRM",0
000c6c  696e6720
000c70  49484452
000c74  20626566
000c78  6f726520
000c7c  6348524d
000c80  00      
000c81  00                DCB      0
000c82  00                DCB      0
000c83  00                DCB      0
                  |L1.3204|
000c84  496e7661          DCB      "Invalid cHRM after IDAT",0
000c88  6c696420
000c8c  6348524d
000c90  20616674
000c94  65722049
000c98  44415400
                  |L1.3228|
000c9c  982a              LDR      r0,[sp,#0xa8]         ;740
000c9e  f89001a8          LDRB     r0,[r0,#0x1a8]        ;740
000ca2  f0000002          AND      r0,r0,#2              ;740
000ca6  b118              CBZ      r0,|L1.3248|
000ca8  a1f6              ADR      r1,|L1.4228|
000caa  982a              LDR      r0,[sp,#0xa8]         ;742
000cac  f7fffffe          BL       png_warning
                  |L1.3248|
000cb0  b196              CBZ      r6,|L1.3288|
000cb2  7a30              LDRB     r0,[r6,#8]            ;744
000cb4  f0000004          AND      r0,r0,#4              ;744
000cb8  b170              CBZ      r0,|L1.3288|
000cba  8930              LDRH     r0,[r6,#8]            ;746
000cbc  f4006000          AND      r0,r0,#0x800          ;746
000cc0  b950              CBNZ     r0,|L1.3288|
000cc2  a1f7              ADR      r1,|L1.4256|
000cc4  982a              LDR      r0,[sp,#0xa8]         ;750
000cc6  f7fffffe          BL       png_warning
000cca  992c              LDR      r1,[sp,#0xb0]         ;751
000ccc  982a              LDR      r0,[sp,#0xa8]         ;751
000cce  f7fffffe          BL       png_crc_finish
                  |L1.3282|
000cd2  b02d              ADD      sp,sp,#0xb4
000cd4  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.3288|
000cd8  982c              LDR      r0,[sp,#0xb0]         ;755
000cda  2820              CMP      r0,#0x20              ;755
000cdc  d008              BEQ      |L1.3312|
000cde  a1f6              ADR      r1,|L1.4280|
000ce0  982a              LDR      r0,[sp,#0xa8]         ;757
000ce2  f7fffffe          BL       png_warning
000ce6  992c              LDR      r1,[sp,#0xb0]         ;758
000ce8  982a              LDR      r0,[sp,#0xa8]         ;758
000cea  f7fffffe          BL       png_crc_finish
000cee  e7f0              B        |L1.3282|
                  |L1.3312|
000cf0  2204              MOVS     r2,#4                 ;762
000cf2  a929              ADD      r1,sp,#0xa4           ;762
000cf4  982a              LDR      r0,[sp,#0xa8]         ;762
000cf6  f7fffffe          BL       png_crc_read
000cfa  a829              ADD      r0,sp,#0xa4           ;763
000cfc  f7fffffe          BL       png_get_uint_32
000d00  4605              MOV      r5,r0                 ;763
000d02  2204              MOVS     r2,#4                 ;765
000d04  a929              ADD      r1,sp,#0xa4           ;765
000d06  982a              LDR      r0,[sp,#0xa8]         ;765
000d08  f7fffffe          BL       png_crc_read
000d0c  a829              ADD      r0,sp,#0xa4           ;766
000d0e  f7fffffe          BL       png_get_uint_32
000d12  4604              MOV      r4,r0                 ;766
000d14  48ef              LDR      r0,|L1.4308|
000d16  4285              CMP      r5,r0                 ;768
000d18  d805              BHI      |L1.3366|
000d1a  4284              CMP      r4,r0                 ;768
000d1c  d803              BHI      |L1.3366|
000d1e  1928              ADDS     r0,r5,r4              ;769
000d20  49ed              LDR      r1,|L1.4312|
000d22  4288              CMP      r0,r1                 ;769
000d24  d908              BLS      |L1.3384|
                  |L1.3366|
000d26  a1ed              ADR      r1,|L1.4316|
000d28  982a              LDR      r0,[sp,#0xa8]         ;771
000d2a  f7fffffe          BL       png_warning
000d2e  2118              MOVS     r1,#0x18              ;772
000d30  982a              LDR      r0,[sp,#0xa8]         ;772
000d32  f7fffffe          BL       png_crc_finish
000d36  e7cc              B        |L1.3282|
                  |L1.3384|
000d38  462f              MOV      r7,r5                 ;775
000d3a  46a0              MOV      r8,r4                 ;776
000d3c  2204              MOVS     r2,#4                 ;778
000d3e  a929              ADD      r1,sp,#0xa4           ;778
000d40  982a              LDR      r0,[sp,#0xa8]         ;778
000d42  f7fffffe          BL       png_crc_read
000d46  a829              ADD      r0,sp,#0xa4           ;779
000d48  f7fffffe          BL       png_get_uint_32
000d4c  4605              MOV      r5,r0                 ;779
000d4e  2204              MOVS     r2,#4                 ;781
000d50  a929              ADD      r1,sp,#0xa4           ;781
000d52  982a              LDR      r0,[sp,#0xa8]         ;781
000d54  f7fffffe          BL       png_crc_read
000d58  a829              ADD      r0,sp,#0xa4           ;782
000d5a  f7fffffe          BL       png_get_uint_32
000d5e  4604              MOV      r4,r0                 ;782
000d60  1928              ADDS     r0,r5,r4              ;784
000d62  49dd              LDR      r1,|L1.4312|
000d64  4288              CMP      r0,r1                 ;784
000d66  d908              BLS      |L1.3450|
000d68  a1e3              ADR      r1,|L1.4344|
000d6a  982a              LDR      r0,[sp,#0xa8]         ;786
000d6c  f7fffffe          BL       png_warning
000d70  2110              MOVS     r1,#0x10              ;787
000d72  982a              LDR      r0,[sp,#0xa8]         ;787
000d74  f7fffffe          BL       png_crc_finish
000d78  e7ab              B        |L1.3282|
                  |L1.3450|
000d7a  46a9              MOV      r9,r5                 ;790
000d7c  9420              STR      r4,[sp,#0x80]         ;791
000d7e  2204              MOVS     r2,#4                 ;793
000d80  a929              ADD      r1,sp,#0xa4           ;793
000d82  982a              LDR      r0,[sp,#0xa8]         ;793
000d84  f7fffffe          BL       png_crc_read
000d88  a829              ADD      r0,sp,#0xa4           ;794
000d8a  f7fffffe          BL       png_get_uint_32
000d8e  4605              MOV      r5,r0                 ;794
000d90  2204              MOVS     r2,#4                 ;796
000d92  a929              ADD      r1,sp,#0xa4           ;796
000d94  982a              LDR      r0,[sp,#0xa8]         ;796
000d96  f7fffffe          BL       png_crc_read
000d9a  a829              ADD      r0,sp,#0xa4           ;797
000d9c  f7fffffe          BL       png_get_uint_32
000da0  4604              MOV      r4,r0                 ;797
000da2  1928              ADDS     r0,r5,r4              ;799
000da4  49cc              LDR      r1,|L1.4312|
000da6  4288              CMP      r0,r1                 ;799
000da8  d908              BLS      |L1.3516|
000daa  a1d9              ADR      r1,|L1.4368|
000dac  982a              LDR      r0,[sp,#0xa8]         ;801
000dae  f7fffffe          BL       png_warning
000db2  2108              MOVS     r1,#8                 ;802
000db4  982a              LDR      r0,[sp,#0xa8]         ;802
000db6  f7fffffe          BL       png_crc_finish
000dba  e78a              B        |L1.3282|
                  |L1.3516|
000dbc  46aa              MOV      r10,r5                ;805
000dbe  46a3              MOV      r11,r4                ;806
000dc0  2204              MOVS     r2,#4                 ;808
000dc2  a929              ADD      r1,sp,#0xa4           ;808
000dc4  982a              LDR      r0,[sp,#0xa8]         ;808
000dc6  f7fffffe          BL       png_crc_read
000dca  a829              ADD      r0,sp,#0xa4           ;809
000dcc  f7fffffe          BL       png_get_uint_32
000dd0  4605              MOV      r5,r0                 ;809
000dd2  2204              MOVS     r2,#4                 ;811
000dd4  a929              ADD      r1,sp,#0xa4           ;811
000dd6  982a              LDR      r0,[sp,#0xa8]         ;811
000dd8  f7fffffe          BL       png_crc_read
000ddc  a829              ADD      r0,sp,#0xa4           ;812
000dde  f7fffffe          BL       png_get_uint_32
000de2  4604              MOV      r4,r0                 ;812
000de4  1928              ADDS     r0,r5,r4              ;814
000de6  49bc              LDR      r1,|L1.4312|
000de8  4288              CMP      r0,r1                 ;814
000dea  d908              BLS      |L1.3582|
000dec  a1cf              ADR      r1,|L1.4396|
000dee  982a              LDR      r0,[sp,#0xa8]         ;816
000df0  f7fffffe          BL       png_warning
000df4  2100              MOVS     r1,#0                 ;817
000df6  982a              LDR      r0,[sp,#0xa8]         ;817
000df8  f7fffffe          BL       png_crc_finish
000dfc  e769              B        |L1.3282|
                  |L1.3582|
000dfe  951f              STR      r5,[sp,#0x7c]         ;820
000e00  941e              STR      r4,[sp,#0x78]         ;821
000e02  4638              MOV      r0,r7                 ;824
000e04  f7fffffe          BL       __aeabi_i2f
000e08  49ce              LDR      r1,|L1.4420|
000e0a  901d              STR      r0,[sp,#0x74]         ;824
000e0c  f7fffffe          BL       __aeabi_fdiv
000e10  9028              STR      r0,[sp,#0xa0]         ;824
000e12  4640              MOV      r0,r8                 ;825
000e14  f7fffffe          BL       __aeabi_i2f
000e18  49ca              LDR      r1,|L1.4420|
000e1a  901d              STR      r0,[sp,#0x74]         ;825
000e1c  f7fffffe          BL       __aeabi_fdiv
000e20  9027              STR      r0,[sp,#0x9c]         ;825
000e22  4648              MOV      r0,r9                 ;826
000e24  f7fffffe          BL       __aeabi_i2f
000e28  49c6              LDR      r1,|L1.4420|
000e2a  901d              STR      r0,[sp,#0x74]         ;826
000e2c  f7fffffe          BL       __aeabi_fdiv
000e30  9026              STR      r0,[sp,#0x98]         ;826
000e32  9820              LDR      r0,[sp,#0x80]         ;827
000e34  f7fffffe          BL       __aeabi_i2f
000e38  49c2              LDR      r1,|L1.4420|
000e3a  901d              STR      r0,[sp,#0x74]         ;827
000e3c  f7fffffe          BL       __aeabi_fdiv
000e40  9025              STR      r0,[sp,#0x94]         ;827
000e42  4650              MOV      r0,r10                ;828
000e44  f7fffffe          BL       __aeabi_i2f
000e48  49be              LDR      r1,|L1.4420|
000e4a  901d              STR      r0,[sp,#0x74]         ;828
000e4c  f7fffffe          BL       __aeabi_fdiv
000e50  9024              STR      r0,[sp,#0x90]         ;828
000e52  4658              MOV      r0,r11                ;829
000e54  f7fffffe          BL       __aeabi_i2f
000e58  49ba              LDR      r1,|L1.4420|
000e5a  901d              STR      r0,[sp,#0x74]         ;829
000e5c  f7fffffe          BL       __aeabi_fdiv
000e60  9023              STR      r0,[sp,#0x8c]         ;829
000e62  981f              LDR      r0,[sp,#0x7c]         ;830
000e64  f7fffffe          BL       __aeabi_i2f
000e68  49b6              LDR      r1,|L1.4420|
000e6a  901d              STR      r0,[sp,#0x74]         ;830
000e6c  f7fffffe          BL       __aeabi_fdiv
000e70  9022              STR      r0,[sp,#0x88]         ;830
000e72  981e              LDR      r0,[sp,#0x78]         ;831
000e74  f7fffffe          BL       __aeabi_i2f
000e78  49b2              LDR      r1,|L1.4420|
000e7a  901d              STR      r0,[sp,#0x74]         ;831
000e7c  f7fffffe          BL       __aeabi_fdiv
000e80  9021              STR      r0,[sp,#0x84]         ;831
000e82  2e00              CMP      r6,#0                 ;835
000e84  d051              BEQ      |L1.3882|
000e86  8930              LDRH     r0,[r6,#8]            ;835
000e88  f4006000          AND      r0,r0,#0x800          ;835
000e8c  2800              CMP      r0,#0                 ;835
000e8e  d04c              BEQ      |L1.3882|
000e90  f247603e          MOV      r0,#0x763e            ;837
000e94  4287              CMP      r7,r0                 ;837
000e96  db3f              BLT      |L1.3864|
000e98  f647600e          MOV      r0,#0x7e0e            ;837
000e9c  4287              CMP      r7,r0                 ;837
000e9e  dc3b              BGT      |L1.3864|
000ea0  f647409c          MOV      r0,#0x7c9c            ;838
000ea4  4580              CMP      r8,r0                 ;838
000ea6  db37              BLT      |L1.3864|
000ea8  f248406c          MOV      r0,#0x846c            ;838
000eac  4580              CMP      r8,r0                 ;838
000eae  dc33              BGT      |L1.3864|
000eb0  f24f6018          MOV      r0,#0xf618            ;839
000eb4  4581              CMP      r9,r0                 ;839
000eb6  db2f              BLT      |L1.3864|
000eb8  f64f50e8          MOV      r0,#0xfde8            ;839
000ebc  4581              CMP      r9,r0                 ;839
000ebe  dc2b              BGT      |L1.3864|
000ec0  9820              LDR      r0,[sp,#0x80]         ;840
000ec2  f5b04ffa          CMP      r0,#0x7d00            ;840
000ec6  db27              BLT      |L1.3864|
000ec8  f24841d0          MOV      r1,#0x84d0            ;840
000ecc  9820              LDR      r0,[sp,#0x80]         ;840
000ece  4288              CMP      r0,r1                 ;840
000ed0  dc22              BGT      |L1.3864|
000ed2  f2471048          MOV      r0,#0x7148            ;841
000ed6  4582              CMP      r10,r0                ;841
000ed8  db1e              BLT      |L1.3864|
000eda  f6471018          MOV      r0,#0x7918            ;841
000ede  4582              CMP      r10,r0                ;841
000ee0  dc1a              BGT      |L1.3864|
000ee2  f24e6078          MOV      r0,#0xe678            ;842
000ee6  4583              CMP      r11,r0                ;842
000ee8  db16              BLT      |L1.3864|
000eea  f64e6048          MOV      r0,#0xee48            ;842
000eee  4583              CMP      r11,r0                ;842
000ef0  dc12              BGT      |L1.3864|
000ef2  f24361b0          MOV      r1,#0x36b0            ;843
000ef6  981f              LDR      r0,[sp,#0x7c]         ;843
000ef8  4288              CMP      r0,r1                 ;843
000efa  db0d              BLT      |L1.3864|
000efc  981f              LDR      r0,[sp,#0x7c]         ;843
000efe  f5b05f7a          CMP      r0,#0x3e80            ;843
000f02  dc09              BGT      |L1.3864|
000f04  f2413188          MOV      r1,#0x1388            ;844
000f08  981e              LDR      r0,[sp,#0x78]         ;844
000f0a  4288              CMP      r0,r1                 ;844
000f0c  db04              BLT      |L1.3864|
000f0e  f6413158          MOV      r1,#0x1b58            ;844
000f12  981e              LDR      r0,[sp,#0x78]         ;844
000f14  4288              CMP      r0,r1                 ;844
000f16  dd03              BLE      |L1.3872|
                  |L1.3864|
000f18  a18b              ADR      r1,|L1.4424|
000f1a  982a              LDR      r0,[sp,#0xa8]         ;846
000f1c  f7fffffe          BL       png_warning
                  |L1.3872|
000f20  2100              MOVS     r1,#0                 ;862
000f22  982a              LDR      r0,[sp,#0xa8]         ;862
000f24  f7fffffe          BL       png_crc_finish
000f28  e6d3              B        |L1.3282|
                  |L1.3882|
000f2a  9821              LDR      r0,[sp,#0x84]         ;868
000f2c  f7fffffe          BL       __aeabi_f2d
000f30  e9cd011c          STRD     r0,r1,[sp,#0x70]      ;868
000f34  9822              LDR      r0,[sp,#0x88]         ;868
000f36  f7fffffe          BL       __aeabi_f2d
000f3a  e9cd011a          STRD     r0,r1,[sp,#0x68]      ;868
000f3e  9823              LDR      r0,[sp,#0x8c]         ;868
000f40  f7fffffe          BL       __aeabi_f2d
000f44  e9cd0118          STRD     r0,r1,[sp,#0x60]      ;868
000f48  9824              LDR      r0,[sp,#0x90]         ;868
000f4a  f7fffffe          BL       __aeabi_f2d
000f4e  e9cd0116          STRD     r0,r1,[sp,#0x58]      ;868
000f52  9825              LDR      r0,[sp,#0x94]         ;868
000f54  f7fffffe          BL       __aeabi_f2d
000f58  e9cd0114          STRD     r0,r1,[sp,#0x50]      ;868
000f5c  9826              LDR      r0,[sp,#0x98]         ;868
000f5e  f7fffffe          BL       __aeabi_f2d
000f62  e9cd0112          STRD     r0,r1,[sp,#0x48]      ;868
000f66  9827              LDR      r0,[sp,#0x9c]         ;868
000f68  f7fffffe          BL       __aeabi_f2d
000f6c  e9cd0110          STRD     r0,r1,[sp,#0x40]      ;868
000f70  9828              LDR      r0,[sp,#0xa0]         ;868
000f72  f7fffffe          BL       __aeabi_f2d
000f76  e9cd010e          STRD     r0,r1,[sp,#0x38]      ;868
000f7a  e9dd011c          LDRD     r0,r1,[sp,#0x70]      ;868
000f7e  e9cd010c          STRD     r0,r1,[sp,#0x30]      ;868
000f82  e9dd011a          LDRD     r0,r1,[sp,#0x68]      ;868
000f86  e9cd010a          STRD     r0,r1,[sp,#0x28]      ;868
000f8a  e9dd0118          LDRD     r0,r1,[sp,#0x60]      ;868
000f8e  e9cd0108          STRD     r0,r1,[sp,#0x20]      ;868
000f92  e9dd0116          LDRD     r0,r1,[sp,#0x58]      ;868
000f96  e9cd0106          STRD     r0,r1,[sp,#0x18]      ;868
000f9a  e9dd0114          LDRD     r0,r1,[sp,#0x50]      ;868
000f9e  e9cd0104          STRD     r0,r1,[sp,#0x10]      ;868
000fa2  e9dd0112          LDRD     r0,r1,[sp,#0x48]      ;868
000fa6  e9cd0102          STRD     r0,r1,[sp,#8]         ;868
000faa  e9dd0110          LDRD     r0,r1,[sp,#0x40]      ;868
000fae  e9cd0100          STRD     r0,r1,[sp,#0]         ;868
000fb2  4631              MOV      r1,r6                 ;868
000fb4  e9dd230e          LDRD     r2,r3,[sp,#0x38]      ;868
000fb8  982a              LDR      r0,[sp,#0xa8]         ;868
000fba  f7fffffe          BL       png_set_cHRM
000fbe  e9dd011e          LDRD     r0,r1,[sp,#0x78]      ;872
000fc2  e9cdab02          STRD     r10,r11,[sp,#8]       ;872
000fc6  e9cd1004          STRD     r1,r0,[sp,#0x10]      ;872
000fca  9820              LDR      r0,[sp,#0x80]         ;872
000fcc  4643              MOV      r3,r8                 ;872
000fce  463a              MOV      r2,r7                 ;872
000fd0  4631              MOV      r1,r6                 ;872
000fd2  e9cd9000          STRD     r9,r0,[sp,#0]         ;872
000fd6  982a              LDR      r0,[sp,#0xa8]         ;872
000fd8  f7fffffe          BL       png_set_cHRM_fixed
000fdc  2100              MOVS     r1,#0                 ;876
000fde  982a              LDR      r0,[sp,#0xa8]         ;876
000fe0  f7fffffe          BL       png_crc_finish
000fe4  b100              CBZ      r0,|L1.4072|
000fe6  e674              B        |L1.3282|
                  |L1.4072|
000fe8  bf00              NOP      
000fea  e672              B        |L1.3282|
;;;879    #endif
                          ENDP

                  png_handle_sRGB PROC
;;;882    void /* PRIVATE */
;;;883    png_handle_sRGB(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)
000fec  e92d43f8          PUSH     {r3-r9,lr}
;;;884    {
000ff0  4605              MOV      r5,r0
000ff2  460c              MOV      r4,r1
000ff4  4616              MOV      r6,r2
;;;885       int intent;
;;;886       png_byte buf[1];
;;;887    
;;;888       png_debug(1, "in png_handle_sRGB\n");
;;;889    
;;;890       if (!(png_ptr->mode & PNG_HAVE_IHDR))
000ff6  f89501a8          LDRB     r0,[r5,#0x1a8]
000ffa  f0000001          AND      r0,r0,#1
000ffe  b920              CBNZ     r0,|L1.4106|
;;;891          png_error(png_ptr, "Missing IHDR before sRGB");
001000  a15f              ADR      r1,|L1.4480|
001002  4628              MOV      r0,r5
001004  f7fffffe          BL       png_error
001008  e017              B        |L1.4154|
                  |L1.4106|
;;;892       else if (png_ptr->mode & PNG_HAVE_IDAT)
00100a  f89501a8          LDRB     r0,[r5,#0x1a8]
00100e  f0000004          AND      r0,r0,#4
001012  b148              CBZ      r0,|L1.4136|
;;;893       {
;;;894          png_warning(png_ptr, "Invalid sRGB after IDAT");
001014  a161              ADR      r1,|L1.4508|
001016  4628              MOV      r0,r5
001018  f7fffffe          BL       png_warning
;;;895          png_crc_finish(png_ptr, length);
00101c  4631              MOV      r1,r6
00101e  4628              MOV      r0,r5
001020  f7fffffe          BL       png_crc_finish
                  |L1.4132|
;;;896          return;
;;;897       }
;;;898       else if (png_ptr->mode & PNG_HAVE_PLTE)
;;;899          /* Should be an error, but we can cope with it */
;;;900          png_warning(png_ptr, "Out of place sRGB chunk");
;;;901    
;;;902       if (info_ptr != NULL && (info_ptr->valid & PNG_INFO_sRGB))
;;;903       {
;;;904          png_warning(png_ptr, "Duplicate sRGB chunk");
;;;905          png_crc_finish(png_ptr, length);
;;;906          return;
;;;907       }
;;;908    
;;;909       if (length != 1)
;;;910       {
;;;911          png_warning(png_ptr, "Incorrect sRGB chunk length");
;;;912          png_crc_finish(png_ptr, length);
;;;913          return;
;;;914       }
;;;915    
;;;916       png_crc_read(png_ptr, buf, 1);
;;;917       if (png_crc_finish(png_ptr, 0))
;;;918          return;
;;;919    
;;;920       intent = buf[0];
;;;921       /* check for bad intent */
;;;922       if (intent >= PNG_sRGB_INTENT_LAST)
;;;923       {
;;;924          png_warning(png_ptr, "Unknown sRGB intent");
;;;925          return;
;;;926       }
;;;927    
;;;928    #if defined(PNG_READ_gAMA_SUPPORTED) && defined(PNG_READ_GAMMA_SUPPORTED)
;;;929       if (info_ptr != NULL && (info_ptr->valid & PNG_INFO_gAMA))
;;;930       {
;;;931       png_fixed_point igamma;
;;;932    #ifdef PNG_FIXED_POINT_SUPPORTED
;;;933          igamma=info_ptr->int_gamma;
;;;934    #else
;;;935    #  ifdef PNG_FLOATING_POINT_SUPPORTED
;;;936          igamma=(png_fixed_point)(info_ptr->gamma * 100000.);
;;;937    #  endif
;;;938    #endif
;;;939          if (PNG_OUT_OF_RANGE(igamma, 45500L, 500))
;;;940          {
;;;941             png_warning(png_ptr,
;;;942               "Ignoring incorrect gAMA value when sRGB is also present");
;;;943    #ifndef PNG_NO_CONSOLE_IO
;;;944    #  ifdef PNG_FIXED_POINT_SUPPORTED
;;;945             fprintf(stderr,"incorrect gamma=(%d/100000)\n",(int)png_ptr->int_gamma);
;;;946    #  else
;;;947    #    ifdef PNG_FLOATING_POINT_SUPPORTED
;;;948             fprintf(stderr,"incorrect gamma=%f\n",png_ptr->gamma);
;;;949    #    endif
;;;950    #  endif
;;;951    #endif
;;;952          }
;;;953       }
;;;954    #endif /* PNG_READ_gAMA_SUPPORTED */
;;;955    
;;;956    #ifdef PNG_READ_cHRM_SUPPORTED
;;;957    #ifdef PNG_FIXED_POINT_SUPPORTED
;;;958       if (info_ptr != NULL && (info_ptr->valid & PNG_INFO_cHRM))
;;;959          if (PNG_OUT_OF_RANGE(info_ptr->int_x_white, 31270,  1000) ||
;;;960              PNG_OUT_OF_RANGE(info_ptr->int_y_white, 32900,  1000) ||
;;;961              PNG_OUT_OF_RANGE(info_ptr->int_x_red,   64000L, 1000) ||
;;;962              PNG_OUT_OF_RANGE(info_ptr->int_y_red,   33000,  1000) ||
;;;963              PNG_OUT_OF_RANGE(info_ptr->int_x_green, 30000,  1000) ||
;;;964              PNG_OUT_OF_RANGE(info_ptr->int_y_green, 60000L, 1000) ||
;;;965              PNG_OUT_OF_RANGE(info_ptr->int_x_blue,  15000,  1000) ||
;;;966              PNG_OUT_OF_RANGE(info_ptr->int_y_blue,   6000,  1000))
;;;967             {
;;;968                png_warning(png_ptr,
;;;969                  "Ignoring incorrect cHRM value when sRGB is also present");
;;;970             }
;;;971    #endif /* PNG_FIXED_POINT_SUPPORTED */
;;;972    #endif /* PNG_READ_cHRM_SUPPORTED */
;;;973    
;;;974       png_set_sRGB_gAMA_and_cHRM(png_ptr, info_ptr, intent);
;;;975    }
001024  e8bd83f8          POP      {r3-r9,pc}
                  |L1.4136|
001028  f89501a8          LDRB     r0,[r5,#0x1a8]        ;898
00102c  f0000002          AND      r0,r0,#2              ;898
001030  b118              CBZ      r0,|L1.4154|
001032  a160              ADR      r1,|L1.4532|
001034  4628              MOV      r0,r5                 ;900
001036  f7fffffe          BL       png_warning
                  |L1.4154|
00103a  b164              CBZ      r4,|L1.4182|
00103c  8920              LDRH     r0,[r4,#8]            ;902
00103e  f4006000          AND      r0,r0,#0x800          ;902
001042  b140              CBZ      r0,|L1.4182|
001044  a161              ADR      r1,|L1.4556|
001046  4628              MOV      r0,r5                 ;904
001048  f7fffffe          BL       png_warning
00104c  4631              MOV      r1,r6                 ;905
00104e  4628              MOV      r0,r5                 ;905
001050  f7fffffe          BL       png_crc_finish
001054  e7e6              B        |L1.4132|
                  |L1.4182|
001056  2e01              CMP      r6,#1                 ;909
001058  d008              BEQ      |L1.4204|
00105a  a162              ADR      r1,|L1.4580|
00105c  4628              MOV      r0,r5                 ;911
00105e  f7fffffe          BL       png_warning
001062  4631              MOV      r1,r6                 ;912
001064  4628              MOV      r0,r5                 ;912
001066  f7fffffe          BL       png_crc_finish
00106a  e7db              B        |L1.4132|
                  |L1.4204|
00106c  2201              MOVS     r2,#1                 ;916
00106e  4669              MOV      r1,sp                 ;916
001070  4628              MOV      r0,r5                 ;916
001072  f7fffffe          BL       png_crc_read
001076  2100              MOVS     r1,#0                 ;917
001078  4628              MOV      r0,r5                 ;917
00107a  f7fffffe          BL       png_crc_finish
00107e  b100              CBZ      r0,|L1.4226|
001080  e7d0              B        |L1.4132|
                  |L1.4226|
001082  e0bd              B        |L1.4608|
                  |L1.4228|
001084  4d697373          DCB      "Missing PLTE before cHRM",0
001088  696e6720
00108c  504c5445
001090  20626566
001094  6f726520
001098  6348524d
00109c  00      
00109d  00                DCB      0
00109e  00                DCB      0
00109f  00                DCB      0
                  |L1.4256|
0010a0  4475706c          DCB      "Duplicate cHRM chunk",0
0010a4  69636174
0010a8  65206348
0010ac  524d2063
0010b0  68756e6b
0010b4  00      
0010b5  00                DCB      0
0010b6  00                DCB      0
0010b7  00                DCB      0
                  |L1.4280|
0010b8  496e636f          DCB      "Incorrect cHRM chunk length",0
0010bc  72726563
0010c0  74206348
0010c4  524d2063
0010c8  68756e6b
0010cc  206c656e
0010d0  67746800
                  |L1.4308|
                          DCD      0x00013880
                  |L1.4312|
                          DCD      0x000186a0
                  |L1.4316|
0010dc  496e7661          DCB      "Invalid cHRM white point",0
0010e0  6c696420
0010e4  6348524d
0010e8  20776869
0010ec  74652070
0010f0  6f696e74
0010f4  00      
0010f5  00                DCB      0
0010f6  00                DCB      0
0010f7  00                DCB      0
                  |L1.4344|
0010f8  496e7661          DCB      "Invalid cHRM red point",0
0010fc  6c696420
001100  6348524d
001104  20726564
001108  20706f69
00110c  6e7400  
00110f  00                DCB      0
                  |L1.4368|
001110  496e7661          DCB      "Invalid cHRM green point",0
001114  6c696420
001118  6348524d
00111c  20677265
001120  656e2070
001124  6f696e74
001128  00      
001129  00                DCB      0
00112a  00                DCB      0
00112b  00                DCB      0
                  |L1.4396|
00112c  496e7661          DCB      "Invalid cHRM blue point",0
001130  6c696420
001134  6348524d
001138  20626c75
00113c  6520706f
001140  696e7400
                  |L1.4420|
                          DCD      0x47c35000
                  |L1.4424|
001148  49676e6f          DCB      "Ignoring incorrect cHRM value when sRGB is also present"
00114c  72696e67
001150  20696e63
001154  6f727265
001158  63742063
00115c  48524d20
001160  76616c75
001164  65207768
001168  656e2073
00116c  52474220
001170  69732061
001174  6c736f20
001178  70726573
00117c  656e74  
00117f  00                DCB      0
                  |L1.4480|
001180  4d697373          DCB      "Missing IHDR before sRGB",0
001184  696e6720
001188  49484452
00118c  20626566
001190  6f726520
001194  73524742
001198  00      
001199  00                DCB      0
00119a  00                DCB      0
00119b  00                DCB      0
                  |L1.4508|
00119c  496e7661          DCB      "Invalid sRGB after IDAT",0
0011a0  6c696420
0011a4  73524742
0011a8  20616674
0011ac  65722049
0011b0  44415400
                  |L1.4532|
0011b4  4f757420          DCB      "Out of place sRGB chunk",0
0011b8  6f662070
0011bc  6c616365
0011c0  20735247
0011c4  42206368
0011c8  756e6b00
                  |L1.4556|
0011cc  4475706c          DCB      "Duplicate sRGB chunk",0
0011d0  69636174
0011d4  65207352
0011d8  47422063
0011dc  68756e6b
0011e0  00      
0011e1  00                DCB      0
0011e2  00                DCB      0
0011e3  00                DCB      0
                  |L1.4580|
0011e4  496e636f          DCB      "Incorrect sRGB chunk length",0
0011e8  72726563
0011ec  74207352
0011f0  47422063
0011f4  68756e6b
0011f8  206c656e
0011fc  67746800
                  |L1.4608|
001200  f89d7000          LDRB     r7,[sp,#0]            ;920
001204  2f04              CMP      r7,#4                 ;922
001206  db04              BLT      |L1.4626|
001208  a1fe              ADR      r1,|L1.5636|
00120a  4628              MOV      r0,r5                 ;924
00120c  f7fffffe          BL       png_warning
001210  e708              B        |L1.4132|
                  |L1.4626|
001212  b19c              CBZ      r4,|L1.4668|
001214  7a20              LDRB     r0,[r4,#8]            ;929
001216  f0000001          AND      r0,r0,#1              ;929
00121a  b178              CBZ      r0,|L1.4668|
00121c  f8d480fc          LDR      r8,[r4,#0xfc]         ;933
001220  f64a70c8          MOV      r0,#0xafc8            ;939
001224  4580              CMP      r8,r0                 ;939
001226  db03              BLT      |L1.4656|
001228  f24b30b0          MOV      r0,#0xb3b0            ;939
00122c  4580              CMP      r8,r0                 ;939
00122e  dd04              BLE      |L1.4666|
                  |L1.4656|
001230  f2af6188          ADR      r1,|L1.2988|
001234  4628              MOV      r0,r5                 ;941
001236  f7fffffe          BL       png_warning
                  |L1.4666|
00123a  bf00              NOP                            ;953
                  |L1.4668|
00123c  2c00              CMP      r4,#0                 ;958
00123e  d067              BEQ      |L1.4880|
001240  7a20              LDRB     r0,[r4,#8]            ;958
001242  f0000004          AND      r0,r0,#4              ;958
001246  2800              CMP      r0,#0                 ;958
001248  d062              BEQ      |L1.4880|
00124a  f247613e          MOV      r1,#0x763e            ;959
00124e  f8d40100          LDR      r0,[r4,#0x100]        ;959
001252  4288              CMP      r0,r1                 ;959
001254  db57              BLT      |L1.4870|
001256  f647610e          MOV      r1,#0x7e0e            ;959
00125a  f8d40100          LDR      r0,[r4,#0x100]        ;959
00125e  4288              CMP      r0,r1                 ;959
001260  dc51              BGT      |L1.4870|
001262  f647419c          MOV      r1,#0x7c9c            ;960
001266  f8d40104          LDR      r0,[r4,#0x104]        ;960
00126a  4288              CMP      r0,r1                 ;960
00126c  db4b              BLT      |L1.4870|
00126e  f248416c          MOV      r1,#0x846c            ;960
001272  f8d40104          LDR      r0,[r4,#0x104]        ;960
001276  4288              CMP      r0,r1                 ;960
001278  dc45              BGT      |L1.4870|
00127a  f24f6118          MOV      r1,#0xf618            ;961
00127e  f8d40108          LDR      r0,[r4,#0x108]        ;961
001282  4288              CMP      r0,r1                 ;961
001284  db3f              BLT      |L1.4870|
001286  f64f51e8          MOV      r1,#0xfde8            ;961
00128a  f8d40108          LDR      r0,[r4,#0x108]        ;961
00128e  4288              CMP      r0,r1                 ;961
001290  dc39              BGT      |L1.4870|
001292  f8d4010c          LDR      r0,[r4,#0x10c]        ;962
001296  f5b04ffa          CMP      r0,#0x7d00            ;962
00129a  db34              BLT      |L1.4870|
00129c  f24841d0          MOV      r1,#0x84d0            ;962
0012a0  f8d4010c          LDR      r0,[r4,#0x10c]        ;962
0012a4  4288              CMP      r0,r1                 ;962
0012a6  dc2e              BGT      |L1.4870|
0012a8  f2471148          MOV      r1,#0x7148            ;963
0012ac  f8d40110          LDR      r0,[r4,#0x110]        ;963
0012b0  4288              CMP      r0,r1                 ;963
0012b2  db28              BLT      |L1.4870|
0012b4  f6471118          MOV      r1,#0x7918            ;963
0012b8  f8d40110          LDR      r0,[r4,#0x110]        ;963
0012bc  4288              CMP      r0,r1                 ;963
0012be  dc22              BGT      |L1.4870|
0012c0  f24e6178          MOV      r1,#0xe678            ;964
0012c4  f8d40114          LDR      r0,[r4,#0x114]        ;964
0012c8  4288              CMP      r0,r1                 ;964
0012ca  db1c              BLT      |L1.4870|
0012cc  f64e6148          MOV      r1,#0xee48            ;964
0012d0  f8d40114          LDR      r0,[r4,#0x114]        ;964
0012d4  4288              CMP      r0,r1                 ;964
0012d6  dc16              BGT      |L1.4870|
0012d8  f24361b0          MOV      r1,#0x36b0            ;965
0012dc  f8d40118          LDR      r0,[r4,#0x118]        ;965
0012e0  4288              CMP      r0,r1                 ;965
0012e2  db10              BLT      |L1.4870|
0012e4  f8d40118          LDR      r0,[r4,#0x118]        ;965
0012e8  f5b05f7a          CMP      r0,#0x3e80            ;965
0012ec  dc0b              BGT      |L1.4870|
0012ee  f2413188          MOV      r1,#0x1388            ;966
0012f2  f8d4011c          LDR      r0,[r4,#0x11c]        ;966
0012f6  4288              CMP      r0,r1                 ;966
0012f8  db05              BLT      |L1.4870|
0012fa  f6413158          MOV      r1,#0x1b58            ;966
0012fe  f8d4011c          LDR      r0,[r4,#0x11c]        ;966
001302  4288              CMP      r0,r1                 ;966
001304  dd04              BLE      |L1.4880|
                  |L1.4870|
001306  f2af11c0          ADR      r1,|L1.4424|
00130a  4628              MOV      r0,r5                 ;968
00130c  f7fffffe          BL       png_warning
                  |L1.4880|
001310  463a              MOV      r2,r7                 ;974
001312  4621              MOV      r1,r4                 ;974
001314  4628              MOV      r0,r5                 ;974
001316  f7fffffe          BL       png_set_sRGB_gAMA_and_cHRM
00131a  bf00              NOP      
00131c  e682              B        |L1.4132|
;;;976    #endif /* PNG_READ_sRGB_SUPPORTED */
                          ENDP

                  png_handle_iCCP PROC
;;;979    void /* PRIVATE */
;;;980    png_handle_iCCP(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)
00131e  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;981    /* Note: this does not properly handle chunks that are > 64K under DOS */
;;;982    {
001322  b086              SUB      sp,sp,#0x18
001324  4682              MOV      r10,r0
001326  4693              MOV      r11,r2
;;;983       png_charp chunkdata;
;;;984       png_byte compression_type;
;;;985       png_bytep pC;
;;;986       png_charp profile;
;;;987       png_uint_32 skip = 0;
001328  2000              MOVS     r0,#0
00132a  9004              STR      r0,[sp,#0x10]
;;;988       png_uint_32 profile_size, profile_length;
;;;989       png_size_t slength, prefix_length, data_length;
;;;990    
;;;991       png_debug(1, "in png_handle_iCCP\n");
;;;992    
;;;993       if (!(png_ptr->mode & PNG_HAVE_IHDR))
00132c  f89a01a8          LDRB     r0,[r10,#0x1a8]
001330  f0000001          AND      r0,r0,#1
001334  b920              CBNZ     r0,|L1.4928|
;;;994          png_error(png_ptr, "Missing IHDR before iCCP");
001336  a1b8              ADR      r1,|L1.5656|
001338  4650              MOV      r0,r10
00133a  f7fffffe          BL       png_error
00133e  e018              B        |L1.4978|
                  |L1.4928|
;;;995       else if (png_ptr->mode & PNG_HAVE_IDAT)
001340  f89a01a8          LDRB     r0,[r10,#0x1a8]
001344  f0000004          AND      r0,r0,#4
001348  b150              CBZ      r0,|L1.4960|
;;;996       {
;;;997          png_warning(png_ptr, "Invalid iCCP after IDAT");
00134a  a1ba              ADR      r1,|L1.5684|
00134c  4650              MOV      r0,r10
00134e  f7fffffe          BL       png_warning
;;;998          png_crc_finish(png_ptr, length);
001352  4659              MOV      r1,r11
001354  4650              MOV      r0,r10
001356  f7fffffe          BL       png_crc_finish
                  |L1.4954|
;;;999          return;
;;;1000      }
;;;1001      else if (png_ptr->mode & PNG_HAVE_PLTE)
;;;1002         /* Should be an error, but we can cope with it */
;;;1003         png_warning(png_ptr, "Out of place iCCP chunk");
;;;1004   
;;;1005      if (info_ptr != NULL && (info_ptr->valid & PNG_INFO_iCCP))
;;;1006      {
;;;1007         png_warning(png_ptr, "Duplicate iCCP chunk");
;;;1008         png_crc_finish(png_ptr, length);
;;;1009         return;
;;;1010      }
;;;1011   
;;;1012   #ifdef PNG_MAX_MALLOC_64K
;;;1013      if (length > (png_uint_32)65535L)
;;;1014      {
;;;1015         png_warning(png_ptr, "iCCP chunk too large to fit in memory");
;;;1016         skip = length - (png_uint_32)65535L;
;;;1017         length = (png_uint_32)65535L;
;;;1018      }
;;;1019   #endif
;;;1020   
;;;1021      chunkdata = (png_charp)png_malloc(png_ptr, length + 1);
;;;1022      slength = (png_size_t)length;
;;;1023      png_crc_read(png_ptr, (png_bytep)chunkdata, slength);
;;;1024   
;;;1025      if (png_crc_finish(png_ptr, skip))
;;;1026      {
;;;1027         png_free(png_ptr, chunkdata);
;;;1028         return;
;;;1029      }
;;;1030   
;;;1031      chunkdata[slength] = 0x00;
;;;1032   
;;;1033      for (profile = chunkdata; *profile; profile++)
;;;1034         /* empty loop to find end of name */ ;
;;;1035   
;;;1036      ++profile;
;;;1037   
;;;1038      /* there should be at least one zero (the compression type byte)
;;;1039         following the separator, and we should be on it  */
;;;1040      if ( profile >= chunkdata + slength)
;;;1041      {
;;;1042         png_free(png_ptr, chunkdata);
;;;1043         png_warning(png_ptr, "Malformed iCCP chunk");
;;;1044         return;
;;;1045      }
;;;1046   
;;;1047      /* compression_type should always be zero */
;;;1048      compression_type = *profile++;
;;;1049      if (compression_type)
;;;1050      {
;;;1051         png_warning(png_ptr, "Ignoring nonzero compression type in iCCP chunk");
;;;1052         compression_type=0x00;  /* Reset it to zero (libpng-1.0.6 through 1.0.8
;;;1053                                    wrote nonzero) */
;;;1054      }
;;;1055   
;;;1056      prefix_length = profile - chunkdata;
;;;1057      chunkdata = png_decompress_chunk(png_ptr, compression_type, chunkdata,
;;;1058                                       slength, prefix_length, &data_length);
;;;1059   
;;;1060      profile_length = data_length - prefix_length;
;;;1061   
;;;1062      if ( prefix_length > data_length || profile_length < 4)
;;;1063      {
;;;1064         png_free(png_ptr, chunkdata);
;;;1065         png_warning(png_ptr, "Profile size field missing from iCCP chunk");
;;;1066         return;
;;;1067      }
;;;1068   
;;;1069      /* Check the profile_size recorded in the first 32 bits of the ICC profile */
;;;1070      pC = (png_bytep)(chunkdata+prefix_length);
;;;1071      profile_size = ((*(pC  ))<<24) |
;;;1072                     ((*(pC+1))<<16) |
;;;1073                     ((*(pC+2))<< 8) |
;;;1074                     ((*(pC+3))    );
;;;1075   
;;;1076      if(profile_size < profile_length)
;;;1077         profile_length = profile_size;
;;;1078   
;;;1079      if(profile_size > profile_length)
;;;1080      {
;;;1081         png_free(png_ptr, chunkdata);
;;;1082         png_warning(png_ptr, "Ignoring truncated iCCP profile.");
;;;1083         return;
;;;1084      }
;;;1085   
;;;1086      png_set_iCCP(png_ptr, info_ptr, chunkdata, compression_type,
;;;1087                   chunkdata + prefix_length, profile_length);
;;;1088      png_free(png_ptr, chunkdata);
;;;1089   }
00135a  b009              ADD      sp,sp,#0x24
00135c  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.4960|
001360  f89a01a8          LDRB     r0,[r10,#0x1a8]       ;1001
001364  f0000002          AND      r0,r0,#2              ;1001
001368  b118              CBZ      r0,|L1.4978|
00136a  a1b8              ADR      r1,|L1.5708|
00136c  4650              MOV      r0,r10                ;1003
00136e  f7fffffe          BL       png_warning
                  |L1.4978|
001372  9807              LDR      r0,[sp,#0x1c]         ;1005
001374  b168              CBZ      r0,|L1.5010|
001376  9807              LDR      r0,[sp,#0x1c]         ;1005
001378  8900              LDRH     r0,[r0,#8]            ;1005
00137a  f4005080          AND      r0,r0,#0x1000         ;1005
00137e  b140              CBZ      r0,|L1.5010|
001380  a1b8              ADR      r1,|L1.5732|
001382  4650              MOV      r0,r10                ;1007
001384  f7fffffe          BL       png_warning
001388  4659              MOV      r1,r11                ;1008
00138a  4650              MOV      r0,r10                ;1008
00138c  f7fffffe          BL       png_crc_finish
001390  e7e3              B        |L1.4954|
                  |L1.5010|
001392  f10b0101          ADD      r1,r11,#1             ;1021
001396  4650              MOV      r0,r10                ;1021
001398  f7fffffe          BL       png_malloc
00139c  4604              MOV      r4,r0                 ;1021
00139e  465e              MOV      r6,r11                ;1022
0013a0  4632              MOV      r2,r6                 ;1023
0013a2  4621              MOV      r1,r4                 ;1023
0013a4  4650              MOV      r0,r10                ;1023
0013a6  f7fffffe          BL       png_crc_read
0013aa  4650              MOV      r0,r10                ;1025
0013ac  9904              LDR      r1,[sp,#0x10]         ;1025
0013ae  f7fffffe          BL       png_crc_finish
0013b2  b120              CBZ      r0,|L1.5054|
0013b4  4621              MOV      r1,r4                 ;1027
0013b6  4650              MOV      r0,r10                ;1027
0013b8  f7fffffe          BL       png_free
0013bc  e7cd              B        |L1.4954|
                  |L1.5054|
0013be  2000              MOVS     r0,#0                 ;1031
0013c0  55a0              STRB     r0,[r4,r6]            ;1031
0013c2  4625              MOV      r5,r4                 ;1033
0013c4  e000              B        |L1.5064|
                  |L1.5062|
0013c6  1c6d              ADDS     r5,r5,#1              ;1033
                  |L1.5064|
0013c8  7828              LDRB     r0,[r5,#0]            ;1033
0013ca  2800              CMP      r0,#0                 ;1033
0013cc  d1fb              BNE      |L1.5062|
0013ce  1c6d              ADDS     r5,r5,#1              ;1036
0013d0  19a0              ADDS     r0,r4,r6              ;1040
0013d2  42a8              CMP      r0,r5                 ;1040
0013d4  d808              BHI      |L1.5096|
0013d6  4621              MOV      r1,r4                 ;1042
0013d8  4650              MOV      r0,r10                ;1042
0013da  f7fffffe          BL       png_free
0013de  a1a7              ADR      r1,|L1.5756|
0013e0  4650              MOV      r0,r10                ;1043
0013e2  f7fffffe          BL       png_warning
0013e6  e7b8              B        |L1.4954|
                  |L1.5096|
0013e8  f8150b01          LDRB     r0,[r5],#1            ;1048
0013ec  9005              STR      r0,[sp,#0x14]         ;1048
0013ee  9805              LDR      r0,[sp,#0x14]         ;1049
0013f0  b128              CBZ      r0,|L1.5118|
0013f2  a1a8              ADR      r1,|L1.5780|
0013f4  4650              MOV      r0,r10                ;1051
0013f6  f7fffffe          BL       png_warning
0013fa  2000              MOVS     r0,#0                 ;1052
0013fc  9005              STR      r0,[sp,#0x14]         ;1052
                  |L1.5118|
0013fe  1b2f              SUBS     r7,r5,r4              ;1056
001400  a802              ADD      r0,sp,#8              ;1057
001402  4633              MOV      r3,r6                 ;1057
001404  4622              MOV      r2,r4                 ;1057
001406  e9cd7000          STRD     r7,r0,[sp,#0]         ;1057
00140a  4650              MOV      r0,r10                ;1057
00140c  9905              LDR      r1,[sp,#0x14]         ;1057
00140e  f7fffffe          BL       png_decompress_chunk
001412  4604              MOV      r4,r0                 ;1057
001414  9802              LDR      r0,[sp,#8]            ;1060
001416  eba00907          SUB      r9,r0,r7              ;1060
00141a  9802              LDR      r0,[sp,#8]            ;1062
00141c  4287              CMP      r7,r0                 ;1062
00141e  d802              BHI      |L1.5158|
001420  f1b90f04          CMP      r9,#4                 ;1062
001424  d208              BCS      |L1.5176|
                  |L1.5158|
001426  4621              MOV      r1,r4                 ;1064
001428  4650              MOV      r0,r10                ;1064
00142a  f7fffffe          BL       png_free
00142e  a1a5              ADR      r1,|L1.5828|
001430  4650              MOV      r0,r10                ;1065
001432  f7fffffe          BL       png_warning
001436  e790              B        |L1.4954|
                  |L1.5176|
001438  eb040807          ADD      r8,r4,r7              ;1070
00143c  f8980000          LDRB     r0,[r8,#0]            ;1071
001440  0600              LSLS     r0,r0,#24             ;1071
001442  f8981001          LDRB     r1,[r8,#1]            ;1071
001446  ea404001          ORR      r0,r0,r1,LSL #16      ;1071
00144a  f8981002          LDRB     r1,[r8,#2]            ;1071
00144e  ea402001          ORR      r0,r0,r1,LSL #8       ;1071
001452  f8981003          LDRB     r1,[r8,#3]            ;1071
001456  4308              ORRS     r0,r0,r1              ;1071
001458  9003              STR      r0,[sp,#0xc]          ;1071
00145a  9803              LDR      r0,[sp,#0xc]          ;1076
00145c  4548              CMP      r0,r9                 ;1076
00145e  d201              BCS      |L1.5220|
001460  f8dd900c          LDR      r9,[sp,#0xc]          ;1077
                  |L1.5220|
001464  9803              LDR      r0,[sp,#0xc]          ;1079
001466  4548              CMP      r0,r9                 ;1079
001468  d908              BLS      |L1.5244|
00146a  4621              MOV      r1,r4                 ;1081
00146c  4650              MOV      r0,r10                ;1081
00146e  f7fffffe          BL       png_free
001472  a19f              ADR      r1,|L1.5872|
001474  4650              MOV      r0,r10                ;1082
001476  f7fffffe          BL       png_warning
00147a  e76e              B        |L1.4954|
                  |L1.5244|
00147c  19e0              ADDS     r0,r4,r7              ;1086
00147e  e9cd0900          STRD     r0,r9,[sp,#0]         ;1086
001482  4622              MOV      r2,r4                 ;1086
001484  4650              MOV      r0,r10                ;1086
001486  9b05              LDR      r3,[sp,#0x14]         ;1086
001488  9907              LDR      r1,[sp,#0x1c]         ;1086
00148a  f7fffffe          BL       png_set_iCCP
00148e  4621              MOV      r1,r4                 ;1088
001490  4650              MOV      r0,r10                ;1088
001492  f7fffffe          BL       png_free
001496  bf00              NOP      
001498  e75f              B        |L1.4954|
;;;1090   #endif /* PNG_READ_iCCP_SUPPORTED */
                          ENDP

                  png_handle_sPLT PROC
;;;1093   void /* PRIVATE */
;;;1094   png_handle_sPLT(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)
00149a  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;1095   /* Note: this does not properly handle chunks that are > 64K under DOS */
;;;1096   {
00149e  b086              SUB      sp,sp,#0x18
0014a0  4682              MOV      r10,r0
0014a2  4690              MOV      r8,r2
;;;1097      png_bytep chunkdata;
;;;1098      png_bytep entry_start;
;;;1099      png_sPLT_t new_palette;
;;;1100   #ifdef PNG_NO_POINTER_INDEXING
;;;1101      png_sPLT_entryp pp;
;;;1102   #endif
;;;1103      int data_length, entry_size, i;
;;;1104      png_uint_32 skip = 0;
0014a4  2000              MOVS     r0,#0
0014a6  9000              STR      r0,[sp,#0]
;;;1105      png_size_t slength;
;;;1106   
;;;1107      png_debug(1, "in png_handle_sPLT\n");
;;;1108   
;;;1109      if (!(png_ptr->mode & PNG_HAVE_IHDR))
0014a8  f89a01a8          LDRB     r0,[r10,#0x1a8]
0014ac  f0000001          AND      r0,r0,#1
0014b0  b920              CBNZ     r0,|L1.5308|
;;;1110         png_error(png_ptr, "Missing IHDR before sPLT");
0014b2  a198              ADR      r1,|L1.5908|
0014b4  4650              MOV      r0,r10
0014b6  f7fffffe          BL       png_error
0014ba  e00f              B        |L1.5340|
                  |L1.5308|
;;;1111      else if (png_ptr->mode & PNG_HAVE_IDAT)
0014bc  f89a01a8          LDRB     r0,[r10,#0x1a8]
0014c0  f0000004          AND      r0,r0,#4
0014c4  b150              CBZ      r0,|L1.5340|
;;;1112      {
;;;1113         png_warning(png_ptr, "Invalid sPLT after IDAT");
0014c6  a19a              ADR      r1,|L1.5936|
0014c8  4650              MOV      r0,r10
0014ca  f7fffffe          BL       png_warning
;;;1114         png_crc_finish(png_ptr, length);
0014ce  4641              MOV      r1,r8
0014d0  4650              MOV      r0,r10
0014d2  f7fffffe          BL       png_crc_finish
                  |L1.5334|
;;;1115         return;
;;;1116      }
;;;1117   
;;;1118   #ifdef PNG_MAX_MALLOC_64K
;;;1119      if (length > (png_uint_32)65535L)
;;;1120      {
;;;1121         png_warning(png_ptr, "sPLT chunk too large to fit in memory");
;;;1122         skip = length - (png_uint_32)65535L;
;;;1123         length = (png_uint_32)65535L;
;;;1124      }
;;;1125   #endif
;;;1126   
;;;1127      chunkdata = (png_bytep)png_malloc(png_ptr, length + 1);
;;;1128      slength = (png_size_t)length;
;;;1129      png_crc_read(png_ptr, (png_bytep)chunkdata, slength);
;;;1130   
;;;1131      if (png_crc_finish(png_ptr, skip))
;;;1132      {
;;;1133         png_free(png_ptr, chunkdata);
;;;1134         return;
;;;1135      }
;;;1136   
;;;1137      chunkdata[slength] = 0x00;
;;;1138   
;;;1139      for (entry_start = chunkdata; *entry_start; entry_start++)
;;;1140         /* empty loop to find end of name */ ;
;;;1141      ++entry_start;
;;;1142   
;;;1143      /* a sample depth should follow the separator, and we should be on it  */
;;;1144      if (entry_start > chunkdata + slength)
;;;1145      {
;;;1146         png_free(png_ptr, chunkdata);
;;;1147         png_warning(png_ptr, "malformed sPLT chunk");
;;;1148         return;
;;;1149      }
;;;1150   
;;;1151      new_palette.depth = *entry_start++;
;;;1152      entry_size = (new_palette.depth == 8 ? 6 : 10);
;;;1153      data_length = (slength - (entry_start - chunkdata));
;;;1154   
;;;1155      /* integrity-check the data length */
;;;1156      if (data_length % entry_size)
;;;1157      {
;;;1158         png_free(png_ptr, chunkdata);
;;;1159         png_warning(png_ptr, "sPLT chunk has bad length");
;;;1160         return;
;;;1161      }
;;;1162   
;;;1163      new_palette.nentries = (png_int_32) ( data_length / entry_size);
;;;1164      if ((png_uint_32) new_palette.nentries > (png_uint_32) (PNG_SIZE_MAX /
;;;1165          png_sizeof(png_sPLT_entry)))
;;;1166      {
;;;1167          png_warning(png_ptr, "sPLT chunk too long");
;;;1168          return;
;;;1169      }
;;;1170      new_palette.entries = (png_sPLT_entryp)png_malloc_warn(
;;;1171          png_ptr, new_palette.nentries * png_sizeof(png_sPLT_entry));
;;;1172      if (new_palette.entries == NULL)
;;;1173      {
;;;1174          png_warning(png_ptr, "sPLT chunk requires too much memory");
;;;1175          return;
;;;1176      }
;;;1177   
;;;1178   #ifndef PNG_NO_POINTER_INDEXING
;;;1179      for (i = 0; i < new_palette.nentries; i++)
;;;1180      {
;;;1181         png_sPLT_entryp pp = new_palette.entries + i;
;;;1182   
;;;1183         if (new_palette.depth == 8)
;;;1184         {
;;;1185             pp->red = *entry_start++;
;;;1186             pp->green = *entry_start++;
;;;1187             pp->blue = *entry_start++;
;;;1188             pp->alpha = *entry_start++;
;;;1189         }
;;;1190         else
;;;1191         {
;;;1192             pp->red   = png_get_uint_16(entry_start); entry_start += 2;
;;;1193             pp->green = png_get_uint_16(entry_start); entry_start += 2;
;;;1194             pp->blue  = png_get_uint_16(entry_start); entry_start += 2;
;;;1195             pp->alpha = png_get_uint_16(entry_start); entry_start += 2;
;;;1196         }
;;;1197         pp->frequency = png_get_uint_16(entry_start); entry_start += 2;
;;;1198      }
;;;1199   #else
;;;1200      pp = new_palette.entries;
;;;1201      for (i = 0; i < new_palette.nentries; i++)
;;;1202      {
;;;1203   
;;;1204         if (new_palette.depth == 8)
;;;1205         {
;;;1206             pp[i].red   = *entry_start++;
;;;1207             pp[i].green = *entry_start++;
;;;1208             pp[i].blue  = *entry_start++;
;;;1209             pp[i].alpha = *entry_start++;
;;;1210         }
;;;1211         else
;;;1212         {
;;;1213             pp[i].red   = png_get_uint_16(entry_start); entry_start += 2;
;;;1214             pp[i].green = png_get_uint_16(entry_start); entry_start += 2;
;;;1215             pp[i].blue  = png_get_uint_16(entry_start); entry_start += 2;
;;;1216             pp[i].alpha = png_get_uint_16(entry_start); entry_start += 2;
;;;1217         }
;;;1218         pp->frequency = png_get_uint_16(entry_start); entry_start += 2;
;;;1219      }
;;;1220   #endif
;;;1221   
;;;1222      /* discard all chunk data except the name and stash that */
;;;1223      new_palette.name = (png_charp)chunkdata;
;;;1224   
;;;1225      png_set_sPLT(png_ptr, info_ptr, &new_palette, 1);
;;;1226   
;;;1227      png_free(png_ptr, chunkdata);
;;;1228      png_free(png_ptr, new_palette.entries);
;;;1229   }
0014d6  b009              ADD      sp,sp,#0x24
0014d8  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.5340|
0014dc  f1080101          ADD      r1,r8,#1              ;1127
0014e0  4650              MOV      r0,r10                ;1127
0014e2  f7fffffe          BL       png_malloc
0014e6  4606              MOV      r6,r0                 ;1127
0014e8  4647              MOV      r7,r8                 ;1128
0014ea  463a              MOV      r2,r7                 ;1129
0014ec  4631              MOV      r1,r6                 ;1129
0014ee  4650              MOV      r0,r10                ;1129
0014f0  f7fffffe          BL       png_crc_read
0014f4  4650              MOV      r0,r10                ;1131
0014f6  9900              LDR      r1,[sp,#0]            ;1131
0014f8  f7fffffe          BL       png_crc_finish
0014fc  b120              CBZ      r0,|L1.5384|
0014fe  4631              MOV      r1,r6                 ;1133
001500  4650              MOV      r0,r10                ;1133
001502  f7fffffe          BL       png_free
001506  e7e6              B        |L1.5334|
                  |L1.5384|
001508  2000              MOVS     r0,#0                 ;1137
00150a  55f0              STRB     r0,[r6,r7]            ;1137
00150c  4634              MOV      r4,r6                 ;1139
00150e  e000              B        |L1.5394|
                  |L1.5392|
001510  1c64              ADDS     r4,r4,#1              ;1139
                  |L1.5394|
001512  7820              LDRB     r0,[r4,#0]            ;1139
001514  2800              CMP      r0,#0                 ;1139
001516  d1fb              BNE      |L1.5392|
001518  1c64              ADDS     r4,r4,#1              ;1141
00151a  19f0              ADDS     r0,r6,r7              ;1144
00151c  42a0              CMP      r0,r4                 ;1144
00151e  d208              BCS      |L1.5426|
001520  4631              MOV      r1,r6                 ;1146
001522  4650              MOV      r0,r10                ;1146
001524  f7fffffe          BL       png_free
001528  a187              ADR      r1,|L1.5960|
00152a  4650              MOV      r0,r10                ;1147
00152c  f7fffffe          BL       png_warning
001530  e7d1              B        |L1.5334|
                  |L1.5426|
001532  f8140b01          LDRB     r0,[r4],#1            ;1151
001536  f88d000c          STRB     r0,[sp,#0xc]          ;1151
00153a  f89d000c          LDRB     r0,[sp,#0xc]          ;1152
00153e  2808              CMP      r0,#8                 ;1152
001540  d101              BNE      |L1.5446|
001542  2006              MOVS     r0,#6                 ;1152
001544  e000              B        |L1.5448|
                  |L1.5446|
001546  200a              MOVS     r0,#0xa               ;1152
                  |L1.5448|
001548  9001              STR      r0,[sp,#4]            ;1152
00154a  1ba0              SUBS     r0,r4,r6              ;1153
00154c  eba70b00          SUB      r11,r7,r0             ;1153
001550  9801              LDR      r0,[sp,#4]            ;1156
001552  fb9bf1f0          SDIV     r1,r11,r0             ;1156
001556  fb00b011          MLS      r0,r0,r1,r11          ;1156
00155a  b140              CBZ      r0,|L1.5486|
00155c  4631              MOV      r1,r6                 ;1158
00155e  4650              MOV      r0,r10                ;1158
001560  f7fffffe          BL       png_free
001564  a17e              ADR      r1,|L1.5984|
001566  4650              MOV      r0,r10                ;1159
001568  f7fffffe          BL       png_warning
00156c  e7b3              B        |L1.5334|
                  |L1.5486|
00156e  9801              LDR      r0,[sp,#4]            ;1163
001570  fb9bf0f0          SDIV     r0,r11,r0             ;1163
001574  9005              STR      r0,[sp,#0x14]         ;1163
001576  4981              LDR      r1,|L1.6012|
001578  9805              LDR      r0,[sp,#0x14]         ;1164
00157a  4288              CMP      r0,r1                 ;1164
00157c  d904              BLS      |L1.5512|
00157e  a180              ADR      r1,|L1.6016|
001580  4650              MOV      r0,r10                ;1167
001582  f7fffffe          BL       png_warning
001586  e7a6              B        |L1.5334|
                  |L1.5512|
001588  9805              LDR      r0,[sp,#0x14]         ;1170
00158a  eb000080          ADD      r0,r0,r0,LSL #2       ;1170
00158e  0041              LSLS     r1,r0,#1              ;1170
001590  4650              MOV      r0,r10                ;1170
001592  f7fffffe          BL       png_malloc_warn
001596  9004              STR      r0,[sp,#0x10]         ;1170
001598  9804              LDR      r0,[sp,#0x10]         ;1172
00159a  b920              CBNZ     r0,|L1.5542|
00159c  a17d              ADR      r1,|L1.6036|
00159e  4650              MOV      r0,r10                ;1174
0015a0  f7fffffe          BL       png_warning
0015a4  e797              B        |L1.5334|
                  |L1.5542|
0015a6  f04f0900          MOV      r9,#0                 ;1179
0015aa  e10b              B        |L1.6084|
                  |L1.5548|
0015ac  eb090189          ADD      r1,r9,r9,LSL #2       ;1181
0015b0  9804              LDR      r0,[sp,#0x10]         ;1181
0015b2  eb000541          ADD      r5,r0,r1,LSL #1       ;1181
0015b6  f89d000c          LDRB     r0,[sp,#0xc]          ;1183
0015ba  2808              CMP      r0,#8                 ;1183
0015bc  d10c              BNE      |L1.5592|
0015be  f8140b01          LDRB     r0,[r4],#1            ;1185
0015c2  8028              STRH     r0,[r5,#0]            ;1185
0015c4  f8140b01          LDRB     r0,[r4],#1            ;1186
0015c8  8068              STRH     r0,[r5,#2]            ;1186
0015ca  f8140b01          LDRB     r0,[r4],#1            ;1187
0015ce  80a8              STRH     r0,[r5,#4]            ;1187
0015d0  f8140b01          LDRB     r0,[r4],#1            ;1188
0015d4  80e8              STRH     r0,[r5,#6]            ;1188
0015d6  e013              B        |L1.5632|
                  |L1.5592|
0015d8  4620              MOV      r0,r4                 ;1192
0015da  f7fffffe          BL       png_get_uint_16
0015de  8028              STRH     r0,[r5,#0]            ;1192
0015e0  1ca4              ADDS     r4,r4,#2              ;1192
0015e2  4620              MOV      r0,r4                 ;1193
0015e4  f7fffffe          BL       png_get_uint_16
0015e8  8068              STRH     r0,[r5,#2]            ;1193
0015ea  1ca4              ADDS     r4,r4,#2              ;1193
0015ec  4620              MOV      r0,r4                 ;1194
0015ee  f7fffffe          BL       png_get_uint_16
0015f2  80a8              STRH     r0,[r5,#4]            ;1194
0015f4  1ca4              ADDS     r4,r4,#2              ;1194
0015f6  4620              MOV      r0,r4                 ;1195
0015f8  f7fffffe          BL       png_get_uint_16
0015fc  80e8              STRH     r0,[r5,#6]            ;1195
0015fe  1ca4              ADDS     r4,r4,#2              ;1195
                  |L1.5632|
001600  4620              MOV      r0,r4                 ;1197
001602  e0d9              B        |L1.6072|
                  |L1.5636|
001604  556e6b6e          DCB      "Unknown sRGB intent",0
001608  6f776e20
00160c  73524742
001610  20696e74
001614  656e7400
                  |L1.5656|
001618  4d697373          DCB      "Missing IHDR before iCCP",0
00161c  696e6720
001620  49484452
001624  20626566
001628  6f726520
00162c  69434350
001630  00      
001631  00                DCB      0
001632  00                DCB      0
001633  00                DCB      0
                  |L1.5684|
001634  496e7661          DCB      "Invalid iCCP after IDAT",0
001638  6c696420
00163c  69434350
001640  20616674
001644  65722049
001648  44415400
                  |L1.5708|
00164c  4f757420          DCB      "Out of place iCCP chunk",0
001650  6f662070
001654  6c616365
001658  20694343
00165c  50206368
001660  756e6b00
                  |L1.5732|
001664  4475706c          DCB      "Duplicate iCCP chunk",0
001668  69636174
00166c  65206943
001670  43502063
001674  68756e6b
001678  00      
001679  00                DCB      0
00167a  00                DCB      0
00167b  00                DCB      0
                  |L1.5756|
00167c  4d616c66          DCB      "Malformed iCCP chunk",0
001680  6f726d65
001684  64206943
001688  43502063
00168c  68756e6b
001690  00      
001691  00                DCB      0
001692  00                DCB      0
001693  00                DCB      0
                  |L1.5780|
001694  49676e6f          DCB      "Ignoring nonzero compression type in iCCP chunk",0
001698  72696e67
00169c  206e6f6e
0016a0  7a65726f
0016a4  20636f6d
0016a8  70726573
0016ac  73696f6e
0016b0  20747970
0016b4  6520696e
0016b8  20694343
0016bc  50206368
0016c0  756e6b00
                  |L1.5828|
0016c4  50726f66          DCB      "Profile size field missing from iCCP chunk",0
0016c8  696c6520
0016cc  73697a65
0016d0  20666965
0016d4  6c64206d
0016d8  69737369
0016dc  6e672066
0016e0  726f6d20
0016e4  69434350
0016e8  20636875
0016ec  6e6b00  
0016ef  00                DCB      0
                  |L1.5872|
0016f0  49676e6f          DCB      "Ignoring truncated iCCP profile.",0
0016f4  72696e67
0016f8  20747275
0016fc  6e636174
001700  65642069
001704  43435020
001708  70726f66
00170c  696c652e
001710  00      
001711  00                DCB      0
001712  00                DCB      0
001713  00                DCB      0
                  |L1.5908|
001714  4d697373          DCB      "Missing IHDR before sPLT",0
001718  696e6720
00171c  49484452
001720  20626566
001724  6f726520
001728  73504c54
00172c  00      
00172d  00                DCB      0
00172e  00                DCB      0
00172f  00                DCB      0
                  |L1.5936|
001730  496e7661          DCB      "Invalid sPLT after IDAT",0
001734  6c696420
001738  73504c54
00173c  20616674
001740  65722049
001744  44415400
                  |L1.5960|
001748  6d616c66          DCB      "malformed sPLT chunk",0
00174c  6f726d65
001750  64207350
001754  4c542063
001758  68756e6b
00175c  00      
00175d  00                DCB      0
00175e  00                DCB      0
00175f  00                DCB      0
                  |L1.5984|
001760  73504c54          DCB      "sPLT chunk has bad length",0
001764  20636875
001768  6e6b2068
00176c  61732062
001770  6164206c
001774  656e6774
001778  6800    
00177a  00                DCB      0
00177b  00                DCB      0
                  |L1.6012|
                          DCD      0x19999999
                  |L1.6016|
001780  73504c54          DCB      "sPLT chunk too long",0
001784  20636875
001788  6e6b2074
00178c  6f6f206c
001790  6f6e6700
                  |L1.6036|
001794  73504c54          DCB      "sPLT chunk requires too much memory",0
001798  20636875
00179c  6e6b2072
0017a0  65717569
0017a4  72657320
0017a8  746f6f20
0017ac  6d756368
0017b0  206d656d
0017b4  6f727900
                  |L1.6072|
0017b8  f7fffffe          BL       png_get_uint_16
0017bc  8128              STRH     r0,[r5,#8]            ;1197
0017be  1ca4              ADDS     r4,r4,#2              ;1197
0017c0  f1090901          ADD      r9,r9,#1              ;1179
                  |L1.6084|
0017c4  9805              LDR      r0,[sp,#0x14]         ;1179
0017c6  4548              CMP      r0,r9                 ;1179
0017c8  f73faef0          BGT      |L1.5548|
0017cc  9602              STR      r6,[sp,#8]            ;1223
0017ce  2301              MOVS     r3,#1                 ;1225
0017d0  aa02              ADD      r2,sp,#8              ;1225
0017d2  4650              MOV      r0,r10                ;1225
0017d4  9907              LDR      r1,[sp,#0x1c]         ;1225
0017d6  f7fffffe          BL       png_set_sPLT
0017da  4631              MOV      r1,r6                 ;1227
0017dc  4650              MOV      r0,r10                ;1227
0017de  f7fffffe          BL       png_free
0017e2  4650              MOV      r0,r10                ;1228
0017e4  9904              LDR      r1,[sp,#0x10]         ;1228
0017e6  f7fffffe          BL       png_free
0017ea  bf00              NOP      
0017ec  e673              B        |L1.5334|
;;;1230   #endif /* PNG_READ_sPLT_SUPPORTED */
                          ENDP

                  png_handle_tRNS PROC
;;;1233   void /* PRIVATE */
;;;1234   png_handle_tRNS(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)
0017ee  b570              PUSH     {r4-r6,lr}
;;;1235   {
0017f0  b0c2              SUB      sp,sp,#0x108
0017f2  4604              MOV      r4,r0
0017f4  460e              MOV      r6,r1
0017f6  4615              MOV      r5,r2
;;;1236      png_byte readbuf[PNG_MAX_PALETTE_LENGTH];
;;;1237   
;;;1238      png_debug(1, "in png_handle_tRNS\n");
;;;1239   
;;;1240      if (!(png_ptr->mode & PNG_HAVE_IHDR))
0017f8  f89401a8          LDRB     r0,[r4,#0x1a8]
0017fc  f0000001          AND      r0,r0,#1
001800  b920              CBNZ     r0,|L1.6156|
;;;1241         png_error(png_ptr, "Missing IHDR before tRNS");
001802  a1f9              ADR      r1,|L1.7144|
001804  4620              MOV      r0,r4
001806  f7fffffe          BL       png_error
00180a  e01c              B        |L1.6214|
                  |L1.6156|
;;;1242      else if (png_ptr->mode & PNG_HAVE_IDAT)
00180c  f89401a8          LDRB     r0,[r4,#0x1a8]
001810  f0000004          AND      r0,r0,#4
001814  b148              CBZ      r0,|L1.6186|
;;;1243      {
;;;1244         png_warning(png_ptr, "Invalid tRNS after IDAT");
001816  a1fb              ADR      r1,|L1.7172|
001818  4620              MOV      r0,r4
00181a  f7fffffe          BL       png_warning
;;;1245         png_crc_finish(png_ptr, length);
00181e  4629              MOV      r1,r5
001820  4620              MOV      r0,r4
001822  f7fffffe          BL       png_crc_finish
                  |L1.6182|
;;;1246         return;
;;;1247      }
;;;1248      else if (info_ptr != NULL && (info_ptr->valid & PNG_INFO_tRNS))
;;;1249      {
;;;1250         png_warning(png_ptr, "Duplicate tRNS chunk");
;;;1251         png_crc_finish(png_ptr, length);
;;;1252         return;
;;;1253      }
;;;1254   
;;;1255      if (png_ptr->color_type == PNG_COLOR_TYPE_GRAY)
;;;1256      {
;;;1257         png_byte buf[2];
;;;1258   
;;;1259         if (length != 2)
;;;1260         {
;;;1261            png_warning(png_ptr, "Incorrect tRNS chunk length");
;;;1262            png_crc_finish(png_ptr, length);
;;;1263            return;
;;;1264         }
;;;1265   
;;;1266         png_crc_read(png_ptr, buf, 2);
;;;1267         png_ptr->num_trans = 1;
;;;1268         png_ptr->trans_values.gray = png_get_uint_16(buf);
;;;1269      }
;;;1270      else if (png_ptr->color_type == PNG_COLOR_TYPE_RGB)
;;;1271      {
;;;1272         png_byte buf[6];
;;;1273   
;;;1274         if (length != 6)
;;;1275         {
;;;1276            png_warning(png_ptr, "Incorrect tRNS chunk length");
;;;1277            png_crc_finish(png_ptr, length);
;;;1278            return;
;;;1279         }
;;;1280         png_crc_read(png_ptr, buf, (png_size_t)length);
;;;1281         png_ptr->num_trans = 1;
;;;1282         png_ptr->trans_values.red = png_get_uint_16(buf);
;;;1283         png_ptr->trans_values.green = png_get_uint_16(buf + 2);
;;;1284         png_ptr->trans_values.blue = png_get_uint_16(buf + 4);
;;;1285      }
;;;1286      else if (png_ptr->color_type == PNG_COLOR_TYPE_PALETTE)
;;;1287      {
;;;1288         if (!(png_ptr->mode & PNG_HAVE_PLTE))
;;;1289         {
;;;1290            /* Should be an error, but we can cope with it. */
;;;1291            png_warning(png_ptr, "Missing PLTE before tRNS");
;;;1292         }
;;;1293         if (length > (png_uint_32)png_ptr->num_palette ||
;;;1294             length > PNG_MAX_PALETTE_LENGTH)
;;;1295         {
;;;1296            png_warning(png_ptr, "Incorrect tRNS chunk length");
;;;1297            png_crc_finish(png_ptr, length);
;;;1298            return;
;;;1299         }
;;;1300         if (length == 0)
;;;1301         {
;;;1302            png_warning(png_ptr, "Zero length tRNS chunk");
;;;1303            png_crc_finish(png_ptr, length);
;;;1304            return;
;;;1305         }
;;;1306         png_crc_read(png_ptr, readbuf, (png_size_t)length);
;;;1307         png_ptr->num_trans = (png_uint_16)length;
;;;1308      }
;;;1309      else
;;;1310      {
;;;1311         png_warning(png_ptr, "tRNS chunk not allowed with alpha channel");
;;;1312         png_crc_finish(png_ptr, length);
;;;1313         return;
;;;1314      }
;;;1315   
;;;1316      if (png_crc_finish(png_ptr, 0))
;;;1317         return;
;;;1318   
;;;1319      png_set_tRNS(png_ptr, info_ptr, readbuf, png_ptr->num_trans,
;;;1320         &(png_ptr->trans_values));
;;;1321   }
001826  b042              ADD      sp,sp,#0x108
001828  bd70              POP      {r4-r6,pc}
                  |L1.6186|
00182a  b166              CBZ      r6,|L1.6214|
00182c  7a30              LDRB     r0,[r6,#8]            ;1248
00182e  f0000010          AND      r0,r0,#0x10           ;1248
001832  b140              CBZ      r0,|L1.6214|
001834  a1f9              ADR      r1,|L1.7196|
001836  4620              MOV      r0,r4                 ;1250
001838  f7fffffe          BL       png_warning
00183c  4629              MOV      r1,r5                 ;1251
00183e  4620              MOV      r0,r4                 ;1251
001840  f7fffffe          BL       png_crc_finish
001844  e7ef              B        |L1.6182|
                  |L1.6214|
001846  f8940266          LDRB     r0,[r4,#0x266]        ;1255
00184a  b9c8              CBNZ     r0,|L1.6272|
00184c  2d02              CMP      r5,#2                 ;1259
00184e  d008              BEQ      |L1.6242|
001850  a1f8              ADR      r1,|L1.7220|
001852  4620              MOV      r0,r4                 ;1261
001854  f7fffffe          BL       png_warning
001858  4629              MOV      r1,r5                 ;1262
00185a  4620              MOV      r0,r4                 ;1262
00185c  f7fffffe          BL       png_crc_finish
001860  e7e1              B        |L1.6182|
                  |L1.6242|
001862  2202              MOVS     r2,#2                 ;1266
001864  a901              ADD      r1,sp,#4              ;1266
001866  4620              MOV      r0,r4                 ;1266
001868  f7fffffe          BL       png_crc_read
00186c  2001              MOVS     r0,#1                 ;1267
00186e  f8a4025a          STRH     r0,[r4,#0x25a]        ;1267
001872  a801              ADD      r0,sp,#4              ;1268
001874  f7fffffe          BL       png_get_uint_16
001878  f44f7135          MOV      r1,#0x2d4             ;1268
00187c  5308              STRH     r0,[r1,r4]            ;1268
00187e  e062              B        |L1.6470|
                  |L1.6272|
001880  f8940266          LDRB     r0,[r4,#0x266]        ;1270
001884  2802              CMP      r0,#2                 ;1270
001886  d126              BNE      |L1.6358|
001888  2d06              CMP      r5,#6                 ;1274
00188a  d008              BEQ      |L1.6302|
00188c  a1e9              ADR      r1,|L1.7220|
00188e  4620              MOV      r0,r4                 ;1276
001890  f7fffffe          BL       png_warning
001894  4629              MOV      r1,r5                 ;1277
001896  4620              MOV      r0,r4                 ;1277
001898  f7fffffe          BL       png_crc_finish
00189c  e7c3              B        |L1.6182|
                  |L1.6302|
00189e  462a              MOV      r2,r5                 ;1280
0018a0  4669              MOV      r1,sp                 ;1280
0018a2  4620              MOV      r0,r4                 ;1280
0018a4  f7fffffe          BL       png_crc_read
0018a8  2001              MOVS     r0,#1                 ;1281
0018aa  f8a4025a          STRH     r0,[r4,#0x25a]        ;1281
0018ae  4668              MOV      r0,sp                 ;1282
0018b0  f7fffffe          BL       png_get_uint_16
0018b4  f24021ce          MOV      r1,#0x2ce             ;1282
0018b8  5308              STRH     r0,[r1,r4]            ;1282
0018ba  f10d0002          ADD      r0,sp,#2              ;1283
0018be  f7fffffe          BL       png_get_uint_16
0018c2  f44f7134          MOV      r1,#0x2d0             ;1283
0018c6  5308              STRH     r0,[r1,r4]            ;1283
0018c8  a801              ADD      r0,sp,#4              ;1284
0018ca  f7fffffe          BL       png_get_uint_16
0018ce  f24021d2          MOV      r1,#0x2d2             ;1284
0018d2  5308              STRH     r0,[r1,r4]            ;1284
0018d4  e037              B        |L1.6470|
                  |L1.6358|
0018d6  f8940266          LDRB     r0,[r4,#0x266]        ;1286
0018da  2803              CMP      r0,#3                 ;1286
0018dc  d12a              BNE      |L1.6452|
0018de  f89401a8          LDRB     r0,[r4,#0x1a8]        ;1288
0018e2  f0000002          AND      r0,r0,#2              ;1288
0018e6  b918              CBNZ     r0,|L1.6384|
0018e8  a1d9              ADR      r1,|L1.7248|
0018ea  4620              MOV      r0,r4                 ;1291
0018ec  f7fffffe          BL       png_warning
                  |L1.6384|
0018f0  f8b40258          LDRH     r0,[r4,#0x258]        ;1293
0018f4  42a8              CMP      r0,r5                 ;1293
0018f6  d302              BCC      |L1.6398|
0018f8  f5b57f80          CMP      r5,#0x100             ;1294
0018fc  d908              BLS      |L1.6416|
                  |L1.6398|
0018fe  a1cd              ADR      r1,|L1.7220|
001900  4620              MOV      r0,r4                 ;1296
001902  f7fffffe          BL       png_warning
001906  4629              MOV      r1,r5                 ;1297
001908  4620              MOV      r0,r4                 ;1297
00190a  f7fffffe          BL       png_crc_finish
00190e  e78a              B        |L1.6182|
                  |L1.6416|
001910  b945              CBNZ     r5,|L1.6436|
001912  a1d6              ADR      r1,|L1.7276|
001914  4620              MOV      r0,r4                 ;1302
001916  f7fffffe          BL       png_warning
00191a  4629              MOV      r1,r5                 ;1303
00191c  4620              MOV      r0,r4                 ;1303
00191e  f7fffffe          BL       png_crc_finish
001922  e780              B        |L1.6182|
                  |L1.6436|
001924  462a              MOV      r2,r5                 ;1306
001926  a902              ADD      r1,sp,#8              ;1306
001928  4620              MOV      r0,r4                 ;1306
00192a  f7fffffe          BL       png_crc_read
00192e  f8a4525a          STRH     r5,[r4,#0x25a]        ;1307
001932  e008              B        |L1.6470|
                  |L1.6452|
001934  a1d3              ADR      r1,|L1.7300|
001936  4620              MOV      r0,r4                 ;1311
001938  f7fffffe          BL       png_warning
00193c  4629              MOV      r1,r5                 ;1312
00193e  4620              MOV      r0,r4                 ;1312
001940  f7fffffe          BL       png_crc_finish
001944  e76f              B        |L1.6182|
                  |L1.6470|
001946  2100              MOVS     r1,#0                 ;1316
001948  4620              MOV      r0,r4                 ;1316
00194a  f7fffffe          BL       png_crc_finish
00194e  b100              CBZ      r0,|L1.6482|
001950  e769              B        |L1.6182|
                  |L1.6482|
001952  f5047033          ADD      r0,r4,#0x2cc          ;1319
001956  9000              STR      r0,[sp,#0]            ;1319
001958  f8b4325a          LDRH     r3,[r4,#0x25a]        ;1319
00195c  aa02              ADD      r2,sp,#8              ;1319
00195e  4631              MOV      r1,r6                 ;1319
001960  4620              MOV      r0,r4                 ;1319
001962  f7fffffe          BL       png_set_tRNS
001966  bf00              NOP      
001968  e75d              B        |L1.6182|
;;;1322   #endif
                          ENDP

                  png_handle_bKGD PROC
;;;1325   void /* PRIVATE */
;;;1326   png_handle_bKGD(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)
00196a  e92d41fc          PUSH     {r2-r8,lr}
;;;1327   {
00196e  4604              MOV      r4,r0
001970  460d              MOV      r5,r1
001972  4617              MOV      r7,r2
;;;1328      png_size_t truelen;
;;;1329      png_byte buf[6];
;;;1330   
;;;1331      png_debug(1, "in png_handle_bKGD\n");
;;;1332   
;;;1333      if (!(png_ptr->mode & PNG_HAVE_IHDR))
001974  f89401a8          LDRB     r0,[r4,#0x1a8]
001978  f0000001          AND      r0,r0,#1
00197c  b920              CBNZ     r0,|L1.6536|
;;;1334         png_error(png_ptr, "Missing IHDR before bKGD");
00197e  a1cc              ADR      r1,|L1.7344|
001980  4620              MOV      r0,r4
001982  f7fffffe          BL       png_error
001986  e02e              B        |L1.6630|
                  |L1.6536|
;;;1335      else if (png_ptr->mode & PNG_HAVE_IDAT)
001988  f89401a8          LDRB     r0,[r4,#0x1a8]
00198c  f0000004          AND      r0,r0,#4
001990  b148              CBZ      r0,|L1.6566|
;;;1336      {
;;;1337         png_warning(png_ptr, "Invalid bKGD after IDAT");
001992  a1ce              ADR      r1,|L1.7372|
001994  4620              MOV      r0,r4
001996  f7fffffe          BL       png_warning
;;;1338         png_crc_finish(png_ptr, length);
00199a  4639              MOV      r1,r7
00199c  4620              MOV      r0,r4
00199e  f7fffffe          BL       png_crc_finish
                  |L1.6562|
;;;1339         return;
;;;1340      }
;;;1341      else if (png_ptr->color_type == PNG_COLOR_TYPE_PALETTE &&
;;;1342               !(png_ptr->mode & PNG_HAVE_PLTE))
;;;1343      {
;;;1344         png_warning(png_ptr, "Missing PLTE before bKGD");
;;;1345         png_crc_finish(png_ptr, length);
;;;1346         return;
;;;1347      }
;;;1348      else if (info_ptr != NULL && (info_ptr->valid & PNG_INFO_bKGD))
;;;1349      {
;;;1350         png_warning(png_ptr, "Duplicate bKGD chunk");
;;;1351         png_crc_finish(png_ptr, length);
;;;1352         return;
;;;1353      }
;;;1354   
;;;1355      if (png_ptr->color_type == PNG_COLOR_TYPE_PALETTE)
;;;1356         truelen = 1;
;;;1357      else if (png_ptr->color_type & PNG_COLOR_MASK_COLOR)
;;;1358         truelen = 6;
;;;1359      else
;;;1360         truelen = 2;
;;;1361   
;;;1362      if (length != truelen)
;;;1363      {
;;;1364         png_warning(png_ptr, "Incorrect bKGD chunk length");
;;;1365         png_crc_finish(png_ptr, length);
;;;1366         return;
;;;1367      }
;;;1368   
;;;1369      png_crc_read(png_ptr, buf, truelen);
;;;1370      if (png_crc_finish(png_ptr, 0))
;;;1371         return;
;;;1372   
;;;1373      /* We convert the index value into RGB components so that we can allow
;;;1374       * arbitrary RGB values for background when we have transparency, and
;;;1375       * so it is easy to determine the RGB values of the background color
;;;1376       * from the info_ptr struct. */
;;;1377      if (png_ptr->color_type == PNG_COLOR_TYPE_PALETTE)
;;;1378      {
;;;1379         png_ptr->background.index = buf[0];
;;;1380         if(info_ptr->num_palette)
;;;1381         {
;;;1382             if(buf[0] > info_ptr->num_palette)
;;;1383             {
;;;1384                png_warning(png_ptr, "Incorrect bKGD chunk index value");
;;;1385                return;
;;;1386             }
;;;1387             png_ptr->background.red =
;;;1388                (png_uint_16)png_ptr->palette[buf[0]].red;
;;;1389             png_ptr->background.green =
;;;1390                (png_uint_16)png_ptr->palette[buf[0]].green;
;;;1391             png_ptr->background.blue =
;;;1392                (png_uint_16)png_ptr->palette[buf[0]].blue;
;;;1393         }
;;;1394      }
;;;1395      else if (!(png_ptr->color_type & PNG_COLOR_MASK_COLOR)) /* GRAY */
;;;1396      {
;;;1397         png_ptr->background.red =
;;;1398         png_ptr->background.green =
;;;1399         png_ptr->background.blue =
;;;1400         png_ptr->background.gray = png_get_uint_16(buf);
;;;1401      }
;;;1402      else
;;;1403      {
;;;1404         png_ptr->background.red = png_get_uint_16(buf);
;;;1405         png_ptr->background.green = png_get_uint_16(buf + 2);
;;;1406         png_ptr->background.blue = png_get_uint_16(buf + 4);
;;;1407      }
;;;1408   
;;;1409      png_set_bKGD(png_ptr, info_ptr, &(png_ptr->background));
;;;1410   }
0019a2  e8bd81fc          POP      {r2-r8,pc}
                  |L1.6566|
0019a6  f8940266          LDRB     r0,[r4,#0x266]        ;1341
0019aa  2803              CMP      r0,#3                 ;1341
0019ac  d10d              BNE      |L1.6602|
0019ae  f89401a8          LDRB     r0,[r4,#0x1a8]        ;1342
0019b2  f0000002          AND      r0,r0,#2              ;1342
0019b6  b940              CBNZ     r0,|L1.6602|
0019b8  a1ca              ADR      r1,|L1.7396|
0019ba  4620              MOV      r0,r4                 ;1344
0019bc  f7fffffe          BL       png_warning
0019c0  4639              MOV      r1,r7                 ;1345
0019c2  4620              MOV      r0,r4                 ;1345
0019c4  f7fffffe          BL       png_crc_finish
0019c8  e7eb              B        |L1.6562|
                  |L1.6602|
0019ca  b165              CBZ      r5,|L1.6630|
0019cc  7a28              LDRB     r0,[r5,#8]            ;1348
0019ce  f0000020          AND      r0,r0,#0x20           ;1348
0019d2  b140              CBZ      r0,|L1.6630|
0019d4  a1ca              ADR      r1,|L1.7424|
0019d6  4620              MOV      r0,r4                 ;1350
0019d8  f7fffffe          BL       png_warning
0019dc  4639              MOV      r1,r7                 ;1351
0019de  4620              MOV      r0,r4                 ;1351
0019e0  f7fffffe          BL       png_crc_finish
0019e4  e7dd              B        |L1.6562|
                  |L1.6630|
0019e6  f8940266          LDRB     r0,[r4,#0x266]        ;1355
0019ea  2803              CMP      r0,#3                 ;1355
0019ec  d101              BNE      |L1.6642|
0019ee  2601              MOVS     r6,#1                 ;1356
0019f0  e007              B        |L1.6658|
                  |L1.6642|
0019f2  f8940266          LDRB     r0,[r4,#0x266]        ;1357
0019f6  f0000002          AND      r0,r0,#2              ;1357
0019fa  b108              CBZ      r0,|L1.6656|
0019fc  2606              MOVS     r6,#6                 ;1358
0019fe  e000              B        |L1.6658|
                  |L1.6656|
001a00  2602              MOVS     r6,#2                 ;1360
                  |L1.6658|
001a02  42b7              CMP      r7,r6                 ;1362
001a04  d008              BEQ      |L1.6680|
001a06  a1c4              ADR      r1,|L1.7448|
001a08  4620              MOV      r0,r4                 ;1364
001a0a  f7fffffe          BL       png_warning
001a0e  4639              MOV      r1,r7                 ;1365
001a10  4620              MOV      r0,r4                 ;1365
001a12  f7fffffe          BL       png_crc_finish
001a16  e7c4              B        |L1.6562|
                  |L1.6680|
001a18  4632              MOV      r2,r6                 ;1369
001a1a  4669              MOV      r1,sp                 ;1369
001a1c  4620              MOV      r0,r4                 ;1369
001a1e  f7fffffe          BL       png_crc_read
001a22  2100              MOVS     r1,#0                 ;1370
001a24  4620              MOV      r0,r4                 ;1370
001a26  f7fffffe          BL       png_crc_finish
001a2a  b100              CBZ      r0,|L1.6702|
001a2c  e7b9              B        |L1.6562|
                  |L1.6702|
001a2e  f8940266          LDRB     r0,[r4,#0x266]        ;1377
001a32  2803              CMP      r0,#3                 ;1377
001a34  d131              BNE      |L1.6810|
001a36  f89d0000          LDRB     r0,[sp,#0]            ;1379
001a3a  f8840278          STRB     r0,[r4,#0x278]        ;1379
001a3e  8aa8              LDRH     r0,[r5,#0x14]         ;1380
001a40  2800              CMP      r0,#0                 ;1380
001a42  d04f              BEQ      |L1.6884|
001a44  f89d0000          LDRB     r0,[sp,#0]            ;1382
001a48  8aa9              LDRH     r1,[r5,#0x14]         ;1382
001a4a  4288              CMP      r0,r1                 ;1382
001a4c  dd04              BLE      |L1.6744|
001a4e  a1b9              ADR      r1,|L1.7476|
001a50  4620              MOV      r0,r4                 ;1384
001a52  f7fffffe          BL       png_warning
001a56  e7a4              B        |L1.6562|
                  |L1.6744|
001a58  f89d1000          LDRB     r1,[sp,#0]            ;1387
001a5c  eb010141          ADD      r1,r1,r1,LSL #1       ;1387
001a60  f8d40254          LDR      r0,[r4,#0x254]        ;1387
001a64  5c41              LDRB     r1,[r0,r1]            ;1387
001a66  f240207a          MOV      r0,#0x27a             ;1387
001a6a  5301              STRH     r1,[r0,r4]            ;1387
001a6c  f89d1000          LDRB     r1,[sp,#0]            ;1389
001a70  eb010141          ADD      r1,r1,r1,LSL #1       ;1389
001a74  f8d40254          LDR      r0,[r4,#0x254]        ;1389
001a78  4408              ADD      r0,r0,r1              ;1389
001a7a  7841              LDRB     r1,[r0,#1]            ;1389
001a7c  f44f701f          MOV      r0,#0x27c             ;1389
001a80  5301              STRH     r1,[r0,r4]            ;1389
001a82  f89d1000          LDRB     r1,[sp,#0]            ;1391
001a86  eb010141          ADD      r1,r1,r1,LSL #1       ;1391
001a8a  f8d40254          LDR      r0,[r4,#0x254]        ;1391
001a8e  4408              ADD      r0,r0,r1              ;1391
001a90  7881              LDRB     r1,[r0,#2]            ;1391
001a92  f240207e          MOV      r0,#0x27e             ;1391
001a96  5301              STRH     r1,[r0,r4]            ;1391
001a98  e024              B        |L1.6884|
                  |L1.6810|
001a9a  f8940266          LDRB     r0,[r4,#0x266]        ;1395
001a9e  f0000002          AND      r0,r0,#2              ;1395
001aa2  b960              CBNZ     r0,|L1.6846|
001aa4  4668              MOV      r0,sp                 ;1397
001aa6  f7fffffe          BL       png_get_uint_16
001aaa  f44f7120          MOV      r1,#0x280             ;1397
001aae  5308              STRH     r0,[r1,r4]            ;1397
001ab0  1e89              SUBS     r1,r1,#2              ;1397
001ab2  5308              STRH     r0,[r1,r4]            ;1397
001ab4  1e89              SUBS     r1,r1,#2              ;1397
001ab6  5308              STRH     r0,[r1,r4]            ;1397
001ab8  1e89              SUBS     r1,r1,#2              ;1397
001aba  5308              STRH     r0,[r1,r4]            ;1397
001abc  e012              B        |L1.6884|
                  |L1.6846|
001abe  4668              MOV      r0,sp                 ;1404
001ac0  f7fffffe          BL       png_get_uint_16
001ac4  f240217a          MOV      r1,#0x27a             ;1404
001ac8  5308              STRH     r0,[r1,r4]            ;1404
001aca  f10d0002          ADD      r0,sp,#2              ;1405
001ace  f7fffffe          BL       png_get_uint_16
001ad2  f44f711f          MOV      r1,#0x27c             ;1405
001ad6  5308              STRH     r0,[r1,r4]            ;1405
001ad8  a801              ADD      r0,sp,#4              ;1406
001ada  f7fffffe          BL       png_get_uint_16
001ade  f240217e          MOV      r1,#0x27e             ;1406
001ae2  5308              STRH     r0,[r1,r4]            ;1406
                  |L1.6884|
001ae4  f504721e          ADD      r2,r4,#0x278          ;1409
001ae8  4629              MOV      r1,r5                 ;1409
001aea  4620              MOV      r0,r4                 ;1409
001aec  f7fffffe          BL       png_set_bKGD
001af0  bf00              NOP      
001af2  e756              B        |L1.6562|
;;;1411   #endif
                          ENDP

                  png_handle_hIST PROC
;;;1414   void /* PRIVATE */
;;;1415   png_handle_hIST(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)
001af4  e92d41f0          PUSH     {r4-r8,lr}
;;;1416   {
001af8  f5ad7d02          SUB      sp,sp,#0x208
001afc  4604              MOV      r4,r0
001afe  460f              MOV      r7,r1
001b00  4690              MOV      r8,r2
;;;1417      unsigned int num, i;
;;;1418      png_uint_16 readbuf[PNG_MAX_PALETTE_LENGTH];
;;;1419   
;;;1420      png_debug(1, "in png_handle_hIST\n");
;;;1421   
;;;1422      if (!(png_ptr->mode & PNG_HAVE_IHDR))
001b02  f89401a8          LDRB     r0,[r4,#0x1a8]
001b06  f0000001          AND      r0,r0,#1
001b0a  b920              CBNZ     r0,|L1.6934|
;;;1423         png_error(png_ptr, "Missing IHDR before hIST");
001b0c  a192              ADR      r1,|L1.7512|
001b0e  4620              MOV      r0,r4
001b10  f7fffffe          BL       png_error
001b14  e02c              B        |L1.7024|
                  |L1.6934|
;;;1424      else if (png_ptr->mode & PNG_HAVE_IDAT)
001b16  f89401a8          LDRB     r0,[r4,#0x1a8]
001b1a  f0000004          AND      r0,r0,#4
001b1e  b158              CBZ      r0,|L1.6968|
;;;1425      {
;;;1426         png_warning(png_ptr, "Invalid hIST after IDAT");
001b20  a194              ADR      r1,|L1.7540|
001b22  4620              MOV      r0,r4
001b24  f7fffffe          BL       png_warning
;;;1427         png_crc_finish(png_ptr, length);
001b28  4641              MOV      r1,r8
001b2a  4620              MOV      r0,r4
001b2c  f7fffffe          BL       png_crc_finish
                  |L1.6960|
;;;1428         return;
;;;1429      }
;;;1430      else if (!(png_ptr->mode & PNG_HAVE_PLTE))
;;;1431      {
;;;1432         png_warning(png_ptr, "Missing PLTE before hIST");
;;;1433         png_crc_finish(png_ptr, length);
;;;1434         return;
;;;1435      }
;;;1436      else if (info_ptr != NULL && (info_ptr->valid & PNG_INFO_hIST))
;;;1437      {
;;;1438         png_warning(png_ptr, "Duplicate hIST chunk");
;;;1439         png_crc_finish(png_ptr, length);
;;;1440         return;
;;;1441      }
;;;1442   
;;;1443      num = length / 2 ;
;;;1444      if (num != (unsigned int) png_ptr->num_palette || num >
;;;1445         (unsigned int) PNG_MAX_PALETTE_LENGTH)
;;;1446      {
;;;1447         png_warning(png_ptr, "Incorrect hIST chunk length");
;;;1448         png_crc_finish(png_ptr, length);
;;;1449         return;
;;;1450      }
;;;1451   
;;;1452      for (i = 0; i < num; i++)
;;;1453      {
;;;1454         png_byte buf[2];
;;;1455   
;;;1456         png_crc_read(png_ptr, buf, 2);
;;;1457         readbuf[i] = png_get_uint_16(buf);
;;;1458      }
;;;1459   
;;;1460      if (png_crc_finish(png_ptr, 0))
;;;1461         return;
;;;1462   
;;;1463      png_set_hIST(png_ptr, info_ptr, readbuf);
;;;1464   }
001b30  f50d7d02          ADD      sp,sp,#0x208
001b34  e8bd81f0          POP      {r4-r8,pc}
                  |L1.6968|
001b38  f89401a8          LDRB     r0,[r4,#0x1a8]        ;1430
001b3c  f0000002          AND      r0,r0,#2              ;1430
001b40  b940              CBNZ     r0,|L1.6996|
001b42  a192              ADR      r1,|L1.7564|
001b44  4620              MOV      r0,r4                 ;1432
001b46  f7fffffe          BL       png_warning
001b4a  4641              MOV      r1,r8                 ;1433
001b4c  4620              MOV      r0,r4                 ;1433
001b4e  f7fffffe          BL       png_crc_finish
001b52  e7ed              B        |L1.6960|
                  |L1.6996|
001b54  b167              CBZ      r7,|L1.7024|
001b56  7a38              LDRB     r0,[r7,#8]            ;1436
001b58  f0000040          AND      r0,r0,#0x40           ;1436
001b5c  b140              CBZ      r0,|L1.7024|
001b5e  a192              ADR      r1,|L1.7592|
001b60  4620              MOV      r0,r4                 ;1438
001b62  f7fffffe          BL       png_warning
001b66  4641              MOV      r1,r8                 ;1439
001b68  4620              MOV      r0,r4                 ;1439
001b6a  f7fffffe          BL       png_crc_finish
001b6e  e7df              B        |L1.6960|
                  |L1.7024|
001b70  ea4f0558          LSR      r5,r8,#1              ;1443
001b74  f8b40258          LDRH     r0,[r4,#0x258]        ;1444
001b78  42a8              CMP      r0,r5                 ;1444
001b7a  d102              BNE      |L1.7042|
001b7c  f5b57f80          CMP      r5,#0x100             ;1444
001b80  d908              BLS      |L1.7060|
                  |L1.7042|
001b82  a18f              ADR      r1,|L1.7616|
001b84  4620              MOV      r0,r4                 ;1447
001b86  f7fffffe          BL       png_warning
001b8a  4641              MOV      r1,r8                 ;1448
001b8c  4620              MOV      r0,r4                 ;1448
001b8e  f7fffffe          BL       png_crc_finish
001b92  e7cd              B        |L1.6960|
                  |L1.7060|
001b94  2600              MOVS     r6,#0                 ;1452
001b96  e00b              B        |L1.7088|
                  |L1.7064|
001b98  2202              MOVS     r2,#2                 ;1456
001b9a  a901              ADD      r1,sp,#4              ;1456
001b9c  4620              MOV      r0,r4                 ;1456
001b9e  f7fffffe          BL       png_crc_read
001ba2  a801              ADD      r0,sp,#4              ;1457
001ba4  f7fffffe          BL       png_get_uint_16
001ba8  a902              ADD      r1,sp,#8              ;1457
001baa  f8210016          STRH     r0,[r1,r6,LSL #1]     ;1457
001bae  1c76              ADDS     r6,r6,#1              ;1452
                  |L1.7088|
001bb0  42ae              CMP      r6,r5                 ;1452
001bb2  d3f1              BCC      |L1.7064|
001bb4  2100              MOVS     r1,#0                 ;1460
001bb6  4620              MOV      r0,r4                 ;1460
001bb8  f7fffffe          BL       png_crc_finish
001bbc  b100              CBZ      r0,|L1.7104|
001bbe  e7b7              B        |L1.6960|
                  |L1.7104|
001bc0  aa02              ADD      r2,sp,#8              ;1463
001bc2  4639              MOV      r1,r7                 ;1463
001bc4  4620              MOV      r0,r4                 ;1463
001bc6  f7fffffe          BL       png_set_hIST
001bca  bf00              NOP      
001bcc  e7b0              B        |L1.6960|
;;;1465   #endif
                          ENDP

                  png_handle_pHYs PROC
;;;1468   void /* PRIVATE */
;;;1469   png_handle_pHYs(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)
001bce  e92d47ff          PUSH     {r0-r10,lr}
;;;1470   {
001bd2  4604              MOV      r4,r0
001bd4  460d              MOV      r5,r1
001bd6  4616              MOV      r6,r2
;;;1471      png_byte buf[9];
;;;1472      png_uint_32 res_x, res_y;
;;;1473      int unit_type;
;;;1474   
;;;1475      png_debug(1, "in png_handle_pHYs\n");
;;;1476   
;;;1477      if (!(png_ptr->mode & PNG_HAVE_IHDR))
001bd8  f89401a8          LDRB     r0,[r4,#0x1a8]
001bdc  f0000001          AND      r0,r0,#1
001be0  b900              CBNZ     r0,|L1.7140|
;;;1478         png_error(png_ptr, "Missing IHDR before pHYs");
001be2  e0fb              B        |L1.7644|
                  |L1.7140|
001be4  e0ff              B        |L1.7654|
001be6  0000              DCW      0x0000
                  |L1.7144|
001be8  4d697373          DCB      "Missing IHDR before tRNS",0
001bec  696e6720
001bf0  49484452
001bf4  20626566
001bf8  6f726520
001bfc  74524e53
001c00  00      
001c01  00                DCB      0
001c02  00                DCB      0
001c03  00                DCB      0
                  |L1.7172|
001c04  496e7661          DCB      "Invalid tRNS after IDAT",0
001c08  6c696420
001c0c  74524e53
001c10  20616674
001c14  65722049
001c18  44415400
                  |L1.7196|
001c1c  4475706c          DCB      "Duplicate tRNS chunk",0
001c20  69636174
001c24  65207452
001c28  4e532063
001c2c  68756e6b
001c30  00      
001c31  00                DCB      0
001c32  00                DCB      0
001c33  00                DCB      0
                  |L1.7220|
001c34  496e636f          DCB      "Incorrect tRNS chunk length",0
001c38  72726563
001c3c  74207452
001c40  4e532063
001c44  68756e6b
001c48  206c656e
001c4c  67746800
                  |L1.7248|
001c50  4d697373          DCB      "Missing PLTE before tRNS",0
001c54  696e6720
001c58  504c5445
001c5c  20626566
001c60  6f726520
001c64  74524e53
001c68  00      
001c69  00                DCB      0
001c6a  00                DCB      0
001c6b  00                DCB      0
                  |L1.7276|
001c6c  5a65726f          DCB      "Zero length tRNS chunk",0
001c70  206c656e
001c74  67746820
001c78  74524e53
001c7c  20636875
001c80  6e6b00  
001c83  00                DCB      0
                  |L1.7300|
001c84  74524e53          DCB      "tRNS chunk not allowed with alpha channel",0
001c88  20636875
001c8c  6e6b206e
001c90  6f742061
001c94  6c6c6f77
001c98  65642077
001c9c  69746820
001ca0  616c7068
001ca4  61206368
001ca8  616e6e65
001cac  6c00    
001cae  00                DCB      0
001caf  00                DCB      0
                  |L1.7344|
001cb0  4d697373          DCB      "Missing IHDR before bKGD",0
001cb4  696e6720
001cb8  49484452
001cbc  20626566
001cc0  6f726520
001cc4  624b4744
001cc8  00      
001cc9  00                DCB      0
001cca  00                DCB      0
001ccb  00                DCB      0
                  |L1.7372|
001ccc  496e7661          DCB      "Invalid bKGD after IDAT",0
001cd0  6c696420
001cd4  624b4744
001cd8  20616674
001cdc  65722049
001ce0  44415400
                  |L1.7396|
001ce4  4d697373          DCB      "Missing PLTE before bKGD",0
001ce8  696e6720
001cec  504c5445
001cf0  20626566
001cf4  6f726520
001cf8  624b4744
001cfc  00      
001cfd  00                DCB      0
001cfe  00                DCB      0
001cff  00                DCB      0
                  |L1.7424|
001d00  4475706c          DCB      "Duplicate bKGD chunk",0
001d04  69636174
001d08  6520624b
001d0c  47442063
001d10  68756e6b
001d14  00      
001d15  00                DCB      0
001d16  00                DCB      0
001d17  00                DCB      0
                  |L1.7448|
001d18  496e636f          DCB      "Incorrect bKGD chunk length",0
001d1c  72726563
001d20  7420624b
001d24  47442063
001d28  68756e6b
001d2c  206c656e
001d30  67746800
                  |L1.7476|
001d34  496e636f          DCB      "Incorrect bKGD chunk index value",0
001d38  72726563
001d3c  7420624b
001d40  47442063
001d44  68756e6b
001d48  20696e64
001d4c  65782076
001d50  616c7565
001d54  00      
001d55  00                DCB      0
001d56  00                DCB      0
001d57  00                DCB      0
                  |L1.7512|
001d58  4d697373          DCB      "Missing IHDR before hIST",0
001d5c  696e6720
001d60  49484452
001d64  20626566
001d68  6f726520
001d6c  68495354
001d70  00      
001d71  00                DCB      0
001d72  00                DCB      0
001d73  00                DCB      0
                  |L1.7540|
001d74  496e7661          DCB      "Invalid hIST after IDAT",0
001d78  6c696420
001d7c  68495354
001d80  20616674
001d84  65722049
001d88  44415400
                  |L1.7564|
001d8c  4d697373          DCB      "Missing PLTE before hIST",0
001d90  696e6720
001d94  504c5445
001d98  20626566
001d9c  6f726520
001da0  68495354
001da4  00      
001da5  00                DCB      0
001da6  00                DCB      0
001da7  00                DCB      0
                  |L1.7592|
001da8  4475706c          DCB      "Duplicate hIST chunk",0
001dac  69636174
001db0  65206849
001db4  53542063
001db8  68756e6b
001dbc  00      
001dbd  00                DCB      0
001dbe  00                DCB      0
001dbf  00                DCB      0
                  |L1.7616|
001dc0  496e636f          DCB      "Incorrect hIST chunk length",0
001dc4  72726563
001dc8  74206849
001dcc  53542063
001dd0  68756e6b
001dd4  206c656e
001dd8  67746800
                  |L1.7644|
001ddc  a1fb              ADR      r1,|L1.8652|
001dde  4620              MOV      r0,r4
001de0  f7fffffe          BL       png_error
001de4  e01c              B        |L1.7712|
                  |L1.7654|
;;;1479      else if (png_ptr->mode & PNG_HAVE_IDAT)
001de6  f89401a8          LDRB     r0,[r4,#0x1a8]
001dea  f0000004          AND      r0,r0,#4
001dee  b148              CBZ      r0,|L1.7684|
;;;1480      {
;;;1481         png_warning(png_ptr, "Invalid pHYs after IDAT");
001df0  a1fd              ADR      r1,|L1.8680|
001df2  4620              MOV      r0,r4
001df4  f7fffffe          BL       png_warning
;;;1482         png_crc_finish(png_ptr, length);
001df8  4631              MOV      r1,r6
001dfa  4620              MOV      r0,r4
001dfc  f7fffffe          BL       png_crc_finish
                  |L1.7680|
;;;1483         return;
;;;1484      }
;;;1485      else if (info_ptr != NULL && (info_ptr->valid & PNG_INFO_pHYs))
;;;1486      {
;;;1487         png_warning(png_ptr, "Duplicate pHYs chunk");
;;;1488         png_crc_finish(png_ptr, length);
;;;1489         return;
;;;1490      }
;;;1491   
;;;1492      if (length != 9)
;;;1493      {
;;;1494         png_warning(png_ptr, "Incorrect pHYs chunk length");
;;;1495         png_crc_finish(png_ptr, length);
;;;1496         return;
;;;1497      }
;;;1498   
;;;1499      png_crc_read(png_ptr, buf, 9);
;;;1500      if (png_crc_finish(png_ptr, 0))
;;;1501         return;
;;;1502   
;;;1503      res_x = png_get_uint_32(buf);
;;;1504      res_y = png_get_uint_32(buf + 4);
;;;1505      unit_type = buf[8];
;;;1506      png_set_pHYs(png_ptr, info_ptr, res_x, res_y, unit_type);
;;;1507   }
001e00  e8bd87ff          POP      {r0-r10,pc}
                  |L1.7684|
001e04  b165              CBZ      r5,|L1.7712|
001e06  7a28              LDRB     r0,[r5,#8]            ;1485
001e08  f0000080          AND      r0,r0,#0x80           ;1485
001e0c  b140              CBZ      r0,|L1.7712|
001e0e  a1fc              ADR      r1,|L1.8704|
001e10  4620              MOV      r0,r4                 ;1487
001e12  f7fffffe          BL       png_warning
001e16  4631              MOV      r1,r6                 ;1488
001e18  4620              MOV      r0,r4                 ;1488
001e1a  f7fffffe          BL       png_crc_finish
001e1e  e7ef              B        |L1.7680|
                  |L1.7712|
001e20  2e09              CMP      r6,#9                 ;1492
001e22  d008              BEQ      |L1.7734|
001e24  a1fc              ADR      r1,|L1.8728|
001e26  4620              MOV      r0,r4                 ;1494
001e28  f7fffffe          BL       png_warning
001e2c  4631              MOV      r1,r6                 ;1495
001e2e  4620              MOV      r0,r4                 ;1495
001e30  f7fffffe          BL       png_crc_finish
001e34  e7e4              B        |L1.7680|
                  |L1.7734|
001e36  2209              MOVS     r2,#9                 ;1499
001e38  a901              ADD      r1,sp,#4              ;1499
001e3a  4620              MOV      r0,r4                 ;1499
001e3c  f7fffffe          BL       png_crc_read
001e40  2100              MOVS     r1,#0                 ;1500
001e42  4620              MOV      r0,r4                 ;1500
001e44  f7fffffe          BL       png_crc_finish
001e48  b100              CBZ      r0,|L1.7756|
001e4a  e7d9              B        |L1.7680|
                  |L1.7756|
001e4c  a801              ADD      r0,sp,#4              ;1503
001e4e  f7fffffe          BL       png_get_uint_32
001e52  4681              MOV      r9,r0                 ;1503
001e54  a802              ADD      r0,sp,#8              ;1504
001e56  f7fffffe          BL       png_get_uint_32
001e5a  4680              MOV      r8,r0                 ;1504
001e5c  f89d700c          LDRB     r7,[sp,#0xc]          ;1505
001e60  4643              MOV      r3,r8                 ;1506
001e62  464a              MOV      r2,r9                 ;1506
001e64  4629              MOV      r1,r5                 ;1506
001e66  4620              MOV      r0,r4                 ;1506
001e68  9700              STR      r7,[sp,#0]            ;1506
001e6a  f7fffffe          BL       png_set_pHYs
001e6e  bf00              NOP      
001e70  e7c6              B        |L1.7680|
;;;1508   #endif
                          ENDP

                  png_handle_oFFs PROC
;;;1511   void /* PRIVATE */
;;;1512   png_handle_oFFs(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)
001e72  e92d47ff          PUSH     {r0-r10,lr}
;;;1513   {
001e76  4604              MOV      r4,r0
001e78  460d              MOV      r5,r1
001e7a  4616              MOV      r6,r2
;;;1514      png_byte buf[9];
;;;1515      png_int_32 offset_x, offset_y;
;;;1516      int unit_type;
;;;1517   
;;;1518      png_debug(1, "in png_handle_oFFs\n");
;;;1519   
;;;1520      if (!(png_ptr->mode & PNG_HAVE_IHDR))
001e7c  f89401a8          LDRB     r0,[r4,#0x1a8]
001e80  f0000001          AND      r0,r0,#1
001e84  b920              CBNZ     r0,|L1.7824|
;;;1521         png_error(png_ptr, "Missing IHDR before oFFs");
001e86  a1eb              ADR      r1,|L1.8756|
001e88  4620              MOV      r0,r4
001e8a  f7fffffe          BL       png_error
001e8e  e01c              B        |L1.7882|
                  |L1.7824|
;;;1522      else if (png_ptr->mode & PNG_HAVE_IDAT)
001e90  f89401a8          LDRB     r0,[r4,#0x1a8]
001e94  f0000004          AND      r0,r0,#4
001e98  b148              CBZ      r0,|L1.7854|
;;;1523      {
;;;1524         png_warning(png_ptr, "Invalid oFFs after IDAT");
001e9a  a1ed              ADR      r1,|L1.8784|
001e9c  4620              MOV      r0,r4
001e9e  f7fffffe          BL       png_warning
;;;1525         png_crc_finish(png_ptr, length);
001ea2  4631              MOV      r1,r6
001ea4  4620              MOV      r0,r4
001ea6  f7fffffe          BL       png_crc_finish
                  |L1.7850|
;;;1526         return;
;;;1527      }
;;;1528      else if (info_ptr != NULL && (info_ptr->valid & PNG_INFO_oFFs))
;;;1529      {
;;;1530         png_warning(png_ptr, "Duplicate oFFs chunk");
;;;1531         png_crc_finish(png_ptr, length);
;;;1532         return;
;;;1533      }
;;;1534   
;;;1535      if (length != 9)
;;;1536      {
;;;1537         png_warning(png_ptr, "Incorrect oFFs chunk length");
;;;1538         png_crc_finish(png_ptr, length);
;;;1539         return;
;;;1540      }
;;;1541   
;;;1542      png_crc_read(png_ptr, buf, 9);
;;;1543      if (png_crc_finish(png_ptr, 0))
;;;1544         return;
;;;1545   
;;;1546      offset_x = png_get_int_32(buf);
;;;1547      offset_y = png_get_int_32(buf + 4);
;;;1548      unit_type = buf[8];
;;;1549      png_set_oFFs(png_ptr, info_ptr, offset_x, offset_y, unit_type);
;;;1550   }
001eaa  e8bd87ff          POP      {r0-r10,pc}
                  |L1.7854|
001eae  b165              CBZ      r5,|L1.7882|
001eb0  8928              LDRH     r0,[r5,#8]            ;1528
001eb2  f4007080          AND      r0,r0,#0x100          ;1528
001eb6  b140              CBZ      r0,|L1.7882|
001eb8  a1eb              ADR      r1,|L1.8808|
001eba  4620              MOV      r0,r4                 ;1530
001ebc  f7fffffe          BL       png_warning
001ec0  4631              MOV      r1,r6                 ;1531
001ec2  4620              MOV      r0,r4                 ;1531
001ec4  f7fffffe          BL       png_crc_finish
001ec8  e7ef              B        |L1.7850|
                  |L1.7882|
001eca  2e09              CMP      r6,#9                 ;1535
001ecc  d008              BEQ      |L1.7904|
001ece  a1ec              ADR      r1,|L1.8832|
001ed0  4620              MOV      r0,r4                 ;1537
001ed2  f7fffffe          BL       png_warning
001ed6  4631              MOV      r1,r6                 ;1538
001ed8  4620              MOV      r0,r4                 ;1538
001eda  f7fffffe          BL       png_crc_finish
001ede  e7e4              B        |L1.7850|
                  |L1.7904|
001ee0  2209              MOVS     r2,#9                 ;1542
001ee2  a901              ADD      r1,sp,#4              ;1542
001ee4  4620              MOV      r0,r4                 ;1542
001ee6  f7fffffe          BL       png_crc_read
001eea  2100              MOVS     r1,#0                 ;1543
001eec  4620              MOV      r0,r4                 ;1543
001eee  f7fffffe          BL       png_crc_finish
001ef2  b100              CBZ      r0,|L1.7926|
001ef4  e7d9              B        |L1.7850|
                  |L1.7926|
001ef6  a801              ADD      r0,sp,#4              ;1546
001ef8  f7fffffe          BL       png_get_int_32
001efc  4681              MOV      r9,r0                 ;1546
001efe  a802              ADD      r0,sp,#8              ;1547
001f00  f7fffffe          BL       png_get_int_32
001f04  4680              MOV      r8,r0                 ;1547
001f06  f89d700c          LDRB     r7,[sp,#0xc]          ;1548
001f0a  4643              MOV      r3,r8                 ;1549
001f0c  464a              MOV      r2,r9                 ;1549
001f0e  4629              MOV      r1,r5                 ;1549
001f10  4620              MOV      r0,r4                 ;1549
001f12  9700              STR      r7,[sp,#0]            ;1549
001f14  f7fffffe          BL       png_set_oFFs
001f18  bf00              NOP      
001f1a  e7c6              B        |L1.7850|
;;;1551   #endif
                          ENDP

                  png_handle_pCAL PROC
;;;1555   void /* PRIVATE */
;;;1556   png_handle_pCAL(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)
001f1c  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;1557   {
001f20  b08a              SUB      sp,sp,#0x28
001f22  4691              MOV      r9,r2
;;;1558      png_charp purpose;
;;;1559      png_int_32 X0, X1;
;;;1560      png_byte type, nparams;
;;;1561      png_charp buf, units, endptr;
;;;1562      png_charpp params;
;;;1563      png_size_t slength;
;;;1564      int i;
;;;1565   
;;;1566      png_debug(1, "in png_handle_pCAL\n");
;;;1567   
;;;1568      if (!(png_ptr->mode & PNG_HAVE_IHDR))
001f24  980a              LDR      r0,[sp,#0x28]
001f26  f89001a8          LDRB     r0,[r0,#0x1a8]
001f2a  f0000001          AND      r0,r0,#1
001f2e  b920              CBNZ     r0,|L1.7994|
;;;1569         png_error(png_ptr, "Missing IHDR before pCAL");
001f30  a1da              ADR      r1,|L1.8860|
001f32  980a              LDR      r0,[sp,#0x28]
001f34  f7fffffe          BL       png_error
001f38  e020              B        |L1.8060|
                  |L1.7994|
;;;1570      else if (png_ptr->mode & PNG_HAVE_IDAT)
001f3a  980a              LDR      r0,[sp,#0x28]
001f3c  f89001a8          LDRB     r0,[r0,#0x1a8]
001f40  f0000004          AND      r0,r0,#4
001f44  b150              CBZ      r0,|L1.8028|
;;;1571      {
;;;1572         png_warning(png_ptr, "Invalid pCAL after IDAT");
001f46  a1dc              ADR      r1,|L1.8888|
001f48  980a              LDR      r0,[sp,#0x28]
001f4a  f7fffffe          BL       png_warning
;;;1573         png_crc_finish(png_ptr, length);
001f4e  4649              MOV      r1,r9
001f50  980a              LDR      r0,[sp,#0x28]
001f52  f7fffffe          BL       png_crc_finish
                  |L1.8022|
;;;1574         return;
;;;1575      }
;;;1576      else if (info_ptr != NULL && (info_ptr->valid & PNG_INFO_pCAL))
;;;1577      {
;;;1578         png_warning(png_ptr, "Duplicate pCAL chunk");
;;;1579         png_crc_finish(png_ptr, length);
;;;1580         return;
;;;1581      }
;;;1582   
;;;1583      png_debug1(2, "Allocating and reading pCAL chunk data (%lu bytes)\n",
;;;1584         length + 1);
;;;1585      purpose = (png_charp)png_malloc_warn(png_ptr, length + 1);
;;;1586      if (purpose == NULL)
;;;1587        {
;;;1588          png_warning(png_ptr, "No memory for pCAL purpose.");
;;;1589          return;
;;;1590        }
;;;1591      slength = (png_size_t)length;
;;;1592      png_crc_read(png_ptr, (png_bytep)purpose, slength);
;;;1593   
;;;1594      if (png_crc_finish(png_ptr, 0))
;;;1595      {
;;;1596         png_free(png_ptr, purpose);
;;;1597         return;
;;;1598      }
;;;1599   
;;;1600      purpose[slength] = 0x00; /* null terminate the last string */
;;;1601   
;;;1602      png_debug(3, "Finding end of pCAL purpose string\n");
;;;1603      for (buf = purpose; *buf; buf++)
;;;1604         /* empty loop */ ;
;;;1605   
;;;1606      endptr = purpose + slength;
;;;1607   
;;;1608      /* We need to have at least 12 bytes after the purpose string
;;;1609         in order to get the parameter information. */
;;;1610      if (endptr <= buf + 12)
;;;1611      {
;;;1612         png_warning(png_ptr, "Invalid pCAL data");
;;;1613         png_free(png_ptr, purpose);
;;;1614         return;
;;;1615      }
;;;1616   
;;;1617      png_debug(3, "Reading pCAL X0, X1, type, nparams, and units\n");
;;;1618      X0 = png_get_int_32((png_bytep)buf+1);
;;;1619      X1 = png_get_int_32((png_bytep)buf+5);
;;;1620      type = buf[9];
;;;1621      nparams = buf[10];
;;;1622      units = buf + 11;
;;;1623   
;;;1624      png_debug(3, "Checking pCAL equation type and number of parameters\n");
;;;1625      /* Check that we have the right number of parameters for known
;;;1626         equation types. */
;;;1627      if ((type == PNG_EQUATION_LINEAR && nparams != 2) ||
;;;1628          (type == PNG_EQUATION_BASE_E && nparams != 3) ||
;;;1629          (type == PNG_EQUATION_ARBITRARY && nparams != 3) ||
;;;1630          (type == PNG_EQUATION_HYPERBOLIC && nparams != 4))
;;;1631      {
;;;1632         png_warning(png_ptr, "Invalid pCAL parameters for equation type");
;;;1633         png_free(png_ptr, purpose);
;;;1634         return;
;;;1635      }
;;;1636      else if (type >= PNG_EQUATION_LAST)
;;;1637      {
;;;1638         png_warning(png_ptr, "Unrecognized equation type for pCAL chunk");
;;;1639      }
;;;1640   
;;;1641      for (buf = units; *buf; buf++)
;;;1642         /* Empty loop to move past the units string. */ ;
;;;1643   
;;;1644      png_debug(3, "Allocating pCAL parameters array\n");
;;;1645      params = (png_charpp)png_malloc_warn(png_ptr, (png_uint_32)(nparams
;;;1646         *png_sizeof(png_charp))) ;
;;;1647      if (params == NULL)
;;;1648        {
;;;1649          png_free(png_ptr, purpose);
;;;1650          png_warning(png_ptr, "No memory for pCAL params.");
;;;1651          return;
;;;1652        }
;;;1653   
;;;1654      /* Get pointers to the start of each parameter string. */
;;;1655      for (i = 0; i < (int)nparams; i++)
;;;1656      {
;;;1657         buf++; /* Skip the null string terminator from previous parameter. */
;;;1658   
;;;1659         png_debug1(3, "Reading pCAL parameter %d\n", i);
;;;1660         for (params[i] = buf; *buf != 0x00 && buf <= endptr; buf++)
;;;1661            /* Empty loop to move past each parameter string */ ;
;;;1662   
;;;1663         /* Make sure we haven't run out of data yet */
;;;1664         if (buf > endptr)
;;;1665         {
;;;1666            png_warning(png_ptr, "Invalid pCAL data");
;;;1667            png_free(png_ptr, purpose);
;;;1668            png_free(png_ptr, params);
;;;1669            return;
;;;1670         }
;;;1671      }
;;;1672   
;;;1673      png_set_pCAL(png_ptr, info_ptr, purpose, X0, X1, type, nparams,
;;;1674         units, params);
;;;1675   
;;;1676      png_free(png_ptr, purpose);
;;;1677      png_free(png_ptr, params);
;;;1678   }
001f56  b00d              ADD      sp,sp,#0x34
001f58  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.8028|
001f5c  980b              LDR      r0,[sp,#0x2c]         ;1576
001f5e  b168              CBZ      r0,|L1.8060|
001f60  980b              LDR      r0,[sp,#0x2c]         ;1576
001f62  8900              LDRH     r0,[r0,#8]            ;1576
001f64  f4006080          AND      r0,r0,#0x400          ;1576
001f68  b140              CBZ      r0,|L1.8060|
001f6a  a1d9              ADR      r1,|L1.8912|
001f6c  980a              LDR      r0,[sp,#0x28]         ;1578
001f6e  f7fffffe          BL       png_warning
001f72  4649              MOV      r1,r9                 ;1579
001f74  980a              LDR      r0,[sp,#0x28]         ;1579
001f76  f7fffffe          BL       png_crc_finish
001f7a  e7ec              B        |L1.8022|
                  |L1.8060|
001f7c  f1090101          ADD      r1,r9,#1              ;1585
001f80  980a              LDR      r0,[sp,#0x28]         ;1585
001f82  f7fffffe          BL       png_malloc_warn
001f86  4605              MOV      r5,r0                 ;1585
001f88  b925              CBNZ     r5,|L1.8084|
001f8a  a1d7              ADR      r1,|L1.8936|
001f8c  980a              LDR      r0,[sp,#0x28]         ;1588
001f8e  f7fffffe          BL       png_warning
001f92  e7e0              B        |L1.8022|
                  |L1.8084|
001f94  46ca              MOV      r10,r9                ;1591
001f96  4652              MOV      r2,r10                ;1592
001f98  4629              MOV      r1,r5                 ;1592
001f9a  980a              LDR      r0,[sp,#0x28]         ;1592
001f9c  f7fffffe          BL       png_crc_read
001fa0  2100              MOVS     r1,#0                 ;1594
001fa2  980a              LDR      r0,[sp,#0x28]         ;1594
001fa4  f7fffffe          BL       png_crc_finish
001fa8  b120              CBZ      r0,|L1.8116|
001faa  4629              MOV      r1,r5                 ;1596
001fac  980a              LDR      r0,[sp,#0x28]         ;1596
001fae  f7fffffe          BL       png_free
001fb2  e7d0              B        |L1.8022|
                  |L1.8116|
001fb4  2000              MOVS     r0,#0                 ;1600
001fb6  f805000a          STRB     r0,[r5,r10]           ;1600
001fba  462c              MOV      r4,r5                 ;1603
001fbc  e000              B        |L1.8128|
                  |L1.8126|
001fbe  1c64              ADDS     r4,r4,#1              ;1603
                  |L1.8128|
001fc0  7820              LDRB     r0,[r4,#0]            ;1603
001fc2  2800              CMP      r0,#0                 ;1603
001fc4  d1fb              BNE      |L1.8126|
001fc6  eb05000a          ADD      r0,r5,r10             ;1606
001fca  9006              STR      r0,[sp,#0x18]         ;1606
001fcc  f104010c          ADD      r1,r4,#0xc            ;1610
001fd0  9806              LDR      r0,[sp,#0x18]         ;1610
001fd2  4288              CMP      r0,r1                 ;1610
001fd4  d808              BHI      |L1.8168|
001fd6  a1cb              ADR      r1,|L1.8964|
001fd8  980a              LDR      r0,[sp,#0x28]         ;1612
001fda  f7fffffe          BL       png_warning
001fde  4629              MOV      r1,r5                 ;1613
001fe0  980a              LDR      r0,[sp,#0x28]         ;1613
001fe2  f7fffffe          BL       png_free
001fe6  e7b6              B        |L1.8022|
                  |L1.8168|
001fe8  1c60              ADDS     r0,r4,#1              ;1618
001fea  f7fffffe          BL       png_get_int_32
001fee  9009              STR      r0,[sp,#0x24]         ;1618
001ff0  1d60              ADDS     r0,r4,#5              ;1619
001ff2  f7fffffe          BL       png_get_int_32
001ff6  9008              STR      r0,[sp,#0x20]         ;1619
001ff8  7a67              LDRB     r7,[r4,#9]            ;1620
001ffa  7aa6              LDRB     r6,[r4,#0xa]          ;1621
001ffc  f104000b          ADD      r0,r4,#0xb            ;1622
002000  9007              STR      r0,[sp,#0x1c]         ;1622
002002  b90f              CBNZ     r7,|L1.8200|
002004  2e02              CMP      r6,#2                 ;1627
002006  d10b              BNE      |L1.8224|
                  |L1.8200|
002008  2f01              CMP      r7,#1                 ;1628
00200a  d101              BNE      |L1.8208|
00200c  2e03              CMP      r6,#3                 ;1628
00200e  d107              BNE      |L1.8224|
                  |L1.8208|
002010  2f02              CMP      r7,#2                 ;1629
002012  d101              BNE      |L1.8216|
002014  2e03              CMP      r6,#3                 ;1629
002016  d103              BNE      |L1.8224|
                  |L1.8216|
002018  2f03              CMP      r7,#3                 ;1630
00201a  d10a              BNE      |L1.8242|
00201c  2e04              CMP      r6,#4                 ;1630
00201e  d008              BEQ      |L1.8242|
                  |L1.8224|
002020  a1bd              ADR      r1,|L1.8984|
002022  980a              LDR      r0,[sp,#0x28]         ;1632
002024  f7fffffe          BL       png_warning
002028  4629              MOV      r1,r5                 ;1633
00202a  980a              LDR      r0,[sp,#0x28]         ;1633
00202c  f7fffffe          BL       png_free
002030  e791              B        |L1.8022|
                  |L1.8242|
002032  2f04              CMP      r7,#4                 ;1636
002034  db03              BLT      |L1.8254|
002036  a1c3              ADR      r1,|L1.9028|
002038  980a              LDR      r0,[sp,#0x28]         ;1638
00203a  f7fffffe          BL       png_warning
                  |L1.8254|
00203e  9c07              LDR      r4,[sp,#0x1c]         ;1641
002040  e000              B        |L1.8260|
                  |L1.8258|
002042  1c64              ADDS     r4,r4,#1              ;1641
                  |L1.8260|
002044  7820              LDRB     r0,[r4,#0]            ;1641
002046  2800              CMP      r0,#0                 ;1641
002048  d1fb              BNE      |L1.8258|
00204a  00b1              LSLS     r1,r6,#2              ;1645
00204c  980a              LDR      r0,[sp,#0x28]         ;1645
00204e  f7fffffe          BL       png_malloc_warn
002052  4680              MOV      r8,r0                 ;1645
002054  f1b80f00          CMP      r8,#0                 ;1647
002058  d108              BNE      |L1.8300|
00205a  4629              MOV      r1,r5                 ;1649
00205c  980a              LDR      r0,[sp,#0x28]         ;1649
00205e  f7fffffe          BL       png_free
002062  a1c3              ADR      r1,|L1.9072|
002064  980a              LDR      r0,[sp,#0x28]         ;1650
002066  f7fffffe          BL       png_warning
00206a  e774              B        |L1.8022|
                  |L1.8300|
00206c  f04f0b00          MOV      r11,#0                ;1655
002070  e01b              B        |L1.8362|
                  |L1.8306|
002072  1c64              ADDS     r4,r4,#1              ;1657
002074  f848402b          STR      r4,[r8,r11,LSL #2]    ;1660
002078  e000              B        |L1.8316|
                  |L1.8314|
00207a  1c64              ADDS     r4,r4,#1              ;1660
                  |L1.8316|
00207c  7820              LDRB     r0,[r4,#0]            ;1660
00207e  b110              CBZ      r0,|L1.8326|
002080  9806              LDR      r0,[sp,#0x18]         ;1660
002082  4284              CMP      r4,r0                 ;1660
002084  d9f9              BLS      |L1.8314|
                  |L1.8326|
002086  9806              LDR      r0,[sp,#0x18]         ;1664
002088  4284              CMP      r4,r0                 ;1664
00208a  d90c              BLS      |L1.8358|
00208c  a19d              ADR      r1,|L1.8964|
00208e  980a              LDR      r0,[sp,#0x28]         ;1666
002090  f7fffffe          BL       png_warning
002094  4629              MOV      r1,r5                 ;1667
002096  980a              LDR      r0,[sp,#0x28]         ;1667
002098  f7fffffe          BL       png_free
00209c  4641              MOV      r1,r8                 ;1668
00209e  980a              LDR      r0,[sp,#0x28]         ;1668
0020a0  f7fffffe          BL       png_free
0020a4  e757              B        |L1.8022|
                  |L1.8358|
0020a6  f10b0b01          ADD      r11,r11,#1            ;1655
                  |L1.8362|
0020aa  45b3              CMP      r11,r6                ;1655
0020ac  dbe1              BLT      |L1.8306|
0020ae  9807              LDR      r0,[sp,#0x1c]         ;1673
0020b0  e9cd0803          STRD     r0,r8,[sp,#0xc]       ;1673
0020b4  e9cd7601          STRD     r7,r6,[sp,#4]         ;1673
0020b8  9808              LDR      r0,[sp,#0x20]         ;1673
0020ba  9000              STR      r0,[sp,#0]            ;1673
0020bc  462a              MOV      r2,r5                 ;1673
0020be  e9dd3009          LDRD     r3,r0,[sp,#0x24]      ;1673
0020c2  990b              LDR      r1,[sp,#0x2c]         ;1673
0020c4  f7fffffe          BL       png_set_pCAL
0020c8  4629              MOV      r1,r5                 ;1676
0020ca  980a              LDR      r0,[sp,#0x28]         ;1676
0020cc  f7fffffe          BL       png_free
0020d0  4641              MOV      r1,r8                 ;1677
0020d2  980a              LDR      r0,[sp,#0x28]         ;1677
0020d4  f7fffffe          BL       png_free
0020d8  bf00              NOP      
0020da  e73c              B        |L1.8022|
;;;1679   #endif
                          ENDP

                  png_handle_sCAL PROC
;;;1683   void /* PRIVATE */
;;;1684   png_handle_sCAL(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)
0020dc  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;1685   {
0020e0  b086              SUB      sp,sp,#0x18
0020e2  4692              MOV      r10,r2
;;;1686      png_charp buffer, ep;
;;;1687   #ifdef PNG_FLOATING_POINT_SUPPORTED
;;;1688      double width, height;
;;;1689      png_charp vp;
;;;1690   #else
;;;1691   #ifdef PNG_FIXED_POINT_SUPPORTED
;;;1692      png_charp swidth, sheight;
;;;1693   #endif
;;;1694   #endif
;;;1695      png_size_t slength;
;;;1696   
;;;1697      png_debug(1, "in png_handle_sCAL\n");
;;;1698   
;;;1699      if (!(png_ptr->mode & PNG_HAVE_IHDR))
0020e4  9806              LDR      r0,[sp,#0x18]
0020e6  f89001a8          LDRB     r0,[r0,#0x1a8]
0020ea  f0000001          AND      r0,r0,#1
0020ee  b920              CBNZ     r0,|L1.8442|
;;;1700         png_error(png_ptr, "Missing IHDR before sCAL");
0020f0  a1a6              ADR      r1,|L1.9100|
0020f2  9806              LDR      r0,[sp,#0x18]
0020f4  f7fffffe          BL       png_error
0020f8  e020              B        |L1.8508|
                  |L1.8442|
;;;1701      else if (png_ptr->mode & PNG_HAVE_IDAT)
0020fa  9806              LDR      r0,[sp,#0x18]
0020fc  f89001a8          LDRB     r0,[r0,#0x1a8]
002100  f0000004          AND      r0,r0,#4
002104  b150              CBZ      r0,|L1.8476|
;;;1702      {
;;;1703         png_warning(png_ptr, "Invalid sCAL after IDAT");
002106  a1a8              ADR      r1,|L1.9128|
002108  9806              LDR      r0,[sp,#0x18]
00210a  f7fffffe          BL       png_warning
;;;1704         png_crc_finish(png_ptr, length);
00210e  4651              MOV      r1,r10
002110  9806              LDR      r0,[sp,#0x18]
002112  f7fffffe          BL       png_crc_finish
                  |L1.8470|
;;;1705         return;
;;;1706      }
;;;1707      else if (info_ptr != NULL && (info_ptr->valid & PNG_INFO_sCAL))
;;;1708      {
;;;1709         png_warning(png_ptr, "Duplicate sCAL chunk");
;;;1710         png_crc_finish(png_ptr, length);
;;;1711         return;
;;;1712      }
;;;1713   
;;;1714      png_debug1(2, "Allocating and reading sCAL chunk data (%lu bytes)\n",
;;;1715         length + 1);
;;;1716      buffer = (png_charp)png_malloc_warn(png_ptr, length + 1);
;;;1717      if (buffer == NULL)
;;;1718        {
;;;1719          png_warning(png_ptr, "Out of memory while processing sCAL chunk");
;;;1720          return;
;;;1721        }
;;;1722      slength = (png_size_t)length;
;;;1723      png_crc_read(png_ptr, (png_bytep)buffer, slength);
;;;1724   
;;;1725      if (png_crc_finish(png_ptr, 0))
;;;1726      {
;;;1727         png_free(png_ptr, buffer);
;;;1728         return;
;;;1729      }
;;;1730   
;;;1731      buffer[slength] = 0x00; /* null terminate the last string */
;;;1732   
;;;1733      ep = buffer + 1;        /* skip unit byte */
;;;1734   
;;;1735   #ifdef PNG_FLOATING_POINT_SUPPORTED
;;;1736      width = png_strtod(png_ptr, ep, &vp);
;;;1737      if (*vp)
;;;1738      {
;;;1739          png_warning(png_ptr, "malformed width string in sCAL chunk");
;;;1740          return;
;;;1741      }
;;;1742   #else
;;;1743   #ifdef PNG_FIXED_POINT_SUPPORTED
;;;1744      swidth = (png_charp)png_malloc_warn(png_ptr, png_strlen(ep) + 1);
;;;1745      if (swidth == NULL)
;;;1746        {
;;;1747          png_warning(png_ptr, "Out of memory while processing sCAL chunk width");
;;;1748          return;
;;;1749        }
;;;1750      png_memcpy(swidth, ep, (png_size_t)png_strlen(ep));
;;;1751   #endif
;;;1752   #endif
;;;1753   
;;;1754      for (ep = buffer; *ep; ep++)
;;;1755         /* empty loop */ ;
;;;1756      ep++;
;;;1757   
;;;1758   #ifdef PNG_FLOATING_POINT_SUPPORTED
;;;1759      height = png_strtod(png_ptr, ep, &vp);
;;;1760      if (*vp)
;;;1761      {
;;;1762          png_warning(png_ptr, "malformed height string in sCAL chunk");
;;;1763          return;
;;;1764      }
;;;1765   #else
;;;1766   #ifdef PNG_FIXED_POINT_SUPPORTED
;;;1767      sheight = (png_charp)png_malloc_warn(png_ptr, png_strlen(ep) + 1);
;;;1768      if (swidth == NULL)
;;;1769        {
;;;1770          png_warning(png_ptr, "Out of memory while processing sCAL chunk height");
;;;1771          return;
;;;1772        }
;;;1773      png_memcpy(sheight, ep, (png_size_t)png_strlen(ep));
;;;1774   #endif
;;;1775   #endif
;;;1776   
;;;1777      if (buffer + slength < ep
;;;1778   #ifdef PNG_FLOATING_POINT_SUPPORTED
;;;1779         || width <= 0. || height <= 0.
;;;1780   #endif
;;;1781         )
;;;1782      {
;;;1783         png_warning(png_ptr, "Invalid sCAL data");
;;;1784         png_free(png_ptr, buffer);
;;;1785   #if defined(PNG_FIXED_POINT_SUPPORTED) && !defined(PNG_FLOATING_POINT_SUPPORTED)
;;;1786         png_free(png_ptr, swidth);
;;;1787         png_free(png_ptr, sheight);
;;;1788   #endif
;;;1789         return;
;;;1790      }
;;;1791   
;;;1792   
;;;1793   #ifdef PNG_FLOATING_POINT_SUPPORTED
;;;1794      png_set_sCAL(png_ptr, info_ptr, buffer[0], width, height);
;;;1795   #else
;;;1796   #ifdef PNG_FIXED_POINT_SUPPORTED
;;;1797      png_set_sCAL_s(png_ptr, info_ptr, buffer[0], swidth, sheight);
;;;1798   #endif
;;;1799   #endif
;;;1800   
;;;1801      png_free(png_ptr, buffer);
;;;1802   #if defined(PNG_FIXED_POINT_SUPPORTED) && !defined(PNG_FLOATING_POINT_SUPPORTED)
;;;1803      png_free(png_ptr, swidth);
;;;1804      png_free(png_ptr, sheight);
;;;1805   #endif
;;;1806   }
002116  b009              ADD      sp,sp,#0x24
002118  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.8476|
00211c  9807              LDR      r0,[sp,#0x1c]         ;1707
00211e  b168              CBZ      r0,|L1.8508|
002120  9807              LDR      r0,[sp,#0x1c]         ;1707
002122  8900              LDRH     r0,[r0,#8]            ;1707
002124  f4004080          AND      r0,r0,#0x4000         ;1707
002128  b140              CBZ      r0,|L1.8508|
00212a  a1a5              ADR      r1,|L1.9152|
00212c  9806              LDR      r0,[sp,#0x18]         ;1709
00212e  f7fffffe          BL       png_warning
002132  4651              MOV      r1,r10                ;1710
002134  9806              LDR      r0,[sp,#0x18]         ;1710
002136  f7fffffe          BL       png_crc_finish
00213a  e7ec              B        |L1.8470|
                  |L1.8508|
00213c  f10a0101          ADD      r1,r10,#1             ;1716
002140  9806              LDR      r0,[sp,#0x18]         ;1716
002142  f7fffffe          BL       png_malloc_warn
002146  4604              MOV      r4,r0                 ;1716
002148  b924              CBNZ     r4,|L1.8532|
00214a  a1a3              ADR      r1,|L1.9176|
00214c  9806              LDR      r0,[sp,#0x18]         ;1719
00214e  f7fffffe          BL       png_warning
002152  e7e0              B        |L1.8470|
                  |L1.8532|
002154  46d3              MOV      r11,r10               ;1722
002156  465a              MOV      r2,r11                ;1723
002158  4621              MOV      r1,r4                 ;1723
00215a  9806              LDR      r0,[sp,#0x18]         ;1723
00215c  f7fffffe          BL       png_crc_read
002160  2100              MOVS     r1,#0                 ;1725
002162  9806              LDR      r0,[sp,#0x18]         ;1725
002164  f7fffffe          BL       png_crc_finish
002168  b120              CBZ      r0,|L1.8564|
00216a  4621              MOV      r1,r4                 ;1727
00216c  9806              LDR      r0,[sp,#0x18]         ;1727
00216e  f7fffffe          BL       png_free
002172  e7d0              B        |L1.8470|
                  |L1.8564|
002174  2000              MOVS     r0,#0                 ;1731
002176  f804000b          STRB     r0,[r4,r11]           ;1731
00217a  f1040901          ADD      r9,r4,#1              ;1733
00217e  a905              ADD      r1,sp,#0x14           ;1736
002180  4648              MOV      r0,r9                 ;1736
002182  f7fffffe          BL       strtod
002186  4605              MOV      r5,r0                 ;1736
002188  460e              MOV      r6,r1                 ;1736
00218a  9805              LDR      r0,[sp,#0x14]         ;1737
00218c  7800              LDRB     r0,[r0,#0]            ;1737
00218e  b120              CBZ      r0,|L1.8602|
002190  a19c              ADR      r1,|L1.9220|
002192  9806              LDR      r0,[sp,#0x18]         ;1739
002194  f7fffffe          BL       png_warning
002198  e7bd              B        |L1.8470|
                  |L1.8602|
00219a  46a1              MOV      r9,r4                 ;1754
00219c  e001              B        |L1.8610|
                  |L1.8606|
00219e  f1090901          ADD      r9,r9,#1              ;1754
                  |L1.8610|
0021a2  f8990000          LDRB     r0,[r9,#0]            ;1754
0021a6  2800              CMP      r0,#0                 ;1754
0021a8  d1f9              BNE      |L1.8606|
0021aa  f1090901          ADD      r9,r9,#1              ;1756
0021ae  a905              ADD      r1,sp,#0x14           ;1759
0021b0  4648              MOV      r0,r9                 ;1759
0021b2  f7fffffe          BL       strtod
0021b6  4607              MOV      r7,r0                 ;1759
0021b8  4688              MOV      r8,r1                 ;1759
0021ba  9805              LDR      r0,[sp,#0x14]         ;1760
0021bc  7800              LDRB     r0,[r0,#0]            ;1760
0021be  b120              CBZ      r0,|L1.8650|
0021c0  a19a              ADR      r1,|L1.9260|
0021c2  9806              LDR      r0,[sp,#0x18]         ;1762
0021c4  f7fffffe          BL       png_warning
0021c8  e7a5              B        |L1.8470|
                  |L1.8650|
0021ca  e143              B        |L1.9300|
                  |L1.8652|
0021cc  4d697373          DCB      "Missing IHDR before pHYs",0
0021d0  696e6720
0021d4  49484452
0021d8  20626566
0021dc  6f726520
0021e0  70485973
0021e4  00      
0021e5  00                DCB      0
0021e6  00                DCB      0
0021e7  00                DCB      0
                  |L1.8680|
0021e8  496e7661          DCB      "Invalid pHYs after IDAT",0
0021ec  6c696420
0021f0  70485973
0021f4  20616674
0021f8  65722049
0021fc  44415400
                  |L1.8704|
002200  4475706c          DCB      "Duplicate pHYs chunk",0
002204  69636174
002208  65207048
00220c  59732063
002210  68756e6b
002214  00      
002215  00                DCB      0
002216  00                DCB      0
002217  00                DCB      0
                  |L1.8728|
002218  496e636f          DCB      "Incorrect pHYs chunk length",0
00221c  72726563
002220  74207048
002224  59732063
002228  68756e6b
00222c  206c656e
002230  67746800
                  |L1.8756|
002234  4d697373          DCB      "Missing IHDR before oFFs",0
002238  696e6720
00223c  49484452
002240  20626566
002244  6f726520
002248  6f464673
00224c  00      
00224d  00                DCB      0
00224e  00                DCB      0
00224f  00                DCB      0
                  |L1.8784|
002250  496e7661          DCB      "Invalid oFFs after IDAT",0
002254  6c696420
002258  6f464673
00225c  20616674
002260  65722049
002264  44415400
                  |L1.8808|
002268  4475706c          DCB      "Duplicate oFFs chunk",0
00226c  69636174
002270  65206f46
002274  46732063
002278  68756e6b
00227c  00      
00227d  00                DCB      0
00227e  00                DCB      0
00227f  00                DCB      0
                  |L1.8832|
002280  496e636f          DCB      "Incorrect oFFs chunk length",0
002284  72726563
002288  74206f46
00228c  46732063
002290  68756e6b
002294  206c656e
002298  67746800
                  |L1.8860|
00229c  4d697373          DCB      "Missing IHDR before pCAL",0
0022a0  696e6720
0022a4  49484452
0022a8  20626566
0022ac  6f726520
0022b0  7043414c
0022b4  00      
0022b5  00                DCB      0
0022b6  00                DCB      0
0022b7  00                DCB      0
                  |L1.8888|
0022b8  496e7661          DCB      "Invalid pCAL after IDAT",0
0022bc  6c696420
0022c0  7043414c
0022c4  20616674
0022c8  65722049
0022cc  44415400
                  |L1.8912|
0022d0  4475706c          DCB      "Duplicate pCAL chunk",0
0022d4  69636174
0022d8  65207043
0022dc  414c2063
0022e0  68756e6b
0022e4  00      
0022e5  00                DCB      0
0022e6  00                DCB      0
0022e7  00                DCB      0
                  |L1.8936|
0022e8  4e6f206d          DCB      "No memory for pCAL purpose.",0
0022ec  656d6f72
0022f0  7920666f
0022f4  72207043
0022f8  414c2070
0022fc  7572706f
002300  73652e00
                  |L1.8964|
002304  496e7661          DCB      "Invalid pCAL data",0
002308  6c696420
00230c  7043414c
002310  20646174
002314  6100    
002316  00                DCB      0
002317  00                DCB      0
                  |L1.8984|
002318  496e7661          DCB      "Invalid pCAL parameters for equation type",0
00231c  6c696420
002320  7043414c
002324  20706172
002328  616d6574
00232c  65727320
002330  666f7220
002334  65717561
002338  74696f6e
00233c  20747970
002340  6500    
002342  00                DCB      0
002343  00                DCB      0
                  |L1.9028|
002344  556e7265          DCB      "Unrecognized equation type for pCAL chunk",0
002348  636f676e
00234c  697a6564
002350  20657175
002354  6174696f
002358  6e207479
00235c  70652066
002360  6f722070
002364  43414c20
002368  6368756e
00236c  6b00    
00236e  00                DCB      0
00236f  00                DCB      0
                  |L1.9072|
002370  4e6f206d          DCB      "No memory for pCAL params.",0
002374  656d6f72
002378  7920666f
00237c  72207043
002380  414c2070
002384  6172616d
002388  732e00  
00238b  00                DCB      0
                  |L1.9100|
00238c  4d697373          DCB      "Missing IHDR before sCAL",0
002390  696e6720
002394  49484452
002398  20626566
00239c  6f726520
0023a0  7343414c
0023a4  00      
0023a5  00                DCB      0
0023a6  00                DCB      0
0023a7  00                DCB      0
                  |L1.9128|
0023a8  496e7661          DCB      "Invalid sCAL after IDAT",0
0023ac  6c696420
0023b0  7343414c
0023b4  20616674
0023b8  65722049
0023bc  44415400
                  |L1.9152|
0023c0  4475706c          DCB      "Duplicate sCAL chunk",0
0023c4  69636174
0023c8  65207343
0023cc  414c2063
0023d0  68756e6b
0023d4  00      
0023d5  00                DCB      0
0023d6  00                DCB      0
0023d7  00                DCB      0
                  |L1.9176|
0023d8  4f757420          DCB      "Out of memory while processing sCAL chunk",0
0023dc  6f66206d
0023e0  656d6f72
0023e4  79207768
0023e8  696c6520
0023ec  70726f63
0023f0  65737369
0023f4  6e672073
0023f8  43414c20
0023fc  6368756e
002400  6b00    
002402  00                DCB      0
002403  00                DCB      0
                  |L1.9220|
002404  6d616c66          DCB      "malformed width string in sCAL chunk",0
002408  6f726d65
00240c  64207769
002410  64746820
002414  73747269
002418  6e672069
00241c  6e207343
002420  414c2063
002424  68756e6b
002428  00      
002429  00                DCB      0
00242a  00                DCB      0
00242b  00                DCB      0
                  |L1.9260|
00242c  6d616c66          DCB      "malformed height string in sCAL chunk",0
002430  6f726d65
002434  64206865
002438  69676874
00243c  20737472
002440  696e6720
002444  696e2073
002448  43414c20
00244c  6368756e
002450  6b00    
002452  00                DCB      0
002453  00                DCB      0
                  |L1.9300|
002454  eb04000b          ADD      r0,r4,r11             ;1777
002458  4548              CMP      r0,r9                 ;1777
00245a  d30d              BCC      |L1.9336|
00245c  2200              MOVS     r2,#0                 ;1779
00245e  4613              MOV      r3,r2                 ;1779
002460  4628              MOV      r0,r5                 ;1779
002462  4631              MOV      r1,r6                 ;1779
002464  f7fffffe          BL       __aeabi_cdcmple
002468  d906              BLS      |L1.9336|
00246a  2200              MOVS     r2,#0                 ;1779
00246c  4613              MOV      r3,r2                 ;1779
00246e  4638              MOV      r0,r7                 ;1779
002470  4641              MOV      r1,r8                 ;1779
002472  f7fffffe          BL       __aeabi_cdcmple
002476  d808              BHI      |L1.9354|
                  |L1.9336|
002478  a1fe              ADR      r1,|L1.10356|
00247a  9806              LDR      r0,[sp,#0x18]         ;1783
00247c  f7fffffe          BL       png_warning
002480  4621              MOV      r1,r4                 ;1784
002482  9806              LDR      r0,[sp,#0x18]         ;1784
002484  f7fffffe          BL       png_free
002488  e645              B        |L1.8470|
                  |L1.9354|
00248a  e88d01e0          STM      sp,{r5-r8}            ;1794
00248e  7822              LDRB     r2,[r4,#0]            ;1794
002490  e9dd0106          LDRD     r0,r1,[sp,#0x18]      ;1794
002494  f7fffffe          BL       png_set_sCAL
002498  4621              MOV      r1,r4                 ;1801
00249a  9806              LDR      r0,[sp,#0x18]         ;1801
00249c  f7fffffe          BL       png_free
0024a0  bf00              NOP      
0024a2  e638              B        |L1.8470|
;;;1807   #endif
                          ENDP

                  png_handle_tIME PROC
;;;1810   void /* PRIVATE */
;;;1811   png_handle_tIME(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)
0024a4  b57f              PUSH     {r0-r6,lr}
;;;1812   {
0024a6  4604              MOV      r4,r0
0024a8  460d              MOV      r5,r1
0024aa  4616              MOV      r6,r2
;;;1813      png_byte buf[7];
;;;1814      png_time mod_time;
;;;1815   
;;;1816      png_debug(1, "in png_handle_tIME\n");
;;;1817   
;;;1818      if (!(png_ptr->mode & PNG_HAVE_IHDR))
0024ac  f89401a8          LDRB     r0,[r4,#0x1a8]
0024b0  f0000001          AND      r0,r0,#1
0024b4  b920              CBNZ     r0,|L1.9408|
;;;1819         png_error(png_ptr, "Out of place tIME chunk");
0024b6  a1f4              ADR      r1,|L1.10376|
0024b8  4620              MOV      r0,r4
0024ba  f7fffffe          BL       png_error
0024be  e00d              B        |L1.9436|
                  |L1.9408|
;;;1820      else if (info_ptr != NULL && (info_ptr->valid & PNG_INFO_tIME))
0024c0  b165              CBZ      r5,|L1.9436|
0024c2  8928              LDRH     r0,[r5,#8]
0024c4  f4007000          AND      r0,r0,#0x200
0024c8  b140              CBZ      r0,|L1.9436|
;;;1821      {
;;;1822         png_warning(png_ptr, "Duplicate tIME chunk");
0024ca  a1f5              ADR      r1,|L1.10400|
0024cc  4620              MOV      r0,r4
0024ce  f7fffffe          BL       png_warning
;;;1823         png_crc_finish(png_ptr, length);
0024d2  4631              MOV      r1,r6
0024d4  4620              MOV      r0,r4
0024d6  f7fffffe          BL       png_crc_finish
                  |L1.9434|
;;;1824         return;
;;;1825      }
;;;1826   
;;;1827      if (png_ptr->mode & PNG_HAVE_IDAT)
;;;1828         png_ptr->mode |= PNG_AFTER_IDAT;
;;;1829   
;;;1830      if (length != 7)
;;;1831      {
;;;1832         png_warning(png_ptr, "Incorrect tIME chunk length");
;;;1833         png_crc_finish(png_ptr, length);
;;;1834         return;
;;;1835      }
;;;1836   
;;;1837      png_crc_read(png_ptr, buf, 7);
;;;1838      if (png_crc_finish(png_ptr, 0))
;;;1839         return;
;;;1840   
;;;1841      mod_time.second = buf[6];
;;;1842      mod_time.minute = buf[5];
;;;1843      mod_time.hour = buf[4];
;;;1844      mod_time.day = buf[3];
;;;1845      mod_time.month = buf[2];
;;;1846      mod_time.year = png_get_uint_16(buf);
;;;1847   
;;;1848      png_set_tIME(png_ptr, info_ptr, &mod_time);
;;;1849   }
0024da  bd7f              POP      {r0-r6,pc}
                  |L1.9436|
0024dc  f89401a8          LDRB     r0,[r4,#0x1a8]        ;1827
0024e0  f0000004          AND      r0,r0,#4              ;1827
0024e4  b128              CBZ      r0,|L1.9458|
0024e6  f8d401a8          LDR      r0,[r4,#0x1a8]        ;1828
0024ea  f0400008          ORR      r0,r0,#8              ;1828
0024ee  f8c401a8          STR      r0,[r4,#0x1a8]        ;1828
                  |L1.9458|
0024f2  2e07              CMP      r6,#7                 ;1830
0024f4  d008              BEQ      |L1.9480|
0024f6  a1f0              ADR      r1,|L1.10424|
0024f8  4620              MOV      r0,r4                 ;1832
0024fa  f7fffffe          BL       png_warning
0024fe  4631              MOV      r1,r6                 ;1833
002500  4620              MOV      r0,r4                 ;1833
002502  f7fffffe          BL       png_crc_finish
002506  e7e8              B        |L1.9434|
                  |L1.9480|
002508  2207              MOVS     r2,#7                 ;1837
00250a  a902              ADD      r1,sp,#8              ;1837
00250c  4620              MOV      r0,r4                 ;1837
00250e  f7fffffe          BL       png_crc_read
002512  2100              MOVS     r1,#0                 ;1838
002514  4620              MOV      r0,r4                 ;1838
002516  f7fffffe          BL       png_crc_finish
00251a  b100              CBZ      r0,|L1.9502|
00251c  e7dd              B        |L1.9434|
                  |L1.9502|
00251e  f89d000e          LDRB     r0,[sp,#0xe]          ;1841
002522  f88d0006          STRB     r0,[sp,#6]            ;1841
002526  f89d000d          LDRB     r0,[sp,#0xd]          ;1842
00252a  f88d0005          STRB     r0,[sp,#5]            ;1842
00252e  f89d000c          LDRB     r0,[sp,#0xc]          ;1843
002532  f88d0004          STRB     r0,[sp,#4]            ;1843
002536  f89d000b          LDRB     r0,[sp,#0xb]          ;1844
00253a  f88d0003          STRB     r0,[sp,#3]            ;1844
00253e  f89d000a          LDRB     r0,[sp,#0xa]          ;1845
002542  f88d0002          STRB     r0,[sp,#2]            ;1845
002546  a802              ADD      r0,sp,#8              ;1846
002548  f7fffffe          BL       png_get_uint_16
00254c  f8ad0000          STRH     r0,[sp,#0]            ;1846
002550  466a              MOV      r2,sp                 ;1848
002552  4629              MOV      r1,r5                 ;1848
002554  4620              MOV      r0,r4                 ;1848
002556  f7fffffe          BL       png_set_tIME
00255a  bf00              NOP      
00255c  e7bd              B        |L1.9434|
;;;1850   #endif
                          ENDP

                  png_handle_tEXt PROC
;;;1854   void /* PRIVATE */
;;;1855   png_handle_tEXt(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)
00255e  e92d4ff8          PUSH     {r3-r11,lr}
;;;1856   {
002562  4607              MOV      r7,r0
002564  468b              MOV      r11,r1
002566  4691              MOV      r9,r2
;;;1857      png_textp text_ptr;
;;;1858      png_charp key;
;;;1859      png_charp text;
;;;1860      png_uint_32 skip = 0;
002568  2000              MOVS     r0,#0
00256a  9000              STR      r0,[sp,#0]
;;;1861      png_size_t slength;
;;;1862      int ret;
;;;1863   
;;;1864      png_debug(1, "in png_handle_tEXt\n");
;;;1865   
;;;1866      if (!(png_ptr->mode & PNG_HAVE_IHDR))
00256c  f89701a8          LDRB     r0,[r7,#0x1a8]
002570  f0000001          AND      r0,r0,#1
002574  b918              CBNZ     r0,|L1.9598|
;;;1867         png_error(png_ptr, "Missing IHDR before tEXt");
002576  a1d7              ADR      r1,|L1.10452|
002578  4638              MOV      r0,r7
00257a  f7fffffe          BL       png_error
                  |L1.9598|
;;;1868   
;;;1869      if (png_ptr->mode & PNG_HAVE_IDAT)
00257e  f89701a8          LDRB     r0,[r7,#0x1a8]
002582  f0000004          AND      r0,r0,#4
002586  b128              CBZ      r0,|L1.9620|
;;;1870         png_ptr->mode |= PNG_AFTER_IDAT;
002588  f8d701a8          LDR      r0,[r7,#0x1a8]
00258c  f0400008          ORR      r0,r0,#8
002590  f8c701a8          STR      r0,[r7,#0x1a8]
                  |L1.9620|
;;;1871   
;;;1872   #ifdef PNG_MAX_MALLOC_64K
;;;1873      if (length > (png_uint_32)65535L)
;;;1874      {
;;;1875         png_warning(png_ptr, "tEXt chunk too large to fit in memory");
;;;1876         skip = length - (png_uint_32)65535L;
;;;1877         length = (png_uint_32)65535L;
;;;1878      }
;;;1879   #endif
;;;1880   
;;;1881      key = (png_charp)png_malloc_warn(png_ptr, length + 1);
002594  f1090101          ADD      r1,r9,#1
002598  4638              MOV      r0,r7
00259a  f7fffffe          BL       png_malloc_warn
00259e  4605              MOV      r5,r0
;;;1882      if (key == NULL)
0025a0  b92d              CBNZ     r5,|L1.9646|
;;;1883      {
;;;1884        png_warning(png_ptr, "No memory to process text chunk.");
0025a2  a1d3              ADR      r1,|L1.10480|
0025a4  4638              MOV      r0,r7
0025a6  f7fffffe          BL       png_warning
                  |L1.9642|
;;;1885        return;
;;;1886      }
;;;1887      slength = (png_size_t)length;
;;;1888      png_crc_read(png_ptr, (png_bytep)key, slength);
;;;1889   
;;;1890      if (png_crc_finish(png_ptr, skip))
;;;1891      {
;;;1892         png_free(png_ptr, key);
;;;1893         return;
;;;1894      }
;;;1895   
;;;1896      key[slength] = 0x00;
;;;1897   
;;;1898      for (text = key; *text; text++)
;;;1899         /* empty loop to find end of key */ ;
;;;1900   
;;;1901      if (text != key + slength)
;;;1902         text++;
;;;1903   
;;;1904      text_ptr = (png_textp)png_malloc_warn(png_ptr,
;;;1905         (png_uint_32)png_sizeof(png_text));
;;;1906      if (text_ptr == NULL)
;;;1907      {
;;;1908        png_warning(png_ptr, "Not enough memory to process text chunk.");
;;;1909        png_free(png_ptr, key);
;;;1910        return;
;;;1911      }
;;;1912      text_ptr->compression = PNG_TEXT_COMPRESSION_NONE;
;;;1913      text_ptr->key = key;
;;;1914   #ifdef PNG_iTXt_SUPPORTED
;;;1915      text_ptr->lang = NULL;
;;;1916      text_ptr->lang_key = NULL;
;;;1917      text_ptr->itxt_length = 0;
;;;1918   #endif
;;;1919      text_ptr->text = text;
;;;1920      text_ptr->text_length = png_strlen(text);
;;;1921   
;;;1922      ret=png_set_text_2(png_ptr, info_ptr, text_ptr, 1);
;;;1923   
;;;1924      png_free(png_ptr, key);
;;;1925      png_free(png_ptr, text_ptr);
;;;1926      if (ret)
;;;1927        png_warning(png_ptr, "Insufficient memory to process text chunk.");
;;;1928   }
0025aa  e8bd8ff8          POP      {r3-r11,pc}
                  |L1.9646|
0025ae  46c8              MOV      r8,r9                 ;1887
0025b0  4642              MOV      r2,r8                 ;1888
0025b2  4629              MOV      r1,r5                 ;1888
0025b4  4638              MOV      r0,r7                 ;1888
0025b6  f7fffffe          BL       png_crc_read
0025ba  4638              MOV      r0,r7                 ;1890
0025bc  9900              LDR      r1,[sp,#0]            ;1890
0025be  f7fffffe          BL       png_crc_finish
0025c2  b120              CBZ      r0,|L1.9678|
0025c4  4629              MOV      r1,r5                 ;1892
0025c6  4638              MOV      r0,r7                 ;1892
0025c8  f7fffffe          BL       png_free
0025cc  e7ed              B        |L1.9642|
                  |L1.9678|
0025ce  2000              MOVS     r0,#0                 ;1896
0025d0  f8050008          STRB     r0,[r5,r8]            ;1896
0025d4  462e              MOV      r6,r5                 ;1898
0025d6  e000              B        |L1.9690|
                  |L1.9688|
0025d8  1c76              ADDS     r6,r6,#1              ;1898
                  |L1.9690|
0025da  7830              LDRB     r0,[r6,#0]            ;1898
0025dc  2800              CMP      r0,#0                 ;1898
0025de  d1fb              BNE      |L1.9688|
0025e0  eb050008          ADD      r0,r5,r8              ;1901
0025e4  42b0              CMP      r0,r6                 ;1901
0025e6  d000              BEQ      |L1.9706|
0025e8  1c76              ADDS     r6,r6,#1              ;1902
                  |L1.9706|
0025ea  2110              MOVS     r1,#0x10              ;1904
0025ec  4638              MOV      r0,r7                 ;1904
0025ee  f7fffffe          BL       png_malloc_warn
0025f2  4604              MOV      r4,r0                 ;1904
0025f4  b944              CBNZ     r4,|L1.9736|
0025f6  a1c7              ADR      r1,|L1.10516|
0025f8  4638              MOV      r0,r7                 ;1908
0025fa  f7fffffe          BL       png_warning
0025fe  4629              MOV      r1,r5                 ;1909
002600  4638              MOV      r0,r7                 ;1909
002602  f7fffffe          BL       png_free
002606  e7d0              B        |L1.9642|
                  |L1.9736|
002608  f04f30ff          MOV      r0,#0xffffffff        ;1912
00260c  6020              STR      r0,[r4,#0]            ;1912
00260e  6065              STR      r5,[r4,#4]            ;1913
002610  60a6              STR      r6,[r4,#8]            ;1919
002612  4630              MOV      r0,r6                 ;1920
002614  f7fffffe          BL       strlen
002618  60e0              STR      r0,[r4,#0xc]          ;1920
00261a  2301              MOVS     r3,#1                 ;1922
00261c  4622              MOV      r2,r4                 ;1922
00261e  4659              MOV      r1,r11                ;1922
002620  4638              MOV      r0,r7                 ;1922
002622  f7fffffe          BL       png_set_text_2
002626  4682              MOV      r10,r0                ;1922
002628  4629              MOV      r1,r5                 ;1924
00262a  4638              MOV      r0,r7                 ;1924
00262c  f7fffffe          BL       png_free
002630  4621              MOV      r1,r4                 ;1925
002632  4638              MOV      r0,r7                 ;1925
002634  f7fffffe          BL       png_free
002638  f1ba0f00          CMP      r10,#0                ;1926
00263c  d003              BEQ      |L1.9798|
00263e  a1c0              ADR      r1,|L1.10560|
002640  4638              MOV      r0,r7                 ;1927
002642  f7fffffe          BL       png_warning
                  |L1.9798|
002646  bf00              NOP      
002648  e7af              B        |L1.9642|
;;;1929   #endif
                          ENDP

                  png_handle_zTXt PROC
;;;1933   void /* PRIVATE */
;;;1934   png_handle_zTXt(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)
00264a  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;1935   {
00264e  b084              SUB      sp,sp,#0x10
002650  4607              MOV      r7,r0
002652  4691              MOV      r9,r2
;;;1936      png_textp text_ptr;
;;;1937      png_charp chunkdata;
;;;1938      png_charp text;
;;;1939      int comp_type;
;;;1940      int ret;
;;;1941      png_size_t slength, prefix_len, data_len;
;;;1942   
;;;1943      png_debug(1, "in png_handle_zTXt\n");
;;;1944      if (!(png_ptr->mode & PNG_HAVE_IHDR))
002654  f89701a8          LDRB     r0,[r7,#0x1a8]
002658  f0000001          AND      r0,r0,#1
00265c  b918              CBNZ     r0,|L1.9830|
;;;1945         png_error(png_ptr, "Missing IHDR before zTXt");
00265e  a1c3              ADR      r1,|L1.10604|
002660  4638              MOV      r0,r7
002662  f7fffffe          BL       png_error
                  |L1.9830|
;;;1946   
;;;1947      if (png_ptr->mode & PNG_HAVE_IDAT)
002666  f89701a8          LDRB     r0,[r7,#0x1a8]
00266a  f0000004          AND      r0,r0,#4
00266e  b128              CBZ      r0,|L1.9852|
;;;1948         png_ptr->mode |= PNG_AFTER_IDAT;
002670  f8d701a8          LDR      r0,[r7,#0x1a8]
002674  f0400008          ORR      r0,r0,#8
002678  f8c701a8          STR      r0,[r7,#0x1a8]
                  |L1.9852|
;;;1949   
;;;1950   #ifdef PNG_MAX_MALLOC_64K
;;;1951      /* We will no doubt have problems with chunks even half this size, but
;;;1952         there is no hard and fast rule to tell us where to stop. */
;;;1953      if (length > (png_uint_32)65535L)
;;;1954      {
;;;1955        png_warning(png_ptr,"zTXt chunk too large to fit in memory");
;;;1956        png_crc_finish(png_ptr, length);
;;;1957        return;
;;;1958      }
;;;1959   #endif
;;;1960   
;;;1961      chunkdata = (png_charp)png_malloc_warn(png_ptr, length + 1);
00267c  f1090101          ADD      r1,r9,#1
002680  4638              MOV      r0,r7
002682  f7fffffe          BL       png_malloc_warn
002686  4604              MOV      r4,r0
;;;1962      if (chunkdata == NULL)
002688  b934              CBNZ     r4,|L1.9880|
;;;1963      {
;;;1964        png_warning(png_ptr,"Out of memory processing zTXt chunk.");
00268a  a1bf              ADR      r1,|L1.10632|
00268c  4638              MOV      r0,r7
00268e  f7fffffe          BL       png_warning
                  |L1.9874|
;;;1965        return;
;;;1966      }
;;;1967      slength = (png_size_t)length;
;;;1968      png_crc_read(png_ptr, (png_bytep)chunkdata, slength);
;;;1969      if (png_crc_finish(png_ptr, 0))
;;;1970      {
;;;1971         png_free(png_ptr, chunkdata);
;;;1972         return;
;;;1973      }
;;;1974   
;;;1975      chunkdata[slength] = 0x00;
;;;1976   
;;;1977      for (text = chunkdata; *text; text++)
;;;1978         /* empty loop */ ;
;;;1979   
;;;1980      /* zTXt must have some text after the chunkdataword */
;;;1981      if (text == chunkdata + slength)
;;;1982      {
;;;1983         comp_type = PNG_TEXT_COMPRESSION_NONE;
;;;1984         png_warning(png_ptr, "Zero length zTXt chunk");
;;;1985      }
;;;1986      else
;;;1987      {
;;;1988          comp_type = *(++text);
;;;1989          if (comp_type != PNG_TEXT_COMPRESSION_zTXt)
;;;1990          {
;;;1991             png_warning(png_ptr, "Unknown compression type in zTXt chunk");
;;;1992             comp_type = PNG_TEXT_COMPRESSION_zTXt;
;;;1993          }
;;;1994          text++;        /* skip the compression_method byte */
;;;1995      }
;;;1996      prefix_len = text - chunkdata;
;;;1997   
;;;1998      chunkdata = (png_charp)png_decompress_chunk(png_ptr, comp_type, chunkdata,
;;;1999                                       (png_size_t)length, prefix_len, &data_len);
;;;2000   
;;;2001      text_ptr = (png_textp)png_malloc_warn(png_ptr,
;;;2002        (png_uint_32)png_sizeof(png_text));
;;;2003      if (text_ptr == NULL)
;;;2004      {
;;;2005        png_warning(png_ptr,"Not enough memory to process zTXt chunk.");
;;;2006        png_free(png_ptr, chunkdata);
;;;2007        return;
;;;2008      }
;;;2009      text_ptr->compression = comp_type;
;;;2010      text_ptr->key = chunkdata;
;;;2011   #ifdef PNG_iTXt_SUPPORTED
;;;2012      text_ptr->lang = NULL;
;;;2013      text_ptr->lang_key = NULL;
;;;2014      text_ptr->itxt_length = 0;
;;;2015   #endif
;;;2016      text_ptr->text = chunkdata + prefix_len;
;;;2017      text_ptr->text_length = data_len;
;;;2018   
;;;2019      ret=png_set_text_2(png_ptr, info_ptr, text_ptr, 1);
;;;2020   
;;;2021      png_free(png_ptr, text_ptr);
;;;2022      png_free(png_ptr, chunkdata);
;;;2023      if (ret)
;;;2024        png_error(png_ptr, "Insufficient memory to store zTXt chunk.");
;;;2025   }
002692  b007              ADD      sp,sp,#0x1c
002694  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.9880|
002698  46ca              MOV      r10,r9                ;1967
00269a  4652              MOV      r2,r10                ;1968
00269c  4621              MOV      r1,r4                 ;1968
00269e  4638              MOV      r0,r7                 ;1968
0026a0  f7fffffe          BL       png_crc_read
0026a4  2100              MOVS     r1,#0                 ;1969
0026a6  4638              MOV      r0,r7                 ;1969
0026a8  f7fffffe          BL       png_crc_finish
0026ac  b120              CBZ      r0,|L1.9912|
0026ae  4621              MOV      r1,r4                 ;1971
0026b0  4638              MOV      r0,r7                 ;1971
0026b2  f7fffffe          BL       png_free
0026b6  e7ec              B        |L1.9874|
                  |L1.9912|
0026b8  2000              MOVS     r0,#0                 ;1975
0026ba  f804000a          STRB     r0,[r4,r10]           ;1975
0026be  4626              MOV      r6,r4                 ;1977
0026c0  e000              B        |L1.9924|
                  |L1.9922|
0026c2  1c76              ADDS     r6,r6,#1              ;1977
                  |L1.9924|
0026c4  7830              LDRB     r0,[r6,#0]            ;1977
0026c6  2800              CMP      r0,#0                 ;1977
0026c8  d1fb              BNE      |L1.9922|
0026ca  eb04000a          ADD      r0,r4,r10             ;1981
0026ce  42b0              CMP      r0,r6                 ;1981
0026d0  d106              BNE      |L1.9952|
0026d2  f04f38ff          MOV      r8,#0xffffffff        ;1983
0026d6  a1b6              ADR      r1,|L1.10672|
0026d8  4638              MOV      r0,r7                 ;1984
0026da  f7fffffe          BL       png_warning
0026de  e00d              B        |L1.9980|
                  |L1.9952|
0026e0  1c70              ADDS     r0,r6,#1              ;1988
0026e2  4606              MOV      r6,r0                 ;1988
0026e4  f8908000          LDRB     r8,[r0,#0]            ;1988
0026e8  f1b80f00          CMP      r8,#0                 ;1989
0026ec  d005              BEQ      |L1.9978|
0026ee  a1b6              ADR      r1,|L1.10696|
0026f0  4638              MOV      r0,r7                 ;1991
0026f2  f7fffffe          BL       png_warning
0026f6  f04f0800          MOV      r8,#0                 ;1992
                  |L1.9978|
0026fa  1c76              ADDS     r6,r6,#1              ;1994
                  |L1.9980|
0026fc  eba60b04          SUB      r11,r6,r4             ;1996
002700  a802              ADD      r0,sp,#8              ;1998
002702  464b              MOV      r3,r9                 ;1998
002704  4622              MOV      r2,r4                 ;1998
002706  4641              MOV      r1,r8                 ;1998
002708  e9cdb000          STRD     r11,r0,[sp,#0]        ;1998
00270c  4638              MOV      r0,r7                 ;1998
00270e  f7fffffe          BL       png_decompress_chunk
002712  4604              MOV      r4,r0                 ;1998
002714  2110              MOVS     r1,#0x10              ;2001
002716  4638              MOV      r0,r7                 ;2001
002718  f7fffffe          BL       png_malloc_warn
00271c  4605              MOV      r5,r0                 ;2001
00271e  b945              CBNZ     r5,|L1.10034|
002720  a1b3              ADR      r1,|L1.10736|
002722  4638              MOV      r0,r7                 ;2005
002724  f7fffffe          BL       png_warning
002728  4621              MOV      r1,r4                 ;2006
00272a  4638              MOV      r0,r7                 ;2006
00272c  f7fffffe          BL       png_free
002730  e7af              B        |L1.9874|
                  |L1.10034|
002732  f8c58000          STR      r8,[r5,#0]            ;2009
002736  606c              STR      r4,[r5,#4]            ;2010
002738  eb04000b          ADD      r0,r4,r11             ;2016
00273c  60a8              STR      r0,[r5,#8]            ;2016
00273e  9802              LDR      r0,[sp,#8]            ;2017
002740  60e8              STR      r0,[r5,#0xc]          ;2017
002742  2301              MOVS     r3,#1                 ;2019
002744  462a              MOV      r2,r5                 ;2019
002746  4638              MOV      r0,r7                 ;2019
002748  9905              LDR      r1,[sp,#0x14]         ;2019
00274a  f7fffffe          BL       png_set_text_2
00274e  9003              STR      r0,[sp,#0xc]          ;2019
002750  4629              MOV      r1,r5                 ;2021
002752  4638              MOV      r0,r7                 ;2021
002754  f7fffffe          BL       png_free
002758  4621              MOV      r1,r4                 ;2022
00275a  4638              MOV      r0,r7                 ;2022
00275c  f7fffffe          BL       png_free
002760  9803              LDR      r0,[sp,#0xc]          ;2023
002762  b118              CBZ      r0,|L1.10092|
002764  a1ad              ADR      r1,|L1.10780|
002766  4638              MOV      r0,r7                 ;2024
002768  f7fffffe          BL       png_error
                  |L1.10092|
00276c  bf00              NOP      
00276e  e790              B        |L1.9874|
;;;2026   #endif
                          ENDP

                  png_check_chunk_name PROC
;;;2231   void /* PRIVATE */
;;;2232   png_check_chunk_name(png_structp png_ptr, png_bytep chunk_name)
002770  b570              PUSH     {r4-r6,lr}
;;;2233   {
002772  4605              MOV      r5,r0
002774  460c              MOV      r4,r1
;;;2234      png_debug(1, "in png_check_chunk_name\n");
;;;2235      if (isnonalpha(chunk_name[0]) || isnonalpha(chunk_name[1]) ||
002776  7820              LDRB     r0,[r4,#0]
002778  2841              CMP      r0,#0x41
00277a  db2c              BLT      |L1.10198|
00277c  7820              LDRB     r0,[r4,#0]
00277e  287a              CMP      r0,#0x7a
002780  dc29              BGT      |L1.10198|
002782  7820              LDRB     r0,[r4,#0]
002784  285a              CMP      r0,#0x5a
002786  dd02              BLE      |L1.10126|
002788  7820              LDRB     r0,[r4,#0]
00278a  2861              CMP      r0,#0x61
00278c  db23              BLT      |L1.10198|
                  |L1.10126|
00278e  7860              LDRB     r0,[r4,#1]
002790  2841              CMP      r0,#0x41
002792  db20              BLT      |L1.10198|
002794  7860              LDRB     r0,[r4,#1]
002796  287a              CMP      r0,#0x7a
002798  dc1d              BGT      |L1.10198|
00279a  7860              LDRB     r0,[r4,#1]
00279c  285a              CMP      r0,#0x5a
00279e  dd02              BLE      |L1.10150|
0027a0  7860              LDRB     r0,[r4,#1]
0027a2  2861              CMP      r0,#0x61
0027a4  db17              BLT      |L1.10198|
                  |L1.10150|
;;;2236          isnonalpha(chunk_name[2]) || isnonalpha(chunk_name[3]))
0027a6  78a0              LDRB     r0,[r4,#2]
0027a8  2841              CMP      r0,#0x41
0027aa  db14              BLT      |L1.10198|
0027ac  78a0              LDRB     r0,[r4,#2]
0027ae  287a              CMP      r0,#0x7a
0027b0  dc11              BGT      |L1.10198|
0027b2  78a0              LDRB     r0,[r4,#2]
0027b4  285a              CMP      r0,#0x5a
0027b6  dd02              BLE      |L1.10174|
0027b8  78a0              LDRB     r0,[r4,#2]
0027ba  2861              CMP      r0,#0x61
0027bc  db0b              BLT      |L1.10198|
                  |L1.10174|
0027be  78e0              LDRB     r0,[r4,#3]
0027c0  2841              CMP      r0,#0x41
0027c2  db08              BLT      |L1.10198|
0027c4  78e0              LDRB     r0,[r4,#3]
0027c6  287a              CMP      r0,#0x7a
0027c8  dc05              BGT      |L1.10198|
0027ca  78e0              LDRB     r0,[r4,#3]
0027cc  285a              CMP      r0,#0x5a
0027ce  dd06              BLE      |L1.10206|
0027d0  78e0              LDRB     r0,[r4,#3]
0027d2  2861              CMP      r0,#0x61
0027d4  da03              BGE      |L1.10206|
                  |L1.10198|
;;;2237      {
;;;2238         png_chunk_error(png_ptr, "invalid chunk type");
0027d6  a19c              ADR      r1,|L1.10824|
0027d8  4628              MOV      r0,r5
0027da  f7fffffe          BL       png_chunk_error
                  |L1.10206|
;;;2239      }
;;;2240   }
0027de  bd70              POP      {r4-r6,pc}
;;;2241   
                          ENDP

                  png_handle_unknown PROC
;;;2141   void /* PRIVATE */
;;;2142   png_handle_unknown(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)
0027e0  b5f0              PUSH     {r4-r7,lr}
;;;2143   {
0027e2  b085              SUB      sp,sp,#0x14
0027e4  4604              MOV      r4,r0
0027e6  460e              MOV      r6,r1
0027e8  4615              MOV      r5,r2
;;;2144      png_uint_32 skip = 0;
0027ea  2700              MOVS     r7,#0
;;;2145   
;;;2146      png_debug(1, "in png_handle_unknown\n");
;;;2147   
;;;2148      if (png_ptr->mode & PNG_HAVE_IDAT)
0027ec  f89401a8          LDRB     r0,[r4,#0x1a8]
0027f0  f0000004          AND      r0,r0,#4
0027f4  b160              CBZ      r0,|L1.10256|
;;;2149      {
;;;2150   #ifdef PNG_USE_LOCAL_ARRAYS
;;;2151         PNG_IDAT;
;;;2152   #endif
;;;2153         if (png_memcmp(png_ptr->chunk_name, png_IDAT, 4))  /* not an IDAT */
0027f6  2204              MOVS     r2,#4
0027f8  4998              LDR      r1,|L1.10844|
0027fa  f5047017          ADD      r0,r4,#0x25c
0027fe  f7fffffe          BL       memcmp
002802  b128              CBZ      r0,|L1.10256|
;;;2154            png_ptr->mode |= PNG_AFTER_IDAT;
002804  f8d401a8          LDR      r0,[r4,#0x1a8]
002808  f0400008          ORR      r0,r0,#8
00280c  f8c401a8          STR      r0,[r4,#0x1a8]
                  |L1.10256|
;;;2155      }
;;;2156   
;;;2157      png_check_chunk_name(png_ptr, png_ptr->chunk_name);
002810  f5047117          ADD      r1,r4,#0x25c
002814  4620              MOV      r0,r4
002816  f7fffffe          BL       png_check_chunk_name
;;;2158   
;;;2159      if (!(png_ptr->chunk_name[0] & 0x20))
00281a  f894025c          LDRB     r0,[r4,#0x25c]
00281e  f0000020          AND      r0,r0,#0x20
002822  b968              CBNZ     r0,|L1.10304|
;;;2160      {
;;;2161   #if defined(PNG_READ_UNKNOWN_CHUNKS_SUPPORTED)
;;;2162         if(png_handle_as_unknown(png_ptr, png_ptr->chunk_name) !=
002824  f5047117          ADD      r1,r4,#0x25c
002828  4620              MOV      r0,r4
00282a  f7fffffe          BL       png_handle_as_unknown
00282e  2803              CMP      r0,#3
002830  d006              BEQ      |L1.10304|
;;;2163              PNG_HANDLE_CHUNK_ALWAYS
;;;2164   #if defined(PNG_READ_USER_CHUNKS_SUPPORTED)
;;;2165              && png_ptr->read_user_chunk_fn == NULL
002832  f8d40358          LDR      r0,[r4,#0x358]
002836  b918              CBNZ     r0,|L1.10304|
;;;2166   #endif
;;;2167           )
;;;2168   #endif
;;;2169             png_chunk_error(png_ptr, "unknown critical chunk");
002838  a189              ADR      r1,|L1.10848|
00283a  4620              MOV      r0,r4
00283c  f7fffffe          BL       png_chunk_error
                  |L1.10304|
;;;2170      }
;;;2171   
;;;2172   #if defined(PNG_READ_UNKNOWN_CHUNKS_SUPPORTED)
;;;2173      if ((png_ptr->flags & PNG_FLAG_KEEP_UNKNOWN_CHUNKS) ||
002840  f8b401ac          LDRH     r0,[r4,#0x1ac]
002844  f4004000          AND      r0,r0,#0x8000
002848  b918              CBNZ     r0,|L1.10322|
;;;2174          (png_ptr->read_user_chunk_fn != NULL))
00284a  f8d40358          LDR      r0,[r4,#0x358]
00284e  2800              CMP      r0,#0
002850  d00e              BEQ      |L1.10352|
                  |L1.10322|
;;;2175      {
;;;2176          png_unknown_chunk chunk;
;;;2177   
;;;2178   #ifdef PNG_MAX_MALLOC_64K
;;;2179          if (length > (png_uint_32)65535L)
;;;2180          {
;;;2181              png_warning(png_ptr, "unknown chunk too large to fit in memory");
;;;2182              skip = length - (png_uint_32)65535L;
;;;2183              length = (png_uint_32)65535L;
;;;2184          }
;;;2185   #endif
;;;2186          png_strcpy((png_charp)chunk.name, (png_charp)png_ptr->chunk_name);
002852  f5047117          ADD      r1,r4,#0x25c
002856  4668              MOV      r0,sp
002858  f7fffffe          BL       strcpy
;;;2187          chunk.data = (png_bytep)png_malloc(png_ptr, length);
00285c  4629              MOV      r1,r5
00285e  4620              MOV      r0,r4
002860  f7fffffe          BL       png_malloc
002864  9002              STR      r0,[sp,#8]
;;;2188          chunk.size = (png_size_t)length;
002866  9503              STR      r5,[sp,#0xc]
;;;2189          png_crc_read(png_ptr, (png_bytep)chunk.data, length);
002868  462a              MOV      r2,r5
00286a  4620              MOV      r0,r4
00286c  9902              LDR      r1,[sp,#8]
00286e  e103              B        |L1.10872|
                  |L1.10352|
002870  e135              B        |L1.10974|
002872  0000              DCW      0x0000
                  |L1.10356|
002874  496e7661          DCB      "Invalid sCAL data",0
002878  6c696420
00287c  7343414c
002880  20646174
002884  6100    
002886  00                DCB      0
002887  00                DCB      0
                  |L1.10376|
002888  4f757420          DCB      "Out of place tIME chunk",0
00288c  6f662070
002890  6c616365
002894  2074494d
002898  45206368
00289c  756e6b00
                  |L1.10400|
0028a0  4475706c          DCB      "Duplicate tIME chunk",0
0028a4  69636174
0028a8  65207449
0028ac  4d452063
0028b0  68756e6b
0028b4  00      
0028b5  00                DCB      0
0028b6  00                DCB      0
0028b7  00                DCB      0
                  |L1.10424|
0028b8  496e636f          DCB      "Incorrect tIME chunk length",0
0028bc  72726563
0028c0  74207449
0028c4  4d452063
0028c8  68756e6b
0028cc  206c656e
0028d0  67746800
                  |L1.10452|
0028d4  4d697373          DCB      "Missing IHDR before tEXt",0
0028d8  696e6720
0028dc  49484452
0028e0  20626566
0028e4  6f726520
0028e8  74455874
0028ec  00      
0028ed  00                DCB      0
0028ee  00                DCB      0
0028ef  00                DCB      0
                  |L1.10480|
0028f0  4e6f206d          DCB      "No memory to process text chunk.",0
0028f4  656d6f72
0028f8  7920746f
0028fc  2070726f
002900  63657373
002904  20746578
002908  74206368
00290c  756e6b2e
002910  00      
002911  00                DCB      0
002912  00                DCB      0
002913  00                DCB      0
                  |L1.10516|
002914  4e6f7420          DCB      "Not enough memory to process text chunk.",0
002918  656e6f75
00291c  6768206d
002920  656d6f72
002924  7920746f
002928  2070726f
00292c  63657373
002930  20746578
002934  74206368
002938  756e6b2e
00293c  00      
00293d  00                DCB      0
00293e  00                DCB      0
00293f  00                DCB      0
                  |L1.10560|
002940  496e7375          DCB      "Insufficient memory to process text chunk.",0
002944  66666963
002948  69656e74
00294c  206d656d
002950  6f727920
002954  746f2070
002958  726f6365
00295c  73732074
002960  65787420
002964  6368756e
002968  6b2e00  
00296b  00                DCB      0
                  |L1.10604|
00296c  4d697373          DCB      "Missing IHDR before zTXt",0
002970  696e6720
002974  49484452
002978  20626566
00297c  6f726520
002980  7a545874
002984  00      
002985  00                DCB      0
002986  00                DCB      0
002987  00                DCB      0
                  |L1.10632|
002988  4f757420          DCB      "Out of memory processing zTXt chunk.",0
00298c  6f66206d
002990  656d6f72
002994  79207072
002998  6f636573
00299c  73696e67
0029a0  207a5458
0029a4  74206368
0029a8  756e6b2e
0029ac  00      
0029ad  00                DCB      0
0029ae  00                DCB      0
0029af  00                DCB      0
                  |L1.10672|
0029b0  5a65726f          DCB      "Zero length zTXt chunk",0
0029b4  206c656e
0029b8  67746820
0029bc  7a545874
0029c0  20636875
0029c4  6e6b00  
0029c7  00                DCB      0
                  |L1.10696|
0029c8  556e6b6e          DCB      "Unknown compression type in zTXt chunk",0
0029cc  6f776e20
0029d0  636f6d70
0029d4  72657373
0029d8  696f6e20
0029dc  74797065
0029e0  20696e20
0029e4  7a545874
0029e8  20636875
0029ec  6e6b00  
0029ef  00                DCB      0
                  |L1.10736|
0029f0  4e6f7420          DCB      "Not enough memory to process zTXt chunk.",0
0029f4  656e6f75
0029f8  6768206d
0029fc  656d6f72
002a00  7920746f
002a04  2070726f
002a08  63657373
002a0c  207a5458
002a10  74206368
002a14  756e6b2e
002a18  00      
002a19  00                DCB      0
002a1a  00                DCB      0
002a1b  00                DCB      0
                  |L1.10780|
002a1c  496e7375          DCB      "Insufficient memory to store zTXt chunk.",0
002a20  66666963
002a24  69656e74
002a28  206d656d
002a2c  6f727920
002a30  746f2073
002a34  746f7265
002a38  207a5458
002a3c  74206368
002a40  756e6b2e
002a44  00      
002a45  00                DCB      0
002a46  00                DCB      0
002a47  00                DCB      0
                  |L1.10824|
002a48  696e7661          DCB      "invalid chunk type",0
002a4c  6c696420
002a50  6368756e
002a54  6b207479
002a58  706500  
002a5b  00                DCB      0
                  |L1.10844|
                          DCD      png_IDAT
                  |L1.10848|
002a60  756e6b6e          DCB      "unknown critical chunk",0
002a64  6f776e20
002a68  63726974
002a6c  6963616c
002a70  20636875
002a74  6e6b00  
002a77  00                DCB      0
                  |L1.10872|
002a78  f7fffffe          BL       png_crc_read
;;;2190   #if defined(PNG_READ_USER_CHUNKS_SUPPORTED)
;;;2191          if(png_ptr->read_user_chunk_fn != NULL)
002a7c  f8d40358          LDR      r0,[r4,#0x358]
002a80  b310              CBZ      r0,|L1.10952|
;;;2192          {
;;;2193             /* callback to user unknown chunk handler */
;;;2194             if ((*(png_ptr->read_user_chunk_fn)) (png_ptr, &chunk) <= 0)
002a82  4669              MOV      r1,sp
002a84  4620              MOV      r0,r4
002a86  f8d42358          LDR      r2,[r4,#0x358]
002a8a  4790              BLX      r2
002a8c  2800              CMP      r0,#0
002a8e  dc21              BGT      |L1.10964|
;;;2195             {
;;;2196                if (!(png_ptr->chunk_name[0] & 0x20))
002a90  f894025c          LDRB     r0,[r4,#0x25c]
002a94  f0000020          AND      r0,r0,#0x20
002a98  b978              CBNZ     r0,|L1.10938|
;;;2197                   if(png_handle_as_unknown(png_ptr, png_ptr->chunk_name) !=
002a9a  f5047117          ADD      r1,r4,#0x25c
002a9e  4620              MOV      r0,r4
002aa0  f7fffffe          BL       png_handle_as_unknown
002aa4  2803              CMP      r0,#3
002aa6  d008              BEQ      |L1.10938|
;;;2198                        PNG_HANDLE_CHUNK_ALWAYS)
;;;2199                    {
;;;2200                      png_free(png_ptr, chunk.data);
002aa8  4620              MOV      r0,r4
002aaa  9902              LDR      r1,[sp,#8]
002aac  f7fffffe          BL       png_free
;;;2201                      png_chunk_error(png_ptr, "unknown critical chunk");
002ab0  f2af0154          ADR      r1,|L1.10848|
002ab4  4620              MOV      r0,r4
002ab6  f7fffffe          BL       png_chunk_error
                  |L1.10938|
;;;2202                    }
;;;2203                png_set_unknown_chunks(png_ptr, info_ptr, &chunk, 1);
002aba  2301              MOVS     r3,#1
002abc  466a              MOV      r2,sp
002abe  4631              MOV      r1,r6
002ac0  4620              MOV      r0,r4
002ac2  f7fffffe          BL       png_set_unknown_chunks
002ac6  e005              B        |L1.10964|
                  |L1.10952|
;;;2204             }
;;;2205          }
;;;2206          else
;;;2207   #endif
;;;2208             png_set_unknown_chunks(png_ptr, info_ptr, &chunk, 1);
002ac8  2301              MOVS     r3,#1
002aca  466a              MOV      r2,sp
002acc  4631              MOV      r1,r6
002ace  4620              MOV      r0,r4
002ad0  f7fffffe          BL       png_set_unknown_chunks
                  |L1.10964|
;;;2209          png_free(png_ptr, chunk.data);
002ad4  4620              MOV      r0,r4
002ad6  9902              LDR      r1,[sp,#8]
002ad8  f7fffffe          BL       png_free
;;;2210      }
002adc  e000              B        |L1.10976|
                  |L1.10974|
;;;2211      else
;;;2212   #endif
;;;2213         skip = length;
002ade  462f              MOV      r7,r5
                  |L1.10976|
;;;2214   
;;;2215      png_crc_finish(png_ptr, skip);
002ae0  4639              MOV      r1,r7
002ae2  4620              MOV      r0,r4
002ae4  f7fffffe          BL       png_crc_finish
;;;2216   
;;;2217   #if !defined(PNG_READ_USER_CHUNKS_SUPPORTED)
;;;2218      if (&info_ptr == NULL) /* quiet compiler warnings about unused info_ptr */
;;;2219         return;
;;;2220   #endif
;;;2221   }
002ae8  b005              ADD      sp,sp,#0x14
002aea  bdf0              POP      {r4-r7,pc}
;;;2222   
                          ENDP

                  png_combine_row PROC
;;;2253   void /* PRIVATE */
;;;2254   png_combine_row(png_structp png_ptr, png_bytep row, int mask)
002aec  e92d5ffc          PUSH     {r2-r12,lr}
;;;2255   {
002af0  4604              MOV      r4,r0
002af2  460d              MOV      r5,r1
002af4  4616              MOV      r6,r2
;;;2256      png_debug(1,"in png_combine_row\n");
;;;2257      if (mask == 0xff)
002af6  2eff              CMP      r6,#0xff
002af8  d11c              BNE      |L1.11060|
;;;2258      {
;;;2259         png_memcpy(row, png_ptr->row_buf + 1,
002afa  f240204b          MOV      r0,#0x24b
002afe  5d00              LDRB     r0,[r0,r4]
002b00  2808              CMP      r0,#8
002b02  db07              BLT      |L1.11028|
;;;2260            PNG_ROWBYTES(png_ptr->row_info.pixel_depth, png_ptr->width));
002b04  f240234b          MOV      r3,#0x24b
002b08  5d1b              LDRB     r3,[r3,r4]
002b0a  08db              LSRS     r3,r3,#3
002b0c  f8d40208          LDR      r0,[r4,#0x208]
002b10  4358              MULS     r0,r3,r0
002b12  e007              B        |L1.11044|
                  |L1.11028|
002b14  f240234b          MOV      r3,#0x24b
002b18  5d1b              LDRB     r3,[r3,r4]
002b1a  f8d40208          LDR      r0,[r4,#0x208]
002b1e  4358              MULS     r0,r3,r0
002b20  1dc0              ADDS     r0,r0,#7
002b22  08c0              LSRS     r0,r0,#3
                  |L1.11044|
002b24  4602              MOV      r2,r0
002b26  f8d4022c          LDR      r0,[r4,#0x22c]
002b2a  1c41              ADDS     r1,r0,#1
002b2c  4628              MOV      r0,r5
002b2e  f7fffffe          BL       __aeabi_memcpy
002b32  e13e              B        |L1.11698|
                  |L1.11060|
;;;2261      }
;;;2262      else
;;;2263      {
;;;2264         switch (png_ptr->row_info.pixel_depth)
002b34  f240204b          MOV      r0,#0x24b
002b38  5d00              LDRB     r0,[r0,r4]
002b3a  2801              CMP      r0,#1
002b3c  d004              BEQ      |L1.11080|
002b3e  2802              CMP      r0,#2
002b40  d05c              BEQ      |L1.11260|
002b42  2804              CMP      r0,#4
002b44  d170              BNE      |L1.11304|
002b46  e0b3              B        |L1.11440|
                  |L1.11080|
;;;2265         {
;;;2266            case 1:
;;;2267            {
;;;2268               png_bytep sp = png_ptr->row_buf + 1;
002b48  f8d4a22c          LDR      r10,[r4,#0x22c]
002b4c  f10a0901          ADD      r9,r10,#1
;;;2269               png_bytep dp = row;
002b50  4629              MOV      r1,r5
;;;2270               int s_inc, s_start, s_end;
;;;2271               int m = 0x80;
002b52  f04f0c80          MOV      r12,#0x80
;;;2272               int shift;
;;;2273               png_uint_32 i;
;;;2274               png_uint_32 row_width = png_ptr->width;
002b56  f8d4a208          LDR      r10,[r4,#0x208]
002b5a  f8cda004          STR      r10,[sp,#4]
;;;2275   
;;;2276   #if defined(PNG_READ_PACKSWAP_SUPPORTED)
;;;2277               if (png_ptr->transformations & PNG_PACKSWAP)
002b5e  f8d4a1b0          LDR      r10,[r4,#0x1b0]
002b62  f40a3a80          AND      r10,r10,#0x10000
002b66  f1ba0f00          CMP      r10,#0
002b6a  d003              BEQ      |L1.11124|
;;;2278               {
;;;2279                   s_start = 0;
002b6c  2200              MOVS     r2,#0
;;;2280                   s_end = 7;
002b6e  2707              MOVS     r7,#7
;;;2281                   s_inc = 1;
002b70  2301              MOVS     r3,#1
002b72  e002              B        |L1.11130|
                  |L1.11124|
;;;2282               }
;;;2283               else
;;;2284   #endif
;;;2285               {
;;;2286                   s_start = 7;
002b74  2207              MOVS     r2,#7
;;;2287                   s_end = 0;
002b76  2700              MOVS     r7,#0
;;;2288                   s_inc = -1;
002b78  1e7b              SUBS     r3,r7,#1
                  |L1.11130|
;;;2289               }
;;;2290   
;;;2291               shift = s_start;
002b7a  4610              MOV      r0,r2
;;;2292   
;;;2293               for (i = 0; i < row_width; i++)
002b7c  f04f0800          MOV      r8,#0
002b80  e037              B        |L1.11250|
                  |L1.11138|
;;;2294               {
;;;2295                  if (m & mask)
002b82  ea0c0a06          AND      r10,r12,r6
002b86  f1ba0f00          CMP      r10,#0
002b8a  d020              BEQ      |L1.11214|
;;;2296                  {
;;;2297                     int value;
;;;2298   
;;;2299                     value = (*sp >> shift) & 0x01;
002b8c  f899a000          LDRB     r10,[r9,#0]
002b90  fa4afa00          ASR      r10,r10,r0
002b94  f00a0a01          AND      r10,r10,#1
002b98  f8cda000          STR      r10,[sp,#0]
;;;2300                     *dp &= (png_byte)((0x7f7f >> (7 - shift)) & 0xff);
002b9c  f891a000          LDRB     r10,[r1,#0]
002ba0  f1c00e07          RSB      lr,r0,#7
002ba4  f6477b7f          MOV      r11,#0x7f7f
002ba8  fa4bfb0e          ASR      r11,r11,lr
002bac  ea0a0a0b          AND      r10,r10,r11
002bb0  f881a000          STRB     r10,[r1,#0]
;;;2301                     *dp |= (png_byte)(value << shift);
002bb4  f891b000          LDRB     r11,[r1,#0]
002bb8  f8dda000          LDR      r10,[sp,#0]
002bbc  fa0afa00          LSL      r10,r10,r0
002bc0  f00a0aff          AND      r10,r10,#0xff
002bc4  ea4b0b0a          ORR      r11,r11,r10
002bc8  f881b000          STRB     r11,[r1,#0]
;;;2302                  }
002bcc  bf00              NOP      
                  |L1.11214|
;;;2303   
;;;2304                  if (shift == s_end)
002bce  42b8              CMP      r0,r7
002bd0  d104              BNE      |L1.11228|
;;;2305                  {
;;;2306                     shift = s_start;
002bd2  4610              MOV      r0,r2
;;;2307                     sp++;
002bd4  f1090901          ADD      r9,r9,#1
;;;2308                     dp++;
002bd8  1c49              ADDS     r1,r1,#1
002bda  e000              B        |L1.11230|
                  |L1.11228|
;;;2309                  }
;;;2310                  else
;;;2311                     shift += s_inc;
002bdc  4418              ADD      r0,r0,r3
                  |L1.11230|
;;;2312   
;;;2313                  if (m == 1)
002bde  f1bc0f01          CMP      r12,#1
002be2  d102              BNE      |L1.11242|
;;;2314                     m = 0x80;
002be4  f04f0c80          MOV      r12,#0x80
002be8  e001              B        |L1.11246|
                  |L1.11242|
;;;2315                  else
;;;2316                     m >>= 1;
002bea  ea4f0c6c          ASR      r12,r12,#1
                  |L1.11246|
002bee  f1080801          ADD      r8,r8,#1              ;2293
                  |L1.11250|
002bf2  f8dda004          LDR      r10,[sp,#4]           ;2293
002bf6  45d0              CMP      r8,r10                ;2293
002bf8  d3c3              BCC      |L1.11138|
;;;2317               }
;;;2318               break;
002bfa  e0d9              B        |L1.11696|
                  |L1.11260|
;;;2319            }
;;;2320            case 2:
;;;2321            {
;;;2322               png_bytep sp = png_ptr->row_buf + 1;
002bfc  f8d4a22c          LDR      r10,[r4,#0x22c]
002c00  f10a0901          ADD      r9,r10,#1
;;;2323               png_bytep dp = row;
002c04  4629              MOV      r1,r5
;;;2324               int s_start, s_end, s_inc;
;;;2325               int m = 0x80;
002c06  f04f0c80          MOV      r12,#0x80
;;;2326               int shift;
;;;2327               png_uint_32 i;
;;;2328               png_uint_32 row_width = png_ptr->width;
002c0a  f8d4a208          LDR      r10,[r4,#0x208]
002c0e  f8cda004          STR      r10,[sp,#4]
;;;2329               int value;
;;;2330   
;;;2331   #if defined(PNG_READ_PACKSWAP_SUPPORTED)
;;;2332               if (png_ptr->transformations & PNG_PACKSWAP)
002c12  f8d4a1b0          LDR      r10,[r4,#0x1b0]
002c16  f40a3a80          AND      r10,r10,#0x10000
002c1a  f1ba0f00          CMP      r10,#0
002c1e  d004              BEQ      |L1.11306|
;;;2333               {
;;;2334                  s_start = 0;
002c20  2200              MOVS     r2,#0
;;;2335                  s_end = 6;
002c22  2306              MOVS     r3,#6
;;;2336                  s_inc = 2;
002c24  2702              MOVS     r7,#2
002c26  e003              B        |L1.11312|
                  |L1.11304|
002c28  e099              B        |L1.11614|
                  |L1.11306|
;;;2337               }
;;;2338               else
;;;2339   #endif
;;;2340               {
;;;2341                  s_start = 6;
002c2a  2206              MOVS     r2,#6
;;;2342                  s_end = 0;
002c2c  2300              MOVS     r3,#0
;;;2343                  s_inc = -2;
002c2e  1e9f              SUBS     r7,r3,#2
                  |L1.11312|
;;;2344               }
;;;2345   
;;;2346               shift = s_start;
002c30  4610              MOV      r0,r2
;;;2347   
;;;2348               for (i = 0; i < row_width; i++)
002c32  f04f0800          MOV      r8,#0
002c36  e036              B        |L1.11430|
                  |L1.11320|
;;;2349               {
;;;2350                  if (m & mask)
002c38  ea0c0a06          AND      r10,r12,r6
002c3c  f1ba0f00          CMP      r10,#0
002c40  d01f              BEQ      |L1.11394|
;;;2351                  {
;;;2352                     value = (*sp >> shift) & 0x03;
002c42  f899a000          LDRB     r10,[r9,#0]
002c46  fa4afa00          ASR      r10,r10,r0
002c4a  f00a0a03          AND      r10,r10,#3
002c4e  f8cda000          STR      r10,[sp,#0]
;;;2353                     *dp &= (png_byte)((0x3f3f >> (6 - shift)) & 0xff);
002c52  f891a000          LDRB     r10,[r1,#0]
002c56  f1c00e06          RSB      lr,r0,#6
002c5a  f6437b3f          MOV      r11,#0x3f3f
002c5e  fa4bfb0e          ASR      r11,r11,lr
002c62  ea0a0a0b          AND      r10,r10,r11
002c66  f881a000          STRB     r10,[r1,#0]
;;;2354                     *dp |= (png_byte)(value << shift);
002c6a  f891b000          LDRB     r11,[r1,#0]
002c6e  f8dda000          LDR      r10,[sp,#0]
002c72  fa0afa00          LSL      r10,r10,r0
002c76  f00a0aff          AND      r10,r10,#0xff
002c7a  ea4b0b0a          ORR      r11,r11,r10
002c7e  f881b000          STRB     r11,[r1,#0]
                  |L1.11394|
;;;2355                  }
;;;2356   
;;;2357                  if (shift == s_end)
002c82  4298              CMP      r0,r3
002c84  d104              BNE      |L1.11408|
;;;2358                  {
;;;2359                     shift = s_start;
002c86  4610              MOV      r0,r2
;;;2360                     sp++;
002c88  f1090901          ADD      r9,r9,#1
;;;2361                     dp++;
002c8c  1c49              ADDS     r1,r1,#1
002c8e  e000              B        |L1.11410|
                  |L1.11408|
;;;2362                  }
;;;2363                  else
;;;2364                     shift += s_inc;
002c90  4438              ADD      r0,r0,r7
                  |L1.11410|
;;;2365                  if (m == 1)
002c92  f1bc0f01          CMP      r12,#1
002c96  d102              BNE      |L1.11422|
;;;2366                     m = 0x80;
002c98  f04f0c80          MOV      r12,#0x80
002c9c  e001              B        |L1.11426|
                  |L1.11422|
;;;2367                  else
;;;2368                     m >>= 1;
002c9e  ea4f0c6c          ASR      r12,r12,#1
                  |L1.11426|
002ca2  f1080801          ADD      r8,r8,#1              ;2348
                  |L1.11430|
002ca6  f8dda004          LDR      r10,[sp,#4]           ;2348
002caa  45d0              CMP      r8,r10                ;2348
002cac  d3c4              BCC      |L1.11320|
;;;2369               }
;;;2370               break;
002cae  e07f              B        |L1.11696|
                  |L1.11440|
;;;2371            }
;;;2372            case 4:
;;;2373            {
;;;2374               png_bytep sp = png_ptr->row_buf + 1;
002cb0  f8d4a22c          LDR      r10,[r4,#0x22c]
002cb4  f10a0901          ADD      r9,r10,#1
;;;2375               png_bytep dp = row;
002cb8  4629              MOV      r1,r5
;;;2376               int s_start, s_end, s_inc;
;;;2377               int m = 0x80;
002cba  2780              MOVS     r7,#0x80
;;;2378               int shift;
;;;2379               png_uint_32 i;
;;;2380               png_uint_32 row_width = png_ptr->width;
002cbc  f8d4a208          LDR      r10,[r4,#0x208]
002cc0  f8cda004          STR      r10,[sp,#4]
;;;2381               int value;
;;;2382   
;;;2383   #if defined(PNG_READ_PACKSWAP_SUPPORTED)
;;;2384               if (png_ptr->transformations & PNG_PACKSWAP)
002cc4  f8d4a1b0          LDR      r10,[r4,#0x1b0]
002cc8  f40a3a80          AND      r10,r10,#0x10000
002ccc  f1ba0f00          CMP      r10,#0
002cd0  d004              BEQ      |L1.11484|
;;;2385               {
;;;2386                  s_start = 0;
002cd2  2200              MOVS     r2,#0
;;;2387                  s_end = 4;
002cd4  2304              MOVS     r3,#4
;;;2388                  s_inc = 4;
002cd6  f04f0c04          MOV      r12,#4
002cda  e003              B        |L1.11492|
                  |L1.11484|
;;;2389               }
;;;2390               else
;;;2391   #endif
;;;2392               {
;;;2393                  s_start = 4;
002cdc  2204              MOVS     r2,#4
;;;2394                  s_end = 0;
002cde  2300              MOVS     r3,#0
;;;2395                  s_inc = -4;
002ce0  f06f0c03          MVN      r12,#3
                  |L1.11492|
;;;2396               }
;;;2397               shift = s_start;
002ce4  4610              MOV      r0,r2
;;;2398   
;;;2399               for (i = 0; i < row_width; i++)
002ce6  f04f0800          MOV      r8,#0
002cea  e033              B        |L1.11604|
                  |L1.11500|
;;;2400               {
;;;2401                  if (m & mask)
002cec  ea070a06          AND      r10,r7,r6
002cf0  f1ba0f00          CMP      r10,#0
002cf4  d01f              BEQ      |L1.11574|
;;;2402                  {
;;;2403                     value = (*sp >> shift) & 0xf;
002cf6  f899a000          LDRB     r10,[r9,#0]
002cfa  fa4afa00          ASR      r10,r10,r0
002cfe  f00a0a0f          AND      r10,r10,#0xf
002d02  f8cda000          STR      r10,[sp,#0]
;;;2404                     *dp &= (png_byte)((0xf0f >> (4 - shift)) & 0xff);
002d06  f891a000          LDRB     r10,[r1,#0]
002d0a  f1c00e04          RSB      lr,r0,#4
002d0e  f6407b0f          MOV      r11,#0xf0f
002d12  fa4bfb0e          ASR      r11,r11,lr
002d16  ea0a0a0b          AND      r10,r10,r11
002d1a  f881a000          STRB     r10,[r1,#0]
;;;2405                     *dp |= (png_byte)(value << shift);
002d1e  f891b000          LDRB     r11,[r1,#0]
002d22  f8dda000          LDR      r10,[sp,#0]
002d26  fa0afa00          LSL      r10,r10,r0
002d2a  f00a0aff          AND      r10,r10,#0xff
002d2e  ea4b0b0a          ORR      r11,r11,r10
002d32  f881b000          STRB     r11,[r1,#0]
                  |L1.11574|
;;;2406                  }
;;;2407   
;;;2408                  if (shift == s_end)
002d36  4298              CMP      r0,r3
002d38  d104              BNE      |L1.11588|
;;;2409                  {
;;;2410                     shift = s_start;
002d3a  4610              MOV      r0,r2
;;;2411                     sp++;
002d3c  f1090901          ADD      r9,r9,#1
;;;2412                     dp++;
002d40  1c49              ADDS     r1,r1,#1
002d42  e000              B        |L1.11590|
                  |L1.11588|
;;;2413                  }
;;;2414                  else
;;;2415                     shift += s_inc;
002d44  4460              ADD      r0,r0,r12
                  |L1.11590|
;;;2416                  if (m == 1)
002d46  2f01              CMP      r7,#1
002d48  d101              BNE      |L1.11598|
;;;2417                     m = 0x80;
002d4a  2780              MOVS     r7,#0x80
002d4c  e000              B        |L1.11600|
                  |L1.11598|
;;;2418                  else
;;;2419                     m >>= 1;
002d4e  107f              ASRS     r7,r7,#1
                  |L1.11600|
002d50  f1080801          ADD      r8,r8,#1              ;2399
                  |L1.11604|
002d54  f8dda004          LDR      r10,[sp,#4]           ;2399
002d58  45d0              CMP      r8,r10                ;2399
002d5a  d3c7              BCC      |L1.11500|
;;;2420               }
;;;2421               break;
002d5c  e028              B        |L1.11696|
                  |L1.11614|
;;;2422            }
;;;2423            default:
;;;2424            {
;;;2425               png_bytep sp = png_ptr->row_buf + 1;
002d5e  f8d4022c          LDR      r0,[r4,#0x22c]
002d62  f1000901          ADD      r9,r0,#1
;;;2426               png_bytep dp = row;
002d66  46aa              MOV      r10,r5
;;;2427               png_size_t pixel_bytes = (png_ptr->row_info.pixel_depth >> 3);
002d68  f240204b          MOV      r0,#0x24b
002d6c  5d00              LDRB     r0,[r0,r4]
002d6e  10c7              ASRS     r7,r0,#3
;;;2428               png_uint_32 i;
;;;2429               png_uint_32 row_width = png_ptr->width;
002d70  f8d40208          LDR      r0,[r4,#0x208]
002d74  9001              STR      r0,[sp,#4]
;;;2430               png_byte m = 0x80;
002d76  f04f0880          MOV      r8,#0x80
;;;2431   
;;;2432   
;;;2433               for (i = 0; i < row_width; i++)
002d7a  f04f0b00          MOV      r11,#0
002d7e  e013              B        |L1.11688|
                  |L1.11648|
;;;2434               {
;;;2435                  if (m & mask)
002d80  ea080006          AND      r0,r8,r6
002d84  b120              CBZ      r0,|L1.11664|
;;;2436                  {
;;;2437                     png_memcpy(dp, sp, pixel_bytes);
002d86  463a              MOV      r2,r7
002d88  4649              MOV      r1,r9
002d8a  4650              MOV      r0,r10
002d8c  f7fffffe          BL       __aeabi_memcpy
                  |L1.11664|
;;;2438                  }
;;;2439   
;;;2440                  sp += pixel_bytes;
002d90  44b9              ADD      r9,r9,r7
;;;2441                  dp += pixel_bytes;
002d92  44ba              ADD      r10,r10,r7
;;;2442   
;;;2443                  if (m == 1)
002d94  f1b80f01          CMP      r8,#1
002d98  d102              BNE      |L1.11680|
;;;2444                     m = 0x80;
002d9a  f04f0880          MOV      r8,#0x80
002d9e  e001              B        |L1.11684|
                  |L1.11680|
;;;2445                  else
;;;2446                     m >>= 1;
002da0  ea4f0868          ASR      r8,r8,#1
                  |L1.11684|
002da4  f10b0b01          ADD      r11,r11,#1            ;2433
                  |L1.11688|
002da8  9801              LDR      r0,[sp,#4]            ;2433
002daa  4583              CMP      r11,r0                ;2433
002dac  d3e8              BCC      |L1.11648|
;;;2447               }
;;;2448               break;
002dae  bf00              NOP      
                  |L1.11696|
002db0  bf00              NOP                            ;2318
                  |L1.11698|
;;;2449            }
;;;2450         }
;;;2451      }
;;;2452   }
002db2  e8bd9ffc          POP      {r2-r12,pc}
;;;2453   #endif /* !PNG_HAVE_MMX_COMBINE_ROW */
                          ENDP

                  png_do_read_interlace PROC
;;;2461   void /* PRIVATE */
;;;2462   png_do_read_interlace(png_structp png_ptr)
002db6  e92d4ff0          PUSH     {r4-r11,lr}
;;;2463   {
002dba  b087              SUB      sp,sp,#0x1c
002dbc  4607              MOV      r7,r0
;;;2464      png_row_infop row_info = &(png_ptr->row_info);
002dbe  f5077410          ADD      r4,r7,#0x240
;;;2465      png_bytep row = png_ptr->row_buf + 1;
002dc2  f8d7022c          LDR      r0,[r7,#0x22c]
002dc6  1c46              ADDS     r6,r0,#1
;;;2466      int pass = png_ptr->pass;
002dc8  f8978264          LDRB     r8,[r7,#0x264]
;;;2467      png_uint_32 transformations = png_ptr->transformations;
002dcc  f8d701b0          LDR      r0,[r7,#0x1b0]
002dd0  9006              STR      r0,[sp,#0x18]
;;;2468   #ifdef PNG_USE_LOCAL_ARRAYS
;;;2469      /* arrays to facilitate easy interlacing - use pass (0 - 6) as index */
;;;2470      /* offset to next interlace block */
;;;2471      const int png_pass_inc[7] = {8, 8, 4, 4, 2, 2, 1};
;;;2472   #endif
;;;2473   
;;;2474      png_debug(1,"in png_do_read_interlace (stock C version)\n");
;;;2475      if (row != NULL && row_info != NULL)
002dd2  2e00              CMP      r6,#0
                  |L1.11732|
002dd4  d07c              BEQ      |L1.11984|
002dd6  2c00              CMP      r4,#0
002dd8  d0fc              BEQ      |L1.11732|
;;;2476      {
;;;2477         png_uint_32 final_width;
;;;2478   
;;;2479         final_width = row_info->width * png_pass_inc[pass];
002dda  49f8              LDR      r1,|L1.12732|
002ddc  f8511028          LDR      r1,[r1,r8,LSL #2]
002de0  6820              LDR      r0,[r4,#0]
002de2  fb00f501          MUL      r5,r0,r1
;;;2480   
;;;2481         switch (row_info->pixel_depth)
002de6  7ae0              LDRB     r0,[r4,#0xb]
002de8  2801              CMP      r0,#1
002dea  d004              BEQ      |L1.11766|
002dec  2802              CMP      r0,#2
002dee  d070              BEQ      |L1.11986|
002df0  2804              CMP      r0,#4
002df2  d16f              BNE      |L1.11988|
002df4  e12e              B        |L1.12372|
                  |L1.11766|
;;;2482         {
;;;2483            case 1:
;;;2484            {
;;;2485               png_bytep sp = row + (png_size_t)((row_info->width - 1) >> 3);
002df6  f8d4a000          LDR      r10,[r4,#0]
002dfa  f1aa0a01          SUB      r10,r10,#1
002dfe  eb060ada          ADD      r10,r6,r10,LSR #3
002e02  f8cda014          STR      r10,[sp,#0x14]
;;;2486               png_bytep dp = row + (png_size_t)((final_width - 1) >> 3);
002e06  f1a50a01          SUB      r10,r5,#1
002e0a  eb0601da          ADD      r1,r6,r10,LSR #3
;;;2487               int sshift, dshift;
;;;2488               int s_start, s_end, s_inc;
;;;2489               int jstop = png_pass_inc[pass];
002e0e  f8dfa3ac          LDR      r10,|L1.12732|
002e12  f85aa028          LDR      r10,[r10,r8,LSL #2]
002e16  f8cda010          STR      r10,[sp,#0x10]
;;;2490               png_byte v;
;;;2491               png_uint_32 i;
;;;2492               int j;
;;;2493   
;;;2494   #if defined(PNG_READ_PACKSWAP_SUPPORTED)
;;;2495               if (transformations & PNG_PACKSWAP)
002e1a  f8dda018          LDR      r10,[sp,#0x18]
002e1e  f40a3a80          AND      r10,r10,#0x10000
002e22  f1ba0f00          CMP      r10,#0
002e26  d00f              BEQ      |L1.11848|
;;;2496               {
;;;2497                   sshift = (int)((row_info->width + 7) & 0x07);
002e28  f894a000          LDRB     r10,[r4,#0]
002e2c  f10a0a07          ADD      r10,r10,#7
002e30  f00a0207          AND      r2,r10,#7
;;;2498                   dshift = (int)((final_width + 7) & 0x07);
002e34  f1050a07          ADD      r10,r5,#7
002e38  f00a0007          AND      r0,r10,#7
;;;2499                   s_start = 7;
002e3c  2307              MOVS     r3,#7
;;;2500                   s_end = 0;
002e3e  f04f0c00          MOV      r12,#0
;;;2501                   s_inc = -1;
002e42  f04f39ff          MOV      r9,#0xffffffff
002e46  e012              B        |L1.11886|
                  |L1.11848|
;;;2502               }
;;;2503               else
;;;2504   #endif
;;;2505               {
;;;2506                   sshift = 7 - (int)((row_info->width + 7) & 0x07);
002e48  f894a000          LDRB     r10,[r4,#0]
002e4c  f10a0a07          ADD      r10,r10,#7
002e50  f00a0a07          AND      r10,r10,#7
002e54  f1ca0207          RSB      r2,r10,#7
;;;2507                   dshift = 7 - (int)((final_width + 7) & 0x07);
002e58  f1050a07          ADD      r10,r5,#7
002e5c  f00a0a07          AND      r10,r10,#7
002e60  f1ca0007          RSB      r0,r10,#7
;;;2508                   s_start = 0;
002e64  2300              MOVS     r3,#0
;;;2509                   s_end = 7;
002e66  f04f0c07          MOV      r12,#7
;;;2510                   s_inc = 1;
002e6a  f04f0901          MOV      r9,#1
                  |L1.11886|
;;;2511               }
;;;2512   
;;;2513               for (i = 0; i < row_info->width; i++)
002e6e  f04f0a00          MOV      r10,#0
002e72  f8cda008          STR      r10,[sp,#8]
002e76  e04c              B        |L1.12050|
                  |L1.11896|
;;;2514               {
;;;2515                  v = (png_byte)((*sp >> sshift) & 0x01);
002e78  f8dda014          LDR      r10,[sp,#0x14]
002e7c  f89aa000          LDRB     r10,[r10,#0]
002e80  fa4afa02          ASR      r10,r10,r2
002e84  f00a0a01          AND      r10,r10,#1
002e88  f8cda00c          STR      r10,[sp,#0xc]
;;;2516                  for (j = 0; j < jstop; j++)
002e8c  f04f0a00          MOV      r10,#0
002e90  f8cda004          STR      r10,[sp,#4]
002e94  e026              B        |L1.12004|
                  |L1.11926|
;;;2517                  {
;;;2518                     *dp &= (png_byte)((0x7f7f >> (7 - dshift)) & 0xff);
002e96  f891a000          LDRB     r10,[r1,#0]
002e9a  f1c00e07          RSB      lr,r0,#7
002e9e  f6477b7f          MOV      r11,#0x7f7f
002ea2  fa4bfb0e          ASR      r11,r11,lr
002ea6  ea0a0a0b          AND      r10,r10,r11
002eaa  f881a000          STRB     r10,[r1,#0]
;;;2519                     *dp |= (png_byte)(v << dshift);
002eae  f891b000          LDRB     r11,[r1,#0]
002eb2  f8dda00c          LDR      r10,[sp,#0xc]
002eb6  fa0afa00          LSL      r10,r10,r0
002eba  f00a0aff          AND      r10,r10,#0xff
002ebe  ea4b0b0a          ORR      r11,r11,r10
002ec2  f881b000          STRB     r11,[r1,#0]
;;;2520                     if (dshift == s_end)
002ec6  4560              CMP      r0,r12
002ec8  d105              BNE      |L1.11990|
;;;2521                     {
;;;2522                        dshift = s_start;
002eca  4618              MOV      r0,r3
;;;2523                        dp--;
002ecc  1e49              SUBS     r1,r1,#1
002ece  e003              B        |L1.11992|
                  |L1.11984|
002ed0  e19d              B        |L1.12814|
                  |L1.11986|
002ed2  e025              B        |L1.12064|
                  |L1.11988|
002ed4  e158              B        |L1.12680|
                  |L1.11990|
;;;2524                     }
;;;2525                     else
;;;2526                        dshift += s_inc;
002ed6  4448              ADD      r0,r0,r9
                  |L1.11992|
002ed8  f8dda004          LDR      r10,[sp,#4]           ;2516
002edc  f10a0a01          ADD      r10,r10,#1            ;2516
002ee0  f8cda004          STR      r10,[sp,#4]           ;2516
                  |L1.12004|
002ee4  f8ddb010          LDR      r11,[sp,#0x10]        ;2516
002ee8  f8dda004          LDR      r10,[sp,#4]           ;2516
002eec  45da              CMP      r10,r11               ;2516
002eee  dbd2              BLT      |L1.11926|
;;;2527                  }
;;;2528                  if (sshift == s_end)
002ef0  4562              CMP      r2,r12
002ef2  d107              BNE      |L1.12036|
;;;2529                  {
;;;2530                     sshift = s_start;
002ef4  461a              MOV      r2,r3
;;;2531                     sp--;
002ef6  f8dda014          LDR      r10,[sp,#0x14]
002efa  f1aa0a01          SUB      r10,r10,#1
002efe  f8cda014          STR      r10,[sp,#0x14]
002f02  e000              B        |L1.12038|
                  |L1.12036|
;;;2532                  }
;;;2533                  else
;;;2534                     sshift += s_inc;
002f04  444a              ADD      r2,r2,r9
                  |L1.12038|
002f06  f8dda008          LDR      r10,[sp,#8]           ;2513
002f0a  f10a0a01          ADD      r10,r10,#1            ;2513
002f0e  f8cda008          STR      r10,[sp,#8]           ;2513
                  |L1.12050|
002f12  f8d4b000          LDR      r11,[r4,#0]           ;2513
002f16  f8dda008          LDR      r10,[sp,#8]           ;2513
002f1a  45d3              CMP      r11,r10               ;2513
002f1c  d8ac              BHI      |L1.11896|
;;;2535               }
;;;2536               break;
002f1e  e167              B        |L1.12784|
                  |L1.12064|
;;;2537            }
;;;2538            case 2:
;;;2539            {
;;;2540               png_bytep sp = row + (png_uint_32)((row_info->width - 1) >> 2);
002f20  f8d4a000          LDR      r10,[r4,#0]
002f24  f1aa0a01          SUB      r10,r10,#1
002f28  eb060a9a          ADD      r10,r6,r10,LSR #2
002f2c  f8cda014          STR      r10,[sp,#0x14]
;;;2541               png_bytep dp = row + (png_uint_32)((final_width - 1) >> 2);
002f30  f1a50a01          SUB      r10,r5,#1
002f34  eb06019a          ADD      r1,r6,r10,LSR #2
;;;2542               int sshift, dshift;
;;;2543               int s_start, s_end, s_inc;
;;;2544               int jstop = png_pass_inc[pass];
002f38  f8dfa280          LDR      r10,|L1.12732|
002f3c  f85aa028          LDR      r10,[r10,r8,LSL #2]
002f40  f8cda010          STR      r10,[sp,#0x10]
;;;2545               png_uint_32 i;
;;;2546   
;;;2547   #if defined(PNG_READ_PACKSWAP_SUPPORTED)
;;;2548               if (transformations & PNG_PACKSWAP)
002f44  f8dda018          LDR      r10,[sp,#0x18]
002f48  f40a3a80          AND      r10,r10,#0x10000
002f4c  f1ba0f00          CMP      r10,#0
002f50  d013              BEQ      |L1.12154|
;;;2549               {
;;;2550                  sshift = (int)(((row_info->width + 3) & 0x03) << 1);
002f52  f894a000          LDRB     r10,[r4,#0]
002f56  f10a0a03          ADD      r10,r10,#3
002f5a  ea4f7a8a          LSL      r10,r10,#30
002f5e  ea4f725a          LSR      r2,r10,#29
;;;2551                  dshift = (int)(((final_width + 3) & 0x03) << 1);
002f62  f1050a03          ADD      r10,r5,#3
002f66  ea4f7a8a          LSL      r10,r10,#30
002f6a  ea4f705a          LSR      r0,r10,#29
;;;2552                  s_start = 6;
002f6e  2306              MOVS     r3,#6
;;;2553                  s_end = 0;
002f70  f04f0c00          MOV      r12,#0
;;;2554                  s_inc = -2;
002f74  f06f0901          MVN      r9,#1
002f78  e016              B        |L1.12200|
                  |L1.12154|
;;;2555               }
;;;2556               else
;;;2557   #endif
;;;2558               {
;;;2559                  sshift = (int)((3 - ((row_info->width + 3) & 0x03)) << 1);
002f7a  f894a000          LDRB     r10,[r4,#0]
002f7e  f10a0a03          ADD      r10,r10,#3
002f82  f00a0a03          AND      r10,r10,#3
002f86  f1ca0a03          RSB      r10,r10,#3
002f8a  ea4f024a          LSL      r2,r10,#1
;;;2560                  dshift = (int)((3 - ((final_width + 3) & 0x03)) << 1);
002f8e  f1050a03          ADD      r10,r5,#3
002f92  f00a0a03          AND      r10,r10,#3
002f96  f1ca0a03          RSB      r10,r10,#3
002f9a  ea4f004a          LSL      r0,r10,#1
;;;2561                  s_start = 0;
002f9e  2300              MOVS     r3,#0
;;;2562                  s_end = 6;
002fa0  f04f0c06          MOV      r12,#6
;;;2563                  s_inc = 2;
002fa4  f04f0902          MOV      r9,#2
                  |L1.12200|
;;;2564               }
;;;2565   
;;;2566               for (i = 0; i < row_info->width; i++)
002fa8  f04f0a00          MOV      r10,#0
002fac  f8cda00c          STR      r10,[sp,#0xc]
002fb0  e049              B        |L1.12358|
                  |L1.12210|
;;;2567               {
;;;2568                  png_byte v;
;;;2569                  int j;
;;;2570   
;;;2571                  v = (png_byte)((*sp >> sshift) & 0x03);
002fb2  f8dda014          LDR      r10,[sp,#0x14]
002fb6  f89aa000          LDRB     r10,[r10,#0]
002fba  fa4afa02          ASR      r10,r10,r2
002fbe  f00a0a03          AND      r10,r10,#3
002fc2  f8cda008          STR      r10,[sp,#8]
;;;2572                  for (j = 0; j < jstop; j++)
002fc6  f04f0a00          MOV      r10,#0
002fca  f8cda004          STR      r10,[sp,#4]
002fce  e023              B        |L1.12312|
                  |L1.12240|
;;;2573                  {
;;;2574                     *dp &= (png_byte)((0x3f3f >> (6 - dshift)) & 0xff);
002fd0  f891a000          LDRB     r10,[r1,#0]
002fd4  f1c00e06          RSB      lr,r0,#6
002fd8  f6437b3f          MOV      r11,#0x3f3f
002fdc  fa4bfb0e          ASR      r11,r11,lr
002fe0  ea0a0a0b          AND      r10,r10,r11
002fe4  f881a000          STRB     r10,[r1,#0]
;;;2575                     *dp |= (png_byte)(v << dshift);
002fe8  f891b000          LDRB     r11,[r1,#0]
002fec  f8dda008          LDR      r10,[sp,#8]
002ff0  fa0afa00          LSL      r10,r10,r0
002ff4  f00a0aff          AND      r10,r10,#0xff
002ff8  ea4b0b0a          ORR      r11,r11,r10
002ffc  f881b000          STRB     r11,[r1,#0]
;;;2576                     if (dshift == s_end)
003000  4560              CMP      r0,r12
003002  d102              BNE      |L1.12298|
;;;2577                     {
;;;2578                        dshift = s_start;
003004  4618              MOV      r0,r3
;;;2579                        dp--;
003006  1e49              SUBS     r1,r1,#1
003008  e000              B        |L1.12300|
                  |L1.12298|
;;;2580                     }
;;;2581                     else
;;;2582                        dshift += s_inc;
00300a  4448              ADD      r0,r0,r9
                  |L1.12300|
00300c  f8dda004          LDR      r10,[sp,#4]           ;2572
003010  f10a0a01          ADD      r10,r10,#1            ;2572
003014  f8cda004          STR      r10,[sp,#4]           ;2572
                  |L1.12312|
003018  f8ddb010          LDR      r11,[sp,#0x10]        ;2572
00301c  f8dda004          LDR      r10,[sp,#4]           ;2572
003020  45da              CMP      r10,r11               ;2572
003022  dbd5              BLT      |L1.12240|
;;;2583                  }
;;;2584                  if (sshift == s_end)
003024  4562              CMP      r2,r12
003026  d107              BNE      |L1.12344|
;;;2585                  {
;;;2586                     sshift = s_start;
003028  461a              MOV      r2,r3
;;;2587                     sp--;
00302a  f8dda014          LDR      r10,[sp,#0x14]
00302e  f1aa0a01          SUB      r10,r10,#1
003032  f8cda014          STR      r10,[sp,#0x14]
003036  e000              B        |L1.12346|
                  |L1.12344|
;;;2588                  }
;;;2589                  else
;;;2590                     sshift += s_inc;
003038  444a              ADD      r2,r2,r9
                  |L1.12346|
00303a  f8dda00c          LDR      r10,[sp,#0xc]         ;2566
00303e  f10a0a01          ADD      r10,r10,#1            ;2566
003042  f8cda00c          STR      r10,[sp,#0xc]         ;2566
                  |L1.12358|
003046  f8d4b000          LDR      r11,[r4,#0]           ;2566
00304a  f8dda00c          LDR      r10,[sp,#0xc]         ;2566
00304e  45d3              CMP      r11,r10               ;2566
003050  d8af              BHI      |L1.12210|
;;;2591               }
;;;2592               break;
003052  e0cd              B        |L1.12784|
                  |L1.12372|
;;;2593            }
;;;2594            case 4:
;;;2595            {
;;;2596               png_bytep sp = row + (png_size_t)((row_info->width - 1) >> 1);
003054  f8d4a000          LDR      r10,[r4,#0]
003058  f1aa0a01          SUB      r10,r10,#1
00305c  eb060a5a          ADD      r10,r6,r10,LSR #1
003060  f8cda014          STR      r10,[sp,#0x14]
;;;2597               png_bytep dp = row + (png_size_t)((final_width - 1) >> 1);
003064  f1a50a01          SUB      r10,r5,#1
003068  eb06015a          ADD      r1,r6,r10,LSR #1
;;;2598               int sshift, dshift;
;;;2599               int s_start, s_end, s_inc;
;;;2600               png_uint_32 i;
;;;2601               int jstop = png_pass_inc[pass];
00306c  f8dfa14c          LDR      r10,|L1.12732|
003070  f85aa028          LDR      r10,[r10,r8,LSL #2]
003074  f8cda00c          STR      r10,[sp,#0xc]
;;;2602   
;;;2603   #if defined(PNG_READ_PACKSWAP_SUPPORTED)
;;;2604               if (transformations & PNG_PACKSWAP)
003078  f8dda018          LDR      r10,[sp,#0x18]
00307c  f40a3a80          AND      r10,r10,#0x10000
003080  f1ba0f00          CMP      r10,#0
003084  d013              BEQ      |L1.12462|
;;;2605               {
;;;2606                  sshift = (int)(((row_info->width + 1) & 0x01) << 2);
003086  f894a000          LDRB     r10,[r4,#0]
00308a  f10a0a01          ADD      r10,r10,#1
00308e  ea4f7aca          LSL      r10,r10,#31
003092  ea4f725a          LSR      r2,r10,#29
;;;2607                  dshift = (int)(((final_width + 1) & 0x01) << 2);
003096  f1050a01          ADD      r10,r5,#1
00309a  ea4f7aca          LSL      r10,r10,#31
00309e  ea4f705a          LSR      r0,r10,#29
;;;2608                  s_start = 4;
0030a2  2304              MOVS     r3,#4
;;;2609                  s_end = 0;
0030a4  f04f0c00          MOV      r12,#0
;;;2610                  s_inc = -4;
0030a8  f06f0903          MVN      r9,#3
0030ac  e016              B        |L1.12508|
                  |L1.12462|
;;;2611               }
;;;2612               else
;;;2613   #endif
;;;2614               {
;;;2615                  sshift = (int)((1 - ((row_info->width + 1) & 0x01)) << 2);
0030ae  f894a000          LDRB     r10,[r4,#0]
0030b2  f10a0a01          ADD      r10,r10,#1
0030b6  f00a0a01          AND      r10,r10,#1
0030ba  f1ca0a01          RSB      r10,r10,#1
0030be  ea4f028a          LSL      r2,r10,#2
;;;2616                  dshift = (int)((1 - ((final_width + 1) & 0x01)) << 2);
0030c2  f1050a01          ADD      r10,r5,#1
0030c6  f00a0a01          AND      r10,r10,#1
0030ca  f1ca0a01          RSB      r10,r10,#1
0030ce  ea4f008a          LSL      r0,r10,#2
;;;2617                  s_start = 0;
0030d2  2300              MOVS     r3,#0
;;;2618                  s_end = 4;
0030d4  f04f0c04          MOV      r12,#4
;;;2619                  s_inc = 4;
0030d8  f04f0904          MOV      r9,#4
                  |L1.12508|
;;;2620               }
;;;2621   
;;;2622               for (i = 0; i < row_info->width; i++)
0030dc  f04f0a00          MOV      r10,#0
0030e0  f8cda010          STR      r10,[sp,#0x10]
0030e4  e049              B        |L1.12666|
                  |L1.12518|
;;;2623               {
;;;2624                  png_byte v = (png_byte)((*sp >> sshift) & 0xf);
0030e6  f8dda014          LDR      r10,[sp,#0x14]
0030ea  f89aa000          LDRB     r10,[r10,#0]
0030ee  fa4afa02          ASR      r10,r10,r2
0030f2  f00a0a0f          AND      r10,r10,#0xf
0030f6  f8cda008          STR      r10,[sp,#8]
;;;2625                  int j;
;;;2626   
;;;2627                  for (j = 0; j < jstop; j++)
0030fa  f04f0a00          MOV      r10,#0
0030fe  f8cda004          STR      r10,[sp,#4]
003102  e023              B        |L1.12620|
                  |L1.12548|
;;;2628                  {
;;;2629                     *dp &= (png_byte)((0xf0f >> (4 - dshift)) & 0xff);
003104  f891a000          LDRB     r10,[r1,#0]
003108  f1c00e04          RSB      lr,r0,#4
00310c  f6407b0f          MOV      r11,#0xf0f
003110  fa4bfb0e          ASR      r11,r11,lr
003114  ea0a0a0b          AND      r10,r10,r11
003118  f881a000          STRB     r10,[r1,#0]
;;;2630                     *dp |= (png_byte)(v << dshift);
00311c  f891b000          LDRB     r11,[r1,#0]
003120  f8dda008          LDR      r10,[sp,#8]
003124  fa0afa00          LSL      r10,r10,r0
003128  f00a0aff          AND      r10,r10,#0xff
00312c  ea4b0b0a          ORR      r11,r11,r10
003130  f881b000          STRB     r11,[r1,#0]
;;;2631                     if (dshift == s_end)
003134  4560              CMP      r0,r12
003136  d102              BNE      |L1.12606|
;;;2632                     {
;;;2633                        dshift = s_start;
003138  4618              MOV      r0,r3
;;;2634                        dp--;
00313a  1e49              SUBS     r1,r1,#1
00313c  e000              B        |L1.12608|
                  |L1.12606|
;;;2635                     }
;;;2636                     else
;;;2637                        dshift += s_inc;
00313e  4448              ADD      r0,r0,r9
                  |L1.12608|
003140  f8dda004          LDR      r10,[sp,#4]           ;2627
003144  f10a0a01          ADD      r10,r10,#1            ;2627
003148  f8cda004          STR      r10,[sp,#4]           ;2627
                  |L1.12620|
00314c  f8ddb00c          LDR      r11,[sp,#0xc]         ;2627
003150  f8dda004          LDR      r10,[sp,#4]           ;2627
003154  45da              CMP      r10,r11               ;2627
003156  dbd5              BLT      |L1.12548|
;;;2638                  }
;;;2639                  if (sshift == s_end)
003158  4562              CMP      r2,r12
00315a  d107              BNE      |L1.12652|
;;;2640                  {
;;;2641                     sshift = s_start;
00315c  461a              MOV      r2,r3
;;;2642                     sp--;
00315e  f8dda014          LDR      r10,[sp,#0x14]
003162  f1aa0a01          SUB      r10,r10,#1
003166  f8cda014          STR      r10,[sp,#0x14]
00316a  e000              B        |L1.12654|
                  |L1.12652|
;;;2643                  }
;;;2644                  else
;;;2645                     sshift += s_inc;
00316c  444a              ADD      r2,r2,r9
                  |L1.12654|
00316e  f8dda010          LDR      r10,[sp,#0x10]        ;2622
003172  f10a0a01          ADD      r10,r10,#1            ;2622
003176  f8cda010          STR      r10,[sp,#0x10]        ;2622
                  |L1.12666|
00317a  f8d4b000          LDR      r11,[r4,#0]           ;2622
00317e  f8dda010          LDR      r10,[sp,#0x10]        ;2622
003182  45d3              CMP      r11,r10               ;2622
003184  d8af              BHI      |L1.12518|
;;;2646               }
;;;2647               break;
003186  e033              B        |L1.12784|
                  |L1.12680|
;;;2648            }
;;;2649            default:
;;;2650            {
;;;2651               png_size_t pixel_bytes = (row_info->pixel_depth >> 3);
003188  7ae0              LDRB     r0,[r4,#0xb]
00318a  ea4f09e0          ASR      r9,r0,#3
;;;2652               png_bytep sp = row + (png_size_t)(row_info->width - 1) * pixel_bytes;
00318e  6820              LDR      r0,[r4,#0]
003190  1e40              SUBS     r0,r0,#1
003192  fb006a09          MLA      r10,r0,r9,r6
;;;2653               png_bytep dp = row + (png_size_t)(final_width - 1) * pixel_bytes;
003196  1e68              SUBS     r0,r5,#1
003198  fb006b09          MLA      r11,r0,r9,r6
;;;2654   
;;;2655               int jstop = png_pass_inc[pass];
00319c  4807              LDR      r0,|L1.12732|
00319e  f8500028          LDR      r0,[r0,r8,LSL #2]
0031a2  9005              STR      r0,[sp,#0x14]
;;;2656               png_uint_32 i;
;;;2657   
;;;2658               for (i = 0; i < row_info->width; i++)
0031a4  2000              MOVS     r0,#0
0031a6  9004              STR      r0,[sp,#0x10]
0031a8  e01d              B        |L1.12774|
                  |L1.12714|
;;;2659               {
;;;2660                  png_byte v[8];
;;;2661                  int j;
;;;2662   
;;;2663                  png_memcpy(v, sp, pixel_bytes);
0031aa  464a              MOV      r2,r9
0031ac  4651              MOV      r1,r10
0031ae  a802              ADD      r0,sp,#8
0031b0  f7fffffe          BL       __aeabi_memcpy
;;;2664                  for (j = 0; j < jstop; j++)
0031b4  2000              MOVS     r0,#0
0031b6  9001              STR      r0,[sp,#4]
0031b8  e00c              B        |L1.12756|
0031ba  0000              DCW      0x0000
                  |L1.12732|
                          DCD      png_pass_inc
                  |L1.12736|
;;;2665                  {
;;;2666                     png_memcpy(dp, v, pixel_bytes);
0031c0  464a              MOV      r2,r9
0031c2  a902              ADD      r1,sp,#8
0031c4  4658              MOV      r0,r11
0031c6  f7fffffe          BL       __aeabi_memcpy
;;;2667                     dp -= pixel_bytes;
0031ca  ebab0b09          SUB      r11,r11,r9
0031ce  9801              LDR      r0,[sp,#4]            ;2664
0031d0  1c40              ADDS     r0,r0,#1              ;2664
0031d2  9001              STR      r0,[sp,#4]            ;2664
                  |L1.12756|
0031d4  9905              LDR      r1,[sp,#0x14]         ;2664
0031d6  9801              LDR      r0,[sp,#4]            ;2664
0031d8  4288              CMP      r0,r1                 ;2664
0031da  dbf1              BLT      |L1.12736|
;;;2668                  }
;;;2669                  sp -= pixel_bytes;
0031dc  ebaa0a09          SUB      r10,r10,r9
0031e0  9804              LDR      r0,[sp,#0x10]         ;2658
0031e2  1c40              ADDS     r0,r0,#1              ;2658
0031e4  9004              STR      r0,[sp,#0x10]         ;2658
                  |L1.12774|
0031e6  6821              LDR      r1,[r4,#0]            ;2658
0031e8  9804              LDR      r0,[sp,#0x10]         ;2658
0031ea  4281              CMP      r1,r0                 ;2658
0031ec  d8dd              BHI      |L1.12714|
;;;2670               }
;;;2671               break;
0031ee  bf00              NOP      
                  |L1.12784|
0031f0  bf00              NOP                            ;2536
;;;2672            }
;;;2673         }
;;;2674         row_info->width = final_width;
0031f2  6025              STR      r5,[r4,#0]
;;;2675         row_info->rowbytes = PNG_ROWBYTES(row_info->pixel_depth,final_width);
0031f4  7ae0              LDRB     r0,[r4,#0xb]
0031f6  2808              CMP      r0,#8
0031f8  db03              BLT      |L1.12802|
0031fa  7ae0              LDRB     r0,[r4,#0xb]
0031fc  08c0              LSRS     r0,r0,#3
0031fe  4368              MULS     r0,r5,r0
003200  e003              B        |L1.12810|
                  |L1.12802|
003202  7ae0              LDRB     r0,[r4,#0xb]
003204  4368              MULS     r0,r5,r0
003206  1dc0              ADDS     r0,r0,#7
003208  08c0              LSRS     r0,r0,#3
                  |L1.12810|
00320a  6060              STR      r0,[r4,#4]
;;;2676      }
00320c  bf00              NOP      
                  |L1.12814|
;;;2677   #if !defined(PNG_READ_PACKSWAP_SUPPORTED)
;;;2678      if (&transformations == NULL) /* silence compiler warning */
;;;2679         return;
;;;2680   #endif
;;;2681   }
00320e  b007              ADD      sp,sp,#0x1c
003210  e8bd8ff0          POP      {r4-r11,pc}
;;;2682   #endif /* !PNG_HAVE_MMX_READ_INTERLACE */
                          ENDP

                  png_read_filter_row PROC
;;;2686   void /* PRIVATE */
;;;2687   png_read_filter_row(png_structp png_ptr, png_row_infop row_info, png_bytep row,
003214  e92d4fff          PUSH     {r0-r11,lr}
;;;2688      png_bytep prev_row, int filter)
;;;2689   {
003218  b085              SUB      sp,sp,#0x14
00321a  460d              MOV      r5,r1
00321c  4614              MOV      r4,r2
00321e  461e              MOV      r6,r3
;;;2690      png_debug(1, "in png_read_filter_row\n");
;;;2691      png_debug2(2,"row = %lu, filter = %d\n", png_ptr->row_number, filter);
;;;2692      switch (filter)
003220  9812              LDR      r0,[sp,#0x48]
003222  2805              CMP      r0,#5
003224  d277              BCS      |L1.13078|
003226  e8dff000          TBB      [pc,r0]
00322a  0304              DCB      0x03,0x04
00322c  1b2a5c00          DCB      0x1b,0x2a,0x5c,0x00
;;;2693      {
;;;2694         case PNG_FILTER_VALUE_NONE:
;;;2695            break;
003230  e0bf              B        |L1.13234|
;;;2696         case PNG_FILTER_VALUE_SUB:
;;;2697         {
;;;2698            png_uint_32 i;
;;;2699            png_uint_32 istop = row_info->rowbytes;
003232  686f              LDR      r7,[r5,#4]
;;;2700            png_uint_32 bpp = (row_info->pixel_depth + 7) >> 3;
003234  f895c00b          LDRB     r12,[r5,#0xb]
003238  f10c0c07          ADD      r12,r12,#7
00323c  ea4f02ec          ASR      r2,r12,#3
;;;2701            png_bytep rp = row + bpp;
003240  18a0              ADDS     r0,r4,r2
;;;2702            png_bytep lp = row;
003242  4623              MOV      r3,r4
;;;2703   
;;;2704            for (i = bpp; i < istop; i++)
003244  4611              MOV      r1,r2
003246  e008              B        |L1.12890|
                  |L1.12872|
;;;2705            {
;;;2706               *rp = (png_byte)(((int)(*rp) + (int)(*lp++)) & 0xff);
003248  f8138b01          LDRB     r8,[r3],#1
00324c  f890c000          LDRB     r12,[r0,#0]
003250  44c4              ADD      r12,r12,r8
003252  f880c000          STRB     r12,[r0,#0]
;;;2707               rp++;
003256  1c40              ADDS     r0,r0,#1
003258  1c49              ADDS     r1,r1,#1              ;2704
                  |L1.12890|
00325a  42b9              CMP      r1,r7                 ;2704
00325c  d3f4              BCC      |L1.12872|
;;;2708            }
;;;2709            break;
00325e  e0a8              B        |L1.13234|
;;;2710         }
;;;2711         case PNG_FILTER_VALUE_UP:
;;;2712         {
;;;2713            png_uint_32 i;
;;;2714            png_uint_32 istop = row_info->rowbytes;
003260  686b              LDR      r3,[r5,#4]
;;;2715            png_bytep rp = row;
003262  4620              MOV      r0,r4
;;;2716            png_bytep pp = prev_row;
003264  4632              MOV      r2,r6
;;;2717   
;;;2718            for (i = 0; i < istop; i++)
003266  2100              MOVS     r1,#0
003268  e006              B        |L1.12920|
                  |L1.12906|
;;;2719            {
;;;2720               *rp = (png_byte)(((int)(*rp) + (int)(*pp++)) & 0xff);
00326a  f812cb01          LDRB     r12,[r2],#1
00326e  7807              LDRB     r7,[r0,#0]
003270  4467              ADD      r7,r7,r12
003272  7007              STRB     r7,[r0,#0]
;;;2721               rp++;
003274  1c40              ADDS     r0,r0,#1
003276  1c49              ADDS     r1,r1,#1              ;2718
                  |L1.12920|
003278  4299              CMP      r1,r3                 ;2718
00327a  d3f6              BCC      |L1.12906|
;;;2722            }
;;;2723            break;
00327c  e099              B        |L1.13234|
;;;2724         }
;;;2725         case PNG_FILTER_VALUE_AVG:
;;;2726         {
;;;2727            png_uint_32 i;
;;;2728            png_bytep rp = row;
00327e  4620              MOV      r0,r4
;;;2729            png_bytep pp = prev_row;
003280  4632              MOV      r2,r6
;;;2730            png_bytep lp = row;
003282  4623              MOV      r3,r4
;;;2731            png_uint_32 bpp = (row_info->pixel_depth + 7) >> 3;
003284  f895800b          LDRB     r8,[r5,#0xb]
003288  f1080807          ADD      r8,r8,#7
00328c  ea4f07e8          ASR      r7,r8,#3
;;;2732            png_uint_32 istop = row_info->rowbytes - bpp;
003290  f8d58004          LDR      r8,[r5,#4]
003294  eba80c07          SUB      r12,r8,r7
;;;2733   
;;;2734            for (i = 0; i < bpp; i++)
003298  2100              MOVS     r1,#0
00329a  e00b              B        |L1.12980|
                  |L1.12956|
;;;2735            {
;;;2736               *rp = (png_byte)(((int)(*rp) +
00329c  f8128b01          LDRB     r8,[r2],#1
0032a0  eb0879d8          ADD      r9,r8,r8,LSR #31
0032a4  f890a000          LDRB     r10,[r0,#0]
0032a8  eb0a0969          ADD      r9,r10,r9,ASR #1
0032ac  f8809000          STRB     r9,[r0,#0]
;;;2737                  ((int)(*pp++) / 2 )) & 0xff);
;;;2738               rp++;
0032b0  1c40              ADDS     r0,r0,#1
0032b2  1c49              ADDS     r1,r1,#1              ;2734
                  |L1.12980|
0032b4  42b9              CMP      r1,r7                 ;2734
0032b6  d3f1              BCC      |L1.12956|
;;;2739            }
;;;2740   
;;;2741            for (i = 0; i < istop; i++)
0032b8  2100              MOVS     r1,#0
0032ba  e00f              B        |L1.13020|
                  |L1.12988|
;;;2742            {
;;;2743               *rp = (png_byte)(((int)(*rp) +
0032bc  f812ab01          LDRB     r10,[r2],#1
0032c0  f813bb01          LDRB     r11,[r3],#1
0032c4  eb0a080b          ADD      r8,r10,r11
0032c8  eb0879d8          ADD      r9,r8,r8,LSR #31
0032cc  f890a000          LDRB     r10,[r0,#0]
0032d0  eb0a0969          ADD      r9,r10,r9,ASR #1
0032d4  f8809000          STRB     r9,[r0,#0]
;;;2744                  (int)(*pp++ + *lp++) / 2 ) & 0xff);
;;;2745               rp++;
0032d8  1c40              ADDS     r0,r0,#1
0032da  1c49              ADDS     r1,r1,#1              ;2741
                  |L1.13020|
0032dc  4561              CMP      r1,r12                ;2741
0032de  d3ed              BCC      |L1.12988|
;;;2746            }
;;;2747            break;
0032e0  e067              B        |L1.13234|
;;;2748         }
;;;2749         case PNG_FILTER_VALUE_PAETH:
;;;2750         {
;;;2751            png_uint_32 i;
;;;2752            png_bytep rp = row;
0032e2  4620              MOV      r0,r4
;;;2753            png_bytep pp = prev_row;
0032e4  4633              MOV      r3,r6
;;;2754            png_bytep lp = row;
0032e6  46a4              MOV      r12,r4
;;;2755            png_bytep cp = prev_row;
0032e8  46b0              MOV      r8,r6
;;;2756            png_uint_32 bpp = (row_info->pixel_depth + 7) >> 3;
0032ea  7ae9              LDRB     r1,[r5,#0xb]
0032ec  1dc9              ADDS     r1,r1,#7
0032ee  10c9              ASRS     r1,r1,#3
0032f0  9104              STR      r1,[sp,#0x10]
;;;2757            png_uint_32 istop=row_info->rowbytes - bpp;
0032f2  686a              LDR      r2,[r5,#4]
0032f4  9904              LDR      r1,[sp,#0x10]
0032f6  1a51              SUBS     r1,r2,r1
0032f8  9103              STR      r1,[sp,#0xc]
;;;2758   
;;;2759            for (i = 0; i < bpp; i++)
0032fa  2700              MOVS     r7,#0
0032fc  e006              B        |L1.13068|
                  |L1.13054|
;;;2760            {
;;;2761               *rp = (png_byte)(((int)(*rp) + (int)(*pp++)) & 0xff);
0032fe  f8132b01          LDRB     r2,[r3],#1
003302  7801              LDRB     r1,[r0,#0]
003304  4411              ADD      r1,r1,r2
003306  7001              STRB     r1,[r0,#0]
;;;2762               rp++;
003308  1c40              ADDS     r0,r0,#1
00330a  1c7f              ADDS     r7,r7,#1              ;2759
                  |L1.13068|
00330c  9904              LDR      r1,[sp,#0x10]         ;2759
00330e  428f              CMP      r7,r1                 ;2759
003310  d3f5              BCC      |L1.13054|
;;;2763            }
;;;2764   
;;;2765            for (i = 0; i < istop; i++)   /* use leftover rp,pp */
003312  2700              MOVS     r7,#0
003314  e042              B        |L1.13212|
                  |L1.13078|
003316  e045              B        |L1.13220|
                  |L1.13080|
;;;2766            {
;;;2767               int a, b, c, pa, pb, pc, p;
;;;2768   
;;;2769               a = *lp++;
003318  f81ceb01          LDRB     lr,[r12],#1
00331c  f8cde008          STR      lr,[sp,#8]
;;;2770               b = *pp++;
003320  f813eb01          LDRB     lr,[r3],#1
003324  f8cde004          STR      lr,[sp,#4]
;;;2771               c = *cp++;
003328  f8189b01          LDRB     r9,[r8],#1
;;;2772   
;;;2773               p = b - c;
00332c  f8dde004          LDR      lr,[sp,#4]
003330  ebae0209          SUB      r2,lr,r9
;;;2774               pc = a - c;
003334  f8dde008          LDR      lr,[sp,#8]
003338  ebae0109          SUB      r1,lr,r9
;;;2775   
;;;2776   #ifdef PNG_USE_ABS
;;;2777               pa = abs(p);
;;;2778               pb = abs(pc);
;;;2779               pc = abs(p + pc);
;;;2780   #else
;;;2781               pa = p < 0 ? -p : p;
00333c  2a00              CMP      r2,#0
00333e  da02              BGE      |L1.13126|
003340  f1c20e00          RSB      lr,r2,#0
003344  e000              B        |L1.13128|
                  |L1.13126|
003346  4696              MOV      lr,r2
                  |L1.13128|
003348  46f2              MOV      r10,lr
;;;2782               pb = pc < 0 ? -pc : pc;
00334a  2900              CMP      r1,#0
00334c  da02              BGE      |L1.13140|
00334e  f1c10e00          RSB      lr,r1,#0
003352  e000              B        |L1.13142|
                  |L1.13140|
003354  468e              MOV      lr,r1
                  |L1.13142|
003356  46f3              MOV      r11,lr
;;;2783               pc = (p + pc) < 0 ? -(p + pc) : p + pc;
003358  eb020e01          ADD      lr,r2,r1
00335c  f1be0f00          CMP      lr,#0
003360  da04              BGE      |L1.13164|
003362  eb020e01          ADD      lr,r2,r1
003366  f1ce0e00          RSB      lr,lr,#0
00336a  e001              B        |L1.13168|
                  |L1.13164|
00336c  eb020e01          ADD      lr,r2,r1
                  |L1.13168|
003370  4671              MOV      r1,lr
;;;2784   #endif
;;;2785   
;;;2786               /*
;;;2787                  if (pa <= pb && pa <= pc)
;;;2788                     p = a;
;;;2789                  else if (pb <= pc)
;;;2790                     p = b;
;;;2791                  else
;;;2792                     p = c;
;;;2793                */
;;;2794   
;;;2795               p = (pa <= pb && pa <=pc) ? a : (pb <= pc) ? b : c;
003372  45da              CMP      r10,r11
003374  dc04              BGT      |L1.13184|
003376  458a              CMP      r10,r1
003378  dc02              BGT      |L1.13184|
00337a  f8dde008          LDR      lr,[sp,#8]
00337e  e005              B        |L1.13196|
                  |L1.13184|
003380  458b              CMP      r11,r1
003382  dc02              BGT      |L1.13194|
003384  f8dde004          LDR      lr,[sp,#4]
003388  e000              B        |L1.13196|
                  |L1.13194|
00338a  46ce              MOV      lr,r9
                  |L1.13196|
00338c  4672              MOV      r2,lr
;;;2796   
;;;2797               *rp = (png_byte)(((int)(*rp) + p) & 0xff);
00338e  f890e000          LDRB     lr,[r0,#0]
003392  4496              ADD      lr,lr,r2
003394  f880e000          STRB     lr,[r0,#0]
;;;2798               rp++;
003398  1c40              ADDS     r0,r0,#1
00339a  1c7f              ADDS     r7,r7,#1              ;2765
                  |L1.13212|
00339c  9903              LDR      r1,[sp,#0xc]          ;2765
00339e  428f              CMP      r7,r1                 ;2765
0033a0  d3ba              BCC      |L1.13080|
;;;2799            }
;;;2800            break;
0033a2  e006              B        |L1.13234|
                  |L1.13220|
;;;2801         }
;;;2802         default:
;;;2803            png_warning(png_ptr, "Ignoring bad adaptive filter type");
0033a4  a1fd              ADR      r1,|L1.14236|
0033a6  9805              LDR      r0,[sp,#0x14]
0033a8  f7fffffe          BL       png_warning
;;;2804            *row=0;
0033ac  2000              MOVS     r0,#0
0033ae  7020              STRB     r0,[r4,#0]
;;;2805            break;
0033b0  bf00              NOP      
                  |L1.13234|
0033b2  bf00              NOP                            ;2695
;;;2806      }
;;;2807   }
0033b4  b009              ADD      sp,sp,#0x24
0033b6  e8bd8ff0          POP      {r4-r11,pc}
;;;2808   #endif /* !PNG_HAVE_MMX_READ_FILTER_ROW */
                          ENDP

                  png_read_finish_row PROC
;;;2810   void /* PRIVATE */
;;;2811   png_read_finish_row(png_structp png_ptr)
0033ba  b57c              PUSH     {r2-r6,lr}
;;;2812   {
0033bc  4604              MOV      r4,r0
;;;2813   #ifdef PNG_USE_LOCAL_ARRAYS
;;;2814      /* arrays to facilitate easy interlacing - use pass (0 - 6) as index */
;;;2815   
;;;2816      /* start of interlace block */
;;;2817      const int png_pass_start[7] = {0, 4, 0, 2, 0, 1, 0};
;;;2818   
;;;2819      /* offset to next interlace block */
;;;2820      const int png_pass_inc[7] = {8, 8, 4, 4, 2, 2, 1};
;;;2821   
;;;2822      /* start of interlace block in the y direction */
;;;2823      const int png_pass_ystart[7] = {0, 0, 4, 0, 2, 0, 1};
;;;2824   
;;;2825      /* offset to next interlace block in the y direction */
;;;2826      const int png_pass_yinc[7] = {8, 8, 8, 4, 4, 2, 2};
;;;2827   #endif
;;;2828   
;;;2829      png_debug(1, "in png_read_finish_row\n");
;;;2830      png_ptr->row_number++;
0033be  f8d40224          LDR      r0,[r4,#0x224]
0033c2  1c40              ADDS     r0,r0,#1
0033c4  f8c40224          STR      r0,[r4,#0x224]
;;;2831      if (png_ptr->row_number < png_ptr->num_rows)
0033c8  f8d41210          LDR      r1,[r4,#0x210]
0033cc  f8d40224          LDR      r0,[r4,#0x224]
0033d0  4288              CMP      r0,r1
0033d2  d200              BCS      |L1.13270|
                  |L1.13268|
;;;2832         return;
;;;2833   
;;;2834      if (png_ptr->interlaced)
;;;2835      {
;;;2836         png_ptr->row_number = 0;
;;;2837         png_memset_check(png_ptr, png_ptr->prev_row, 0, png_ptr->rowbytes + 1);
;;;2838         do
;;;2839         {
;;;2840            png_ptr->pass++;
;;;2841            if (png_ptr->pass >= 7)
;;;2842               break;
;;;2843            png_ptr->iwidth = (png_ptr->width +
;;;2844               png_pass_inc[png_ptr->pass] - 1 -
;;;2845               png_pass_start[png_ptr->pass]) /
;;;2846               png_pass_inc[png_ptr->pass];
;;;2847   
;;;2848            png_ptr->irowbytes = PNG_ROWBYTES(png_ptr->pixel_depth,
;;;2849               png_ptr->iwidth) + 1;
;;;2850   
;;;2851            if (!(png_ptr->transformations & PNG_INTERLACE))
;;;2852            {
;;;2853               png_ptr->num_rows = (png_ptr->height +
;;;2854                  png_pass_yinc[png_ptr->pass] - 1 -
;;;2855                  png_pass_ystart[png_ptr->pass]) /
;;;2856                  png_pass_yinc[png_ptr->pass];
;;;2857               if (!(png_ptr->num_rows))
;;;2858                  continue;
;;;2859            }
;;;2860            else  /* if (png_ptr->transformations & PNG_INTERLACE) */
;;;2861               break;
;;;2862         } while (png_ptr->iwidth == 0);
;;;2863   
;;;2864         if (png_ptr->pass < 7)
;;;2865            return;
;;;2866      }
;;;2867   
;;;2868      if (!(png_ptr->flags & PNG_FLAG_ZLIB_FINISHED))
;;;2869      {
;;;2870   #ifdef PNG_USE_LOCAL_ARRAYS
;;;2871         PNG_IDAT;
;;;2872   #endif
;;;2873         char extra;
;;;2874         int ret;
;;;2875   
;;;2876         png_ptr->zstream.next_out = (Byte *)&extra;
;;;2877         png_ptr->zstream.avail_out = (uInt)1;
;;;2878         for(;;)
;;;2879         {
;;;2880            if (!(png_ptr->zstream.avail_in))
;;;2881            {
;;;2882               while (!png_ptr->idat_size)
;;;2883               {
;;;2884                  png_byte chunk_length[4];
;;;2885   
;;;2886                  png_crc_finish(png_ptr, 0);
;;;2887   
;;;2888                  png_read_data(png_ptr, chunk_length, 4);
;;;2889                  png_ptr->idat_size = png_get_uint_31(png_ptr, chunk_length);
;;;2890                  png_reset_crc(png_ptr);
;;;2891                  png_crc_read(png_ptr, png_ptr->chunk_name, 4);
;;;2892                  if (png_memcmp(png_ptr->chunk_name, (png_bytep)png_IDAT, 4))
;;;2893                     png_error(png_ptr, "Not enough image data");
;;;2894   
;;;2895               }
;;;2896               png_ptr->zstream.avail_in = (uInt)png_ptr->zbuf_size;
;;;2897               png_ptr->zstream.next_in = png_ptr->zbuf;
;;;2898               if (png_ptr->zbuf_size > png_ptr->idat_size)
;;;2899                  png_ptr->zstream.avail_in = (uInt)png_ptr->idat_size;
;;;2900               png_crc_read(png_ptr, png_ptr->zbuf, png_ptr->zstream.avail_in);
;;;2901               png_ptr->idat_size -= png_ptr->zstream.avail_in;
;;;2902            }
;;;2903            ret = inflate(&png_ptr->zstream, Z_PARTIAL_FLUSH);
;;;2904            if (ret == Z_STREAM_END)
;;;2905            {
;;;2906               if (!(png_ptr->zstream.avail_out) || png_ptr->zstream.avail_in ||
;;;2907                  png_ptr->idat_size)
;;;2908                  png_warning(png_ptr, "Extra compressed data");
;;;2909               png_ptr->mode |= PNG_AFTER_IDAT;
;;;2910               png_ptr->flags |= PNG_FLAG_ZLIB_FINISHED;
;;;2911               break;
;;;2912            }
;;;2913            if (ret != Z_OK)
;;;2914               png_error(png_ptr, png_ptr->zstream.msg ? png_ptr->zstream.msg :
;;;2915                         "Decompression Error");
;;;2916   
;;;2917            if (!(png_ptr->zstream.avail_out))
;;;2918            {
;;;2919               png_warning(png_ptr, "Extra compressed data.");
;;;2920               png_ptr->mode |= PNG_AFTER_IDAT;
;;;2921               png_ptr->flags |= PNG_FLAG_ZLIB_FINISHED;
;;;2922               break;
;;;2923            }
;;;2924   
;;;2925         }
;;;2926         png_ptr->zstream.avail_out = 0;
;;;2927      }
;;;2928   
;;;2929      if (png_ptr->idat_size || png_ptr->zstream.avail_in)
;;;2930         png_warning(png_ptr, "Extra compression data");
;;;2931   
;;;2932      inflateReset(&png_ptr->zstream);
;;;2933   
;;;2934      png_ptr->mode |= PNG_AFTER_IDAT;
;;;2935   }
0033d4  bd7c              POP      {r2-r6,pc}
                  |L1.13270|
0033d6  f8940263          LDRB     r0,[r4,#0x263]        ;2834
0033da  2800              CMP      r0,#0                 ;2834
0033dc  d071              BEQ      |L1.13506|
0033de  2000              MOVS     r0,#0                 ;2836
0033e0  f8c40224          STR      r0,[r4,#0x224]        ;2836
0033e4  f8d40218          LDR      r0,[r4,#0x218]        ;2837
0033e8  1c43              ADDS     r3,r0,#1              ;2837
0033ea  2200              MOVS     r2,#0                 ;2837
0033ec  4620              MOV      r0,r4                 ;2837
0033ee  f8d41228          LDR      r1,[r4,#0x228]        ;2837
0033f2  f7fffffe          BL       png_memset_check
0033f6  bf00              NOP                            ;2838
                  |L1.13304|
0033f8  f8940264          LDRB     r0,[r4,#0x264]        ;2840
0033fc  1c40              ADDS     r0,r0,#1              ;2840
0033fe  f8840264          STRB     r0,[r4,#0x264]        ;2840
003402  f8940264          LDRB     r0,[r4,#0x264]        ;2841
003406  2807              CMP      r0,#7                 ;2841
003408  db00              BLT      |L1.13324|
00340a  e053              B        |L1.13492|
                  |L1.13324|
00340c  f8941264          LDRB     r1,[r4,#0x264]        ;2843
003410  4aeb              LDR      r2,|L1.14272|
003412  f8521021          LDR      r1,[r2,r1,LSL #2]     ;2843
003416  f8d40208          LDR      r0,[r4,#0x208]        ;2843
00341a  4408              ADD      r0,r0,r1              ;2843
00341c  1e40              SUBS     r0,r0,#1              ;2843
00341e  f8941264          LDRB     r1,[r4,#0x264]        ;2843
003422  4ae8              LDR      r2,|L1.14276|
003424  f8521021          LDR      r1,[r2,r1,LSL #2]     ;2843
003428  1a40              SUBS     r0,r0,r1              ;2843
00342a  f8941264          LDRB     r1,[r4,#0x264]        ;2843
00342e  4ae4              LDR      r2,|L1.14272|
003430  f8521021          LDR      r1,[r2,r1,LSL #2]     ;2843
003434  fbb0f0f1          UDIV     r0,r0,r1              ;2843
003438  f8c40220          STR      r0,[r4,#0x220]        ;2843
00343c  f8940269          LDRB     r0,[r4,#0x269]        ;2848
003440  2808              CMP      r0,#8                 ;2848
003442  db06              BLT      |L1.13394|
003444  f8941269          LDRB     r1,[r4,#0x269]        ;2848
003448  08c9              LSRS     r1,r1,#3              ;2848
00344a  f8d40220          LDR      r0,[r4,#0x220]        ;2848
00344e  4348              MULS     r0,r1,r0              ;2848
003450  e006              B        |L1.13408|
                  |L1.13394|
003452  f8941269          LDRB     r1,[r4,#0x269]        ;2848
003456  f8d40220          LDR      r0,[r4,#0x220]        ;2848
00345a  4348              MULS     r0,r1,r0              ;2848
00345c  1dc0              ADDS     r0,r0,#7              ;2848
00345e  08c0              LSRS     r0,r0,#3              ;2848
                  |L1.13408|
003460  1c40              ADDS     r0,r0,#1              ;2848
003462  f8c4021c          STR      r0,[r4,#0x21c]        ;2848
003466  f89401b0          LDRB     r0,[r4,#0x1b0]        ;2851
00346a  f0000002          AND      r0,r0,#2              ;2851
00346e  b9d8              CBNZ     r0,|L1.13480|
003470  f8941264          LDRB     r1,[r4,#0x264]        ;2853
003474  4ad4              LDR      r2,|L1.14280|
003476  f8521021          LDR      r1,[r2,r1,LSL #2]     ;2853
00347a  f8d4020c          LDR      r0,[r4,#0x20c]        ;2853
00347e  4408              ADD      r0,r0,r1              ;2853
003480  1e40              SUBS     r0,r0,#1              ;2853
003482  f8941264          LDRB     r1,[r4,#0x264]        ;2853
003486  4ad1              LDR      r2,|L1.14284|
003488  f8521021          LDR      r1,[r2,r1,LSL #2]     ;2853
00348c  1a40              SUBS     r0,r0,r1              ;2853
00348e  f8941264          LDRB     r1,[r4,#0x264]        ;2853
003492  4acd              LDR      r2,|L1.14280|
003494  f8521021          LDR      r1,[r2,r1,LSL #2]     ;2853
003498  fbb0f0f1          UDIV     r0,r0,r1              ;2853
00349c  f8c40210          STR      r0,[r4,#0x210]        ;2853
0034a0  f8d40210          LDR      r0,[r4,#0x210]        ;2857
0034a4  b908              CBNZ     r0,|L1.13482|
0034a6  e001              B        |L1.13484|
                  |L1.13480|
0034a8  e004              B        |L1.13492|
                  |L1.13482|
0034aa  bf00              NOP                            ;2858
                  |L1.13484|
0034ac  f8d40220          LDR      r0,[r4,#0x220]        ;2862
0034b0  2800              CMP      r0,#0                 ;2862
0034b2  d0a1              BEQ      |L1.13304|
                  |L1.13492|
0034b4  bf00              NOP                            ;2842
0034b6  f8940264          LDRB     r0,[r4,#0x264]        ;2864
0034ba  2807              CMP      r0,#7                 ;2864
0034bc  da01              BGE      |L1.13506|
0034be  e789              B        |L1.13268|
0034c0  e7ff              B        |L1.13506|
                  |L1.13506|
0034c2  f89401ac          LDRB     r0,[r4,#0x1ac]        ;2868
0034c6  f0000020          AND      r0,r0,#0x20           ;2868
0034ca  2800              CMP      r0,#0                 ;2868
0034cc  d17d              BNE      |L1.13770|
0034ce  a901              ADD      r1,sp,#4              ;2876
0034d0  f44f70e0          MOV      r0,#0x1c0             ;2876
0034d4  5101              STR      r1,[r0,r4]            ;2876
0034d6  2101              MOVS     r1,#1                 ;2877
0034d8  1d00              ADDS     r0,r0,#4              ;2877
0034da  5101              STR      r1,[r0,r4]            ;2877
0034dc  bf00              NOP                            ;2878
                  |L1.13534|
0034de  f44f70dc          MOV      r0,#0x1b8             ;2880
0034e2  5900              LDR      r0,[r0,r4]            ;2880
0034e4  2800              CMP      r0,#0                 ;2880
0034e6  d14c              BNE      |L1.13698|
0034e8  e023              B        |L1.13618|
                  |L1.13546|
0034ea  2100              MOVS     r1,#0                 ;2886
0034ec  4620              MOV      r0,r4                 ;2886
0034ee  f7fffffe          BL       png_crc_finish
0034f2  2204              MOVS     r2,#4                 ;2888
0034f4  4669              MOV      r1,sp                 ;2888
0034f6  4620              MOV      r0,r4                 ;2888
0034f8  f7fffffe          BL       png_read_data
0034fc  4669              MOV      r1,sp                 ;2889
0034fe  4620              MOV      r0,r4                 ;2889
003500  f7fffffe          BL       png_get_uint_31
003504  f8c4024c          STR      r0,[r4,#0x24c]        ;2889
003508  4620              MOV      r0,r4                 ;2890
00350a  f7fffffe          BL       png_reset_crc
00350e  2204              MOVS     r2,#4                 ;2891
003510  f5047117          ADD      r1,r4,#0x25c          ;2891
003514  4620              MOV      r0,r4                 ;2891
003516  f7fffffe          BL       png_crc_read
00351a  2204              MOVS     r2,#4                 ;2892
00351c  49ac              LDR      r1,|L1.14288|
00351e  f5047017          ADD      r0,r4,#0x25c          ;2892
003522  f7fffffe          BL       memcmp
003526  b118              CBZ      r0,|L1.13616|
003528  a1aa              ADR      r1,|L1.14292|
00352a  4620              MOV      r0,r4                 ;2893
00352c  f7fffffe          BL       png_error
                  |L1.13616|
003530  bf00              NOP                            ;2895
                  |L1.13618|
003532  f8d4024c          LDR      r0,[r4,#0x24c]        ;2882
003536  2800              CMP      r0,#0                 ;2882
003538  d0d7              BEQ      |L1.13546|
00353a  f44f70dc          MOV      r0,#0x1b8             ;2896
00353e  f8d411f0          LDR      r1,[r4,#0x1f0]        ;2896
003542  5101              STR      r1,[r0,r4]            ;2896
003544  f8d401ec          LDR      r0,[r4,#0x1ec]        ;2897
003548  f8c401b4          STR      r0,[r4,#0x1b4]        ;2897
00354c  f8d4124c          LDR      r1,[r4,#0x24c]        ;2898
003550  f8d401f0          LDR      r0,[r4,#0x1f0]        ;2898
003554  4288              CMP      r0,r1                 ;2898
003556  d904              BLS      |L1.13666|
003558  f44f70dc          MOV      r0,#0x1b8             ;2899
00355c  f8d4124c          LDR      r1,[r4,#0x24c]        ;2899
003560  5101              STR      r1,[r0,r4]            ;2899
                  |L1.13666|
003562  f44f70dc          MOV      r0,#0x1b8             ;2900
003566  5902              LDR      r2,[r0,r4]            ;2900
003568  4620              MOV      r0,r4                 ;2900
00356a  f8d411ec          LDR      r1,[r4,#0x1ec]        ;2900
00356e  f7fffffe          BL       png_crc_read
003572  f44f70dc          MOV      r0,#0x1b8             ;2901
003576  5900              LDR      r0,[r0,r4]            ;2901
003578  f8d4124c          LDR      r1,[r4,#0x24c]        ;2901
00357c  1a08              SUBS     r0,r1,r0              ;2901
00357e  f8c4024c          STR      r0,[r4,#0x24c]        ;2901
                  |L1.13698|
003582  2101              MOVS     r1,#1                 ;2903
003584  f50470da          ADD      r0,r4,#0x1b4          ;2903
003588  f7fffffe          BL       inflate
00358c  4605              MOV      r5,r0                 ;2903
00358e  2d01              CMP      r5,#1                 ;2904
003590  d11c              BNE      |L1.13772|
003592  f44f70e2          MOV      r0,#0x1c4             ;2906
003596  5900              LDR      r0,[r0,r4]            ;2906
003598  b130              CBZ      r0,|L1.13736|
00359a  f44f70dc          MOV      r0,#0x1b8             ;2906
00359e  5900              LDR      r0,[r0,r4]            ;2906
0035a0  b910              CBNZ     r0,|L1.13736|
0035a2  f8d4024c          LDR      r0,[r4,#0x24c]        ;2907
0035a6  b118              CBZ      r0,|L1.13744|
                  |L1.13736|
0035a8  a190              ADR      r1,|L1.14316|
0035aa  4620              MOV      r0,r4                 ;2908
0035ac  f7fffffe          BL       png_warning
                  |L1.13744|
0035b0  f8d401a8          LDR      r0,[r4,#0x1a8]        ;2909
0035b4  f0400008          ORR      r0,r0,#8              ;2909
0035b8  f8c401a8          STR      r0,[r4,#0x1a8]        ;2909
0035bc  f8d401ac          LDR      r0,[r4,#0x1ac]        ;2910
0035c0  f0400020          ORR      r0,r0,#0x20           ;2910
0035c4  f8c401ac          STR      r0,[r4,#0x1ac]        ;2910
0035c8  e025              B        |L1.13846|
                  |L1.13770|
0035ca  e02a              B        |L1.13858|
                  |L1.13772|
0035cc  b165              CBZ      r5,|L1.13800|
0035ce  f44f70e6          MOV      r0,#0x1cc             ;2914
0035d2  5900              LDR      r0,[r0,r4]            ;2914
0035d4  b118              CBZ      r0,|L1.13790|
0035d6  f44f70e6          MOV      r0,#0x1cc             ;2914
0035da  5900              LDR      r0,[r0,r4]            ;2914
0035dc  e000              B        |L1.13792|
                  |L1.13790|
0035de  a089              ADR      r0,|L1.14340|
                  |L1.13792|
0035e0  4601              MOV      r1,r0                 ;2915
0035e2  4620              MOV      r0,r4                 ;2915
0035e4  f7fffffe          BL       png_error
                  |L1.13800|
0035e8  f44f70e2          MOV      r0,#0x1c4             ;2917
0035ec  5900              LDR      r0,[r0,r4]            ;2917
0035ee  2800              CMP      r0,#0                 ;2917
0035f0  f47faf75          BNE      |L1.13534|
0035f4  a188              ADR      r1,|L1.14360|
0035f6  4620              MOV      r0,r4                 ;2919
0035f8  f7fffffe          BL       png_warning
0035fc  f8d401a8          LDR      r0,[r4,#0x1a8]        ;2920
003600  f0400008          ORR      r0,r0,#8              ;2920
003604  f8c401a8          STR      r0,[r4,#0x1a8]        ;2920
003608  f8d401ac          LDR      r0,[r4,#0x1ac]        ;2921
00360c  f0400020          ORR      r0,r0,#0x20           ;2921
003610  f8c401ac          STR      r0,[r4,#0x1ac]        ;2921
003614  bf00              NOP                            ;2922
                  |L1.13846|
003616  bf00              NOP                            ;2911
003618  2100              MOVS     r1,#0                 ;2926
00361a  f44f70e2          MOV      r0,#0x1c4             ;2926
00361e  5101              STR      r1,[r0,r4]            ;2926
003620  bf00              NOP                            ;2927
                  |L1.13858|
003622  f8d4024c          LDR      r0,[r4,#0x24c]        ;2929
003626  b918              CBNZ     r0,|L1.13872|
003628  f44f70dc          MOV      r0,#0x1b8             ;2929
00362c  5900              LDR      r0,[r0,r4]            ;2929
00362e  b118              CBZ      r0,|L1.13880|
                  |L1.13872|
003630  a17f              ADR      r1,|L1.14384|
003632  4620              MOV      r0,r4                 ;2930
003634  f7fffffe          BL       png_warning
                  |L1.13880|
003638  f50470da          ADD      r0,r4,#0x1b4          ;2932
00363c  f7fffffe          BL       inflateReset
003640  f8d401a8          LDR      r0,[r4,#0x1a8]        ;2934
003644  f0400008          ORR      r0,r0,#8              ;2934
003648  f8c401a8          STR      r0,[r4,#0x1a8]        ;2934
00364c  bf00              NOP      
00364e  e6c1              B        |L1.13268|
;;;2936   
                          ENDP

                  png_read_start_row PROC
;;;2937   void /* PRIVATE */
;;;2938   png_read_start_row(png_structp png_ptr)
003650  b570              PUSH     {r4-r6,lr}
;;;2939   {
003652  4604              MOV      r4,r0
;;;2940   #ifdef PNG_USE_LOCAL_ARRAYS
;;;2941      /* arrays to facilitate easy interlacing - use pass (0 - 6) as index */
;;;2942   
;;;2943      /* start of interlace block */
;;;2944      const int png_pass_start[7] = {0, 4, 0, 2, 0, 1, 0};
;;;2945   
;;;2946      /* offset to next interlace block */
;;;2947      const int png_pass_inc[7] = {8, 8, 4, 4, 2, 2, 1};
;;;2948   
;;;2949      /* start of interlace block in the y direction */
;;;2950      const int png_pass_ystart[7] = {0, 0, 4, 0, 2, 0, 1};
;;;2951   
;;;2952      /* offset to next interlace block in the y direction */
;;;2953      const int png_pass_yinc[7] = {8, 8, 8, 4, 4, 2, 2};
;;;2954   #endif
;;;2955   
;;;2956      int max_pixel_depth;
;;;2957      png_uint_32 row_bytes;
;;;2958   
;;;2959      png_debug(1, "in png_read_start_row\n");
;;;2960      png_ptr->zstream.avail_in = 0;
003654  2100              MOVS     r1,#0
003656  f44f70dc          MOV      r0,#0x1b8
00365a  5101              STR      r1,[r0,r4]
;;;2961      png_init_read_transformations(png_ptr);
00365c  4620              MOV      r0,r4
00365e  f7fffffe          BL       png_init_read_transformations
;;;2962      if (png_ptr->interlaced)
003662  f8940263          LDRB     r0,[r4,#0x263]
003666  2800              CMP      r0,#0
003668  d04e              BEQ      |L1.14088|
;;;2963      {
;;;2964         if (!(png_ptr->transformations & PNG_INTERLACE))
00366a  f89401b0          LDRB     r0,[r4,#0x1b0]
00366e  f0000002          AND      r0,r0,#2
003672  b978              CBNZ     r0,|L1.13972|
;;;2965            png_ptr->num_rows = (png_ptr->height + png_pass_yinc[0] - 1 -
003674  4954              LDR      r1,|L1.14280|
003676  f8d4020c          LDR      r0,[r4,#0x20c]
00367a  6809              LDR      r1,[r1,#0]  ; png_pass_yinc
00367c  4408              ADD      r0,r0,r1
00367e  1e40              SUBS     r0,r0,#1
003680  4952              LDR      r1,|L1.14284|
003682  6809              LDR      r1,[r1,#0]  ; png_pass_ystart
003684  1a40              SUBS     r0,r0,r1
003686  4950              LDR      r1,|L1.14280|
003688  6809              LDR      r1,[r1,#0]  ; png_pass_yinc
00368a  fbb0f0f1          UDIV     r0,r0,r1
00368e  f8c40210          STR      r0,[r4,#0x210]
003692  e003              B        |L1.13980|
                  |L1.13972|
;;;2966               png_pass_ystart[0]) / png_pass_yinc[0];
;;;2967         else
;;;2968            png_ptr->num_rows = png_ptr->height;
003694  f8d4020c          LDR      r0,[r4,#0x20c]
003698  f8c40210          STR      r0,[r4,#0x210]
                  |L1.13980|
;;;2969   
;;;2970         png_ptr->iwidth = (png_ptr->width +
00369c  f8941264          LDRB     r1,[r4,#0x264]
0036a0  4a47              LDR      r2,|L1.14272|
0036a2  f8521021          LDR      r1,[r2,r1,LSL #2]
0036a6  f8d40208          LDR      r0,[r4,#0x208]
0036aa  4408              ADD      r0,r0,r1
0036ac  1e40              SUBS     r0,r0,#1
0036ae  f8941264          LDRB     r1,[r4,#0x264]
0036b2  4a44              LDR      r2,|L1.14276|
0036b4  f8521021          LDR      r1,[r2,r1,LSL #2]
0036b8  1a40              SUBS     r0,r0,r1
0036ba  f8941264          LDRB     r1,[r4,#0x264]
0036be  4a40              LDR      r2,|L1.14272|
0036c0  f8521021          LDR      r1,[r2,r1,LSL #2]
0036c4  fbb0f0f1          UDIV     r0,r0,r1
0036c8  f8c40220          STR      r0,[r4,#0x220]
;;;2971            png_pass_inc[png_ptr->pass] - 1 -
;;;2972            png_pass_start[png_ptr->pass]) /
;;;2973            png_pass_inc[png_ptr->pass];
;;;2974   
;;;2975            row_bytes = PNG_ROWBYTES(png_ptr->pixel_depth,png_ptr->iwidth) + 1;
0036cc  f8940269          LDRB     r0,[r4,#0x269]
0036d0  2808              CMP      r0,#8
0036d2  db06              BLT      |L1.14050|
0036d4  f8941269          LDRB     r1,[r4,#0x269]
0036d8  08c9              LSRS     r1,r1,#3
0036da  f8d40220          LDR      r0,[r4,#0x220]
0036de  4348              MULS     r0,r1,r0
0036e0  e006              B        |L1.14064|
                  |L1.14050|
0036e2  f8941269          LDRB     r1,[r4,#0x269]
0036e6  f8d40220          LDR      r0,[r4,#0x220]
0036ea  4348              MULS     r0,r1,r0
0036ec  1dc0              ADDS     r0,r0,#7
0036ee  08c0              LSRS     r0,r0,#3
                  |L1.14064|
0036f0  1c46              ADDS     r6,r0,#1
;;;2976   
;;;2977            png_ptr->irowbytes = (png_size_t)row_bytes;
0036f2  f8c4621c          STR      r6,[r4,#0x21c]
;;;2978            if((png_uint_32)png_ptr->irowbytes != row_bytes)
0036f6  f8d4021c          LDR      r0,[r4,#0x21c]
0036fa  42b0              CMP      r0,r6
0036fc  d00f              BEQ      |L1.14110|
;;;2979               png_error(png_ptr, "Rowbytes overflow in png_read_start_row");
0036fe  a152              ADR      r1,|L1.14408|
003700  4620              MOV      r0,r4
003702  f7fffffe          BL       png_error
003706  e00a              B        |L1.14110|
                  |L1.14088|
;;;2980      }
;;;2981      else
;;;2982      {
;;;2983         png_ptr->num_rows = png_ptr->height;
003708  f5047402          ADD      r4,r4,#0x208
00370c  6860              LDR      r0,[r4,#4]
00370e  60a0              STR      r0,[r4,#8]
;;;2984         png_ptr->iwidth = png_ptr->width;
003710  6820              LDR      r0,[r4,#0]
003712  61a0              STR      r0,[r4,#0x18]
;;;2985         png_ptr->irowbytes = png_ptr->rowbytes + 1;
003714  6920              LDR      r0,[r4,#0x10]
003716  1c40              ADDS     r0,r0,#1
003718  6160              STR      r0,[r4,#0x14]
00371a  f5a47402          SUB      r4,r4,#0x208
                  |L1.14110|
;;;2986      }
;;;2987      max_pixel_depth = png_ptr->pixel_depth;
00371e  f8945269          LDRB     r5,[r4,#0x269]
;;;2988   
;;;2989   #if defined(PNG_READ_PACK_SUPPORTED)
;;;2990      if ((png_ptr->transformations & PNG_PACK) && png_ptr->bit_depth < 8)
003722  f89401b0          LDRB     r0,[r4,#0x1b0]
003726  f0000004          AND      r0,r0,#4
00372a  b120              CBZ      r0,|L1.14134|
00372c  f8940267          LDRB     r0,[r4,#0x267]
003730  2808              CMP      r0,#8
003732  da00              BGE      |L1.14134|
;;;2991         max_pixel_depth = 8;
003734  2508              MOVS     r5,#8
                  |L1.14134|
;;;2992   #endif
;;;2993   
;;;2994   #if defined(PNG_READ_EXPAND_SUPPORTED)
;;;2995      if (png_ptr->transformations & PNG_EXPAND)
003736  f8b401b0          LDRH     r0,[r4,#0x1b0]
00373a  f4005080          AND      r0,r0,#0x1000
00373e  b300              CBZ      r0,|L1.14210|
;;;2996      {
;;;2997         if (png_ptr->color_type == PNG_COLOR_TYPE_PALETTE)
003740  f8940266          LDRB     r0,[r4,#0x266]
003744  2803              CMP      r0,#3
003746  d106              BNE      |L1.14166|
;;;2998         {
;;;2999            if (png_ptr->num_trans)
003748  f8b4025a          LDRH     r0,[r4,#0x25a]
00374c  b108              CBZ      r0,|L1.14162|
;;;3000               max_pixel_depth = 32;
00374e  2520              MOVS     r5,#0x20
003750  e017              B        |L1.14210|
                  |L1.14162|
;;;3001            else
;;;3002               max_pixel_depth = 24;
003752  2518              MOVS     r5,#0x18
003754  e015              B        |L1.14210|
                  |L1.14166|
;;;3003         }
;;;3004         else if (png_ptr->color_type == PNG_COLOR_TYPE_GRAY)
003756  f8940266          LDRB     r0,[r4,#0x266]
00375a  b938              CBNZ     r0,|L1.14188|
;;;3005         {
;;;3006            if (max_pixel_depth < 8)
00375c  2d08              CMP      r5,#8
00375e  da00              BGE      |L1.14178|
;;;3007               max_pixel_depth = 8;
003760  2508              MOVS     r5,#8
                  |L1.14178|
;;;3008            if (png_ptr->num_trans)
003762  f8b4025a          LDRH     r0,[r4,#0x25a]
003766  b160              CBZ      r0,|L1.14210|
;;;3009               max_pixel_depth *= 2;
003768  006d              LSLS     r5,r5,#1
00376a  e00a              B        |L1.14210|
                  |L1.14188|
;;;3010         }
;;;3011         else if (png_ptr->color_type == PNG_COLOR_TYPE_RGB)
00376c  f8940266          LDRB     r0,[r4,#0x266]
003770  2802              CMP      r0,#2
003772  d106              BNE      |L1.14210|
;;;3012         {
;;;3013            if (png_ptr->num_trans)
003774  f8b4025a          LDRH     r0,[r4,#0x25a]
003778  b118              CBZ      r0,|L1.14210|
;;;3014            {
;;;3015               max_pixel_depth *= 4;
00377a  00ad              LSLS     r5,r5,#2
;;;3016               max_pixel_depth /= 3;
00377c  2003              MOVS     r0,#3
00377e  fb95f5f0          SDIV     r5,r5,r0
                  |L1.14210|
;;;3017            }
;;;3018         }
;;;3019      }
;;;3020   #endif
;;;3021   
;;;3022   #if defined(PNG_READ_FILLER_SUPPORTED)
;;;3023      if (png_ptr->transformations & (PNG_FILLER))
003782  f8b401b0          LDRH     r0,[r4,#0x1b0]
003786  f4004000          AND      r0,r0,#0x8000
00378a  b128              CBZ      r0,|L1.14232|
;;;3024      {
;;;3025         if (png_ptr->color_type == PNG_COLOR_TYPE_PALETTE)
00378c  f8940266          LDRB     r0,[r4,#0x266]
003790  2803              CMP      r0,#3
003792  d16d              BNE      |L1.14448|
;;;3026            max_pixel_depth = 32;
003794  2520              MOVS     r5,#0x20
003796  e07d              B        |L1.14484|
                  |L1.14232|
003798  e07a              B        |L1.14480|
00379a  e069              B        |L1.14448|
                  |L1.14236|
00379c  49676e6f          DCB      "Ignoring bad adaptive filter type",0
0037a0  72696e67
0037a4  20626164
0037a8  20616461
0037ac  70746976
0037b0  65206669
0037b4  6c746572
0037b8  20747970
0037bc  6500    
0037be  00                DCB      0
0037bf  00                DCB      0
                  |L1.14272|
                          DCD      png_pass_inc
                  |L1.14276|
                          DCD      png_pass_start
                  |L1.14280|
                          DCD      png_pass_yinc
                  |L1.14284|
                          DCD      png_pass_ystart
                  |L1.14288|
                          DCD      png_IDAT
                  |L1.14292|
0037d4  4e6f7420          DCB      "Not enough image data",0
0037d8  656e6f75
0037dc  67682069
0037e0  6d616765
0037e4  20646174
0037e8  6100    
0037ea  00                DCB      0
0037eb  00                DCB      0
                  |L1.14316|
0037ec  45787472          DCB      "Extra compressed data",0
0037f0  6120636f
0037f4  6d707265
0037f8  73736564
0037fc  20646174
003800  6100    
003802  00                DCB      0
003803  00                DCB      0
                  |L1.14340|
003804  4465636f          DCB      "Decompression Error",0
003808  6d707265
00380c  7373696f
003810  6e204572
003814  726f7200
                  |L1.14360|
003818  45787472          DCB      "Extra compressed data.",0
00381c  6120636f
003820  6d707265
003824  73736564
003828  20646174
00382c  612e00  
00382f  00                DCB      0
                  |L1.14384|
003830  45787472          DCB      "Extra compression data",0
003834  6120636f
003838  6d707265
00383c  7373696f
003840  6e206461
003844  746100  
003847  00                DCB      0
                  |L1.14408|
003848  526f7762          DCB      "Rowbytes overflow in png_read_start_row",0
00384c  79746573
003850  206f7665
003854  72666c6f
003858  7720696e
00385c  20706e67
003860  5f726561
003864  645f7374
003868  6172745f
00386c  726f7700
                  |L1.14448|
;;;3027         else if (png_ptr->color_type == PNG_COLOR_TYPE_GRAY)
003870  f8940266          LDRB     r0,[r4,#0x266]
003874  b928              CBNZ     r0,|L1.14466|
;;;3028         {
;;;3029            if (max_pixel_depth <= 8)
003876  2d08              CMP      r5,#8
003878  dc01              BGT      |L1.14462|
;;;3030               max_pixel_depth = 16;
00387a  2510              MOVS     r5,#0x10
00387c  e00a              B        |L1.14484|
                  |L1.14462|
;;;3031            else
;;;3032               max_pixel_depth = 32;
00387e  2520              MOVS     r5,#0x20
003880  e008              B        |L1.14484|
                  |L1.14466|
;;;3033         }
;;;3034         else if (png_ptr->color_type == PNG_COLOR_TYPE_RGB)
003882  f8940266          LDRB     r0,[r4,#0x266]
003886  2802              CMP      r0,#2
003888  d104              BNE      |L1.14484|
;;;3035         {
;;;3036            if (max_pixel_depth <= 32)
00388a  2d20              CMP      r5,#0x20
00388c  dc01              BGT      |L1.14482|
;;;3037               max_pixel_depth = 32;
00388e  2520              MOVS     r5,#0x20
                  |L1.14480|
003890  e000              B        |L1.14484|
                  |L1.14482|
;;;3038            else
;;;3039               max_pixel_depth = 64;
003892  2540              MOVS     r5,#0x40
                  |L1.14484|
;;;3040         }
;;;3041      }
;;;3042   #endif
;;;3043   
;;;3044   #if defined(PNG_READ_GRAY_TO_RGB_SUPPORTED)
;;;3045      if (png_ptr->transformations & PNG_GRAY_TO_RGB)
003894  f8b401b0          LDRH     r0,[r4,#0x1b0]
003898  f4004080          AND      r0,r0,#0x4000
00389c  b1f8              CBZ      r0,|L1.14558|
;;;3046      {
;;;3047         if (
00389e  f8b4025a          LDRH     r0,[r4,#0x25a]
0038a2  b120              CBZ      r0,|L1.14510|
;;;3048   #if defined(PNG_READ_EXPAND_SUPPORTED)
;;;3049           (png_ptr->num_trans && (png_ptr->transformations & PNG_EXPAND)) ||
0038a4  f8b401b0          LDRH     r0,[r4,#0x1b0]
0038a8  f4005080          AND      r0,r0,#0x1000
0038ac  b940              CBNZ     r0,|L1.14528|
                  |L1.14510|
;;;3050   #endif
;;;3051   #if defined(PNG_READ_FILLER_SUPPORTED)
;;;3052           (png_ptr->transformations & (PNG_FILLER)) ||
0038ae  f8b401b0          LDRH     r0,[r4,#0x1b0]
0038b2  f4004000          AND      r0,r0,#0x8000
0038b6  b918              CBNZ     r0,|L1.14528|
;;;3053   #endif
;;;3054           png_ptr->color_type == PNG_COLOR_TYPE_GRAY_ALPHA)
0038b8  f8940266          LDRB     r0,[r4,#0x266]
0038bc  2804              CMP      r0,#4
0038be  d105              BNE      |L1.14540|
                  |L1.14528|
;;;3055         {
;;;3056            if (max_pixel_depth <= 16)
0038c0  2d10              CMP      r5,#0x10
0038c2  dc01              BGT      |L1.14536|
;;;3057               max_pixel_depth = 32;
0038c4  2520              MOVS     r5,#0x20
0038c6  e012              B        |L1.14574|
                  |L1.14536|
;;;3058            else
;;;3059               max_pixel_depth = 64;
0038c8  2540              MOVS     r5,#0x40
0038ca  e010              B        |L1.14574|
                  |L1.14540|
;;;3060         }
;;;3061         else
;;;3062         {
;;;3063            if (max_pixel_depth <= 8)
0038cc  2d08              CMP      r5,#8
0038ce  dc07              BGT      |L1.14560|
;;;3064              {
;;;3065                if (png_ptr->color_type == PNG_COLOR_TYPE_RGB_ALPHA)
0038d0  f8940266          LDRB     r0,[r4,#0x266]
0038d4  2806              CMP      r0,#6
0038d6  d101              BNE      |L1.14556|
;;;3066                  max_pixel_depth = 32;
0038d8  2520              MOVS     r5,#0x20
0038da  e008              B        |L1.14574|
                  |L1.14556|
;;;3067                else
;;;3068                  max_pixel_depth = 24;
0038dc  2518              MOVS     r5,#0x18
                  |L1.14558|
0038de  e006              B        |L1.14574|
                  |L1.14560|
;;;3069              }
;;;3070            else if (png_ptr->color_type == PNG_COLOR_TYPE_RGB_ALPHA)
0038e0  f8940266          LDRB     r0,[r4,#0x266]
0038e4  2806              CMP      r0,#6
0038e6  d101              BNE      |L1.14572|
;;;3071               max_pixel_depth = 64;
0038e8  2540              MOVS     r5,#0x40
0038ea  e000              B        |L1.14574|
                  |L1.14572|
;;;3072            else
;;;3073               max_pixel_depth = 48;
0038ec  2530              MOVS     r5,#0x30
                  |L1.14574|
;;;3074         }
;;;3075      }
;;;3076   #endif
;;;3077   
;;;3078   #if defined(PNG_READ_USER_TRANSFORM_SUPPORTED) && \
;;;3079   defined(PNG_USER_TRANSFORM_PTR_SUPPORTED)
;;;3080      if(png_ptr->transformations & PNG_USER_TRANSFORM)
0038ee  f8d401b0          LDR      r0,[r4,#0x1b0]
0038f2  f4001080          AND      r0,r0,#0x100000
0038f6  b148              CBZ      r0,|L1.14604|
;;;3081        {
;;;3082          int user_pixel_depth=png_ptr->user_transform_depth*
0038f8  f89411a4          LDRB     r1,[r4,#0x1a4]
0038fc  f89421a5          LDRB     r2,[r4,#0x1a5]
003900  fb01f002          MUL      r0,r1,r2
;;;3083            png_ptr->user_transform_channels;
;;;3084          if(user_pixel_depth > max_pixel_depth)
003904  42a8              CMP      r0,r5
003906  dd00              BLE      |L1.14602|
;;;3085            max_pixel_depth=user_pixel_depth;
003908  4605              MOV      r5,r0
                  |L1.14602|
;;;3086        }
00390a  bf00              NOP      
                  |L1.14604|
;;;3087   #endif
;;;3088   
;;;3089      /* align the width on the next larger 8 pixels.  Mainly used
;;;3090         for interlacing */
;;;3091      row_bytes = ((png_ptr->width + 7) & ~((png_uint_32)7));
00390c  f8d40208          LDR      r0,[r4,#0x208]
003910  1dc0              ADDS     r0,r0,#7
003912  f0200607          BIC      r6,r0,#7
;;;3092      /* calculate the maximum bytes needed, adding a byte and a pixel
;;;3093         for safety's sake */
;;;3094      row_bytes = PNG_ROWBYTES(max_pixel_depth,row_bytes) +
003916  2d08              CMP      r5,#8
003918  db02              BLT      |L1.14624|
00391a  08e8              LSRS     r0,r5,#3
00391c  4370              MULS     r0,r6,r0
00391e  e003              B        |L1.14632|
                  |L1.14624|
003920  fb06f005          MUL      r0,r6,r5
003924  1dc0              ADDS     r0,r0,#7
003926  08c0              LSRS     r0,r0,#3
                  |L1.14632|
003928  1c40              ADDS     r0,r0,#1
00392a  1de9              ADDS     r1,r5,#7
00392c  eb0006e1          ADD      r6,r0,r1,ASR #3
;;;3095         1 + ((max_pixel_depth + 7) >> 3);
;;;3096   #ifdef PNG_MAX_MALLOC_64K
;;;3097      if (row_bytes > (png_uint_32)65536L)
;;;3098         png_error(png_ptr, "This image requires a row greater than 64KB");
;;;3099   #endif
;;;3100      png_ptr->big_row_buf = (png_bytep)png_malloc(png_ptr, row_bytes+64);
003930  f1060140          ADD      r1,r6,#0x40
003934  4620              MOV      r0,r4
003936  f7fffffe          BL       png_malloc
00393a  f8c40388          STR      r0,[r4,#0x388]
;;;3101      png_ptr->row_buf = png_ptr->big_row_buf+32;
00393e  f8d40388          LDR      r0,[r4,#0x388]
003942  3020              ADDS     r0,r0,#0x20
003944  f8c4022c          STR      r0,[r4,#0x22c]
;;;3102   #if defined(PNG_DEBUG) && defined(PNG_USE_PNGGCCRD)
;;;3103      png_ptr->row_buf_size = row_bytes;
;;;3104   #endif
;;;3105   
;;;3106   #ifdef PNG_MAX_MALLOC_64K
;;;3107      if ((png_uint_32)png_ptr->rowbytes + 1 > (png_uint_32)65536L)
;;;3108         png_error(png_ptr, "This image requires a row greater than 64KB");
;;;3109   #endif
;;;3110      if ((png_uint_32)png_ptr->rowbytes > (png_uint_32)(PNG_SIZE_MAX - 1))
003948  f8d40218          LDR      r0,[r4,#0x218]
00394c  f1100f02          CMN      r0,#2
003950  d903              BLS      |L1.14682|
;;;3111         png_error(png_ptr, "Row has too many bytes to allocate in memory.");
003952  a10e              ADR      r1,|L1.14732|
003954  4620              MOV      r0,r4
003956  f7fffffe          BL       png_error
                  |L1.14682|
;;;3112      png_ptr->prev_row = (png_bytep)png_malloc(png_ptr, (png_uint_32)(
00395a  f8d40218          LDR      r0,[r4,#0x218]
00395e  1c41              ADDS     r1,r0,#1
003960  4620              MOV      r0,r4
003962  f7fffffe          BL       png_malloc
003966  f8c40228          STR      r0,[r4,#0x228]
;;;3113         png_ptr->rowbytes + 1));
;;;3114   
;;;3115      png_memset_check(png_ptr, png_ptr->prev_row, 0, png_ptr->rowbytes + 1);
00396a  f8d40218          LDR      r0,[r4,#0x218]
00396e  1c43              ADDS     r3,r0,#1
003970  2200              MOVS     r2,#0
003972  4620              MOV      r0,r4
003974  f8d41228          LDR      r1,[r4,#0x228]
003978  f7fffffe          BL       png_memset_check
;;;3116   
;;;3117      png_debug1(3, "width = %lu,\n", png_ptr->width);
;;;3118      png_debug1(3, "height = %lu,\n", png_ptr->height);
;;;3119      png_debug1(3, "iwidth = %lu,\n", png_ptr->iwidth);
;;;3120      png_debug1(3, "num_rows = %lu\n", png_ptr->num_rows);
;;;3121      png_debug1(3, "rowbytes = %lu,\n", png_ptr->rowbytes);
;;;3122      png_debug1(3, "irowbytes = %lu,\n", png_ptr->irowbytes);
;;;3123   
;;;3124      png_ptr->flags |= PNG_FLAG_ROW_INIT;
00397c  f8d401ac          LDR      r0,[r4,#0x1ac]
003980  f0400040          ORR      r0,r0,#0x40
003984  f8c401ac          STR      r0,[r4,#0x1ac]
;;;3125   }
003988  bd70              POP      {r4-r6,pc}
;;;3126   #endif /* PNG_READ_SUPPORTED */
                          ENDP

00398a  0000              DCW      0x0000
                  |L1.14732|
00398c  526f7720          DCB      "Row has too many bytes to allocate in memory.",0
003990  68617320
003994  746f6f20
003998  6d616e79
00399c  20627974
0039a0  65732074
0039a4  6f20616c
0039a8  6c6f6361
0039ac  74652069
0039b0  6e206d65
0039b4  6d6f7279
0039b8  2e00    
0039ba  00                DCB      0
0039bb  00                DCB      0

                          AREA ||.data||, DATA, ALIGN=0

                  msg
000000  4572726f          DCB      0x45,0x72,0x72,0x6f
000004  72206465          DCB      0x72,0x20,0x64,0x65
000008  636f6469          DCB      0x63,0x6f,0x64,0x69
00000c  6e672063          DCB      0x6e,0x67,0x20,0x63
000010  6f6d7072          DCB      0x6f,0x6d,0x70,0x72
000014  65737365          DCB      0x65,0x73,0x73,0x65
000018  64207465          DCB      0x64,0x20,0x74,0x65
00001c  787400            DCB      0x78,0x74,0x00
