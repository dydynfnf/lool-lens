; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\pngtrans.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\pngtrans.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\FWlib\inc -I.\user -I.\CM3 -I.\MALLOC -I.\TFT -I.\EMWIN\EMWIN_INC -I.\EMWIN\DEMO -I.\PNG -I.\FATFS -I.\SDIO -I.\USB\inc -I.\USBCFG\inc -IE:\material\GUI\8.STM32·Ü¶·°å-emwin+fatfs+usb\RTE -Id:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.0.0 -Id:\Keil_v5\ARM\CMSIS\Include -Id:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.0.0\Device\Include -D__UVISION_VERSION=514 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\pngtrans.crf PNG\pngtrans.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  png_set_bgr PROC
;;;17     void PNGAPI
;;;18     png_set_bgr(png_structp png_ptr)
000000  b900              CBNZ     r0,|L1.4|
                  |L1.2|
;;;19     {
;;;20        png_debug(1, "in png_set_bgr\n");
;;;21        if(png_ptr == NULL) return;
;;;22        png_ptr->transformations |= PNG_BGR;
;;;23     }
000002  4770              BX       lr
                  |L1.4|
000004  f8d011b0          LDR      r1,[r0,#0x1b0]        ;22
000008  f0410101          ORR      r1,r1,#1              ;22
00000c  f8c011b0          STR      r1,[r0,#0x1b0]        ;22
000010  bf00              NOP      
000012  e7f6              B        |L1.2|
;;;24     #endif
                          ENDP

                  png_set_swap PROC
;;;28     void PNGAPI
;;;29     png_set_swap(png_structp png_ptr)
000014  b900              CBNZ     r0,|L1.24|
                  |L1.22|
;;;30     {
;;;31        png_debug(1, "in png_set_swap\n");
;;;32        if(png_ptr == NULL) return;
;;;33        if (png_ptr->bit_depth == 16)
;;;34           png_ptr->transformations |= PNG_SWAP_BYTES;
;;;35     }
000016  4770              BX       lr
                  |L1.24|
000018  f8901267          LDRB     r1,[r0,#0x267]        ;33
00001c  2910              CMP      r1,#0x10              ;33
00001e  d105              BNE      |L1.44|
000020  f8d011b0          LDR      r1,[r0,#0x1b0]        ;34
000024  f0410110          ORR      r1,r1,#0x10           ;34
000028  f8c011b0          STR      r1,[r0,#0x1b0]        ;34
                  |L1.44|
00002c  bf00              NOP      
00002e  e7f2              B        |L1.22|
;;;36     #endif
                          ENDP

                  png_set_packing PROC
;;;40     void PNGAPI
;;;41     png_set_packing(png_structp png_ptr)
000030  b900              CBNZ     r0,|L1.52|
                  |L1.50|
;;;42     {
;;;43        png_debug(1, "in png_set_packing\n");
;;;44        if(png_ptr == NULL) return;
;;;45        if (png_ptr->bit_depth < 8)
;;;46        {
;;;47           png_ptr->transformations |= PNG_PACK;
;;;48           png_ptr->usr_bit_depth = 8;
;;;49        }
;;;50     }
000032  4770              BX       lr
                  |L1.52|
000034  f8901267          LDRB     r1,[r0,#0x267]        ;45
000038  2908              CMP      r1,#8                 ;45
00003a  da08              BGE      |L1.78|
00003c  f8d011b0          LDR      r1,[r0,#0x1b0]        ;47
000040  f0410104          ORR      r1,r1,#4              ;47
000044  f8c011b0          STR      r1,[r0,#0x1b0]        ;47
000048  2108              MOVS     r1,#8                 ;48
00004a  f8801268          STRB     r1,[r0,#0x268]        ;48
                  |L1.78|
00004e  bf00              NOP      
000050  e7ef              B        |L1.50|
;;;51     #endif
                          ENDP

                  png_set_packswap PROC
;;;55     void PNGAPI
;;;56     png_set_packswap(png_structp png_ptr)
000052  b900              CBNZ     r0,|L1.86|
                  |L1.84|
;;;57     {
;;;58        png_debug(1, "in png_set_packswap\n");
;;;59        if(png_ptr == NULL) return;
;;;60        if (png_ptr->bit_depth < 8)
;;;61           png_ptr->transformations |= PNG_PACKSWAP;
;;;62     }
000054  4770              BX       lr
                  |L1.86|
000056  f8901267          LDRB     r1,[r0,#0x267]        ;60
00005a  2908              CMP      r1,#8                 ;60
00005c  da05              BGE      |L1.106|
00005e  f8d011b0          LDR      r1,[r0,#0x1b0]        ;61
000062  f4413180          ORR      r1,r1,#0x10000        ;61
000066  f8c011b0          STR      r1,[r0,#0x1b0]        ;61
                  |L1.106|
00006a  bf00              NOP      
00006c  e7f2              B        |L1.84|
;;;63     #endif
                          ENDP

                  png_set_shift PROC
;;;66     void PNGAPI
;;;67     png_set_shift(png_structp png_ptr, png_color_8p true_bits)
00006e  b900              CBNZ     r0,|L1.114|
                  |L1.112|
;;;68     {
;;;69        png_debug(1, "in png_set_shift\n");
;;;70        if(png_ptr == NULL) return;
;;;71        png_ptr->transformations |= PNG_SHIFT;
;;;72        png_ptr->shift = *true_bits;
;;;73     }
000070  4770              BX       lr
                  |L1.114|
000072  f8d021b0          LDR      r2,[r0,#0x1b0]        ;71
000076  f0420208          ORR      r2,r2,#8              ;71
00007a  f8c021b0          STR      r2,[r0,#0x1b0]        ;71
00007e  680b              LDR      r3,[r1,#0]            ;72
000080  f24022c5          MOV      r2,#0x2c5             ;72
000084  f8c032c1          STR      r3,[r0,#0x2c1]        ;72
000088  790b              LDRB     r3,[r1,#4]            ;72
00008a  5413              STRB     r3,[r2,r0]            ;72
00008c  bf00              NOP      
00008e  e7ef              B        |L1.112|
;;;74     #endif
                          ENDP

                  png_set_interlace_handling PROC
;;;78     int PNGAPI
;;;79     png_set_interlace_handling(png_structp png_ptr)
000090  4601              MOV      r1,r0
;;;80     {
;;;81        png_debug(1, "in png_set_interlace handling\n");
;;;82        if (png_ptr && png_ptr->interlaced)
000092  b151              CBZ      r1,|L1.170|
000094  f8910263          LDRB     r0,[r1,#0x263]
000098  b138              CBZ      r0,|L1.170|
;;;83        {
;;;84           png_ptr->transformations |= PNG_INTERLACE;
00009a  f8d101b0          LDR      r0,[r1,#0x1b0]
00009e  f0400002          ORR      r0,r0,#2
0000a2  f8c101b0          STR      r0,[r1,#0x1b0]
;;;85           return (7);
0000a6  2007              MOVS     r0,#7
                  |L1.168|
;;;86        }
;;;87     
;;;88        return (1);
;;;89     }
0000a8  4770              BX       lr
                  |L1.170|
0000aa  2001              MOVS     r0,#1                 ;88
0000ac  e7fc              B        |L1.168|
;;;90     #endif
                          ENDP

                  png_set_filler PROC
;;;98     void PNGAPI
;;;99     png_set_filler(png_structp png_ptr, png_uint_32 filler, int filler_loc)
0000ae  b900              CBNZ     r0,|L1.178|
                  |L1.176|
;;;100    {
;;;101       png_debug(1, "in png_set_filler\n");
;;;102       if(png_ptr == NULL) return;
;;;103       png_ptr->transformations |= PNG_FILLER;
;;;104       png_ptr->filler = (png_byte)filler;
;;;105       if (filler_loc == PNG_FILLER_AFTER)
;;;106          png_ptr->flags |= PNG_FLAG_FILLER_AFTER;
;;;107       else
;;;108          png_ptr->flags &= ~PNG_FLAG_FILLER_AFTER;
;;;109    
;;;110       /* This should probably go in the "do_read_filler" routine.
;;;111        * I attempted to do that in libpng-1.0.1a but that caused problems
;;;112        * so I restored it in libpng-1.0.2a
;;;113       */
;;;114    
;;;115       if (png_ptr->color_type == PNG_COLOR_TYPE_RGB)
;;;116       {
;;;117          png_ptr->usr_channels = 4;
;;;118       }
;;;119    
;;;120       /* Also I added this in libpng-1.0.2a (what happens when we expand
;;;121        * a less-than-8-bit grayscale to GA? */
;;;122    
;;;123       if (png_ptr->color_type == PNG_COLOR_TYPE_GRAY && png_ptr->bit_depth >= 8)
;;;124       {
;;;125          png_ptr->usr_channels = 2;
;;;126       }
;;;127    }
0000b0  4770              BX       lr
                  |L1.178|
0000b2  f8d031b0          LDR      r3,[r0,#0x1b0]        ;103
0000b6  f4434300          ORR      r3,r3,#0x8000         ;103
0000ba  f8c031b0          STR      r3,[r0,#0x1b0]        ;103
0000be  b2cb              UXTB     r3,r1                 ;104
0000c0  f8a0326e          STRH     r3,[r0,#0x26e]        ;104
0000c4  2a01              CMP      r2,#1                 ;105
0000c6  d106              BNE      |L1.214|
0000c8  f8d031ac          LDR      r3,[r0,#0x1ac]        ;106
0000cc  f0430380          ORR      r3,r3,#0x80           ;106
0000d0  f8c031ac          STR      r3,[r0,#0x1ac]        ;106
0000d4  e005              B        |L1.226|
                  |L1.214|
0000d6  f8d031ac          LDR      r3,[r0,#0x1ac]        ;108
0000da  f0230380          BIC      r3,r3,#0x80           ;108
0000de  f8c031ac          STR      r3,[r0,#0x1ac]        ;108
                  |L1.226|
0000e2  f8903266          LDRB     r3,[r0,#0x266]        ;115
0000e6  2b02              CMP      r3,#2                 ;115
0000e8  d102              BNE      |L1.240|
0000ea  2304              MOVS     r3,#4                 ;117
0000ec  f880326b          STRB     r3,[r0,#0x26b]        ;117
                  |L1.240|
0000f0  f8903266          LDRB     r3,[r0,#0x266]        ;123
0000f4  b933              CBNZ     r3,|L1.260|
0000f6  f8903267          LDRB     r3,[r0,#0x267]        ;123
0000fa  2b08              CMP      r3,#8                 ;123
0000fc  db02              BLT      |L1.260|
0000fe  2302              MOVS     r3,#2                 ;125
000100  f880326b          STRB     r3,[r0,#0x26b]        ;125
                  |L1.260|
000104  bf00              NOP      
000106  e7d3              B        |L1.176|
;;;128    
                          ENDP

                  png_set_add_alpha PROC
;;;131    void PNGAPI
;;;132    png_set_add_alpha(png_structp png_ptr, png_uint_32 filler, int filler_loc)
000108  b570              PUSH     {r4-r6,lr}
;;;133    {
00010a  4604              MOV      r4,r0
00010c  460d              MOV      r5,r1
00010e  4616              MOV      r6,r2
;;;134       png_debug(1, "in png_set_add_alpha\n");
;;;135       if(png_ptr == NULL) return;
000110  b904              CBNZ     r4,|L1.276|
                  |L1.274|
;;;136       png_set_filler(png_ptr, filler, filler_loc);
;;;137       png_ptr->transformations |= PNG_ADD_ALPHA;
;;;138    }
000112  bd70              POP      {r4-r6,pc}
                  |L1.276|
000114  4632              MOV      r2,r6                 ;136
000116  4629              MOV      r1,r5                 ;136
000118  4620              MOV      r0,r4                 ;136
00011a  f7fffffe          BL       png_set_filler
00011e  f8d401b0          LDR      r0,[r4,#0x1b0]        ;137
000122  f0407080          ORR      r0,r0,#0x1000000      ;137
000126  f8c401b0          STR      r0,[r4,#0x1b0]        ;137
00012a  bf00              NOP      
00012c  e7f1              B        |L1.274|
;;;139    #endif
                          ENDP

                  png_set_swap_alpha PROC
;;;145    void PNGAPI
;;;146    png_set_swap_alpha(png_structp png_ptr)
00012e  b900              CBNZ     r0,|L1.306|
                  |L1.304|
;;;147    {
;;;148       png_debug(1, "in png_set_swap_alpha\n");
;;;149       if(png_ptr == NULL) return;
;;;150       png_ptr->transformations |= PNG_SWAP_ALPHA;
;;;151    }
000130  4770              BX       lr
                  |L1.306|
000132  f8d011b0          LDR      r1,[r0,#0x1b0]        ;150
000136  f4413100          ORR      r1,r1,#0x20000        ;150
00013a  f8c011b0          STR      r1,[r0,#0x1b0]        ;150
00013e  bf00              NOP      
000140  e7f6              B        |L1.304|
;;;152    #endif
                          ENDP

                  png_set_invert_alpha PROC
;;;156    void PNGAPI
;;;157    png_set_invert_alpha(png_structp png_ptr)
000142  b900              CBNZ     r0,|L1.326|
                  |L1.324|
;;;158    {
;;;159       png_debug(1, "in png_set_invert_alpha\n");
;;;160       if(png_ptr == NULL) return;
;;;161       png_ptr->transformations |= PNG_INVERT_ALPHA;
;;;162    }
000144  4770              BX       lr
                  |L1.326|
000146  f8d011b0          LDR      r1,[r0,#0x1b0]        ;161
00014a  f4412100          ORR      r1,r1,#0x80000        ;161
00014e  f8c011b0          STR      r1,[r0,#0x1b0]        ;161
000152  bf00              NOP      
000154  e7f6              B        |L1.324|
;;;163    #endif
                          ENDP

                  png_set_invert_mono PROC
;;;166    void PNGAPI
;;;167    png_set_invert_mono(png_structp png_ptr)
000156  b900              CBNZ     r0,|L1.346|
                  |L1.344|
;;;168    {
;;;169       png_debug(1, "in png_set_invert_mono\n");
;;;170       if(png_ptr == NULL) return;
;;;171       png_ptr->transformations |= PNG_INVERT_MONO;
;;;172    }
000158  4770              BX       lr
                  |L1.346|
00015a  f8d011b0          LDR      r1,[r0,#0x1b0]        ;171
00015e  f0410120          ORR      r1,r1,#0x20           ;171
000162  f8c011b0          STR      r1,[r0,#0x1b0]        ;171
000166  bf00              NOP      
000168  e7f6              B        |L1.344|
;;;173    
                          ENDP

                  png_do_invert PROC
;;;175    void /* PRIVATE */
;;;176    png_do_invert(png_row_infop row_info, png_bytep row)
00016a  b530              PUSH     {r4,r5,lr}
;;;177    {
00016c  460a              MOV      r2,r1
;;;178       png_debug(1, "in png_do_invert\n");
;;;179      /* This test removed from libpng version 1.0.13 and 1.2.0:
;;;180       *   if (row_info->bit_depth == 1 &&
;;;181       */
;;;182    #if defined(PNG_USELESS_TESTS_SUPPORTED)
;;;183       if (row == NULL || row_info == NULL)
;;;184         return;
;;;185    #endif
;;;186       if (row_info->color_type == PNG_COLOR_TYPE_GRAY)
00016e  7a01              LDRB     r1,[r0,#8]
000170  b959              CBNZ     r1,|L1.394|
;;;187       {
;;;188          png_bytep rp = row;
000172  4611              MOV      r1,r2
;;;189          png_uint_32 i;
;;;190          png_uint_32 istop = row_info->rowbytes;
000174  6844              LDR      r4,[r0,#4]
;;;191    
;;;192          for (i = 0; i < istop; i++)
000176  2300              MOVS     r3,#0
000178  e004              B        |L1.388|
                  |L1.378|
;;;193          {
;;;194             *rp = (png_byte)(~(*rp));
00017a  780d              LDRB     r5,[r1,#0]
00017c  43ed              MVNS     r5,r5
00017e  700d              STRB     r5,[r1,#0]
;;;195             rp++;
000180  1c49              ADDS     r1,r1,#1
000182  1c5b              ADDS     r3,r3,#1              ;192
                  |L1.388|
000184  42a3              CMP      r3,r4                 ;192
000186  d3f8              BCC      |L1.378|
;;;196          }
;;;197       }
000188  e026              B        |L1.472|
                  |L1.394|
;;;198       else if (row_info->color_type == PNG_COLOR_TYPE_GRAY_ALPHA &&
00018a  7a01              LDRB     r1,[r0,#8]
00018c  2904              CMP      r1,#4
00018e  d10e              BNE      |L1.430|
;;;199          row_info->bit_depth == 8)
000190  7a41              LDRB     r1,[r0,#9]
000192  2908              CMP      r1,#8
000194  d10b              BNE      |L1.430|
;;;200       {
;;;201          png_bytep rp = row;
000196  4611              MOV      r1,r2
;;;202          png_uint_32 i;
;;;203          png_uint_32 istop = row_info->rowbytes;
000198  6844              LDR      r4,[r0,#4]
;;;204    
;;;205          for (i = 0; i < istop; i+=2)
00019a  2300              MOVS     r3,#0
00019c  e004              B        |L1.424|
                  |L1.414|
;;;206          {
;;;207             *rp = (png_byte)(~(*rp));
00019e  780d              LDRB     r5,[r1,#0]
0001a0  43ed              MVNS     r5,r5
0001a2  700d              STRB     r5,[r1,#0]
;;;208             rp+=2;
0001a4  1c89              ADDS     r1,r1,#2
0001a6  1c9b              ADDS     r3,r3,#2              ;205
                  |L1.424|
0001a8  42a3              CMP      r3,r4                 ;205
0001aa  d3f8              BCC      |L1.414|
;;;209          }
;;;210       }
0001ac  e014              B        |L1.472|
                  |L1.430|
;;;211       else if (row_info->color_type == PNG_COLOR_TYPE_GRAY_ALPHA &&
0001ae  7a01              LDRB     r1,[r0,#8]
0001b0  2904              CMP      r1,#4
0001b2  d111              BNE      |L1.472|
;;;212          row_info->bit_depth == 16)
0001b4  7a41              LDRB     r1,[r0,#9]
0001b6  2910              CMP      r1,#0x10
0001b8  d10e              BNE      |L1.472|
;;;213       {
;;;214          png_bytep rp = row;
0001ba  4611              MOV      r1,r2
;;;215          png_uint_32 i;
;;;216          png_uint_32 istop = row_info->rowbytes;
0001bc  6844              LDR      r4,[r0,#4]
;;;217    
;;;218          for (i = 0; i < istop; i+=4)
0001be  2300              MOVS     r3,#0
0001c0  e007              B        |L1.466|
                  |L1.450|
;;;219          {
;;;220             *rp = (png_byte)(~(*rp));
0001c2  780d              LDRB     r5,[r1,#0]
0001c4  43ed              MVNS     r5,r5
0001c6  700d              STRB     r5,[r1,#0]
;;;221             *(rp+1) = (png_byte)(~(*(rp+1)));
0001c8  784d              LDRB     r5,[r1,#1]
0001ca  43ed              MVNS     r5,r5
0001cc  704d              STRB     r5,[r1,#1]
;;;222             rp+=4;
0001ce  1d09              ADDS     r1,r1,#4
0001d0  1d1b              ADDS     r3,r3,#4              ;218
                  |L1.466|
0001d2  42a3              CMP      r3,r4                 ;218
0001d4  d3f5              BCC      |L1.450|
;;;223          }
;;;224       }
0001d6  bf00              NOP      
                  |L1.472|
;;;225    }
0001d8  bd30              POP      {r4,r5,pc}
;;;226    #endif
                          ENDP

                  png_do_swap PROC
;;;230    void /* PRIVATE */
;;;231    png_do_swap(png_row_infop row_info, png_bytep row)
0001da  b570              PUSH     {r4-r6,lr}
;;;232    {
0001dc  4602              MOV      r2,r0
;;;233       png_debug(1, "in png_do_swap\n");
;;;234       if (
0001de  7a50              LDRB     r0,[r2,#9]
0001e0  2810              CMP      r0,#0x10
0001e2  d10f              BNE      |L1.516|
;;;235    #if defined(PNG_USELESS_TESTS_SUPPORTED)
;;;236           row != NULL && row_info != NULL &&
;;;237    #endif
;;;238           row_info->bit_depth == 16)
;;;239       {
;;;240          png_bytep rp = row;
0001e4  4608              MOV      r0,r1
;;;241          png_uint_32 i;
;;;242          png_uint_32 istop= row_info->width * row_info->channels;
0001e6  7a96              LDRB     r6,[r2,#0xa]
0001e8  6815              LDR      r5,[r2,#0]
0001ea  fb05f406          MUL      r4,r5,r6
;;;243    
;;;244          for (i = 0; i < istop; i++, rp += 2)
0001ee  2300              MOVS     r3,#0
0001f0  e005              B        |L1.510|
                  |L1.498|
;;;245          {
;;;246             png_byte t = *rp;
0001f2  7805              LDRB     r5,[r0,#0]
;;;247             *rp = *(rp + 1);
0001f4  7846              LDRB     r6,[r0,#1]
0001f6  7006              STRB     r6,[r0,#0]
;;;248             *(rp + 1) = t;
0001f8  7045              STRB     r5,[r0,#1]
0001fa  1c5b              ADDS     r3,r3,#1              ;244
0001fc  1c80              ADDS     r0,r0,#2              ;244
                  |L1.510|
0001fe  42a3              CMP      r3,r4                 ;244
000200  d3f7              BCC      |L1.498|
;;;249          }
;;;250       }
000202  bf00              NOP      
                  |L1.516|
;;;251    }
000204  bd70              POP      {r4-r6,pc}
;;;252    #endif
                          ENDP

                  png_do_packswap PROC
;;;361    void /* PRIVATE */
;;;362    png_do_packswap(png_row_infop row_info, png_bytep row)
000206  b530              PUSH     {r4,r5,lr}
;;;363    {
000208  460b              MOV      r3,r1
;;;364       png_debug(1, "in png_do_packswap\n");
;;;365       if (
00020a  7a41              LDRB     r1,[r0,#9]
00020c  2908              CMP      r1,#8
00020e  da1a              BGE      |L1.582|
;;;366    #if defined(PNG_USELESS_TESTS_SUPPORTED)
;;;367           row != NULL && row_info != NULL &&
;;;368    #endif
;;;369           row_info->bit_depth < 8)
;;;370       {
;;;371          png_bytep rp, end, table;
;;;372    
;;;373          end = row + row_info->rowbytes;
000210  6845              LDR      r5,[r0,#4]
000212  18ec              ADDS     r4,r5,r3
;;;374    
;;;375          if (row_info->bit_depth == 1)
000214  7a45              LDRB     r5,[r0,#9]
000216  2d01              CMP      r5,#1
000218  d101              BNE      |L1.542|
;;;376             table = (png_bytep)onebppswaptable;
00021a  4ab6              LDR      r2,|L1.1268|
00021c  e00a              B        |L1.564|
                  |L1.542|
;;;377          else if (row_info->bit_depth == 2)
00021e  7a45              LDRB     r5,[r0,#9]
000220  2d02              CMP      r5,#2
000222  d101              BNE      |L1.552|
;;;378             table = (png_bytep)twobppswaptable;
000224  4ab4              LDR      r2,|L1.1272|
000226  e005              B        |L1.564|
                  |L1.552|
;;;379          else if (row_info->bit_depth == 4)
000228  7a45              LDRB     r5,[r0,#9]
00022a  2d04              CMP      r5,#4
00022c  d101              BNE      |L1.562|
;;;380             table = (png_bytep)fourbppswaptable;
00022e  4ab3              LDR      r2,|L1.1276|
000230  e000              B        |L1.564|
                  |L1.562|
;;;381          else
;;;382             return;
;;;383    
;;;384          for (rp = row; rp < end; rp++)
;;;385             *rp = table[*rp];
;;;386       }
;;;387    }
000232  bd30              POP      {r4,r5,pc}
                  |L1.564|
000234  4619              MOV      r1,r3                 ;384
000236  e003              B        |L1.576|
                  |L1.568|
000238  780d              LDRB     r5,[r1,#0]            ;385
00023a  5d55              LDRB     r5,[r2,r5]            ;385
00023c  700d              STRB     r5,[r1,#0]            ;385
00023e  1c49              ADDS     r1,r1,#1              ;384
                  |L1.576|
000240  42a1              CMP      r1,r4                 ;384
000242  d3f9              BCC      |L1.568|
000244  bf00              NOP                            ;386
                  |L1.582|
000246  bf00              NOP      
000248  e7f3              B        |L1.562|
;;;388    #endif /* PNG_READ_PACKSWAP_SUPPORTED or PNG_WRITE_PACKSWAP_SUPPORTED */
                          ENDP

                  png_do_strip_filler PROC
;;;393    void /* PRIVATE */
;;;394    png_do_strip_filler(png_row_infop row_info, png_bytep row, png_uint_32 flags)
00024a  b5f0              PUSH     {r4-r7,lr}
;;;395    {
00024c  4603              MOV      r3,r0
00024e  460e              MOV      r6,r1
000250  4615              MOV      r5,r2
;;;396       png_debug(1, "in png_do_strip_filler\n");
;;;397    #if defined(PNG_USELESS_TESTS_SUPPORTED)
;;;398       if (row != NULL && row_info != NULL)
;;;399    #endif
;;;400       {
;;;401          png_bytep sp=row;
000252  4630              MOV      r0,r6
;;;402          png_bytep dp=row;
000254  4631              MOV      r1,r6
;;;403          png_uint_32 row_width=row_info->width;
000256  681c              LDR      r4,[r3,#0]
;;;404          png_uint_32 i;
;;;405    
;;;406          if ((row_info->color_type == PNG_COLOR_TYPE_RGB ||
000258  7a1f              LDRB     r7,[r3,#8]
00025a  2f02              CMP      r7,#2
00025c  d006              BEQ      |L1.620|
;;;407             (row_info->color_type == PNG_COLOR_TYPE_RGB_ALPHA &&
00025e  7a1f              LDRB     r7,[r3,#8]
000260  2f06              CMP      r7,#6
000262  d17d              BNE      |L1.864|
;;;408             (flags & PNG_FLAG_STRIP_ALPHA))) &&
000264  f4050780          AND      r7,r5,#0x400000
000268  2f00              CMP      r7,#0
00026a  d079              BEQ      |L1.864|
                  |L1.620|
;;;409             row_info->channels == 4)
00026c  7a9f              LDRB     r7,[r3,#0xa]
00026e  2f04              CMP      r7,#4
000270  d17f              BNE      |L1.882|
;;;410          {
;;;411             if (row_info->bit_depth == 8)
000272  7a5f              LDRB     r7,[r3,#9]
000274  2f08              CMP      r7,#8
000276  d12f              BNE      |L1.728|
;;;412             {
;;;413                /* This converts from RGBX or RGBA to RGB */
;;;414                if (flags & PNG_FLAG_FILLER_AFTER)
000278  f0050780          AND      r7,r5,#0x80
00027c  b1a7              CBZ      r7,|L1.680|
;;;415                {
;;;416                   dp+=3; sp+=4;
00027e  1cc9              ADDS     r1,r1,#3
000280  1d00              ADDS     r0,r0,#4
;;;417                   for (i = 1; i < row_width; i++)
000282  2201              MOVS     r2,#1
000284  e00d              B        |L1.674|
                  |L1.646|
;;;418                   {
;;;419                      *dp++ = *sp++;
000286  f8107b01          LDRB     r7,[r0],#1
00028a  f8017b01          STRB     r7,[r1],#1
;;;420                      *dp++ = *sp++;
00028e  f8107b01          LDRB     r7,[r0],#1
000292  f8017b01          STRB     r7,[r1],#1
;;;421                      *dp++ = *sp++;
000296  f8107b01          LDRB     r7,[r0],#1
00029a  f8017b01          STRB     r7,[r1],#1
;;;422                      sp++;
00029e  1c40              ADDS     r0,r0,#1
0002a0  1c52              ADDS     r2,r2,#1              ;417
                  |L1.674|
0002a2  42a2              CMP      r2,r4                 ;417
0002a4  d3ef              BCC      |L1.646|
0002a6  e011              B        |L1.716|
                  |L1.680|
;;;423                   }
;;;424                }
;;;425                /* This converts from XRGB or ARGB to RGB */
;;;426                else
;;;427                {
;;;428                   for (i = 0; i < row_width; i++)
0002a8  2200              MOVS     r2,#0
0002aa  e00d              B        |L1.712|
                  |L1.684|
;;;429                   {
;;;430                      sp++;
0002ac  1c40              ADDS     r0,r0,#1
;;;431                      *dp++ = *sp++;
0002ae  f8107b01          LDRB     r7,[r0],#1
0002b2  f8017b01          STRB     r7,[r1],#1
;;;432                      *dp++ = *sp++;
0002b6  f8107b01          LDRB     r7,[r0],#1
0002ba  f8017b01          STRB     r7,[r1],#1
;;;433                      *dp++ = *sp++;
0002be  f8107b01          LDRB     r7,[r0],#1
0002c2  f8017b01          STRB     r7,[r1],#1
0002c6  1c52              ADDS     r2,r2,#1              ;428
                  |L1.712|
0002c8  42a2              CMP      r2,r4                 ;428
0002ca  d3ef              BCC      |L1.684|
                  |L1.716|
;;;434                   }
;;;435                }
;;;436                row_info->pixel_depth = 24;
0002cc  2718              MOVS     r7,#0x18
0002ce  72df              STRB     r7,[r3,#0xb]
;;;437                row_info->rowbytes = row_width * 3;
0002d0  eb040744          ADD      r7,r4,r4,LSL #1
0002d4  605f              STR      r7,[r3,#4]
0002d6  e049              B        |L1.876|
                  |L1.728|
;;;438             }
;;;439             else /* if (row_info->bit_depth == 16) */
;;;440             {
;;;441                if (flags & PNG_FLAG_FILLER_AFTER)
0002d8  f0050780          AND      r7,r5,#0x80
0002dc  b307              CBZ      r7,|L1.800|
;;;442                {
;;;443                   /* This converts from RRGGBBXX or RRGGBBAA to RRGGBB */
;;;444                   sp += 8; dp += 6;
0002de  3008              ADDS     r0,r0,#8
0002e0  1d89              ADDS     r1,r1,#6
;;;445                   for (i = 1; i < row_width; i++)
0002e2  2201              MOVS     r2,#1
0002e4  e019              B        |L1.794|
                  |L1.742|
;;;446                   {
;;;447                      /* This could be (although png_memcpy is probably slower):
;;;448                      png_memcpy(dp, sp, 6);
;;;449                      sp += 8;
;;;450                      dp += 6;
;;;451                      */
;;;452    
;;;453                      *dp++ = *sp++;
0002e6  f8107b01          LDRB     r7,[r0],#1
0002ea  f8017b01          STRB     r7,[r1],#1
;;;454                      *dp++ = *sp++;
0002ee  f8107b01          LDRB     r7,[r0],#1
0002f2  f8017b01          STRB     r7,[r1],#1
;;;455                      *dp++ = *sp++;
0002f6  f8107b01          LDRB     r7,[r0],#1
0002fa  f8017b01          STRB     r7,[r1],#1
;;;456                      *dp++ = *sp++;
0002fe  f8107b01          LDRB     r7,[r0],#1
000302  f8017b01          STRB     r7,[r1],#1
;;;457                      *dp++ = *sp++;
000306  f8107b01          LDRB     r7,[r0],#1
00030a  f8017b01          STRB     r7,[r1],#1
;;;458                      *dp++ = *sp++;
00030e  f8107b01          LDRB     r7,[r0],#1
000312  f8017b01          STRB     r7,[r1],#1
;;;459                      sp += 2;
000316  1c80              ADDS     r0,r0,#2
000318  1c52              ADDS     r2,r2,#1              ;445
                  |L1.794|
00031a  42a2              CMP      r2,r4                 ;445
00031c  d3e3              BCC      |L1.742|
00031e  e01d              B        |L1.860|
                  |L1.800|
;;;460                   }
;;;461                }
;;;462                else
;;;463                {
;;;464                   /* This converts from XXRRGGBB or AARRGGBB to RRGGBB */
;;;465                   for (i = 0; i < row_width; i++)
000320  2200              MOVS     r2,#0
000322  e019              B        |L1.856|
                  |L1.804|
;;;466                   {
;;;467                      /* This could be (although png_memcpy is probably slower):
;;;468                      png_memcpy(dp, sp, 6);
;;;469                      sp += 8;
;;;470                      dp += 6;
;;;471                      */
;;;472    
;;;473                      sp+=2;
000324  1c80              ADDS     r0,r0,#2
;;;474                      *dp++ = *sp++;
000326  f8107b01          LDRB     r7,[r0],#1
00032a  f8017b01          STRB     r7,[r1],#1
;;;475                      *dp++ = *sp++;
00032e  f8107b01          LDRB     r7,[r0],#1
000332  f8017b01          STRB     r7,[r1],#1
;;;476                      *dp++ = *sp++;
000336  f8107b01          LDRB     r7,[r0],#1
00033a  f8017b01          STRB     r7,[r1],#1
;;;477                      *dp++ = *sp++;
00033e  f8107b01          LDRB     r7,[r0],#1
000342  f8017b01          STRB     r7,[r1],#1
;;;478                      *dp++ = *sp++;
000346  f8107b01          LDRB     r7,[r0],#1
00034a  f8017b01          STRB     r7,[r1],#1
;;;479                      *dp++ = *sp++;
00034e  f8107b01          LDRB     r7,[r0],#1
000352  f8017b01          STRB     r7,[r1],#1
000356  1c52              ADDS     r2,r2,#1              ;465
                  |L1.856|
000358  42a2              CMP      r2,r4                 ;465
00035a  d3e3              BCC      |L1.804|
                  |L1.860|
;;;480                   }
;;;481                }
;;;482                row_info->pixel_depth = 48;
00035c  2730              MOVS     r7,#0x30
00035e  e000              B        |L1.866|
                  |L1.864|
000360  e007              B        |L1.882|
                  |L1.866|
000362  72df              STRB     r7,[r3,#0xb]
;;;483                row_info->rowbytes = row_width * 6;
000364  eb040744          ADD      r7,r4,r4,LSL #1
000368  007f              LSLS     r7,r7,#1
00036a  605f              STR      r7,[r3,#4]
                  |L1.876|
;;;484             }
;;;485             row_info->channels = 3;
00036c  2703              MOVS     r7,#3
00036e  729f              STRB     r7,[r3,#0xa]
000370  e052              B        |L1.1048|
                  |L1.882|
;;;486          }
;;;487          else if ((row_info->color_type == PNG_COLOR_TYPE_GRAY ||
000372  7a1f              LDRB     r7,[r3,#8]
000374  b137              CBZ      r7,|L1.900|
;;;488             (row_info->color_type == PNG_COLOR_TYPE_GRAY_ALPHA &&
000376  7a1f              LDRB     r7,[r3,#8]
000378  2f04              CMP      r7,#4
00037a  d14d              BNE      |L1.1048|
;;;489             (flags & PNG_FLAG_STRIP_ALPHA))) &&
00037c  f4050780          AND      r7,r5,#0x400000
000380  2f00              CMP      r7,#0
000382  d049              BEQ      |L1.1048|
                  |L1.900|
;;;490              row_info->channels == 2)
000384  7a9f              LDRB     r7,[r3,#0xa]
000386  2f02              CMP      r7,#2
000388  d146              BNE      |L1.1048|
;;;491          {
;;;492             if (row_info->bit_depth == 8)
00038a  7a5f              LDRB     r7,[r3,#9]
00038c  2f08              CMP      r7,#8
00038e  d11b              BNE      |L1.968|
;;;493             {
;;;494                /* This converts from GX or GA to G */
;;;495                if (flags & PNG_FLAG_FILLER_AFTER)
000390  f0050780          AND      r7,r5,#0x80
000394  b157              CBZ      r7,|L1.940|
;;;496                {
;;;497                   for (i = 0; i < row_width; i++)
000396  2200              MOVS     r2,#0
000398  e005              B        |L1.934|
                  |L1.922|
;;;498                   {
;;;499                      *dp++ = *sp++;
00039a  f8107b01          LDRB     r7,[r0],#1
00039e  f8017b01          STRB     r7,[r1],#1
;;;500                      sp++;
0003a2  1c40              ADDS     r0,r0,#1
0003a4  1c52              ADDS     r2,r2,#1              ;497
                  |L1.934|
0003a6  42a2              CMP      r2,r4                 ;497
0003a8  d3f7              BCC      |L1.922|
0003aa  e009              B        |L1.960|
                  |L1.940|
;;;501                   }
;;;502                }
;;;503                /* This converts from XG or AG to G */
;;;504                else
;;;505                {
;;;506                   for (i = 0; i < row_width; i++)
0003ac  2200              MOVS     r2,#0
0003ae  e005              B        |L1.956|
                  |L1.944|
;;;507                   {
;;;508                      sp++;
0003b0  1c40              ADDS     r0,r0,#1
;;;509                      *dp++ = *sp++;
0003b2  f8107b01          LDRB     r7,[r0],#1
0003b6  f8017b01          STRB     r7,[r1],#1
0003ba  1c52              ADDS     r2,r2,#1              ;506
                  |L1.956|
0003bc  42a2              CMP      r2,r4                 ;506
0003be  d3f7              BCC      |L1.944|
                  |L1.960|
;;;510                   }
;;;511                }
;;;512                row_info->pixel_depth = 8;
0003c0  2708              MOVS     r7,#8
0003c2  72df              STRB     r7,[r3,#0xb]
;;;513                row_info->rowbytes = row_width;
0003c4  605c              STR      r4,[r3,#4]
0003c6  e025              B        |L1.1044|
                  |L1.968|
;;;514             }
;;;515             else /* if (row_info->bit_depth == 16) */
;;;516             {
;;;517                if (flags & PNG_FLAG_FILLER_AFTER)
0003c8  f0050780          AND      r7,r5,#0x80
0003cc  b187              CBZ      r7,|L1.1008|
;;;518                {
;;;519                   /* This converts from GGXX or GGAA to GG */
;;;520                   sp += 4; dp += 2;
0003ce  1d00              ADDS     r0,r0,#4
0003d0  1c89              ADDS     r1,r1,#2
;;;521                   for (i = 1; i < row_width; i++)
0003d2  2201              MOVS     r2,#1
0003d4  e009              B        |L1.1002|
                  |L1.982|
;;;522                   {
;;;523                      *dp++ = *sp++;
0003d6  f8107b01          LDRB     r7,[r0],#1
0003da  f8017b01          STRB     r7,[r1],#1
;;;524                      *dp++ = *sp++;
0003de  f8107b01          LDRB     r7,[r0],#1
0003e2  f8017b01          STRB     r7,[r1],#1
;;;525                      sp += 2;
0003e6  1c80              ADDS     r0,r0,#2
0003e8  1c52              ADDS     r2,r2,#1              ;521
                  |L1.1002|
0003ea  42a2              CMP      r2,r4                 ;521
0003ec  d3f3              BCC      |L1.982|
0003ee  e00d              B        |L1.1036|
                  |L1.1008|
;;;526                   }
;;;527                }
;;;528                else
;;;529                {
;;;530                   /* This converts from XXGG or AAGG to GG */
;;;531                   for (i = 0; i < row_width; i++)
0003f0  2200              MOVS     r2,#0
0003f2  e009              B        |L1.1032|
                  |L1.1012|
;;;532                   {
;;;533                      sp += 2;
0003f4  1c80              ADDS     r0,r0,#2
;;;534                      *dp++ = *sp++;
0003f6  f8107b01          LDRB     r7,[r0],#1
0003fa  f8017b01          STRB     r7,[r1],#1
;;;535                      *dp++ = *sp++;
0003fe  f8107b01          LDRB     r7,[r0],#1
000402  f8017b01          STRB     r7,[r1],#1
000406  1c52              ADDS     r2,r2,#1              ;531
                  |L1.1032|
000408  42a2              CMP      r2,r4                 ;531
00040a  d3f3              BCC      |L1.1012|
                  |L1.1036|
;;;536                   }
;;;537                }
;;;538                row_info->pixel_depth = 16;
00040c  2710              MOVS     r7,#0x10
00040e  72df              STRB     r7,[r3,#0xb]
;;;539                row_info->rowbytes = row_width * 2;
000410  0067              LSLS     r7,r4,#1
000412  605f              STR      r7,[r3,#4]
                  |L1.1044|
;;;540             }
;;;541             row_info->channels = 1;
000414  2701              MOVS     r7,#1
000416  729f              STRB     r7,[r3,#0xa]
                  |L1.1048|
;;;542          }
;;;543          if (flags & PNG_FLAG_STRIP_ALPHA)
000418  f4050780          AND      r7,r5,#0x400000
00041c  b11f              CBZ      r7,|L1.1062|
;;;544            row_info->color_type &= ~PNG_COLOR_MASK_ALPHA;
00041e  7a1f              LDRB     r7,[r3,#8]
000420  f0270704          BIC      r7,r7,#4
000424  721f              STRB     r7,[r3,#8]
                  |L1.1062|
;;;545       }
;;;546    }
000426  bdf0              POP      {r4-r7,pc}
;;;547    #endif
                          ENDP

                  png_do_bgr PROC
;;;551    void /* PRIVATE */
;;;552    png_do_bgr(png_row_infop row_info, png_bytep row)
000428  b570              PUSH     {r4-r6,lr}
;;;553    {
00042a  460a              MOV      r2,r1
;;;554       png_debug(1, "in png_do_bgr\n");
;;;555       if (
00042c  7a01              LDRB     r1,[r0,#8]
00042e  f0010102          AND      r1,r1,#2
000432  2900              CMP      r1,#0
000434  d04b              BEQ      |L1.1230|
;;;556    #if defined(PNG_USELESS_TESTS_SUPPORTED)
;;;557           row != NULL && row_info != NULL &&
;;;558    #endif
;;;559           (row_info->color_type & PNG_COLOR_MASK_COLOR))
;;;560       {
;;;561          png_uint_32 row_width = row_info->width;
000436  6803              LDR      r3,[r0,#0]
;;;562          if (row_info->bit_depth == 8)
000438  7a41              LDRB     r1,[r0,#9]
00043a  2908              CMP      r1,#8
00043c  d11d              BNE      |L1.1146|
;;;563          {
;;;564             if (row_info->color_type == PNG_COLOR_TYPE_RGB)
00043e  7a01              LDRB     r1,[r0,#8]
000440  2902              CMP      r1,#2
000442  d10b              BNE      |L1.1116|
;;;565             {
;;;566                png_bytep rp;
;;;567                png_uint_32 i;
;;;568    
;;;569                for (i = 0, rp = row; i < row_width; i++, rp += 3)
000444  2400              MOVS     r4,#0
000446  4611              MOV      r1,r2
000448  e005              B        |L1.1110|
                  |L1.1098|
;;;570                {
;;;571                   png_byte save = *rp;
00044a  780d              LDRB     r5,[r1,#0]
;;;572                   *rp = *(rp + 2);
00044c  788e              LDRB     r6,[r1,#2]
00044e  700e              STRB     r6,[r1,#0]
;;;573                   *(rp + 2) = save;
000450  708d              STRB     r5,[r1,#2]
000452  1c64              ADDS     r4,r4,#1              ;569
000454  1cc9              ADDS     r1,r1,#3              ;569
                  |L1.1110|
000456  429c              CMP      r4,r3                 ;569
000458  d3f7              BCC      |L1.1098|
;;;574                }
;;;575             }
00045a  e037              B        |L1.1228|
                  |L1.1116|
;;;576             else if (row_info->color_type == PNG_COLOR_TYPE_RGB_ALPHA)
00045c  7a01              LDRB     r1,[r0,#8]
00045e  2906              CMP      r1,#6
000460  d134              BNE      |L1.1228|
;;;577             {
;;;578                png_bytep rp;
;;;579                png_uint_32 i;
;;;580    
;;;581                for (i = 0, rp = row; i < row_width; i++, rp += 4)
000462  2400              MOVS     r4,#0
000464  4611              MOV      r1,r2
000466  e005              B        |L1.1140|
                  |L1.1128|
;;;582                {
;;;583                   png_byte save = *rp;
000468  780d              LDRB     r5,[r1,#0]
;;;584                   *rp = *(rp + 2);
00046a  788e              LDRB     r6,[r1,#2]
00046c  700e              STRB     r6,[r1,#0]
;;;585                   *(rp + 2) = save;
00046e  708d              STRB     r5,[r1,#2]
000470  1c64              ADDS     r4,r4,#1              ;581
000472  1d09              ADDS     r1,r1,#4              ;581
                  |L1.1140|
000474  429c              CMP      r4,r3                 ;581
000476  d3f7              BCC      |L1.1128|
;;;586                }
;;;587             }
000478  e028              B        |L1.1228|
                  |L1.1146|
;;;588          }
;;;589          else if (row_info->bit_depth == 16)
00047a  7a41              LDRB     r1,[r0,#9]
00047c  2910              CMP      r1,#0x10
00047e  d125              BNE      |L1.1228|
;;;590          {
;;;591             if (row_info->color_type == PNG_COLOR_TYPE_RGB)
000480  7a01              LDRB     r1,[r0,#8]
000482  2902              CMP      r1,#2
000484  d10f              BNE      |L1.1190|
;;;592             {
;;;593                png_bytep rp;
;;;594                png_uint_32 i;
;;;595    
;;;596                for (i = 0, rp = row; i < row_width; i++, rp += 6)
000486  2400              MOVS     r4,#0
000488  4611              MOV      r1,r2
00048a  e009              B        |L1.1184|
                  |L1.1164|
;;;597                {
;;;598                   png_byte save = *rp;
00048c  780d              LDRB     r5,[r1,#0]
;;;599                   *rp = *(rp + 4);
00048e  790e              LDRB     r6,[r1,#4]
000490  700e              STRB     r6,[r1,#0]
;;;600                   *(rp + 4) = save;
000492  710d              STRB     r5,[r1,#4]
;;;601                   save = *(rp + 1);
000494  784d              LDRB     r5,[r1,#1]
;;;602                   *(rp + 1) = *(rp + 5);
000496  794e              LDRB     r6,[r1,#5]
000498  704e              STRB     r6,[r1,#1]
;;;603                   *(rp + 5) = save;
00049a  714d              STRB     r5,[r1,#5]
00049c  1c64              ADDS     r4,r4,#1              ;596
00049e  1d89              ADDS     r1,r1,#6              ;596
                  |L1.1184|
0004a0  429c              CMP      r4,r3                 ;596
0004a2  d3f3              BCC      |L1.1164|
;;;604                }
;;;605             }
0004a4  e012              B        |L1.1228|
                  |L1.1190|
;;;606             else if (row_info->color_type == PNG_COLOR_TYPE_RGB_ALPHA)
0004a6  7a01              LDRB     r1,[r0,#8]
0004a8  2906              CMP      r1,#6
0004aa  d10f              BNE      |L1.1228|
;;;607             {
;;;608                png_bytep rp;
;;;609                png_uint_32 i;
;;;610    
;;;611                for (i = 0, rp = row; i < row_width; i++, rp += 8)
0004ac  2400              MOVS     r4,#0
0004ae  4611              MOV      r1,r2
0004b0  e009              B        |L1.1222|
                  |L1.1202|
;;;612                {
;;;613                   png_byte save = *rp;
0004b2  780d              LDRB     r5,[r1,#0]
;;;614                   *rp = *(rp + 4);
0004b4  790e              LDRB     r6,[r1,#4]
0004b6  700e              STRB     r6,[r1,#0]
;;;615                   *(rp + 4) = save;
0004b8  710d              STRB     r5,[r1,#4]
;;;616                   save = *(rp + 1);
0004ba  784d              LDRB     r5,[r1,#1]
;;;617                   *(rp + 1) = *(rp + 5);
0004bc  794e              LDRB     r6,[r1,#5]
0004be  704e              STRB     r6,[r1,#1]
;;;618                   *(rp + 5) = save;
0004c0  714d              STRB     r5,[r1,#5]
0004c2  1c64              ADDS     r4,r4,#1              ;611
0004c4  3108              ADDS     r1,r1,#8              ;611
                  |L1.1222|
0004c6  429c              CMP      r4,r3                 ;611
0004c8  d3f3              BCC      |L1.1202|
;;;619                }
;;;620             }
0004ca  bf00              NOP      
                  |L1.1228|
;;;621          }
;;;622       }
0004cc  bf00              NOP      
                  |L1.1230|
;;;623    }
0004ce  bd70              POP      {r4-r6,pc}
;;;624    #endif /* PNG_READ_BGR_SUPPORTED or PNG_WRITE_BGR_SUPPORTED */
                          ENDP

                  png_set_user_transform_info PROC
;;;629    void PNGAPI
;;;630    png_set_user_transform_info(png_structp png_ptr, png_voidp
0004d0  b510              PUSH     {r4,lr}
;;;631       user_transform_ptr, int user_transform_depth, int user_transform_channels)
;;;632    {
;;;633       png_debug(1, "in png_set_user_transform_info\n");
;;;634       if(png_ptr == NULL) return;
0004d2  b900              CBNZ     r0,|L1.1238|
                  |L1.1236|
;;;635    #if defined(PNG_USER_TRANSFORM_PTR_SUPPORTED)
;;;636       png_ptr->user_transform_ptr = user_transform_ptr;
;;;637       png_ptr->user_transform_depth = (png_byte)user_transform_depth;
;;;638       png_ptr->user_transform_channels = (png_byte)user_transform_channels;
;;;639    #else
;;;640       if(user_transform_ptr || user_transform_depth || user_transform_channels)
;;;641          png_warning(png_ptr,
;;;642            "This version of libpng does not support user transform info");
;;;643    #endif
;;;644    }
0004d4  bd10              POP      {r4,pc}
                  |L1.1238|
0004d6  f8c011a0          STR      r1,[r0,#0x1a0]        ;636
0004da  f88021a4          STRB     r2,[r0,#0x1a4]        ;637
0004de  f88031a5          STRB     r3,[r0,#0x1a5]        ;638
0004e2  bf00              NOP      
0004e4  e7f6              B        |L1.1236|
;;;645    #endif
                          ENDP

                  png_get_user_transform_ptr PROC
;;;652    png_voidp PNGAPI
;;;653    png_get_user_transform_ptr(png_structp png_ptr)
0004e6  4601              MOV      r1,r0
;;;654    {
;;;655       if (png_ptr == NULL) return (NULL);
0004e8  b909              CBNZ     r1,|L1.1262|
0004ea  2000              MOVS     r0,#0
                  |L1.1260|
;;;656    #if defined(PNG_USER_TRANSFORM_PTR_SUPPORTED)
;;;657       return ((png_voidp)png_ptr->user_transform_ptr);
;;;658    #else
;;;659       return (NULL);
;;;660    #endif
;;;661    }
0004ec  4770              BX       lr
                  |L1.1262|
0004ee  f8d101a0          LDR      r0,[r1,#0x1a0]        ;657
0004f2  e7fb              B        |L1.1260|
;;;662    #endif /* PNG_READ_SUPPORTED || PNG_WRITE_SUPPORTED */
                          ENDP

                  |L1.1268|
                          DCD      onebppswaptable
                  |L1.1272|
                          DCD      twobppswaptable
                  |L1.1276|
                          DCD      fourbppswaptable

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  onebppswaptable
000000  008040c0          DCB      0x00,0x80,0x40,0xc0
000004  20a060e0          DCB      0x20,0xa0,0x60,0xe0
000008  109050d0          DCB      0x10,0x90,0x50,0xd0
00000c  30b070f0          DCB      0x30,0xb0,0x70,0xf0
000010  088848c8          DCB      0x08,0x88,0x48,0xc8
000014  28a868e8          DCB      0x28,0xa8,0x68,0xe8
000018  189858d8          DCB      0x18,0x98,0x58,0xd8
00001c  38b878f8          DCB      0x38,0xb8,0x78,0xf8
000020  048444c4          DCB      0x04,0x84,0x44,0xc4
000024  24a464e4          DCB      0x24,0xa4,0x64,0xe4
000028  149454d4          DCB      0x14,0x94,0x54,0xd4
00002c  34b474f4          DCB      0x34,0xb4,0x74,0xf4
000030  0c8c4ccc          DCB      0x0c,0x8c,0x4c,0xcc
000034  2cac6cec          DCB      0x2c,0xac,0x6c,0xec
000038  1c9c5cdc          DCB      0x1c,0x9c,0x5c,0xdc
00003c  3cbc7cfc          DCB      0x3c,0xbc,0x7c,0xfc
000040  028242c2          DCB      0x02,0x82,0x42,0xc2
000044  22a262e2          DCB      0x22,0xa2,0x62,0xe2
000048  129252d2          DCB      0x12,0x92,0x52,0xd2
00004c  32b272f2          DCB      0x32,0xb2,0x72,0xf2
000050  0a8a4aca          DCB      0x0a,0x8a,0x4a,0xca
000054  2aaa6aea          DCB      0x2a,0xaa,0x6a,0xea
000058  1a9a5ada          DCB      0x1a,0x9a,0x5a,0xda
00005c  3aba7afa          DCB      0x3a,0xba,0x7a,0xfa
000060  068646c6          DCB      0x06,0x86,0x46,0xc6
000064  26a666e6          DCB      0x26,0xa6,0x66,0xe6
000068  169656d6          DCB      0x16,0x96,0x56,0xd6
00006c  36b676f6          DCB      0x36,0xb6,0x76,0xf6
000070  0e8e4ece          DCB      0x0e,0x8e,0x4e,0xce
000074  2eae6eee          DCB      0x2e,0xae,0x6e,0xee
000078  1e9e5ede          DCB      0x1e,0x9e,0x5e,0xde
00007c  3ebe7efe          DCB      0x3e,0xbe,0x7e,0xfe
000080  018141c1          DCB      0x01,0x81,0x41,0xc1
000084  21a161e1          DCB      0x21,0xa1,0x61,0xe1
000088  119151d1          DCB      0x11,0x91,0x51,0xd1
00008c  31b171f1          DCB      0x31,0xb1,0x71,0xf1
000090  098949c9          DCB      0x09,0x89,0x49,0xc9
000094  29a969e9          DCB      0x29,0xa9,0x69,0xe9
000098  199959d9          DCB      0x19,0x99,0x59,0xd9
00009c  39b979f9          DCB      0x39,0xb9,0x79,0xf9
0000a0  058545c5          DCB      0x05,0x85,0x45,0xc5
0000a4  25a565e5          DCB      0x25,0xa5,0x65,0xe5
0000a8  159555d5          DCB      0x15,0x95,0x55,0xd5
0000ac  35b575f5          DCB      0x35,0xb5,0x75,0xf5
0000b0  0d8d4dcd          DCB      0x0d,0x8d,0x4d,0xcd
0000b4  2dad6ded          DCB      0x2d,0xad,0x6d,0xed
0000b8  1d9d5ddd          DCB      0x1d,0x9d,0x5d,0xdd
0000bc  3dbd7dfd          DCB      0x3d,0xbd,0x7d,0xfd
0000c0  038343c3          DCB      0x03,0x83,0x43,0xc3
0000c4  23a363e3          DCB      0x23,0xa3,0x63,0xe3
0000c8  139353d3          DCB      0x13,0x93,0x53,0xd3
0000cc  33b373f3          DCB      0x33,0xb3,0x73,0xf3
0000d0  0b8b4bcb          DCB      0x0b,0x8b,0x4b,0xcb
0000d4  2bab6beb          DCB      0x2b,0xab,0x6b,0xeb
0000d8  1b9b5bdb          DCB      0x1b,0x9b,0x5b,0xdb
0000dc  3bbb7bfb          DCB      0x3b,0xbb,0x7b,0xfb
0000e0  078747c7          DCB      0x07,0x87,0x47,0xc7
0000e4  27a767e7          DCB      0x27,0xa7,0x67,0xe7
0000e8  179757d7          DCB      0x17,0x97,0x57,0xd7
0000ec  37b777f7          DCB      0x37,0xb7,0x77,0xf7
0000f0  0f8f4fcf          DCB      0x0f,0x8f,0x4f,0xcf
0000f4  2faf6fef          DCB      0x2f,0xaf,0x6f,0xef
0000f8  1f9f5fdf          DCB      0x1f,0x9f,0x5f,0xdf
0000fc  3fbf7fff          DCB      0x3f,0xbf,0x7f,0xff
                  twobppswaptable
000100  004080c0          DCB      0x00,0x40,0x80,0xc0
000104  105090d0          DCB      0x10,0x50,0x90,0xd0
000108  2060a0e0          DCB      0x20,0x60,0xa0,0xe0
00010c  3070b0f0          DCB      0x30,0x70,0xb0,0xf0
000110  044484c4          DCB      0x04,0x44,0x84,0xc4
000114  145494d4          DCB      0x14,0x54,0x94,0xd4
000118  2464a4e4          DCB      0x24,0x64,0xa4,0xe4
00011c  3474b4f4          DCB      0x34,0x74,0xb4,0xf4
000120  084888c8          DCB      0x08,0x48,0x88,0xc8
000124  185898d8          DCB      0x18,0x58,0x98,0xd8
000128  2868a8e8          DCB      0x28,0x68,0xa8,0xe8
00012c  3878b8f8          DCB      0x38,0x78,0xb8,0xf8
000130  0c4c8ccc          DCB      0x0c,0x4c,0x8c,0xcc
000134  1c5c9cdc          DCB      0x1c,0x5c,0x9c,0xdc
000138  2c6cacec          DCB      0x2c,0x6c,0xac,0xec
00013c  3c7cbcfc          DCB      0x3c,0x7c,0xbc,0xfc
000140  014181c1          DCB      0x01,0x41,0x81,0xc1
000144  115191d1          DCB      0x11,0x51,0x91,0xd1
000148  2161a1e1          DCB      0x21,0x61,0xa1,0xe1
00014c  3171b1f1          DCB      0x31,0x71,0xb1,0xf1
000150  054585c5          DCB      0x05,0x45,0x85,0xc5
000154  155595d5          DCB      0x15,0x55,0x95,0xd5
000158  2565a5e5          DCB      0x25,0x65,0xa5,0xe5
00015c  3575b5f5          DCB      0x35,0x75,0xb5,0xf5
000160  094989c9          DCB      0x09,0x49,0x89,0xc9
000164  195999d9          DCB      0x19,0x59,0x99,0xd9
000168  2969a9e9          DCB      0x29,0x69,0xa9,0xe9
00016c  3979b9f9          DCB      0x39,0x79,0xb9,0xf9
000170  0d4d8dcd          DCB      0x0d,0x4d,0x8d,0xcd
000174  1d5d9ddd          DCB      0x1d,0x5d,0x9d,0xdd
000178  2d6daded          DCB      0x2d,0x6d,0xad,0xed
00017c  3d7dbdfd          DCB      0x3d,0x7d,0xbd,0xfd
000180  024282c2          DCB      0x02,0x42,0x82,0xc2
000184  125292d2          DCB      0x12,0x52,0x92,0xd2
000188  2262a2e2          DCB      0x22,0x62,0xa2,0xe2
00018c  3272b2f2          DCB      0x32,0x72,0xb2,0xf2
000190  064686c6          DCB      0x06,0x46,0x86,0xc6
000194  165696d6          DCB      0x16,0x56,0x96,0xd6
000198  2666a6e6          DCB      0x26,0x66,0xa6,0xe6
00019c  3676b6f6          DCB      0x36,0x76,0xb6,0xf6
0001a0  0a4a8aca          DCB      0x0a,0x4a,0x8a,0xca
0001a4  1a5a9ada          DCB      0x1a,0x5a,0x9a,0xda
0001a8  2a6aaaea          DCB      0x2a,0x6a,0xaa,0xea
0001ac  3a7abafa          DCB      0x3a,0x7a,0xba,0xfa
0001b0  0e4e8ece          DCB      0x0e,0x4e,0x8e,0xce
0001b4  1e5e9ede          DCB      0x1e,0x5e,0x9e,0xde
0001b8  2e6eaeee          DCB      0x2e,0x6e,0xae,0xee
0001bc  3e7ebefe          DCB      0x3e,0x7e,0xbe,0xfe
0001c0  034383c3          DCB      0x03,0x43,0x83,0xc3
0001c4  135393d3          DCB      0x13,0x53,0x93,0xd3
0001c8  2363a3e3          DCB      0x23,0x63,0xa3,0xe3
0001cc  3373b3f3          DCB      0x33,0x73,0xb3,0xf3
0001d0  074787c7          DCB      0x07,0x47,0x87,0xc7
0001d4  175797d7          DCB      0x17,0x57,0x97,0xd7
0001d8  2767a7e7          DCB      0x27,0x67,0xa7,0xe7
0001dc  3777b7f7          DCB      0x37,0x77,0xb7,0xf7
0001e0  0b4b8bcb          DCB      0x0b,0x4b,0x8b,0xcb
0001e4  1b5b9bdb          DCB      0x1b,0x5b,0x9b,0xdb
0001e8  2b6babeb          DCB      0x2b,0x6b,0xab,0xeb
0001ec  3b7bbbfb          DCB      0x3b,0x7b,0xbb,0xfb
0001f0  0f4f8fcf          DCB      0x0f,0x4f,0x8f,0xcf
0001f4  1f5f9fdf          DCB      0x1f,0x5f,0x9f,0xdf
0001f8  2f6fafef          DCB      0x2f,0x6f,0xaf,0xef
0001fc  3f7fbfff          DCB      0x3f,0x7f,0xbf,0xff
                  fourbppswaptable
000200  00102030          DCB      0x00,0x10,0x20,0x30
000204  40506070          DCB      0x40,0x50,0x60,0x70
000208  8090a0b0          DCB      0x80,0x90,0xa0,0xb0
00020c  c0d0e0f0          DCB      0xc0,0xd0,0xe0,0xf0
000210  01112131          DCB      0x01,0x11,0x21,0x31
000214  41516171          DCB      0x41,0x51,0x61,0x71
000218  8191a1b1          DCB      0x81,0x91,0xa1,0xb1
00021c  c1d1e1f1          DCB      0xc1,0xd1,0xe1,0xf1
000220  02122232          DCB      0x02,0x12,0x22,0x32
000224  42526272          DCB      0x42,0x52,0x62,0x72
000228  8292a2b2          DCB      0x82,0x92,0xa2,0xb2
00022c  c2d2e2f2          DCB      0xc2,0xd2,0xe2,0xf2
000230  03132333          DCB      0x03,0x13,0x23,0x33
000234  43536373          DCB      0x43,0x53,0x63,0x73
000238  8393a3b3          DCB      0x83,0x93,0xa3,0xb3
00023c  c3d3e3f3          DCB      0xc3,0xd3,0xe3,0xf3
000240  04142434          DCB      0x04,0x14,0x24,0x34
000244  44546474          DCB      0x44,0x54,0x64,0x74
000248  8494a4b4          DCB      0x84,0x94,0xa4,0xb4
00024c  c4d4e4f4          DCB      0xc4,0xd4,0xe4,0xf4
000250  05152535          DCB      0x05,0x15,0x25,0x35
000254  45556575          DCB      0x45,0x55,0x65,0x75
000258  8595a5b5          DCB      0x85,0x95,0xa5,0xb5
00025c  c5d5e5f5          DCB      0xc5,0xd5,0xe5,0xf5
000260  06162636          DCB      0x06,0x16,0x26,0x36
000264  46566676          DCB      0x46,0x56,0x66,0x76
000268  8696a6b6          DCB      0x86,0x96,0xa6,0xb6
00026c  c6d6e6f6          DCB      0xc6,0xd6,0xe6,0xf6
000270  07172737          DCB      0x07,0x17,0x27,0x37
000274  47576777          DCB      0x47,0x57,0x67,0x77
000278  8797a7b7          DCB      0x87,0x97,0xa7,0xb7
00027c  c7d7e7f7          DCB      0xc7,0xd7,0xe7,0xf7
000280  08182838          DCB      0x08,0x18,0x28,0x38
000284  48586878          DCB      0x48,0x58,0x68,0x78
000288  8898a8b8          DCB      0x88,0x98,0xa8,0xb8
00028c  c8d8e8f8          DCB      0xc8,0xd8,0xe8,0xf8
000290  09192939          DCB      0x09,0x19,0x29,0x39
000294  49596979          DCB      0x49,0x59,0x69,0x79
000298  8999a9b9          DCB      0x89,0x99,0xa9,0xb9
00029c  c9d9e9f9          DCB      0xc9,0xd9,0xe9,0xf9
0002a0  0a1a2a3a          DCB      0x0a,0x1a,0x2a,0x3a
0002a4  4a5a6a7a          DCB      0x4a,0x5a,0x6a,0x7a
0002a8  8a9aaaba          DCB      0x8a,0x9a,0xaa,0xba
0002ac  cadaeafa          DCB      0xca,0xda,0xea,0xfa
0002b0  0b1b2b3b          DCB      0x0b,0x1b,0x2b,0x3b
0002b4  4b5b6b7b          DCB      0x4b,0x5b,0x6b,0x7b
0002b8  8b9babbb          DCB      0x8b,0x9b,0xab,0xbb
0002bc  cbdbebfb          DCB      0xcb,0xdb,0xeb,0xfb
0002c0  0c1c2c3c          DCB      0x0c,0x1c,0x2c,0x3c
0002c4  4c5c6c7c          DCB      0x4c,0x5c,0x6c,0x7c
0002c8  8c9cacbc          DCB      0x8c,0x9c,0xac,0xbc
0002cc  ccdcecfc          DCB      0xcc,0xdc,0xec,0xfc
0002d0  0d1d2d3d          DCB      0x0d,0x1d,0x2d,0x3d
0002d4  4d5d6d7d          DCB      0x4d,0x5d,0x6d,0x7d
0002d8  8d9dadbd          DCB      0x8d,0x9d,0xad,0xbd
0002dc  cdddedfd          DCB      0xcd,0xdd,0xed,0xfd
0002e0  0e1e2e3e          DCB      0x0e,0x1e,0x2e,0x3e
0002e4  4e5e6e7e          DCB      0x4e,0x5e,0x6e,0x7e
0002e8  8e9eaebe          DCB      0x8e,0x9e,0xae,0xbe
0002ec  cedeeefe          DCB      0xce,0xde,0xee,0xfe
0002f0  0f1f2f3f          DCB      0x0f,0x1f,0x2f,0x3f
0002f4  4f5f6f7f          DCB      0x4f,0x5f,0x6f,0x7f
0002f8  8f9fafbf          DCB      0x8f,0x9f,0xaf,0xbf
0002fc  cfdfefff          DCB      0xcf,0xdf,0xef,0xff
