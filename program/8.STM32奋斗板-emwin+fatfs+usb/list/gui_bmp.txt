; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\gui_bmp.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\gui_bmp.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -I.\GUI\AntiAlias -I.\GUI\Config -I.\GUI\ConvertColor -I.\GUI\ConvertMono -I.\GUI\Core -I.\GUI\Font -I.\GUI\GUI_X -I.\GUI\JPEG -I.\GUI\LCDDriver -I.\GUI\MemDev -I.\GUI\MultiLayer -I.\GUI\Widget -I.\GUI\WM -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\INC\ST\STM32F10x -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\gui_bmp.crf GUI\Core\GUI_BMP.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _GetStep PROC
;;;33     */
;;;34     static int _GetStep(int * pYSize, int * pY) {
000000  4602              MOV      r2,r0
;;;35       if (*pYSize > 0) {
000002  6810              LDR      r0,[r2,#0]
000004  2800              CMP      r0,#0
000006  dd06              BLE      |L1.22|
;;;36         *pY = *pYSize - 1;
000008  6810              LDR      r0,[r2,#0]
00000a  f1a00001          SUB      r0,r0,#1
00000e  6008              STR      r0,[r1,#0]
;;;37         return -1;
000010  f04f30ff          MOV      r0,#0xffffffff
                  |L1.20|
;;;38       } else if (*pYSize < 0) {
;;;39         *pYSize = -*pYSize;
;;;40         *pY = 0;
;;;41         return 1;
;;;42       } else {
;;;43         return 0;
;;;44       }
;;;45     }
000014  4770              BX       lr
                  |L1.22|
000016  6810              LDR      r0,[r2,#0]            ;38
000018  2800              CMP      r0,#0                 ;38
00001a  da09              BGE      |L1.48|
00001c  6810              LDR      r0,[r2,#0]            ;39
00001e  f1c00000          RSB      r0,r0,#0              ;39
000022  6010              STR      r0,[r2,#0]            ;39
000024  f04f0000          MOV      r0,#0                 ;40
000028  6008              STR      r0,[r1,#0]            ;40
00002a  f04f0001          MOV      r0,#1                 ;41
00002e  e7f1              B        |L1.20|
                  |L1.48|
000030  2000              MOVS     r0,#0                 ;43
000032  e7ef              B        |L1.20|
;;;46     
                          ENDP

                  _DrawBitmap_Pal PROC
;;;50     */
;;;51     static int _DrawBitmap_Pal(const U8 * pData, int x0, int y0, int XSize, int YSize, int Bpp, int NumColors) {
000034  e92d4ff0          PUSH     {r4-r11,lr}
000038  b089              SUB      sp,sp,#0x24
00003a  4604              MOV      r4,r0
00003c  460f              MOV      r7,r1
00003e  4690              MOV      r8,r2
000040  461d              MOV      r5,r3
000042  f8dd904c          LDR      r9,[sp,#0x4c]
;;;52       int i, y, Step;
;;;53       int BytesPerLine = 0;
000046  f04f0000          MOV      r0,#0
00004a  9007              STR      r0,[sp,#0x1c]
;;;54       Step = _GetStep(&YSize, &y);
00004c  a908              ADD      r1,sp,#0x20
00004e  a812              ADD      r0,sp,#0x48
000050  f7fffffe          BL       _GetStep
000054  4682              MOV      r10,r0
;;;55       if (!Step) {
000056  f1ba0f00          CMP      r10,#0
00005a  d103              BNE      |L1.100|
;;;56         return 1;
00005c  2001              MOVS     r0,#1
                  |L1.94|
;;;57       }
;;;58       for (i = 0; i < NumColors; i++) {
;;;59         U8 r, g, b;
;;;60         b = *(pData);
;;;61         g = *(pData + 1);
;;;62         r = *(pData + 2);
;;;63         pData += 4;
;;;64         LCD__aConvTable[i] = LCD_Color2Index(((U32)b << 16) | (g << 8) | r);
;;;65       }
;;;66       switch (Bpp) {
;;;67         case 1:
;;;68           BytesPerLine = ((XSize + 31) >> 5) << 2;
;;;69           break;
;;;70         case 4:
;;;71           BytesPerLine = (((XSize << 2) + 31) >> 5) << 2;
;;;72           break;
;;;73         case 8:
;;;74           BytesPerLine = ((XSize +  3) >> 2) << 2;
;;;75           break;
;;;76       }
;;;77       for (; (y < YSize) && (y >= 0); y += Step) {
;;;78         LCD_DrawBitmap(x0, y0 + y, XSize, 1, 1, 1, Bpp, XSize, pData, LCD__aConvTable);
;;;79         pData += BytesPerLine;
;;;80       }
;;;81       return 0;
;;;82     }
00005e  b009              ADD      sp,sp,#0x24
000060  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.100|
000064  f04f0600          MOV      r6,#0                 ;58
000068  e016              B        |L1.152|
                  |L1.106|
00006a  7820              LDRB     r0,[r4,#0]            ;60
00006c  9005              STR      r0,[sp,#0x14]         ;60
00006e  f894b001          LDRB     r11,[r4,#1]           ;61
000072  78a0              LDRB     r0,[r4,#2]            ;62
000074  9006              STR      r0,[sp,#0x18]         ;62
000076  f1040404          ADD      r4,r4,#4              ;63
00007a  9905              LDR      r1,[sp,#0x14]         ;64
00007c  ea4f4101          LSL      r1,r1,#16             ;64
000080  ea41210b          ORR      r1,r1,r11,LSL #8      ;64
000084  9a06              LDR      r2,[sp,#0x18]         ;64
000086  ea410002          ORR      r0,r1,r2              ;64
00008a  f7fffffe          BL       LCD_Color2Index
00008e  49bb              LDR      r1,|L1.892|
000090  f8210016          STRH     r0,[r1,r6,LSL #1]     ;64
000094  f1060601          ADD      r6,r6,#1              ;58
                  |L1.152|
000098  9814              LDR      r0,[sp,#0x50]         ;58
00009a  4286              CMP      r6,r0                 ;58
00009c  dbe5              BLT      |L1.106|
00009e  f1b90f01          CMP      r9,#1                 ;66
0000a2  d006              BEQ      |L1.178|
0000a4  f1b90f04          CMP      r9,#4                 ;66
0000a8  d00b              BEQ      |L1.194|
0000aa  f1b90f08          CMP      r9,#8                 ;66
0000ae  d11a              BNE      |L1.230|
0000b0  e011              B        |L1.214|
                  |L1.178|
0000b2  f105001f          ADD      r0,r5,#0x1f           ;68
0000b6  ea4f1060          ASR      r0,r0,#5              ;68
0000ba  ea4f0080          LSL      r0,r0,#2              ;68
0000be  9007              STR      r0,[sp,#0x1c]         ;68
0000c0  e011              B        |L1.230|
                  |L1.194|
0000c2  f04f001f          MOV      r0,#0x1f              ;71
0000c6  eb000085          ADD      r0,r0,r5,LSL #2       ;71
0000ca  ea4f1060          ASR      r0,r0,#5              ;71
0000ce  ea4f0080          LSL      r0,r0,#2              ;71
0000d2  9007              STR      r0,[sp,#0x1c]         ;71
0000d4  e007              B        |L1.230|
                  |L1.214|
0000d6  f1050003          ADD      r0,r5,#3              ;74
0000da  ea4f00a0          ASR      r0,r0,#2              ;74
0000de  ea4f0080          LSL      r0,r0,#2              ;74
0000e2  9007              STR      r0,[sp,#0x1c]         ;74
0000e4  bf00              NOP                            ;75
                  |L1.230|
0000e6  bf00              NOP                            ;69
0000e8  e014              B        |L1.276|
                  |L1.234|
0000ea  48a4              LDR      r0,|L1.892|
0000ec  e9cd9502          STRD     r9,r5,[sp,#8]         ;78
0000f0  e9cd4004          STRD     r4,r0,[sp,#0x10]      ;78
0000f4  2001              MOVS     r0,#1                 ;78
0000f6  9000              STR      r0,[sp,#0]            ;78
0000f8  9001              STR      r0,[sp,#4]            ;78
0000fa  9808              LDR      r0,[sp,#0x20]         ;78
0000fc  eb080100          ADD      r1,r8,r0              ;78
000100  2301              MOVS     r3,#1                 ;78
000102  462a              MOV      r2,r5                 ;78
000104  4638              MOV      r0,r7                 ;78
000106  f7fffffe          BL       LCD_DrawBitmap
00010a  9807              LDR      r0,[sp,#0x1c]         ;79
00010c  4404              ADD      r4,r4,r0              ;79
00010e  9808              LDR      r0,[sp,#0x20]         ;77
000110  4450              ADD      r0,r0,r10             ;77
000112  9008              STR      r0,[sp,#0x20]         ;77
                  |L1.276|
000114  9912              LDR      r1,[sp,#0x48]         ;77
000116  9808              LDR      r0,[sp,#0x20]         ;77
000118  4288              CMP      r0,r1                 ;77
00011a  da02              BGE      |L1.290|
00011c  9808              LDR      r0,[sp,#0x20]         ;77
00011e  2800              CMP      r0,#0                 ;77
000120  dae3              BGE      |L1.234|
                  |L1.290|
000122  2000              MOVS     r0,#0                 ;81
000124  e79b              B        |L1.94|
;;;83     
                          ENDP

                  _DrawBitmap_24bpp PROC
;;;87     */
;;;88     static int _DrawBitmap_24bpp(const U8 * pData, int x0, int y0, int XSize, int YSize) {
000126  e92d4ff0          PUSH     {r4-r11,lr}
00012a  b085              SUB      sp,sp,#0x14
00012c  4605              MOV      r5,r0
00012e  4688              MOV      r8,r1
000130  4691              MOV      r9,r2
000132  461e              MOV      r6,r3
;;;89       int x, y, BytesPerLine, Step;
;;;90       Step = _GetStep(&YSize, &y);
000134  a904              ADD      r1,sp,#0x10
000136  a80e              ADD      r0,sp,#0x38
000138  f7fffffe          BL       _GetStep
00013c  4683              MOV      r11,r0
;;;91       if (!Step) {
00013e  f1bb0f00          CMP      r11,#0
000142  d103              BNE      |L1.332|
;;;92         return 1;
000144  2001              MOVS     r0,#1
                  |L1.326|
;;;93       }
;;;94       BytesPerLine = ((24 * XSize + 31) >> 5) << 2;
;;;95       for (; (y < YSize) && (y >= 0); y += Step) {
;;;96         for (x = 0; x < XSize; x++) {
;;;97           const U8 * pColor = pData + 3 * x;
;;;98           U8 r, g, b;
;;;99           b = *(pColor);
;;;100          g = *(pColor + 1);
;;;101          r = *(pColor + 2);
;;;102          LCD_SetPixelIndex(x0 + x, y0 + y, LCD_Color2Index(((U32)b << 16) | (g << 8) | r));
;;;103        }
;;;104        pData += BytesPerLine;
;;;105      }
;;;106      return 0;
;;;107    }
000146  b005              ADD      sp,sp,#0x14
000148  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.332|
00014c  eb060046          ADD      r0,r6,r6,LSL #1       ;94
000150  ea4f00c0          LSL      r0,r0,#3              ;94
000154  f100001f          ADD      r0,r0,#0x1f           ;94
000158  ea4f1060          ASR      r0,r0,#5              ;94
00015c  ea4f0a80          LSL      r10,r0,#2             ;94
000160  e028              B        |L1.436|
                  |L1.354|
000162  f04f0400          MOV      r4,#0                 ;96
000166  e01f              B        |L1.424|
                  |L1.360|
000168  f04f0003          MOV      r0,#3                 ;97
00016c  fb005704          MLA      r7,r0,r4,r5           ;97
000170  7838              LDRB     r0,[r7,#0]            ;99
000172  9001              STR      r0,[sp,#4]            ;99
000174  7878              LDRB     r0,[r7,#1]            ;100
000176  9002              STR      r0,[sp,#8]            ;100
000178  78b8              LDRB     r0,[r7,#2]            ;101
00017a  9003              STR      r0,[sp,#0xc]          ;101
00017c  9901              LDR      r1,[sp,#4]            ;102
00017e  ea4f4201          LSL      r2,r1,#16             ;102
000182  9902              LDR      r1,[sp,#8]            ;102
000184  ea422101          ORR      r1,r2,r1,LSL #8       ;102
000188  9a03              LDR      r2,[sp,#0xc]          ;102
00018a  ea410002          ORR      r0,r1,r2              ;102
00018e  f7fffffe          BL       LCD_Color2Index
000192  9000              STR      r0,[sp,#0]            ;102
000194  9a04              LDR      r2,[sp,#0x10]         ;102
000196  eb090102          ADD      r1,r9,r2              ;102
00019a  eb080004          ADD      r0,r8,r4              ;102
00019e  9a00              LDR      r2,[sp,#0]            ;102
0001a0  f7fffffe          BL       LCD_SetPixelIndex
0001a4  f1040401          ADD      r4,r4,#1              ;96
                  |L1.424|
0001a8  42b4              CMP      r4,r6                 ;96
0001aa  dbdd              BLT      |L1.360|
0001ac  4455              ADD      r5,r5,r10             ;104
0001ae  9804              LDR      r0,[sp,#0x10]         ;95
0001b0  4458              ADD      r0,r0,r11             ;95
0001b2  9004              STR      r0,[sp,#0x10]         ;95
                  |L1.436|
0001b4  990e              LDR      r1,[sp,#0x38]         ;95
0001b6  9804              LDR      r0,[sp,#0x10]         ;95
0001b8  4288              CMP      r0,r1                 ;95
0001ba  da02              BGE      |L1.450|
0001bc  9804              LDR      r0,[sp,#0x10]         ;95
0001be  2800              CMP      r0,#0                 ;95
0001c0  dacf              BGE      |L1.354|
                  |L1.450|
0001c2  2000              MOVS     r0,#0                 ;106
0001c4  e7bf              B        |L1.326|
;;;108    
                          ENDP

                  GUI_BMP_GetXSize PROC
;;;118    */
;;;119    int GUI_BMP_GetXSize(const void * pBMP) {
0001c6  b538              PUSH     {r3-r5,lr}
0001c8  4604              MOV      r4,r0
;;;120      const U8 * pSrc = (const U8 *)pBMP;
0001ca  9400              STR      r4,[sp,#0]
;;;121      if (!pBMP) {
0001cc  b90c              CBNZ     r4,|L1.466|
;;;122        return 0;
0001ce  2000              MOVS     r0,#0
                  |L1.464|
;;;123      }
;;;124      pSrc += 18;                   /* skip rest of BITMAPFILEHEADER */
;;;125      return GUI__Read32(&pSrc);
;;;126    }
0001d0  bd38              POP      {r3-r5,pc}
                  |L1.466|
0001d2  9800              LDR      r0,[sp,#0]            ;124
0001d4  f1000012          ADD      r0,r0,#0x12           ;124
0001d8  9000              STR      r0,[sp,#0]            ;124
0001da  4668              MOV      r0,sp                 ;125
0001dc  f7fffffe          BL       GUI__Read32
0001e0  e7f6              B        |L1.464|
;;;127    
                          ENDP

                  GUI_BMP_GetYSize PROC
;;;131    */
;;;132    int GUI_BMP_GetYSize(const void * pBMP) {
0001e2  b538              PUSH     {r3-r5,lr}
0001e4  4604              MOV      r4,r0
;;;133      const U8 * pSrc = (const U8 *)pBMP;
0001e6  9400              STR      r4,[sp,#0]
;;;134      if (!pBMP) {
0001e8  b90c              CBNZ     r4,|L1.494|
;;;135        return 0;
0001ea  2000              MOVS     r0,#0
                  |L1.492|
;;;136      }
;;;137      pSrc += 22;
;;;138      return labs((int)GUI__Read32(&pSrc));
;;;139    }
0001ec  bd38              POP      {r3-r5,pc}
                  |L1.494|
0001ee  9800              LDR      r0,[sp,#0]            ;137
0001f0  f1000016          ADD      r0,r0,#0x16           ;137
0001f4  9000              STR      r0,[sp,#0]            ;137
0001f6  4668              MOV      r0,sp                 ;138
0001f8  f7fffffe          BL       GUI__Read32
0001fc  1e05              SUBS     r5,r0,#0              ;138
0001fe  db01              BLT      |L1.516|
000200  4628              MOV      r0,r5                 ;138
000202  e7f3              B        |L1.492|
                  |L1.516|
000204  4268              RSBS     r0,r5,#0              ;138
000206  e7f1              B        |L1.492|
;;;140    
                          ENDP

                  GUI_BMP_Draw PROC
;;;144    */
;;;145    int GUI_BMP_Draw(const void * pBMP, int x0, int y0) {
000208  e92d4ff0          PUSH     {r4-r11,lr}
00020c  b089              SUB      sp,sp,#0x24
00020e  4682              MOV      r10,r0
000210  460e              MOV      r6,r1
000212  4617              MOV      r7,r2
;;;146      #if (GUI_WINSUPPORT)
;;;147        GUI_RECT r;
;;;148      #endif
;;;149      int Ret = 0;
000214  f04f0000          MOV      r0,#0
000218  9006              STR      r0,[sp,#0x18]
;;;150      I32 Width, Height;
;;;151      U16 BitCount, Type;
;;;152      U32 ClrUsed, Compression;
;;;153      int NumColors;
;;;154      const U8 * pSrc = (const U8 *)pBMP;
00021a  f8cda00c          STR      r10,[sp,#0xc]
;;;155      Type        = GUI__Read16(&pSrc); /* get type from BITMAPFILEHEADER */
00021e  a803              ADD      r0,sp,#0xc
000220  f7fffffe          BL       GUI__Read16
000224  9005              STR      r0,[sp,#0x14]
;;;156      pSrc += 12;                   /* skip rest of BITMAPFILEHEADER */
000226  9803              LDR      r0,[sp,#0xc]
000228  f100000c          ADD      r0,r0,#0xc
00022c  9003              STR      r0,[sp,#0xc]
;;;157      /* get values from BITMAPINFOHEADER */
;;;158      pSrc += 4;
00022e  9803              LDR      r0,[sp,#0xc]
000230  f1000004          ADD      r0,r0,#4
000234  9003              STR      r0,[sp,#0xc]
;;;159      Width       = GUI__Read32(&pSrc);
000236  a803              ADD      r0,sp,#0xc
000238  f7fffffe          BL       GUI__Read32
00023c  4680              MOV      r8,r0
;;;160      Height      = GUI__Read32(&pSrc);
00023e  a803              ADD      r0,sp,#0xc
000240  f7fffffe          BL       GUI__Read32
000244  4605              MOV      r5,r0
;;;161      pSrc += 2;
000246  9803              LDR      r0,[sp,#0xc]
000248  f1000002          ADD      r0,r0,#2
00024c  9003              STR      r0,[sp,#0xc]
;;;162      BitCount    = GUI__Read16(&pSrc);
00024e  a803              ADD      r0,sp,#0xc
000250  f7fffffe          BL       GUI__Read16
000254  4681              MOV      r9,r0
;;;163      Compression = GUI__Read32(&pSrc);
000256  a803              ADD      r0,sp,#0xc
000258  f7fffffe          BL       GUI__Read32
00025c  9004              STR      r0,[sp,#0x10]
;;;164      pSrc += 12;
00025e  9803              LDR      r0,[sp,#0xc]
000260  f100000c          ADD      r0,r0,#0xc
000264  9003              STR      r0,[sp,#0xc]
;;;165      ClrUsed     = GUI__Read32(&pSrc);
000266  a803              ADD      r0,sp,#0xc
000268  f7fffffe          BL       GUI__Read32
00026c  4683              MOV      r11,r0
;;;166      pSrc += 4;
00026e  9803              LDR      r0,[sp,#0xc]
000270  f1000004          ADD      r0,r0,#4
000274  9003              STR      r0,[sp,#0xc]
;;;167      /* calculate number of colors */
;;;168      switch (BitCount) {
000276  f1b90f04          CMP      r9,#4
00027a  d015              BEQ      |L1.680|
00027c  dc06              BGT      |L1.652|
00027e  f1b90f00          CMP      r9,#0
000282  d00a              BEQ      |L1.666|
000284  f1b90f01          CMP      r9,#1
000288  d117              BNE      |L1.698|
00028a  e00a              B        |L1.674|
                  |L1.652|
00028c  f1b90f08          CMP      r9,#8
000290  d00d              BEQ      |L1.686|
000292  f1b90f18          CMP      r9,#0x18
000296  d110              BNE      |L1.698|
000298  e00c              B        |L1.692|
                  |L1.666|
;;;169        case 0:   return 1; /* biBitCount = 0 (JPEG format) not supported. Please convert image ! */
00029a  2001              MOVS     r0,#1
                  |L1.668|
;;;170        case 1:   NumColors = 2;   break;
;;;171        case 4:   NumColors = 16;  break;
;;;172        case 8:   NumColors = 256; break;
;;;173        case 24:  NumColors = 0;   break;
;;;174        default:
;;;175          return 1; /* biBitCount should be 1, 4, 8 or 24 */
;;;176      }
;;;177      if (NumColors && ClrUsed) {
;;;178        NumColors = ClrUsed;
;;;179      }
;;;180      /* check validity of bmp */
;;;181      if ((NumColors > LCD_MAX_LOG_COLORS) ||
;;;182          (Type != 0x4d42)                 || /* 'BM' */
;;;183          (Compression)                    || /* only uncompressed bitmaps */
;;;184          (Width  > 1024)                  ||
;;;185          (Height > 1024)) {
;;;186        return 1;
;;;187      }
;;;188      /* start output */
;;;189      GUI_LOCK();
;;;190      #if (GUI_WINSUPPORT)
;;;191        WM_ADDORG(x0,y0);
;;;192        r.x1 = (r.x0 = x0) + Width - 1;
;;;193        r.y1 = (r.y0 = y0) + Height - 1;
;;;194        WM_ITERATE_START(&r) {
;;;195      #endif
;;;196      /* Show bitmap */
;;;197      switch (BitCount) {
;;;198        case 1:
;;;199        case 4:
;;;200        case 8:
;;;201          Ret = _DrawBitmap_Pal(pSrc, x0, y0, Width, Height, BitCount, NumColors);
;;;202          break;
;;;203        case 24:
;;;204          Ret = _DrawBitmap_24bpp(pSrc, x0, y0, Width, Height);
;;;205          break;
;;;206      }
;;;207      #if (GUI_WINSUPPORT)
;;;208        } WM_ITERATE_END();
;;;209      #endif
;;;210      GUI_UNLOCK();
;;;211      return Ret;
;;;212    }
00029c  b009              ADD      sp,sp,#0x24
00029e  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.674|
0002a2  f04f0402          MOV      r4,#2                 ;170
0002a6  e00a              B        |L1.702|
                  |L1.680|
0002a8  f04f0410          MOV      r4,#0x10              ;171
0002ac  e007              B        |L1.702|
                  |L1.686|
0002ae  f44f7480          MOV      r4,#0x100             ;172
0002b2  e004              B        |L1.702|
                  |L1.692|
0002b4  f04f0400          MOV      r4,#0                 ;173
0002b8  e001              B        |L1.702|
                  |L1.698|
0002ba  2001              MOVS     r0,#1                 ;175
0002bc  e7ee              B        |L1.668|
                  |L1.702|
0002be  bf00              NOP                            ;170
0002c0  b11c              CBZ      r4,|L1.714|
0002c2  f1bb0f00          CMP      r11,#0                ;177
0002c6  d000              BEQ      |L1.714|
0002c8  465c              MOV      r4,r11                ;178
                  |L1.714|
0002ca  f5b47f80          CMP      r4,#0x100             ;181
0002ce  dc0c              BGT      |L1.746|
0002d0  9805              LDR      r0,[sp,#0x14]         ;182
0002d2  f5a0419a          SUB      r1,r0,#0x4d00         ;182
0002d6  3942              SUBS     r1,r1,#0x42           ;182
0002d8  d107              BNE      |L1.746|
0002da  9804              LDR      r0,[sp,#0x10]         ;183
0002dc  b928              CBNZ     r0,|L1.746|
0002de  f5b86f80          CMP      r8,#0x400             ;184
0002e2  dc02              BGT      |L1.746|
0002e4  f5b56f80          CMP      r5,#0x400             ;185
0002e8  dd01              BLE      |L1.750|
                  |L1.746|
0002ea  2001              MOVS     r0,#1                 ;186
0002ec  e7d6              B        |L1.668|
                  |L1.750|
0002ee  4824              LDR      r0,|L1.896|
0002f0  6c00              LDR      r0,[r0,#0x40]         ;191  ; GUI_Context
0002f2  4406              ADD      r6,r6,r0              ;191
0002f4  4822              LDR      r0,|L1.896|
0002f6  6c40              LDR      r0,[r0,#0x44]         ;191  ; GUI_Context
0002f8  4407              ADD      r7,r7,r0              ;191
0002fa  b230              SXTH     r0,r6                 ;192
0002fc  f8ad001c          STRH     r0,[sp,#0x1c]         ;192
000300  4440              ADD      r0,r0,r8              ;192
000302  f1a00001          SUB      r0,r0,#1              ;192
000306  b200              SXTH     r0,r0                 ;192
000308  f8ad0020          STRH     r0,[sp,#0x20]         ;192
00030c  b238              SXTH     r0,r7                 ;193
00030e  f8ad001e          STRH     r0,[sp,#0x1e]         ;193
000312  4428              ADD      r0,r0,r5              ;193
000314  f1a00001          SUB      r0,r0,#1              ;193
000318  b200              SXTH     r0,r0                 ;193
00031a  f8ad0022          STRH     r0,[sp,#0x22]         ;193
00031e  a807              ADD      r0,sp,#0x1c           ;194
000320  f7fffffe          BL       WM__InitIVRSearch
000324  b340              CBZ      r0,|L1.888|
000326  bf00              NOP                            ;194
                  |L1.808|
000328  f1b90f01          CMP      r9,#1                 ;197
00032c  d009              BEQ      |L1.834|
00032e  f1b90f04          CMP      r9,#4                 ;197
000332  d007              BEQ      |L1.836|
000334  f1b90f08          CMP      r9,#8                 ;197
000338  d005              BEQ      |L1.838|
00033a  f1b90f18          CMP      r9,#0x18              ;197
00033e  d116              BNE      |L1.878|
000340  e00c              B        |L1.860|
                  |L1.834|
000342  bf00              NOP                            ;199
                  |L1.836|
000344  bf00              NOP                            ;200
                  |L1.838|
000346  4643              MOV      r3,r8                 ;201
000348  463a              MOV      r2,r7                 ;201
00034a  4631              MOV      r1,r6                 ;201
00034c  e9cd5900          STRD     r5,r9,[sp,#0]         ;201
000350  9402              STR      r4,[sp,#8]            ;201
000352  9803              LDR      r0,[sp,#0xc]          ;201
000354  f7fffffe          BL       _DrawBitmap_Pal
000358  9006              STR      r0,[sp,#0x18]         ;201
00035a  e008              B        |L1.878|
                  |L1.860|
00035c  4643              MOV      r3,r8                 ;204
00035e  463a              MOV      r2,r7                 ;204
000360  4631              MOV      r1,r6                 ;204
000362  9500              STR      r5,[sp,#0]            ;204
000364  9803              LDR      r0,[sp,#0xc]          ;204
000366  f7fffffe          BL       _DrawBitmap_24bpp
00036a  9006              STR      r0,[sp,#0x18]         ;204
00036c  bf00              NOP                            ;205
                  |L1.878|
00036e  bf00              NOP                            ;202
000370  f7fffffe          BL       WM__GetNextIVR
000374  2800              CMP      r0,#0                 ;208
000376  d1d7              BNE      |L1.808|
                  |L1.888|
000378  9806              LDR      r0,[sp,#0x18]         ;211
00037a  e78f              B        |L1.668|
;;;213    
                          ENDP

                  |L1.892|
                          DCD      LCD__aConvTable
                  |L1.896|
                          DCD      GUI_Context
