; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\gui_drawbitmap_888.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\gui_drawbitmap_888.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -I.\GUI\AntiAlias -I.\GUI\Config -I.\GUI\ConvertColor -I.\GUI\ConvertMono -I.\GUI\Core -I.\GUI\Font -I.\GUI\GUI_X -I.\GUI\JPEG -I.\GUI\LCDDriver -I.\GUI\MemDev -I.\GUI\MultiLayer -I.\GUI\Widget -I.\GUI\WM -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\INC\ST\STM32F10x -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\gui_drawbitmap_888.crf GUI\Core\GUI_DrawBitmap_888.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _DrawBitmap PROC
;;;33     */
;;;34     static void _DrawBitmap(int x0, int y0, int xsize, int ysize, const U8 GUI_UNI_PTR * pPixel, const LCD_LOGPALETTE GUI_UNI_PTR * pLogPal, int xMag, int yMag, tLCDDEV_Index2Color * pfIndex2Color) {
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  b08b              SUB      sp,sp,#0x2c
000006  4607              MOV      r7,r0
000008  4689              MOV      r9,r1
00000a  4616              MOV      r6,r2
00000c  4698              MOV      r8,r3
;;;35       const U32 * pData;
;;;36       int y, OldIndex, Mag, BytesPerLine, UseDrawBitmap = 0;
00000e  f04f0000          MOV      r0,#0
000012  9008              STR      r0,[sp,#0x20]
;;;37       U32 PrevColor;
;;;38       GUI_USE_PARA(pLogPal);
000014  9815              LDR      r0,[sp,#0x54]
000016  9015              STR      r0,[sp,#0x54]
;;;39       OldIndex = LCD_GetColorIndex();
000018  f7fffffe          BL       LCD_GetColorIndex
00001c  900a              STR      r0,[sp,#0x28]
;;;40       PrevColor = GUI_INVALID_COLOR;
00001e  f06f4070          MVN      r0,#0xf0000000
000022  9007              STR      r0,[sp,#0x1c]
;;;41       pData = (const U32 *)pPixel;
000024  f8dda050          LDR      r10,[sp,#0x50]
;;;42       Mag = (xMag | yMag);
000028  e9dd0116          LDRD     r0,r1,[sp,#0x58]
00002c  ea400001          ORR      r0,r0,r1
000030  9009              STR      r0,[sp,#0x24]
;;;43       BytesPerLine = xsize * 4;
000032  ea4f0586          LSL      r5,r6,#2
;;;44       /* Check if bitmaps color format fits to the current color conversion */
;;;45       if (Mag == 1) {
000036  9809              LDR      r0,[sp,#0x24]
000038  2801              CMP      r0,#1
00003a  d10d              BNE      |L1.88|
;;;46         #if GUI_SUPPORT_MEMDEV
;;;47         if (!GUI_Context.hDevData) {
00003c  48a1              LDR      r0,|L1.708|
00003e  f8b0004c          LDRH     r0,[r0,#0x4c]  ; GUI_Context
000042  b948              CBNZ     r0,|L1.88|
;;;48         #else
;;;49         {
;;;50         #endif
;;;51           if (LCD_GetpfIndex2ColorEx(GUI_Context.SelLayer) == pfIndex2Color) {
000044  499f              LDR      r1,|L1.708|
000046  7c48              LDRB     r0,[r1,#0x11]  ; GUI_Context
000048  f7fffffe          BL       LCD_GetpfIndex2ColorEx
00004c  9918              LDR      r1,[sp,#0x60]
00004e  4288              CMP      r0,r1
000050  d102              BNE      |L1.88|
;;;52             UseDrawBitmap = 1;
000052  f04f0001          MOV      r0,#1
000056  9008              STR      r0,[sp,#0x20]
                  |L1.88|
;;;53           }
;;;54         }
;;;55       }
;;;56       if (UseDrawBitmap) {
000058  9808              LDR      r0,[sp,#0x20]
00005a  b180              CBZ      r0,|L1.126|
;;;57         LCD_DrawBitmap(x0, y0, xsize, ysize, 1, 1, 24, BytesPerLine, pPixel, 0);
00005c  2100              MOVS     r1,#0
00005e  2218              MOVS     r2,#0x18
000060  9814              LDR      r0,[sp,#0x50]
000062  e9cd2502          STRD     r2,r5,[sp,#8]
000066  e9cd0104          STRD     r0,r1,[sp,#0x10]
00006a  2001              MOVS     r0,#1
00006c  9000              STR      r0,[sp,#0]
00006e  4643              MOV      r3,r8
000070  4632              MOV      r2,r6
000072  4649              MOV      r1,r9
000074  9001              STR      r0,[sp,#4]
000076  4638              MOV      r0,r7
000078  f7fffffe          BL       LCD_DrawBitmap
00007c  e0ee              B        |L1.604|
                  |L1.126|
;;;58       } else {
;;;59         if (Mag == 1) {
00007e  9809              LDR      r0,[sp,#0x24]
000080  2801              CMP      r0,#1
000082  d17d              BNE      |L1.384|
;;;60           /* Perform clipping */
;;;61           int x1, y1, Diff;
;;;62           y1 = y0 + ysize - 1;
000084  eb090008          ADD      r0,r9,r8
000088  f1a00001          SUB      r0,r0,#1
00008c  9005              STR      r0,[sp,#0x14]
;;;63           x1 = x0 + xsize - 1;
00008e  eb070006          ADD      r0,r7,r6
000092  f1a00001          SUB      r0,r0,#1
000096  9006              STR      r0,[sp,#0x18]
;;;64           /* Clip Y */
;;;65           if (y0 < GUI_Context.ClipRect.y0) {
000098  488a              LDR      r0,|L1.708|
00009a  f9b0000a          LDRSH    r0,[r0,#0xa]
00009e  4548              CMP      r0,r9
0000a0  dd0f              BLE      |L1.194|
;;;66             Diff = GUI_Context.ClipRect.y0 - y0;
0000a2  4888              LDR      r0,|L1.708|
0000a4  f9b0000a          LDRSH    r0,[r0,#0xa]
0000a8  eba00409          SUB      r4,r0,r9
;;;67             y0   = GUI_Context.ClipRect.y0;
0000ac  4885              LDR      r0,|L1.708|
0000ae  f9b0900a          LDRSH    r9,[r0,#0xa]
;;;68             #if GUI_SUPPORT_LARGE_BITMAPS                       /* Required only for 16 bit CPUs if some bitmaps are >64kByte */
;;;69               pData += (U32)Diff * (U32)BytesPerLine / 4;
;;;70             #else
;;;71               pData += (unsigned)Diff * (unsigned)BytesPerLine / 4;
0000b2  fb04f005          MUL      r0,r4,r5
0000b6  ea4f0090          LSR      r0,r0,#2
0000ba  eb0a0a80          ADD      r10,r10,r0,LSL #2
;;;72             #endif
;;;73             ysize -= Diff;
0000be  eba80804          SUB      r8,r8,r4
                  |L1.194|
;;;74           }
;;;75           Diff = y1 - GUI_Context.ClipRect.y1;
0000c2  4880              LDR      r0,|L1.708|
0000c4  f9b0100e          LDRSH    r1,[r0,#0xe]
0000c8  9805              LDR      r0,[sp,#0x14]
0000ca  eba00401          SUB      r4,r0,r1
;;;76           if (Diff > 0) {
0000ce  2c00              CMP      r4,#0
0000d0  dd01              BLE      |L1.214|
;;;77             ysize -= Diff;
0000d2  eba80804          SUB      r8,r8,r4
                  |L1.214|
;;;78           }
;;;79           if (ysize <=0) {
0000d6  f1b80f00          CMP      r8,#0
0000da  dc02              BGT      |L1.226|
                  |L1.220|
;;;80     		    return;
;;;81           }
;;;82           /* Clip right side */
;;;83           Diff = x1 - GUI_Context.ClipRect.x1;
;;;84           if (Diff > 0) {
;;;85             xsize -= Diff;
;;;86           }
;;;87           /* Clip left side */
;;;88           if (x0 < GUI_Context.ClipRect.x0) {
;;;89             Diff = GUI_Context.ClipRect.x0 - x0;
;;;90     			  xsize -= Diff;
;;;91             pData += Diff; 
;;;92             x0 += Diff; 
;;;93           }
;;;94           if (xsize <=0) {
;;;95     		    return;
;;;96           }
;;;97           /* Simple, unmagnified output using LCD_L0_SetPixel() */
;;;98           for (y = 0; y < ysize; y++) {
;;;99             int x;
;;;100            const U32 * p = pData;
;;;101            for (x = 0; x < xsize; x++) {
;;;102              U32 Color;
;;;103              Color = *p++;
;;;104              if (Color != PrevColor) {
;;;105                LCD_SetColor(pfIndex2Color(Color));
;;;106                PrevColor = Color;
;;;107              }
;;;108              LCDDEV_L0_SetPixelIndex(x + x0, y + y0, LCD_COLORINDEX);
;;;109            }
;;;110            pData += BytesPerLine / 4;
;;;111          }
;;;112        } else {
;;;113          /* Magnified output using LCD_FillRect() */
;;;114          int x,y;
;;;115          int yi;
;;;116          for (y = y0, yi = 0; yi < ysize; yi++, y += yMag, pPixel += BytesPerLine) {
;;;117            int yMax;
;;;118            yMax = y + yMag - 1;
;;;119            /* Draw if within clip area */
;;;120            if ((yMax >= GUI_Context.ClipRect.y0) && (y <= GUI_Context.ClipRect.y1)) {
;;;121              int xi;
;;;122              const U32 GUI_UNI_PTR * p = pData;
;;;123              for (x = x0, xi = 0; xi < xsize; xi++, x += xMag) {
;;;124                U32 Color;
;;;125                Color = *p++;
;;;126                if (Color != PrevColor) {
;;;127                  LCD_SetColor(pfIndex2Color(Color));
;;;128                  PrevColor = Color;
;;;129                }
;;;130                LCD_FillRect(x, y, x + xMag - 1, yMax);
;;;131              }
;;;132            }
;;;133            pData += BytesPerLine / 4;
;;;134          }
;;;135        }
;;;136        GUI_SetColorIndex(OldIndex);
;;;137      }
;;;138    }
0000dc  b00b              ADD      sp,sp,#0x2c
0000de  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.226|
0000e2  4878              LDR      r0,|L1.708|
0000e4  f9b0100c          LDRSH    r1,[r0,#0xc]          ;83
0000e8  9806              LDR      r0,[sp,#0x18]         ;83
0000ea  eba00401          SUB      r4,r0,r1              ;83
0000ee  2c00              CMP      r4,#0                 ;84
0000f0  dd01              BLE      |L1.246|
0000f2  eba60604          SUB      r6,r6,r4              ;85
                  |L1.246|
0000f6  4873              LDR      r0,|L1.708|
0000f8  f9b00008          LDRSH    r0,[r0,#8]            ;88  ; GUI_Context
0000fc  42b8              CMP      r0,r7                 ;88
0000fe  dd09              BLE      |L1.276|
000100  4870              LDR      r0,|L1.708|
000102  f9b00008          LDRSH    r0,[r0,#8]            ;89  ; GUI_Context
000106  eba00407          SUB      r4,r0,r7              ;89
00010a  eba60604          SUB      r6,r6,r4              ;90
00010e  eb0a0a84          ADD      r10,r10,r4,LSL #2     ;91
000112  4427              ADD      r7,r7,r4              ;92
                  |L1.276|
000114  2e00              CMP      r6,#0                 ;94
000116  dc00              BGT      |L1.282|
000118  e7e0              B        |L1.220|
                  |L1.282|
00011a  f04f0b00          MOV      r11,#0                ;98
00011e  e03d              B        |L1.412|
                  |L1.288|
000120  f8cda00c          STR      r10,[sp,#0xc]         ;100
000124  f04f0000          MOV      r0,#0                 ;101
000128  9004              STR      r0,[sp,#0x10]         ;101
00012a  e027              B        |L1.380|
                  |L1.300|
00012c  9803              LDR      r0,[sp,#0xc]          ;103
00012e  6800              LDR      r0,[r0,#0]            ;103
000130  9002              STR      r0,[sp,#8]            ;103
000132  9803              LDR      r0,[sp,#0xc]          ;103
000134  f1000004          ADD      r0,r0,#4              ;103
000138  9003              STR      r0,[sp,#0xc]          ;103
00013a  9907              LDR      r1,[sp,#0x1c]         ;104
00013c  9802              LDR      r0,[sp,#8]            ;104
00013e  4288              CMP      r0,r1                 ;104
000140  d007              BEQ      |L1.338|
000142  9918              LDR      r1,[sp,#0x60]         ;105
000144  9802              LDR      r0,[sp,#8]            ;105
000146  4788              BLX      r1                    ;105
000148  9001              STR      r0,[sp,#4]            ;105
00014a  f7fffffe          BL       LCD_SetColor
00014e  9802              LDR      r0,[sp,#8]            ;106
000150  9007              STR      r0,[sp,#0x1c]         ;106
                  |L1.338|
000152  f8dfc170          LDR      r12,|L1.708|
000156  f8bc2002          LDRH     r2,[r12,#2]           ;108  ; GUI_Context
00015a  eb0b0109          ADD      r1,r11,r9             ;108
00015e  f8ddc010          LDR      r12,[sp,#0x10]        ;108
000162  eb0c0007          ADD      r0,r12,r7             ;108
000166  f8dfc15c          LDR      r12,|L1.708|
00016a  f8dcc048          LDR      r12,[r12,#0x48]       ;108  ; GUI_Context
00016e  f8dc3024          LDR      r3,[r12,#0x24]        ;108
000172  4798              BLX      r3                    ;108
000174  9804              LDR      r0,[sp,#0x10]         ;101
000176  f1000001          ADD      r0,r0,#1              ;101
00017a  9004              STR      r0,[sp,#0x10]         ;101
                  |L1.380|
00017c  9804              LDR      r0,[sp,#0x10]         ;101
00017e  e000              B        |L1.386|
                  |L1.384|
000180  e00f              B        |L1.418|
                  |L1.386|
000182  42b0              CMP      r0,r6                 ;101
000184  dbd2              BLT      |L1.300|
000186  4628              MOV      r0,r5                 ;110
000188  ea4f71e5          ASR      r1,r5,#31             ;110
00018c  eb057191          ADD      r1,r5,r1,LSR #30      ;110
000190  ea4f01a1          ASR      r1,r1,#2              ;110
000194  eb0a0a81          ADD      r10,r10,r1,LSL #2     ;110
000198  f10b0b01          ADD      r11,r11,#1            ;98
                  |L1.412|
00019c  45c3              CMP      r11,r8                ;98
00019e  dbbf              BLT      |L1.288|
0001a0  e059              B        |L1.598|
                  |L1.418|
0001a2  464c              MOV      r4,r9                 ;116
0001a4  f04f0000          MOV      r0,#0                 ;116
0001a8  9005              STR      r0,[sp,#0x14]         ;116
0001aa  e050              B        |L1.590|
                  |L1.428|
0001ac  9817              LDR      r0,[sp,#0x5c]         ;118
0001ae  4420              ADD      r0,r0,r4              ;118
0001b0  f1a00001          SUB      r0,r0,#1              ;118
0001b4  9004              STR      r0,[sp,#0x10]         ;118
0001b6  4843              LDR      r0,|L1.708|
0001b8  f9b0100a          LDRSH    r1,[r0,#0xa]          ;120
0001bc  9804              LDR      r0,[sp,#0x10]         ;120
0001be  4281              CMP      r1,r0                 ;120
0001c0  dc33              BGT      |L1.554|
0001c2  4840              LDR      r0,|L1.708|
0001c4  f9b0000e          LDRSH    r0,[r0,#0xe]          ;120
0001c8  42a0              CMP      r0,r4                 ;120
0001ca  db2e              BLT      |L1.554|
0001cc  f8cda008          STR      r10,[sp,#8]           ;122
0001d0  9706              STR      r7,[sp,#0x18]         ;123
0001d2  f04f0000          MOV      r0,#0                 ;123
0001d6  9003              STR      r0,[sp,#0xc]          ;123
0001d8  e023              B        |L1.546|
                  |L1.474|
0001da  9802              LDR      r0,[sp,#8]            ;125
0001dc  6800              LDR      r0,[r0,#0]            ;125
0001de  9001              STR      r0,[sp,#4]            ;125
0001e0  9802              LDR      r0,[sp,#8]            ;125
0001e2  f1000004          ADD      r0,r0,#4              ;125
0001e6  9002              STR      r0,[sp,#8]            ;125
0001e8  9907              LDR      r1,[sp,#0x1c]         ;126
0001ea  9801              LDR      r0,[sp,#4]            ;126
0001ec  4288              CMP      r0,r1                 ;126
0001ee  d007              BEQ      |L1.512|
0001f0  9918              LDR      r1,[sp,#0x60]         ;127
0001f2  9801              LDR      r0,[sp,#4]            ;127
0001f4  4788              BLX      r1                    ;127
0001f6  9000              STR      r0,[sp,#0]            ;127
0001f8  f7fffffe          BL       LCD_SetColor
0001fc  9801              LDR      r0,[sp,#4]            ;128
0001fe  9007              STR      r0,[sp,#0x1c]         ;128
                  |L1.512|
000200  9916              LDR      r1,[sp,#0x58]         ;130
000202  9806              LDR      r0,[sp,#0x18]         ;130
000204  4408              ADD      r0,r0,r1              ;130
000206  1e42              SUBS     r2,r0,#1              ;130
000208  4621              MOV      r1,r4                 ;130
00020a  9b04              LDR      r3,[sp,#0x10]         ;130
00020c  9806              LDR      r0,[sp,#0x18]         ;130
00020e  f7fffffe          BL       LCD_FillRect
000212  9803              LDR      r0,[sp,#0xc]          ;123
000214  f1000001          ADD      r0,r0,#1              ;123
000218  9003              STR      r0,[sp,#0xc]          ;123
00021a  9916              LDR      r1,[sp,#0x58]         ;123
00021c  9806              LDR      r0,[sp,#0x18]         ;123
00021e  4408              ADD      r0,r0,r1              ;123
000220  9006              STR      r0,[sp,#0x18]         ;123
                  |L1.546|
000222  9803              LDR      r0,[sp,#0xc]          ;123
000224  42b0              CMP      r0,r6                 ;123
000226  dbd8              BLT      |L1.474|
000228  bf00              NOP                            ;132
                  |L1.554|
00022a  4628              MOV      r0,r5                 ;133
00022c  ea4f71e5          ASR      r1,r5,#31             ;133
000230  eb057191          ADD      r1,r5,r1,LSR #30      ;133
000234  ea4f01a1          ASR      r1,r1,#2              ;133
000238  eb0a0a81          ADD      r10,r10,r1,LSL #2     ;133
00023c  9805              LDR      r0,[sp,#0x14]         ;116
00023e  f1000001          ADD      r0,r0,#1              ;116
000242  9005              STR      r0,[sp,#0x14]         ;116
000244  9817              LDR      r0,[sp,#0x5c]         ;116
000246  4404              ADD      r4,r4,r0              ;116
000248  9814              LDR      r0,[sp,#0x50]         ;116
00024a  4428              ADD      r0,r0,r5              ;116
00024c  9014              STR      r0,[sp,#0x50]         ;116
                  |L1.590|
00024e  9805              LDR      r0,[sp,#0x14]         ;116
000250  4540              CMP      r0,r8                 ;116
000252  dbab              BLT      |L1.428|
000254  bf00              NOP                            ;135
                  |L1.598|
000256  980a              LDR      r0,[sp,#0x28]         ;136
000258  f7fffffe          BL       GUI_SetColorIndex
                  |L1.604|
00025c  bf00              NOP      
00025e  e73d              B        |L1.220|
;;;139    
                          ENDP

                  _DrawBitmap_888 PROC
;;;143    */
;;;144    static void _DrawBitmap_888(int x0, int y0, int xsize, int ysize, const U8 GUI_UNI_PTR * pPixel, const LCD_LOGPALETTE GUI_UNI_PTR * pLogPal, int xMag, int yMag) {
000260  e92d4ff0          PUSH     {r4-r11,lr}
000264  b085              SUB      sp,sp,#0x14
000266  4604              MOV      r4,r0
000268  460d              MOV      r5,r1
00026a  4616              MOV      r6,r2
00026c  461f              MOV      r7,r3
00026e  e9ddab10          LDRD     r10,r11,[sp,#0x40]
000272  e9dd890e          LDRD     r8,r9,[sp,#0x38]
;;;145      _DrawBitmap(x0, y0, xsize, ysize, pPixel, pLogPal, xMag, yMag, GUI_BitmapMethods888.pfIndex2Color);
000276  4814              LDR      r0,|L1.712|
000278  6840              LDR      r0,[r0,#4]  ; GUI_BitmapMethods888
00027a  463b              MOV      r3,r7
00027c  4632              MOV      r2,r6
00027e  4629              MOV      r1,r5
000280  e88d0f00          STM      sp,{r8-r11}
000284  9004              STR      r0,[sp,#0x10]
000286  4620              MOV      r0,r4
000288  f7fffffe          BL       _DrawBitmap
;;;146    }
00028c  b005              ADD      sp,sp,#0x14
00028e  e8bd8ff0          POP      {r4-r11,pc}
;;;147    
                          ENDP

                  _DrawBitmap_M888 PROC
;;;151    */
;;;152    static void _DrawBitmap_M888(int x0, int y0, int xsize, int ysize, const U8 GUI_UNI_PTR * pPixel, const LCD_LOGPALETTE GUI_UNI_PTR * pLogPal, int xMag, int yMag) {
000292  e92d4ff0          PUSH     {r4-r11,lr}
000296  b085              SUB      sp,sp,#0x14
000298  4604              MOV      r4,r0
00029a  460d              MOV      r5,r1
00029c  4616              MOV      r6,r2
00029e  461f              MOV      r7,r3
0002a0  e9ddab10          LDRD     r10,r11,[sp,#0x40]
0002a4  e9dd890e          LDRD     r8,r9,[sp,#0x38]
;;;153      _DrawBitmap(x0, y0, xsize, ysize, pPixel, pLogPal, xMag, yMag, GUI_BitmapMethodsM888.pfIndex2Color);
0002a8  4808              LDR      r0,|L1.716|
0002aa  6840              LDR      r0,[r0,#4]  ; GUI_BitmapMethodsM888
0002ac  463b              MOV      r3,r7
0002ae  4632              MOV      r2,r6
0002b0  4629              MOV      r1,r5
0002b2  e88d0f00          STM      sp,{r8-r11}
0002b6  9004              STR      r0,[sp,#0x10]
0002b8  4620              MOV      r0,r4
0002ba  f7fffffe          BL       _DrawBitmap
;;;154    }
0002be  b005              ADD      sp,sp,#0x14
0002c0  e8bd8ff0          POP      {r4-r11,pc}
;;;155    
                          ENDP

                  |L1.708|
                          DCD      GUI_Context
                  |L1.712|
                          DCD      GUI_BitmapMethods888
                  |L1.716|
                          DCD      GUI_BitmapMethodsM888

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  GUI_BitmapMethods888
                          DCD      _DrawBitmap_888
                          DCD      LCD_Index2Color_888
                  GUI_BitmapMethodsM888
                          DCD      _DrawBitmap_M888
                          DCD      LCD_Index2Color_M888
