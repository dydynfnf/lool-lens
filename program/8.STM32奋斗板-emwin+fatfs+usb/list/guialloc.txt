; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\guialloc.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\guialloc.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -I.\GUI\AntiAlias -I.\GUI\Config -I.\GUI\ConvertColor -I.\GUI\ConvertMono -I.\GUI\Core -I.\GUI\Font -I.\GUI\GUI_X -I.\GUI\JPEG -I.\GUI\LCDDriver -I.\GUI\MemDev -I.\GUI\MultiLayer -I.\GUI\Widget -I.\GUI\WM -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\INC\ST\STM32F10x -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\guialloc.crf GUI\Core\GUIAlloc.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _Size2LegalSize PROC
;;;132    */
;;;133    static GUI_ALLOC_DATATYPE _Size2LegalSize(GUI_ALLOC_DATATYPE size) {
000000  4601              MOV      r1,r0
;;;134      return (size + ((1 << GUI_BLOCK_ALIGN) - 1)) & ~((1 << GUI_BLOCK_ALIGN) - 1);
000002  f1010003          ADD      r0,r1,#3
000006  f0200003          BIC      r0,r0,#3
00000a  b200              SXTH     r0,r0
;;;135    }
00000c  4770              BX       lr
;;;136      
                          ENDP

                  _GetSize PROC
;;;140    */
;;;141    static GUI_ALLOC_DATATYPE _GetSize(GUI_HMEM  hMem) {
00000e  4601              MOV      r1,r0
;;;142      return aBlock[hMem].Size;
000010  48f6              LDR      r0,|L1.1004|
000012  eb0000c1          ADD      r0,r0,r1,LSL #3
000016  f9b00002          LDRSH    r0,[r0,#2]
;;;143    }
00001a  4770              BX       lr
;;;144    
                          ENDP

                  _Free PROC
;;;148    */
;;;149    static void _Free(GUI_HMEM hMem) {
00001c  b530              PUSH     {r4,r5,lr}
;;;150      GUI_ALLOC_DATATYPE Size;
;;;151      GUI_DEBUG_LOG1("\nGUI_ALLOC_Free(%d)", hMem);
;;;152      /* Do some error checking ... */
;;;153      #if GUI_DEBUG_LEVEL>0
;;;154        /* Block not allocated ? */
;;;155        if (aBlock[hMem].Size == 0) {
00001e  49f3              LDR      r1,|L1.1004|
000020  eb0101c0          ADD      r1,r1,r0,LSL #3
000024  8849              LDRH     r1,[r1,#2]
000026  b901              CBNZ     r1,|L1.42|
                  |L1.40|
;;;156          GUI_DEBUG_ERROROUT("GUI_ALLOC_Free(): Invalid hMem");
;;;157          return;
;;;158        }
;;;159      #endif
;;;160      Size = aBlock[hMem].Size;
;;;161      #ifdef WIN32
;;;162        GUI_MEMSET(&GUI_Heap.abHeap[aBlock[hMem].Off], 0xcc, Size);
;;;163      #endif
;;;164      GUI_ALLOC.NumFreeBytes += Size;
;;;165      GUI_ALLOC.NumUsedBytes -= Size;
;;;166      aBlock[hMem].Size = 0;
;;;167      if (_FirstFreeHandle > hMem) {
;;;168        _FirstFreeHandle = hMem;
;;;169      }
;;;170      {
;;;171        int Next = aBlock[hMem].Next;
;;;172        int Prev = aBlock[hMem].Prev;
;;;173        aBlock[Prev].Next = Next;
;;;174        if (Next) {
;;;175          aBlock[Next].Prev = Prev;
;;;176        }
;;;177      }  
;;;178      GUI_ALLOC.NumFreeBlocks++;
;;;179      GUI_ALLOC.NumUsedBlocks--;
;;;180    }
000028  bd30              POP      {r4,r5,pc}
                  |L1.42|
00002a  49f0              LDR      r1,|L1.1004|
00002c  eb0101c0          ADD      r1,r1,r0,LSL #3       ;160
000030  f9b12002          LDRSH    r2,[r1,#2]            ;160
000034  49ee              LDR      r1,|L1.1008|
000036  89c9              LDRH     r1,[r1,#0xe]          ;164  ; GUI_ALLOC
000038  4411              ADD      r1,r1,r2              ;164
00003a  b209              SXTH     r1,r1                 ;164
00003c  4bec              LDR      r3,|L1.1008|
00003e  81d9              STRH     r1,[r3,#0xe]          ;164
000040  4619              MOV      r1,r3                 ;165
000042  8989              LDRH     r1,[r1,#0xc]          ;165  ; GUI_ALLOC
000044  eba10102          SUB      r1,r1,r2              ;165
000048  b209              SXTH     r1,r1                 ;165
00004a  8199              STRH     r1,[r3,#0xc]          ;165
00004c  f04f0100          MOV      r1,#0                 ;166
000050  4be6              LDR      r3,|L1.1004|
000052  eb0303c0          ADD      r3,r3,r0,LSL #3       ;166
000056  8059              STRH     r1,[r3,#2]            ;166
000058  49e6              LDR      r1,|L1.1012|
00005a  6809              LDR      r1,[r1,#0]            ;167  ; _FirstFreeHandle
00005c  4281              CMP      r1,r0                 ;167
00005e  dd01              BLE      |L1.100|
000060  49e4              LDR      r1,|L1.1012|
000062  6008              STR      r0,[r1,#0]            ;168  ; _FirstFreeHandle
                  |L1.100|
000064  4ce1              LDR      r4,|L1.1004|
000066  eb0404c0          ADD      r4,r4,r0,LSL #3       ;171
00006a  88a1              LDRH     r1,[r4,#4]            ;171
00006c  4cdf              LDR      r4,|L1.1004|
00006e  eb0404c0          ADD      r4,r4,r0,LSL #3       ;172
000072  88e3              LDRH     r3,[r4,#6]            ;172
000074  4cdd              LDR      r4,|L1.1004|
000076  eb0404c3          ADD      r4,r4,r3,LSL #3       ;173
00007a  80a1              STRH     r1,[r4,#4]            ;173
00007c  b119              CBZ      r1,|L1.134|
00007e  4ddb              LDR      r5,|L1.1004|
000080  eb0505c1          ADD      r5,r5,r1,LSL #3       ;175
000084  80eb              STRH     r3,[r5,#6]            ;175
                  |L1.134|
000086  49da              LDR      r1,|L1.1008|
000088  6849              LDR      r1,[r1,#4]            ;178  ; GUI_ALLOC
00008a  f1010101          ADD      r1,r1,#1              ;178
00008e  4bd8              LDR      r3,|L1.1008|
000090  6059              STR      r1,[r3,#4]            ;178  ; GUI_ALLOC
000092  4619              MOV      r1,r3                 ;179
000094  6809              LDR      r1,[r1,#0]            ;179  ; GUI_ALLOC
000096  f1a10101          SUB      r1,r1,#1              ;179
00009a  6019              STR      r1,[r3,#0]            ;179  ; GUI_ALLOC
00009c  bf00              NOP      
00009e  e7c3              B        |L1.40|
;;;181    
                          ENDP

                  _FindFreeHandle PROC
;;;188    */
;;;189    static GUI_HMEM _FindFreeHandle(void) {
0000a0  48d4              LDR      r0,|L1.1012|
;;;190      int i;
;;;191      for (i = _FirstFreeHandle; i < GUI_MAXBLOCKS; i++) {
0000a2  6801              LDR      r1,[r0,#0]  ; _FirstFreeHandle
0000a4  e00a              B        |L1.188|
                  |L1.166|
;;;192        if (aBlock[i].Size == 0) {
0000a6  48d1              LDR      r0,|L1.1004|
0000a8  eb0000c1          ADD      r0,r0,r1,LSL #3
0000ac  8840              LDRH     r0,[r0,#2]
0000ae  b918              CBNZ     r0,|L1.184|
;;;193          _FirstFreeHandle = i;
0000b0  48d0              LDR      r0,|L1.1012|
0000b2  6001              STR      r1,[r0,#0]  ; _FirstFreeHandle
;;;194          return i;
0000b4  b208              SXTH     r0,r1
                  |L1.182|
;;;195        }
;;;196      }
;;;197      GUI_DEBUG_ERROROUT1("Insufficient memory handles configured (GUI_MAXBLOCKS == %d (See GUIConf.h))", GUI_MAXBLOCKS);
;;;198      return GUI_HMEM_NULL;
;;;199    }
0000b6  4770              BX       lr
                  |L1.184|
0000b8  f1010101          ADD      r1,r1,#1              ;191
                  |L1.188|
0000bc  f5b17fc4          CMP      r1,#0x188             ;191
0000c0  dbf1              BLT      |L1.166|
0000c2  2000              MOVS     r0,#0                 ;198
0000c4  e7f7              B        |L1.182|
;;;200    
                          ENDP

                  _FindHole PROC
;;;208    */
;;;209    static GUI_HMEM _FindHole(GUI_ALLOC_DATATYPE Size) {
0000c6  b530              PUSH     {r4,r5,lr}
0000c8  4602              MOV      r2,r0
;;;210      int i, iNext;
;;;211      for (i=0; (iNext = aBlock[i].Next) != 0; i = iNext) {
0000ca  f04f0100          MOV      r1,#0
0000ce  e012              B        |L1.246|
                  |L1.208|
;;;212        GUI_ALLOC_DATATYPE NumFreeBytes = aBlock[iNext].Off- (aBlock[i].Off+aBlock[i].Size);
0000d0  48c6              LDR      r0,|L1.1004|
0000d2  f8300031          LDRH     r0,[r0,r1,LSL #3]
0000d6  4dc5              LDR      r5,|L1.1004|
0000d8  eb0505c1          ADD      r5,r5,r1,LSL #3
0000dc  886d              LDRH     r5,[r5,#2]
0000de  4428              ADD      r0,r0,r5
0000e0  4dc2              LDR      r5,|L1.1004|
0000e2  f8355033          LDRH     r5,[r5,r3,LSL #3]
0000e6  eba50000          SUB      r0,r5,r0
0000ea  b204              SXTH     r4,r0
;;;213        if (NumFreeBytes>=Size) {
0000ec  4294              CMP      r4,r2
0000ee  db01              BLT      |L1.244|
;;;214          return i;
0000f0  b208              SXTH     r0,r1
                  |L1.242|
;;;215        }
;;;216      }
;;;217      /* Check last block */
;;;218      if (GUI_ALLOC_SIZE - (aBlock[i].Off+aBlock[i].Size) >= Size) {
;;;219        return i;
;;;220      }
;;;221      return -1;
;;;222    }
0000f2  bd30              POP      {r4,r5,pc}
                  |L1.244|
0000f4  4619              MOV      r1,r3                 ;211
                  |L1.246|
0000f6  48bd              LDR      r0,|L1.1004|
0000f8  eb0000c1          ADD      r0,r0,r1,LSL #3       ;211
0000fc  8883              LDRH     r3,[r0,#4]            ;211
0000fe  2b00              CMP      r3,#0                 ;211
000100  d1e6              BNE      |L1.208|
000102  48ba              LDR      r0,|L1.1004|
000104  f9300031          LDRSH    r0,[r0,r1,LSL #3]     ;218
000108  4cb8              LDR      r4,|L1.1004|
00010a  eb0404c1          ADD      r4,r4,r1,LSL #3       ;218
00010e  f9b44002          LDRSH    r4,[r4,#2]            ;218
000112  4420              ADD      r0,r0,r4              ;218
000114  f24304d4          MOV      r4,#0x30d4            ;218
000118  1a20              SUBS     r0,r4,r0              ;218
00011a  4290              CMP      r0,r2                 ;218
00011c  db01              BLT      |L1.290|
00011e  b208              SXTH     r0,r1                 ;219
000120  e7e7              B        |L1.242|
                  |L1.290|
000122  f04f30ff          MOV      r0,#0xffffffff        ;221
000126  e7e4              B        |L1.242|
;;;223    
                          ENDP

                  _CreateHole PROC
;;;231    */
;;;232    static GUI_HMEM _CreateHole(GUI_ALLOC_DATATYPE Size) {
000128  e92d47f0          PUSH     {r4-r10,lr}
00012c  4606              MOV      r6,r0
;;;233      int i, iNext;
;;;234      int r = -1;
00012e  f04f39ff          MOV      r9,#0xffffffff
;;;235      for (i=0; (iNext =aBlock[i].Next) !=0; i= iNext) {
000132  f04f0400          MOV      r4,#0
000136  e03b              B        |L1.432|
                  |L1.312|
;;;236        GUI_ALLOC_DATATYPE NumFreeBytes = aBlock[iNext].Off- (aBlock[i].Off+aBlock[i].Size);
000138  48ac              LDR      r0,|L1.1004|
00013a  f8300034          LDRH     r0,[r0,r4,LSL #3]
00013e  49ab              LDR      r1,|L1.1004|
000140  eb0101c4          ADD      r1,r1,r4,LSL #3
000144  8849              LDRH     r1,[r1,#2]
000146  4408              ADD      r0,r0,r1
000148  49a8              LDR      r1,|L1.1004|
00014a  f8311035          LDRH     r1,[r1,r5,LSL #3]
00014e  eba10000          SUB      r0,r1,r0
000152  fa0ffa80          SXTH     r10,r0
;;;237        if (NumFreeBytes < Size) {
000156  45b2              CMP      r10,r6
000158  da29              BGE      |L1.430|
;;;238          GUI_ALLOC_DATATYPE NumBytesBeforeBlock = aBlock[iNext].Off - (aBlock[i].Off+aBlock[i].Size);
00015a  48a4              LDR      r0,|L1.1004|
00015c  f8300034          LDRH     r0,[r0,r4,LSL #3]
000160  49a2              LDR      r1,|L1.1004|
000162  eb0101c4          ADD      r1,r1,r4,LSL #3
000166  8849              LDRH     r1,[r1,#2]
000168  4408              ADD      r0,r0,r1
00016a  49a0              LDR      r1,|L1.1004|
00016c  f8311035          LDRH     r1,[r1,r5,LSL #3]
000170  eba10000          SUB      r0,r1,r0
000174  b207              SXTH     r7,r0
;;;239          if (NumBytesBeforeBlock) {
000176  b1cf              CBZ      r7,|L1.428|
;;;240            U8* pData = &GUI_Heap.abHeap[aBlock[iNext].Off];
000178  489c              LDR      r0,|L1.1004|
00017a  f9300035          LDRSH    r0,[r0,r5,LSL #3]
00017e  499e              LDR      r1,|L1.1016|
000180  eb000801          ADD      r8,r0,r1
;;;241            memmove(pData-NumBytesBeforeBlock, pData, aBlock[iNext].Size);
000184  4999              LDR      r1,|L1.1004|
000186  eb0101c5          ADD      r1,r1,r5,LSL #3
00018a  f9b12002          LDRSH    r2,[r1,#2]
00018e  eba80007          SUB      r0,r8,r7
000192  4641              MOV      r1,r8
000194  f7fffffe          BL       __aeabi_memmove
;;;242            aBlock[iNext].Off -=NumBytesBeforeBlock;
000198  4894              LDR      r0,|L1.1004|
00019a  f8300035          LDRH     r0,[r0,r5,LSL #3]
00019e  eba00007          SUB      r0,r0,r7
0001a2  b200              SXTH     r0,r0
0001a4  4991              LDR      r1,|L1.1004|
0001a6  f8210035          STRH     r0,[r1,r5,LSL #3]
;;;243          }
0001aa  bf00              NOP      
                  |L1.428|
;;;244        }
0001ac  bf00              NOP      
                  |L1.430|
0001ae  462c              MOV      r4,r5                 ;235
                  |L1.432|
0001b0  488e              LDR      r0,|L1.1004|
0001b2  eb0000c4          ADD      r0,r0,r4,LSL #3       ;235
0001b6  8885              LDRH     r5,[r0,#4]            ;235
0001b8  2d00              CMP      r5,#0                 ;235
0001ba  d1bd              BNE      |L1.312|
;;;245      }
;;;246      /* Check last block */
;;;247      if (GUI_ALLOC_SIZE - (aBlock[i].Off+aBlock[i].Size) >= Size) {
0001bc  488b              LDR      r0,|L1.1004|
0001be  f9300034          LDRSH    r0,[r0,r4,LSL #3]
0001c2  498a              LDR      r1,|L1.1004|
0001c4  eb0101c4          ADD      r1,r1,r4,LSL #3
0001c8  f9b11002          LDRSH    r1,[r1,#2]
0001cc  4408              ADD      r0,r0,r1
0001ce  f24301d4          MOV      r1,#0x30d4
0001d2  1a08              SUBS     r0,r1,r0
0001d4  42b0              CMP      r0,r6
0001d6  db00              BLT      |L1.474|
;;;248        r = i;
0001d8  46a1              MOV      r9,r4
                  |L1.474|
;;;249      }
;;;250      return r;
0001da  fa0ff089          SXTH     r0,r9
;;;251    }
0001de  e8bd87f0          POP      {r4-r10,pc}
;;;252    
                          ENDP

                  GUI_ALLOC_Init PROC
;;;340    */
;;;341    void GUI_ALLOC_Init(void) {
0001e2  f2401087          MOV      r0,#0x187
;;;342      GUI_DEBUG_LOG("\nGUI_ALLOC_Init...");
;;;343      GUI_ALLOC.NumFreeBlocksMin = GUI_ALLOC.NumFreeBlocks = GUI_MAXBLOCKS-1;
0001e6  4982              LDR      r1,|L1.1008|
0001e8  6048              STR      r0,[r1,#4]  ; GUI_ALLOC
0001ea  6088              STR      r0,[r1,#8]  ; GUI_ALLOC
;;;344      GUI_ALLOC.NumFreeBytesMin  = GUI_ALLOC.NumFreeBytes  = GUI_ALLOC_SIZE;
0001ec  f24300d4          MOV      r0,#0x30d4
0001f0  81c8              STRH     r0,[r1,#0xe]
0001f2  8208              STRH     r0,[r1,#0x10]
;;;345      GUI_ALLOC.NumUsedBlocks = 0;
0001f4  f04f0000          MOV      r0,#0
0001f8  6008              STR      r0,[r1,#0]  ; GUI_ALLOC
;;;346      GUI_ALLOC.NumUsedBytes = 0;
0001fa  8188              STRH     r0,[r1,#0xc]
;;;347      aBlock[0].Size = (1<<GUI_BLOCK_ALIGN);  /* occupy minimum for a block */
0001fc  f04f0004          MOV      r0,#4
000200  497a              LDR      r1,|L1.1004|
000202  8048              STRH     r0,[r1,#2]
;;;348      aBlock[0].Off  = 0;
000204  f04f0000          MOV      r0,#0
000208  8008              STRH     r0,[r1,#0]
;;;349      aBlock[0].Next = 0;
00020a  8088              STRH     r0,[r1,#4]
;;;350      IsInitialized =1;
00020c  f04f0001          MOV      r0,#1
000210  497a              LDR      r1,|L1.1020|
000212  7008              STRB     r0,[r1,#0]
;;;351    }
000214  4770              BX       lr
;;;352    
                          ENDP

                  _CheckInit PROC
;;;256    */
;;;257    static void _CheckInit(void) {
000216  b500              PUSH     {lr}
;;;258      if (!IsInitialized) {
000218  4878              LDR      r0,|L1.1020|
00021a  7800              LDRB     r0,[r0,#0]  ; IsInitialized
00021c  b908              CBNZ     r0,|L1.546|
;;;259        GUI_ALLOC_Init();
00021e  f7fffffe          BL       GUI_ALLOC_Init
                  |L1.546|
;;;260      }
;;;261    }
000222  bd00              POP      {pc}
;;;262    
                          ENDP

                  GUI_ALLOC_GetMaxSize PROC
;;;431    */
;;;432    GUI_ALLOC_DATATYPE GUI_ALLOC_GetMaxSize(void) {
000224  e92d41f0          PUSH     {r4-r8,lr}
;;;433      GUI_ALLOC_DATATYPE r = 0;
000228  f04f0700          MOV      r7,#0
;;;434      GUI_ALLOC_DATATYPE NumFreeBytes;
;;;435      int i, iNext;
;;;436    
;;;437      GUI_LOCK();
;;;438      _CheckInit();
00022c  f7fffffe          BL       _CheckInit
;;;439      for (i=0; (iNext =aBlock[i].Next) !=0; i= iNext) {
000230  463d              MOV      r5,r7
000232  e011              B        |L1.600|
                  |L1.564|
;;;440        NumFreeBytes = aBlock[iNext].Off- (aBlock[i].Off+aBlock[i].Size);
000234  486d              LDR      r0,|L1.1004|
000236  f8300035          LDRH     r0,[r0,r5,LSL #3]
00023a  496c              LDR      r1,|L1.1004|
00023c  eb0101c5          ADD      r1,r1,r5,LSL #3
000240  8849              LDRH     r1,[r1,#2]
000242  4408              ADD      r0,r0,r1
000244  4969              LDR      r1,|L1.1004|
000246  f8311036          LDRH     r1,[r1,r6,LSL #3]
00024a  eba10000          SUB      r0,r1,r0
00024e  b204              SXTH     r4,r0
;;;441        if (NumFreeBytes > r) {
000250  42bc              CMP      r4,r7
000252  dd00              BLE      |L1.598|
;;;442          r = NumFreeBytes;
000254  4627              MOV      r7,r4
                  |L1.598|
000256  4635              MOV      r5,r6                 ;439
                  |L1.600|
000258  4864              LDR      r0,|L1.1004|
00025a  eb0000c5          ADD      r0,r0,r5,LSL #3       ;439
00025e  8886              LDRH     r6,[r0,#4]            ;439
000260  2e00              CMP      r6,#0                 ;439
000262  d1e7              BNE      |L1.564|
;;;443        }
;;;444      }
;;;445      /* Check last block */
;;;446      NumFreeBytes = (GUI_ALLOC_SIZE - (aBlock[i].Off+aBlock[i].Size));
000264  4861              LDR      r0,|L1.1004|
000266  f8300035          LDRH     r0,[r0,r5,LSL #3]
00026a  4960              LDR      r1,|L1.1004|
00026c  eb0101c5          ADD      r1,r1,r5,LSL #3
000270  8849              LDRH     r1,[r1,#2]
000272  4408              ADD      r0,r0,r1
000274  f24301d4          MOV      r1,#0x30d4
000278  eba10000          SUB      r0,r1,r0
00027c  b204              SXTH     r4,r0
;;;447      if (NumFreeBytes > r) {
00027e  42bc              CMP      r4,r7
000280  dd00              BLE      |L1.644|
;;;448        r = NumFreeBytes;
000282  4627              MOV      r7,r4
                  |L1.644|
;;;449      }
;;;450      GUI_UNLOCK();
;;;451      return r;
000284  4638              MOV      r0,r7
;;;452    }
000286  e8bd81f0          POP      {r4-r8,pc}
;;;453    
                          ENDP

                  _GetNumFreeBytes PROC
;;;266    */
;;;267    static GUI_ALLOC_DATATYPE _GetNumFreeBytes(void) {
00028a  b510              PUSH     {r4,lr}
;;;268      if (_LockCnt) {
00028c  485c              LDR      r0,|L1.1024|
00028e  6800              LDR      r0,[r0,#0]  ; _LockCnt
000290  b110              CBZ      r0,|L1.664|
;;;269        return GUI_ALLOC_GetMaxSize();
000292  f7fffffe          BL       GUI_ALLOC_GetMaxSize
                  |L1.662|
;;;270      } else {
;;;271        return GUI_ALLOC.NumFreeBytes;  
;;;272      }
;;;273    }
000296  bd10              POP      {r4,pc}
                  |L1.664|
000298  4855              LDR      r0,|L1.1008|
00029a  f9b0000e          LDRSH    r0,[r0,#0xe]          ;271  ; GUI_ALLOC
00029e  e7fa              B        |L1.662|
;;;274    
                          ENDP

                  _Alloc PROC
;;;278    */
;;;279    static GUI_HMEM _Alloc(GUI_ALLOC_DATATYPE size) {
0002a0  b570              PUSH     {r4-r6,lr}
0002a2  4606              MOV      r6,r0
;;;280      GUI_HMEM hMemNew, hMemIns;
;;;281      _CheckInit();
0002a4  f7fffffe          BL       _CheckInit
;;;282      size = _Size2LegalSize(size);
0002a8  4630              MOV      r0,r6
0002aa  f7fffffe          BL       _Size2LegalSize
0002ae  4606              MOV      r6,r0
;;;283      /* Check if memory is available at all ...*/
;;;284      if (size > _GetNumFreeBytes()) {
0002b0  f7fffffe          BL       _GetNumFreeBytes
0002b4  42b0              CMP      r0,r6
0002b6  da01              BGE      |L1.700|
;;;285        GUI_DEBUG_WARN1("GUI_ALLOC_Alloc: Insufficient memory configured (Trying to alloc % bytes)", size);
;;;286        return 0;
0002b8  2000              MOVS     r0,#0
                  |L1.698|
;;;287      }
;;;288      /* Locate free handle */
;;;289      if ((hMemNew = _FindFreeHandle()) == 0) {
;;;290        return 0;
;;;291      }
;;;292      /* Locate or Create hole of sufficient size */
;;;293      hMemIns = _FindHole(size);
;;;294      #if GUI_ALLOC_AUTDEFRAG
;;;295        if (hMemIns == -1) {
;;;296          if (_LockCnt == 0) {
;;;297            hMemIns = _CreateHole(size);
;;;298          }
;;;299        }
;;;300      #endif
;;;301      /* Occupy hole */
;;;302      if (hMemIns==-1) {
;;;303        GUI_DEBUG_ERROROUT1("GUI_ALLOC_Alloc: Could not allocate %d bytes",size);
;;;304        return 0;
;;;305    	}
;;;306      {
;;;307        GUI_ALLOC_DATATYPE Off = aBlock[hMemIns].Off + aBlock[hMemIns].Size;
;;;308        int Next = aBlock[hMemIns].Next;
;;;309        aBlock[hMemNew].Size  = size;
;;;310        aBlock[hMemNew].Off   = Off;
;;;311        if ((aBlock[hMemNew].Next  = Next) >0) {
;;;312          aBlock[Next].Prev = hMemNew;  
;;;313        }
;;;314        aBlock[hMemNew].Prev  = hMemIns;
;;;315        aBlock[hMemIns].Next  = hMemNew;
;;;316      }
;;;317      /* Keep track of number of blocks and av. memory */
;;;318      GUI_ALLOC.NumUsedBlocks++;
;;;319      GUI_ALLOC.NumFreeBlocks--;
;;;320      if (GUI_ALLOC.NumFreeBlocksMin > GUI_ALLOC.NumFreeBlocks) {
;;;321        GUI_ALLOC.NumFreeBlocksMin = GUI_ALLOC.NumFreeBlocks;
;;;322      }
;;;323      GUI_ALLOC.NumUsedBytes += size;
;;;324      GUI_ALLOC.NumFreeBytes -= size;
;;;325      if (GUI_ALLOC.NumFreeBytesMin > GUI_ALLOC.NumFreeBytes) {
;;;326        GUI_ALLOC.NumFreeBytesMin = GUI_ALLOC.NumFreeBytes;
;;;327      }
;;;328      return hMemNew;
;;;329    }
0002ba  bd70              POP      {r4-r6,pc}
                  |L1.700|
0002bc  f7fffffe          BL       _FindFreeHandle
0002c0  0005              MOVS     r5,r0                 ;289
0002c2  d100              BNE      |L1.710|
0002c4  e7f9              B        |L1.698|
                  |L1.710|
0002c6  4630              MOV      r0,r6                 ;293
0002c8  f7fffffe          BL       _FindHole
0002cc  4604              MOV      r4,r0                 ;293
0002ce  1c60              ADDS     r0,r4,#1              ;295
0002d0  d106              BNE      |L1.736|
0002d2  484b              LDR      r0,|L1.1024|
0002d4  6800              LDR      r0,[r0,#0]            ;296  ; _LockCnt
0002d6  b918              CBNZ     r0,|L1.736|
0002d8  4630              MOV      r0,r6                 ;297
0002da  f7fffffe          BL       _CreateHole
0002de  4604              MOV      r4,r0                 ;297
                  |L1.736|
0002e0  1c60              ADDS     r0,r4,#1              ;302
0002e2  d100              BNE      |L1.742|
0002e4  e7e9              B        |L1.698|
                  |L1.742|
0002e6  4a41              LDR      r2,|L1.1004|
0002e8  f8322034          LDRH     r2,[r2,r4,LSL #3]     ;307
0002ec  4b3f              LDR      r3,|L1.1004|
0002ee  eb0303c4          ADD      r3,r3,r4,LSL #3       ;307
0002f2  885b              LDRH     r3,[r3,#2]            ;307
0002f4  441a              ADD      r2,r2,r3              ;307
0002f6  b211              SXTH     r1,r2                 ;307
0002f8  4a3c              LDR      r2,|L1.1004|
0002fa  eb0202c4          ADD      r2,r2,r4,LSL #3       ;308
0002fe  8890              LDRH     r0,[r2,#4]            ;308
000300  4a3a              LDR      r2,|L1.1004|
000302  eb0202c5          ADD      r2,r2,r5,LSL #3       ;309
000306  8056              STRH     r6,[r2,#2]            ;309
000308  4a38              LDR      r2,|L1.1004|
00030a  f8221035          STRH     r1,[r2,r5,LSL #3]     ;310
00030e  eb0202c5          ADD      r2,r2,r5,LSL #3       ;311
000312  8090              STRH     r0,[r2,#4]            ;311
000314  2800              CMP      r0,#0                 ;311
000316  dd03              BLE      |L1.800|
000318  4b34              LDR      r3,|L1.1004|
00031a  eb0303c0          ADD      r3,r3,r0,LSL #3       ;312
00031e  80dd              STRH     r5,[r3,#6]            ;312
                  |L1.800|
000320  4b32              LDR      r3,|L1.1004|
000322  eb0303c5          ADD      r3,r3,r5,LSL #3       ;314
000326  80dc              STRH     r4,[r3,#6]            ;314
000328  4b30              LDR      r3,|L1.1004|
00032a  eb0303c4          ADD      r3,r3,r4,LSL #3       ;315
00032e  809d              STRH     r5,[r3,#4]            ;315
000330  482f              LDR      r0,|L1.1008|
000332  6800              LDR      r0,[r0,#0]            ;318  ; GUI_ALLOC
000334  f1000001          ADD      r0,r0,#1              ;318
000338  492d              LDR      r1,|L1.1008|
00033a  6008              STR      r0,[r1,#0]            ;318  ; GUI_ALLOC
00033c  4608              MOV      r0,r1                 ;319
00033e  6840              LDR      r0,[r0,#4]            ;319  ; GUI_ALLOC
000340  f1a00001          SUB      r0,r0,#1              ;319
000344  6048              STR      r0,[r1,#4]            ;319  ; GUI_ALLOC
000346  4608              MOV      r0,r1                 ;320
000348  6880              LDR      r0,[r0,#8]            ;320  ; GUI_ALLOC
00034a  6849              LDR      r1,[r1,#4]            ;320  ; GUI_ALLOC
00034c  4288              CMP      r0,r1                 ;320
00034e  dd03              BLE      |L1.856|
000350  4827              LDR      r0,|L1.1008|
000352  6840              LDR      r0,[r0,#4]            ;321  ; GUI_ALLOC
000354  4926              LDR      r1,|L1.1008|
000356  6088              STR      r0,[r1,#8]            ;321  ; GUI_ALLOC
                  |L1.856|
000358  4825              LDR      r0,|L1.1008|
00035a  8980              LDRH     r0,[r0,#0xc]          ;323  ; GUI_ALLOC
00035c  4430              ADD      r0,r0,r6              ;323
00035e  b200              SXTH     r0,r0                 ;323
000360  4923              LDR      r1,|L1.1008|
000362  8188              STRH     r0,[r1,#0xc]          ;323
000364  4608              MOV      r0,r1                 ;324
000366  89c0              LDRH     r0,[r0,#0xe]          ;324  ; GUI_ALLOC
000368  eba00006          SUB      r0,r0,r6              ;324
00036c  b200              SXTH     r0,r0                 ;324
00036e  81c8              STRH     r0,[r1,#0xe]          ;324
000370  4608              MOV      r0,r1                 ;325
000372  f9b00010          LDRSH    r0,[r0,#0x10]         ;325  ; GUI_ALLOC
000376  f9b1100e          LDRSH    r1,[r1,#0xe]          ;325  ; GUI_ALLOC
00037a  4288              CMP      r0,r1                 ;325
00037c  dd03              BLE      |L1.902|
00037e  481c              LDR      r0,|L1.1008|
000380  89c0              LDRH     r0,[r0,#0xe]          ;326  ; GUI_ALLOC
000382  491b              LDR      r1,|L1.1008|
000384  8208              STRH     r0,[r1,#0x10]         ;326
                  |L1.902|
000386  4628              MOV      r0,r5                 ;328
000388  e797              B        |L1.698|
;;;330    
                          ENDP

                  GUI_ALLOC_AllocNoInit PROC
;;;356    */
;;;357    GUI_HMEM GUI_ALLOC_AllocNoInit(GUI_ALLOC_DATATYPE Size) {
00038a  b570              PUSH     {r4-r6,lr}
00038c  4604              MOV      r4,r0
;;;358      GUI_HMEM hMem;
;;;359      if (Size == 0) {
00038e  b90c              CBNZ     r4,|L1.916|
;;;360        return (GUI_HMEM)0;
000390  2000              MOVS     r0,#0
                  |L1.914|
;;;361      }
;;;362      GUI_LOCK();
;;;363      GUI_DEBUG_LOG2("\nGUI_ALLOC_AllocNoInit... requesting %d, %d avail", Size, GUI_ALLOC.NumFreeBytes);
;;;364      hMem = _Alloc(Size);
;;;365      GUI_DEBUG_LOG1("\nGUI_ALLOC_AllocNoInit : Handle", hMem);
;;;366      GUI_UNLOCK();
;;;367      return hMem;
;;;368    }
000392  bd70              POP      {r4-r6,pc}
                  |L1.916|
000394  4620              MOV      r0,r4                 ;364
000396  f7fffffe          BL       _Alloc
00039a  4605              MOV      r5,r0                 ;364
00039c  4628              MOV      r0,r5                 ;367
00039e  e7f8              B        |L1.914|
;;;369    
                          ENDP

                  GUI_ALLOC_h2p PROC
;;;373    */
;;;374    void* GUI_ALLOC_h2p(GUI_HMEM  hMem) {
0003a0  4601              MOV      r1,r0
;;;375      GUI_ASSERT_LOCK();
;;;376      #if GUI_DEBUG_LEVEL > 0
;;;377        if (!hMem) {
0003a2  b909              CBNZ     r1,|L1.936|
;;;378          GUI_DEBUG_ERROROUT("\n"__FILE__ " GUI_ALLOC_h2p: illegal argument (0 handle)");
;;;379          return 0;
0003a4  2000              MOVS     r0,#0
                  |L1.934|
;;;380        }
;;;381        if (aBlock[hMem].Size == 0) {
;;;382          GUI_DEBUG_ERROROUT("Dereferencing free block");
;;;383        }
;;;384    
;;;385      #endif
;;;386      return HMEM2PTR(hMem);
;;;387    }
0003a6  4770              BX       lr
                  |L1.936|
0003a8  4810              LDR      r0,|L1.1004|
0003aa  f9300031          LDRSH    r0,[r0,r1,LSL #3]     ;386
0003ae  4a12              LDR      r2,|L1.1016|
0003b0  4410              ADD      r0,r0,r2              ;386
0003b2  e7f8              B        |L1.934|
;;;388    
                          ENDP

                  GUI_ALLOC_GetNumFreeBytes PROC
;;;392    */
;;;393    GUI_ALLOC_DATATYPE GUI_ALLOC_GetNumFreeBytes(void) {
0003b4  b510              PUSH     {r4,lr}
;;;394      _CheckInit();
0003b6  f7fffffe          BL       _CheckInit
;;;395      return GUI_ALLOC.NumFreeBytes;
0003ba  480d              LDR      r0,|L1.1008|
0003bc  f9b0000e          LDRSH    r0,[r0,#0xe]  ; GUI_ALLOC
;;;396    }
0003c0  bd10              POP      {r4,pc}
;;;397    
                          ENDP

                  GUI_ALLOC_GetNumFreeBlocks PROC
;;;401    */
;;;402    GUI_ALLOC_DATATYPE GUI_ALLOC_GetNumFreeBlocks(void) {
0003c2  b510              PUSH     {r4,lr}
;;;403      _CheckInit();
0003c4  f7fffffe          BL       _CheckInit
;;;404      return GUI_ALLOC.NumFreeBlocks;
0003c8  4809              LDR      r0,|L1.1008|
0003ca  6840              LDR      r0,[r0,#4]  ; GUI_ALLOC
0003cc  b200              SXTH     r0,r0
;;;405    }
0003ce  bd10              POP      {r4,pc}
;;;406    
                          ENDP

                  GUI_ALLOC_GetNumUsedBytes PROC
;;;410    */
;;;411    GUI_ALLOC_DATATYPE GUI_ALLOC_GetNumUsedBytes(void) {
0003d0  b510              PUSH     {r4,lr}
;;;412      _CheckInit();
0003d2  f7fffffe          BL       _CheckInit
;;;413      return GUI_ALLOC.NumUsedBytes;
0003d6  4806              LDR      r0,|L1.1008|
0003d8  f9b0000c          LDRSH    r0,[r0,#0xc]  ; GUI_ALLOC
;;;414    }
0003dc  bd10              POP      {r4,pc}
;;;415    
                          ENDP

                  GUI_ALLOC_GetNumUsedBlocks PROC
;;;419    */
;;;420    GUI_ALLOC_DATATYPE GUI_ALLOC_GetNumUsedBlocks(void) {
0003de  b510              PUSH     {r4,lr}
;;;421      _CheckInit();
0003e0  f7fffffe          BL       _CheckInit
;;;422      return GUI_ALLOC.NumUsedBlocks;
0003e4  4802              LDR      r0,|L1.1008|
0003e6  6800              LDR      r0,[r0,#0]  ; GUI_ALLOC
0003e8  b200              SXTH     r0,r0
;;;423    }
0003ea  bd10              POP      {r4,pc}
                  |L1.1004|
                          DCD      aBlock
                  |L1.1008|
                          DCD      GUI_ALLOC
                  |L1.1012|
                          DCD      _FirstFreeHandle
                  |L1.1016|
                          DCD      GUI_Heap
                  |L1.1020|
                          DCD      IsInitialized
                  |L1.1024|
                          DCD      _LockCnt
                          ENDP

                  GUI_ALLOC_Lock PROC
;;;461    */
;;;462    void GUI_ALLOC_Lock(void) {
000404  481d              LDR      r0,|L1.1148|
;;;463      _LockCnt++;
000406  6800              LDR      r0,[r0,#0]  ; _LockCnt
000408  f1000001          ADD      r0,r0,#1
00040c  491b              LDR      r1,|L1.1148|
00040e  6008              STR      r0,[r1,#0]  ; _LockCnt
;;;464    }
000410  4770              BX       lr
;;;465    
                          ENDP

                  GUI_ALLOC_Unlock PROC
;;;473    */
;;;474    void GUI_ALLOC_Unlock(void) {
000412  481a              LDR      r0,|L1.1148|
;;;475      _LockCnt--;
000414  6800              LDR      r0,[r0,#0]  ; _LockCnt
000416  f1a00001          SUB      r0,r0,#1
00041a  4918              LDR      r1,|L1.1148|
00041c  6008              STR      r0,[r1,#0]  ; _LockCnt
;;;476    }
00041e  4770              BX       lr
;;;477    
                          ENDP

                  GUI_ALLOC_GetSize PROC
;;;594    */
;;;595    GUI_ALLOC_DATATYPE GUI_ALLOC_GetSize(GUI_HMEM  hMem) {
000420  b570              PUSH     {r4-r6,lr}
000422  4604              MOV      r4,r0
;;;596      GUI_ALLOC_DATATYPE r;
;;;597    
;;;598      r = 0;
000424  f04f0500          MOV      r5,#0
;;;599      if (hMem) {
000428  b11c              CBZ      r4,|L1.1074|
;;;600        r = _GetSize(hMem);
00042a  4620              MOV      r0,r4
00042c  f7fffffe          BL       _GetSize
000430  4605              MOV      r5,r0
                  |L1.1074|
;;;601      }
;;;602      return r;
000432  4628              MOV      r0,r5
;;;603    }
000434  bd70              POP      {r4-r6,pc}
;;;604    
                          ENDP

                  GUI_ALLOC_Free PROC
;;;608    */
;;;609    void GUI_ALLOC_Free(GUI_HMEM hMem) {
000436  b510              PUSH     {r4,lr}
000438  4604              MOV      r4,r0
;;;610      if (hMem == GUI_HMEM_NULL) { /* Note: This is not an error, it is permitted */
00043a  b904              CBNZ     r4,|L1.1086|
                  |L1.1084|
;;;611        return;
;;;612      }
;;;613      GUI_LOCK();
;;;614      GUI_DEBUG_LOG1("\nGUI_ALLOC_Free(%d)", hMem);
;;;615      _Free(hMem);
;;;616      GUI_UNLOCK();
;;;617    }
00043c  bd10              POP      {r4,pc}
                  |L1.1086|
00043e  4620              MOV      r0,r4                 ;615
000440  f7fffffe          BL       _Free
000444  bf00              NOP      
000446  e7f9              B        |L1.1084|
;;;618    
                          ENDP

                  GUI_ALLOC_FreePtr PROC
;;;623    */
;;;624    void GUI_ALLOC_FreePtr(GUI_HMEM *ph) {
000448  b510              PUSH     {r4,lr}
00044a  4604              MOV      r4,r0
;;;625      GUI_LOCK();
;;;626      GUI_ALLOC_Free(*ph);
00044c  f9b40000          LDRSH    r0,[r4,#0]
000450  f7fffffe          BL       GUI_ALLOC_Free
;;;627      *ph =0;
000454  f04f0000          MOV      r0,#0
000458  8020              STRH     r0,[r4,#0]
;;;628      GUI_UNLOCK();
;;;629    }
00045a  bd10              POP      {r4,pc}
;;;630    
                          ENDP

                  GUI_ALLOC_FreePtrArray PROC
;;;634    */
;;;635    void GUI_ALLOC_FreePtrArray(GUI_HMEM * pArray, int NumElems) {
00045c  b570              PUSH     {r4-r6,lr}
00045e  4605              MOV      r5,r0
000460  460e              MOV      r6,r1
;;;636      int i;
;;;637      for (i = 0; i < NumElems; i++) {
000462  f04f0400          MOV      r4,#0
000466  e005              B        |L1.1140|
                  |L1.1128|
;;;638        GUI_ALLOC_FreePtr(&pArray[i]);
000468  eb050044          ADD      r0,r5,r4,LSL #1
00046c  f7fffffe          BL       GUI_ALLOC_FreePtr
000470  f1040401          ADD      r4,r4,#1              ;637
                  |L1.1140|
000474  42b4              CMP      r4,r6                 ;637
000476  dbf7              BLT      |L1.1128|
;;;639      }
;;;640    }
000478  bd70              POP      {r4-r6,pc}
;;;641    
                          ENDP

00047a  0000              DCW      0x0000
                  |L1.1148|
                          DCD      _LockCnt

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  GUI_Heap
                          %        12500
                  aBlock
                          %        3136
                  GUI_ALLOC
                          %        20

                          AREA ||.data||, DATA, ALIGN=2

                  IsInitialized
000000  00000000          DCB      0x00,0x00,0x00,0x00
                  _FirstFreeHandle
                          DCD      0x00000001
                  _LockCnt
                          DCD      0x00000000
