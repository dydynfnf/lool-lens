; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\pngmem.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\pngmem.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\FWlib\inc -I.\user -I.\CM3 -I.\MALLOC -I.\TFT -I.\EMWIN\EMWIN_INC -I.\EMWIN\DEMO -I.\PNG -I.\FATFS -I.\SDIO -I.\USB\inc -I.\USBCFG\inc -IE:\material\GUI\8.STM32·Ü¶·°å-emwin+fatfs+usb\RTE -Id:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.0.0 -Id:\Keil_v5\ARM\CMSIS\Include -Id:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.0.0\Device\Include -D__UVISION_VERSION=514 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\pngmem.crf PNG\pngmem.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  png_create_struct_2 PROC
;;;341    png_voidp /* PRIVATE */
;;;342    png_create_struct_2(int type, png_malloc_ptr malloc_fn, png_voidp mem_ptr)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;343    {
000004  f5ad7d6b          SUB      sp,sp,#0x3ac
000008  4606              MOV      r6,r0
00000a  460f              MOV      r7,r1
00000c  4690              MOV      r8,r2
;;;344    #endif /* PNG_USER_MEM_SUPPORTED */
;;;345       png_size_t size;
;;;346       png_voidp struct_ptr;
;;;347    
;;;348       if (type == PNG_STRUCT_INFO)
00000e  2e02              CMP      r6,#2
000010  d102              BNE      |L1.24|
;;;349          size = png_sizeof(png_info);
000012  f44f7590          MOV      r5,#0x120
000016  e009              B        |L1.44|
                  |L1.24|
;;;350       else if (type == PNG_STRUCT_PNG)
000018  2e01              CMP      r6,#1
00001a  d102              BNE      |L1.34|
;;;351          size = png_sizeof(png_struct);
00001c  f44f756a          MOV      r5,#0x3a8
000020  e004              B        |L1.44|
                  |L1.34|
;;;352       else
;;;353          return (NULL);
000022  2000              MOVS     r0,#0
                  |L1.36|
;;;354    
;;;355    #ifdef PNG_USER_MEM_SUPPORTED
;;;356       if(malloc_fn != NULL)
;;;357       {
;;;358          png_struct dummy_struct;
;;;359          png_structp png_ptr = &dummy_struct;
;;;360          png_ptr->mem_ptr=mem_ptr;
;;;361          struct_ptr = (*(malloc_fn))(png_ptr, size);
;;;362          if (struct_ptr != NULL)
;;;363             png_memset(struct_ptr, 0, size);
;;;364          return (struct_ptr);
;;;365       }
;;;366    #endif /* PNG_USER_MEM_SUPPORTED */
;;;367    
;;;368    #if defined(__TURBOC__) && !defined(__FLAT__)
;;;369       struct_ptr = (png_voidp)farmalloc(size);
;;;370    #else
;;;371    # if defined(_MSC_VER) && defined(MAXSEG_64K)
;;;372       struct_ptr = (png_voidp)halloc(size,1);
;;;373    # else
;;;374       struct_ptr = (png_voidp)malloc(size);
;;;375    # endif
;;;376    #endif
;;;377       if (struct_ptr != NULL)
;;;378          png_memset(struct_ptr, 0, size);
;;;379    
;;;380       return (struct_ptr);
;;;381    }
000024  f50d7d6b          ADD      sp,sp,#0x3ac
000028  e8bd83f0          POP      {r4-r9,pc}
                  |L1.44|
00002c  b16f              CBZ      r7,|L1.74|
00002e  46e9              MOV      r9,sp                 ;359
000030  f8c9837c          STR      r8,[r9,#0x37c]        ;360
000034  4629              MOV      r1,r5                 ;361
000036  4648              MOV      r0,r9                 ;361
000038  47b8              BLX      r7                    ;361
00003a  4604              MOV      r4,r0                 ;361
00003c  b11c              CBZ      r4,|L1.70|
00003e  4629              MOV      r1,r5                 ;363
000040  4620              MOV      r0,r4                 ;363
000042  f7fffffe          BL       __aeabi_memclr
                  |L1.70|
000046  4620              MOV      r0,r4                 ;364
000048  e7ec              B        |L1.36|
                  |L1.74|
00004a  4628              MOV      r0,r5                 ;374
00004c  f7fffffe          BL       malloc
000050  4604              MOV      r4,r0                 ;374
000052  b11c              CBZ      r4,|L1.92|
000054  4629              MOV      r1,r5                 ;378
000056  4620              MOV      r0,r4                 ;378
000058  f7fffffe          BL       __aeabi_memclr
                  |L1.92|
00005c  4620              MOV      r0,r4                 ;380
00005e  e7e1              B        |L1.36|
;;;382    
                          ENDP

                  png_create_struct PROC
;;;331    png_voidp /* PRIVATE */
;;;332    png_create_struct(int type)
000060  b510              PUSH     {r4,lr}
;;;333    {
000062  4604              MOV      r4,r0
;;;334    #ifdef PNG_USER_MEM_SUPPORTED
;;;335       return (png_create_struct_2(type, png_malloc_ptr_NULL, png_voidp_NULL));
000064  2200              MOVS     r2,#0
000066  4611              MOV      r1,r2
000068  4620              MOV      r0,r4
00006a  f7fffffe          BL       png_create_struct_2
;;;336    }
00006e  bd10              POP      {r4,pc}
;;;337    
                          ENDP

                  png_destroy_struct_2 PROC
;;;393    void /* PRIVATE */
;;;394    png_destroy_struct_2(png_voidp struct_ptr, png_free_ptr free_fn,
000070  b5f0              PUSH     {r4-r7,lr}
;;;395        png_voidp mem_ptr)
;;;396    {
000072  f5ad7d6b          SUB      sp,sp,#0x3ac
000076  4604              MOV      r4,r0
000078  460d              MOV      r5,r1
00007a  4616              MOV      r6,r2
;;;397    #endif /* PNG_USER_MEM_SUPPORTED */
;;;398       if (struct_ptr != NULL)
00007c  b164              CBZ      r4,|L1.152|
;;;399       {
;;;400    #ifdef PNG_USER_MEM_SUPPORTED
;;;401          if(free_fn != NULL)
00007e  b145              CBZ      r5,|L1.146|
;;;402          {
;;;403             png_struct dummy_struct;
;;;404             png_structp png_ptr = &dummy_struct;
000080  466f              MOV      r7,sp
;;;405             png_ptr->mem_ptr=mem_ptr;
000082  f8c7637c          STR      r6,[r7,#0x37c]
;;;406             (*(free_fn))(png_ptr, struct_ptr);
000086  4621              MOV      r1,r4
000088  4638              MOV      r0,r7
00008a  47a8              BLX      r5
                  |L1.140|
;;;407             return;
;;;408          }
;;;409    #endif /* PNG_USER_MEM_SUPPORTED */
;;;410    #if defined(__TURBOC__) && !defined(__FLAT__)
;;;411          farfree(struct_ptr);
;;;412    #else
;;;413    # if defined(_MSC_VER) && defined(MAXSEG_64K)
;;;414          hfree(struct_ptr);
;;;415    # else
;;;416          free(struct_ptr);
;;;417    # endif
;;;418    #endif
;;;419       }
;;;420    }
00008c  f50d7d6b          ADD      sp,sp,#0x3ac
000090  bdf0              POP      {r4-r7,pc}
                  |L1.146|
000092  4620              MOV      r0,r4                 ;416
000094  f7fffffe          BL       free
                  |L1.152|
000098  bf00              NOP      
00009a  e7f7              B        |L1.140|
;;;421    
                          ENDP

                  png_destroy_struct PROC
;;;385    void /* PRIVATE */
;;;386    png_destroy_struct(png_voidp struct_ptr)
00009c  b510              PUSH     {r4,lr}
;;;387    {
00009e  4604              MOV      r4,r0
;;;388    #ifdef PNG_USER_MEM_SUPPORTED
;;;389       png_destroy_struct_2(struct_ptr, png_free_ptr_NULL, png_voidp_NULL);
0000a0  2200              MOVS     r2,#0
0000a2  4611              MOV      r1,r2
0000a4  4620              MOV      r0,r4
0000a6  f7fffffe          BL       png_destroy_struct_2
;;;390    }
0000aa  bd10              POP      {r4,pc}
;;;391    
                          ENDP

                  png_malloc_default PROC
;;;446    png_voidp PNGAPI
;;;447    png_malloc_default(png_structp png_ptr, png_uint_32 size)
0000ac  b570              PUSH     {r4-r6,lr}
;;;448    {
0000ae  4606              MOV      r6,r0
0000b0  460c              MOV      r4,r1
;;;449       png_voidp ret;
;;;450    #endif /* PNG_USER_MEM_SUPPORTED */
;;;451    
;;;452       if (png_ptr == NULL || size == 0)
0000b2  b106              CBZ      r6,|L1.182|
0000b4  b90c              CBNZ     r4,|L1.186|
                  |L1.182|
;;;453          return (NULL);
0000b6  2000              MOVS     r0,#0
                  |L1.184|
;;;454    
;;;455    #ifdef PNG_MAX_MALLOC_64K
;;;456       if (size > (png_uint_32)65536L)
;;;457       {
;;;458    #ifndef PNG_USER_MEM_SUPPORTED
;;;459          if(png_ptr->flags&PNG_FLAG_MALLOC_NULL_MEM_OK) == 0)
;;;460             png_error(png_ptr, "Cannot Allocate > 64K");
;;;461          else
;;;462    #endif
;;;463             return NULL;
;;;464       }
;;;465    #endif
;;;466    
;;;467     /* Check for overflow */
;;;468    #if defined(__TURBOC__) && !defined(__FLAT__)
;;;469     if (size != (unsigned long)size)
;;;470       ret = NULL;
;;;471     else
;;;472       ret = farmalloc(size);
;;;473    #else
;;;474    # if defined(_MSC_VER) && defined(MAXSEG_64K)
;;;475     if (size != (unsigned long)size)
;;;476       ret = NULL;
;;;477     else
;;;478       ret = halloc(size, 1);
;;;479    # else
;;;480     if (size != (size_t)size)
;;;481       ret = NULL;
;;;482     else
;;;483       ret = malloc((size_t)size);
;;;484    # endif
;;;485    #endif
;;;486    
;;;487    #ifndef PNG_USER_MEM_SUPPORTED
;;;488       if (ret == NULL && (png_ptr->flags&PNG_FLAG_MALLOC_NULL_MEM_OK) == 0)
;;;489          png_error(png_ptr, "Out of Memory");
;;;490    #endif
;;;491    
;;;492       return (ret);
;;;493    }
0000b8  bd70              POP      {r4-r6,pc}
                  |L1.186|
0000ba  42a4              CMP      r4,r4                 ;480
0000bc  d001              BEQ      |L1.194|
0000be  2500              MOVS     r5,#0                 ;481
0000c0  e003              B        |L1.202|
                  |L1.194|
0000c2  4620              MOV      r0,r4                 ;483
0000c4  f7fffffe          BL       malloc
0000c8  4605              MOV      r5,r0                 ;483
                  |L1.202|
0000ca  4628              MOV      r0,r5                 ;492
0000cc  e7f4              B        |L1.184|
;;;494    
                          ENDP

                  png_malloc PROC
;;;428    png_voidp PNGAPI
;;;429    png_malloc(png_structp png_ptr, png_uint_32 size)
0000ce  b570              PUSH     {r4-r6,lr}
;;;430    {
0000d0  4604              MOV      r4,r0
0000d2  460e              MOV      r6,r1
;;;431       png_voidp ret;
;;;432    
;;;433    #ifdef PNG_USER_MEM_SUPPORTED
;;;434       if (png_ptr == NULL || size == 0)
0000d4  b104              CBZ      r4,|L1.216|
0000d6  b90e              CBNZ     r6,|L1.220|
                  |L1.216|
;;;435          return (NULL);
0000d8  2000              MOVS     r0,#0
                  |L1.218|
;;;436    
;;;437       if(png_ptr->malloc_fn != NULL)
;;;438           ret = ((png_voidp)(*(png_ptr->malloc_fn))(png_ptr, (png_size_t)size));
;;;439       else
;;;440           ret = (png_malloc_default(png_ptr, size));
;;;441       if (ret == NULL && (png_ptr->flags&PNG_FLAG_MALLOC_NULL_MEM_OK) == 0)
;;;442           png_error(png_ptr, "Out of Memory!");
;;;443       return (ret);
;;;444    }
0000da  bd70              POP      {r4-r6,pc}
                  |L1.220|
0000dc  f8d40380          LDR      r0,[r4,#0x380]        ;437
0000e0  b130              CBZ      r0,|L1.240|
0000e2  4631              MOV      r1,r6                 ;438
0000e4  4620              MOV      r0,r4                 ;438
0000e6  f8d42380          LDR      r2,[r4,#0x380]        ;438
0000ea  4790              BLX      r2                    ;438
0000ec  4605              MOV      r5,r0                 ;438
0000ee  e004              B        |L1.250|
                  |L1.240|
0000f0  4631              MOV      r1,r6                 ;440
0000f2  4620              MOV      r0,r4                 ;440
0000f4  f7fffffe          BL       png_malloc_default
0000f8  4605              MOV      r5,r0                 ;440
                  |L1.250|
0000fa  b945              CBNZ     r5,|L1.270|
0000fc  f8d401ac          LDR      r0,[r4,#0x1ac]        ;441
000100  f4001080          AND      r0,r0,#0x100000       ;441
000104  b918              CBNZ     r0,|L1.270|
000106  a13b              ADR      r1,|L1.500|
000108  4620              MOV      r0,r4                 ;442
00010a  f7fffffe          BL       png_error
                  |L1.270|
00010e  4628              MOV      r0,r5                 ;443
000110  e7e3              B        |L1.218|
;;;445    
                          ENDP

                  png_free_default PROC
;;;511    void PNGAPI
;;;512    png_free_default(png_structp png_ptr, png_voidp ptr)
000112  b570              PUSH     {r4-r6,lr}
;;;513    {
000114  4605              MOV      r5,r0
000116  460c              MOV      r4,r1
;;;514       if (png_ptr == NULL || ptr == NULL)
000118  b105              CBZ      r5,|L1.284|
00011a  b904              CBNZ     r4,|L1.286|
                  |L1.284|
;;;515          return;
;;;516    
;;;517    #endif /* PNG_USER_MEM_SUPPORTED */
;;;518    
;;;519    #if defined(__TURBOC__) && !defined(__FLAT__)
;;;520       farfree(ptr);
;;;521    #else
;;;522    # if defined(_MSC_VER) && defined(MAXSEG_64K)
;;;523       hfree(ptr);
;;;524    # else
;;;525       free(ptr);
;;;526    # endif
;;;527    #endif
;;;528    }
00011c  bd70              POP      {r4-r6,pc}
                  |L1.286|
00011e  4620              MOV      r0,r4                 ;525
000120  f7fffffe          BL       free
000124  bf00              NOP      
000126  e7f9              B        |L1.284|
;;;529    
                          ENDP

                  png_free PROC
;;;497    void PNGAPI
;;;498    png_free(png_structp png_ptr, png_voidp ptr)
000128  b570              PUSH     {r4-r6,lr}
;;;499    {
00012a  4604              MOV      r4,r0
00012c  460d              MOV      r5,r1
;;;500       if (png_ptr == NULL || ptr == NULL)
00012e  b104              CBZ      r4,|L1.306|
000130  b905              CBNZ     r5,|L1.308|
                  |L1.306|
;;;501          return;
;;;502    
;;;503    #ifdef PNG_USER_MEM_SUPPORTED
;;;504       if (png_ptr->free_fn != NULL)
;;;505       {
;;;506          (*(png_ptr->free_fn))(png_ptr, ptr);
;;;507          return;
;;;508       }
;;;509       else png_free_default(png_ptr, ptr);
;;;510    }
000132  bd70              POP      {r4-r6,pc}
                  |L1.308|
000134  f8d40384          LDR      r0,[r4,#0x384]        ;504
000138  b128              CBZ      r0,|L1.326|
00013a  4629              MOV      r1,r5                 ;506
00013c  4620              MOV      r0,r4                 ;506
00013e  f8d42384          LDR      r2,[r4,#0x384]        ;506
000142  4790              BLX      r2                    ;506
000144  e7f5              B        |L1.306|
                  |L1.326|
000146  4629              MOV      r1,r5                 ;509
000148  4620              MOV      r0,r4                 ;509
00014a  f7fffffe          BL       png_free_default
00014e  bf00              NOP      
000150  e7ef              B        |L1.306|
;;;511    void PNGAPI
                          ENDP

                  png_malloc_warn PROC
;;;540    png_voidp PNGAPI
;;;541    png_malloc_warn(png_structp png_ptr, png_uint_32 size)
000152  e92d41f0          PUSH     {r4-r8,lr}
;;;542    {
000156  4604              MOV      r4,r0
000158  460e              MOV      r6,r1
;;;543       png_voidp ptr;
;;;544       png_uint_32 save_flags;
;;;545       if(png_ptr == NULL) return (NULL);
00015a  b914              CBNZ     r4,|L1.354|
00015c  2000              MOVS     r0,#0
                  |L1.350|
;;;546    
;;;547       save_flags=png_ptr->flags;
;;;548       png_ptr->flags|=PNG_FLAG_MALLOC_NULL_MEM_OK;
;;;549       ptr = (png_voidp)png_malloc((png_structp)png_ptr, size);
;;;550       png_ptr->flags=save_flags;
;;;551       return(ptr);
;;;552    }
00015e  e8bd81f0          POP      {r4-r8,pc}
                  |L1.354|
000162  f8d451ac          LDR      r5,[r4,#0x1ac]        ;547
000166  f8d401ac          LDR      r0,[r4,#0x1ac]        ;548
00016a  f4401080          ORR      r0,r0,#0x100000       ;548
00016e  f8c401ac          STR      r0,[r4,#0x1ac]        ;548
000172  4631              MOV      r1,r6                 ;549
000174  4620              MOV      r0,r4                 ;549
000176  f7fffffe          BL       png_malloc
00017a  4607              MOV      r7,r0                 ;549
00017c  f8c451ac          STR      r5,[r4,#0x1ac]        ;550
000180  4638              MOV      r0,r7                 ;551
000182  e7ec              B        |L1.350|
;;;553    #endif
                          ENDP

                  png_memcpy_check PROC
;;;555    png_voidp PNGAPI
;;;556    png_memcpy_check (png_structp png_ptr, png_voidp s1, png_voidp s2,
000184  e92d41f0          PUSH     {r4-r8,lr}
;;;557       png_uint_32 length)
;;;558    {
000188  4680              MOV      r8,r0
00018a  460e              MOV      r6,r1
00018c  4617              MOV      r7,r2
00018e  461c              MOV      r4,r3
;;;559       png_size_t size;
;;;560    
;;;561       size = (png_size_t)length;
000190  4625              MOV      r5,r4
;;;562       if ((png_uint_32)size != length)
000192  42a5              CMP      r5,r4
000194  d003              BEQ      |L1.414|
;;;563          png_error(png_ptr,"Overflow in png_memcpy_check.");
000196  a11b              ADR      r1,|L1.516|
000198  4640              MOV      r0,r8
00019a  f7fffffe          BL       png_error
                  |L1.414|
;;;564    
;;;565       return(png_memcpy (s1, s2, size));
00019e  462a              MOV      r2,r5
0001a0  4639              MOV      r1,r7
0001a2  4630              MOV      r0,r6
0001a4  f7fffffe          BL       memcpy
;;;566    }
0001a8  e8bd81f0          POP      {r4-r8,pc}
;;;567    
                          ENDP

                  png_memset_check PROC
;;;568    png_voidp PNGAPI
;;;569    png_memset_check (png_structp png_ptr, png_voidp s1, int value,
0001ac  e92d41f0          PUSH     {r4-r8,lr}
;;;570       png_uint_32 length)
;;;571    {
0001b0  4680              MOV      r8,r0
0001b2  460e              MOV      r6,r1
0001b4  4617              MOV      r7,r2
0001b6  461c              MOV      r4,r3
;;;572       png_size_t size;
;;;573    
;;;574       size = (png_size_t)length;
0001b8  4625              MOV      r5,r4
;;;575       if ((png_uint_32)size != length)
0001ba  42a5              CMP      r5,r4
0001bc  d003              BEQ      |L1.454|
;;;576          png_error(png_ptr,"Overflow in png_memset_check.");
0001be  a119              ADR      r1,|L1.548|
0001c0  4640              MOV      r0,r8
0001c2  f7fffffe          BL       png_error
                  |L1.454|
;;;577    
;;;578       return (png_memset (s1, value, size));
0001c6  462a              MOV      r2,r5
0001c8  4639              MOV      r1,r7
0001ca  4630              MOV      r0,r6
0001cc  f7fffffe          BL       memset
;;;579    
;;;580    }
0001d0  e8bd81f0          POP      {r4-r8,pc}
;;;581    
                          ENDP

                  png_set_mem_fn PROC
;;;586    void PNGAPI
;;;587    png_set_mem_fn(png_structp png_ptr, png_voidp mem_ptr, png_malloc_ptr
0001d4  b128              CBZ      r0,|L1.482|
;;;588      malloc_fn, png_free_ptr free_fn)
;;;589    {
;;;590       if(png_ptr != NULL) {
;;;591       png_ptr->mem_ptr = mem_ptr;
0001d6  f8c0137c          STR      r1,[r0,#0x37c]
;;;592       png_ptr->malloc_fn = malloc_fn;
0001da  f8c02380          STR      r2,[r0,#0x380]
;;;593       png_ptr->free_fn = free_fn;
0001de  f8c03384          STR      r3,[r0,#0x384]
                  |L1.482|
;;;594       }
;;;595    }
0001e2  4770              BX       lr
;;;596    
                          ENDP

                  png_get_mem_ptr PROC
;;;601    png_voidp PNGAPI
;;;602    png_get_mem_ptr(png_structp png_ptr)
0001e4  4601              MOV      r1,r0
;;;603    {
;;;604       if(png_ptr == NULL) return (NULL);
0001e6  b909              CBNZ     r1,|L1.492|
0001e8  2000              MOVS     r0,#0
                  |L1.490|
;;;605       return ((png_voidp)png_ptr->mem_ptr);
;;;606    }
0001ea  4770              BX       lr
                  |L1.492|
0001ec  f8d1037c          LDR      r0,[r1,#0x37c]        ;605
0001f0  e7fb              B        |L1.490|
;;;607    #endif /* PNG_USER_MEM_SUPPORTED */
                          ENDP

0001f2  0000              DCW      0x0000
                  |L1.500|
0001f4  4f757420          DCB      "Out of Memory!",0
0001f8  6f66204d
0001fc  656d6f72
000200  792100  
000203  00                DCB      0
                  |L1.516|
000204  4f766572          DCB      "Overflow in png_memcpy_check.",0
000208  666c6f77
00020c  20696e20
000210  706e675f
000214  6d656d63
000218  70795f63
00021c  6865636b
000220  2e00    
000222  00                DCB      0
000223  00                DCB      0
                  |L1.548|
000224  4f766572          DCB      "Overflow in png_memset_check.",0
000228  666c6f77
00022c  20696e20
000230  706e675f
000234  6d656d73
000238  65745f63
00023c  6865636b
000240  2e00    
000242  00                DCB      0
000243  00                DCB      0
