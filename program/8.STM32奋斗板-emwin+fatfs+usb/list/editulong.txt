; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\editulong.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\editulong.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -I.\GUI\AntiAlias -I.\GUI\Config -I.\GUI\ConvertColor -I.\GUI\ConvertMono -I.\GUI\Core -I.\GUI\Font -I.\GUI\GUI_X -I.\GUI\JPEG -I.\GUI\LCDDriver -I.\GUI\MemDev -I.\GUI\MultiLayer -I.\GUI\Widget -I.\GUI\WM -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\INC\ST\STM32F10x -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\editulong.crf GUI\Widget\EDITUlong.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _IncrementCursor PROC
;;;36     */
;;;37     static void _IncrementCursor(EDIT_Obj* pObj) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;38       EDIT__SetCursorPos(pObj, pObj->CursorPos + 1);
000004  6c20              LDR      r0,[r4,#0x40]
000006  f1000101          ADD      r1,r0,#1
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       EDIT__SetCursorPos
;;;39     }
000010  bd10              POP      {r4,pc}
;;;40     
                          ENDP

                  _DecChar2Int PROC
;;;44     */
;;;45     static int _DecChar2Int(int Char) {
000012  4601              MOV      r1,r0
;;;46       if ((Char >= '0') && (Char <= '9')) {
000014  2930              CMP      r1,#0x30
000016  db04              BLT      |L1.34|
000018  2939              CMP      r1,#0x39
00001a  dc02              BGT      |L1.34|
;;;47         return Char - '0';
00001c  f1a10030          SUB      r0,r1,#0x30
                  |L1.32|
;;;48       }
;;;49       return -1;
;;;50     }
000020  4770              BX       lr
                  |L1.34|
000022  f04f30ff          MOV      r0,#0xffffffff        ;49
000026  e7fb              B        |L1.32|
;;;51     
                          ENDP

                  _UpdateBuffer PROC
;;;55     */
;;;56     static void _UpdateBuffer(EDIT_Handle hObj) {
000028  e92d43fe          PUSH     {r1-r9,lr}
00002c  4680              MOV      r8,r0
;;;57       char acValue[10] = {0};
00002e  f04f0000          MOV      r0,#0
000032  9000              STR      r0,[sp,#0]
000034  9001              STR      r0,[sp,#4]
000036  9002              STR      r0,[sp,#8]
;;;58       int NumDigits = 0;
000038  4604              MOV      r4,r0
;;;59       U32 Value;
;;;60       char * s;
;;;61       EDIT_Obj * pObj;
;;;62       pObj = EDIT_H2P(hObj); /* The GUI needs not to be locked here. This function is called only from EDIT_AddKey which has already locked the GUI */
00003a  4640              MOV      r0,r8
00003c  f7fffffe          BL       GUI_ALLOC_h2p
000040  4606              MOV      r6,r0
;;;63       s = (char*) GUI_ALLOC_h2p(pObj->hpText);
000042  f9b60028          LDRSH    r0,[r6,#0x28]
000046  f7fffffe          BL       GUI_ALLOC_h2p
00004a  4607              MOV      r7,r0
;;;64       /* Convert an unsigned long value into text */
;;;65       Value = pObj->CurrentValue;
00004c  6bf5              LDR      r5,[r6,#0x3c]
;;;66       /* Fill the buffer with the digits (reverse order) */
;;;67       while (Value) {
00004e  e012              B        |L1.118|
                  |L1.80|
;;;68         U8 c = Value % 10;
000050  f04f010a          MOV      r1,#0xa
000054  fbb5f2f1          UDIV     r2,r5,r1
000058  fb015012          MLS      r0,r1,r2,r5
;;;69         acValue[NumDigits++] = '0' + c;
00005c  f1000130          ADD      r1,r0,#0x30
000060  b2cb              UXTB     r3,r1
000062  4621              MOV      r1,r4
000064  f1040401          ADD      r4,r4,#1
000068  f80d3001          STRB     r3,[sp,r1]
;;;70         Value /= 10;
00006c  f04f010a          MOV      r1,#0xa
000070  fbb5f5f1          UDIV     r5,r5,r1
;;;71       }
000074  bf00              NOP      
                  |L1.118|
000076  2d00              CMP      r5,#0                 ;67
000078  d1ea              BNE      |L1.80|
;;;72       /* Fill with leading spaces */
;;;73       while (NumDigits < pObj->MaxLen) {
00007a  e006              B        |L1.138|
                  |L1.124|
;;;74         acValue[NumDigits++] = '0';
00007c  f04f0230          MOV      r2,#0x30
000080  4620              MOV      r0,r4
000082  f1040401          ADD      r4,r4,#1
000086  f80d2000          STRB     r2,[sp,r0]
                  |L1.138|
00008a  f9b6002a          LDRSH    r0,[r6,#0x2a]         ;73
00008e  42a0              CMP      r0,r4                 ;73
000090  dcf4              BGT      |L1.124|
;;;75       }
;;;76       /* Reverse order */
;;;77       while (NumDigits) {
000092  e006              B        |L1.162|
                  |L1.148|
;;;78         *(s++) = acValue[--NumDigits];
000094  f1a40001          SUB      r0,r4,#1
000098  4604              MOV      r4,r0
00009a  f81d0000          LDRB     r0,[sp,r0]
00009e  f8070b01          STRB     r0,[r7],#1
                  |L1.162|
0000a2  2c00              CMP      r4,#0                 ;77
0000a4  d1f6              BNE      |L1.148|
;;;79       }
;;;80     }
0000a6  e8bd83fe          POP      {r1-r9,pc}
;;;81     
                          ENDP

                  _EditULong PROC
;;;85     */
;;;86     static void _EditULong(int Digit, EDIT_Obj* pObj, EDIT_Handle hObj) {
0000aa  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
0000ae  b084              SUB      sp,sp,#0x10
0000b0  4607              MOV      r7,r0
0000b2  460c              MOV      r4,r1
;;;87       U32 Result = 0;
0000b4  f04f0500          MOV      r5,#0
;;;88       int i, j, Pos = 0;
0000b8  462e              MOV      r6,r5
;;;89       char * s = (char*) GUI_ALLOC_h2p(pObj->hpText);
0000ba  f9b40028          LDRSH    r0,[r4,#0x28]
0000be  f7fffffe          BL       GUI_ALLOC_h2p
0000c2  9002              STR      r0,[sp,#8]
;;;90       for (i = 0; i < pObj->MaxLen; i++) {
0000c4  46a8              MOV      r8,r5
0000c6  e053              B        |L1.368|
                  |L1.200|
;;;91         int Index = pObj->MaxLen - i - 1;
0000c8  f9b4002a          LDRSH    r0,[r4,#0x2a]
0000cc  eba00008          SUB      r0,r0,r8
0000d0  f1a00901          SUB      r9,r0,#1
;;;92         if (Index == pObj->CursorPos) {
0000d4  6c20              LDR      r0,[r4,#0x40]
0000d6  4548              CMP      r0,r9
0000d8  d12f              BNE      |L1.314|
;;;93           /* In this case we need to check if an overflow occures */
;;;94           char c;
;;;95           int Value;
;;;96           U32 OldResult;
;;;97           /* Calculate old value (until cursor position) */
;;;98           c         = *(s + Index);
0000da  9802              LDR      r0,[sp,#8]
0000dc  f8100009          LDRB     r0,[r0,r9]
0000e0  9001              STR      r0,[sp,#4]
;;;99           Value     = _DecChar2Int(c);
0000e2  9801              LDR      r0,[sp,#4]
0000e4  f7fffffe          BL       _DecChar2Int
0000e8  4682              MOV      r10,r0
;;;100          OldResult = Result;
0000ea  46ab              MOV      r11,r5
;;;101          if (Value >= 0) {
0000ec  f1ba0f00          CMP      r10,#0
0000f0  db04              BLT      |L1.252|
;;;102            OldResult += GUI_Pow10[Pos] * Value;
0000f2  4877              LDR      r0,|L1.720|
0000f4  f8500026          LDR      r0,[r0,r6,LSL #2]
0000f8  fb00bb0a          MLA      r11,r0,r10,r11
                  |L1.252|
;;;103          }
;;;104          /* Calculate new value (until cursor position).
;;;105           * A multiplication like Result += GUI_Pow10[Pos++] * Digit
;;;106           * does not work, because in this case we have no chance to
;;;107           * notice an overflow.
;;;108           */
;;;109          for (j = 0; j < Digit; j++) {
0000fc  f04f0000          MOV      r0,#0
000100  9003              STR      r0,[sp,#0xc]
000102  e00d              B        |L1.288|
                  |L1.260|
;;;110            U32 NewResult;
;;;111            NewResult = Result + GUI_Pow10[Pos];
000104  4972              LDR      r1,|L1.720|
000106  f8511026          LDR      r1,[r1,r6,LSL #2]
00010a  eb010005          ADD      r0,r1,r5
;;;112            /* Check if we have an overflow */
;;;113            if (NewResult < Result) {
00010e  42a8              CMP      r0,r5
000110  d201              BCS      |L1.278|
;;;114              Result = pObj->Max;
000112  6b65              LDR      r5,[r4,#0x34]
;;;115              break;
000114  e007              B        |L1.294|
                  |L1.278|
;;;116            }
;;;117            Result = NewResult;
000116  4605              MOV      r5,r0
000118  9803              LDR      r0,[sp,#0xc]          ;109
00011a  f1000001          ADD      r0,r0,#1              ;109
00011e  9003              STR      r0,[sp,#0xc]          ;109
                  |L1.288|
000120  9803              LDR      r0,[sp,#0xc]          ;109
000122  42b8              CMP      r0,r7                 ;109
000124  dbee              BLT      |L1.260|
                  |L1.294|
000126  bf00              NOP                            ;115
;;;118          }
;;;119          /* Check if we have an overflow */
;;;120          if (Digit > Value) {
000128  4557              CMP      r7,r10
00012a  dd03              BLE      |L1.308|
;;;121            if (Result < OldResult) {
00012c  455d              CMP      r5,r11
00012e  d201              BCS      |L1.308|
;;;122              Result = pObj->Max;
000130  6b65              LDR      r5,[r4,#0x34]
;;;123              break;
000132  e021              B        |L1.376|
                  |L1.308|
;;;124            }
;;;125          }
;;;126          Pos++;
000134  f1060601          ADD      r6,r6,#1
;;;127        } else {
000138  e018              B        |L1.364|
                  |L1.314|
;;;128          /* If current index is not the cursor position */
;;;129          char c = *(s + Index);
00013a  9802              LDR      r0,[sp,#8]
00013c  f810b009          LDRB     r11,[r0,r9]
;;;130          int Value = _DecChar2Int(c);
000140  4658              MOV      r0,r11
000142  f7fffffe          BL       _DecChar2Int
000146  4682              MOV      r10,r0
;;;131          if (Value >= 0) {
000148  f1ba0f00          CMP      r10,#0
00014c  db0d              BLT      |L1.362|
;;;132            U32 OldResult;
;;;133            OldResult = Result;
00014e  4628              MOV      r0,r5
;;;134            Result += GUI_Pow10[Pos++] * Value;
000150  4631              MOV      r1,r6
000152  f1060601          ADD      r6,r6,#1
000156  4a5e              LDR      r2,|L1.720|
000158  f8521021          LDR      r1,[r2,r1,LSL #2]
00015c  fb01550a          MLA      r5,r1,r10,r5
;;;135            /* Check if we have an overflow */
;;;136            if (Result < OldResult) {
000160  4285              CMP      r5,r0
000162  d201              BCS      |L1.360|
;;;137              Result = pObj->Max;
000164  6b65              LDR      r5,[r4,#0x34]
;;;138              break;
000166  e007              B        |L1.376|
                  |L1.360|
;;;139            }
;;;140          }
000168  bf00              NOP      
                  |L1.362|
;;;141        }
00016a  bf00              NOP      
                  |L1.364|
00016c  f1080801          ADD      r8,r8,#1              ;90
                  |L1.368|
000170  f9b4002a          LDRSH    r0,[r4,#0x2a]         ;90
000174  4540              CMP      r0,r8                 ;90
000176  dca7              BGT      |L1.200|
                  |L1.376|
000178  bf00              NOP                            ;123
;;;142      }
;;;143      EDIT__SetValueUnsigned(hObj, Result);
00017a  4629              MOV      r1,r5
00017c  9806              LDR      r0,[sp,#0x18]
00017e  f7fffffe          BL       EDIT__SetValueUnsigned
;;;144    }
000182  b007              ADD      sp,sp,#0x1c
000184  e8bd8ff0          POP      {r4-r11,pc}
;;;145    
                          ENDP

                  _AddPosition PROC
;;;149    */
;;;150    static void _AddPosition(EDIT_Obj* pObj, EDIT_Handle hObj, int Sign) {
000188  e92d47f0          PUSH     {r4-r10,lr}
00018c  4604              MOV      r4,r0
00018e  460f              MOV      r7,r1
000190  4690              MOV      r8,r2
;;;151      int Pos;
;;;152      I32 v, NewValue;
;;;153      v = Sign;
000192  4645              MOV      r5,r8
;;;154      Pos = pObj->MaxLen - pObj->CursorPos-1;
000194  f9b4002a          LDRSH    r0,[r4,#0x2a]
000198  6c21              LDR      r1,[r4,#0x40]
00019a  eba00001          SUB      r0,r0,r1
00019e  f1a00601          SUB      r6,r0,#1
;;;155      if (pObj->NumDecs && (Pos > pObj->NumDecs)) {
0001a2  f8940038          LDRB     r0,[r4,#0x38]
0001a6  b128              CBZ      r0,|L1.436|
0001a8  f8940038          LDRB     r0,[r4,#0x38]
0001ac  42b0              CMP      r0,r6
0001ae  da01              BGE      |L1.436|
;;;156        Pos--;
0001b0  f1a60601          SUB      r6,r6,#1
                  |L1.436|
;;;157      }
;;;158      while (Pos--) {
0001b4  e003              B        |L1.446|
                  |L1.438|
;;;159        v *= 10;
0001b6  eb050085          ADD      r0,r5,r5,LSL #2
0001ba  ea4f0540          LSL      r5,r0,#1
                  |L1.446|
0001be  0030              MOVS     r0,r6                 ;158
0001c0  f1a60601          SUB      r6,r6,#1              ;158
0001c4  d1f7              BNE      |L1.438|
;;;160      }
;;;161      NewValue = pObj->CurrentValue + v;
0001c6  6be0              LDR      r0,[r4,#0x3c]
0001c8  eb000905          ADD      r9,r0,r5
;;;162      /*
;;;163       * Check if overflow occurs
;;;164       */
;;;165      if (v > 0) {
0001cc  2d00              CMP      r5,#0
0001ce  dd07              BLE      |L1.480|
;;;166        /* If result of addition is less than previous value he have an overflow */
;;;167        if (((U32)pObj->CurrentValue + v) < (U32)pObj->CurrentValue) {
0001d0  6be0              LDR      r0,[r4,#0x3c]
0001d2  4428              ADD      r0,r0,r5
0001d4  6be1              LDR      r1,[r4,#0x3c]
0001d6  4288              CMP      r0,r1
0001d8  d20b              BCS      |L1.498|
;;;168          NewValue = pObj->Max; /* Set maximum value */
0001da  f8d49034          LDR      r9,[r4,#0x34]
0001de  e008              B        |L1.498|
                  |L1.480|
;;;169        }
;;;170      } else if (v < 0) {
0001e0  2d00              CMP      r5,#0
0001e2  da06              BGE      |L1.498|
;;;171        /* If result of addition is more than previous value he have an overflow */
;;;172        if (((U32)pObj->CurrentValue + v) > (U32)pObj->CurrentValue) {
0001e4  6be0              LDR      r0,[r4,#0x3c]
0001e6  4428              ADD      r0,r0,r5
0001e8  6be1              LDR      r1,[r4,#0x3c]
0001ea  4288              CMP      r0,r1
0001ec  d901              BLS      |L1.498|
;;;173          NewValue = pObj->Min; /* Set minimum value */
0001ee  f8d49030          LDR      r9,[r4,#0x30]
                  |L1.498|
;;;174        }
;;;175      }
;;;176      EDIT__SetValueUnsigned(hObj, NewValue);
0001f2  4649              MOV      r1,r9
0001f4  4638              MOV      r0,r7
0001f6  f7fffffe          BL       EDIT__SetValueUnsigned
;;;177    }
0001fa  e8bd87f0          POP      {r4-r10,pc}
;;;178    
                          ENDP

                  _AddKey PROC
;;;182    */
;;;183    static void _AddKey(EDIT_Handle hObj, int Key) {
0001fe  e92d41f0          PUSH     {r4-r8,lr}
000202  4605              MOV      r5,r0
000204  460e              MOV      r6,r1
;;;184      EDIT_Obj * pObj;
;;;185      pObj = EDIT_H2P(hObj); /* The GUI needs not to be locked here. This function is called only from EDIT_AddKey which has already locked the GUI */
000206  4628              MOV      r0,r5
000208  f7fffffe          BL       GUI_ALLOC_h2p
00020c  4604              MOV      r4,r0
;;;186      if (pObj) {
00020e  b37c              CBZ      r4,|L1.624|
;;;187        switch (Key) {
000210  2e10              CMP      r6,#0x10
000212  d017              BEQ      |L1.580|
000214  2e11              CMP      r6,#0x11
000216  d004              BEQ      |L1.546|
000218  2e12              CMP      r6,#0x12
00021a  d00f              BEQ      |L1.572|
00021c  2e13              CMP      r6,#0x13
00021e  d117              BNE      |L1.592|
000220  e005              B        |L1.558|
                  |L1.546|
;;;188        case GUI_KEY_UP:
;;;189          _AddPosition(pObj, hObj, 1);
000222  2201              MOVS     r2,#1
000224  4629              MOV      r1,r5
000226  4620              MOV      r0,r4
000228  f7fffffe          BL       _AddPosition
;;;190          break;
00022c  e01f              B        |L1.622|
                  |L1.558|
;;;191        case GUI_KEY_DOWN:
;;;192          _AddPosition(pObj, hObj, -1);
00022e  f04f32ff          MOV      r2,#0xffffffff
000232  4629              MOV      r1,r5
000234  4620              MOV      r0,r4
000236  f7fffffe          BL       _AddPosition
;;;193          break;
00023a  e018              B        |L1.622|
                  |L1.572|
;;;194        case GUI_KEY_RIGHT:
;;;195          _IncrementCursor(pObj);
00023c  4620              MOV      r0,r4
00023e  f7fffffe          BL       _IncrementCursor
;;;196          break;
000242  e014              B        |L1.622|
                  |L1.580|
;;;197        case GUI_KEY_LEFT:
;;;198          EDIT__SetCursorPos(pObj, pObj->CursorPos - 1);
000244  6c20              LDR      r0,[r4,#0x40]
000246  1e41              SUBS     r1,r0,#1
000248  4620              MOV      r0,r4
00024a  f7fffffe          BL       EDIT__SetCursorPos
;;;199          break;
00024e  e00e              B        |L1.622|
                  |L1.592|
;;;200        default:
;;;201          {
;;;202            int Digit = _DecChar2Int(Key);
000250  4630              MOV      r0,r6
000252  f7fffffe          BL       _DecChar2Int
000256  4607              MOV      r7,r0
;;;203            if (Digit >= 0) {
000258  2f00              CMP      r7,#0
00025a  db07              BLT      |L1.620|
;;;204              _EditULong(Digit, pObj, hObj);
00025c  462a              MOV      r2,r5
00025e  4621              MOV      r1,r4
000260  4638              MOV      r0,r7
000262  f7fffffe          BL       _EditULong
;;;205              _IncrementCursor(pObj);
000266  4620              MOV      r0,r4
000268  f7fffffe          BL       _IncrementCursor
                  |L1.620|
;;;206            }
;;;207          }
;;;208          break;
00026c  bf00              NOP      
                  |L1.622|
00026e  bf00              NOP                            ;190
                  |L1.624|
;;;209        }
;;;210      }
;;;211      _UpdateBuffer(hObj);
000270  4628              MOV      r0,r5
000272  f7fffffe          BL       _UpdateBuffer
;;;212    }
000276  e8bd81f0          POP      {r4-r8,pc}
;;;213    
                          ENDP

                  EDIT_SetUlongMode PROC
;;;223    */
;;;224    void EDIT_SetUlongMode(EDIT_Handle hEdit, U32 Value, U32 Min, U32 Max) {
00027a  e92d41f0          PUSH     {r4-r8,lr}
00027e  4680              MOV      r8,r0
000280  460d              MOV      r5,r1
000282  4616              MOV      r6,r2
000284  461f              MOV      r7,r3
;;;225      EDIT_Obj* pObj;
;;;226      WM_LOCK();
;;;227      if (hEdit) {
000286  f1b80f00          CMP      r8,#0
00028a  d01e              BEQ      |L1.714|
;;;228        pObj = EDIT_H2P(hEdit);
00028c  4640              MOV      r0,r8
00028e  f7fffffe          BL       GUI_ALLOC_h2p
000292  4604              MOV      r4,r0
;;;229        if (Value > Max) {
000294  42bd              CMP      r5,r7
000296  d901              BLS      |L1.668|
;;;230          Value = Max;
000298  463d              MOV      r5,r7
00029a  e002              B        |L1.674|
                  |L1.668|
;;;231        } else if (Value < Min) {
00029c  42b5              CMP      r5,r6
00029e  d200              BCS      |L1.674|
;;;232          Value = Min;
0002a0  4635              MOV      r5,r6
                  |L1.674|
;;;233        }
;;;234        pObj->pfAddKeyEx    = _AddKey;
0002a2  480c              LDR      r0,|L1.724|
0002a4  64e0              STR      r0,[r4,#0x4c]
;;;235        pObj->pfUpdateBuffer= _UpdateBuffer;
0002a6  480c              LDR      r0,|L1.728|
0002a8  6520              STR      r0,[r4,#0x50]
;;;236        pObj->CurrentValue  = Value;
0002aa  63e5              STR      r5,[r4,#0x3c]
;;;237        pObj->CursorPos     = 0;
0002ac  f04f0000          MOV      r0,#0
0002b0  6420              STR      r0,[r4,#0x40]
;;;238        pObj->Min           = Min;
0002b2  6326              STR      r6,[r4,#0x30]
;;;239        pObj->Max           = Max;
0002b4  6367              STR      r7,[r4,#0x34]
;;;240        pObj->EditMode      = GUI_EDIT_MODE_OVERWRITE;
0002b6  f04f0001          MOV      r0,#1
0002ba  f8840048          STRB     r0,[r4,#0x48]
;;;241        _UpdateBuffer(hEdit);
0002be  4640              MOV      r0,r8
0002c0  f7fffffe          BL       _UpdateBuffer
;;;242        WM_Invalidate(hEdit);
0002c4  4640              MOV      r0,r8
0002c6  f7fffffe          BL       WM_InvalidateWindow
                  |L1.714|
;;;243      }
;;;244      WM_UNLOCK();
;;;245    }
0002ca  e8bd81f0          POP      {r4-r8,pc}
;;;246    
                          ENDP

0002ce  0000              DCW      0x0000
                  |L1.720|
                          DCD      GUI_Pow10
                  |L1.724|
                          DCD      _AddKey
                  |L1.728|
                          DCD      _UpdateBuffer
